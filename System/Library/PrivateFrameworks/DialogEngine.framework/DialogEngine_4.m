const google::protobuf::UnknownFieldSet *SnippetUI::Visualization_Image::InternalSerializeWithCachedSizesToArray(SnippetUI::Visualization_Image *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  SnippetUI::VisualProperty *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  google::protobuf::UnknownFieldSet *v11;
  _BYTE *v12;
  _BYTE *v13;
  unsigned int v14;
  unsigned int v15;
  SnippetUI::TextProperty *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  google::protobuf::UnknownFieldSet *v20;
  _BYTE *v21;
  _BYTE *v22;
  unsigned int v23;
  unsigned int v24;
  SnippetUI::TextProperty *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  google::protobuf::UnknownFieldSet *v29;
  _BYTE *v30;
  _BYTE *v31;
  unsigned int v32;
  unsigned int v33;
  SnippetUI::ActionProperty *v34;
  unsigned int v35;
  google::protobuf::UnknownFieldSet *v36;
  unsigned int v37;
  _BYTE *v38;
  _BYTE *v39;
  unsigned int v40;
  unsigned int v41;
  google::protobuf::internal *v42;
  const char *v43;
  google::protobuf::internal *v44;
  const char *v45;
  uint64_t v46;

  v5 = (char *)a2;
  if (this == (SnippetUI::Visualization_Image *)&SnippetUI::_Visualization_Image_default_instance_)
    goto LABEL_49;
  v7 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 4);
  if (v7)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v7 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 4);
    }
    *v5 = 10;
    v8 = *((_DWORD *)v7 + 15);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v12 = v5 + 2;
        do
        {
          v13 = v12;
          *v12++ = v10 | 0x80;
          v14 = v10 >> 7;
          v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        v11 = (google::protobuf::UnknownFieldSet *)(v13 + 2);
        *v12 = v14;
        goto LABEL_13;
      }
      v5[2] = v10;
      v9 = 3;
    }
    else
    {
      v5[1] = v8;
      v9 = 2;
    }
    v11 = (google::protobuf::UnknownFieldSet *)&v5[v9];
LABEL_13:
    v5 = (char *)SnippetUI::VisualProperty::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
  if (!v16)
    goto LABEL_26;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
  }
  *v5 = 18;
  v17 = *((_DWORD *)v16 + 15);
  if (v17 > 0x7F)
  {
    v5[1] = v17 | 0x80;
    v19 = v17 >> 7;
    if (v17 >> 14)
    {
      v21 = v5 + 2;
      do
      {
        v22 = v21;
        *v21++ = v19 | 0x80;
        v23 = v19 >> 7;
        v24 = v19 >> 14;
        v19 >>= 7;
      }
      while (v24);
      v20 = (google::protobuf::UnknownFieldSet *)(v22 + 2);
      *v21 = v23;
      goto LABEL_25;
    }
    v5[2] = v19;
    v18 = 3;
  }
  else
  {
    v5[1] = v17;
    v18 = 2;
  }
  v20 = (google::protobuf::UnknownFieldSet *)&v5[v18];
LABEL_25:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v16, v20, a3, a4);
LABEL_26:
  v25 = (SnippetUI::TextProperty *)*((_QWORD *)this + 6);
  if (!v25)
    goto LABEL_38;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v25 = (SnippetUI::TextProperty *)*((_QWORD *)this + 6);
  }
  *v5 = 26;
  v26 = *((_DWORD *)v25 + 15);
  if (v26 > 0x7F)
  {
    v5[1] = v26 | 0x80;
    v28 = v26 >> 7;
    if (v26 >> 14)
    {
      v30 = v5 + 2;
      do
      {
        v31 = v30;
        *v30++ = v28 | 0x80;
        v32 = v28 >> 7;
        v33 = v28 >> 14;
        v28 >>= 7;
      }
      while (v33);
      v29 = (google::protobuf::UnknownFieldSet *)(v31 + 2);
      *v30 = v32;
      goto LABEL_37;
    }
    v5[2] = v28;
    v27 = 3;
  }
  else
  {
    v5[1] = v26;
    v27 = 2;
  }
  v29 = (google::protobuf::UnknownFieldSet *)&v5[v27];
LABEL_37:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v25, v29, a3, a4);
LABEL_38:
  v34 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 7);
  if (v34)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v34 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 7);
    }
    *v5 = 34;
    v35 = *((_DWORD *)v34 + 12);
    if (v35 > 0x7F)
    {
      v5[1] = v35 | 0x80;
      v37 = v35 >> 7;
      if (v35 >> 14)
      {
        v38 = v5 + 2;
        do
        {
          v39 = v38;
          *v38++ = v37 | 0x80;
          v40 = v37 >> 7;
          v41 = v37 >> 14;
          v37 >>= 7;
        }
        while (v41);
        v36 = (google::protobuf::UnknownFieldSet *)(v39 + 2);
        *v38 = v40;
      }
      else
      {
        v5[2] = v37;
        v36 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v35;
      v36 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v34, v36, a3, a4);
  }
LABEL_49:
  v42 = (google::protobuf::internal *)*((_QWORD *)this + 2);
  if (*((char *)v42 + 23) < 0)
  {
    v43 = (const char *)*((_QWORD *)v42 + 1);
    if (!v43)
      goto LABEL_55;
    v42 = *(google::protobuf::internal **)v42;
    goto LABEL_54;
  }
  v43 = (const char *)*((unsigned __int8 *)v42 + 23);
  if (*((_BYTE *)v42 + 23))
  {
LABEL_54:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v42, v43, 1, (google::protobuf::internal *)"SnippetUI.Visualization_Image.component_name");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 5, *((_QWORD *)this + 2), v5);
  }
LABEL_55:
  v44 = (google::protobuf::internal *)*((_QWORD *)this + 3);
  if (*((char *)v44 + 23) < 0)
  {
    v45 = (const char *)*((_QWORD *)v44 + 1);
    if (!v45)
      goto LABEL_61;
    v44 = *(google::protobuf::internal **)v44;
    goto LABEL_60;
  }
  v45 = (const char *)*((unsigned __int8 *)v44 + 23);
  if (*((_BYTE *)v44 + 23))
  {
LABEL_60:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v44, v45, 1, (google::protobuf::internal *)"SnippetUI.Visualization_Image.link_identifier");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 6, *((_QWORD *)this + 3), v5);
  }
LABEL_61:
  v46 = *((_QWORD *)this + 1);
  if ((v46 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v46 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)v5;
}

void SnippetUI::Visualization_Image::CopyFrom(SnippetUI::Visualization_Image *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::Visualization_Image::Clear(this);
    SnippetUI::Visualization_Image::MergeFrom(this, a2);
  }
}

void SnippetUI::Visualization_Image::MergeFrom(SnippetUI::Visualization_Image *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::Visualization_Image *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Visualization.pb.cc", 971);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::Visualization_Image::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BF943AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Visualization_Image::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 64) = a2;
  return this;
}

uint64_t SnippetUI::Visualization_Image::GetMetadata(SnippetUI::Visualization_Image *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_Visualization_2eproto);
  return qword_1EF581A58;
}

void *SnippetUI::Visualization_Image::default_instance(SnippetUI::Visualization_Image *this)
{
  if (atomic_load(scc_info_Visualization_Image_Visualization_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Visualization_Image_Visualization_2eproto);
  return &SnippetUI::_Visualization_Image_default_instance_;
}

void SnippetUI::Visualization_Image::MergeFrom(SnippetUI::Visualization_Image *this, const SnippetUI::Visualization_Image *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  int **v10;
  int **v11;
  int **v12;
  int **v13;
  int **v14;
  int **v15;
  int **v16;
  int **v17;
  int **v18;
  int **v19;
  int **v20;
  int **v21;
  char v22;
  std::string v23[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v23, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Visualization.pb.cc", 986);
    v4 = google::protobuf::internal::LogMessage::operator<<(v23, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v22, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v23[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Visualization_Image *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_QWORD *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v6);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(_QWORD *)(v8 + 8))
      goto LABEL_21;
  }
  else if (!*(_BYTE *)(v8 + 23))
  {
    goto LABEL_21;
  }
  v9 = (uint64_t *)*((_QWORD *)this + 3);
  if (v9 != (uint64_t *)v8)
  {
    if (v9 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
    else
      std::string::operator=(*((std::string **)this + 3), (const std::string *)v8);
  }
LABEL_21:
  if (a2 != (const SnippetUI::Visualization_Image *)&SnippetUI::_Visualization_Image_default_instance_)
  {
    v10 = (int **)*((_QWORD *)a2 + 4);
    if (v10)
    {
      v11 = (int **)*((_QWORD *)this + 4);
      if (!v11)
      {
        v11 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((_QWORD *)this + 4) = v11;
        v10 = (int **)*((_QWORD *)a2 + 4);
      }
      if (v10)
        v12 = v10;
      else
        v12 = (int **)&SnippetUI::_VisualProperty_default_instance_;
      SnippetUI::VisualProperty::MergeFrom(v11, v12);
    }
    v13 = (int **)*((_QWORD *)a2 + 5);
    if (v13)
    {
      v14 = (int **)*((_QWORD *)this + 5);
      if (!v14)
      {
        v14 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 5) = v14;
        v13 = (int **)*((_QWORD *)a2 + 5);
      }
      if (v13)
        v15 = v13;
      else
        v15 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v14, v15);
    }
    v16 = (int **)*((_QWORD *)a2 + 6);
    if (v16)
    {
      v17 = (int **)*((_QWORD *)this + 6);
      if (!v17)
      {
        v17 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 6) = v17;
        v16 = (int **)*((_QWORD *)a2 + 6);
      }
      if (v16)
        v18 = v16;
      else
        v18 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v17, v18);
    }
    v19 = (int **)*((_QWORD *)a2 + 7);
    if (v19)
    {
      v20 = (int **)*((_QWORD *)this + 7);
      if (!v20)
      {
        v20 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((_QWORD *)this + 7) = v20;
        v19 = (int **)*((_QWORD *)a2 + 7);
      }
      if (v19)
        v21 = v19;
      else
        v21 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      SnippetUI::ActionProperty::MergeFrom(v20, v21);
    }
  }
}

void sub_1BF943D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::Visualization_Image *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Visualization_Image>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::Visualization_Image *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::Visualization_Image *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x48uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Visualization_Image>);
    SnippetUI::Visualization_Image::Visualization_Image(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::Visualization_Image *)operator new();
    SnippetUI::Visualization_Image::Visualization_Image(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BF943DCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C4025EBE0BELL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Visualization_Image>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void *SnippetUI::Visualization_Chart::default_instance(SnippetUI::Visualization_Chart *this)
{
  if (atomic_load(scc_info_Visualization_Chart_Visualization_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Visualization_Chart_Visualization_2eproto);
  return &SnippetUI::_Visualization_Chart_default_instance_;
}

void SnippetUI::Visualization_Chart::MergeFrom(SnippetUI::Visualization_Chart *this, const SnippetUI::Visualization_Chart *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  int **v10;
  int **v11;
  int **v12;
  int **v13;
  int **v14;
  int **v15;
  int **v16;
  int **v17;
  int **v18;
  int **v19;
  int **v20;
  int **v21;
  char v22;
  std::string v23[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v23, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Visualization.pb.cc", 553);
    v4 = google::protobuf::internal::LogMessage::operator<<(v23, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v22, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v23[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Visualization_Chart *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_QWORD *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v6);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(_QWORD *)(v8 + 8))
      goto LABEL_21;
  }
  else if (!*(_BYTE *)(v8 + 23))
  {
    goto LABEL_21;
  }
  v9 = (uint64_t *)*((_QWORD *)this + 3);
  if (v9 != (uint64_t *)v8)
  {
    if (v9 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
    else
      std::string::operator=(*((std::string **)this + 3), (const std::string *)v8);
  }
LABEL_21:
  if (a2 != (const SnippetUI::Visualization_Chart *)&SnippetUI::_Visualization_Chart_default_instance_)
  {
    v10 = (int **)*((_QWORD *)a2 + 4);
    if (v10)
    {
      v11 = (int **)*((_QWORD *)this + 4);
      if (!v11)
      {
        v11 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((_QWORD *)this + 4) = v11;
        v10 = (int **)*((_QWORD *)a2 + 4);
      }
      if (v10)
        v12 = v10;
      else
        v12 = (int **)&SnippetUI::_VisualProperty_default_instance_;
      SnippetUI::VisualProperty::MergeFrom(v11, v12);
    }
    v13 = (int **)*((_QWORD *)a2 + 5);
    if (v13)
    {
      v14 = (int **)*((_QWORD *)this + 5);
      if (!v14)
      {
        v14 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 5) = v14;
        v13 = (int **)*((_QWORD *)a2 + 5);
      }
      if (v13)
        v15 = v13;
      else
        v15 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v14, v15);
    }
    v16 = (int **)*((_QWORD *)a2 + 6);
    if (v16)
    {
      v17 = (int **)*((_QWORD *)this + 6);
      if (!v17)
      {
        v17 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 6) = v17;
        v16 = (int **)*((_QWORD *)a2 + 6);
      }
      if (v16)
        v18 = v16;
      else
        v18 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v17, v18);
    }
    v19 = (int **)*((_QWORD *)a2 + 7);
    if (v19)
    {
      v20 = (int **)*((_QWORD *)this + 7);
      if (!v20)
      {
        v20 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((_QWORD *)this + 7) = v20;
        v19 = (int **)*((_QWORD *)a2 + 7);
      }
      if (v19)
        v21 = v19;
      else
        v21 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      SnippetUI::ActionProperty::MergeFrom(v20, v21);
    }
  }
}

void sub_1BF944138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::Visualization_Chart *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Visualization_Chart>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::Visualization_Chart *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::Visualization_Chart *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x48uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Visualization_Chart>);
    SnippetUI::Visualization_Chart::Visualization_Chart(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::Visualization_Chart *)operator new();
    SnippetUI::Visualization_Chart::Visualization_Chart(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BF9441D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C4025EBE0BELL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Visualization_Chart>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void SnippetUI::Visualization_Chart::InitAsDefaultInstance(SnippetUI::Visualization_Chart *this)
{
  qword_1ED1D4650 = (uint64_t)&SnippetUI::_VisualProperty_default_instance_;
  unk_1ED1D4658 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D4660 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D4668 = &SnippetUI::_ActionProperty_default_instance_;
}

uint64_t SnippetUI::Visualization_Chart::_Internal::visual(SnippetUI::Visualization_Chart::_Internal *this, const SnippetUI::Visualization_Chart *a2)
{
  return *((_QWORD *)this + 4);
}

uint64_t SnippetUI::Visualization_Chart::_Internal::text_1(SnippetUI::Visualization_Chart::_Internal *this, const SnippetUI::Visualization_Chart *a2)
{
  return *((_QWORD *)this + 5);
}

uint64_t SnippetUI::Visualization_Chart::_Internal::text_2(SnippetUI::Visualization_Chart::_Internal *this, const SnippetUI::Visualization_Chart *a2)
{
  return *((_QWORD *)this + 6);
}

uint64_t SnippetUI::Visualization_Chart::_Internal::action(SnippetUI::Visualization_Chart::_Internal *this, const SnippetUI::Visualization_Chart *a2)
{
  return *((_QWORD *)this + 7);
}

uint64_t SnippetUI::Visualization_Chart::clear_visual(SnippetUI::Visualization_Chart *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 4) = 0;
  return result;
}

uint64_t SnippetUI::Visualization_Chart::clear_text_1(SnippetUI::Visualization_Chart *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 5);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 5) = 0;
  return result;
}

uint64_t SnippetUI::Visualization_Chart::clear_text_2(SnippetUI::Visualization_Chart *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 6);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 6) = 0;
  return result;
}

uint64_t SnippetUI::Visualization_Chart::clear_action(SnippetUI::Visualization_Chart *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 7);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 7) = 0;
  return result;
}

SnippetUI::Visualization_Chart *SnippetUI::Visualization_Chart::Visualization_Chart(SnippetUI::Visualization_Chart *this, const SnippetUI::Visualization_Chart *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  SnippetUI::VisualProperty *v10;
  SnippetUI::ActionProperty *v11;
  SnippetUI::TextProperty *v12;
  SnippetUI::TextProperty *v13;

  *(_QWORD *)this = &off_1E792E9B0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 16) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Visualization_Chart *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
    v9 = *(_QWORD *)(v8 + 8);
  else
    v9 = *(unsigned __int8 *)(v8 + 23);
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v9)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
  if (a2 == (const SnippetUI::Visualization_Chart *)&SnippetUI::_Visualization_Chart_default_instance_)
  {
    v11 = 0;
    *((_QWORD *)this + 4) = 0;
    *((_QWORD *)this + 5) = 0;
    *((_QWORD *)this + 6) = 0;
  }
  else
  {
    if (*((_QWORD *)a2 + 4))
    {
      v10 = (SnippetUI::VisualProperty *)operator new();
      SnippetUI::VisualProperty::VisualProperty(v10, *((const SnippetUI::VisualProperty **)a2 + 4));
    }
    else
    {
      v10 = 0;
    }
    *((_QWORD *)this + 4) = v10;
    if (*((_QWORD *)a2 + 5))
    {
      v12 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v12, *((const SnippetUI::TextProperty **)a2 + 5));
    }
    else
    {
      v12 = 0;
    }
    *((_QWORD *)this + 5) = v12;
    if (*((_QWORD *)a2 + 6))
    {
      v13 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v13, *((const SnippetUI::TextProperty **)a2 + 6));
    }
    else
    {
      v13 = 0;
    }
    *((_QWORD *)this + 6) = v13;
    if (*((_QWORD *)a2 + 7))
    {
      v11 = (SnippetUI::ActionProperty *)operator new();
      SnippetUI::ActionProperty::ActionProperty(v11, *((const SnippetUI::ActionProperty **)a2 + 7));
    }
    else
    {
      v11 = 0;
    }
  }
  *((_QWORD *)this + 7) = v11;
  return this;
}

void sub_1BF9445F8(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x1C3B8D890](v2, 0x10A1C40B18DE219);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Visualization_Chart::CopyFrom(SnippetUI::Visualization_Chart *this, const SnippetUI::Visualization_Chart *a2)
{
  if (a2 != this)
  {
    SnippetUI::Visualization_Chart::Clear(this);
    SnippetUI::Visualization_Chart::MergeFrom(this, a2);
  }
}

void SnippetUI::Visualization_Chart::InternalSwap(SnippetUI::Visualization_Chart *this, SnippetUI::Visualization_Chart *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  google::protobuf::UnknownFieldSet *v23;

  v4 = (SnippetUI::Visualization_Chart *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v23;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 2);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = (uint64_t *)*((_QWORD *)this + 3);
  v14 = (uint64_t **)((char *)a2 + 24);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_19;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v13 = (uint64_t *)*((_QWORD *)this + 3);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v13[2];
  v17 = *(_OWORD *)v13;
  v18 = v15[2];
  *(_OWORD *)v13 = *(_OWORD *)v15;
  v13[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_19:
  v19 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v19;
  v20 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v20;
  v21 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v21;
  v22 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v22;
}

void SnippetUI::Visualization_Image::InitAsDefaultInstance(SnippetUI::Visualization_Image *this)
{
  qword_1ED1D4698 = (uint64_t)&SnippetUI::_VisualProperty_default_instance_;
  unk_1ED1D46A0 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D46A8 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D46B0 = &SnippetUI::_ActionProperty_default_instance_;
}

uint64_t SnippetUI::Visualization_Image::_Internal::visual(SnippetUI::Visualization_Image::_Internal *this, const SnippetUI::Visualization_Image *a2)
{
  return *((_QWORD *)this + 4);
}

uint64_t SnippetUI::Visualization_Image::_Internal::text_1(SnippetUI::Visualization_Image::_Internal *this, const SnippetUI::Visualization_Image *a2)
{
  return *((_QWORD *)this + 5);
}

uint64_t SnippetUI::Visualization_Image::_Internal::text_2(SnippetUI::Visualization_Image::_Internal *this, const SnippetUI::Visualization_Image *a2)
{
  return *((_QWORD *)this + 6);
}

uint64_t SnippetUI::Visualization_Image::_Internal::action(SnippetUI::Visualization_Image::_Internal *this, const SnippetUI::Visualization_Image *a2)
{
  return *((_QWORD *)this + 7);
}

uint64_t SnippetUI::Visualization_Image::clear_visual(SnippetUI::Visualization_Image *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 4) = 0;
  return result;
}

uint64_t SnippetUI::Visualization_Image::clear_text_1(SnippetUI::Visualization_Image *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 5);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 5) = 0;
  return result;
}

uint64_t SnippetUI::Visualization_Image::clear_text_2(SnippetUI::Visualization_Image *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 6);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 6) = 0;
  return result;
}

uint64_t SnippetUI::Visualization_Image::clear_action(SnippetUI::Visualization_Image *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 7);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 7) = 0;
  return result;
}

SnippetUI::Visualization_Image *SnippetUI::Visualization_Image::Visualization_Image(SnippetUI::Visualization_Image *this, const SnippetUI::Visualization_Image *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  SnippetUI::VisualProperty *v10;
  SnippetUI::ActionProperty *v11;
  SnippetUI::TextProperty *v12;
  SnippetUI::TextProperty *v13;

  *(_QWORD *)this = &off_1E792EA70;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 16) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Visualization_Image *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
    v9 = *(_QWORD *)(v8 + 8);
  else
    v9 = *(unsigned __int8 *)(v8 + 23);
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v9)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
  if (a2 == (const SnippetUI::Visualization_Image *)&SnippetUI::_Visualization_Image_default_instance_)
  {
    v11 = 0;
    *((_QWORD *)this + 4) = 0;
    *((_QWORD *)this + 5) = 0;
    *((_QWORD *)this + 6) = 0;
  }
  else
  {
    if (*((_QWORD *)a2 + 4))
    {
      v10 = (SnippetUI::VisualProperty *)operator new();
      SnippetUI::VisualProperty::VisualProperty(v10, *((const SnippetUI::VisualProperty **)a2 + 4));
    }
    else
    {
      v10 = 0;
    }
    *((_QWORD *)this + 4) = v10;
    if (*((_QWORD *)a2 + 5))
    {
      v12 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v12, *((const SnippetUI::TextProperty **)a2 + 5));
    }
    else
    {
      v12 = 0;
    }
    *((_QWORD *)this + 5) = v12;
    if (*((_QWORD *)a2 + 6))
    {
      v13 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v13, *((const SnippetUI::TextProperty **)a2 + 6));
    }
    else
    {
      v13 = 0;
    }
    *((_QWORD *)this + 6) = v13;
    if (*((_QWORD *)a2 + 7))
    {
      v11 = (SnippetUI::ActionProperty *)operator new();
      SnippetUI::ActionProperty::ActionProperty(v11, *((const SnippetUI::ActionProperty **)a2 + 7));
    }
    else
    {
      v11 = 0;
    }
  }
  *((_QWORD *)this + 7) = v11;
  return this;
}

void sub_1BF944B14(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x1C3B8D890](v2, 0x10A1C40B18DE219);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Visualization_Image::CopyFrom(SnippetUI::Visualization_Image *this, const SnippetUI::Visualization_Image *a2)
{
  if (a2 != this)
  {
    SnippetUI::Visualization_Image::Clear(this);
    SnippetUI::Visualization_Image::MergeFrom(this, a2);
  }
}

void SnippetUI::Visualization_Image::InternalSwap(SnippetUI::Visualization_Image *this, SnippetUI::Visualization_Image *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  google::protobuf::UnknownFieldSet *v23;

  v4 = (SnippetUI::Visualization_Image *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v23;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 2);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = (uint64_t *)*((_QWORD *)this + 3);
  v14 = (uint64_t **)((char *)a2 + 24);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_19;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v13 = (uint64_t *)*((_QWORD *)this + 3);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v13[2];
  v17 = *(_OWORD *)v13;
  v18 = v15[2];
  *(_OWORD *)v13 = *(_OWORD *)v15;
  v13[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_19:
  v19 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v19;
  v20 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v20;
  v21 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v21;
  v22 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v22;
}

void SnippetUI::Visualization_Map::InitAsDefaultInstance(SnippetUI::Visualization_Map *this)
{
  qword_1ED1D4358 = (uint64_t)&SnippetUI::_VisualProperty_default_instance_;
  unk_1ED1D4360 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D4368 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D4370 = &SnippetUI::_ActionProperty_default_instance_;
}

uint64_t SnippetUI::Visualization_Map::_Internal::map_property(SnippetUI::Visualization_Map::_Internal *this, const SnippetUI::Visualization_Map *a2)
{
  return *((_QWORD *)this + 4);
}

uint64_t SnippetUI::Visualization_Map::_Internal::text_1(SnippetUI::Visualization_Map::_Internal *this, const SnippetUI::Visualization_Map *a2)
{
  return *((_QWORD *)this + 5);
}

uint64_t SnippetUI::Visualization_Map::_Internal::text_2(SnippetUI::Visualization_Map::_Internal *this, const SnippetUI::Visualization_Map *a2)
{
  return *((_QWORD *)this + 6);
}

uint64_t SnippetUI::Visualization_Map::_Internal::action(SnippetUI::Visualization_Map::_Internal *this, const SnippetUI::Visualization_Map *a2)
{
  return *((_QWORD *)this + 7);
}

uint64_t SnippetUI::Visualization_Map::clear_map_property(SnippetUI::Visualization_Map *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 4) = 0;
  return result;
}

uint64_t SnippetUI::Visualization_Map::clear_text_1(SnippetUI::Visualization_Map *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 5);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 5) = 0;
  return result;
}

uint64_t SnippetUI::Visualization_Map::clear_text_2(SnippetUI::Visualization_Map *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 6);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 6) = 0;
  return result;
}

uint64_t SnippetUI::Visualization_Map::clear_action(SnippetUI::Visualization_Map *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 7);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 7) = 0;
  return result;
}

SnippetUI::Visualization_Map *SnippetUI::Visualization_Map::Visualization_Map(SnippetUI::Visualization_Map *this, const SnippetUI::Visualization_Map *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  SnippetUI::VisualProperty *v10;
  SnippetUI::ActionProperty *v11;
  SnippetUI::TextProperty *v12;
  SnippetUI::TextProperty *v13;

  *(_QWORD *)this = &off_1E792EB30;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 16) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Visualization_Map *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
    v9 = *(_QWORD *)(v8 + 8);
  else
    v9 = *(unsigned __int8 *)(v8 + 23);
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v9)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
  if (a2 == (const SnippetUI::Visualization_Map *)&SnippetUI::_Visualization_Map_default_instance_)
  {
    v11 = 0;
    *((_QWORD *)this + 4) = 0;
    *((_QWORD *)this + 5) = 0;
    *((_QWORD *)this + 6) = 0;
  }
  else
  {
    if (*((_QWORD *)a2 + 4))
    {
      v10 = (SnippetUI::VisualProperty *)operator new();
      SnippetUI::VisualProperty::VisualProperty(v10, *((const SnippetUI::VisualProperty **)a2 + 4));
    }
    else
    {
      v10 = 0;
    }
    *((_QWORD *)this + 4) = v10;
    if (*((_QWORD *)a2 + 5))
    {
      v12 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v12, *((const SnippetUI::TextProperty **)a2 + 5));
    }
    else
    {
      v12 = 0;
    }
    *((_QWORD *)this + 5) = v12;
    if (*((_QWORD *)a2 + 6))
    {
      v13 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v13, *((const SnippetUI::TextProperty **)a2 + 6));
    }
    else
    {
      v13 = 0;
    }
    *((_QWORD *)this + 6) = v13;
    if (*((_QWORD *)a2 + 7))
    {
      v11 = (SnippetUI::ActionProperty *)operator new();
      SnippetUI::ActionProperty::ActionProperty(v11, *((const SnippetUI::ActionProperty **)a2 + 7));
    }
    else
    {
      v11 = 0;
    }
  }
  *((_QWORD *)this + 7) = v11;
  return this;
}

void sub_1BF945030(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x1C3B8D890](v2, 0x10A1C40B18DE219);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Visualization_Map::CopyFrom(SnippetUI::Visualization_Map *this, const SnippetUI::Visualization_Map *a2)
{
  if (a2 != this)
  {
    SnippetUI::Visualization_Map::Clear(this);
    SnippetUI::Visualization_Map::MergeFrom(this, a2);
  }
}

void SnippetUI::Visualization_Map::InternalSwap(SnippetUI::Visualization_Map *this, SnippetUI::Visualization_Map *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  google::protobuf::UnknownFieldSet *v23;

  v4 = (SnippetUI::Visualization_Map *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v23;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 2);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = (uint64_t *)*((_QWORD *)this + 3);
  v14 = (uint64_t **)((char *)a2 + 24);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_19;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v13 = (uint64_t *)*((_QWORD *)this + 3);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v13[2];
  v17 = *(_OWORD *)v13;
  v18 = v15[2];
  *(_OWORD *)v13 = *(_OWORD *)v15;
  v13[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_19:
  v19 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v19;
  v20 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v20;
  v21 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v21;
  v22 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v22;
}

YAML::EmitterState *YAML::EmitterState::EmitterState(YAML::EmitterState *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;

  *(_BYTE *)this = 1;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  v2 = operator new();
  v3 = *((_DWORD *)this + 8);
  *(_QWORD *)v2 = &off_1E792EC38;
  *(_QWORD *)(v2 + 8) = (char *)this + 32;
  *(_DWORD *)(v2 + 16) = v3;
  *((_DWORD *)this + 8) = 3;
  MEMORY[0x1C3B8D890]();
  *((_DWORD *)this + 9) = 0;
  v4 = operator new();
  *(_QWORD *)v4 = &off_1E792EC38;
  *(_QWORD *)(v4 + 8) = (char *)this + 36;
  *(_DWORD *)(v4 + 16) = *((_DWORD *)this + 9);
  *((_DWORD *)this + 9) = 0;
  MEMORY[0x1C3B8D890]();
  *((_DWORD *)this + 10) = 0;
  v5 = operator new();
  *(_QWORD *)v5 = &off_1E792EC38;
  *(_QWORD *)(v5 + 8) = (char *)this + 40;
  *(_DWORD *)(v5 + 16) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = 9;
  MEMORY[0x1C3B8D890]();
  *((_DWORD *)this + 11) = 0;
  v6 = operator new();
  *(_QWORD *)v6 = &off_1E792EC38;
  *(_QWORD *)(v6 + 8) = (char *)this + 44;
  *(_DWORD *)(v6 + 16) = *((_DWORD *)this + 11);
  *((_DWORD *)this + 11) = 14;
  MEMORY[0x1C3B8D890]();
  *((_DWORD *)this + 12) = 0;
  v7 = operator new();
  *(_QWORD *)v7 = &off_1E792EC38;
  *(_QWORD *)(v7 + 8) = (char *)this + 48;
  *(_DWORD *)(v7 + 16) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = 12;
  MEMORY[0x1C3B8D890]();
  *((_DWORD *)this + 13) = 0;
  v8 = operator new();
  *(_QWORD *)v8 = &off_1E792EC38;
  *(_QWORD *)(v8 + 8) = (char *)this + 52;
  *(_DWORD *)(v8 + 16) = *((_DWORD *)this + 13);
  *((_DWORD *)this + 13) = 16;
  MEMORY[0x1C3B8D890]();
  *((_QWORD *)this + 7) = 0;
  v9 = (_QWORD *)operator new();
  *v9 = &off_1E792EC88;
  v9[1] = (char *)this + 56;
  v9[2] = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 2;
  MEMORY[0x1C3B8D890]();
  *((_QWORD *)this + 8) = 0;
  v10 = (_QWORD *)operator new();
  *v10 = &off_1E792EC88;
  v10[1] = (char *)this + 64;
  v10[2] = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 2;
  MEMORY[0x1C3B8D890]();
  *((_QWORD *)this + 9) = 0;
  v11 = (_QWORD *)operator new();
  *v11 = &off_1E792EC88;
  v11[1] = (char *)this + 72;
  v11[2] = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 1;
  MEMORY[0x1C3B8D890]();
  *((_DWORD *)this + 20) = 0;
  v12 = operator new();
  *(_QWORD *)v12 = &off_1E792EC38;
  *(_QWORD *)(v12 + 8) = (char *)this + 80;
  *(_DWORD *)(v12 + 16) = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = 24;
  MEMORY[0x1C3B8D890]();
  *((_DWORD *)this + 21) = 0;
  v13 = operator new();
  *(_QWORD *)v13 = &off_1E792EC38;
  *(_QWORD *)(v13 + 8) = (char *)this + 84;
  *(_DWORD *)(v13 + 16) = *((_DWORD *)this + 21);
  *((_DWORD *)this + 21) = 24;
  MEMORY[0x1C3B8D890]();
  *((_DWORD *)this + 22) = 0;
  v14 = operator new();
  *(_QWORD *)v14 = &off_1E792EC38;
  *(_QWORD *)(v14 + 8) = (char *)this + 88;
  *(_DWORD *)(v14 + 16) = *((_DWORD *)this + 22);
  *((_DWORD *)this + 22) = 0;
  MEMORY[0x1C3B8D890]();
  *((_QWORD *)this + 12) = 0;
  v15 = (_QWORD *)operator new();
  *v15 = &off_1E792EC88;
  v15[1] = (char *)this + 96;
  v15[2] = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 9;
  MEMORY[0x1C3B8D890]();
  *((_QWORD *)this + 13) = 0;
  v16 = (_QWORD *)operator new();
  *v16 = &off_1E792EC88;
  v16[1] = (char *)this + 104;
  v16[2] = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 17;
  MEMORY[0x1C3B8D890]();
  *((_QWORD *)this + 25) = 0;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *(_DWORD *)((char *)this + 191) = 0;
  return this;
}

void sub_1BF9456C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void YAML::SettingChange<unsigned long>::~SettingChange()
{
  JUMPOUT(0x1C3B8D890);
}

uint64_t YAML::SettingChange<unsigned long>::pop(uint64_t result)
{
  **(_QWORD **)(result + 8) = *(_QWORD *)(result + 16);
  return result;
}

void YAML::SettingChange<YAML::EMITTER_MANIP>::~SettingChange()
{
  JUMPOUT(0x1C3B8D890);
}

uint64_t YAML::SettingChange<YAML::EMITTER_MANIP>::pop(uint64_t result)
{
  **(_DWORD **)(result + 8) = *(_DWORD *)(result + 16);
  return result;
}

void YAML::EmitterState::~EmitterState(YAML::EmitterState *this)
{
  uint64_t *v2;
  uint64_t *v3;
  void *v4;

  v2 = (uint64_t *)*((_QWORD *)this + 20);
  if (v2)
  {
    v3 = (uint64_t *)*((_QWORD *)this + 21);
    v4 = (void *)*((_QWORD *)this + 20);
    if (v3 != v2)
    {
      do
        std::unique_ptr<YAML::EmitterState::Group>::reset[abi:ne180100](--v3);
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 20);
    }
    *((_QWORD *)this + 21) = v2;
    operator delete(v4);
  }
  YAML::SettingChanges::~SettingChanges((uint64_t **)this + 17);
  YAML::SettingChanges::~SettingChanges((uint64_t **)this + 14);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

void YAML::SettingChanges::~SettingChanges(uint64_t **this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  YAML::SettingChanges::clear(this);
  v2 = *this;
  if (*this)
  {
    v3 = this[1];
    v4 = *this;
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = *this;
    }
    this[1] = v2;
    operator delete(v4);
  }
}

uint64_t **YAML::SettingChanges::clear(uint64_t **this)
{
  uint64_t **v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t **v5;

  v1 = this;
  v2 = *this;
  if (*this != this[1])
  {
    do
    {
      v3 = *v2++;
      this = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
    while (v2 != v1[1]);
    v4 = *v1;
    if (v2 != *v1)
    {
      do
      {
        v5 = (uint64_t **)*--v2;
        this = v5;
        *v2 = 0;
        if (v5)
          this = (uint64_t **)((uint64_t (*)(uint64_t **))(*this)[1])(this);
      }
      while (v2 != v4);
      v2 = v4;
    }
  }
  v1[1] = v2;
  return this;
}

uint64_t *std::unique_ptr<YAML::EmitterState::Group>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    YAML::SettingChanges::~SettingChanges((uint64_t **)(v1 + 32));
    JUMPOUT(0x1C3B8D890);
  }
  return result;
}

uint64_t YAML::EmitterState::SetLocalValue(uint64_t result, unsigned int a2)
{
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;

  v3 = result;
  if (a2 - 3 <= 1)
    result = YAML::EmitterState::_Set<YAML::EMITTER_MANIP>(result, (_DWORD *)(result + 32), a2, 0);
  if (a2 <= 7 && ((1 << a2) & 0xE1) != 0)
  {
    v4 = (_DWORD *)(v3 + 36);
LABEL_6:
    result = YAML::EmitterState::_Set<YAML::EMITTER_MANIP>(v3, v4, a2, 0);
    goto LABEL_7;
  }
  if (a2 - 8 <= 2)
  {
    v4 = (_DWORD *)(v3 + 40);
    goto LABEL_6;
  }
  if (a2 - 11 <= 2)
  {
    v4 = (_DWORD *)(v3 + 48);
    goto LABEL_6;
  }
LABEL_7:
  if ((a2 & 0xFFFFFFFE) == 0xE)
  {
    v5 = (_DWORD *)(v3 + 44);
LABEL_13:
    result = YAML::EmitterState::_Set<YAML::EMITTER_MANIP>(v3, v5, a2, 0);
    goto LABEL_14;
  }
  if (a2 - 16 <= 2)
  {
    v5 = (_DWORD *)(v3 + 52);
    goto LABEL_13;
  }
  if (a2 - 23 <= 1)
  {
    YAML::EmitterState::_Set<YAML::EMITTER_MANIP>(v3, (_DWORD *)(v3 + 80), a2, 0);
    v5 = (_DWORD *)(v3 + 84);
    goto LABEL_13;
  }
LABEL_14:
  if (a2 == 29 || !a2)
    return YAML::EmitterState::_Set<YAML::EMITTER_MANIP>(v3, (_DWORD *)(v3 + 88), a2, 0);
  return result;
}

uint64_t YAML::EmitterState::_Set<YAML::EMITTER_MANIP>(uint64_t a1, _DWORD *a2, int a3, int a4)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a4 == 1)
  {
    v9 = operator new();
    *(_QWORD *)v9 = &off_1E792EC38;
    *(_QWORD *)(v9 + 8) = a2;
    *(_DWORD *)(v9 + 16) = *a2;
    *a2 = a3;
    MEMORY[0x1C3B8D890]();
    v10 = operator new();
    *(_QWORD *)v10 = &off_1E792EC38;
    *(_QWORD *)(v10 + 8) = a2;
    *(_DWORD *)(v10 + 16) = *a2;
    v11 = v10;
    *a2 = a3;
    YAML::SettingChanges::push((char **)(a1 + 136), &v11);
    result = v11;
    if (v11)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    if (a4)
      __assert_rtn("_Set", "emitterstate.h", 206, "false");
    v7 = operator new();
    *(_QWORD *)v7 = &off_1E792EC38;
    *(_QWORD *)(v7 + 8) = a2;
    *(_DWORD *)(v7 + 16) = *a2;
    v12 = v7;
    *a2 = a3;
    YAML::SettingChanges::push((char **)(a1 + 112), &v12);
    result = v12;
    if (v12)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_1BF945B90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Unwind_Resume(exception_object);
}

void sub_1BF945BB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (!a10)
    JUMPOUT(0x1BF945BA8);
  JUMPOUT(0x1BF945B9CLL);
}

void YAML::SettingChanges::push(char **a1, uint64_t *a2)
{
  unint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  int64x2_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v8 = (v5 - *a1) >> 3;
    if ((unint64_t)(v8 + 1) >> 61)
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    v9 = v4 - (_QWORD)*a1;
    v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1))
      v10 = v8 + 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
    {
      if (v11 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v12 = (char *)operator new(8 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[8 * v8];
    v14 = *a2;
    *a2 = 0;
    *(_QWORD *)v13 = v14;
    v7 = v13 + 8;
    v16 = *a1;
    v15 = a1[1];
    if (v15 == *a1)
    {
      v18 = vdupq_n_s64((unint64_t)v15);
    }
    else
    {
      do
      {
        v17 = *((_QWORD *)v15 - 1);
        v15 -= 8;
        *(_QWORD *)v15 = 0;
        *((_QWORD *)v13 - 1) = v17;
        v13 -= 8;
      }
      while (v15 != v16);
      v18 = *(int64x2_t *)a1;
    }
    *a1 = v13;
    a1[1] = v7;
    a1[2] = &v12[8 * v11];
    v20 = (_QWORD *)v18.i64[1];
    v19 = (_QWORD *)v18.i64[0];
    while (v20 != v19)
    {
      v22 = *--v20;
      v21 = v22;
      *v20 = 0;
      if (v22)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    }
    if (v19)
      operator delete(v19);
  }
  else
  {
    v6 = *a2;
    *a2 = 0;
    *(_QWORD *)v5 = v6;
    v7 = v5 + 8;
  }
  a1[1] = v7;
}

BOOL YAML::EmitterState::SetOutputCharset(uint64_t a1, int a2, int a3)
{
  unsigned int v3;

  v3 = a2 - 3;
  if ((a2 - 3) <= 1)
    YAML::EmitterState::_Set<YAML::EMITTER_MANIP>(a1, (_DWORD *)(a1 + 32), a2, a3);
  return v3 < 2;
}

uint64_t YAML::EmitterState::SetStringFormat(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t result;

  result = 0;
  if (a2 <= 7 && ((1 << a2) & 0xE1) != 0)
  {
    YAML::EmitterState::_Set<YAML::EMITTER_MANIP>(a1, (_DWORD *)(a1 + 36), a2, a3);
    return 1;
  }
  return result;
}

BOOL YAML::EmitterState::SetBoolFormat(uint64_t a1, int a2, int a3)
{
  unsigned int v3;

  v3 = a2 - 8;
  if ((a2 - 8) <= 2)
    YAML::EmitterState::_Set<YAML::EMITTER_MANIP>(a1, (_DWORD *)(a1 + 40), a2, a3);
  return v3 < 3;
}

BOOL YAML::EmitterState::SetBoolCaseFormat(uint64_t a1, int a2, int a3)
{
  unsigned int v3;

  v3 = a2 - 11;
  if ((a2 - 11) <= 2)
    YAML::EmitterState::_Set<YAML::EMITTER_MANIP>(a1, (_DWORD *)(a1 + 48), a2, a3);
  return v3 < 3;
}

BOOL YAML::EmitterState::SetBoolLengthFormat(uint64_t a1, int a2, int a3)
{
  unsigned int v3;

  v3 = a2 & 0xFFFFFFFE;
  if ((a2 & 0xFFFFFFFE) == 0xE)
    YAML::EmitterState::_Set<YAML::EMITTER_MANIP>(a1, (_DWORD *)(a1 + 44), a2, a3);
  return v3 == 14;
}

BOOL YAML::EmitterState::SetIntFormat(uint64_t a1, int a2, int a3)
{
  unsigned int v3;

  v3 = a2 - 16;
  if ((a2 - 16) <= 2)
    YAML::EmitterState::_Set<YAML::EMITTER_MANIP>(a1, (_DWORD *)(a1 + 52), a2, a3);
  return v3 < 3;
}

BOOL YAML::EmitterState::SetFlowType(uint64_t a1, int a2, int a3, int a4)
{
  unsigned int v4;
  _DWORD *v5;

  v4 = a3 - 23;
  if ((a3 - 23) <= 1)
  {
    if (a2 == 1)
      v5 = (_DWORD *)(a1 + 80);
    else
      v5 = (_DWORD *)(a1 + 84);
    YAML::EmitterState::_Set<YAML::EMITTER_MANIP>(a1, v5, a3, a4);
  }
  return v4 < 2;
}

uint64_t YAML::EmitterState::SetMapKeyFormat(uint64_t a1, int a2, int a3)
{
  if (a2 != 29 && a2)
    return 0;
  YAML::EmitterState::_Set<YAML::EMITTER_MANIP>(a1, (_DWORD *)(a1 + 88), a2, a3);
  return 1;
}

uint64_t YAML::EmitterState::SetAnchor(uint64_t this)
{
  *(_BYTE *)(this + 192) = 1;
  return this;
}

uint64_t YAML::EmitterState::SetTag(uint64_t this)
{
  *(_BYTE *)(this + 193) = 1;
  return this;
}

uint64_t YAML::EmitterState::SetNonContent(uint64_t this)
{
  *(_BYTE *)(this + 194) = 1;
  return this;
}

uint64_t YAML::EmitterState::SetLongKey(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(this + 168);
  if (*(_QWORD *)(this + 160) == v1)
    __assert_rtn("SetLongKey", "emitterstate.cpp", 59, "!m_groups.empty()");
  v2 = *(_QWORD *)(v1 - 8);
  if (*(_DWORD *)v2 != 2)
    __assert_rtn("SetLongKey", "emitterstate.cpp", 64, "m_groups.back()->type == GroupType::Map");
  *(_BYTE *)(v2 + 24) = 1;
  return this;
}

uint64_t YAML::EmitterState::ForceFlow(uint64_t this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(this + 168);
  if (*(_QWORD *)(this + 160) == v1)
    __assert_rtn("ForceFlow", "emitterstate.cpp", 69, "!m_groups.empty()");
  *(_DWORD *)(*(_QWORD *)(v1 - 8) + 4) = 1;
  return this;
}

uint64_t YAML::EmitterState::StartedNode(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(this + 168);
  if (*(_QWORD *)(this + 160) == v1)
  {
    ++*(_QWORD *)(this + 200);
  }
  else
  {
    v2 = *(_QWORD *)(v1 - 8);
    v3 = *(_QWORD *)(v2 + 16) + 1;
    *(_QWORD *)(v2 + 16) = v3;
    if ((v3 & 1) == 0)
      *(_BYTE *)(v2 + 24) = 0;
  }
  *(_WORD *)(this + 192) = 0;
  *(_BYTE *)(this + 194) = 0;
  return this;
}

uint64_t YAML::EmitterState::NextGroupType(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v5;
  unsigned int v6;

  v3 = *(_QWORD *)(a1 + 160);
  v2 = *(_QWORD *)(a1 + 168);
  if (a2 == 1)
  {
    if (v3 != v2 && *(_DWORD *)(*(_QWORD *)(v2 - 8) + 4) == 1)
      return 3;
    v5 = *(_DWORD *)(a1 + 80) == 24;
    v6 = 3;
  }
  else
  {
    if (v3 != v2 && *(_DWORD *)(*(_QWORD *)(v2 - 8) + 4) == 1)
      return 5;
    v5 = *(_DWORD *)(a1 + 84) == 24;
    v6 = 5;
  }
  if (v5)
    return v6 + 1;
  else
    return v6;
}

uint64_t YAML::EmitterState::GetFlowType(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 168);
  if (*(_QWORD *)(a1 + 160) != v2 && *(_DWORD *)(*(_QWORD *)(v2 - 8) + 4) == 1)
    return 23;
  v4 = 84;
  if (a2 == 1)
    v4 = 80;
  return *(unsigned int *)(a1 + v4);
}

uint64_t YAML::EmitterState::StartedDoc(uint64_t this)
{
  *(_WORD *)(this + 192) = 0;
  *(_BYTE *)(this + 194) = 0;
  return this;
}

uint64_t YAML::EmitterState::EndedDoc(uint64_t this)
{
  *(_WORD *)(this + 192) = 0;
  *(_BYTE *)(this + 194) = 0;
  return this;
}

uint64_t **YAML::EmitterState::StartedScalar(uint64_t **this)
{
  YAML::EmitterState::StartedNode((uint64_t)this);
  return YAML::SettingChanges::clear(this + 14);
}

uint64_t **YAML::EmitterState::ClearModifiedSettings(uint64_t **this)
{
  return YAML::SettingChanges::clear(this + 14);
}

void YAML::EmitterState::StartedGroup(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t *v19;
  char *v20;
  _QWORD *v21;
  uint64_t v22;
  int64x2_t v23;
  uint64_t *v24;
  uint64_t *v25;

  YAML::EmitterState::StartedNode(a1);
  v4 = *(_QWORD *)(a1 + 168);
  if (*(_QWORD *)(a1 + 160) == v4)
    v5 = 0;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(v4 - 8) + 8);
  *(_QWORD *)(a1 + 184) += v5;
  v6 = operator new();
  *(_DWORD *)v6 = a2;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 48) = 0;
  *(_QWORD *)(v6 + 12) = 0;
  *(_QWORD *)(v6 + 4) = 0;
  *(_QWORD *)(v6 + 17) = 0;
  if (v6 + 32 != a1 + 112)
  {
    YAML::SettingChanges::clear((uint64_t **)(v6 + 32));
    v7 = *(_OWORD *)(v6 + 32);
    *(_OWORD *)(v6 + 32) = *(_OWORD *)(a1 + 112);
    *(_OWORD *)(a1 + 112) = v7;
    v8 = *(_QWORD *)(v6 + 48);
    *(_QWORD *)(v6 + 48) = *(_QWORD *)(a1 + 128);
    *(_QWORD *)(a1 + 128) = v8;
  }
  v10 = *(uint64_t **)(a1 + 160);
  v9 = *(uint64_t **)(a1 + 168);
  if (v10 != v9 && *(_DWORD *)(*(v9 - 1) + 4) == 1)
    goto LABEL_12;
  v11 = 84;
  if (a2 == 1)
    v11 = 80;
  if (*(_DWORD *)(a1 + v11) == 24)
    v12 = 2;
  else
LABEL_12:
    v12 = 1;
  *(_DWORD *)(v6 + 4) = v12;
  *(_QWORD *)(v6 + 8) = *(_QWORD *)(a1 + 56);
  v13 = *(_QWORD *)(a1 + 176);
  if ((unint64_t)v9 >= v13)
  {
    v14 = v9 - v10;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61)
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    v16 = v13 - (_QWORD)v10;
    if (v16 >> 2 > v15)
      v15 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
    {
      if (v17 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v18 = (char *)operator new(8 * v17);
    }
    else
    {
      v18 = 0;
    }
    v19 = (uint64_t *)&v18[8 * v14];
    v20 = &v18[8 * v17];
    *v19 = v6;
    v21 = v19 + 1;
    if (v10 == v9)
    {
      v23 = vdupq_n_s64((unint64_t)v9);
    }
    else
    {
      do
      {
        v22 = *--v9;
        *v9 = 0;
        *--v19 = v22;
      }
      while (v9 != v10);
      v23 = *(int64x2_t *)(a1 + 160);
    }
    *(_QWORD *)(a1 + 160) = v19;
    *(_QWORD *)(a1 + 168) = v21;
    *(_QWORD *)(a1 + 176) = v20;
    v25 = (uint64_t *)v23.i64[1];
    v24 = (uint64_t *)v23.i64[0];
    while (v25 != v24)
      std::unique_ptr<YAML::EmitterState::Group>::reset[abi:ne180100](--v25);
    if (v24)
      operator delete(v24);
    *(_QWORD *)(a1 + 168) = v21;
  }
  else
  {
    *v9 = v6;
    *(_QWORD *)(a1 + 168) = v9 + 1;
  }
}

void sub_1BF946330(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<YAML::EmitterState::Group>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void YAML::EmitterState::EndedGroup(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *i;
  uint64_t v11;
  std::string __str;

  v4 = *(_QWORD *)(a1 + 168);
  if (*(_QWORD *)(a1 + 160) == v4)
  {
    if (a2 == 1)
      std::string::basic_string[abi:ne180100]<0>(&__str, "unexpected end sequence token");
    else
      std::string::basic_string[abi:ne180100]<0>(&__str, "unexpected end map token");
    *(_BYTE *)a1 = 0;
    std::string::operator=((std::string *)(a1 + 8), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  else
  {
    v5 = *(_QWORD *)(v4 - 8);
    *(_QWORD *)(v4 - 8) = 0;
    v6 = (uint64_t *)(*(_QWORD *)(a1 + 168) - 8);
    std::unique_ptr<YAML::EmitterState::Group>::reset[abi:ne180100](v6);
    *(_QWORD *)(a1 + 168) = v6;
    if (*(_DWORD *)v5 == a2)
    {
      YAML::SettingChanges::~SettingChanges((uint64_t **)(v5 + 32));
      MEMORY[0x1C3B8D890](v5, 0x1020C409BBB1E6ELL);
      v7 = *(_QWORD *)(a1 + 168);
      if (*(_QWORD *)(a1 + 160) == v7)
      {
        v8 = 0;
        v9 = *(_QWORD *)(a1 + 184);
      }
      else
      {
        v8 = *(_QWORD *)(*(_QWORD *)(v7 - 8) + 8);
        v9 = *(_QWORD *)(a1 + 184);
        if (v9 < v8)
          __assert_rtn("EndedGroup", "emitterstate.cpp", 175, "m_curIndent >= lastIndent");
      }
      *(_QWORD *)(a1 + 184) = v9 - v8;
      for (i = *(uint64_t **)(a1 + 136); i != *(uint64_t **)(a1 + 144); ++i)
      {
        v11 = *i;
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
      }
      YAML::SettingChanges::clear((uint64_t **)(a1 + 112));
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__str, "unmatched group tag");
      *(_BYTE *)a1 = 0;
      std::string::operator=((std::string *)(a1 + 8), &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      YAML::SettingChanges::~SettingChanges((uint64_t **)(v5 + 32));
      MEMORY[0x1C3B8D890](v5, 0x1020C409BBB1E6ELL);
    }
  }
}

void sub_1BF94650C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t YAML::EmitterState::CurGroupNodeType(YAML::EmitterState *this)
{
  uint64_t v1;
  int *v2;
  int v3;
  BOOL v4;
  unsigned int v5;
  unsigned int v6;

  v1 = *((_QWORD *)this + 21);
  if (*((_QWORD *)this + 20) == v1)
    return 0;
  v2 = *(int **)(v1 - 8);
  v3 = *v2;
  v4 = v2[1] == 1;
  if (v2[1] == 1)
    v5 = 3;
  else
    v5 = 4;
  if (v4)
    v6 = 5;
  else
    v6 = 6;
  if (v3 == 1)
    return v5;
  else
    return v6;
}

uint64_t YAML::EmitterState::CurGroupType(YAML::EmitterState *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 21);
  if (*((_QWORD *)this + 20) == v1)
    return 0;
  else
    return **(unsigned int **)(v1 - 8);
}

uint64_t YAML::EmitterState::CurGroupFlowType(YAML::EmitterState *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 21);
  if (*((_QWORD *)this + 20) == v1)
    return 0;
  else
    return *(unsigned int *)(*(_QWORD *)(v1 - 8) + 4);
}

uint64_t YAML::EmitterState::CurGroupIndent(YAML::EmitterState *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 21);
  if (*((_QWORD *)this + 20) == v1)
    return 0;
  else
    return *(_QWORD *)(*(_QWORD *)(v1 - 8) + 8);
}

uint64_t YAML::EmitterState::CurGroupChildCount(YAML::EmitterState *this)
{
  uint64_t v1;
  char *v2;

  v1 = *((_QWORD *)this + 21);
  if (*((_QWORD *)this + 20) == v1)
    v2 = (char *)this + 200;
  else
    v2 = (char *)(*(_QWORD *)(v1 - 8) + 16);
  return *(_QWORD *)v2;
}

BOOL YAML::EmitterState::CurGroupLongKey(YAML::EmitterState *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 21);
  return *((_QWORD *)this + 20) != v1 && *(_BYTE *)(*(_QWORD *)(v1 - 8) + 24) != 0;
}

uint64_t YAML::EmitterState::LastIndent(YAML::EmitterState *this)
{
  if (*((_QWORD *)this + 21) - *((_QWORD *)this + 20) >= 0x10uLL)
    return *((_QWORD *)this + 23) - *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 21) - 16) + 8);
  else
    return 0;
}

BOOL YAML::EmitterState::SetIndent(uint64_t a1, unint64_t a2, int a3)
{
  if (a2 >= 2)
    YAML::EmitterState::_Set<unsigned long>(a1, (_QWORD *)(a1 + 56), a2, a3);
  return a2 > 1;
}

uint64_t YAML::EmitterState::_Set<unsigned long>(uint64_t a1, _QWORD *a2, uint64_t a3, int a4)
{
  _QWORD *v7;
  uint64_t result;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;

  if (a4 == 1)
  {
    v9 = (_QWORD *)operator new();
    *v9 = &off_1E792EC88;
    v9[1] = a2;
    v9[2] = *a2;
    *a2 = a3;
    MEMORY[0x1C3B8D890]();
    v10 = (_QWORD *)operator new();
    *v10 = &off_1E792EC88;
    v10[1] = a2;
    v10[2] = *a2;
    v11 = v10;
    *a2 = a3;
    YAML::SettingChanges::push((char **)(a1 + 136), (uint64_t *)&v11);
    result = (uint64_t)v11;
    if (v11)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    if (a4)
      __assert_rtn("_Set", "emitterstate.h", 206, "false");
    v7 = (_QWORD *)operator new();
    *v7 = &off_1E792EC88;
    v7[1] = a2;
    v7[2] = *a2;
    v12 = v7;
    *a2 = a3;
    YAML::SettingChanges::push((char **)(a1 + 112), (uint64_t *)&v12);
    result = (uint64_t)v12;
    if (v12)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_1BF9467F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Unwind_Resume(exception_object);
}

void sub_1BF946818(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (!a10)
    JUMPOUT(0x1BF946810);
  JUMPOUT(0x1BF946804);
}

BOOL YAML::EmitterState::SetPreCommentIndent(uint64_t a1, uint64_t a2, int a3)
{
  if (a2)
    YAML::EmitterState::_Set<unsigned long>(a1, (_QWORD *)(a1 + 64), a2, a3);
  return a2 != 0;
}

BOOL YAML::EmitterState::SetPostCommentIndent(uint64_t a1, uint64_t a2, int a3)
{
  if (a2)
    YAML::EmitterState::_Set<unsigned long>(a1, (_QWORD *)(a1 + 72), a2, a3);
  return a2 != 0;
}

BOOL YAML::EmitterState::SetFloatPrecision(uint64_t a1, unint64_t a2, int a3)
{
  if (a2 <= 9)
    YAML::EmitterState::_Set<unsigned long>(a1, (_QWORD *)(a1 + 96), a2, a3);
  return a2 < 0xA;
}

BOOL YAML::EmitterState::SetDoublePrecision(uint64_t a1, unint64_t a2, int a3)
{
  if (a2 <= 0x11)
    YAML::EmitterState::_Set<unsigned long>(a1, (_QWORD *)(a1 + 104), a2, a3);
  return a2 < 0x12;
}

void sub_1BF9469A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BF946A54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BF946B18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1BF946BA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)DEMultipartWriter;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1BF946C44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BF946CB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BF946D14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BF946F38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BF946FD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)DEMultipartReader;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1BF947178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BF9472F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BF9473EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BF9474B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BF947698(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BF947738(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::StartsWithVowel(siri::dialogengine::Context *a1, const char *a2)
{
  const char *v2;
  unint64_t v3;
  uint64_t isStartsWithVowel;
  _BYTE v6[128];
  void *v7[2];
  unsigned __int8 v8;

  if (a1)
    siri::dialogengine::Context::GetLocale(a1, a2, (uint64_t)v7);
  else
    std::string::basic_string[abi:ne180100]<0>(v7, "");
  v3 = v8;
  if ((v8 & 0x80u) != 0)
    v3 = (unint64_t)v7[1];
  if (!v3)
    siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"StartsWithVowel has empty locale", v2);
  morphun::util::ULocale::ULocale();
  morphun::util::StringUtils::to_u16string();
  isStartsWithVowel = morphun::dictionary::PhraseProperties::isStartsWithVowel();
  morphun::util::ULocale::~ULocale((morphun::util::ULocale *)v6);
  if ((char)v8 < 0)
    operator delete(v7[0]);
  return isStartsWithVowel;
}

void sub_1BF947864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

void sub_1BF9478A8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  JUMPOUT(0x1BF947890);
}

uint64_t siri::dialogengine::EndsWithVowel(siri::dialogengine::Context *a1, const char *a2)
{
  const char *v2;
  unint64_t v3;
  uint64_t isEndsWithVowel;
  _BYTE v6[128];
  void *v7[2];
  unsigned __int8 v8;

  if (a1)
    siri::dialogengine::Context::GetLocale(a1, a2, (uint64_t)v7);
  else
    std::string::basic_string[abi:ne180100]<0>(v7, "");
  v3 = v8;
  if ((v8 & 0x80u) != 0)
    v3 = (unint64_t)v7[1];
  if (!v3)
    siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"EndsWithVowel has empty locale", v2);
  morphun::util::ULocale::ULocale();
  morphun::util::StringUtils::to_u16string();
  isEndsWithVowel = morphun::dictionary::PhraseProperties::isEndsWithVowel();
  morphun::util::ULocale::~ULocale((morphun::util::ULocale *)v6);
  if ((char)v8 < 0)
    operator delete(v7[0]);
  return isEndsWithVowel;
}

void sub_1BF9479F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

void sub_1BF947A34(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  JUMPOUT(0x1BF947A1CLL);
}

BOOL siri::dialogengine::StartsWithCapital(siri::dialogengine *a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v5;
  std::string::size_type size;
  uint64_t v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  std::string *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  BOOL v17;
  void *v18;
  void *__p[2];
  char v21;
  std::string v22;
  void *v23;
  char v24;
  void *v25;
  char v26;
  void *v27;
  char v28;
  void *v29;
  char v30;
  void *v31;
  char v32;
  void *v33;
  char v34;
  std::string v35;
  void *v36;
  char v37;
  void *v38;
  char v39;
  void *v40;
  char v41;
  void *v42;
  char v43;
  void *v44;
  char v45;
  void *v46;
  char v47;

  v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0)
    v2 = *(_QWORD *)(a2 + 8);
  if (!v2)
    return 0;
  siri::dialogengine::SpeakableString::SpeakableString((uint64_t)&v22, a2);
  std::string::basic_string[abi:ne180100]<0>(__p, "capitalizefirst");
  siri::dialogengine::TransformText((siri::dialogengine::SpeakableString *)&v22, a1, (uint64_t)__p, &v35);
  if (v21 < 0)
    operator delete(__p[0]);
  if (v34 < 0)
    operator delete(v33);
  if (v32 < 0)
    operator delete(v31);
  if (v30 < 0)
    operator delete(v29);
  if (v28 < 0)
    operator delete(v27);
  if (v26 < 0)
    operator delete(v25);
  if (v24 < 0)
    operator delete(v23);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v22, v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_);
  else
    v22 = v35;
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  else
    size = v22.__r_.__value_.__l.__size_;
  v7 = *(unsigned __int8 *)(a2 + 23);
  v8 = (char)v7;
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a2 + 8);
  if (size == v7)
  {
    if (v8 >= 0)
      v9 = (unsigned __int8 *)a2;
    else
      v9 = *(unsigned __int8 **)a2;
    if ((*((_BYTE *)&v22.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      v18 = (void *)v22.__r_.__value_.__r.__words[0];
      v5 = memcmp(v22.__r_.__value_.__l.__data_, v9, v22.__r_.__value_.__l.__size_) == 0;
      goto LABEL_46;
    }
    if (!*((_BYTE *)&v22.__r_.__value_.__s + 23))
    {
      v5 = 1;
      goto LABEL_48;
    }
    v10 = HIBYTE(v22.__r_.__value_.__r.__words[2]) - 1;
    v11 = &v22;
    do
    {
      v13 = v11->__r_.__value_.__s.__data_[0];
      v11 = (std::string *)((char *)v11 + 1);
      v12 = v13;
      v15 = *v9++;
      v14 = v15;
      v17 = v10-- != 0;
      v5 = v12 == v14;
    }
    while (v12 == v14 && v17);
  }
  else
  {
    v5 = 0;
  }
  if ((*((_BYTE *)&v22.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    v18 = (void *)v22.__r_.__value_.__r.__words[0];
LABEL_46:
    operator delete(v18);
  }
LABEL_48:
  if (v47 < 0)
    operator delete(v46);
  if (v45 < 0)
    operator delete(v44);
  if (v43 < 0)
    operator delete(v42);
  if (v41 < 0)
    operator delete(v40);
  if (v39 < 0)
    operator delete(v38);
  if (v37 < 0)
    operator delete(v36);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  return v5;
}

void sub_1BF947CA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37)
{
  siri::dialogengine::SpeakableString::~SpeakableString(&a37);
  _Unwind_Resume(a1);
}

void sub_1BF947FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,id a40)
{
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;

  _Block_object_dispose(&a35, 8);
  _Unwind_Resume(a1);
}

void sub_1BF9483C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,id a34)
{
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;

  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2482(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__2483(uint64_t a1)
{

}

void sub_1BF948540(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BF9485FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void siri::dialogengine::ConditionSubCondition::~ConditionSubCondition(siri::dialogengine::ConditionSubCondition *this)
{
  void **v2;

  *(_QWORD *)this = off_1E792ECF0;
  *((_QWORD *)this + 11) = &unk_1E792ED30;
  v2 = (void **)((char *)this + 88);
  if (*((char *)this + 175) < 0)
    operator delete(*((void **)this + 19));
  siri::dialogengine::LineNumberBase::~LineNumberBase(v2);
  siri::dialogengine::ConditionEntry::~ConditionEntry((void **)this);
}

{
  void **v2;

  *(_QWORD *)this = off_1E792ECF0;
  *((_QWORD *)this + 11) = &unk_1E792ED30;
  v2 = (void **)((char *)this + 88);
  if (*((char *)this + 175) < 0)
    operator delete(*((void **)this + 19));
  siri::dialogengine::LineNumberBase::~LineNumberBase(v2);
  siri::dialogengine::ConditionEntry::~ConditionEntry((void **)this);
  JUMPOUT(0x1C3B8D890);
}

uint64_t siri::dialogengine::ConditionSubCondition::Validate(siri::dialogengine::ConditionSubCondition *this, siri::dialogengine::Context *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::string *v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::string v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  void *__p[2];
  std::string::size_type v25;

  v2 = (uint64_t)a2;
  if (!a2)
    return v2;
  if (!siri::dialogengine::ConditionEntry::Validate((const void ***)this, a2))
    return 0;
  if (*((char *)this + 175) < 0)
  {
    if (*((_QWORD *)this + 20))
      goto LABEL_5;
    goto LABEL_20;
  }
  if (!*((_BYTE *)this + 175))
  {
LABEL_20:
    std::string::basic_string[abi:ne180100]<0>(__p, "Sub condition has no name");
    siri::dialogengine::Context::AddValidationError(v2, (__int128 *)__p, (uint64_t)this + 88);
    if (SHIBYTE(v25) < 0)
      operator delete(__p[0]);
    return 0;
  }
LABEL_5:
  v5 = *(_QWORD *)(v2 + 504);
  v4 = *(std::__shared_weak_count **)(v2 + 512);
  v22 = v5;
  v23 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  if (!v5)
    goto LABEL_18;
  v8 = std::__tree<std::string>::find<std::string>(v5 + 272, (const void **)this + 19);
  if (v5 + 280 == v8)
    goto LABEL_24;
  v10 = *(_QWORD *)(v8 + 56);
  v9 = *(std::__shared_weak_count **)(v8 + 64);
  if (v9)
  {
    v11 = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    v13 = (unint64_t *)&v9->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (!v10)
  {
LABEL_24:
    std::operator+<char>();
    v16 = std::string::append(&v21, "'");
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v25 = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationError(v2, (__int128 *)__p, (uint64_t)this + 88);
    if (SHIBYTE(v25) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v21.__r_.__value_.__l.__data_);
    v2 = 0;
  }
  else
  {
LABEL_18:
    v2 = 1;
  }
  v18 = v23;
  if (v23)
  {
    v19 = (unint64_t *)&v23->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  return v2;
}

void sub_1BF9488B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::ConditionSubCondition::operator==(uint64_t a1, const void *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  const void **v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  BOOL v20;

  result = siri::dialogengine::ConditionEntry::operator==(a1, (uint64_t)a2);
  if ((_DWORD)result)
  {
    if (result)
    {
      v5 = *(unsigned __int8 *)(a1 + 175);
      if ((v5 & 0x80u) == 0)
        v6 = *(unsigned __int8 *)(a1 + 175);
      else
        v6 = *(_QWORD *)(a1 + 160);
      v7 = *(unsigned __int8 *)(result + 175);
      v8 = (char)v7;
      if ((v7 & 0x80u) != 0)
        v7 = *(_QWORD *)(result + 160);
      if (v6 == v7)
      {
        v9 = (const void **)(a1 + 152);
        v12 = *(unsigned __int8 **)(result + 152);
        v10 = (unsigned __int8 *)(result + 152);
        v11 = v12;
        if (v8 >= 0)
          v13 = v10;
        else
          v13 = v11;
        if ((v5 & 0x80) != 0)
        {
          return memcmp(*v9, v13, *(_QWORD *)(a1 + 160)) == 0;
        }
        else if (*(_BYTE *)(a1 + 175))
        {
          v14 = v5 - 1;
          do
          {
            v16 = *(unsigned __int8 *)v9;
            v9 = (const void **)((char *)v9 + 1);
            v15 = v16;
            v18 = *v13++;
            v17 = v18;
            v20 = v14-- != 0;
            result = v15 == v17;
          }
          while (v15 == v17 && v20);
        }
        else
        {
          return 1;
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t siri::dialogengine::ConditionSubCondition::operator!=(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) ^ 1;
}

uint64_t siri::dialogengine::ConditionSubCondition::Evaluate(siri::dialogengine::ConditionSubCondition *this, siri::dialogengine::Context *a2, siri::dialogengine::ExecutionState *a3)
{
  std::string *v6;
  __int128 v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  siri::dialogengine::ExecutionState *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  siri::dialogengine::Context **v19;
  std::string *v20;
  __int128 v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v27;
  std::string v28;
  void *__p[2];
  std::string::size_type v30;

  if (!a2)
  {
    if (*((char *)this + 175) < 0)
    {
      if (!*((_QWORD *)this + 20))
        return 0;
    }
    else if (!*((_BYTE *)this + 175))
    {
      return 0;
    }
  }
  if (a3 && siri::dialogengine::ExecutionState::IsInfiniteLoop((uint64_t *)a3, (__int128 *)((char *)this + 152)))
  {
    std::operator+<char>();
    v6 = std::string::append(&v28, "'");
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v30 = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 3u);
    if (SHIBYTE(v30) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v28.__r_.__value_.__l.__data_);
    return 0;
  }
  v10 = *((_QWORD *)a2 + 63);
  v9 = (std::__shared_weak_count *)*((_QWORD *)a2 + 64);
  v27 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  if (!v10
    || (v13 = std::__tree<std::string>::find<std::string>(v10 + 272, (const void **)this + 19), v10 + 280 == v13))
  {
    v16 = 0;
LABEL_26:
    std::operator+<char>();
    v20 = std::string::append(&v28, "'");
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v30 = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 3u);
    if (SHIBYTE(v30) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v28.__r_.__value_.__l.__data_);
    goto LABEL_30;
  }
  v15 = *(_QWORD *)(v13 + 56);
  v16 = *(std::__shared_weak_count **)(v13 + 64);
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  if (!v15)
    goto LABEL_26;
  v19 = *(siri::dialogengine::Context ***)(v15 + 144);
  if (v19 != *(siri::dialogengine::Context ***)(v15 + 152))
  {
    v8 = siri::dialogengine::EvaluateConditionEntry(a2, *v19, a3, v14);
    if (!v16)
      goto LABEL_35;
LABEL_31:
    v22 = (unint64_t *)&v16->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    goto LABEL_35;
  }
LABEL_30:
  v8 = 0;
  if (v16)
    goto LABEL_31;
LABEL_35:
  if (v27)
  {
    v24 = (unint64_t *)&v27->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  return v8;
}

void sub_1BF948C50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'siri::dialogengine::ConditionSubCondition::~ConditionSubCondition(siri::dialogengine::ConditionSubCondition *this)
{
  void **v2;

  *((_QWORD *)this - 11) = off_1E792ECF0;
  v2 = (void **)((char *)this - 88);
  *(_QWORD *)this = &unk_1E792ED30;
  if (*((char *)this + 87) < 0)
    operator delete(*((void **)this + 8));
  siri::dialogengine::LineNumberBase::~LineNumberBase((void **)this);
  siri::dialogengine::ConditionEntry::~ConditionEntry(v2);
}

{
  void **v2;

  *((_QWORD *)this - 11) = off_1E792ECF0;
  v2 = (void **)((char *)this - 88);
  *(_QWORD *)this = &unk_1E792ED30;
  if (*((char *)this + 87) < 0)
    operator delete(*((void **)this + 8));
  siri::dialogengine::LineNumberBase::~LineNumberBase((void **)this);
  siri::dialogengine::ConditionEntry::~ConditionEntry(v2);
  JUMPOUT(0x1C3B8D890);
}

double siri::dialogengine::ConditionSubCondition::ConditionSubCondition(siri::dialogengine::ConditionSubCondition *this)
{
  double result;

  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 2) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 8) = 4;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *(_QWORD *)this = off_1E792ECF0;
  *((_QWORD *)this + 1) = (char *)this + 16;
  *((_QWORD *)this + 11) = &unk_1E792ED30;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  return result;
}

{
  double result;

  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 2) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 8) = 4;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *(_QWORD *)this = off_1E792ECF0;
  *((_QWORD *)this + 1) = (char *)this + 16;
  *((_QWORD *)this + 11) = &unk_1E792ED30;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  return result;
}

uint64_t siri::dialogengine::ConditionSubCondition::ConditionSubCondition(uint64_t a1, const std::string *a2)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 88) = &unk_1E792ED30;
  *(_DWORD *)(a1 + 32) = 4;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)a1 = off_1E792ECF0;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  siri::dialogengine::ConditionSubCondition::SetName(a1, a2);
  return a1;
}

void sub_1BF948E9C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 175) < 0)
    operator delete(*v3);
  siri::dialogengine::LineNumberBase::~LineNumberBase(v2);
  siri::dialogengine::ConditionEntry::~ConditionEntry((void **)v1);
  _Unwind_Resume(a1);
}

double siri::dialogengine::ConditionSubCondition::SetName(uint64_t a1, const std::string *a2)
{
  void **v3;
  double result;
  std::string v5;

  siri::dialogengine::StringTrim(" \t\n\r", a2, &v5);
  v3 = (void **)(a1 + 152);
  if (*(char *)(a1 + 175) < 0)
    operator delete(*v3);
  result = *(double *)&v5.__r_.__value_.__l.__data_;
  *(_OWORD *)v3 = *(_OWORD *)&v5.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 168) = *((_QWORD *)&v5.__r_.__value_.__l + 2);
  return result;
}

void siri::dialogengine::ConditionSubCondition::GetName(siri::dialogengine::ConditionSubCondition *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 175) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 19), *((_QWORD *)this + 20));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 152);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 21);
  }
}

uint64_t YAML::Scanner::SimpleKey::SimpleKey(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)result = v3;
  *(_QWORD *)(result + 16) = a3;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  return result;
}

{
  uint64_t v3;

  v3 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)result = v3;
  *(_QWORD *)(result + 16) = a3;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  return result;
}

_QWORD *YAML::Scanner::SimpleKey::Validate(_QWORD *this)
{
  uint64_t v1;
  _DWORD *v2;
  _DWORD *v3;

  v1 = this[3];
  if (v1)
    *(_DWORD *)(v1 + 8) = 0;
  v2 = (_DWORD *)this[4];
  if (v2)
    *v2 = 0;
  v3 = (_DWORD *)this[5];
  if (v3)
    *v3 = 0;
  return this;
}

_QWORD *YAML::Scanner::SimpleKey::Invalidate(_QWORD *this)
{
  uint64_t v1;
  _DWORD *v2;
  _DWORD *v3;

  v1 = this[3];
  if (v1)
    *(_DWORD *)(v1 + 8) = 1;
  v2 = (_DWORD *)this[4];
  if (v2)
    *v2 = 1;
  v3 = (_DWORD *)this[5];
  if (v3)
    *v3 = 1;
  return this;
}

BOOL YAML::Scanner::CanInsertPotentialSimpleKey(YAML::Scanner *this)
{
  uint64_t v1;

  if (!*((_BYTE *)this + 146))
    return 0;
  v1 = *((_QWORD *)this + 24);
  return !v1
      || *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 20) + 8 * ((v1 + *((_QWORD *)this + 23) - 1) / 0x55uLL))
                   + 48 * ((v1 + *((_QWORD *)this + 23) - 1) % 0x55uLL)
                   + 16) != *((_QWORD *)this + 39);
}

BOOL YAML::Scanner::ExistsActiveSimpleKey(YAML::Scanner *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 24);
  return v1
      && *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 20) + 8 * ((v1 + *((_QWORD *)this + 23) - 1) / 0x55uLL))
                   + 48 * ((v1 + *((_QWORD *)this + 23) - 1) % 0x55uLL)
                   + 16) == *((_QWORD *)this + 39);
}

void YAML::Scanner::InsertPotentialSimpleKey(YAML::Scanner *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  _DWORD *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  size_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  __int128 v44;
  void *v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  unint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  void *v63;
  unint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  void *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  int64_t v86;
  void *v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  char *v94;
  _BYTE *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char *v115;
  uint64_t v116;
  char *v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  void *v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  _DWORD *v131;
  __int128 v132;
  __int128 v133;
  uint64_t v134;
  __int128 v135;
  __int128 v136;
  int v137;
  void *__p[2];
  _OWORD v139[2];
  int v140;
  void **v141;

  if (YAML::Scanner::CanInsertPotentialSimpleKey(this))
  {
    v2 = *((_QWORD *)this + 1);
    v3 = *((_DWORD *)this + 4);
    v4 = *((_QWORD *)this + 39);
    if (v4)
    {
      v5 = 0;
      v6 = 0;
    }
    else
    {
      v7 = YAML::Scanner::PushIndentTo((uint64_t)this, *((_DWORD *)this + 4), 0);
      v6 = v7;
      if (v7)
      {
        *(_DWORD *)(v7 + 8) = 2;
        v5 = *(_DWORD **)(v7 + 16);
        *v5 = 2;
      }
      else
      {
        v5 = 0;
      }
    }
    v8 = *((_QWORD *)this + 1);
    v9 = *((_DWORD *)this + 4);
    *(_QWORD *)&v136 = 0xE00000000;
    *((_QWORD *)&v136 + 1) = v8;
    v137 = v9;
    *(_OWORD *)__p = 0u;
    memset(v139, 0, sizeof(v139));
    v140 = 0;
    std::deque<YAML::Token>::push_back((_QWORD *)this + 12, &v136);
    v131 = v5;
    v141 = (void **)v139 + 1;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v141);
    if (SBYTE7(v139[0]) < 0)
      operator delete(__p[0]);
    v10 = *((_QWORD *)this + 17) + *((_QWORD *)this + 16) - 1;
    v11 = (_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 13) + 8 * (v10 / 0x33)) + 80 * (v10 % 0x33));
    *v11 = 2;
    v12 = (char *)*((_QWORD *)this + 21);
    v13 = (char *)*((_QWORD *)this + 20);
    v14 = v12 - v13;
    if (v12 == v13)
      v15 = 0;
    else
      v15 = 85 * ((v12 - v13) >> 3) - 1;
    v16 = *((_QWORD *)this + 23);
    v17 = *((_QWORD *)this + 24) + v16;
    if (v15 == v17)
    {
      if (v16 < 0x55)
      {
        v125 = v2;
        v127 = v4;
        v124 = v3;
        v33 = v14 >> 3;
        v34 = (char *)*((_QWORD *)this + 22);
        v35 = (char *)*((_QWORD *)this + 19);
        v36 = v34 - v35;
        if (v14 >> 3 >= (unint64_t)((v34 - v35) >> 3))
        {
          if (v34 == v35)
            v39 = 1;
          else
            v39 = v36 >> 2;
          v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v39);
          v42 = v41;
          v43 = &v40[8 * v33];
          *(_QWORD *)&v44 = v40;
          *((_QWORD *)&v44 + 1) = v43;
          v132 = v44;
          v45 = operator new(0xFF0uLL);
          *(_QWORD *)&v46 = v43;
          *((_QWORD *)&v46 + 1) = &v40[8 * v42];
          if (v33 == v42)
          {
            v47 = 8 * v33;
            *(_QWORD *)&v48 = v132;
            if (v14 < 1)
            {
              v87 = v45;
              v88 = v47 >> 2;
              if (v12 == v13)
                v89 = 1;
              else
                v89 = v88;
              v90 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v89);
              v43 = &v90[8 * (v89 >> 2)];
              *(_QWORD *)&v48 = v90;
              *((_QWORD *)&v48 + 1) = v43;
              *(_QWORD *)&v46 = v43;
              *((_QWORD *)&v46 + 1) = &v90[8 * v91];
              if (v40)
              {
                v133 = v48;
                v128 = v46;
                operator delete(v40);
                v46 = v128;
                v48 = v133;
              }
              v45 = v87;
            }
            else
            {
              v49 = v47 >> 3;
              if (v49 >= -1)
                v50 = v49 + 1;
              else
                v50 = v49 + 2;
              v43 -= 8 * (v50 >> 1);
              *(_QWORD *)&v46 = v43;
              *((_QWORD *)&v48 + 1) = v43;
            }
          }
          else
          {
            v48 = v132;
          }
          *(_QWORD *)v43 = v45;
          *(_QWORD *)&v46 = v46 + 8;
          v92 = *((_QWORD *)this + 21);
          v2 = v125;
          v3 = v124;
          while (v92 != *((_QWORD *)this + 20))
          {
            v93 = (_QWORD *)*((_QWORD *)&v48 + 1);
            if (*((_QWORD *)&v48 + 1) == (_QWORD)v48)
            {
              v95 = (_BYTE *)v46;
              if ((unint64_t)v46 >= *((_QWORD *)&v46 + 1))
              {
                if (*((_QWORD *)&v46 + 1) == *((_QWORD *)&v48 + 1))
                  v100 = 1;
                else
                  v100 = (uint64_t)(*((_QWORD *)&v46 + 1) - *((_QWORD *)&v48 + 1)) >> 2;
                v101 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v100);
                v94 = &v101[(2 * v100 + 6) & 0xFFFFFFFFFFFFFFF8];
                v103 = v94;
                v104 = v95 - (_BYTE *)v93;
                if (v95 != (_BYTE *)v93)
                {
                  v103 = &v94[v104 & 0xFFFFFFFFFFFFFFF8];
                  v105 = 8 * (v104 >> 3);
                  v106 = v94;
                  v107 = v93;
                  do
                  {
                    v108 = *v107++;
                    *(_QWORD *)v106 = v108;
                    v106 += 8;
                    v105 -= 8;
                  }
                  while (v105);
                }
                *(_QWORD *)&v48 = v101;
                *((_QWORD *)&v48 + 1) = v94;
                *(_QWORD *)&v46 = v103;
                *((_QWORD *)&v46 + 1) = &v101[8 * v102];
                if (v93)
                {
                  v135 = v48;
                  v129 = v46;
                  operator delete(v93);
                  v46 = v129;
                  v48 = v135;
                }
              }
              else
              {
                v96 = (uint64_t)(*((_QWORD *)&v46 + 1) - v46) >> 3;
                if (v96 >= -1)
                  v97 = v96 + 1;
                else
                  v97 = v96 + 2;
                v98 = v97 >> 1;
                v99 = v46 + 8 * (v97 >> 1);
                v94 = (char *)(v99 - (v46 - *((_QWORD *)&v48 + 1)));
                if ((_QWORD)v46 == *((_QWORD *)&v48 + 1))
                {
                  v95 = (_BYTE *)*((_QWORD *)&v48 + 1);
                }
                else
                {
                  v134 = v48;
                  v130 = *((_QWORD *)&v46 + 1);
                  memmove((void *)(v99 - (v46 - *((_QWORD *)&v48 + 1))), *((const void **)&v48 + 1), v46 - *((_QWORD *)&v48 + 1));
                  *((_QWORD *)&v46 + 1) = v130;
                  *(_QWORD *)&v48 = v134;
                }
                *((_QWORD *)&v48 + 1) = v94;
                *(_QWORD *)&v46 = &v95[8 * v98];
              }
            }
            else
            {
              v94 = (char *)*((_QWORD *)&v48 + 1);
            }
            v109 = *(_QWORD *)(v92 - 8);
            v92 -= 8;
            *((_QWORD *)v94 - 1) = v109;
            *((_QWORD *)&v48 + 1) -= 8;
          }
          v110 = (void *)*((_QWORD *)this + 19);
          *(_OWORD *)((char *)this + 152) = v48;
          *(_OWORD *)((char *)this + 168) = v46;
          v4 = v127;
          if (v110)
            operator delete(v110);
        }
        else
        {
          v37 = operator new(0xFF0uLL);
          v38 = v37;
          if (v34 == v12)
          {
            if (v35 == v13)
            {
              if (v12 == v13)
                v64 = 1;
              else
                v64 = v36 >> 2;
              v65 = 2 * v64;
              v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v64);
              v13 = &v66[(v65 + 6) & 0xFFFFFFFFFFFFFFF8];
              v68 = (uint64_t *)*((_QWORD *)this + 20);
              v69 = v13;
              v70 = *((_QWORD *)this + 21) - (_QWORD)v68;
              if (v70)
              {
                v69 = &v13[v70 & 0xFFFFFFFFFFFFFFF8];
                v71 = 8 * (v70 >> 3);
                v72 = v13;
                do
                {
                  v73 = *v68++;
                  *(_QWORD *)v72 = v73;
                  v72 += 8;
                  v71 -= 8;
                }
                while (v71);
              }
              v74 = (void *)*((_QWORD *)this + 19);
              *((_QWORD *)this + 19) = v66;
              *((_QWORD *)this + 20) = v13;
              *((_QWORD *)this + 21) = v69;
              *((_QWORD *)this + 22) = &v66[8 * v67];
              if (v74)
              {
                operator delete(v74);
                v13 = (char *)*((_QWORD *)this + 20);
              }
            }
            *((_QWORD *)v13 - 1) = v38;
            v75 = (char *)*((_QWORD *)this + 20);
            v76 = (char *)*((_QWORD *)this + 21);
            *((_QWORD *)this + 20) = v75 - 8;
            v77 = *((_QWORD *)v75 - 1);
            *((_QWORD *)this + 20) = v75;
            v2 = v125;
            v3 = v124;
            if (v76 == *((char **)this + 22))
            {
              v78 = *((_QWORD *)this + 19);
              v79 = (uint64_t)&v75[-v78];
              if ((unint64_t)v75 <= v78)
              {
                v112 = (uint64_t)&v76[-v78];
                v51 = v112 == 0;
                v113 = v112 >> 2;
                if (v51)
                  v114 = 1;
                else
                  v114 = v113;
                v115 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v114);
                v117 = &v115[8 * (v114 >> 2)];
                v118 = (uint64_t *)*((_QWORD *)this + 20);
                v76 = v117;
                v119 = *((_QWORD *)this + 21) - (_QWORD)v118;
                if (v119)
                {
                  v76 = &v117[v119 & 0xFFFFFFFFFFFFFFF8];
                  v120 = 8 * (v119 >> 3);
                  v121 = &v115[8 * (v114 >> 2)];
                  do
                  {
                    v122 = *v118++;
                    *(_QWORD *)v121 = v122;
                    v121 += 8;
                    v120 -= 8;
                  }
                  while (v120);
                }
                v123 = (void *)*((_QWORD *)this + 19);
                *((_QWORD *)this + 19) = v115;
                *((_QWORD *)this + 20) = v117;
                *((_QWORD *)this + 21) = v76;
                *((_QWORD *)this + 22) = &v115[8 * v116];
                if (v123)
                {
                  operator delete(v123);
                  v76 = (char *)*((_QWORD *)this + 21);
                }
              }
              else
              {
                v80 = v79 >> 3;
                v24 = v79 >> 3 < -1;
                v81 = (v79 >> 3) + 2;
                if (v24)
                  v82 = v81;
                else
                  v82 = v80 + 1;
                v83 = -(v82 >> 1);
                v84 = v82 >> 1;
                v85 = &v75[-8 * v84];
                v86 = v76 - v75;
                if (v76 != v75)
                {
                  memmove(&v75[-8 * v84], v75, v76 - v75);
                  v75 = (char *)*((_QWORD *)this + 20);
                }
                v76 = &v85[v86];
                *((_QWORD *)this + 20) = &v75[8 * v83];
                *((_QWORD *)this + 21) = &v85[v86];
              }
            }
            *(_QWORD *)v76 = v77;
            *((_QWORD *)this + 21) += 8;
            v4 = v127;
          }
          else
          {
            *(_QWORD *)v12 = v37;
            *((_QWORD *)this + 21) += 8;
            v2 = v125;
            v4 = v127;
            v3 = v124;
          }
        }
      }
      else
      {
        *((_QWORD *)this + 23) = v16 - 85;
        v20 = *(_QWORD *)v13;
        v18 = v13 + 8;
        v19 = v20;
        *((_QWORD *)this + 20) = v18;
        if (*((char **)this + 22) == v12)
        {
          v21 = *((_QWORD *)this + 19);
          v22 = (uint64_t)&v18[-v21];
          if ((unint64_t)v18 <= v21)
          {
            v52 = (uint64_t)&v12[-v21];
            v51 = v52 == 0;
            v53 = v52 >> 2;
            if (v51)
              v54 = 1;
            else
              v54 = v53;
            v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v54);
            v57 = &v55[8 * (v54 >> 2)];
            v58 = (uint64_t *)*((_QWORD *)this + 20);
            v12 = v57;
            v59 = *((_QWORD *)this + 21) - (_QWORD)v58;
            if (v59)
            {
              v12 = &v57[v59 & 0xFFFFFFFFFFFFFFF8];
              v60 = 8 * (v59 >> 3);
              v61 = &v55[8 * (v54 >> 2)];
              do
              {
                v62 = *v58++;
                *(_QWORD *)v61 = v62;
                v61 += 8;
                v60 -= 8;
              }
              while (v60);
            }
            v63 = (void *)*((_QWORD *)this + 19);
            *((_QWORD *)this + 19) = v55;
            *((_QWORD *)this + 20) = v57;
            *((_QWORD *)this + 21) = v12;
            *((_QWORD *)this + 22) = &v55[8 * v56];
            if (v63)
            {
              operator delete(v63);
              v12 = (char *)*((_QWORD *)this + 21);
            }
          }
          else
          {
            v126 = v4;
            v23 = v22 >> 3;
            v24 = v22 >> 3 < -1;
            v25 = (v22 >> 3) + 2;
            if (v24)
              v26 = v25;
            else
              v26 = v23 + 1;
            v27 = -(v26 >> 1);
            v28 = v26 >> 1;
            v29 = &v18[-8 * v28];
            v30 = v12 - v18;
            if (v12 == v18)
            {
              v32 = v12;
            }
            else
            {
              v31 = &v18[-8 * v28];
              memmove(v31, v18, v30);
              v29 = v31;
              v32 = (char *)*((_QWORD *)this + 20);
            }
            v12 = &v29[v30];
            *((_QWORD *)this + 20) = &v32[8 * v27];
            *((_QWORD *)this + 21) = &v29[v30];
            v4 = v126;
          }
        }
        *(_QWORD *)v12 = v19;
        *((_QWORD *)this + 21) += 8;
      }
      v13 = (char *)*((_QWORD *)this + 20);
      v17 = *((_QWORD *)this + 24) + *((_QWORD *)this + 23);
    }
    v111 = *(_QWORD *)&v13[8 * (v17 / 0x55)] + 48 * (v17 % 0x55);
    *(_QWORD *)v111 = v2;
    *(_DWORD *)(v111 + 8) = v3;
    *(_QWORD *)(v111 + 16) = v4;
    *(_QWORD *)(v111 + 24) = v6;
    *(_QWORD *)(v111 + 32) = v131;
    *(_QWORD *)(v111 + 40) = v11;
    ++*((_QWORD *)this + 24);
  }
}

void sub_1BF949794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int128 a17, char a18)
{
  void *v18;

  operator delete(v18);
  if ((_QWORD)a17)
    operator delete((void *)a17);
  _Unwind_Resume(a1);
}

__n128 std::deque<YAML::Token>::push_back(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 51 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<YAML::Token>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x33)) + 80 * (v7 % 0x33);
  v9 = *a2;
  *(_DWORD *)(v8 + 16) = *((_DWORD *)a2 + 4);
  *(_OWORD *)v8 = v9;
  v10 = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(v8 + 40) = *((_QWORD *)a2 + 5);
  *(_OWORD *)(v8 + 24) = v10;
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)a2 + 3) = 0;
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 56) = 0;
  *(_QWORD *)(v8 + 64) = 0;
  result = (__n128)a2[3];
  *(__n128 *)(v8 + 48) = result;
  *(_QWORD *)(v8 + 64) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 7) = 0;
  *((_QWORD *)a2 + 8) = 0;
  *((_QWORD *)a2 + 6) = 0;
  *(_DWORD *)(v8 + 72) = *((_DWORD *)a2 + 18);
  ++a1[5];
  return result;
}

void YAML::Token::~Token(void **this)
{
  void **v2;

  v2 = this + 6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
}

void std::deque<YAML::Token>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  __int128 v33;
  void *v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t i;
  _QWORD *v67;
  char *v68;
  _BYTE *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  __int128 v97;

  v2 = a1[4];
  v3 = v2 >= 0x33;
  v4 = v2 - 51;
  if (v3)
  {
    a1[4] = v4;
    v5 = (_QWORD *)a1[1];
    v6 = (char *)a1[2];
    v9 = *v5;
    v7 = (char *)(v5 + 1);
    v8 = v9;
    a1[1] = v7;
    if (v6 != (char *)a1[3])
      goto LABEL_41;
    v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v40 = 1;
      else
        v40 = (uint64_t)&v6[-*a1] >> 2;
      v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v40);
      v42 = &v41[8 * (v40 >> 2)];
      v44 = &v41[8 * v43];
      v45 = (uint64_t *)a1[1];
      v6 = v42;
      v46 = a1[2] - (_QWORD)v45;
      if (v46)
      {
        v6 = &v42[v46 & 0xFFFFFFFFFFFFFFF8];
        v47 = 8 * (v46 >> 3);
        v48 = &v41[8 * (v40 >> 2)];
        do
        {
          v49 = *v45++;
          *(_QWORD *)v48 = v49;
          v48 += 8;
          v47 -= 8;
        }
        while (v47);
      }
      goto LABEL_29;
    }
LABEL_5:
    v11 = v10 >> 3;
    v12 = v10 >> 3 < -1;
    v13 = (v10 >> 3) + 2;
    if (v12)
      v14 = v13;
    else
      v14 = v11 + 1;
    v15 = -(v14 >> 1);
    v16 = v14 >> 1;
    v17 = &v7[-8 * v16];
    v18 = v6 - v7;
    if (v6 != v7)
    {
      memmove(&v7[-8 * v16], v7, v6 - v7);
      v7 = (char *)a1[1];
    }
    v6 = &v17[v18];
    a1[1] = &v7[8 * v15];
    a1[2] = &v17[v18];
    goto LABEL_41;
  }
  v20 = (char *)a1[2];
  v19 = (char *)a1[3];
  v21 = (char *)*a1;
  v22 = (char *)a1[1];
  v23 = (v20 - v22) >> 3;
  v24 = (uint64_t)&v19[-*a1];
  if (v23 < v24 >> 3)
  {
    v25 = operator new(0xFF0uLL);
    v26 = v25;
    if (v19 != v20)
    {
      *(_QWORD *)v20 = v25;
LABEL_42:
      a1[2] += 8;
      return;
    }
    if (v22 == v21)
    {
      if (v20 == v22)
        v51 = 1;
      else
        v51 = (v19 - v22) >> 2;
      v52 = 2 * v51;
      v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v51);
      v22 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
      v55 = (uint64_t *)a1[1];
      v56 = v22;
      v57 = a1[2] - (_QWORD)v55;
      if (v57)
      {
        v56 = &v22[v57 & 0xFFFFFFFFFFFFFFF8];
        v58 = 8 * (v57 >> 3);
        v59 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
        do
        {
          v60 = *v55++;
          *(_QWORD *)v59 = v60;
          v59 += 8;
          v58 -= 8;
        }
        while (v58);
      }
      v61 = (char *)*a1;
      *a1 = v53;
      a1[1] = v22;
      a1[2] = v56;
      a1[3] = &v53[8 * v54];
      if (v61)
      {
        operator delete(v61);
        v22 = (char *)a1[1];
      }
    }
    *((_QWORD *)v22 - 1) = v26;
    v7 = (char *)a1[1];
    v6 = (char *)a1[2];
    a1[1] = v7 - 8;
    v8 = *((_QWORD *)v7 - 1);
    a1[1] = v7;
    if (v6 != (char *)a1[3])
    {
LABEL_41:
      *(_QWORD *)v6 = v8;
      goto LABEL_42;
    }
    v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v85 = 1;
      else
        v85 = (uint64_t)&v6[-*a1] >> 2;
      v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v85);
      v42 = &v41[8 * (v85 >> 2)];
      v44 = &v41[8 * v86];
      v87 = (uint64_t *)a1[1];
      v6 = v42;
      v88 = a1[2] - (_QWORD)v87;
      if (v88)
      {
        v6 = &v42[v88 & 0xFFFFFFFFFFFFFFF8];
        v89 = 8 * (v88 >> 3);
        v90 = &v41[8 * (v85 >> 2)];
        do
        {
          v91 = *v87++;
          *(_QWORD *)v90 = v91;
          v90 += 8;
          v89 -= 8;
        }
        while (v89);
      }
LABEL_29:
      v50 = (char *)*a1;
      *a1 = v41;
      a1[1] = v42;
      a1[2] = v6;
      a1[3] = v44;
      if (v50)
      {
        operator delete(v50);
        v6 = (char *)a1[2];
      }
      goto LABEL_41;
    }
    goto LABEL_5;
  }
  v27 = v24 >> 2;
  if (v19 == v21)
    v28 = 1;
  else
    v28 = v27;
  v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v28);
  v31 = v30;
  v32 = &v29[8 * v23];
  *(_QWORD *)&v33 = v29;
  *((_QWORD *)&v33 + 1) = v32;
  v95 = v33;
  v34 = operator new(0xFF0uLL);
  *(_QWORD *)&v35 = v32;
  *((_QWORD *)&v35 + 1) = &v29[8 * v31];
  if (v23 == v31)
  {
    v36 = 8 * v23;
    *(_QWORD *)&v37 = v95;
    if (v20 - v22 >= 1)
    {
      v38 = v36 >> 3;
      if (v38 >= -1)
        v39 = v38 + 1;
      else
        v39 = v38 + 2;
      v32 -= 8 * (v39 >> 1);
      *(_QWORD *)&v35 = v32;
      *((_QWORD *)&v37 + 1) = v32;
      goto LABEL_50;
    }
    v62 = v36 >> 2;
    if (v20 == v22)
      v63 = 1;
    else
      v63 = v62;
    v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v63);
    v32 = &v64[8 * (v63 >> 2)];
    *(_QWORD *)&v37 = v64;
    *((_QWORD *)&v37 + 1) = v32;
    *(_QWORD *)&v35 = v32;
    *((_QWORD *)&v35 + 1) = &v64[8 * v65];
    if (!v29)
      goto LABEL_50;
    v92 = v35;
    v95 = v37;
    operator delete(v29);
    v35 = v92;
  }
  v37 = v95;
LABEL_50:
  *(_QWORD *)v32 = v34;
  *(_QWORD *)&v35 = v35 + 8;
  for (i = a1[2]; i != a1[1]; i -= 8)
  {
    v67 = (_QWORD *)*((_QWORD *)&v37 + 1);
    if (*((_QWORD *)&v37 + 1) == (_QWORD)v37)
    {
      v69 = (_BYTE *)v35;
      if ((unint64_t)v35 >= *((_QWORD *)&v35 + 1))
      {
        if (*((_QWORD *)&v35 + 1) == *((_QWORD *)&v37 + 1))
          v74 = 1;
        else
          v74 = (uint64_t)(*((_QWORD *)&v35 + 1) - *((_QWORD *)&v37 + 1)) >> 2;
        v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v74);
        v68 = &v75[(2 * v74 + 6) & 0xFFFFFFFFFFFFFFF8];
        v77 = v68;
        v78 = v69 - (_BYTE *)v67;
        if (v69 != (_BYTE *)v67)
        {
          v77 = &v68[v78 & 0xFFFFFFFFFFFFFFF8];
          v79 = 8 * (v78 >> 3);
          v80 = v68;
          v81 = v67;
          do
          {
            v82 = *v81++;
            *(_QWORD *)v80 = v82;
            v80 += 8;
            v79 -= 8;
          }
          while (v79);
        }
        *(_QWORD *)&v37 = v75;
        *((_QWORD *)&v37 + 1) = v68;
        *(_QWORD *)&v35 = v77;
        *((_QWORD *)&v35 + 1) = &v75[8 * v76];
        if (v67)
        {
          v93 = v35;
          v97 = v37;
          operator delete(v67);
          v35 = v93;
          v37 = v97;
        }
      }
      else
      {
        v70 = (uint64_t)(*((_QWORD *)&v35 + 1) - v35) >> 3;
        if (v70 >= -1)
          v71 = v70 + 1;
        else
          v71 = v70 + 2;
        v72 = v71 >> 1;
        v73 = v35 + 8 * (v71 >> 1);
        v68 = (char *)(v73 - (v35 - *((_QWORD *)&v37 + 1)));
        if ((_QWORD)v35 == *((_QWORD *)&v37 + 1))
        {
          v69 = (_BYTE *)*((_QWORD *)&v37 + 1);
        }
        else
        {
          v94 = *((_QWORD *)&v35 + 1);
          v96 = v37;
          memmove((void *)(v73 - (v35 - *((_QWORD *)&v37 + 1))), *((const void **)&v37 + 1), v35 - *((_QWORD *)&v37 + 1));
          *((_QWORD *)&v35 + 1) = v94;
          *(_QWORD *)&v37 = v96;
        }
        *((_QWORD *)&v37 + 1) = v68;
        *(_QWORD *)&v35 = &v69[8 * v72];
      }
    }
    else
    {
      v68 = (char *)*((_QWORD *)&v37 + 1);
    }
    v83 = *(_QWORD *)(i - 8);
    *((_QWORD *)v68 - 1) = v83;
    *((_QWORD *)&v37 + 1) -= 8;
  }
  v84 = (char *)*a1;
  *(_OWORD *)a1 = v37;
  *((_OWORD *)a1 + 1) = v35;
  if (v84)
    operator delete(v84);
}

void sub_1BF949DBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11)
{
  void *v11;

  operator delete(v11);
  if ((_QWORD)a11)
    operator delete((void *)a11);
  _Unwind_Resume(a1);
}

void YAML::Scanner::InvalidateSimpleKey(YAML::Scanner *this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;

  v1 = *((_QWORD *)this + 24);
  if (v1)
  {
    v2 = v1 - 1;
    v3 = *((_QWORD *)this + 23) + v1 - 1;
    v4 = *(_QWORD *)(*((_QWORD *)this + 20) + 8 * (v3 / 0x55));
    v5 = v3 % 0x55;
    if (*(_QWORD *)(v4 + 48 * (v3 % 0x55) + 16) == *((_QWORD *)this + 39))
    {
      v6 = *(_QWORD *)(v4 + 48 * v5 + 24);
      if (v6)
        *(_DWORD *)(v6 + 8) = 1;
      v7 = *(_DWORD **)(v4 + 48 * v5 + 32);
      if (v7)
        *v7 = 1;
      v8 = *(_DWORD **)(v4 + 48 * v5 + 40);
      if (v8)
        *v8 = 1;
      *((_QWORD *)this + 24) = v2;
      std::deque<YAML::Scanner::SimpleKey>::__maybe_remove_back_spare[abi:ne180100]((_QWORD *)this + 19);
    }
  }
}

void std::deque<YAML::Scanner::SimpleKey>::__maybe_remove_back_spare[abi:ne180100](_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  v1 = a1[2];
  if (v1 == v2)
    v3 = 0;
  else
    v3 = 85 * ((v1 - v2) >> 3) - 1;
  if ((unint64_t)(v3 - (a1[5] + a1[4])) >= 0xAA)
  {
    operator delete(*(void **)(v1 - 8));
    a1[2] -= 8;
  }
}

uint64_t YAML::Scanner::VerifySimpleKey(YAML::Scanner *this)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  int *v7;
  int v8;
  int v9;
  uint64_t result;
  int v11;

  v1 = *((_QWORD *)this + 24);
  if (!v1)
    return 0;
  v3 = v1 - 1;
  v4 = *(_QWORD *)(*((_QWORD *)this + 20) + 8 * ((*((_QWORD *)this + 23) + v3) / 0x55uLL))
     + 48 * ((*((_QWORD *)this + 23) + v3) % 0x55uLL);
  if (*(_QWORD *)(v4 + 16) != *((_QWORD *)this + 39))
    return 0;
  v6 = *(_QWORD *)(v4 + 24);
  v5 = *(_DWORD **)(v4 + 32);
  v7 = *(int **)(v4 + 40);
  v8 = *(_DWORD *)v4;
  v9 = *(_DWORD *)(v4 + 4);
  *((_QWORD *)this + 24) = v3;
  std::deque<YAML::Scanner::SimpleKey>::__maybe_remove_back_spare[abi:ne180100]((_QWORD *)this + 19);
  if (*((_DWORD *)this + 3) == v9 && *((_DWORD *)this + 2) - v8 <= 1024)
  {
    if (v6)
      *(_DWORD *)(v6 + 8) = 0;
    if (v5)
      *v5 = 0;
    result = 1;
    if (v7)
    {
      v11 = 0;
      goto LABEL_18;
    }
  }
  else
  {
    if (v6)
      *(_DWORD *)(v6 + 8) = 1;
    if (v5)
      *v5 = 1;
    result = 0;
    if (v7)
    {
      v11 = 1;
LABEL_18:
      *v7 = v11;
    }
  }
  return result;
}

void YAML::Scanner::PopAllSimpleKeys(YAML::Scanner *this)
{
  uint64_t v1;
  _QWORD *v3;

  v1 = *((_QWORD *)this + 24);
  if (v1)
  {
    v3 = (_QWORD *)((char *)this + 152);
    do
    {
      *((_QWORD *)this + 24) = v1 - 1;
      std::deque<YAML::Scanner::SimpleKey>::__maybe_remove_back_spare[abi:ne180100](v3);
      v1 = *((_QWORD *)this + 24);
    }
    while (v1);
  }
}

void siri::dialogengine::VariableBoolean::~VariableBoolean(void **this)
{
  siri::dialogengine::Variable::~Variable(this);
  JUMPOUT(0x1C3B8D890);
}

uint64_t siri::dialogengine::VariableBoolean::Accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, a1);
}

uint64_t siri::dialogengine::VariableBoolean::IsEmpty(siri::dialogengine::VariableBoolean *this)
{
  return 0;
}

void siri::dialogengine::VariableBoolean::ToString(siri::dialogengine::VariableBoolean *this@<X0>, uint64_t a2@<X8>)
{
  char *v3;
  void *__p[2];
  char v5;

  if (*((_BYTE *)this + 66))
    v3 = "true";
  else
    v3 = "false";
  std::string::basic_string[abi:ne180100]<0>(__p, v3);
  siri::dialogengine::SpeakableString::SpeakableString(a2, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_1BF94A0E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::VariableBoolean::ToString(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

siri::dialogengine::VariableBoolean *siri::dialogengine::VariableBoolean::VariableBoolean(siri::dialogengine::VariableBoolean *this)
{
  std::string __p;
  std::string v4;

  std::string::basic_string[abi:ne180100]<0>(&v4, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, siri::dialogengine::TYPE_BOOLEAN);
  siri::dialogengine::Variable::Variable((uint64_t)this, &v4, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  *(_QWORD *)this = &off_1E792ED50;
  *((_BYTE *)this + 66) = 0;
  return this;
}

void sub_1BF94A190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::VariableBoolean::VariableBoolean(uint64_t a1, const std::string *a2, char a3)
{
  std::string __p;

  std::string::basic_string[abi:ne180100]<0>(&__p, siri::dialogengine::TYPE_BOOLEAN);
  siri::dialogengine::Variable::Variable(a1, a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)a1 = &off_1E792ED50;
  *(_BYTE *)(a1 + 66) = a3;
  return a1;
}

void sub_1BF94A240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::VariableBoolean::SetValue(uint64_t this, char a2)
{
  *(_BYTE *)(this + 66) = a2;
  return this;
}

uint64_t siri::dialogengine::VariableBoolean::GetValue(siri::dialogengine::VariableBoolean *this)
{
  return *((unsigned __int8 *)this + 66);
}

_QWORD *siri::dialogengine::DialogStateBase::DialogStateBase(_QWORD *this)
{
  *this = off_1E792EDA0;
  return this;
}

_QWORD *siri::dialogengine::DialogStateBase::Get@<X0>(_QWORD *a1@<X8>)
{
  int v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *result;
  uint64_t (**v7)();

  v3 = siri::dialogengine::sForceServerBehavior;
  v4 = (_QWORD *)operator new();
  v5 = v4;
  if (v3)
  {
    *v4 = &off_1E7935A80;
    *a1 = v4;
    result = (_QWORD *)operator new();
    result[2] = 0;
    v7 = &off_1E792EDF8;
  }
  else
  {
    *v4 = &off_1E7931E60;
    *a1 = v4;
    result = (_QWORD *)operator new();
    result[2] = 0;
    v7 = &off_1E792EE70;
  }
  *result = v7;
  result[1] = 0;
  result[3] = v5;
  a1[1] = result;
  return result;
}

void sub_1BF94A350(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<siri::dialogengine::DialogStateClient *,std::shared_ptr<siri::dialogengine::DialogStateBase>::__shared_ptr_default_delete<siri::dialogengine::DialogStateBase,siri::dialogengine::DialogStateClient>,std::allocator<siri::dialogengine::DialogStateClient>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::DialogStateClient *,std::shared_ptr<siri::dialogengine::DialogStateBase>::__shared_ptr_default_delete<siri::dialogengine::DialogStateBase,siri::dialogengine::DialogStateClient>,std::allocator<siri::dialogengine::DialogStateClient>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::DialogStateClient *,std::shared_ptr<siri::dialogengine::DialogStateBase>::__shared_ptr_default_delete<siri::dialogengine::DialogStateBase,siri::dialogengine::DialogStateClient>,std::allocator<siri::dialogengine::DialogStateClient>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<siri::dialogengine::DialogStateServer *,std::shared_ptr<siri::dialogengine::DialogStateBase>::__shared_ptr_default_delete<siri::dialogengine::DialogStateBase,siri::dialogengine::DialogStateServer>,std::allocator<siri::dialogengine::DialogStateServer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::DialogStateServer *,std::shared_ptr<siri::dialogengine::DialogStateBase>::__shared_ptr_default_delete<siri::dialogengine::DialogStateBase,siri::dialogengine::DialogStateServer>,std::allocator<siri::dialogengine::DialogStateServer>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::DialogStateServer *,std::shared_ptr<siri::dialogengine::DialogStateBase>::__shared_ptr_default_delete<siri::dialogengine::DialogStateBase,siri::dialogengine::DialogStateServer>,std::allocator<siri::dialogengine::DialogStateServer>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t siri::dialogengine::DialogStateBase::SetServerBehavior(uint64_t this)
{
  siri::dialogengine::sForceServerBehavior = this;
  return this;
}

void siri::dialogengine::DialogStateBase::UpdateStats(double a1, uint64_t a2, const void ***a3, unsigned __int8 *a4, const void ***a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double CurrentTime;
  const void ***v15;
  const void **v16;
  const void **v17;
  const void **v18;
  const void ***v19;
  __int128 *v20;
  char v21;
  std::string::size_type size;
  std::string::size_type v23;
  int v24;
  std::string *v25;
  uint64_t v26;
  std::string *p_s1;
  int v28;
  int v29;
  int v30;
  _BOOL4 v31;
  BOOL v32;
  __int128 *v33;
  __int128 *v34;
  uint64_t v35;
  int v36;
  std::string __p;
  timeval v38;
  uint64_t v39;
  std::string v40;
  std::string v41;
  std::string __s1;
  __int128 *v43;
  _QWORD *v44[3];

  CurrentTime = a1;
  if (a1 == 0.0)
  {
    if (!a3)
    {
      gettimeofday(&v38, 0);
      CurrentTime = (double)v38.tv_usec / 1000000.0 + (double)v38.tv_sec;
      if (a8)
        goto LABEL_5;
      goto LABEL_7;
    }
    CurrentTime = siri::dialogengine::Context::GetCurrentTime((siri::dialogengine::Context *)a3);
  }
  if (a8)
  {
LABEL_5:
    ++*(_QWORD *)a8;
    *(double *)(a8 + 8) = CurrentTime;
    return;
  }
LABEL_7:
  ++*(_QWORD *)a6;
  *(double *)(a6 + 8) = CurrentTime;
  std::__tree<std::string>::destroy(a6 + 16, *(char **)(a6 + 24));
  *(_QWORD *)(a6 + 16) = a6 + 24;
  *(_QWORD *)(a6 + 32) = 0;
  *(_QWORD *)(a6 + 24) = 0;
  v17 = *a5;
  v15 = a5 + 1;
  v16 = v17;
  if (v17 != (const void **)v15)
  {
    do
    {
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(a6 + 40), v16 + 4, (uint64_t)(v16 + 4));
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(a6 + 16), v16 + 4, (uint64_t)(v16 + 4));
      v18 = (const void **)v16[1];
      if (v18)
      {
        do
        {
          v19 = (const void ***)v18;
          v18 = (const void **)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (const void ***)v16[2];
          v32 = *v19 == v16;
          v16 = (const void **)v19;
        }
        while (!v32);
      }
      v16 = (const void **)v19;
    }
    while (v19 != v15);
  }
  if (a3)
  {
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&v43, a3 + 80);
    v20 = v43;
    if (v43 != (__int128 *)v44)
    {
      while (1)
      {
        std::pair<std::string const,std::string>::pair[abi:ne180100](&v41, v20 + 2);
        siri::dialogengine::DialogStateUseCase::GetGroundingUsage(a6, (const void **)&v41.__r_.__value_.__l.__data_, (uint64_t)&v38);
        v21 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
        if (!v38.tv_sec)
          goto LABEL_44;
        if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&__p, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
        else
          __p = v40;
        if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
        else
          size = __s1.__r_.__value_.__l.__size_;
        v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        v24 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v23 = __p.__r_.__value_.__l.__size_;
        if (size != v23)
        {
          v31 = 1;
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_42;
          goto LABEL_49;
        }
        v25 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
          break;
        if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
        {
          v26 = HIBYTE(__s1.__r_.__value_.__r.__words[2]) - 1;
          p_s1 = &__s1;
          do
          {
            v29 = p_s1->__r_.__value_.__s.__data_[0];
            p_s1 = (std::string *)((char *)p_s1 + 1);
            v28 = v29;
            v30 = v25->__r_.__value_.__s.__data_[0];
            v25 = (std::string *)((char *)v25 + 1);
            v31 = v28 != v30;
            v32 = v28 != v30 || v26-- == 0;
          }
          while (!v32);
LABEL_41:
          if ((v24 & 0x80000000) == 0)
            goto LABEL_42;
          goto LABEL_49;
        }
        v31 = 0;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_42:
          if (v31)
            goto LABEL_43;
          goto LABEL_50;
        }
LABEL_49:
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v31)
        {
LABEL_43:
          v21 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
LABEL_44:
          v38.tv_sec = 0;
          v39 = *(_QWORD *)&v38.tv_usec;
          if (v21 < 0)
          {
            *v40.__r_.__value_.__l.__data_ = 0;
            v40.__r_.__value_.__l.__size_ = 0;
          }
          else
          {
            v40.__r_.__value_.__s.__data_[0] = 0;
            *((_BYTE *)&v40.__r_.__value_.__s + 23) = 0;
          }
          std::string::operator=(&v40, &__s1);
          v38.tv_sec = 1;
          siri::dialogengine::GroundingInfo::AddTimestamp((siri::dialogengine::GroundingInfo *)&v38, CurrentTime);
          goto LABEL_51;
        }
LABEL_50:
        ++v38.tv_sec;
        siri::dialogengine::GroundingInfo::AddTimestamp((siri::dialogengine::GroundingInfo *)&v38, CurrentTime);
        siri::dialogengine::GroundingInfo::RemoveTimestampsOlderThan((uint64_t)&v38, CurrentTime + -2851200.0);
LABEL_51:
        siri::dialogengine::DialogStateUseCase::SetGroundingUsage(a6, (__int128 *)&v41, (uint64_t)&v38);
        if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v40.__r_.__value_.__l.__data_);
        if (*(_QWORD *)&v38.tv_usec)
        {
          v39 = *(_QWORD *)&v38.tv_usec;
          operator delete(*(void **)&v38.tv_usec);
        }
        if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s1.__r_.__value_.__l.__data_);
        if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v41.__r_.__value_.__l.__data_);
        v33 = (__int128 *)*((_QWORD *)v20 + 1);
        if (v33)
        {
          do
          {
            v34 = v33;
            v33 = *(__int128 **)v33;
          }
          while (v33);
        }
        else
        {
          do
          {
            v34 = (__int128 *)*((_QWORD *)v20 + 2);
            v32 = *(_QWORD *)v34 == (_QWORD)v20;
            v20 = v34;
          }
          while (!v32);
        }
        v20 = v34;
        if (v34 == (__int128 *)v44)
          goto LABEL_65;
      }
      v31 = memcmp(__s1.__r_.__value_.__l.__data_, v25, __s1.__r_.__value_.__l.__size_) != 0;
      goto LABEL_41;
    }
LABEL_65:
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v44[0]);
  }
  siri::dialogengine::GetFamilyIdFromCatId(a4, (uint64_t)&v38);
  v35 = HIBYTE(v39);
  v36 = SHIBYTE(v39);
  if (v39 < 0)
    v35 = *(_QWORD *)&v38.tv_usec;
  if (v35)
  {
    ++*(_QWORD *)a7;
    *(double *)(a7 + 8) = CurrentTime;
  }
  if (v36 < 0)
    operator delete((void *)v38.tv_sec);
}

void sub_1BF94A854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,_QWORD *a26)
{
  siri::dialogengine::GroundingInfo::~GroundingInfo(&a12);
  std::pair<std::string const,std::string>::~pair((uint64_t)&a19);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a26);
  _Unwind_Resume(a1);
}

void siri::dialogengine::SubstituteWords(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char v12;
  char *v13;
  std::string::size_type v14;
  std::string::size_type v15;
  std::string::size_type v16;
  std::string *v17;
  std::string::size_type size;
  std::string::size_type v19;
  char *j;
  std::string::size_type v21;
  std::string::size_type v22;
  std::string::size_type v23;
  uint64_t v24;
  uint64_t v25;
  char *i;
  std::string::size_type EntireWord;
  std::string *v28;
  __int128 v29;
  int v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  std::string::size_type v37;
  const std::string::value_type *v38;
  std::string::size_type v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  int64_t v43;
  std::string v44;
  std::string __p;
  std::string v46;
  std::string __str;
  std::string v48;
  std::string v49;
  std::string v50;

  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    __str = *(std::string *)a1;
  if (*(char *)(a1 + 47) < 0)
    std::string::__init_copy_ctor_external(&v46, *(const std::string::value_type **)(a1 + 24), *(_QWORD *)(a1 + 32));
  else
    v46 = *(std::string *)(a1 + 24);
  siri::dialogengine::TransformTextLower((uint64_t)&__str, &__p);
  v41 = a5;
  siri::dialogengine::TransformTextLower((uint64_t)&v46, &v44);
  if (a4 == 1)
  {
    v24 = *a2;
    v25 = a2[1];
    if (*a2 != v25)
    {
      do
      {
        for (i = 0; ; i = (char *)(v40 + EntireWord))
        {
          EntireWord = siri::dialogengine::FindEntireWord(a3, (uint64_t *)&v44, v24, i);
          if (EntireWord == -1)
            break;
          std::operator+<char>();
          v28 = std::string::append(&v48, "'>");
          v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
          v49.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v29;
          v28->__r_.__value_.__l.__size_ = 0;
          v28->__r_.__value_.__r.__words[2] = 0;
          v28->__r_.__value_.__r.__words[0] = 0;
          v30 = *(char *)(v24 + 23);
          if (v30 >= 0)
            v31 = (const std::string::value_type *)v24;
          else
            v31 = *(const std::string::value_type **)v24;
          if (v30 >= 0)
            v32 = *(unsigned __int8 *)(v24 + 23);
          else
            v32 = *(_QWORD *)(v24 + 8);
          v33 = std::string::append(&v49, v31, v32);
          v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
          v50.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v34;
          v33->__r_.__value_.__l.__size_ = 0;
          v33->__r_.__value_.__r.__words[2] = 0;
          v33->__r_.__value_.__r.__words[0] = 0;
          v35 = std::string::append(&v50, "</phoneme>");
          v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
          v43 = v35->__r_.__value_.__r.__words[2];
          v42 = v36;
          v35->__r_.__value_.__l.__size_ = 0;
          v35->__r_.__value_.__r.__words[2] = 0;
          v35->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v50.__r_.__value_.__l.__data_);
          if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v49.__r_.__value_.__l.__data_);
          if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v48.__r_.__value_.__l.__data_);
          if (*(char *)(v24 + 23) < 0)
            v37 = *(_QWORD *)(v24 + 8);
          else
            v37 = *(unsigned __int8 *)(v24 + 23);
          if (v43 >= 0)
            v38 = (const std::string::value_type *)&v42;
          else
            v38 = (const std::string::value_type *)v42;
          if (v43 >= 0)
            v39 = HIBYTE(v43);
          else
            v39 = *((_QWORD *)&v42 + 1);
          std::string::replace(&v46, EntireWord, v37, v38, v39);
          siri::dialogengine::TransformTextLower((uint64_t)&v46, &v50);
          if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v44.__r_.__value_.__l.__data_);
          v44 = v50;
          if (SHIBYTE(v43) < 0)
          {
            v40 = *((_QWORD *)&v42 + 1);
            operator delete((void *)v42);
          }
          else
          {
            v40 = HIBYTE(v43);
          }
        }
        v24 += 48;
      }
      while (v24 != v25);
    }
  }
  else if (!a4)
  {
    v10 = *a2;
    v11 = a2[1];
    if (*a2 != v11)
    {
      do
      {
        v12 = 0;
        v13 = 0;
        while (1)
        {
          v14 = siri::dialogengine::FindEntireWord(a3, (uint64_t *)&__p, v10, v13);
          if (v14 == -1)
            break;
          if (*(char *)(v10 + 23) < 0)
            v15 = *(_QWORD *)(v10 + 8);
          else
            v15 = *(unsigned __int8 *)(v10 + 23);
          std::string::basic_string(&v49, &__str, v14, v15, (std::allocator<char> *)&v48);
          siri::dialogengine::TransformTextMatch(v10 + 24, &v50);
          if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v49.__r_.__value_.__l.__data_);
          if (*(char *)(v10 + 23) < 0)
            v16 = *(_QWORD *)(v10 + 8);
          else
            v16 = *(unsigned __int8 *)(v10 + 23);
          if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v17 = &v50;
          else
            v17 = (std::string *)v50.__r_.__value_.__r.__words[0];
          if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
          else
            size = v50.__r_.__value_.__l.__size_;
          std::string::replace(&__str, v14, v16, (const std::string::value_type *)v17, size);
          siri::dialogengine::TransformTextLower((uint64_t)&__str, &v49);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          __p = v49;
          if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
          {
            v19 = v50.__r_.__value_.__l.__size_;
            operator delete(v50.__r_.__value_.__l.__data_);
          }
          else
          {
            v19 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
          }
          v13 = (char *)(v19 + v14);
          v12 = 1;
        }
        if ((v12 & 1) != 0)
        {
          for (j = 0; ; j = (char *)(v23 + v21))
          {
            v21 = siri::dialogengine::FindEntireWord(a3, (uint64_t *)&v44, v10, j);
            if (v21 == -1)
              break;
            if (*(char *)(v10 + 23) < 0)
              v22 = *(_QWORD *)(v10 + 8);
            else
              v22 = *(unsigned __int8 *)(v10 + 23);
            std::string::replace(&v46, v21, v22, "\x1B\\audio=AssistantEtiquette\\");
            siri::dialogengine::TransformTextLower((uint64_t)&v46, &v50);
            if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v44.__r_.__value_.__l.__data_);
            v44 = v50;
            std::string::basic_string[abi:ne180100]<0>(&v50, "\x1B\\audio=AssistantEtiquette\\");
            if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
            {
              v23 = v50.__r_.__value_.__l.__size_;
              operator delete(v50.__r_.__value_.__l.__data_);
            }
            else
            {
              v23 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
            }
          }
        }
        v10 += 48;
      }
      while (v10 != v11);
    }
  }
  siri::dialogengine::SpeakableString::SpeakableString(v41, &__str, &v46);
}

void sub_1BF94ACC0()
{
  void *v0;
  char v1;
  void *v2;
  char v3;
  void *v4;
  char v5;
  void *v6;
  char v7;

  if (v1 < 0)
    operator delete(v0);
  if (v3 < 0)
    operator delete(v2);
  if (v5 < 0)
    operator delete(v4);
  if (v7 < 0)
    operator delete(v6);
}

void sub_1BF94AD20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a44 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::FindEntireWord(uint64_t *a1, uint64_t *a2, uint64_t a3, char *a4)
{
  uint64_t v4;
  uint64_t *v7;
  unint64_t v9;
  uint64_t v10;
  int v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t result;
  BOOL v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  size_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  const void **v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  char *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  char *v55;
  uint64_t v56;
  BOOL v57;
  char **v58;
  char *v59;
  char *v60;
  char *v61;
  char ***v62;

  v7 = a2;
  while (1)
  {
    if (*((char *)v7 + 23) < 0)
    {
      v9 = v7[1];
      if ((unint64_t)a4 >= v9)
        return -1;
      v10 = *v7;
    }
    else
    {
      v9 = *((unsigned __int8 *)v7 + 23);
      v10 = (uint64_t)v7;
      if ((unint64_t)a4 >= v9)
        return -1;
    }
    v11 = *(char *)(a3 + 23);
    v12 = v11 >= 0 ? (char *)a3 : *(char **)a3;
    v13 = v11 >= 0 ? *(unsigned __int8 *)(a3 + 23) : *(_QWORD *)(a3 + 8);
    if (v13)
      break;
LABEL_23:
    siri::dialogengine::TokenizeText(a1, &v60);
    siri::dialogengine::TokenizeText(a1, (char **)&v58);
    v25 = v60;
    if (v61 == v60)
    {
      v32 = 0;
    }
    else
    {
      v51 = v4;
      v52 = a1;
      v53 = a3;
      v26 = 0;
      v27 = 0;
      v28 = (v61 - v60) / 40;
      v29 = (char *)v58;
      v55 = v59;
      if ((unint64_t)((v59 - (char *)v58) / 40) <= 1)
        v30 = 1;
      else
        v30 = (v59 - (char *)v58) / 40;
      if (v28 <= 1)
        v31 = 1;
      else
        v31 = (v61 - v60) / 40;
      v56 = v31;
      v32 = 1;
      while (1)
      {
        v57 = v32;
        v33 = v28 <= v27 ? v27 : v28;
        if (*(char **)&v25[40 * v27] == a4)
          break;
LABEL_55:
        v32 = ++v27 < v28;
        --v26;
        if (v27 == v56)
        {
          a3 = v53;
          v7 = a2;
          v4 = v51;
          a1 = v52;
          goto LABEL_59;
        }
      }
      if (v55 != v29)
      {
        v34 = 0;
        v35 = v33 + v26;
        while (v34 != v35)
        {
          v36 = &v29[40 * v34];
          v37 = &v25[40 * v34 + 40 * v27];
          v38 = v36[39];
          v39 = *((_QWORD *)v36 + 3);
          if ((v38 & 0x80u) == 0)
            v40 = v36[39];
          else
            v40 = *((_QWORD *)v36 + 3);
          v41 = v37[39];
          v42 = (char)v41;
          if ((v41 & 0x80u) != 0)
            v41 = *((_QWORD *)v37 + 3);
          if (v40 != v41)
            goto LABEL_55;
          v43 = (const void **)(v36 + 16);
          v46 = (unsigned __int8 *)*((_QWORD *)v37 + 2);
          v44 = (unsigned __int8 *)(v37 + 16);
          v45 = v46;
          if (v42 >= 0)
            v47 = v44;
          else
            v47 = v45;
          if ((v38 & 0x80) != 0)
          {
            v48 = a4;
            v49 = v30;
            v50 = memcmp(*v43, v47, v39);
            v30 = v49;
            a4 = v48;
            if (v50)
              goto LABEL_55;
          }
          else if ((_DWORD)v38)
          {
            while (*(unsigned __int8 *)v43 == *v47)
            {
              v43 = (const void **)((char *)v43 + 1);
              ++v47;
              if (!--v38)
                goto LABEL_53;
            }
            goto LABEL_55;
          }
LABEL_53:
          if (++v34 == v30)
            break;
        }
      }
      v4 = (uint64_t)a4;
      a3 = v53;
      v7 = a2;
      a1 = v52;
      v32 = v57;
    }
LABEL_59:
    ++a4;
    v62 = &v58;
    std::vector<siri::dialogengine::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v62);
    v58 = &v60;
    std::vector<siri::dialogengine::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
    result = v4;
    if (v32)
      return result;
  }
  v14 = v4;
  v15 = &a4[v10];
  v16 = (char *)(v10 + v9);
  v17 = v9 - (_QWORD)a4;
  if (v17 >= v13)
  {
    v18 = a1;
    v19 = *v12;
    do
    {
      v20 = v17 - v13;
      if (v20 == -1)
        break;
      v21 = (char *)memchr(v15, v19, v20 + 1);
      if (!v21)
        break;
      v22 = v21;
      if (!memcmp(v21, v12, v13))
      {
        result = -1;
        if (v22 == v16)
          return result;
        a4 = &v22[-v10];
        v24 = &v22[-v10 + 1] == 0;
        v4 = v14;
        a1 = v18;
        v7 = a2;
        if (v24)
          return result;
        goto LABEL_23;
      }
      v15 = v22 + 1;
      v17 = v16 - (v22 + 1);
    }
    while (v17 >= v13);
  }
  return -1;
}

void sub_1BF94B134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, char a19)
{
  a16 = (void **)&a19;
  std::vector<siri::dialogengine::Token>::__destroy_vector::operator()[abi:ne180100](&a16);
  _Unwind_Resume(a1);
}

void siri::dialogengine::VariableObject::~VariableObject(siri::dialogengine::VariableObject *this)
{
  siri::dialogengine::VariableObject::~VariableObject(this);
  JUMPOUT(0x1C3B8D890);
}

{
  siri::dialogengine::VariableObject *v2;
  uint64_t v3;
  siri::dialogengine::VariableObject *v4;
  siri::dialogengine::VariableObject *v5;
  BOOL v6;

  *(_QWORD *)this = &off_1E792EEE8;
  v2 = (siri::dialogengine::VariableObject *)*((_QWORD *)this + 9);
  if (v2 != (siri::dialogengine::VariableObject *)((char *)this + 80))
  {
    do
    {
      v3 = *((_QWORD *)v2 + 7);
      if (*(siri::dialogengine::VariableObject **)(v3 + 56) == this)
        *(_QWORD *)(v3 + 56) = 0;
      v4 = (siri::dialogengine::VariableObject *)*((_QWORD *)v2 + 1);
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = *(siri::dialogengine::VariableObject **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (siri::dialogengine::VariableObject *)*((_QWORD *)v2 + 2);
          v6 = *(_QWORD *)v5 == (_QWORD)v2;
          v2 = v5;
        }
        while (!v6);
      }
      v2 = v5;
    }
    while (v5 != (siri::dialogengine::VariableObject *)((char *)this + 80));
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*((_QWORD **)this + 10));
  siri::dialogengine::Variable::~Variable((void **)this);
}

uint64_t siri::dialogengine::VariableObject::Accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, a1);
}

BOOL siri::dialogengine::VariableObject::IsEmpty(siri::dialogengine::VariableObject *this)
{
  return *((_QWORD *)this + 11) == 0;
}

void siri::dialogengine::VariableObject::ToString(uint64_t a1@<X8>)
{
  void *__p[2];
  char v4;

  std::string::basic_string[abi:ne180100]<0>(__p, "[Object]");
  siri::dialogengine::SpeakableString::SpeakableString(a1, (uint64_t)__p);
  if (v4 < 0)
    operator delete(__p[0]);
}

void sub_1BF94B1F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::VariableObject::ToString(siri::dialogengine::Variable *a1, const char *a2, const std::string::value_type **a3)
{
  uint64_t v6;
  int v7;
  size_t v8;
  void **v9;
  void **v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  void *v20[2];
  char v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  void *__p[2];
  char v25;
  void *v26[2];
  unsigned __int8 v27;
  unsigned __int8 v28;
  uint64_t v29;
  std::__shared_weak_count *v30;

  siri::dialogengine::ObjectRegistry::GetObject((uint64_t)a2, a3, &v29);
  v6 = v29;
  if (!v29)
    goto LABEL_40;
  std::string::basic_string[abi:ne180100]<0>(__p, "toString");
  siri::dialogengine::ObjectSchema::GetProperty(v6, a2, (const void **)__p, 0, (siri::dialogengine::ObjectProperty *)v26);
  v7 = v28;
  if (v28)
    siri::dialogengine::ObjectProperty::~ObjectProperty(v26);
  if (v25 < 0)
  {
    operator delete(__p[0]);
    if (!v7)
    {
LABEL_40:
      (*(void (**)(siri::dialogengine::Variable *))(*(_QWORD *)a1 + 48))(a1);
      goto LABEL_41;
    }
  }
  else if (!v7)
  {
    goto LABEL_40;
  }
  siri::dialogengine::Variable::GetFullName(a1, (uint64_t)v26);
  if ((v27 & 0x80u) == 0)
    v8 = v27;
  else
    v8 = (size_t)v26[1];
  if (v8)
  {
    v9 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v8 + 9);
    if (v25 < 0)
      v9 = (void **)__p[0];
    if ((v27 & 0x80u) == 0)
      v10 = v26;
    else
      v10 = (void **)v26[0];
    memmove(v9, v10, v8);
    strcpy((char *)v9 + v8, ".toString");
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "toString");
  }
  std::string::basic_string[abi:ne180100]<0>(v20, "toString");
  siri::dialogengine::ConceptCallbacks::InvokeCallback((uint64_t)a2, (uint64_t)a3, (uint64_t)v20, (uint64_t)a1, (uint64_t)__p, &v22);
  if (v21 < 0)
    operator delete(v20[0]);
  if (!v22)
  {
    v14 = v23;
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (v25 < 0)
      operator delete(__p[0]);
    if ((char)v27 < 0)
      operator delete(v26[0]);
    goto LABEL_40;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v22 + 48))(v22);
  v11 = v23;
  if (v23)
  {
    v12 = (unint64_t *)&v23->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v25 < 0)
    operator delete(__p[0]);
  if ((char)v27 < 0)
    operator delete(v26[0]);
LABEL_41:
  v17 = v30;
  if (v30)
  {
    v18 = (unint64_t *)&v30->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_1BF94B4AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v29 - 80);
  _Unwind_Resume(a1);
}

siri::dialogengine::VariableObject *siri::dialogengine::VariableObject::VariableObject(siri::dialogengine::VariableObject *this)
{
  std::string __p;
  std::string v4;

  std::string::basic_string[abi:ne180100]<0>(&v4, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)siri::dialogengine::TYPE_OBJECT);
  siri::dialogengine::Variable::Variable((uint64_t)this, &v4, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  *(_QWORD *)this = &off_1E792EEE8;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 9) = (char *)this + 80;
  return this;
}

void sub_1BF94B658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

_QWORD *siri::dialogengine::VariableObject::VariableObject(_QWORD *a1, const std::string *a2)
{
  std::string __p;

  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)siri::dialogengine::TYPE_OBJECT);
  siri::dialogengine::Variable::Variable((uint64_t)a1, a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *a1 = &off_1E792EEE8;
  a1[11] = 0;
  a1[10] = 0;
  a1[9] = a1 + 10;
  return a1;
}

void sub_1BF94B708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::VariableObject::AddProperty(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t **v5;
  __int128 v6;
  _OWORD *v7;
  std::string __p;
  std::string *p_p;

  v2 = *a2;
  if (*a2)
  {
    v5 = (uint64_t **)(a1 + 72);
    if (*(char *)(v2 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v2 + 8), *(_QWORD *)(v2 + 16));
    }
    else
    {
      v6 = *(_OWORD *)(v2 + 8);
      __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v2 + 24);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v6;
    }
    p_p = &__p;
    v7 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v5, (const void **)&__p.__r_.__value_.__l.__data_, (_OWORD **)&p_p);
    std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100]((_QWORD *)v7 + 7, *a2, a2[1]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    *(_QWORD *)(*a2 + 56) = a1;
  }
}

void sub_1BF94B7C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::VariableObject::AddArrayProperty(uint64_t a1@<X0>, const std::string *a2@<X1>, uint64_t *a3@<X8>)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10[2];

  std::allocate_shared[abi:ne180100]<siri::dialogengine::VariableArray,std::allocator<siri::dialogengine::VariableArray>,std::string const&,void>(a3, a2);
  v5 = (std::__shared_weak_count *)a3[1];
  v10[0] = *a3;
  v10[1] = (uint64_t)v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  siri::dialogengine::VariableObject::AddProperty(a1, v10);
  if (v5)
  {
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1BF94B88C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

void siri::dialogengine::VariableObject::AddBooleanProperty(uint64_t a1@<X0>, const std::string *a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13[2];

  v8 = (std::__shared_weak_count *)operator new(0x60uLL);
  v8->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  v8->__shared_weak_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&off_1E793A478;
  v10 = siri::dialogengine::VariableBoolean::VariableBoolean((uint64_t)&v8[1], a2, a3);
  *a4 = v10;
  a4[1] = (uint64_t)v8;
  v13[0] = v10;
  v13[1] = (uint64_t)v8;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  siri::dialogengine::VariableObject::AddProperty(a1, v13);
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void sub_1BF94B97C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

void siri::dialogengine::VariableObject::AddNumberProperty(uint64_t a1@<X0>, const std::string *a2@<X1>, uint64_t *a3@<X8>, double a4@<D0>)
{
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13[2];

  v8 = (std::__shared_weak_count *)operator new(0x68uLL);
  v8->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  v8->__shared_weak_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&off_1E793A4E0;
  v10 = siri::dialogengine::VariableNumber::VariableNumber((uint64_t)&v8[1], a2, a4);
  *a3 = v10;
  a3[1] = (uint64_t)v8;
  v13[0] = v10;
  v13[1] = (uint64_t)v8;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  siri::dialogengine::VariableObject::AddProperty(a1, v13);
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void sub_1BF94BA8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

void siri::dialogengine::VariableObject::AddObjectProperty(uint64_t a1@<X0>, const std::string *a2@<X1>, uint64_t *a3@<X8>)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10[2];

  std::allocate_shared[abi:ne180100]<siri::dialogengine::VariableObject,std::allocator<siri::dialogengine::VariableObject>,std::string const&,void>(a3, a2);
  v5 = (std::__shared_weak_count *)a3[1];
  v10[0] = *a3;
  v10[1] = (uint64_t)v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  siri::dialogengine::VariableObject::AddProperty(a1, v10);
  if (v5)
  {
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1BF94BB64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

void siri::dialogengine::VariableObject::AddStringProperty(uint64_t a1@<X0>, const std::string *a2@<X1>, const siri::dialogengine::SpeakableString *a3@<X2>, std::string **a4@<X8>)
{
  std::string *v8;
  unint64_t *p_size;
  std::string *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13[2];

  v8 = (std::string *)operator new(0x108uLL);
  v8->__r_.__value_.__l.__size_ = 0;
  p_size = &v8->__r_.__value_.__l.__size_;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E793A548;
  v10 = siri::dialogengine::VariableString::VariableString(v8 + 1, a2, a3);
  *a4 = v10;
  a4[1] = v8;
  v13[0] = (uint64_t)v10;
  v13[1] = (uint64_t)v8;
  do
    v11 = __ldxr(p_size);
  while (__stxr(v11 + 1, p_size));
  siri::dialogengine::VariableObject::AddProperty(a1, v13);
  do
    v12 = __ldaxr(p_size);
  while (__stlxr(v12 - 1, p_size));
  if (!v12)
  {
    (*(void (**)(std::string *))(v8->__r_.__value_.__r.__words[0] + 16))(v8);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v8);
  }
}

void sub_1BF94BC54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

void siri::dialogengine::VariableObject::AddStringProperty(uint64_t a1@<X0>, const std::string *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11[2];

  std::allocate_shared[abi:ne180100]<siri::dialogengine::VariableString,std::allocator<siri::dialogengine::VariableString>,std::string const&,std::string const&,void>(a4, a2, a3);
  v6 = (std::__shared_weak_count *)a4[1];
  v11[0] = *a4;
  v11[1] = (uint64_t)v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  siri::dialogengine::VariableObject::AddProperty(a1, v11);
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1BF94BD2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

uint64_t std::allocate_shared[abi:ne180100]<siri::dialogengine::VariableString,std::allocator<siri::dialogengine::VariableString>,std::string const&,std::string const&,void>(uint64_t *a1, const std::string *a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t result;

  v6 = operator new(0x108uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E793A548;
  result = siri::dialogengine::VariableString::VariableString((uint64_t)(v6 + 3), a2, a3);
  *a1 = result;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1BF94BDA0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void siri::dialogengine::VariableObject::AddStringProperty(uint64_t a1, const std::string *a2, const std::string *a3, const std::string *a4)
{
  _QWORD *v7;

  v7 = operator new(0x108uLL);
  v7[1] = 0;
  v7[2] = 0;
  *v7 = &off_1E793A548;
  siri::dialogengine::VariableString::VariableString((uint64_t)(v7 + 3), a2, a3, a4);
}

void sub_1BF94BEA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

void siri::dialogengine::VariableObject::RemoveProperty(uint64_t a1, const void **a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v3 = (uint64_t **)(a1 + 72);
  v4 = (uint64_t *)std::__tree<std::string>::find<std::string>(a1 + 72, a2);
  if ((uint64_t *)(a1 + 80) != v4)
  {
    v5 = v4;
    v6 = (uint64_t)(v4 + 4);
    v7 = v4[7];
    if (*(_QWORD *)(v7 + 56) == a1)
      *(_QWORD *)(v7 + 56) = 0;
    std::__tree<std::__value_type<std::pair<google::protobuf::Descriptor const*,int>,google::protobuf::FieldDescriptor const*>,std::__map_value_compare<std::pair<google::protobuf::Descriptor const*,int>,std::__value_type<std::pair<google::protobuf::Descriptor const*,int>,google::protobuf::FieldDescriptor const*>,std::less<std::pair<google::protobuf::Descriptor const*,int>>,true>,std::allocator<std::__value_type<std::pair<google::protobuf::Descriptor const*,int>,google::protobuf::FieldDescriptor const*>>>::__remove_node_pointer(v3, v4);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>,0>(v6);
    operator delete(v5);
  }
}

uint64_t siri::dialogengine::VariableObject::GetValue@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = std::__tree<std::string>::find<std::string>(a1 + 72, a2);
  if (a1 + 80 == result)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    v6 = *(_QWORD *)(result + 64);
    *a3 = *(_QWORD *)(result + 56);
    a3[1] = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
  }
  return result;
}

void siri::dialogengine::VariableObject::GetValues(siri::dialogengine::VariableObject *this@<X0>, char **a2@<X8>)
{
  __int128 *v2;
  char *v3;
  _QWORD *v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  int64x2_t v26;
  char *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 *v31;
  __int128 *v32;
  BOOL v33;
  std::string __p;
  __int128 v35;
  uint64_t v36;
  int64x2_t v37;
  char *v38;
  _QWORD *v39;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = (__int128 *)*((_QWORD *)this + 9);
  v3 = (char *)this + 80;
  if (v2 != (__int128 *)((char *)this + 80))
  {
    v5 = a2 + 2;
    do
    {
      std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>::pair[abi:ne180100](&__p, v2 + 2);
      v6 = a2[1];
      v7 = (unint64_t)a2[2];
      if ((unint64_t)v6 >= v7)
      {
        v12 = (v6 - *a2) >> 4;
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 60)
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        v14 = v7 - (_QWORD)*a2;
        if (v14 >> 3 > v13)
          v13 = v14 >> 3;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
          v15 = 0xFFFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        v39 = v5;
        v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v15);
        v18 = &v16[16 * v12];
        v19 = *((_QWORD *)&v35 + 1);
        *(_OWORD *)v18 = v35;
        if (v19)
        {
          v20 = (unint64_t *)(v19 + 8);
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
        v23 = *a2;
        v22 = a2[1];
        if (v22 == *a2)
        {
          v26 = vdupq_n_s64((unint64_t)v22);
          v24 = &v16[16 * v12];
        }
        else
        {
          v24 = &v16[16 * v12];
          do
          {
            v25 = *((_OWORD *)v22 - 1);
            v22 -= 16;
            *((_OWORD *)v24 - 1) = v25;
            v24 -= 16;
            *(_QWORD *)v22 = 0;
            *((_QWORD *)v22 + 1) = 0;
          }
          while (v22 != v23);
          v26 = *(int64x2_t *)a2;
        }
        v11 = v18 + 16;
        *a2 = v24;
        a2[1] = v18 + 16;
        v37 = v26;
        v27 = a2[2];
        a2[2] = &v16[16 * v17];
        v38 = v27;
        v36 = v26.i64[0];
        std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)&v36);
      }
      else
      {
        *(_QWORD *)v6 = v35;
        v8 = *((_QWORD *)&v35 + 1);
        *((_QWORD *)v6 + 1) = *((_QWORD *)&v35 + 1);
        if (v8)
        {
          v9 = (unint64_t *)(v8 + 8);
          do
            v10 = __ldxr(v9);
          while (__stxr(v10 + 1, v9));
        }
        v11 = v6 + 16;
      }
      a2[1] = v11;
      v28 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
      if (*((_QWORD *)&v35 + 1))
      {
        v29 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v31 = (__int128 *)*((_QWORD *)v2 + 1);
      if (v31)
      {
        do
        {
          v32 = v31;
          v31 = *(__int128 **)v31;
        }
        while (v31);
      }
      else
      {
        do
        {
          v32 = (__int128 *)*((_QWORD *)v2 + 2);
          v33 = *(_QWORD *)v32 == (_QWORD)v2;
          v2 = v32;
        }
        while (!v33);
      }
      v2 = v32;
    }
    while (v32 != (__int128 *)v3);
  }
}

void sub_1BF94C19C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>::~pair((uint64_t)&a9);
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::VariableObject::GetProperties@<X0>(const void ***this@<X0>, uint64_t a2@<X8>)
{
  return std::map<std::string,std::shared_ptr<siri::dialogengine::Variable>>::map[abi:ne180100](a2, this + 9);
}

uint64_t std::map<std::string,std::shared_ptr<siri::dialogengine::Variable>>::map[abi:ne180100](uint64_t a1, const void ***a2)
{
  uint64_t **v3;
  const void ***v4;
  const void **v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t v8;
  BOOL v9;
  uint64_t **v10;
  char *v11;
  const void **v12;
  const void ***v13;
  _QWORD v15[2];
  char v16;
  _QWORD *v17;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = (uint64_t **)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v4 = a2 + 1;
  v5 = *a2;
  if (*a2 != (const void **)(a2 + 1))
  {
    while (1)
    {
      v6 = *(_QWORD *)(a1 + 8);
      if (*(uint64_t ***)a1 == v3)
        break;
      v7 = v3;
      if (v6)
      {
        do
        {
          v8 = v6;
          v6 = *(_QWORD *)(v6 + 8);
        }
        while (v6);
      }
      else
      {
        do
        {
          v8 = (uint64_t)v7[2];
          v9 = *(_QWORD *)v8 == (_QWORD)v7;
          v7 = (uint64_t **)v8;
        }
        while (v9);
      }
      if (std::less<std::string>::operator()[abi:ne180100](a1 + 16, (const void **)(v8 + 32), v5 + 4))
      {
        if (!*v3)
          goto LABEL_9;
LABEL_11:
        v17 = (_QWORD *)v8;
        v10 = (uint64_t **)(v8 + 8);
        goto LABEL_13;
      }
      v10 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>(a1, &v17, v5 + 4);
LABEL_13:
      if (!*v10)
        goto LABEL_14;
LABEL_15:
      v12 = (const void **)v5[1];
      if (v12)
      {
        do
        {
          v13 = (const void ***)v12;
          v12 = (const void **)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (const void ***)v5[2];
          v9 = *v13 == v5;
          v5 = (const void **)v13;
        }
        while (!v9);
      }
      v5 = (const void **)v13;
      if (v13 == v4)
        return a1;
    }
    v8 = (uint64_t)v3;
    if (!v6)
    {
LABEL_9:
      v17 = v3;
      v10 = v3;
LABEL_14:
      v11 = (char *)operator new(0x48uLL);
      v15[0] = v11;
      v15[1] = v3;
      v16 = 0;
      std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>::pair[abi:ne180100]((std::string *)(v11 + 32), (__int128 *)v5 + 2);
      v16 = 1;
      std::__tree<std::string>::__insert_node_at((uint64_t **)a1, (uint64_t)v17, v10, (uint64_t *)v11);
      v15[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>>>>::reset[abi:ne180100]((uint64_t)v15);
      goto LABEL_15;
    }
    goto LABEL_11;
  }
  return a1;
}

void sub_1BF94C354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD **v9;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>>>>::reset[abi:ne180100]((uint64_t)&a9);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*v9);
  _Unwind_Resume(a1);
}

uint64_t *siri::dialogengine::vcat::GetRequiredFields(uint64_t a1)
{
  _QWORD *v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t *v5;
  _BOOL4 v6;
  uint64_t *v7;
  unint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  uint64_t n;
  uint64_t ii;
  uint64_t jj;
  uint64_t kk;
  uint64_t mm;
  uint64_t nn;
  uint64_t i1;
  uint64_t i2;
  uint64_t i3;
  uint64_t i4;
  uint64_t i5;
  uint64_t i6;
  uint64_t i7;
  uint64_t i8;
  uint64_t i9;
  uint64_t i10;
  uint64_t i11;
  uint64_t i12;
  uint64_t i13;
  uint64_t i14;
  uint64_t i15;
  uint64_t i16;
  uint64_t i17;
  uint64_t i18;
  uint64_t i19;
  uint64_t i20;
  uint64_t i21;
  uint64_t i22;
  uint64_t i23;
  uint64_t i24;
  const void **v43[3];
  void *v44[2];
  char v45;
  const void **v46[3];
  void *v47[2];
  char v48;
  const void **v49[3];
  void *v50[2];
  char v51;
  const void **v52[3];
  void *v53[2];
  char v54;
  const void **v55[3];
  void *v56[2];
  char v57;
  const void **v58[3];
  void *v59[2];
  char v60;
  const void **v61[3];
  void *v62[2];
  char v63;
  const void **v64[3];
  void *v65[2];
  char v66;
  const void **v67[3];
  void *v68[2];
  char v69;
  const void **v70[3];
  void *v71[2];
  char v72;
  const void **v73[3];
  void *v74[2];
  char v75;
  const void **v76[3];
  void *v77[2];
  char v78;
  const void **v79[3];
  void *v80[2];
  char v81;
  const void **v82[3];
  void *v83[2];
  char v84;
  const void **v85[3];
  void *v86[2];
  char v87;
  const void **v88[3];
  void *v89[2];
  char v90;
  const void **v91[3];
  void *v92[2];
  char v93;
  const void **v94[3];
  void *v95[2];
  char v96;
  const void **v97[3];
  void *v98[2];
  char v99;
  const void **v100[3];
  void *v101[2];
  char v102;
  const void **v103[3];
  void *v104[2];
  char v105;
  const void **v106[3];
  void *v107[2];
  char v108;
  const void **v109[3];
  void *v110[2];
  char v111;
  const void **v112[3];
  void *v113[2];
  char v114;
  const void **v115[3];
  void *v116[2];
  char v117;
  const void **v118[3];
  void *v119[2];
  char v120;
  const void **v121[3];
  void *v122[2];
  char v123;
  const void **v124[3];
  void *v125[2];
  char v126;
  const void **v127[3];
  void *v128[2];
  char v129;
  const void **v130[3];
  void *v131[2];
  char v132;
  const void **v133[3];
  void *v134[2];
  char v135;
  const void **v136[3];
  void *v137[2];
  char v138;
  const void **v139[3];
  void *v140[2];
  char v141;
  const void **v142[3];
  void *v143[2];
  char v144;
  const void **v145[3];
  void *v146[2];
  char v147;
  const void **v148[3];
  void *v149[2];
  char v150;
  const void **v151[3];
  void *v152[2];
  char v153;
  const void **v154[3];
  void *v155[2];
  char v156;
  const void **v157[3];
  void *v158[2];
  char v159;
  const void **v160[3];
  void *v161[2];
  char v162;
  const void **v163[3];
  void *v164[2];
  char v165;
  const void **v166[3];
  void *v167[2];
  char v168;
  const void **v169[3];
  void *v170[2];
  char v171;
  const void **v172[3];
  void *v173[2];
  char v174;
  const void **v175[3];
  void *v176[2];
  char v177;
  const void **v178[3];
  void *v179[2];
  char v180;
  const void **v181[3];
  void *v182[2];
  char v183;
  const void **v184[3];
  void *v185[2];
  char v186;
  const void **v187[3];
  void *v188[2];
  char v189;
  const void **v190[3];
  void *v191[2];
  char v192;
  const void **v193[3];
  void *v194[2];
  char v195;
  const void **v196[3];
  void *v197[2];
  char v198;
  const void **v199[3];
  void *v200[2];
  char v201;
  const void **v202[3];
  void *v203[2];
  char v204;
  const void **v205[3];
  void *v206[2];
  char v207;
  const void **v208[3];
  void *v209[2];
  char v210;
  const void **v211[3];
  void *v212[2];
  char v213;
  const void **v214[3];
  void *v215[2];
  char v216;
  const void **v217[3];
  void *v218[2];
  char v219;
  const void **v220[3];
  void *v221[2];
  char v222;
  const void **v223[3];
  void *v224[2];
  char v225;
  const void **v226[3];
  void *v227[2];
  char v228;
  const void **v229[3];
  void *v230[2];
  char v231;
  const void **v232[3];
  void *v233[2];
  char v234;
  const void **v235[3];
  void *v236[2];
  char v237;
  const void **v238[3];
  void *v239[2];
  char v240;
  const void **v241[3];
  void *v242[2];
  char v243;
  const void **v244[3];
  void *v245[2];
  char v246;
  const void **v247[3];
  void *v248[2];
  char v249;
  const void **v250[3];
  void *v251[2];
  char v252;
  const void **v253[3];
  void *v254[2];
  char v255;
  const void **v256[3];
  void *v257[2];
  char v258;
  const void **v259[3];
  void *v260[2];
  char v261;
  const void **v262[3];
  void *v263[2];
  char v264;
  const void **v265[3];
  void *v266[2];
  char v267;
  const void **v268[3];
  void *v269[2];
  char v270;
  const void **v271[3];
  void *v272[2];
  char v273;
  const void **v274[3];
  void *v275[2];
  char v276;
  const void **v277[3];
  void *v278[2];
  char v279;
  const void **v280[3];
  void *v281[2];
  char v282;
  const void **v283[3];
  void *v284[2];
  char v285;
  const void **v286[3];
  void *v287[2];
  char v288;
  const void **v289[3];
  void *v290[2];
  char v291;
  const void **v292[3];
  void *v293[2];
  char v294;
  const void **v295[3];
  void *v296[2];
  char v297;
  const void **v298[3];
  void *v299[2];
  char v300;
  const void **v301[3];
  void *v302[2];
  char v303;
  const void **v304[3];
  void *v305[2];
  char v306;
  const void **v307[3];
  void *v308[2];
  char v309;
  const void **v310[3];
  void *v311[2];
  char v312;
  const void **v313[3];
  void *v314[2];
  char v315;
  const void **v316[3];
  void *v317[2];
  char v318;
  const void **v319[3];
  void *v320[2];
  char v321;
  const void **v322[3];
  void *v323[2];
  char v324;
  const void **v325[3];
  void *v326[2];
  char v327;
  const void **v328[3];
  void *v329[2];
  char v330;
  const void **v331[3];
  void *v332[2];
  char v333;
  const void **v334[3];
  void *v335[2];
  char v336;
  const void **v337[3];
  void *v338[2];
  char v339;
  const void **v340[3];
  void *v341[2];
  char v342;
  const void **v343[3];
  void *v344[2];
  char v345;
  const void **v346[3];
  void *v347[2];
  char v348;
  const void **v349[3];
  void *v350[2];
  char v351;
  const void **v352[3];
  void *v353[2];
  char v354;
  const void **v355[3];
  void *v356[2];
  char v357;
  const void **v358[3];
  void *v359[2];
  char v360;
  const void **v361[3];
  void *v362[2];
  char v363;
  void *__p[2];
  char v365;
  void *v366[2];
  char v367;
  void *v368[2];
  char v369;
  void *v370[2];
  char v371;
  void *v372[2];
  char v373;
  void *v374[2];
  char v375;
  void *v376[2];
  char v377;
  void *v378[2];
  char v379;
  void *v380[2];
  char v381;
  void *v382[2];
  char v383;
  void *v384[2];
  char v385;
  const void *v386[3];
  _QWORD v387[3];
  void *v388[3];
  void *v389[2];
  char v390;
  const void *v391[3];
  _QWORD v392[3];
  void *v393[3];
  void *v394[2];
  char v395;
  void *v396[2];
  char v397;
  void *v398[2];
  char v399;
  void *v400[2];
  char v401;
  void *v402[2];
  char v403;
  const void *v404[3];
  _QWORD v405[3];
  const void *v406[3];
  void *v407[3];
  void *v408[2];
  char v409;
  const void *v410[3];
  _QWORD v411[3];
  const void *v412[3];
  _QWORD v413[3];
  const void *v414[3];
  _QWORD v415[3];
  _QWORD v416[3];
  const void *v417[3];
  _QWORD v418[3];
  const void *v419[3];
  _QWORD v420[3];
  const void *v421[3];
  void *v422[3];
  void *v423[2];
  char v424;
  const void *v425[3];
  _QWORD v426[3];
  const void *v427[3];
  void *v428[3];
  void *v429[2];
  char v430;
  void *v431[2];
  char v432;
  void *v433[2];
  char v434;
  void *v435[2];
  char v436;
  const void *v437[3];
  _QWORD v438[3];
  const void *v439[3];
  _QWORD v440[3];
  void *v441[3];
  void *v442[2];
  char v443;
  void *v444[2];
  char v445;
  void *v446[2];
  char v447;
  void *v448[2];
  char v449;
  void *v450[2];
  char v451;
  const void *v452[3];
  void *v453[3];
  void *v454[2];
  char v455;
  void *v456[2];
  char v457;
  void *v458[2];
  char v459;
  void *v460[2];
  char v461;
  void *v462[2];
  char v463;
  const void *v464[3];
  _QWORD v465[3];
  const void *v466[3];
  _QWORD v467[3];
  _QWORD v468[3];
  const void *v469[3];
  void *v470[3];
  void *v471[2];
  char v472;
  void *v473[2];
  char v474;
  void *v475[2];
  char v476;
  void *v477[2];
  char v478;
  void *v479[2];
  char v480;
  void *v481[2];
  char v482;
  void *v483[2];
  char v484;
  void *v485[2];
  char v486;
  const void *v487[3];
  void *v488[3];
  void *v489[2];
  char v490;
  const void *v491[3];
  void *v492[3];
  void *v493[2];
  char v494;
  void *v495[2];
  char v496;
  void *v497[2];
  char v498;
  void *v499[2];
  char v500;
  void *v501[2];
  char v502;
  void *v503[2];
  char v504;
  const void *v505[3];
  _QWORD v506[3];
  const void *v507[3];
  void *v508[3];
  void *v509[2];
  char v510;
  void *v511[2];
  char v512;
  void *v513[2];
  char v514;
  void *v515[2];
  char v516;
  void *v517[2];
  char v518;
  void *v519[2];
  char v520;
  void *v521[2];
  char v522;
  void *v523[2];
  char v524;
  void *v525[2];
  char v526;
  const void *v527[3];
  void *v528[3];
  void *v529[2];
  char v530;
  void *v531[2];
  char v532;
  const void *v533[3];
  _QWORD v534[3];
  _QWORD v535[3];
  const void *v536[3];
  void *v537[3];
  void *v538[2];
  char v539;
  const void *v540[3];
  void *v541[3];
  void *v542[2];
  char v543;
  const void *v544[3];
  void *v545[3];
  void *v546[2];
  char v547;
  const void *v548[3];
  _QWORD v549[3];
  void *v550[3];
  void *v551[2];
  char v552;
  void *v553[2];
  char v554;
  const void *v555[3];
  void *v556[3];
  void *v557[2];
  char v558;
  const void *v559[3];
  void *v560[3];
  void *v561[2];
  char v562;
  void *v563[2];
  char v564;
  void *v565[2];
  char v566;
  void *v567[2];
  char v568;
  void *v569[2];
  char v570;
  void *v571[2];
  char v572;
  void *v573[2];
  char v574;
  const void *v575[3];
  _QWORD v576[3];
  const void *v577[3];
  _QWORD v578[3];
  const void *v579[3];
  void *v580[3];
  void *v581[2];
  char v582;
  void *v583[2];
  char v584;
  std::string v585[2];
  std::string v586[2];
  std::string v587[2];
  std::string v588[2];
  std::string v589[2];
  std::string v590[2];
  std::string v591[2];
  std::string v592[2];
  std::string v593[2];
  std::string v594[2];
  std::string v595[2];
  std::string v596[2];
  std::string v597[2];
  std::string v598[2];
  std::string v599[2];
  std::string v600[2];
  std::string v601[2];
  std::string v602[2];
  std::string v603[2];
  std::string v604[2];
  std::string v605[2];
  std::string v606[2];
  std::string v607[2];
  std::string v608[2];
  std::string v609[2];
  std::string v610[2];
  std::string v611[2];
  std::string v612[2];
  std::string v613[2];
  std::string v614[2];
  std::string v615[2];
  std::string v616[2];
  std::string v617[2];
  std::string v618[2];
  std::string v619[2];
  std::string v620[2];
  std::string v621[2];
  std::string v622[2];
  std::string v623[2];
  std::string v624[2];
  std::string v625[2];
  std::string v626[2];
  std::string v627[2];
  std::string v628[2];
  std::string v629[2];
  std::string v630[2];
  std::string v631[2];
  std::string v632[2];
  std::string v633[2];
  std::string v634[2];
  std::string v635[2];
  std::string v636[2];
  std::string v637[2];
  std::string v638[2];
  std::string v639[2];
  std::string v640[2];
  std::string v641[2];
  std::string v642[2];
  std::string v643[2];
  std::string v644[2];
  std::string v645[2];
  std::string v646[2];
  std::string v647[2];
  std::string v648[2];
  std::string v649[2];
  std::string v650[2];
  std::string v651[2];
  std::string v652[2];
  std::string v653[2];
  std::string v654[2];
  std::string v655[2];
  std::string v656[2];
  std::string v657[2];
  std::string v658[2];
  std::string v659[2];
  std::string v660[2];
  std::string v661[2];
  std::string v662[2];
  std::string v663[2];
  std::string v664[2];
  std::string v665[2];
  std::string v666[2];
  std::string v667[2];
  std::string v668[2];
  std::string v669[2];
  std::string v670[2];
  std::string v671[2];
  std::string v672[2];
  std::string v673[2];
  std::string v674[2];
  std::string v675[2];
  std::string v676[2];
  std::string v677[2];
  std::string v678[2];
  std::string v679[2];
  std::string v680[2];
  std::string v681[2];
  std::string v682[2];
  std::string v683[2];
  std::string v684[2];
  std::string v685[2];
  std::string v686[2];
  std::string v687[2];
  std::string v688[2];
  std::string v689[2];
  std::string v690[2];
  std::string v691[2];
  uint64_t v692;

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](a1);
  v692 = *MEMORY[0x1E0C80C00];
  if ((v2 & 1) == 0
  {
    std::string::basic_string[abi:ne180100]<0>(v362, "SnippetUI.ActionElement");
    std::string::basic_string[abi:ne180100]<0>(v583, "command");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v361, (const void **)v583, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v585, (__int128 *)v362, v361);
    std::string::basic_string[abi:ne180100]<0>(v359, "SnippetUI.ActionProperty");
    std::string::basic_string[abi:ne180100]<0>(v581, "actions");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v358, (const void **)v581, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v586, (__int128 *)v359, v358);
    std::string::basic_string[abi:ne180100]<0>(v356, "SnippetUI.BackgroundElement");
    std::string::basic_string[abi:ne180100]<0>(v579, "is_hidden_on_idioms");
    std::string::basic_string[abi:ne180100]<0>(v580, "visual");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v355, v579, 2);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v587, (__int128 *)v356, v355);
    std::string::basic_string[abi:ne180100]<0>(v353, "SnippetUI.BinaryButton");
    std::string::basic_string[abi:ne180100]<0>(v577, "primary_button");
    std::string::basic_string[abi:ne180100]<0>(v578, "secondary_button");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v352, v577, 2);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v588, (__int128 *)v353, v352);
    std::string::basic_string[abi:ne180100]<0>(v350, "SnippetUI.Button");
    std::string::basic_string[abi:ne180100]<0>(v575, "action");
    std::string::basic_string[abi:ne180100]<0>(v576, "label");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v349, v575, 2);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v589, (__int128 *)v350, v349);
    std::string::basic_string[abi:ne180100]<0>(v347, "SnippetUI.Color.HexValue");
    std::string::basic_string[abi:ne180100]<0>(v573, "rgba");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v346, (const void **)v573, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v590, (__int128 *)v347, v346);
    std::string::basic_string[abi:ne180100]<0>(v344, "SnippetUI.Color");
    std::string::basic_string[abi:ne180100]<0>(v571, "value");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v343, (const void **)v571, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v591, (__int128 *)v344, v343);
    std::string::basic_string[abi:ne180100]<0>(v341, "SnippetUI.ColorElement");
    std::string::basic_string[abi:ne180100]<0>(v569, "color");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v340, (const void **)v569, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v592, (__int128 *)v341, v340);
    std::string::basic_string[abi:ne180100]<0>(v338, "SnippetUI.Command.AppPunchout");
    std::string::basic_string[abi:ne180100]<0>(v567, "punch_out_uri");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v337, (const void **)v567, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v593, (__int128 *)v338, v337);
    std::string::basic_string[abi:ne180100]<0>(v335, "SnippetUI.Command.ChangeBackground");
    std::string::basic_string[abi:ne180100]<0>(v565, "background");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v334, (const void **)v565, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v594, (__int128 *)v335, v334);
    std::string::basic_string[abi:ne180100]<0>(v332, "SnippetUI.Command.ResponseGroup");
    std::string::basic_string[abi:ne180100]<0>(v563, "group_id");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v331, (const void **)v563, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v595, (__int128 *)v332, v331);
    std::string::basic_string[abi:ne180100]<0>(v329, "SnippetUI.Command");
    std::string::basic_string[abi:ne180100]<0>(v561, "value");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v328, (const void **)v561, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v596, (__int128 *)v329, v328);
    std::string::basic_string[abi:ne180100]<0>(v326, "SnippetUI.Control_PlayerButton");
    std::string::basic_string[abi:ne180100]<0>(v559, "label_1");
    std::string::basic_string[abi:ne180100]<0>(v560, "player");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v325, v559, 2);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v597, (__int128 *)v326, v325);
    std::string::basic_string[abi:ne180100]<0>(v323, "SnippetUI.Control_Slider");
    std::string::basic_string[abi:ne180100]<0>(v557, "slider");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v322, (const void **)v557, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v598, (__int128 *)v323, v322);
    std::string::basic_string[abi:ne180100]<0>(v320, "SnippetUI.Control_Switch");
    std::string::basic_string[abi:ne180100]<0>(v555, "switch");
    std::string::basic_string[abi:ne180100]<0>(v556, "text_1");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v319, v555, 2);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v599, (__int128 *)v320, v319);
    std::string::basic_string[abi:ne180100]<0>(v317, "SnippetUI.CoreChart");
    std::string::basic_string[abi:ne180100]<0>(v553, "data");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v316, (const void **)v553, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v600, (__int128 *)v317, v316);
    std::string::basic_string[abi:ne180100]<0>(v314, "SnippetUI.CoreChartElement");
    std::string::basic_string[abi:ne180100]<0>(v551, "chart");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v313, (const void **)v551, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v601, (__int128 *)v314, v313);
    std::string::basic_string[abi:ne180100]<0>(v311, "SnippetUI.CustomCanvas");
    std::string::basic_string[abi:ne180100]<0>(v548, "bundle_name");
    std::string::basic_string[abi:ne180100]<0>(v549, "view_data");
    std::string::basic_string[abi:ne180100]<0>(v550, "view_id");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v310, v548, 3);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v602, (__int128 *)v311, v310);
    std::string::basic_string[abi:ne180100]<0>(v308, "SnippetUI.CustomElement");
    std::string::basic_string[abi:ne180100]<0>(v546, "canvas");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v307, (const void **)v546, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v603, (__int128 *)v308, v307);
    std::string::basic_string[abi:ne180100]<0>(v305, "SnippetUI.FactItem_Button");
    std::string::basic_string[abi:ne180100]<0>(v544, "button_1");
    std::string::basic_string[abi:ne180100]<0>(v545, "text_1");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v304, v544, 2);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v604, (__int128 *)v305, v304);
    std::string::basic_string[abi:ne180100]<0>(v302, "SnippetUI.FactItem_HeroNumber");
    std::string::basic_string[abi:ne180100]<0>(v542, "number");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v301, (const void **)v542, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v605, (__int128 *)v302, v301);
    std::string::basic_string[abi:ne180100]<0>(v299, "SnippetUI.FactItem_ShortNumber");
    std::string::basic_string[abi:ne180100]<0>(v540, "number");
    std::string::basic_string[abi:ne180100]<0>(v541, "text_1");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v298, v540, 2);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v606, (__int128 *)v299, v298);
    std::string::basic_string[abi:ne180100]<0>(v296, "SnippetUI.FactItem_Standard");
    std::string::basic_string[abi:ne180100]<0>(v538, "text_1");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v295, (const void **)v538, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v607, (__int128 *)v296, v295);
    std::string::basic_string[abi:ne180100]<0>(v293, "SnippetUI.HeroHeader");
    std::string::basic_string[abi:ne180100]<0>(v536, "banner");
    std::string::basic_string[abi:ne180100]<0>(v537, "text_1");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v292, v536, 2);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v608, (__int128 *)v293, v292);
    std::string::basic_string[abi:ne180100]<0>(v290, "SnippetUI.HorizontalList_Standard.Item");
    std::string::basic_string[abi:ne180100]<0>(v533, "style");
    std::string::basic_string[abi:ne180100]<0>(v534, "text_1");
    std::string::basic_string[abi:ne180100]<0>(v535, "thumbnail");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v289, v533, 3);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v609, (__int128 *)v290, v289);
    std::string::basic_string[abi:ne180100]<0>(v287, "SnippetUI.HorizontalList_Standard");
    std::string::basic_string[abi:ne180100]<0>(v531, "items");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v286, (const void **)v531, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v610, (__int128 *)v287, v286);
    std::string::basic_string[abi:ne180100]<0>(v284, "SnippetUI.ImageElement.AppIcon");
    std::string::basic_string[abi:ne180100]<0>(v529, "application_bundle_identifier");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v283, (const void **)v529, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v611, (__int128 *)v284, v283);
    std::string::basic_string[abi:ne180100]<0>(v281, "SnippetUI.ImageElement.AspectRatio");
    std::string::basic_string[abi:ne180100]<0>(v527, "height");
    std::string::basic_string[abi:ne180100]<0>(v528, "width");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v280, v527, 2);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v612, (__int128 *)v281, v280);
    std::string::basic_string[abi:ne180100]<0>(v278, "SnippetUI.ImageElement.Bundle");
    std::string::basic_string[abi:ne180100]<0>(v525, "name");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v277, (const void **)v525, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v613, (__int128 *)v278, v277);
    std::string::basic_string[abi:ne180100]<0>(v275, "SnippetUI.ImageElement.Contact.Avatar");
    std::string::basic_string[abi:ne180100]<0>(v523, "contact_ids");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v274, (const void **)v523, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v614, (__int128 *)v275, v274);
    std::string::basic_string[abi:ne180100]<0>(v272, "SnippetUI.ImageElement.Contact.Monogram");
    std::string::basic_string[abi:ne180100]<0>(v521, "letters");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v271, (const void **)v521, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v615, (__int128 *)v272, v271);
    std::string::basic_string[abi:ne180100]<0>(v269, "SnippetUI.ImageElement.Contact");
    std::string::basic_string[abi:ne180100]<0>(v519, "content");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v268, (const void **)v519, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v616, (__int128 *)v269, v268);
    std::string::basic_string[abi:ne180100]<0>(v266, "SnippetUI.ImageElement.Data");
    std::string::basic_string[abi:ne180100]<0>(v517, "png_data");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v265, (const void **)v517, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v617, (__int128 *)v266, v265);
    std::string::basic_string[abi:ne180100]<0>(v263, "SnippetUI.ImageElement.Source");
    std::string::basic_string[abi:ne180100]<0>(v515, "value");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v262, (const void **)v515, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v618, (__int128 *)v263, v262);
    std::string::basic_string[abi:ne180100]<0>(v260, "SnippetUI.ImageElement.Symbol");
    std::string::basic_string[abi:ne180100]<0>(v513, "name");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v259, (const void **)v513, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v619, (__int128 *)v260, v259);
    std::string::basic_string[abi:ne180100]<0>(v257, "SnippetUI.ImageElement.Url");
    std::string::basic_string[abi:ne180100]<0>(v511, "source");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v256, (const void **)v511, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v620, (__int128 *)v257, v256);
    std::string::basic_string[abi:ne180100]<0>(v254, "SnippetUI.ImageElement");
    std::string::basic_string[abi:ne180100]<0>(v509, "sources");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v253, (const void **)v509, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v621, (__int128 *)v254, v253);
    std::string::basic_string[abi:ne180100]<0>(v251, "SnippetUI.IntentsUI_Standard.Slot");
    std::string::basic_string[abi:ne180100]<0>(v507, "fallback");
    std::string::basic_string[abi:ne180100]<0>(v508, "parameter_key_paths");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v250, v507, 2);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v622, (__int128 *)v251, v250);
    std::string::basic_string[abi:ne180100]<0>(v248, "SnippetUI.IntentsUI_Standard");
    std::string::basic_string[abi:ne180100]<0>(v505, "interaction");
    std::string::basic_string[abi:ne180100]<0>(v506, "slots");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v247, v505, 2);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v623, (__int128 *)v248, v247);
    std::string::basic_string[abi:ne180100]<0>(v245, "SnippetUI.LongItem_Text");
    std::string::basic_string[abi:ne180100]<0>(v503, "text_1");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v244, (const void **)v503, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v624, (__int128 *)v245, v244);
    std::string::basic_string[abi:ne180100]<0>(v242, "SnippetUI.MultilineTextProperty.Line");
    std::string::basic_string[abi:ne180100]<0>(v501, "text_elements");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v241, (const void **)v501, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v625, (__int128 *)v242, v241);
    std::string::basic_string[abi:ne180100]<0>(v239, "SnippetUI.MultilineTextProperty");
    std::string::basic_string[abi:ne180100]<0>(v499, "lines");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v238, (const void **)v499, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v626, (__int128 *)v239, v238);
    std::string::basic_string[abi:ne180100]<0>(v236, "SnippetUI.OptionalBool");
    std::string::basic_string[abi:ne180100]<0>(v497, "value");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v235, (const void **)v497, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v627, (__int128 *)v236, v235);
    std::string::basic_string[abi:ne180100]<0>(v233, "SnippetUI.OptionalDouble");
    std::string::basic_string[abi:ne180100]<0>(v495, "value");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v232, (const void **)v495, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v628, (__int128 *)v233, v232);
    std::string::basic_string[abi:ne180100]<0>(v230, "SnippetUI.OptionalInt");
    std::string::basic_string[abi:ne180100]<0>(v493, "value");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v229, (const void **)v493, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v629, (__int128 *)v230, v229);
    std::string::basic_string[abi:ne180100]<0>(v227, "SnippetUI.OrnamentElement");
    std::string::basic_string[abi:ne180100]<0>(v491, "is_hidden_on_idioms");
    std::string::basic_string[abi:ne180100]<0>(v492, "visual");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v226, v491, 2);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v630, (__int128 *)v227, v226);
    std::string::basic_string[abi:ne180100]<0>(v224, "SnippetUI.Player");
    std::string::basic_string[abi:ne180100]<0>(v489, "control");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v223, (const void **)v489, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v631, (__int128 *)v224, v223);
    std::string::basic_string[abi:ne180100]<0>(v221, "SnippetUI.PlayerButton");
    std::string::basic_string[abi:ne180100]<0>(v487, "pause_button");
    std::string::basic_string[abi:ne180100]<0>(v488, "play_button");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v220, v487, 2);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v632, (__int128 *)v221, v220);
    std::string::basic_string[abi:ne180100]<0>(v218, "SnippetUI.PrimaryHeader_Marquee");
    std::string::basic_string[abi:ne180100]<0>(v485, "text_1");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v217, (const void **)v485, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v633, (__int128 *)v218, v217);
    std::string::basic_string[abi:ne180100]<0>(v215, "SnippetUI.PrimaryHeader_Rich");
    std::string::basic_string[abi:ne180100]<0>(v483, "text_1");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v214, (const void **)v483, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v634, (__int128 *)v215, v214);
    std::string::basic_string[abi:ne180100]<0>(v212, "SnippetUI.PrimaryHeader_Standard");
    std::string::basic_string[abi:ne180100]<0>(v481, "text_1");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v211, (const void **)v481, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v635, (__int128 *)v212, v211);
    std::string::basic_string[abi:ne180100]<0>(v209, "SnippetUI.Reference_Button");
    std::string::basic_string[abi:ne180100]<0>(v479, "label");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v208, (const void **)v479, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v636, (__int128 *)v209, v208);
    std::string::basic_string[abi:ne180100]<0>(v206, "SnippetUI.Reference_Footnote");
    std::string::basic_string[abi:ne180100]<0>(v477, "text_1");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v205, (const void **)v477, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v637, (__int128 *)v206, v205);
    std::string::basic_string[abi:ne180100]<0>(v203, "SnippetUI.Reference_Logo");
    std::string::basic_string[abi:ne180100]<0>(v475, "thumbnail");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v202, (const void **)v475, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v638, (__int128 *)v203, v202);
    std::string::basic_string[abi:ne180100]<0>(v200, "SnippetUI.Reference_Rich");
    std::string::basic_string[abi:ne180100]<0>(v473, "text_1");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v199, (const void **)v473, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v639, (__int128 *)v200, v199);
    std::string::basic_string[abi:ne180100]<0>(v197, "SnippetUI.Reference_Standard");
    std::string::basic_string[abi:ne180100]<0>(v471, "text_1");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v196, (const void **)v471, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v640, (__int128 *)v197, v196);
    std::string::basic_string[abi:ne180100]<0>(v194, "SnippetUI.Response.Group");
    std::string::basic_string[abi:ne180100]<0>(v469, "components");
    std::string::basic_string[abi:ne180100]<0>(v470, "id");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v193, v469, 2);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v641, (__int128 *)v194, v193);
    std::string::basic_string[abi:ne180100]<0>(v191, "SnippetUI.Response.Section");
    std::string::basic_string[abi:ne180100]<0>(v466, "component_list");
    std::string::basic_string[abi:ne180100]<0>(v467, "is_hidden_on_idioms");
    std::string::basic_string[abi:ne180100]<0>(v468, "level_of_detail");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v190, v466, 3);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v642, (__int128 *)v191, v190);
    std::string::basic_string[abi:ne180100]<0>(v188, "SnippetUI.Response");
    std::string::basic_string[abi:ne180100]<0>(v464, "hide_redacted_elements");
    std::string::basic_string[abi:ne180100]<0>(v465, "sections");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v187, v464, 2);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v643, (__int128 *)v188, v187);
    std::string::basic_string[abi:ne180100]<0>(v185, "SnippetUI.Sash_Standard");
    std::string::basic_string[abi:ne180100]<0>(v462, "title");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v184, (const void **)v462, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v644, (__int128 *)v185, v184);
    std::string::basic_string[abi:ne180100]<0>(v182, "SnippetUI.SecondaryHeader_Emphasized");
    std::string::basic_string[abi:ne180100]<0>(v460, "text_1");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v181, (const void **)v460, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v645, (__int128 *)v182, v181);
    std::string::basic_string[abi:ne180100]<0>(v179, "SnippetUI.SecondaryHeader_Standard");
    std::string::basic_string[abi:ne180100]<0>(v458, "text_1");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v178, (const void **)v458, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v646, (__int128 *)v179, v178);
    std::string::basic_string[abi:ne180100]<0>(v176, "SnippetUI.SectionHeader_Rich");
    std::string::basic_string[abi:ne180100]<0>(v456, "text_1");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v175, (const void **)v456, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v647, (__int128 *)v176, v175);
    std::string::basic_string[abi:ne180100]<0>(v173, "SnippetUI.SectionHeader_Standard");
    std::string::basic_string[abi:ne180100]<0>(v454, "text_1");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v172, (const void **)v454, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v648, (__int128 *)v173, v172);
    std::string::basic_string[abi:ne180100]<0>(v170, "SnippetUI.SimpleItem_Player");
    std::string::basic_string[abi:ne180100]<0>(v452, "player");
    std::string::basic_string[abi:ne180100]<0>(v453, "text_1");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v169, v452, 2);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v649, (__int128 *)v170, v169);
    std::string::basic_string[abi:ne180100]<0>(v167, "SnippetUI.SimpleItem_ReverseRich");
    std::string::basic_string[abi:ne180100]<0>(v450, "text_1");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v166, (const void **)v450, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v650, (__int128 *)v167, v166);
    std::string::basic_string[abi:ne180100]<0>(v164, "SnippetUI.SimpleItem_Rich");
    std::string::basic_string[abi:ne180100]<0>(v448, "text_1");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v163, (const void **)v448, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v651, (__int128 *)v164, v163);
    std::string::basic_string[abi:ne180100]<0>(v161, "SnippetUI.SimpleItem_RichSearchResult");
    std::string::basic_string[abi:ne180100]<0>(v446, "text_1");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v160, (const void **)v446, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v652, (__int128 *)v161, v160);
    std::string::basic_string[abi:ne180100]<0>(v158, "SnippetUI.SimpleItem_Standard");
    std::string::basic_string[abi:ne180100]<0>(v444, "text_1");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v157, (const void **)v444, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v653, (__int128 *)v158, v157);
    std::string::basic_string[abi:ne180100]<0>(v155, "SnippetUI.SimpleItem_Visual");
    std::string::basic_string[abi:ne180100]<0>(v442, "thumbnails");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v154, (const void **)v442, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v654, (__int128 *)v155, v154);
    std::string::basic_string[abi:ne180100]<0>(v152, "SnippetUI.Slider");
    std::string::basic_string[abi:ne180100]<0>(v439, "identifier");
    std::string::basic_string[abi:ne180100]<0>(v440, "maximum");
    std::string::basic_string[abi:ne180100]<0>(v441, "minimum");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v151, v439, 3);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v655, (__int128 *)v152, v151);
    std::string::basic_string[abi:ne180100]<0>(v149, "SnippetUI.StandardPlayerButton");
    std::string::basic_string[abi:ne180100]<0>(v437, "pause_action");
    std::string::basic_string[abi:ne180100]<0>(v438, "play_action");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v148, v437, 2);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v656, (__int128 *)v149, v148);
    std::string::basic_string[abi:ne180100]<0>(v146, "SnippetUI.StatusIndicator_Cancelled");
    std::string::basic_string[abi:ne180100]<0>(v435, "text");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v145, (const void **)v435, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v657, (__int128 *)v146, v145);
    std::string::basic_string[abi:ne180100]<0>(v143, "SnippetUI.StatusIndicator_Error");
    std::string::basic_string[abi:ne180100]<0>(v433, "text");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v142, (const void **)v433, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v658, (__int128 *)v143, v142);
    std::string::basic_string[abi:ne180100]<0>(v140, "SnippetUI.StatusIndicator_InProgress");
    std::string::basic_string[abi:ne180100]<0>(v431, "text");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v139, (const void **)v431, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v659, (__int128 *)v140, v139);
    std::string::basic_string[abi:ne180100]<0>(v137, "SnippetUI.StatusIndicator_Success");
    std::string::basic_string[abi:ne180100]<0>(v429, "text");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v136, (const void **)v429, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v660, (__int128 *)v137, v136);
    std::string::basic_string[abi:ne180100]<0>(v134, "SnippetUI.SummaryItem_Button");
    std::string::basic_string[abi:ne180100]<0>(v427, "button_1");
    std::string::basic_string[abi:ne180100]<0>(v428, "text_1");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v133, v427, 2);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v661, (__int128 *)v134, v133);
    std::string::basic_string[abi:ne180100]<0>(v131, "SnippetUI.SummaryItem_DetailedText");
    std::string::basic_string[abi:ne180100]<0>(v425, "text_1");
    std::string::basic_string[abi:ne180100]<0>(v426, "text_3");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v130, v425, 2);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v662, (__int128 *)v131, v130);
    std::string::basic_string[abi:ne180100]<0>(v128, "SnippetUI.SummaryItem_LargeText");
    std::string::basic_string[abi:ne180100]<0>(v423, "text_1");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v127, (const void **)v423, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v663, (__int128 *)v128, v127);
    std::string::basic_string[abi:ne180100]<0>(v125, "SnippetUI.SummaryItem_Pair");
    std::string::basic_string[abi:ne180100]<0>(v421, "text_4");
    std::string::basic_string[abi:ne180100]<0>(v422, "text_6");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v124, v421, 2);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v664, (__int128 *)v125, v124);
    std::string::basic_string[abi:ne180100]<0>(v122, "SnippetUI.SummaryItem_PairNumber");
    std::string::basic_string[abi:ne180100]<0>(v419, "number_1");
    std::string::basic_string[abi:ne180100]<0>(v420, "number_2");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v121, v419, 2);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v665, (__int128 *)v122, v121);
    std::string::basic_string[abi:ne180100]<0>(v119, "SnippetUI.SummaryItem_PairNumberV2");
    std::string::basic_string[abi:ne180100]<0>(v417, "number_1");
    std::string::basic_string[abi:ne180100]<0>(v418, "number_2");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v118, v417, 2);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v666, (__int128 *)v119, v118);
    std::string::basic_string[abi:ne180100]<0>(v116, "SnippetUI.SummaryItem_PairV2");
    std::string::basic_string[abi:ne180100]<0>(v414, "text_1");
    std::string::basic_string[abi:ne180100]<0>(v415, "thumbnail_1");
    std::string::basic_string[abi:ne180100]<0>(v416, "thumbnail_2");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v115, v414, 3);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v667, (__int128 *)v116, v115);
    std::string::basic_string[abi:ne180100]<0>(v113, "SnippetUI.SummaryItem_Player");
    std::string::basic_string[abi:ne180100]<0>(v412, "player");
    std::string::basic_string[abi:ne180100]<0>(v413, "text_1");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v112, v412, 2);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v668, (__int128 *)v113, v112);
    std::string::basic_string[abi:ne180100]<0>(v110, "SnippetUI.SummaryItem_ShortNumber");
    std::string::basic_string[abi:ne180100]<0>(v410, "number");
    std::string::basic_string[abi:ne180100]<0>(v411, "text_2");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v109, v410, 2);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v669, (__int128 *)v110, v109);
    std::string::basic_string[abi:ne180100]<0>(v107, "SnippetUI.SummaryItem_Standard");
    std::string::basic_string[abi:ne180100]<0>(v408, "text_1");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v106, (const void **)v408, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v670, (__int128 *)v107, v106);
    std::string::basic_string[abi:ne180100]<0>(v104, "SnippetUI.SummaryItem_Switch");
    std::string::basic_string[abi:ne180100]<0>(v406, "switch");
    std::string::basic_string[abi:ne180100]<0>(v407, "text_1");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v103, v406, 2);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v671, (__int128 *)v104, v103);
    std::string::basic_string[abi:ne180100]<0>(v101, "SnippetUI.SummaryItem_SwitchV2");
    std::string::basic_string[abi:ne180100]<0>(v404, "switch");
    std::string::basic_string[abi:ne180100]<0>(v405, "text_1");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v100, v404, 2);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v672, (__int128 *)v101, v100);
    std::string::basic_string[abi:ne180100]<0>(v98, "SnippetUI.SummaryItem_Text");
    std::string::basic_string[abi:ne180100]<0>(v402, "text_2");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v97, (const void **)v402, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v673, (__int128 *)v98, v97);
    std::string::basic_string[abi:ne180100]<0>(v95, "SnippetUI.Switch");
    std::string::basic_string[abi:ne180100]<0>(v400, "identifier");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v94, (const void **)v400, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v674, (__int128 *)v95, v94);
    std::string::basic_string[abi:ne180100]<0>(v92, "SnippetUI.SystemText_ClarificationTitle");
    std::string::basic_string[abi:ne180100]<0>(v398, "text_1");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v91, (const void **)v398, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v675, (__int128 *)v92, v91);
    std::string::basic_string[abi:ne180100]<0>(v89, "SnippetUI.Table.Header");
    std::string::basic_string[abi:ne180100]<0>(v396, "cells");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v88, (const void **)v396, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v676, (__int128 *)v89, v88);
    std::string::basic_string[abi:ne180100]<0>(v86, "SnippetUI.Table.Row");
    std::string::basic_string[abi:ne180100]<0>(v394, "cells");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v85, (const void **)v394, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v677, (__int128 *)v86, v85);
    std::string::basic_string[abi:ne180100]<0>(v83, "SnippetUI.Table");
    std::string::basic_string[abi:ne180100]<0>(v391, "columns");
    std::string::basic_string[abi:ne180100]<0>(v392, "rows");
    std::string::basic_string[abi:ne180100]<0>(v393, "separator_lines");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v82, v391, 3);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v678, (__int128 *)v83, v82);
    std::string::basic_string[abi:ne180100]<0>(v80, "SnippetUI.TertiaryHeader_Standard");
    std::string::basic_string[abi:ne180100]<0>(v389, "text_1");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v79, (const void **)v389, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v679, (__int128 *)v80, v79);
    std::string::basic_string[abi:ne180100]<0>(v77, "SnippetUI.TextElement.Font.SystemFont");
    std::string::basic_string[abi:ne180100]<0>(v386, "design");
    std::string::basic_string[abi:ne180100]<0>(v387, "size");
    std::string::basic_string[abi:ne180100]<0>(v388, "weight");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v76, v386, 3);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v680, (__int128 *)v77, v76);
    std::string::basic_string[abi:ne180100]<0>(v74, "SnippetUI.TextElement.Font");
    std::string::basic_string[abi:ne180100]<0>(v384, "value");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v73, (const void **)v384, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v681, (__int128 *)v74, v73);
    std::string::basic_string[abi:ne180100]<0>(v71, "SnippetUI.TextElement.FontWeight");
    std::string::basic_string[abi:ne180100]<0>(v382, "value");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v70, (const void **)v382, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v682, (__int128 *)v71, v70);
    std::string::basic_string[abi:ne180100]<0>(v68, "SnippetUI.TextElement");
    std::string::basic_string[abi:ne180100]<0>(v380, "value");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v67, (const void **)v380, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v683, (__int128 *)v68, v67);
    std::string::basic_string[abi:ne180100]<0>(v65, "SnippetUI.TextInput");
    std::string::basic_string[abi:ne180100]<0>(v378, "identifier");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v64, (const void **)v378, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v684, (__int128 *)v65, v64);
    std::string::basic_string[abi:ne180100]<0>(v62, "SnippetUI.TextProperty");
    std::string::basic_string[abi:ne180100]<0>(v376, "text_elements");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v61, (const void **)v376, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v685, (__int128 *)v62, v61);
    std::string::basic_string[abi:ne180100]<0>(v59, "SnippetUI.VisualElement");
    std::string::basic_string[abi:ne180100]<0>(v374, "element");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v58, (const void **)v374, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v686, (__int128 *)v59, v58);
    std::string::basic_string[abi:ne180100]<0>(v56, "SnippetUI.VisualProperty");
    std::string::basic_string[abi:ne180100]<0>(v372, "visuals");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v55, (const void **)v372, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v687, (__int128 *)v56, v55);
    std::string::basic_string[abi:ne180100]<0>(v53, "SnippetUI.Visualization_Chart");
    std::string::basic_string[abi:ne180100]<0>(v370, "visual");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v52, (const void **)v370, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v688, (__int128 *)v53, v52);
    std::string::basic_string[abi:ne180100]<0>(v50, "SnippetUI.Visualization_Image");
    std::string::basic_string[abi:ne180100]<0>(v368, "visual");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v49, (const void **)v368, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v689, (__int128 *)v50, v49);
    std::string::basic_string[abi:ne180100]<0>(v47, "SnippetUI.Visualization_Map");
    std::string::basic_string[abi:ne180100]<0>(v366, "map_property");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v46, (const void **)v366, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v690, (__int128 *)v47, v46);
    std::string::basic_string[abi:ne180100]<0>(v44, "SnippetUI.WatchListButton");
    std::string::basic_string[abi:ne180100]<0>(__p, "canonical_id");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v43, (const void **)__p, 1);
    std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(v691, (__int128 *)v44, v43);
    std::map<std::string const,std::set<std::string> const,std::less<std::string const>,std::allocator<std::pair<std::string const,std::set<std::string> const>>>::map[abi:ne180100]((__int128 *)v585, 107);
    for (i = 0; i != -5136; i -= 48)
      std::pair<std::string const,std::set<std::string> const>::~pair((uint64_t)&v691[i / 0x18]);
    std::__tree<std::string>::destroy((uint64_t)v43, (char *)v43[1]);
    if (v365 < 0)
      operator delete(__p[0]);
    if (v45 < 0)
      operator delete(v44[0]);
    std::__tree<std::string>::destroy((uint64_t)v46, (char *)v46[1]);
    if (v367 < 0)
      operator delete(v366[0]);
    if (v48 < 0)
      operator delete(v47[0]);
    std::__tree<std::string>::destroy((uint64_t)v49, (char *)v49[1]);
    if (v369 < 0)
      operator delete(v368[0]);
    if (v51 < 0)
      operator delete(v50[0]);
    std::__tree<std::string>::destroy((uint64_t)v52, (char *)v52[1]);
    if (v371 < 0)
      operator delete(v370[0]);
    if (v54 < 0)
      operator delete(v53[0]);
    std::__tree<std::string>::destroy((uint64_t)v55, (char *)v55[1]);
    if (v373 < 0)
      operator delete(v372[0]);
    if (v57 < 0)
      operator delete(v56[0]);
    std::__tree<std::string>::destroy((uint64_t)v58, (char *)v58[1]);
    if (v375 < 0)
      operator delete(v374[0]);
    if (v60 < 0)
      operator delete(v59[0]);
    std::__tree<std::string>::destroy((uint64_t)v61, (char *)v61[1]);
    if (v377 < 0)
      operator delete(v376[0]);
    if (v63 < 0)
      operator delete(v62[0]);
    std::__tree<std::string>::destroy((uint64_t)v64, (char *)v64[1]);
    if (v379 < 0)
      operator delete(v378[0]);
    if (v66 < 0)
      operator delete(v65[0]);
    std::__tree<std::string>::destroy((uint64_t)v67, (char *)v67[1]);
    if (v381 < 0)
      operator delete(v380[0]);
    if (v69 < 0)
      operator delete(v68[0]);
    std::__tree<std::string>::destroy((uint64_t)v70, (char *)v70[1]);
    if (v383 < 0)
      operator delete(v382[0]);
    if (v72 < 0)
      operator delete(v71[0]);
    std::__tree<std::string>::destroy((uint64_t)v73, (char *)v73[1]);
    if (v385 < 0)
      operator delete(v384[0]);
    if (v75 < 0)
      operator delete(v74[0]);
    std::__tree<std::string>::destroy((uint64_t)v76, (char *)v76[1]);
    for (j = 0; j != -9; j -= 3)
    {
      if (SHIBYTE(v388[j + 2]) < 0)
        operator delete(v388[j]);
    }
    if (v78 < 0)
      operator delete(v77[0]);
    std::__tree<std::string>::destroy((uint64_t)v79, (char *)v79[1]);
    if (v390 < 0)
      operator delete(v389[0]);
    if (v81 < 0)
      operator delete(v80[0]);
    std::__tree<std::string>::destroy((uint64_t)v82, (char *)v82[1]);
    for (k = 0; k != -9; k -= 3)
    {
      if (SHIBYTE(v393[k + 2]) < 0)
        operator delete(v393[k]);
    }
    if (v84 < 0)
      operator delete(v83[0]);
    std::__tree<std::string>::destroy((uint64_t)v85, (char *)v85[1]);
    if (v395 < 0)
      operator delete(v394[0]);
    if (v87 < 0)
      operator delete(v86[0]);
    std::__tree<std::string>::destroy((uint64_t)v88, (char *)v88[1]);
    if (v397 < 0)
      operator delete(v396[0]);
    if (v90 < 0)
      operator delete(v89[0]);
    std::__tree<std::string>::destroy((uint64_t)v91, (char *)v91[1]);
    if (v399 < 0)
      operator delete(v398[0]);
    if (v93 < 0)
      operator delete(v92[0]);
    std::__tree<std::string>::destroy((uint64_t)v94, (char *)v94[1]);
    if (v401 < 0)
      operator delete(v400[0]);
    if (v96 < 0)
      operator delete(v95[0]);
    std::__tree<std::string>::destroy((uint64_t)v97, (char *)v97[1]);
    if (v403 < 0)
      operator delete(v402[0]);
    if (v99 < 0)
      operator delete(v98[0]);
    std::__tree<std::string>::destroy((uint64_t)v100, (char *)v100[1]);
    for (m = 0; m != -6; m -= 3)
    {
      if (SHIBYTE(v405[m + 2]) < 0)
        operator delete((void *)v404[m + 3]);
    }
    if (v102 < 0)
      operator delete(v101[0]);
    std::__tree<std::string>::destroy((uint64_t)v103, (char *)v103[1]);
    for (n = 0; n != -6; n -= 3)
    {
      if (SHIBYTE(v407[n + 2]) < 0)
        operator delete((void *)v406[n + 3]);
    }
    if (v105 < 0)
      operator delete(v104[0]);
    std::__tree<std::string>::destroy((uint64_t)v106, (char *)v106[1]);
    if (v409 < 0)
      operator delete(v408[0]);
    if (v108 < 0)
      operator delete(v107[0]);
    std::__tree<std::string>::destroy((uint64_t)v109, (char *)v109[1]);
    for (ii = 0; ii != -6; ii -= 3)
    {
      if (SHIBYTE(v411[ii + 2]) < 0)
        operator delete((void *)v410[ii + 3]);
    }
    if (v111 < 0)
      operator delete(v110[0]);
    std::__tree<std::string>::destroy((uint64_t)v112, (char *)v112[1]);
    for (jj = 0; jj != -6; jj -= 3)
    {
      if (SHIBYTE(v413[jj + 2]) < 0)
        operator delete((void *)v412[jj + 3]);
    }
    if (v114 < 0)
      operator delete(v113[0]);
    std::__tree<std::string>::destroy((uint64_t)v115, (char *)v115[1]);
    for (kk = 0; kk != -9; kk -= 3)
    {
      if (SHIBYTE(v416[kk + 2]) < 0)
        operator delete((void *)v416[kk]);
    }
    if (v117 < 0)
      operator delete(v116[0]);
    std::__tree<std::string>::destroy((uint64_t)v118, (char *)v118[1]);
    for (mm = 0; mm != -6; mm -= 3)
    {
      if (SHIBYTE(v418[mm + 2]) < 0)
        operator delete((void *)v417[mm + 3]);
    }
    if (v120 < 0)
      operator delete(v119[0]);
    std::__tree<std::string>::destroy((uint64_t)v121, (char *)v121[1]);
    for (nn = 0; nn != -6; nn -= 3)
    {
      if (SHIBYTE(v420[nn + 2]) < 0)
        operator delete((void *)v419[nn + 3]);
    }
    if (v123 < 0)
      operator delete(v122[0]);
    std::__tree<std::string>::destroy((uint64_t)v124, (char *)v124[1]);
    for (i1 = 0; i1 != -6; i1 -= 3)
    {
      if (SHIBYTE(v422[i1 + 2]) < 0)
        operator delete((void *)v421[i1 + 3]);
    }
    if (v126 < 0)
      operator delete(v125[0]);
    std::__tree<std::string>::destroy((uint64_t)v127, (char *)v127[1]);
    if (v424 < 0)
      operator delete(v423[0]);
    if (v129 < 0)
      operator delete(v128[0]);
    std::__tree<std::string>::destroy((uint64_t)v130, (char *)v130[1]);
    for (i2 = 0; i2 != -6; i2 -= 3)
    {
      if (SHIBYTE(v426[i2 + 2]) < 0)
        operator delete((void *)v425[i2 + 3]);
    }
    if (v132 < 0)
      operator delete(v131[0]);
    std::__tree<std::string>::destroy((uint64_t)v133, (char *)v133[1]);
    for (i3 = 0; i3 != -6; i3 -= 3)
    {
      if (SHIBYTE(v428[i3 + 2]) < 0)
        operator delete((void *)v427[i3 + 3]);
    }
    if (v135 < 0)
      operator delete(v134[0]);
    std::__tree<std::string>::destroy((uint64_t)v136, (char *)v136[1]);
    if (v430 < 0)
      operator delete(v429[0]);
    if (v138 < 0)
      operator delete(v137[0]);
    std::__tree<std::string>::destroy((uint64_t)v139, (char *)v139[1]);
    if (v432 < 0)
      operator delete(v431[0]);
    if (v141 < 0)
      operator delete(v140[0]);
    std::__tree<std::string>::destroy((uint64_t)v142, (char *)v142[1]);
    if (v434 < 0)
      operator delete(v433[0]);
    if (v144 < 0)
      operator delete(v143[0]);
    std::__tree<std::string>::destroy((uint64_t)v145, (char *)v145[1]);
    if (v436 < 0)
      operator delete(v435[0]);
    if (v147 < 0)
      operator delete(v146[0]);
    std::__tree<std::string>::destroy((uint64_t)v148, (char *)v148[1]);
    for (i4 = 0; i4 != -6; i4 -= 3)
    {
      if (SHIBYTE(v438[i4 + 2]) < 0)
        operator delete((void *)v437[i4 + 3]);
    }
    if (v150 < 0)
      operator delete(v149[0]);
    std::__tree<std::string>::destroy((uint64_t)v151, (char *)v151[1]);
    for (i5 = 0; i5 != -9; i5 -= 3)
    {
      if (SHIBYTE(v441[i5 + 2]) < 0)
        operator delete(v441[i5]);
    }
    if (v153 < 0)
      operator delete(v152[0]);
    std::__tree<std::string>::destroy((uint64_t)v154, (char *)v154[1]);
    if (v443 < 0)
      operator delete(v442[0]);
    if (v156 < 0)
      operator delete(v155[0]);
    std::__tree<std::string>::destroy((uint64_t)v157, (char *)v157[1]);
    if (v445 < 0)
      operator delete(v444[0]);
    if (v159 < 0)
      operator delete(v158[0]);
    std::__tree<std::string>::destroy((uint64_t)v160, (char *)v160[1]);
    if (v447 < 0)
      operator delete(v446[0]);
    if (v162 < 0)
      operator delete(v161[0]);
    std::__tree<std::string>::destroy((uint64_t)v163, (char *)v163[1]);
    if (v449 < 0)
      operator delete(v448[0]);
    if (v165 < 0)
      operator delete(v164[0]);
    std::__tree<std::string>::destroy((uint64_t)v166, (char *)v166[1]);
    if (v451 < 0)
      operator delete(v450[0]);
    if (v168 < 0)
      operator delete(v167[0]);
    std::__tree<std::string>::destroy((uint64_t)v169, (char *)v169[1]);
    for (i6 = 0; i6 != -6; i6 -= 3)
    {
      if (SHIBYTE(v453[i6 + 2]) < 0)
        operator delete((void *)v452[i6 + 3]);
    }
    if (v171 < 0)
      operator delete(v170[0]);
    std::__tree<std::string>::destroy((uint64_t)v172, (char *)v172[1]);
    if (v455 < 0)
      operator delete(v454[0]);
    if (v174 < 0)
      operator delete(v173[0]);
    std::__tree<std::string>::destroy((uint64_t)v175, (char *)v175[1]);
    if (v457 < 0)
      operator delete(v456[0]);
    if (v177 < 0)
      operator delete(v176[0]);
    std::__tree<std::string>::destroy((uint64_t)v178, (char *)v178[1]);
    if (v459 < 0)
      operator delete(v458[0]);
    if (v180 < 0)
      operator delete(v179[0]);
    std::__tree<std::string>::destroy((uint64_t)v181, (char *)v181[1]);
    if (v461 < 0)
      operator delete(v460[0]);
    if (v183 < 0)
      operator delete(v182[0]);
    std::__tree<std::string>::destroy((uint64_t)v184, (char *)v184[1]);
    if (v463 < 0)
      operator delete(v462[0]);
    if (v186 < 0)
      operator delete(v185[0]);
    std::__tree<std::string>::destroy((uint64_t)v187, (char *)v187[1]);
    for (i7 = 0; i7 != -6; i7 -= 3)
    {
      if (SHIBYTE(v465[i7 + 2]) < 0)
        operator delete((void *)v464[i7 + 3]);
    }
    if (v189 < 0)
      operator delete(v188[0]);
    std::__tree<std::string>::destroy((uint64_t)v190, (char *)v190[1]);
    for (i8 = 0; i8 != -9; i8 -= 3)
    {
      if (SHIBYTE(v468[i8 + 2]) < 0)
        operator delete((void *)v468[i8]);
    }
    if (v192 < 0)
      operator delete(v191[0]);
    std::__tree<std::string>::destroy((uint64_t)v193, (char *)v193[1]);
    for (i9 = 0; i9 != -6; i9 -= 3)
    {
      if (SHIBYTE(v470[i9 + 2]) < 0)
        operator delete((void *)v469[i9 + 3]);
    }
    if (v195 < 0)
      operator delete(v194[0]);
    std::__tree<std::string>::destroy((uint64_t)v196, (char *)v196[1]);
    if (v472 < 0)
      operator delete(v471[0]);
    if (v198 < 0)
      operator delete(v197[0]);
    std::__tree<std::string>::destroy((uint64_t)v199, (char *)v199[1]);
    if (v474 < 0)
      operator delete(v473[0]);
    if (v201 < 0)
      operator delete(v200[0]);
    std::__tree<std::string>::destroy((uint64_t)v202, (char *)v202[1]);
    if (v476 < 0)
      operator delete(v475[0]);
    if (v204 < 0)
      operator delete(v203[0]);
    std::__tree<std::string>::destroy((uint64_t)v205, (char *)v205[1]);
    if (v478 < 0)
      operator delete(v477[0]);
    if (v207 < 0)
      operator delete(v206[0]);
    std::__tree<std::string>::destroy((uint64_t)v208, (char *)v208[1]);
    if (v480 < 0)
      operator delete(v479[0]);
    if (v210 < 0)
      operator delete(v209[0]);
    std::__tree<std::string>::destroy((uint64_t)v211, (char *)v211[1]);
    if (v482 < 0)
      operator delete(v481[0]);
    if (v213 < 0)
      operator delete(v212[0]);
    std::__tree<std::string>::destroy((uint64_t)v214, (char *)v214[1]);
    if (v484 < 0)
      operator delete(v483[0]);
    if (v216 < 0)
      operator delete(v215[0]);
    std::__tree<std::string>::destroy((uint64_t)v217, (char *)v217[1]);
    if (v486 < 0)
      operator delete(v485[0]);
    if (v219 < 0)
      operator delete(v218[0]);
    std::__tree<std::string>::destroy((uint64_t)v220, (char *)v220[1]);
    for (i10 = 0; i10 != -6; i10 -= 3)
    {
      if (SHIBYTE(v488[i10 + 2]) < 0)
        operator delete((void *)v487[i10 + 3]);
    }
    if (v222 < 0)
      operator delete(v221[0]);
    std::__tree<std::string>::destroy((uint64_t)v223, (char *)v223[1]);
    if (v490 < 0)
      operator delete(v489[0]);
    if (v225 < 0)
      operator delete(v224[0]);
    std::__tree<std::string>::destroy((uint64_t)v226, (char *)v226[1]);
    for (i11 = 0; i11 != -6; i11 -= 3)
    {
      if (SHIBYTE(v492[i11 + 2]) < 0)
        operator delete((void *)v491[i11 + 3]);
    }
    if (v228 < 0)
      operator delete(v227[0]);
    std::__tree<std::string>::destroy((uint64_t)v229, (char *)v229[1]);
    if (v494 < 0)
      operator delete(v493[0]);
    if (v231 < 0)
      operator delete(v230[0]);
    std::__tree<std::string>::destroy((uint64_t)v232, (char *)v232[1]);
    if (v496 < 0)
      operator delete(v495[0]);
    if (v234 < 0)
      operator delete(v233[0]);
    std::__tree<std::string>::destroy((uint64_t)v235, (char *)v235[1]);
    if (v498 < 0)
      operator delete(v497[0]);
    if (v237 < 0)
      operator delete(v236[0]);
    std::__tree<std::string>::destroy((uint64_t)v238, (char *)v238[1]);
    if (v500 < 0)
      operator delete(v499[0]);
    if (v240 < 0)
      operator delete(v239[0]);
    std::__tree<std::string>::destroy((uint64_t)v241, (char *)v241[1]);
    if (v502 < 0)
      operator delete(v501[0]);
    if (v243 < 0)
      operator delete(v242[0]);
    std::__tree<std::string>::destroy((uint64_t)v244, (char *)v244[1]);
    if (v504 < 0)
      operator delete(v503[0]);
    if (v246 < 0)
      operator delete(v245[0]);
    std::__tree<std::string>::destroy((uint64_t)v247, (char *)v247[1]);
    for (i12 = 0; i12 != -6; i12 -= 3)
    {
      if (SHIBYTE(v506[i12 + 2]) < 0)
        operator delete((void *)v505[i12 + 3]);
    }
    if (v249 < 0)
      operator delete(v248[0]);
    std::__tree<std::string>::destroy((uint64_t)v250, (char *)v250[1]);
    for (i13 = 0; i13 != -6; i13 -= 3)
    {
      if (SHIBYTE(v508[i13 + 2]) < 0)
        operator delete((void *)v507[i13 + 3]);
    }
    if (v252 < 0)
      operator delete(v251[0]);
    std::__tree<std::string>::destroy((uint64_t)v253, (char *)v253[1]);
    if (v510 < 0)
      operator delete(v509[0]);
    if (v255 < 0)
      operator delete(v254[0]);
    std::__tree<std::string>::destroy((uint64_t)v256, (char *)v256[1]);
    if (v512 < 0)
      operator delete(v511[0]);
    if (v258 < 0)
      operator delete(v257[0]);
    std::__tree<std::string>::destroy((uint64_t)v259, (char *)v259[1]);
    if (v514 < 0)
      operator delete(v513[0]);
    if (v261 < 0)
      operator delete(v260[0]);
    std::__tree<std::string>::destroy((uint64_t)v262, (char *)v262[1]);
    if (v516 < 0)
      operator delete(v515[0]);
    if (v264 < 0)
      operator delete(v263[0]);
    std::__tree<std::string>::destroy((uint64_t)v265, (char *)v265[1]);
    if (v518 < 0)
      operator delete(v517[0]);
    if (v267 < 0)
      operator delete(v266[0]);
    std::__tree<std::string>::destroy((uint64_t)v268, (char *)v268[1]);
    if (v520 < 0)
      operator delete(v519[0]);
    if (v270 < 0)
      operator delete(v269[0]);
    std::__tree<std::string>::destroy((uint64_t)v271, (char *)v271[1]);
    if (v522 < 0)
      operator delete(v521[0]);
    if (v273 < 0)
      operator delete(v272[0]);
    std::__tree<std::string>::destroy((uint64_t)v274, (char *)v274[1]);
    if (v524 < 0)
      operator delete(v523[0]);
    if (v276 < 0)
      operator delete(v275[0]);
    std::__tree<std::string>::destroy((uint64_t)v277, (char *)v277[1]);
    if (v526 < 0)
      operator delete(v525[0]);
    if (v279 < 0)
      operator delete(v278[0]);
    std::__tree<std::string>::destroy((uint64_t)v280, (char *)v280[1]);
    for (i14 = 0; i14 != -6; i14 -= 3)
    {
      if (SHIBYTE(v528[i14 + 2]) < 0)
        operator delete((void *)v527[i14 + 3]);
    }
    if (v282 < 0)
      operator delete(v281[0]);
    std::__tree<std::string>::destroy((uint64_t)v283, (char *)v283[1]);
    if (v530 < 0)
      operator delete(v529[0]);
    if (v285 < 0)
      operator delete(v284[0]);
    std::__tree<std::string>::destroy((uint64_t)v286, (char *)v286[1]);
    if (v532 < 0)
      operator delete(v531[0]);
    if (v288 < 0)
      operator delete(v287[0]);
    std::__tree<std::string>::destroy((uint64_t)v289, (char *)v289[1]);
    for (i15 = 0; i15 != -9; i15 -= 3)
    {
      if (SHIBYTE(v535[i15 + 2]) < 0)
        operator delete((void *)v535[i15]);
    }
    if (v291 < 0)
      operator delete(v290[0]);
    std::__tree<std::string>::destroy((uint64_t)v292, (char *)v292[1]);
    for (i16 = 0; i16 != -6; i16 -= 3)
    {
      if (SHIBYTE(v537[i16 + 2]) < 0)
        operator delete((void *)v536[i16 + 3]);
    }
    if (v294 < 0)
      operator delete(v293[0]);
    std::__tree<std::string>::destroy((uint64_t)v295, (char *)v295[1]);
    if (v539 < 0)
      operator delete(v538[0]);
    if (v297 < 0)
      operator delete(v296[0]);
    std::__tree<std::string>::destroy((uint64_t)v298, (char *)v298[1]);
    for (i17 = 0; i17 != -6; i17 -= 3)
    {
      if (SHIBYTE(v541[i17 + 2]) < 0)
        operator delete((void *)v540[i17 + 3]);
    }
    if (v300 < 0)
      operator delete(v299[0]);
    std::__tree<std::string>::destroy((uint64_t)v301, (char *)v301[1]);
    if (v543 < 0)
      operator delete(v542[0]);
    if (v303 < 0)
      operator delete(v302[0]);
    std::__tree<std::string>::destroy((uint64_t)v304, (char *)v304[1]);
    for (i18 = 0; i18 != -6; i18 -= 3)
    {
      if (SHIBYTE(v545[i18 + 2]) < 0)
        operator delete((void *)v544[i18 + 3]);
    }
    if (v306 < 0)
      operator delete(v305[0]);
    std::__tree<std::string>::destroy((uint64_t)v307, (char *)v307[1]);
    if (v547 < 0)
      operator delete(v546[0]);
    if (v309 < 0)
      operator delete(v308[0]);
    std::__tree<std::string>::destroy((uint64_t)v310, (char *)v310[1]);
    for (i19 = 0; i19 != -9; i19 -= 3)
    {
      if (SHIBYTE(v550[i19 + 2]) < 0)
        operator delete(v550[i19]);
    }
    if (v312 < 0)
      operator delete(v311[0]);
    std::__tree<std::string>::destroy((uint64_t)v313, (char *)v313[1]);
    if (v552 < 0)
      operator delete(v551[0]);
    if (v315 < 0)
      operator delete(v314[0]);
    std::__tree<std::string>::destroy((uint64_t)v316, (char *)v316[1]);
    if (v554 < 0)
      operator delete(v553[0]);
    if (v318 < 0)
      operator delete(v317[0]);
    std::__tree<std::string>::destroy((uint64_t)v319, (char *)v319[1]);
    for (i20 = 0; i20 != -6; i20 -= 3)
    {
      if (SHIBYTE(v556[i20 + 2]) < 0)
        operator delete((void *)v555[i20 + 3]);
    }
    if (v321 < 0)
      operator delete(v320[0]);
    std::__tree<std::string>::destroy((uint64_t)v322, (char *)v322[1]);
    if (v558 < 0)
      operator delete(v557[0]);
    if (v324 < 0)
      operator delete(v323[0]);
    std::__tree<std::string>::destroy((uint64_t)v325, (char *)v325[1]);
    for (i21 = 0; i21 != -6; i21 -= 3)
    {
      if (SHIBYTE(v560[i21 + 2]) < 0)
        operator delete((void *)v559[i21 + 3]);
    }
    if (v327 < 0)
      operator delete(v326[0]);
    std::__tree<std::string>::destroy((uint64_t)v328, (char *)v328[1]);
    if (v562 < 0)
      operator delete(v561[0]);
    if (v330 < 0)
      operator delete(v329[0]);
    std::__tree<std::string>::destroy((uint64_t)v331, (char *)v331[1]);
    if (v564 < 0)
      operator delete(v563[0]);
    if (v333 < 0)
      operator delete(v332[0]);
    std::__tree<std::string>::destroy((uint64_t)v334, (char *)v334[1]);
    if (v566 < 0)
      operator delete(v565[0]);
    if (v336 < 0)
      operator delete(v335[0]);
    std::__tree<std::string>::destroy((uint64_t)v337, (char *)v337[1]);
    if (v568 < 0)
      operator delete(v567[0]);
    if (v339 < 0)
      operator delete(v338[0]);
    std::__tree<std::string>::destroy((uint64_t)v340, (char *)v340[1]);
    if (v570 < 0)
      operator delete(v569[0]);
    if (v342 < 0)
      operator delete(v341[0]);
    std::__tree<std::string>::destroy((uint64_t)v343, (char *)v343[1]);
    if (v572 < 0)
      operator delete(v571[0]);
    if (v345 < 0)
      operator delete(v344[0]);
    std::__tree<std::string>::destroy((uint64_t)v346, (char *)v346[1]);
    if (v574 < 0)
      operator delete(v573[0]);
    if (v348 < 0)
      operator delete(v347[0]);
    std::__tree<std::string>::destroy((uint64_t)v349, (char *)v349[1]);
    for (i22 = 0; i22 != -6; i22 -= 3)
    {
      if (SHIBYTE(v576[i22 + 2]) < 0)
        operator delete((void *)v575[i22 + 3]);
    }
    if (v351 < 0)
      operator delete(v350[0]);
    std::__tree<std::string>::destroy((uint64_t)v352, (char *)v352[1]);
    for (i23 = 0; i23 != -6; i23 -= 3)
    {
      if (SHIBYTE(v578[i23 + 2]) < 0)
        operator delete((void *)v577[i23 + 3]);
    }
    if (v354 < 0)
      operator delete(v353[0]);
    std::__tree<std::string>::destroy((uint64_t)v355, (char *)v355[1]);
    for (i24 = 0; i24 != -6; i24 -= 3)
    {
      if (SHIBYTE(v580[i24 + 2]) < 0)
        operator delete((void *)v579[i24 + 3]);
    }
    if (v357 < 0)
      operator delete(v356[0]);
    std::__tree<std::string>::destroy((uint64_t)v358, (char *)v358[1]);
    if (v582 < 0)
      operator delete(v581[0]);
    if (v360 < 0)
      operator delete(v359[0]);
    std::__tree<std::string>::destroy((uint64_t)v361, (char *)v361[1]);
    if (v584 < 0)
      operator delete(v583[0]);
    if (v363 < 0)
      operator delete(v362[0]);
    __cxa_atexit((void (*)(void *))std::map<std::string const,std::set<std::string> const,std::less<std::string const>,std::allocator<std::pair<std::string const,std::set<std::string> const>>>::~map[abi:ne180100], &siri::dialogengine::vcat::GetRequiredFields(std::string const&)::fullNameToRequiredFields, &dword_1BF794000);
  }
  if ((v3 & 1) == 0
  {
    qword_1EF581AB0 = 0;
    qword_1EF581AA8 = 0;
    siri::dialogengine::vcat::GetRequiredFields(std::string const&)::empty = (uint64_t)&qword_1EF581AA8;
    __cxa_atexit((void (*)(void *))std::set<std::string>::~set[abi:ne180100], &siri::dialogengine::vcat::GetRequiredFields(std::string const&)::empty, &dword_1BF794000);
  }
  v4 = qword_1EF581A88;
  if (!qword_1EF581A88)
    goto LABEL_10;
  v5 = &qword_1EF581A88;
  do
  {
    v6 = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>((_QWORD *)(v4 + 32), v1);
    v7 = (uint64_t *)(v4 + 8);
    if (!v6)
    {
      v7 = (uint64_t *)v4;
      v5 = (uint64_t *)v4;
    }
    v4 = *v7;
  }
  while (*v7);
  if (v5 == &qword_1EF581A88 || std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v1, v5 + 4))
LABEL_10:
    v5 = &qword_1EF581A88;
  if (v5 == &qword_1EF581A88)
    return &siri::dialogengine::vcat::GetRequiredFields(std::string const&)::empty;
  else
    return v5 + 7;
}

void sub_1BF950468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, char *a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,char *a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,char *a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45,char *a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,char a54,char *a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,char a63)
{
  char *a64;
  void *a66;
  char a71;
  char a72;
  char *a73;
  void *a74;
  char a75;
  char a76;
  char *a77;
  void *a78;
  char a79;
  char a80;
  char *a81;
  void *a82;
  char a83;
  char a84;
  char *a85;
  void *a86;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;

  v90 = -5136;
  v91 = v86;
  do
  {
    v91 = std::pair<std::string const,std::set<std::string> const>::~pair(v91) - 48;
    v90 += 48;
  }
  while (v90);
  std::__tree<std::string>::destroy((uint64_t)&a9, a10);
  if (v87[1199] < 0)
    operator delete((void *)STACK[0x1410]);
  if (a17 < 0)
    operator delete(a12);
  std::__tree<std::string>::destroy((uint64_t)&a18, a19);
  if (v87[1223] < 0)
    operator delete((void *)STACK[0x1428]);
  if (a26 < 0)
    operator delete(a21);
  std::__tree<std::string>::destroy((uint64_t)&a27, a28);
  if (v87[1247] < 0)
    operator delete((void *)STACK[0x1440]);
  if (a35 < 0)
    operator delete(a30);
  std::__tree<std::string>::destroy((uint64_t)&a36, a37);
  if (v87[1271] < 0)
    operator delete((void *)STACK[0x1458]);
  if (a44 < 0)
    operator delete(a39);
  std::__tree<std::string>::destroy((uint64_t)&a45, a46);
  if (v87[1295] < 0)
    operator delete((void *)STACK[0x1470]);
  if (a53 < 0)
    operator delete(a48);
  std::__tree<std::string>::destroy((uint64_t)&a54, a55);
  if (v87[1319] < 0)
    operator delete((void *)STACK[0x1488]);
  if (a62 < 0)
    operator delete(a57);
  std::__tree<std::string>::destroy((uint64_t)&a63, a64);
  if (v87[1343] < 0)
    operator delete((void *)STACK[0x14A0]);
  if (a71 < 0)
    operator delete(a66);
  std::__tree<std::string>::destroy((uint64_t)&a72, a73);
  if (v87[1367] < 0)
    operator delete((void *)STACK[0x14B8]);
  if (a75 < 0)
    operator delete(a74);
  std::__tree<std::string>::destroy((uint64_t)&a76, a77);
  if (v87[1391] < 0)
    operator delete((void *)STACK[0x14D0]);
  if (a79 < 0)
    operator delete(a78);
  std::__tree<std::string>::destroy((uint64_t)&a80, a81);
  if (v87[1415] < 0)
    operator delete((void *)STACK[0x14E8]);
  if (a83 < 0)
    operator delete(a82);
  std::__tree<std::string>::destroy((uint64_t)&a84, a85);
  if (v87[1439] < 0)
    operator delete((void *)STACK[0x1500]);
  if (SLOBYTE(STACK[0x20F]) < 0)
    operator delete(a86);
  std::__tree<std::string>::destroy((uint64_t)&STACK[0x210], (char *)STACK[0x218]);
  v92 = 0;
  while (1)
  {
    if (*((char *)&STACK[0x1518] + v92 + 71) < 0)
      operator delete(*(void **)((char *)&STACK[0x1518] + v92 + 48));
    v92 -= 24;
    if (v92 == -72)
    {
      if (SLOBYTE(STACK[0x23F]) < 0)
        operator delete((void *)STACK[0x228]);
      std::__tree<std::string>::destroy((uint64_t)&STACK[0x240], (char *)STACK[0x248]);
      if (v87[1535] < 0)
        operator delete((void *)STACK[0x1560]);
      if (SLOBYTE(STACK[0x26F]) < 0)
        operator delete((void *)STACK[0x258]);
      std::__tree<std::string>::destroy((uint64_t)&STACK[0x270], (char *)STACK[0x278]);
      v93 = 0;
      while (1)
      {
        if (*((char *)&STACK[0x1578] + v93 + 71) < 0)
          operator delete(*(void **)((char *)&STACK[0x1578] + v93 + 48));
        v93 -= 24;
        if (v93 == -72)
        {
          if (SLOBYTE(STACK[0x29F]) < 0)
            operator delete((void *)STACK[0x288]);
          std::__tree<std::string>::destroy((uint64_t)&STACK[0x2A0], (char *)STACK[0x2A8]);
          if (v87[1631] < 0)
            operator delete((void *)STACK[0x15C0]);
          if (SLOBYTE(STACK[0x2CF]) < 0)
            operator delete((void *)STACK[0x2B8]);
          std::__tree<std::string>::destroy((uint64_t)&STACK[0x2D0], (char *)STACK[0x2D8]);
          if (v87[1655] < 0)
            operator delete((void *)STACK[0x15D8]);
          if (SLOBYTE(STACK[0x2FF]) < 0)
            operator delete((void *)STACK[0x2E8]);
          std::__tree<std::string>::destroy((uint64_t)&STACK[0x300], (char *)STACK[0x308]);
          if (v87[1679] < 0)
            operator delete((void *)STACK[0x15F0]);
          if (SLOBYTE(STACK[0x32F]) < 0)
            operator delete((void *)STACK[0x318]);
          std::__tree<std::string>::destroy((uint64_t)&STACK[0x330], (char *)STACK[0x338]);
          if (v87[1703] < 0)
            operator delete((void *)STACK[0x1608]);
          if (SLOBYTE(STACK[0x35F]) < 0)
            operator delete((void *)STACK[0x348]);
          std::__tree<std::string>::destroy((uint64_t)&STACK[0x360], (char *)STACK[0x368]);
          if (v87[1727] < 0)
            operator delete((void *)STACK[0x1620]);
          if (SLOBYTE(STACK[0x38F]) < 0)
            operator delete((void *)STACK[0x378]);
          std::__tree<std::string>::destroy((uint64_t)&STACK[0x390], (char *)STACK[0x398]);
          v94 = 0;
          while (1)
          {
            if (*((char *)&STACK[0x1638] + v94 + 47) < 0)
              operator delete(*(void **)((char *)&STACK[0x1638] + v94 + 24));
            v94 -= 24;
            if (v94 == -48)
            {
              if (SLOBYTE(STACK[0x3BF]) < 0)
                operator delete((void *)STACK[0x3A8]);
              std::__tree<std::string>::destroy((uint64_t)&STACK[0x3C0], (char *)STACK[0x3C8]);
              v95 = 0;
              while (1)
              {
                if (*((char *)&STACK[0x1668] + v95 + 47) < 0)
                  operator delete(*(void **)((char *)&STACK[0x1668] + v95 + 24));
                v95 -= 24;
                if (v95 == -48)
                {
                  if (SLOBYTE(STACK[0x3EF]) < 0)
                    operator delete((void *)STACK[0x3D8]);
                  std::__tree<std::string>::destroy((uint64_t)&STACK[0x3F0], (char *)STACK[0x3F8]);
                  if (v87[1847] < 0)
                    operator delete((void *)STACK[0x1698]);
                  if (SLOBYTE(STACK[0x41F]) < 0)
                    operator delete((void *)STACK[0x408]);
                  std::__tree<std::string>::destroy((uint64_t)&STACK[0x420], (char *)STACK[0x428]);
                  v96 = 0;
                  while (1)
                  {
                    if (*((char *)&STACK[0x16B0] + v96 + 47) < 0)
                      operator delete(*(void **)((char *)&STACK[0x16B0] + v96 + 24));
                    v96 -= 24;
                    if (v96 == -48)
                    {
                      if (SLOBYTE(STACK[0x44F]) < 0)
                        operator delete((void *)STACK[0x438]);
                      std::__tree<std::string>::destroy((uint64_t)&STACK[0x450], (char *)STACK[0x458]);
                      v97 = 0;
                      while (1)
                      {
                        if (*((char *)&STACK[0x16E0] + v97 + 47) < 0)
                          operator delete(*(void **)((char *)&STACK[0x16E0] + v97 + 24));
                        v97 -= 24;
                        if (v97 == -48)
                        {
                          if (SLOBYTE(STACK[0x47F]) < 0)
                            operator delete((void *)STACK[0x468]);
                          std::__tree<std::string>::destroy((uint64_t)&STACK[0x480], (char *)STACK[0x488]);
                          v98 = 0;
                          while (1)
                          {
                            if (*((char *)&STACK[0x1710] + v98 + 71) < 0)
                              operator delete(*(void **)((char *)&STACK[0x1710] + v98 + 48));
                            v98 -= 24;
                            if (v98 == -72)
                            {
                              if (SLOBYTE(STACK[0x4AF]) < 0)
                                operator delete((void *)STACK[0x498]);
                              std::__tree<std::string>::destroy((uint64_t)&STACK[0x4B0], (char *)STACK[0x4B8]);
                              v99 = 0;
                              while (1)
                              {
                                if (*((char *)&STACK[0x1758] + v99 + 47) < 0)
                                  operator delete(*(void **)((char *)&STACK[0x1758] + v99 + 24));
                                v99 -= 24;
                                if (v99 == -48)
                                {
                                  if (SLOBYTE(STACK[0x4DF]) < 0)
                                    operator delete((void *)STACK[0x4C8]);
                                  std::__tree<std::string>::destroy((uint64_t)&STACK[0x4E0], (char *)STACK[0x4E8]);
                                  v100 = 0;
                                  while (1)
                                  {
                                    if (*((char *)&STACK[0x1788] + v100 + 47) < 0)
                                      operator delete(*(void **)((char *)&STACK[0x1788] + v100 + 24));
                                    v100 -= 24;
                                    if (v100 == -48)
                                    {
                                      if (SLOBYTE(STACK[0x50F]) < 0)
                                        operator delete((void *)STACK[0x4F8]);
                                      std::__tree<std::string>::destroy((uint64_t)&STACK[0x510], (char *)STACK[0x518]);
                                      v101 = 0;
                                      while (1)
                                      {
                                        if (*((char *)&STACK[0x17B8] + v101 + 47) < 0)
                                          operator delete(*(void **)((char *)&STACK[0x17B8] + v101 + 24));
                                        v101 -= 24;
                                        if (v101 == -48)
                                        {
                                          if (SLOBYTE(STACK[0x53F]) < 0)
                                            operator delete((void *)STACK[0x528]);
                                          std::__tree<std::string>::destroy((uint64_t)&STACK[0x540], (char *)STACK[0x548]);
                                          if (v87[2183] < 0)
                                            operator delete((void *)STACK[0x17E8]);
                                          if (SLOBYTE(STACK[0x56F]) < 0)
                                            operator delete((void *)STACK[0x558]);
                                          std::__tree<std::string>::destroy((uint64_t)&STACK[0x570], (char *)STACK[0x578]);
                                          v102 = 0;
                                          while (1)
                                          {
                                            if (*((char *)&STACK[0x1800] + v102 + 47) < 0)
                                              operator delete(*(void **)((char *)&STACK[0x1800] + v102 + 24));
                                            v102 -= 24;
                                            if (v102 == -48)
                                            {
                                              if (SLOBYTE(STACK[0x59F]) < 0)
                                                operator delete((void *)STACK[0x588]);
                                              std::__tree<std::string>::destroy((uint64_t)&STACK[0x5A0], (char *)STACK[0x5A8]);
                                              v103 = 0;
                                              while (1)
                                              {
                                                if (*((char *)&STACK[0x1830] + v103 + 47) < 0)
                                                  operator delete(*(void **)((char *)&STACK[0x1830] + v103 + 24));
                                                v103 -= 24;
                                                if (v103 == -48)
                                                {
                                                  if (SLOBYTE(STACK[0x5CF]) < 0)
                                                    operator delete((void *)STACK[0x5B8]);
                                                  std::__tree<std::string>::destroy((uint64_t)&STACK[0x5D0], (char *)STACK[0x5D8]);
                                                  if (v87[2303] < 0)
                                                    operator delete((void *)STACK[0x1860]);
                                                  if (SLOBYTE(STACK[0x5FF]) < 0)
                                                    operator delete((void *)STACK[0x5E8]);
                                                  std::__tree<std::string>::destroy((uint64_t)&STACK[0x600], (char *)STACK[0x608]);
                                                  if (v87[2327] < 0)
                                                    operator delete((void *)STACK[0x1878]);
                                                  if (SLOBYTE(STACK[0x62F]) < 0)
                                                    operator delete((void *)STACK[0x618]);
                                                  std::__tree<std::string>::destroy((uint64_t)&STACK[0x630], (char *)STACK[0x638]);
                                                  if (v87[2351] < 0)
                                                    operator delete((void *)STACK[0x1890]);
                                                  if (SLOBYTE(STACK[0x65F]) < 0)
                                                    operator delete((void *)STACK[0x648]);
                                                  std::__tree<std::string>::destroy((uint64_t)&STACK[0x660], (char *)STACK[0x668]);
                                                  if (v87[2375] < 0)
                                                    operator delete((void *)STACK[0x18A8]);
                                                  if (SLOBYTE(STACK[0x68F]) < 0)
                                                    operator delete((void *)STACK[0x678]);
                                                  std::__tree<std::string>::destroy((uint64_t)&STACK[0x690], (char *)STACK[0x698]);
                                                  v104 = 0;
                                                  while (1)
                                                  {
                                                    if (*((char *)&STACK[0x18C0] + v104 + 47) < 0)
                                                      operator delete(*(void **)((char *)&STACK[0x18C0] + v104 + 24));
                                                    v104 -= 24;
                                                    if (v104 == -48)
                                                    {
                                                      if (SLOBYTE(STACK[0x6BF]) < 0)
                                                        operator delete((void *)STACK[0x6A8]);
                                                      std::__tree<std::string>::destroy((uint64_t)&STACK[0x6C0], (char *)STACK[0x6C8]);
                                                      v105 = 0;
                                                      while (1)
                                                      {
                                                        if (*((char *)&STACK[0x18F0] + v105 + 71) < 0)
                                                          operator delete(*(void **)((char *)&STACK[0x18F0] + v105 + 48));
                                                        v105 -= 24;
                                                        if (v105 == -72)
                                                        {
                                                          if (SLOBYTE(STACK[0x6EF]) < 0)
                                                            operator delete((void *)STACK[0x6D8]);
                                                          std::__tree<std::string>::destroy((uint64_t)&STACK[0x6F0], (char *)STACK[0x6F8]);
                                                          if (v87[2519] < 0)
                                                            operator delete((void *)STACK[0x1938]);
                                                          if (SLOBYTE(STACK[0x71F]) < 0)
                                                            operator delete((void *)STACK[0x708]);
                                                          std::__tree<std::string>::destroy((uint64_t)&STACK[0x720], (char *)STACK[0x728]);
                                                          if (v87[2543] < 0)
                                                            operator delete((void *)STACK[0x1950]);
                                                          if (SLOBYTE(STACK[0x74F]) < 0)
                                                            operator delete((void *)STACK[0x738]);
                                                          std::__tree<std::string>::destroy((uint64_t)&STACK[0x750], (char *)STACK[0x758]);
                                                          if (v87[2567] < 0)
                                                            operator delete((void *)STACK[0x1968]);
                                                          if (SLOBYTE(STACK[0x77F]) < 0)
                                                            operator delete((void *)STACK[0x768]);
                                                          std::__tree<std::string>::destroy((uint64_t)&STACK[0x780], (char *)STACK[0x788]);
                                                          if (v87[2591] < 0)
                                                            operator delete((void *)STACK[0x1980]);
                                                          if (SLOBYTE(STACK[0x7AF]) < 0)
                                                            operator delete((void *)STACK[0x798]);
                                                          std::__tree<std::string>::destroy((uint64_t)&STACK[0x7B0], (char *)STACK[0x7B8]);
                                                          if (v87[2615] < 0)
                                                            operator delete((void *)STACK[0x1998]);
                                                          if (SLOBYTE(STACK[0x7DF]) < 0)
                                                            operator delete((void *)STACK[0x7C8]);
                                                          std::__tree<std::string>::destroy((uint64_t)&STACK[0x7E0], (char *)STACK[0x7E8]);
                                                          v106 = 0;
                                                          while (1)
                                                          {
                                                            if (*((char *)&STACK[0x19B0] + v106 + 47) < 0)
                                                              operator delete(*(void **)((char *)&STACK[0x19B0]
                                                                                       + v106
                                                                                       + 24));
                                                            v106 -= 24;
                                                            if (v106 == -48)
                                                            {
                                                              if (SLOBYTE(STACK[0x80F]) < 0)
                                                                operator delete((void *)STACK[0x7F8]);
                                                              std::__tree<std::string>::destroy((uint64_t)&STACK[0x810], (char *)STACK[0x818]);
                                                              if (v87[2687] < 0)
                                                                operator delete((void *)STACK[0x19E0]);
                                                              if (SLOBYTE(STACK[0x83F]) < 0)
                                                                operator delete((void *)STACK[0x828]);
                                                              std::__tree<std::string>::destroy((uint64_t)&STACK[0x840], (char *)STACK[0x848]);
                                                              if (v87[2711] < 0)
                                                                operator delete((void *)STACK[0x19F8]);
                                                              if (SLOBYTE(STACK[0x86F]) < 0)
                                                                operator delete((void *)STACK[0x858]);
                                                              std::__tree<std::string>::destroy((uint64_t)&STACK[0x870], (char *)STACK[0x878]);
                                                              if (v87[2735] < 0)
                                                                operator delete((void *)STACK[0x1A10]);
                                                              if (SLOBYTE(STACK[0x89F]) < 0)
                                                                operator delete((void *)STACK[0x888]);
                                                              std::__tree<std::string>::destroy((uint64_t)&STACK[0x8A0], (char *)STACK[0x8A8]);
                                                              if (v87[2759] < 0)
                                                                operator delete((void *)STACK[0x1A28]);
                                                              if (SLOBYTE(STACK[0x8CF]) < 0)
                                                                operator delete((void *)STACK[0x8B8]);
                                                              std::__tree<std::string>::destroy((uint64_t)&STACK[0x8D0], (char *)STACK[0x8D8]);
                                                              if (v87[2783] < 0)
                                                                operator delete((void *)STACK[0x1A40]);
                                                              if (SLOBYTE(STACK[0x8FF]) < 0)
                                                                operator delete((void *)STACK[0x8E8]);
                                                              std::__tree<std::string>::destroy((uint64_t)&STACK[0x900], (char *)STACK[0x908]);
                                                              v107 = 0;
                                                              while (1)
                                                              {
                                                                if (*((char *)&STACK[0x1A58] + v107 + 47) < 0)
                                                                  operator delete(*(void **)((char *)&STACK[0x1A58]
                                                                                           + v107
                                                                                           + 24));
                                                                v107 -= 24;
                                                                if (v107 == -48)
                                                                {
                                                                  if (SLOBYTE(STACK[0x92F]) < 0)
                                                                    operator delete((void *)STACK[0x918]);
                                                                  std::__tree<std::string>::destroy((uint64_t)&STACK[0x930], (char *)STACK[0x938]);
                                                                  v108 = 0;
                                                                  while (1)
                                                                  {
                                                                    if (*((char *)&STACK[0x1A88] + v108 + 71) < 0)
                                                                      operator delete(*(void **)((char *)&STACK[0x1A88]
                                                                                               + v108
                                                                                               + 48));
                                                                    v108 -= 24;
                                                                    if (v108 == -72)
                                                                    {
                                                                      if (SLOBYTE(STACK[0x95F]) < 0)
                                                                        operator delete((void *)STACK[0x948]);
                                                                      std::__tree<std::string>::destroy((uint64_t)&STACK[0x960], (char *)STACK[0x968]);
                                                                      v109 = 0;
                                                                      while (1)
                                                                      {
                                                                        if (*((char *)&STACK[0x1AD0] + v109 + 47) < 0)
                                                                          operator delete(*(void **)((char *)&STACK[0x1AD0] + v109 + 24));
                                                                        v109 -= 24;
                                                                        if (v109 == -48)
                                                                        {
                                                                          if (SLOBYTE(STACK[0x98F]) < 0)
                                                                            operator delete((void *)STACK[0x978]);
                                                                          std::__tree<std::string>::destroy((uint64_t)&STACK[0x990], (char *)STACK[0x998]);
                                                                          if (v87[2975] < 0)
                                                                            operator delete((void *)STACK[0x1B00]);
                                                                          if (SLOBYTE(STACK[0x9BF]) < 0)
                                                                            operator delete((void *)STACK[0x9A8]);
                                                                          std::__tree<std::string>::destroy((uint64_t)&STACK[0x9C0], (char *)STACK[0x9C8]);
                                                                          if (v87[2999] < 0)
                                                                            operator delete((void *)STACK[0x1B18]);
                                                                          if (SLOBYTE(STACK[0x9EF]) < 0)
                                                                            operator delete((void *)STACK[0x9D8]);
                                                                          std::__tree<std::string>::destroy((uint64_t)&STACK[0x9F0], (char *)STACK[0x9F8]);
                                                                          if (v87[3023] < 0)
                                                                            operator delete((void *)STACK[0x1B30]);
                                                                          if (SLOBYTE(STACK[0xA1F]) < 0)
                                                                            operator delete((void *)STACK[0xA08]);
                                                                          std::__tree<std::string>::destroy((uint64_t)&STACK[0xA20], (char *)STACK[0xA28]);
                                                                          if (v87[3047] < 0)
                                                                            operator delete((void *)STACK[0x1B48]);
                                                                          if (SLOBYTE(STACK[0xA4F]) < 0)
                                                                            operator delete((void *)STACK[0xA38]);
                                                                          std::__tree<std::string>::destroy((uint64_t)&STACK[0xA50], (char *)STACK[0xA58]);
                                                                          if (v87[3071] < 0)
                                                                            operator delete((void *)STACK[0x1B60]);
                                                                          if (SLOBYTE(STACK[0xA7F]) < 0)
                                                                            operator delete((void *)STACK[0xA68]);
                                                                          std::__tree<std::string>::destroy((uint64_t)&STACK[0xA80], (char *)STACK[0xA88]);
                                                                          if (v87[3095] < 0)
                                                                            operator delete((void *)STACK[0x1B78]);
                                                                          if (SLOBYTE(STACK[0xAAF]) < 0)
                                                                            operator delete((void *)STACK[0xA98]);
                                                                          std::__tree<std::string>::destroy((uint64_t)&STACK[0xAB0], (char *)STACK[0xAB8]);
                                                                          if (v87[3119] < 0)
                                                                            operator delete((void *)STACK[0x1B90]);
                                                                          if (SLOBYTE(STACK[0xADF]) < 0)
                                                                            operator delete((void *)STACK[0xAC8]);
                                                                          std::__tree<std::string>::destroy((uint64_t)&STACK[0xAE0], (char *)STACK[0xAE8]);
                                                                          if (v87[3143] < 0)
                                                                            operator delete((void *)STACK[0x1BA8]);
                                                                          if (SLOBYTE(STACK[0xB0F]) < 0)
                                                                            operator delete((void *)STACK[0xAF8]);
                                                                          std::__tree<std::string>::destroy((uint64_t)&STACK[0xB10], (char *)STACK[0xB18]);
                                                                          v110 = 0;
                                                                          while (1)
                                                                          {
                                                                            if (*((char *)&STACK[0x1BC0] + v110 + 47) < 0)
                                                                              operator delete(*(void **)((char *)&STACK[0x1BC0] + v110 + 24));
                                                                            v110 -= 24;
                                                                            if (v110 == -48)
                                                                            {
                                                                              if (SLOBYTE(STACK[0xB3F]) < 0)
                                                                                operator delete((void *)STACK[0xB28]);
                                                                              std::__tree<std::string>::destroy((uint64_t)&STACK[0xB40], (char *)STACK[0xB48]);
                                                                              if (v87[3215] < 0)
                                                                                operator delete((void *)STACK[0x1BF0]);
                                                                              if (SLOBYTE(STACK[0xB6F]) < 0)
                                                                                operator delete((void *)STACK[0xB58]);
                                                                              std::__tree<std::string>::destroy((uint64_t)&STACK[0xB70], (char *)STACK[0xB78]);
                                                                              v111 = 0;
                                                                              while (1)
                                                                              {
                                                                                if (*((char *)&STACK[0x1C08] + v111 + 47) < 0)
                                                                                  operator delete(*(void **)((char *)&STACK[0x1C08] + v111 + 24));
                                                                                v111 -= 24;
                                                                                if (v111 == -48)
                                                                                {
                                                                                  if (SLOBYTE(STACK[0xB9F]) < 0)
                                                                                    operator delete((void *)STACK[0xB88]);
                                                                                  std::__tree<std::string>::destroy((uint64_t)&STACK[0xBA0], (char *)STACK[0xBA8]);
                                                                                  if (v87[3287] < 0)
                                                                                    operator delete((void *)STACK[0x1C38]);
                                                                                  if (SLOBYTE(STACK[0xBCF]) < 0)
                                                                                    operator delete((void *)STACK[0xBB8]);
                                                                                  std::__tree<std::string>::destroy((uint64_t)&STACK[0xBD0], (char *)STACK[0xBD8]);
                                                                                  if (v87[3311] < 0)
                                                                                    operator delete((void *)STACK[0x1C50]);
                                                                                  if (SLOBYTE(STACK[0xBFF]) < 0)
                                                                                    operator delete((void *)STACK[0xBE8]);
                                                                                  std::__tree<std::string>::destroy((uint64_t)&STACK[0xC00], (char *)STACK[0xC08]);
                                                                                  if (v87[3335] < 0)
                                                                                    operator delete((void *)STACK[0x1C68]);
                                                                                  if (SLOBYTE(STACK[0xC2F]) < 0)
                                                                                    operator delete((void *)STACK[0xC18]);
                                                                                  std::__tree<std::string>::destroy((uint64_t)&STACK[0xC30], (char *)STACK[0xC38]);
                                                                                  if (v87[3359] < 0)
                                                                                    operator delete((void *)STACK[0x1C80]);
                                                                                  if (SLOBYTE(STACK[0xC5F]) < 0)
                                                                                    operator delete((void *)STACK[0xC48]);
                                                                                  std::__tree<std::string>::destroy((uint64_t)&STACK[0xC60], (char *)STACK[0xC68]);
                                                                                  if (v87[3383] < 0)
                                                                                    operator delete((void *)STACK[0x1C98]);
                                                                                  if (SLOBYTE(STACK[0xC8F]) < 0)
                                                                                    operator delete((void *)STACK[0xC78]);
                                                                                  std::__tree<std::string>::destroy((uint64_t)&STACK[0xC90], (char *)STACK[0xC98]);
                                                                                  if (v87[3407] < 0)
                                                                                    operator delete((void *)STACK[0x1CB0]);
                                                                                  if (SLOBYTE(STACK[0xCBF]) < 0)
                                                                                    operator delete((void *)STACK[0xCA8]);
                                                                                  std::__tree<std::string>::destroy((uint64_t)&STACK[0xCC0], (char *)STACK[0xCC8]);
                                                                                  v112 = 0;
                                                                                  while (1)
                                                                                  {
                                                                                    if (*((char *)&STACK[0x1CC8]
                                                                                         + v112
                                                                                         + 47) < 0)
                                                                                      operator delete(*(void **)((char *)&STACK[0x1CC8] + v112 + 24));
                                                                                    v112 -= 24;
                                                                                    if (v112 == -48)
                                                                                    {
                                                                                      if (SLOBYTE(STACK[0xCEF]) < 0)
                                                                                        operator delete((void *)STACK[0xCD8]);
                                                                                      std::__tree<std::string>::destroy((uint64_t)&STACK[0xCF0], (char *)STACK[0xCF8]);
                                                                                      v113 = 0;
                                                                                      while (1)
                                                                                      {
                                                                                        if (*((char *)&STACK[0x1CF8]
                                                                                             + v113
                                                                                             + 47) < 0)
                                                                                          operator delete(*(void **)((char *)&STACK[0x1CF8] + v113 + 24));
                                                                                        v113 -= 24;
                                                                                        if (v113 == -48)
                                                                                        {
                                                                                          if (SLOBYTE(STACK[0xD1F]) < 0)
                                                                                            operator delete((void *)STACK[0xD08]);
                                                                                          std::__tree<std::string>::destroy((uint64_t)&STACK[0xD20], (char *)STACK[0xD28]);
                                                                                          if (v87[3527] < 0)
                                                                                            operator delete((void *)STACK[0x1D28]);
                                                                                          if (SLOBYTE(STACK[0xD4F]) < 0)
                                                                                            operator delete((void *)STACK[0xD38]);
                                                                                          std::__tree<std::string>::destroy((uint64_t)&STACK[0xD50], (char *)STACK[0xD58]);
                                                                                          if (v87[3551] < 0)
                                                                                            operator delete((void *)STACK[0x1D40]);
                                                                                          if (SLOBYTE(STACK[0xD7F]) < 0)
                                                                                            operator delete((void *)STACK[0xD68]);
                                                                                          std::__tree<std::string>::destroy((uint64_t)&STACK[0xD80], (char *)STACK[0xD88]);
                                                                                          if (v87[3575] < 0)
                                                                                            operator delete((void *)STACK[0x1D58]);
                                                                                          if (SLOBYTE(STACK[0xDAF]) < 0)
                                                                                            operator delete((void *)STACK[0xD98]);
                                                                                          std::__tree<std::string>::destroy((uint64_t)&STACK[0xDB0], (char *)STACK[0xDB8]);
                                                                                          if (v87[3599] < 0)
                                                                                            operator delete((void *)STACK[0x1D70]);
                                                                                          if (SLOBYTE(STACK[0xDDF]) < 0)
                                                                                            operator delete((void *)STACK[0xDC8]);
                                                                                          std::__tree<std::string>::destroy((uint64_t)&STACK[0xDE0], (char *)STACK[0xDE8]);
                                                                                          if (v87[3623] < 0)
                                                                                            operator delete((void *)STACK[0x1D88]);
                                                                                          if (SLOBYTE(STACK[0xE0F]) < 0)
                                                                                            operator delete((void *)STACK[0xDF8]);
                                                                                          std::__tree<std::string>::destroy((uint64_t)&STACK[0xE10], (char *)STACK[0xE18]);
                                                                                          if (v87[3647] < 0)
                                                                                            operator delete((void *)STACK[0x1DA0]);
                                                                                          if (SLOBYTE(STACK[0xE3F]) < 0)
                                                                                            operator delete((void *)STACK[0xE28]);
                                                                                          std::__tree<std::string>::destroy((uint64_t)&STACK[0xE40], (char *)STACK[0xE48]);
                                                                                          if (v87[3671] < 0)
                                                                                            operator delete((void *)STACK[0x1DB8]);
                                                                                          if (SLOBYTE(STACK[0xE6F]) < 0)
                                                                                            operator delete((void *)STACK[0xE58]);
                                                                                          std::__tree<std::string>::destroy((uint64_t)&STACK[0xE70], (char *)STACK[0xE78]);
                                                                                          if (v87[3695] < 0)
                                                                                            operator delete((void *)STACK[0x1DD0]);
                                                                                          if (SLOBYTE(STACK[0xE9F]) < 0)
                                                                                            operator delete((void *)STACK[0xE88]);
                                                                                          std::__tree<std::string>::destroy((uint64_t)&STACK[0xEA0], (char *)STACK[0xEA8]);
                                                                                          if (v87[3719] < 0)
                                                                                            operator delete((void *)STACK[0x1DE8]);
                                                                                          if (SLOBYTE(STACK[0xECF]) < 0)
                                                                                            operator delete((void *)STACK[0xEB8]);
                                                                                          std::__tree<std::string>::destroy((uint64_t)&STACK[0xED0], (char *)STACK[0xED8]);
                                                                                          v114 = 0;
                                                                                          while (1)
                                                                                          {
                                                                                            if (*((char *)&STACK[0x1E00]
                                                                                                 + v114
                                                                                                 + 47) < 0)
                                                                                              operator delete(*(void **)((char *)&STACK[0x1E00] + v114 + 24));
                                                                                            v114 -= 24;
                                                                                            if (v114 == -48)
                                                                                            {
                                                                                              if (SLOBYTE(STACK[0xEFF]) < 0)
                                                                                                operator delete((void *)STACK[0xEE8]);
                                                                                              std::__tree<std::string>::destroy((uint64_t)&STACK[0xF00], (char *)STACK[0xF08]);
                                                                                              if (v87[3791] < 0)
                                                                                                operator delete((void *)STACK[0x1E30]);
                                                                                              if (SLOBYTE(STACK[0xF2F]) < 0)
                                                                                                operator delete((void *)STACK[0xF18]);
                                                                                              std::__tree<std::string>::destroy((uint64_t)&STACK[0xF30], (char *)STACK[0xF38]);
                                                                                              if (v87[3815] < 0)
                                                                                                operator delete((void *)STACK[0x1E48]);
                                                                                              if (SLOBYTE(STACK[0xF5F]) < 0)
                                                                                                operator delete((void *)STACK[0xF48]);
                                                                                              std::__tree<std::string>::destroy((uint64_t)&STACK[0xF60], (char *)STACK[0xF68]);
                                                                                              v115 = 0;
                                                                                              while (1)
                                                                                              {
                                                                                                if (*((char *)&STACK[0x1E60] + v115 + 71) < 0)
                                                                                                  operator delete(*(void **)((char *)&STACK[0x1E60] + v115 + 48));
                                                                                                v115 -= 24;
                                                                                                if (v115 == -72)
                                                                                                {
                                                                                                  if (v87[23] < 0)
                                                                                                    operator delete((void *)STACK[0xF78]);
                                                                                                  std::__tree<std::string>::destroy((uint64_t)&STACK[0xF90], (char *)STACK[0xF98]);
                                                                                                  v116 = 0;
                                                                                                  while (1)
                                                                                                  {
                                                                                                    if (*((char *)&STACK[0x1EA8] + v116 + 47) < 0)
                                                                                                      operator delete(*(void **)((char *)&STACK[0x1EA8] + v116 + 24));
                                                                                                    v116 -= 24;
                                                                                                    if (v116 == -48)
                                                                                                    {
                                                                                                      if (v87[71] < 0)
                                                                                                        operator delete((void *)STACK[0xFA8]);
                                                                                                      std::__tree<std::string>::destroy((uint64_t)&STACK[0xFC0], (char *)STACK[0xFC8]);
                                                                                                      if (v87[3959] < 0)
                                                                                                        operator delete((void *)STACK[0x1ED8]);
                                                                                                      if (v87[119] < 0)
                                                                                                        operator delete((void *)STACK[0xFD8]);
                                                                                                      std::__tree<std::string>::destroy((uint64_t)&STACK[0xFF0], (char *)STACK[0xFF8]);
                                                                                                      v117 = 0;
                                                                                                      while (1)
                                                                                                      {
                                                                                                        if (*((char *)&STACK[0x1EF0] + v117 + 47) < 0)
                                                                                                          operator delete(*(void **)((char *)&STACK[0x1EF0] + v117 + 24));
                                                                                                        v117 -= 24;
                                                                                                        if (v117 == -48)
                                                                                                        {
                                                                                                          if (v87[167] < 0)
                                                                                                            operator delete((void *)STACK[0x1008]);
                                                                                                          std::__tree<std::string>::destroy((uint64_t)&STACK[0x1020], (char *)STACK[0x1028]);
                                                                                                          if (v87[4031] < 0)
                                                                                                            operator delete((void *)STACK[0x1F20]);
                                                                                                          if (v87[215] < 0)
                                                                                                            operator delete((void *)STACK[0x1038]);
                                                                                                          std::__tree<std::string>::destroy((uint64_t)&STACK[0x1050], (char *)STACK[0x1058]);
                                                                                                          v118 = 0;
                                                                                                          while (1)
                                                                                                          {
                                                                                                            if (*((char *)&STACK[0x1F38] + v118 + 47) < 0)
                                                                                                              operator delete(*(void **)((char *)&STACK[0x1F38] + v118 + 24));
                                                                                                            v118 -= 24;
                                                                                                            if (v118 == -48)
                                                                                                            {
                                                                                                              if (v87[263] < 0)
                                                                                                                operator delete((void *)STACK[0x1068]);
                                                                                                              std::__tree<std::string>::destroy((uint64_t)&STACK[0x1080], (char *)STACK[0x1088]);
                                                                                                              if (v88[23] < 0)
                                                                                                                operator delete((void *)STACK[0x1F68]);
                                                                                                              if (v87[311] < 0)
                                                                                                                operator delete((void *)STACK[0x1098]);
                                                                                                              std::__tree<std::string>::destroy((uint64_t)&STACK[0x10B0], (char *)STACK[0x10B8]);
                                                                                                              v119 = 0;
                                                                                                              while (1)
                                                                                                              {
                                                                                                                if (*((char *)&STACK[0x1F80] + v119 + 71) < 0)
                                                                                                                  operator delete(*(void **)((char *)&STACK[0x1F80] + v119 + 48));
                                                                                                                v119 -= 24;
                                                                                                                if (v119 == -72)
                                                                                                                {
                                                                                                                  if (v87[359] < 0)
                                                                                                                    operator delete((void *)STACK[0x10C8]);
                                                                                                                  std::__tree<std::string>::destroy((uint64_t)&STACK[0x10E0], (char *)STACK[0x10E8]);
                                                                                                                  if (v88[119] < 0)
                                                                                                                    operator delete((void *)STACK[0x1FC8]);
                                                                                                                  if (v87[407] < 0)
                                                                                                                    operator delete((void *)STACK[0x10F8]);
                                                                                                                  std::__tree<std::string>::destroy((uint64_t)&STACK[0x1110], (char *)STACK[0x1118]);
                                                                                                                  if (v88[143] < 0)
                                                                                                                    operator delete((void *)STACK[0x1FE0]);
                                                                                                                  if (v87[455] < 0)
                                                                                                                    operator delete((void *)STACK[0x1128]);
                                                                                                                  std::__tree<std::string>::destroy((uint64_t)&STACK[0x1140], (char *)STACK[0x1148]);
                                                                                                                  v120 = 0;
                                                                                                                  while (1)
                                                                                                                  {
                                                                                                                    if (*((char *)&STACK[0x1FF8] + v120 + 47) < 0)
                                                                                                                      operator delete(*(void **)((char *)&STACK[0x1FF8] + v120 + 24));
                                                                                                                    v120 -= 24;
                                                                                                                    if (v120 == -48)
                                                                                                                    {
                                                                                                                      if (v87[503] < 0)
                                                                                                                        operator delete((void *)STACK[0x1158]);
                                                                                                                      std::__tree<std::string>::destroy((uint64_t)&STACK[0x1170], (char *)STACK[0x1178]);
                                                                                                                      if (v88[215] < 0)
                                                                                                                        operator delete((void *)STACK[0x2028]);
                                                                                                                      if (v87[551] < 0)
                                                                                                                        operator delete((void *)STACK[0x1188]);
                                                                                                                      std::__tree<std::string>::destroy((uint64_t)&STACK[0x11A0], (char *)STACK[0x11A8]);
                                                                                                                      v121 = 0;
                                                                                                                      while (1)
                                                                                                                      {
                                                                                                                        if (*((char *)&STACK[0x2040] + v121 + 47) < 0)
                                                                                                                          operator delete(*(void **)((char *)&STACK[0x2040] + v121 + 24));
                                                                                                                        v121 -= 24;
                                                                                                                        if (v121 == -48)
                                                                                                                        {
                                                                                                                          if (v87[599] < 0)
                                                                                                                            operator delete((void *)STACK[0x11B8]);
                                                                                                                          std::__tree<std::string>::destroy((uint64_t)&STACK[0x11D0], (char *)STACK[0x11D8]);
                                                                                                                          if (v88[287] < 0)
                                                                                                                            operator delete((void *)STACK[0x2070]);
                                                                                                                          if (v87[647] < 0)
                                                                                                                            operator delete((void *)STACK[0x11E8]);
                                                                                                                          std::__tree<std::string>::destroy((uint64_t)&STACK[0x1200], (char *)STACK[0x1208]);
                                                                                                                          if (v88[311] < 0)
                                                                                                                            operator delete((void *)STACK[0x2088]);
                                                                                                                          if (v87[695] < 0)
                                                                                                                            operator delete((void *)STACK[0x1218]);
                                                                                                                          std::__tree<std::string>::destroy((uint64_t)&STACK[0x1230], (char *)STACK[0x1238]);
                                                                                                                          if (v88[335] < 0)
                                                                                                                            operator delete((void *)STACK[0x20A0]);
                                                                                                                          if (v87[743] < 0)
                                                                                                                            operator delete((void *)STACK[0x1248]);
                                                                                                                          std::__tree<std::string>::destroy((uint64_t)&STACK[0x1260], (char *)STACK[0x1268]);
                                                                                                                          if (v88[359] < 0)
                                                                                                                            operator delete((void *)STACK[0x20B8]);
                                                                                                                          if (v87[791] < 0)
                                                                                                                            operator delete((void *)STACK[0x1278]);
                                                                                                                          std::__tree<std::string>::destroy((uint64_t)&STACK[0x1290], (char *)STACK[0x1298]);
                                                                                                                          if (v88[383] < 0)
                                                                                                                            operator delete((void *)STACK[0x20D0]);
                                                                                                                          if (v87[839] < 0)
                                                                                                                            operator delete((void *)STACK[0x12A8]);
                                                                                                                          std::__tree<std::string>::destroy((uint64_t)&STACK[0x12C0], (char *)STACK[0x12C8]);
                                                                                                                          if (v88[407] < 0)
                                                                                                                            operator delete((void *)STACK[0x20E8]);
                                                                                                                          if (v87[887] < 0)
                                                                                                                            operator delete((void *)STACK[0x12D8]);
                                                                                                                          std::__tree<std::string>::destroy((uint64_t)&STACK[0x12F0], (char *)STACK[0x12F8]);
                                                                                                                          if (v88[431] < 0)
                                                                                                                            operator delete((void *)STACK[0x2100]);
                                                                                                                          if (v87[935] < 0)
                                                                                                                            operator delete((void *)STACK[0x1308]);
                                                                                                                          std::__tree<std::string>::destroy((uint64_t)&STACK[0x1320], (char *)STACK[0x1328]);
                                                                                                                          v122 = 0;
                                                                                                                          while (1)
                                                                                                                          {
                                                                                                                            if (*((char *)&STACK[0x2118] + v122 + 47) < 0)
                                                                                                                              operator delete(*(void **)((char *)&STACK[0x2118] + v122 + 24));
                                                                                                                            v122 -= 24;
                                                                                                                            if (v122 == -48)
                                                                                                                            {
                                                                                                                              if (v87[983] < 0)
                                                                                                                                operator delete((void *)STACK[0x1338]);
                                                                                                                              std::__tree<std::string>::destroy((uint64_t)&STACK[0x1350], (char *)STACK[0x1358]);
                                                                                                                              v123 = 0;
                                                                                                                              while (1)
                                                                                                                              {
                                                                                                                                if (*((char *)&STACK[0x2148] + v123 + 47) < 0)
                                                                                                                                  operator delete(*(void **)((char *)&STACK[0x2148] + v123 + 24));
                                                                                                                                v123 -= 24;
                                                                                                                                if (v123 == -48)
                                                                                                                                {
                                                                                                                                  if (v87[1031] < 0)
                                                                                                                                    operator delete((void *)STACK[0x1368]);
                                                                                                                                  std::__tree<std::string>::destroy((uint64_t)&STACK[0x1380], (char *)STACK[0x1388]);
                                                                                                                                  v124 = 0;
                                                                                                                                  while (1)
                                                                                                                                  {
                                                                                                                                    if (*((char *)&STACK[0x2178] + v124 + 47) < 0)
                                                                                                                                      operator delete(*(void **)((char *)&STACK[0x2178] + v124 + 24));
                                                                                                                                    v124 -= 24;
                                                                                                                                    if (v124 == -48)
                                                                                                                                    {
                                                                                                                                      if (v87[1079] < 0)
                                                                                                                                        operator delete((void *)STACK[0x1398]);
                                                                                                                                      std::__tree<std::string>::destroy((uint64_t)&STACK[0x13B0], (char *)STACK[0x13B8]);
                                                                                                                                      if (v88[599] < 0)
                                                                                                                                        operator delete((void *)STACK[0x21A8]);
                                                                                                                                      if (v87[1127] < 0)
                                                                                                                                        operator delete((void *)STACK[0x13C8]);
                                                                                                                                      std::__tree<std::string>::destroy((uint64_t)&STACK[0x13E0], (char *)STACK[0x13E8]);
                                                                                                                                      if (v88[623] < 0)
                                                                                                                                        operator delete((void *)STACK[0x21C0]);
                                                                                                                                      if (v87[1175] < 0)
                                                                                                                                        operator delete((void *)STACK[0x13F8]);
                                                                                                                                      _Unwind_Resume(a1);
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                }
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_1BF951B9C()
{
  JUMPOUT(0x1BF950598);
}

void sub_1BF951BA8()
{
  JUMPOUT(0x1BF9505A8);
}

void sub_1BF951BB4()
{
  JUMPOUT(0x1BF9505B8);
}

void sub_1BF951BC4()
{
  JUMPOUT(0x1BF9505C4);
}

void sub_1BF951BD0()
{
  JUMPOUT(0x1BF9505D4);
}

void sub_1BF951BDC()
{
  JUMPOUT(0x1BF9505E4);
}

void sub_1BF951BEC()
{
  JUMPOUT(0x1BF9505F0);
}

void sub_1BF951BF8()
{
  JUMPOUT(0x1BF950600);
}

void sub_1BF951C04()
{
  JUMPOUT(0x1BF950610);
}

void sub_1BF951C14()
{
  JUMPOUT(0x1BF95061CLL);
}

void sub_1BF951C20()
{
  JUMPOUT(0x1BF95062CLL);
}

void sub_1BF951C2C()
{
  JUMPOUT(0x1BF95063CLL);
}

void sub_1BF951C3C()
{
  JUMPOUT(0x1BF950648);
}

void sub_1BF951C48()
{
  JUMPOUT(0x1BF950658);
}

void sub_1BF951C54()
{
  JUMPOUT(0x1BF950668);
}

void sub_1BF951C64()
{
  JUMPOUT(0x1BF950674);
}

void sub_1BF951C70()
{
  JUMPOUT(0x1BF950684);
}

void sub_1BF951C7C()
{
  JUMPOUT(0x1BF950694);
}

void sub_1BF951C8C()
{
  JUMPOUT(0x1BF9506A0);
}

void sub_1BF951C98()
{
  JUMPOUT(0x1BF9506B0);
}

void sub_1BF951CA4()
{
  JUMPOUT(0x1BF9506C0);
}

void sub_1BF951CB4()
{
  JUMPOUT(0x1BF9506CCLL);
}

void sub_1BF951CC0()
{
  JUMPOUT(0x1BF9506DCLL);
}

void sub_1BF951CCC()
{
  JUMPOUT(0x1BF9506ECLL);
}

void sub_1BF951CDC()
{
  JUMPOUT(0x1BF9506F8);
}

void sub_1BF951CE8()
{
  JUMPOUT(0x1BF950724);
}

void sub_1BF952E78()
{
  unint64_t *v0;

  while (1)
  {
    if (*((char *)v0 - 1) < 0)
      operator delete((void *)*(v0 - 3));
    v0 -= 3;
    if (v0 == &STACK[0x1578])
      JUMPOUT(0x1BF952EA0);
  }
}

void sub_1BF952EA8()
{
  unint64_t *v0;

  while (1)
  {
    if (*((char *)v0 - 1) < 0)
      operator delete((void *)*(v0 - 3));
    v0 -= 3;
    if (v0 == &STACK[0x1710])
      JUMPOUT(0x1BF952ED0);
  }
}

void sub_1BF952ED8()
{
  unint64_t *v0;

  while (1)
  {
    if (*((char *)v0 - 1) < 0)
      operator delete((void *)*(v0 - 3));
    v0 -= 3;
    if (v0 == &STACK[0x18F0])
      JUMPOUT(0x1BF952F00);
  }
}

void sub_1BF952F08()
{
  unint64_t *v0;

  while (1)
  {
    if (*((char *)v0 - 1) < 0)
      operator delete((void *)*(v0 - 3));
    v0 -= 3;
    if (v0 == &STACK[0x1A88])
      JUMPOUT(0x1BF952F30);
  }
}

void sub_1BF952F38()
{
  unint64_t *v0;

  while (1)
  {
    if (*((char *)v0 - 1) < 0)
      operator delete((void *)*(v0 - 3));
    v0 -= 3;
    if (v0 == &STACK[0x1E60])
      JUMPOUT(0x1BF952F60);
  }
}

void sub_1BF952F68()
{
  unint64_t *v0;

  while (1)
  {
    if (*((char *)v0 - 1) < 0)
      operator delete((void *)*(v0 - 3));
    v0 -= 3;
    if (v0 == &STACK[0x1F80])
      JUMPOUT(0x1BF952F90);
  }
}

std::string *std::pair<std::string const,std::set<std::string> const>::pair[abi:ne180100]<true,0>(std::string *this, __int128 *a2, const void ***a3)
{
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  std::set<std::string>::set[abi:ne180100]((uint64_t *)&this[1], a3);
  return this;
}

void sub_1BF952FF4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::map<std::string const,std::set<std::string> const,std::less<std::string const>,std::allocator<std::pair<std::string const,std::set<std::string> const>>>::map[abi:ne180100](__int128 *a1, uint64_t a2)
{
  __int128 *v2;
  uint64_t v3;
  __int128 *v4;
  uint64_t *i;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t *v11;
  _QWORD *v12;
  char *v13;
  uint64_t *v14;
  __int128 v15;
  _QWORD v16[2];
  char v17;

  qword_1EF581A90 = 0;
  qword_1EF581A88 = 0;
  siri::dialogengine::vcat::GetRequiredFields(std::string const&)::fullNameToRequiredFields = (uint64_t)&qword_1EF581A88;
  if (a2)
  {
    v2 = a1;
    v3 = 0;
    v4 = &a1[3 * a2];
    for (i = &qword_1EF581A88;
          i != &qword_1EF581A88;
          i = (uint64_t *)siri::dialogengine::vcat::GetRequiredFields(std::string const&)::fullNameToRequiredFields)
    {
      v6 = (uint64_t *)v3;
      if (v3)
      {
        do
        {
          v7 = v6;
          v6 = (uint64_t *)v6[1];
        }
        while (v6);
      }
      else
      {
        v8 = &qword_1EF581A88;
        do
        {
          v7 = (uint64_t *)v8[2];
          v9 = *v7 == (_QWORD)v8;
          v8 = v7;
        }
        while (v9);
      }
      if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v7 + 4, v2))
        goto LABEL_11;
      if (!v3)
        goto LABEL_22;
      v11 = (uint64_t *)v3;
      while (1)
      {
        while (1)
        {
          v7 = v11;
          v12 = v11 + 4;
          if (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v2, v11 + 4))
            break;
          v11 = (uint64_t *)*v7;
          v10 = v7;
          if (!*v7)
            goto LABEL_23;
        }
        if (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v12, v2))
          break;
        v10 = v7 + 1;
        v11 = (uint64_t *)v7[1];
        if (!v11)
          goto LABEL_23;
      }
LABEL_29:
      v2 += 3;
      if (v2 == v4)
        return;
    }
    v7 = &qword_1EF581A88;
LABEL_11:
    if (v3)
    {
      v10 = v7 + 1;
      if (v7[1])
        goto LABEL_29;
    }
    else
    {
LABEL_22:
      v7 = &qword_1EF581A88;
      v10 = &qword_1EF581A88;
    }
LABEL_23:
    v13 = (char *)operator new(0x50uLL);
    v14 = (uint64_t *)v13;
    v16[0] = v13;
    v16[1] = &qword_1EF581A88;
    v17 = 0;
    if (*((char *)v2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v13 + 32), *(const std::string::value_type **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v15 = *v2;
      *((_QWORD *)v13 + 6) = *((_QWORD *)v2 + 2);
      *((_OWORD *)v13 + 2) = v15;
    }
    std::set<std::string>::set[abi:ne180100](v14 + 7, (const void ***)v2 + 3);
    v17 = 1;
    *v14 = 0;
    v14[1] = 0;
    v14[2] = (uint64_t)v7;
    *v10 = (uint64_t)v14;
    if (*(_QWORD *)siri::dialogengine::vcat::GetRequiredFields(std::string const&)::fullNameToRequiredFields)
    {
      siri::dialogengine::vcat::GetRequiredFields(std::string const&)::fullNameToRequiredFields = *(_QWORD *)siri::dialogengine::vcat::GetRequiredFields(std::string const&)::fullNameToRequiredFields;
      v14 = (uint64_t *)*v10;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_1EF581A88, v14);
    ++qword_1EF581A90;
    v16[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v16);
    v3 = qword_1EF581A88;
    goto LABEL_29;
  }
}

void sub_1BF9531F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::set<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy((_QWORD *)qword_1EF581A88);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,std::set<std::string> const>::~pair(uint64_t a1)
{
  std::__tree<std::string>::destroy(a1 + 24, *(char **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::map<std::string const,std::set<std::string> const,std::less<std::string const>,std::allocator<std::pair<std::string const,std::set<std::string> const>>>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(*(_QWORD **)(a1 + 8));
  return a1;
}

void sub_1BF95335C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  void *v40;

  if (a40)
    siri::dialogengine::ObjectProperty::~ObjectProperty(&a10);

  _Unwind_Resume(a1);
}

void sub_1BF953460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  void *v40;

  if (a40)
    siri::dialogengine::ObjectProperty::~ObjectProperty(&a10);

  _Unwind_Resume(a1);
}

void sub_1BF953574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  void *v40;

  if (a40)
    siri::dialogengine::ObjectProperty::~ObjectProperty(&a10);

  _Unwind_Resume(a1);
}

void sub_1BF9537D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (*(char *)(v9 - 41) < 0)
    operator delete(*(void **)(v9 - 64));
  _Unwind_Resume(a1);
}

void sub_1BF953A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (*(char *)(v9 - 41) < 0)
    operator delete(*(void **)(v9 - 64));
  _Unwind_Resume(a1);
}

void sub_1BF953C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (*(char *)(v9 - 41) < 0)
    operator delete(*(void **)(v9 - 64));
  _Unwind_Resume(a1);
}

void sub_1BF953E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (*(char *)(v9 - 41) < 0)
    operator delete(*(void **)(v9 - 64));
  _Unwind_Resume(a1);
}

void std::__optional_storage_base<siri::dialogengine::ObjectProperty,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<siri::dialogengine::ObjectProperty,false> const&>(siri::dialogengine::ObjectProperty *this, siri::dialogengine::ObjectProperty *a2)
{
  char v4;

  if (*((unsigned __int8 *)this + 240) == *((unsigned __int8 *)a2 + 240))
  {
    if (*((_BYTE *)this + 240))
    {
      std::string::operator=((std::string *)((char *)this + 8), (const std::string *)((char *)a2 + 8));
      std::string::operator=((std::string *)((char *)this + 32), (const std::string *)((char *)a2 + 32));
      std::string::operator=((std::string *)((char *)this + 56), (const std::string *)((char *)a2 + 56));
      std::string::operator=((std::string *)((char *)this + 80), (const std::string *)((char *)a2 + 80));
      std::string::operator=((std::string *)((char *)this + 104), (const std::string *)((char *)a2 + 104));
      std::string::operator=((std::string *)((char *)this + 128), (const std::string *)((char *)a2 + 128));
      v4 = *((_BYTE *)a2 + 154);
      *((_WORD *)this + 76) = *((_WORD *)a2 + 76);
      *((_BYTE *)this + 154) = v4;
      std::string::operator=((std::string *)((char *)this + 160), (const std::string *)((char *)a2 + 160));
      std::string::operator=((std::string *)((char *)this + 184), (const std::string *)((char *)a2 + 184));
      std::string::operator=((std::string *)((char *)this + 208), (const std::string *)((char *)a2 + 208));
      *((_WORD *)this + 116) = *((_WORD *)a2 + 116);
    }
  }
  else if (*((_BYTE *)this + 240))
  {
    siri::dialogengine::ObjectProperty::~ObjectProperty((void **)this);
    *((_BYTE *)this + 240) = 0;
  }
  else
  {
    siri::dialogengine::ObjectProperty::ObjectProperty(this, a2);
    *((_BYTE *)this + 240) = 1;
  }
}

siri::dialogengine::ObjectProperty *std::__optional_copy_base<siri::dialogengine::ObjectProperty,false>::__optional_copy_base[abi:ne180100](siri::dialogengine::ObjectProperty *this, const siri::dialogengine::ObjectProperty *a2)
{
  *(_BYTE *)this = 0;
  *((_BYTE *)this + 240) = 0;
  if (*((_BYTE *)a2 + 240))
  {
    siri::dialogengine::ObjectProperty::ObjectProperty(this, a2);
    *((_BYTE *)this + 240) = 1;
  }
  return this;
}

void sub_1BF954068(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 240))
    siri::dialogengine::ObjectProperty::~ObjectProperty((void **)v1);
  _Unwind_Resume(exception_object);
}

void __assign_helper_atomic_property__2750(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v3 = *a2;
  v2 = a2[1];
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (std::__shared_weak_count *)a1[1];
  *a1 = v3;
  a1[1] = v2;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

_QWORD *__copy_helper_atomic_property__2751(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = a2[1];
  *result = *a2;
  result[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void YAML::EncodeBase64(YAML *this@<X0>, unint64_t a2@<X1>, std::string *a3@<X8>)
{
  std::string *v6;
  unint64_t v7;
  unint64_t v8;
  std::string *v9;
  char v10;
  std::string::size_type v11;

  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  std::string::resize(a3, 4 * a2 / 3 + 3, 0);
  if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = a3;
  else
    v6 = (std::string *)a3->__r_.__value_.__r.__words[0];
  v7 = a2 / 3;
  v8 = a2 % 3;
  if (a2 >= 3)
  {
    do
    {
      v6->__r_.__value_.__s.__data_[0] = aAbcdefghijklmn[(unint64_t)*(unsigned __int8 *)this >> 2];
      v6->__r_.__value_.__s.__data_[1] = aAbcdefghijklmn[((unint64_t)*((unsigned __int8 *)this + 1) >> 4) & 0xFFFFFFFFFFFFFFCFLL | (16 * (*(_BYTE *)this & 3))];
      v6->__r_.__value_.__s.__data_[2] = aAbcdefghijklmn[((unint64_t)*((unsigned __int8 *)this + 2) >> 6) & 0xFFFFFFFFFFFFFFC3 | (4 * (*((_BYTE *)this + 1) & 0xF))];
      v9 = (std::string *)((char *)v6->__r_.__value_.__r.__words + 4);
      v6->__r_.__value_.__s.__data_[3] = aAbcdefghijklmn[*((_BYTE *)this + 2) & 0x3F];
      this = (YAML *)((char *)this + 3);
      v6 = (std::string *)((char *)v6 + 4);
      --v7;
    }
    while (v7);
    v6 = v9;
  }
  if (v8 == 1)
  {
    v6->__r_.__value_.__s.__data_[0] = aAbcdefghijklmn[(unint64_t)*(unsigned __int8 *)this >> 2];
    v6->__r_.__value_.__s.__data_[1] = aAbcdefghijklmn[16 * (*(_BYTE *)this & 3)];
    v10 = 61;
  }
  else
  {
    if (v8 != 2)
      goto LABEL_12;
    v6->__r_.__value_.__s.__data_[0] = aAbcdefghijklmn[(unint64_t)*(unsigned __int8 *)this >> 2];
    v6->__r_.__value_.__s.__data_[1] = aAbcdefghijklmn[((unint64_t)*((unsigned __int8 *)this + 1) >> 4) & 0xFFFFFFFFFFFFFFCFLL | (16 * (*(_BYTE *)this & 3))];
    v10 = aAbcdefghijklmn[4 * (*((_BYTE *)this + 1) & 0xF)];
  }
  v6->__r_.__value_.__s.__data_[2] = v10;
  v6->__r_.__value_.__s.__data_[3] = 61;
  v6 = (std::string *)((char *)v6 + 4);
LABEL_12:
  if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = (std::string::size_type)a3;
  else
    v11 = a3->__r_.__value_.__r.__words[0];
  std::string::resize(a3, (std::string::size_type)v6 - v11, 0);
}

void sub_1BF9542BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void YAML::DecodeBase64(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  int v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t *v16;
  unsigned int v17;
  int v18;
  uint64_t *v19;
  int v20;
  int v21;
  char *v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  uint64_t v28;
  size_t v29;
  _BYTE *v30;
  char *v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;

  v3 = *((char *)a1 + 23);
  v4 = *((unsigned __int8 *)a1 + 23);
  v5 = *((unsigned __int8 *)a1 + 23);
  v6 = v3 < 0;
  if ((v3 & 0x80000000) == 0)
  {
    if (*((_BYTE *)a1 + 23))
    {
      v7 = *((unsigned __int8 *)a1 + 23);
      goto LABEL_5;
    }
LABEL_45:
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return;
  }
  v7 = a1[1];
  if (!v7)
    goto LABEL_45;
LABEL_5:
  v33 = 3 * v7;
  v8 = (unint64_t)(3 * v7) >> 2;
  v9 = (char *)operator new(v8 + 1);
  v34 = v8 + 1;
  bzero(v9, v8 + 1);
  v10 = a1[1];
  if ((v5 & 0x80u) == 0)
    v10 = v4;
  v11 = v9;
  if (v10)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = MEMORY[0x1E0C80978];
    v11 = v9;
    do
    {
      v16 = (uint64_t *)*a1;
      if (!v6)
        v16 = a1;
      v17 = *((char *)v16 + v13);
      if ((v17 & 0x80000000) != 0)
      {
        v18 = __maskrune(v17, 0x4000uLL);
        v5 = *((unsigned __int8 *)a1 + 23);
        if (v18)
          goto LABEL_32;
      }
      else if ((*(_DWORD *)(v15 + 4 * v17 + 60) & 0x4000) != 0)
      {
        goto LABEL_32;
      }
      if ((v5 & 0x80u) == 0)
        v19 = a1;
      else
        v19 = (uint64_t *)*a1;
      v20 = YAML::decoding[*((char *)v19 + v13)];
      if (v20 == 255)
      {
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
        operator delete(v9);
        return;
      }
      v21 = v20 | (v14 << 6);
      if ((~v12 & 3) == 0)
      {
        *v11 = v14 >> 10;
        v22 = v11 + 1;
        v5 = *((unsigned __int8 *)a1 + 23);
        v23 = (uint64_t *)*a1;
        if (v13)
        {
          v24 = (v5 & 0x80u) == 0 ? (uint64_t)a1 : *a1;
          if (*(_BYTE *)(v24 + v13 - 1) != 61)
          {
            v22 = v11 + 2;
            v11[1] = (unsigned __int16)v14 >> 2;
            v5 = *((unsigned __int8 *)a1 + 23);
            v23 = (uint64_t *)*a1;
          }
        }
        if ((v5 & 0x80u) == 0)
          v23 = a1;
        if (*((_BYTE *)v23 + v13) != 61)
        {
          *v22++ = v21;
          v5 = *((unsigned __int8 *)a1 + 23);
        }
        v11 = v22;
      }
      ++v12;
      v14 = v21;
LABEL_32:
      ++v13;
      v6 = (v5 & 0x80u) != 0;
      v25 = a1[1];
      if ((v5 & 0x80u) == 0)
        v25 = v5;
    }
    while (v13 < v25);
  }
  v26 = v11 - v9;
  v27 = v11 - v9 - v34;
  if (v11 - v9 <= v34)
  {
    v31 = &v9[v34];
    if (v8 >= v26)
      v32 = v11;
    else
      v32 = &v9[v34];
    v30 = v9;
  }
  else
  {
    if ((v26 & 0x8000000000000000) != 0)
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    v28 = 2 * v34;
    if (2 * v34 <= v26)
      v28 = v11 - v9;
    if (v33 >= 0xFFFFFFFFFFFFFFF8)
      v29 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v29 = v28;
    v30 = operator new(v29);
    v31 = &v30[v29];
    v32 = &v30[v26];
    bzero(&v30[v34], v27);
    do
    {
      v30[v8] = v9[v8];
      --v8;
    }
    while (v8 != -1);
    operator delete(v9);
  }
  *a2 = v30;
  a2[1] = v32;
  a2[2] = v31;
}

void sub_1BF954588(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void InitDefaultsscc_info_Control_PlayerButton_Control_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Control.pb.cc", a4);
  SnippetUI::Control_PlayerButton::Control_PlayerButton((SnippetUI::Control_PlayerButton *)&SnippetUI::_Control_PlayerButton_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Control_PlayerButton_default_instance_, v4);
  qword_1EF584318 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EF584320 = &SnippetUI::_TextProperty_default_instance_;
}

SnippetUI::Control_PlayerButton *SnippetUI::Control_PlayerButton::Control_PlayerButton(SnippetUI::Control_PlayerButton *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)this = &off_1E792F118;
  *((_DWORD *)this + 18) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (atomic_load(scc_info_Control_PlayerButton_Control_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Control_PlayerButton_Control_2eproto);
  *((_QWORD *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  return this;
}

void sub_1BF954678(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v1 + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

void SnippetUI::Control_PlayerButton::~Control_PlayerButton(SnippetUI::Control_PlayerButton *this)
{
  SnippetUI::Control_PlayerButton::~Control_PlayerButton(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E792F118;
  v2 = *((_QWORD *)this + 5);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 6);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1C3B8D890](v4, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::Control_PlayerButton *)&SnippetUI::_Control_PlayerButton_default_instance_)
  {
    v6 = *((_QWORD *)this + 7);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = *((_QWORD *)this + 8);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((SnippetUI::Control_PlayerButton *)((char *)this + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::Control_PlayerButton *SnippetUI::Control_PlayerButton::New(SnippetUI::Control_PlayerButton *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Control_PlayerButton>(0);
}

SnippetUI::Control_PlayerButton *SnippetUI::Control_PlayerButton::New(SnippetUI::Control_PlayerButton *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Control_PlayerButton>(a2);
}

void SnippetUI::Control_PlayerButton::Clear(SnippetUI::Control_PlayerButton *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  google::protobuf::internal::InternalMetadataWithArena *v6;
  char v7;

  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16);
  v2 = *((_QWORD *)this + 5);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 6);
  if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
  v4 = *((_QWORD *)this + 7);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 7) = 0;
  v5 = *((_QWORD *)this + 8);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v7 = *((_BYTE *)this + 8);
  v6 = (SnippetUI::Control_PlayerButton *)((char *)this + 8);
  *((_QWORD *)v6 + 7) = 0;
  if ((v7 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v6);
}

uint64_t SnippetUI::Control_PlayerButton::IsInitialized(SnippetUI::Control_PlayerButton *this)
{
  return 1;
}

char *SnippetUI::Control_PlayerButton::ByteSizeLong(SnippetUI::Control_PlayerButton *this)
{
  const google::protobuf::UnknownFieldSet *v2;
  uint64_t v3;
  SnippetUI::Player **v4;
  uint64_t v5;
  SnippetUI::Player *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  SnippetUI::TextProperty *v14;
  char *v15;
  SnippetUI::TextProperty *v16;
  char *v17;

  v2 = (const google::protobuf::UnknownFieldSet *)*((int *)this + 6);
  v3 = *((_QWORD *)this + 4);
  if (v3)
    v4 = (SnippetUI::Player **)(v3 + 8);
  else
    v4 = 0;
  if ((_DWORD)v2)
  {
    v5 = 8 * (_QWORD)v2;
    do
    {
      v6 = *v4++;
      v7 = SnippetUI::Player::ByteSizeLong(v6);
      v2 = (const google::protobuf::UnknownFieldSet *)((char *)v2
                                                     + (_QWORD)v7
                                                     + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6));
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    v2 = 0;
  }
  v8 = *((_QWORD *)this + 5);
  v9 = *(unsigned __int8 *)(v8 + 23);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(_QWORD *)(v8 + 8))
      goto LABEL_14;
  }
  else if (!*(_BYTE *)(v8 + 23))
  {
    goto LABEL_14;
  }
  v10 = *(_QWORD *)(v8 + 8);
  if ((v9 & 0x80u) == 0)
    v10 = v9;
  v2 = (const google::protobuf::UnknownFieldSet *)((char *)v2 + v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_14:
  v11 = *((_QWORD *)this + 6);
  v12 = *(unsigned __int8 *)(v11 + 23);
  if (*(char *)(v11 + 23) < 0)
  {
    if (!*(_QWORD *)(v11 + 8))
      goto LABEL_19;
  }
  else if (!*(_BYTE *)(v11 + 23))
  {
    goto LABEL_19;
  }
  v13 = *(_QWORD *)(v11 + 8);
  if ((v12 & 0x80u) == 0)
    v13 = v12;
  v2 = (const google::protobuf::UnknownFieldSet *)((char *)v2 + v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_19:
  if (this != (SnippetUI::Control_PlayerButton *)&SnippetUI::_Control_PlayerButton_default_instance_)
  {
    v14 = (SnippetUI::TextProperty *)*((_QWORD *)this + 7);
    if (v14)
    {
      v15 = SnippetUI::TextProperty::ByteSizeLong(v14);
      v2 = (const google::protobuf::UnknownFieldSet *)&v15[(_QWORD)v2
                                                         + 1
                                                         + ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 8);
    if (v16)
    {
      v17 = SnippetUI::TextProperty::ByteSizeLong(v16);
      v2 = (const google::protobuf::UnknownFieldSet *)&v17[(_QWORD)v2
                                                         + 1
                                                         + ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::Control_PlayerButton *)((char *)this + 8), v2, (_DWORD *)this + 18);
  *((_DWORD *)this + 18) = (_DWORD)v2;
  return (char *)v2;
}

uint64_t SnippetUI::Control_PlayerButton::GetCachedSize(SnippetUI::Control_PlayerButton *this)
{
  return *((unsigned int *)this + 18);
}

google::protobuf::internal *SnippetUI::Control_PlayerButton::_InternalParse(SnippetUI::Control_PlayerButton *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  std::string **v6;
  unsigned int *v7;
  uint64_t *v8;
  google::protobuf::internal::ParseContext *v9;
  google::protobuf::internal *TagFallback;
  char *v11;
  SnippetUI::TextProperty *v12;
  char *v13;
  char *v14;
  google::protobuf::internal *v15;
  int *v16;
  uint64_t v17;
  int v18;
  SnippetUI::Player *v19;
  uint64_t v20;
  uint64_t v21;
  std::string *v22;
  std::string::value_type *v23;
  google::protobuf::internal::ParseContext *v24;
  char *v25;
  BOOL v26;
  google::protobuf::internal *v28;

  v28 = a2;
  v5 = (std::string **)((char *)this + 48);
  v6 = (std::string **)((char *)this + 40);
  v7 = (unsigned int *)((char *)this + 16);
  v8 = (uint64_t *)((char *)this + 8);
LABEL_2:
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v28, *((_DWORD *)a3 + 23)) & 1) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v28 + 1);
      v11 = (char *)*(unsigned __int8 *)v28;
      if (*(char *)v28 < 0)
      {
        v11 = (char *)(v11 + (*(unsigned __int8 *)TagFallback << 7) - 128);
        if (*(char *)TagFallback < 0)
        {
          TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v28, v11);
          v28 = TagFallback;
          if (!TagFallback)
            return TagFallback;
LABEL_7:
          switch(v11 >> 3)
          {
            case 1u:
              if (v11 != 10)
                goto LABEL_38;
              v12 = (SnippetUI::TextProperty *)*((_QWORD *)this + 7);
              if (v12)
                goto LABEL_15;
              v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
              *((_QWORD *)this + 7) = v12;
              goto LABEL_14;
            case 2u:
              if (v11 != 18)
                goto LABEL_38;
              v12 = (SnippetUI::TextProperty *)*((_QWORD *)this + 8);
              if (!v12)
              {
                v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
                *((_QWORD *)this + 8) = v12;
LABEL_14:
                TagFallback = v28;
              }
LABEL_15:
              v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v12, TagFallback);
              goto LABEL_43;
            case 3u:
              if (v11 != 26)
                goto LABEL_38;
              v14 = (char *)TagFallback - 1;
              break;
            case 4u:
              if (v11 != 34)
                goto LABEL_38;
              v22 = *v6;
              if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              {
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
                v22 = *v6;
                TagFallback = v28;
              }
              v23 = (std::string::value_type *)TagFallback;
              v24 = a3;
              v25 = "SnippetUI.Control_PlayerButton.component_name";
              goto LABEL_37;
            case 5u:
              if (v11 != 42)
                goto LABEL_38;
              v22 = *v5;
              if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              {
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
                v22 = *v5;
                TagFallback = v28;
              }
              v23 = (std::string::value_type *)TagFallback;
              v24 = a3;
              v25 = "SnippetUI.Control_PlayerButton.link_identifier";
LABEL_37:
              v13 = google::protobuf::internal::InlineGreedyStringParserUTF8(v22, v23, (uint64_t)v24, (google::protobuf::internal *)v25);
              goto LABEL_43;
            default:
LABEL_38:
              if ((_DWORD)v11)
                v26 = (v11 & 7) == 4;
              else
                v26 = 1;
              if (v26)
              {
                *((_DWORD *)a3 + 20) = (_DWORD)v11 - 1;
                return TagFallback;
              }
              v13 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v11, v8, TagFallback, a3, v9);
LABEL_43:
              v28 = (google::protobuf::internal *)v13;
              if (!v13)
                return 0;
              continue;
          }
          while (1)
          {
            v15 = (google::protobuf::internal *)(v14 + 1);
            v28 = (google::protobuf::internal *)(v14 + 1);
            v16 = (int *)*((_QWORD *)this + 4);
            if (!v16)
              break;
            v17 = *((int *)this + 6);
            v18 = *v16;
            if ((int)v17 >= *v16)
            {
              if (v18 == *((_DWORD *)this + 7))
              {
LABEL_23:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v7, v18 + 1);
                v16 = (int *)*((_QWORD *)this + 4);
                v18 = *v16;
              }
              *v16 = v18 + 1;
              v19 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Player>(*((google::protobuf::internal::ArenaImpl **)this
                                                                                   + 2));
              v20 = *((_QWORD *)this + 4);
              v21 = *((int *)this + 6);
              *((_DWORD *)this + 6) = v21 + 1;
              *(_QWORD *)(v20 + 8 * v21 + 8) = v19;
              v15 = v28;
              goto LABEL_25;
            }
            *((_DWORD *)this + 6) = v17 + 1;
            v19 = *(SnippetUI::Player **)&v16[2 * v17 + 2];
LABEL_25:
            v14 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::Player>(a3, v19, v15);
            v28 = (google::protobuf::internal *)v14;
            if (!v14)
              return 0;
            if (*(_QWORD *)a3 <= (unint64_t)v14 || *v14 != 26)
              goto LABEL_2;
          }
          v18 = *((_DWORD *)this + 7);
          goto LABEL_23;
        }
        TagFallback = (google::protobuf::internal *)((char *)v28 + 2);
      }
      v28 = TagFallback;
      goto LABEL_7;
    }
    return v28;
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::Control_PlayerButton::InternalSerializeWithCachedSizesToArray(SnippetUI::Control_PlayerButton *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  SnippetUI::TextProperty *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  google::protobuf::UnknownFieldSet *v11;
  _BYTE *v12;
  _BYTE *v13;
  unsigned int v14;
  unsigned int v15;
  SnippetUI::TextProperty *v16;
  unsigned int v17;
  google::protobuf::UnknownFieldSet *v18;
  unsigned int v19;
  _BYTE *v20;
  _BYTE *v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  int i;
  SnippetUI::Player *v26;
  google::protobuf::io::EpsCopyOutputStream *v27;
  unsigned int v28;
  google::protobuf::UnknownFieldSet *v29;
  unsigned int v30;
  _BYTE *v31;
  _BYTE *v32;
  unsigned int v33;
  unsigned int v34;
  google::protobuf::internal *v35;
  const char *v36;
  google::protobuf::internal *v37;
  const char *v38;
  uint64_t v39;

  v5 = (char *)a2;
  if (this == (SnippetUI::Control_PlayerButton *)&SnippetUI::_Control_PlayerButton_default_instance_)
    goto LABEL_25;
  v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 7);
  if (v7)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 7);
    }
    *v5 = 10;
    v8 = *((_DWORD *)v7 + 15);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v12 = v5 + 2;
        do
        {
          v13 = v12;
          *v12++ = v10 | 0x80;
          v14 = v10 >> 7;
          v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        v11 = (google::protobuf::UnknownFieldSet *)(v13 + 2);
        *v12 = v14;
        goto LABEL_13;
      }
      v5[2] = v10;
      v9 = 3;
    }
    else
    {
      v5[1] = v8;
      v9 = 2;
    }
    v11 = (google::protobuf::UnknownFieldSet *)&v5[v9];
LABEL_13:
    v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 8);
  if (v16)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 8);
    }
    *v5 = 18;
    v17 = *((_DWORD *)v16 + 15);
    if (v17 > 0x7F)
    {
      v5[1] = v17 | 0x80;
      v19 = v17 >> 7;
      if (v17 >> 14)
      {
        v20 = v5 + 2;
        do
        {
          v21 = v20;
          *v20++ = v19 | 0x80;
          v22 = v19 >> 7;
          v23 = v19 >> 14;
          v19 >>= 7;
        }
        while (v23);
        v18 = (google::protobuf::UnknownFieldSet *)(v21 + 2);
        *v20 = v22;
      }
      else
      {
        v5[2] = v19;
        v18 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v17;
      v18 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v16, v18, a3, a4);
  }
LABEL_25:
  v24 = *((_DWORD *)this + 6);
  if (v24)
  {
    for (i = 0; i != v24; ++i)
    {
      if ((unint64_t)v5 >= *(_QWORD *)a3)
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v26 = (SnippetUI::Player *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16, i);
      *v5 = 26;
      v28 = *((_DWORD *)v26 + 14);
      if (v28 > 0x7F)
      {
        v5[1] = v28 | 0x80;
        v30 = v28 >> 7;
        if (v28 >> 14)
        {
          v31 = v5 + 2;
          do
          {
            v32 = v31;
            *v31++ = v30 | 0x80;
            v33 = v30 >> 7;
            v34 = v30 >> 14;
            v30 >>= 7;
          }
          while (v34);
          v29 = (google::protobuf::UnknownFieldSet *)(v32 + 2);
          *v31 = v33;
        }
        else
        {
          v5[2] = v30;
          v29 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
        }
      }
      else
      {
        v5[1] = v28;
        v29 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
      }
      v5 = (char *)SnippetUI::Player::InternalSerializeWithCachedSizesToArray(v26, v29, a3, v27);
    }
  }
  v35 = (google::protobuf::internal *)*((_QWORD *)this + 5);
  if (*((char *)v35 + 23) < 0)
  {
    v36 = (const char *)*((_QWORD *)v35 + 1);
    if (!v36)
      goto LABEL_43;
    v35 = *(google::protobuf::internal **)v35;
    goto LABEL_42;
  }
  v36 = (const char *)*((unsigned __int8 *)v35 + 23);
  if (*((_BYTE *)v35 + 23))
  {
LABEL_42:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v35, v36, 1, (google::protobuf::internal *)"SnippetUI.Control_PlayerButton.component_name");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 4, *((_QWORD *)this + 5), v5);
  }
LABEL_43:
  v37 = (google::protobuf::internal *)*((_QWORD *)this + 6);
  if (*((char *)v37 + 23) < 0)
  {
    v38 = (const char *)*((_QWORD *)v37 + 1);
    if (!v38)
      goto LABEL_49;
    v37 = *(google::protobuf::internal **)v37;
    goto LABEL_48;
  }
  v38 = (const char *)*((unsigned __int8 *)v37 + 23);
  if (*((_BYTE *)v37 + 23))
  {
LABEL_48:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v37, v38, 1, (google::protobuf::internal *)"SnippetUI.Control_PlayerButton.link_identifier");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 5, *((_QWORD *)this + 6), v5);
  }
LABEL_49:
  v39 = *((_QWORD *)this + 1);
  if ((v39 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v39 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)v5;
}

void SnippetUI::Control_PlayerButton::CopyFrom(SnippetUI::Control_PlayerButton *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::Control_PlayerButton::Clear(this);
    SnippetUI::Control_PlayerButton::MergeFrom(this, a2);
  }
}

void SnippetUI::Control_PlayerButton::MergeFrom(SnippetUI::Control_PlayerButton *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::Control_PlayerButton *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Control.pb.cc", 1272);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::Control_PlayerButton::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BF955044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Control_PlayerButton::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 72) = a2;
  return this;
}

uint64_t SnippetUI::Control_PlayerButton::GetMetadata(SnippetUI::Control_PlayerButton *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_Control_2eproto);
  return qword_1EF581AE8;
}

void InitDefaultsscc_info_Control_Switch_Control_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Control.pb.cc", a4);
  SnippetUI::Control_Switch::Control_Switch((SnippetUI::Control_Switch *)&SnippetUI::_Control_Switch_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Control_Switch_default_instance_, v4);
  qword_1ED1D3F10 = (uint64_t)&SnippetUI::_Switch_default_instance_;
  unk_1ED1D3F18 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D3F20 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D3F28 = &SnippetUI::_VisualProperty_default_instance_;
  qword_1ED1D3F30 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
}

SnippetUI::Control_Switch *SnippetUI::Control_Switch::Control_Switch(SnippetUI::Control_Switch *this)
{
  *(_QWORD *)this = &off_1E792EF98;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 16) = 0;
  if (atomic_load(scc_info_Control_Switch_Control_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Control_Switch_Control_2eproto);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 7) = 0;
  return this;
}

void sub_1BF955180(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Control_Switch::~Control_Switch(SnippetUI::Control_Switch *this)
{
  SnippetUI::Control_Switch::~Control_Switch(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)this = &off_1E792EF98;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::Control_Switch *)&SnippetUI::_Control_Switch_default_instance_)
  {
    v4 = *((_QWORD *)this + 3);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = *((_QWORD *)this + 4);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = *((_QWORD *)this + 5);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = *((_QWORD *)this + 6);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = *((_QWORD *)this + 7);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::Control_Switch *SnippetUI::Control_Switch::New(SnippetUI::Control_Switch *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Control_Switch>(0);
}

SnippetUI::Control_Switch *SnippetUI::Control_Switch::New(SnippetUI::Control_Switch *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Control_Switch>(a2);
}

void SnippetUI::Control_Switch::Clear(SnippetUI::Control_Switch *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  google::protobuf::internal::InternalMetadataWithArena *v8;
  char v9;

  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 3);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 3) = 0;
  v4 = *((_QWORD *)this + 4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 4) = 0;
  v5 = *((_QWORD *)this + 5);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *((_QWORD *)this + 5) = 0;
  v6 = *((_QWORD *)this + 6);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *((_QWORD *)this + 6) = 0;
  v7 = *((_QWORD *)this + 7);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v9 = *((_BYTE *)this + 8);
  v8 = (SnippetUI::Control_Switch *)((char *)this + 8);
  *((_QWORD *)v8 + 6) = 0;
  if ((v9 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v8);
}

uint64_t SnippetUI::Control_Switch::IsInitialized(SnippetUI::Control_Switch *this)
{
  return 1;
}

char *SnippetUI::Control_Switch::ByteSizeLong(SnippetUI::Control_Switch *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const google::protobuf::UnknownFieldSet *v5;
  SnippetUI::Switch *v6;
  char *v7;
  SnippetUI::TextProperty *v8;
  char *v9;
  SnippetUI::TextProperty *v10;
  char *v11;
  SnippetUI::VisualProperty *v12;
  char *v13;
  SnippetUI::ActionProperty *v14;
  char *v15;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  if (this != (SnippetUI::Control_Switch *)&SnippetUI::_Control_Switch_default_instance_)
  {
    v6 = (SnippetUI::Switch *)*((_QWORD *)this + 3);
    if (v6)
    {
      v7 = SnippetUI::Switch::ByteSizeLong(v6);
      v5 = (const google::protobuf::UnknownFieldSet *)&v7[(_QWORD)v5
                                                        + 1
                                                        + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v8 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
    if (v8)
    {
      v9 = SnippetUI::TextProperty::ByteSizeLong(v8);
      v5 = (const google::protobuf::UnknownFieldSet *)&v9[(_QWORD)v5
                                                        + 1
                                                        + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v10 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
    if (v10)
    {
      v11 = SnippetUI::TextProperty::ByteSizeLong(v10);
      v5 = (const google::protobuf::UnknownFieldSet *)&v11[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v12 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 6);
    if (v12)
    {
      v13 = SnippetUI::VisualProperty::ByteSizeLong(v12);
      v5 = (const google::protobuf::UnknownFieldSet *)&v13[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v14 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 7);
    if (v14)
    {
      v15 = SnippetUI::ActionProperty::ByteSizeLong(v14);
      v5 = (const google::protobuf::UnknownFieldSet *)&v15[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::Control_Switch *)((char *)this + 8), v5, (_DWORD *)this + 16);
  *((_DWORD *)this + 16) = (_DWORD)v5;
  return (char *)v5;
}

uint64_t SnippetUI::Control_Switch::GetCachedSize(SnippetUI::Control_Switch *this)
{
  return *((unsigned int *)this + 16);
}

google::protobuf::internal *SnippetUI::Control_Switch::_InternalParse(SnippetUI::Control_Switch *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  uint64_t *v6;
  google::protobuf::internal::ParseContext *v7;
  google::protobuf::internal *TagFallback;
  char *v9;
  SnippetUI::Switch *v10;
  char *v11;
  SnippetUI::TextProperty *v12;
  SnippetUI::VisualProperty *v13;
  SnippetUI::ActionProperty *v14;
  std::string *v15;
  BOOL v16;
  google::protobuf::internal *v18;

  v18 = a2;
  v5 = (std::string **)((char *)this + 16);
  v6 = (uint64_t *)((char *)this + 8);
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v18, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v18;
    TagFallback = (google::protobuf::internal *)((char *)v18 + 1);
    v9 = (char *)*(unsigned __int8 *)v18;
    if ((*(char *)v18 & 0x80000000) == 0)
      goto LABEL_6;
    v9 = (char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v18 + 2);
LABEL_6:
      v18 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v18, v9);
    v18 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    switch(v9 >> 3)
    {
      case 1u:
        if (v9 != 10)
          goto LABEL_32;
        v10 = (SnippetUI::Switch *)*((_QWORD *)this + 3);
        if (!v10)
        {
          v10 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Switch>(0);
          *((_QWORD *)this + 3) = v10;
          TagFallback = v18;
        }
        v11 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::Switch>(a3, v10, TagFallback);
        goto LABEL_37;
      case 2u:
        if (v9 != 18)
          goto LABEL_32;
        v12 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
        if (v12)
          goto LABEL_19;
        v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 4) = v12;
        goto LABEL_18;
      case 3u:
        if (v9 != 26)
          goto LABEL_32;
        v12 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
        if (v12)
          goto LABEL_19;
        v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 5) = v12;
LABEL_18:
        TagFallback = v18;
LABEL_19:
        v11 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v12, TagFallback);
        goto LABEL_37;
      case 4u:
        if (v9 != 34)
          goto LABEL_32;
        v13 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 6);
        if (!v13)
        {
          v13 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
          *((_QWORD *)this + 6) = v13;
          TagFallback = v18;
        }
        v11 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::VisualProperty>(a3, v13, TagFallback);
        goto LABEL_37;
      case 5u:
        if (v9 != 42)
          goto LABEL_32;
        v14 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 7);
        if (!v14)
        {
          v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((_QWORD *)this + 7) = v14;
          TagFallback = v18;
        }
        v11 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v14, TagFallback);
        goto LABEL_37;
      case 6u:
        if (v9 != 50)
          goto LABEL_32;
        v15 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v15 = *v5;
          TagFallback = v18;
        }
        v11 = google::protobuf::internal::InlineGreedyStringParserUTF8(v15, (std::string::value_type *)TagFallback, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.Control_Switch.component_name");
        goto LABEL_37;
      default:
LABEL_32:
        if ((_DWORD)v9)
          v16 = (v9 & 7) == 4;
        else
          v16 = 1;
        if (v16)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v9 - 1;
          return TagFallback;
        }
        v11 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v9, v6, TagFallback, a3, v7);
LABEL_37:
        v18 = (google::protobuf::internal *)v11;
        if (v11)
          continue;
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::Control_Switch::InternalSerializeWithCachedSizesToArray(SnippetUI::Control_Switch *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  SnippetUI::Switch *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  char *v11;
  _BYTE *v12;
  _BYTE *v13;
  unsigned int v14;
  unsigned int v15;
  SnippetUI::TextProperty *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  google::protobuf::UnknownFieldSet *v20;
  _BYTE *v21;
  _BYTE *v22;
  unsigned int v23;
  unsigned int v24;
  SnippetUI::TextProperty *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  google::protobuf::UnknownFieldSet *v29;
  _BYTE *v30;
  _BYTE *v31;
  unsigned int v32;
  unsigned int v33;
  SnippetUI::VisualProperty *v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  google::protobuf::UnknownFieldSet *v38;
  _BYTE *v39;
  _BYTE *v40;
  unsigned int v41;
  unsigned int v42;
  SnippetUI::ActionProperty *v43;
  unsigned int v44;
  google::protobuf::UnknownFieldSet *v45;
  unsigned int v46;
  _BYTE *v47;
  _BYTE *v48;
  unsigned int v49;
  unsigned int v50;
  google::protobuf::internal *v51;
  const char *v52;
  uint64_t v53;

  v5 = (char *)a2;
  if (this == (SnippetUI::Control_Switch *)&SnippetUI::_Control_Switch_default_instance_)
    goto LABEL_61;
  v7 = (SnippetUI::Switch *)*((_QWORD *)this + 3);
  if (v7)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v7 = (SnippetUI::Switch *)*((_QWORD *)this + 3);
    }
    *v5 = 10;
    v8 = *((_DWORD *)v7 + 13);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v12 = v5 + 2;
        do
        {
          v13 = v12;
          *v12++ = v10 | 0x80;
          v14 = v10 >> 7;
          v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        v11 = v13 + 2;
        *v12 = v14;
        goto LABEL_13;
      }
      v5[2] = v10;
      v9 = 3;
    }
    else
    {
      v5[1] = v8;
      v9 = 2;
    }
    v11 = &v5[v9];
LABEL_13:
    v5 = (char *)SnippetUI::Switch::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
  if (!v16)
    goto LABEL_26;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
  }
  *v5 = 18;
  v17 = *((_DWORD *)v16 + 15);
  if (v17 > 0x7F)
  {
    v5[1] = v17 | 0x80;
    v19 = v17 >> 7;
    if (v17 >> 14)
    {
      v21 = v5 + 2;
      do
      {
        v22 = v21;
        *v21++ = v19 | 0x80;
        v23 = v19 >> 7;
        v24 = v19 >> 14;
        v19 >>= 7;
      }
      while (v24);
      v20 = (google::protobuf::UnknownFieldSet *)(v22 + 2);
      *v21 = v23;
      goto LABEL_25;
    }
    v5[2] = v19;
    v18 = 3;
  }
  else
  {
    v5[1] = v17;
    v18 = 2;
  }
  v20 = (google::protobuf::UnknownFieldSet *)&v5[v18];
LABEL_25:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v16, v20, a3, a4);
LABEL_26:
  v25 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
  if (!v25)
    goto LABEL_38;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v25 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
  }
  *v5 = 26;
  v26 = *((_DWORD *)v25 + 15);
  if (v26 > 0x7F)
  {
    v5[1] = v26 | 0x80;
    v28 = v26 >> 7;
    if (v26 >> 14)
    {
      v30 = v5 + 2;
      do
      {
        v31 = v30;
        *v30++ = v28 | 0x80;
        v32 = v28 >> 7;
        v33 = v28 >> 14;
        v28 >>= 7;
      }
      while (v33);
      v29 = (google::protobuf::UnknownFieldSet *)(v31 + 2);
      *v30 = v32;
      goto LABEL_37;
    }
    v5[2] = v28;
    v27 = 3;
  }
  else
  {
    v5[1] = v26;
    v27 = 2;
  }
  v29 = (google::protobuf::UnknownFieldSet *)&v5[v27];
LABEL_37:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v25, v29, a3, a4);
LABEL_38:
  v34 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 6);
  if (!v34)
    goto LABEL_50;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v34 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 6);
  }
  *v5 = 34;
  v35 = *((_DWORD *)v34 + 15);
  if (v35 > 0x7F)
  {
    v5[1] = v35 | 0x80;
    v37 = v35 >> 7;
    if (v35 >> 14)
    {
      v39 = v5 + 2;
      do
      {
        v40 = v39;
        *v39++ = v37 | 0x80;
        v41 = v37 >> 7;
        v42 = v37 >> 14;
        v37 >>= 7;
      }
      while (v42);
      v38 = (google::protobuf::UnknownFieldSet *)(v40 + 2);
      *v39 = v41;
      goto LABEL_49;
    }
    v5[2] = v37;
    v36 = 3;
  }
  else
  {
    v5[1] = v35;
    v36 = 2;
  }
  v38 = (google::protobuf::UnknownFieldSet *)&v5[v36];
LABEL_49:
  v5 = (char *)SnippetUI::VisualProperty::InternalSerializeWithCachedSizesToArray(v34, v38, a3, a4);
LABEL_50:
  v43 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 7);
  if (v43)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v43 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 7);
    }
    *v5 = 42;
    v44 = *((_DWORD *)v43 + 12);
    if (v44 > 0x7F)
    {
      v5[1] = v44 | 0x80;
      v46 = v44 >> 7;
      if (v44 >> 14)
      {
        v47 = v5 + 2;
        do
        {
          v48 = v47;
          *v47++ = v46 | 0x80;
          v49 = v46 >> 7;
          v50 = v46 >> 14;
          v46 >>= 7;
        }
        while (v50);
        v45 = (google::protobuf::UnknownFieldSet *)(v48 + 2);
        *v47 = v49;
      }
      else
      {
        v5[2] = v46;
        v45 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v44;
      v45 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v43, v45, a3, a4);
  }
LABEL_61:
  v51 = (google::protobuf::internal *)*((_QWORD *)this + 2);
  if (*((char *)v51 + 23) < 0)
  {
    v52 = (const char *)*((_QWORD *)v51 + 1);
    if (!v52)
      goto LABEL_67;
    v51 = *(google::protobuf::internal **)v51;
    goto LABEL_66;
  }
  v52 = (const char *)*((unsigned __int8 *)v51 + 23);
  if (*((_BYTE *)v51 + 23))
  {
LABEL_66:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v51, v52, 1, (google::protobuf::internal *)"SnippetUI.Control_Switch.component_name");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 6, *((_QWORD *)this + 2), v5);
  }
LABEL_67:
  v53 = *((_QWORD *)this + 1);
  if ((v53 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v53 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)v5;
}

void SnippetUI::Control_Switch::CopyFrom(SnippetUI::Control_Switch *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::Control_Switch::Clear(this);
    SnippetUI::Control_Switch::MergeFrom(this, a2);
  }
}

void SnippetUI::Control_Switch::MergeFrom(SnippetUI::Control_Switch *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::Control_Switch *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Control.pb.cc", 552);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::Control_Switch::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BF955B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Control_Switch::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 64) = a2;
  return this;
}

uint64_t SnippetUI::Control_Switch::GetMetadata(SnippetUI::Control_Switch *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_Control_2eproto);
  return file_level_metadata_Control_2eproto;
}

void *SnippetUI::Control_Switch::default_instance(SnippetUI::Control_Switch *this)
{
  if (atomic_load(scc_info_Control_Switch_Control_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Control_Switch_Control_2eproto);
  return &SnippetUI::_Control_Switch_default_instance_;
}

void SnippetUI::Control_Switch::MergeFrom(SnippetUI::Control_Switch *this, const SnippetUI::Control_Switch *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  const SnippetUI::Switch *v8;
  SnippetUI::Switch *v9;
  const SnippetUI::Switch *v10;
  int **v11;
  int **v12;
  int **v13;
  int **v14;
  int **v15;
  int **v16;
  int **v17;
  int **v18;
  int **v19;
  int **v20;
  int **v21;
  int **v22;
  char v23;
  std::string v24[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v24, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Control.pb.cc", 567);
    v4 = google::protobuf::internal::LogMessage::operator<<(v24, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v23, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v24[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Control_Switch *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_QWORD *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v6);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  if (a2 != (const SnippetUI::Control_Switch *)&SnippetUI::_Control_Switch_default_instance_)
  {
    v8 = (const SnippetUI::Switch *)*((_QWORD *)a2 + 3);
    if (v8)
    {
      v9 = (SnippetUI::Switch *)*((_QWORD *)this + 3);
      if (!v9)
      {
        v9 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Switch>(0);
        *((_QWORD *)this + 3) = v9;
        v8 = (const SnippetUI::Switch *)*((_QWORD *)a2 + 3);
      }
      if (v8)
        v10 = v8;
      else
        v10 = (const SnippetUI::Switch *)&SnippetUI::_Switch_default_instance_;
      SnippetUI::Switch::MergeFrom(v9, v10);
    }
    v11 = (int **)*((_QWORD *)a2 + 4);
    if (v11)
    {
      v12 = (int **)*((_QWORD *)this + 4);
      if (!v12)
      {
        v12 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 4) = v12;
        v11 = (int **)*((_QWORD *)a2 + 4);
      }
      if (v11)
        v13 = v11;
      else
        v13 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v12, v13);
    }
    v14 = (int **)*((_QWORD *)a2 + 5);
    if (v14)
    {
      v15 = (int **)*((_QWORD *)this + 5);
      if (!v15)
      {
        v15 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 5) = v15;
        v14 = (int **)*((_QWORD *)a2 + 5);
      }
      if (v14)
        v16 = v14;
      else
        v16 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v15, v16);
    }
    v17 = (int **)*((_QWORD *)a2 + 6);
    if (v17)
    {
      v18 = (int **)*((_QWORD *)this + 6);
      if (!v18)
      {
        v18 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((_QWORD *)this + 6) = v18;
        v17 = (int **)*((_QWORD *)a2 + 6);
      }
      if (v17)
        v19 = v17;
      else
        v19 = (int **)&SnippetUI::_VisualProperty_default_instance_;
      SnippetUI::VisualProperty::MergeFrom(v18, v19);
    }
    v20 = (int **)*((_QWORD *)a2 + 7);
    if (v20)
    {
      v21 = (int **)*((_QWORD *)this + 7);
      if (!v21)
      {
        v21 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((_QWORD *)this + 7) = v21;
        v20 = (int **)*((_QWORD *)a2 + 7);
      }
      if (v20)
        v22 = v20;
      else
        v22 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      SnippetUI::ActionProperty::MergeFrom(v21, v22);
    }
  }
}

void sub_1BF955DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::Control_Switch *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Control_Switch>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::Control_Switch *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::Control_Switch *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x48uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Control_Switch>);
    SnippetUI::Control_Switch::Control_Switch(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::Control_Switch *)operator new();
    SnippetUI::Control_Switch::Control_Switch(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BF955E64(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C4025EBE0BELL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Control_Switch>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void InitDefaultsscc_info_Control_Slider_Control_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Control.pb.cc", a4);
  SnippetUI::Control_Slider::Control_Slider((SnippetUI::Control_Slider *)&SnippetUI::_Control_Slider_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Control_Slider_default_instance_, v4);
  qword_1ED1D3ED8 = (uint64_t)&SnippetUI::_Slider_default_instance_;
  unk_1ED1D3EE0 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D3EE8 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
}

SnippetUI::Control_Slider *SnippetUI::Control_Slider::Control_Slider(SnippetUI::Control_Slider *this)
{
  *(_QWORD *)this = &off_1E792F058;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 12) = 0;
  if (atomic_load(scc_info_Control_Slider_Control_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Control_Slider_Control_2eproto);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  return this;
}

void sub_1BF956058(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Control_Slider::~Control_Slider(SnippetUI::Control_Slider *this)
{
  SnippetUI::Control_Slider::~Control_Slider(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E792F058;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::Control_Slider *)&SnippetUI::_Control_Slider_default_instance_)
  {
    v4 = *((_QWORD *)this + 3);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = *((_QWORD *)this + 4);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = *((_QWORD *)this + 5);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::Control_Slider *SnippetUI::Control_Slider::New(SnippetUI::Control_Slider *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Control_Slider>(0);
}

SnippetUI::Control_Slider *SnippetUI::Control_Slider::New(SnippetUI::Control_Slider *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Control_Slider>(a2);
}

void SnippetUI::Control_Slider::Clear(SnippetUI::Control_Slider *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  google::protobuf::internal::InternalMetadataWithArena *v6;
  char v7;

  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 3);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 3) = 0;
  v4 = *((_QWORD *)this + 4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 4) = 0;
  v5 = *((_QWORD *)this + 5);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v7 = *((_BYTE *)this + 8);
  v6 = (SnippetUI::Control_Slider *)((char *)this + 8);
  *((_QWORD *)v6 + 4) = 0;
  if ((v7 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v6);
}

uint64_t SnippetUI::Control_Slider::IsInitialized(SnippetUI::Control_Slider *this)
{
  return 1;
}

char *SnippetUI::Control_Slider::ByteSizeLong(SnippetUI::Control_Slider *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const google::protobuf::UnknownFieldSet *v5;
  SnippetUI::Slider *v6;
  char *v7;
  SnippetUI::TextProperty *v8;
  char *v9;
  SnippetUI::ActionProperty *v10;
  char *v11;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  if (this != (SnippetUI::Control_Slider *)&SnippetUI::_Control_Slider_default_instance_)
  {
    v6 = (SnippetUI::Slider *)*((_QWORD *)this + 3);
    if (v6)
    {
      v7 = SnippetUI::Slider::ByteSizeLong(v6);
      v5 = (const google::protobuf::UnknownFieldSet *)&v7[(_QWORD)v5
                                                        + 1
                                                        + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v8 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
    if (v8)
    {
      v9 = SnippetUI::TextProperty::ByteSizeLong(v8);
      v5 = (const google::protobuf::UnknownFieldSet *)&v9[(_QWORD)v5
                                                        + 1
                                                        + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v10 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 5);
    if (v10)
    {
      v11 = SnippetUI::ActionProperty::ByteSizeLong(v10);
      v5 = (const google::protobuf::UnknownFieldSet *)&v11[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::Control_Slider *)((char *)this + 8), v5, (_DWORD *)this + 12);
  *((_DWORD *)this + 12) = (_DWORD)v5;
  return (char *)v5;
}

uint64_t SnippetUI::Control_Slider::GetCachedSize(SnippetUI::Control_Slider *this)
{
  return *((unsigned int *)this + 12);
}

google::protobuf::internal *SnippetUI::Control_Slider::_InternalParse(SnippetUI::Control_Slider *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  uint64_t *v6;
  google::protobuf::internal::ParseContext *v7;
  google::protobuf::internal *TagFallback;
  char *v9;
  SnippetUI::Slider *v10;
  unsigned int v11;
  char *v12;
  SnippetUI::TextProperty *v13;
  char *v14;
  SnippetUI::ActionProperty *v15;
  std::string *v16;
  BOOL v17;
  char *SizeFallback;
  unsigned int v19;
  int v20;
  int v21;
  BOOL v22;
  int v23;
  google::protobuf::internal *v24;
  int v25;
  google::protobuf::internal *v27;

  v27 = a2;
  v5 = (std::string **)((char *)this + 16);
  v6 = (uint64_t *)((char *)this + 8);
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v27, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v27;
    TagFallback = (google::protobuf::internal *)((char *)v27 + 1);
    v9 = (char *)*(unsigned __int8 *)v27;
    if ((*(char *)v27 & 0x80000000) == 0)
      goto LABEL_6;
    v9 = (char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v27 + 2);
LABEL_6:
      v27 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v27, v9);
    v27 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    switch(v9 >> 3)
    {
      case 1u:
        if (v9 != 10)
          goto LABEL_25;
        v10 = (SnippetUI::Slider *)*((_QWORD *)this + 3);
        if (!v10)
        {
          v10 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Slider>(0);
          *((_QWORD *)this + 3) = v10;
          TagFallback = v27;
        }
        v11 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          SizeFallback = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!SizeFallback)
            goto LABEL_41;
          v12 = SizeFallback;
          v11 = v19;
        }
        else
        {
          v12 = (char *)TagFallback + 1;
        }
        v20 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v12, v11);
        v21 = *((_DWORD *)a3 + 22);
        v22 = __OFSUB__(v21--, 1);
        *((_DWORD *)a3 + 22) = v21;
        if (v21 < 0 != v22)
          goto LABEL_41;
        v23 = v20;
        v24 = SnippetUI::Slider::_InternalParse(v10, (google::protobuf::internal *)v12, a3);
        if (!v24)
          goto LABEL_41;
        ++*((_DWORD *)a3 + 22);
        if (*((_DWORD *)a3 + 20))
          goto LABEL_41;
        v25 = *((_DWORD *)a3 + 7) + v23;
        *((_DWORD *)a3 + 7) = v25;
        *(_QWORD *)a3 = *((_QWORD *)a3 + 1) + (v25 & (v25 >> 31));
        v27 = v24;
        continue;
      case 2u:
        if (v9 != 18)
          goto LABEL_25;
        v13 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
        if (!v13)
        {
          v13 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
          *((_QWORD *)this + 4) = v13;
          TagFallback = v27;
        }
        v14 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v13, TagFallback);
        goto LABEL_30;
      case 3u:
        if (v9 != 26)
          goto LABEL_25;
        v15 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 5);
        if (!v15)
        {
          v15 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((_QWORD *)this + 5) = v15;
          TagFallback = v27;
        }
        v14 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v15, TagFallback);
        goto LABEL_30;
      case 4u:
        if (v9 != 34)
          goto LABEL_25;
        v16 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v16 = *v5;
          TagFallback = v27;
        }
        v14 = google::protobuf::internal::InlineGreedyStringParserUTF8(v16, (std::string::value_type *)TagFallback, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.Control_Slider.component_name");
        goto LABEL_30;
      default:
LABEL_25:
        if ((_DWORD)v9)
          v17 = (v9 & 7) == 4;
        else
          v17 = 1;
        if (v17)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v9 - 1;
          return TagFallback;
        }
        v14 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v9, v6, TagFallback, a3, v7);
LABEL_30:
        v27 = (google::protobuf::internal *)v14;
        if (v14)
          continue;
LABEL_41:
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::Control_Slider::InternalSerializeWithCachedSizesToArray(SnippetUI::Control_Slider *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  SnippetUI::Slider *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned __int8 *v11;
  _BYTE *v12;
  _BYTE *v13;
  unsigned int v14;
  unsigned int v15;
  SnippetUI::TextProperty *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  google::protobuf::UnknownFieldSet *v20;
  _BYTE *v21;
  _BYTE *v22;
  unsigned int v23;
  unsigned int v24;
  SnippetUI::ActionProperty *v25;
  unsigned int v26;
  google::protobuf::UnknownFieldSet *v27;
  unsigned int v28;
  _BYTE *v29;
  _BYTE *v30;
  unsigned int v31;
  unsigned int v32;
  google::protobuf::internal *v33;
  const char *v34;
  uint64_t v35;

  v5 = (char *)a2;
  if (this == (SnippetUI::Control_Slider *)&SnippetUI::_Control_Slider_default_instance_)
    goto LABEL_37;
  v7 = (SnippetUI::Slider *)*((_QWORD *)this + 3);
  if (v7)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v7 = (SnippetUI::Slider *)*((_QWORD *)this + 3);
    }
    *v5 = 10;
    v8 = *((_DWORD *)v7 + 20);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v12 = v5 + 2;
        do
        {
          v13 = v12;
          *v12++ = v10 | 0x80;
          v14 = v10 >> 7;
          v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        v11 = v13 + 2;
        *v12 = v14;
        goto LABEL_13;
      }
      v5[2] = v10;
      v9 = 3;
    }
    else
    {
      v5[1] = v8;
      v9 = 2;
    }
    v11 = (unsigned __int8 *)&v5[v9];
LABEL_13:
    v5 = (char *)SnippetUI::Slider::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
  if (!v16)
    goto LABEL_26;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
  }
  *v5 = 18;
  v17 = *((_DWORD *)v16 + 15);
  if (v17 > 0x7F)
  {
    v5[1] = v17 | 0x80;
    v19 = v17 >> 7;
    if (v17 >> 14)
    {
      v21 = v5 + 2;
      do
      {
        v22 = v21;
        *v21++ = v19 | 0x80;
        v23 = v19 >> 7;
        v24 = v19 >> 14;
        v19 >>= 7;
      }
      while (v24);
      v20 = (google::protobuf::UnknownFieldSet *)(v22 + 2);
      *v21 = v23;
      goto LABEL_25;
    }
    v5[2] = v19;
    v18 = 3;
  }
  else
  {
    v5[1] = v17;
    v18 = 2;
  }
  v20 = (google::protobuf::UnknownFieldSet *)&v5[v18];
LABEL_25:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v16, v20, a3, a4);
LABEL_26:
  v25 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 5);
  if (v25)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v25 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 5);
    }
    *v5 = 26;
    v26 = *((_DWORD *)v25 + 12);
    if (v26 > 0x7F)
    {
      v5[1] = v26 | 0x80;
      v28 = v26 >> 7;
      if (v26 >> 14)
      {
        v29 = v5 + 2;
        do
        {
          v30 = v29;
          *v29++ = v28 | 0x80;
          v31 = v28 >> 7;
          v32 = v28 >> 14;
          v28 >>= 7;
        }
        while (v32);
        v27 = (google::protobuf::UnknownFieldSet *)(v30 + 2);
        *v29 = v31;
      }
      else
      {
        v5[2] = v28;
        v27 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v26;
      v27 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v25, v27, a3, a4);
  }
LABEL_37:
  v33 = (google::protobuf::internal *)*((_QWORD *)this + 2);
  if (*((char *)v33 + 23) < 0)
  {
    v34 = (const char *)*((_QWORD *)v33 + 1);
    if (!v34)
      goto LABEL_43;
    v33 = *(google::protobuf::internal **)v33;
    goto LABEL_42;
  }
  v34 = (const char *)*((unsigned __int8 *)v33 + 23);
  if (*((_BYTE *)v33 + 23))
  {
LABEL_42:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v33, v34, 1, (google::protobuf::internal *)"SnippetUI.Control_Slider.component_name");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 4, *((_QWORD *)this + 2), v5);
  }
LABEL_43:
  v35 = *((_QWORD *)this + 1);
  if ((v35 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v35 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)v5;
}

void SnippetUI::Control_Slider::CopyFrom(SnippetUI::Control_Slider *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::Control_Slider::Clear(this);
    SnippetUI::Control_Slider::MergeFrom(this, a2);
  }
}

void SnippetUI::Control_Slider::MergeFrom(SnippetUI::Control_Slider *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::Control_Slider *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Control.pb.cc", 907);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::Control_Slider::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BF9568B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Control_Slider::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 48) = a2;
  return this;
}

uint64_t SnippetUI::Control_Slider::GetMetadata(SnippetUI::Control_Slider *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_Control_2eproto);
  return qword_1EF581AD8;
}

void *SnippetUI::Control_Slider::default_instance(SnippetUI::Control_Slider *this)
{
  if (atomic_load(scc_info_Control_Slider_Control_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Control_Slider_Control_2eproto);
  return &SnippetUI::_Control_Slider_default_instance_;
}

void SnippetUI::Control_Slider::MergeFrom(SnippetUI::Control_Slider *this, const SnippetUI::Control_Slider *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  const SnippetUI::Slider *v8;
  SnippetUI::Slider *v9;
  const SnippetUI::Slider *v10;
  int **v11;
  int **v12;
  int **v13;
  int **v14;
  int **v15;
  int **v16;
  char v17;
  std::string v18[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Control.pb.cc", 922);
    v4 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Control_Slider *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_QWORD *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v6);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  if (a2 != (const SnippetUI::Control_Slider *)&SnippetUI::_Control_Slider_default_instance_)
  {
    v8 = (const SnippetUI::Slider *)*((_QWORD *)a2 + 3);
    if (v8)
    {
      v9 = (SnippetUI::Slider *)*((_QWORD *)this + 3);
      if (!v9)
      {
        v9 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Slider>(0);
        *((_QWORD *)this + 3) = v9;
        v8 = (const SnippetUI::Slider *)*((_QWORD *)a2 + 3);
      }
      if (v8)
        v10 = v8;
      else
        v10 = (const SnippetUI::Slider *)&SnippetUI::_Slider_default_instance_;
      SnippetUI::Slider::MergeFrom(v9, v10);
    }
    v11 = (int **)*((_QWORD *)a2 + 4);
    if (v11)
    {
      v12 = (int **)*((_QWORD *)this + 4);
      if (!v12)
      {
        v12 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 4) = v12;
        v11 = (int **)*((_QWORD *)a2 + 4);
      }
      if (v11)
        v13 = v11;
      else
        v13 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v12, v13);
    }
    v14 = (int **)*((_QWORD *)a2 + 5);
    if (v14)
    {
      v15 = (int **)*((_QWORD *)this + 5);
      if (!v15)
      {
        v15 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((_QWORD *)this + 5) = v15;
        v14 = (int **)*((_QWORD *)a2 + 5);
      }
      if (v14)
        v16 = v14;
      else
        v16 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      SnippetUI::ActionProperty::MergeFrom(v15, v16);
    }
  }
}

void sub_1BF956AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::Control_Slider *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Control_Slider>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::Control_Slider *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::Control_Slider *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x38uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Control_Slider>);
    SnippetUI::Control_Slider::Control_Slider(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::Control_Slider *)operator new();
    SnippetUI::Control_Slider::Control_Slider(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BF956B40(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C40668C0A6DLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Control_Slider>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void *SnippetUI::Control_PlayerButton::default_instance(SnippetUI::Control_PlayerButton *this)
{
  if (atomic_load(scc_info_Control_PlayerButton_Control_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Control_PlayerButton_Control_2eproto);
  return &SnippetUI::_Control_PlayerButton_default_instance_;
}

void SnippetUI::Control_PlayerButton::MergeFrom(SnippetUI::Control_PlayerButton *this, const SnippetUI::Control_PlayerButton *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  int **v10;
  int **v11;
  int **v12;
  int **v13;
  int **v14;
  int **v15;
  char v16;
  std::string v17[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v17, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Control.pb.cc", 1287);
    v4 = google::protobuf::internal::LogMessage::operator<<(v17, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v16, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v17[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Control_PlayerButton *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((int **)this + 2, (uint64_t)a2 + 16);
  v6 = *((_QWORD *)a2 + 5);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 5);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 5, v6);
    else
      std::string::operator=(*((std::string **)this + 5), (const std::string *)v6);
  }
LABEL_13:
  v8 = *((_QWORD *)a2 + 6);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(_QWORD *)(v8 + 8))
      goto LABEL_21;
  }
  else if (!*(_BYTE *)(v8 + 23))
  {
    goto LABEL_21;
  }
  v9 = (uint64_t *)*((_QWORD *)this + 6);
  if (v9 != (uint64_t *)v8)
  {
    if (v9 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, v8);
    else
      std::string::operator=(*((std::string **)this + 6), (const std::string *)v8);
  }
LABEL_21:
  if (a2 != (const SnippetUI::Control_PlayerButton *)&SnippetUI::_Control_PlayerButton_default_instance_)
  {
    v10 = (int **)*((_QWORD *)a2 + 7);
    if (v10)
    {
      v11 = (int **)*((_QWORD *)this + 7);
      if (!v11)
      {
        v11 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 7) = v11;
        v10 = (int **)*((_QWORD *)a2 + 7);
      }
      if (v10)
        v12 = v10;
      else
        v12 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v11, v12);
    }
    v13 = (int **)*((_QWORD *)a2 + 8);
    if (v13)
    {
      v14 = (int **)*((_QWORD *)this + 8);
      if (!v14)
      {
        v14 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 8) = v14;
        v13 = (int **)*((_QWORD *)a2 + 8);
      }
      if (v13)
        v15 = v13;
      else
        v15 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v14, v15);
    }
  }
}

void sub_1BF956E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::Control_PlayerButton *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Control_PlayerButton>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::Control_PlayerButton *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::Control_PlayerButton *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x50uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Control_PlayerButton>);
    SnippetUI::Control_PlayerButton::Control_PlayerButton(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::Control_PlayerButton *)operator new();
    SnippetUI::Control_PlayerButton::Control_PlayerButton(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BF956EA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C40A49539A5);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Control_PlayerButton>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void SnippetUI::Control_Switch::InitAsDefaultInstance(SnippetUI::Control_Switch *this)
{
  qword_1ED1D3F10 = (uint64_t)&SnippetUI::_Switch_default_instance_;
  unk_1ED1D3F18 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D3F20 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D3F28 = &SnippetUI::_VisualProperty_default_instance_;
  qword_1ED1D3F30 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
}

uint64_t SnippetUI::Control_Switch::_Internal::switch_(SnippetUI::Control_Switch::_Internal *this, const SnippetUI::Control_Switch *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Control_Switch::_Internal::text_1(SnippetUI::Control_Switch::_Internal *this, const SnippetUI::Control_Switch *a2)
{
  return *((_QWORD *)this + 4);
}

uint64_t SnippetUI::Control_Switch::_Internal::text_2(SnippetUI::Control_Switch::_Internal *this, const SnippetUI::Control_Switch *a2)
{
  return *((_QWORD *)this + 5);
}

uint64_t SnippetUI::Control_Switch::_Internal::thumbnail(SnippetUI::Control_Switch::_Internal *this, const SnippetUI::Control_Switch *a2)
{
  return *((_QWORD *)this + 6);
}

uint64_t SnippetUI::Control_Switch::_Internal::action(SnippetUI::Control_Switch::_Internal *this, const SnippetUI::Control_Switch *a2)
{
  return *((_QWORD *)this + 7);
}

uint64_t SnippetUI::Control_Switch::clear_switch_(SnippetUI::Control_Switch *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 3);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 3) = 0;
  return result;
}

uint64_t SnippetUI::Control_Switch::clear_text_1(SnippetUI::Control_Switch *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 4) = 0;
  return result;
}

uint64_t SnippetUI::Control_Switch::clear_text_2(SnippetUI::Control_Switch *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 5);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 5) = 0;
  return result;
}

uint64_t SnippetUI::Control_Switch::clear_thumbnail(SnippetUI::Control_Switch *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 6);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 6) = 0;
  return result;
}

uint64_t SnippetUI::Control_Switch::clear_action(SnippetUI::Control_Switch *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 7);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 7) = 0;
  return result;
}

SnippetUI::Control_Switch *SnippetUI::Control_Switch::Control_Switch(SnippetUI::Control_Switch *this, const SnippetUI::Control_Switch *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  SnippetUI::Switch *v8;
  SnippetUI::ActionProperty *v9;
  SnippetUI::TextProperty *v10;
  SnippetUI::TextProperty *v11;
  SnippetUI::VisualProperty *v12;

  *(_QWORD *)this = &off_1E792EF98;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 16) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Control_Switch *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  if (a2 == (const SnippetUI::Control_Switch *)&SnippetUI::_Control_Switch_default_instance_)
  {
    v9 = 0;
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 24) = 0u;
  }
  else
  {
    if (*((_QWORD *)a2 + 3))
    {
      v8 = (SnippetUI::Switch *)operator new();
      SnippetUI::Switch::Switch(v8, *((const SnippetUI::Switch **)a2 + 3));
    }
    else
    {
      v8 = 0;
    }
    *((_QWORD *)this + 3) = v8;
    if (*((_QWORD *)a2 + 4))
    {
      v10 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v10, *((const SnippetUI::TextProperty **)a2 + 4));
    }
    else
    {
      v10 = 0;
    }
    *((_QWORD *)this + 4) = v10;
    if (*((_QWORD *)a2 + 5))
    {
      v11 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v11, *((const SnippetUI::TextProperty **)a2 + 5));
    }
    else
    {
      v11 = 0;
    }
    *((_QWORD *)this + 5) = v11;
    if (*((_QWORD *)a2 + 6))
    {
      v12 = (SnippetUI::VisualProperty *)operator new();
      SnippetUI::VisualProperty::VisualProperty(v12, *((const SnippetUI::VisualProperty **)a2 + 6));
    }
    else
    {
      v12 = 0;
    }
    *((_QWORD *)this + 6) = v12;
    if (*((_QWORD *)a2 + 7))
    {
      v9 = (SnippetUI::ActionProperty *)operator new();
      SnippetUI::ActionProperty::ActionProperty(v9, *((const SnippetUI::ActionProperty **)a2 + 7));
    }
    else
    {
      v9 = 0;
    }
  }
  *((_QWORD *)this + 7) = v9;
  return this;
}

void sub_1BF9572F8(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x1C3B8D890](v2, 0x10A1C40B18DE219);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Control_Switch::CopyFrom(SnippetUI::Control_Switch *this, const SnippetUI::Control_Switch *a2)
{
  if (a2 != this)
  {
    SnippetUI::Control_Switch::Clear(this);
    SnippetUI::Control_Switch::MergeFrom(this, a2);
  }
}

void SnippetUI::Control_Switch::InternalSwap(SnippetUI::Control_Switch *this, SnippetUI::Control_Switch *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  google::protobuf::UnknownFieldSet *v18;

  v4 = (SnippetUI::Control_Switch *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v18;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 2);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v13;
  v14 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v14;
  v15 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v15;
  v16 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v16;
  v17 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v17;
}

void SnippetUI::Control_Slider::InitAsDefaultInstance(SnippetUI::Control_Slider *this)
{
  qword_1ED1D3ED8 = (uint64_t)&SnippetUI::_Slider_default_instance_;
  unk_1ED1D3EE0 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D3EE8 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
}

uint64_t SnippetUI::Control_Slider::_Internal::slider(SnippetUI::Control_Slider::_Internal *this, const SnippetUI::Control_Slider *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Control_Slider::_Internal::text_1(SnippetUI::Control_Slider::_Internal *this, const SnippetUI::Control_Slider *a2)
{
  return *((_QWORD *)this + 4);
}

uint64_t SnippetUI::Control_Slider::_Internal::action(SnippetUI::Control_Slider::_Internal *this, const SnippetUI::Control_Slider *a2)
{
  return *((_QWORD *)this + 5);
}

uint64_t SnippetUI::Control_Slider::clear_slider(SnippetUI::Control_Slider *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 3);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 3) = 0;
  return result;
}

uint64_t SnippetUI::Control_Slider::clear_text_1(SnippetUI::Control_Slider *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 4) = 0;
  return result;
}

uint64_t SnippetUI::Control_Slider::clear_action(SnippetUI::Control_Slider *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 5);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 5) = 0;
  return result;
}

SnippetUI::Control_Slider *SnippetUI::Control_Slider::Control_Slider(SnippetUI::Control_Slider *this, const SnippetUI::Control_Slider *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  SnippetUI::Slider *v8;
  SnippetUI::ActionProperty *v9;
  SnippetUI::TextProperty *v10;

  *(_QWORD *)this = &off_1E792F058;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 12) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Control_Slider *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  if (a2 == (const SnippetUI::Control_Slider *)&SnippetUI::_Control_Slider_default_instance_)
  {
    v9 = 0;
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 4) = 0;
  }
  else
  {
    if (*((_QWORD *)a2 + 3))
    {
      v8 = (SnippetUI::Slider *)operator new();
      SnippetUI::Slider::Slider(v8, *((const SnippetUI::Slider **)a2 + 3));
    }
    else
    {
      v8 = 0;
    }
    *((_QWORD *)this + 3) = v8;
    if (*((_QWORD *)a2 + 4))
    {
      v10 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v10, *((const SnippetUI::TextProperty **)a2 + 4));
    }
    else
    {
      v10 = 0;
    }
    *((_QWORD *)this + 4) = v10;
    if (*((_QWORD *)a2 + 5))
    {
      v9 = (SnippetUI::ActionProperty *)operator new();
      SnippetUI::ActionProperty::ActionProperty(v9, *((const SnippetUI::ActionProperty **)a2 + 5));
    }
    else
    {
      v9 = 0;
    }
  }
  *((_QWORD *)this + 5) = v9;
  return this;
}

void sub_1BF957714(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x1C3B8D890](v2, 0x10A1C40B18DE219);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Control_Slider::CopyFrom(SnippetUI::Control_Slider *this, const SnippetUI::Control_Slider *a2)
{
  if (a2 != this)
  {
    SnippetUI::Control_Slider::Clear(this);
    SnippetUI::Control_Slider::MergeFrom(this, a2);
  }
}

void SnippetUI::Control_Slider::InternalSwap(SnippetUI::Control_Slider *this, SnippetUI::Control_Slider *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  google::protobuf::UnknownFieldSet *v16;

  v4 = (SnippetUI::Control_Slider *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v16;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 2);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v13;
  v14 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v14;
  v15 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v15;
}

void SnippetUI::Control_PlayerButton::InitAsDefaultInstance(SnippetUI::Control_PlayerButton *this)
{
  qword_1EF584318 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EF584320 = &SnippetUI::_TextProperty_default_instance_;
}

uint64_t SnippetUI::Control_PlayerButton::_Internal::label_1(SnippetUI::Control_PlayerButton::_Internal *this, const SnippetUI::Control_PlayerButton *a2)
{
  return *((_QWORD *)this + 7);
}

uint64_t SnippetUI::Control_PlayerButton::_Internal::label_2(SnippetUI::Control_PlayerButton::_Internal *this, const SnippetUI::Control_PlayerButton *a2)
{
  return *((_QWORD *)this + 8);
}

uint64_t SnippetUI::Control_PlayerButton::clear_label_1(SnippetUI::Control_PlayerButton *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 7);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 7) = 0;
  return result;
}

uint64_t SnippetUI::Control_PlayerButton::clear_label_2(SnippetUI::Control_PlayerButton *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 8) = 0;
  return result;
}

void SnippetUI::Control_PlayerButton::clear_player(SnippetUI::Control_PlayerButton *this)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16);
}

SnippetUI::Control_PlayerButton *SnippetUI::Control_PlayerButton::Control_PlayerButton(SnippetUI::Control_PlayerButton *this, const SnippetUI::Control_PlayerButton *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  SnippetUI::TextProperty *v11;
  SnippetUI::TextProperty *v12;

  *(_QWORD *)this = &off_1E792F118;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (SnippetUI::Control_PlayerButton *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((int **)this + 2, (uint64_t)a2 + 16);
  *((_DWORD *)this + 18) = 0;
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom(v4, (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  v6 = *((_QWORD *)a2 + 5);
  if (*(char *)(v6 + 23) < 0)
    v7 = *(_QWORD *)(v6 + 8);
  else
    v7 = *(unsigned __int8 *)(v6 + 23);
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string && v7 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 5, v6);
  *((_QWORD *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  v9 = *((_QWORD *)a2 + 6);
  if (*(char *)(v9 + 23) < 0)
    v10 = *(_QWORD *)(v9 + 8);
  else
    v10 = *(unsigned __int8 *)(v9 + 23);
  if ((uint64_t *)v9 != &google::protobuf::internal::fixed_address_empty_string && v10)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, v9);
  if (a2 == (const SnippetUI::Control_PlayerButton *)&SnippetUI::_Control_PlayerButton_default_instance_)
  {
    v12 = 0;
    *((_QWORD *)this + 7) = 0;
  }
  else
  {
    if (*((_QWORD *)a2 + 7))
    {
      v11 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v11, *((const SnippetUI::TextProperty **)a2 + 7));
    }
    else
    {
      v11 = 0;
    }
    *((_QWORD *)this + 7) = v11;
    if (*((_QWORD *)a2 + 8))
    {
      v12 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v12, *((const SnippetUI::TextProperty **)a2 + 8));
    }
    else
    {
      v12 = 0;
    }
  }
  *((_QWORD *)this + 8) = v12;
  return this;
}

void sub_1BF957AD8(_Unwind_Exception *a1)
{
  uint64_t *v1;
  google::protobuf::internal::RepeatedPtrFieldBase *v2;
  uint64_t v3;

  MEMORY[0x1C3B8D890](v3, 0x10A1C40BEC01B52);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Control_PlayerButton::CopyFrom(SnippetUI::Control_PlayerButton *this, const SnippetUI::Control_PlayerButton *a2)
{
  if (a2 != this)
  {
    SnippetUI::Control_PlayerButton::Clear(this);
    SnippetUI::Control_PlayerButton::MergeFrom(this, a2);
  }
}

void SnippetUI::Control_PlayerButton::InternalSwap(SnippetUI::Control_PlayerButton *this, SnippetUI::Control_PlayerButton *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  google::protobuf::UnknownFieldSet *v21;

  v4 = (SnippetUI::Control_PlayerButton *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v21;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((SnippetUI::Control_PlayerButton *)((char *)this + 16), (SnippetUI::Control_PlayerButton *)((char *)a2 + 16));
  v7 = (uint64_t *)*((_QWORD *)this + 5);
  v8 = (uint64_t **)((char *)a2 + 40);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 5, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 5);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 5, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = (uint64_t *)*((_QWORD *)this + 6);
  v14 = (uint64_t **)((char *)a2 + 48);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_19;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 6, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v13 = (uint64_t *)*((_QWORD *)this + 6);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 6, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v13[2];
  v17 = *(_OWORD *)v13;
  v18 = v15[2];
  *(_OWORD *)v13 = *(_OWORD *)v15;
  v13[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_19:
  v19 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v19;
  v20 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v20;
}

void siri::dialogengine::PatternSchemaAliasGroup::~PatternSchemaAliasGroup(void **this)
{
  *this = off_1E792F220;
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)(this + 4));
  *this = off_1E792F2C8;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1E792F220;
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)(this + 4));
  *this = off_1E792F2C8;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1C3B8D890);
}

uint64_t siri::dialogengine::PatternSchemaAliasGroup::IsAlias(siri::dialogengine::PatternSchemaAliasGroup *this)
{
  return 1;
}

void siri::dialogengine::PatternSchemaAliasGroup::AliasOf(siri::dialogengine::PatternSchemaAliasGroup *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2;
  __int128 v3;

  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
    if (*(char *)(v2 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 8), *(_QWORD *)(v2 + 16));
    }
    else
    {
      v3 = *(_OWORD *)(v2 + 8);
      a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v2 + 24);
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "");
  }
}

_QWORD *siri::dialogengine::PatternSchemaAliasGroup::GetDescription@<X0>(siri::dialogengine::PatternSchemaAliasGroup *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 4);
  if (v2)
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  else
    return std::string::basic_string[abi:ne180100]<0>(a2, "");
}

uint64_t siri::dialogengine::PatternSchemaAliasGroup::GetUsage@<X0>(siri::dialogengine::PatternSchemaAliasGroup *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

uint64_t siri::dialogengine::PatternSchemaAliasGroup::GetNestedPatterns@<X0>(siri::dialogengine::PatternSchemaAliasGroup *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

uint64_t siri::dialogengine::PatternSchemaAliasGroup::GetDialogComponents@<X0>(siri::dialogengine::PatternSchemaAliasGroup *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 56))(result);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

uint64_t siri::dialogengine::PatternSchemaAliasGroup::GetDialogComponent@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 64))(result);
  *a2 = 0;
  a2[1] = 0;
  return result;
}

uint64_t siri::dialogengine::PatternSchemaAliasGroup::GetVisualComponents@<X0>(siri::dialogengine::PatternSchemaAliasGroup *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 72))(result);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

uint64_t siri::dialogengine::PatternSchemaAliasGroup::GetVisualComponent@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 80))(result);
  *a2 = 0;
  a2[1] = 0;
  return result;
}

_QWORD *siri::dialogengine::PatternSchemaAliasGroup::GetVisualComponentsCombination@<X0>(siri::dialogengine::PatternSchemaAliasGroup *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *result;
  char *v5;

  v3 = *((_QWORD *)this + 4);
  if (v3)
    return (*(_QWORD *(**)(_QWORD *__return_ptr))(*(_QWORD *)v3 + 88))(a2);
  v5 = (char *)operator new(0x38uLL);
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_1E79316E0;
  *(_OWORD *)(v5 + 40) = 0u;
  a2[1] = v5;
  *(_OWORD *)(v5 + 24) = 0u;
  result = v5 + 24;
  *a2 = result;
  return result;
}

_QWORD *siri::dialogengine::PatternSchemaAliasGroup::GetDeprecated@<X0>(siri::dialogengine::PatternSchemaAliasGroup *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 4);
  if (v2)
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 96))(v2);
  else
    return std::string::basic_string[abi:ne180100]<0>(a2, "");
}

_QWORD *siri::dialogengine::PatternSchemaAliasGroup::GetReplacementName@<X0>(siri::dialogengine::PatternSchemaAliasGroup *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 4);
  if (v2)
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 104))(v2);
  else
    return std::string::basic_string[abi:ne180100]<0>(a2, "");
}

_QWORD *siri::dialogengine::PatternSchemaAliasGroup::PatternSchemaAliasGroup(_QWORD *a1, __int128 *a2, _QWORD *a3)
{
  std::string *v5;
  __int128 v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  *a1 = off_1E792F2C8;
  v5 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *a1 = off_1E792F220;
  v7 = a3[1];
  a1[4] = *a3;
  a1[5] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return a1;
}

{
  std::string *v5;
  __int128 v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  *a1 = off_1E792F2C8;
  v5 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *a1 = off_1E792F220;
  v7 = a3[1];
  a1[4] = *a3;
  a1[5] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return a1;
}

void InitDefaultsscc_info_cat_CatBinary_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/CatBinary.pb.cc", a4);
  siri::dialogengine::CatBinary::cat::cat((siri::dialogengine::CatBinary::cat *)&siri::dialogengine::CatBinary::_cat_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&siri::dialogengine::CatBinary::_cat_default_instance_, v4);
  qword_1EF583B90 = (uint64_t)&siri::dialogengine::CatBinary::_node_default_instance_;
}

void InitDefaultsscc_info_node_CatBinary_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/CatBinary.pb.cc", a4);
  siri::dialogengine::CatBinary::node::node((siri::dialogengine::CatBinary::node *)&siri::dialogengine::CatBinary::_node_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&siri::dialogengine::CatBinary::_node_default_instance_, v4);
}

void InitDefaultsscc_info_visual_parameter_CatBinary_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/CatBinary.pb.cc", a4);
  siri::dialogengine::CatBinary::visual_parameter::visual_parameter((siri::dialogengine::CatBinary::visual_parameter *)&siri::dialogengine::CatBinary::_visual_parameter_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&siri::dialogengine::CatBinary::_visual_parameter_default_instance_, v4);
}

siri::dialogengine::CatBinary::visual_parameter *siri::dialogengine::CatBinary::visual_parameter::visual_parameter(siri::dialogengine::CatBinary::visual_parameter *this)
{
  *(_QWORD *)this = &off_1E792F738;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  if (atomic_load(scc_info_visual_parameter_CatBinary_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_visual_parameter_CatBinary_2eproto);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 4) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

void sub_1BF9581E8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void siri::dialogengine::CatBinary::visual_parameter::~visual_parameter(siri::dialogengine::CatBinary::visual_parameter *this)
{
  siri::dialogengine::CatBinary::visual_parameter::~visual_parameter(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;

  *(_QWORD *)this = &off_1E792F738;
  v2 = *((_QWORD *)this + 3);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 4);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1C3B8D890](v4, 0x1012C40EC159624);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *siri::dialogengine::CatBinary::visual_parameter::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "siri.dialogengine.CatBinary.visual_parameter");
}

siri::dialogengine::CatBinary::visual_parameter *siri::dialogengine::CatBinary::visual_parameter::New(siri::dialogengine::CatBinary::visual_parameter *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::visual_parameter>(0);
}

siri::dialogengine::CatBinary::visual_parameter *siri::dialogengine::CatBinary::visual_parameter::New(siri::dialogengine::CatBinary::visual_parameter *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::visual_parameter>(a2);
}

void siri::dialogengine::CatBinary::visual_parameter::Clear(siri::dialogengine::CatBinary::visual_parameter *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  google::protobuf::internal::InternalMetadataWithArenaLite *v4;
  char v5;

  v1 = *((_DWORD *)this + 4);
  if ((v1 & 3) == 0)
    goto LABEL_11;
  if ((v1 & 1) == 0)
  {
LABEL_5:
    if ((v1 & 2) != 0)
      goto LABEL_6;
    goto LABEL_11;
  }
  v2 = *((_QWORD *)this + 3);
  if ((*(char *)(v2 + 23) & 0x80000000) == 0)
  {
    *(_BYTE *)v2 = 0;
    *(_BYTE *)(v2 + 23) = 0;
    goto LABEL_5;
  }
  **(_BYTE **)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;
  if ((v1 & 2) != 0)
  {
LABEL_6:
    v3 = *((_QWORD *)this + 4);
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
LABEL_11:
  v5 = *((_BYTE *)this + 8);
  v4 = (siri::dialogengine::CatBinary::visual_parameter *)((char *)this + 8);
  *((_DWORD *)v4 + 2) = 0;
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v4);
}

uint64_t siri::dialogengine::CatBinary::visual_parameter::IsInitialized(siri::dialogengine::CatBinary::visual_parameter *this)
{
  return 1;
}

void siri::dialogengine::CatBinary::visual_parameter::CheckTypeAndMergeFrom(siri::dialogengine::CatBinary::visual_parameter *this, const google::protobuf::MessageLite *lpsrc)
{
  siri::dialogengine::CatBinary::visual_parameter::MergeFrom(this, lpsrc);
}

uint64_t siri::dialogengine::CatBinary::visual_parameter::ByteSizeLong(siri::dialogengine::CatBinary::visual_parameter *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;

  v1 = *((_DWORD *)this + 4);
  if ((v1 & 3) == 0)
  {
    v2 = 0;
    goto LABEL_12;
  }
  if ((v1 & 1) == 0)
  {
    v2 = 0;
    if ((v1 & 2) == 0)
      goto LABEL_12;
    goto LABEL_9;
  }
  v3 = *((_QWORD *)this + 3);
  v4 = *(unsigned __int8 *)(v3 + 23);
  v5 = *(_QWORD *)(v3 + 8);
  if ((v4 & 0x80u) == 0)
    v5 = v4;
  v2 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v1 & 2) != 0)
  {
LABEL_9:
    v6 = *((_QWORD *)this + 4);
    v7 = *(unsigned __int8 *)(v6 + 23);
    v8 = *(_QWORD *)(v6 + 8);
    if ((v7 & 0x80u) == 0)
      v8 = v7;
    v2 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_12:
  v9 = *((_QWORD *)this + 1);
  if ((v9 & 1) != 0)
  {
    v11 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v11 + 23) < 0)
      v12 = *(_QWORD *)(v11 + 8);
    else
      v12 = *(unsigned __int8 *)(v11 + 23);
    v2 += v12;
  }
  *((_DWORD *)this + 5) = v2;
  return v2;
}

uint64_t siri::dialogengine::CatBinary::visual_parameter::GetCachedSize(siri::dialogengine::CatBinary::visual_parameter *this)
{
  return *((unsigned int *)this + 5);
}

google::protobuf::internal *siri::dialogengine::CatBinary::visual_parameter::_InternalParse(siri::dialogengine::CatBinary::visual_parameter *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  std::string **v6;
  uint64_t *v7;
  google::protobuf::internal *TagFallback;
  const char *v9;
  google::protobuf::internal *v12;
  std::string *v13;
  google::protobuf::internal *v15;

  v15 = a2;
  v5 = (std::string **)((char *)this + 32);
  v6 = (std::string **)((char *)this + 24);
  v7 = (uint64_t *)((char *)this + 8);
  while (1)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v15, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v15;
    TagFallback = (google::protobuf::internal *)((char *)v15 + 1);
    LODWORD(v9) = *(unsigned __int8 *)v15;
    if ((*(char *)v15 & 0x80000000) == 0)
      goto LABEL_6;
    v9 = (const char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v15 + 2);
LABEL_6:
      v15 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v15, v9);
    v15 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    if (v9 >> 3 == 2)
    {
      if (v9 == 18)
      {
        *((_DWORD *)this + 4) |= 2u;
        v13 = (std::string *)*((_QWORD *)this + 4);
        if (v13 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v13 = *v5;
          goto LABEL_22;
        }
LABEL_23:
        v12 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v13, (std::string::value_type *)TagFallback, (uint64_t)a3);
        goto LABEL_24;
      }
    }
    else if (v9 >> 3 == 1 && v9 == 10)
    {
      *((_DWORD *)this + 4) |= 1u;
      v13 = (std::string *)*((_QWORD *)this + 3);
      if (v13 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v13 = *v6;
LABEL_22:
        TagFallback = v15;
      }
      goto LABEL_23;
    }
    if (!(_DWORD)v9 || (v9 & 7) == 4)
      break;
    v12 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v9, v7, TagFallback, a3);
LABEL_24:
    v15 = v12;
    if (!v12)
      return 0;
  }
  *((_DWORD *)a3 + 20) = (_DWORD)v9 - 1;
  return TagFallback;
}

unsigned __int8 *siri::dialogengine::CatBinary::visual_parameter::InternalSerializeWithCachedSizesToArray(siri::dialogengine::CatBinary::visual_parameter *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  unsigned __int8 *v4;
  int v6;
  uint64_t v7;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;

  v4 = (unsigned __int8 *)a2;
  v6 = *((_DWORD *)this + 4);
  if ((v6 & 1) != 0)
    v4 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 3), a2);
  if ((v6 & 2) != 0)
    v4 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((_QWORD *)this + 4), (char *)v4);
  v7 = *((_QWORD *)this + 1);
  if ((v7 & 1) == 0)
    return v4;
  v9 = v7 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v9 + 23) < 0)
  {
    v11 = *(void **)v9;
    v10 = *(_QWORD *)(v9 + 8);
  }
  else
  {
    LODWORD(v10) = *(unsigned __int8 *)(v9 + 23);
    v11 = (void *)v9;
  }
  if (*(_QWORD *)a3 - (_QWORD)v4 >= (int)v10)
  {
    v12 = (int)v10;
    memcpy(v4, v11, (int)v10);
    v4 += v12;
    return v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v11, v10, v4);
}

void siri::dialogengine::CatBinary::visual_parameter::MergeFrom(siri::dialogengine::CatBinary::visual_parameter *this, const siri::dialogengine::CatBinary::visual_parameter *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  std::string *v7;
  const std::string *v8;
  std::string *v9;
  std::string **v10;
  std::string *v11;
  const std::string *v12;
  char v13;
  std::string v14[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/CatBinary.pb.cc", 2561);
    v4 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 3) != 0)
  {
    if ((v6 & 1) != 0)
    {
      v7 = (std::string *)*((_QWORD *)this + 3);
      *((_DWORD *)this + 4) |= 1u;
      v8 = (const std::string *)*((_QWORD *)a2 + 3);
      if (v7 != v8)
      {
        if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, (uint64_t)v8);
          if ((v6 & 2) == 0)
            return;
          goto LABEL_11;
        }
        std::string::operator=(v7, v8);
      }
    }
    if ((v6 & 2) == 0)
      return;
LABEL_11:
    v11 = (std::string *)*((_QWORD *)this + 4);
    v10 = (std::string **)((char *)this + 32);
    v9 = v11;
    *((_DWORD *)v10 - 4) |= 2u;
    v12 = (const std::string *)*((_QWORD *)a2 + 4);
    if (v11 != v12)
    {
      if (v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v10, (uint64_t)v12);
      else
        std::string::operator=(v9, v12);
    }
  }
}

void sub_1BF958770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

siri::dialogengine::CatBinary::visual_parameter *google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::visual_parameter>(google::protobuf::internal::ArenaImpl *this)
{
  siri::dialogengine::CatBinary::visual_parameter *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (siri::dialogengine::CatBinary::visual_parameter *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x28uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<siri::dialogengine::CatBinary::visual_parameter>);
    siri::dialogengine::CatBinary::visual_parameter::visual_parameter(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (siri::dialogengine::CatBinary::visual_parameter *)operator new();
    siri::dialogengine::CatBinary::visual_parameter::visual_parameter(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BF95880C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C40DFBAE579);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<siri::dialogengine::CatBinary::visual_parameter>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

siri::dialogengine::CatBinary::node *siri::dialogengine::CatBinary::node::node(siri::dialogengine::CatBinary::node *this)
{
  *(_QWORD *)this = &off_1E792F7C8;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  if (atomic_load(scc_info_node_CatBinary_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_node_CatBinary_2eproto);
  *((_QWORD *)this + 9) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 10) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 11) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 12) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 13) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 14) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 15) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 16) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 17) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 18) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 19) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 20) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 21) = 0;
  *((_DWORD *)this + 44) = 0;
  return this;
}

void sub_1BF958984(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v1 + 48));
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v1 + 24));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

void siri::dialogengine::CatBinary::node::~node(siri::dialogengine::CatBinary::node *this)
{
  siri::dialogengine::CatBinary::node::~node(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = &off_1E792F7C8;
  v2 = *((_QWORD *)this + 9);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 10);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1C3B8D890](v4, 0x1012C40EC159624);
  }
  v6 = *((_QWORD *)this + 11);
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
  {
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    MEMORY[0x1C3B8D890](v6, 0x1012C40EC159624);
  }
  v8 = *((_QWORD *)this + 12);
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v8 != 0)
  {
    if (*(char *)(v8 + 23) < 0)
      operator delete(*(void **)v8);
    MEMORY[0x1C3B8D890](v8, 0x1012C40EC159624);
  }
  v10 = *((_QWORD *)this + 13);
  if ((uint64_t *)v10 != &google::protobuf::internal::fixed_address_empty_string && v10)
  {
    if (*(char *)(v10 + 23) < 0)
      operator delete(*(void **)v10);
    MEMORY[0x1C3B8D890](v10, 0x1012C40EC159624);
  }
  v11 = *((_QWORD *)this + 14);
  if ((uint64_t *)v11 != &google::protobuf::internal::fixed_address_empty_string && v11)
  {
    if (*(char *)(v11 + 23) < 0)
      operator delete(*(void **)v11);
    MEMORY[0x1C3B8D890](v11, 0x1012C40EC159624);
  }
  v12 = *((_QWORD *)this + 15);
  if ((uint64_t *)v12 != &google::protobuf::internal::fixed_address_empty_string && v12)
  {
    if (*(char *)(v12 + 23) < 0)
      operator delete(*(void **)v12);
    MEMORY[0x1C3B8D890](v12, 0x1012C40EC159624);
  }
  v13 = *((_QWORD *)this + 16);
  if ((uint64_t *)v13 != &google::protobuf::internal::fixed_address_empty_string && v13)
  {
    if (*(char *)(v13 + 23) < 0)
      operator delete(*(void **)v13);
    MEMORY[0x1C3B8D890](v13, 0x1012C40EC159624);
  }
  v14 = *((_QWORD *)this + 17);
  if ((uint64_t *)v14 != &google::protobuf::internal::fixed_address_empty_string && v14)
  {
    if (*(char *)(v14 + 23) < 0)
      operator delete(*(void **)v14);
    MEMORY[0x1C3B8D890](v14, 0x1012C40EC159624);
  }
  v15 = *((_QWORD *)this + 18);
  if ((uint64_t *)v15 != &google::protobuf::internal::fixed_address_empty_string && v15)
  {
    if (*(char *)(v15 + 23) < 0)
      operator delete(*(void **)v15);
    MEMORY[0x1C3B8D890](v15, 0x1012C40EC159624);
  }
  v16 = *((_QWORD *)this + 19);
  if ((uint64_t *)v16 != &google::protobuf::internal::fixed_address_empty_string && v16)
  {
    if (*(char *)(v16 + 23) < 0)
      operator delete(*(void **)v16);
    MEMORY[0x1C3B8D890](v16, 0x1012C40EC159624);
  }
  v17 = *((_QWORD *)this + 20);
  if ((uint64_t *)v17 != &google::protobuf::internal::fixed_address_empty_string && v17)
  {
    if (*(char *)(v17 + 23) < 0)
      operator delete(*(void **)v17);
    MEMORY[0x1C3B8D890](v17, 0x1012C40EC159624);
  }
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((siri::dialogengine::CatBinary::node *)((char *)this + 48));
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((siri::dialogengine::CatBinary::node *)((char *)this + 24));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *siri::dialogengine::CatBinary::node::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "siri.dialogengine.CatBinary.node");
}

siri::dialogengine::CatBinary::node *siri::dialogengine::CatBinary::node::New(siri::dialogengine::CatBinary::node *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::node>(0);
}

siri::dialogengine::CatBinary::node *siri::dialogengine::CatBinary::node::New(siri::dialogengine::CatBinary::node *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::node>(a2);
}

void siri::dialogengine::CatBinary::node::Clear(siri::dialogengine::CatBinary::node *this)
{
  uint64_t v2;
  siri::dialogengine::CatBinary::visual_parameter **v3;
  siri::dialogengine::CatBinary::visual_parameter *v4;
  std::string *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  google::protobuf::internal::InternalMetadataWithArenaLite *v19;
  char v20;
  char v21;
  std::string v22[2];

  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<siri::dialogengine::CatBinary::node>::TypeHandler>((uint64_t)this + 24);
  v2 = *((unsigned int *)this + 14);
  if ((v2 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v22, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v5 = google::protobuf::internal::LogMessage::operator<<(v22, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v21, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v22[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v2)
  {
    v3 = (siri::dialogengine::CatBinary::visual_parameter **)(*((_QWORD *)this + 8) + 8);
    do
    {
      v4 = *v3++;
      siri::dialogengine::CatBinary::visual_parameter::Clear(v4);
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 14) = 0;
  }
  v6 = *((_DWORD *)this + 4);
  if ((_BYTE)v6)
  {
    if ((v6 & 1) == 0)
    {
      if ((v6 & 2) == 0)
        goto LABEL_10;
LABEL_21:
      v8 = *((_QWORD *)this + 10);
      if (*(char *)(v8 + 23) < 0)
      {
        **(_BYTE **)v8 = 0;
        *(_QWORD *)(v8 + 8) = 0;
        if ((v6 & 4) != 0)
          goto LABEL_25;
      }
      else
      {
        *(_BYTE *)v8 = 0;
        *(_BYTE *)(v8 + 23) = 0;
        if ((v6 & 4) != 0)
          goto LABEL_25;
      }
LABEL_11:
      if ((v6 & 8) == 0)
        goto LABEL_12;
LABEL_29:
      v10 = *((_QWORD *)this + 12);
      if (*(char *)(v10 + 23) < 0)
      {
        **(_BYTE **)v10 = 0;
        *(_QWORD *)(v10 + 8) = 0;
        if ((v6 & 0x10) != 0)
          goto LABEL_33;
      }
      else
      {
        *(_BYTE *)v10 = 0;
        *(_BYTE *)(v10 + 23) = 0;
        if ((v6 & 0x10) != 0)
          goto LABEL_33;
      }
LABEL_13:
      if ((v6 & 0x20) == 0)
        goto LABEL_14;
LABEL_37:
      v12 = *((_QWORD *)this + 14);
      if (*(char *)(v12 + 23) < 0)
      {
        **(_BYTE **)v12 = 0;
        *(_QWORD *)(v12 + 8) = 0;
        if ((v6 & 0x40) != 0)
          goto LABEL_41;
      }
      else
      {
        *(_BYTE *)v12 = 0;
        *(_BYTE *)(v12 + 23) = 0;
        if ((v6 & 0x40) != 0)
          goto LABEL_41;
      }
LABEL_15:
      if ((v6 & 0x80) == 0)
        goto LABEL_48;
LABEL_45:
      v14 = *((_QWORD *)this + 16);
      if (*(char *)(v14 + 23) < 0)
      {
        **(_BYTE **)v14 = 0;
        *(_QWORD *)(v14 + 8) = 0;
      }
      else
      {
        *(_BYTE *)v14 = 0;
        *(_BYTE *)(v14 + 23) = 0;
      }
      goto LABEL_48;
    }
    v7 = *((_QWORD *)this + 9);
    if (*(char *)(v7 + 23) < 0)
    {
      **(_BYTE **)v7 = 0;
      *(_QWORD *)(v7 + 8) = 0;
      if ((v6 & 2) != 0)
        goto LABEL_21;
    }
    else
    {
      *(_BYTE *)v7 = 0;
      *(_BYTE *)(v7 + 23) = 0;
      if ((v6 & 2) != 0)
        goto LABEL_21;
    }
LABEL_10:
    if ((v6 & 4) == 0)
      goto LABEL_11;
LABEL_25:
    v9 = *((_QWORD *)this + 11);
    if (*(char *)(v9 + 23) < 0)
    {
      **(_BYTE **)v9 = 0;
      *(_QWORD *)(v9 + 8) = 0;
      if ((v6 & 8) != 0)
        goto LABEL_29;
    }
    else
    {
      *(_BYTE *)v9 = 0;
      *(_BYTE *)(v9 + 23) = 0;
      if ((v6 & 8) != 0)
        goto LABEL_29;
    }
LABEL_12:
    if ((v6 & 0x10) == 0)
      goto LABEL_13;
LABEL_33:
    v11 = *((_QWORD *)this + 13);
    if (*(char *)(v11 + 23) < 0)
    {
      **(_BYTE **)v11 = 0;
      *(_QWORD *)(v11 + 8) = 0;
      if ((v6 & 0x20) != 0)
        goto LABEL_37;
    }
    else
    {
      *(_BYTE *)v11 = 0;
      *(_BYTE *)(v11 + 23) = 0;
      if ((v6 & 0x20) != 0)
        goto LABEL_37;
    }
LABEL_14:
    if ((v6 & 0x40) == 0)
      goto LABEL_15;
LABEL_41:
    v13 = *((_QWORD *)this + 15);
    if (*(char *)(v13 + 23) < 0)
    {
      **(_BYTE **)v13 = 0;
      *(_QWORD *)(v13 + 8) = 0;
      if ((v6 & 0x80) == 0)
        goto LABEL_48;
    }
    else
    {
      *(_BYTE *)v13 = 0;
      *(_BYTE *)(v13 + 23) = 0;
      if ((v6 & 0x80) == 0)
        goto LABEL_48;
    }
    goto LABEL_45;
  }
LABEL_48:
  if ((v6 & 0xF00) == 0)
    goto LABEL_69;
  if ((v6 & 0x100) == 0)
  {
    if ((v6 & 0x200) == 0)
      goto LABEL_51;
LABEL_58:
    v16 = *((_QWORD *)this + 18);
    if (*(char *)(v16 + 23) < 0)
    {
      **(_BYTE **)v16 = 0;
      *(_QWORD *)(v16 + 8) = 0;
      if ((v6 & 0x400) != 0)
        goto LABEL_62;
    }
    else
    {
      *(_BYTE *)v16 = 0;
      *(_BYTE *)(v16 + 23) = 0;
      if ((v6 & 0x400) != 0)
        goto LABEL_62;
    }
LABEL_52:
    if ((v6 & 0x800) == 0)
      goto LABEL_69;
    goto LABEL_66;
  }
  v15 = *((_QWORD *)this + 17);
  if (*(char *)(v15 + 23) < 0)
  {
    **(_BYTE **)v15 = 0;
    *(_QWORD *)(v15 + 8) = 0;
    if ((v6 & 0x200) != 0)
      goto LABEL_58;
  }
  else
  {
    *(_BYTE *)v15 = 0;
    *(_BYTE *)(v15 + 23) = 0;
    if ((v6 & 0x200) != 0)
      goto LABEL_58;
  }
LABEL_51:
  if ((v6 & 0x400) == 0)
    goto LABEL_52;
LABEL_62:
  v17 = *((_QWORD *)this + 19);
  if (*(char *)(v17 + 23) < 0)
  {
    **(_BYTE **)v17 = 0;
    *(_QWORD *)(v17 + 8) = 0;
    if ((v6 & 0x800) == 0)
      goto LABEL_69;
  }
  else
  {
    *(_BYTE *)v17 = 0;
    *(_BYTE *)(v17 + 23) = 0;
    if ((v6 & 0x800) == 0)
      goto LABEL_69;
  }
LABEL_66:
  v18 = *((_QWORD *)this + 20);
  if (*(char *)(v18 + 23) < 0)
  {
    **(_BYTE **)v18 = 0;
    *(_QWORD *)(v18 + 8) = 0;
  }
  else
  {
    *(_BYTE *)v18 = 0;
    *(_BYTE *)(v18 + 23) = 0;
  }
LABEL_69:
  if ((v6 & 0xF000) != 0)
  {
    *((_DWORD *)this + 44) = 0;
    *((_QWORD *)this + 21) = 0;
  }
  v20 = *((_BYTE *)this + 8);
  v19 = (siri::dialogengine::CatBinary::node *)((char *)this + 8);
  *((_DWORD *)v19 + 2) = 0;
  if ((v20 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v19);
}

void sub_1BF958D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::CatBinary::node::IsInitialized(siri::dialogengine::CatBinary::node *this)
{
  return (*((_BYTE *)this + 17) & 0x10) != 0
      && google::protobuf::internal::AllAreInitialized<google::protobuf::RepeatedPtrField<siri::dialogengine::CatBinary::node>>((uint64_t)this + 24);
}

void siri::dialogengine::CatBinary::node::CheckTypeAndMergeFrom(siri::dialogengine::CatBinary::node *this, const google::protobuf::MessageLite *lpsrc)
{
  siri::dialogengine::CatBinary::node::MergeFrom(this, lpsrc);
}

uint64_t siri::dialogengine::CatBinary::node::ByteSizeLong(siri::dialogengine::CatBinary::node *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  siri::dialogengine::CatBinary::node **v9;
  uint64_t v10;
  siri::dialogengine::CatBinary::node *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  siri::dialogengine::CatBinary::visual_parameter **v16;
  uint64_t v17;
  siri::dialogengine::CatBinary::visual_parameter *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;

  if ((*((_BYTE *)this + 17) & 0x10) != 0)
  {
    v3 = *((_DWORD *)this + 42);
    v4 = (9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6;
    if (v3 >= 0)
      v5 = v4;
    else
      v5 = 10;
    v2 = v5 + 1;
  }
  else
  {
    v2 = 0;
  }
  v6 = *((int *)this + 8);
  v7 = v2 + v6;
  v8 = *((_QWORD *)this + 5);
  if (v8)
    v9 = (siri::dialogengine::CatBinary::node **)(v8 + 8);
  else
    v9 = 0;
  if ((_DWORD)v6)
  {
    v10 = 8 * v6;
    do
    {
      v11 = *v9++;
      v12 = siri::dialogengine::CatBinary::node::ByteSizeLong(v11);
      v7 += v12 + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6);
      v10 -= 8;
    }
    while (v10);
  }
  v13 = *((int *)this + 14);
  v14 = v7 + v13;
  v15 = *((_QWORD *)this + 8);
  if (v15)
    v16 = (siri::dialogengine::CatBinary::visual_parameter **)(v15 + 8);
  else
    v16 = 0;
  if ((_DWORD)v13)
  {
    v17 = 8 * v13;
    do
    {
      v18 = *v16++;
      v19 = siri::dialogengine::CatBinary::visual_parameter::ByteSizeLong(v18);
      v14 += v19 + ((9 * (__clz(v19 | 1) ^ 0x1F) + 73) >> 6);
      v17 -= 8;
    }
    while (v17);
  }
  v20 = *((_DWORD *)this + 4);
  if (!(_BYTE)v20)
    goto LABEL_31;
  if ((v20 & 1) != 0)
  {
    v30 = *((_QWORD *)this + 9);
    v31 = *(unsigned __int8 *)(v30 + 23);
    v32 = *(_QWORD *)(v30 + 8);
    if ((v31 & 0x80u) == 0)
      v32 = v31;
    v14 += v32 + ((9 * (__clz(v32 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v20 & 2) == 0)
    {
LABEL_22:
      if ((v20 & 4) == 0)
        goto LABEL_23;
      goto LABEL_56;
    }
  }
  else if ((v20 & 2) == 0)
  {
    goto LABEL_22;
  }
  v33 = *((_QWORD *)this + 10);
  v34 = *(unsigned __int8 *)(v33 + 23);
  v35 = *(_QWORD *)(v33 + 8);
  if ((v34 & 0x80u) == 0)
    v35 = v34;
  v14 += v35 + ((9 * (__clz(v35 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v20 & 4) == 0)
  {
LABEL_23:
    if ((v20 & 8) == 0)
      goto LABEL_24;
    goto LABEL_59;
  }
LABEL_56:
  v36 = *((_QWORD *)this + 11);
  v37 = *(unsigned __int8 *)(v36 + 23);
  v38 = *(_QWORD *)(v36 + 8);
  if ((v37 & 0x80u) == 0)
    v38 = v37;
  v14 += v38 + ((9 * (__clz(v38 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v20 & 8) == 0)
  {
LABEL_24:
    if ((v20 & 0x10) == 0)
      goto LABEL_25;
    goto LABEL_62;
  }
LABEL_59:
  v39 = *((_QWORD *)this + 12);
  v40 = *(unsigned __int8 *)(v39 + 23);
  v41 = *(_QWORD *)(v39 + 8);
  if ((v40 & 0x80u) == 0)
    v41 = v40;
  v14 += v41 + ((9 * (__clz(v41 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v20 & 0x10) == 0)
  {
LABEL_25:
    if ((v20 & 0x20) == 0)
      goto LABEL_26;
LABEL_65:
    v45 = *((_QWORD *)this + 14);
    v46 = *(unsigned __int8 *)(v45 + 23);
    v47 = *(_QWORD *)(v45 + 8);
    if ((v46 & 0x80u) == 0)
      v47 = v46;
    v14 += v47 + ((9 * (__clz(v47 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v20 & 0x40) == 0)
    {
LABEL_27:
      if ((v20 & 0x80) == 0)
        goto LABEL_31;
      goto LABEL_28;
    }
    goto LABEL_68;
  }
LABEL_62:
  v42 = *((_QWORD *)this + 13);
  v43 = *(unsigned __int8 *)(v42 + 23);
  v44 = *(_QWORD *)(v42 + 8);
  if ((v43 & 0x80u) == 0)
    v44 = v43;
  v14 += v44 + ((9 * (__clz(v44 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v20 & 0x20) != 0)
    goto LABEL_65;
LABEL_26:
  if ((v20 & 0x40) == 0)
    goto LABEL_27;
LABEL_68:
  v48 = *((_QWORD *)this + 15);
  v49 = *(unsigned __int8 *)(v48 + 23);
  v50 = *(_QWORD *)(v48 + 8);
  if ((v49 & 0x80u) == 0)
    v50 = v49;
  v14 += v50 + ((9 * (__clz(v50 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v20 & 0x80) != 0)
  {
LABEL_28:
    v21 = *((_QWORD *)this + 16);
    v22 = *(unsigned __int8 *)(v21 + 23);
    v23 = *(_QWORD *)(v21 + 8);
    if ((v22 & 0x80u) == 0)
      v23 = v22;
    v14 += v23 + ((9 * (__clz(v23 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_31:
  if ((v20 & 0xF00) == 0)
    goto LABEL_39;
  if ((v20 & 0x100) != 0)
  {
    v51 = *((_QWORD *)this + 17);
    v52 = *(unsigned __int8 *)(v51 + 23);
    v53 = *(_QWORD *)(v51 + 8);
    if ((v52 & 0x80u) == 0)
      v53 = v52;
    v14 += v53 + ((9 * (__clz(v53 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v20 & 0x200) == 0)
    {
LABEL_34:
      if ((v20 & 0x400) == 0)
        goto LABEL_35;
      goto LABEL_78;
    }
  }
  else if ((v20 & 0x200) == 0)
  {
    goto LABEL_34;
  }
  v54 = *((_QWORD *)this + 18);
  v55 = *(unsigned __int8 *)(v54 + 23);
  v56 = *(_QWORD *)(v54 + 8);
  if ((v55 & 0x80u) == 0)
    v56 = v55;
  v14 += v56 + ((9 * (__clz(v56 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v20 & 0x400) == 0)
  {
LABEL_35:
    if ((v20 & 0x800) == 0)
      goto LABEL_39;
    goto LABEL_36;
  }
LABEL_78:
  v57 = *((_QWORD *)this + 19);
  v58 = *(unsigned __int8 *)(v57 + 23);
  v59 = *(_QWORD *)(v57 + 8);
  if ((v58 & 0x80u) == 0)
    v59 = v58;
  v14 += v59 + ((9 * (__clz(v59 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v20 & 0x800) != 0)
  {
LABEL_36:
    v24 = *((_QWORD *)this + 20);
    v25 = *(unsigned __int8 *)(v24 + 23);
    v26 = *(_QWORD *)(v24 + 8);
    if ((v25 & 0x80u) == 0)
      v26 = v25;
    v14 += v26 + ((9 * (__clz(v26 | 1) ^ 0x1F) + 73) >> 6) + 2;
  }
LABEL_39:
  v27 = v14 + 2;
  if ((v20 & 0x2000) == 0)
    v27 = v14;
  if ((v20 & 0x4000) != 0)
    v27 += 2;
  if ((v20 & 0x8000) != 0)
    v27 += 6;
  if ((v20 & 0xE000) != 0)
    result = v27;
  else
    result = v14;
  v29 = *((_QWORD *)this + 1);
  if ((v29 & 1) != 0)
  {
    v60 = v29 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v60 + 23) < 0)
      v61 = *(_QWORD *)(v60 + 8);
    else
      v61 = *(unsigned __int8 *)(v60 + 23);
    result += v61;
  }
  *((_DWORD *)this + 5) = result;
  return result;
}

uint64_t siri::dialogengine::CatBinary::node::GetCachedSize(siri::dialogengine::CatBinary::node *this)
{
  return *((unsigned int *)this + 5);
}

char *siri::dialogengine::CatBinary::node::_InternalParse(siri::dialogengine::CatBinary::node *this, char *a2, google::protobuf::internal::ParseContext *a3)
{
  int v5;
  unsigned int *v6;
  unsigned int *v7;
  char *TagFallback;
  const char *v9;
  char *v10;
  unint64_t v11;
  int v12;
  int v13;
  std::string *v14;
  std::string **v15;
  char *v16;
  char *v17;
  int *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  siri::dialogengine::CatBinary::node *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  int v27;
  char *v28;
  char *v29;
  int *v30;
  uint64_t v31;
  int v32;
  siri::dialogengine::CatBinary::visual_parameter *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  char *v37;
  char *SizeFallback;
  unsigned int v39;
  int v40;
  int v41;
  BOOL v42;
  int v43;
  int v44;
  unint64_t v45;
  char *v46;
  unint64_t v47;
  int v48;
  char *v49;
  BOOL v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  std::string *v56;
  std::string *v57;
  std::string **v59;
  std::string **v60;
  std::string **v61;
  std::string **v62;
  std::string **v63;
  std::string **v64;
  std::string **v65;
  std::string **v66;
  std::string **v67;
  std::string **v68;
  std::string **v69;
  std::string **v70;
  uint64_t *v71;
  char *v72;

  v5 = 0;
  v72 = a2;
  v69 = (std::string **)((char *)this + 152);
  v70 = (std::string **)((char *)this + 160);
  v6 = (unsigned int *)((char *)this + 48);
  v67 = (std::string **)((char *)this + 136);
  v68 = (std::string **)((char *)this + 144);
  v7 = (unsigned int *)((char *)this + 24);
  v65 = (std::string **)((char *)this + 120);
  v66 = (std::string **)((char *)this + 128);
  v63 = (std::string **)((char *)this + 104);
  v64 = (std::string **)((char *)this + 112);
  v61 = (std::string **)((char *)this + 88);
  v62 = (std::string **)((char *)this + 96);
  v59 = (std::string **)((char *)this + 72);
  v60 = (std::string **)((char *)this + 80);
  v71 = (uint64_t *)((char *)this + 8);
LABEL_2:
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v72, *((_DWORD *)a3 + 23)) & 1) != 0)
    {
      TagFallback = v72;
      break;
    }
    TagFallback = v72 + 1;
    LODWORD(v9) = *v72;
    if ((*v72 & 0x80000000) == 0)
      goto LABEL_6;
    v9 = (const char *)(v9 + (*TagFallback << 7) - 128);
    if ((*TagFallback & 0x80000000) == 0)
    {
      TagFallback = v72 + 2;
LABEL_6:
      v72 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (char *)google::protobuf::internal::ReadTagFallback((google::protobuf::internal *)v72, v9);
    v72 = TagFallback;
    if (!TagFallback)
      break;
LABEL_7:
    switch(v9 >> 3)
    {
      case 1u:
        if (v9 != 8)
          goto LABEL_101;
        v10 = TagFallback + 1;
        v11 = *TagFallback;
        if ((*TagFallback & 0x80000000) == 0)
          goto LABEL_12;
        v12 = *v10;
        v13 = v11 + (v12 << 7);
        v11 = (v13 - 128);
        if (v12 < 0)
        {
          v72 = (char *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)TagFallback, (v13 - 128));
          if (!v72)
            goto LABEL_117;
          v11 = v51;
        }
        else
        {
          v10 = TagFallback + 2;
LABEL_12:
          v72 = v10;
        }
        if (v11 > 6)
        {
          if ((*v71 & 1) != 0)
          {
            v56 = (std::string *)(*v71 & 0xFFFFFFFFFFFFFFFELL);
          }
          else
          {
            google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v71);
            v56 = v57;
          }
          google::protobuf::internal::WriteVarint(1, v11, v56);
        }
        else
        {
          *((_DWORD *)this + 4) |= 0x1000u;
          *((_DWORD *)this + 42) = v11;
        }
        continue;
      case 2u:
        if (v9 != 18)
          goto LABEL_101;
        *((_DWORD *)this + 4) |= 1u;
        v14 = (std::string *)*((_QWORD *)this + 9);
        if (v14 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_98;
        v15 = v59;
        goto LABEL_97;
      case 3u:
        if (v9 != 26)
          goto LABEL_101;
        *((_DWORD *)this + 4) |= 2u;
        v14 = (std::string *)*((_QWORD *)this + 10);
        if (v14 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_98;
        v15 = v60;
        goto LABEL_97;
      case 4u:
        if (v9 != 34)
          goto LABEL_101;
        *((_DWORD *)this + 4) |= 4u;
        v14 = (std::string *)*((_QWORD *)this + 11);
        if (v14 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_98;
        v15 = v61;
        goto LABEL_97;
      case 5u:
        if (v9 != 42)
          goto LABEL_101;
        *((_DWORD *)this + 4) |= 8u;
        v14 = (std::string *)*((_QWORD *)this + 12);
        if (v14 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_98;
        v15 = v62;
        goto LABEL_97;
      case 6u:
        if (v9 != 50)
          goto LABEL_101;
        *((_DWORD *)this + 4) |= 0x10u;
        v14 = (std::string *)*((_QWORD *)this + 13);
        if (v14 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_98;
        v15 = v63;
        goto LABEL_97;
      case 7u:
        if (v9 != 58)
          goto LABEL_101;
        *((_DWORD *)this + 4) |= 0x20u;
        v14 = (std::string *)*((_QWORD *)this + 14);
        if (v14 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_98;
        v15 = v64;
        goto LABEL_97;
      case 8u:
        if (v9 != 66)
          goto LABEL_101;
        *((_DWORD *)this + 4) |= 0x40u;
        v14 = (std::string *)*((_QWORD *)this + 15);
        if (v14 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_98;
        v15 = v65;
        goto LABEL_97;
      case 9u:
        if (v9 != 74)
          goto LABEL_101;
        v16 = TagFallback - 1;
        while (1)
        {
          v17 = v16 + 1;
          v72 = v16 + 1;
          v18 = (int *)*((_QWORD *)this + 5);
          if (!v18)
            break;
          v19 = *((int *)this + 8);
          v20 = *v18;
          if ((int)v19 >= *v18)
          {
            if (v20 == *((_DWORD *)this + 9))
            {
LABEL_45:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v7, v20 + 1);
              v18 = (int *)*((_QWORD *)this + 5);
              v20 = *v18;
            }
            *v18 = v20 + 1;
            v22 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::node>(*((google::protobuf::internal::ArenaImpl **)this + 3));
            LODWORD(v21) = (_DWORD)v22;
            v23 = *((_QWORD *)this + 5);
            v24 = *((int *)this + 8);
            *((_DWORD *)this + 8) = v24 + 1;
            *(_QWORD *)(v23 + 8 * v24 + 8) = v22;
            v17 = v72;
            goto LABEL_47;
          }
          *((_DWORD *)this + 8) = v19 + 1;
          v21 = *(_QWORD *)&v18[2 * v19 + 2];
LABEL_47:
          v16 = (char *)google::protobuf::internal::ParseContext::ParseMessage<siri::dialogengine::CatBinary::node>(a3, v21, (google::protobuf::internal *)v17);
          v72 = v16;
          if (!v16)
            goto LABEL_117;
          if (*(_QWORD *)a3 <= (unint64_t)v16 || *v16 != 74)
            goto LABEL_2;
        }
        v20 = *((_DWORD *)this + 9);
        goto LABEL_45;
      case 0xAu:
        if (v9 != 82)
          goto LABEL_101;
        *((_DWORD *)this + 4) |= 0x80u;
        v14 = (std::string *)*((_QWORD *)this + 16);
        if (v14 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_98;
        v15 = v66;
        goto LABEL_97;
      case 0xBu:
        if (v9 != 90)
          goto LABEL_101;
        *((_DWORD *)this + 4) |= 0x100u;
        v14 = (std::string *)*((_QWORD *)this + 17);
        if (v14 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_98;
        v15 = v67;
        goto LABEL_97;
      case 0xCu:
        if (v9 != 96)
          goto LABEL_101;
        v5 |= 0x2000u;
        v25 = TagFallback + 1;
        v26 = *TagFallback;
        if ((*TagFallback & 0x80000000) == 0)
          goto LABEL_61;
        v27 = *v25;
        v26 = v26 + (v27 << 7) - 128;
        if (v27 < 0)
        {
          v52 = (char *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)TagFallback, v26);
          v72 = v52;
          *((_BYTE *)this + 172) = v53 != 0;
          if (!v52)
            goto LABEL_117;
        }
        else
        {
          v25 = TagFallback + 2;
LABEL_61:
          v72 = v25;
          *((_BYTE *)this + 172) = v26 != 0;
        }
        continue;
      case 0xDu:
        if (v9 != 106)
          goto LABEL_101;
        *((_DWORD *)this + 4) |= 0x200u;
        v14 = (std::string *)*((_QWORD *)this + 18);
        if (v14 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_98;
        v15 = v68;
        goto LABEL_97;
      case 0xEu:
        if (v9 != 114)
          goto LABEL_101;
        v28 = TagFallback - 1;
LABEL_67:
        v29 = v28 + 1;
        v72 = v29;
        v30 = (int *)*((_QWORD *)this + 8);
        if (!v30)
        {
          v32 = *((_DWORD *)this + 15);
LABEL_72:
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v32 + 1);
          v30 = (int *)*((_QWORD *)this + 8);
          v32 = *v30;
          goto LABEL_73;
        }
        v31 = *((int *)this + 14);
        v32 = *v30;
        if ((int)v31 < *v30)
        {
          *((_DWORD *)this + 14) = v31 + 1;
          v33 = *(siri::dialogengine::CatBinary::visual_parameter **)&v30[2 * v31 + 2];
          goto LABEL_74;
        }
        if (v32 == *((_DWORD *)this + 15))
          goto LABEL_72;
LABEL_73:
        *v30 = v32 + 1;
        v33 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::visual_parameter>(*((google::protobuf::internal::ArenaImpl **)this + 6));
        v34 = *((_QWORD *)this + 8);
        v35 = *((int *)this + 14);
        *((_DWORD *)this + 14) = v35 + 1;
        *(_QWORD *)(v34 + 8 * v35 + 8) = v33;
        v29 = v72;
LABEL_74:
        v36 = *v29;
        if (*v29 < 0)
        {
          SizeFallback = google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)v29, (const char *)*v29);
          if (!SizeFallback)
            goto LABEL_117;
          v37 = SizeFallback;
          v36 = v39;
        }
        else
        {
          v37 = v29 + 1;
        }
        v40 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v37, v36);
        v41 = *((_DWORD *)a3 + 22);
        v42 = __OFSUB__(v41--, 1);
        *((_DWORD *)a3 + 22) = v41;
        if (v41 < 0 == v42)
        {
          v43 = v40;
          v28 = (char *)siri::dialogengine::CatBinary::visual_parameter::_InternalParse(v33, (google::protobuf::internal *)v37, a3);
          if (v28)
          {
            ++*((_DWORD *)a3 + 22);
            if (!*((_DWORD *)a3 + 20))
            {
              v44 = *((_DWORD *)a3 + 7) + v43;
              *((_DWORD *)a3 + 7) = v44;
              v45 = *((_QWORD *)a3 + 1) + (v44 & (v44 >> 31));
              *(_QWORD *)a3 = v45;
              v72 = v28;
              if (v45 <= (unint64_t)v28 || *v28 != 114)
                continue;
              goto LABEL_67;
            }
          }
        }
LABEL_117:
        TagFallback = 0;
        break;
      case 0xFu:
        if (v9 != 120)
          goto LABEL_101;
        v5 |= 0x4000u;
        v46 = TagFallback + 1;
        v47 = *TagFallback;
        if ((*TagFallback & 0x80000000) == 0)
          goto LABEL_88;
        v48 = *v46;
        v47 = v47 + (v48 << 7) - 128;
        if (v48 < 0)
        {
          v54 = (char *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)TagFallback, v47);
          v72 = v54;
          *((_BYTE *)this + 173) = v55 != 0;
          if (!v54)
            goto LABEL_117;
        }
        else
        {
          v46 = TagFallback + 2;
LABEL_88:
          v72 = v46;
          *((_BYTE *)this + 173) = v47 != 0;
        }
        continue;
      case 0x10u:
        if (v9 != 133)
          goto LABEL_101;
        v5 |= 0x8000u;
        *((_DWORD *)this + 44) = *(_DWORD *)TagFallback;
        v72 = TagFallback + 4;
        continue;
      case 0x11u:
        if (v9 != 138)
          goto LABEL_101;
        *((_DWORD *)this + 4) |= 0x400u;
        v14 = (std::string *)*((_QWORD *)this + 19);
        if (v14 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_98;
        v15 = v69;
        goto LABEL_97;
      case 0x12u:
        if (v9 != 146)
          goto LABEL_101;
        *((_DWORD *)this + 4) |= 0x800u;
        v14 = (std::string *)*((_QWORD *)this + 20);
        if (v14 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_98;
        v15 = v70;
LABEL_97:
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v15, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v14 = *v15;
        TagFallback = v72;
LABEL_98:
        v49 = google::protobuf::internal::InlineGreedyStringParser(v14, TagFallback, (uint64_t)a3);
        goto LABEL_99;
      default:
LABEL_101:
        if ((_DWORD)v9)
          v50 = (v9 & 7) == 4;
        else
          v50 = 1;
        if (v50)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v9 - 1;
          goto LABEL_118;
        }
        v49 = (char *)google::protobuf::internal::UnknownFieldParse(v9, v71, (google::protobuf::internal *)TagFallback, a3);
LABEL_99:
        v72 = v49;
        if (!v49)
          goto LABEL_117;
        continue;
    }
    break;
  }
LABEL_118:
  *((_DWORD *)this + 4) |= v5;
  return TagFallback;
}

unsigned __int8 *siri::dialogengine::CatBinary::node::InternalSerializeWithCachedSizesToArray(siri::dialogengine::CatBinary::node *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  char *v4;
  int v6;
  int v7;
  int i;
  siri::dialogengine::CatBinary::node *v9;
  unsigned int v10;
  unsigned __int8 *v11;
  unsigned int v12;
  _BYTE *v13;
  _BYTE *v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  std::string *v19;
  std::string *v20;
  siri::dialogengine::CatBinary::visual_parameter *v21;
  unsigned int v22;
  char *v23;
  unsigned int v24;
  _BYTE *v25;
  _BYTE *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v31;
  char v32;
  char v33;
  int v34;
  unint64_t v35;
  _BYTE *v36;
  _BYTE *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  char v44;
  std::string v45[2];

  v4 = a2;
  v6 = *((_DWORD *)this + 4);
  if ((v6 & 0x1000) != 0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v31 = *((int *)this + 42);
    *v4 = 8;
    if (v31 > 0x7F)
    {
      v4[1] = v31 | 0x80;
      v35 = v31 >> 7;
      if (v31 >> 14)
      {
        v36 = v4 + 2;
        do
        {
          v37 = v36;
          *v36++ = v35 | 0x80;
          v38 = v35 >> 7;
          v39 = v35 >> 14;
          v35 >>= 7;
        }
        while (v39);
        v4 = v37 + 2;
        *v36 = v38;
        if ((v6 & 1) != 0)
          goto LABEL_77;
      }
      else
      {
        v4[2] = v35;
        v4 += 3;
        if ((v6 & 1) != 0)
          goto LABEL_77;
      }
    }
    else
    {
      v4[1] = v31;
      v4 += 2;
      if ((v6 & 1) != 0)
        goto LABEL_77;
    }
LABEL_3:
    if ((v6 & 2) == 0)
      goto LABEL_4;
    goto LABEL_78;
  }
  if ((v6 & 1) == 0)
    goto LABEL_3;
LABEL_77:
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((_QWORD *)this + 9), v4);
  if ((v6 & 2) == 0)
  {
LABEL_4:
    if ((v6 & 4) == 0)
      goto LABEL_5;
    goto LABEL_79;
  }
LABEL_78:
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, *((_QWORD *)this + 10), v4);
  if ((v6 & 4) == 0)
  {
LABEL_5:
    if ((v6 & 8) == 0)
      goto LABEL_6;
    goto LABEL_80;
  }
LABEL_79:
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 4, *((_QWORD *)this + 11), v4);
  if ((v6 & 8) == 0)
  {
LABEL_6:
    if ((v6 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_81;
  }
LABEL_80:
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 5, *((_QWORD *)this + 12), v4);
  if ((v6 & 0x10) == 0)
  {
LABEL_7:
    if ((v6 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_82;
  }
LABEL_81:
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 6, *((_QWORD *)this + 13), v4);
  if ((v6 & 0x20) == 0)
  {
LABEL_8:
    if ((v6 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_9;
  }
LABEL_82:
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 7, *((_QWORD *)this + 14), v4);
  if ((v6 & 0x40) != 0)
LABEL_9:
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 8, *((_QWORD *)this + 15), v4);
LABEL_10:
  v7 = *((_DWORD *)this + 8);
  if (v7)
  {
    for (i = 0; i != v7; ++i)
    {
      if ((unint64_t)v4 >= *(_QWORD *)a3)
        v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v9 = (siri::dialogengine::CatBinary::node *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<siri::dialogengine::CatBinary::node>::TypeHandler>((uint64_t)this + 24, i);
      *v4 = 74;
      v10 = *((_DWORD *)v9 + 5);
      if (v10 > 0x7F)
      {
        v4[1] = v10 | 0x80;
        v12 = v10 >> 7;
        if (v10 >> 14)
        {
          v13 = v4 + 2;
          do
          {
            v14 = v13;
            *v13++ = v12 | 0x80;
            v15 = v12 >> 7;
            v16 = v12 >> 14;
            v12 >>= 7;
          }
          while (v16);
          v11 = v14 + 2;
          *v13 = v15;
        }
        else
        {
          v4[2] = v12;
          v11 = (unsigned __int8 *)(v4 + 3);
        }
      }
      else
      {
        v4[1] = v10;
        v11 = (unsigned __int8 *)(v4 + 2);
      }
      v4 = (char *)siri::dialogengine::CatBinary::node::InternalSerializeWithCachedSizesToArray(v9, v11, a3);
    }
  }
  if ((v6 & 0x80) != 0)
  {
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 10, *((_QWORD *)this + 16), v4);
    if ((v6 & 0x100) == 0)
    {
LABEL_24:
      if ((v6 & 0x2000) == 0)
        goto LABEL_25;
      goto LABEL_59;
    }
  }
  else if ((v6 & 0x100) == 0)
  {
    goto LABEL_24;
  }
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 11, *((_QWORD *)this + 17), v4);
  if ((v6 & 0x2000) == 0)
  {
LABEL_25:
    if ((v6 & 0x200) == 0)
      goto LABEL_27;
    goto LABEL_26;
  }
LABEL_59:
  if ((unint64_t)v4 >= *(_QWORD *)a3)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v32 = *((_BYTE *)this + 172);
  *v4 = 96;
  v4[1] = v32;
  v4 += 2;
  if ((v6 & 0x200) != 0)
LABEL_26:
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 13, *((_QWORD *)this + 18), v4);
LABEL_27:
  v17 = *((_DWORD *)this + 14);
  if (v17)
  {
    v18 = 0;
    while ((unint64_t)v4 < *(_QWORD *)a3)
    {
      if (v18 < 0)
        goto LABEL_31;
LABEL_32:
      if (*((_DWORD *)this + 14) <= v18)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v45, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1539);
        v20 = google::protobuf::internal::LogMessage::operator<<(v45, "CHECK failed: (index) < (current_size_): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v44, (const char **)&v20->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v45[0].__r_.__value_.__l.__data_);
      }
      v21 = *(siri::dialogengine::CatBinary::visual_parameter **)(*((_QWORD *)this + 8) + 8 * v18 + 8);
      *v4 = 114;
      v22 = *((_DWORD *)v21 + 5);
      if (v22 > 0x7F)
      {
        v4[1] = v22 | 0x80;
        v24 = v22 >> 7;
        if (v22 >> 14)
        {
          v25 = v4 + 2;
          do
          {
            v26 = v25;
            *v25++ = v24 | 0x80;
            v27 = v24 >> 7;
            v28 = v24 >> 14;
            v24 >>= 7;
          }
          while (v28);
          v23 = v26 + 2;
          *v25 = v27;
        }
        else
        {
          v4[2] = v24;
          v23 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v22;
        v23 = v4 + 2;
      }
      v4 = (char *)siri::dialogengine::CatBinary::visual_parameter::InternalSerializeWithCachedSizesToArray(v21, v23, a3);
      if (++v18 == v17)
        goto LABEL_45;
    }
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    if ((v18 & 0x80000000) == 0)
      goto LABEL_32;
LABEL_31:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v45, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v19 = google::protobuf::internal::LogMessage::operator<<(v45, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v44, (const char **)&v19->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v45[0].__r_.__value_.__l.__data_);
    goto LABEL_32;
  }
LABEL_45:
  if ((v6 & 0x4000) != 0)
  {
    if ((unint64_t)v4 >= *(_QWORD *)a3)
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    v33 = *((_BYTE *)this + 173);
    *v4 = 120;
    v4[1] = v33;
    v4 += 2;
    if ((v6 & 0x8000) == 0)
    {
LABEL_47:
      if ((v6 & 0x400) == 0)
        goto LABEL_48;
      goto LABEL_69;
    }
  }
  else if ((v6 & 0x8000) == 0)
  {
    goto LABEL_47;
  }
  if ((unint64_t)v4 >= *(_QWORD *)a3)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v34 = *((_DWORD *)this + 44);
  *(_WORD *)v4 = 389;
  *(_DWORD *)(v4 + 2) = v34;
  v4 += 6;
  if ((v6 & 0x400) == 0)
  {
LABEL_48:
    if ((v6 & 0x800) == 0)
      goto LABEL_50;
    goto LABEL_49;
  }
LABEL_69:
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 17, *((_QWORD *)this + 19), v4);
  if ((v6 & 0x800) != 0)
LABEL_49:
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 18, *((_QWORD *)this + 20), v4);
LABEL_50:
  v29 = *((_QWORD *)this + 1);
  if ((v29 & 1) == 0)
    return (unsigned __int8 *)v4;
  v40 = v29 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v40 + 23) < 0)
  {
    v42 = *(void **)v40;
    v41 = *(_QWORD *)(v40 + 8);
  }
  else
  {
    LODWORD(v41) = *(unsigned __int8 *)(v40 + 23);
    v42 = (void *)v40;
  }
  if (*(_QWORD *)a3 - (_QWORD)v4 >= (int)v41)
  {
    v43 = (int)v41;
    memcpy(v4, v42, (int)v41);
    v4 += v43;
    return (unsigned __int8 *)v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v42, v41, (unsigned __int8 *)v4);
}

void sub_1BF959F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<siri::dialogengine::CatBinary::node>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1539);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_1BF95A028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

siri::dialogengine::CatBinary::node *google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::node>(google::protobuf::internal::ArenaImpl *this)
{
  siri::dialogengine::CatBinary::node *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (siri::dialogengine::CatBinary::node *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0xB8uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<siri::dialogengine::CatBinary::node>);
    siri::dialogengine::CatBinary::node::node(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (siri::dialogengine::CatBinary::node *)operator new();
    siri::dialogengine::CatBinary::node::node(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BF95A0CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C40173E4A0ELL);
  _Unwind_Resume(a1);
}

char *google::protobuf::internal::ParseContext::ParseMessage<siri::dialogengine::CatBinary::node>(google::protobuf::internal::EpsCopyInputStream *this, siri::dialogengine::CatBinary::node *a2, google::protobuf::internal *a3)
{
  int v6;
  const char *v7;
  char *v8;
  char *result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = *(char *)a3;
  v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result)
      return result;
    v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    v8 = (char *)a3 + 1;
  }
  v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  v12 = *((_DWORD *)this + 22);
  v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = siri::dialogengine::CatBinary::node::_InternalParse(a2, v8, this);
  if (!result)
    return result;
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20))
    return 0;
  v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(_QWORD *)this = *((_QWORD *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

uint64_t google::protobuf::internal::arena_destruct_object<siri::dialogengine::CatBinary::node>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void siri::dialogengine::CatBinary::node::MergeFrom(siri::dialogengine::CatBinary::node *this, const siri::dialogengine::CatBinary::node *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  std::string *v7;
  const std::string *v8;
  std::string *v9;
  const std::string *v10;
  std::string *v11;
  const std::string *v12;
  std::string *v13;
  const std::string *v14;
  std::string *v15;
  const std::string *v16;
  std::string *v17;
  const std::string *v18;
  std::string *v19;
  const std::string *v20;
  std::string *v21;
  const std::string *v22;
  std::string *v23;
  const std::string *v24;
  std::string *v25;
  const std::string *v26;
  std::string *v27;
  const std::string *v28;
  std::string *v29;
  const std::string *v30;
  char v31;
  std::string v32[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v32, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/CatBinary.pb.cc", 3284);
    v4 = google::protobuf::internal::LogMessage::operator<<(v32, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v31, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v32[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::CatBinary::node>::TypeHandler>((int **)this + 3, (uint64_t)a2 + 24);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::CatBinary::visual_parameter>::TypeHandler>((int **)this + 6, (uint64_t)a2 + 48);
  v6 = *((_DWORD *)a2 + 4);
  if ((_BYTE)v6)
  {
    if ((v6 & 1) != 0)
    {
      v7 = (std::string *)*((_QWORD *)this + 9);
      *((_DWORD *)this + 4) |= 1u;
      v8 = (const std::string *)*((_QWORD *)a2 + 9);
      if (v7 != v8)
      {
        if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 9, (uint64_t)v8);
          if ((v6 & 2) == 0)
            goto LABEL_17;
LABEL_11:
          v9 = (std::string *)*((_QWORD *)this + 10);
          *((_DWORD *)this + 4) |= 2u;
          v10 = (const std::string *)*((_QWORD *)a2 + 10);
          if (v9 != v10)
          {
            if (v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 10, (uint64_t)v10);
            else
              std::string::operator=(v9, v10);
          }
LABEL_17:
          if ((v6 & 4) != 0)
          {
            v11 = (std::string *)*((_QWORD *)this + 11);
            *((_DWORD *)this + 4) |= 4u;
            v12 = (const std::string *)*((_QWORD *)a2 + 11);
            if (v11 != v12)
            {
              if (v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              {
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 11, (uint64_t)v12);
                if ((v6 & 8) == 0)
                  goto LABEL_28;
LABEL_22:
                v13 = (std::string *)*((_QWORD *)this + 12);
                *((_DWORD *)this + 4) |= 8u;
                v14 = (const std::string *)*((_QWORD *)a2 + 12);
                if (v13 != v14)
                {
                  if (v13 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 12, (uint64_t)v14);
                  else
                    std::string::operator=(v13, v14);
                }
LABEL_28:
                if ((v6 & 0x10) != 0)
                {
                  v15 = (std::string *)*((_QWORD *)this + 13);
                  *((_DWORD *)this + 4) |= 0x10u;
                  v16 = (const std::string *)*((_QWORD *)a2 + 13);
                  if (v15 != v16)
                  {
                    if (v15 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                    {
                      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 13, (uint64_t)v16);
                      if ((v6 & 0x20) == 0)
                        goto LABEL_39;
LABEL_33:
                      v17 = (std::string *)*((_QWORD *)this + 14);
                      *((_DWORD *)this + 4) |= 0x20u;
                      v18 = (const std::string *)*((_QWORD *)a2 + 14);
                      if (v17 != v18)
                      {
                        if (v17 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 14, (uint64_t)v18);
                        else
                          std::string::operator=(v17, v18);
                      }
LABEL_39:
                      if ((v6 & 0x40) != 0)
                      {
                        v19 = (std::string *)*((_QWORD *)this + 15);
                        *((_DWORD *)this + 4) |= 0x40u;
                        v20 = (const std::string *)*((_QWORD *)a2 + 15);
                        if (v19 != v20)
                        {
                          if (v19 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                          {
                            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 15, (uint64_t)v20);
                            if ((v6 & 0x80) == 0)
                              goto LABEL_50;
                            goto LABEL_44;
                          }
                          std::string::operator=(v19, v20);
                        }
                      }
                      if ((v6 & 0x80) == 0)
                        goto LABEL_50;
LABEL_44:
                      v21 = (std::string *)*((_QWORD *)this + 16);
                      *((_DWORD *)this + 4) |= 0x80u;
                      v22 = (const std::string *)*((_QWORD *)a2 + 16);
                      if (v21 != v22)
                      {
                        if (v21 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 16, (uint64_t)v22);
                        else
                          std::string::operator=(v21, v22);
                      }
                      goto LABEL_50;
                    }
                    std::string::operator=(v15, v16);
                  }
                }
                if ((v6 & 0x20) == 0)
                  goto LABEL_39;
                goto LABEL_33;
              }
              std::string::operator=(v11, v12);
            }
          }
          if ((v6 & 8) == 0)
            goto LABEL_28;
          goto LABEL_22;
        }
        std::string::operator=(v7, v8);
      }
    }
    if ((v6 & 2) == 0)
      goto LABEL_17;
    goto LABEL_11;
  }
LABEL_50:
  if ((v6 & 0xFF00) == 0)
    return;
  if ((v6 & 0x100) == 0
    || (v23 = (std::string *)*((_QWORD *)this + 17),
        *((_DWORD *)this + 4) |= 0x100u,
        v24 = (const std::string *)*((_QWORD *)a2 + 17),
        v23 == v24))
  {
LABEL_55:
    if ((v6 & 0x200) == 0)
      goto LABEL_62;
    goto LABEL_56;
  }
  if (v23 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
  {
    std::string::operator=(v23, v24);
    goto LABEL_55;
  }
  google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 17, (uint64_t)v24);
  if ((v6 & 0x200) == 0)
    goto LABEL_62;
LABEL_56:
  v25 = (std::string *)*((_QWORD *)this + 18);
  *((_DWORD *)this + 4) |= 0x200u;
  v26 = (const std::string *)*((_QWORD *)a2 + 18);
  if (v25 != v26)
  {
    if (v25 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 18, (uint64_t)v26);
    else
      std::string::operator=(v25, v26);
  }
LABEL_62:
  if ((v6 & 0x400) != 0)
  {
    v27 = (std::string *)*((_QWORD *)this + 19);
    *((_DWORD *)this + 4) |= 0x400u;
    v28 = (const std::string *)*((_QWORD *)a2 + 19);
    if (v27 != v28)
    {
      if (v27 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 19, (uint64_t)v28);
        if ((v6 & 0x800) == 0)
          goto LABEL_73;
        goto LABEL_67;
      }
      std::string::operator=(v27, v28);
    }
  }
  if ((v6 & 0x800) == 0)
    goto LABEL_73;
LABEL_67:
  v29 = (std::string *)*((_QWORD *)this + 20);
  *((_DWORD *)this + 4) |= 0x800u;
  v30 = (const std::string *)*((_QWORD *)a2 + 20);
  if (v29 != v30)
  {
    if (v29 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 20, (uint64_t)v30);
    else
      std::string::operator=(v29, v30);
  }
LABEL_73:
  if ((v6 & 0x1000) != 0)
  {
    *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
    if ((v6 & 0x2000) == 0)
    {
LABEL_75:
      if ((v6 & 0x4000) == 0)
        goto LABEL_76;
LABEL_82:
      *((_BYTE *)this + 173) = *((_BYTE *)a2 + 173);
      if ((v6 & 0x8000) == 0)
        goto LABEL_78;
      goto LABEL_77;
    }
  }
  else if ((v6 & 0x2000) == 0)
  {
    goto LABEL_75;
  }
  *((_BYTE *)this + 172) = *((_BYTE *)a2 + 172);
  if ((v6 & 0x4000) != 0)
    goto LABEL_82;
LABEL_76:
  if ((v6 & 0x8000) != 0)
LABEL_77:
    *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
LABEL_78:
  *((_DWORD *)this + 4) |= v6;
}

void sub_1BF95A608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::CatBinary::node>::TypeHandler>(int **this, uint64_t a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  siri::dialogengine::CatBinary::node **v13;
  siri::dialogengine::CatBinary::node **v14;
  siri::dialogengine::CatBinary::node *v15;
  siri::dialogengine::CatBinary::node *v16;
  siri::dialogengine::CatBinary::node *v17;
  google::protobuf::internal::ArenaImpl *v18;
  int v19;
  uint64_t v20;
  siri::dialogengine::CatBinary::node **v21;
  siri::dialogengine::CatBinary::node **v22;
  siri::dialogengine::CatBinary::node *v23;
  siri::dialogengine::CatBinary::node *v24;
  int v25;
  int *v26;
  char v27;
  std::string v28[2];

  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    v9 = *this[2];
    v10 = *((int *)this + 2);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (siri::dialogengine::CatBinary::node **)(v6 + 8);
      v14 = (siri::dialogengine::CatBinary::node **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<siri::dialogengine::CatBinary::node>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (siri::dialogengine::CatBinary::node **)((char *)v8 + v20);
      v22 = (siri::dialogengine::CatBinary::node **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::node>(v18);
        google::protobuf::internal::GenericTypeHandler<siri::dialogengine::CatBinary::node>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25)
      *v26 = v25;
  }
}

void sub_1BF95A774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::CatBinary::visual_parameter>::TypeHandler>(int **this, uint64_t a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  siri::dialogengine::CatBinary::visual_parameter **v13;
  siri::dialogengine::CatBinary::visual_parameter **v14;
  siri::dialogengine::CatBinary::visual_parameter *v15;
  siri::dialogengine::CatBinary::visual_parameter *v16;
  siri::dialogengine::CatBinary::visual_parameter *v17;
  google::protobuf::internal::ArenaImpl *v18;
  int v19;
  uint64_t v20;
  siri::dialogengine::CatBinary::visual_parameter **v21;
  siri::dialogengine::CatBinary::visual_parameter **v22;
  siri::dialogengine::CatBinary::visual_parameter *v23;
  siri::dialogengine::CatBinary::visual_parameter *v24;
  int v25;
  int *v26;
  char v27;
  std::string v28[2];

  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    v9 = *this[2];
    v10 = *((int *)this + 2);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (siri::dialogengine::CatBinary::visual_parameter **)(v6 + 8);
      v14 = (siri::dialogengine::CatBinary::visual_parameter **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<siri::dialogengine::CatBinary::visual_parameter>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (siri::dialogengine::CatBinary::visual_parameter **)((char *)v8 + v20);
      v22 = (siri::dialogengine::CatBinary::visual_parameter **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::visual_parameter>(v18);
        google::protobuf::internal::GenericTypeHandler<siri::dialogengine::CatBinary::visual_parameter>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25)
      *v26 = v25;
  }
}

void sub_1BF95A8E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<siri::dialogengine::CatBinary::visual_parameter>::Merge(siri::dialogengine::CatBinary::visual_parameter *a1, siri::dialogengine::CatBinary::visual_parameter *this)
{
  siri::dialogengine::CatBinary::visual_parameter::MergeFrom(this, a1);
}

uint64_t google::protobuf::internal::GenericTypeHandler<siri::dialogengine::CatBinary::node>::Merge(siri::dialogengine::CatBinary::node *a1, siri::dialogengine::CatBinary::node *this)
{
  return siri::dialogengine::CatBinary::node::MergeFrom(this, a1);
}

BOOL google::protobuf::internal::AllAreInitialized<google::protobuf::RepeatedPtrField<siri::dialogengine::CatBinary::node>>(uint64_t a1)
{
  int v2;
  int v3;
  BOOL v4;
  uint64_t v5;

  v2 = *(_DWORD *)(a1 + 8);
  do
  {
    v3 = v2;
    v4 = __OFSUB__(v2--, 1);
    if (v2 < 0 != v4)
      break;
    v5 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<siri::dialogengine::CatBinary::node>::TypeHandler>(a1, v2);
    if ((*(_BYTE *)(v5 + 17) & 0x10) == 0)
      break;
  }
  while ((google::protobuf::internal::AllAreInitialized<google::protobuf::RepeatedPtrField<siri::dialogengine::CatBinary::node>>(v5 + 24) & 1) != 0);
  return v3 < 1;
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<siri::dialogengine::CatBinary::node>::TypeHandler>(uint64_t a1)
{
  uint64_t v1;
  siri::dialogengine::CatBinary::node **v3;
  siri::dialogengine::CatBinary::node *v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v1)
  {
    v3 = (siri::dialogengine::CatBinary::node **)(*(_QWORD *)(a1 + 16) + 8);
    do
    {
      v4 = *v3++;
      siri::dialogengine::CatBinary::node::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_1BF95AA08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void InitDefaultsscc_info_condition_CatBinary_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/CatBinary.pb.cc", a4);
  siri::dialogengine::CatBinary::condition::condition((siri::dialogengine::CatBinary::condition *)&siri::dialogengine::CatBinary::_condition_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&siri::dialogengine::CatBinary::_condition_default_instance_, v4);
}

void InitDefaultsscc_info_condition_entry_CatBinary_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/CatBinary.pb.cc", a4);
  siri::dialogengine::CatBinary::condition_entry::condition_entry((siri::dialogengine::CatBinary::condition_entry *)&siri::dialogengine::CatBinary::_condition_entry_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&siri::dialogengine::CatBinary::_condition_entry_default_instance_, v4);
}

siri::dialogengine::CatBinary::condition_entry *siri::dialogengine::CatBinary::condition_entry::condition_entry(siri::dialogengine::CatBinary::condition_entry *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)this = &off_1E792F6A8;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  if (atomic_load(scc_info_condition_entry_CatBinary_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_condition_entry_CatBinary_2eproto);
  *((_QWORD *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 7) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 8) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 9) = &google::protobuf::internal::fixed_address_empty_string;
  *((_DWORD *)this + 20) = 0;
  return this;
}

void sub_1BF95AE30(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v1 + 24));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

void siri::dialogengine::CatBinary::condition_entry::~condition_entry(siri::dialogengine::CatBinary::condition_entry *this)
{
  siri::dialogengine::CatBinary::condition_entry::~condition_entry(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;

  *(_QWORD *)this = &off_1E792F6A8;
  v2 = *((_QWORD *)this + 6);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 7);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1C3B8D890](v4, 0x1012C40EC159624);
  }
  v6 = *((_QWORD *)this + 8);
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
  {
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    MEMORY[0x1C3B8D890](v6, 0x1012C40EC159624);
  }
  v8 = *((_QWORD *)this + 9);
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v8 != 0)
  {
    if (*(char *)(v8 + 23) < 0)
      operator delete(*(void **)v8);
    MEMORY[0x1C3B8D890](v8, 0x1012C40EC159624);
  }
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((siri::dialogengine::CatBinary::condition_entry *)((char *)this + 24));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *siri::dialogengine::CatBinary::condition_entry::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "siri.dialogengine.CatBinary.condition_entry");
}

siri::dialogengine::CatBinary::condition_entry *siri::dialogengine::CatBinary::condition_entry::New(siri::dialogengine::CatBinary::condition_entry *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::condition_entry>(0);
}

siri::dialogengine::CatBinary::condition_entry *siri::dialogengine::CatBinary::condition_entry::New(siri::dialogengine::CatBinary::condition_entry *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::condition_entry>(a2);
}

void siri::dialogengine::CatBinary::condition_entry::Clear(siri::dialogengine::CatBinary::condition_entry *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  google::protobuf::internal::InternalMetadataWithArenaLite *v7;
  char v8;

  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<siri::dialogengine::CatBinary::condition_entry>::TypeHandler>((char *)this + 24);
  v2 = *((_DWORD *)this + 4);
  if ((v2 & 0xF) == 0)
    goto LABEL_22;
  if ((v2 & 1) == 0)
  {
    if ((v2 & 2) == 0)
      goto LABEL_4;
LABEL_11:
    v4 = *((_QWORD *)this + 7);
    if (*(char *)(v4 + 23) < 0)
    {
      **(_BYTE **)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      if ((v2 & 4) != 0)
        goto LABEL_15;
    }
    else
    {
      *(_BYTE *)v4 = 0;
      *(_BYTE *)(v4 + 23) = 0;
      if ((v2 & 4) != 0)
        goto LABEL_15;
    }
LABEL_5:
    if ((v2 & 8) == 0)
      goto LABEL_22;
LABEL_19:
    v6 = *((_QWORD *)this + 9);
    if (*(char *)(v6 + 23) < 0)
    {
      **(_BYTE **)v6 = 0;
      *(_QWORD *)(v6 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v6 = 0;
      *(_BYTE *)(v6 + 23) = 0;
    }
    goto LABEL_22;
  }
  v3 = *((_QWORD *)this + 6);
  if (*(char *)(v3 + 23) < 0)
  {
    **(_BYTE **)v3 = 0;
    *(_QWORD *)(v3 + 8) = 0;
    if ((v2 & 2) != 0)
      goto LABEL_11;
  }
  else
  {
    *(_BYTE *)v3 = 0;
    *(_BYTE *)(v3 + 23) = 0;
    if ((v2 & 2) != 0)
      goto LABEL_11;
  }
LABEL_4:
  if ((v2 & 4) == 0)
    goto LABEL_5;
LABEL_15:
  v5 = *((_QWORD *)this + 8);
  if (*(char *)(v5 + 23) < 0)
  {
    **(_BYTE **)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    if ((v2 & 8) == 0)
      goto LABEL_22;
    goto LABEL_19;
  }
  *(_BYTE *)v5 = 0;
  *(_BYTE *)(v5 + 23) = 0;
  if ((v2 & 8) != 0)
    goto LABEL_19;
LABEL_22:
  v8 = *((_BYTE *)this + 8);
  v7 = (siri::dialogengine::CatBinary::condition_entry *)((char *)this + 8);
  *((_DWORD *)v7 + 18) = 0;
  *((_DWORD *)v7 + 2) = 0;
  if ((v8 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v7);
}

BOOL siri::dialogengine::CatBinary::condition_entry::IsInitialized(siri::dialogengine::CatBinary::condition_entry *this)
{
  return (*((_BYTE *)this + 16) & 0x10) != 0
      && google::protobuf::internal::AllAreInitialized<google::protobuf::RepeatedPtrField<siri::dialogengine::CatBinary::condition_entry>>((uint64_t)this + 24);
}

void siri::dialogengine::CatBinary::condition_entry::CheckTypeAndMergeFrom(siri::dialogengine::CatBinary::condition_entry *this, const google::protobuf::MessageLite *lpsrc)
{
  siri::dialogengine::CatBinary::condition_entry::MergeFrom(this, lpsrc);
}

uint64_t siri::dialogengine::CatBinary::condition_entry::ByteSizeLong(siri::dialogengine::CatBinary::condition_entry *this)
{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  siri::dialogengine::CatBinary::condition_entry **v8;
  uint64_t v9;
  siri::dialogengine::CatBinary::condition_entry *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;

  v2 = *((_DWORD *)this + 4);
  if ((v2 & 0x10) != 0)
  {
    v4 = *((_DWORD *)this + 20);
    if (v4 < 0)
      v3 = 11;
    else
      v3 = ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  else
  {
    v3 = 0;
  }
  v5 = *((int *)this + 8);
  v6 = v3 + v5;
  v7 = *((_QWORD *)this + 5);
  if (v7)
    v8 = (siri::dialogengine::CatBinary::condition_entry **)(v7 + 8);
  else
    v8 = 0;
  if ((_DWORD)v5)
  {
    v9 = 8 * v5;
    do
    {
      v10 = *v8++;
      v11 = siri::dialogengine::CatBinary::condition_entry::ByteSizeLong(v10);
      v6 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6);
      v9 -= 8;
    }
    while (v9);
    v2 = *((_DWORD *)this + 4);
  }
  if ((v2 & 0xF) == 0)
    goto LABEL_21;
  if ((v2 & 1) == 0)
  {
    if ((v2 & 2) == 0)
      goto LABEL_16;
LABEL_26:
    v20 = *((_QWORD *)this + 7);
    v21 = *(unsigned __int8 *)(v20 + 23);
    v22 = *(_QWORD *)(v20 + 8);
    if ((v21 & 0x80u) == 0)
      v22 = v21;
    v6 += v22 + ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v2 & 4) == 0)
    {
LABEL_17:
      if ((v2 & 8) == 0)
        goto LABEL_21;
      goto LABEL_18;
    }
    goto LABEL_29;
  }
  v17 = *((_QWORD *)this + 6);
  v18 = *(unsigned __int8 *)(v17 + 23);
  v19 = *(_QWORD *)(v17 + 8);
  if ((v18 & 0x80u) == 0)
    v19 = v18;
  v6 += v19 + ((9 * (__clz(v19 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v2 & 2) != 0)
    goto LABEL_26;
LABEL_16:
  if ((v2 & 4) == 0)
    goto LABEL_17;
LABEL_29:
  v23 = *((_QWORD *)this + 8);
  v24 = *(unsigned __int8 *)(v23 + 23);
  v25 = *(_QWORD *)(v23 + 8);
  if ((v24 & 0x80u) == 0)
    v25 = v24;
  v6 += v25 + ((9 * (__clz(v25 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v2 & 8) != 0)
  {
LABEL_18:
    v12 = *((_QWORD *)this + 9);
    v13 = *(unsigned __int8 *)(v12 + 23);
    v14 = *(_QWORD *)(v12 + 8);
    if ((v13 & 0x80u) == 0)
      v14 = v13;
    v6 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_21:
  v15 = *((_QWORD *)this + 1);
  if ((v15 & 1) != 0)
  {
    v26 = v15 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v26 + 23) < 0)
      v27 = *(_QWORD *)(v26 + 8);
    else
      v27 = *(unsigned __int8 *)(v26 + 23);
    v6 += v27;
  }
  *((_DWORD *)this + 5) = v6;
  return v6;
}

uint64_t siri::dialogengine::CatBinary::condition_entry::GetCachedSize(siri::dialogengine::CatBinary::condition_entry *this)
{
  return *((unsigned int *)this + 5);
}

google::protobuf::internal *siri::dialogengine::CatBinary::condition_entry::_InternalParse(siri::dialogengine::CatBinary::condition_entry *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  unsigned int *v6;
  std::string **v7;
  std::string **v8;
  std::string **v9;
  uint64_t *v10;
  google::protobuf::internal *TagFallback;
  const char *v12;
  google::protobuf::internal *v13;
  unint64_t v14;
  int v15;
  std::string *v16;
  unint64_t v17;
  google::protobuf::internal *v18;
  int *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  siri::dialogengine::CatBinary::condition_entry *v23;
  uint64_t v24;
  uint64_t v25;
  google::protobuf::internal *v26;
  BOOL v27;
  std::string *v28;
  std::string *v29;
  unint64_t v31;
  google::protobuf::internal *v32;

  v32 = a2;
  v5 = (std::string **)((char *)this + 72);
  v6 = (unsigned int *)((char *)this + 24);
  v7 = (std::string **)((char *)this + 64);
  v8 = (std::string **)((char *)this + 56);
  v9 = (std::string **)((char *)this + 48);
  v10 = (uint64_t *)((char *)this + 8);
LABEL_2:
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v32, *((_DWORD *)a3 + 23)) & 1) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v32 + 1);
      LODWORD(v12) = *(unsigned __int8 *)v32;
      if (*(char *)v32 < 0)
      {
        v12 = (const char *)(v12 + (*(unsigned __int8 *)TagFallback << 7) - 128);
        if (*(char *)TagFallback < 0)
        {
          TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v32, v12);
          v32 = TagFallback;
          if (!TagFallback)
            return TagFallback;
LABEL_7:
          switch(v12 >> 3)
          {
            case 1u:
              if (v12 != 8)
                goto LABEL_44;
              v13 = (google::protobuf::internal *)((char *)TagFallback + 1);
              v14 = *(unsigned __int8 *)TagFallback;
              if ((*(char *)TagFallback & 0x80000000) == 0)
                goto LABEL_12;
              v15 = *(char *)v13;
              v14 = v14 + (v15 << 7) - 128;
              if (v15 < 0)
              {
                v32 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v14);
                if (!v32)
                  return 0;
              }
              else
              {
                v13 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_12:
                v32 = v13;
              }
              if (v14 > 4)
              {
                if ((*v10 & 1) != 0)
                {
                  v28 = (std::string *)(*v10 & 0xFFFFFFFFFFFFFFFELL);
                }
                else
                {
                  v31 = v14;
                  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v10);
                  v14 = v31;
                  v28 = v29;
                }
                google::protobuf::internal::WriteVarint(1, v14, v28);
              }
              else
              {
                *((_DWORD *)this + 4) |= 0x10u;
                *((_DWORD *)this + 20) = v14;
              }
              continue;
            case 2u:
              if (v12 != 18)
                goto LABEL_44;
              *((_DWORD *)this + 4) |= 1u;
              v16 = (std::string *)*((_QWORD *)this + 6);
              if (v16 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_41;
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v9, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              v16 = *v9;
              goto LABEL_40;
            case 3u:
              if (v12 != 26)
                goto LABEL_44;
              *((_DWORD *)this + 4) |= 2u;
              v16 = (std::string *)*((_QWORD *)this + 7);
              if (v16 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_41;
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v8, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              v16 = *v8;
              goto LABEL_40;
            case 4u:
              if (v12 != 34)
                goto LABEL_44;
              *((_DWORD *)this + 4) |= 4u;
              v16 = (std::string *)*((_QWORD *)this + 8);
              if (v16 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_41;
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v7, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              v16 = *v7;
              goto LABEL_40;
            case 5u:
              if (v12 != 42)
                goto LABEL_44;
              v17 = (unint64_t)TagFallback - 1;
              break;
            case 6u:
              if (v12 != 50)
                goto LABEL_44;
              *((_DWORD *)this + 4) |= 8u;
              v16 = (std::string *)*((_QWORD *)this + 9);
              if (v16 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_41;
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              v16 = *v5;
LABEL_40:
              TagFallback = v32;
LABEL_41:
              v26 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v16, (std::string::value_type *)TagFallback, (uint64_t)a3);
              goto LABEL_42;
            default:
LABEL_44:
              if ((_DWORD)v12)
                v27 = (v12 & 7) == 4;
              else
                v27 = 1;
              if (v27)
              {
                *((_DWORD *)a3 + 20) = (_DWORD)v12 - 1;
                return TagFallback;
              }
              v26 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v12, v10, TagFallback, a3);
LABEL_42:
              v32 = v26;
              if (!v26)
                return 0;
              continue;
          }
          while (1)
          {
            v18 = (google::protobuf::internal *)(v17 + 1);
            v32 = (google::protobuf::internal *)(v17 + 1);
            v19 = (int *)*((_QWORD *)this + 5);
            if (!v19)
              break;
            v20 = *((int *)this + 8);
            v21 = *v19;
            if ((int)v20 >= *v19)
            {
              if (v21 == *((_DWORD *)this + 9))
              {
LABEL_31:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v21 + 1);
                v19 = (int *)*((_QWORD *)this + 5);
                v21 = *v19;
              }
              *v19 = v21 + 1;
              v23 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::condition_entry>(*((google::protobuf::internal::ArenaImpl **)this + 3));
              LODWORD(v22) = (_DWORD)v23;
              v24 = *((_QWORD *)this + 5);
              v25 = *((int *)this + 8);
              *((_DWORD *)this + 8) = v25 + 1;
              *(_QWORD *)(v24 + 8 * v25 + 8) = v23;
              v18 = v32;
              goto LABEL_33;
            }
            *((_DWORD *)this + 8) = v20 + 1;
            v22 = *(_QWORD *)&v19[2 * v20 + 2];
LABEL_33:
            v17 = google::protobuf::internal::ParseContext::ParseMessage<siri::dialogengine::CatBinary::condition_entry>(a3, v22, v18);
            v32 = (google::protobuf::internal *)v17;
            if (!v17)
              return 0;
            if (*(_QWORD *)a3 <= v17 || *(_BYTE *)v17 != 42)
              goto LABEL_2;
          }
          v21 = *((_DWORD *)this + 9);
          goto LABEL_31;
        }
        TagFallback = (google::protobuf::internal *)((char *)v32 + 2);
      }
      v32 = TagFallback;
      goto LABEL_7;
    }
    return v32;
  }
}

unsigned __int8 *siri::dialogengine::CatBinary::condition_entry::InternalSerializeWithCachedSizesToArray(siri::dialogengine::CatBinary::condition_entry *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  char *v4;
  int v6;
  int v7;
  int i;
  siri::dialogengine::CatBinary::condition_entry *v9;
  unsigned int v10;
  unsigned __int8 *v11;
  unsigned int v12;
  _BYTE *v13;
  _BYTE *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  _BYTE *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;

  v4 = a2;
  v6 = *((_DWORD *)this + 4);
  if ((v6 & 0x10) != 0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v19 = *((int *)this + 20);
    *v4 = 8;
    if (v19 > 0x7F)
    {
      v4[1] = v19 | 0x80;
      v20 = v19 >> 7;
      if (v19 >> 14)
      {
        v21 = v4 + 2;
        do
        {
          v22 = v21;
          *v21++ = v20 | 0x80;
          v23 = v20 >> 7;
          v24 = v20 >> 14;
          v20 >>= 7;
        }
        while (v24);
        v4 = v22 + 2;
        *v21 = v23;
        if ((v6 & 1) != 0)
          goto LABEL_33;
      }
      else
      {
        v4[2] = v20;
        v4 += 3;
        if ((v6 & 1) != 0)
          goto LABEL_33;
      }
    }
    else
    {
      v4[1] = v19;
      v4 += 2;
      if ((v6 & 1) != 0)
        goto LABEL_33;
    }
LABEL_3:
    if ((v6 & 2) == 0)
      goto LABEL_4;
    goto LABEL_34;
  }
  if ((v6 & 1) == 0)
    goto LABEL_3;
LABEL_33:
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((_QWORD *)this + 6), v4);
  if ((v6 & 2) == 0)
  {
LABEL_4:
    if ((v6 & 4) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_34:
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, *((_QWORD *)this + 7), v4);
  if ((v6 & 4) != 0)
LABEL_5:
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 4, *((_QWORD *)this + 8), v4);
LABEL_6:
  v7 = *((_DWORD *)this + 8);
  if (v7)
  {
    for (i = 0; i != v7; ++i)
    {
      if ((unint64_t)v4 >= *(_QWORD *)a3)
        v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v9 = (siri::dialogengine::CatBinary::condition_entry *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<siri::dialogengine::CatBinary::condition_entry>::TypeHandler>((uint64_t)this + 24, i);
      *v4 = 42;
      v10 = *((_DWORD *)v9 + 5);
      if (v10 > 0x7F)
      {
        v4[1] = v10 | 0x80;
        v12 = v10 >> 7;
        if (v10 >> 14)
        {
          v13 = v4 + 2;
          do
          {
            v14 = v13;
            *v13++ = v12 | 0x80;
            v15 = v12 >> 7;
            v16 = v12 >> 14;
            v12 >>= 7;
          }
          while (v16);
          v11 = v14 + 2;
          *v13 = v15;
        }
        else
        {
          v4[2] = v12;
          v11 = (unsigned __int8 *)(v4 + 3);
        }
      }
      else
      {
        v4[1] = v10;
        v11 = (unsigned __int8 *)(v4 + 2);
      }
      v4 = (char *)siri::dialogengine::CatBinary::condition_entry::InternalSerializeWithCachedSizesToArray(v9, v11, a3);
    }
  }
  if ((v6 & 8) != 0)
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 6, *((_QWORD *)this + 9), v4);
  v17 = *((_QWORD *)this + 1);
  if ((v17 & 1) == 0)
    return (unsigned __int8 *)v4;
  v25 = v17 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v25 + 23) < 0)
  {
    v27 = *(void **)v25;
    v26 = *(_QWORD *)(v25 + 8);
  }
  else
  {
    LODWORD(v26) = *(unsigned __int8 *)(v25 + 23);
    v27 = (void *)v25;
  }
  if (*(_QWORD *)a3 - (_QWORD)v4 >= (int)v26)
  {
    v28 = (int)v26;
    memcpy(v4, v27, (int)v26);
    v4 += v28;
    return (unsigned __int8 *)v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v27, v26, (unsigned __int8 *)v4);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<siri::dialogengine::CatBinary::condition_entry>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1539);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_1BF95B8EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

siri::dialogengine::CatBinary::condition_entry *google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::condition_entry>(google::protobuf::internal::ArenaImpl *this)
{
  siri::dialogengine::CatBinary::condition_entry *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (siri::dialogengine::CatBinary::condition_entry *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x58uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<siri::dialogengine::CatBinary::condition_entry>);
    siri::dialogengine::CatBinary::condition_entry::condition_entry(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (siri::dialogengine::CatBinary::condition_entry *)operator new();
    siri::dialogengine::CatBinary::condition_entry::condition_entry(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BF95B990(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C4076CC3382);
  _Unwind_Resume(a1);
}

char *google::protobuf::internal::ParseContext::ParseMessage<siri::dialogengine::CatBinary::condition_entry>(google::protobuf::internal::EpsCopyInputStream *this, siri::dialogengine::CatBinary::condition_entry *a2, google::protobuf::internal *a3)
{
  int v6;
  const char *v7;
  char *v8;
  char *result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = *(char *)a3;
  v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result)
      return result;
    v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    v8 = (char *)a3 + 1;
  }
  v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  v12 = *((_DWORD *)this + 22);
  v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = (char *)siri::dialogengine::CatBinary::condition_entry::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result)
    return result;
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20))
    return 0;
  v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(_QWORD *)this = *((_QWORD *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

uint64_t google::protobuf::internal::arena_destruct_object<siri::dialogengine::CatBinary::condition_entry>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void siri::dialogengine::CatBinary::condition_entry::MergeFrom(siri::dialogengine::CatBinary::condition_entry *this, const siri::dialogengine::CatBinary::condition_entry *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  std::string *v7;
  const std::string *v8;
  std::string *v9;
  const std::string *v10;
  std::string *v11;
  const std::string *v12;
  std::string *v13;
  const std::string *v14;
  char v15;
  std::string v16[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/CatBinary.pb.cc", 2305);
    v4 = google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v15, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::CatBinary::condition_entry>::TypeHandler>((int **)this + 3, (uint64_t)a2 + 24);
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 0x1F) != 0)
  {
    if ((v6 & 1) != 0)
    {
      v7 = (std::string *)*((_QWORD *)this + 6);
      *((_DWORD *)this + 4) |= 1u;
      v8 = (const std::string *)*((_QWORD *)a2 + 6);
      if (v7 != v8)
      {
        if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, (uint64_t)v8);
          if ((v6 & 2) == 0)
            goto LABEL_17;
LABEL_11:
          v9 = (std::string *)*((_QWORD *)this + 7);
          *((_DWORD *)this + 4) |= 2u;
          v10 = (const std::string *)*((_QWORD *)a2 + 7);
          if (v9 != v10)
          {
            if (v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 7, (uint64_t)v10);
            else
              std::string::operator=(v9, v10);
          }
LABEL_17:
          if ((v6 & 4) != 0)
          {
            v11 = (std::string *)*((_QWORD *)this + 8);
            *((_DWORD *)this + 4) |= 4u;
            v12 = (const std::string *)*((_QWORD *)a2 + 8);
            if (v11 != v12)
            {
              if (v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              {
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 8, (uint64_t)v12);
                if ((v6 & 8) != 0)
                {
LABEL_22:
                  v13 = (std::string *)*((_QWORD *)this + 9);
                  *((_DWORD *)this + 4) |= 8u;
                  v14 = (const std::string *)*((_QWORD *)a2 + 9);
                  if (v13 != v14)
                  {
                    if (v13 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 9, (uint64_t)v14);
                    else
                      std::string::operator=(v13, v14);
                  }
                }
LABEL_28:
                if ((v6 & 0x10) != 0)
                  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
                *((_DWORD *)this + 4) |= v6;
                return;
              }
              std::string::operator=(v11, v12);
            }
          }
          if ((v6 & 8) != 0)
            goto LABEL_22;
          goto LABEL_28;
        }
        std::string::operator=(v7, v8);
      }
    }
    if ((v6 & 2) == 0)
      goto LABEL_17;
    goto LABEL_11;
  }
}

void sub_1BF95BC54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::CatBinary::condition_entry>::TypeHandler>(int **this, uint64_t a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  siri::dialogengine::CatBinary::condition_entry **v13;
  siri::dialogengine::CatBinary::condition_entry **v14;
  siri::dialogengine::CatBinary::condition_entry *v15;
  siri::dialogengine::CatBinary::condition_entry *v16;
  siri::dialogengine::CatBinary::condition_entry *v17;
  google::protobuf::internal::ArenaImpl *v18;
  int v19;
  uint64_t v20;
  siri::dialogengine::CatBinary::condition_entry **v21;
  siri::dialogengine::CatBinary::condition_entry **v22;
  siri::dialogengine::CatBinary::condition_entry *v23;
  siri::dialogengine::CatBinary::condition_entry *v24;
  int v25;
  int *v26;
  char v27;
  std::string v28[2];

  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    v9 = *this[2];
    v10 = *((int *)this + 2);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (siri::dialogengine::CatBinary::condition_entry **)(v6 + 8);
      v14 = (siri::dialogengine::CatBinary::condition_entry **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<siri::dialogengine::CatBinary::condition_entry>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (siri::dialogengine::CatBinary::condition_entry **)((char *)v8 + v20);
      v22 = (siri::dialogengine::CatBinary::condition_entry **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::condition_entry>(v18);
        google::protobuf::internal::GenericTypeHandler<siri::dialogengine::CatBinary::condition_entry>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25)
      *v26 = v25;
  }
}

void sub_1BF95BDC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::GenericTypeHandler<siri::dialogengine::CatBinary::condition_entry>::Merge(siri::dialogengine::CatBinary::condition_entry *a1, siri::dialogengine::CatBinary::condition_entry *this)
{
  return siri::dialogengine::CatBinary::condition_entry::MergeFrom(this, a1);
}

BOOL google::protobuf::internal::AllAreInitialized<google::protobuf::RepeatedPtrField<siri::dialogengine::CatBinary::condition_entry>>(uint64_t a1)
{
  int v2;
  int v3;
  BOOL v4;
  uint64_t v5;

  v2 = *(_DWORD *)(a1 + 8);
  do
  {
    v3 = v2;
    v4 = __OFSUB__(v2--, 1);
    if (v2 < 0 != v4)
      break;
    v5 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<siri::dialogengine::CatBinary::condition_entry>::TypeHandler>(a1, v2);
    if ((*(_BYTE *)(v5 + 16) & 0x10) == 0)
      break;
  }
  while ((google::protobuf::internal::AllAreInitialized<google::protobuf::RepeatedPtrField<siri::dialogengine::CatBinary::condition_entry>>(v5 + 24) & 1) != 0);
  return v3 < 1;
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<siri::dialogengine::CatBinary::condition_entry>::TypeHandler>(uint64_t a1)
{
  uint64_t v1;
  siri::dialogengine::CatBinary::condition_entry **v3;
  siri::dialogengine::CatBinary::condition_entry *v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v1)
  {
    v3 = (siri::dialogengine::CatBinary::condition_entry **)(*(_QWORD *)(a1 + 16) + 8);
    do
    {
      v4 = *v3++;
      siri::dialogengine::CatBinary::condition_entry::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_1BF95BED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

siri::dialogengine::CatBinary::condition *siri::dialogengine::CatBinary::condition::condition(siri::dialogengine::CatBinary::condition *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)this = &off_1E792F618;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  if (atomic_load(scc_info_condition_CatBinary_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_condition_CatBinary_2eproto);
  *((_QWORD *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 7) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

void sub_1BF95C090(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v1 + 24));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

void siri::dialogengine::CatBinary::condition::~condition(siri::dialogengine::CatBinary::condition *this)
{
  siri::dialogengine::CatBinary::condition::~condition(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;

  *(_QWORD *)this = &off_1E792F618;
  v2 = *((_QWORD *)this + 6);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 7);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1C3B8D890](v4, 0x1012C40EC159624);
  }
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((siri::dialogengine::CatBinary::condition *)((char *)this + 24));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *siri::dialogengine::CatBinary::condition::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "siri.dialogengine.CatBinary.condition");
}

siri::dialogengine::CatBinary::condition *siri::dialogengine::CatBinary::condition::New(siri::dialogengine::CatBinary::condition *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::condition>(0);
}

siri::dialogengine::CatBinary::condition *siri::dialogengine::CatBinary::condition::New(siri::dialogengine::CatBinary::condition *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::condition>(a2);
}

void siri::dialogengine::CatBinary::condition::Clear(siri::dialogengine::CatBinary::condition *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  google::protobuf::internal::InternalMetadataWithArenaLite *v5;
  char v6;

  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<siri::dialogengine::CatBinary::condition_entry>::TypeHandler>((uint64_t)this + 24);
  v2 = *((_DWORD *)this + 4);
  if ((v2 & 3) == 0)
    goto LABEL_11;
  if ((v2 & 1) == 0)
  {
LABEL_5:
    if ((v2 & 2) != 0)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = *((_QWORD *)this + 6);
  if ((*(char *)(v3 + 23) & 0x80000000) == 0)
  {
    *(_BYTE *)v3 = 0;
    *(_BYTE *)(v3 + 23) = 0;
    goto LABEL_5;
  }
  **(_BYTE **)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
  if ((v2 & 2) != 0)
  {
LABEL_6:
    v4 = *((_QWORD *)this + 7);
    if (*(char *)(v4 + 23) < 0)
    {
      **(_BYTE **)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v4 = 0;
      *(_BYTE *)(v4 + 23) = 0;
    }
  }
LABEL_11:
  v6 = *((_BYTE *)this + 8);
  v5 = (siri::dialogengine::CatBinary::condition *)((char *)this + 8);
  *((_DWORD *)v5 + 2) = 0;
  if ((v6 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v5);
}

BOOL siri::dialogengine::CatBinary::condition::IsInitialized(siri::dialogengine::CatBinary::condition *this)
{
  return google::protobuf::internal::AllAreInitialized<google::protobuf::RepeatedPtrField<siri::dialogengine::CatBinary::condition_entry>>((uint64_t)this + 24);
}

void siri::dialogengine::CatBinary::condition::CheckTypeAndMergeFrom(siri::dialogengine::CatBinary::condition *this, const google::protobuf::MessageLite *lpsrc)
{
  siri::dialogengine::CatBinary::condition::MergeFrom(this, lpsrc);
}

uint64_t siri::dialogengine::CatBinary::condition::ByteSizeLong(siri::dialogengine::CatBinary::condition *this)
{
  uint64_t v2;
  uint64_t v3;
  siri::dialogengine::CatBinary::condition_entry **v4;
  uint64_t v5;
  siri::dialogengine::CatBinary::condition_entry *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  uint64_t v18;

  v2 = *((int *)this + 8);
  v3 = *((_QWORD *)this + 5);
  if (v3)
    v4 = (siri::dialogengine::CatBinary::condition_entry **)(v3 + 8);
  else
    v4 = 0;
  if ((_DWORD)v2)
  {
    v5 = 8 * v2;
    do
    {
      v6 = *v4++;
      v7 = siri::dialogengine::CatBinary::condition_entry::ByteSizeLong(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    v2 = 0;
  }
  v8 = *((_DWORD *)this + 4);
  if ((v8 & 3) != 0)
  {
    if ((v8 & 1) != 0)
    {
      v9 = *((_QWORD *)this + 6);
      v10 = *(unsigned __int8 *)(v9 + 23);
      v11 = *(_QWORD *)(v9 + 8);
      if ((v10 & 0x80u) == 0)
        v11 = v10;
      v2 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    if ((v8 & 2) != 0)
    {
      v12 = *((_QWORD *)this + 7);
      v13 = *(unsigned __int8 *)(v12 + 23);
      v14 = *(_QWORD *)(v12 + 8);
      if ((v13 & 0x80u) == 0)
        v14 = v13;
      v2 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  v15 = *((_QWORD *)this + 1);
  if ((v15 & 1) != 0)
  {
    v17 = v15 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v17 + 23) < 0)
      v18 = *(_QWORD *)(v17 + 8);
    else
      v18 = *(unsigned __int8 *)(v17 + 23);
    v2 += v18;
  }
  *((_DWORD *)this + 5) = v2;
  return v2;
}

uint64_t siri::dialogengine::CatBinary::condition::GetCachedSize(siri::dialogengine::CatBinary::condition *this)
{
  return *((unsigned int *)this + 5);
}

google::protobuf::internal *siri::dialogengine::CatBinary::condition::_InternalParse(siri::dialogengine::CatBinary::condition *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  unsigned int *v5;
  std::string **v6;
  std::string **v7;
  uint64_t *v8;
  google::protobuf::internal *TagFallback;
  const char *v10;
  unsigned int v11;
  BOOL v13;
  google::protobuf::internal *v14;
  char *v15;
  google::protobuf::internal *v16;
  int *v17;
  uint64_t v18;
  int v19;
  siri::dialogengine::CatBinary::condition_entry *v20;
  uint64_t v21;
  uint64_t v22;
  std::string *v23;
  google::protobuf::internal *v25;

  v25 = a2;
  v5 = (unsigned int *)((char *)this + 24);
  v6 = (std::string **)((char *)this + 56);
  v7 = (std::string **)((char *)this + 48);
  v8 = (uint64_t *)((char *)this + 8);
  while ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v25, *((_DWORD *)a3 + 23)) & 1) == 0)
  {
    TagFallback = (google::protobuf::internal *)((char *)v25 + 1);
    LODWORD(v10) = *(unsigned __int8 *)v25;
    if ((*(char *)v25 & 0x80000000) == 0)
      goto LABEL_6;
    v10 = (const char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v25 + 2);
LABEL_6:
      v25 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v25, v10);
    v25 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    v11 = v10 >> 3;
    if (v10 >> 3 == 3)
    {
      if (v10 != 26)
        goto LABEL_13;
      v15 = (char *)TagFallback - 1;
LABEL_20:
      v16 = (google::protobuf::internal *)(v15 + 1);
      v25 = (google::protobuf::internal *)(v15 + 1);
      v17 = (int *)*((_QWORD *)this + 5);
      if (v17)
      {
        v18 = *((int *)this + 8);
        v19 = *v17;
        if ((int)v18 < *v17)
        {
          *((_DWORD *)this + 8) = v18 + 1;
          v20 = *(siri::dialogengine::CatBinary::condition_entry **)&v17[2 * v18 + 2];
          goto LABEL_27;
        }
        if (v19 == *((_DWORD *)this + 9))
        {
LABEL_25:
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v19 + 1);
          v17 = (int *)*((_QWORD *)this + 5);
          v19 = *v17;
        }
        *v17 = v19 + 1;
        v20 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::condition_entry>(*((google::protobuf::internal::ArenaImpl **)this + 3));
        v21 = *((_QWORD *)this + 5);
        v22 = *((int *)this + 8);
        *((_DWORD *)this + 8) = v22 + 1;
        *(_QWORD *)(v21 + 8 * v22 + 8) = v20;
        v16 = v25;
LABEL_27:
        v15 = google::protobuf::internal::ParseContext::ParseMessage<siri::dialogengine::CatBinary::condition_entry>(a3, v20, v16);
        v25 = (google::protobuf::internal *)v15;
        if (!v15)
          return 0;
        if (*(_QWORD *)a3 <= (unint64_t)v15 || *v15 != 26)
          continue;
        goto LABEL_20;
      }
      v19 = *((_DWORD *)this + 9);
      goto LABEL_25;
    }
    if (v11 == 2)
    {
      if (v10 == 18)
      {
        *((_DWORD *)this + 4) |= 2u;
        v23 = (std::string *)*((_QWORD *)this + 7);
        if (v23 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v23 = *v6;
          goto LABEL_36;
        }
LABEL_37:
        v14 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v23, (std::string::value_type *)TagFallback, (uint64_t)a3);
        goto LABEL_38;
      }
    }
    else if (v11 == 1 && v10 == 10)
    {
      *((_DWORD *)this + 4) |= 1u;
      v23 = (std::string *)*((_QWORD *)this + 6);
      if (v23 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v7, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v23 = *v7;
LABEL_36:
        TagFallback = v25;
      }
      goto LABEL_37;
    }
LABEL_13:
    if ((_DWORD)v10)
      v13 = (v10 & 7) == 4;
    else
      v13 = 1;
    if (v13)
    {
      *((_DWORD *)a3 + 20) = (_DWORD)v10 - 1;
      return TagFallback;
    }
    v14 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v10, v8, TagFallback, a3);
LABEL_38:
    v25 = v14;
    if (!v14)
      return 0;
  }
  return v25;
}

unsigned __int8 *siri::dialogengine::CatBinary::condition::InternalSerializeWithCachedSizesToArray(siri::dialogengine::CatBinary::condition *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  char *v4;
  int v6;
  int v7;
  int i;
  siri::dialogengine::CatBinary::condition_entry *v9;
  unsigned int v10;
  char *v11;
  unsigned int v12;
  _BYTE *v13;
  _BYTE *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;

  v4 = a2;
  v6 = *((_DWORD *)this + 4);
  if ((v6 & 1) != 0)
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 6), a2);
  if ((v6 & 2) != 0)
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((_QWORD *)this + 7), v4);
  v7 = *((_DWORD *)this + 8);
  if (v7)
  {
    for (i = 0; i != v7; ++i)
    {
      if ((unint64_t)v4 >= *(_QWORD *)a3)
        v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v9 = (siri::dialogengine::CatBinary::condition_entry *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<siri::dialogengine::CatBinary::condition_entry>::TypeHandler>((uint64_t)this + 24, i);
      *v4 = 26;
      v10 = *((_DWORD *)v9 + 5);
      if (v10 > 0x7F)
      {
        v4[1] = v10 | 0x80;
        v12 = v10 >> 7;
        if (v10 >> 14)
        {
          v13 = v4 + 2;
          do
          {
            v14 = v13;
            *v13++ = v12 | 0x80;
            v15 = v12 >> 7;
            v16 = v12 >> 14;
            v12 >>= 7;
          }
          while (v16);
          v11 = v14 + 2;
          *v13 = v15;
        }
        else
        {
          v4[2] = v12;
          v11 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v10;
        v11 = v4 + 2;
      }
      v4 = (char *)siri::dialogengine::CatBinary::condition_entry::InternalSerializeWithCachedSizesToArray(v9, v11, a3);
    }
  }
  v17 = *((_QWORD *)this + 1);
  if ((v17 & 1) == 0)
    return (unsigned __int8 *)v4;
  v19 = v17 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v19 + 23) < 0)
  {
    v21 = *(void **)v19;
    v20 = *(_QWORD *)(v19 + 8);
  }
  else
  {
    LODWORD(v20) = *(unsigned __int8 *)(v19 + 23);
    v21 = (void *)v19;
  }
  if (*(_QWORD *)a3 - (_QWORD)v4 >= (int)v20)
  {
    v22 = (int)v20;
    memcpy(v4, v21, (int)v20);
    v4 += v22;
    return (unsigned __int8 *)v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v21, v20, (unsigned __int8 *)v4);
}

void siri::dialogengine::CatBinary::condition::MergeFrom(siri::dialogengine::CatBinary::condition *this, const siri::dialogengine::CatBinary::condition *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  std::string *v7;
  const std::string *v8;
  std::string *v9;
  std::string **v10;
  std::string *v11;
  const std::string *v12;
  char v13;
  std::string v14[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/CatBinary.pb.cc", 1944);
    v4 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::CatBinary::condition_entry>::TypeHandler>((int **)this + 3, (uint64_t)a2 + 24);
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 3) != 0)
  {
    if ((v6 & 1) != 0)
    {
      v7 = (std::string *)*((_QWORD *)this + 6);
      *((_DWORD *)this + 4) |= 1u;
      v8 = (const std::string *)*((_QWORD *)a2 + 6);
      if (v7 != v8)
      {
        if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, (uint64_t)v8);
          if ((v6 & 2) == 0)
            return;
          goto LABEL_11;
        }
        std::string::operator=(v7, v8);
      }
    }
    if ((v6 & 2) == 0)
      return;
LABEL_11:
    v11 = (std::string *)*((_QWORD *)this + 7);
    v10 = (std::string **)((char *)this + 56);
    v9 = v11;
    *((_DWORD *)v10 - 10) |= 2u;
    v12 = (const std::string *)*((_QWORD *)a2 + 7);
    if (v11 != v12)
    {
      if (v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v10, (uint64_t)v12);
      else
        std::string::operator=(v9, v12);
    }
  }
}

void sub_1BF95C870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

siri::dialogengine::CatBinary::condition *google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::condition>(google::protobuf::internal::ArenaImpl *this)
{
  siri::dialogengine::CatBinary::condition *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (siri::dialogengine::CatBinary::condition *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x40uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<siri::dialogengine::CatBinary::condition>);
    siri::dialogengine::CatBinary::condition::condition(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (siri::dialogengine::CatBinary::condition *)operator new();
    siri::dialogengine::CatBinary::condition::condition(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BF95C90C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C4071667EE6);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<siri::dialogengine::CatBinary::condition>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void InitDefaultsscc_info_parameter_CatBinary_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/CatBinary.pb.cc", a4);
  siri::dialogengine::CatBinary::parameter::parameter((siri::dialogengine::CatBinary::parameter *)&siri::dialogengine::CatBinary::_parameter_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&siri::dialogengine::CatBinary::_parameter_default_instance_, v4);
}

siri::dialogengine::CatBinary::parameter *siri::dialogengine::CatBinary::parameter::parameter(siri::dialogengine::CatBinary::parameter *this)
{
  *(_QWORD *)this = &off_1E792F588;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  if (atomic_load(scc_info_parameter_CatBinary_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_parameter_CatBinary_2eproto);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 4) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 7) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 8) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 9) = &google::protobuf::internal::fixed_address_empty_string;
  *((_WORD *)this + 40) = 256;
  *((_BYTE *)this + 82) = 1;
  return this;
}

void sub_1BF95CAC8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void siri::dialogengine::CatBinary::parameter::~parameter(siri::dialogengine::CatBinary::parameter *this)
{
  siri::dialogengine::CatBinary::parameter::~parameter(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)this = &off_1E792F588;
  v2 = *((_QWORD *)this + 3);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 4);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1C3B8D890](v4, 0x1012C40EC159624);
  }
  v6 = *((_QWORD *)this + 5);
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
  {
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    MEMORY[0x1C3B8D890](v6, 0x1012C40EC159624);
  }
  v8 = *((_QWORD *)this + 6);
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v8 != 0)
  {
    if (*(char *)(v8 + 23) < 0)
      operator delete(*(void **)v8);
    MEMORY[0x1C3B8D890](v8, 0x1012C40EC159624);
  }
  v10 = *((_QWORD *)this + 7);
  if ((uint64_t *)v10 != &google::protobuf::internal::fixed_address_empty_string && v10)
  {
    if (*(char *)(v10 + 23) < 0)
      operator delete(*(void **)v10);
    MEMORY[0x1C3B8D890](v10, 0x1012C40EC159624);
  }
  v11 = *((_QWORD *)this + 8);
  if ((uint64_t *)v11 != &google::protobuf::internal::fixed_address_empty_string && v11)
  {
    if (*(char *)(v11 + 23) < 0)
      operator delete(*(void **)v11);
    MEMORY[0x1C3B8D890](v11, 0x1012C40EC159624);
  }
  v12 = *((_QWORD *)this + 9);
  if ((uint64_t *)v12 != &google::protobuf::internal::fixed_address_empty_string && v12)
  {
    if (*(char *)(v12 + 23) < 0)
      operator delete(*(void **)v12);
    MEMORY[0x1C3B8D890](v12, 0x1012C40EC159624);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *siri::dialogengine::CatBinary::parameter::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "siri.dialogengine.CatBinary.parameter");
}

siri::dialogengine::CatBinary::parameter *siri::dialogengine::CatBinary::parameter::New(siri::dialogengine::CatBinary::parameter *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::parameter>(0);
}

siri::dialogengine::CatBinary::parameter *siri::dialogengine::CatBinary::parameter::New(siri::dialogengine::CatBinary::parameter *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::parameter>(a2);
}

void siri::dialogengine::CatBinary::parameter::Clear(siri::dialogengine::CatBinary::parameter *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  google::protobuf::internal::InternalMetadataWithArenaLite *v9;
  char v10;

  v1 = *((_DWORD *)this + 4);
  if ((v1 & 0x7F) != 0)
  {
    if ((v1 & 1) == 0)
    {
      if ((v1 & 2) == 0)
        goto LABEL_4;
LABEL_14:
      v3 = *((_QWORD *)this + 4);
      if (*(char *)(v3 + 23) < 0)
      {
        **(_BYTE **)v3 = 0;
        *(_QWORD *)(v3 + 8) = 0;
        if ((v1 & 4) != 0)
          goto LABEL_18;
      }
      else
      {
        *(_BYTE *)v3 = 0;
        *(_BYTE *)(v3 + 23) = 0;
        if ((v1 & 4) != 0)
          goto LABEL_18;
      }
LABEL_5:
      if ((v1 & 8) == 0)
        goto LABEL_6;
LABEL_22:
      v5 = *((_QWORD *)this + 6);
      if (*(char *)(v5 + 23) < 0)
      {
        **(_BYTE **)v5 = 0;
        *(_QWORD *)(v5 + 8) = 0;
        if ((v1 & 0x10) != 0)
          goto LABEL_26;
      }
      else
      {
        *(_BYTE *)v5 = 0;
        *(_BYTE *)(v5 + 23) = 0;
        if ((v1 & 0x10) != 0)
          goto LABEL_26;
      }
LABEL_7:
      if ((v1 & 0x20) == 0)
        goto LABEL_8;
LABEL_30:
      v7 = *((_QWORD *)this + 8);
      if (*(char *)(v7 + 23) < 0)
      {
        **(_BYTE **)v7 = 0;
        *(_QWORD *)(v7 + 8) = 0;
        if ((v1 & 0x40) == 0)
          goto LABEL_37;
      }
      else
      {
        *(_BYTE *)v7 = 0;
        *(_BYTE *)(v7 + 23) = 0;
        if ((v1 & 0x40) == 0)
          goto LABEL_37;
      }
      goto LABEL_34;
    }
    v2 = *((_QWORD *)this + 3);
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
      if ((v1 & 2) != 0)
        goto LABEL_14;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
      if ((v1 & 2) != 0)
        goto LABEL_14;
    }
LABEL_4:
    if ((v1 & 4) == 0)
      goto LABEL_5;
LABEL_18:
    v4 = *((_QWORD *)this + 5);
    if (*(char *)(v4 + 23) < 0)
    {
      **(_BYTE **)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      if ((v1 & 8) != 0)
        goto LABEL_22;
    }
    else
    {
      *(_BYTE *)v4 = 0;
      *(_BYTE *)(v4 + 23) = 0;
      if ((v1 & 8) != 0)
        goto LABEL_22;
    }
LABEL_6:
    if ((v1 & 0x10) == 0)
      goto LABEL_7;
LABEL_26:
    v6 = *((_QWORD *)this + 7);
    if (*(char *)(v6 + 23) < 0)
    {
      **(_BYTE **)v6 = 0;
      *(_QWORD *)(v6 + 8) = 0;
      if ((v1 & 0x20) != 0)
        goto LABEL_30;
    }
    else
    {
      *(_BYTE *)v6 = 0;
      *(_BYTE *)(v6 + 23) = 0;
      if ((v1 & 0x20) != 0)
        goto LABEL_30;
    }
LABEL_8:
    if ((v1 & 0x40) == 0)
      goto LABEL_37;
LABEL_34:
    v8 = *((_QWORD *)this + 9);
    if (*(char *)(v8 + 23) < 0)
    {
      **(_BYTE **)v8 = 0;
      *(_QWORD *)(v8 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v8 = 0;
      *(_BYTE *)(v8 + 23) = 0;
    }
  }
LABEL_37:
  *((_BYTE *)this + 80) = 0;
  if ((v1 & 0x300) != 0)
    *(_WORD *)((char *)this + 81) = 257;
  v10 = *((_BYTE *)this + 8);
  v9 = (siri::dialogengine::CatBinary::parameter *)((char *)this + 8);
  *((_DWORD *)v9 + 2) = 0;
  if ((v10 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v9);
}

uint64_t siri::dialogengine::CatBinary::parameter::IsInitialized(siri::dialogengine::CatBinary::parameter *this)
{
  return 1;
}

void siri::dialogengine::CatBinary::parameter::CheckTypeAndMergeFrom(siri::dialogengine::CatBinary::parameter *this, const google::protobuf::MessageLite *lpsrc)
{
  siri::dialogengine::CatBinary::parameter::MergeFrom(this, lpsrc);
}

uint64_t siri::dialogengine::CatBinary::parameter::ByteSizeLong(siri::dialogengine::CatBinary::parameter *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;

  v1 = *((_DWORD *)this + 4);
  if (!(_BYTE)v1)
  {
    v2 = 0;
    goto LABEL_22;
  }
  if ((v1 & 1) == 0)
  {
    v2 = 0;
    if ((v1 & 2) == 0)
      goto LABEL_12;
    goto LABEL_9;
  }
  v3 = *((_QWORD *)this + 3);
  v4 = *(unsigned __int8 *)(v3 + 23);
  v5 = *(_QWORD *)(v3 + 8);
  if ((v4 & 0x80u) == 0)
    v5 = v4;
  v2 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v1 & 2) != 0)
  {
LABEL_9:
    v6 = *((_QWORD *)this + 4);
    v7 = *(unsigned __int8 *)(v6 + 23);
    v8 = *(_QWORD *)(v6 + 8);
    if ((v7 & 0x80u) == 0)
      v8 = v7;
    v2 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_12:
  if ((v1 & 4) != 0)
  {
    v16 = *((_QWORD *)this + 5);
    v17 = *(unsigned __int8 *)(v16 + 23);
    v18 = *(_QWORD *)(v16 + 8);
    if ((v17 & 0x80u) == 0)
      v18 = v17;
    v2 += v18 + ((9 * (__clz(v18 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v1 & 8) == 0)
    {
LABEL_14:
      if ((v1 & 0x10) == 0)
        goto LABEL_15;
      goto LABEL_37;
    }
  }
  else if ((v1 & 8) == 0)
  {
    goto LABEL_14;
  }
  v19 = *((_QWORD *)this + 6);
  v20 = *(unsigned __int8 *)(v19 + 23);
  v21 = *(_QWORD *)(v19 + 8);
  if ((v20 & 0x80u) == 0)
    v21 = v20;
  v2 += v21 + ((9 * (__clz(v21 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v1 & 0x10) == 0)
  {
LABEL_15:
    if ((v1 & 0x20) == 0)
      goto LABEL_16;
LABEL_40:
    v25 = *((_QWORD *)this + 8);
    v26 = *(unsigned __int8 *)(v25 + 23);
    v27 = *(_QWORD *)(v25 + 8);
    if ((v26 & 0x80u) == 0)
      v27 = v26;
    v2 += v27 + ((9 * (__clz(v27 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v1 & 0x40) == 0)
      goto LABEL_20;
    goto LABEL_17;
  }
LABEL_37:
  v22 = *((_QWORD *)this + 7);
  v23 = *(unsigned __int8 *)(v22 + 23);
  v24 = *(_QWORD *)(v22 + 8);
  if ((v23 & 0x80u) == 0)
    v24 = v23;
  v2 += v24 + ((9 * (__clz(v24 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v1 & 0x20) != 0)
    goto LABEL_40;
LABEL_16:
  if ((v1 & 0x40) != 0)
  {
LABEL_17:
    v9 = *((_QWORD *)this + 9);
    v10 = *(unsigned __int8 *)(v9 + 23);
    v11 = *(_QWORD *)(v9 + 8);
    if ((v10 & 0x80u) == 0)
      v11 = v10;
    v2 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_20:
  if ((v1 & 0x80) != 0)
    v2 += 2;
LABEL_22:
  v12 = v2 + 2;
  if ((v1 & 0x100) == 0)
    v12 = v2;
  if ((v1 & 0x200) != 0)
    v12 += 2;
  if ((v1 & 0x300) != 0)
    v13 = v12;
  else
    v13 = v2;
  v14 = *((_QWORD *)this + 1);
  if ((v14 & 1) != 0)
  {
    v28 = v14 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v28 + 23) < 0)
      v29 = *(_QWORD *)(v28 + 8);
    else
      v29 = *(unsigned __int8 *)(v28 + 23);
    v13 += v29;
  }
  *((_DWORD *)this + 5) = v13;
  return v13;
}

uint64_t siri::dialogengine::CatBinary::parameter::GetCachedSize(siri::dialogengine::CatBinary::parameter *this)
{
  return *((unsigned int *)this + 5);
}

google::protobuf::internal *siri::dialogengine::CatBinary::parameter::_InternalParse(siri::dialogengine::CatBinary::parameter *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  int v5;
  std::string **v6;
  std::string **v7;
  std::string **v8;
  std::string **v9;
  std::string **v10;
  std::string **v11;
  uint64_t *v12;
  google::protobuf::internal *TagFallback;
  const char *v14;
  std::string *v15;
  google::protobuf::internal *v16;
  unint64_t v17;
  int v18;
  google::protobuf::internal *v19;
  unint64_t v20;
  int v21;
  google::protobuf::internal *v22;
  google::protobuf::internal *v23;
  unint64_t v24;
  int v25;
  BOOL v26;
  google::protobuf::internal *v27;
  uint64_t v28;
  google::protobuf::internal *v29;
  uint64_t v30;
  google::protobuf::internal *v31;
  uint64_t v32;
  std::string **v34;
  google::protobuf::internal *v35;

  v5 = 0;
  v34 = (std::string **)((char *)this + 72);
  v35 = a2;
  v6 = (std::string **)((char *)this + 64);
  v7 = (std::string **)((char *)this + 56);
  v8 = (std::string **)((char *)this + 48);
  v9 = (std::string **)((char *)this + 40);
  v10 = (std::string **)((char *)this + 32);
  v11 = (std::string **)((char *)this + 24);
  v12 = (uint64_t *)((char *)this + 8);
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v35, *((_DWORD *)a3 + 23)) & 1) != 0)
    {
      TagFallback = v35;
      break;
    }
    TagFallback = (google::protobuf::internal *)((char *)v35 + 1);
    LODWORD(v14) = *(unsigned __int8 *)v35;
    if ((*(char *)v35 & 0x80000000) == 0)
      goto LABEL_6;
    v14 = (const char *)(v14 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v35 + 2);
LABEL_6:
      v35 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v35, v14);
    v35 = TagFallback;
    if (!TagFallback)
      break;
LABEL_7:
    switch(v14 >> 3)
    {
      case 1u:
        if (v14 != 10)
          goto LABEL_50;
        *((_DWORD *)this + 4) |= 1u;
        v15 = (std::string *)*((_QWORD *)this + 3);
        if (v15 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_42;
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v11, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v15 = *v11;
        goto LABEL_41;
      case 2u:
        if (v14 != 18)
          goto LABEL_50;
        *((_DWORD *)this + 4) |= 2u;
        v15 = (std::string *)*((_QWORD *)this + 4);
        if (v15 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_42;
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v10, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v15 = *v10;
        goto LABEL_41;
      case 3u:
        if (v14 != 26)
          goto LABEL_50;
        *((_DWORD *)this + 4) |= 4u;
        v15 = (std::string *)*((_QWORD *)this + 5);
        if (v15 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_42;
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v9, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v15 = *v9;
        goto LABEL_41;
      case 4u:
        if (v14 != 34)
          goto LABEL_50;
        *((_DWORD *)this + 4) |= 8u;
        v15 = (std::string *)*((_QWORD *)this + 6);
        if (v15 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_42;
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v8, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v15 = *v8;
        goto LABEL_41;
      case 5u:
        if (v14 != 42)
          goto LABEL_50;
        *((_DWORD *)this + 4) |= 0x10u;
        v15 = (std::string *)*((_QWORD *)this + 7);
        if (v15 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_42;
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v7, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v15 = *v7;
        goto LABEL_41;
      case 6u:
        if (v14 != 50)
          goto LABEL_50;
        *((_DWORD *)this + 4) |= 0x20u;
        v15 = (std::string *)*((_QWORD *)this + 8);
        if (v15 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_42;
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v15 = *v6;
        goto LABEL_41;
      case 7u:
        if (v14 != 56)
          goto LABEL_50;
        v5 |= 0x100u;
        v16 = (google::protobuf::internal *)((char *)TagFallback + 1);
        v17 = *(unsigned __int8 *)TagFallback;
        if ((*(char *)TagFallback & 0x80000000) == 0)
          goto LABEL_32;
        v18 = *(char *)v16;
        v17 = v17 + (v18 << 7) - 128;
        if (v18 < 0)
        {
          v27 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v17);
          v35 = v27;
          *((_BYTE *)this + 81) = v28 != 0;
          if (!v27)
            goto LABEL_60;
        }
        else
        {
          v16 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_32:
          v35 = v16;
          *((_BYTE *)this + 81) = v17 != 0;
        }
        continue;
      case 8u:
        if (v14 != 64)
          goto LABEL_50;
        v5 |= 0x80u;
        v19 = (google::protobuf::internal *)((char *)TagFallback + 1);
        v20 = *(unsigned __int8 *)TagFallback;
        if ((*(char *)TagFallback & 0x80000000) == 0)
          goto LABEL_37;
        v21 = *(char *)v19;
        v20 = v20 + (v21 << 7) - 128;
        if (v21 < 0)
        {
          v29 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v20);
          v35 = v29;
          *((_BYTE *)this + 80) = v30 != 0;
          if (!v29)
            goto LABEL_60;
        }
        else
        {
          v19 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_37:
          v35 = v19;
          *((_BYTE *)this + 80) = v20 != 0;
        }
        continue;
      case 9u:
        if (v14 != 74)
          goto LABEL_50;
        *((_DWORD *)this + 4) |= 0x40u;
        v15 = (std::string *)*((_QWORD *)this + 9);
        if (v15 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_42;
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v34, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v15 = *v34;
LABEL_41:
        TagFallback = v35;
LABEL_42:
        v22 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v15, (std::string::value_type *)TagFallback, (uint64_t)a3);
        goto LABEL_43;
      case 0xAu:
        if (v14 != 80)
          goto LABEL_50;
        v5 |= 0x200u;
        v23 = (google::protobuf::internal *)((char *)TagFallback + 1);
        v24 = *(unsigned __int8 *)TagFallback;
        if ((*(char *)TagFallback & 0x80000000) == 0)
          goto LABEL_49;
        v25 = *(char *)v23;
        v24 = v24 + (v25 << 7) - 128;
        if (v25 < 0)
        {
          v31 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v24);
          v35 = v31;
          *((_BYTE *)this + 82) = v32 != 0;
          if (!v31)
            goto LABEL_60;
        }
        else
        {
          v23 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_49:
          v35 = v23;
          *((_BYTE *)this + 82) = v24 != 0;
        }
        continue;
      default:
LABEL_50:
        if ((_DWORD)v14)
          v26 = (v14 & 7) == 4;
        else
          v26 = 1;
        if (v26)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v14 - 1;
          goto LABEL_62;
        }
        v22 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v14, v12, TagFallback, a3);
LABEL_43:
        v35 = v22;
        if (v22)
          continue;
LABEL_60:
        TagFallback = 0;
        break;
    }
    break;
  }
LABEL_62:
  *((_DWORD *)this + 4) |= v5;
  return TagFallback;
}

unsigned __int8 *siri::dialogengine::CatBinary::parameter::InternalSerializeWithCachedSizesToArray(siri::dialogengine::CatBinary::parameter *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  char *v4;
  int v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;

  v4 = a2;
  v6 = *((_DWORD *)this + 4);
  if ((v6 & 1) != 0)
  {
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 3), a2);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_14;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((_QWORD *)this + 4), v4);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_15;
  }
LABEL_14:
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, *((_QWORD *)this + 5), v4);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 4, *((_QWORD *)this + 6), v4);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 5, *((_QWORD *)this + 7), v4);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x100) == 0)
      goto LABEL_8;
    goto LABEL_18;
  }
LABEL_17:
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 6, *((_QWORD *)this + 8), v4);
  if ((v6 & 0x100) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_21;
  }
LABEL_18:
  if ((unint64_t)v4 >= *(_QWORD *)a3)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v7 = *((_BYTE *)this + 81);
  *v4 = 56;
  v4[1] = v7;
  v4 += 2;
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_24;
  }
LABEL_21:
  if ((unint64_t)v4 >= *(_QWORD *)a3)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v8 = *((_BYTE *)this + 80);
  *v4 = 64;
  v4[1] = v8;
  v4 += 2;
  if ((v6 & 0x40) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0)
      goto LABEL_28;
    goto LABEL_25;
  }
LABEL_24:
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 9, *((_QWORD *)this + 9), v4);
  if ((v6 & 0x200) == 0)
    goto LABEL_28;
LABEL_25:
  if ((unint64_t)v4 >= *(_QWORD *)a3)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v9 = *((_BYTE *)this + 82);
  *v4 = 80;
  v4[1] = v9;
  v4 += 2;
LABEL_28:
  v10 = *((_QWORD *)this + 1);
  if ((v10 & 1) == 0)
    return (unsigned __int8 *)v4;
  v12 = v10 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v12 + 23) < 0)
  {
    v14 = *(void **)v12;
    v13 = *(_QWORD *)(v12 + 8);
  }
  else
  {
    LODWORD(v13) = *(unsigned __int8 *)(v12 + 23);
    v14 = (void *)v12;
  }
  if (*(_QWORD *)a3 - (_QWORD)v4 >= (int)v13)
  {
    v15 = (int)v13;
    memcpy(v4, v14, (int)v13);
    v4 += v15;
    return (unsigned __int8 *)v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v14, v13, (unsigned __int8 *)v4);
}

void siri::dialogengine::CatBinary::parameter::MergeFrom(siri::dialogengine::CatBinary::parameter *this, const siri::dialogengine::CatBinary::parameter *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  std::string *v7;
  const std::string *v8;
  std::string *v9;
  const std::string *v10;
  std::string *v11;
  const std::string *v12;
  std::string *v13;
  const std::string *v14;
  std::string *v15;
  const std::string *v16;
  std::string *v17;
  const std::string *v18;
  std::string *v19;
  const std::string *v20;
  char v21;
  std::string v22[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v22, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/CatBinary.pb.cc", 1634);
    v4 = google::protobuf::internal::LogMessage::operator<<(v22, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v21, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v22[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  v6 = *((_DWORD *)a2 + 4);
  if ((_BYTE)v6)
  {
    if ((v6 & 1) != 0)
    {
      v7 = (std::string *)*((_QWORD *)this + 3);
      *((_DWORD *)this + 4) |= 1u;
      v8 = (const std::string *)*((_QWORD *)a2 + 3);
      if (v7 != v8)
      {
        if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, (uint64_t)v8);
          if ((v6 & 2) == 0)
            goto LABEL_17;
LABEL_11:
          v9 = (std::string *)*((_QWORD *)this + 4);
          *((_DWORD *)this + 4) |= 2u;
          v10 = (const std::string *)*((_QWORD *)a2 + 4);
          if (v9 != v10)
          {
            if (v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 4, (uint64_t)v10);
            else
              std::string::operator=(v9, v10);
          }
LABEL_17:
          if ((v6 & 4) != 0)
          {
            v11 = (std::string *)*((_QWORD *)this + 5);
            *((_DWORD *)this + 4) |= 4u;
            v12 = (const std::string *)*((_QWORD *)a2 + 5);
            if (v11 != v12)
            {
              if (v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              {
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 5, (uint64_t)v12);
                if ((v6 & 8) == 0)
                  goto LABEL_28;
LABEL_22:
                v13 = (std::string *)*((_QWORD *)this + 6);
                *((_DWORD *)this + 4) |= 8u;
                v14 = (const std::string *)*((_QWORD *)a2 + 6);
                if (v13 != v14)
                {
                  if (v13 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, (uint64_t)v14);
                  else
                    std::string::operator=(v13, v14);
                }
LABEL_28:
                if ((v6 & 0x10) != 0)
                {
                  v15 = (std::string *)*((_QWORD *)this + 7);
                  *((_DWORD *)this + 4) |= 0x10u;
                  v16 = (const std::string *)*((_QWORD *)a2 + 7);
                  if (v15 != v16)
                  {
                    if (v15 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                    {
                      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 7, (uint64_t)v16);
                      if ((v6 & 0x20) == 0)
                        goto LABEL_39;
LABEL_33:
                      v17 = (std::string *)*((_QWORD *)this + 8);
                      *((_DWORD *)this + 4) |= 0x20u;
                      v18 = (const std::string *)*((_QWORD *)a2 + 8);
                      if (v17 != v18)
                      {
                        if (v17 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 8, (uint64_t)v18);
                        else
                          std::string::operator=(v17, v18);
                      }
LABEL_39:
                      if ((v6 & 0x40) != 0)
                      {
                        v19 = (std::string *)*((_QWORD *)this + 9);
                        *((_DWORD *)this + 4) |= 0x40u;
                        v20 = (const std::string *)*((_QWORD *)a2 + 9);
                        if (v19 != v20)
                        {
                          if (v19 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                          {
                            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 9, (uint64_t)v20);
                            if ((v6 & 0x80) == 0)
                              goto LABEL_45;
                            goto LABEL_44;
                          }
                          std::string::operator=(v19, v20);
                        }
                      }
                      if ((v6 & 0x80) == 0)
                      {
LABEL_45:
                        *((_DWORD *)this + 4) |= v6;
                        goto LABEL_46;
                      }
LABEL_44:
                      *((_BYTE *)this + 80) = *((_BYTE *)a2 + 80);
                      goto LABEL_45;
                    }
                    std::string::operator=(v15, v16);
                  }
                }
                if ((v6 & 0x20) == 0)
                  goto LABEL_39;
                goto LABEL_33;
              }
              std::string::operator=(v11, v12);
            }
          }
          if ((v6 & 8) == 0)
            goto LABEL_28;
          goto LABEL_22;
        }
        std::string::operator=(v7, v8);
      }
    }
    if ((v6 & 2) == 0)
      goto LABEL_17;
    goto LABEL_11;
  }
LABEL_46:
  if ((v6 & 0x300) != 0)
  {
    if ((v6 & 0x100) != 0)
      *((_BYTE *)this + 81) = *((_BYTE *)a2 + 81);
    if ((v6 & 0x200) != 0)
      *((_BYTE *)this + 82) = *((_BYTE *)a2 + 82);
    *((_DWORD *)this + 4) |= v6;
  }
}

void sub_1BF95D914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

siri::dialogengine::CatBinary::parameter *google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::parameter>(google::protobuf::internal::ArenaImpl *this)
{
  siri::dialogengine::CatBinary::parameter *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (siri::dialogengine::CatBinary::parameter *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x58uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<siri::dialogengine::CatBinary::parameter>);
    siri::dialogengine::CatBinary::parameter::parameter(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (siri::dialogengine::CatBinary::parameter *)operator new();
    siri::dialogengine::CatBinary::parameter::parameter(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BF95D9B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C40299BF94CLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<siri::dialogengine::CatBinary::parameter>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void InitDefaultsscc_info_metadata_CatBinary_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/CatBinary.pb.cc", a4);
  siri::dialogengine::CatBinary::metadata::metadata((siri::dialogengine::CatBinary::metadata *)&siri::dialogengine::CatBinary::_metadata_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&siri::dialogengine::CatBinary::_metadata_default_instance_, v4);
}

siri::dialogengine::CatBinary::metadata *siri::dialogengine::CatBinary::metadata::metadata(siri::dialogengine::CatBinary::metadata *this)
{
  *(_QWORD *)this = &off_1E792F4F8;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  if (atomic_load(scc_info_metadata_CatBinary_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_metadata_CatBinary_2eproto);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 4) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

void sub_1BF95DC60(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void siri::dialogengine::CatBinary::metadata::~metadata(siri::dialogengine::CatBinary::metadata *this)
{
  siri::dialogengine::CatBinary::metadata::~metadata(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;

  *(_QWORD *)this = &off_1E792F4F8;
  v2 = *((_QWORD *)this + 3);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 4);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1C3B8D890](v4, 0x1012C40EC159624);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *siri::dialogengine::CatBinary::metadata::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "siri.dialogengine.CatBinary.metadata");
}

siri::dialogengine::CatBinary::metadata *siri::dialogengine::CatBinary::metadata::New(siri::dialogengine::CatBinary::metadata *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::metadata>(0);
}

siri::dialogengine::CatBinary::metadata *siri::dialogengine::CatBinary::metadata::New(siri::dialogengine::CatBinary::metadata *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::metadata>(a2);
}

void siri::dialogengine::CatBinary::metadata::Clear(siri::dialogengine::CatBinary::metadata *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  google::protobuf::internal::InternalMetadataWithArenaLite *v4;
  char v5;

  v1 = *((_DWORD *)this + 4);
  if ((v1 & 3) == 0)
    goto LABEL_11;
  if ((v1 & 1) == 0)
  {
LABEL_5:
    if ((v1 & 2) != 0)
      goto LABEL_6;
    goto LABEL_11;
  }
  v2 = *((_QWORD *)this + 3);
  if ((*(char *)(v2 + 23) & 0x80000000) == 0)
  {
    *(_BYTE *)v2 = 0;
    *(_BYTE *)(v2 + 23) = 0;
    goto LABEL_5;
  }
  **(_BYTE **)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;
  if ((v1 & 2) != 0)
  {
LABEL_6:
    v3 = *((_QWORD *)this + 4);
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
LABEL_11:
  v5 = *((_BYTE *)this + 8);
  v4 = (siri::dialogengine::CatBinary::metadata *)((char *)this + 8);
  *((_DWORD *)v4 + 2) = 0;
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v4);
}

uint64_t siri::dialogengine::CatBinary::metadata::IsInitialized(siri::dialogengine::CatBinary::metadata *this)
{
  return 1;
}

void siri::dialogengine::CatBinary::metadata::CheckTypeAndMergeFrom(siri::dialogengine::CatBinary::metadata *this, const google::protobuf::MessageLite *lpsrc)
{
  siri::dialogengine::CatBinary::metadata::MergeFrom(this, lpsrc);
}

uint64_t siri::dialogengine::CatBinary::metadata::ByteSizeLong(siri::dialogengine::CatBinary::metadata *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;

  v1 = *((_DWORD *)this + 4);
  if ((v1 & 3) == 0)
  {
    v2 = 0;
    goto LABEL_12;
  }
  if ((v1 & 1) == 0)
  {
    v2 = 0;
    if ((v1 & 2) == 0)
      goto LABEL_12;
    goto LABEL_9;
  }
  v3 = *((_QWORD *)this + 3);
  v4 = *(unsigned __int8 *)(v3 + 23);
  v5 = *(_QWORD *)(v3 + 8);
  if ((v4 & 0x80u) == 0)
    v5 = v4;
  v2 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v1 & 2) != 0)
  {
LABEL_9:
    v6 = *((_QWORD *)this + 4);
    v7 = *(unsigned __int8 *)(v6 + 23);
    v8 = *(_QWORD *)(v6 + 8);
    if ((v7 & 0x80u) == 0)
      v8 = v7;
    v2 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_12:
  v9 = *((_QWORD *)this + 1);
  if ((v9 & 1) != 0)
  {
    v11 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v11 + 23) < 0)
      v12 = *(_QWORD *)(v11 + 8);
    else
      v12 = *(unsigned __int8 *)(v11 + 23);
    v2 += v12;
  }
  *((_DWORD *)this + 5) = v2;
  return v2;
}

uint64_t siri::dialogengine::CatBinary::metadata::GetCachedSize(siri::dialogengine::CatBinary::metadata *this)
{
  return *((unsigned int *)this + 5);
}

google::protobuf::internal *siri::dialogengine::CatBinary::metadata::_InternalParse(siri::dialogengine::CatBinary::metadata *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  std::string **v6;
  uint64_t *v7;
  google::protobuf::internal *TagFallback;
  const char *v9;
  google::protobuf::internal *v12;
  std::string *v13;
  google::protobuf::internal *v15;

  v15 = a2;
  v5 = (std::string **)((char *)this + 32);
  v6 = (std::string **)((char *)this + 24);
  v7 = (uint64_t *)((char *)this + 8);
  while (1)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v15, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v15;
    TagFallback = (google::protobuf::internal *)((char *)v15 + 1);
    LODWORD(v9) = *(unsigned __int8 *)v15;
    if ((*(char *)v15 & 0x80000000) == 0)
      goto LABEL_6;
    v9 = (const char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v15 + 2);
LABEL_6:
      v15 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v15, v9);
    v15 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    if (v9 >> 3 == 2)
    {
      if (v9 == 18)
      {
        *((_DWORD *)this + 4) |= 2u;
        v13 = (std::string *)*((_QWORD *)this + 4);
        if (v13 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v13 = *v5;
          goto LABEL_22;
        }
LABEL_23:
        v12 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v13, (std::string::value_type *)TagFallback, (uint64_t)a3);
        goto LABEL_24;
      }
    }
    else if (v9 >> 3 == 1 && v9 == 10)
    {
      *((_DWORD *)this + 4) |= 1u;
      v13 = (std::string *)*((_QWORD *)this + 3);
      if (v13 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v13 = *v6;
LABEL_22:
        TagFallback = v15;
      }
      goto LABEL_23;
    }
    if (!(_DWORD)v9 || (v9 & 7) == 4)
      break;
    v12 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v9, v7, TagFallback, a3);
LABEL_24:
    v15 = v12;
    if (!v12)
      return 0;
  }
  *((_DWORD *)a3 + 20) = (_DWORD)v9 - 1;
  return TagFallback;
}

unsigned __int8 *siri::dialogengine::CatBinary::metadata::InternalSerializeWithCachedSizesToArray(siri::dialogengine::CatBinary::metadata *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  unsigned __int8 *v4;
  int v6;
  uint64_t v7;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;

  v4 = (unsigned __int8 *)a2;
  v6 = *((_DWORD *)this + 4);
  if ((v6 & 1) != 0)
    v4 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 3), a2);
  if ((v6 & 2) != 0)
    v4 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((_QWORD *)this + 4), (char *)v4);
  v7 = *((_QWORD *)this + 1);
  if ((v7 & 1) == 0)
    return v4;
  v9 = v7 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v9 + 23) < 0)
  {
    v11 = *(void **)v9;
    v10 = *(_QWORD *)(v9 + 8);
  }
  else
  {
    LODWORD(v10) = *(unsigned __int8 *)(v9 + 23);
    v11 = (void *)v9;
  }
  if (*(_QWORD *)a3 - (_QWORD)v4 >= (int)v10)
  {
    v12 = (int)v10;
    memcpy(v4, v11, (int)v10);
    v4 += v12;
    return v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v11, v10, v4);
}

void siri::dialogengine::CatBinary::metadata::MergeFrom(siri::dialogengine::CatBinary::metadata *this, const siri::dialogengine::CatBinary::metadata *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  std::string *v7;
  const std::string *v8;
  std::string *v9;
  std::string **v10;
  std::string *v11;
  const std::string *v12;
  char v13;
  std::string v14[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/CatBinary.pb.cc", 1160);
    v4 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 3) != 0)
  {
    if ((v6 & 1) != 0)
    {
      v7 = (std::string *)*((_QWORD *)this + 3);
      *((_DWORD *)this + 4) |= 1u;
      v8 = (const std::string *)*((_QWORD *)a2 + 3);
      if (v7 != v8)
      {
        if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, (uint64_t)v8);
          if ((v6 & 2) == 0)
            return;
          goto LABEL_11;
        }
        std::string::operator=(v7, v8);
      }
    }
    if ((v6 & 2) == 0)
      return;
LABEL_11:
    v11 = (std::string *)*((_QWORD *)this + 4);
    v10 = (std::string **)((char *)this + 32);
    v9 = v11;
    *((_DWORD *)v10 - 4) |= 2u;
    v12 = (const std::string *)*((_QWORD *)a2 + 4);
    if (v11 != v12)
    {
      if (v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v10, (uint64_t)v12);
      else
        std::string::operator=(v9, v12);
    }
  }
}

void sub_1BF95E1E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

siri::dialogengine::CatBinary::metadata *google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::metadata>(google::protobuf::internal::ArenaImpl *this)
{
  siri::dialogengine::CatBinary::metadata *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (siri::dialogengine::CatBinary::metadata *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x28uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<siri::dialogengine::CatBinary::metadata>);
    siri::dialogengine::CatBinary::metadata::metadata(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (siri::dialogengine::CatBinary::metadata *)operator new();
    siri::dialogengine::CatBinary::metadata::metadata(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BF95E284(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C40DFBAE579);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<siri::dialogengine::CatBinary::metadata>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

siri::dialogengine::CatBinary::cat *siri::dialogengine::CatBinary::cat::cat(siri::dialogengine::CatBinary::cat *this)
{
  *(_QWORD *)this = &off_1E792F468;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  if (atomic_load(scc_info_cat_CatBinary_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_cat_CatBinary_2eproto);
  *((_QWORD *)this + 21) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 22) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 23) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 24) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 25) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 26) = 0;
  return this;
}

void sub_1BF95E410(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v2 + 144));
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v2 + 120));
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v2 + 96));
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v2 + 72));
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v2 + 48));
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v2 + 24));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void siri::dialogengine::CatBinary::cat::~cat(siri::dialogengine::CatBinary::cat *this)
{
  siri::dialogengine::CatBinary::cat::~cat(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)this = &off_1E792F468;
  v2 = *((_QWORD *)this + 21);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 22);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1C3B8D890](v4, 0x1012C40EC159624);
  }
  v6 = *((_QWORD *)this + 23);
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
  {
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    MEMORY[0x1C3B8D890](v6, 0x1012C40EC159624);
  }
  v8 = *((_QWORD *)this + 24);
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v8 != 0)
  {
    if (*(char *)(v8 + 23) < 0)
      operator delete(*(void **)v8);
    MEMORY[0x1C3B8D890](v8, 0x1012C40EC159624);
  }
  v10 = *((_QWORD *)this + 25);
  if ((uint64_t *)v10 != &google::protobuf::internal::fixed_address_empty_string && v10)
  {
    if (*(char *)(v10 + 23) < 0)
      operator delete(*(void **)v10);
    MEMORY[0x1C3B8D890](v10, 0x1012C40EC159624);
  }
  if (this != (siri::dialogengine::CatBinary::cat *)&siri::dialogengine::CatBinary::_cat_default_instance_)
  {
    v11 = *((_QWORD *)this + 26);
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((siri::dialogengine::CatBinary::cat *)((char *)this + 144));
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((siri::dialogengine::CatBinary::cat *)((char *)this + 120));
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((siri::dialogengine::CatBinary::cat *)((char *)this + 96));
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((siri::dialogengine::CatBinary::cat *)((char *)this + 72));
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((siri::dialogengine::CatBinary::cat *)((char *)this + 48));
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((siri::dialogengine::CatBinary::cat *)((char *)this + 24));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *siri::dialogengine::CatBinary::cat::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "siri.dialogengine.CatBinary.cat");
}

siri::dialogengine::CatBinary::cat *siri::dialogengine::CatBinary::cat::New(siri::dialogengine::CatBinary::cat *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::cat>(0);
}

siri::dialogengine::CatBinary::cat *siri::dialogengine::CatBinary::cat::New(siri::dialogengine::CatBinary::cat *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::cat>(a2);
}

void siri::dialogengine::CatBinary::cat::Clear(siri::dialogengine::CatBinary::cat *this)
{
  uint64_t v2;
  siri::dialogengine::CatBinary::metadata **v3;
  siri::dialogengine::CatBinary::metadata *v4;
  std::string *v5;
  uint64_t v6;
  siri::dialogengine::CatBinary::parameter **v7;
  siri::dialogengine::CatBinary::parameter *v8;
  std::string *v9;
  uint64_t v10;
  siri::dialogengine::CatBinary::condition **v11;
  siri::dialogengine::CatBinary::condition *v12;
  std::string *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  siri::dialogengine::CatBinary::node *v20;
  std::string *v21;
  google::protobuf::internal::InternalMetadataWithArenaLite *v22;
  char v23;
  char v24;
  std::string v25[2];

  v2 = *((unsigned int *)this + 8);
  if ((v2 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v25, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v5 = google::protobuf::internal::LogMessage::operator<<(v25, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v24, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v25[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v2)
  {
    v3 = (siri::dialogengine::CatBinary::metadata **)(*((_QWORD *)this + 5) + 8);
    do
    {
      v4 = *v3++;
      siri::dialogengine::CatBinary::metadata::Clear(v4);
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 8) = 0;
  }
  v6 = *((unsigned int *)this + 14);
  if ((v6 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v25, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v9 = google::protobuf::internal::LogMessage::operator<<(v25, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v24, (const char **)&v9->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v25[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v6)
  {
    v7 = (siri::dialogengine::CatBinary::parameter **)(*((_QWORD *)this + 8) + 8);
    do
    {
      v8 = *v7++;
      siri::dialogengine::CatBinary::parameter::Clear(v8);
      --v6;
    }
    while (v6);
    *((_DWORD *)this + 14) = 0;
  }
  v10 = *((unsigned int *)this + 20);
  if ((v10 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v25, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v13 = google::protobuf::internal::LogMessage::operator<<(v25, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v24, (const char **)&v13->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v25[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v10)
  {
    v11 = (siri::dialogengine::CatBinary::condition **)(*((_QWORD *)this + 11) + 8);
    do
    {
      v12 = *v11++;
      siri::dialogengine::CatBinary::condition::Clear(v12);
      --v10;
    }
    while (v10);
    *((_DWORD *)this + 20) = 0;
  }
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<siri::dialogengine::CatBinary::node>::TypeHandler>((uint64_t)this + 96);
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<siri::dialogengine::CatBinary::node>::TypeHandler>((uint64_t)this + 120);
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<siri::dialogengine::CatBinary::node>::TypeHandler>((uint64_t)this + 144);
  v14 = *((_DWORD *)this + 4);
  if ((v14 & 0x3F) != 0)
  {
    if ((v14 & 1) == 0)
    {
      if ((v14 & 2) == 0)
        goto LABEL_22;
LABEL_31:
      v16 = *((_QWORD *)this + 22);
      if (*(char *)(v16 + 23) < 0)
      {
        **(_BYTE **)v16 = 0;
        *(_QWORD *)(v16 + 8) = 0;
        if ((v14 & 4) != 0)
          goto LABEL_35;
      }
      else
      {
        *(_BYTE *)v16 = 0;
        *(_BYTE *)(v16 + 23) = 0;
        if ((v14 & 4) != 0)
          goto LABEL_35;
      }
LABEL_23:
      if ((v14 & 8) == 0)
        goto LABEL_24;
LABEL_39:
      v18 = *((_QWORD *)this + 24);
      if (*(char *)(v18 + 23) < 0)
      {
        **(_BYTE **)v18 = 0;
        *(_QWORD *)(v18 + 8) = 0;
        if ((v14 & 0x10) != 0)
          goto LABEL_43;
      }
      else
      {
        *(_BYTE *)v18 = 0;
        *(_BYTE *)(v18 + 23) = 0;
        if ((v14 & 0x10) != 0)
          goto LABEL_43;
      }
LABEL_25:
      if ((v14 & 0x20) == 0)
        goto LABEL_50;
LABEL_47:
      v20 = (siri::dialogengine::CatBinary::node *)*((_QWORD *)this + 26);
      if (!v20)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v25, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/CatBinary.pb.cc", 521);
        v21 = google::protobuf::internal::LogMessage::operator<<(v25, "CHECK failed: root_ != nullptr: ");
        google::protobuf::internal::LogFinisher::operator=((int)&v24, (const char **)&v21->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v25[0].__r_.__value_.__l.__data_);
        v20 = (siri::dialogengine::CatBinary::node *)*((_QWORD *)this + 26);
      }
      siri::dialogengine::CatBinary::node::Clear(v20);
      goto LABEL_50;
    }
    v15 = *((_QWORD *)this + 21);
    if (*(char *)(v15 + 23) < 0)
    {
      **(_BYTE **)v15 = 0;
      *(_QWORD *)(v15 + 8) = 0;
      if ((v14 & 2) != 0)
        goto LABEL_31;
    }
    else
    {
      *(_BYTE *)v15 = 0;
      *(_BYTE *)(v15 + 23) = 0;
      if ((v14 & 2) != 0)
        goto LABEL_31;
    }
LABEL_22:
    if ((v14 & 4) == 0)
      goto LABEL_23;
LABEL_35:
    v17 = *((_QWORD *)this + 23);
    if (*(char *)(v17 + 23) < 0)
    {
      **(_BYTE **)v17 = 0;
      *(_QWORD *)(v17 + 8) = 0;
      if ((v14 & 8) != 0)
        goto LABEL_39;
    }
    else
    {
      *(_BYTE *)v17 = 0;
      *(_BYTE *)(v17 + 23) = 0;
      if ((v14 & 8) != 0)
        goto LABEL_39;
    }
LABEL_24:
    if ((v14 & 0x10) == 0)
      goto LABEL_25;
LABEL_43:
    v19 = *((_QWORD *)this + 25);
    if (*(char *)(v19 + 23) < 0)
    {
      **(_BYTE **)v19 = 0;
      *(_QWORD *)(v19 + 8) = 0;
      if ((v14 & 0x20) == 0)
        goto LABEL_50;
    }
    else
    {
      *(_BYTE *)v19 = 0;
      *(_BYTE *)(v19 + 23) = 0;
      if ((v14 & 0x20) == 0)
        goto LABEL_50;
    }
    goto LABEL_47;
  }
LABEL_50:
  v23 = *((_BYTE *)this + 8);
  v22 = (siri::dialogengine::CatBinary::cat *)((char *)this + 8);
  *((_DWORD *)v22 + 2) = 0;
  if ((v23 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v22);
}

void sub_1BF95E790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::CatBinary::cat::IsInitialized(siri::dialogengine::CatBinary::cat *this)
{
  char *v2;
  int v3;
  BOOL v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  std::string *v8;
  char v9;
  std::string v10[2];

  if ((*((_BYTE *)this + 16) & 1) == 0)
    return 0;
  v2 = (char *)this + 72;
  v3 = *((_DWORD *)this + 20);
  while (1)
  {
    v4 = __OFSUB__(v3--, 1);
    if (v3 < 0 != v4)
      break;
    v5 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<siri::dialogengine::CatBinary::condition>::TypeHandler>((uint64_t)v2, v3);
    if (!google::protobuf::internal::AllAreInitialized<google::protobuf::RepeatedPtrField<siri::dialogengine::CatBinary::condition_entry>>(v5 + 24))
      return 0;
  }
  result = google::protobuf::internal::AllAreInitialized<google::protobuf::RepeatedPtrField<siri::dialogengine::CatBinary::node>>((uint64_t)this + 96);
  if (!result)
    return result;
  result = google::protobuf::internal::AllAreInitialized<google::protobuf::RepeatedPtrField<siri::dialogengine::CatBinary::node>>((uint64_t)this + 120);
  if (!result)
    return result;
  result = google::protobuf::internal::AllAreInitialized<google::protobuf::RepeatedPtrField<siri::dialogengine::CatBinary::node>>((uint64_t)this + 144);
  if (!result)
    return result;
  if ((*((_DWORD *)this + 4) & 0x20) == 0)
    return 1;
  v7 = *((_QWORD *)this + 26);
  if (!v7)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/CatBinary.pb.h", 3139);
    v8 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: !value || root_ != nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v8->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
    v7 = *((_QWORD *)this + 26);
  }
  if ((*(_BYTE *)(v7 + 17) & 0x10) == 0)
    return 0;
  result = google::protobuf::internal::AllAreInitialized<google::protobuf::RepeatedPtrField<siri::dialogengine::CatBinary::node>>(v7 + 24);
  if (result)
    return 1;
  return result;
}

void sub_1BF95E8B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void siri::dialogengine::CatBinary::cat::CheckTypeAndMergeFrom(siri::dialogengine::CatBinary::cat *this, const google::protobuf::MessageLite *lpsrc)
{
  siri::dialogengine::CatBinary::cat::MergeFrom(this, lpsrc);
}

uint64_t siri::dialogengine::CatBinary::cat::ByteSizeLong(siri::dialogengine::CatBinary::cat *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  siri::dialogengine::CatBinary::metadata **v9;
  uint64_t v10;
  siri::dialogengine::CatBinary::metadata *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  siri::dialogengine::CatBinary::parameter **v16;
  uint64_t v17;
  siri::dialogengine::CatBinary::parameter *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  siri::dialogengine::CatBinary::condition **v23;
  uint64_t v24;
  siri::dialogengine::CatBinary::condition *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  siri::dialogengine::CatBinary::node **v30;
  uint64_t v31;
  siri::dialogengine::CatBinary::node *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  siri::dialogengine::CatBinary::node **v37;
  uint64_t v38;
  siri::dialogengine::CatBinary::node *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  siri::dialogengine::CatBinary::node **v44;
  uint64_t v45;
  siri::dialogengine::CatBinary::node *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;

  if ((*((_BYTE *)this + 16) & 1) != 0)
  {
    v3 = *((_QWORD *)this + 21);
    v4 = *(unsigned __int8 *)(v3 + 23);
    v5 = *(_QWORD *)(v3 + 8);
    if ((v4 & 0x80u) == 0)
      v5 = v4;
    v2 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  else
  {
    v2 = 0;
  }
  v6 = *((int *)this + 8);
  v7 = v2 + v6;
  v8 = *((_QWORD *)this + 5);
  if (v8)
    v9 = (siri::dialogengine::CatBinary::metadata **)(v8 + 8);
  else
    v9 = 0;
  if ((_DWORD)v6)
  {
    v10 = 8 * v6;
    do
    {
      v11 = *v9++;
      v12 = siri::dialogengine::CatBinary::metadata::ByteSizeLong(v11);
      v7 += v12 + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6);
      v10 -= 8;
    }
    while (v10);
  }
  v13 = *((int *)this + 14);
  v14 = v7 + v13;
  v15 = *((_QWORD *)this + 8);
  if (v15)
    v16 = (siri::dialogengine::CatBinary::parameter **)(v15 + 8);
  else
    v16 = 0;
  if ((_DWORD)v13)
  {
    v17 = 8 * v13;
    do
    {
      v18 = *v16++;
      v19 = siri::dialogengine::CatBinary::parameter::ByteSizeLong(v18);
      v14 += v19 + ((9 * (__clz(v19 | 1) ^ 0x1F) + 73) >> 6);
      v17 -= 8;
    }
    while (v17);
  }
  v20 = *((int *)this + 20);
  v21 = v14 + v20;
  v22 = *((_QWORD *)this + 11);
  if (v22)
    v23 = (siri::dialogengine::CatBinary::condition **)(v22 + 8);
  else
    v23 = 0;
  if ((_DWORD)v20)
  {
    v24 = 8 * v20;
    do
    {
      v25 = *v23++;
      v26 = siri::dialogengine::CatBinary::condition::ByteSizeLong(v25);
      v21 += v26 + ((9 * (__clz(v26 | 1) ^ 0x1F) + 73) >> 6);
      v24 -= 8;
    }
    while (v24);
  }
  v27 = *((int *)this + 26);
  v28 = v21 + v27;
  v29 = *((_QWORD *)this + 14);
  if (v29)
    v30 = (siri::dialogengine::CatBinary::node **)(v29 + 8);
  else
    v30 = 0;
  if ((_DWORD)v27)
  {
    v31 = 8 * v27;
    do
    {
      v32 = *v30++;
      v33 = siri::dialogengine::CatBinary::node::ByteSizeLong(v32);
      v28 += v33 + ((9 * (__clz(v33 | 1) ^ 0x1F) + 73) >> 6);
      v31 -= 8;
    }
    while (v31);
  }
  v34 = *((int *)this + 32);
  v35 = v28 + v34;
  v36 = *((_QWORD *)this + 17);
  if (v36)
    v37 = (siri::dialogengine::CatBinary::node **)(v36 + 8);
  else
    v37 = 0;
  if ((_DWORD)v34)
  {
    v38 = 8 * v34;
    do
    {
      v39 = *v37++;
      v40 = siri::dialogengine::CatBinary::node::ByteSizeLong(v39);
      v35 += v40 + ((9 * (__clz(v40 | 1) ^ 0x1F) + 73) >> 6);
      v38 -= 8;
    }
    while (v38);
  }
  v41 = *((int *)this + 38);
  v42 = v35 + v41;
  v43 = *((_QWORD *)this + 20);
  if (v43)
    v44 = (siri::dialogengine::CatBinary::node **)(v43 + 8);
  else
    v44 = 0;
  if ((_DWORD)v41)
  {
    v45 = 8 * v41;
    do
    {
      v46 = *v44++;
      v47 = siri::dialogengine::CatBinary::node::ByteSizeLong(v46);
      v42 += v47 + ((9 * (__clz(v47 | 1) ^ 0x1F) + 73) >> 6);
      v45 -= 8;
    }
    while (v45);
  }
  v48 = *((_DWORD *)this + 4);
  if ((v48 & 0x3E) == 0)
    goto LABEL_49;
  if ((v48 & 2) != 0)
  {
    v52 = *((_QWORD *)this + 22);
    v53 = *(unsigned __int8 *)(v52 + 23);
    v54 = *(_QWORD *)(v52 + 8);
    if ((v53 & 0x80u) == 0)
      v54 = v53;
    v42 += v54 + ((9 * (__clz(v54 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v48 & 4) == 0)
    {
LABEL_45:
      if ((v48 & 8) == 0)
        goto LABEL_46;
LABEL_57:
      v58 = *((_QWORD *)this + 24);
      v59 = *(unsigned __int8 *)(v58 + 23);
      v60 = *(_QWORD *)(v58 + 8);
      if ((v59 & 0x80u) == 0)
        v60 = v59;
      v42 += v60 + ((9 * (__clz(v60 | 1) ^ 0x1F) + 73) >> 6) + 1;
      if ((v48 & 0x10) == 0)
      {
LABEL_47:
        if ((v48 & 0x20) == 0)
          goto LABEL_49;
        goto LABEL_48;
      }
      goto LABEL_60;
    }
  }
  else if ((v48 & 4) == 0)
  {
    goto LABEL_45;
  }
  v55 = *((_QWORD *)this + 23);
  v56 = *(unsigned __int8 *)(v55 + 23);
  v57 = *(_QWORD *)(v55 + 8);
  if ((v56 & 0x80u) == 0)
    v57 = v56;
  v42 += v57 + ((9 * (__clz(v57 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v48 & 8) != 0)
    goto LABEL_57;
LABEL_46:
  if ((v48 & 0x10) == 0)
    goto LABEL_47;
LABEL_60:
  v61 = *((_QWORD *)this + 25);
  v62 = *(unsigned __int8 *)(v61 + 23);
  v63 = *(_QWORD *)(v61 + 8);
  if ((v62 & 0x80u) == 0)
    v63 = v62;
  v42 += v63 + ((9 * (__clz(v63 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v48 & 0x20) != 0)
  {
LABEL_48:
    v49 = siri::dialogengine::CatBinary::node::ByteSizeLong(*((siri::dialogengine::CatBinary::node **)this + 26));
    v42 += v49 + ((9 * (__clz(v49 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_49:
  v50 = *((_QWORD *)this + 1);
  if ((v50 & 1) != 0)
  {
    v64 = v50 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v64 + 23) < 0)
      v65 = *(_QWORD *)(v64 + 8);
    else
      v65 = *(unsigned __int8 *)(v64 + 23);
    v42 += v65;
  }
  *((_DWORD *)this + 5) = v42;
  return v42;
}

uint64_t siri::dialogengine::CatBinary::cat::GetCachedSize(siri::dialogengine::CatBinary::cat *this)
{
  return *((unsigned int *)this + 5);
}

google::protobuf::internal *siri::dialogengine::CatBinary::cat::_InternalParse(siri::dialogengine::CatBinary::cat *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int *v9;
  google::protobuf::internal *TagFallback;
  const char *v11;
  std::string *v12;
  std::string **v13;
  google::protobuf::internal *v14;
  google::protobuf::internal *v15;
  int *v16;
  uint64_t v17;
  int v18;
  siri::dialogengine::CatBinary::metadata *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  char *v23;
  char *SizeFallback;
  unsigned int v25;
  int v26;
  int v27;
  BOOL v28;
  int v29;
  int v30;
  unint64_t v31;
  google::protobuf::internal *v32;
  google::protobuf::internal *v33;
  int *v34;
  uint64_t v35;
  int v36;
  siri::dialogengine::CatBinary::parameter *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  char *v41;
  char *v42;
  unsigned int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  unint64_t v48;
  google::protobuf::internal *v49;
  google::protobuf::internal *v50;
  int *v51;
  uint64_t v52;
  int v53;
  siri::dialogengine::CatBinary::condition *v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  char *v58;
  char *v59;
  unsigned int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  unint64_t v65;
  char *v66;
  google::protobuf::internal *v67;
  int *v68;
  uint64_t v69;
  int v70;
  siri::dialogengine::CatBinary::node *v71;
  uint64_t v72;
  uint64_t v73;
  siri::dialogengine::CatBinary::node *v74;
  google::protobuf::internal *v75;
  char *v76;
  google::protobuf::internal *v77;
  int *v78;
  uint64_t v79;
  int v80;
  siri::dialogengine::CatBinary::node *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  google::protobuf::internal *v85;
  int *v86;
  uint64_t v87;
  int v88;
  siri::dialogengine::CatBinary::node *v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  std::string **v94;
  std::string **v95;
  std::string **v96;
  std::string **v97;
  std::string **v98;
  uint64_t *v99;
  unsigned int *v100;
  google::protobuf::internal *v101;

  v5 = (unsigned int *)((char *)this + 144);
  v6 = (unsigned int *)((char *)this + 120);
  v7 = (unsigned int *)((char *)this + 96);
  v100 = (unsigned int *)((char *)this + 72);
  v101 = a2;
  v8 = (unsigned int *)((char *)this + 48);
  v9 = (unsigned int *)((char *)this + 24);
  v97 = (std::string **)((char *)this + 192);
  v98 = (std::string **)((char *)this + 200);
  v95 = (std::string **)((char *)this + 176);
  v96 = (std::string **)((char *)this + 184);
  v94 = (std::string **)((char *)this + 168);
  v99 = (uint64_t *)((char *)this + 8);
LABEL_2:
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v101, *((_DWORD *)a3 + 23)) & 1) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v101 + 1);
      LODWORD(v11) = *(unsigned __int8 *)v101;
      if (*(char *)v101 < 0)
      {
        v11 = (const char *)(v11 + (*(unsigned __int8 *)TagFallback << 7) - 128);
        if (*(char *)TagFallback < 0)
        {
          TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v101, v11);
          v101 = TagFallback;
          if (!TagFallback)
            return TagFallback;
LABEL_7:
          switch(v11 >> 3)
          {
            case 1u:
              if (v11 != 10)
                goto LABEL_129;
              *((_DWORD *)this + 4) |= 1u;
              v12 = (std::string *)*((_QWORD *)this + 21);
              if (v12 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_126;
              v13 = v94;
              goto LABEL_125;
            case 2u:
              if (v11 != 18)
                goto LABEL_129;
              *((_DWORD *)this + 4) |= 2u;
              v12 = (std::string *)*((_QWORD *)this + 22);
              if (v12 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_126;
              v13 = v95;
              goto LABEL_125;
            case 3u:
              if (v11 != 26)
                goto LABEL_129;
              *((_DWORD *)this + 4) |= 4u;
              v12 = (std::string *)*((_QWORD *)this + 23);
              if (v12 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_126;
              v13 = v96;
              goto LABEL_125;
            case 4u:
              if (v11 != 34)
                goto LABEL_129;
              *((_DWORD *)this + 4) |= 8u;
              v12 = (std::string *)*((_QWORD *)this + 24);
              if (v12 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_126;
              v13 = v97;
              goto LABEL_125;
            case 5u:
              if (v11 != 42)
                goto LABEL_129;
              v14 = (google::protobuf::internal *)((char *)TagFallback - 1);
LABEL_24:
              v15 = (google::protobuf::internal *)((char *)v14 + 1);
              v101 = v15;
              v16 = (int *)*((_QWORD *)this + 5);
              if (!v16)
              {
                v18 = *((_DWORD *)this + 9);
LABEL_29:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v9, v18 + 1);
                v16 = (int *)*((_QWORD *)this + 5);
                v18 = *v16;
                goto LABEL_30;
              }
              v17 = *((int *)this + 8);
              v18 = *v16;
              if ((int)v17 < *v16)
              {
                *((_DWORD *)this + 8) = v17 + 1;
                v19 = *(siri::dialogengine::CatBinary::metadata **)&v16[2 * v17 + 2];
                goto LABEL_31;
              }
              if (v18 == *((_DWORD *)this + 9))
                goto LABEL_29;
LABEL_30:
              *v16 = v18 + 1;
              v19 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::metadata>(*((google::protobuf::internal::ArenaImpl **)this + 3));
              v20 = *((_QWORD *)this + 5);
              v21 = *((int *)this + 8);
              *((_DWORD *)this + 8) = v21 + 1;
              *(_QWORD *)(v20 + 8 * v21 + 8) = v19;
              v15 = v101;
LABEL_31:
              v22 = *(unsigned __int8 *)v15;
              if (*(char *)v15 < 0)
              {
                SizeFallback = google::protobuf::internal::ReadSizeFallback(v15, (const char *)*(unsigned __int8 *)v15);
                if (!SizeFallback)
                  return 0;
                v23 = SizeFallback;
                v22 = v25;
              }
              else
              {
                v23 = (char *)v15 + 1;
              }
              v26 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v23, v22);
              v27 = *((_DWORD *)a3 + 22);
              v28 = __OFSUB__(v27--, 1);
              *((_DWORD *)a3 + 22) = v27;
              if (v27 < 0 == v28)
              {
                v29 = v26;
                v14 = siri::dialogengine::CatBinary::metadata::_InternalParse(v19, (google::protobuf::internal *)v23, a3);
                if (v14)
                {
                  ++*((_DWORD *)a3 + 22);
                  if (!*((_DWORD *)a3 + 20))
                  {
                    v30 = *((_DWORD *)a3 + 7) + v29;
                    *((_DWORD *)a3 + 7) = v30;
                    v31 = *((_QWORD *)a3 + 1) + (v30 & (v30 >> 31));
                    *(_QWORD *)a3 = v31;
                    v101 = v14;
                    if (v31 <= (unint64_t)v14 || *(_BYTE *)v14 != 42)
                      continue;
                    goto LABEL_24;
                  }
                }
              }
              return 0;
            case 6u:
              if (v11 != 50)
                goto LABEL_129;
              v32 = (google::protobuf::internal *)((char *)TagFallback - 1);
LABEL_43:
              v33 = (google::protobuf::internal *)((char *)v32 + 1);
              v101 = v33;
              v34 = (int *)*((_QWORD *)this + 8);
              if (!v34)
              {
                v36 = *((_DWORD *)this + 15);
LABEL_48:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v8, v36 + 1);
                v34 = (int *)*((_QWORD *)this + 8);
                v36 = *v34;
                goto LABEL_49;
              }
              v35 = *((int *)this + 14);
              v36 = *v34;
              if ((int)v35 < *v34)
              {
                *((_DWORD *)this + 14) = v35 + 1;
                v37 = *(siri::dialogengine::CatBinary::parameter **)&v34[2 * v35 + 2];
                goto LABEL_50;
              }
              if (v36 == *((_DWORD *)this + 15))
                goto LABEL_48;
LABEL_49:
              *v34 = v36 + 1;
              v37 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::parameter>(*((google::protobuf::internal::ArenaImpl **)this + 6));
              v38 = *((_QWORD *)this + 8);
              v39 = *((int *)this + 14);
              *((_DWORD *)this + 14) = v39 + 1;
              *(_QWORD *)(v38 + 8 * v39 + 8) = v37;
              v33 = v101;
LABEL_50:
              v40 = *(unsigned __int8 *)v33;
              if (*(char *)v33 < 0)
              {
                v42 = google::protobuf::internal::ReadSizeFallback(v33, (const char *)*(unsigned __int8 *)v33);
                if (!v42)
                  return 0;
                v41 = v42;
                v40 = v43;
              }
              else
              {
                v41 = (char *)v33 + 1;
              }
              v44 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v41, v40);
              v45 = *((_DWORD *)a3 + 22);
              v28 = __OFSUB__(v45--, 1);
              *((_DWORD *)a3 + 22) = v45;
              if (v45 < 0 == v28)
              {
                v46 = v44;
                v32 = siri::dialogengine::CatBinary::parameter::_InternalParse(v37, (google::protobuf::internal *)v41, a3);
                if (v32)
                {
                  ++*((_DWORD *)a3 + 22);
                  if (!*((_DWORD *)a3 + 20))
                  {
                    v47 = *((_DWORD *)a3 + 7) + v46;
                    *((_DWORD *)a3 + 7) = v47;
                    v48 = *((_QWORD *)a3 + 1) + (v47 & (v47 >> 31));
                    *(_QWORD *)a3 = v48;
                    v101 = v32;
                    if (v48 <= (unint64_t)v32 || *(_BYTE *)v32 != 50)
                      continue;
                    goto LABEL_43;
                  }
                }
              }
              return 0;
            case 7u:
              if (v11 != 58)
                goto LABEL_129;
              v49 = (google::protobuf::internal *)((char *)TagFallback - 1);
LABEL_62:
              v50 = (google::protobuf::internal *)((char *)v49 + 1);
              v101 = v50;
              v51 = (int *)*((_QWORD *)this + 11);
              if (!v51)
              {
                v53 = *((_DWORD *)this + 21);
LABEL_67:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v100, v53 + 1);
                v51 = (int *)*((_QWORD *)this + 11);
                v53 = *v51;
                goto LABEL_68;
              }
              v52 = *((int *)this + 20);
              v53 = *v51;
              if ((int)v52 < *v51)
              {
                *((_DWORD *)this + 20) = v52 + 1;
                v54 = *(siri::dialogengine::CatBinary::condition **)&v51[2 * v52 + 2];
                goto LABEL_69;
              }
              if (v53 == *((_DWORD *)this + 21))
                goto LABEL_67;
LABEL_68:
              *v51 = v53 + 1;
              v54 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::condition>(*((google::protobuf::internal::ArenaImpl **)this + 9));
              v55 = *((_QWORD *)this + 11);
              v56 = *((int *)this + 20);
              *((_DWORD *)this + 20) = v56 + 1;
              *(_QWORD *)(v55 + 8 * v56 + 8) = v54;
              v50 = v101;
LABEL_69:
              v57 = *(unsigned __int8 *)v50;
              if (*(char *)v50 < 0)
              {
                v59 = google::protobuf::internal::ReadSizeFallback(v50, (const char *)*(unsigned __int8 *)v50);
                if (!v59)
                  return 0;
                v58 = v59;
                v57 = v60;
              }
              else
              {
                v58 = (char *)v50 + 1;
              }
              v61 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v58, v57);
              v62 = *((_DWORD *)a3 + 22);
              v28 = __OFSUB__(v62--, 1);
              *((_DWORD *)a3 + 22) = v62;
              if (v62 < 0 == v28)
              {
                v63 = v61;
                v49 = siri::dialogengine::CatBinary::condition::_InternalParse(v54, (google::protobuf::internal *)v58, a3);
                if (v49)
                {
                  ++*((_DWORD *)a3 + 22);
                  if (!*((_DWORD *)a3 + 20))
                  {
                    v64 = *((_DWORD *)a3 + 7) + v63;
                    *((_DWORD *)a3 + 7) = v64;
                    v65 = *((_QWORD *)a3 + 1) + (v64 & (v64 >> 31));
                    *(_QWORD *)a3 = v65;
                    v101 = v49;
                    if (v65 <= (unint64_t)v49 || *(_BYTE *)v49 != 58)
                      continue;
                    goto LABEL_62;
                  }
                }
              }
              return 0;
            case 8u:
              if (v11 != 66)
                goto LABEL_129;
              v66 = (char *)TagFallback - 1;
              while (1)
              {
                v67 = (google::protobuf::internal *)(v66 + 1);
                v101 = (google::protobuf::internal *)(v66 + 1);
                v68 = (int *)*((_QWORD *)this + 14);
                if (!v68)
                  break;
                v69 = *((int *)this + 26);
                v70 = *v68;
                if ((int)v69 >= *v68)
                {
                  if (v70 == *((_DWORD *)this + 27))
                  {
LABEL_86:
                    google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v7, v70 + 1);
                    v68 = (int *)*((_QWORD *)this + 14);
                    v70 = *v68;
                  }
                  *v68 = v70 + 1;
                  v71 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::node>(*((google::protobuf::internal::ArenaImpl **)this + 12));
                  v72 = *((_QWORD *)this + 14);
                  v73 = *((int *)this + 26);
                  *((_DWORD *)this + 26) = v73 + 1;
                  *(_QWORD *)(v72 + 8 * v73 + 8) = v71;
                  v67 = v101;
                  goto LABEL_88;
                }
                *((_DWORD *)this + 26) = v69 + 1;
                v71 = *(siri::dialogengine::CatBinary::node **)&v68[2 * v69 + 2];
LABEL_88:
                v66 = google::protobuf::internal::ParseContext::ParseMessage<siri::dialogengine::CatBinary::node>(a3, v71, v67);
                v101 = (google::protobuf::internal *)v66;
                if (!v66)
                  return 0;
                if (*(_QWORD *)a3 <= (unint64_t)v66 || *v66 != 66)
                  goto LABEL_2;
              }
              v70 = *((_DWORD *)this + 27);
              goto LABEL_86;
            case 9u:
              if (v11 != 74)
                goto LABEL_129;
              *((_DWORD *)this + 4) |= 0x20u;
              v74 = (siri::dialogengine::CatBinary::node *)*((_QWORD *)this + 26);
              if (!v74)
              {
                v74 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::node>(0);
                *((_QWORD *)this + 26) = v74;
                TagFallback = v101;
              }
              v75 = (google::protobuf::internal *)google::protobuf::internal::ParseContext::ParseMessage<siri::dialogengine::CatBinary::node>(a3, v74, TagFallback);
              goto LABEL_127;
            case 0xAu:
              if (v11 != 82)
                goto LABEL_129;
              v76 = (char *)TagFallback - 1;
              while (1)
              {
                v77 = (google::protobuf::internal *)(v76 + 1);
                v101 = (google::protobuf::internal *)(v76 + 1);
                v78 = (int *)*((_QWORD *)this + 17);
                if (!v78)
                  break;
                v79 = *((int *)this + 32);
                v80 = *v78;
                if ((int)v79 >= *v78)
                {
                  if (v80 == *((_DWORD *)this + 33))
                  {
LABEL_103:
                    google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v80 + 1);
                    v78 = (int *)*((_QWORD *)this + 17);
                    v80 = *v78;
                  }
                  *v78 = v80 + 1;
                  v81 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::node>(*((google::protobuf::internal::ArenaImpl **)this + 15));
                  v82 = *((_QWORD *)this + 17);
                  v83 = *((int *)this + 32);
                  *((_DWORD *)this + 32) = v83 + 1;
                  *(_QWORD *)(v82 + 8 * v83 + 8) = v81;
                  v77 = v101;
                  goto LABEL_105;
                }
                *((_DWORD *)this + 32) = v79 + 1;
                v81 = *(siri::dialogengine::CatBinary::node **)&v78[2 * v79 + 2];
LABEL_105:
                v76 = google::protobuf::internal::ParseContext::ParseMessage<siri::dialogengine::CatBinary::node>(a3, v81, v77);
                v101 = (google::protobuf::internal *)v76;
                if (!v76)
                  return 0;
                if (*(_QWORD *)a3 <= (unint64_t)v76 || *v76 != 82)
                  goto LABEL_2;
              }
              v80 = *((_DWORD *)this + 33);
              goto LABEL_103;
            case 0xBu:
              if (v11 != 90)
                goto LABEL_129;
              v84 = (char *)TagFallback - 1;
              break;
            case 0xCu:
              if (v11 != 98)
                goto LABEL_129;
              *((_DWORD *)this + 4) |= 0x10u;
              v12 = (std::string *)*((_QWORD *)this + 25);
              if (v12 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_126;
              v13 = v98;
LABEL_125:
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v13, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              v12 = *v13;
              TagFallback = v101;
LABEL_126:
              v75 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v12, (std::string::value_type *)TagFallback, (uint64_t)a3);
              goto LABEL_127;
            default:
LABEL_129:
              if ((_DWORD)v11)
                v92 = (v11 & 7) == 4;
              else
                v92 = 1;
              if (v92)
              {
                *((_DWORD *)a3 + 20) = (_DWORD)v11 - 1;
                return TagFallback;
              }
              v75 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v11, v99, TagFallback, a3);
LABEL_127:
              v101 = v75;
              if (!v75)
                return 0;
              continue;
          }
          while (1)
          {
            v85 = (google::protobuf::internal *)(v84 + 1);
            v101 = (google::protobuf::internal *)(v84 + 1);
            v86 = (int *)*((_QWORD *)this + 20);
            if (!v86)
              break;
            v87 = *((int *)this + 38);
            v88 = *v86;
            if ((int)v87 >= *v86)
            {
              if (v88 == *((_DWORD *)this + 39))
              {
LABEL_116:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v88 + 1);
                v86 = (int *)*((_QWORD *)this + 20);
                v88 = *v86;
              }
              *v86 = v88 + 1;
              v89 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::node>(*((google::protobuf::internal::ArenaImpl **)this + 18));
              v90 = *((_QWORD *)this + 20);
              v91 = *((int *)this + 38);
              *((_DWORD *)this + 38) = v91 + 1;
              *(_QWORD *)(v90 + 8 * v91 + 8) = v89;
              v85 = v101;
              goto LABEL_118;
            }
            *((_DWORD *)this + 38) = v87 + 1;
            v89 = *(siri::dialogengine::CatBinary::node **)&v86[2 * v87 + 2];
LABEL_118:
            v84 = google::protobuf::internal::ParseContext::ParseMessage<siri::dialogengine::CatBinary::node>(a3, v89, v85);
            v101 = (google::protobuf::internal *)v84;
            if (!v84)
              return 0;
            if (*(_QWORD *)a3 <= (unint64_t)v84 || *v84 != 90)
              goto LABEL_2;
          }
          v88 = *((_DWORD *)this + 39);
          goto LABEL_116;
        }
        TagFallback = (google::protobuf::internal *)((char *)v101 + 2);
      }
      v101 = TagFallback;
      goto LABEL_7;
    }
    return v101;
  }
}

unsigned __int8 *siri::dialogengine::CatBinary::cat::InternalSerializeWithCachedSizesToArray(siri::dialogengine::CatBinary::cat *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  char *v4;
  int v6;
  int v7;
  int v8;
  std::string *v9;
  std::string *v10;
  siri::dialogengine::CatBinary::metadata *v11;
  unsigned int v12;
  char *v13;
  unsigned int v14;
  _BYTE *v15;
  _BYTE *v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  std::string *v21;
  std::string *v22;
  siri::dialogengine::CatBinary::parameter *v23;
  unsigned int v24;
  char *v25;
  unsigned int v26;
  _BYTE *v27;
  _BYTE *v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  int i;
  siri::dialogengine::CatBinary::condition *v33;
  unsigned int v34;
  char *v35;
  unsigned int v36;
  _BYTE *v37;
  _BYTE *v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  int j;
  siri::dialogengine::CatBinary::node *v43;
  unsigned int v44;
  char *v45;
  unsigned int v46;
  _BYTE *v47;
  _BYTE *v48;
  unsigned int v49;
  unsigned int v50;
  siri::dialogengine::CatBinary::node *v51;
  unsigned int v52;
  char *v53;
  unsigned int v54;
  _BYTE *v55;
  _BYTE *v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  int k;
  siri::dialogengine::CatBinary::node *v61;
  unsigned int v62;
  char *v63;
  unsigned int v64;
  _BYTE *v65;
  _BYTE *v66;
  unsigned int v67;
  unsigned int v68;
  int v69;
  int m;
  siri::dialogengine::CatBinary::node *v71;
  unsigned int v72;
  char *v73;
  unsigned int v74;
  _BYTE *v75;
  _BYTE *v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  unint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  char v85;
  std::string v86[2];

  v4 = a2;
  v6 = *((_DWORD *)this + 4);
  if ((v6 & 1) != 0)
  {
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 21), a2);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_73;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((_QWORD *)this + 22), v4);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_73:
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, *((_QWORD *)this + 23), v4);
  if ((v6 & 8) != 0)
LABEL_5:
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 4, *((_QWORD *)this + 24), v4);
LABEL_6:
  v7 = *((_DWORD *)this + 8);
  if (v7)
  {
    v8 = 0;
    while ((unint64_t)v4 < *(_QWORD *)a3)
    {
      if (v8 < 0)
        goto LABEL_10;
LABEL_11:
      if (*((_DWORD *)this + 8) <= v8)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v86, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1539);
        v10 = google::protobuf::internal::LogMessage::operator<<(v86, "CHECK failed: (index) < (current_size_): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v85, (const char **)&v10->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v86[0].__r_.__value_.__l.__data_);
      }
      v11 = *(siri::dialogengine::CatBinary::metadata **)(*((_QWORD *)this + 5) + 8 * v8 + 8);
      *v4 = 42;
      v12 = *((_DWORD *)v11 + 5);
      if (v12 > 0x7F)
      {
        v4[1] = v12 | 0x80;
        v14 = v12 >> 7;
        if (v12 >> 14)
        {
          v15 = v4 + 2;
          do
          {
            v16 = v15;
            *v15++ = v14 | 0x80;
            v17 = v14 >> 7;
            v18 = v14 >> 14;
            v14 >>= 7;
          }
          while (v18);
          v13 = v16 + 2;
          *v15 = v17;
        }
        else
        {
          v4[2] = v14;
          v13 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v12;
        v13 = v4 + 2;
      }
      v4 = (char *)siri::dialogengine::CatBinary::metadata::InternalSerializeWithCachedSizesToArray(v11, v13, a3);
      if (++v8 == v7)
        goto LABEL_24;
    }
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_11;
LABEL_10:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v86, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v9 = google::protobuf::internal::LogMessage::operator<<(v86, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v85, (const char **)&v9->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v86[0].__r_.__value_.__l.__data_);
    goto LABEL_11;
  }
LABEL_24:
  v19 = *((_DWORD *)this + 14);
  if (v19)
  {
    v20 = 0;
    while ((unint64_t)v4 < *(_QWORD *)a3)
    {
      if (v20 < 0)
        goto LABEL_28;
LABEL_29:
      if (*((_DWORD *)this + 14) <= v20)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v86, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1539);
        v22 = google::protobuf::internal::LogMessage::operator<<(v86, "CHECK failed: (index) < (current_size_): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v85, (const char **)&v22->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v86[0].__r_.__value_.__l.__data_);
      }
      v23 = *(siri::dialogengine::CatBinary::parameter **)(*((_QWORD *)this + 8) + 8 * v20 + 8);
      *v4 = 50;
      v24 = *((_DWORD *)v23 + 5);
      if (v24 > 0x7F)
      {
        v4[1] = v24 | 0x80;
        v26 = v24 >> 7;
        if (v24 >> 14)
        {
          v27 = v4 + 2;
          do
          {
            v28 = v27;
            *v27++ = v26 | 0x80;
            v29 = v26 >> 7;
            v30 = v26 >> 14;
            v26 >>= 7;
          }
          while (v30);
          v25 = v28 + 2;
          *v27 = v29;
        }
        else
        {
          v4[2] = v26;
          v25 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v24;
        v25 = v4 + 2;
      }
      v4 = (char *)siri::dialogengine::CatBinary::parameter::InternalSerializeWithCachedSizesToArray(v23, v25, a3);
      if (++v20 == v19)
        goto LABEL_42;
    }
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    if ((v20 & 0x80000000) == 0)
      goto LABEL_29;
LABEL_28:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v86, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v21 = google::protobuf::internal::LogMessage::operator<<(v86, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v85, (const char **)&v21->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v86[0].__r_.__value_.__l.__data_);
    goto LABEL_29;
  }
LABEL_42:
  v31 = *((_DWORD *)this + 20);
  if (v31)
  {
    for (i = 0; i != v31; ++i)
    {
      if ((unint64_t)v4 >= *(_QWORD *)a3)
        v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v33 = (siri::dialogengine::CatBinary::condition *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<siri::dialogengine::CatBinary::condition>::TypeHandler>((uint64_t)this + 72, i);
      *v4 = 58;
      v34 = *((_DWORD *)v33 + 5);
      if (v34 > 0x7F)
      {
        v4[1] = v34 | 0x80;
        v36 = v34 >> 7;
        if (v34 >> 14)
        {
          v37 = v4 + 2;
          do
          {
            v38 = v37;
            *v37++ = v36 | 0x80;
            v39 = v36 >> 7;
            v40 = v36 >> 14;
            v36 >>= 7;
          }
          while (v40);
          v35 = v38 + 2;
          *v37 = v39;
        }
        else
        {
          v4[2] = v36;
          v35 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v34;
        v35 = v4 + 2;
      }
      v4 = (char *)siri::dialogengine::CatBinary::condition::InternalSerializeWithCachedSizesToArray(v33, v35, a3);
    }
  }
  v41 = *((_DWORD *)this + 26);
  if (v41)
  {
    for (j = 0; j != v41; ++j)
    {
      if ((unint64_t)v4 >= *(_QWORD *)a3)
        v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v43 = (siri::dialogengine::CatBinary::node *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<siri::dialogengine::CatBinary::node>::TypeHandler>((uint64_t)this + 96, j);
      *v4 = 66;
      v44 = *((_DWORD *)v43 + 5);
      if (v44 > 0x7F)
      {
        v4[1] = v44 | 0x80;
        v46 = v44 >> 7;
        if (v44 >> 14)
        {
          v47 = v4 + 2;
          do
          {
            v48 = v47;
            *v47++ = v46 | 0x80;
            v49 = v46 >> 7;
            v50 = v46 >> 14;
            v46 >>= 7;
          }
          while (v50);
          v45 = v48 + 2;
          *v47 = v49;
        }
        else
        {
          v4[2] = v46;
          v45 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v44;
        v45 = v4 + 2;
      }
      v4 = (char *)siri::dialogengine::CatBinary::node::InternalSerializeWithCachedSizesToArray(v43, v45, a3);
    }
  }
  if ((v6 & 0x20) != 0)
  {
    if ((unint64_t)v4 >= *(_QWORD *)a3)
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    v51 = (siri::dialogengine::CatBinary::node *)*((_QWORD *)this + 26);
    *v4 = 74;
    v52 = *((_DWORD *)v51 + 5);
    if (v52 > 0x7F)
    {
      v4[1] = v52 | 0x80;
      v54 = v52 >> 7;
      if (v52 >> 14)
      {
        v55 = v4 + 2;
        do
        {
          v56 = v55;
          *v55++ = v54 | 0x80;
          v57 = v54 >> 7;
          v58 = v54 >> 14;
          v54 >>= 7;
        }
        while (v58);
        v53 = v56 + 2;
        *v55 = v57;
      }
      else
      {
        v4[2] = v54;
        v53 = v4 + 3;
      }
    }
    else
    {
      v4[1] = v52;
      v53 = v4 + 2;
    }
    v4 = (char *)siri::dialogengine::CatBinary::node::InternalSerializeWithCachedSizesToArray(v51, v53, a3);
  }
  v59 = *((_DWORD *)this + 32);
  if (v59)
  {
    for (k = 0; k != v59; ++k)
    {
      if ((unint64_t)v4 >= *(_QWORD *)a3)
        v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v61 = (siri::dialogengine::CatBinary::node *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<siri::dialogengine::CatBinary::node>::TypeHandler>((uint64_t)this + 120, k);
      *v4 = 82;
      v62 = *((_DWORD *)v61 + 5);
      if (v62 > 0x7F)
      {
        v4[1] = v62 | 0x80;
        v64 = v62 >> 7;
        if (v62 >> 14)
        {
          v65 = v4 + 2;
          do
          {
            v66 = v65;
            *v65++ = v64 | 0x80;
            v67 = v64 >> 7;
            v68 = v64 >> 14;
            v64 >>= 7;
          }
          while (v68);
          v63 = v66 + 2;
          *v65 = v67;
        }
        else
        {
          v4[2] = v64;
          v63 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v62;
        v63 = v4 + 2;
      }
      v4 = (char *)siri::dialogengine::CatBinary::node::InternalSerializeWithCachedSizesToArray(v61, v63, a3);
    }
  }
  v69 = *((_DWORD *)this + 38);
  if (v69)
  {
    for (m = 0; m != v69; ++m)
    {
      if ((unint64_t)v4 >= *(_QWORD *)a3)
        v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v71 = (siri::dialogengine::CatBinary::node *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<siri::dialogengine::CatBinary::node>::TypeHandler>((uint64_t)this + 144, m);
      *v4 = 90;
      v72 = *((_DWORD *)v71 + 5);
      if (v72 > 0x7F)
      {
        v4[1] = v72 | 0x80;
        v74 = v72 >> 7;
        if (v72 >> 14)
        {
          v75 = v4 + 2;
          do
          {
            v76 = v75;
            *v75++ = v74 | 0x80;
            v77 = v74 >> 7;
            v78 = v74 >> 14;
            v74 >>= 7;
          }
          while (v78);
          v73 = v76 + 2;
          *v75 = v77;
        }
        else
        {
          v4[2] = v74;
          v73 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v72;
        v73 = v4 + 2;
      }
      v4 = (char *)siri::dialogengine::CatBinary::node::InternalSerializeWithCachedSizesToArray(v71, v73, a3);
    }
  }
  if ((v6 & 0x10) != 0)
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 12, *((_QWORD *)this + 25), v4);
  v79 = *((_QWORD *)this + 1);
  if ((v79 & 1) == 0)
    return (unsigned __int8 *)v4;
  v81 = v79 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v81 + 23) < 0)
  {
    v83 = *(void **)v81;
    v82 = *(_QWORD *)(v81 + 8);
  }
  else
  {
    LODWORD(v82) = *(unsigned __int8 *)(v81 + 23);
    v83 = (void *)v81;
  }
  if (*(_QWORD *)a3 - (_QWORD)v4 >= (int)v82)
  {
    v84 = (int)v82;
    memcpy(v4, v83, (int)v82);
    v4 += v84;
    return (unsigned __int8 *)v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v83, v82, (unsigned __int8 *)v4);
}

void sub_1BF95FD8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<siri::dialogengine::CatBinary::condition>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1539);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_1BF95FE78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void siri::dialogengine::CatBinary::cat::MergeFrom(siri::dialogengine::CatBinary::cat *this, const siri::dialogengine::CatBinary::cat *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  std::string *v7;
  const std::string *v8;
  std::string *v9;
  const std::string *v10;
  std::string *v11;
  const std::string *v12;
  std::string *v13;
  const std::string *v14;
  std::string *v15;
  const std::string *v16;
  siri::dialogengine::CatBinary::node *v17;
  const siri::dialogengine::CatBinary::node *v18;
  char v19;
  std::string v20[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/CatBinary.pb.cc", 883);
    v4 = google::protobuf::internal::LogMessage::operator<<(v20, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v19, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v20[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::CatBinary::metadata>::TypeHandler>((int **)this + 3, (uint64_t)a2 + 24);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::CatBinary::parameter>::TypeHandler>((int **)this + 6, (uint64_t)a2 + 48);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::CatBinary::condition>::TypeHandler>((int **)this + 9, (uint64_t)a2 + 72);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::CatBinary::node>::TypeHandler>((int **)this + 12, (uint64_t)a2 + 96);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::CatBinary::node>::TypeHandler>((int **)this + 15, (uint64_t)a2 + 120);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::CatBinary::node>::TypeHandler>((int **)this + 18, (uint64_t)a2 + 144);
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 0x3F) != 0)
  {
    if ((v6 & 1) != 0)
    {
      v7 = (std::string *)*((_QWORD *)this + 21);
      *((_DWORD *)this + 4) |= 1u;
      v8 = (const std::string *)*((_QWORD *)a2 + 21);
      if (v7 != v8)
      {
        if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 21, (uint64_t)v8);
          if ((v6 & 2) == 0)
            goto LABEL_17;
LABEL_11:
          v9 = (std::string *)*((_QWORD *)this + 22);
          *((_DWORD *)this + 4) |= 2u;
          v10 = (const std::string *)*((_QWORD *)a2 + 22);
          if (v9 != v10)
          {
            if (v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 22, (uint64_t)v10);
            else
              std::string::operator=(v9, v10);
          }
LABEL_17:
          if ((v6 & 4) != 0)
          {
            v11 = (std::string *)*((_QWORD *)this + 23);
            *((_DWORD *)this + 4) |= 4u;
            v12 = (const std::string *)*((_QWORD *)a2 + 23);
            if (v11 != v12)
            {
              if (v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              {
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 23, (uint64_t)v12);
                if ((v6 & 8) == 0)
                  goto LABEL_28;
LABEL_22:
                v13 = (std::string *)*((_QWORD *)this + 24);
                *((_DWORD *)this + 4) |= 8u;
                v14 = (const std::string *)*((_QWORD *)a2 + 24);
                if (v13 != v14)
                {
                  if (v13 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 24, (uint64_t)v14);
                  else
                    std::string::operator=(v13, v14);
                }
LABEL_28:
                if ((v6 & 0x10) != 0)
                {
                  v15 = (std::string *)*((_QWORD *)this + 25);
                  *((_DWORD *)this + 4) |= 0x10u;
                  v16 = (const std::string *)*((_QWORD *)a2 + 25);
                  if (v15 != v16)
                  {
                    if (v15 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                    {
                      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 25, (uint64_t)v16);
                      if ((v6 & 0x20) == 0)
                        return;
LABEL_33:
                      *((_DWORD *)this + 4) |= 0x20u;
                      v17 = (siri::dialogengine::CatBinary::node *)*((_QWORD *)this + 26);
                      if (!v17)
                      {
                        v17 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::node>(0);
                        *((_QWORD *)this + 26) = v17;
                      }
                      if (*((_QWORD *)a2 + 26))
                        v18 = (const siri::dialogengine::CatBinary::node *)*((_QWORD *)a2 + 26);
                      else
                        v18 = (const siri::dialogengine::CatBinary::node *)&siri::dialogengine::CatBinary::_node_default_instance_;
                      siri::dialogengine::CatBinary::node::MergeFrom(v17, v18);
                      return;
                    }
                    std::string::operator=(v15, v16);
                  }
                }
                if ((v6 & 0x20) == 0)
                  return;
                goto LABEL_33;
              }
              std::string::operator=(v11, v12);
            }
          }
          if ((v6 & 8) == 0)
            goto LABEL_28;
          goto LABEL_22;
        }
        std::string::operator=(v7, v8);
      }
    }
    if ((v6 & 2) == 0)
      goto LABEL_17;
    goto LABEL_11;
  }
}

void sub_1BF96010C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::CatBinary::metadata>::TypeHandler>(int **this, uint64_t a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  siri::dialogengine::CatBinary::metadata **v13;
  siri::dialogengine::CatBinary::metadata **v14;
  siri::dialogengine::CatBinary::metadata *v15;
  siri::dialogengine::CatBinary::metadata *v16;
  siri::dialogengine::CatBinary::metadata *v17;
  google::protobuf::internal::ArenaImpl *v18;
  int v19;
  uint64_t v20;
  siri::dialogengine::CatBinary::metadata **v21;
  siri::dialogengine::CatBinary::metadata **v22;
  siri::dialogengine::CatBinary::metadata *v23;
  siri::dialogengine::CatBinary::metadata *v24;
  int v25;
  int *v26;
  char v27;
  std::string v28[2];

  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    v9 = *this[2];
    v10 = *((int *)this + 2);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (siri::dialogengine::CatBinary::metadata **)(v6 + 8);
      v14 = (siri::dialogengine::CatBinary::metadata **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<siri::dialogengine::CatBinary::metadata>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (siri::dialogengine::CatBinary::metadata **)((char *)v8 + v20);
      v22 = (siri::dialogengine::CatBinary::metadata **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::metadata>(v18);
        google::protobuf::internal::GenericTypeHandler<siri::dialogengine::CatBinary::metadata>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25)
      *v26 = v25;
  }
}

void sub_1BF960278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::CatBinary::parameter>::TypeHandler>(int **this, uint64_t a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  siri::dialogengine::CatBinary::parameter **v13;
  siri::dialogengine::CatBinary::parameter **v14;
  siri::dialogengine::CatBinary::parameter *v15;
  siri::dialogengine::CatBinary::parameter *v16;
  siri::dialogengine::CatBinary::parameter *v17;
  google::protobuf::internal::ArenaImpl *v18;
  int v19;
  uint64_t v20;
  siri::dialogengine::CatBinary::parameter **v21;
  siri::dialogengine::CatBinary::parameter **v22;
  siri::dialogengine::CatBinary::parameter *v23;
  siri::dialogengine::CatBinary::parameter *v24;
  int v25;
  int *v26;
  char v27;
  std::string v28[2];

  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    v9 = *this[2];
    v10 = *((int *)this + 2);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (siri::dialogengine::CatBinary::parameter **)(v6 + 8);
      v14 = (siri::dialogengine::CatBinary::parameter **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<siri::dialogengine::CatBinary::parameter>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (siri::dialogengine::CatBinary::parameter **)((char *)v8 + v20);
      v22 = (siri::dialogengine::CatBinary::parameter **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::parameter>(v18);
        google::protobuf::internal::GenericTypeHandler<siri::dialogengine::CatBinary::parameter>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25)
      *v26 = v25;
  }
}

void sub_1BF9603E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::CatBinary::condition>::TypeHandler>(int **this, uint64_t a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  siri::dialogengine::CatBinary::condition **v13;
  siri::dialogengine::CatBinary::condition **v14;
  siri::dialogengine::CatBinary::condition *v15;
  siri::dialogengine::CatBinary::condition *v16;
  siri::dialogengine::CatBinary::condition *v17;
  google::protobuf::internal::ArenaImpl *v18;
  int v19;
  uint64_t v20;
  siri::dialogengine::CatBinary::condition **v21;
  siri::dialogengine::CatBinary::condition **v22;
  siri::dialogengine::CatBinary::condition *v23;
  siri::dialogengine::CatBinary::condition *v24;
  int v25;
  int *v26;
  char v27;
  std::string v28[2];

  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    v9 = *this[2];
    v10 = *((int *)this + 2);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (siri::dialogengine::CatBinary::condition **)(v6 + 8);
      v14 = (siri::dialogengine::CatBinary::condition **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<siri::dialogengine::CatBinary::condition>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (siri::dialogengine::CatBinary::condition **)((char *)v8 + v20);
      v22 = (siri::dialogengine::CatBinary::condition **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::condition>(v18);
        google::protobuf::internal::GenericTypeHandler<siri::dialogengine::CatBinary::condition>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25)
      *v26 = v25;
  }
}

void sub_1BF960550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<siri::dialogengine::CatBinary::condition>::Merge(siri::dialogengine::CatBinary::condition *a1, siri::dialogengine::CatBinary::condition *this)
{
  siri::dialogengine::CatBinary::condition::MergeFrom(this, a1);
}

void google::protobuf::internal::GenericTypeHandler<siri::dialogengine::CatBinary::parameter>::Merge(siri::dialogengine::CatBinary::parameter *a1, siri::dialogengine::CatBinary::parameter *this)
{
  siri::dialogengine::CatBinary::parameter::MergeFrom(this, a1);
}

void google::protobuf::internal::GenericTypeHandler<siri::dialogengine::CatBinary::metadata>::Merge(siri::dialogengine::CatBinary::metadata *a1, siri::dialogengine::CatBinary::metadata *this)
{
  siri::dialogengine::CatBinary::metadata::MergeFrom(this, a1);
}

siri::dialogengine::CatBinary::cat *google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::cat>(google::protobuf::internal::ArenaImpl *this)
{
  siri::dialogengine::CatBinary::cat *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (siri::dialogengine::CatBinary::cat *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0xD8uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<siri::dialogengine::CatBinary::cat>);
    siri::dialogengine::CatBinary::cat::cat(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (siri::dialogengine::CatBinary::cat *)operator new();
    siri::dialogengine::CatBinary::cat::cat(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BF96061C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C40C855E4CBLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<siri::dialogengine::CatBinary::cat>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void InitDefaultsscc_info_vcat_item_CatBinary_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/CatBinary.pb.cc", a4);
  siri::dialogengine::CatBinary::vcat_item::vcat_item((siri::dialogengine::CatBinary::vcat_item *)&siri::dialogengine::CatBinary::_vcat_item_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&siri::dialogengine::CatBinary::_vcat_item_default_instance_, v4);
}

void InitDefaultsscc_info_vcat_item_repetition_CatBinary_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/CatBinary.pb.cc", a4);
  siri::dialogengine::CatBinary::vcat_item_repetition::vcat_item_repetition((siri::dialogengine::CatBinary::vcat_item_repetition *)&siri::dialogengine::CatBinary::_vcat_item_repetition_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&siri::dialogengine::CatBinary::_vcat_item_repetition_default_instance_, v4);
}

siri::dialogengine::CatBinary::vcat_item_repetition *siri::dialogengine::CatBinary::vcat_item_repetition::vcat_item_repetition(siri::dialogengine::CatBinary::vcat_item_repetition *this)
{
  *(_QWORD *)this = &off_1E792F8E8;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  if (atomic_load(scc_info_vcat_item_repetition_CatBinary_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_vcat_item_repetition_CatBinary_2eproto);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 4) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

void sub_1BF960904(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void siri::dialogengine::CatBinary::vcat_item_repetition::~vcat_item_repetition(siri::dialogengine::CatBinary::vcat_item_repetition *this)
{
  siri::dialogengine::CatBinary::vcat_item_repetition::~vcat_item_repetition(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  *(_QWORD *)this = &off_1E792F8E8;
  v2 = *((_QWORD *)this + 3);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 4);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1C3B8D890](v4, 0x1012C40EC159624);
  }
  v6 = *((_QWORD *)this + 5);
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
  {
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    MEMORY[0x1C3B8D890](v6, 0x1012C40EC159624);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *siri::dialogengine::CatBinary::vcat_item_repetition::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "siri.dialogengine.CatBinary.vcat_item.repetition");
}

siri::dialogengine::CatBinary::vcat_item_repetition *siri::dialogengine::CatBinary::vcat_item_repetition::New(siri::dialogengine::CatBinary::vcat_item_repetition *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::vcat_item_repetition>(0);
}

siri::dialogengine::CatBinary::vcat_item_repetition *siri::dialogengine::CatBinary::vcat_item_repetition::New(siri::dialogengine::CatBinary::vcat_item_repetition *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::vcat_item_repetition>(a2);
}

void siri::dialogengine::CatBinary::vcat_item_repetition::Clear(siri::dialogengine::CatBinary::vcat_item_repetition *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  google::protobuf::internal::InternalMetadataWithArenaLite *v5;
  char v6;

  v1 = *((_DWORD *)this + 4);
  if ((v1 & 7) == 0)
    goto LABEL_17;
  if ((v1 & 1) != 0)
  {
    v2 = *((_QWORD *)this + 3);
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
      if ((v1 & 2) != 0)
        goto LABEL_10;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
      if ((v1 & 2) != 0)
        goto LABEL_10;
    }
LABEL_4:
    if ((v1 & 4) == 0)
      goto LABEL_17;
LABEL_14:
    v4 = *((_QWORD *)this + 5);
    if (*(char *)(v4 + 23) < 0)
    {
      **(_BYTE **)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v4 = 0;
      *(_BYTE *)(v4 + 23) = 0;
    }
    goto LABEL_17;
  }
  if ((v1 & 2) == 0)
    goto LABEL_4;
LABEL_10:
  v3 = *((_QWORD *)this + 4);
  if (*(char *)(v3 + 23) < 0)
  {
    **(_BYTE **)v3 = 0;
    *(_QWORD *)(v3 + 8) = 0;
    if ((v1 & 4) == 0)
      goto LABEL_17;
    goto LABEL_14;
  }
  *(_BYTE *)v3 = 0;
  *(_BYTE *)(v3 + 23) = 0;
  if ((v1 & 4) != 0)
    goto LABEL_14;
LABEL_17:
  v6 = *((_BYTE *)this + 8);
  v5 = (siri::dialogengine::CatBinary::vcat_item_repetition *)((char *)this + 8);
  *((_DWORD *)v5 + 2) = 0;
  if ((v6 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v5);
}

uint64_t siri::dialogengine::CatBinary::vcat_item_repetition::IsInitialized(siri::dialogengine::CatBinary::vcat_item_repetition *this)
{
  return 1;
}

void siri::dialogengine::CatBinary::vcat_item_repetition::CheckTypeAndMergeFrom(siri::dialogengine::CatBinary::vcat_item_repetition *this, const google::protobuf::MessageLite *lpsrc)
{
  siri::dialogengine::CatBinary::vcat_item_repetition::MergeFrom(this, lpsrc);
}

uint64_t siri::dialogengine::CatBinary::vcat_item_repetition::ByteSizeLong(siri::dialogengine::CatBinary::vcat_item_repetition *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  uint64_t v15;

  v1 = *((_DWORD *)this + 4);
  if ((v1 & 7) == 0)
  {
    v2 = 0;
    goto LABEL_16;
  }
  if ((v1 & 1) != 0)
  {
    v3 = *((_QWORD *)this + 3);
    v4 = *(unsigned __int8 *)(v3 + 23);
    v5 = *(_QWORD *)(v3 + 8);
    if ((v4 & 0x80u) == 0)
      v5 = v4;
    v2 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v1 & 2) == 0)
      goto LABEL_12;
    goto LABEL_9;
  }
  v2 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_9:
    v6 = *((_QWORD *)this + 4);
    v7 = *(unsigned __int8 *)(v6 + 23);
    v8 = *(_QWORD *)(v6 + 8);
    if ((v7 & 0x80u) == 0)
      v8 = v7;
    v2 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_12:
  if ((v1 & 4) != 0)
  {
    v9 = *((_QWORD *)this + 5);
    v10 = *(unsigned __int8 *)(v9 + 23);
    v11 = *(_QWORD *)(v9 + 8);
    if ((v10 & 0x80u) == 0)
      v11 = v10;
    v2 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_16:
  v12 = *((_QWORD *)this + 1);
  if ((v12 & 1) != 0)
  {
    v14 = v12 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v14 + 23) < 0)
      v15 = *(_QWORD *)(v14 + 8);
    else
      v15 = *(unsigned __int8 *)(v14 + 23);
    v2 += v15;
  }
  *((_DWORD *)this + 5) = v2;
  return v2;
}

uint64_t siri::dialogengine::CatBinary::vcat_item_repetition::GetCachedSize(siri::dialogengine::CatBinary::vcat_item_repetition *this)
{
  return *((unsigned int *)this + 5);
}

google::protobuf::internal *siri::dialogengine::CatBinary::vcat_item_repetition::_InternalParse(siri::dialogengine::CatBinary::vcat_item_repetition *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  std::string **v6;
  std::string **v7;
  uint64_t *v8;
  google::protobuf::internal *TagFallback;
  const char *v10;
  unsigned int v11;
  google::protobuf::internal *v14;
  std::string *v15;
  google::protobuf::internal *v17;

  v17 = a2;
  v5 = (std::string **)((char *)this + 40);
  v6 = (std::string **)((char *)this + 32);
  v7 = (std::string **)((char *)this + 24);
  v8 = (uint64_t *)((char *)this + 8);
  while (1)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v17, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v17;
    TagFallback = (google::protobuf::internal *)((char *)v17 + 1);
    LODWORD(v10) = *(unsigned __int8 *)v17;
    if ((*(char *)v17 & 0x80000000) == 0)
      goto LABEL_6;
    v10 = (const char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v17 + 2);
LABEL_6:
      v17 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v17, v10);
    v17 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    v11 = v10 >> 3;
    if (v10 >> 3 == 3)
    {
      if (v10 == 26)
      {
        *((_DWORD *)this + 4) |= 4u;
        v15 = (std::string *)*((_QWORD *)this + 5);
        if (v15 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v15 = *v5;
          goto LABEL_26;
        }
        goto LABEL_27;
      }
    }
    else if (v11 == 2)
    {
      if (v10 == 18)
      {
        *((_DWORD *)this + 4) |= 2u;
        v15 = (std::string *)*((_QWORD *)this + 4);
        if (v15 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v15 = *v6;
          goto LABEL_26;
        }
LABEL_27:
        v14 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v15, (std::string::value_type *)TagFallback, (uint64_t)a3);
        goto LABEL_28;
      }
    }
    else if (v11 == 1 && v10 == 10)
    {
      *((_DWORD *)this + 4) |= 1u;
      v15 = (std::string *)*((_QWORD *)this + 3);
      if (v15 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v7, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v15 = *v7;
LABEL_26:
        TagFallback = v17;
      }
      goto LABEL_27;
    }
    if (!(_DWORD)v10 || (v10 & 7) == 4)
      break;
    v14 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v10, v8, TagFallback, a3);
LABEL_28:
    v17 = v14;
    if (!v14)
      return 0;
  }
  *((_DWORD *)a3 + 20) = (_DWORD)v10 - 1;
  return TagFallback;
}

unsigned __int8 *siri::dialogengine::CatBinary::vcat_item_repetition::InternalSerializeWithCachedSizesToArray(siri::dialogengine::CatBinary::vcat_item_repetition *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  unsigned __int8 *v4;
  int v6;
  uint64_t v7;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;

  v4 = (unsigned __int8 *)a2;
  v6 = *((_DWORD *)this + 4);
  if ((v6 & 1) != 0)
  {
    v4 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 3), a2);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v4 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((_QWORD *)this + 4), (char *)v4);
  if ((v6 & 4) != 0)
LABEL_4:
    v4 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, *((_QWORD *)this + 5), (char *)v4);
LABEL_5:
  v7 = *((_QWORD *)this + 1);
  if ((v7 & 1) == 0)
    return v4;
  v9 = v7 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v9 + 23) < 0)
  {
    v11 = *(void **)v9;
    v10 = *(_QWORD *)(v9 + 8);
  }
  else
  {
    LODWORD(v10) = *(unsigned __int8 *)(v9 + 23);
    v11 = (void *)v9;
  }
  if (*(_QWORD *)a3 - (_QWORD)v4 >= (int)v10)
  {
    v12 = (int)v10;
    memcpy(v4, v11, (int)v10);
    v4 += v12;
    return v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v11, v10, v4);
}

void siri::dialogengine::CatBinary::vcat_item_repetition::MergeFrom(siri::dialogengine::CatBinary::vcat_item_repetition *this, const siri::dialogengine::CatBinary::vcat_item_repetition *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  std::string *v7;
  const std::string *v8;
  std::string *v9;
  const std::string *v10;
  std::string *v11;
  std::string **v12;
  std::string *v13;
  const std::string *v14;
  char v15;
  std::string v16[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/CatBinary.pb.cc", 3909);
    v4 = google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v15, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 7) != 0)
  {
    if ((v6 & 1) != 0)
    {
      v7 = (std::string *)*((_QWORD *)this + 3);
      *((_DWORD *)this + 4) |= 1u;
      v8 = (const std::string *)*((_QWORD *)a2 + 3);
      if (v7 != v8)
      {
        if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, (uint64_t)v8);
          if ((v6 & 2) != 0)
          {
LABEL_11:
            v9 = (std::string *)*((_QWORD *)this + 4);
            *((_DWORD *)this + 4) |= 2u;
            v10 = (const std::string *)*((_QWORD *)a2 + 4);
            if (v9 != v10)
            {
              if (v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 4, (uint64_t)v10);
              else
                std::string::operator=(v9, v10);
            }
          }
LABEL_17:
          if ((v6 & 4) != 0)
          {
            v13 = (std::string *)*((_QWORD *)this + 5);
            v12 = (std::string **)((char *)this + 40);
            v11 = v13;
            *((_DWORD *)v12 - 6) |= 4u;
            v14 = (const std::string *)*((_QWORD *)a2 + 5);
            if (v13 != v14)
            {
              if (v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v12, (uint64_t)v14);
              else
                std::string::operator=(v11, v14);
            }
          }
          return;
        }
        std::string::operator=(v7, v8);
      }
    }
    if ((v6 & 2) != 0)
      goto LABEL_11;
    goto LABEL_17;
  }
}

void sub_1BF960FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

siri::dialogengine::CatBinary::vcat_item_repetition *google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::vcat_item_repetition>(google::protobuf::internal::ArenaImpl *this)
{
  siri::dialogengine::CatBinary::vcat_item_repetition *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (siri::dialogengine::CatBinary::vcat_item_repetition *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x30uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<siri::dialogengine::CatBinary::vcat_item_repetition>);
    siri::dialogengine::CatBinary::vcat_item_repetition::vcat_item_repetition(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (siri::dialogengine::CatBinary::vcat_item_repetition *)operator new();
    siri::dialogengine::CatBinary::vcat_item_repetition::vcat_item_repetition(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BF961058(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C40CA074DDCLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<siri::dialogengine::CatBinary::vcat_item_repetition>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void InitDefaultsscc_info_vcat_item_expression_CatBinary_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/CatBinary.pb.cc", a4);
  siri::dialogengine::CatBinary::vcat_item_expression::vcat_item_expression((siri::dialogengine::CatBinary::vcat_item_expression *)&siri::dialogengine::CatBinary::_vcat_item_expression_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&siri::dialogengine::CatBinary::_vcat_item_expression_default_instance_, v4);
}

siri::dialogengine::CatBinary::vcat_item_expression *siri::dialogengine::CatBinary::vcat_item_expression::vcat_item_expression(siri::dialogengine::CatBinary::vcat_item_expression *this)
{
  *(_QWORD *)this = &off_1E792F858;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  if (atomic_load(scc_info_vcat_item_expression_CatBinary_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_vcat_item_expression_CatBinary_2eproto);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 4) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

void sub_1BF96122C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void siri::dialogengine::CatBinary::vcat_item_expression::~vcat_item_expression(siri::dialogengine::CatBinary::vcat_item_expression *this)
{
  siri::dialogengine::CatBinary::vcat_item_expression::~vcat_item_expression(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  *(_QWORD *)this = &off_1E792F858;
  v2 = *((_QWORD *)this + 3);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 4);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1C3B8D890](v4, 0x1012C40EC159624);
  }
  v6 = *((_QWORD *)this + 5);
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
  {
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    MEMORY[0x1C3B8D890](v6, 0x1012C40EC159624);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *siri::dialogengine::CatBinary::vcat_item_expression::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "siri.dialogengine.CatBinary.vcat_item.expression");
}

siri::dialogengine::CatBinary::vcat_item_expression *siri::dialogengine::CatBinary::vcat_item_expression::New(siri::dialogengine::CatBinary::vcat_item_expression *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::vcat_item_expression>(0);
}

siri::dialogengine::CatBinary::vcat_item_expression *siri::dialogengine::CatBinary::vcat_item_expression::New(siri::dialogengine::CatBinary::vcat_item_expression *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::vcat_item_expression>(a2);
}

void siri::dialogengine::CatBinary::vcat_item_expression::Clear(siri::dialogengine::CatBinary::vcat_item_expression *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  google::protobuf::internal::InternalMetadataWithArenaLite *v5;
  char v6;

  v1 = *((_DWORD *)this + 4);
  if ((v1 & 7) == 0)
    goto LABEL_17;
  if ((v1 & 1) != 0)
  {
    v2 = *((_QWORD *)this + 3);
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
      if ((v1 & 2) != 0)
        goto LABEL_10;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
      if ((v1 & 2) != 0)
        goto LABEL_10;
    }
LABEL_4:
    if ((v1 & 4) == 0)
      goto LABEL_17;
LABEL_14:
    v4 = *((_QWORD *)this + 5);
    if (*(char *)(v4 + 23) < 0)
    {
      **(_BYTE **)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v4 = 0;
      *(_BYTE *)(v4 + 23) = 0;
    }
    goto LABEL_17;
  }
  if ((v1 & 2) == 0)
    goto LABEL_4;
LABEL_10:
  v3 = *((_QWORD *)this + 4);
  if (*(char *)(v3 + 23) < 0)
  {
    **(_BYTE **)v3 = 0;
    *(_QWORD *)(v3 + 8) = 0;
    if ((v1 & 4) == 0)
      goto LABEL_17;
    goto LABEL_14;
  }
  *(_BYTE *)v3 = 0;
  *(_BYTE *)(v3 + 23) = 0;
  if ((v1 & 4) != 0)
    goto LABEL_14;
LABEL_17:
  v6 = *((_BYTE *)this + 8);
  v5 = (siri::dialogengine::CatBinary::vcat_item_expression *)((char *)this + 8);
  *((_DWORD *)v5 + 2) = 0;
  if ((v6 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v5);
}

uint64_t siri::dialogengine::CatBinary::vcat_item_expression::IsInitialized(siri::dialogengine::CatBinary::vcat_item_expression *this)
{
  return 1;
}

void siri::dialogengine::CatBinary::vcat_item_expression::CheckTypeAndMergeFrom(siri::dialogengine::CatBinary::vcat_item_expression *this, const google::protobuf::MessageLite *lpsrc)
{
  siri::dialogengine::CatBinary::vcat_item_expression::MergeFrom(this, lpsrc);
}

uint64_t siri::dialogengine::CatBinary::vcat_item_expression::ByteSizeLong(siri::dialogengine::CatBinary::vcat_item_expression *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  uint64_t v15;

  v1 = *((_DWORD *)this + 4);
  if ((v1 & 7) == 0)
  {
    v2 = 0;
    goto LABEL_16;
  }
  if ((v1 & 1) != 0)
  {
    v3 = *((_QWORD *)this + 3);
    v4 = *(unsigned __int8 *)(v3 + 23);
    v5 = *(_QWORD *)(v3 + 8);
    if ((v4 & 0x80u) == 0)
      v5 = v4;
    v2 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v1 & 2) == 0)
      goto LABEL_12;
    goto LABEL_9;
  }
  v2 = 0;
  if ((v1 & 2) != 0)
  {
LABEL_9:
    v6 = *((_QWORD *)this + 4);
    v7 = *(unsigned __int8 *)(v6 + 23);
    v8 = *(_QWORD *)(v6 + 8);
    if ((v7 & 0x80u) == 0)
      v8 = v7;
    v2 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_12:
  if ((v1 & 4) != 0)
  {
    v9 = *((_QWORD *)this + 5);
    v10 = *(unsigned __int8 *)(v9 + 23);
    v11 = *(_QWORD *)(v9 + 8);
    if ((v10 & 0x80u) == 0)
      v11 = v10;
    v2 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_16:
  v12 = *((_QWORD *)this + 1);
  if ((v12 & 1) != 0)
  {
    v14 = v12 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v14 + 23) < 0)
      v15 = *(_QWORD *)(v14 + 8);
    else
      v15 = *(unsigned __int8 *)(v14 + 23);
    v2 += v15;
  }
  *((_DWORD *)this + 5) = v2;
  return v2;
}

uint64_t siri::dialogengine::CatBinary::vcat_item_expression::GetCachedSize(siri::dialogengine::CatBinary::vcat_item_expression *this)
{
  return *((unsigned int *)this + 5);
}

google::protobuf::internal *siri::dialogengine::CatBinary::vcat_item_expression::_InternalParse(siri::dialogengine::CatBinary::vcat_item_expression *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  std::string **v6;
  std::string **v7;
  uint64_t *v8;
  google::protobuf::internal *TagFallback;
  const char *v10;
  unsigned int v11;
  google::protobuf::internal *v14;
  std::string *v15;
  google::protobuf::internal *v17;

  v17 = a2;
  v5 = (std::string **)((char *)this + 40);
  v6 = (std::string **)((char *)this + 32);
  v7 = (std::string **)((char *)this + 24);
  v8 = (uint64_t *)((char *)this + 8);
  while (1)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v17, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v17;
    TagFallback = (google::protobuf::internal *)((char *)v17 + 1);
    LODWORD(v10) = *(unsigned __int8 *)v17;
    if ((*(char *)v17 & 0x80000000) == 0)
      goto LABEL_6;
    v10 = (const char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v17 + 2);
LABEL_6:
      v17 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v17, v10);
    v17 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    v11 = v10 >> 3;
    if (v10 >> 3 == 3)
    {
      if (v10 == 26)
      {
        *((_DWORD *)this + 4) |= 4u;
        v15 = (std::string *)*((_QWORD *)this + 5);
        if (v15 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v15 = *v5;
          goto LABEL_26;
        }
        goto LABEL_27;
      }
    }
    else if (v11 == 2)
    {
      if (v10 == 18)
      {
        *((_DWORD *)this + 4) |= 2u;
        v15 = (std::string *)*((_QWORD *)this + 4);
        if (v15 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v15 = *v6;
          goto LABEL_26;
        }
LABEL_27:
        v14 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v15, (std::string::value_type *)TagFallback, (uint64_t)a3);
        goto LABEL_28;
      }
    }
    else if (v11 == 1 && v10 == 10)
    {
      *((_DWORD *)this + 4) |= 1u;
      v15 = (std::string *)*((_QWORD *)this + 3);
      if (v15 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v7, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v15 = *v7;
LABEL_26:
        TagFallback = v17;
      }
      goto LABEL_27;
    }
    if (!(_DWORD)v10 || (v10 & 7) == 4)
      break;
    v14 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v10, v8, TagFallback, a3);
LABEL_28:
    v17 = v14;
    if (!v14)
      return 0;
  }
  *((_DWORD *)a3 + 20) = (_DWORD)v10 - 1;
  return TagFallback;
}

unsigned __int8 *siri::dialogengine::CatBinary::vcat_item_expression::InternalSerializeWithCachedSizesToArray(siri::dialogengine::CatBinary::vcat_item_expression *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  unsigned __int8 *v4;
  int v6;
  uint64_t v7;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;

  v4 = (unsigned __int8 *)a2;
  v6 = *((_DWORD *)this + 4);
  if ((v6 & 1) != 0)
  {
    v4 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 3), a2);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v4 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((_QWORD *)this + 4), (char *)v4);
  if ((v6 & 4) != 0)
LABEL_4:
    v4 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, *((_QWORD *)this + 5), (char *)v4);
LABEL_5:
  v7 = *((_QWORD *)this + 1);
  if ((v7 & 1) == 0)
    return v4;
  v9 = v7 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v9 + 23) < 0)
  {
    v11 = *(void **)v9;
    v10 = *(_QWORD *)(v9 + 8);
  }
  else
  {
    LODWORD(v10) = *(unsigned __int8 *)(v9 + 23);
    v11 = (void *)v9;
  }
  if (*(_QWORD *)a3 - (_QWORD)v4 >= (int)v10)
  {
    v12 = (int)v10;
    memcpy(v4, v11, (int)v10);
    v4 += v12;
    return v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v11, v10, v4);
}

void siri::dialogengine::CatBinary::vcat_item_expression::MergeFrom(siri::dialogengine::CatBinary::vcat_item_expression *this, const siri::dialogengine::CatBinary::vcat_item_expression *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  std::string *v7;
  const std::string *v8;
  std::string *v9;
  const std::string *v10;
  std::string *v11;
  std::string **v12;
  std::string *v13;
  const std::string *v14;
  char v15;
  std::string v16[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/CatBinary.pb.cc", 3636);
    v4 = google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v15, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 7) != 0)
  {
    if ((v6 & 1) != 0)
    {
      v7 = (std::string *)*((_QWORD *)this + 3);
      *((_DWORD *)this + 4) |= 1u;
      v8 = (const std::string *)*((_QWORD *)a2 + 3);
      if (v7 != v8)
      {
        if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, (uint64_t)v8);
          if ((v6 & 2) != 0)
          {
LABEL_11:
            v9 = (std::string *)*((_QWORD *)this + 4);
            *((_DWORD *)this + 4) |= 2u;
            v10 = (const std::string *)*((_QWORD *)a2 + 4);
            if (v9 != v10)
            {
              if (v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 4, (uint64_t)v10);
              else
                std::string::operator=(v9, v10);
            }
          }
LABEL_17:
          if ((v6 & 4) != 0)
          {
            v13 = (std::string *)*((_QWORD *)this + 5);
            v12 = (std::string **)((char *)this + 40);
            v11 = v13;
            *((_DWORD *)v12 - 6) |= 4u;
            v14 = (const std::string *)*((_QWORD *)a2 + 5);
            if (v13 != v14)
            {
              if (v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v12, (uint64_t)v14);
              else
                std::string::operator=(v11, v14);
            }
          }
          return;
        }
        std::string::operator=(v7, v8);
      }
    }
    if ((v6 & 2) != 0)
      goto LABEL_11;
    goto LABEL_17;
  }
}

void sub_1BF9618E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

siri::dialogengine::CatBinary::vcat_item_expression *google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::vcat_item_expression>(google::protobuf::internal::ArenaImpl *this)
{
  siri::dialogengine::CatBinary::vcat_item_expression *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (siri::dialogengine::CatBinary::vcat_item_expression *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x30uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<siri::dialogengine::CatBinary::vcat_item_expression>);
    siri::dialogengine::CatBinary::vcat_item_expression::vcat_item_expression(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (siri::dialogengine::CatBinary::vcat_item_expression *)operator new();
    siri::dialogengine::CatBinary::vcat_item_expression::vcat_item_expression(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BF961980(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C40CA074DDCLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<siri::dialogengine::CatBinary::vcat_item_expression>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

siri::dialogengine::CatBinary::vcat_item *siri::dialogengine::CatBinary::vcat_item::vcat_item(siri::dialogengine::CatBinary::vcat_item *this)
{
  *(_QWORD *)this = &off_1E792F978;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  if (atomic_load(scc_info_vcat_item_CatBinary_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_vcat_item_CatBinary_2eproto);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 4) = &google::protobuf::internal::fixed_address_empty_string;
  *((_DWORD *)this + 12) = 0;
  return this;
}

void sub_1BF961B04(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void siri::dialogengine::CatBinary::vcat_item::~vcat_item(siri::dialogengine::CatBinary::vcat_item *this)
{
  siri::dialogengine::CatBinary::vcat_item::~vcat_item(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;

  *(_QWORD *)this = &off_1E792F978;
  v2 = *((_QWORD *)this + 3);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 4);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1C3B8D890](v4, 0x1012C40EC159624);
  }
  if (*((_DWORD *)this + 12))
    siri::dialogengine::CatBinary::vcat_item::clear_item((uint64_t)this);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *siri::dialogengine::CatBinary::vcat_item::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "siri.dialogengine.CatBinary.vcat_item");
}

siri::dialogengine::CatBinary::vcat_item *siri::dialogengine::CatBinary::vcat_item::New(siri::dialogengine::CatBinary::vcat_item *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::vcat_item>(0);
}

siri::dialogengine::CatBinary::vcat_item *siri::dialogengine::CatBinary::vcat_item::New(siri::dialogengine::CatBinary::vcat_item *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::vcat_item>(a2);
}

void siri::dialogengine::CatBinary::vcat_item::Clear(siri::dialogengine::CatBinary::vcat_item *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  google::protobuf::internal::InternalMetadataWithArenaLite *v5;
  char v6;

  v2 = *((_DWORD *)this + 4);
  if ((v2 & 3) == 0)
    goto LABEL_11;
  if ((v2 & 1) == 0)
  {
LABEL_5:
    if ((v2 & 2) != 0)
      goto LABEL_6;
    goto LABEL_11;
  }
  v3 = *((_QWORD *)this + 3);
  if ((*(char *)(v3 + 23) & 0x80000000) == 0)
  {
    *(_BYTE *)v3 = 0;
    *(_BYTE *)(v3 + 23) = 0;
    goto LABEL_5;
  }
  **(_BYTE **)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
  if ((v2 & 2) != 0)
  {
LABEL_6:
    v4 = *((_QWORD *)this + 4);
    if (*(char *)(v4 + 23) < 0)
    {
      **(_BYTE **)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v4 = 0;
      *(_BYTE *)(v4 + 23) = 0;
    }
  }
LABEL_11:
  siri::dialogengine::CatBinary::vcat_item::clear_item((uint64_t)this);
  v6 = *((_BYTE *)this + 8);
  v5 = (siri::dialogengine::CatBinary::vcat_item *)((char *)this + 8);
  *((_DWORD *)v5 + 2) = 0;
  if ((v6 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v5);
}

uint64_t siri::dialogengine::CatBinary::vcat_item::IsInitialized(siri::dialogengine::CatBinary::vcat_item *this)
{
  return *((_DWORD *)this + 4) & 1;
}

void siri::dialogengine::CatBinary::vcat_item::CheckTypeAndMergeFrom(siri::dialogengine::CatBinary::vcat_item *this, const google::protobuf::MessageLite *lpsrc)
{
  siri::dialogengine::CatBinary::vcat_item::MergeFrom(this, lpsrc);
}

uint64_t siri::dialogengine::CatBinary::vcat_item::ByteSizeLong(siri::dialogengine::CatBinary::vcat_item *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  uint64_t v18;

  v2 = *((_DWORD *)this + 4);
  if ((v2 & 1) == 0)
  {
    v3 = 0;
    if ((v2 & 2) == 0)
      goto LABEL_10;
    goto LABEL_7;
  }
  v4 = *((_QWORD *)this + 3);
  v5 = *(unsigned __int8 *)(v4 + 23);
  v6 = *(_QWORD *)(v4 + 8);
  if ((v5 & 0x80u) == 0)
    v6 = v5;
  v3 = v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v2 & 2) != 0)
  {
LABEL_7:
    v7 = *((_QWORD *)this + 4);
    v8 = *(unsigned __int8 *)(v7 + 23);
    v9 = *(_QWORD *)(v7 + 8);
    if ((v8 & 0x80u) == 0)
      v9 = v8;
    v3 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_10:
  switch(*((_DWORD *)this + 12))
  {
    case 2:
      v14 = siri::dialogengine::CatBinary::vcat_item_expression::ByteSizeLong(*((siri::dialogengine::CatBinary::vcat_item_expression **)this
                                                                              + 5));
      goto LABEL_16;
    case 3:
      v14 = siri::dialogengine::CatBinary::vcat_item_repetition::ByteSizeLong(*((siri::dialogengine::CatBinary::vcat_item_repetition **)this
                                                                              + 5));
LABEL_16:
      v13 = v3 + v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6);
      goto LABEL_17;
    case 5:
    case 6:
      v10 = *((_QWORD *)this + 5);
      v11 = *(unsigned __int8 *)(v10 + 23);
      v12 = *(_QWORD *)(v10 + 8);
      if ((v11 & 0x80u) == 0)
        v12 = v11;
      v13 = v3 + v12 + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6);
LABEL_17:
      v3 = v13 + 1;
      break;
    default:
      break;
  }
  v15 = *((_QWORD *)this + 1);
  if ((v15 & 1) != 0)
  {
    v17 = v15 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v17 + 23) < 0)
      v18 = *(_QWORD *)(v17 + 8);
    else
      v18 = *(unsigned __int8 *)(v17 + 23);
    v3 += v18;
  }
  *((_DWORD *)this + 5) = v3;
  return v3;
}

uint64_t siri::dialogengine::CatBinary::vcat_item::GetCachedSize(siri::dialogengine::CatBinary::vcat_item *this)
{
  return *((unsigned int *)this + 5);
}

google::protobuf::internal *siri::dialogengine::CatBinary::vcat_item::_InternalParse(siri::dialogengine::CatBinary::vcat_item *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  std::string **v6;
  uint64_t *v7;
  google::protobuf::internal *TagFallback;
  const char *v9;
  std::string *v10;
  std::string *v11;
  siri::dialogengine::CatBinary::vcat_item_repetition *v12;
  int v13;
  BOOL v14;
  google::protobuf::internal *v15;
  unsigned int v16;
  char *v17;
  unsigned int v18;
  char *v19;
  char *SizeFallback;
  unsigned int v21;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  google::protobuf::internal *v26;
  char *v27;
  unsigned int v28;
  int v29;
  int v30;
  int v31;
  std::string **v33;
  google::protobuf::internal *v34;

  v5 = (std::string **)((char *)this + 40);
  v33 = (std::string **)((char *)this + 32);
  v34 = a2;
  v6 = (std::string **)((char *)this + 24);
  v7 = (uint64_t *)((char *)this + 8);
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v34, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v34;
    TagFallback = (google::protobuf::internal *)((char *)v34 + 1);
    LODWORD(v9) = *(unsigned __int8 *)v34;
    if ((*(char *)v34 & 0x80000000) == 0)
      goto LABEL_6;
    v9 = (const char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v34 + 2);
LABEL_6:
      v34 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v34, v9);
    v34 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    switch(v9 >> 3)
    {
      case 1u:
        if (v9 != 10)
          goto LABEL_27;
        *((_DWORD *)this + 4) |= 1u;
        v10 = (std::string *)*((_QWORD *)this + 3);
        if (v10 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_44;
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v10 = *v6;
        goto LABEL_43;
      case 2u:
        if (v9 != 18)
          goto LABEL_27;
        if (*((_DWORD *)this + 12) == 2)
        {
          v11 = *v5;
        }
        else
        {
          siri::dialogengine::CatBinary::vcat_item::clear_item((uint64_t)this);
          *((_DWORD *)this + 12) = 2;
          v11 = (std::string *)google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::vcat_item_expression>(0);
          *((_QWORD *)this + 5) = v11;
          TagFallback = v34;
        }
        v16 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          SizeFallback = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!SizeFallback)
            goto LABEL_59;
          v17 = SizeFallback;
          v16 = v21;
        }
        else
        {
          v17 = (char *)TagFallback + 1;
        }
        v22 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v17, v16);
        v23 = *((_DWORD *)a3 + 22);
        v24 = __OFSUB__(v23--, 1);
        *((_DWORD *)a3 + 22) = v23;
        if (v23 < 0 != v24)
          goto LABEL_59;
        v25 = v22;
        v26 = siri::dialogengine::CatBinary::vcat_item_expression::_InternalParse((siri::dialogengine::CatBinary::vcat_item_expression *)v11, (google::protobuf::internal *)v17, a3);
        if (!v26)
          goto LABEL_59;
        goto LABEL_56;
      case 3u:
        if (v9 != 26)
          goto LABEL_27;
        if (*((_DWORD *)this + 12) == 3)
        {
          v12 = (siri::dialogengine::CatBinary::vcat_item_repetition *)*v5;
        }
        else
        {
          siri::dialogengine::CatBinary::vcat_item::clear_item((uint64_t)this);
          *((_DWORD *)this + 12) = 3;
          v12 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::vcat_item_repetition>(0);
          *((_QWORD *)this + 5) = v12;
          TagFallback = v34;
        }
        v18 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v27 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v27)
            goto LABEL_59;
          v19 = v27;
          v18 = v28;
        }
        else
        {
          v19 = (char *)TagFallback + 1;
        }
        v29 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v19, v18);
        v30 = *((_DWORD *)a3 + 22);
        v24 = __OFSUB__(v30--, 1);
        *((_DWORD *)a3 + 22) = v30;
        if (v30 < 0 != v24)
          goto LABEL_59;
        v25 = v29;
        v26 = siri::dialogengine::CatBinary::vcat_item_repetition::_InternalParse(v12, (google::protobuf::internal *)v19, a3);
        if (!v26)
          goto LABEL_59;
LABEL_56:
        ++*((_DWORD *)a3 + 22);
        if (*((_DWORD *)a3 + 20))
          goto LABEL_59;
        v31 = *((_DWORD *)a3 + 7) + v25;
        *((_DWORD *)a3 + 7) = v31;
        *(_QWORD *)a3 = *((_QWORD *)a3 + 1) + (v31 & (v31 >> 31));
        v34 = v26;
        continue;
      case 4u:
        if (v9 != 34)
          goto LABEL_27;
        *((_DWORD *)this + 4) |= 2u;
        v10 = (std::string *)*((_QWORD *)this + 4);
        if (v10 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_44;
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v33, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v10 = *v33;
        goto LABEL_43;
      case 5u:
        if (v9 != 42)
          goto LABEL_27;
        if (*((_DWORD *)this + 12) == 5)
          goto LABEL_25;
        siri::dialogengine::CatBinary::vcat_item::clear_item((uint64_t)this);
        v13 = 5;
        goto LABEL_41;
      case 6u:
        if (v9 != 50)
          goto LABEL_27;
        if (*((_DWORD *)this + 12) == 6)
        {
LABEL_25:
          v10 = *v5;
          if (*v5 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
            goto LABEL_44;
        }
        else
        {
          siri::dialogengine::CatBinary::vcat_item::clear_item((uint64_t)this);
          v13 = 6;
LABEL_41:
          *((_DWORD *)this + 12) = v13;
          *((_QWORD *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
        }
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v10 = *v5;
LABEL_43:
        TagFallback = v34;
LABEL_44:
        v15 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v10, (std::string::value_type *)TagFallback, (uint64_t)a3);
        goto LABEL_45;
      default:
LABEL_27:
        if ((_DWORD)v9)
          v14 = (v9 & 7) == 4;
        else
          v14 = 1;
        if (v14)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v9 - 1;
          return TagFallback;
        }
        v15 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v9, v7, TagFallback, a3);
LABEL_45:
        v34 = v15;
        if (v15)
          continue;
LABEL_59:
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

unsigned __int8 *siri::dialogengine::CatBinary::vcat_item::InternalSerializeWithCachedSizesToArray(siri::dialogengine::CatBinary::vcat_item *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  char *v4;
  int v6;
  int v7;
  siri::dialogengine::CatBinary::vcat_item_expression *v8;
  unsigned int v9;
  char *v10;
  siri::dialogengine::CatBinary::vcat_item_repetition *v11;
  unsigned int v12;
  char *v13;
  unsigned int v14;
  unsigned int v15;
  _BYTE *v16;
  _BYTE *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned __int8 *v20;
  _BYTE *v21;
  _BYTE *v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;

  v4 = a2;
  v6 = *((_DWORD *)this + 4);
  if ((v6 & 1) != 0)
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 3), a2);
  v7 = *((_DWORD *)this + 12);
  if (v7 == 3)
  {
    if ((unint64_t)v4 >= *(_QWORD *)a3)
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    v11 = (siri::dialogengine::CatBinary::vcat_item_repetition *)*((_QWORD *)this + 5);
    *v4 = 26;
    v12 = *((_DWORD *)v11 + 5);
    if (v12 > 0x7F)
    {
      v4[1] = v12 | 0x80;
      v15 = v12 >> 7;
      if (v12 >> 14)
      {
        v21 = v4 + 2;
        do
        {
          v22 = v21;
          *v21++ = v15 | 0x80;
          v23 = v15 >> 7;
          v24 = v15 >> 14;
          v15 >>= 7;
        }
        while (v24);
        v13 = v22 + 2;
        *v21 = v23;
      }
      else
      {
        v4[2] = v15;
        v13 = v4 + 3;
      }
    }
    else
    {
      v4[1] = v12;
      v13 = v4 + 2;
    }
    v20 = siri::dialogengine::CatBinary::vcat_item_repetition::InternalSerializeWithCachedSizesToArray(v11, v13, a3);
  }
  else
  {
    if (v7 != 2)
      goto LABEL_26;
    if ((unint64_t)v4 >= *(_QWORD *)a3)
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    v8 = (siri::dialogengine::CatBinary::vcat_item_expression *)*((_QWORD *)this + 5);
    *v4 = 18;
    v9 = *((_DWORD *)v8 + 5);
    if (v9 > 0x7F)
    {
      v4[1] = v9 | 0x80;
      v14 = v9 >> 7;
      if (v9 >> 14)
      {
        v16 = v4 + 2;
        do
        {
          v17 = v16;
          *v16++ = v14 | 0x80;
          v18 = v14 >> 7;
          v19 = v14 >> 14;
          v14 >>= 7;
        }
        while (v19);
        v10 = v17 + 2;
        *v16 = v18;
      }
      else
      {
        v4[2] = v14;
        v10 = v4 + 3;
      }
    }
    else
    {
      v4[1] = v9;
      v10 = v4 + 2;
    }
    v20 = siri::dialogengine::CatBinary::vcat_item_expression::InternalSerializeWithCachedSizesToArray(v8, v10, a3);
  }
  v4 = (char *)v20;
LABEL_26:
  if ((v6 & 2) != 0)
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 4, *((_QWORD *)this + 4), v4);
  v25 = *((_DWORD *)this + 12);
  if ((v25 - 5) <= 1)
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, v25, *((_QWORD *)this + 5), v4);
  v26 = *((_QWORD *)this + 1);
  if ((v26 & 1) == 0)
    return (unsigned __int8 *)v4;
  v28 = v26 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v28 + 23) < 0)
  {
    v30 = *(void **)v28;
    v29 = *(_QWORD *)(v28 + 8);
  }
  else
  {
    LODWORD(v29) = *(unsigned __int8 *)(v28 + 23);
    v30 = (void *)v28;
  }
  if (*(_QWORD *)a3 - (_QWORD)v4 >= (int)v29)
  {
    v31 = (int)v29;
    memcpy(v4, v30, (int)v29);
    v4 += v31;
    return (unsigned __int8 *)v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v30, v29, (unsigned __int8 *)v4);
}

uint64_t siri::dialogengine::CatBinary::vcat_item::clear_item(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = this;
  switch(*(_DWORD *)(this + 48))
  {
    case 2:
    case 3:
      this = *(_QWORD *)(this + 40);
      if (this)
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
      break;
    case 5:
    case 6:
      v2 = *(_QWORD *)(this + 40);
      if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
      {
        if (*(char *)(v2 + 23) < 0)
          operator delete(*(void **)v2);
        this = MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
      }
      break;
    default:
      break;
  }
  *(_DWORD *)(v1 + 48) = 0;
  return this;
}

void siri::dialogengine::CatBinary::vcat_item::MergeFrom(siri::dialogengine::CatBinary::vcat_item *this, const siri::dialogengine::CatBinary::vcat_item *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  std::string *v7;
  const std::string *v8;
  std::string *v9;
  const std::string *v10;
  siri::dialogengine::CatBinary::vcat_item_expression *v11;
  siri::dialogengine::CatBinary::vcat_item_repetition *v12;
  const std::string *v13;
  int v14;
  std::string *v15;
  const siri::dialogengine::CatBinary::vcat_item_expression *v16;
  const siri::dialogengine::CatBinary::vcat_item_repetition *v17;
  char v18;
  std::string v19[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/CatBinary.pb.cc", 4330);
    v4 = google::protobuf::internal::LogMessage::operator<<(v19, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v18, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v19[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 3) == 0)
    goto LABEL_17;
  if ((v6 & 1) == 0
    || (v7 = (std::string *)*((_QWORD *)this + 3),
        *((_DWORD *)this + 4) |= 1u,
        v8 = (const std::string *)*((_QWORD *)a2 + 3),
        v7 == v8))
  {
LABEL_10:
    if ((v6 & 2) != 0)
      goto LABEL_11;
    goto LABEL_17;
  }
  if (v7 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
  {
    std::string::operator=(v7, v8);
    goto LABEL_10;
  }
  google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, (uint64_t)v8);
  if ((v6 & 2) != 0)
  {
LABEL_11:
    v9 = (std::string *)*((_QWORD *)this + 4);
    *((_DWORD *)this + 4) |= 2u;
    v10 = (const std::string *)*((_QWORD *)a2 + 4);
    if (v9 != v10)
    {
      if (v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 4, (uint64_t)v10);
      else
        std::string::operator=(v9, v10);
    }
  }
LABEL_17:
  switch(*((_DWORD *)a2 + 12))
  {
    case 2:
      if (*((_DWORD *)this + 12) == 2)
      {
        v11 = (siri::dialogengine::CatBinary::vcat_item_expression *)*((_QWORD *)this + 5);
LABEL_28:
        v16 = (const siri::dialogengine::CatBinary::vcat_item_expression *)*((_QWORD *)a2 + 5);
        goto LABEL_35;
      }
      siri::dialogengine::CatBinary::vcat_item::clear_item((uint64_t)this);
      *((_DWORD *)this + 12) = 2;
      v11 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::vcat_item_expression>(0);
      *((_QWORD *)this + 5) = v11;
      if (*((_DWORD *)a2 + 12) == 2)
        goto LABEL_28;
      v16 = (const siri::dialogengine::CatBinary::vcat_item_expression *)&siri::dialogengine::CatBinary::_vcat_item_expression_default_instance_;
LABEL_35:
      siri::dialogengine::CatBinary::vcat_item_expression::MergeFrom(v11, v16);
      return;
    case 3:
      if (*((_DWORD *)this + 12) == 3)
      {
        v12 = (siri::dialogengine::CatBinary::vcat_item_repetition *)*((_QWORD *)this + 5);
LABEL_30:
        v17 = (const siri::dialogengine::CatBinary::vcat_item_repetition *)*((_QWORD *)a2 + 5);
        goto LABEL_37;
      }
      siri::dialogengine::CatBinary::vcat_item::clear_item((uint64_t)this);
      *((_DWORD *)this + 12) = 3;
      v12 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::vcat_item_repetition>(0);
      *((_QWORD *)this + 5) = v12;
      if (*((_DWORD *)a2 + 12) == 3)
        goto LABEL_30;
      v17 = (const siri::dialogengine::CatBinary::vcat_item_repetition *)&siri::dialogengine::CatBinary::_vcat_item_repetition_default_instance_;
LABEL_37:
      siri::dialogengine::CatBinary::vcat_item_repetition::MergeFrom(v12, v17);
      return;
    case 5:
      v13 = (const std::string *)*((_QWORD *)a2 + 5);
      if (*((_DWORD *)this + 12) == 5)
        goto LABEL_25;
      siri::dialogengine::CatBinary::vcat_item::clear_item((uint64_t)this);
      v14 = 5;
      goto LABEL_32;
    case 6:
      v13 = (const std::string *)*((_QWORD *)a2 + 5);
      if (*((_DWORD *)this + 12) == 6)
      {
LABEL_25:
        v15 = (std::string *)*((_QWORD *)this + 5);
        if (v15 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          std::string::operator=(v15, v13);
          return;
        }
      }
      else
      {
        siri::dialogengine::CatBinary::vcat_item::clear_item((uint64_t)this);
        v14 = 6;
LABEL_32:
        *((_DWORD *)this + 12) = v14;
        *((_QWORD *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
      }
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 5, (uint64_t)v13);
      return;
    default:
      return;
  }
}

void sub_1BF9626E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

siri::dialogengine::CatBinary::vcat_item *google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::vcat_item>(google::protobuf::internal::ArenaImpl *this)
{
  siri::dialogengine::CatBinary::vcat_item *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (siri::dialogengine::CatBinary::vcat_item *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x38uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<siri::dialogengine::CatBinary::vcat_item>);
    siri::dialogengine::CatBinary::vcat_item::vcat_item(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (siri::dialogengine::CatBinary::vcat_item *)operator new();
    siri::dialogengine::CatBinary::vcat_item::vcat_item(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BF962784(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C400941DAD4);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<siri::dialogengine::CatBinary::vcat_item>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

BOOL siri::dialogengine::CatBinary::condition_entry_ConditionElementType_IsValid(siri::dialogengine::CatBinary *this)
{
  return this < 5;
}

uint64_t *siri::dialogengine::CatBinary::condition_entry_ConditionElementType_Name(int a1)
{
  unsigned __int8 v2;
  google::protobuf::internal *v3;

  if ((v2 & 1) == 0
  {
    siri::dialogengine::CatBinary::condition_entry_ConditionElementType_Name(siri::dialogengine::CatBinary::condition_entry_ConditionElementType)::dummy = google::protobuf::internal::InitializeEnumStrings((uint64_t)&siri::dialogengine::CatBinary::condition_entry_ConditionElementType_entries, siri::dialogengine::CatBinary::condition_entry_ConditionElementType_entries_by_number, (char *)5, (void (*)(const void *))&siri::dialogengine::CatBinary::condition_entry_ConditionElementType_strings);
  }
  v3 = (google::protobuf::internal *)google::protobuf::internal::LookUpEnumName((uint64_t)&siri::dialogengine::CatBinary::condition_entry_ConditionElementType_entries, siri::dialogengine::CatBinary::condition_entry_ConditionElementType_entries_by_number, 5uLL, a1);
  if ((_DWORD)v3 != -1)
    return (uint64_t *)((char *)&siri::dialogengine::CatBinary::condition_entry_ConditionElementType_strings
                     + 24 * (int)v3);
  google::protobuf::internal::InitProtobufDefaults(v3);
  return &google::protobuf::internal::fixed_address_empty_string;
}

void sub_1BF962940(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::CatBinary::condition_entry_ConditionElementType_Parse(uint64_t *a1, _DWORD *a2, const char *a3)
{
  uint64_t result;
  void *v5[2];
  int v6;

  v6 = 0;
  google::protobuf::StringPiece::StringPiece<std::allocator<char>>(v5, a1, a3);
  result = google::protobuf::internal::LookUpEnumValue((uint64_t)&siri::dialogengine::CatBinary::condition_entry_ConditionElementType_entries, 5uLL, v5[0], (int64_t)v5[1], &v6);
  if ((_DWORD)result)
    *a2 = v6;
  return result;
}

BOOL siri::dialogengine::CatBinary::node_NodeType_IsValid(siri::dialogengine::CatBinary *this)
{
  return this < 7;
}

uint64_t *siri::dialogengine::CatBinary::node_NodeType_Name(int a1)
{
  unsigned __int8 v2;
  google::protobuf::internal *v3;

  if ((v2 & 1) == 0
  {
    siri::dialogengine::CatBinary::node_NodeType_Name(siri::dialogengine::CatBinary::node_NodeType)::dummy = google::protobuf::internal::InitializeEnumStrings((uint64_t)&siri::dialogengine::CatBinary::node_NodeType_entries, siri::dialogengine::CatBinary::node_NodeType_entries_by_number, (char *)7, (void (*)(const void *))&siri::dialogengine::CatBinary::node_NodeType_strings);
  }
  v3 = (google::protobuf::internal *)google::protobuf::internal::LookUpEnumName((uint64_t)&siri::dialogengine::CatBinary::node_NodeType_entries, siri::dialogengine::CatBinary::node_NodeType_entries_by_number, 7uLL, a1);
  if ((_DWORD)v3 != -1)
    return (uint64_t *)((char *)&siri::dialogengine::CatBinary::node_NodeType_strings + 24 * (int)v3);
  google::protobuf::internal::InitProtobufDefaults(v3);
  return &google::protobuf::internal::fixed_address_empty_string;
}

void sub_1BF962A74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::CatBinary::node_NodeType_Parse(uint64_t *a1, _DWORD *a2, const char *a3)
{
  uint64_t result;
  void *v5[2];
  int v6;

  v6 = 0;
  google::protobuf::StringPiece::StringPiece<std::allocator<char>>(v5, a1, a3);
  result = google::protobuf::internal::LookUpEnumValue((uint64_t)&siri::dialogengine::CatBinary::node_NodeType_entries, 7uLL, v5[0], (int64_t)v5[1], &v6);
  if ((_DWORD)result)
    *a2 = v6;
  return result;
}

void siri::dialogengine::CatBinary::cat::InitAsDefaultInstance(siri::dialogengine::CatBinary::cat *this)
{
  qword_1EF583B90 = (uint64_t)&siri::dialogengine::CatBinary::_node_default_instance_;
}

uint64_t siri::dialogengine::CatBinary::cat::_Internal::root(siri::dialogengine::CatBinary::cat::_Internal *this, const siri::dialogengine::CatBinary::cat *a2)
{
  return *((_QWORD *)this + 26);
}

siri::dialogengine::CatBinary::cat *siri::dialogengine::CatBinary::cat::cat(siri::dialogengine::CatBinary::cat *this, const siri::dialogengine::CatBinary::cat *a2)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  siri::dialogengine::CatBinary::node *v12;
  std::string *v13;
  char v15;
  std::string v16[2];

  *(_QWORD *)this = &off_1E792F468;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 11) = 0;
  *(_QWORD *)((char *)this + 28) = 0;
  *(_QWORD *)((char *)this + 36) = 0;
  *(_QWORD *)((char *)this + 20) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::CatBinary::metadata>::TypeHandler>((int **)this + 3, (uint64_t)a2 + 24);
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::CatBinary::parameter>::TypeHandler>((int **)this + 6, (uint64_t)a2 + 48);
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::CatBinary::condition>::TypeHandler>((int **)this + 9, (uint64_t)a2 + 72);
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::CatBinary::node>::TypeHandler>((int **)this + 12, (uint64_t)a2 + 96);
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::CatBinary::node>::TypeHandler>((int **)this + 15, (uint64_t)a2 + 120);
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::CatBinary::node>::TypeHandler>((int **)this + 18, (uint64_t)a2 + 144);
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v5 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 21) = &google::protobuf::internal::fixed_address_empty_string;
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 1) != 0)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 21);
    if (v7 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 21, (uint64_t)v7);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 22) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 2) != 0)
  {
    v8 = (uint64_t *)*((_QWORD *)a2 + 22);
    if (v8 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 22, (uint64_t)v8);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 23) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 4) != 0)
  {
    v9 = (uint64_t *)*((_QWORD *)a2 + 23);
    if (v9 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 23, (uint64_t)v9);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 24) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 8) != 0)
  {
    v10 = (uint64_t *)*((_QWORD *)a2 + 24);
    if (v10 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 24, (uint64_t)v10);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 25) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 0x10) != 0)
  {
    v11 = (uint64_t *)*((_QWORD *)a2 + 25);
    if (v11 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 25, (uint64_t)v11);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  if ((v6 & 0x20) != 0)
  {
    if (!*((_QWORD *)a2 + 26))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/CatBinary.pb.h", 3139);
      v13 = google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: !value || root_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v15, (const char **)&v13->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
    }
    v12 = (siri::dialogengine::CatBinary::node *)operator new();
    siri::dialogengine::CatBinary::node::node(v12, *((const siri::dialogengine::CatBinary::node **)a2 + 26));
  }
  else
  {
    v12 = 0;
  }
  *((_QWORD *)this + 26) = v12;
  return this;
}

void sub_1BF962D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t *v3;
  google::protobuf::internal::RepeatedPtrFieldBase *v4;
  google::protobuf::internal::RepeatedPtrFieldBase *v5;
  google::protobuf::internal::RepeatedPtrFieldBase *v6;
  google::protobuf::internal::RepeatedPtrFieldBase *v7;
  google::protobuf::internal::RepeatedPtrFieldBase *v8;
  google::protobuf::internal::RepeatedPtrFieldBase *v9;
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v9);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v8);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v7);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v6);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v5);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v4);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v3);
  _Unwind_Resume(a1);
}

siri::dialogengine::CatBinary::node *siri::dialogengine::CatBinary::node::node(siri::dialogengine::CatBinary::node *this, const siri::dialogengine::CatBinary::node *a2)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;

  *(_QWORD *)this = &off_1E792F7C8;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 11) = 0;
  *(_QWORD *)((char *)this + 28) = 0;
  *(_QWORD *)((char *)this + 36) = 0;
  *(_QWORD *)((char *)this + 20) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::CatBinary::node>::TypeHandler>((int **)this + 3, (uint64_t)a2 + 24);
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::CatBinary::visual_parameter>::TypeHandler>((int **)this + 6, (uint64_t)a2 + 48);
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v5 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 9) = &google::protobuf::internal::fixed_address_empty_string;
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 1) != 0)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 9);
    if (v7 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 9, (uint64_t)v7);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 10) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 2) != 0)
  {
    v8 = (uint64_t *)*((_QWORD *)a2 + 10);
    if (v8 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 10, (uint64_t)v8);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 11) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 4) != 0)
  {
    v9 = (uint64_t *)*((_QWORD *)a2 + 11);
    if (v9 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 11, (uint64_t)v9);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 12) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 8) != 0)
  {
    v10 = (uint64_t *)*((_QWORD *)a2 + 12);
    if (v10 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 12, (uint64_t)v10);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 13) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 0x10) != 0)
  {
    v11 = (uint64_t *)*((_QWORD *)a2 + 13);
    if (v11 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 13, (uint64_t)v11);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 14) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 0x20) != 0)
  {
    v12 = (uint64_t *)*((_QWORD *)a2 + 14);
    if (v12 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 14, (uint64_t)v12);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 15) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 0x40) != 0)
  {
    v13 = (uint64_t *)*((_QWORD *)a2 + 15);
    if (v13 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 15, (uint64_t)v13);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 16) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 0x80) != 0)
  {
    v14 = (uint64_t *)*((_QWORD *)a2 + 16);
    if (v14 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 16, (uint64_t)v14);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 17) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 0x100) != 0)
  {
    v15 = (uint64_t *)*((_QWORD *)a2 + 17);
    if (v15 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 17, (uint64_t)v15);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 18) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 0x200) != 0)
  {
    v16 = (uint64_t *)*((_QWORD *)a2 + 18);
    if (v16 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 18, (uint64_t)v16);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 19) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 0x400) != 0)
  {
    v17 = (uint64_t *)*((_QWORD *)a2 + 19);
    if (v17 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 19, (uint64_t)v17);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 20) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 0x800) != 0)
  {
    v18 = (uint64_t *)*((_QWORD *)a2 + 20);
    if (v18 != &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 20, (uint64_t)v18);
  }
  v19 = *((_QWORD *)a2 + 21);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((_QWORD *)this + 21) = v19;
  return this;
}

void sub_1BF963048(_Unwind_Exception *a1)
{
  uint64_t *v1;
  google::protobuf::internal::RepeatedPtrFieldBase *v2;
  google::protobuf::internal::ArenaImpl **v3;

  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(v3);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::CatBinary::cat::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *siri::dialogengine::CatBinary::cat::default_instance(siri::dialogengine::CatBinary::cat *this)
{
  if (atomic_load(scc_info_cat_CatBinary_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_cat_CatBinary_2eproto);
  return &siri::dialogengine::CatBinary::_cat_default_instance_;
}

void siri::dialogengine::CatBinary::cat::CopyFrom(siri::dialogengine::CatBinary::cat *this, const siri::dialogengine::CatBinary::cat *a2)
{
  if (a2 != this)
  {
    siri::dialogengine::CatBinary::cat::Clear(this);
    siri::dialogengine::CatBinary::cat::MergeFrom(this, a2);
  }
}

void siri::dialogengine::CatBinary::cat::InternalSwap(siri::dialogengine::CatBinary::cat *this, siri::dialogengine::CatBinary::cat *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t **v26;
  uint64_t *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t **v32;
  uint64_t *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t **v38;
  uint64_t *v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v44;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
      goto LABEL_40;
    }
LABEL_5:
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 1) != 0)
    {
LABEL_6:
      v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
      v9 = *(_QWORD *)(v8 + 16);
      v10 = *(_OWORD *)v8;
      v11 = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v8 = *(_OWORD *)v7;
      *(_QWORD *)(v8 + 16) = v11;
      *(_OWORD *)v7 = v10;
      *(_QWORD *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_40:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if ((v6 & 1) != 0)
    goto LABEL_5;
LABEL_8:
  v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((siri::dialogengine::CatBinary::cat *)((char *)this + 24), (siri::dialogengine::CatBinary::cat *)((char *)a2 + 24));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((siri::dialogengine::CatBinary::cat *)((char *)this + 48), (siri::dialogengine::CatBinary::cat *)((char *)a2 + 48));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((siri::dialogengine::CatBinary::cat *)((char *)this + 72), (siri::dialogengine::CatBinary::cat *)((char *)a2 + 72));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((siri::dialogengine::CatBinary::cat *)((char *)this + 96), (siri::dialogengine::CatBinary::cat *)((char *)a2 + 96));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((siri::dialogengine::CatBinary::cat *)((char *)this + 120), (siri::dialogengine::CatBinary::cat *)((char *)a2 + 120));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((siri::dialogengine::CatBinary::cat *)((char *)this + 144), (siri::dialogengine::CatBinary::cat *)((char *)a2 + 144));
  v13 = (uint64_t *)*((_QWORD *)this + 21);
  v14 = (uint64_t **)((char *)a2 + 168);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_14;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 21, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v13 = (uint64_t *)*((_QWORD *)this + 21);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 21, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v13[2];
  v17 = *(_OWORD *)v13;
  v18 = v15[2];
  *(_OWORD *)v13 = *(_OWORD *)v15;
  v13[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_14:
  v19 = (uint64_t *)*((_QWORD *)this + 22);
  v20 = (uint64_t **)((char *)a2 + 176);
  if (v19 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_20;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 22, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v19 = (uint64_t *)*((_QWORD *)this + 22);
  }
  v21 = *v20;
  if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 22, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v21 = *v20;
  }
  v22 = v19[2];
  v23 = *(_OWORD *)v19;
  v24 = v21[2];
  *(_OWORD *)v19 = *(_OWORD *)v21;
  v19[2] = v24;
  *(_OWORD *)v21 = v23;
  v21[2] = v22;
LABEL_20:
  v25 = (uint64_t *)*((_QWORD *)this + 23);
  v26 = (uint64_t **)((char *)a2 + 184);
  if (v25 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v26 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_26;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 23, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v25 = (uint64_t *)*((_QWORD *)this + 23);
  }
  v27 = *v26;
  if (*v26 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 23, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v27 = *v26;
  }
  v28 = v25[2];
  v29 = *(_OWORD *)v25;
  v30 = v27[2];
  *(_OWORD *)v25 = *(_OWORD *)v27;
  v25[2] = v30;
  *(_OWORD *)v27 = v29;
  v27[2] = v28;
LABEL_26:
  v31 = (uint64_t *)*((_QWORD *)this + 24);
  v32 = (uint64_t **)((char *)a2 + 192);
  if (v31 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v32 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_32;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 24, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v31 = (uint64_t *)*((_QWORD *)this + 24);
  }
  v33 = *v32;
  if (*v32 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 24, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v33 = *v32;
  }
  v34 = v31[2];
  v35 = *(_OWORD *)v31;
  v36 = v33[2];
  *(_OWORD *)v31 = *(_OWORD *)v33;
  v31[2] = v36;
  *(_OWORD *)v33 = v35;
  v33[2] = v34;
LABEL_32:
  v37 = (uint64_t *)*((_QWORD *)this + 25);
  v38 = (uint64_t **)((char *)a2 + 200);
  if (v37 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v38 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_38;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 25, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v37 = (uint64_t *)*((_QWORD *)this + 25);
  }
  v39 = *v38;
  if (*v38 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 25, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v39 = *v38;
  }
  v40 = v37[2];
  v41 = *(_OWORD *)v37;
  v42 = v39[2];
  *(_OWORD *)v37 = *(_OWORD *)v39;
  v37[2] = v42;
  *(_OWORD *)v39 = v41;
  v39[2] = v40;
LABEL_38:
  v43 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = *((_QWORD *)a2 + 26);
  *((_QWORD *)a2 + 26) = v43;
}

siri::dialogengine::CatBinary::metadata *siri::dialogengine::CatBinary::metadata::metadata(siri::dialogengine::CatBinary::metadata *this, const siri::dialogengine::CatBinary::metadata *a2)
{
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t *v7;

  *(_QWORD *)this = &off_1E792F4F8;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 5) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_DWORD *)a2 + 4);
  if ((v5 & 1) != 0)
  {
    v6 = (uint64_t *)*((_QWORD *)a2 + 3);
    if (v6 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, (uint64_t)v6);
      v5 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 4) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v5 & 2) != 0)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 4);
    if (v7 != &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 4, (uint64_t)v7);
  }
  return this;
}

void sub_1BF96353C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::CatBinary::metadata::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *siri::dialogengine::CatBinary::metadata::default_instance(siri::dialogengine::CatBinary::metadata *this)
{
  if (atomic_load(scc_info_metadata_CatBinary_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_metadata_CatBinary_2eproto);
  return &siri::dialogengine::CatBinary::_metadata_default_instance_;
}

void siri::dialogengine::CatBinary::metadata::CopyFrom(siri::dialogengine::CatBinary::metadata *this, const siri::dialogengine::CatBinary::metadata *a2)
{
  if (a2 != this)
  {
    siri::dialogengine::CatBinary::metadata::Clear(this);
    siri::dialogengine::CatBinary::metadata::MergeFrom(this, a2);
  }
}

__n128 siri::dialogengine::CatBinary::metadata::InternalSwap(siri::dialogengine::CatBinary::metadata *this, siri::dialogengine::CatBinary::metadata *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  __n128 *v8;
  unint64_t v9;
  __n128 result;
  unint64_t v11;
  uint64_t *v12;
  int v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  std::string **v18;
  std::string *v19;
  uint64_t *v20;
  std::string **v21;
  std::string *v22;
  std::string::size_type v23;
  std::string::size_type v24;
  unint64_t v25;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v25;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
      goto LABEL_22;
    }
LABEL_5:
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 1) != 0)
    {
LABEL_6:
      v8 = (__n128 *)(v4 & 0xFFFFFFFFFFFFFFFELL);
LABEL_7:
      v9 = v8[1].n128_u64[0];
      result = *v8;
      v11 = *(_QWORD *)(v7 + 16);
      *v8 = *(__n128 *)v7;
      v8[1].n128_u64[0] = v11;
      *(__n128 *)v7 = result;
      *(_QWORD *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_22:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if ((v6 & 1) != 0)
    goto LABEL_5;
LABEL_8:
  v12 = (uint64_t *)*((_QWORD *)this + 3);
  v13 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v13;
  v14 = (uint64_t **)((char *)a2 + 24);
  if (v12 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_14;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v12 = (uint64_t *)*((_QWORD *)this + 3);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v12[2];
  result = *(__n128 *)v12;
  v17 = v15[2];
  *(_OWORD *)v12 = *(_OWORD *)v15;
  v12[2] = v17;
  *(__n128 *)v15 = result;
  v15[2] = v16;
LABEL_14:
  v20 = (uint64_t *)*((_QWORD *)this + 4);
  v18 = (std::string **)((char *)this + 32);
  v19 = (std::string *)v20;
  v21 = (std::string **)((char *)a2 + 32);
  if (v20 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v21 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      return result;
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v18, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v19 = *v18;
  }
  v22 = *v21;
  if (*v21 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v21, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v22 = *v21;
  }
  v23 = v19->__r_.__value_.__r.__words[2];
  result = *(__n128 *)&v19->__r_.__value_.__l.__data_;
  v24 = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v19->__r_.__value_.__r.__words[2] = v24;
  *(__n128 *)&v22->__r_.__value_.__l.__data_ = result;
  v22->__r_.__value_.__r.__words[2] = v23;
  return result;
}

siri::dialogengine::CatBinary::parameter *siri::dialogengine::CatBinary::parameter::parameter(siri::dialogengine::CatBinary::parameter *this, const siri::dialogengine::CatBinary::parameter *a2)
{
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  __int16 v13;

  *(_QWORD *)this = &off_1E792F588;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 5) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_DWORD *)a2 + 4);
  if ((v5 & 1) != 0)
  {
    v6 = (uint64_t *)*((_QWORD *)a2 + 3);
    if (v6 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, (uint64_t)v6);
      v5 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 4) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v5 & 2) != 0)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 4);
    if (v7 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 4, (uint64_t)v7);
      v5 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v5 & 4) != 0)
  {
    v8 = (uint64_t *)*((_QWORD *)a2 + 5);
    if (v8 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 5, (uint64_t)v8);
      v5 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v5 & 8) != 0)
  {
    v9 = (uint64_t *)*((_QWORD *)a2 + 6);
    if (v9 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, (uint64_t)v9);
      v5 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 7) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v5 & 0x10) != 0)
  {
    v10 = (uint64_t *)*((_QWORD *)a2 + 7);
    if (v10 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 7, (uint64_t)v10);
      v5 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 8) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v5 & 0x20) != 0)
  {
    v11 = (uint64_t *)*((_QWORD *)a2 + 8);
    if (v11 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 8, (uint64_t)v11);
      v5 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 9) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v5 & 0x40) != 0)
  {
    v12 = (uint64_t *)*((_QWORD *)a2 + 9);
    if (v12 != &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 9, (uint64_t)v12);
  }
  v13 = *((_WORD *)a2 + 40);
  *((_BYTE *)this + 82) = *((_BYTE *)a2 + 82);
  *((_WORD *)this + 40) = v13;
  return this;
}

void sub_1BF9638D4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::CatBinary::parameter::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *siri::dialogengine::CatBinary::parameter::default_instance(siri::dialogengine::CatBinary::parameter *this)
{
  if (atomic_load(scc_info_parameter_CatBinary_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_parameter_CatBinary_2eproto);
  return &siri::dialogengine::CatBinary::_parameter_default_instance_;
}

void siri::dialogengine::CatBinary::parameter::CopyFrom(siri::dialogengine::CatBinary::parameter *this, const siri::dialogengine::CatBinary::parameter *a2)
{
  if (a2 != this)
  {
    siri::dialogengine::CatBinary::parameter::Clear(this);
    siri::dialogengine::CatBinary::parameter::MergeFrom(this, a2);
  }
}

void siri::dialogengine::CatBinary::parameter::InternalSwap(siri::dialogengine::CatBinary::parameter *this, siri::dialogengine::CatBinary::parameter *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t **v26;
  uint64_t *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t **v32;
  uint64_t *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t **v38;
  uint64_t *v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t **v44;
  uint64_t *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t **v50;
  uint64_t *v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  char v55;
  char v56;
  char v57;
  unint64_t v58;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v58;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
      goto LABEL_52;
    }
LABEL_5:
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 1) != 0)
    {
LABEL_6:
      v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
      v9 = *(_QWORD *)(v8 + 16);
      v10 = *(_OWORD *)v8;
      v11 = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v8 = *(_OWORD *)v7;
      *(_QWORD *)(v8 + 16) = v11;
      *(_OWORD *)v7 = v10;
      *(_QWORD *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_52:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if ((v6 & 1) != 0)
    goto LABEL_5;
LABEL_8:
  v12 = (uint64_t *)*((_QWORD *)this + 3);
  v13 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v13;
  v14 = (uint64_t **)((char *)a2 + 24);
  if (v12 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_14;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v12 = (uint64_t *)*((_QWORD *)this + 3);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v12[2];
  v17 = *(_OWORD *)v12;
  v18 = v15[2];
  *(_OWORD *)v12 = *(_OWORD *)v15;
  v12[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_14:
  v19 = (uint64_t *)*((_QWORD *)this + 4);
  v20 = (uint64_t **)((char *)a2 + 32);
  if (v19 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_20;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 4, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v19 = (uint64_t *)*((_QWORD *)this + 4);
  }
  v21 = *v20;
  if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 4, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v21 = *v20;
  }
  v22 = v19[2];
  v23 = *(_OWORD *)v19;
  v24 = v21[2];
  *(_OWORD *)v19 = *(_OWORD *)v21;
  v19[2] = v24;
  *(_OWORD *)v21 = v23;
  v21[2] = v22;
LABEL_20:
  v25 = (uint64_t *)*((_QWORD *)this + 5);
  v26 = (uint64_t **)((char *)a2 + 40);
  if (v25 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v26 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_26;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 5, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v25 = (uint64_t *)*((_QWORD *)this + 5);
  }
  v27 = *v26;
  if (*v26 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 5, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v27 = *v26;
  }
  v28 = v25[2];
  v29 = *(_OWORD *)v25;
  v30 = v27[2];
  *(_OWORD *)v25 = *(_OWORD *)v27;
  v25[2] = v30;
  *(_OWORD *)v27 = v29;
  v27[2] = v28;
LABEL_26:
  v31 = (uint64_t *)*((_QWORD *)this + 6);
  v32 = (uint64_t **)((char *)a2 + 48);
  if (v31 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v32 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_32;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 6, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v31 = (uint64_t *)*((_QWORD *)this + 6);
  }
  v33 = *v32;
  if (*v32 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 6, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v33 = *v32;
  }
  v34 = v31[2];
  v35 = *(_OWORD *)v31;
  v36 = v33[2];
  *(_OWORD *)v31 = *(_OWORD *)v33;
  v31[2] = v36;
  *(_OWORD *)v33 = v35;
  v33[2] = v34;
LABEL_32:
  v37 = (uint64_t *)*((_QWORD *)this + 7);
  v38 = (uint64_t **)((char *)a2 + 56);
  if (v37 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v38 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_38;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 7, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v37 = (uint64_t *)*((_QWORD *)this + 7);
  }
  v39 = *v38;
  if (*v38 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 7, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v39 = *v38;
  }
  v40 = v37[2];
  v41 = *(_OWORD *)v37;
  v42 = v39[2];
  *(_OWORD *)v37 = *(_OWORD *)v39;
  v37[2] = v42;
  *(_OWORD *)v39 = v41;
  v39[2] = v40;
LABEL_38:
  v43 = (uint64_t *)*((_QWORD *)this + 8);
  v44 = (uint64_t **)((char *)a2 + 64);
  if (v43 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v44 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_44;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 8, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v43 = (uint64_t *)*((_QWORD *)this + 8);
  }
  v45 = *v44;
  if (*v44 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 8, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v45 = *v44;
  }
  v46 = v43[2];
  v47 = *(_OWORD *)v43;
  v48 = v45[2];
  *(_OWORD *)v43 = *(_OWORD *)v45;
  v43[2] = v48;
  *(_OWORD *)v45 = v47;
  v45[2] = v46;
LABEL_44:
  v49 = (uint64_t *)*((_QWORD *)this + 9);
  v50 = (uint64_t **)((char *)a2 + 72);
  if (v49 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v50 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_50;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 9, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v49 = (uint64_t *)*((_QWORD *)this + 9);
  }
  v51 = *v50;
  if (*v50 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 9, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v51 = *v50;
  }
  v52 = v49[2];
  v53 = *(_OWORD *)v49;
  v54 = v51[2];
  *(_OWORD *)v49 = *(_OWORD *)v51;
  v49[2] = v54;
  *(_OWORD *)v51 = v53;
  v51[2] = v52;
LABEL_50:
  v55 = *((_BYTE *)this + 80);
  *((_BYTE *)this + 80) = *((_BYTE *)a2 + 80);
  *((_BYTE *)a2 + 80) = v55;
  v56 = *((_BYTE *)this + 81);
  *((_BYTE *)this + 81) = *((_BYTE *)a2 + 81);
  *((_BYTE *)a2 + 81) = v56;
  v57 = *((_BYTE *)this + 82);
  *((_BYTE *)this + 82) = *((_BYTE *)a2 + 82);
  *((_BYTE *)a2 + 82) = v57;
}

siri::dialogengine::CatBinary::condition *siri::dialogengine::CatBinary::condition::condition(siri::dialogengine::CatBinary::condition *this, const siri::dialogengine::CatBinary::condition *a2)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t *v8;

  *(_QWORD *)this = &off_1E792F618;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 11) = 0;
  *(_QWORD *)((char *)this + 28) = 0;
  *(_QWORD *)((char *)this + 36) = 0;
  *(_QWORD *)((char *)this + 20) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::CatBinary::condition_entry>::TypeHandler>((int **)this + 3, (uint64_t)a2 + 24);
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v5 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 1) != 0)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 6);
    if (v7 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, (uint64_t)v7);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 7) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 2) != 0)
  {
    v8 = (uint64_t *)*((_QWORD *)a2 + 7);
    if (v8 != &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 7, (uint64_t)v8);
  }
  return this;
}

void sub_1BF963E8C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  google::protobuf::internal::RepeatedPtrFieldBase *v2;

  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::CatBinary::condition::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *siri::dialogengine::CatBinary::condition::default_instance(siri::dialogengine::CatBinary::condition *this)
{
  if (atomic_load(scc_info_condition_CatBinary_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_condition_CatBinary_2eproto);
  return &siri::dialogengine::CatBinary::_condition_default_instance_;
}

void siri::dialogengine::CatBinary::condition::CopyFrom(siri::dialogengine::CatBinary::condition *this, const siri::dialogengine::CatBinary::condition *a2)
{
  if (a2 != this)
  {
    siri::dialogengine::CatBinary::condition::Clear(this);
    siri::dialogengine::CatBinary::condition::MergeFrom(this, a2);
  }
}

__n128 siri::dialogengine::CatBinary::condition::InternalSwap(siri::dialogengine::CatBinary::condition *this, siri::dialogengine::CatBinary::condition *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  __n128 result;
  uint64_t *v14;
  uint64_t **v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  std::string **v19;
  std::string *v20;
  uint64_t *v21;
  std::string **v22;
  std::string *v23;
  std::string::size_type v24;
  std::string::size_type v25;
  unint64_t v26;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v26;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
      goto LABEL_22;
    }
LABEL_5:
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 1) != 0)
    {
LABEL_6:
      v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
      v9 = *(_QWORD *)(v8 + 16);
      v10 = *(_OWORD *)v8;
      v11 = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v8 = *(_OWORD *)v7;
      *(_QWORD *)(v8 + 16) = v11;
      *(_OWORD *)v7 = v10;
      *(_QWORD *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_22:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if ((v6 & 1) != 0)
    goto LABEL_5;
LABEL_8:
  v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((siri::dialogengine::CatBinary::condition *)((char *)this + 24), (siri::dialogengine::CatBinary::condition *)((char *)a2 + 24));
  v14 = (uint64_t *)*((_QWORD *)this + 6);
  v15 = (uint64_t **)((char *)a2 + 48);
  if (v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v15 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_14;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 6, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v14 = (uint64_t *)*((_QWORD *)this + 6);
  }
  v16 = *v15;
  if (*v15 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 6, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v16 = *v15;
  }
  v17 = v14[2];
  result = *(__n128 *)v14;
  v18 = v16[2];
  *(_OWORD *)v14 = *(_OWORD *)v16;
  v14[2] = v18;
  *(__n128 *)v16 = result;
  v16[2] = v17;
LABEL_14:
  v21 = (uint64_t *)*((_QWORD *)this + 7);
  v19 = (std::string **)((char *)this + 56);
  v20 = (std::string *)v21;
  v22 = (std::string **)((char *)a2 + 56);
  if (v21 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v22 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      return result;
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v19, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v20 = *v19;
  }
  v23 = *v22;
  if (*v22 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v22, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v23 = *v22;
  }
  v24 = v20->__r_.__value_.__r.__words[2];
  result = *(__n128 *)&v20->__r_.__value_.__l.__data_;
  v25 = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20->__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v20->__r_.__value_.__r.__words[2] = v25;
  *(__n128 *)&v23->__r_.__value_.__l.__data_ = result;
  v23->__r_.__value_.__r.__words[2] = v24;
  return result;
}

siri::dialogengine::CatBinary::condition_entry *siri::dialogengine::CatBinary::condition_entry::condition_entry(siri::dialogengine::CatBinary::condition_entry *this, const siri::dialogengine::CatBinary::condition_entry *a2)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;

  *(_QWORD *)this = &off_1E792F6A8;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 11) = 0;
  *(_QWORD *)((char *)this + 28) = 0;
  *(_QWORD *)((char *)this + 36) = 0;
  *(_QWORD *)((char *)this + 20) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::CatBinary::condition_entry>::TypeHandler>((int **)this + 3, (uint64_t)a2 + 24);
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v5 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 1) != 0)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 6);
    if (v7 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, (uint64_t)v7);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 7) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 2) != 0)
  {
    v8 = (uint64_t *)*((_QWORD *)a2 + 7);
    if (v8 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 7, (uint64_t)v8);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 8) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 4) != 0)
  {
    v9 = (uint64_t *)*((_QWORD *)a2 + 8);
    if (v9 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 8, (uint64_t)v9);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 9) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 8) != 0)
  {
    v10 = (uint64_t *)*((_QWORD *)a2 + 9);
    if (v10 != &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 9, (uint64_t)v10);
  }
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  return this;
}

void sub_1BF964208(_Unwind_Exception *a1)
{
  uint64_t *v1;
  google::protobuf::internal::ArenaImpl **v2;

  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::CatBinary::condition_entry::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *siri::dialogengine::CatBinary::condition_entry::default_instance(siri::dialogengine::CatBinary::condition_entry *this)
{
  if (atomic_load(scc_info_condition_entry_CatBinary_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_condition_entry_CatBinary_2eproto);
  return &siri::dialogengine::CatBinary::_condition_entry_default_instance_;
}

void siri::dialogengine::CatBinary::condition_entry::CopyFrom(siri::dialogengine::CatBinary::condition_entry *this, const siri::dialogengine::CatBinary::condition_entry *a2)
{
  if (a2 != this)
  {
    siri::dialogengine::CatBinary::condition_entry::Clear(this);
    siri::dialogengine::CatBinary::condition_entry::MergeFrom(this, a2);
  }
}

void siri::dialogengine::CatBinary::condition_entry::InternalSwap(siri::dialogengine::CatBinary::condition_entry *this, siri::dialogengine::CatBinary::condition_entry *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t **v26;
  uint64_t *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t **v32;
  uint64_t *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  int v37;
  unint64_t v38;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v38;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
      goto LABEL_34;
    }
LABEL_5:
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 1) != 0)
    {
LABEL_6:
      v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
      v9 = *(_QWORD *)(v8 + 16);
      v10 = *(_OWORD *)v8;
      v11 = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v8 = *(_OWORD *)v7;
      *(_QWORD *)(v8 + 16) = v11;
      *(_OWORD *)v7 = v10;
      *(_QWORD *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_34:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if ((v6 & 1) != 0)
    goto LABEL_5;
LABEL_8:
  v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((siri::dialogengine::CatBinary::condition_entry *)((char *)this + 24), (siri::dialogengine::CatBinary::condition_entry *)((char *)a2 + 24));
  v13 = (uint64_t *)*((_QWORD *)this + 6);
  v14 = (uint64_t **)((char *)a2 + 48);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_14;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 6, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v13 = (uint64_t *)*((_QWORD *)this + 6);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 6, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v13[2];
  v17 = *(_OWORD *)v13;
  v18 = v15[2];
  *(_OWORD *)v13 = *(_OWORD *)v15;
  v13[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_14:
  v19 = (uint64_t *)*((_QWORD *)this + 7);
  v20 = (uint64_t **)((char *)a2 + 56);
  if (v19 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_20;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 7, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v19 = (uint64_t *)*((_QWORD *)this + 7);
  }
  v21 = *v20;
  if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 7, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v21 = *v20;
  }
  v22 = v19[2];
  v23 = *(_OWORD *)v19;
  v24 = v21[2];
  *(_OWORD *)v19 = *(_OWORD *)v21;
  v19[2] = v24;
  *(_OWORD *)v21 = v23;
  v21[2] = v22;
LABEL_20:
  v25 = (uint64_t *)*((_QWORD *)this + 8);
  v26 = (uint64_t **)((char *)a2 + 64);
  if (v25 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v26 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_26;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 8, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v25 = (uint64_t *)*((_QWORD *)this + 8);
  }
  v27 = *v26;
  if (*v26 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 8, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v27 = *v26;
  }
  v28 = v25[2];
  v29 = *(_OWORD *)v25;
  v30 = v27[2];
  *(_OWORD *)v25 = *(_OWORD *)v27;
  v25[2] = v30;
  *(_OWORD *)v27 = v29;
  v27[2] = v28;
LABEL_26:
  v31 = (uint64_t *)*((_QWORD *)this + 9);
  v32 = (uint64_t **)((char *)a2 + 72);
  if (v31 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v32 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_32;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 9, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v31 = (uint64_t *)*((_QWORD *)this + 9);
  }
  v33 = *v32;
  if (*v32 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 9, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v33 = *v32;
  }
  v34 = v31[2];
  v35 = *(_OWORD *)v31;
  v36 = v33[2];
  *(_OWORD *)v31 = *(_OWORD *)v33;
  v31[2] = v36;
  *(_OWORD *)v33 = v35;
  v33[2] = v34;
LABEL_32:
  v37 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 20) = v37;
}

siri::dialogengine::CatBinary::visual_parameter *siri::dialogengine::CatBinary::visual_parameter::visual_parameter(siri::dialogengine::CatBinary::visual_parameter *this, const siri::dialogengine::CatBinary::visual_parameter *a2)
{
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t *v7;

  *(_QWORD *)this = &off_1E792F738;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 5) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_DWORD *)a2 + 4);
  if ((v5 & 1) != 0)
  {
    v6 = (uint64_t *)*((_QWORD *)a2 + 3);
    if (v6 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, (uint64_t)v6);
      v5 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 4) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v5 & 2) != 0)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 4);
    if (v7 != &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 4, (uint64_t)v7);
  }
  return this;
}

void sub_1BF964620(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::CatBinary::visual_parameter::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *siri::dialogengine::CatBinary::visual_parameter::default_instance(siri::dialogengine::CatBinary::visual_parameter *this)
{
  if (atomic_load(scc_info_visual_parameter_CatBinary_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_visual_parameter_CatBinary_2eproto);
  return &siri::dialogengine::CatBinary::_visual_parameter_default_instance_;
}

void siri::dialogengine::CatBinary::visual_parameter::CopyFrom(siri::dialogengine::CatBinary::visual_parameter *this, const siri::dialogengine::CatBinary::visual_parameter *a2)
{
  if (a2 != this)
  {
    siri::dialogengine::CatBinary::visual_parameter::Clear(this);
    siri::dialogengine::CatBinary::visual_parameter::MergeFrom(this, a2);
  }
}

__n128 siri::dialogengine::CatBinary::visual_parameter::InternalSwap(siri::dialogengine::CatBinary::visual_parameter *this, siri::dialogengine::CatBinary::visual_parameter *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  __n128 *v8;
  unint64_t v9;
  __n128 result;
  unint64_t v11;
  uint64_t *v12;
  int v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  std::string **v18;
  std::string *v19;
  uint64_t *v20;
  std::string **v21;
  std::string *v22;
  std::string::size_type v23;
  std::string::size_type v24;
  unint64_t v25;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v25;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
      goto LABEL_22;
    }
LABEL_5:
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 1) != 0)
    {
LABEL_6:
      v8 = (__n128 *)(v4 & 0xFFFFFFFFFFFFFFFELL);
LABEL_7:
      v9 = v8[1].n128_u64[0];
      result = *v8;
      v11 = *(_QWORD *)(v7 + 16);
      *v8 = *(__n128 *)v7;
      v8[1].n128_u64[0] = v11;
      *(__n128 *)v7 = result;
      *(_QWORD *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_22:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if ((v6 & 1) != 0)
    goto LABEL_5;
LABEL_8:
  v12 = (uint64_t *)*((_QWORD *)this + 3);
  v13 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v13;
  v14 = (uint64_t **)((char *)a2 + 24);
  if (v12 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_14;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v12 = (uint64_t *)*((_QWORD *)this + 3);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v12[2];
  result = *(__n128 *)v12;
  v17 = v15[2];
  *(_OWORD *)v12 = *(_OWORD *)v15;
  v12[2] = v17;
  *(__n128 *)v15 = result;
  v15[2] = v16;
LABEL_14:
  v20 = (uint64_t *)*((_QWORD *)this + 4);
  v18 = (std::string **)((char *)this + 32);
  v19 = (std::string *)v20;
  v21 = (std::string **)((char *)a2 + 32);
  if (v20 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v21 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      return result;
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v18, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v19 = *v18;
  }
  v22 = *v21;
  if (*v21 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v21, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v22 = *v21;
  }
  v23 = v19->__r_.__value_.__r.__words[2];
  result = *(__n128 *)&v19->__r_.__value_.__l.__data_;
  v24 = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v19->__r_.__value_.__r.__words[2] = v24;
  *(__n128 *)&v22->__r_.__value_.__l.__data_ = result;
  v22->__r_.__value_.__r.__words[2] = v23;
  return result;
}

uint64_t siri::dialogengine::CatBinary::node::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *siri::dialogengine::CatBinary::node::default_instance(siri::dialogengine::CatBinary::node *this)
{
  if (atomic_load(scc_info_node_CatBinary_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_node_CatBinary_2eproto);
  return &siri::dialogengine::CatBinary::_node_default_instance_;
}

void siri::dialogengine::CatBinary::node::CopyFrom(siri::dialogengine::CatBinary::node *this, const siri::dialogengine::CatBinary::node *a2)
{
  if (a2 != this)
  {
    siri::dialogengine::CatBinary::node::Clear(this);
    siri::dialogengine::CatBinary::node::MergeFrom(this, a2);
  }
}

float siri::dialogengine::CatBinary::node::InternalSwap(siri::dialogengine::CatBinary::node *this, siri::dialogengine::CatBinary::node *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t **v26;
  uint64_t *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t **v32;
  uint64_t *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t **v38;
  uint64_t *v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t **v44;
  uint64_t *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t **v50;
  uint64_t *v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t **v56;
  uint64_t *v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t **v62;
  uint64_t *v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t **v68;
  uint64_t *v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t **v74;
  uint64_t *v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t **v80;
  uint64_t *v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  int v85;
  float result;
  unint64_t v87;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v87;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
      goto LABEL_82;
    }
LABEL_5:
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 1) != 0)
    {
LABEL_6:
      v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
      v9 = *(_QWORD *)(v8 + 16);
      v10 = *(_OWORD *)v8;
      v11 = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v8 = *(_OWORD *)v7;
      *(_QWORD *)(v8 + 16) = v11;
      *(_OWORD *)v7 = v10;
      *(_QWORD *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_82:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if ((v6 & 1) != 0)
    goto LABEL_5;
LABEL_8:
  v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((siri::dialogengine::CatBinary::node *)((char *)this + 24), (siri::dialogengine::CatBinary::node *)((char *)a2 + 24));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((siri::dialogengine::CatBinary::node *)((char *)this + 48), (siri::dialogengine::CatBinary::node *)((char *)a2 + 48));
  v13 = (uint64_t *)*((_QWORD *)this + 9);
  v14 = (uint64_t **)((char *)a2 + 72);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_14;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 9, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v13 = (uint64_t *)*((_QWORD *)this + 9);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 9, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v13[2];
  v17 = *(_OWORD *)v13;
  v18 = v15[2];
  *(_OWORD *)v13 = *(_OWORD *)v15;
  v13[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_14:
  v19 = (uint64_t *)*((_QWORD *)this + 10);
  v20 = (uint64_t **)((char *)a2 + 80);
  if (v19 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_20;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 10, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v19 = (uint64_t *)*((_QWORD *)this + 10);
  }
  v21 = *v20;
  if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 10, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v21 = *v20;
  }
  v22 = v19[2];
  v23 = *(_OWORD *)v19;
  v24 = v21[2];
  *(_OWORD *)v19 = *(_OWORD *)v21;
  v19[2] = v24;
  *(_OWORD *)v21 = v23;
  v21[2] = v22;
LABEL_20:
  v25 = (uint64_t *)*((_QWORD *)this + 11);
  v26 = (uint64_t **)((char *)a2 + 88);
  if (v25 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v26 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_26;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 11, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v25 = (uint64_t *)*((_QWORD *)this + 11);
  }
  v27 = *v26;
  if (*v26 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 11, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v27 = *v26;
  }
  v28 = v25[2];
  v29 = *(_OWORD *)v25;
  v30 = v27[2];
  *(_OWORD *)v25 = *(_OWORD *)v27;
  v25[2] = v30;
  *(_OWORD *)v27 = v29;
  v27[2] = v28;
LABEL_26:
  v31 = (uint64_t *)*((_QWORD *)this + 12);
  v32 = (uint64_t **)((char *)a2 + 96);
  if (v31 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v32 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_32;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 12, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v31 = (uint64_t *)*((_QWORD *)this + 12);
  }
  v33 = *v32;
  if (*v32 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 12, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v33 = *v32;
  }
  v34 = v31[2];
  v35 = *(_OWORD *)v31;
  v36 = v33[2];
  *(_OWORD *)v31 = *(_OWORD *)v33;
  v31[2] = v36;
  *(_OWORD *)v33 = v35;
  v33[2] = v34;
LABEL_32:
  v37 = (uint64_t *)*((_QWORD *)this + 13);
  v38 = (uint64_t **)((char *)a2 + 104);
  if (v37 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v38 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_38;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 13, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v37 = (uint64_t *)*((_QWORD *)this + 13);
  }
  v39 = *v38;
  if (*v38 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 13, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v39 = *v38;
  }
  v40 = v37[2];
  v41 = *(_OWORD *)v37;
  v42 = v39[2];
  *(_OWORD *)v37 = *(_OWORD *)v39;
  v37[2] = v42;
  *(_OWORD *)v39 = v41;
  v39[2] = v40;
LABEL_38:
  v43 = (uint64_t *)*((_QWORD *)this + 14);
  v44 = (uint64_t **)((char *)a2 + 112);
  if (v43 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v44 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_44;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 14, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v43 = (uint64_t *)*((_QWORD *)this + 14);
  }
  v45 = *v44;
  if (*v44 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 14, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v45 = *v44;
  }
  v46 = v43[2];
  v47 = *(_OWORD *)v43;
  v48 = v45[2];
  *(_OWORD *)v43 = *(_OWORD *)v45;
  v43[2] = v48;
  *(_OWORD *)v45 = v47;
  v45[2] = v46;
LABEL_44:
  v49 = (uint64_t *)*((_QWORD *)this + 15);
  v50 = (uint64_t **)((char *)a2 + 120);
  if (v49 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v50 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_50;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 15, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v49 = (uint64_t *)*((_QWORD *)this + 15);
  }
  v51 = *v50;
  if (*v50 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 15, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v51 = *v50;
  }
  v52 = v49[2];
  v53 = *(_OWORD *)v49;
  v54 = v51[2];
  *(_OWORD *)v49 = *(_OWORD *)v51;
  v49[2] = v54;
  *(_OWORD *)v51 = v53;
  v51[2] = v52;
LABEL_50:
  v55 = (uint64_t *)*((_QWORD *)this + 16);
  v56 = (uint64_t **)((char *)a2 + 128);
  if (v55 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v56 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_56;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 16, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v55 = (uint64_t *)*((_QWORD *)this + 16);
  }
  v57 = *v56;
  if (*v56 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 16, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v57 = *v56;
  }
  v58 = v55[2];
  v59 = *(_OWORD *)v55;
  v60 = v57[2];
  *(_OWORD *)v55 = *(_OWORD *)v57;
  v55[2] = v60;
  *(_OWORD *)v57 = v59;
  v57[2] = v58;
LABEL_56:
  v61 = (uint64_t *)*((_QWORD *)this + 17);
  v62 = (uint64_t **)((char *)a2 + 136);
  if (v61 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v62 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_62;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 17, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v61 = (uint64_t *)*((_QWORD *)this + 17);
  }
  v63 = *v62;
  if (*v62 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 17, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v63 = *v62;
  }
  v64 = v61[2];
  v65 = *(_OWORD *)v61;
  v66 = v63[2];
  *(_OWORD *)v61 = *(_OWORD *)v63;
  v61[2] = v66;
  *(_OWORD *)v63 = v65;
  v63[2] = v64;
LABEL_62:
  v67 = (uint64_t *)*((_QWORD *)this + 18);
  v68 = (uint64_t **)((char *)a2 + 144);
  if (v67 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v68 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_68;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 18, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v67 = (uint64_t *)*((_QWORD *)this + 18);
  }
  v69 = *v68;
  if (*v68 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 18, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v69 = *v68;
  }
  v70 = v67[2];
  v71 = *(_OWORD *)v67;
  v72 = v69[2];
  *(_OWORD *)v67 = *(_OWORD *)v69;
  v67[2] = v72;
  *(_OWORD *)v69 = v71;
  v69[2] = v70;
LABEL_68:
  v73 = (uint64_t *)*((_QWORD *)this + 19);
  v74 = (uint64_t **)((char *)a2 + 152);
  if (v73 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v74 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_74;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 19, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v73 = (uint64_t *)*((_QWORD *)this + 19);
  }
  v75 = *v74;
  if (*v74 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 19, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v75 = *v74;
  }
  v76 = v73[2];
  v77 = *(_OWORD *)v73;
  v78 = v75[2];
  *(_OWORD *)v73 = *(_OWORD *)v75;
  v73[2] = v78;
  *(_OWORD *)v75 = v77;
  v75[2] = v76;
LABEL_74:
  v79 = (uint64_t *)*((_QWORD *)this + 20);
  v80 = (uint64_t **)((char *)a2 + 160);
  if (v79 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v80 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_80;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 20, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v79 = (uint64_t *)*((_QWORD *)this + 20);
  }
  v81 = *v80;
  if (*v80 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 20, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v81 = *v80;
  }
  v82 = v79[2];
  v83 = *(_OWORD *)v79;
  v84 = v81[2];
  *(_OWORD *)v79 = *(_OWORD *)v81;
  v79[2] = v84;
  *(_OWORD *)v81 = v83;
  v81[2] = v82;
LABEL_80:
  v85 = *((_DWORD *)this + 42);
  *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
  *((_DWORD *)a2 + 42) = v85;
  LOBYTE(v85) = *((_BYTE *)this + 172);
  *((_BYTE *)this + 172) = *((_BYTE *)a2 + 172);
  *((_BYTE *)a2 + 172) = v85;
  LOBYTE(v85) = *((_BYTE *)this + 173);
  *((_BYTE *)this + 173) = *((_BYTE *)a2 + 173);
  *((_BYTE *)a2 + 173) = v85;
  result = *((float *)this + 44);
  *((_DWORD *)this + 44) = *((_DWORD *)a2 + 44);
  *((float *)a2 + 44) = result;
  return result;
}

siri::dialogengine::CatBinary::vcat_item_expression *siri::dialogengine::CatBinary::vcat_item_expression::vcat_item_expression(siri::dialogengine::CatBinary::vcat_item_expression *this, const siri::dialogengine::CatBinary::vcat_item_expression *a2)
{
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;

  *(_QWORD *)this = &off_1E792F858;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 5) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_DWORD *)a2 + 4);
  if ((v5 & 1) != 0)
  {
    v6 = (uint64_t *)*((_QWORD *)a2 + 3);
    if (v6 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, (uint64_t)v6);
      v5 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 4) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v5 & 2) != 0)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 4);
    if (v7 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 4, (uint64_t)v7);
      v5 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v5 & 4) != 0)
  {
    v8 = (uint64_t *)*((_QWORD *)a2 + 5);
    if (v8 != &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 5, (uint64_t)v8);
  }
  return this;
}

void sub_1BF965090(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::CatBinary::vcat_item_expression::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *siri::dialogengine::CatBinary::vcat_item_expression::default_instance(siri::dialogengine::CatBinary::vcat_item_expression *this)
{
  if (atomic_load(scc_info_vcat_item_expression_CatBinary_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_vcat_item_expression_CatBinary_2eproto);
  return &siri::dialogengine::CatBinary::_vcat_item_expression_default_instance_;
}

void siri::dialogengine::CatBinary::vcat_item_expression::CopyFrom(siri::dialogengine::CatBinary::vcat_item_expression *this, const siri::dialogengine::CatBinary::vcat_item_expression *a2)
{
  if (a2 != this)
  {
    siri::dialogengine::CatBinary::vcat_item_expression::Clear(this);
    siri::dialogengine::CatBinary::vcat_item_expression::MergeFrom(this, a2);
  }
}

__n128 siri::dialogengine::CatBinary::vcat_item_expression::InternalSwap(siri::dialogengine::CatBinary::vcat_item_expression *this, siri::dialogengine::CatBinary::vcat_item_expression *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  __n128 *v8;
  unint64_t v9;
  __n128 result;
  unint64_t v11;
  uint64_t *v12;
  int v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  std::string **v23;
  std::string *v24;
  uint64_t *v25;
  std::string **v26;
  std::string *v27;
  std::string::size_type v28;
  std::string::size_type v29;
  unint64_t v30;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v30;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
      goto LABEL_28;
    }
LABEL_5:
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 1) != 0)
    {
LABEL_6:
      v8 = (__n128 *)(v4 & 0xFFFFFFFFFFFFFFFELL);
LABEL_7:
      v9 = v8[1].n128_u64[0];
      result = *v8;
      v11 = *(_QWORD *)(v7 + 16);
      *v8 = *(__n128 *)v7;
      v8[1].n128_u64[0] = v11;
      *(__n128 *)v7 = result;
      *(_QWORD *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_28:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if ((v6 & 1) != 0)
    goto LABEL_5;
LABEL_8:
  v12 = (uint64_t *)*((_QWORD *)this + 3);
  v13 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v13;
  v14 = (uint64_t **)((char *)a2 + 24);
  if (v12 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_14;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v12 = (uint64_t *)*((_QWORD *)this + 3);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v12[2];
  result = *(__n128 *)v12;
  v17 = v15[2];
  *(_OWORD *)v12 = *(_OWORD *)v15;
  v12[2] = v17;
  *(__n128 *)v15 = result;
  v15[2] = v16;
LABEL_14:
  v18 = (uint64_t *)*((_QWORD *)this + 4);
  v19 = (uint64_t **)((char *)a2 + 32);
  if (v18 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v19 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_20;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 4, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v18 = (uint64_t *)*((_QWORD *)this + 4);
  }
  v20 = *v19;
  if (*v19 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 4, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v20 = *v19;
  }
  v21 = v18[2];
  result = *(__n128 *)v18;
  v22 = v20[2];
  *(_OWORD *)v18 = *(_OWORD *)v20;
  v18[2] = v22;
  *(__n128 *)v20 = result;
  v20[2] = v21;
LABEL_20:
  v25 = (uint64_t *)*((_QWORD *)this + 5);
  v23 = (std::string **)((char *)this + 40);
  v24 = (std::string *)v25;
  v26 = (std::string **)((char *)a2 + 40);
  if (v25 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v26 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      return result;
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v23, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v24 = *v23;
  }
  v27 = *v26;
  if (*v26 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v26, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v27 = *v26;
  }
  v28 = v24->__r_.__value_.__r.__words[2];
  result = *(__n128 *)&v24->__r_.__value_.__l.__data_;
  v29 = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24->__r_.__value_.__l.__data_ = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v24->__r_.__value_.__r.__words[2] = v29;
  *(__n128 *)&v27->__r_.__value_.__l.__data_ = result;
  v27->__r_.__value_.__r.__words[2] = v28;
  return result;
}

siri::dialogengine::CatBinary::vcat_item_repetition *siri::dialogengine::CatBinary::vcat_item_repetition::vcat_item_repetition(siri::dialogengine::CatBinary::vcat_item_repetition *this, const siri::dialogengine::CatBinary::vcat_item_repetition *a2)
{
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;

  *(_QWORD *)this = &off_1E792F8E8;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 5) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_DWORD *)a2 + 4);
  if ((v5 & 1) != 0)
  {
    v6 = (uint64_t *)*((_QWORD *)a2 + 3);
    if (v6 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, (uint64_t)v6);
      v5 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 4) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v5 & 2) != 0)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 4);
    if (v7 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 4, (uint64_t)v7);
      v5 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v5 & 4) != 0)
  {
    v8 = (uint64_t *)*((_QWORD *)a2 + 5);
    if (v8 != &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 5, (uint64_t)v8);
  }
  return this;
}

void sub_1BF965414(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::CatBinary::vcat_item_repetition::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *siri::dialogengine::CatBinary::vcat_item_repetition::default_instance(siri::dialogengine::CatBinary::vcat_item_repetition *this)
{
  if (atomic_load(scc_info_vcat_item_repetition_CatBinary_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_vcat_item_repetition_CatBinary_2eproto);
  return &siri::dialogengine::CatBinary::_vcat_item_repetition_default_instance_;
}

void siri::dialogengine::CatBinary::vcat_item_repetition::CopyFrom(siri::dialogengine::CatBinary::vcat_item_repetition *this, const siri::dialogengine::CatBinary::vcat_item_repetition *a2)
{
  if (a2 != this)
  {
    siri::dialogengine::CatBinary::vcat_item_repetition::Clear(this);
    siri::dialogengine::CatBinary::vcat_item_repetition::MergeFrom(this, a2);
  }
}

__n128 siri::dialogengine::CatBinary::vcat_item_repetition::InternalSwap(siri::dialogengine::CatBinary::vcat_item_repetition *this, siri::dialogengine::CatBinary::vcat_item_repetition *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  __n128 *v8;
  unint64_t v9;
  __n128 result;
  unint64_t v11;
  uint64_t *v12;
  int v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  std::string **v23;
  std::string *v24;
  uint64_t *v25;
  std::string **v26;
  std::string *v27;
  std::string::size_type v28;
  std::string::size_type v29;
  unint64_t v30;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v30;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
      goto LABEL_28;
    }
LABEL_5:
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 1) != 0)
    {
LABEL_6:
      v8 = (__n128 *)(v4 & 0xFFFFFFFFFFFFFFFELL);
LABEL_7:
      v9 = v8[1].n128_u64[0];
      result = *v8;
      v11 = *(_QWORD *)(v7 + 16);
      *v8 = *(__n128 *)v7;
      v8[1].n128_u64[0] = v11;
      *(__n128 *)v7 = result;
      *(_QWORD *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_28:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if ((v6 & 1) != 0)
    goto LABEL_5;
LABEL_8:
  v12 = (uint64_t *)*((_QWORD *)this + 3);
  v13 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v13;
  v14 = (uint64_t **)((char *)a2 + 24);
  if (v12 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_14;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v12 = (uint64_t *)*((_QWORD *)this + 3);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v12[2];
  result = *(__n128 *)v12;
  v17 = v15[2];
  *(_OWORD *)v12 = *(_OWORD *)v15;
  v12[2] = v17;
  *(__n128 *)v15 = result;
  v15[2] = v16;
LABEL_14:
  v18 = (uint64_t *)*((_QWORD *)this + 4);
  v19 = (uint64_t **)((char *)a2 + 32);
  if (v18 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v19 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_20;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 4, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v18 = (uint64_t *)*((_QWORD *)this + 4);
  }
  v20 = *v19;
  if (*v19 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 4, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v20 = *v19;
  }
  v21 = v18[2];
  result = *(__n128 *)v18;
  v22 = v20[2];
  *(_OWORD *)v18 = *(_OWORD *)v20;
  v18[2] = v22;
  *(__n128 *)v20 = result;
  v20[2] = v21;
LABEL_20:
  v25 = (uint64_t *)*((_QWORD *)this + 5);
  v23 = (std::string **)((char *)this + 40);
  v24 = (std::string *)v25;
  v26 = (std::string **)((char *)a2 + 40);
  if (v25 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v26 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      return result;
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v23, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v24 = *v23;
  }
  v27 = *v26;
  if (*v26 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v26, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v27 = *v26;
  }
  v28 = v24->__r_.__value_.__r.__words[2];
  result = *(__n128 *)&v24->__r_.__value_.__l.__data_;
  v29 = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24->__r_.__value_.__l.__data_ = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v24->__r_.__value_.__r.__words[2] = v29;
  *(__n128 *)&v27->__r_.__value_.__l.__data_ = result;
  v27->__r_.__value_.__r.__words[2] = v28;
  return result;
}

uint64_t siri::dialogengine::CatBinary::vcat_item::_Internal::value_expression(siri::dialogengine::CatBinary::vcat_item::_Internal *this, const siri::dialogengine::CatBinary::vcat_item *a2)
{
  return *((_QWORD *)this + 5);
}

uint64_t siri::dialogengine::CatBinary::vcat_item::_Internal::list_repetition(siri::dialogengine::CatBinary::vcat_item::_Internal *this, const siri::dialogengine::CatBinary::vcat_item *a2)
{
  return *((_QWORD *)this + 5);
}

uint64_t siri::dialogengine::CatBinary::vcat_item::set_allocated_value_expression(siri::dialogengine::CatBinary::vcat_item *this, siri::dialogengine::CatBinary::vcat_item_expression *a2)
{
  uint64_t result;

  result = siri::dialogengine::CatBinary::vcat_item::clear_item((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 12) = 2;
    *((_QWORD *)this + 5) = a2;
  }
  return result;
}

uint64_t siri::dialogengine::CatBinary::vcat_item::set_allocated_list_repetition(siri::dialogengine::CatBinary::vcat_item *this, siri::dialogengine::CatBinary::vcat_item_repetition *a2)
{
  uint64_t result;

  result = siri::dialogengine::CatBinary::vcat_item::clear_item((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 12) = 3;
    *((_QWORD *)this + 5) = a2;
  }
  return result;
}

siri::dialogengine::CatBinary::vcat_item *siri::dialogengine::CatBinary::vcat_item::vcat_item(siri::dialogengine::CatBinary::vcat_item *this, const siri::dialogengine::CatBinary::vcat_item *a2)
{
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t *v7;
  int v8;
  siri::dialogengine::CatBinary::vcat_item_expression *v9;
  const siri::dialogengine::CatBinary::vcat_item_expression *v10;
  siri::dialogengine::CatBinary::vcat_item_repetition *v11;
  const siri::dialogengine::CatBinary::vcat_item_repetition *v12;
  uint64_t v13;

  *(_QWORD *)this = &off_1E792F978;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 5) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_DWORD *)a2 + 4);
  if ((v5 & 1) != 0)
  {
    v6 = (uint64_t *)*((_QWORD *)a2 + 3);
    if (v6 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, (uint64_t)v6);
      v5 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 4) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v5 & 2) != 0)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 4);
    if (v7 != &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 4, (uint64_t)v7);
  }
  *((_DWORD *)this + 12) = 0;
  v8 = *((_DWORD *)a2 + 12);
  switch(v8)
  {
    case 2:
      siri::dialogengine::CatBinary::vcat_item::clear_item((uint64_t)this);
      *((_DWORD *)this + 12) = 2;
      v9 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::vcat_item_expression>(0);
      *((_QWORD *)this + 5) = v9;
      if (*((_DWORD *)a2 + 12) == 2)
        v10 = (const siri::dialogengine::CatBinary::vcat_item_expression *)*((_QWORD *)a2 + 5);
      else
        v10 = (const siri::dialogengine::CatBinary::vcat_item_expression *)&siri::dialogengine::CatBinary::_vcat_item_expression_default_instance_;
      siri::dialogengine::CatBinary::vcat_item_expression::MergeFrom(v9, v10);
      break;
    case 3:
      siri::dialogengine::CatBinary::vcat_item::clear_item((uint64_t)this);
      *((_DWORD *)this + 12) = 3;
      v11 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::vcat_item_repetition>(0);
      *((_QWORD *)this + 5) = v11;
      if (*((_DWORD *)a2 + 12) == 3)
        v12 = (const siri::dialogengine::CatBinary::vcat_item_repetition *)*((_QWORD *)a2 + 5);
      else
        v12 = (const siri::dialogengine::CatBinary::vcat_item_repetition *)&siri::dialogengine::CatBinary::_vcat_item_repetition_default_instance_;
      siri::dialogengine::CatBinary::vcat_item_repetition::MergeFrom(v11, v12);
      break;
    case 5:
    case 6:
      v13 = *((_QWORD *)a2 + 5);
      siri::dialogengine::CatBinary::vcat_item::clear_item((uint64_t)this);
      *((_QWORD *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
      *((_DWORD *)this + 12) = v8;
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 5, v13);
      break;
    default:
      return this;
  }
  return this;
}

void sub_1BF9658CC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::CatBinary::vcat_item::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *siri::dialogengine::CatBinary::vcat_item::default_instance(siri::dialogengine::CatBinary::vcat_item *this)
{
  if (atomic_load(scc_info_vcat_item_CatBinary_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_vcat_item_CatBinary_2eproto);
  return &siri::dialogengine::CatBinary::_vcat_item_default_instance_;
}

void siri::dialogengine::CatBinary::vcat_item::CopyFrom(siri::dialogengine::CatBinary::vcat_item *this, const siri::dialogengine::CatBinary::vcat_item *a2)
{
  if (a2 != this)
  {
    siri::dialogengine::CatBinary::vcat_item::Clear(this);
    siri::dialogengine::CatBinary::vcat_item::MergeFrom(this, a2);
  }
}

void siri::dialogengine::CatBinary::vcat_item::InternalSwap(siri::dialogengine::CatBinary::vcat_item *this, siri::dialogengine::CatBinary::vcat_item *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v26;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
      goto LABEL_22;
    }
LABEL_5:
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 1) != 0)
    {
LABEL_6:
      v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
      v9 = *(_QWORD *)(v8 + 16);
      v10 = *(_OWORD *)v8;
      v11 = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v8 = *(_OWORD *)v7;
      *(_QWORD *)(v8 + 16) = v11;
      *(_OWORD *)v7 = v10;
      *(_QWORD *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_22:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if ((v6 & 1) != 0)
    goto LABEL_5;
LABEL_8:
  v12 = (uint64_t *)*((_QWORD *)this + 3);
  v13 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v13;
  v14 = (uint64_t **)((char *)a2 + 24);
  if (v12 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_14;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v12 = (uint64_t *)*((_QWORD *)this + 3);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v12[2];
  v17 = *(_OWORD *)v12;
  v18 = v15[2];
  *(_OWORD *)v12 = *(_OWORD *)v15;
  v12[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_14:
  v19 = (uint64_t *)*((_QWORD *)this + 4);
  v20 = (uint64_t **)((char *)a2 + 32);
  if (v19 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_20;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 4, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v19 = (uint64_t *)*((_QWORD *)this + 4);
  }
  v21 = *v20;
  if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 4, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v21 = *v20;
  }
  v22 = v19[2];
  v23 = *(_OWORD *)v19;
  v24 = v21[2];
  *(_OWORD *)v19 = *(_OWORD *)v21;
  v19[2] = v24;
  *(_OWORD *)v21 = v23;
  v21[2] = v22;
LABEL_20:
  v25 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v25;
  LODWORD(v25) = *((_DWORD *)this + 12);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)a2 + 12) = v25;
}

double YAML::ostream_wrapper::ostream_wrapper(std::vector<char> *this, uint64_t a2, const std::vector<char>::value_type *a3)
{
  std::vector<char> *v3;
  double result;
  char v5;

  v5 = 0;
  v3 = std::vector<char>::vector(this, (std::vector<char>::size_type)&v5, a3);
  LOBYTE(v3[2].__end_) = 0;
  result = 0.0;
  *(_OWORD *)&v3[1].__end_cap_.__value_ = 0u;
  *(_OWORD *)&v3[1].__begin_ = 0u;
  return result;
}

{
  std::vector<char> *v3;
  double result;
  char v5;

  v5 = 0;
  v3 = std::vector<char>::vector(this, (std::vector<char>::size_type)&v5, a3);
  LOBYTE(v3[2].__end_) = 0;
  result = 0.0;
  *(_OWORD *)&v3[1].__end_cap_.__value_ = 0u;
  *(_OWORD *)&v3[1].__begin_ = 0u;
  return result;
}

std::vector<char> *__cdecl std::vector<char>::vector(std::vector<char> *this, std::vector<char>::size_type __n, const std::vector<char>::value_type *__x)
{
  char *v5;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  v5 = (char *)operator new(1uLL);
  this->__begin_ = v5;
  this->__end_ = v5;
  this->__end_cap_.__value_ = v5 + 1;
  *v5 = *(_BYTE *)__n;
  this->__end_ = v5 + 1;
  return this;
}

uint64_t YAML::ostream_wrapper::ostream_wrapper(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a2;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_BYTE *)(result + 56) = 0;
  return result;
}

{
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a2;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_BYTE *)(result + 56) = 0;
  return result;
}

void YAML::ostream_wrapper::~ostream_wrapper(YAML::ostream_wrapper *this)
{
  void *v2;

  v2 = *(void **)this;
  if (v2)
  {
    *((_QWORD *)this + 1) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  v2 = *(void **)this;
  if (v2)
  {
    *((_QWORD *)this + 1) = v2;
    operator delete(v2);
  }
}

void YAML::ostream_wrapper::write(std::vector<char> *this, const void **a2)
{
  unint64_t v4;
  size_t v5;
  char v6;
  size_t v7;
  unint64_t v8;
  char *v9;
  size_t v10;
  const void *v11;
  BOOL v12;
  const void *v13;
  unint64_t v14;
  std::vector<char>::pointer begin;
  std::vector<char>::pointer v16;
  unsigned __int8 *v17;
  int v18;
  const void *v19;

  if (this[1].__begin_)
  {
    std::ostream::write();
  }
  else
  {
    v4 = this->__end_ - this->__begin_;
    v5 = *((unsigned __int8 *)a2 + 23);
    v6 = v5;
    v7 = (size_t)a2[1];
    if ((v5 & 0x80u) == 0)
      v8 = *((unsigned __int8 *)a2 + 23);
    else
      v8 = (unint64_t)a2[1];
    v9 = &this[1].__end_[v8 + 1];
    if ((unint64_t)v9 > v4)
    {
      std::vector<char>::__append(this, (std::vector<char>::size_type)&v9[-v4]);
      v5 = *((unsigned __int8 *)a2 + 23);
      v7 = (size_t)a2[1];
      v6 = *((_BYTE *)a2 + 23);
    }
    if (v6 >= 0)
      v10 = v5;
    else
      v10 = v7;
    if (v10)
    {
      if (v6 >= 0)
        v11 = a2;
      else
        v11 = *a2;
      memmove(&this->__begin_[(unint64_t)this[1].__end_], v11, v10);
    }
  }
  v12 = *((char *)a2 + 23) < 0;
  v13 = (const void *)*((unsigned __int8 *)a2 + 23);
  if ((char)v13 < 0)
    v13 = a2[1];
  if (v13)
  {
    v14 = 0;
    begin = this[2].__begin_;
    v16 = this[1].__end_ + 1;
    do
    {
      if (v12)
        v17 = (unsigned __int8 *)*a2;
      else
        v17 = (unsigned __int8 *)a2;
      v18 = v17[v14];
      this[1].__end_ = &v16[v14];
      this[2].__begin_ = ++begin;
      if (v18 == 10)
      {
        begin = 0;
        ++this[1].__end_cap_.__value_;
        this[2].__begin_ = 0;
        LOBYTE(this[2].__end_) = 0;
      }
      ++v14;
      v12 = *((char *)a2 + 23) < 0;
      v19 = (const void *)*((unsigned __int8 *)a2 + 23);
      if ((char)v19 < 0)
        v19 = a2[1];
    }
    while (v14 < (unint64_t)v19);
  }
}

void std::vector<char>::__append(std::vector<char> *this, std::vector<char>::size_type __n)
{
  char *value;
  char *end;
  std::vector<char>::pointer begin;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;

  end = this->__end_;
  value = this->__end_cap_.__value_;
  if (value - end >= __n)
  {
    if (__n)
    {
      bzero(this->__end_, __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    begin = this->__begin_;
    v7 = end - this->__begin_;
    v8 = v7 + __n;
    if ((uint64_t)(v7 + __n) < 0)
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    v9 = value - begin;
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = (char *)operator new(v10);
    else
      v11 = 0;
    v12 = &v11[v7];
    v13 = &v11[v10];
    bzero(v12, __n);
    if (end == begin)
    {
      v11 = v12;
    }
    else
    {
      v14 = &end[~(unint64_t)begin];
      do
      {
        v15 = *--end;
        (v14--)[(_QWORD)v11] = v15;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v11;
    this->__end_ = &v12[__n];
    this->__end_cap_.__value_ = v13;
    if (end)
      operator delete(end);
  }
}

uint64_t YAML::ostream_wrapper::update_pos(uint64_t this, int a2)
{
  ++*(_QWORD *)(this + 32);
  ++*(_QWORD *)(this + 48);
  if (a2 == 10)
  {
    ++*(_QWORD *)(this + 40);
    *(_QWORD *)(this + 48) = 0;
    *(_BYTE *)(this + 56) = 0;
  }
  return this;
}

void YAML::ostream_wrapper::write(std::vector<char> *this, const char *__src, size_t __len)
{
  size_t v3;
  unint64_t v6;
  char *v7;
  std::vector<char>::pointer begin;
  char *v9;
  int v10;

  v3 = __len;
  if (this[1].__begin_)
  {
    std::ostream::write();
    if (!v3)
      return;
    goto LABEL_8;
  }
  v6 = this->__end_ - this->__begin_;
  v7 = &this[1].__end_[__len + 1];
  if ((unint64_t)v7 > v6)
    std::vector<char>::__append(this, (std::vector<char>::size_type)&v7[-v6]);
  if (v3)
  {
    memmove(&this->__begin_[(unint64_t)this[1].__end_], __src, v3);
LABEL_8:
    begin = this[2].__begin_;
    v9 = this[1].__end_ + 1;
    do
    {
      v10 = *(unsigned __int8 *)__src++;
      this[1].__end_ = v9;
      this[2].__begin_ = ++begin;
      if (v10 == 10)
      {
        begin = 0;
        ++this[1].__end_cap_.__value_;
        this[2].__begin_ = 0;
        LOBYTE(this[2].__end_) = 0;
      }
      ++v9;
      --v3;
    }
    while (v3);
  }
}

_QWORD *siri::dialogengine::ExecutionState::ExecutionState(_QWORD *this)
{
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  return this;
}

{
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  return this;
}

BOOL siri::dialogengine::ExecutionState::IsInfiniteLoop(uint64_t *a1, __int128 *a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = a1[1];
  if (v3 >= a1[2])
  {
    v4 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a1, a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a1, a2);
    v4 = v3 + 24;
  }
  a1[1] = v4;
  return 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) > 0x64;
}

BOOL siri::dialogengine::DialogFilterAdapter::empty(siri::dialogengine::DialogFilterAdapter *this)
{
  return (*(uint64_t (**)(siri::dialogengine::DialogFilterAdapter *))(*(_QWORD *)this + 16))(this) == 0;
}

std::string *siri::dialogengine::DialogDensity::toString(siri::dialogengine::DialogDensity *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::FormatDensity(this, (uint64_t)a2, 0);
}

std::string *siri::dialogengine::FormatDensity(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  void *RequiredNumberParameter;
  void *v7;
  long double v8;
  char *OptionalStringParameter;
  char *v10;
  std::string *v11;
  void *v12;
  const char *v13;
  int v14;
  int data;
  siri::dialogengine *v16;
  double v17;
  double v18;
  unsigned int v19;
  const char *v20;
  char *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  void *size;
  int v27;
  std::string::size_type v28;
  std::string *p_p;
  std::string *v30;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  const void **v42[3];
  void *v43[2];
  char v44;
  std::string v45;
  char v46;
  double v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  void *v51[2];
  void *v52[2];
  __int128 v53;
  void *v54[2];
  void *v55[2];
  __int128 v56;
  std::string v57;
  std::string __p;
  std::string v59;
  void *v60;
  void *v61[2];
  uint64_t v62;
  char v63;
  std::string v64;
  std::string v65;
  std::string v66;
  __int128 v67;
  uint64_t v68[3];
  __int128 v69;
  uint64_t v70[3];
  __int128 v71;
  uint64_t v72[3];
  __int128 v73;
  uint64_t v74[3];
  __int128 v75;
  uint64_t v76[3];
  __int128 v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&__p, "value");
  RequiredNumberParameter = siri::dialogengine::GetRequiredNumberParameter((const void **)&__p.__r_.__value_.__l.__data_, a2);
  v7 = RequiredNumberParameter;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v7)
    {
LABEL_3:
      v8 = *((double *)v7 + 9);
      std::string::basic_string[abi:ne180100]<0>(&__p, "units");
      OptionalStringParameter = (char *)siri::dialogengine::GetOptionalStringParameter((const void **)&__p.__r_.__value_.__l.__data_, a2);
      v10 = OptionalStringParameter;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v10)
        {
LABEL_5:
          if (v10[95] < 0)
            std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v10 + 9), *((_QWORD *)v10 + 10));
          else
            __p = *(std::string *)(v10 + 3);
LABEL_15:
          v14 = siri::dialogengine::ParseUnitLabel<siri::dialogengine::Density>((uint64_t)&__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v56 = 0u;
          memset(&v57, 0, sizeof(v57));
          *(_OWORD *)v54 = 0u;
          *(_OWORD *)v55 = 0u;
          *(_OWORD *)v52 = 0u;
          v53 = 0u;
          v50 = 0u;
          *(_OWORD *)v51 = 0u;
          v48 = 0u;
          v49 = 0u;
          if (v14 == -1)
          {
            if (v10)
            {
              if (*(char *)(a2 + 31) < 0)
                std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
              else
                __p = *(std::string *)(a2 + 8);
              v27 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
              v28 = __p.__r_.__value_.__r.__words[0];
              if (v10[95] < 0)
                std::string::__init_copy_ctor_external(&v45, *((const std::string::value_type **)v10 + 9), *((_QWORD *)v10 + 10));
              else
                v45 = *(std::string *)(v10 + 3);
              p_p = &__p;
              if (v27 < 0)
                p_p = (std::string *)v28;
              v30 = &v45;
              if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v30 = (std::string *)v45.__r_.__value_.__r.__words[0];
              siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Unrecognized 'units' input for variable '%s' of type 'dialog.Density': %s", v13, p_p, v30);
              if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v45.__r_.__value_.__l.__data_);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
            }
            std::to_string(&__p, v8);
            siri::dialogengine::SpeakableString::SetString((uint64_t)&v48, (uint64_t)&__p);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              size = (void *)__p.__r_.__value_.__r.__words[0];
              goto LABEL_76;
            }
          }
          else
          {
            siri::dialogengine::GetConvertedUnitInfo<siri::dialogengine::Density>(v8, (uint64_t)a1, a2, (uint64_t)&v45);
            if (LODWORD(v45.__r_.__value_.__l.__data_) == -2)
            {
              data = v14;
            }
            else
            {
              v8 = v47;
              data = (int)v45.__r_.__value_.__l.__data_;
            }
            if (v8 == 0.0)
              v16 = 0;
            else
              v16 = (siri::dialogengine *)(fmod(v8, 1000000.0) == 0.0);
            v17 = round(v8);
            v18 = fmod(v8, 1.0);
            if (fabs(v17) >= 1000.0)
              v19 = a3;
            else
              v19 = a3 & 0xFFFFFFF9;
            v20 = "unit#unknownDensityValue";
            if (!data)
              v20 = "unit#gramPerCubicCentimetreValue";
            if (data == 1)
              v21 = "unit#kilogramPerCubicMetreValue";
            else
              v21 = (char *)v20;
            std::string::basic_string[abi:ne180100]<0>(v43, v21);
            siri::dialogengine::CreateJSONBoolVal(0, (uint64_t *)&v41);
            std::string::basic_string[abi:ne180100]<0>(&__p, "abbreviated");
            *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v41;
            v41 = 0uLL;
            siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)(v19 & 1), (uint64_t *)&v40);
            std::string::basic_string[abi:ne180100]<0>(&v59.__r_.__value_.__r.__words[2], "approximate");
            *(_OWORD *)v61 = v40;
            v40 = 0uLL;
            siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)((v19 >> 1) & 1), (uint64_t *)&v39);
            std::string::basic_string[abi:ne180100]<0>(&v62, "compactDecimalLong");
            *(_OWORD *)&v64.__r_.__value_.__r.__words[1] = v39;
            v39 = 0uLL;
            siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)((v19 >> 2) & 1), (uint64_t *)&v38);
            std::string::basic_string[abi:ne180100]<0>(&v65, "compactDecimalShort");
            *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v38;
            v38 = 0uLL;
            siri::dialogengine::CreateJSONBoolVal(v16, (uint64_t *)&v37);
            std::string::basic_string[abi:ne180100]<0>(&v66.__r_.__value_.__r.__words[2], "numberIsMultipleOfMillion");
            v67 = v37;
            v37 = 0uLL;
            siri::dialogengine::CreateJSONDoubleVal(v8, (uint64_t *)&v36);
            std::string::basic_string[abi:ne180100]<0>(v68, "number");
            v69 = v36;
            v36 = 0uLL;
            siri::dialogengine::CreateJSONDoubleVal(v17, (uint64_t *)&v35);
            std::string::basic_string[abi:ne180100]<0>(v70, "numberRounded");
            v71 = v35;
            v35 = 0uLL;
            siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)1, (uint64_t *)&v34);
            std::string::basic_string[abi:ne180100]<0>(v72, "primaryContent");
            v73 = v34;
            v34 = 0uLL;
            siri::dialogengine::CreateJSONDoubleVal(v18 * 100.0, (uint64_t *)&v33);
            std::string::basic_string[abi:ne180100]<0>(v74, "remainders");
            v75 = v33;
            v33 = 0uLL;
            siri::dialogengine::CreateJSONDoubleVal(v8 - v18, (uint64_t *)&v32);
            std::string::basic_string[abi:ne180100]<0>(v76, "wholeUnits");
            v77 = v32;
            v32 = 0uLL;
            std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100]((uint64_t)v42, (const void **)&__p.__r_.__value_.__l.__data_, 10);
            v22 = 50;
            do
            {
              std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v57.__r_.__value_.__r.__words[v22 + 2]);
              if (SHIBYTE(v57.__r_.__value_.__r.__words[v22 + 1]) < 0)
                operator delete(*(void **)((char *)&v56 + v22 * 8 + 8));
              v22 -= 5;
            }
            while (v22 * 8);
            v23 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
            if (*((_QWORD *)&v41 + 1))
            {
              v24 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
              do
                v25 = __ldaxr(v24);
              while (__stlxr(v25 - 1, v24));
              if (!v25)
              {
                ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
                std::__shared_weak_count::__release_weak(v23);
              }
            }
            siri::dialogengine::ExecuteSharedCat(a1, (uint64_t)v43, v42, (uint64_t)&__p);
            std::string::operator=((std::string *)&v48, &__p);
            std::string::operator=((std::string *)((char *)&v49 + 8), &v59);
            std::string::operator=((std::string *)v51, (const std::string *)&v60);
            std::string::operator=((std::string *)&v52[1], (const std::string *)&v61[1]);
            std::string::operator=((std::string *)v54, &v64);
            std::string::operator=((std::string *)&v55[1], &v65);
            std::string::operator=(&v57, &v66);
            if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v66.__r_.__value_.__l.__data_);
            if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v65.__r_.__value_.__l.__data_);
            if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v64.__r_.__value_.__l.__data_);
            if (v63 < 0)
              operator delete(v61[1]);
            if (SHIBYTE(v61[0]) < 0)
              operator delete(v60);
            if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v59.__r_.__value_.__l.__data_);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(v42[1]);
            if (v44 < 0)
              operator delete(v43[0]);
            if (v46 < 0)
            {
              size = (void *)v45.__r_.__value_.__l.__size_;
LABEL_76:
              operator delete(size);
            }
          }
          v11 = (std::string *)operator new();
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          siri::dialogengine::VariableString::VariableString(v11, &__p, (const siri::dialogengine::SpeakableString *)&v48);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v57.__r_.__value_.__l.__data_);
          if (SHIBYTE(v56) < 0)
            operator delete(v55[1]);
          if (SHIBYTE(v55[0]) < 0)
            operator delete(v54[0]);
          if (SHIBYTE(v53) < 0)
            operator delete(v52[1]);
          if (SHIBYTE(v52[0]) < 0)
            operator delete(v51[0]);
          if (SHIBYTE(v50) < 0)
            operator delete(*((void **)&v49 + 1));
          if (SBYTE7(v49) < 0)
          {
            v12 = (void *)v48;
            goto LABEL_93;
          }
          return v11;
        }
      }
      else if (OptionalStringParameter)
      {
        goto LABEL_5;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      goto LABEL_15;
    }
  }
  else if (RequiredNumberParameter)
  {
    goto LABEL_3;
  }
  v11 = (std::string *)operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::basic_string[abi:ne180100]<0>(&v48, "");
  siri::dialogengine::VariableString::VariableString((uint64_t)v11, &__p, (uint64_t)&v48);
  if (SBYTE7(v49) < 0)
    operator delete((void *)v48);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    v12 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_93:
    operator delete(v12);
  }
  return v11;
}

void sub_1BF966814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a70;

  if (a70 < 0)
    operator delete(__p);
  siri::dialogengine::SpeakableString::~SpeakableString(&a43);
  _Unwind_Resume(a1);
}

std::string *siri::dialogengine::DialogDensity::approximate(siri::dialogengine::DialogDensity *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::FormatDensity(this, (uint64_t)a2, 1u);
}

std::string *siri::dialogengine::DialogDensity::compactDecimalLong(siri::dialogengine::DialogDensity *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::FormatDensity(this, (uint64_t)a2, 2u);
}

std::string *siri::dialogengine::DialogDensity::compactDecimalShort(siri::dialogengine::DialogDensity *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::FormatDensity(this, (uint64_t)a2, 4u);
}

uint64_t siri::dialogengine::DialogDensity::units(siri::dialogengine::DialogDensity *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v3;
  std::string __p;
  _BYTE v6[8];
  void *v7;
  char v8;

  siri::dialogengine::GetConvertedUnitInfo<siri::dialogengine::Density>(0.0, (uint64_t)this, (uint64_t)a2, (uint64_t)v6);
  v3 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::dialogengine::VariableString::VariableString(v3, &__p, (uint64_t)&v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v8 < 0)
    operator delete(v7);
  return v3;
}

void sub_1BF966B54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a14 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8D890](v21, 0x10B3C40D3060B95);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogDensity::value(siri::dialogengine::DialogDensity *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  double *RequiredNumberParameter;
  double *v6;
  uint64_t v7;
  void *size;
  std::string __p;
  std::string v11;
  char v12;
  double v13;

  std::string::basic_string[abi:ne180100]<0>(&v11, "value");
  RequiredNumberParameter = (double *)siri::dialogengine::GetRequiredNumberParameter((const void **)&v11.__r_.__value_.__l.__data_, (uint64_t)a2);
  v6 = RequiredNumberParameter;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v11.__r_.__value_.__l.__data_);
    if (v6)
    {
LABEL_3:
      siri::dialogengine::GetConvertedUnitInfo<siri::dialogengine::Density>(round(v6[9]), (uint64_t)this, (uint64_t)a2, (uint64_t)&v11);
      v7 = operator new();
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      siri::dialogengine::VariableNumber::VariableNumber(v7, &__p, v13);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v12 < 0)
      {
        size = (void *)v11.__r_.__value_.__l.__size_;
LABEL_10:
        operator delete(size);
        return v7;
      }
      return v7;
    }
  }
  else if (RequiredNumberParameter)
  {
    goto LABEL_3;
  }
  v7 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&v11, "");
  siri::dialogengine::VariableNumber::VariableNumber(v7, &v11, 0.0);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
  {
    size = (void *)v11.__r_.__value_.__r.__words[0];
    goto LABEL_10;
  }
  return v7;
}

void sub_1BF966CD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, void *a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  if (a20 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8D890](v24, 0x10B3C4030AE2ACELL);
  _Unwind_Resume(a1);
}

void siri::dialogengine::SpeakableStringFromMorphun(uint64_t a1@<X8>)
{
  std::string v2;
  std::string v3;

  morphun::util::StringUtils::to_string();
  morphun::util::StringUtils::to_string();
  siri::dialogengine::SpeakableString::SpeakableString(a1, &v3, &v2);
}

void sub_1BF966DB0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  void *v24;
  char v25;
  void *v26;
  char v27;

  if (v25 < 0)
    operator delete(v24);
  if (v27 < 0)
    operator delete(v26);
}

void sub_1BF966DE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::SpeakableStringFromMorphun(siri::dialogengine *this@<X0>, const morphun::dialog::SpeakableString *a2@<X1>, uint64_t a3@<X8>)
{
  (*(void (**)(siri::dialogengine *, const morphun::dialog::SpeakableString *))(*(_QWORD *)this + 32))(this, a2);
  (*(void (**)(siri::dialogengine *))(*(_QWORD *)this + 40))(this);
  siri::dialogengine::SpeakableStringFromMorphun(a3);
}

void siri::dialogengine::SpeakableStringToMorphun(siri::dialogengine *this, const siri::dialogengine::SpeakableString *a2)
{
  std::string __p;
  std::string v4;
  void *v5;
  char v6;

  if (*((char *)this + 23) < 0)
    std::string::__init_copy_ctor_external(&v4, *(const std::string::value_type **)this, *((_QWORD *)this + 1));
  else
    v4 = *(std::string *)this;
  morphun::util::StringUtils::to_u16string();
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (*((char *)this + 47) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 3), *((_QWORD *)this + 4));
  else
    __p = *(std::string *)((_BYTE *)this + 1);
  morphun::util::StringUtils::to_u16string();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  morphun::dialog::SpeakableString::SpeakableString();
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (v6 < 0)
    operator delete(v5);
}

void sub_1BF966F4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::InflectConcept(siri::dialogengine::Context *a1@<X0>, const char *a2@<X1>, __int128 **a3@<X2>, int a4@<W3>, std::string *a5@<X8>)
{
  _QWORD *p_s;
  const std::string::value_type *v8;
  std::string::size_type *v9;
  void *v10;
  uint64_t v11;
  char v12;
  std::string::value_type *__s;
  uint64_t v14;
  char v15;
  void *v16;
  char v17;
  void *v18;
  char v19;
  void *v20;
  char v21;
  void *v22;
  char v23;
  void *__p;
  char v25;

  siri::dialogengine::InflectConcept(a1, a2, a3, (uint64_t)&v10);
  if (!a4)
  {
    if (v15 < 0)
    {
      v8 = __s;
      v9 = (std::string::size_type *)&v14;
      goto LABEL_8;
    }
    p_s = &__s;
LABEL_6:
    *(_OWORD *)&a5->__r_.__value_.__l.__data_ = *(_OWORD *)p_s;
    a5->__r_.__value_.__r.__words[2] = p_s[2];
    goto LABEL_9;
  }
  p_s = &v10;
  if ((v12 & 0x80000000) == 0)
    goto LABEL_6;
  v8 = (const std::string::value_type *)v10;
  v9 = (std::string::size_type *)&v11;
LABEL_8:
  std::string::__init_copy_ctor_external(a5, v8, *v9);
LABEL_9:
  if (v25 < 0)
    operator delete(__p);
  if (v23 < 0)
    operator delete(v22);
  if (v21 < 0)
    operator delete(v20);
  if (v19 < 0)
    operator delete(v18);
  if (v17 < 0)
    operator delete(v16);
  if (v15 < 0)
    operator delete(__s);
  if (v12 < 0)
    operator delete(v10);
}

void sub_1BF9670A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  siri::dialogengine::SpeakableString::~SpeakableString((void **)va);
  _Unwind_Resume(a1);
}

void siri::dialogengine::InflectConcept(siri::dialogengine::Context *this@<X0>, const char *a2@<X1>, __int128 **a3@<X2>, uint64_t a4@<X8>)
{
  const char *v7;
  unint64_t v8;
  __int128 *v9;
  __int128 *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  int GrammarFeature;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  uint64_t Feature;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  std::string::size_type size;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  std::string v39;
  std::string v40;
  std::string v41;
  std::string v42;
  std::string v43;
  void *__p[2];
  std::string::size_type v45;
  std::string v46;
  std::string v47;
  char v48;
  void *v49[2];
  unsigned __int8 v50;

  if (this)
    siri::dialogengine::Context::GetLocale(this, a2, (uint64_t)v49);
  else
    std::string::basic_string[abi:ne180100]<0>(v49, "");
  v8 = v50;
  if ((v50 & 0x80u) != 0)
    v8 = (unint64_t)v49[1];
  if (!v8)
    siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"InflectConcept has empty locale", v7);
  if (!(*(uint64_t (**)(const char *))(*(_QWORD *)a2 + 40))(a2))
    goto LABEL_80;
  v10 = *a3;
  v9 = a3[1];
  if (*a3 == v9)
    goto LABEL_80;
  v11 = 0;
  do
  {
    if (*((char *)v10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v46, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
    }
    else
    {
      v12 = *v10;
      v46.__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 2);
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v12;
    }
    if (*((char *)v10 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(&v47, *((const std::string::value_type **)v10 + 3), *((_QWORD *)v10 + 4));
    }
    else
    {
      v13 = *(__int128 *)((char *)v10 + 24);
      v47.__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 5);
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v13;
    }
    v48 = *((_BYTE *)v10 + 48);
    GrammarFeature = siri::dialogengine::SemanticFeatureConstraint::GetGrammarFeature(&v46, (uint64_t)v49);
    if (GrammarFeature == 2)
    {
      if (v11)
      {
        morphun::util::StringUtils::to_u16string();
        morphun::util::StringUtils::to_string();
        v18 = std::string::insert(&v42, 0, "Can only specify a single grammar feature for inflection. Ignoring '");
        v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
        v43.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v19;
        v18->__r_.__value_.__l.__size_ = 0;
        v18->__r_.__value_.__r.__words[2] = 0;
        v18->__r_.__value_.__r.__words[0] = 0;
        v20 = std::string::append(&v43, "'");
        v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
        v45 = v20->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v21;
        v20->__r_.__value_.__l.__size_ = 0;
        v20->__r_.__value_.__r.__words[2] = 0;
        v20->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 3u);
        if (SHIBYTE(v45) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v43.__r_.__value_.__l.__data_);
        if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v42.__r_.__value_.__l.__data_);
        if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        {
          v17 = (void *)v41.__r_.__value_.__r.__words[0];
LABEL_63:
          operator delete(v17);
        }
      }
      else
      {
        morphun::util::StringUtils::to_u16string();
        Feature = morphun::dialog::SemanticFeatureModel::getFeature();
        v11 = Feature;
        if (SHIBYTE(v45) < 0)
        {
          operator delete(__p[0]);
          if (v11)
            goto LABEL_64;
        }
        else if (Feature)
        {
          goto LABEL_64;
        }
        if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v42, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
        else
          v42 = v46;
        v33 = std::string::insert(&v42, 0, "Unable to get semantic feature from model: '");
        v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
        v43.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v34;
        v33->__r_.__value_.__l.__size_ = 0;
        v33->__r_.__value_.__r.__words[2] = 0;
        v33->__r_.__value_.__r.__words[0] = 0;
        v35 = std::string::append(&v43, "'");
        v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        v45 = v35->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 3u);
        if (SHIBYTE(v45) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v43.__r_.__value_.__l.__data_);
        if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v42.__r_.__value_.__l.__data_);
        v11 = 0;
      }
    }
    else
    {
      if (GrammarFeature != 1)
        goto LABEL_64;
      morphun::util::StringUtils::to_u16string();
      v15 = morphun::dialog::SemanticFeatureModel::getFeature();
      v16 = v15;
      if (SHIBYTE(v45) < 0)
      {
        operator delete(__p[0]);
        if (v16)
        {
LABEL_21:
          morphun::util::StringUtils::to_u16string();
          (*(void (**)(const char *, uint64_t, void **))(*(_QWORD *)a2 + 64))(a2, v16, __p);
          if ((SHIBYTE(v45) & 0x80000000) == 0)
            goto LABEL_64;
          v17 = __p[0];
          goto LABEL_63;
        }
      }
      else if (v15)
      {
        goto LABEL_21;
      }
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v40, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
      else
        v40 = v46;
      v23 = std::string::insert(&v40, 0, "Unable to apply feature constraint for inflection. Ignoring '");
      v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v41.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      v25 = std::string::append(&v41, "', '");
      v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v42.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v39, v47.__r_.__value_.__l.__data_, v47.__r_.__value_.__l.__size_);
      else
        v39 = v47;
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = &v39;
      else
        v27 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        size = v39.__r_.__value_.__l.__size_;
      v29 = std::string::append(&v42, (const std::string::value_type *)v27, size);
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v43.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      v31 = std::string::append(&v43, "'");
      v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      v45 = v31->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 3u);
      if (SHIBYTE(v45) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v43.__r_.__value_.__l.__data_);
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v39.__r_.__value_.__l.__data_);
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v42.__r_.__value_.__l.__data_);
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v41.__r_.__value_.__l.__data_);
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      {
        v17 = (void *)v40.__r_.__value_.__r.__words[0];
        goto LABEL_63;
      }
    }
LABEL_64:
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v47.__r_.__value_.__l.__data_);
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v46.__r_.__value_.__l.__data_);
    v10 = (__int128 *)((char *)v10 + 56);
  }
  while (v10 != v9);
  if (v11)
  {
    v37 = (*(uint64_t (**)(const char *, uint64_t))(*(_QWORD *)a2 + 104))(a2, v11);
    goto LABEL_81;
  }
LABEL_80:
  v37 = (*(uint64_t (**)(const char *))(*(_QWORD *)&a2[*(_QWORD *)(*(_QWORD *)a2 - 56)] + 24))(&a2[*(_QWORD *)(*(_QWORD *)a2 - 56)]);
LABEL_81:
  v38 = v37;
  if (v37)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 32))(v37);
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 40))(v38);
    siri::dialogengine::SpeakableStringFromMorphun(a4);
  }
  *(_QWORD *)(a4 + 160) = 0;
  *(_OWORD *)(a4 + 128) = 0u;
  *(_OWORD *)(a4 + 144) = 0u;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  if ((char)v50 < 0)
    operator delete(v49[0]);
}

void sub_1BF967BFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  uint64_t v48;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  __cxa_end_catch();
  if (*(char *)(v48 - 89) < 0)
    operator delete(*(void **)(v48 - 112));
  _Unwind_Resume(a1);
}

void sub_1BF967CBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;

  if (*(char *)(v39 - 153) < 0)
    operator delete(*(void **)(v39 - 176));
  if (a39 < 0)
    operator delete(__p);
  if (a32 < 0)
    operator delete(a27);
  __cxa_end_catch();
  if (*(char *)(v39 - 89) < 0)
    operator delete(*(void **)(v39 - 112));
  _Unwind_Resume(a1);
}

void sub_1BF967D14()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)v0 + 16))(v0);
  JUMPOUT(0x1BF967D28);
}

void siri::dialogengine::InflectPronoun(siri::dialogengine *a1@<X0>, siri::dialogengine::Context *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  const char *v8;
  const char *v9;
  unint64_t v10;
  morphun::dialog::LocalizedCommonConceptFactoryProvider *v11;
  uint64_t DefaultCommonConceptFactoryProvider;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  void *v23[2];
  void *v24[2];
  __int128 v25;
  void *v26[2];
  void *v27[2];
  __int128 v28;
  void *v29[2];
  void *v30[2];
  __int128 v31;
  std::string v32;
  std::string __p;
  std::string v34;
  _BYTE v35[128];
  void *v36[2];
  unsigned __int8 v37;

  siri::dialogengine::RegisterMorphunData(a1, a2);
  if (a1)
    siri::dialogengine::Context::GetLocale(a1, v8, (uint64_t)v36);
  else
    std::string::basic_string[abi:ne180100]<0>(v36, "");
  v10 = v37;
  if ((v37 & 0x80u) != 0)
    v10 = (unint64_t)v36[1];
  if (!v10)
    siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"InflectString has empty locale", v9);
  v23[0] = 0;
  v23[1] = 0;
  v24[0] = 0;
  memset(&v34, 0, sizeof(v34));
  memset(&__p, 0, sizeof(__p));
  v11 = (morphun::dialog::LocalizedCommonConceptFactoryProvider *)morphun::util::ULocale::ULocale();
  DefaultCommonConceptFactoryProvider = morphun::dialog::LocalizedCommonConceptFactoryProvider::getDefaultCommonConceptFactoryProvider(v11);
  v13 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)DefaultCommonConceptFactoryProvider + 24))(DefaultCommonConceptFactoryProvider, v35);
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  if (*(char *)(a3 + 47) >= 0)
    v14 = *(unsigned __int8 *)(a3 + 47);
  else
    v14 = *(_QWORD *)(a3 + 32);
  if (v14 || (*(char *)(a3 + 23) >= 0 ? (v15 = *(unsigned __int8 *)(a3 + 23)) : (v15 = *(_QWORD *)(a3 + 8)), v15))
  {
    if ((*(_BYTE *)(a3 + 23) & 0x80) != 0)
      std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    else
      v34 = *(std::string *)a3;
    morphun::util::StringUtils::to_u16string();
    v16 = (const char *)operator new();
    morphun::dialog::PronounConcept::PronounConcept();
    if (SHIBYTE(v24[0]) < 0)
      operator delete(v23[0]);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
  }
  else
  {
    v16 = (const char *)operator new();
    morphun::dialog::PronounConcept::PronounConcept();
  }
  siri::dialogengine::InflectConcept(a1, v16, (__int128 **)a2, a4);
  v17 = *(unsigned __int8 *)(a4 + 47);
  if ((v17 & 0x80u) != 0)
    v17 = *(_QWORD *)(a4 + 32);
  if (!v17)
  {
    v18 = *(unsigned __int8 *)(a4 + 23);
    if ((v18 & 0x80u) != 0)
      v18 = *(_QWORD *)(a4 + 8);
    if (!v18)
    {
      siri::dialogengine::SemanticFeatureConstraint::ToString((__int128 **)a2, (uint64_t)&__p);
      v19 = std::string::insert(&__p, 0, "Failed to inflect pronoun with constraints '");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v34.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      v21 = std::string::append(&v34, "'.");
      v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v24[0] = (void *)v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)v23 = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Log::LogWithLevel((uint64_t)v23, 3u);
      if (SHIBYTE(v24[0]) < 0)
        operator delete(v23[0]);
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v34.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v31 = 0u;
      memset(&v32, 0, sizeof(v32));
      *(_OWORD *)v29 = 0u;
      *(_OWORD *)v30 = 0u;
      *(_OWORD *)v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      *(_OWORD *)v26 = 0u;
      *(_OWORD *)v23 = 0u;
      *(_OWORD *)v24 = 0u;
      std::string::operator=((std::string *)a4, (const std::string *)v23);
      std::string::operator=((std::string *)(a4 + 24), (const std::string *)&v24[1]);
      std::string::operator=((std::string *)(a4 + 48), (const std::string *)v26);
      std::string::operator=((std::string *)(a4 + 72), (const std::string *)&v27[1]);
      std::string::operator=((std::string *)(a4 + 96), (const std::string *)v29);
      std::string::operator=((std::string *)(a4 + 120), (const std::string *)&v30[1]);
      std::string::operator=((std::string *)(a4 + 144), &v32);
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v32.__r_.__value_.__l.__data_);
      if (SHIBYTE(v31) < 0)
        operator delete(v30[1]);
      if (SHIBYTE(v30[0]) < 0)
        operator delete(v29[0]);
      if (SHIBYTE(v28) < 0)
        operator delete(v27[1]);
      if (SHIBYTE(v27[0]) < 0)
        operator delete(v26[0]);
      if (SHIBYTE(v25) < 0)
        operator delete(v24[1]);
      if (SHIBYTE(v24[0]) < 0)
        operator delete(v23[0]);
    }
  }
  (*(void (**)(const char *))(*(_QWORD *)v16 + 16))(v16);
  morphun::util::ULocale::~ULocale((morphun::util::ULocale *)v35);
  if ((char)v37 < 0)
    operator delete(v36[0]);
}

void sub_1BF968140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 __p, std::string::size_type a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,std::string::size_type a30,int a31,__int16 a32,char a33,unsigned __int8 a34,std::string *a35,uint64_t a36,std::string *a37,uint64_t a38,__int128 a39,std::string::size_type a40)
{
  uint64_t v40;
  __int128 **v41;
  uint64_t v42;
  uint64_t v43;
  void *v46;
  std::string *v47;
  __int128 v48;
  std::string *v49;
  __int128 v50;
  char *v51;
  const std::string::value_type *v52;
  std::string::size_type v53;
  std::string *v54;
  __int128 v55;

  if (SHIBYTE(a10) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(a37) < 0)
    operator delete(a35);
  if ((char)a34 < 0)
    operator delete(a29);
  siri::dialogengine::SpeakableString::~SpeakableString((void **)v40);
  (*(void (**)(uint64_t))(*(_QWORD *)v42 + 16))(v42);
  morphun::util::ULocale::~ULocale((morphun::util::ULocale *)&a39);
  if (*(char *)(v43 - 73) < 0)
    operator delete(*(void **)(v43 - 96));
  if (a2 == 1)
  {
    v46 = __cxa_begin_catch(a1);
    siri::dialogengine::SemanticFeatureConstraint::ToString(v41, (uint64_t)&a35);
    v47 = std::string::insert((std::string *)&a35, 0, "Failed to inflect pronoun with constraints '");
    v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    *(_QWORD *)(v43 - 80) = *((_QWORD *)&v47->__r_.__value_.__l + 2);
    *(_OWORD *)(v43 - 96) = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    v49 = std::string::append((std::string *)(v43 - 96), "' No morphun assets? Error: ");
    v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
    a40 = v49->__r_.__value_.__r.__words[2];
    a39 = v50;
    v49->__r_.__value_.__l.__size_ = 0;
    v49->__r_.__value_.__r.__words[2] = 0;
    v49->__r_.__value_.__r.__words[0] = 0;
    v51 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v46 + 16))(v46);
    std::string::basic_string[abi:ne180100]<0>(&a29, v51);
    if ((a34 & 0x80u) == 0)
      v52 = (const std::string::value_type *)&a29;
    else
      v52 = (const std::string::value_type *)a29;
    if ((a34 & 0x80u) == 0)
      v53 = a34;
    else
      v53 = a30;
    v54 = std::string::append((std::string *)&a39, v52, v53);
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    a10 = v54->__r_.__value_.__r.__words[2];
    __p = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)&__p, 3u);
    if (SHIBYTE(a10) < 0)
      operator delete((void *)__p);
    if ((char)a34 < 0)
      operator delete(a29);
    if (SHIBYTE(a40) < 0)
      operator delete((void *)a39);
    if (*(char *)(v43 - 73) < 0)
      operator delete(*(void **)(v43 - 96));
    if (SHIBYTE(a37) < 0)
      operator delete(a35);
    *(_QWORD *)(v40 + 160) = 0;
    *(_OWORD *)(v40 + 128) = 0u;
    *(_OWORD *)(v40 + 144) = 0u;
    *(_OWORD *)(v40 + 96) = 0u;
    *(_OWORD *)(v40 + 112) = 0u;
    *(_OWORD *)(v40 + 64) = 0u;
    *(_OWORD *)(v40 + 80) = 0u;
    *(_OWORD *)(v40 + 32) = 0u;
    *(_OWORD *)(v40 + 48) = 0u;
    *(_OWORD *)v40 = 0u;
    *(_OWORD *)(v40 + 16) = 0u;
    __cxa_end_catch();
    JUMPOUT(0x1BF968124);
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::InflectString(std::string *this@<X1>, siri::dialogengine *a2@<X0>, __int128 **a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  std::string::size_type size;
  std::string::size_type v10;
  siri::dialogengine::Context *v11;
  const char *v12;
  const char *v13;
  unint64_t v14;
  morphun::dialog::LocalizedCommonConceptFactoryProvider *v15;
  uint64_t DefaultCommonConceptFactoryProvider;
  uint64_t v17;
  const morphun::dialog::SemanticFeatureModel *v18;
  morphun::dialog::InflectableStringConcept *v19;
  uint64_t v20;
  uint64_t v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  void **v26;
  std::string::size_type v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  void *v32[2];
  unsigned __int8 v33;
  std::string v34;
  std::string v35;
  std::string __p;
  std::string v37;
  __int128 v38;
  std::string::size_type v39;
  _BYTE v40[128];
  void *v41[2];
  unsigned __int8 v42;
  _BYTE v43[40];
  __int128 __str;
  __int128 __str_16;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  std::string v53;

  size = HIBYTE(this[1].__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0)
    size = this[1].__r_.__value_.__l.__size_;
  if (size)
    goto LABEL_7;
  v10 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v10 & 0x80u) != 0)
    v10 = this->__r_.__value_.__l.__size_;
  if (v10)
  {
LABEL_7:
    if (a4)
    {
      v52 = 0u;
      memset(&v53, 0, sizeof(v53));
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      __str = 0u;
      __str_16 = 0u;
    }
    else
    {
      siri::dialogengine::SpeakableString::SpeakableString((std::string *)&__str, (const siri::dialogengine::SpeakableString *)this);
    }
    siri::dialogengine::SpeakableStringToMorphun((siri::dialogengine *)this, (const siri::dialogengine::SpeakableString *)this);
    siri::dialogengine::RegisterMorphunData(a2, v11);
    if (a2)
      siri::dialogengine::Context::GetLocale(a2, v12, (uint64_t)v41);
    else
      std::string::basic_string[abi:ne180100]<0>(v41, "");
    v14 = v42;
    if ((v42 & 0x80u) != 0)
      v14 = (unint64_t)v41[1];
    if (!v14)
      siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"InflectString has empty locale", v13);
    v38 = 0uLL;
    v39 = 0;
    memset(&v37, 0, sizeof(v37));
    memset(&__p, 0, sizeof(__p));
    v15 = (morphun::dialog::LocalizedCommonConceptFactoryProvider *)morphun::util::ULocale::ULocale();
    DefaultCommonConceptFactoryProvider = morphun::dialog::LocalizedCommonConceptFactoryProvider::getDefaultCommonConceptFactoryProvider(v15);
    v17 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)DefaultCommonConceptFactoryProvider + 24))(DefaultCommonConceptFactoryProvider, v40);
    v18 = (const morphun::dialog::SemanticFeatureModel *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
    v19 = (morphun::dialog::InflectableStringConcept *)operator new();
    morphun::dialog::InflectableStringConcept::InflectableStringConcept(v19, v18, (const morphun::dialog::SpeakableString *)v43);
    siri::dialogengine::InflectConcept(a2, (const char *)v19, a3, a5);
    v20 = *(unsigned __int8 *)(a5 + 47);
    if ((v20 & 0x80u) != 0)
      v20 = *(_QWORD *)(a5 + 32);
    if (!v20)
    {
      v21 = *(unsigned __int8 *)(a5 + 23);
      if ((v21 & 0x80u) != 0)
        v21 = *(_QWORD *)(a5 + 8);
      if (!v21)
      {
        if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v34, this->__r_.__value_.__l.__data_, this->__r_.__value_.__l.__size_);
        else
          v34 = *this;
        v22 = std::string::insert(&v34, 0, "Failed to inflect string '");
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        v35.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        v24 = std::string::append(&v35, "' with constraints '");
        v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::SemanticFeatureConstraint::ToString(a3, (uint64_t)v32);
        if ((v33 & 0x80u) == 0)
          v26 = v32;
        else
          v26 = (void **)v32[0];
        if ((v33 & 0x80u) == 0)
          v27 = v33;
        else
          v27 = (std::string::size_type)v32[1];
        v28 = std::string::append(&__p, (const std::string::value_type *)v26, v27);
        v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
        v37.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v29;
        v28->__r_.__value_.__l.__size_ = 0;
        v28->__r_.__value_.__r.__words[2] = 0;
        v28->__r_.__value_.__r.__words[0] = 0;
        v30 = std::string::append(&v37, "'.");
        v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        v39 = v30->__r_.__value_.__r.__words[2];
        v38 = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::Log::LogWithLevel((uint64_t)&v38, 3u);
        if (SHIBYTE(v39) < 0)
          operator delete((void *)v38);
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v37.__r_.__value_.__l.__data_);
        if ((char)v33 < 0)
          operator delete(v32[0]);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v35.__r_.__value_.__l.__data_);
        if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v34.__r_.__value_.__l.__data_);
        std::string::operator=((std::string *)a5, (const std::string *)&__str);
        std::string::operator=((std::string *)(a5 + 24), (const std::string *)((char *)&__str_16 + 8));
        std::string::operator=((std::string *)(a5 + 48), (const std::string *)&v47);
        std::string::operator=((std::string *)(a5 + 72), (const std::string *)((char *)&v48 + 8));
        std::string::operator=((std::string *)(a5 + 96), (const std::string *)&v50);
        std::string::operator=((std::string *)(a5 + 120), (const std::string *)((char *)&v51 + 8));
        std::string::operator=((std::string *)(a5 + 144), &v53);
      }
    }
    (*(void (**)(morphun::dialog::InflectableStringConcept *))(*(_QWORD *)v19 + 16))(v19);
    morphun::util::ULocale::~ULocale((morphun::util::ULocale *)v40);
    if ((char)v42 < 0)
      operator delete(v41[0]);
    morphun::dialog::SpeakableString::~SpeakableString((morphun::dialog::SpeakableString *)v43);
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v53.__r_.__value_.__l.__data_);
    if (SHIBYTE(v52) < 0)
      operator delete(*((void **)&v51 + 1));
    if (SBYTE7(v51) < 0)
      operator delete((void *)v50);
    if (SHIBYTE(v49) < 0)
      operator delete(*((void **)&v48 + 1));
    if (SBYTE7(v48) < 0)
      operator delete((void *)v47);
    if (SHIBYTE(v46) < 0)
      operator delete(*((void **)&__str_16 + 1));
    if (SBYTE7(__str_16) < 0)
      operator delete((void *)__str);
  }
  else
  {
    siri::dialogengine::SpeakableString::SpeakableString((std::string *)a5, (const siri::dialogengine::SpeakableString *)this);
  }
}

void sub_1BF968920(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, std::string::value_type *a10, std::string::size_type a11, std::string *a12, std::string::value_type *a13, std::string *a14, uint64_t a15, std::string *a16, __int128 a17, uint64_t a18, void *a19, __int128 a20,std::string::size_type a21,uint64_t a22,__int128 a23,std::string::size_type a24,uint64_t a25,void *a26,uint64_t a27,std::string::size_type a28,uint64_t a29,void *a30,uint64_t a31,std::string::size_type a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,...)
{
  std::string *v48;
  __int128 **v49;
  __int128 *v50;
  uint64_t v51;
  _OWORD *v52;
  uint64_t v53;
  int v54;
  void *v56;
  std::string *v57;
  __int128 v58;
  std::string *v59;
  __int128 v60;
  const std::string::value_type *v61;
  std::string::size_type v62;
  std::string *v63;
  __int128 v64;
  std::string *v65;
  __int128 v66;
  char *v67;
  const std::string::value_type *v68;
  std::string::size_type v69;
  std::string *v70;
  __int128 v71;
  void *__pa;
  va_list __pb;
  uint64_t v74;
  std::string::size_type v75;
  va_list va1;

  va_start(va1, a48);
  va_start(__pb, a48);
  __pa = va_arg(va1, void *);
  v74 = va_arg(va1, _QWORD);
  v75 = va_arg(va1, _QWORD);
  v54 = (int)a2;
  siri::dialogengine::SpeakableString::~SpeakableString((void **)&v48->__r_.__value_.__l.__data_);
  (*(void (**)(uint64_t))(*(_QWORD *)v51 + 16))(v51);
  morphun::util::ULocale::~ULocale((morphun::util::ULocale *)&a30);
  if (SHIBYTE(v75) < 0)
    operator delete(__pa);
  if (v54 == 1)
  {
    v56 = __cxa_begin_catch(a1);
    if (*((char *)v50 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&a17, *(const std::string::value_type **)v50, *((_QWORD *)v50 + 1));
    }
    else
    {
      a17 = *v50;
      a18 = *((_QWORD *)v50 + 2);
    }
    v57 = std::string::insert((std::string *)&a17, 0, "Failed to inflect string '");
    v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
    a21 = v57->__r_.__value_.__r.__words[2];
    a20 = v58;
    v57->__r_.__value_.__l.__size_ = 0;
    v57->__r_.__value_.__r.__words[2] = 0;
    v57->__r_.__value_.__r.__words[0] = 0;
    v59 = std::string::append((std::string *)&a20, "' with constraints '");
    v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
    a24 = v59->__r_.__value_.__r.__words[2];
    a23 = v60;
    v59->__r_.__value_.__l.__size_ = 0;
    v59->__r_.__value_.__r.__words[2] = 0;
    v59->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::SemanticFeatureConstraint::ToString(v49, (uint64_t)&a13);
    if (a15 >= 0)
      v61 = (const std::string::value_type *)&a13;
    else
      v61 = a13;
    if (a15 >= 0)
      v62 = HIBYTE(a15);
    else
      v62 = (std::string::size_type)a14;
    v63 = std::string::append((std::string *)&a23, v61, v62);
    v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
    a28 = v63->__r_.__value_.__r.__words[2];
    *v52 = v64;
    v63->__r_.__value_.__l.__size_ = 0;
    v63->__r_.__value_.__r.__words[2] = 0;
    v63->__r_.__value_.__r.__words[0] = 0;
    v65 = std::string::append((std::string *)&a26, "' No morphun assets? Error: ");
    v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
    v75 = v65->__r_.__value_.__r.__words[2];
    v52[10] = v66;
    v65->__r_.__value_.__l.__size_ = 0;
    v65->__r_.__value_.__r.__words[2] = 0;
    v65->__r_.__value_.__r.__words[0] = 0;
    v67 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v56 + 16))(v56);
    std::string::basic_string[abi:ne180100]<0>(&a10, v67);
    if (SHIBYTE(a12) >= 0)
      v68 = (const std::string::value_type *)&a10;
    else
      v68 = a10;
    if (SHIBYTE(a12) >= 0)
      v69 = HIBYTE(a12);
    else
      v69 = a11;
    v70 = std::string::append((std::string *)__pb, v68, v69);
    v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
    a32 = v70->__r_.__value_.__r.__words[2];
    v52[2] = v71;
    v70->__r_.__value_.__l.__size_ = 0;
    v70->__r_.__value_.__r.__words[2] = 0;
    v70->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)&a30, 3u);
    if (SHIBYTE(a32) < 0)
      operator delete(a30);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (SHIBYTE(v75) < 0)
      operator delete(__pa);
    if (SHIBYTE(a28) < 0)
      operator delete(a26);
    if (SHIBYTE(a15) < 0)
      operator delete(a13);
    if (SHIBYTE(a24) < 0)
      operator delete((void *)a23);
    if (SHIBYTE(a21) < 0)
      operator delete((void *)a20);
    if (SHIBYTE(a18) < 0)
      operator delete((void *)a17);
    siri::dialogengine::SpeakableString::SpeakableString(v48, (const siri::dialogengine::SpeakableString *)(v53 - 240));
    __cxa_end_catch();
    JUMPOUT(0x1BF96888CLL);
  }
  morphun::dialog::SpeakableString::~SpeakableString((morphun::dialog::SpeakableString *)va1);
  siri::dialogengine::SpeakableString::~SpeakableString((void **)(v53 - 240));
  _Unwind_Resume(a1);
}

void siri::dialogengine::InflectDialog(siri::dialogengine *a1@<X0>, siri::dialogengine::Context *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, std::string *a5@<X8>)
{
  std::string *v10;
  int v11;
  int v12;
  std::string v13;
  std::string __str;
  std::string v15;
  std::string v16;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string __p;
  std::string v21;
  _QWORD v22[3];

  v10 = (std::string *)(a3 + 24);
  if (*(char *)(a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(a3 + 24), *(_QWORD *)(a3 + 32));
  }
  else
  {
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 40);
  }
  siri::dialogengine::ExtractSpeechCodesFromString((uint64_t)&__str, (uint64_t)v22);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v22[0] == v22[1])
    goto LABEL_12;
  if (*(char *)(a3 + 47) < 0)
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(a3 + 24), *(_QWORD *)(a3 + 32));
  else
    __str = *v10;
  v11 = siri::dialogengine::ContainsTTStoiCodes(&__str.__r_.__value_.__l.__data_);
  v12 = v11;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (v12)
    {
LABEL_12:
      if (a4)
        siri::dialogengine::InflectPronoun(a1, a2, a3, (uint64_t)a5);
      else
        siri::dialogengine::InflectString((std::string *)a3, a1, (__int128 **)a2, 0, (uint64_t)a5);
      goto LABEL_49;
    }
  }
  else if (v11)
  {
    goto LABEL_12;
  }
  if (*(char *)(a3 + 47) < 0)
    std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)(a3 + 24), *(_QWORD *)(a3 + 32));
  else
    v21 = *v10;
  siri::dialogengine::RemoveSpeechCodesFromString((uint64_t)&v21, &__str);
  std::string::operator=(v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (a4)
      goto LABEL_21;
LABEL_23:
    siri::dialogengine::InflectString((std::string *)a3, a1, (__int128 **)a2, 0, (uint64_t)&__str);
    goto LABEL_24;
  }
  if (!a4)
    goto LABEL_23;
LABEL_21:
  siri::dialogengine::InflectPronoun(a1, a2, a3, (uint64_t)&__str);
LABEL_24:
  std::string::operator=((std::string *)a3, &__str);
  std::string::operator=(v10, &v15);
  std::string::operator=((std::string *)(a3 + 48), &v16);
  std::string::operator=((std::string *)(a3 + 72), &v17);
  std::string::operator=((std::string *)(a3 + 96), &v18);
  std::string::operator=((std::string *)(a3 + 120), &v19);
  std::string::operator=((std::string *)(a3 + 144), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (*(char *)(a3 + 47) < 0)
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)(a3 + 24), *(_QWORD *)(a3 + 32));
  else
    v13 = *v10;
  siri::dialogengine::RemoveEmojiChars(&v13, &__str);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  siri::dialogengine::AddSpeechCodesToString((uint64_t)&__str, (uint64_t)v22, &v13);
  std::string::operator=(v10, &v13);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  siri::dialogengine::SpeakableString::SpeakableString(a5, (const siri::dialogengine::SpeakableString *)a3);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
LABEL_49:
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
}

void sub_1BF9690C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 - 89) < 0)
    operator delete(*(void **)(v21 - 112));
  __p = (void *)(v21 - 88);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ValidateInflection(siri::dialogengine::Context *a1@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  const char *v5;
  std::string::size_type v6;
  __int128 *v7;
  __int128 *v8;
  __int128 v9;
  std::__compressed_pair<std::string *> v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  std::string *v17;
  std::string::size_type v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  std::string *v28;
  std::string *v29;
  std::string::size_type v30;
  unint64_t v31;
  unint64_t v32;
  __int128 v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  std::string *v38;
  std::string *v39;
  __int128 v40;
  uint64_t v41;
  int end_high;
  std::string __p;
  std::string v44;
  std::string v45;
  std::__split_buffer<std::string> v46;
  uint64_t v47;
  char v48;
  void *v49;
  std::string::size_type v50;
  unsigned __int8 v51;
  std::__split_buffer<std::string> __v;
  _QWORD v53[5];

  v53[2] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  if (*((_QWORD *)a2 + 1) != *(_QWORD *)a2)
  {
    if (a1)
      siri::dialogengine::Context::GetLocale(a1, a2, (uint64_t)&v49);
    else
      std::string::basic_string[abi:ne180100]<0>(&v49, "");
    v6 = v51;
    if ((v51 & 0x80u) != 0)
      v6 = v50;
    if (v6)
    {
      v7 = *(__int128 **)a2;
      v8 = (__int128 *)*((_QWORD *)a2 + 1);
      if (*(__int128 **)a2 != v8)
      {
        do
        {
          if (*((char *)v7 + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v46, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
          }
          else
          {
            v9 = *v7;
            v46.__end_ = (std::__split_buffer<std::string>::pointer)*((_QWORD *)v7 + 2);
            *(_OWORD *)&v46.__first_ = v9;
          }
          if (*((char *)v7 + 47) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v46.__end_cap_, *((const std::string::value_type **)v7 + 3), *((_QWORD *)v7 + 4));
          }
          else
          {
            v10 = *(std::__compressed_pair<std::string *> *)((char *)v7 + 24);
            v47 = *((_QWORD *)v7 + 5);
            v46.__end_cap_ = v10;
          }
          v48 = *((_BYTE *)v7 + 48);
          if (!siri::dialogengine::SemanticFeatureConstraint::GetGrammarFeature((std::string *)&v46, (uint64_t)&v49))
          {
            if (SHIBYTE(v46.__end_) < 0)
            {
              std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v46.__first_, (std::string::size_type)v46.__begin_);
            }
            else
            {
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v46.__first_;
              __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v46.__end_;
            }
            v11 = std::string::insert(&__p, 0, "Inflection function '");
            v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
            v44.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v12;
            v11->__r_.__value_.__l.__size_ = 0;
            v11->__r_.__value_.__r.__words[2] = 0;
            v11->__r_.__value_.__r.__words[0] = 0;
            v13 = std::string::append(&v44, "' is invalid for locale ");
            v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
            v45.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v14;
            v13->__r_.__value_.__l.__size_ = 0;
            v13->__r_.__value_.__r.__words[2] = 0;
            v13->__r_.__value_.__r.__words[0] = 0;
            if ((v51 & 0x80u) == 0)
              v15 = (const std::string::value_type *)&v49;
            else
              v15 = (const std::string::value_type *)v49;
            if ((v51 & 0x80u) == 0)
              v16 = v51;
            else
              v16 = v50;
            v17 = std::string::append(&v45, v15, v16);
            v18 = v17->__r_.__value_.__r.__words[0];
            v53[0] = v17->__r_.__value_.__l.__size_;
            *(_QWORD *)((char *)v53 + 7) = *(std::string::size_type *)((char *)&v17->__r_.__value_.__r.__words[1] + 7);
            v19 = HIBYTE(v17->__r_.__value_.__r.__words[2]);
            v17->__r_.__value_.__l.__size_ = 0;
            v17->__r_.__value_.__r.__words[2] = 0;
            v17->__r_.__value_.__r.__words[0] = 0;
            v20 = *(_QWORD *)(a3 + 8);
            v21 = *(_QWORD *)(a3 + 16);
            if (v20 >= v21)
            {
              v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - *(_QWORD *)a3) >> 3);
              v25 = v24 + 1;
              if (v24 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<BOOL>::__throw_length_error[abi:ne180100]();
              v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *(_QWORD *)a3) >> 3);
              if (2 * v26 > v25)
                v25 = 2 * v26;
              if (v26 >= 0x555555555555555)
                v27 = 0xAAAAAAAAAAAAAAALL;
              else
                v27 = v25;
              __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 16);
              if (v27)
                v28 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a3 + 16, v27);
              else
                v28 = 0;
              v29 = v28 + v24;
              __v.__first_ = v28;
              __v.__begin_ = v29;
              __v.__end_cap_.__value_ = &v28[v27];
              v30 = v53[0];
              v29->__r_.__value_.__r.__words[0] = v18;
              v29->__r_.__value_.__l.__size_ = v30;
              *(std::string::size_type *)((char *)&v29->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v53 + 7);
              *((_BYTE *)&v29->__r_.__value_.__s + 23) = v19;
              v53[0] = 0;
              *(_QWORD *)((char *)v53 + 7) = 0;
              __v.__end_ = v29 + 1;
              std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a3, &__v);
              v23 = *(_QWORD *)(a3 + 8);
              std::__split_buffer<std::string>::~__split_buffer(&__v);
            }
            else
            {
              v22 = v53[0];
              *(_QWORD *)v20 = v18;
              *(_QWORD *)(v20 + 8) = v22;
              *(_QWORD *)(v20 + 15) = *(_QWORD *)((char *)v53 + 7);
              *(_BYTE *)(v20 + 23) = v19;
              v23 = v20 + 24;
              *(_QWORD *)(a3 + 8) = v20 + 24;
            }
            *(_QWORD *)(a3 + 8) = v23;
            if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v45.__r_.__value_.__l.__data_);
            if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v44.__r_.__value_.__l.__data_);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v47) < 0)
            operator delete(v46.__end_cap_.__value_);
          if (SHIBYTE(v46.__end_) < 0)
            operator delete(v46.__first_);
          v7 = (__int128 *)((char *)v7 + 56);
        }
        while (v7 != v8);
      }
    }
    else
    {
      siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"ValidateInflection has empty locale", v5);
      std::string::basic_string[abi:ne180100]<0>(&__v, "No locale defined for inflection features.");
      v31 = *(_QWORD *)(a3 + 16);
      v32 = *(_QWORD *)(a3 + 8);
      if (v32 >= v31)
      {
        v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v32 - *(_QWORD *)a3) >> 3);
        v35 = v34 + 1;
        if (v34 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - *(_QWORD *)a3) >> 3);
        if (2 * v36 > v35)
          v35 = 2 * v36;
        if (v36 >= 0x555555555555555)
          v37 = 0xAAAAAAAAAAAAAAALL;
        else
          v37 = v35;
        v46.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 16);
        if (v37)
          v38 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a3 + 16, v37);
        else
          v38 = 0;
        v39 = v38 + v34;
        v46.__first_ = v38;
        v46.__begin_ = v39;
        v46.__end_cap_.__value_ = &v38[v37];
        v40 = *(_OWORD *)&__v.__first_;
        v39->__r_.__value_.__r.__words[2] = (std::string::size_type)__v.__end_;
        *(_OWORD *)&v39->__r_.__value_.__l.__data_ = v40;
        memset(&__v, 0, 24);
        v46.__end_ = v39 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a3, &v46);
        v41 = *(_QWORD *)(a3 + 8);
        std::__split_buffer<std::string>::~__split_buffer(&v46);
        end_high = SHIBYTE(__v.__end_);
        *(_QWORD *)(a3 + 8) = v41;
        if (end_high < 0)
          operator delete(__v.__first_);
      }
      else
      {
        v33 = *(_OWORD *)&__v.__first_;
        *(_QWORD *)(v32 + 16) = __v.__end_;
        *(_OWORD *)v32 = v33;
        *(_QWORD *)(a3 + 8) = v32 + 24;
      }
    }
    if ((char)v51 < 0)
      operator delete(v49);
  }
}

void sub_1BF96961C(_Unwind_Exception *a1, uint64_t a2, int a3, __int16 a4, char a5, char a6, uint64_t a7, void *a8, void *a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, void *a15, void *a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,std::__split_buffer<std::string> *a22,void *a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__pa,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;

  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a27);
  if (*(char *)(v42 - 137) < 0)
    operator delete(*(void **)(v42 - 160));
  if (a42 < 0)
    operator delete(__pa);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::NumberOperationFromFeature(unsigned __int8 *a1)
{
  unsigned __int8 v2;
  unint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  int8x8_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 **v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v16;
  char v17;
  char **v18;
  char *v19;

  if ((v2 & 1) == 0
  {
    v16 = (_QWORD *)operator new();
    *v16 = 0;
    siri::dialogengine::NumberOperationFromFeature(std::string const&)::flag = (uint64_t)v16;
  }
  v3 = atomic_load((unint64_t *)siri::dialogengine::NumberOperationFromFeature(std::string const&)::flag);
  if (v3 != -1)
  {
    v19 = &v17;
    v18 = &v19;
    std::__call_once((std::once_flag::_State_type *)siri::dialogengine::NumberOperationFromFeature(std::string const&)::flag, &v18, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::NumberOperationFromFeature(std::string const&)::$_0 &&>>);
  }
  v4 = (_QWORD *)siri::dialogengine::NumberOperationFromFeature(std::string const&)::operations;
  v5 = std::__string_hash<char>::operator()[abi:ne180100](siri::dialogengine::NumberOperationFromFeature(std::string const&)::operations + 24, (uint64_t)a1);
  v6 = (int8x8_t)v4[1];
  if (v6)
  {
    v7 = v5;
    v8 = (uint8x8_t)vcnt_s8(v6);
    v8.i16[0] = vaddlv_u8(v8);
    v9 = v8.u32[0];
    if (v8.u32[0] > 1uLL)
    {
      v10 = v5;
      if (v5 >= *(_QWORD *)&v6)
        v10 = v5 % *(_QWORD *)&v6;
    }
    else
    {
      v10 = (*(_QWORD *)&v6 - 1) & v5;
    }
    v11 = *(unsigned __int8 ***)(*v4 + 8 * v10);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        v13 = (uint64_t)(v4 + 4);
        do
        {
          v14 = *((_QWORD *)v12 + 1);
          if (v7 == v14)
          {
            if ((std::equal_to<std::string>::operator()[abi:ne180100](v13, v12 + 16, a1) & 1) != 0)
              return *((unsigned int *)v12 + 10);
          }
          else
          {
            if (v9 > 1)
            {
              if (v14 >= *(_QWORD *)&v6)
                v14 %= *(_QWORD *)&v6;
            }
            else
            {
              v14 &= *(_QWORD *)&v6 - 1;
            }
            if (v14 != v10)
              return 0xFFFFFFFFLL;
          }
          v12 = *(unsigned __int8 **)v12;
        }
        while (v12);
      }
    }
  }
  return 0xFFFFFFFFLL;
}

void sub_1BF9698A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::NumberOperationFromFeature(std::string const&)::$_0 &&>>()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  const std::string::value_type **v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *i;
  unint64_t v12;
  char *v13;
  std::string *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  int8x8_t prime;
  void *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint8x8_t v26;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  float *v38;
  _QWORD v39[3];
  int v40;
  uint64_t v41[3];
  int v42;
  uint64_t v43[3];
  int v44;
  uint64_t v45[3];
  int v46;
  uint64_t v47[3];
  int v48;
  uint64_t v49[3];
  int v50;
  uint64_t v51[3];
  int v52;
  uint64_t v53[3];
  int v54;
  uint64_t v55[3];
  int v56;
  uint64_t v57[3];
  int v58;
  uint64_t v59[3];
  int v60;
  uint64_t v61[3];
  int v62;
  uint64_t v63[3];
  int v64;
  uint64_t v65[3];
  int v66;
  uint64_t v67[3];
  int v68;
  uint64_t v69[3];
  int v70;
  uint64_t v71[3];
  int v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v1 = operator new();
  std::string::basic_string[abi:ne180100]<0>(v39, "asDigits");
  v40 = 0;
  std::string::basic_string[abi:ne180100]<0>(v41, "asOrdinalDigits");
  v42 = 1;
  std::string::basic_string[abi:ne180100]<0>(v43, "asSpokenWords");
  v44 = 2;
  std::string::basic_string[abi:ne180100]<0>(v45, "asWords");
  v46 = 3;
  std::string::basic_string[abi:ne180100]<0>(v47, "getAbsolute");
  v48 = 4;
  std::string::basic_string[abi:ne180100]<0>(v49, "grouping");
  v50 = 5;
  std::string::basic_string[abi:ne180100]<0>(v51, "maxFractionDigits");
  v52 = 6;
  std::string::basic_string[abi:ne180100]<0>(v53, "maxFractionDigitsAboveOne");
  v54 = 7;
  std::string::basic_string[abi:ne180100]<0>(v55, "maxIntegerDigits");
  v56 = 8;
  std::string::basic_string[abi:ne180100]<0>(v57, "minFractionDigits");
  v58 = 9;
  std::string::basic_string[abi:ne180100]<0>(v59, "minIntegerDigits");
  v60 = 10;
  std::string::basic_string[abi:ne180100]<0>(v61, "roundCeiling");
  v62 = 11;
  std::string::basic_string[abi:ne180100]<0>(v63, "roundDown");
  v64 = 12;
  std::string::basic_string[abi:ne180100]<0>(v65, "roundFloor");
  v66 = 13;
  std::string::basic_string[abi:ne180100]<0>(v67, "roundHalfDown");
  v68 = 14;
  std::string::basic_string[abi:ne180100]<0>(v69, "roundHalfUp");
  v70 = 15;
  std::string::basic_string[abi:ne180100]<0>(v71, "roundUp");
  v2 = 0;
  v72 = 16;
  *(_DWORD *)(v1 + 32) = 1065353216;
  *(_OWORD *)v1 = 0u;
  v3 = (unint64_t *)(v1 + 24);
  *(_OWORD *)(v1 + 16) = 0u;
  v37 = (_QWORD *)(v1 + 16);
  v38 = (float *)(v1 + 32);
  do
  {
    v4 = (const std::string::value_type **)&v39[4 * v2];
    v5 = std::__string_hash<char>::operator()[abi:ne180100](v1 + 24, (uint64_t)v4);
    v6 = v5;
    v7 = *(_QWORD *)(v1 + 8);
    if (v7)
    {
      v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
      v8.i16[0] = vaddlv_u8(v8);
      v9 = v8.u32[0];
      if (v8.u32[0] > 1uLL)
      {
        v0 = v5;
        if (v5 >= v7)
          v0 = v5 % v7;
      }
      else
      {
        v0 = (v7 - 1) & v5;
      }
      v10 = *(unsigned __int8 ***)(*(_QWORD *)v1 + 8 * v0);
      if (v10)
      {
        for (i = *v10; i; i = *(unsigned __int8 **)i)
        {
          v12 = *((_QWORD *)i + 1);
          if (v12 == v6)
          {
            if ((std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)v38, i + 16, (unsigned __int8 *)&v39[4 * v2]) & 1) != 0)goto LABEL_77;
          }
          else
          {
            if (v9 > 1)
            {
              if (v12 >= v7)
                v12 %= v7;
            }
            else
            {
              v12 &= v7 - 1;
            }
            if (v12 != v0)
              break;
          }
        }
      }
    }
    v13 = (char *)operator new(0x30uLL);
    *(_QWORD *)v13 = 0;
    *((_QWORD *)v13 + 1) = v6;
    v14 = (std::string *)(v13 + 16);
    if (*((char *)v4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v14, *v4, (std::string::size_type)v4[1]);
    }
    else
    {
      *(_OWORD *)&v14->__r_.__value_.__l.__data_ = *(_OWORD *)v4;
      *((_QWORD *)v13 + 4) = v4[2];
    }
    *((_DWORD *)v13 + 10) = v39[4 * v2 + 3];
    v15 = (float)(*v3 + 1);
    v16 = *v38;
    if (!v7 || (float)(v16 * (float)v7) < v15)
    {
      v17 = (v7 & (v7 - 1)) != 0;
      if (v7 < 3)
        v17 = 1;
      v18 = v17 | (2 * v7);
      v19 = vcvtps_u32_f32(v15 / v16);
      if (v18 <= v19)
        prime = (int8x8_t)v19;
      else
        prime = (int8x8_t)v18;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      }
      v7 = *(_QWORD *)(v1 + 8);
      if (*(_QWORD *)&prime > v7)
        goto LABEL_33;
      if (*(_QWORD *)&prime < v7)
      {
        v27 = vcvtps_u32_f32((float)*v3 / *v38);
        if (v7 < 3 || (v28 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
        {
          v27 = std::__next_prime(v27);
        }
        else
        {
          v29 = 1 << -(char)__clz(v27 - 1);
          if (v27 >= 2)
            v27 = v29;
        }
        if (*(_QWORD *)&prime <= v27)
          prime = (int8x8_t)v27;
        if (*(_QWORD *)&prime >= v7)
        {
          v7 = *(_QWORD *)(v1 + 8);
        }
        else
        {
          if (prime)
          {
LABEL_33:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v21 = operator new(8 * *(_QWORD *)&prime);
            v22 = *(_QWORD **)v1;
            *(_QWORD *)v1 = v21;
            if (v22)
              operator delete(v22);
            v23 = 0;
            *(int8x8_t *)(v1 + 8) = prime;
            do
              *(_QWORD *)(*(_QWORD *)v1 + 8 * v23++) = 0;
            while (*(_QWORD *)&prime != v23);
            v24 = (_QWORD *)*v37;
            if (*v37)
            {
              v25 = v24[1];
              v26 = (uint8x8_t)vcnt_s8(prime);
              v26.i16[0] = vaddlv_u8(v26);
              if (v26.u32[0] > 1uLL)
              {
                if (v25 >= *(_QWORD *)&prime)
                  v25 %= *(_QWORD *)&prime;
              }
              else
              {
                v25 &= *(_QWORD *)&prime - 1;
              }
              *(_QWORD *)(*(_QWORD *)v1 + 8 * v25) = v37;
              v30 = (_QWORD *)*v24;
              if (*v24)
              {
                do
                {
                  v31 = v30[1];
                  if (v26.u32[0] > 1uLL)
                  {
                    if (v31 >= *(_QWORD *)&prime)
                      v31 %= *(_QWORD *)&prime;
                  }
                  else
                  {
                    v31 &= *(_QWORD *)&prime - 1;
                  }
                  if (v31 != v25)
                  {
                    if (!*(_QWORD *)(*(_QWORD *)v1 + 8 * v31))
                    {
                      *(_QWORD *)(*(_QWORD *)v1 + 8 * v31) = v24;
                      goto LABEL_58;
                    }
                    *v24 = *v30;
                    *v30 = **(_QWORD **)(*(_QWORD *)v1 + 8 * v31);
                    **(_QWORD **)(*(_QWORD *)v1 + 8 * v31) = v30;
                    v30 = v24;
                  }
                  v31 = v25;
LABEL_58:
                  v24 = v30;
                  v30 = (_QWORD *)*v30;
                  v25 = v31;
                }
                while (v30);
              }
            }
            v7 = (unint64_t)prime;
            goto LABEL_62;
          }
          v35 = *(_QWORD **)v1;
          *(_QWORD *)v1 = 0;
          if (v35)
            operator delete(v35);
          v7 = 0;
          *(_QWORD *)(v1 + 8) = 0;
        }
      }
LABEL_62:
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v6 >= v7)
          v0 = v6 % v7;
        else
          v0 = v6;
      }
      else
      {
        v0 = (v7 - 1) & v6;
      }
    }
    v32 = *(_QWORD **)v1;
    v33 = *(_QWORD **)(*(_QWORD *)v1 + 8 * v0);
    if (v33)
    {
      *(_QWORD *)v13 = *v33;
LABEL_75:
      *v33 = v13;
      goto LABEL_76;
    }
    *(_QWORD *)v13 = *v37;
    *v37 = v13;
    v32[v0] = v37;
    if (*(_QWORD *)v13)
    {
      v34 = *(_QWORD *)(*(_QWORD *)v13 + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v34 >= v7)
          v34 %= v7;
      }
      else
      {
        v34 &= v7 - 1;
      }
      v33 = (_QWORD *)(*(_QWORD *)v1 + 8 * v34);
      goto LABEL_75;
    }
LABEL_76:
    ++*v3;
LABEL_77:
    ++v2;
  }
  while (v2 != 17);
  siri::dialogengine::NumberOperationFromFeature(std::string const&)::operations = v1;
  v36 = 68;
  do
  {
    if (*((char *)&v39[v36 - 1] - 1) < 0)
      operator delete((void *)v39[v36 - 4]);
    v36 -= 4;
  }
  while (v36 * 8);
}

void sub_1BF969F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  void **v12;

  while (1)
  {
    if (*((char *)v12 - 9) < 0)
      operator delete(*(v12 - 4));
    v12 -= 4;
    if (v12 == (void **)&a11)
    {
      MEMORY[0x1C3B8D890](v11, 0x10A0C408EF24B1CLL);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t siri::dialogengine::NumberOperationIsModifier(int a1)
{
  return ((a1 + 1) < 0x12) & (0x3FFE0u >> (a1 + 1));
}

void siri::dialogengine::FormatNumberConcept(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unint64_t v9;
  char *v10;
  __int128 v11;
  const char *v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int *v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unsigned int *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  std::string *v45;
  __int128 v46;
  unsigned int *v47;
  __int128 *v48;
  __int128 v49;
  _OWORD *size;
  __int128 v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  std::string *v55;
  std::string *v56;
  __int128 v57;
  std::string::size_type v58;
  std::string *v59;
  __int128 v60;
  std::string *v61;
  __int128 v62;
  const std::string *v63;
  const char *v64;
  unint64_t v65;
  char *__p;
  void *v67[2];
  char v68;
  std::string v69;
  std::string v70;
  std::string v71;
  void *v72[4];
  std::string::value_type v73;
  std::string v74;
  uint64_t v75;
  uint64_t v76;
  std::__split_buffer<std::string> v77;

  siri::dialogengine::SemanticFeatureConstraint::FromString(a1, (unsigned __int8 *)a3, &v75);
  v6 = v75;
  v5 = v76;
  if (v75 == v76)
  {
    v44 = *(unsigned __int8 *)(a3 + 23);
    if ((v44 & 0x80u) != 0)
      v44 = *(_QWORD *)(a3 + 8);
    if (v44)
    {
      std::operator+<char>();
      v45 = std::string::append((std::string *)&v77, "'");
      v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
      v71.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v46;
      v45->__r_.__value_.__l.__size_ = 0;
      v45->__r_.__value_.__r.__words[2] = 0;
      v45->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Log::LogWithLevel((uint64_t)&v71, 3u);
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v71.__r_.__value_.__l.__data_);
      if (SHIBYTE(v77.__end_) < 0)
        operator delete(v77.__first_);
    }
    morphun::util::StringUtils::to_u16string();
    morphun::dialog::SpeakableString::SpeakableString();
    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
    {
      v47 = (unsigned int *)v71.__r_.__value_.__r.__words[0];
LABEL_143:
      operator delete(v47);
    }
  }
  else
  {
    v65 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    __p = 0;
    v10 = 0;
    do
    {
      if (*(char *)(v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v71, *(const std::string::value_type **)v6, *(_QWORD *)(v6 + 8));
      }
      else
      {
        v11 = *(_OWORD *)v6;
        v71.__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 16);
        *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v11;
      }
      v13 = siri::dialogengine::NumberOperationFromFeature((unsigned __int8 *)&v71);
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v71.__r_.__value_.__l.__data_);
      if (v13 - 4 >= 0xD)
      {
        if (v13 == -1)
        {
          if (*(char *)(v6 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v74, *(const std::string::value_type **)v6, *(_QWORD *)(v6 + 8));
          }
          else
          {
            v20 = *(_OWORD *)v6;
            v74.__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 16);
            *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v20;
          }
          v24 = std::string::insert(&v74, 0, "Unsupported number concept operation: '");
          v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
          v77.__end_ = (std::__split_buffer<std::string>::pointer)v24->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v77.__first_ = v25;
          v24->__r_.__value_.__l.__size_ = 0;
          v24->__r_.__value_.__r.__words[2] = 0;
          v24->__r_.__value_.__r.__words[0] = 0;
          v26 = std::string::append((std::string *)&v77, "'");
          v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
          v71.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v27;
          v26->__r_.__value_.__l.__size_ = 0;
          v26->__r_.__value_.__r.__words[2] = 0;
          v26->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Log::LogWithLevel((uint64_t)&v71, 1u);
          if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v71.__r_.__value_.__l.__data_);
          if (SHIBYTE(v77.__end_) < 0)
            operator delete(v77.__first_);
          if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v74.__r_.__value_.__l.__data_);
        }
        else if ((unint64_t)v10 >= v65)
        {
          v21 = (v10 - __p) >> 4;
          v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 60)
            std::vector<BOOL>::__throw_length_error[abi:ne180100]();
          if ((uint64_t)(v65 - (_QWORD)__p) >> 3 > v22)
            v22 = (uint64_t)(v65 - (_QWORD)__p) >> 3;
          if (v65 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF0)
            v23 = 0xFFFFFFFFFFFFFFFLL;
          else
            v23 = v22;
          if (v23)
            v23 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v23);
          else
            v12 = 0;
          v28 = v23 + 16 * v21;
          *(_DWORD *)v28 = v13;
          *(_QWORD *)(v28 + 8) = v6;
          if (v10 == __p)
          {
            v31 = (char *)(v23 + 16 * v21);
            v30 = __p;
          }
          else
          {
            v29 = v23 + 16 * v21;
            v30 = __p;
            do
            {
              v31 = (char *)(v29 - 16);
              *(_OWORD *)(v29 - 16) = *((_OWORD *)v10 - 1);
              v10 -= 16;
              v29 -= 16;
            }
            while (v10 != __p);
          }
          v65 = v23 + 16 * (_QWORD)v12;
          v10 = (char *)(v28 + 16);
          if (v30)
            operator delete(v30);
          __p = v31;
        }
        else
        {
          *(_DWORD *)v10 = v13;
          *((_QWORD *)v10 + 1) = v6;
          v10 += 16;
        }
      }
      else if ((unint64_t)v8 >= v9)
      {
        v14 = ((char *)v8 - (char *)v7) >> 4;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 60)
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        if ((uint64_t)(v9 - (_QWORD)v7) >> 3 > v15)
          v15 = (uint64_t)(v9 - (_QWORD)v7) >> 3;
        if (v9 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0)
          v16 = 0xFFFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        if (v16)
          v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v16);
        else
          v12 = 0;
        v17 = v16 + 16 * v14;
        *(_DWORD *)v17 = v13;
        *(_QWORD *)(v17 + 8) = v6;
        if (v8 == v7)
        {
          v19 = (unsigned int *)(v16 + 16 * v14);
        }
        else
        {
          v18 = v16 + 16 * v14;
          do
          {
            v19 = (unsigned int *)(v18 - 16);
            *(_OWORD *)(v18 - 16) = *((_OWORD *)v8 - 1);
            v8 -= 4;
            v18 -= 16;
          }
          while (v8 != v7);
        }
        v9 = v16 + 16 * (_QWORD)v12;
        v8 = (unsigned int *)(v17 + 16);
        if (v7)
          operator delete(v7);
        v7 = v19;
      }
      else
      {
        *v8 = v13;
        *((_QWORD *)v8 + 1) = v6;
        v8 += 4;
      }
      v6 += 56;
    }
    while (v6 != v5);
    if (v7 == v8)
    {
      v36 = 0;
      v34 = __p;
    }
    else
    {
      v32 = 0;
      v33 = v7;
      v34 = __p;
      do
      {
        v35 = *((_QWORD *)v33 + 1);
        if (*(char *)(v35 + 47) < 0)
          std::string::__init_copy_ctor_external(&v71, *(const std::string::value_type **)(v35 + 24), *(_QWORD *)(v35 + 32));
        else
          v71 = *(std::string *)(v35 + 24);
        switch(*v33)
        {
          case 0xFFFFFFFF:
          case 0u:
          case 1u:
          case 2u:
          case 3u:
            siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Internal logic error: NumberOperation misclassified as a modifier: %d", v12, *v33);
            goto LABEL_66;
          case 4u:
            v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
            goto LABEL_80;
          case 5u:
            v41 = siri::dialogengine::StringToBool(&v71);
            v38 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 88))(a2, v41);
            goto LABEL_80;
          case 6u:
            v40 = siri::dialogengine::StringToInt(&v71, 0, 0);
            v38 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, v40);
            goto LABEL_80;
          case 7u:
            v43 = siri::dialogengine::StringToInt(&v71, 0, 0);
            v38 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 56))(a2, v43);
            goto LABEL_80;
          case 8u:
            v39 = siri::dialogengine::StringToInt(&v71, 0, 0);
            v38 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 80))(a2, v39);
            goto LABEL_80;
          case 9u:
            v42 = siri::dialogengine::StringToInt(&v71, 0, 0);
            v38 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, v42);
            goto LABEL_80;
          case 0xAu:
            v37 = siri::dialogengine::StringToInt(&v71, 0, 0);
            v38 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, v37);
            goto LABEL_80;
          case 0xBu:
            v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 128))(a2);
            goto LABEL_80;
          case 0xCu:
            v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2);
            goto LABEL_80;
          case 0xDu:
            v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 136))(a2);
            goto LABEL_80;
          case 0xEu:
            v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
            goto LABEL_80;
          case 0xFu:
            v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
            goto LABEL_80;
          case 0x10u:
            v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2);
LABEL_80:
            v36 = v38;
            a2 = v38;
            if (v32)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
              a2 = v36;
            }
            break;
          default:
LABEL_66:
            v36 = v32;
            break;
        }
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v71.__r_.__value_.__l.__data_);
        v33 += 4;
        v32 = v36;
      }
      while (v33 != v8);
    }
    LODWORD(v71.__r_.__value_.__l.__data_) = 0;
    *(_OWORD *)&v71.__r_.__value_.__r.__words[1] = 0u;
    memset(v72, 0, sizeof(v72));
    v73 = 0;
    if (v34 == v10)
      goto LABEL_127;
    if ((unint64_t)(v10 - v34) >= 0x11)
    {
      memset(&v74, 0, sizeof(v74));
      do
      {
        v48 = (__int128 *)*((_QWORD *)v34 + 1);
        if (*((char *)v48 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v70, *(const std::string::value_type **)v48, *((_QWORD *)v48 + 1));
        }
        else
        {
          v49 = *v48;
          v70.__r_.__value_.__r.__words[2] = *((_QWORD *)v48 + 2);
          *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v49;
        }
        size = (_OWORD *)v74.__r_.__value_.__l.__size_;
        if (v74.__r_.__value_.__l.__size_ >= v74.__r_.__value_.__r.__words[2])
        {
          v52 = 0xAAAAAAAAAAAAAAABLL
              * ((uint64_t)(v74.__r_.__value_.__l.__size_ - v74.__r_.__value_.__r.__words[0]) >> 3);
          v53 = v52 + 1;
          if (v52 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<BOOL>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556
             * ((uint64_t)(v74.__r_.__value_.__r.__words[2] - v74.__r_.__value_.__r.__words[0]) >> 3) > v53)
            v53 = 0x5555555555555556
                * ((uint64_t)(v74.__r_.__value_.__r.__words[2] - v74.__r_.__value_.__r.__words[0]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL
             * ((uint64_t)(v74.__r_.__value_.__r.__words[2] - v74.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
            v54 = 0xAAAAAAAAAAAAAAALL;
          else
            v54 = v53;
          v77.__end_cap_.__value_ = (std::allocator<std::string> *)&v74.__r_.__value_.__r.__words[2];
          if (v54)
            v55 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v74.__r_.__value_.__r.__words[2], v54);
          else
            v55 = 0;
          v56 = v55 + v52;
          v77.__first_ = v55;
          v77.__begin_ = v56;
          v77.__end_cap_.__value_ = &v55[v54];
          v57 = *(_OWORD *)&v70.__r_.__value_.__l.__data_;
          v56->__r_.__value_.__r.__words[2] = v70.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v56->__r_.__value_.__l.__data_ = v57;
          memset(&v70, 0, sizeof(v70));
          v77.__end_ = v56 + 1;
          std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)&v74, &v77);
          v58 = v74.__r_.__value_.__l.__size_;
          std::__split_buffer<std::string>::~__split_buffer(&v77);
          v74.__r_.__value_.__l.__size_ = v58;
          if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v70.__r_.__value_.__l.__data_);
        }
        else
        {
          v51 = *(_OWORD *)&v70.__r_.__value_.__l.__data_;
          *(_QWORD *)(v74.__r_.__value_.__l.__size_ + 16) = *((_QWORD *)&v70.__r_.__value_.__l + 2);
          *size = v51;
          v74.__r_.__value_.__l.__size_ = (std::string::size_type)size + 24;
        }
        v34 += 16;
      }
      while (v34 != v10);
      std::string::basic_string[abi:ne180100]<0>(v67, ", ");
      v34 = __p;
      siri::dialogengine::StringJoinInternal<std::vector<std::string>>((uint64_t)&v69, (uint64_t)v74.__r_.__value_.__l.__data_, v74.__r_.__value_.__l.__size_, (uint64_t)v67);
      v59 = std::string::insert(&v69, 0, "Multiple number concept output operations (");
      v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
      v70.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v60;
      v59->__r_.__value_.__l.__size_ = 0;
      v59->__r_.__value_.__r.__words[2] = 0;
      v59->__r_.__value_.__r.__words[0] = 0;
      v61 = std::string::append(&v70, ").  Only the first will be used.");
      v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
      v77.__end_ = (std::__split_buffer<std::string>::pointer)v61->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v77.__first_ = v62;
      v61->__r_.__value_.__l.__size_ = 0;
      v61->__r_.__value_.__r.__words[2] = 0;
      v61->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Log::LogWithLevel((uint64_t)&v77, 1u);
      if (SHIBYTE(v77.__end_) < 0)
        operator delete(v77.__first_);
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v70.__r_.__value_.__l.__data_);
      if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v69.__r_.__value_.__l.__data_);
      if (v68 < 0)
        operator delete(v67[0]);
      v77.__first_ = &v74;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v77);
    }
    LODWORD(v71.__r_.__value_.__l.__data_) = *(_DWORD *)v34;
    v63 = (const std::string *)*((_QWORD *)v34 + 1);
    std::string::operator=((std::string *)&v71.__r_.__value_.__r.__words[1], v63);
    std::string::operator=((std::string *)&v72[1], v63 + 1);
    v73 = v63[2].__r_.__value_.__s.__data_[0];
    if ((SHIBYTE(v72[3]) & 0x80000000) == 0)
LABEL_127:
      v74 = *(std::string *)&v72[1];
    else
      std::string::__init_copy_ctor_external(&v74, (const std::string::value_type *)v72[1], (std::string::size_type)v72[2]);
    morphun::util::StringUtils::to_u16string();
    if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v74.__r_.__value_.__l.__data_);
    if ((LODWORD(v71.__r_.__value_.__l.__data_) - 4) >= 0xD)
      __asm { BR              X11 }
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Internal logic error: NumberOperation misclassified as an outputter: %d", v64, LODWORD(v71.__r_.__value_.__l.__data_));
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 208))(a2);
    if (SHIBYTE(v77.__end_) < 0)
      operator delete(v77.__first_);
    if (SHIBYTE(v72[3]) < 0)
      operator delete(v72[1]);
    if (SHIBYTE(v72[0]) < 0)
      operator delete((void *)v71.__r_.__value_.__l.__size_);
    if (v36)
      (*(void (**)(uint64_t))(*(_QWORD *)v36 + 16))(v36);
    if (v34)
      operator delete(v34);
    if (v7)
    {
      v47 = v7;
      goto LABEL_143;
    }
  }
  v71.__r_.__value_.__r.__words[0] = (std::string::size_type)&v75;
  std::vector<siri::dialogengine::SemanticFeatureConstraint>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
}

void sub_1BF96AB54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  void *v48;
  uint64_t v49;
  uint64_t v50;

  if (a48 < 0)
    operator delete(__p);
  if (*(char *)(v50 - 105) < 0)
    operator delete(*(void **)(v50 - 128));
  google::protobuf::util::StatusOr<std::string>::~StatusOr((uint64_t)&a32);
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 16))(v49);
  if (a12)
    operator delete(a12);
  if (v48)
    operator delete(v48);
  a32 = (void *)(v50 - 152);
  std::vector<siri::dialogengine::SemanticFeatureConstraint>::__destroy_vector::operator()[abi:ne180100]((void ***)&a32);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ValidateNumberConceptRuleSet(uint64_t a1@<X0>, std::string **a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  std::string *v7;
  std::string *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const UChar *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  const std::string::value_type *v17;
  char *v18;
  std::string *v19;
  std::string *v20;
  __int128 v21;
  void *v22;
  char v23;
  std::string *v24;
  std::string::size_type size;
  std::string::size_type v26;
  uint64_t v27;
  std::string *v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  std::string::size_type v35;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  __int128 v39;
  std::string *v40;
  __int128 v41;
  std::string *v42;
  std::string::size_type v43;
  char v44;
  uint64_t v45;
  std::string *v46;
  std::string::size_type v47;
  uint64_t v48;
  std::string::size_type v50;
  std::string *v51;
  std::string *v52;
  __int128 v53;
  std::string *v54;
  std::string::size_type v55;
  std::string *v56;
  __int128 v57;
  std::string *v58;
  __int128 v59;
  std::string *v60;
  __int128 v61;
  std::string *v62;
  std::string::size_type v63;
  char v64;
  uint64_t v65;
  UChar v66[5004];
  std::string v67;
  std::string v68;
  std::string v69;
  std::string v70;
  std::string v71;
  UErrorCode v72;
  std::string v73;
  std::string v74;
  _QWORD v75[5];

  v75[2] = *MEMORY[0x1E0C80C00];
  v6 = std::string::basic_string[abi:ne180100]<0>((_QWORD *)a3, "");
  v7 = *a2;
  if (SHIBYTE((*a2)[1].__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v74, v7[1].__r_.__value_.__l.__data_, v7[1].__r_.__value_.__l.__size_);
  else
    v74 = v7[1];
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v74.__r_.__value_.__l.__size_)
    {
LABEL_108:
      operator delete(v74.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if (!*((_BYTE *)&v74.__r_.__value_.__s + 23))
  {
    return;
  }
  v8 = *a2;
  if (SHIBYTE((*a2)->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v73, v8->__r_.__value_.__l.__data_, v8->__r_.__value_.__l.__size_);
  }
  else
  {
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v73.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v9;
  }
  v72 = U_ZERO_ERROR;
  v10 = MEMORY[0x1E0C80A78](v6);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (UChar *)((char *)v66 + v12);
  v14 = MEMORY[0x1E0C80A78](v11);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)v66 + v15;
  if (*(char *)(a1 + 23) >= 0)
    v17 = (const std::string::value_type *)a1;
  else
    v17 = *(const std::string::value_type **)a1;
  unum_open();
  unum_open();
  unum_getTextAttribute();
  unum_getTextAttribute();
  if (v72 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    v18 = (char *)u_errorName(v72);
    v19 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v70, v18);
    v20 = std::string::insert(v19, 0, "an error occurred retrieving rule sets: ");
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v71.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)&v71, 3u);
    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v71.__r_.__value_.__l.__data_);
    if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
    {
      v22 = (void *)v70.__r_.__value_.__r.__words[0];
LABEL_19:
      operator delete(v22);
      goto LABEL_105;
    }
    goto LABEL_105;
  }
  u_austrcpy((char *)&v66[-2504], v66);
  u_austrcpy(v16, v13);
  v23 = HIBYTE(v73.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
  {
    size = v73.__r_.__value_.__l.__size_;
    if (v73.__r_.__value_.__l.__size_ == 7)
    {
      if (*(_DWORD *)v73.__r_.__value_.__l.__data_ != 1868002145
        || *(_DWORD *)(v73.__r_.__value_.__r.__words[0] + 3) != 1935962735)
      {
        goto LABEL_105;
      }
      goto LABEL_44;
    }
    if (v73.__r_.__value_.__l.__size_ != 13)
      goto LABEL_72;
    v24 = (std::string *)v73.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (HIBYTE(v73.__r_.__value_.__r.__words[2]) == 7)
    {
      if (LODWORD(v73.__r_.__value_.__l.__data_) != 1868002145
        || *(_DWORD *)((char *)v73.__r_.__value_.__r.__words + 3) != 1935962735)
      {
        goto LABEL_105;
      }
      goto LABEL_44;
    }
    if (HIBYTE(v73.__r_.__value_.__r.__words[2]) != 13)
    {
LABEL_68:
      if (v23 != 8)
      {
        if (v23 != 15)
          goto LABEL_105;
        v46 = &v73;
        goto LABEL_75;
      }
      v50 = v73.__r_.__value_.__r.__words[0];
      goto LABEL_83;
    }
    v24 = &v73;
  }
  v26 = v24->__r_.__value_.__r.__words[0];
  v27 = *(std::string::size_type *)((char *)v24->__r_.__value_.__r.__words + 5);
  if (v26 == 0x6E656B6F70537361 && v27 == 0x7364726F576E656BLL)
  {
LABEL_44:
    if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v31 = &v74;
    else
      v31 = (std::string *)v74.__r_.__value_.__r.__words[0];
    if (!strstr((char *)&v66[-2504], (const char *)v31))
    {
      std::operator+<char>();
      v32 = std::string::append(&v67, "' not valid for operation '");
      v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v68.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v34 = &v73;
      else
        v34 = (std::string *)v73.__r_.__value_.__r.__words[0];
      if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = HIBYTE(v73.__r_.__value_.__r.__words[2]);
      else
        v35 = v73.__r_.__value_.__l.__size_;
      v36 = std::string::append(&v68, (const std::string::value_type *)v34, v35);
      v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v69.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      v38 = std::string::append(&v69, "' in locale '");
      v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
      v70.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v39;
      v38->__r_.__value_.__l.__size_ = 0;
      v38->__r_.__value_.__r.__words[2] = 0;
      v38->__r_.__value_.__r.__words[0] = 0;
      v40 = std::string::append(&v70, v17);
      v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
      v71.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v41;
      v40->__r_.__value_.__l.__size_ = 0;
      v40->__r_.__value_.__r.__words[2] = 0;
      v40->__r_.__value_.__r.__words[0] = 0;
      v42 = std::string::append(&v71, "'");
      v43 = v42->__r_.__value_.__r.__words[0];
      v75[0] = v42->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v75 + 7) = *(std::string::size_type *)((char *)&v42->__r_.__value_.__r.__words[1] + 7);
      v44 = HIBYTE(v42->__r_.__value_.__r.__words[2]);
      v42->__r_.__value_.__l.__size_ = 0;
      v42->__r_.__value_.__r.__words[2] = 0;
      v42->__r_.__value_.__r.__words[0] = 0;
      if (*(char *)(a3 + 23) < 0)
        operator delete(*(void **)a3);
      v45 = v75[0];
      *(_QWORD *)a3 = v43;
      *(_QWORD *)(a3 + 8) = v45;
      *(_QWORD *)(a3 + 15) = *(_QWORD *)((char *)v75 + 7);
      *(_BYTE *)(a3 + 23) = v44;
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v71.__r_.__value_.__l.__data_);
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v70.__r_.__value_.__l.__data_);
      if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v69.__r_.__value_.__l.__data_);
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v68.__r_.__value_.__l.__data_);
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v67.__r_.__value_.__l.__data_);
      v23 = HIBYTE(v73.__r_.__value_.__r.__words[2]);
    }
  }
  if ((v23 & 0x80) == 0)
    goto LABEL_68;
  size = v73.__r_.__value_.__l.__size_;
LABEL_72:
  if (size != 8)
  {
    if (size != 15)
      goto LABEL_105;
    v46 = (std::string *)v73.__r_.__value_.__r.__words[0];
LABEL_75:
    v47 = v46->__r_.__value_.__r.__words[0];
    v48 = *(std::string::size_type *)((char *)v46->__r_.__value_.__r.__words + 7);
    if (v47 != 0x616E6964724F7361 || v48 != 0x7374696769446C61)
      goto LABEL_105;
    goto LABEL_84;
  }
  v50 = *(_QWORD *)v73.__r_.__value_.__l.__data_;
LABEL_83:
  if (v50 != 0x7374696769447361)
    goto LABEL_105;
LABEL_84:
  if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v51 = &v74;
  else
    v51 = (std::string *)v74.__r_.__value_.__r.__words[0];
  if (!strstr(v16, (const char *)v51))
  {
    std::operator+<char>();
    v52 = std::string::append(&v67, "' not valid for operation '");
    v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    v68.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v53;
    v52->__r_.__value_.__l.__size_ = 0;
    v52->__r_.__value_.__r.__words[2] = 0;
    v52->__r_.__value_.__r.__words[0] = 0;
    if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v54 = &v73;
    else
      v54 = (std::string *)v73.__r_.__value_.__r.__words[0];
    if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v55 = HIBYTE(v73.__r_.__value_.__r.__words[2]);
    else
      v55 = v73.__r_.__value_.__l.__size_;
    v56 = std::string::append(&v68, (const std::string::value_type *)v54, v55);
    v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
    v69.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v57;
    v56->__r_.__value_.__l.__size_ = 0;
    v56->__r_.__value_.__r.__words[2] = 0;
    v56->__r_.__value_.__r.__words[0] = 0;
    v58 = std::string::append(&v69, "' in locale '");
    v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
    v70.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v59;
    v58->__r_.__value_.__l.__size_ = 0;
    v58->__r_.__value_.__r.__words[2] = 0;
    v58->__r_.__value_.__r.__words[0] = 0;
    v60 = std::string::append(&v70, v17);
    v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
    v71.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v61;
    v60->__r_.__value_.__l.__size_ = 0;
    v60->__r_.__value_.__r.__words[2] = 0;
    v60->__r_.__value_.__r.__words[0] = 0;
    v62 = std::string::append(&v71, "'");
    v63 = v62->__r_.__value_.__r.__words[0];
    v75[0] = v62->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v75 + 7) = *(std::string::size_type *)((char *)&v62->__r_.__value_.__r.__words[1] + 7);
    v64 = HIBYTE(v62->__r_.__value_.__r.__words[2]);
    v62->__r_.__value_.__l.__size_ = 0;
    v62->__r_.__value_.__r.__words[2] = 0;
    v62->__r_.__value_.__r.__words[0] = 0;
    if (*(char *)(a3 + 23) < 0)
      operator delete(*(void **)a3);
    v65 = v75[0];
    *(_QWORD *)a3 = v63;
    *(_QWORD *)(a3 + 8) = v65;
    *(_QWORD *)(a3 + 15) = *(_QWORD *)((char *)v75 + 7);
    *(_BYTE *)(a3 + 23) = v64;
    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v71.__r_.__value_.__l.__data_);
    if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v70.__r_.__value_.__l.__data_);
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v69.__r_.__value_.__l.__data_);
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v68.__r_.__value_.__l.__data_);
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    {
      v22 = (void *)v67.__r_.__value_.__r.__words[0];
      goto LABEL_19;
    }
  }
LABEL_105:
  unum_close();
  unum_close();
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_108;
}

void sub_1BF96B500(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  if (*(char *)(v2 - 185) < 0)
    operator delete(*(void **)(v2 - 208));
  if (*(char *)(v2 - 217) < 0)
    operator delete(*(void **)(v2 - 240));
  if (*(char *)(v2 - 249) < 0)
    operator delete(*(void **)(v2 - 272));
  if (*(char *)(v2 - 281) < 0)
    operator delete(*(void **)(v2 - 304));
  if (*(char *)(v2 - 305) < 0)
    operator delete(*(void **)(v2 - 328));
  if (*(char *)(v2 - 153) < 0)
    operator delete(*(void **)(v2 - 176));
  if (*(char *)(v2 - 121) < 0)
    operator delete(*(void **)(v2 - 144));
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::IsValidFeatureValue(siri::dialogengine *a1, uint64_t a2)
{
  _BOOL8 v2;
  uint64_t v3;
  const char *v6;
  const char *v7;
  unint64_t v8;
  void *__p[31];
  void *v11;
  uint64_t v12;
  uint64_t v13;
  std::string v14;
  _BYTE v15[128];
  void *v16[2];
  unsigned __int8 v17;

  v2 = 0;
  v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a2 + 8);
  if (a1 && v3)
  {
    siri::dialogengine::RegisterMorphunData(a1, (siri::dialogengine::Context *)a2);
    siri::dialogengine::Context::GetLocale(a1, v6, (uint64_t)v16);
    v8 = v17;
    if ((v17 & 0x80u) != 0)
      v8 = (unint64_t)v16[1];
    if (!v8)
      siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"IsValidFeatureValue has empty locale", v7);
    memset(__p, 0, 24);
    memset(&v14, 0, sizeof(v14));
    v11 = 0;
    v12 = 0;
    v13 = 0;
    morphun::util::ULocale::ULocale();
    morphun::dialog::SemanticFeatureModel::SemanticFeatureModel((morphun::dialog::SemanticFeatureModel *)__p, (const morphun::util::ULocale *)v15);
    siri::dialogengine::GrammarFeature::GetCanonicalGrammarName(a2, &v14);
    morphun::util::StringUtils::to_u16string();
    v2 = morphun::dialog::SemanticFeatureModel::getFeature() != 0;
    if (SHIBYTE(v13) < 0)
      operator delete(v11);
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
    MEMORY[0x1C3B8D2B4](__p);
    morphun::util::ULocale::~ULocale((morphun::util::ULocale *)v15);
    if ((char)v17 < 0)
      operator delete(v16[0]);
  }
  return v2;
}

void sub_1BF96B788(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 __p, uint64_t a10)
{
  uint64_t v10;
  void *v13;
  char *v14;
  std::string *v15;
  std::string *v16;
  __int128 v17;

  if (*(char *)(v10 - 33) < 0)
    operator delete(*(void **)(v10 - 56));
  if (a2 == 1)
  {
    v13 = __cxa_begin_catch(exception_object);
    v14 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v13 + 16))(v13);
    v15 = (std::string *)std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v10 - 184), v14);
    v16 = std::string::insert(v15, 0, "Failed to lookup localized feature value. No Morphun data installed? Error: ");
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    a10 = v16->__r_.__value_.__r.__words[2];
    __p = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)&__p, 3u);
    if (SHIBYTE(a10) < 0)
      operator delete((void *)__p);
    if (*(char *)(v10 - 161) < 0)
      operator delete(*(void **)(v10 - 184));
    __cxa_end_catch();
    JUMPOUT(0x1BF96B770);
  }
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetFeatureValue(siri::dialogengine *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  const char *v13;
  unint64_t v14;
  _OWORD *v15;
  std::string::size_type size;
  void *v17;
  morphun::dialog::InflectableStringConcept *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::string v24[2];
  void *v25;
  char v26;
  void *v27;
  char v28;
  void *__p;
  std::__shared_weak_count *v30;
  uint64_t v31;
  _QWORD *v32;
  std::string v33;
  std::string v34;
  void *v35[31];
  _BYTE v36[128];
  void *v37[2];
  unsigned __int8 v38;

  v8 = *(unsigned __int8 *)(a2 + 47);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a2 + 32);
  if (v8)
  {
    v9 = 0;
    if (!this)
    {
LABEL_19:
      std::string::basic_string[abi:ne180100]<0>(a4, "");
      return;
    }
  }
  else
  {
    v10 = *(unsigned __int8 *)(a2 + 23);
    if ((v10 & 0x80u) != 0)
      v10 = *(_QWORD *)(a2 + 8);
    v9 = v10 == 0;
    if (!this)
      goto LABEL_19;
  }
  if (v9)
    goto LABEL_19;
  v11 = *(unsigned __int8 *)(a3 + 23);
  if ((v11 & 0x80u) != 0)
    v11 = *(_QWORD *)(a3 + 8);
  if (!v11)
    goto LABEL_19;
  siri::dialogengine::RegisterMorphunData(this, (siri::dialogengine::Context *)a2);
  siri::dialogengine::Context::GetLocale(this, v12, (uint64_t)v37);
  v14 = v38;
  if ((v38 & 0x80u) != 0)
    v14 = (unint64_t)v37[1];
  if (!v14)
    siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"GetFeatureValue has empty locale", v13);
  memset(v35, 0, 24);
  memset(v24, 0, 24);
  __p = 0;
  v30 = 0;
  v31 = 0;
  morphun::util::ULocale::ULocale();
  morphun::dialog::SemanticFeatureModel::SemanticFeatureModel((morphun::dialog::SemanticFeatureModel *)v35, (const morphun::util::ULocale *)v36);
  v15 = (_OWORD *)(a2 + 96);
  if (*(char *)(a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(v24, *(const std::string::value_type **)(a2 + 96), *(_QWORD *)(a2 + 104));
  }
  else
  {
    *(_OWORD *)&v24[0].__r_.__value_.__l.__data_ = *v15;
    v24[0].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 112);
  }
  if ((SHIBYTE(v24[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((_BYTE *)&v24[0].__r_.__value_.__s + 23))
      goto LABEL_23;
LABEL_26:
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(v24, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v24[0] = *(std::string *)a2;
    morphun::util::StringUtils::to_u16string();
    if (SHIBYTE(v24[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24[0].__r_.__value_.__l.__data_);
    morphun::dialog::SpeakableString::SpeakableString();
    v18 = (morphun::dialog::InflectableStringConcept *)operator new();
    morphun::dialog::InflectableStringConcept::InflectableStringConcept(v18, (const morphun::dialog::SemanticFeatureModel *)v35, (const morphun::dialog::SpeakableString *)v24);
    morphun::dialog::SpeakableString::~SpeakableString((morphun::dialog::SpeakableString *)v24);
    if (SHIBYTE(v31) < 0)
      operator delete(__p);
LABEL_57:
    siri::dialogengine::GrammarFeature::GetCanonicalGrammarName(a3, v24);
    morphun::util::StringUtils::to_u16string();
    v22 = (*(uint64_t (**)(morphun::dialog::InflectableStringConcept *, void **))(*(_QWORD *)v18 + 112))(v18, &__p);
    v23 = v22;
    if (v22)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 32))(v22);
      morphun::util::StringUtils::to_string();
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(a4, "");
    }
    if (SHIBYTE(v31) < 0)
      operator delete(__p);
    if (SHIBYTE(v24[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24[0].__r_.__value_.__l.__data_);
    goto LABEL_64;
  }
  size = v24[0].__r_.__value_.__l.__size_;
  operator delete(v24[0].__r_.__value_.__l.__data_);
  if (!size)
    goto LABEL_26;
LABEL_23:
  if (*(char *)(a2 + 143) < 0)
    std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)(a2 + 120), *(_QWORD *)(a2 + 128));
  else
    v34 = *(std::string *)(a2 + 120);
  if (*(char *)(a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)(a2 + 96), *(_QWORD *)(a2 + 104));
  }
  else
  {
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = *v15;
    v33.__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 112);
  }
  siri::dialogengine::GetSemanticModel(this, &v34, (uint64_t)&__p);
  v17 = __p;
  if (__p)
  {
    morphun::util::StringUtils::to_u16string();
    morphun::util::StringUtils::to_u16string();
    morphun::dialog::SemanticValue::SemanticValue();
    v18 = (morphun::dialog::InflectableStringConcept *)operator new();
    morphun::dialog::SemanticConcept::SemanticConcept();
    morphun::dialog::SemanticValue::~SemanticValue((morphun::dialog::SemanticValue *)v24);
    if (v26 < 0)
      operator delete(v25);
    if (v28 < 0)
      operator delete(v27);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a4, "");
    v18 = 0;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v32);
  v19 = v30;
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v34.__r_.__value_.__l.__data_);
    if (v17)
    {
LABEL_47:
      if (!v18)
      {
        std::string::basic_string[abi:ne180100]<0>(a4, "");
        goto LABEL_65;
      }
      goto LABEL_57;
    }
  }
  else if (v17)
  {
    goto LABEL_47;
  }
  if (v18)
LABEL_64:
    (*(void (**)(morphun::dialog::InflectableStringConcept *))(*(_QWORD *)v18 + 16))(v18);
LABEL_65:
  MEMORY[0x1C3B8D2B4](v35);
  morphun::util::ULocale::~ULocale((morphun::util::ULocale *)v36);
  if ((char)v38 < 0)
    operator delete(v37[0]);
}

void sub_1BF96BDAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,__int128 __p,uint64_t a56)
{
  _QWORD *v56;
  uint64_t v57;
  void *v60;
  char *v61;
  std::string *v62;
  std::string *v63;
  __int128 v64;

  MEMORY[0x1C3B8D2B4](&__p);
  morphun::util::ULocale::~ULocale((morphun::util::ULocale *)(v57 - 216));
  if (*(char *)(v57 - 65) < 0)
    operator delete(*(void **)(v57 - 88));
  if (a2 == 1)
  {
    v60 = __cxa_begin_catch(a1);
    v61 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v60 + 16))(v60);
    v62 = (std::string *)std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v57 - 216), v61);
    v63 = std::string::insert(v62, 0, "Failed to lookup localized feature value: ");
    v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
    a56 = v63->__r_.__value_.__r.__words[2];
    __p = v64;
    v63->__r_.__value_.__l.__size_ = 0;
    v63->__r_.__value_.__r.__words[2] = 0;
    v63->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)&__p, 3u);
    if (SHIBYTE(a56) < 0)
      operator delete((void *)__p);
    if (*(char *)(v57 - 193) < 0)
      operator delete(*(void **)(v57 - 216));
    std::string::basic_string[abi:ne180100]<0>(v56, "");
    __cxa_end_catch();
    JUMPOUT(0x1BF96BD90);
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::GetFeatureValue(siri::dialogengine *a1@<X0>, siri::dialogengine::Context *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  morphun::dialog::LocalizedCommonConceptFactoryProvider *v7;
  uint64_t DefaultCommonConceptFactoryProvider;
  const char *v9;
  uint64_t v10;
  const morphun::dialog::SemanticFeatureModel *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  int64x2_t v25;
  _OWORD *v26;
  uint64_t v27;
  void *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t FeatureValueByName;
  uint64_t v44;
  void **v46[45];
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  char *v51;
  char *v52;
  unint64_t v53;
  int64x2_t v54;
  char *v55;

  if (!a1 || *(_QWORD *)a2 == *((_QWORD *)a2 + 1))
    goto LABEL_60;
  v5 = *(unsigned __int8 *)(a3 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a3 + 8);
  if (v5)
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    siri::dialogengine::RegisterMorphunData(a1, a2);
    DefaultCommonConceptFactoryProvider = morphun::dialog::LocalizedCommonConceptFactoryProvider::getDefaultCommonConceptFactoryProvider(v7);
    siri::dialogengine::Context::GetLocale(a1, v9, (uint64_t)&v54);
    v51 = 0;
    v52 = 0;
    v53 = 0;
    v49 = 0uLL;
    v50 = 0;
    v47 = 0uLL;
    v48 = 0;
    morphun::util::ULocale::ULocale();
    v10 = (*(uint64_t (**)(uint64_t, void ***))(*(_QWORD *)DefaultCommonConceptFactoryProvider + 24))(DefaultCommonConceptFactoryProvider, v46);
    morphun::util::ULocale::~ULocale((morphun::util::ULocale *)v46);
    if (SHIBYTE(v48) < 0)
      operator delete((void *)v47);
    if (SHIBYTE(v50) < 0)
      operator delete((void *)v49);
    if (SHIBYTE(v53) < 0)
      operator delete(v51);
    if (SHIBYTE(v55) < 0)
      operator delete((void *)v54.i64[0]);
    v11 = (const morphun::dialog::SemanticFeatureModel *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
    v54 = 0uLL;
    v55 = 0;
    v51 = 0;
    v52 = 0;
    v53 = 0;
    v12 = *(_QWORD *)a2;
    v13 = *((_QWORD *)a2 + 1);
    if (*(_QWORD *)a2 != v13)
    {
      do
      {
        morphun::util::StringUtils::to_u16string();
        morphun::dialog::SpeakableString::SpeakableString();
        if (SHIBYTE(v50) < 0)
          operator delete((void *)v49);
        v14 = operator new(0xA0uLL);
        v14[2] = 0;
        *v14 = &off_1E792FAF8;
        v14[1] = 0;
        *(_QWORD *)&v49 = morphun::dialog::InflectableStringConcept::InflectableStringConcept((morphun::dialog::InflectableStringConcept *)(v14 + 3), v11, (const morphun::dialog::SpeakableString *)v46);
        *((_QWORD *)&v49 + 1) = v14;
        v15 = (_QWORD *)v54.i64[1];
        if (v54.i64[1] >= (unint64_t)v55)
        {
          v16 = (_QWORD *)v54.i64[0];
          v17 = (v54.i64[1] - v54.i64[0]) >> 4;
          v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 60)
            std::vector<BOOL>::__throw_length_error[abi:ne180100]();
          v19 = (uint64_t)&v55[-v54.i64[0]];
          if ((uint64_t)&v55[-v54.i64[0]] >> 3 > v18)
            v18 = v19 >> 3;
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0)
            v20 = 0xFFFFFFFFFFFFFFFLL;
          else
            v20 = v18;
          if (v20 >> 60)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v21 = (char *)operator new(16 * v20);
          v22 = &v21[16 * v17];
          *(_OWORD *)v22 = v49;
          v49 = 0uLL;
          if (v15 == v16)
          {
            v25 = vdupq_n_s64((unint64_t)v15);
            v23 = &v21[16 * v17];
          }
          else
          {
            v23 = &v21[16 * v17];
            do
            {
              v24 = *((_OWORD *)v15 - 1);
              v15 -= 2;
              *((_OWORD *)v23 - 1) = v24;
              v23 -= 16;
              *v15 = 0;
              v15[1] = 0;
            }
            while (v15 != v16);
            v25 = v54;
          }
          v26 = v22 + 16;
          v54.i64[0] = (uint64_t)v23;
          v54.i64[1] = (uint64_t)(v22 + 16);
          v55 = &v21[16 * v20];
          v27 = v25.i64[1];
          v28 = (void *)v25.i64[0];
          while ((void *)v27 != v28)
            v27 = std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v27 - 16);
          if (v28)
            operator delete(v28);
          v29 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
          v54.i64[1] = (uint64_t)v26;
          if (*((_QWORD *)&v49 + 1))
          {
            v30 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
            do
              v31 = __ldaxr(v30);
            while (__stlxr(v31 - 1, v30));
            if (!v31)
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v29);
            }
          }
        }
        else
        {
          *(_OWORD *)v54.i64[1] = v49;
          v54.i64[1] = (uint64_t)(v15 + 2);
        }
        v32 = *(_QWORD *)(v54.i64[1] - 16);
        v33 = v52;
        if ((unint64_t)v52 >= v53)
        {
          v35 = (v52 - v51) >> 3;
          if ((unint64_t)(v35 + 1) >> 61)
            std::vector<BOOL>::__throw_length_error[abi:ne180100]();
          v36 = (uint64_t)(v53 - (_QWORD)v51) >> 2;
          if (v36 <= v35 + 1)
            v36 = v35 + 1;
          if (v53 - (unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8)
            v37 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v37 = v36;
          if (v37)
            v37 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v37);
          else
            v38 = 0;
          v39 = (char *)(v37 + 8 * v35);
          *(_QWORD *)v39 = v32;
          v34 = v39 + 8;
          v41 = v51;
          v40 = v52;
          if (v52 != v51)
          {
            do
            {
              v42 = *((_QWORD *)v40 - 1);
              v40 -= 8;
              *((_QWORD *)v39 - 1) = v42;
              v39 -= 8;
            }
            while (v40 != v41);
            v40 = v51;
          }
          v51 = v39;
          v52 = v34;
          v53 = v37 + 8 * v38;
          if (v40)
            operator delete(v40);
        }
        else
        {
          *(_QWORD *)v52 = v32;
          v34 = v33 + 8;
        }
        v52 = v34;
        morphun::dialog::SpeakableString::~SpeakableString((morphun::dialog::SpeakableString *)v46);
        v12 += 24;
      }
      while (v12 != v13);
    }
    morphun::dialog::SemanticConceptList::SemanticConceptList();
    morphun::util::StringUtils::to_u16string();
    FeatureValueByName = morphun::dialog::SemanticFeatureConceptBase::getFeatureValueByName();
    v44 = FeatureValueByName;
    if (FeatureValueByName)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)FeatureValueByName + 32))(FeatureValueByName);
      morphun::util::StringUtils::to_string();
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v47, "");
    }
    if (*(char *)(a4 + 23) < 0)
      operator delete(*(void **)a4);
    *(_OWORD *)a4 = v47;
    *(_QWORD *)(a4 + 16) = v48;
    if (v44)
      (*(void (**)(uint64_t))(*(_QWORD *)v44 + 16))(v44);
    if (SHIBYTE(v50) < 0)
      operator delete((void *)v49);
    morphun::dialog::SemanticConceptList::~SemanticConceptList((morphun::dialog::SemanticConceptList *)v46);
    if (v51)
    {
      v52 = v51;
      operator delete(v51);
    }
    v46[0] = (void **)&v54;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](v46);
  }
  else
  {
LABEL_60:
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)a4, "");
  }
}

void sub_1BF96C564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 __p, uint64_t a12)
{
  uint64_t v12;
  void *v15;
  void *v16;
  char *v17;
  std::string *v18;
  std::string *v19;
  __int128 v20;

  if (*(char *)(v12 - 137) < 0)
    operator delete(*(void **)(v12 - 160));
  morphun::dialog::SemanticConceptList::~SemanticConceptList((morphun::dialog::SemanticConceptList *)&__p);
  v15 = *(void **)(v12 - 136);
  if (v15)
  {
    *(_QWORD *)(v12 - 128) = v15;
    operator delete(v15);
  }
  *(_QWORD *)&__p = v12 - 112;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a2 == 1)
  {
    v16 = __cxa_begin_catch(a1);
    v17 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v16 + 16))(v16);
    v18 = (std::string *)std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v12 - 112), v17);
    v19 = std::string::insert(v18, 0, "Unable to use Morphun to determine gender: ");
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    a12 = v19->__r_.__value_.__r.__words[2];
    __p = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)&__p, 3u);
    if (SHIBYTE(a12) < 0)
      operator delete((void *)__p);
    if (*(char *)(v12 - 89) < 0)
      operator delete(*(void **)(v12 - 112));
    MEMORY[0x1C3B8D53C](a10, "");
    __cxa_end_catch();
    JUMPOUT(0x1BF96C52CLL);
  }
  if (*(char *)(a10 + 23) < 0)
    operator delete(*(void **)a10);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<morphun::dialog::InflectableStringConcept>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E792FAF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<morphun::dialog::InflectableStringConcept>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E792FAF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_emplace<morphun::dialog::InflectableStringConcept>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

BOOL siri::dialogengine::AreMorphunAssetsAvailable(const std::string *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::string __p;
  uint64_t v11;
  std::__shared_weak_count *v12;
  _QWORD *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  _QWORD v16[63];
  _QWORD v17[376];

  siri::dialogengine::Context::Context((siri::dialogengine::Context *)v16);
  std::allocate_shared[abi:ne180100]<siri::dialogengine::File,std::allocator<siri::dialogengine::File>,std::string const&,void>(&v14, a1);
  v2 = v15;
  std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100](v17, v14, (uint64_t)v15);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "personRelationship");
  siri::dialogengine::GetSemanticModel(v16, &__p, (uint64_t)&v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v5 = v11;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v13);
  v6 = v12;
  if (v12)
  {
    v7 = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  siri::dialogengine::Context::~Context((siri::dialogengine::Context *)v16);
  return v5 != 0;
}

void sub_1BF96C920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a14 < 0)
    operator delete(__p);
  siri::dialogengine::Context::~Context((siri::dialogengine::Context *)&a23);
  _Unwind_Resume(a1);
}

uint64_t std::allocate_shared[abi:ne180100]<siri::dialogengine::File,std::allocator<siri::dialogengine::File>,std::string const&,void>(uint64_t *a1, const std::string *a2)
{
  _QWORD *v4;
  uint64_t result;

  v4 = operator new(0x308uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E7935938;
  result = siri::dialogengine::File::File((uint64_t)(v4 + 3), a2);
  *a1 = result;
  a1[1] = (uint64_t)v4;
  return result;
}

void sub_1BF96C9A0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<siri::dialogengine::File>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7935938;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::dialogengine::File>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7935938;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::File>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t siri::dialogengine::AreLanguageScriptCompatible()
{
  uint64_t v0;
  void *v2[22];
  _BYTE v3[128];

  memset(v2, 0, 24);
  morphun::util::ULocale::ULocale();
  memset(&v2[16], 0, 48);
  morphun::util::ULocale::ULocale();
  v0 = morphun::util::LocaleUtils::areLanguageScriptCompatible();
  morphun::util::ULocale::~ULocale((morphun::util::ULocale *)v2);
  morphun::util::ULocale::~ULocale((morphun::util::ULocale *)v3);
  return v0;
}

void sub_1BF96CB10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;

  morphun::util::ULocale::~ULocale((morphun::util::ULocale *)&a16);
  morphun::util::ULocale::~ULocale((morphun::util::ULocale *)(v40 - 144));
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::GetMorphunVersion@<X0>(siri::dialogengine *this@<X0>, _QWORD *a2@<X8>)
{
  char *LibraryVersion;

  LibraryVersion = (char *)morphun::util::VersionUtils::getLibraryVersion(this);
  return std::string::basic_string[abi:ne180100]<0>(a2, LibraryVersion);
}

void sub_1BF96CCA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1BF96CE60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  a12 = (void **)&a14;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::ShouldIncludeEnglishAsFallback(siri::dialogengine *this)
{
  return os_variant_has_internal_diagnostics();
}

void siri::dialogengine::GetFallbackLocales(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  std::string::size_type v4;
  unsigned __int8 v5;
  uint64_t v6;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  std::string::size_type size;
  std::string *v11;
  __int128 v12;
  std::string *p_p;
  std::string::size_type v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  std::string::size_type v20;
  int v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string::size_type v25;
  int v26;
  std::string::size_type v27;
  __int128 v28;
  std::string *v29;
  std::string *v30;
  uint64_t v31;
  std::string::size_type v32;
  std::string::size_type v33;
  int v34;
  std::string::size_type v35;
  std::string *v36;
  uint64_t v37;
  __int128 v38;
  std::string *j;
  __int128 v40;
  unint64_t v41;
  __int128 v42;
  std::string *v43;
  std::string::size_type v44;
  size_t v45;
  std::string::size_type v46;
  char v47;
  std::string::size_type v48;
  std::string::size_type v49;
  std::string *v50;
  size_t *v51;
  uint64_t v52;
  __int128 v53;
  const std::string::value_type *v54;
  std::string::size_type v55;
  std::string::size_type v56;
  std::string::size_type v57;
  std::string *v58;
  std::string *v59;
  uint64_t v60;
  __int128 v61;
  const std::string::value_type *v62;
  uint64_t v63;
  std::string::size_type v64;
  std::string::size_type v65;
  std::string::size_type v66;
  std::string *v67;
  std::string *v68;
  __int128 v69;
  std::string::value_type *v70;
  uint64_t v71;
  uint64_t i;
  std::string v73;
  size_t __n[2];
  int64_t v75;
  std::string v76;
  std::string v77;
  std::string v78;
  std::string v79;
  std::string v80;
  std::string v81;
  std::string v82;
  char v83[8];
  _QWORD *v84;
  std::string *v85;
  std::string *v86;
  std::string *v87;
  std::string __p;
  std::string v89;
  std::string v90;
  __int128 v91;
  uint64_t v92[6];
  uint64_t v93;
  std::string __s;
  uint64_t v95;
  uint64_t v96[6];
  uint64_t v97[5];
  std::string v98;
  uint64_t v99[6];
  uint64_t v100[6];
  uint64_t v101[6];
  uint64_t v102[6];
  uint64_t v103[6];
  uint64_t v104[6];
  uint64_t v105[6];
  uint64_t v106[6];
  uint64_t v107[6];
  uint64_t v108[6];
  uint64_t v109[6];
  uint64_t v110[6];
  uint64_t v111[6];
  uint64_t v112[6];
  uint64_t v113[6];
  _QWORD v114[10];

  v114[7] = *MEMORY[0x1E0C80C00];
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 23))
    {
      v90 = *(std::string *)a1;
      goto LABEL_6;
    }
LABEL_38:
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return;
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_38;
  std::string::__init_copy_ctor_external(&v90, *(const std::string::value_type **)a1, v4);
LABEL_6:
  v85 = 0;
  v86 = 0;
  v87 = 0;
  v81.__r_.__value_.__r.__words[0] = (std::string::size_type)&v85;
  v81.__r_.__value_.__s.__data_[8] = 0;
  v85 = (std::string *)operator new(0x18uLL);
  v86 = v85;
  v87 = v85 + 1;
  v86 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v87, (__int128 *)&v90, &v91, v85);
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v90.__r_.__value_.__l.__data_);
  {
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(&v90, "en_CA", "en_US");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v92, "en_AU", "en_US");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(&v93, "en_GB", "en_US");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v96, "en_NZ", "en_AU");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v97, "en_ZA", "en_GB");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(&v98.__r_.__value_.__l.__size_, "en_IE", "en_GB");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v99, "en_IN", "en_GB");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v100, "en_SG", "en_GB");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v101, "de_AT", "de_DE");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v102, "de_CH", "de_DE");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v103, "es_US", "es_MX");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v104, "es_CL", "es_MX");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v105, "fr_BE", "fr_FR");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v106, "fr_CA", "fr_FR");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v107, "fr_CH", "fr_FR");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v108, "hi", "en_IN");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[3],0>(v109);
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v110, "it_CH", "it_IT");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v111, "nl_BE", "nl_NL");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[6],0>(v112, "yue", "zh_HK");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[6],0>(v113);
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[6],0>(v114, "wuu", "zh_CN");
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&siri::dialogengine::GetFallbackMap(void)::sFallbackMap, (const void **)&v90.__r_.__value_.__l.__data_, 22);
    for (i = 1008; i != -48; i -= 48)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v90 + i);
    __cxa_atexit((void (*)(void *))std::map<std::string,std::string>::~map[abi:ne180100], &siri::dialogengine::GetFallbackMap(void)::sFallbackMap, &dword_1BF794000);
  }
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v83, (const void ***)&siri::dialogengine::GetFallbackMap(void)::sFallbackMap);
  siri::dialogengine::GetCanonicalLocale((const std::string *)a1, 0, &v90);
  v6 = std::__tree<std::string>::find<std::string>((uint64_t)v83, (const void **)&v90.__r_.__value_.__l.__data_);
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v90.__r_.__value_.__l.__data_);
  while (&v84 != (_QWORD **)v6)
  {
    v7 = v86;
    if (v86 >= v87)
    {
      v9 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v85, (__int128 *)(v6 + 56));
    }
    else
    {
      if (*(char *)(v6 + 79) < 0)
      {
        std::string::__init_copy_ctor_external(v86, *(const std::string::value_type **)(v6 + 56), *(_QWORD *)(v6 + 64));
      }
      else
      {
        v8 = *(_OWORD *)(v6 + 56);
        v86->__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 72);
        *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
      }
      v9 = v7 + 1;
    }
    v86 = v9;
    v6 = std::__tree<std::string>::find<std::string>((uint64_t)v83, (const void **)(v6 + 56));
  }
  siri::dialogengine::GetLocaleCountry(&v82);
  size = HIBYTE(v82.__r_.__value_.__r.__words[2]);
  if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v82.__r_.__value_.__l.__size_;
  if (size)
  {
    siri::dialogengine::GetLocaleLanguage(&v89);
    v11 = std::string::append(&v89, "_");
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v81.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::GetLocaleCountry(&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v14 = __p.__r_.__value_.__l.__size_;
    v15 = std::string::append(&v81, (const std::string::value_type *)p_p, v14);
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v90.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v81.__r_.__value_.__l.__data_);
    if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v89.__r_.__value_.__l.__data_);
    v17 = v86;
    if ((std::string *)std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>((uint64_t)v85, (uint64_t)v86, (unsigned __int8 **)&v90) == v17)
    {
      if (v17 >= v87)
      {
        v19 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v85, (__int128 *)&v90);
      }
      else
      {
        if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v17, v90.__r_.__value_.__l.__data_, v90.__r_.__value_.__l.__size_);
        }
        else
        {
          v18 = *(_OWORD *)&v90.__r_.__value_.__l.__data_;
          v17->__r_.__value_.__r.__words[2] = v90.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
        }
        v19 = v17 + 1;
      }
      v86 = v19;
    }
    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v90.__r_.__value_.__l.__data_);
  }
  memset(&v90, 0, sizeof(v90));
  memset(&v89, 0, sizeof(v89));
  memset(&__p, 0, sizeof(__p));
  morphun::util::ULocale::ULocale();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v89.__r_.__value_.__l.__data_);
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v90.__r_.__value_.__l.__data_);
  morphun::util::LocaleUtils::getFallbackPair();
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v80, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v80 = __s;
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v79, v98.__r_.__value_.__l.__data_, v98.__r_.__value_.__l.__size_);
  else
    v79 = v98;
  v20 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
  v21 = SHIBYTE(v80.__r_.__value_.__r.__words[2]);
  v22 = v80.__r_.__value_.__l.__size_;
  if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v20 = v80.__r_.__value_.__l.__size_;
  v23 = v86;
  if (v20
    && (std::string *)std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>((uint64_t)v85, (uint64_t)v86, (unsigned __int8 **)&v80) == v23)
  {
    if (v23 >= v87)
    {
      v23 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v85, (__int128 *)&v80);
    }
    else
    {
      if (v21 < 0)
      {
        std::string::__init_copy_ctor_external(v23, v80.__r_.__value_.__l.__data_, v22);
      }
      else
      {
        v24 = *(_OWORD *)&v80.__r_.__value_.__l.__data_;
        v23->__r_.__value_.__r.__words[2] = v80.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v24;
      }
      ++v23;
    }
    v86 = v23;
  }
  v25 = HIBYTE(v79.__r_.__value_.__r.__words[2]);
  v26 = SHIBYTE(v79.__r_.__value_.__r.__words[2]);
  v27 = v79.__r_.__value_.__l.__size_;
  if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v25 = v79.__r_.__value_.__l.__size_;
  if (v25
    && (std::string *)std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>((uint64_t)v85, (uint64_t)v23, (unsigned __int8 **)&v79) == v23)
  {
    if (v23 >= v87)
    {
      v29 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v85, (__int128 *)&v79);
    }
    else
    {
      if (v26 < 0)
      {
        std::string::__init_copy_ctor_external(v23, v79.__r_.__value_.__l.__data_, v27);
      }
      else
      {
        v28 = *(_OWORD *)&v79.__r_.__value_.__l.__data_;
        v23->__r_.__value_.__r.__words[2] = v79.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v28;
      }
      v29 = v23 + 1;
    }
    v86 = v29;
  }
  siri::dialogengine::GetLocaleLanguage(&v78);
  v30 = v86;
  v31 = HIBYTE(v86[-1].__r_.__value_.__r.__words[2]);
  if ((v31 & 0x80u) == 0)
    v32 = HIBYTE(v86[-1].__r_.__value_.__r.__words[2]);
  else
    v32 = v86[-1].__r_.__value_.__l.__size_;
  v33 = HIBYTE(v78.__r_.__value_.__r.__words[2]);
  v34 = SHIBYTE(v78.__r_.__value_.__r.__words[2]);
  v35 = v78.__r_.__value_.__l.__size_;
  if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v33 = v78.__r_.__value_.__l.__size_;
  if (v32 != v33)
    goto LABEL_95;
  if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v36 = &v78;
  else
    v36 = (std::string *)v78.__r_.__value_.__r.__words[0];
  if ((v31 & 0x80) != 0)
  {
    if (!memcmp(v86[-1].__r_.__value_.__l.__data_, v36, v86[-1].__r_.__value_.__l.__size_))
      goto LABEL_102;
LABEL_95:
    if (v30 >= v87)
    {
      v30 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v85, (__int128 *)&v78);
    }
    else
    {
      if (v34 < 0)
      {
        std::string::__init_copy_ctor_external(v30, v78.__r_.__value_.__l.__data_, v35);
      }
      else
      {
        v38 = *(_OWORD *)&v78.__r_.__value_.__l.__data_;
        v30->__r_.__value_.__r.__words[2] = v78.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v30->__r_.__value_.__l.__data_ = v38;
      }
      ++v30;
    }
    v86 = v30;
    goto LABEL_102;
  }
  if (*((_BYTE *)&v86[-1].__r_.__value_.__s + 23))
  {
    v37 = 0;
    while (v86[-1].__r_.__value_.__s.__data_[v37] == v36->__r_.__value_.__s.__data_[v37])
    {
      if (v31 == ++v37)
        goto LABEL_102;
    }
    goto LABEL_95;
  }
LABEL_102:
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  for (j = v85; j != v30; ++j)
  {
    if (SHIBYTE(j->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v77, j->__r_.__value_.__l.__data_, j->__r_.__value_.__l.__size_);
    }
    else
    {
      v40 = *(_OWORD *)&j->__r_.__value_.__l.__data_;
      v77.__r_.__value_.__r.__words[2] = j->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v40;
    }
    siri::dialogengine::GetCanonicalLocale(&v77, 0, &v76);
    siri::dialogengine::StringToLower((uint64_t)&v76, (uint64_t)__n);
    std::string::basic_string[abi:ne180100]<0>(&v89, "_");
    std::string::basic_string[abi:ne180100]<0>(&__p, "-");
    siri::dialogengine::StringReplace((uint64_t)&v76, (char *)&v89, (uint64_t)&__p, 0, &v73);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v89.__r_.__value_.__l.__data_);
    siri::dialogengine::StringToLower((uint64_t)&v73, (uint64_t)&v89);
    v41 = a2[1];
    if (v41 >= a2[2])
    {
      v43 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(a2, (__int128 *)&v76);
    }
    else
    {
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)a2[1], v76.__r_.__value_.__l.__data_, v76.__r_.__value_.__l.__size_);
      }
      else
      {
        v42 = *(_OWORD *)&v76.__r_.__value_.__l.__data_;
        *(_QWORD *)(v41 + 16) = *((_QWORD *)&v76.__r_.__value_.__l + 2);
        *(_OWORD *)v41 = v42;
      }
      v43 = (std::string *)(v41 + 24);
      a2[1] = (uint64_t)v43;
    }
    a2[1] = (uint64_t)v43;
    v44 = __n[1];
    if (v75 >= 0)
      v45 = HIBYTE(v75);
    else
      v45 = __n[1];
    v46 = HIBYTE(v76.__r_.__value_.__r.__words[2]);
    v47 = HIBYTE(v76.__r_.__value_.__r.__words[2]);
    v48 = v76.__r_.__value_.__l.__size_;
    if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v49 = HIBYTE(v76.__r_.__value_.__r.__words[2]);
    else
      v49 = v76.__r_.__value_.__l.__size_;
    if (v45 == v49)
    {
      if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v50 = &v76;
      else
        v50 = (std::string *)v76.__r_.__value_.__r.__words[0];
      if (v75 < 0)
      {
        v54 = (const std::string::value_type *)__n[0];
        if (!memcmp((const void *)__n[0], v50, __n[1]))
          goto LABEL_142;
        if ((unint64_t)v43 < a2[2])
          goto LABEL_139;
        goto LABEL_137;
      }
      if (!HIBYTE(v75))
        goto LABEL_142;
      v51 = __n;
      v52 = HIBYTE(v75);
      while (*(unsigned __int8 *)v51 == v50->__r_.__value_.__s.__data_[0])
      {
        v51 = (size_t *)((char *)v51 + 1);
        v50 = (std::string *)((char *)v50 + 1);
        if (!--v52)
          goto LABEL_142;
      }
    }
    if ((unint64_t)v43 < a2[2])
    {
      if (v75 < 0)
      {
        v54 = (const std::string::value_type *)__n[0];
LABEL_139:
        std::string::__init_copy_ctor_external(v43, v54, v44);
      }
      else
      {
        v53 = *(_OWORD *)__n;
        v43->__r_.__value_.__r.__words[2] = v75;
        *(_OWORD *)&v43->__r_.__value_.__l.__data_ = v53;
      }
      a2[1] = (uint64_t)++v43;
      goto LABEL_141;
    }
LABEL_137:
    v43 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(a2, (__int128 *)__n);
LABEL_141:
    a2[1] = (uint64_t)v43;
    v46 = HIBYTE(v76.__r_.__value_.__r.__words[2]);
    v48 = v76.__r_.__value_.__l.__size_;
    v47 = HIBYTE(v76.__r_.__value_.__r.__words[2]);
LABEL_142:
    v55 = v73.__r_.__value_.__l.__size_;
    if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v56 = HIBYTE(v73.__r_.__value_.__r.__words[2]);
    else
      v56 = v73.__r_.__value_.__l.__size_;
    if (v47 >= 0)
      v57 = v46;
    else
      v57 = v48;
    if (v56 == v57)
    {
      if (v47 >= 0)
        v58 = &v76;
      else
        v58 = (std::string *)v76.__r_.__value_.__r.__words[0];
      if ((*((_BYTE *)&v73.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        v62 = (const std::string::value_type *)v73.__r_.__value_.__r.__words[0];
        if (!memcmp(v73.__r_.__value_.__l.__data_, v58, v73.__r_.__value_.__l.__size_))
          goto LABEL_168;
        if ((unint64_t)v43 < a2[2])
          goto LABEL_165;
        goto LABEL_163;
      }
      if (!*((_BYTE *)&v73.__r_.__value_.__s + 23))
        goto LABEL_168;
      v59 = &v73;
      v60 = HIBYTE(v73.__r_.__value_.__r.__words[2]);
      while (v59->__r_.__value_.__s.__data_[0] == v58->__r_.__value_.__s.__data_[0])
      {
        v59 = (std::string *)((char *)v59 + 1);
        v58 = (std::string *)((char *)v58 + 1);
        if (!--v60)
          goto LABEL_168;
      }
    }
    if ((unint64_t)v43 < a2[2])
    {
      if ((*((_BYTE *)&v73.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        v62 = (const std::string::value_type *)v73.__r_.__value_.__r.__words[0];
LABEL_165:
        std::string::__init_copy_ctor_external(v43, v62, v55);
      }
      else
      {
        v61 = *(_OWORD *)&v73.__r_.__value_.__l.__data_;
        v43->__r_.__value_.__r.__words[2] = v73.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v43->__r_.__value_.__l.__data_ = v61;
      }
      a2[1] = (uint64_t)++v43;
      goto LABEL_167;
    }
LABEL_163:
    v43 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(a2, (__int128 *)&v73);
LABEL_167:
    a2[1] = (uint64_t)v43;
    v46 = HIBYTE(v76.__r_.__value_.__r.__words[2]);
    v48 = v76.__r_.__value_.__l.__size_;
    v47 = HIBYTE(v76.__r_.__value_.__r.__words[2]);
LABEL_168:
    v63 = HIBYTE(v89.__r_.__value_.__r.__words[2]);
    v64 = v89.__r_.__value_.__l.__size_;
    if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v65 = HIBYTE(v89.__r_.__value_.__r.__words[2]);
    else
      v65 = v89.__r_.__value_.__l.__size_;
    if (v47 >= 0)
      v66 = v46;
    else
      v66 = v48;
    if (v65 == v66)
    {
      if (v47 >= 0)
        v67 = &v76;
      else
        v67 = (std::string *)v76.__r_.__value_.__r.__words[0];
      if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
      {
        v70 = (std::string::value_type *)v89.__r_.__value_.__r.__words[0];
        if (!memcmp(v89.__r_.__value_.__l.__data_, v67, v89.__r_.__value_.__l.__size_))
          goto LABEL_196;
        if ((unint64_t)v43 >= a2[2])
        {
LABEL_190:
          v71 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a2, (__int128 *)&v89);
          goto LABEL_194;
        }
        goto LABEL_192;
      }
      if (!*((_BYTE *)&v89.__r_.__value_.__s + 23))
        goto LABEL_197;
      v68 = &v89;
      while (v68->__r_.__value_.__s.__data_[0] == v67->__r_.__value_.__s.__data_[0])
      {
        v68 = (std::string *)((char *)v68 + 1);
        v67 = (std::string *)((char *)v67 + 1);
        if (!--v63)
        {
          if ((*((_BYTE *)&v89.__r_.__value_.__s + 23) & 0x80) == 0)
            goto LABEL_197;
          goto LABEL_195;
        }
      }
    }
    if ((unint64_t)v43 >= a2[2])
      goto LABEL_190;
    if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
    {
      v70 = (std::string::value_type *)v89.__r_.__value_.__r.__words[0];
LABEL_192:
      std::string::__init_copy_ctor_external(v43, v70, v64);
      goto LABEL_193;
    }
    v69 = *(_OWORD *)&v89.__r_.__value_.__l.__data_;
    v43->__r_.__value_.__r.__words[2] = v89.__r_.__value_.__r.__words[2];
    *(_OWORD *)&v43->__r_.__value_.__l.__data_ = v69;
LABEL_193:
    v71 = (uint64_t)&v43[1];
    a2[1] = (uint64_t)&v43[1];
LABEL_194:
    a2[1] = v71;
    if ((*((_BYTE *)&v89.__r_.__value_.__s + 23) & 0x80) != 0)
    {
LABEL_195:
      v70 = (std::string::value_type *)v89.__r_.__value_.__r.__words[0];
LABEL_196:
      operator delete(v70);
    }
LABEL_197:
    if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v73.__r_.__value_.__l.__data_);
    if (SHIBYTE(v75) < 0)
      operator delete((void *)__n[0]);
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v76.__r_.__value_.__l.__data_);
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v77.__r_.__value_.__l.__data_);
  }
  siri::dialogengine::RemoveDuplicateStrings(a2);
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v78.__r_.__value_.__l.__data_);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v80.__r_.__value_.__l.__data_);
  morphun::util::ULocale::~ULocale((morphun::util::ULocale *)&v95);
  morphun::util::ULocale::~ULocale((morphun::util::ULocale *)&v90);
  morphun::util::ULocale::~ULocale((morphun::util::ULocale *)&v81);
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v82.__r_.__value_.__l.__data_);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v84);
  v90.__r_.__value_.__r.__words[0] = (std::string::size_type)&v85;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v90);
}

void sub_1BF96DC5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  void *a65;
  uint64_t v65;
  uint64_t i;

  for (i = 1008; i != -48; i -= 48)
    std::pair<std::string const,std::string>::~pair(v65 + i);
  a65 = &a56;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a65);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BF96DF68(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[3],0>(_QWORD *a1)
{
  _QWORD *v2;

  v2 = std::string::basic_string[abi:ne180100]<0>(a1, "hi_IN");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "hi");
  return a1;
}

void sub_1BF96DFC0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[6],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BF96E010(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[6],0>(_QWORD *a1)
{
  _QWORD *v2;

  v2 = std::string::basic_string[abi:ne180100]<0>(a1, "vi_VN_u_sd_vnct");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "vi_VN");
  return a1;
}

void sub_1BF96E068(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

double siri::dialogengine::GetCanonicalLocale@<D0>(const std::string *a1@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  std::string *p_str;
  int64_t size;
  _BYTE *v7;
  std::string *v8;
  _BYTE *v9;
  unint64_t v10;
  std::string::size_type v11;
  std::string::size_type v12;
  int64_t v13;
  std::string *v14;
  _BYTE *v15;
  std::string *v16;
  _BYTE *v17;
  int64_t v18;
  std::string *v19;
  uint64_t v20;
  uint64_t i;
  std::string *v22;
  std::string::value_type v23;
  std::string *v24;
  std::string *v25;
  unsigned __int8 *v26;
  std::string *v27;
  std::string *v28;
  std::string *v29;
  unsigned __int8 *v30;
  int v31;
  double result;
  std::string *v33;
  unsigned __int8 *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  std::string *v39;
  unsigned int v40;
  int v41;
  std::string *v42;
  std::string::value_type v43;
  std::string *v44;
  BOOL v45;
  BOOL v46;
  const char *v47;
  _BOOL4 v48;
  void *__p[2];
  char v50;
  void *v51[2];
  char v52;
  std::string v53;
  std::string __str;

  p_str = &__str;
  siri::dialogengine::StringTrim("-_ \t\n\r", a1, &__str);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  else
    size = __str.__r_.__value_.__l.__size_;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  if (size >= 1)
  {
    v7 = (char *)p_str + size;
    v8 = p_str;
    do
    {
      v9 = memchr(v8, 64, size);
      if (!v9)
        break;
      if (*v9 == 64)
      {
        if (v9 != v7 && v9 - (_BYTE *)p_str != -1)
        {
          std::string::basic_string(&v53, &__str, 0, v9 - (_BYTE *)p_str, (std::allocator<char> *)v51);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          __str = v53;
        }
        break;
      }
      v8 = (std::string *)(v9 + 1);
      size = v7 - (_BYTE *)v8;
    }
    while (v7 - (_BYTE *)v8 >= 1);
  }
  if (a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v51, "_");
    std::string::basic_string[abi:ne180100]<0>(__p, "-");
    siri::dialogengine::StringReplace((uint64_t)&__str, (char *)v51, (uint64_t)__p, 0, &v53);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    __str = v53;
    *((_BYTE *)&v53.__r_.__value_.__s + 23) = 0;
    v53.__r_.__value_.__s.__data_[0] = 0;
    if (v50 < 0)
      operator delete(__p[0]);
    if (v52 < 0)
      operator delete(v51[0]);
    LOBYTE(v10) = *((_BYTE *)&__str.__r_.__value_.__s + 23);
    v11 = __str.__r_.__value_.__l.__size_;
    v12 = __str.__r_.__value_.__r.__words[0];
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    else
      v13 = __str.__r_.__value_.__l.__size_;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = &__str;
    else
      v14 = (std::string *)__str.__r_.__value_.__r.__words[0];
    if (v13 >= 1)
    {
      v15 = (char *)v14 + v13;
      v16 = v14;
      do
      {
        v17 = memchr(v16, 45, v13);
        if (!v17)
          break;
        if (*v17 == 45)
          goto LABEL_54;
        v16 = (std::string *)(v17 + 1);
        v13 = v15 - (_BYTE *)v16;
      }
      while (v15 - (_BYTE *)v16 >= 1);
    }
    goto LABEL_78;
  }
  std::string::basic_string[abi:ne180100]<0>(v51, "-");
  std::string::basic_string[abi:ne180100]<0>(__p, "_");
  siri::dialogengine::StringReplace((uint64_t)&__str, (char *)v51, (uint64_t)__p, 0, &v53);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  __str = v53;
  *((_BYTE *)&v53.__r_.__value_.__s + 23) = 0;
  v53.__r_.__value_.__s.__data_[0] = 0;
  if (v50 < 0)
    operator delete(__p[0]);
  if (v52 < 0)
    operator delete(v51[0]);
  LOBYTE(v10) = *((_BYTE *)&__str.__r_.__value_.__s + 23);
  v11 = __str.__r_.__value_.__l.__size_;
  v12 = __str.__r_.__value_.__r.__words[0];
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  else
    v18 = __str.__r_.__value_.__l.__size_;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = &__str;
  else
    v14 = (std::string *)__str.__r_.__value_.__r.__words[0];
  if (v18 >= 1)
  {
    v15 = (char *)v14 + v18;
    v19 = v14;
    while (1)
    {
      v17 = memchr(v19, 95, v18);
      if (!v17)
        goto LABEL_78;
      if (*v17 == 95)
        break;
      v19 = (std::string *)(v17 + 1);
      v18 = v15 - (_BYTE *)v19;
      if (v15 - (_BYTE *)v19 < 1)
        goto LABEL_78;
    }
LABEL_54:
    if (v17 != v15)
    {
      v20 = v17 - (_BYTE *)v14;
      if (v20 != -1)
      {
        if (v20)
        {
          for (i = 0; i != v20; ++i)
          {
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v22 = &__str;
            else
              v22 = (std::string *)__str.__r_.__value_.__r.__words[0];
            v23 = __tolower(v22->__r_.__value_.__s.__data_[i]);
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v24 = &__str;
            else
              v24 = (std::string *)__str.__r_.__value_.__r.__words[0];
            v24->__r_.__value_.__s.__data_[i] = v23;
          }
          LOBYTE(v10) = *((_BYTE *)&__str.__r_.__value_.__s + 23);
          v11 = __str.__r_.__value_.__l.__size_;
          v12 = __str.__r_.__value_.__r.__words[0];
        }
        v25 = &__str;
        if ((v10 & 0x80u) == 0)
        {
          v10 = v10;
        }
        else
        {
          v25 = (std::string *)v12;
          v10 = v11;
        }
        v26 = (unsigned __int8 *)v25 + v10;
        if (a2)
        {
          if (v10)
          {
            v27 = v25;
            v28 = (std::string *)((char *)v25 + v10);
            do
            {
              v29 = v27;
              v30 = (unsigned __int8 *)v27;
              while (1)
              {
                v31 = *v30++;
                if (v31 == 45)
                  break;
                v29 = (std::string *)v30;
                if (v30 == v26)
                  goto LABEL_88;
              }
              v27 = (std::string *)((char *)&v29->__r_.__value_.__l.__data_ + 1);
              v28 = v29;
            }
            while (v30 != v26);
            goto LABEL_90;
          }
        }
        else if (v10)
        {
          v33 = v25;
          v28 = (std::string *)((char *)v25 + v10);
          while (2)
          {
            v29 = v33;
            v34 = (unsigned __int8 *)v33;
            while (1)
            {
              v35 = *v34++;
              if (v35 == 95)
                break;
              v29 = (std::string *)v34;
              if (v34 == v26)
              {
LABEL_88:
                v29 = v28;
                goto LABEL_90;
              }
            }
            v33 = (std::string *)((char *)&v29->__r_.__value_.__l.__data_ + 1);
            v28 = v29;
            if (v34 != v26)
              continue;
            break;
          }
LABEL_90:
          v36 = (char *)v29 - (char *)v25;
          if (v29 == (std::string *)v26)
            v36 = -1;
          if (v10 == v36 + 3)
          {
            v37 = v36 + 1;
            if (v36 + 1 < v10)
            {
              v38 = MEMORY[0x1E0C80978];
              do
              {
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v39 = &__str;
                else
                  v39 = (std::string *)__str.__r_.__value_.__r.__words[0];
                v40 = v39->__r_.__value_.__s.__data_[v37];
                if ((v40 & 0x80000000) != 0)
                  v41 = __maskrune(v40, 0x500uLL);
                else
                  v41 = *(_DWORD *)(v38 + 4 * v40 + 60) & 0x500;
                if (!v41)
                  break;
                v42 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                    ? &__str
                    : (std::string *)__str.__r_.__value_.__r.__words[0];
                v43 = __toupper(v42->__r_.__value_.__s.__data_[v37]);
                v44 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                    ? &__str
                    : (std::string *)__str.__r_.__value_.__r.__words[0];
                v44->__r_.__value_.__s.__data_[v37++] = v43;
              }
              while (v10 != v37);
            }
          }
          std::string::basic_string[abi:ne180100]<0>(&v53, "vi_VN_u_sd_vnct");
          v45 = siri::dialogengine::StringsEqual((uint64_t)&__str, (uint64_t)&v53);
          v46 = v45;
          if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v53.__r_.__value_.__l.__data_);
            if (v46)
              goto LABEL_111;
          }
          else if (v45)
          {
LABEL_111:
            v47 = "vi_VN_u_sd_vnct";
            goto LABEL_117;
          }
          std::string::basic_string[abi:ne180100]<0>(&v53, "vi-VN-u-sd-vnct");
          v48 = siri::dialogengine::StringsEqual((uint64_t)&__str, (uint64_t)&v53);
          if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v53.__r_.__value_.__l.__data_);
          if (!v48)
            goto LABEL_118;
          v47 = "vi-VN-u-sd-vnct";
LABEL_117:
          MEMORY[0x1C3B8D53C](&__str, v47);
LABEL_118:
          result = *(double *)&__str.__r_.__value_.__l.__data_;
          *a3 = __str;
          return result;
        }
        v29 = (std::string *)((char *)v25 + v10);
        goto LABEL_90;
      }
    }
  }
LABEL_78:
  siri::dialogengine::StringToLower((uint64_t)&__str, (uint64_t)a3);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return result;
}

void sub_1BF96E594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a27 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetLocaleCountry(std::string *a1@<X8>)
{
  _BYTE v2[56];
  __int128 v3;
  std::string::size_type v4;

  morphun::util::ULocale::ULocale();
  if (SHIBYTE(v4) < 0)
  {
    std::string::__init_copy_ctor_external(a1, (const std::string::value_type *)v3, *((std::string::size_type *)&v3 + 1));
  }
  else
  {
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v3;
    a1->__r_.__value_.__r.__words[2] = v4;
  }
  morphun::util::ULocale::~ULocale((morphun::util::ULocale *)v2);
}

void sub_1BF96E6DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  morphun::util::ULocale::~ULocale((morphun::util::ULocale *)&a28);
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(a1);
}

void siri::dialogengine::GetLocaleLanguage(std::string *a1@<X8>)
{
  _BYTE v2[8];
  __int128 v3;
  std::string::size_type v4;

  morphun::util::ULocale::ULocale();
  if (SHIBYTE(v4) < 0)
  {
    std::string::__init_copy_ctor_external(a1, (const std::string::value_type *)v3, *((std::string::size_type *)&v3 + 1));
  }
  else
  {
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v3;
    a1->__r_.__value_.__r.__words[2] = v4;
  }
  morphun::util::ULocale::~ULocale((morphun::util::ULocale *)v2);
}

void sub_1BF96E7E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  morphun::util::ULocale::~ULocale((morphun::util::ULocale *)&a28);
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::GetNonSiriFallbackLocales()
{
  unsigned __int8 v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL4 v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v11;
  std::string __p;
  char v13;
  std::string *p_p;

  if ((v0 & 1) == 0
  {
    v11 = (_QWORD *)operator new();
    *v11 = 0;
    siri::dialogengine::GetNonSiriFallbackLocales(std::string const&)::flag = (uint64_t)v11;
  }
  v1 = atomic_load((unint64_t *)siri::dialogengine::GetNonSiriFallbackLocales(std::string const&)::flag);
  if (v1 != -1)
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
    p_p = &__p;
    std::__call_once((std::once_flag::_State_type *)siri::dialogengine::GetNonSiriFallbackLocales(std::string const&)::flag, &p_p, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetNonSiriFallbackLocales(std::string const&)::$_0 &&>>);
  }
  siri::dialogengine::GetLocaleLanguage(&__p);
  v2 = siri::dialogengine::GetNonSiriFallbackLocales(std::string const&)::sFallbackMap + 8;
  v3 = *(_QWORD *)(siri::dialogengine::GetNonSiriFallbackLocales(std::string const&)::sFallbackMap + 8);
  if (!v3)
    goto LABEL_11;
  v4 = siri::dialogengine::GetNonSiriFallbackLocales(std::string const&)::sFallbackMap + 16;
  v5 = siri::dialogengine::GetNonSiriFallbackLocales(std::string const&)::sFallbackMap + 8;
  do
  {
    v6 = std::less<std::string>::operator()[abi:ne180100](v4, (const void **)(v3 + 32), (const void **)&__p.__r_.__value_.__l.__data_);
    v7 = (uint64_t *)(v3 + 8);
    if (!v6)
    {
      v7 = (uint64_t *)v3;
      v5 = v3;
    }
    v3 = *v7;
  }
  while (*v7);
  if (v5 == v2
    || std::less<std::string>::operator()[abi:ne180100](v4, (const void **)&__p.__r_.__value_.__l.__data_, (const void **)(v5 + 32)))
  {
LABEL_11:
    v5 = v2;
  }
  v8 = siri::dialogengine::GetNonSiriFallbackLocales(std::string const&)::sFallbackMap;
  v9 = siri::dialogengine::GetNonSiriFallbackLocales(std::string const&)::sEmptyResult;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v8 + 8 == v5)
    return v9;
  else
    return v5 + 56;
}

void sub_1BF96E984(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetNonSiriFallbackLocales(std::string const&)::$_0 &&>>()
{
  uint64_t v0;
  __int128 *v1;
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t i;
  _QWORD *result;
  std::string *v7;
  std::string *v8;
  __int128 *v9;
  std::string __p;
  std::string **v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  _QWORD v15[3];
  std::string v16;
  std::string v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v0 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "nb");
  std::string::basic_string[abi:ne180100]<0>(&v14, "no");
  std::string::basic_string[abi:ne180100]<0>(v15, "nn");
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v11 = &v7;
  LOBYTE(v12) = 0;
  v7 = (std::string *)operator new(0x30uLL);
  v8 = v7;
  v9 = (__int128 *)&v7[2];
  v1 = (__int128 *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v9, &v14, (__int128 *)&v16, v7);
  v8 = (std::string *)v1;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v16, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v1 = (__int128 *)v8;
  }
  else
  {
    v16 = __p;
  }
  memset(&v17, 0, sizeof(v17));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v17, (__int128 *)v7, v1, 0xAAAAAAAAAAAAAAABLL * (((char *)v1 - (char *)v7) >> 3));
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)v0 = v0 + 8;
  v2 = (char *)operator new(0x50uLL);
  v3 = v2;
  v11 = (std::string **)v2;
  v12 = v0 + 8;
  v13 = 0;
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v2 + 32), v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v2 + 32) = v16;
  *((_QWORD *)v3 + 7) = 0;
  *((_QWORD *)v3 + 8) = 0;
  *((_QWORD *)v3 + 9) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(v3 + 56), (__int128 *)v17.__r_.__value_.__l.__data_, (__int128 *)v17.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17.__r_.__value_.__l.__size_ - v17.__r_.__value_.__r.__words[0]) >> 3));
  v13 = 1;
  *(_QWORD *)v3 = 0;
  *((_QWORD *)v3 + 1) = 0;
  *((_QWORD *)v3 + 2) = v0 + 8;
  *(_QWORD *)(v0 + 8) = v3;
  v4 = **(_QWORD **)v0;
  if (v4)
  {
    *(_QWORD *)v0 = v4;
    v3 = *(char **)(v0 + 8);
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v0 + 8), (uint64_t *)v3);
  ++*(_QWORD *)(v0 + 16);
  v11 = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v11);
  siri::dialogengine::GetNonSiriFallbackLocales(std::string const&)::sFallbackMap = v0;
  v11 = (std::string **)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  v11 = &v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v15[i + 2]) < 0)
      operator delete((void *)v15[i]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  result = (_QWORD *)operator new();
  *result = 0;
  result[1] = 0;
  result[2] = 0;
  siri::dialogengine::GetNonSiriFallbackLocales(std::string const&)::sEmptyResult = (uint64_t)result;
  return result;
}

void sub_1BF96EC48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t *a18, char a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  _QWORD **v34;
  uint64_t v35;
  uint64_t v37;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)&a19);
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(*v34);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  if (*(char *)(v35 - 89) < 0)
    operator delete(*(void **)(v35 - 112));
  a18 = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  v37 = 0;
  while (1)
  {
    if (*(&a33 + v37) < 0)
      operator delete(*(void **)((char *)&a28 + v37));
    v37 -= 24;
    if (v37 == -48)
    {
      if (a17 < 0)
        operator delete(__p);
      MEMORY[0x1C3B8D890](v33, 0x1020C4062D53EE8);
      _Unwind_Resume(a1);
    }
  }
}

void std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

uint64_t siri::dialogengine::IsNonWhitespaceLocale()
{
  _BOOL8 v1;
  void *v2;
  BOOL v3;
  std::string __p;
  void *v6;
  uint64_t v7;
  char v8;

  siri::dialogengine::GetLocaleLanguage(&__p);
  siri::dialogengine::StringToLower((uint64_t)&__p, (uint64_t)&v6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v8 < 0)
  {
    v2 = v6;
    if (v7 == 2)
    {
      if (*(_WORD *)v6 == 24938 || *(_WORD *)v6 == 26746 || *(_WORD *)v6 == 28523)
      {
        v1 = 1;
        goto LABEL_30;
      }
      v1 = *(unsigned __int16 *)v6 == 26740;
    }
    else
    {
      if (v7 != 3 || (*(_WORD *)v6 == 30073 ? (v3 = *((_BYTE *)v6 + 2) == 101) : (v3 = 0), !v3))
      {
        v1 = 0;
LABEL_30:
        operator delete(v2);
        return v1;
      }
      v1 = 1;
    }
    v2 = v6;
    goto LABEL_30;
  }
  if (v8 == 2)
  {
    if ((unsigned __int16)v6 != 24938 && (unsigned __int16)v6 != 26746 && (unsigned __int16)v6 != 28523)
      return (unsigned __int16)v6 == 26740;
    return 1;
  }
  return v8 == 3 && (unsigned __int16)v6 == 30073 && BYTE2(v6) == 101;
}

void sub_1BF96EF84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::IncludeEnglishIfNeeded(__int128 **a1@<X0>, std::string *a2@<X8>)
{
  std::string::size_type size;
  _QWORD *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  std::string *v13;
  std::string *v14;
  __int128 v15;
  std::string::size_type v16;
  int v17;
  void *__p[2];
  std::string::size_type v19;
  std::__split_buffer<std::string> __v;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, *a1, a1[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 3));
  if (!os_variant_has_internal_diagnostics())
    return;
  size = a2->__r_.__value_.__l.__size_;
  if (a2->__r_.__value_.__r.__words[0] == size)
    return;
  v4 = (_QWORD *)(size - 24);
  v5 = *(char *)(size - 1);
  if (v5 < 0)
  {
    if (*(_QWORD *)(size - 16) != 2)
      goto LABEL_9;
    v4 = (_QWORD *)*v4;
LABEL_8:
    if (*(_WORD *)v4 == 28261)
      return;
    goto LABEL_9;
  }
  if (v5 == 2)
    goto LABEL_8;
LABEL_9:
  std::string::basic_string[abi:ne180100]<0>(__p, "en");
  v6 = a2->__r_.__value_.__r.__words[2];
  v7 = a2->__r_.__value_.__l.__size_;
  if (v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - a2->__r_.__value_.__r.__words[0]) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - a2->__r_.__value_.__r.__words[0]) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)&a2->__r_.__value_.__r.__words[2];
    if (v12)
      v13 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&a2->__r_.__value_.__r.__words[2], v12);
    else
      v13 = 0;
    v14 = v13 + v9;
    __v.__first_ = v13;
    __v.__begin_ = v14;
    __v.__end_cap_.__value_ = &v13[v12];
    v15 = *(_OWORD *)__p;
    v14->__r_.__value_.__r.__words[2] = v19;
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
    __p[1] = 0;
    v19 = 0;
    __p[0] = 0;
    __v.__end_ = v14 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
    v16 = a2->__r_.__value_.__l.__size_;
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    v17 = SHIBYTE(v19);
    a2->__r_.__value_.__l.__size_ = v16;
    if (v17 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v8 = *(_OWORD *)__p;
    *(_QWORD *)(v7 + 16) = v19;
    *(_OWORD *)v7 = v8;
    a2->__r_.__value_.__l.__size_ = v7 + 24;
  }
}

void sub_1BF96F154(_Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, std::__split_buffer<std::string> *a7, uint64_t a8, void *__pa, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a15);
  if (a14 < 0)
    operator delete(__pa);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(__p);
}

uint64_t siri::dialogengine::IsValidLocale(uint64_t a1)
{
  uint64_t v1;
  void **v3;
  void *v4;
  uint64_t v5;
  BOOL v8;
  unint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  char v23;
  void *__p[2];
  char v25;

  v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80u) != 0)
    v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  siri::dialogengine::StringToLower(a1, (uint64_t)__p);
  if (v25 < 0)
  {
    if (__p[1] != (void *)15)
      goto LABEL_13;
    v3 = (void **)__p[0];
  }
  else
  {
    if (v25 != 15)
      goto LABEL_13;
    v3 = __p;
  }
  v4 = *v3;
  v5 = *(uint64_t *)((char *)v3 + 7);
  if (v4 == (void *)0x5F755F6E765F6976 && v5 == 0x74636E765F64735FLL)
  {
    v8 = 1;
    if ((v25 & 0x80) == 0)
      goto LABEL_34;
    goto LABEL_36;
  }
LABEL_13:
  siri::dialogengine::StringToLower(a1, (uint64_t)&v22);
  if (v23 < 0)
  {
    v8 = *((_QWORD *)&v22 + 1) == 15
      && *(_QWORD *)v22 == 0x2D752D6E762D6976
      && *(_QWORD *)(v22 + 7) == 0x74636E762D64732DLL;
    operator delete((void *)v22);
  }
  else
  {
    v8 = v23 == 15 && (_QWORD)v22 == 0x2D752D6E762D6976 && *(_QWORD *)((char *)&v22 + 7) == 0x74636E762D64732DLL;
  }
  if ((v25 & 0x80) == 0)
  {
LABEL_34:
    if (v8)
      return 1;
    goto LABEL_37;
  }
LABEL_36:
  operator delete(__p[0]);
  if (v8)
    return 1;
LABEL_37:
  v11 = 0;
  v12 = *(char *)(a1 + 23);
  if (v12 >= 0)
    v13 = a1;
  else
    v13 = *(_QWORD *)a1;
  if (v12 >= 0)
    v14 = *(unsigned __int8 *)(a1 + 23);
  else
    v14 = *(_QWORD *)(a1 + 8);
  v15 = (unsigned __int8 *)(v13 + v14);
  v16 = (unsigned __int8 *)(v13 + v14);
  v17 = (unsigned __int8 *)(v13 + 3);
  while (1)
  {
    if (v14 == v11)
    {
      v11 = v14;
      v17 = (unsigned __int8 *)(v13 + v14);
      goto LABEL_50;
    }
    if (*(unsigned __int8 *)(v13 + v11) - 97 > 0x19)
      break;
    if (++v11 == 3)
      goto LABEL_52;
  }
  v17 = (unsigned __int8 *)(v13 + v11);
LABEL_50:
  if (v11 < 2)
    return 0;
LABEL_52:
  if (v17 != v15)
  {
    v18 = *v17;
    if (v18 == 95 || v18 == 45)
    {
      v16 = v17 + 3;
      v19 = v14 + v13 - (_QWORD)v17;
      v20 = 1;
      while (v19 != v20 && v17[v20] - 97 <= 0x19)
      {
        if (++v20 == 3)
          return v15 == v16;
      }
      v21 = 1;
      while (v19 != v21 && v17[v21] - 65 <= 0x19)
      {
        if (++v21 == 3)
          return v15 == v16;
      }
    }
    v16 = v17;
  }
  return v15 == v16;
}

void sub_1BF96F408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::CatLocalePathToLocale(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  unsigned __int16 *v3;
  int v4;
  int v5;
  int v6;
  int v8;
  __int128 v10;
  std::string::size_type v11;
  const std::string::value_type *v12;
  std::string __p;
  _QWORD v15[3];
  std::string v16;

  siri::dialogengine::BaseName(a1, &v16);
  siri::dialogengine::StringSplit((unsigned __int8 *)&v16, ".", v15);
  if (v15[1] - v15[0] != 72)
    goto LABEL_11;
  v3 = (unsigned __int16 *)(v15[0] + 24);
  v4 = *(char *)(v15[0] + 47);
  if (v4 < 0)
  {
    if (*(_QWORD *)(v15[0] + 32) != 3)
    {
LABEL_11:
      std::string::basic_string[abi:ne180100]<0>(a2, "");
      goto LABEL_12;
    }
    v3 = *(unsigned __int16 **)v3;
  }
  else if (v4 != 3)
  {
    goto LABEL_11;
  }
  v5 = *v3;
  v6 = *((unsigned __int8 *)v3 + 2);
  if (v5 != 24931 || v6 != 116)
    goto LABEL_11;
  v8 = *(char *)(v15[0] + 23);
  if (v8 < 0)
  {
    v11 = *(_QWORD *)(v15[0] + 8);
    if (v11 == 7)
    {
      v12 = *(const std::string::value_type **)v15[0];
      if (**(_DWORD **)v15[0] == 1918988383 && *(_DWORD *)(*(_QWORD *)v15[0] + 3) == 1936548210)
        goto LABEL_11;
    }
    else
    {
      v12 = *(const std::string::value_type **)v15[0];
    }
    std::string::__init_copy_ctor_external(&__p, v12, v11);
  }
  else
  {
    if (v8 == 7 && *(_DWORD *)v15[0] == 1918988383 && *(_DWORD *)(v15[0] + 3) == 1936548210)
      goto LABEL_11;
    v10 = *(_OWORD *)v15[0];
    __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v15[0] + 16);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v10;
  }
  if ((siri::dialogengine::IsValidLocale((uint64_t)&__p) & 1) != 0)
  {
    *a2 = __p;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "");
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_12:
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
}

void sub_1BF96F5B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  uint64_t v16;

  __p = &a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(char *)(v16 - 17) < 0)
    operator delete(*(void **)(v16 - 40));
  _Unwind_Resume(a1);
}

void siri::dialogengine::GetDefaultLocaleForLanguage(const void **a1@<X0>, std::string *a2@<X8>)
{
  unsigned __int8 v4;
  unint64_t v5;
  uint64_t v6;
  __int128 v7;
  _QWORD *v8;
  char v9;
  char **v10;
  char *v11;

  if ((v4 & 1) == 0
  {
    v8 = (_QWORD *)operator new();
    *v8 = 0;
    siri::dialogengine::GetDefaultLocaleForLanguage(std::string const&)::flag = (uint64_t)v8;
  }
  v5 = atomic_load((unint64_t *)siri::dialogengine::GetDefaultLocaleForLanguage(std::string const&)::flag);
  if (v5 != -1)
  {
    v11 = &v9;
    v10 = &v11;
    std::__call_once((std::once_flag::_State_type *)siri::dialogengine::GetDefaultLocaleForLanguage(std::string const&)::flag, &v10, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetDefaultLocaleForLanguage(std::string const&)::$_0 &&>>);
  }
  v6 = std::__tree<std::string>::find<std::string>(siri::dialogengine::GetDefaultLocaleForLanguage(std::string const&)::sDefaultLocalesForLanguages, a1);
  if (siri::dialogengine::GetDefaultLocaleForLanguage(std::string const&)::sDefaultLocalesForLanguages + 8 == v6)
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "");
  }
  else if (*(char *)(v6 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v6 + 56), *(_QWORD *)(v6 + 64));
  }
  else
  {
    v7 = *(_OWORD *)(v6 + 56);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 72);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v7;
  }
}

void sub_1BF96F71C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetDefaultLocaleForLanguage(std::string const&)::$_0 &&>>()
{
  uint64_t v0;
  uint64_t v1;
  const void **v2;
  const void *v3[6];
  _QWORD v4[6];
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[3];
  _QWORD v25[3];
  _QWORD v26[7];

  v26[6] = *MEMORY[0x1E0C80C00];
  v0 = operator new();
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v3, "ar", "ar_SA");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v4, "da", "da_DK");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v5, "de", "de_DE");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v6, "en", "en_US");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v7, "es", "es_ES");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v8, "fi", "fi_FI");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v9, "fr", "fr_FR");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v10, "he", "he_IL");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v11, "hi", "hi_IN");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v12, "it", "it_IT");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v13, "ja", "ja_JP");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v14, "ko", "ko_KR");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v15, "ms", "ms_MY");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v16, "nb", "nb_NO");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v17, "nl", "nl_NL");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v18, "pt", "pt_BR");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v19, "ru", "ru_RU");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v20, "sv", "sv_SE");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v21, "th", "th_TH");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v22, "tr", "tr_TR");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v23, "vi", "vi_VN");
  std::string::basic_string[abi:ne180100]<0>(v24, "yue");
  std::string::basic_string[abi:ne180100]<0>(v25, "yue_CN");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[6],0>(v26, "zh", "zh_CN");
  std::map<std::string,std::string>::map[abi:ne180100](v0, v3, 23);
  siri::dialogengine::GetDefaultLocaleForLanguage(std::string const&)::sDefaultLocalesForLanguages = v0;
  v1 = 138;
  do
  {
    v2 = &v3[v1];
    if (SHIBYTE(v3[v1 - 1]) < 0)
      operator delete((void *)*(v2 - 3));
    if (*((char *)v2 - 25) < 0)
      operator delete((void *)*(v2 - 6));
    v1 -= 6;
  }
  while (v1 * 8);
}

void sub_1BF96FAB0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = 1104;
  while (1)
  {
    v5 = v2 + v4;
    if (*(char *)(v2 + v4 - 1) < 0)
      operator delete(*(void **)(v5 - 24));
    if (*(char *)(v5 - 25) < 0)
      operator delete(*(void **)(v5 - 48));
    v4 -= 48;
    if (!v4)
    {
      MEMORY[0x1C3B8D890](v1, 0x1020C4062D53EE8);
      _Unwind_Resume(a1);
    }
  }
}

void sub_1BF96FCAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1BF970398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  void *v42;

  google::protobuf::internal::LogMessage::~LogMessage(&__p);

  siri::dialogengine::CatUpdater::Manifest::~Manifest((siri::dialogengine::CatUpdater::Manifest *)&a25);
  _Unwind_Resume(a1);
}

void sub_1BF9709A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  if (a21 < 0)
    operator delete(__p);
  siri::dialogengine::CatUpdater::Manifest::~Manifest((siri::dialogengine::CatUpdater::Manifest *)&a22);

  _Unwind_Resume(a1);
}

void sub_1BF970BB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<siri::dialogengine::CatUpdater::Asset>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1539);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_1BF970D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void siri::dialogengine::PatternRegistry::RegisterObject(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  std::string::size_type size;
  _BOOL4 v6;
  _BOOL4 v7;
  siri::dialogengine *v8;
  std::string *v9;
  __int128 v10;
  siri::dialogengine *v11;
  uint64_t *v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  const void **v20;
  char *v21;
  std::string *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  __int128 v28;
  std::string::size_type v29;
  std::string __str;
  std::string __p;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  std::string v36;

  if (a1)
  {
    siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)&__p, (const siri::dialogengine::RequestInfo *)(a1 + 1));
    v33 = 0;
    v34 = 0;
    v35 = 0;
    std::vector<siri::dialogengine::UpdatableDir>::__init_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>(&v33, __p.__r_.__value_.__l.__size_, __p.__r_.__value_.__r.__words[2], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__l.__size_) >> 5));
    siri::dialogengine::RequestInfo::~RequestInfo((void **)&__p.__r_.__value_.__l.__data_);
    if (v34 != v33)
      goto LABEL_7;
  }
  else
  {
    v33 = 0;
    v34 = 0;
    v35 = 0;
  }
  v4 = std::string::basic_string[abi:ne180100]<0>(&v36, "");
  siri::dialogengine::GetTemplateDirs((uint64_t)v4, 1, (uint64_t)&__p);
  std::vector<siri::dialogengine::UpdatableDir>::__assign_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>((uint64_t)&v33, (std::string *)__p.__r_.__value_.__l.__data_, (std::string *)__p.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 5));
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
LABEL_7:
  siri::dialogengine::FindPatternSchemaFile(&v33, a2, (uint64_t)&__str);
  size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __str.__r_.__value_.__l.__size_;
  if (size)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "patternschema.bin");
    v6 = siri::dialogengine::StringEndsWith(&__str, (unsigned __int8 *)&__p);
    v7 = v6;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (v7)
        goto LABEL_12;
    }
    else if (v6)
    {
LABEL_12:
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      siri::dialogengine::ParsePatternSchemaBinary(a1, (uint64_t)&__str, (unsigned __int8 *)a2, &v36);
      goto LABEL_19;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    siri::dialogengine::ParsePatternSchemaYAML(a1, (uint64_t)&__str, (const std::string *)a2, &v36);
LABEL_19:
    v28 = *(_OWORD *)&v36.__r_.__value_.__l.__data_;
    v29 = v36.__r_.__value_.__l.__size_;
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = 0uLL;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    siri::dialogengine::GetSchemaMutexRef(v8);
    std::mutex::lock(&siri::dialogengine::GetSchemaMutexRef(void)::schemaMutex);
    siri::dialogengine::GetSchemaMapRef(v11);
    v12 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSchema>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSchema>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSchema>>>>::find<std::string>((const void **)a2);
    v13 = v28;
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
    if (v12 != &qword_1EF581C80)
      goto LABEL_51;
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      v13 = v28;
    }
    else
    {
      __p = *(std::string *)a2;
    }
    v32 = v13;
    if (*((_QWORD *)&v28 + 1))
    {
      v15 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    v17 = qword_1EF581C80;
    if (qword_1EF581C80)
    {
      v18 = &qword_1EF581C80;
      while (1)
      {
        while (1)
        {
          v19 = (uint64_t *)v17;
          v20 = (const void **)(v17 + 32);
          if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_1EF581C88, (const void **)&__p.__r_.__value_.__l.__data_, (const void **)(v17 + 32)))break;
          v17 = *v19;
          v18 = v19;
          if (!*v19)
            goto LABEL_37;
        }
        if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_1EF581C88, v20, (const void **)&__p.__r_.__value_.__l.__data_))break;
        v18 = v19 + 1;
        v17 = v19[1];
        if (!v17)
          goto LABEL_37;
      }
      if (*v18)
        goto LABEL_43;
    }
    else
    {
      v18 = &qword_1EF581C80;
      v19 = &qword_1EF581C80;
    }
LABEL_37:
    v21 = (char *)operator new(0x48uLL);
    v36.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
    v36.__r_.__value_.__l.__size_ = (std::string::size_type)&qword_1EF581C80;
    v36.__r_.__value_.__s.__data_[16] = 0;
    v22 = (std::string *)(v21 + 32);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v22, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&v22->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *((_QWORD *)v21 + 6) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    }
    *(_OWORD *)(v21 + 56) = v32;
    v32 = 0uLL;
    v36.__r_.__value_.__s.__data_[16] = 1;
    *(_QWORD *)v21 = 0;
    *((_QWORD *)v21 + 1) = 0;
    *((_QWORD *)v21 + 2) = v19;
    *v18 = (uint64_t)v21;
    if (*(_QWORD *)siri::dialogengine::GetSchemaMapRef(void)::schema)
    {
      siri::dialogengine::GetSchemaMapRef(void)::schema = *(_QWORD *)siri::dialogengine::GetSchemaMapRef(void)::schema;
      v21 = (char *)*v18;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_1EF581C80, (uint64_t *)v21);
    ++qword_1EF581C88;
    v36.__r_.__value_.__r.__words[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v36);
LABEL_43:
    v23 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
    if (*((_QWORD *)&v32 + 1))
    {
      v24 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v14 = (std::__shared_weak_count *)v29;
LABEL_51:
    std::mutex::unlock(&siri::dialogengine::GetSchemaMutexRef(void)::schemaMutex);
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v27 = __ldaxr(p_shared_owners);
      while (__stlxr(v27 - 1, p_shared_owners));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    goto LABEL_56;
  }
  std::operator+<char>();
  v9 = std::string::append(&v36, "'");
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::Log::LogWithLevel((uint64_t)&__p, 3u);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
LABEL_56:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v33;
  std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1BF971184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>>>>::reset[abi:ne180100](v25 - 80);
  std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>::~pair((uint64_t)&a20);
  std::mutex::unlock(&siri::dialogengine::GetSchemaMutexRef(void)::schemaMutex);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (a19 < 0)
    operator delete(__p);
  a20 = (void *)(v25 - 104);
  std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  _Unwind_Resume(a1);
}

void std::vector<siri::dialogengine::UpdatableDir>::__assign_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>(uint64_t a1, std::string *__str, std::string *a3, unint64_t a4)
{
  uint64_t v8;
  std::string *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  std::string *v13;
  std::string *v14;
  uint64_t i;

  v8 = a1 + 16;
  v9 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5) < a4)
  {
    std::vector<siri::dialogengine::UpdatableDir>::__vdeallocate((void **)a1);
    if (a4 > 0x2AAAAAAAAAAAAAALL)
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5) >= 0x155555555555555)
      v11 = 0x2AAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<siri::dialogengine::UpdatableDir>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::dialogengine::UpdatableDir>,siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>(v8, (uint64_t)__str, (uint64_t)a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 5) < a4)
  {
    v13 = (std::string *)((char *)__str + 32 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 5));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<siri::dialogengine::UpdatableDir *,siri::dialogengine::UpdatableDir *,siri::dialogengine::UpdatableDir *>(__str, v13, v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::dialogengine::UpdatableDir>,siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>(v8, (uint64_t)v13, (uint64_t)a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  v14 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<siri::dialogengine::UpdatableDir *,siri::dialogengine::UpdatableDir *,siri::dialogengine::UpdatableDir *>(__str, a3, v9);
  for (i = *(_QWORD *)(a1 + 8);
        (std::string *)i != v14;
        std::allocator<siri::dialogengine::UpdatableDir>::destroy[abi:ne180100](i))
  {
    i -= 96;
  }
  *(_QWORD *)(a1 + 8) = v14;
}

void sub_1BF9713F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1BF9713F8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void siri::dialogengine::GetSchemaMutexRef(siri::dialogengine *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE4AB8], &siri::dialogengine::GetSchemaMutexRef(void)::schemaMutex, &dword_1BF794000);
    }
  }
}

void siri::dialogengine::GetSchemaMapRef(siri::dialogengine *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      qword_1EF581C88 = 0;
      qword_1EF581C80 = 0;
      siri::dialogengine::GetSchemaMapRef(void)::schema = (uint64_t)&qword_1EF581C80;
      __cxa_atexit((void (*)(void *))std::map<std::string,std::shared_ptr<siri::dialogengine::PatternSchema>>::~map[abi:ne180100], &siri::dialogengine::GetSchemaMapRef(void)::schema, &dword_1BF794000);
    }
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSchema>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSchema>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSchema>>>>::find<std::string>(const void **a1)
{
  uint64_t v1;
  uint64_t *v3;
  _BOOL4 v4;
  uint64_t *v5;

  v1 = qword_1EF581C80;
  if (!qword_1EF581C80)
    return &qword_1EF581C80;
  v3 = &qword_1EF581C80;
  do
  {
    v4 = std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_1EF581C88, (const void **)(v1 + 32), a1);
    v5 = (uint64_t *)(v1 + 8);
    if (!v4)
    {
      v5 = (uint64_t *)v1;
      v3 = (uint64_t *)v1;
    }
    v1 = *v5;
  }
  while (*v5);
  if (v3 == &qword_1EF581C80
    || std::less<std::string>::operator()[abi:ne180100]((uint64_t)&qword_1EF581C88, a1, (const void **)v3 + 4))
  {
    return &qword_1EF581C80;
  }
  return v3;
}

uint64_t std::map<std::string,std::shared_ptr<siri::dialogengine::PatternSchema>>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*(_QWORD **)(a1 + 8));
  return a1;
}

std::string *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<siri::dialogengine::UpdatableDir *,siri::dialogengine::UpdatableDir *,siri::dialogengine::UpdatableDir *>(std::string *__str, std::string *a2, std::string *this)
{
  std::string *v5;

  if (__str != a2)
  {
    v5 = __str;
    do
    {
      std::string::operator=(this, v5);
      std::string::operator=(this + 1, v5 + 1);
      if (this != v5)
      {
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)&this[2], (std::string *)v5[2].__r_.__value_.__l.__data_, (__int128 *)v5[2].__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5[2].__r_.__value_.__l.__size_ - v5[2].__r_.__value_.__r.__words[0]) >> 3));
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)&this[3], (std::string *)v5[3].__r_.__value_.__l.__data_, (__int128 *)v5[3].__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5[3].__r_.__value_.__l.__size_ - v5[3].__r_.__value_.__r.__words[0]) >> 3));
      }
      this += 4;
      v5 += 4;
    }
    while (v5 != a2);
  }
  return this;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::dialogengine::UpdatableDir>,siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      siri::dialogengine::UpdatableDir::UpdatableDir((std::string *)(a4 + v7), (const siri::dialogengine::UpdatableDir *)(a2 + v7));
      v7 += 96;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void std::vector<siri::dialogengine::UpdatableDir>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 96;
        std::allocator<siri::dialogengine::UpdatableDir>::destroy[abi:ne180100](v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *std::vector<siri::dialogengine::UpdatableDir>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x2AAAAAAAAAAAAABLL)
    std::vector<BOOL>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<siri::dialogengine::UpdatableDir>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[96 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<siri::dialogengine::UpdatableDir>>(unint64_t a1)
{
  if (a1 >= 0x2AAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(96 * a1);
}

std::string *siri::dialogengine::UpdatableDir::UpdatableDir(std::string *this, const siri::dialogengine::UpdatableDir *a2)
{
  __int128 v4;
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(_OWORD *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  this[2].__r_.__value_.__r.__words[0] = 0;
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(this + 2, *((__int128 **)a2 + 6), *((__int128 **)a2 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 3));
  this[3].__r_.__value_.__r.__words[0] = 0;
  this[3].__r_.__value_.__l.__size_ = 0;
  this[3].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(this + 3, *((__int128 **)a2 + 9), *((__int128 **)a2 + 10), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 10) - *((_QWORD *)a2 + 9)) >> 3));
  return this;
}

void sub_1BF971894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (*(char *)(v10 + 23) < 0)
    operator delete(*(void **)v10);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::PatternRegistry::GetSchema(uint64_t *a1@<X0>, const std::string::value_type **a2@<X1>, uint64_t *a3@<X8>)
{
  _BOOL8 IsArrayType;
  const char *v7;
  uint64_t *v8;
  std::string *v9;
  std::string::size_type size;
  siri::dialogengine *v11;
  uint64_t *v12;
  std::string::size_type v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  siri::dialogengine *v20;
  uint64_t *v21;
  std::string::size_type v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::string v34;
  std::string v35;

  if (*((char *)a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v35, *a2, (std::string::size_type)a2[1]);
  else
    v35 = *(std::string *)a2;
  IsArrayType = siri::dialogengine::IsArrayType(&v35);
  if (IsArrayType)
  {
    siri::dialogengine::GetArrayElementType((uint64_t)&v35, &v34);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
    v35 = v34;
    if (*((char *)a2 + 23) >= 0)
      v8 = (uint64_t *)a2;
    else
      v8 = (uint64_t *)*a2;
    v9 = &v35;
    if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v9 = (std::string *)v35.__r_.__value_.__r.__words[0];
    siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Looking up a schema file for an array type (%s). Assuming %s instead.", v7, v8, v9);
  }
  size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v35.__r_.__value_.__l.__size_;
  *a3 = 0;
  a3[1] = 0;
  if (size)
  {
    siri::dialogengine::GetSchemaMapRef((siri::dialogengine *)IsArrayType);
    siri::dialogengine::GetSchemaMutexRef(v11);
    std::mutex::lock(&siri::dialogengine::GetSchemaMutexRef(void)::schemaMutex);
    v12 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSchema>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSchema>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSchema>>>>::find<std::string>((const void **)&v35.__r_.__value_.__l.__data_);
    if (v12 == &qword_1EF581C80)
    {
      *(_OWORD *)&v34.__r_.__value_.__l.__data_ = 0uLL;
    }
    else
    {
      v13 = v12[8];
      v34.__r_.__value_.__r.__words[0] = v12[7];
      v34.__r_.__value_.__l.__size_ = v13;
      if (v13)
      {
        v14 = (unint64_t *)(v13 + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
    }
    std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)a3, (__int128 *)&v34);
    v16 = (std::__shared_weak_count *)v34.__r_.__value_.__l.__size_;
    if (v34.__r_.__value_.__l.__size_)
    {
      v17 = (unint64_t *)(v34.__r_.__value_.__l.__size_ + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    std::mutex::unlock(&siri::dialogengine::GetSchemaMutexRef(void)::schemaMutex);
    v19 = *a3;
    if (*a3)
    {
      if (!a1)
        goto LABEL_57;
      goto LABEL_42;
    }
    siri::dialogengine::PatternRegistry::RegisterObject(a1, (uint64_t)&v35);
    siri::dialogengine::GetSchemaMutexRef(v20);
    std::mutex::lock(&siri::dialogengine::GetSchemaMutexRef(void)::schemaMutex);
    v21 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSchema>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSchema>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSchema>>>>::find<std::string>((const void **)&v35.__r_.__value_.__l.__data_);
    if (v21 == &qword_1EF581C80)
    {
      *(_OWORD *)&v34.__r_.__value_.__l.__data_ = 0uLL;
    }
    else
    {
      v22 = v21[8];
      v34.__r_.__value_.__r.__words[0] = v21[7];
      v34.__r_.__value_.__l.__size_ = v22;
      if (v22)
      {
        v23 = (unint64_t *)(v22 + 8);
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
    }
    std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)a3, (__int128 *)&v34);
    v25 = (std::__shared_weak_count *)v34.__r_.__value_.__l.__size_;
    if (v34.__r_.__value_.__l.__size_)
    {
      v26 = (unint64_t *)(v34.__r_.__value_.__l.__size_ + 8);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    std::mutex::unlock(&siri::dialogengine::GetSchemaMutexRef(void)::schemaMutex);
    v19 = *a3;
    if (a1)
    {
LABEL_42:
      if (v19)
      {
        v28 = a1[431];
        v29 = (std::__shared_weak_count *)a1[432];
        if (v29)
        {
          p_shared_owners = (unint64_t *)&v29->__shared_owners_;
          do
            v31 = __ldxr(p_shared_owners);
          while (__stxr(v31 + 1, p_shared_owners));
          v19 = *a3;
        }
        if (*(char *)(v19 + 47) < 0)
          std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)(v19 + 24), *(_QWORD *)(v19 + 32));
        else
          v34 = *(std::string *)(v19 + 24);
        siri::dialogengine::TraceWriter::CopySchemaFile(v28, (const void **)&v34.__r_.__value_.__l.__data_);
        if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v34.__r_.__value_.__l.__data_);
        if (v29)
        {
          v32 = (unint64_t *)&v29->__shared_owners_;
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
      }
    }
  }
LABEL_57:
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
}

void sub_1BF971BD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v25);
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void siri::dialogengine::PatternRegistry::Preload(siri::dialogengine::PatternRegistry *this, const siri::dialogengine::UpdatableDir *a2)
{
  std::vector<std::string>::pointer begin;
  std::vector<std::string>::pointer end;
  __int128 v5;
  _BOOL4 HasExtension;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  std::string v12;
  std::string v13;
  std::string __p;
  std::vector<std::string> v15;
  uint64_t v16[439];

  siri::dialogengine::Context::Context((siri::dialogengine::Context *)v16);
  std::string::basic_string[abi:ne180100]<0>(&__p, "schema");
  siri::dialogengine::UpdatableDir::ListDir((uint64_t)this, (uint64_t)&__p, &v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  begin = v15.__begin_;
  end = v15.__end_;
  while (begin != end)
  {
    if (SHIBYTE(begin->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, begin->__r_.__value_.__l.__data_, begin->__r_.__value_.__l.__size_);
    }
    else
    {
      v5 = *(_OWORD *)&begin->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = begin->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v5;
    }
    std::string::basic_string[abi:ne180100]<0>(&v13, "patternschema");
    if (siri::dialogengine::HasExtension((uint64_t)&__p, (uint64_t)&v13))
    {
      HasExtension = 1;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v12, "patternschema.bin");
      HasExtension = siri::dialogengine::HasExtension((uint64_t)&__p, (uint64_t)&v12);
      if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v12.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v13.__r_.__value_.__l.__data_);
      if (HasExtension)
      {
LABEL_15:
        siri::dialogengine::BaseName((uint64_t)&__p, &v12);
        siri::dialogengine::RemoveExtension((uint64_t)&v12, &v13);
        if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v12.__r_.__value_.__l.__data_);
        siri::dialogengine::PatternRegistry::GetSchema(v16, (const std::string::value_type **)&v13.__r_.__value_.__l.__data_, &v10);
        v7 = v11;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v9 = __ldaxr(p_shared_owners);
          while (__stlxr(v9 - 1, p_shared_owners));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        std::operator+<char>();
        siri::dialogengine::Log::Debug((siri::dialogengine *)&v12);
        if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v12.__r_.__value_.__l.__data_);
        if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v13.__r_.__value_.__l.__data_);
      }
    }
    else if (HasExtension)
    {
      goto LABEL_15;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    ++begin;
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  siri::dialogengine::Context::~Context((siri::dialogengine::Context *)v16);
}

void sub_1BF971E3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a28 < 0)
    operator delete(__p);
  siri::dialogengine::Context::~Context((siri::dialogengine::Context *)&a33);
  _Unwind_Resume(a1);
}

void siri::dialogengine::PatternRegistry::Clear(siri::dialogengine::PatternRegistry *this)
{
  siri::dialogengine *v1;
  siri::dialogengine *v2;

  siri::dialogengine::GetSchemaMutexRef(this);
  std::mutex::lock(&siri::dialogengine::GetSchemaMutexRef(void)::schemaMutex);
  siri::dialogengine::GetSchemaMapRef(v1);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)qword_1EF581C80);
  siri::dialogengine::GetSchemaMapRef(void)::schema = (uint64_t)&qword_1EF581C80;
  qword_1EF581C88 = 0;
  qword_1EF581C80 = 0;
  std::mutex::unlock(&siri::dialogengine::GetSchemaMutexRef(void)::schemaMutex);
  siri::dialogengine::ClearSearchPathCaches(v2);
}

void InitDefaultsscc_info_OptionalBool_OptionalDataTypes_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/OptionalDataTypes.pb.cc", a4);
  SnippetUI::_OptionalBool_default_instance_ = (uint64_t)&off_1E792FC38;
  *(_QWORD *)algn_1ED1D5048 = 0;
  dword_1ED1D5054 = 0;
  byte_1ED1D5050 = 0;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_OptionalBool_default_instance_, v4);
}

void SnippetUI::OptionalBool::~OptionalBool(SnippetUI::OptionalBool *this)
{
  *(_QWORD *)this = &off_1E792FC38;
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_1E792FC38;
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x1C3B8D890);
}

{
  *(_QWORD *)this = &off_1E792FC38;
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

uint64_t SnippetUI::OptionalBool::New(SnippetUI::OptionalBool *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OptionalBool>(0);
}

uint64_t SnippetUI::OptionalBool::New(SnippetUI::OptionalBool *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OptionalBool>(a2);
}

void SnippetUI::OptionalBool::Clear(SnippetUI::OptionalBool *this)
{
  google::protobuf::internal::InternalMetadataWithArena *v1;
  char v2;

  v2 = *((_BYTE *)this + 8);
  v1 = (SnippetUI::OptionalBool *)((char *)this + 8);
  *((_BYTE *)v1 + 8) = 0;
  if ((v2 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v1);
}

uint64_t SnippetUI::OptionalBool::IsInitialized(SnippetUI::OptionalBool *this)
{
  return 1;
}

char *SnippetUI::OptionalBool::ByteSizeLong(SnippetUI::OptionalBool *this)
{
  uint64_t v1;
  const google::protobuf::UnknownFieldSet *v2;

  v1 = *((unsigned __int8 *)this + 16);
  v2 = (const google::protobuf::UnknownFieldSet *)(2 * v1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::OptionalBool *)((char *)this + 8), v2, (_DWORD *)this + 5);
  *((_DWORD *)this + 5) = (_DWORD)v2;
  return (char *)(2 * v1);
}

uint64_t SnippetUI::OptionalBool::GetCachedSize(SnippetUI::OptionalBool *this)
{
  return *((unsigned int *)this + 5);
}

google::protobuf::internal *SnippetUI::OptionalBool::_InternalParse(SnippetUI::OptionalBool *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  uint64_t *v5;
  google::protobuf::internal::ParseContext *v6;
  google::protobuf::internal *TagFallback;
  char *v8;
  google::protobuf::internal *v10;
  unint64_t v11;
  int v12;
  google::protobuf::internal *v13;
  uint64_t v14;
  google::protobuf::internal *v16;

  v16 = a2;
  v5 = (uint64_t *)((char *)this + 8);
  while (1)
  {
    while (1)
    {
      if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v16, *((_DWORD *)a3 + 23)) & 1) != 0)
        return v16;
      TagFallback = (google::protobuf::internal *)((char *)v16 + 1);
      v8 = (char *)*(unsigned __int8 *)v16;
      if ((*(char *)v16 & 0x80000000) == 0)
        goto LABEL_6;
      v8 = (char *)(v8 + (*(unsigned __int8 *)TagFallback << 7) - 128);
      if ((*(char *)TagFallback & 0x80000000) == 0)
      {
        TagFallback = (google::protobuf::internal *)((char *)v16 + 2);
LABEL_6:
        v16 = TagFallback;
        goto LABEL_7;
      }
      TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v16, v8);
      v16 = TagFallback;
      if (!TagFallback)
        return TagFallback;
LABEL_7:
      if ((_DWORD)v8 != 8)
        break;
      v10 = (google::protobuf::internal *)((char *)TagFallback + 1);
      v11 = *(unsigned __int8 *)TagFallback;
      if ((*(char *)TagFallback & 0x80000000) == 0)
        goto LABEL_17;
      v12 = *(char *)v10;
      v11 = v11 + (v12 << 7) - 128;
      if (v12 < 0)
      {
        v13 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v11);
        v16 = v13;
        *((_BYTE *)this + 16) = v14 != 0;
        if (!v13)
          return 0;
      }
      else
      {
        v10 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_17:
        v16 = v10;
        *((_BYTE *)this + 16) = v11 != 0;
      }
    }
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      break;
    v16 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v8, v5, TagFallback, a3, v6);
    if (!v16)
      return 0;
  }
  *((_DWORD *)a3 + 20) = (_DWORD)v8 - 1;
  return TagFallback;
}

const google::protobuf::UnknownFieldSet *SnippetUI::OptionalBool::InternalSerializeWithCachedSizesToArray(SnippetUI::OptionalBool *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  unsigned __int8 v6;
  uint64_t v7;

  if (*((_BYTE *)this + 16))
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v6 = *((_BYTE *)this + 16);
    }
    else
    {
      v6 = 1;
    }
    *a2 = 8;
    a2[1] = v6;
    a2 += 2;
  }
  v7 = *((_QWORD *)this + 1);
  if ((v7 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v7 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)a2;
}

void SnippetUI::OptionalBool::CopyFrom(SnippetUI::OptionalBool *this, const google::protobuf::Message *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  char v5;

  if (a2 != this)
  {
    v5 = *((_BYTE *)this + 8);
    v4 = (SnippetUI::OptionalBool *)((char *)this + 8);
    *((_BYTE *)v4 + 8) = 0;
    if ((v5 & 1) != 0)
      google::protobuf::internal::InternalMetadataWithArena::DoClear(v4);
    SnippetUI::OptionalBool::MergeFrom(this, a2);
  }
}

void SnippetUI::OptionalBool::MergeFrom(SnippetUI::OptionalBool *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::OptionalBool *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/OptionalDataTypes.pb.cc", 451);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::OptionalBool::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BF972314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::OptionalBool::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

uint64_t SnippetUI::OptionalBool::GetMetadata(SnippetUI::OptionalBool *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_OptionalDataTypes_2eproto);
  return qword_1EF581CB0;
}

void InitDefaultsscc_info_OptionalInt_OptionalDataTypes_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/OptionalDataTypes.pb.cc", a4);
  qword_1ED1D3D30 = 0;
  unk_1ED1D3D38 = 0;
  SnippetUI::_OptionalInt_default_instance_ = (uint64_t)&off_1E792FB78;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_OptionalInt_default_instance_, v4);
}

void SnippetUI::OptionalInt::~OptionalInt(SnippetUI::OptionalInt *this)
{
  *(_QWORD *)this = &off_1E792FB78;
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_1E792FB78;
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x1C3B8D890);
}

{
  *(_QWORD *)this = &off_1E792FB78;
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *SnippetUI::OptionalInt::New(SnippetUI::OptionalInt *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OptionalInt>(0);
}

_QWORD *SnippetUI::OptionalInt::New(SnippetUI::OptionalInt *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OptionalInt>(a2);
}

void SnippetUI::OptionalInt::Clear(SnippetUI::OptionalInt *this)
{
  google::protobuf::internal::InternalMetadataWithArena *v1;
  char v2;

  v2 = *((_BYTE *)this + 8);
  v1 = (SnippetUI::OptionalInt *)((char *)this + 8);
  *((_DWORD *)v1 + 2) = 0;
  if ((v2 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v1);
}

uint64_t SnippetUI::OptionalInt::IsInitialized(SnippetUI::OptionalInt *this)
{
  return 1;
}

char *SnippetUI::OptionalInt::ByteSizeLong(SnippetUI::OptionalInt *this)
{
  int v1;
  uint64_t v2;

  v1 = *((_DWORD *)this + 4);
  if (v1)
  {
    if (v1 < 0)
      v2 = 11;
    else
      v2 = ((9 * (__clz(v1 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  else
  {
    v2 = 0;
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::OptionalInt *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)v2, (_DWORD *)this + 5);
  *((_DWORD *)this + 5) = v2;
  return (char *)v2;
}

uint64_t SnippetUI::OptionalInt::GetCachedSize(SnippetUI::OptionalInt *this)
{
  return *((unsigned int *)this + 5);
}

google::protobuf::internal *SnippetUI::OptionalInt::_InternalParse(SnippetUI::OptionalInt *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  uint64_t *v5;
  google::protobuf::internal::ParseContext *v6;
  google::protobuf::internal *TagFallback;
  char *v8;
  unint64_t v10;
  google::protobuf::internal *v11;
  int v12;
  google::protobuf::internal *v13;
  int v14;
  google::protobuf::internal *v16;

  v16 = a2;
  v5 = (uint64_t *)((char *)this + 8);
  while (1)
  {
    while (1)
    {
      if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v16, *((_DWORD *)a3 + 23)) & 1) != 0)
        return v16;
      TagFallback = (google::protobuf::internal *)((char *)v16 + 1);
      v8 = (char *)*(unsigned __int8 *)v16;
      if ((*(char *)v16 & 0x80000000) == 0)
        goto LABEL_6;
      v8 = (char *)(v8 + (*(unsigned __int8 *)TagFallback << 7) - 128);
      if ((*(char *)TagFallback & 0x80000000) == 0)
      {
        TagFallback = (google::protobuf::internal *)((char *)v16 + 2);
LABEL_6:
        v16 = TagFallback;
        goto LABEL_7;
      }
      TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v16, v8);
      v16 = TagFallback;
      if (!TagFallback)
        return TagFallback;
LABEL_7:
      if ((_DWORD)v8 != 8)
        break;
      v11 = (google::protobuf::internal *)((char *)TagFallback + 1);
      LODWORD(v10) = *(unsigned __int8 *)TagFallback;
      if ((v10 & 0x80) == 0)
        goto LABEL_17;
      v12 = *(char *)v11;
      v10 = v10 + (v12 << 7) - 128;
      if (v12 < 0)
      {
        v13 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v10);
        v16 = v13;
        *((_DWORD *)this + 4) = v14;
        if (!v13)
          return 0;
      }
      else
      {
        v11 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_17:
        v16 = v11;
        *((_DWORD *)this + 4) = v10;
      }
    }
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      break;
    v16 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v8, v5, TagFallback, a3, v6);
    if (!v16)
      return 0;
  }
  *((_DWORD *)a3 + 20) = (_DWORD)v8 - 1;
  return TagFallback;
}

const google::protobuf::UnknownFieldSet *SnippetUI::OptionalInt::InternalSerializeWithCachedSizesToArray(SnippetUI::OptionalInt *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  unsigned int v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v6 = *((_DWORD *)this + 4);
  if (v6)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v6 = *((_DWORD *)this + 4);
    }
    *a2 = 8;
    if (v6 > 0x7F)
    {
      a2[1] = v6 | 0x80;
      v7 = (unint64_t)(int)v6 >> 7;
      if (v6 >> 14)
      {
        v8 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v9 = v8;
          *v8++ = v7 | 0x80;
          v10 = v7 >> 7;
          v11 = v7 >> 14;
          v7 >>= 7;
        }
        while (v11);
        a2 = (char *)(v9 + 2);
        *v8 = v10;
      }
      else
      {
        a2[2] = v7;
        a2 += 3;
      }
    }
    else
    {
      a2[1] = v6;
      a2 += 2;
    }
  }
  v12 = *((_QWORD *)this + 1);
  if ((v12 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v12 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)a2;
}

void SnippetUI::OptionalInt::CopyFrom(SnippetUI::OptionalInt *this, const google::protobuf::Message *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  char v5;

  if (a2 != this)
  {
    v5 = *((_BYTE *)this + 8);
    v4 = (SnippetUI::OptionalInt *)((char *)this + 8);
    *((_DWORD *)v4 + 2) = 0;
    if ((v5 & 1) != 0)
      google::protobuf::internal::InternalMetadataWithArena::DoClear(v4);
    SnippetUI::OptionalInt::MergeFrom(this, a2);
  }
}

void SnippetUI::OptionalInt::MergeFrom(SnippetUI::OptionalInt *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::OptionalInt *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/OptionalDataTypes.pb.cc", 267);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::OptionalInt::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BF97278C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::OptionalInt::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

uint64_t SnippetUI::OptionalInt::GetMetadata(SnippetUI::OptionalInt *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_OptionalDataTypes_2eproto);
  return file_level_metadata_OptionalDataTypes_2eproto;
}

uint64_t *SnippetUI::OptionalInt::default_instance(SnippetUI::OptionalInt *this)
{
  if (atomic_load(scc_info_OptionalInt_OptionalDataTypes_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_OptionalInt_OptionalDataTypes_2eproto);
  return &SnippetUI::_OptionalInt_default_instance_;
}

void SnippetUI::OptionalInt::MergeFrom(SnippetUI::OptionalInt *this, const SnippetUI::OptionalInt *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  char v7;
  std::string v8[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/OptionalDataTypes.pb.cc", 282);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::OptionalInt *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_DWORD *)a2 + 4);
  if (v6)
    *((_DWORD *)this + 4) = v6;
}

void sub_1BF972898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OptionalInt>(google::protobuf::internal::ArenaImpl *this)
{
  _QWORD *result;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    result = google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::OptionalInt>);
  }
  else
  {
    result = (_QWORD *)operator new();
  }
  result[1] = 0;
  result[2] = 0;
  *result = &off_1E792FB78;
  return result;
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::OptionalInt>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void InitDefaultsscc_info_OptionalDouble_OptionalDataTypes_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/OptionalDataTypes.pb.cc", a4);
  qword_1ED1D3F48 = 0;
  unk_1ED1D3F50 = 0;
  SnippetUI::_OptionalDouble_default_instance_ = (uint64_t)&off_1E792FCF8;
  dword_1ED1D3F58 = 0;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_OptionalDouble_default_instance_, v4);
}

void SnippetUI::OptionalDouble::~OptionalDouble(SnippetUI::OptionalDouble *this)
{
  *(_QWORD *)this = &off_1E792FCF8;
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  *(_QWORD *)this = &off_1E792FCF8;
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
  JUMPOUT(0x1C3B8D890);
}

{
  *(_QWORD *)this = &off_1E792FCF8;
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

uint64_t SnippetUI::OptionalDouble::New(SnippetUI::OptionalDouble *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OptionalDouble>(0);
}

uint64_t SnippetUI::OptionalDouble::New(SnippetUI::OptionalDouble *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OptionalDouble>(a2);
}

void SnippetUI::OptionalDouble::Clear(SnippetUI::OptionalDouble *this)
{
  google::protobuf::internal::InternalMetadataWithArena *v1;
  char v2;

  v2 = *((_BYTE *)this + 8);
  v1 = (SnippetUI::OptionalDouble *)((char *)this + 8);
  *((_QWORD *)v1 + 1) = 0;
  if ((v2 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v1);
}

uint64_t SnippetUI::OptionalDouble::IsInitialized(SnippetUI::OptionalDouble *this)
{
  return 1;
}

char *SnippetUI::OptionalDouble::ByteSizeLong(SnippetUI::OptionalDouble *this)
{
  uint64_t v1;

  if (*((double *)this + 2) == 0.0)
    v1 = 0;
  else
    v1 = 9;
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::OptionalDouble *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)v1, (_DWORD *)this + 6);
  *((_DWORD *)this + 6) = v1;
  return (char *)v1;
}

uint64_t SnippetUI::OptionalDouble::GetCachedSize(SnippetUI::OptionalDouble *this)
{
  return *((unsigned int *)this + 6);
}

google::protobuf::internal *SnippetUI::OptionalDouble::_InternalParse(SnippetUI::OptionalDouble *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  uint64_t *v5;
  google::protobuf::internal::ParseContext *v6;
  char *TagFallback;
  char *v8;
  google::protobuf::internal *v11;

  v11 = a2;
  v5 = (uint64_t *)((char *)this + 8);
  while (1)
  {
    while (1)
    {
      if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v11, *((_DWORD *)a3 + 23)) & 1) != 0)
        return v11;
      TagFallback = (char *)v11 + 1;
      v8 = (char *)*(unsigned __int8 *)v11;
      if ((*(char *)v11 & 0x80000000) == 0)
        goto LABEL_6;
      v8 = (char *)(v8 + (*TagFallback << 7) - 128);
      if ((*TagFallback & 0x80000000) == 0)
      {
        TagFallback = (char *)v11 + 2;
LABEL_6:
        v11 = (google::protobuf::internal *)TagFallback;
        goto LABEL_7;
      }
      TagFallback = (char *)google::protobuf::internal::ReadTagFallback(v11, v8);
      v11 = (google::protobuf::internal *)TagFallback;
      if (!TagFallback)
        return (google::protobuf::internal *)TagFallback;
LABEL_7:
      if ((_DWORD)v8 != 9)
        break;
      *((_QWORD *)this + 2) = *(_QWORD *)TagFallback;
      v11 = (google::protobuf::internal *)(TagFallback + 8);
    }
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      break;
    v11 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v8, v5, (google::protobuf::internal::InternalMetadataWithArena *)TagFallback, a3, v6);
    if (!v11)
      return 0;
  }
  *((_DWORD *)a3 + 20) = (_DWORD)v8 - 1;
  return (google::protobuf::internal *)TagFallback;
}

const google::protobuf::UnknownFieldSet *SnippetUI::OptionalDouble::InternalSerializeWithCachedSizesToArray(SnippetUI::OptionalDouble *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  uint64_t v6;
  uint64_t v7;

  if (*((double *)this + 2) != 0.0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v6 = *((_QWORD *)this + 2);
    }
    else
    {
      v6 = *((_QWORD *)this + 2);
    }
    *a2 = 9;
    *(_QWORD *)(a2 + 1) = v6;
    a2 += 9;
  }
  v7 = *((_QWORD *)this + 1);
  if ((v7 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v7 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)a2;
}

void SnippetUI::OptionalDouble::CopyFrom(SnippetUI::OptionalDouble *this, const google::protobuf::Message *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  char v5;

  if (a2 != this)
  {
    v5 = *((_BYTE *)this + 8);
    v4 = (SnippetUI::OptionalDouble *)((char *)this + 8);
    *((_QWORD *)v4 + 1) = 0;
    if ((v5 & 1) != 0)
      google::protobuf::internal::InternalMetadataWithArena::DoClear(v4);
    SnippetUI::OptionalDouble::MergeFrom(this, a2);
  }
}

void SnippetUI::OptionalDouble::MergeFrom(SnippetUI::OptionalDouble *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::OptionalDouble *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/OptionalDataTypes.pb.cc", 635);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::OptionalDouble::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BF972CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::OptionalDouble::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 24) = a2;
  return this;
}

uint64_t SnippetUI::OptionalDouble::GetMetadata(SnippetUI::OptionalDouble *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_OptionalDataTypes_2eproto);
  return qword_1EF581CC0;
}

uint64_t *SnippetUI::OptionalDouble::default_instance(SnippetUI::OptionalDouble *this)
{
  if (atomic_load(scc_info_OptionalDouble_OptionalDataTypes_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_OptionalDouble_OptionalDataTypes_2eproto);
  return &SnippetUI::_OptionalDouble_default_instance_;
}

void SnippetUI::OptionalDouble::MergeFrom(SnippetUI::OptionalDouble *this, const SnippetUI::OptionalDouble *a2)
{
  std::string *v4;
  uint64_t v5;
  double v6;
  char v7;
  std::string v8[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/OptionalDataTypes.pb.cc", 650);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::OptionalDouble *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((double *)a2 + 2);
  if (v6 != 0.0)
    *((double *)this + 2) = v6;
}

void sub_1BF972DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OptionalDouble>(google::protobuf::internal::ArenaImpl *this)
{
  uint64_t result;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    result = (uint64_t)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x20uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::OptionalDouble>);
  }
  else
  {
    result = operator new();
  }
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &off_1E792FCF8;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::OptionalDouble>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t *SnippetUI::OptionalBool::default_instance(SnippetUI::OptionalBool *this)
{
  if (atomic_load(scc_info_OptionalBool_OptionalDataTypes_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_OptionalBool_OptionalDataTypes_2eproto);
  return &SnippetUI::_OptionalBool_default_instance_;
}

void SnippetUI::OptionalBool::MergeFrom(SnippetUI::OptionalBool *this, const SnippetUI::OptionalBool *a2)
{
  std::string *v4;
  uint64_t v5;
  char v6;
  std::string v7[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/OptionalDataTypes.pb.cc", 466);
    v4 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::OptionalBool *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  if (*((_BYTE *)a2 + 16))
    *((_BYTE *)this + 16) = 1;
}

void sub_1BF972F44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OptionalBool>(google::protobuf::internal::ArenaImpl *this)
{
  uint64_t result;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    result = (uint64_t)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::OptionalBool>);
  }
  else
  {
    result = operator new();
  }
  *(_QWORD *)result = &off_1E792FC38;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 20) = 0;
  *(_BYTE *)(result + 16) = 0;
  return result;
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::OptionalBool>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

_QWORD *SnippetUI::OptionalInt::OptionalInt(_QWORD *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = &off_1E792FB78;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = &off_1E792FB78;
  return this;
}

SnippetUI::OptionalInt *SnippetUI::OptionalInt::OptionalInt(SnippetUI::OptionalInt *this, const SnippetUI::OptionalInt *a2)
{
  uint64_t v4;

  *(_QWORD *)this = &off_1E792FB78;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 5) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::OptionalInt *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  return this;
}

void sub_1BF973078(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::OptionalInt::CopyFrom(SnippetUI::OptionalInt *this, const SnippetUI::OptionalInt *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  char v5;

  if (a2 != this)
  {
    v5 = *((_BYTE *)this + 8);
    v4 = (SnippetUI::OptionalInt *)((char *)this + 8);
    *((_DWORD *)v4 + 2) = 0;
    if ((v5 & 1) != 0)
      google::protobuf::internal::InternalMetadataWithArena::DoClear(v4);
    SnippetUI::OptionalInt::MergeFrom(this, a2);
  }
}

void SnippetUI::OptionalInt::InternalSwap(SnippetUI::OptionalInt *this, SnippetUI::OptionalInt *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  int v7;
  google::protobuf::UnknownFieldSet *v8;

  v4 = (SnippetUI::OptionalInt *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v8;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  v7 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v7;
}

uint64_t SnippetUI::OptionalBool::OptionalBool(uint64_t this)
{
  *(_QWORD *)this = &off_1E792FC38;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  *(_BYTE *)(this + 16) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_1E792FC38;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 20) = 0;
  *(_BYTE *)(this + 16) = 0;
  return this;
}

SnippetUI::OptionalBool *SnippetUI::OptionalBool::OptionalBool(SnippetUI::OptionalBool *this, const SnippetUI::OptionalBool *a2)
{
  uint64_t v4;

  *(_QWORD *)this = &off_1E792FC38;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 5) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::OptionalBool *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_BYTE *)this + 16) = *((_BYTE *)a2 + 16);
  return this;
}

void sub_1BF973208(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::OptionalBool::CopyFrom(SnippetUI::OptionalBool *this, const SnippetUI::OptionalBool *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  char v5;

  if (a2 != this)
  {
    v5 = *((_BYTE *)this + 8);
    v4 = (SnippetUI::OptionalBool *)((char *)this + 8);
    *((_BYTE *)v4 + 8) = 0;
    if ((v5 & 1) != 0)
      google::protobuf::internal::InternalMetadataWithArena::DoClear(v4);
    SnippetUI::OptionalBool::MergeFrom(this, a2);
  }
}

void SnippetUI::OptionalBool::InternalSwap(SnippetUI::OptionalBool *this, SnippetUI::OptionalBool *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  char v7;
  google::protobuf::UnknownFieldSet *v8;

  v4 = (SnippetUI::OptionalBool *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v8;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  v7 = *((_BYTE *)this + 16);
  *((_BYTE *)this + 16) = *((_BYTE *)a2 + 16);
  *((_BYTE *)a2 + 16) = v7;
}

uint64_t SnippetUI::OptionalDouble::OptionalDouble(uint64_t this)
{
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = &off_1E792FCF8;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = &off_1E792FCF8;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

SnippetUI::OptionalDouble *SnippetUI::OptionalDouble::OptionalDouble(SnippetUI::OptionalDouble *this, const SnippetUI::OptionalDouble *a2)
{
  uint64_t v4;

  *(_QWORD *)this = &off_1E792FCF8;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::OptionalDouble *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  return this;
}

void sub_1BF973398(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::OptionalDouble::CopyFrom(SnippetUI::OptionalDouble *this, const SnippetUI::OptionalDouble *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  char v5;

  if (a2 != this)
  {
    v5 = *((_BYTE *)this + 8);
    v4 = (SnippetUI::OptionalDouble *)((char *)this + 8);
    *((_QWORD *)v4 + 1) = 0;
    if ((v5 & 1) != 0)
      google::protobuf::internal::InternalMetadataWithArena::DoClear(v4);
    SnippetUI::OptionalDouble::MergeFrom(this, a2);
  }
}

double SnippetUI::OptionalDouble::InternalSwap(SnippetUI::OptionalDouble *this, SnippetUI::OptionalDouble *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  double result;
  google::protobuf::UnknownFieldSet *v8;

  v4 = (SnippetUI::OptionalDouble *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v8;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  result = *((double *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((double *)a2 + 2) = result;
  return result;
}

void sub_1BF973528(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BF973648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  int v24;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v24 & 1) == 0)
    {
LABEL_8:

      _Unwind_Resume(a1);
    }
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  MEMORY[0x1C3B8D890](v23, 0x1012C4059F2399FLL);
  goto LABEL_8;
}

void sub_1BF973730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)DESpeakableString;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1BF9737E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1BF973880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1BF97393C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1BF9739D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1BF973A50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::SemanticModel::empty(siri::dialogengine::SemanticModel *this)
{
  return !*(_QWORD *)this && *((_QWORD *)this + 4) == 0;
}

uint64_t siri::dialogengine::GetSemanticModelCacheSize(siri::dialogengine *this)
{
  uint64_t SemanticModelCache;
  std::mutex *v2;
  uint64_t v3;

  SemanticModelCache = siri::dialogengine::GetSemanticModelCache(this);
  v2 = (std::mutex *)(SemanticModelCache + 24);
  std::mutex::lock((std::mutex *)(SemanticModelCache + 24));
  v3 = *(_QWORD *)(SemanticModelCache + 104);
  std::mutex::unlock(v2);
  return v3;
}

uint64_t siri::dialogengine::GetSemanticModelCache(siri::dialogengine *this)
{
  unsigned __int8 v1;
  unint64_t v2;
  _QWORD *v4;
  char v5;
  char **v6;
  char *v7;

  {
    v4 = (_QWORD *)operator new();
    *v4 = 0;
    siri::dialogengine::GetSemanticModelCache(void)::flag = (uint64_t)v4;
  }
  v2 = atomic_load((unint64_t *)siri::dialogengine::GetSemanticModelCache(void)::flag);
  if (v2 != -1)
  {
    v7 = &v5;
    v6 = &v7;
    std::__call_once((std::once_flag::_State_type *)siri::dialogengine::GetSemanticModelCache(void)::flag, &v6, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetSemanticModelCache(void)::$_0 &&>>);
  }
  return siri::dialogengine::GetSemanticModelCache(void)::sCache;
}

void sub_1BF973B78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetSemanticModelCache(void)::$_0 &&>>()
{
  uint64_t v0;
  double result;
  __int128 v2;
  uint64_t v3;

  v0 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&v2, "static");
  *(_OWORD *)v0 = v2;
  *(_QWORD *)(v0 + 16) = v3;
  *(_QWORD *)(v0 + 24) = 850045863;
  result = 0.0;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_QWORD *)(v0 + 104) = 0;
  *(_QWORD *)(v0 + 96) = 0;
  *(_QWORD *)(v0 + 80) = 0;
  *(_QWORD *)(v0 + 88) = v0 + 96;
  siri::dialogengine::GetSemanticModelCache(void)::sCache = v0;
  return result;
}

void sub_1BF973C18(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x1032C40C9734361);
  _Unwind_Resume(a1);
}

void siri::dialogengine::GetSemanticModel(_QWORD *a1@<X0>, std::string *a2@<X1>, uint64_t a3@<X8>)
{
  const char *v6;
  std::string::size_type size;
  siri::dialogengine *v8;
  siri::dialogengine::Context *v9;
  std::string::size_type v10;
  uint64_t v11;
  uint64_t SemanticModelCache;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  const char *v18;
  int v19;
  __int128 v20;
  uint64_t *v21;
  int v22;
  std::string::size_type v23;
  int v24;
  std::string::size_type v25;
  std::string *v26;
  std::string *p_p;
  std::string *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::string *v32;
  std::string *i;
  std::string::size_type v34;
  std::string::size_type v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::string *v43;
  __int128 v44;
  std::string *v45;
  std::string::size_type v46;
  std::string *v47;
  __int128 v48;
  std::string::size_type v49;
  std::string::size_type v50;
  int v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD **v56;
  std::string::size_type v57;
  std::string::size_type v58;
  _QWORD *v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  int v64;
  unint64_t *v65;
  unint64_t v66;
  char v67;
  std::string::size_type v68;
  _QWORD *v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  const char *v73;
  __int128 v74;
  int v75;
  std::string::size_type v76;
  uint64_t v77;
  std::string::size_type v78;
  unint64_t *v79;
  unint64_t v80;
  int v81;
  std::string::size_type v82;
  int v83;
  std::string::size_type v84;
  std::string *v85;
  std::string *v86;
  __int128 v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::string *v91;
  std::string *v92;
  std::string *v93;
  const char *v94;
  int v95;
  std::string::size_type v96;
  std::string *v97;
  std::string *v98;
  uint64_t v99;
  std::string::size_type v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  const char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  std::string *p_str;
  uint64_t v117;
  const void **v118;
  _QWORD *v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  const char *v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  int v128;
  std::string::size_type v129;
  std::string *v130;
  std::string *v131;
  uint64_t v132;
  unint64_t *v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  std::string __p;
  __int128 v138;
  const void **v139;
  _QWORD *v140;
  uint64_t v141;
  char v142;
  std::string v143;
  __int128 v144;
  const void **v145;
  _QWORD *v146;
  uint64_t v147;
  char v148;
  std::string v149;
  std::string v150;
  __int128 v151;
  const void **v152;
  _QWORD *v153;
  uint64_t v154;
  char v155;
  std::string v156;
  std::string v157;
  std::string v158;
  std::string v159;
  std::string v160;
  std::string v161;
  std::string v162;
  uint64_t *v163;
  _QWORD *v164[2];
  __int128 v165;
  const void **v166;
  _QWORD *v167;
  uint64_t v168;
  char v169;
  std::string *v170;
  std::string *v171;
  _BYTE __sz[32];
  uint64_t v173;
  const void **v174[3];
  char v175;
  unsigned __int8 v176;
  std::string v177;
  std::string __str;

  if (!a1)
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Internal programming error - no context specified to create semantic model.", (const char *)a2);
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_QWORD *)(a3 + 16) = a3 + 24;
    return;
  }
  siri::dialogengine::Context::GetLocale((siri::dialogengine::Context *)a1, (const char *)a2, (uint64_t)&__str);
  size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __str.__r_.__value_.__l.__size_;
  if (size)
  {
    siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)__sz, (const siri::dialogengine::RequestInfo *)(a1 + 1));
    siri::dialogengine::RequestInfo::GetDialogMetadata((uint64_t)__sz, (const void **)&a2->__r_.__value_.__l.__data_, &v177);
    siri::dialogengine::RequestInfo::~RequestInfo((void **)__sz);
    if ((v177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = HIBYTE(v177.__r_.__value_.__r.__words[2]);
    else
      v10 = v177.__r_.__value_.__l.__size_;
    if (!v10)
    {
      SemanticModelCache = siri::dialogengine::GetSemanticModelCache(v8);
      goto LABEL_22;
    }
    v11 = a1[433];
    if (v11)
    {
      SemanticModelCache = *(_QWORD *)(v11 + 72);
      v13 = *(std::__shared_weak_count **)(v11 + 80);
      if (!v13)
        goto LABEL_22;
    }
    else
    {
      SemanticModelCache = a1[437];
      v13 = (std::__shared_weak_count *)a1[438];
      if (!v13)
        goto LABEL_22;
    }
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
    v16 = (unint64_t *)&v13->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
LABEL_22:
    siri::dialogengine::RegisterMorphunData((siri::dialogengine *)a1, v9);
    siri::dialogengine::GetFallbackLocales((uint64_t)&__str, (uint64_t *)&v170);
    v164[1] = 0;
    v165 = 0uLL;
    v168 = 0;
    v167 = 0;
    v136 = SemanticModelCache;
    v166 = (const void **)&v167;
    v169 = 0;
    v163 = (uint64_t *)v164;
    v164[0] = 0;
    memset(&v162, 0, sizeof(v162));
    memset(&v161, 0, sizeof(v161));
    memset(&v160, 0, sizeof(v160));
    if (v10)
    {
      MEMORY[0x1C3B8D53C](&v162, "custom");
      MEMORY[0x1C3B8D53C](&v161, "<data_from_parameter>");
      siri::dialogengine::SemanticModelCache::CreateKey((const void **)&a2->__r_.__value_.__l.__data_, (uint64_t)&v162, &v150);
      siri::dialogengine::SemanticModelCache::Find(SemanticModelCache, &v150, (std::string *)__sz);
      v19 = v176;
      if (v176)
      {
        if (*(char *)(SemanticModelCache + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)SemanticModelCache, *(_QWORD *)(SemanticModelCache + 8));
        }
        else
        {
          v20 = *(_OWORD *)SemanticModelCache;
          __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(SemanticModelCache + 16);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
        }
        v22 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        v23 = __p.__r_.__value_.__r.__words[0];
        v24 = SHIBYTE(v150.__r_.__value_.__r.__words[2]);
        v25 = v150.__r_.__value_.__r.__words[0];
        if ((__sz[23] & 0x80000000) != 0)
          std::string::__init_copy_ctor_external(&v159, *(const std::string::value_type **)__sz, *(std::string::size_type *)&__sz[8]);
        else
          v159 = *(std::string *)__sz;
        v26 = &v150;
        if (v24 < 0)
          v26 = (std::string *)v25;
        p_p = &__p;
        if (v22 < 0)
          p_p = (std::string *)v23;
        v28 = &v159;
        if ((v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v28 = (std::string *)v159.__r_.__value_.__r.__words[0];
        siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Returning cached semantic model from %s cache for key \"%s\" with path/tag \"%s\"", v18, p_p, v26, v28);
        if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v159.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v29 = v173;
        *(_QWORD *)a3 = *(_QWORD *)&__sz[24];
        *(_QWORD *)(a3 + 8) = v29;
        if (v29)
        {
          v30 = (unint64_t *)(v29 + 8);
          do
            v31 = __ldxr(v30);
          while (__stxr(v31 + 1, v30));
        }
        std::map<std::string,std::string>::map[abi:ne180100](a3 + 16, v174);
        *(_BYTE *)(a3 + 40) = v175;
      }
      else
      {
        if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v21 = (uint64_t *)a2;
        else
          v21 = (uint64_t *)a2->__r_.__value_.__r.__words[0];
        siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Loading dialog metadata for \"%s\" from request data", v18, v21);
        siri::dialogengine::DecodeBase64((std::string::size_type)&v177, &v158);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E792FE00;
        *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = *(_OWORD *)&v158.__r_.__value_.__l.__data_;
        *(_QWORD *)&v138 = *((_QWORD *)&v158.__r_.__value_.__l + 2);
        memset(&v158, 0, sizeof(v158));
        siri::dialogengine::ReadOneMetadataFile((uint64_t)&__p, a2, (uint64_t)&__str, (uint64_t)&v165, &v163);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E792FE00;
        if (SBYTE7(v138) < 0)
          operator delete((void *)__p.__r_.__value_.__l.__size_);
      }
      std::__optional_destruct_base<siri::dialogengine::SemanticModelCache::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__sz);
      if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v150.__r_.__value_.__l.__data_);
        if (v19)
          goto LABEL_230;
      }
      else if (v19)
      {
        goto LABEL_230;
      }
    }
    v135 = a3;
    v32 = v170;
    for (i = v171; v32 != i; ++v32)
    {
      v34 = HIBYTE(v162.__r_.__value_.__r.__words[2]);
      if ((v162.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v34 = v162.__r_.__value_.__l.__size_;
      if (!v34)
      {
        siri::dialogengine::SemanticModelCache::CreateKey((const void **)&a2->__r_.__value_.__l.__data_, (uint64_t)v32, &__p);
        siri::dialogengine::SemanticModelCache::Find(v136, &__p, (std::string *)__sz);
        if (v176)
        {
          v77 = a1[431];
          v78 = a1[432];
          v159.__r_.__value_.__r.__words[0] = v77;
          v159.__r_.__value_.__l.__size_ = v78;
          if (v78)
          {
            v79 = (unint64_t *)(v78 + 8);
            do
              v80 = __ldxr(v79);
            while (__stxr(v80 + 1, v79));
          }
          a3 = v135;
          if ((__sz[23] & 0x80000000) != 0)
            std::string::__init_copy_ctor_external(&v150, *(const std::string::value_type **)__sz, *(std::string::size_type *)&__sz[8]);
          else
            v150 = *(std::string *)__sz;
          siri::dialogengine::TraceWriter::CopyMetadataFile(v77, &v150);
          if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v150.__r_.__value_.__l.__data_);
          v125 = (std::__shared_weak_count *)v159.__r_.__value_.__l.__size_;
          if (v159.__r_.__value_.__l.__size_)
          {
            v126 = (unint64_t *)(v159.__r_.__value_.__l.__size_ + 8);
            do
              v127 = __ldaxr(v126);
            while (__stlxr(v127 - 1, v126));
            if (!v127)
            {
              ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
              std::__shared_weak_count::__release_weak(v125);
            }
          }
          v128 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          v129 = __p.__r_.__value_.__r.__words[0];
          if ((__sz[23] & 0x80000000) != 0)
            std::string::__init_copy_ctor_external(&v150, *(const std::string::value_type **)__sz, *(std::string::size_type *)&__sz[8]);
          else
            v150 = *(std::string *)__sz;
          v130 = &__p;
          if (v128 < 0)
            v130 = (std::string *)v129;
          v131 = &v150;
          if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v131 = (std::string *)v150.__r_.__value_.__r.__words[0];
          siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Returning cached semantic model for key \"%s\" with path/tag \"%s\"", v124, v130, v131);
          if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v150.__r_.__value_.__l.__data_);
          v132 = v173;
          *(_QWORD *)v135 = *(_QWORD *)&__sz[24];
          *(_QWORD *)(v135 + 8) = v132;
          if (v132)
          {
            v133 = (unint64_t *)(v132 + 8);
            do
              v134 = __ldxr(v133);
            while (__stxr(v134 + 1, v133));
          }
          std::map<std::string,std::string>::map[abi:ne180100](v135 + 16, v174);
          *(_BYTE *)(v135 + 40) = v175;
          std::__optional_destruct_base<siri::dialogengine::SemanticModelCache::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__sz);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
LABEL_230:
          v64 = 1;
          goto LABEL_231;
        }
        std::__optional_destruct_base<siri::dialogengine::SemanticModelCache::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__sz);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)__sz, (const siri::dialogengine::RequestInfo *)(a1 + 1));
      memset(&v150, 0, sizeof(v150));
      std::vector<siri::dialogengine::UpdatableDir>::__init_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>(&v150, *(uint64_t *)&__sz[8], *(uint64_t *)&__sz[16], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&__sz[16] - *(_QWORD *)&__sz[8]) >> 5));
      siri::dialogengine::FindDialogMetadataFile((uint64_t *)&v150, (const void **)&a2->__r_.__value_.__l.__data_, (const void **)&v32->__r_.__value_.__l.__data_, (uint64_t)&__p);
      v159.__r_.__value_.__r.__words[0] = (std::string::size_type)&v150;
      std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&v159);
      siri::dialogengine::RequestInfo::~RequestInfo((void **)__sz);
      v35 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v35 = __p.__r_.__value_.__l.__size_;
      if (v35 && siri::dialogengine::FileExists((uint64_t *)&__p))
      {
        v36 = a1[431];
        v37 = a1[432];
        *(_QWORD *)__sz = v36;
        *(_QWORD *)&__sz[8] = v37;
        if (v37)
        {
          v38 = (unint64_t *)(v37 + 8);
          do
            v39 = __ldxr(v38);
          while (__stxr(v39 + 1, v38));
        }
        siri::dialogengine::TraceWriter::CopyMetadataFile(v36, &__p);
        v40 = *(std::__shared_weak_count **)&__sz[8];
        if (*(_QWORD *)&__sz[8])
        {
          v41 = (unint64_t *)(*(_QWORD *)&__sz[8] + 8);
          do
            v42 = __ldaxr(v41);
          while (__stlxr(v42 - 1, v41));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
        }
        std::operator+<char>();
        v43 = std::string::append(&v159, "' from file: ");
        v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
        v150.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v150.__r_.__value_.__l.__data_ = v44;
        v43->__r_.__value_.__l.__size_ = 0;
        v43->__r_.__value_.__r.__words[2] = 0;
        v43->__r_.__value_.__r.__words[0] = 0;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v45 = &__p;
        else
          v45 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v46 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v46 = __p.__r_.__value_.__l.__size_;
        v47 = std::string::append(&v150, (const std::string::value_type *)v45, v46);
        v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        *(_QWORD *)&__sz[16] = *((_QWORD *)&v47->__r_.__value_.__l + 2);
        *(_OWORD *)__sz = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::Log::Debug((siri::dialogengine *)__sz);
        if ((__sz[23] & 0x80000000) != 0)
          operator delete(*(void **)__sz);
        if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v150.__r_.__value_.__l.__data_);
        if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v159.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v157, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        else
          v157 = __p;
        *(_QWORD *)__sz = off_1E7930A48;
        *(std::string *)&__sz[8] = v157;
        memset(&v157, 0, sizeof(v157));
        siri::dialogengine::ReadOneMetadataFile((uint64_t)__sz, a2, (uint64_t)v32, (uint64_t)&v165, &v163);
        v49 = HIBYTE(v162.__r_.__value_.__r.__words[2]);
        if ((v162.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v49 = v162.__r_.__value_.__l.__size_;
        if (!v49)
        {
          std::string::operator=(&v162, v32);
          std::string::operator=(&v161, &__p);
        }
        v50 = HIBYTE(v160.__r_.__value_.__r.__words[2]);
        if ((v160.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v50 = v160.__r_.__value_.__l.__size_;
        if (!v50)
          std::string::operator=(&v160, v32);
        *(_QWORD *)__sz = off_1E7930A48;
        if ((__sz[31] & 0x80000000) != 0)
          operator delete(*(void **)&__sz[8]);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    v51 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
    if (v51 < 0)
    {
      a3 = v135;
      if (a2->__r_.__value_.__l.__size_ != 13)
        goto LABEL_118;
      v52 = (uint64_t *)a2->__r_.__value_.__r.__words[0];
    }
    else
    {
      v52 = (uint64_t *)a2;
      a3 = v135;
      if (v51 != 13)
        goto LABEL_118;
    }
    v53 = *v52;
    v54 = *(uint64_t *)((char *)v52 + 5);
    if (v53 == 0x7250726577736E61 && v54 == 0x746375646F725072)
    {
      std::string::basic_string[abi:ne180100]<0>(__sz, "reality_device");
      v56 = (_QWORD **)std::__tree<std::string>::find<std::string>((uint64_t)&v166, (const void **)__sz);
      if ((__sz[23] & 0x80000000) != 0)
        operator delete(*(void **)__sz);
      if (&v167 == v56)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "CmwKDWFuc3dlclByb2R1Y3QSDnJlYWxpdHlfZGV2aWNlGiUKEEFwcGxlIFZpc2lvbiBQcm8SEQoFY291bnQSCHNpbmd1bGFyGiQKEUFwcGxlIFZpc2lvbiBQcm9zEg8KBWNvdW50EgZwbHVyYWwQAQ==");
        siri::dialogengine::DecodeBase64((std::string::size_type)&__p, &v156);
        *(_QWORD *)__sz = off_1E792FE00;
        *(std::string *)&__sz[8] = v156;
        memset(&v156, 0, sizeof(v156));
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        siri::dialogengine::ReadOneMetadataFile((uint64_t)__sz, a2, (uint64_t)&__str, (uint64_t)&v165, &v163);
        *(_QWORD *)__sz = off_1E792FE00;
        if ((__sz[31] & 0x80000000) != 0)
          operator delete(*(void **)&__sz[8]);
      }
    }
LABEL_118:
    v57 = HIBYTE(v162.__r_.__value_.__r.__words[2]);
    if ((v162.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v57 = v162.__r_.__value_.__l.__size_;
    if (v57)
    {
      v58 = HIBYTE(v160.__r_.__value_.__r.__words[2]);
      if ((v160.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v58 = v160.__r_.__value_.__l.__size_;
      if (!v58)
        std::string::operator=(&v160, &__str);
      memset(&__p, 0, sizeof(__p));
      memset(&v150, 0, sizeof(v150));
      memset(&v159, 0, sizeof(v159));
      morphun::util::ULocale::ULocale();
      if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v159.__r_.__value_.__l.__data_);
      if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v150.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v59 = operator new(0x108uLL);
      v59[1] = 0;
      v59[2] = 0;
      *v59 = &off_1E792FE30;
      *(_QWORD *)&v60 = MEMORY[0x1C3B8D2A8](v59 + 3, __sz, &v163);
      *((_QWORD *)&v60 + 1) = v59;
      v61 = (std::__shared_weak_count *)*((_QWORD *)&v165 + 1);
      v165 = v60;
      if (v61)
      {
        v62 = (unint64_t *)&v61->__shared_owners_;
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
      siri::dialogengine::SemanticModelCache::CreateKey((const void **)&a2->__r_.__value_.__l.__data_, (uint64_t)&v162, &v159);
      if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v149, v161.__r_.__value_.__l.__data_, v161.__r_.__value_.__l.__size_);
      else
        v149 = v161;
      v144 = v165;
      if (*((_QWORD *)&v165 + 1))
      {
        v65 = (unint64_t *)(*((_QWORD *)&v165 + 1) + 8);
        do
          v66 = __ldxr(v65);
        while (__stxr(v66 + 1, v65));
      }
      std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&v145, &v166);
      v67 = v169;
      v148 = v169;
      *(_OWORD *)&v150.__r_.__value_.__l.__data_ = *(_OWORD *)&v149.__r_.__value_.__l.__data_;
      v68 = v149.__r_.__value_.__r.__words[2];
      memset(&v149, 0, sizeof(v149));
      v151 = v144;
      v144 = 0uLL;
      v69 = v146;
      v150.__r_.__value_.__r.__words[2] = v68;
      v152 = v145;
      v153 = v146;
      v154 = v147;
      if (v147)
      {
        v146[2] = &v153;
        v145 = (const void **)&v146;
        v146 = 0;
        v147 = 0;
        v69 = 0;
      }
      else
      {
        v152 = (const void **)&v153;
      }
      v155 = v67;
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v69);
      v70 = (std::__shared_weak_count *)*((_QWORD *)&v144 + 1);
      if (*((_QWORD *)&v144 + 1))
      {
        v71 = (unint64_t *)(*((_QWORD *)&v144 + 1) + 8);
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
      if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v149.__r_.__value_.__l.__data_);
      if (siri::dialogengine::SemanticModelCache::Insert((uint64_t *)v136, (uint64_t)&v159, (uint64_t)&v150))
      {
        if (*(char *)(v136 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v136, *(_QWORD *)(v136 + 8));
        }
        else
        {
          v74 = *(_OWORD *)v136;
          __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v136 + 16);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v74;
        }
        v81 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        v82 = __p.__r_.__value_.__r.__words[0];
        v83 = SHIBYTE(v159.__r_.__value_.__r.__words[2]);
        v84 = v159.__r_.__value_.__r.__words[0];
        if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v143, v150.__r_.__value_.__l.__data_, v150.__r_.__value_.__l.__size_);
        else
          v143 = v150;
        v91 = &v159;
        if (v83 < 0)
          v91 = (std::string *)v84;
        v92 = &__p;
        if (v81 < 0)
          v92 = (std::string *)v82;
        v93 = &v143;
        if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v93 = (std::string *)v143.__r_.__value_.__r.__words[0];
        siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Added new semantic model entry to %s cache for key \"%s\" with path/tag \"%s\"", v73, v92, v91, v93);
        if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v143.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        v75 = SHIBYTE(v159.__r_.__value_.__r.__words[2]);
        v76 = v159.__r_.__value_.__r.__words[0];
        if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&__p, v150.__r_.__value_.__l.__data_, v150.__r_.__value_.__l.__size_);
        else
          __p = v150;
        v85 = &v159;
        if (v75 < 0)
          v85 = (std::string *)v76;
        v86 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v86 = (std::string *)__p.__r_.__value_.__r.__words[0];
        siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Not caching semantic model for key \"%s\" with path/tag \"%s\" as another has been contructed and cached while this model was being created", v73, v85, v86);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        siri::dialogengine::SemanticModelCache::Find(v136, &v159, &__p);
        if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v150.__r_.__value_.__l.__data_);
        v150 = __p;
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
        __p.__r_.__value_.__s.__data_[0] = 0;
        v87 = v138;
        v138 = 0uLL;
        v88 = (std::__shared_weak_count *)*((_QWORD *)&v151 + 1);
        v151 = v87;
        if (v88)
        {
          v89 = (unint64_t *)&v88->__shared_owners_;
          do
            v90 = __ldaxr(v89);
          while (__stlxr(v90 - 1, v89));
          if (!v90)
          {
            ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
            std::__shared_weak_count::__release_weak(v88);
          }
        }
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v153);
        v152 = v139;
        v153 = v140;
        v154 = v141;
        if (v141)
        {
          v140[2] = &v153;
          v139 = (const void **)&v140;
          v140 = 0;
          v141 = 0;
        }
        else
        {
          v152 = (const void **)&v153;
        }
        v155 = v142;
        std::__optional_destruct_base<siri::dialogengine::SemanticModelCache::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&__p);
      }
      v95 = SHIBYTE(v159.__r_.__value_.__r.__words[2]);
      v96 = v159.__r_.__value_.__r.__words[0];
      if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&__p, v150.__r_.__value_.__l.__data_, v150.__r_.__value_.__l.__size_);
      else
        __p = v150;
      v97 = &v159;
      if (v95 < 0)
        v97 = (std::string *)v96;
      v98 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v98 = (std::string *)__p.__r_.__value_.__r.__words[0];
      siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Returning semantic model for key \"%s\" with path/tag \"%s\"", v94, v97, v98);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v99 = a1[431];
      v100 = a1[432];
      v143.__r_.__value_.__r.__words[0] = v99;
      v143.__r_.__value_.__l.__size_ = v100;
      if (v100)
      {
        v101 = (unint64_t *)(v100 + 8);
        do
          v102 = __ldxr(v101);
        while (__stxr(v102 + 1, v101));
      }
      if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&__p, v150.__r_.__value_.__l.__data_, v150.__r_.__value_.__l.__size_);
      else
        __p = v150;
      siri::dialogengine::TraceWriter::CopyMetadataFile(v99, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v103 = (std::__shared_weak_count *)v143.__r_.__value_.__l.__size_;
      if (v143.__r_.__value_.__l.__size_)
      {
        v104 = (unint64_t *)(v143.__r_.__value_.__l.__size_ + 8);
        do
          v105 = __ldaxr(v104);
        while (__stlxr(v105 - 1, v104));
        if (!v105)
        {
          ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
          std::__shared_weak_count::__release_weak(v103);
        }
      }
      v106 = *((_QWORD *)&v151 + 1);
      *(_QWORD *)a3 = v151;
      *(_QWORD *)(a3 + 8) = v106;
      if (v106)
      {
        v107 = (unint64_t *)(v106 + 8);
        do
          v108 = __ldxr(v107);
        while (__stxr(v108 + 1, v107));
      }
      std::map<std::string,std::string>::map[abi:ne180100](a3 + 16, &v152);
      *(_BYTE *)(a3 + 40) = v155;
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v153);
      v109 = (std::__shared_weak_count *)*((_QWORD *)&v151 + 1);
      if (*((_QWORD *)&v151 + 1))
      {
        v110 = (unint64_t *)(*((_QWORD *)&v151 + 1) + 8);
        do
          v111 = __ldaxr(v110);
        while (__stlxr(v111 - 1, v110));
        if (!v111)
        {
          ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
          std::__shared_weak_count::__release_weak(v109);
        }
      }
      if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v150.__r_.__value_.__l.__data_);
      if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v159.__r_.__value_.__l.__data_);
      morphun::util::ULocale::~ULocale((morphun::util::ULocale *)__sz);
      goto LABEL_230;
    }
    v64 = 0;
LABEL_231:
    if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v160.__r_.__value_.__l.__data_);
    if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v161.__r_.__value_.__l.__data_);
    if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v162.__r_.__value_.__l.__data_);
    std::__tree<std::__value_type<morphun::dialog::SemanticValue,morphun::dialog::SemanticFeatureModel_DisplayData>,std::__map_value_compare<morphun::dialog::SemanticValue,std::__value_type<morphun::dialog::SemanticValue,morphun::dialog::SemanticFeatureModel_DisplayData>,std::less<morphun::dialog::SemanticValue>,true>,std::allocator<std::__value_type<morphun::dialog::SemanticValue,morphun::dialog::SemanticFeatureModel_DisplayData>>>::destroy(v164[0]);
    if (!v64)
    {
      v113 = v165;
      v114 = v168;
      if (!(_QWORD)v165 && !v168)
      {
        if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v115 = (uint64_t *)a2;
        else
          v115 = (uint64_t *)a2->__r_.__value_.__r.__words[0];
        p_str = &__str;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        siri::dialogengine::Log::Error((siri::dialogengine::Log *)"No dialog metadata for semantic concept '%s' for locale '%s'", v112, v115, p_str);
        v113 = v165;
        v114 = v168;
      }
      v117 = *((_QWORD *)&v165 + 1);
      v118 = v166;
      *(_QWORD *)a3 = v113;
      *(_QWORD *)(a3 + 8) = v117;
      v165 = 0uLL;
      *(_QWORD *)(a3 + 16) = v118;
      v119 = v167;
      *(_QWORD *)(a3 + 24) = v167;
      v120 = a3 + 24;
      *(_QWORD *)(a3 + 32) = v114;
      if (v114)
      {
        v119[2] = v120;
        v166 = (const void **)&v167;
        v167 = 0;
        v168 = 0;
      }
      else
      {
        *(_QWORD *)(a3 + 16) = v120;
      }
      *(_BYTE *)(a3 + 40) = v169;
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v167);
    v121 = (std::__shared_weak_count *)*((_QWORD *)&v165 + 1);
    if (*((_QWORD *)&v165 + 1))
    {
      v122 = (unint64_t *)(*((_QWORD *)&v165 + 1) + 8);
      do
        v123 = __ldaxr(v122);
      while (__stlxr(v123 - 1, v122));
      if (!v123)
      {
        ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
        std::__shared_weak_count::__release_weak(v121);
      }
    }
    *(_QWORD *)__sz = &v170;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__sz);
    if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v177.__r_.__value_.__l.__data_);
    goto LABEL_257;
  }
  siri::dialogengine::Log::Error((siri::dialogengine::Log *)"No locale specified to create semantic model.", v6);
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_QWORD *)(a3 + 16) = a3 + 24;
LABEL_257:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1BF974CF8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _OWORD *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t __p_8, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  char a69;
  void *a70;
  char a71;
  void *a72;
  char a73;
  _QWORD *a74;
  uint64_t v74;
  void *v77;
  char *v78;
  std::string *v79;
  __int128 v80;

  std::__optional_destruct_base<siri::dialogengine::SemanticModelCache::Entry,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&STACK[0x250]);
  if (a20 < 0)
    operator delete(__p);
  if (a69 < 0)
    operator delete(a64);
  if (a71 < 0)
    operator delete(a70);
  if (a73 < 0)
    operator delete(a72);
  std::__tree<std::__value_type<morphun::dialog::SemanticValue,morphun::dialog::SemanticFeatureModel_DisplayData>,std::__map_value_compare<morphun::dialog::SemanticValue,std::__value_type<morphun::dialog::SemanticValue,morphun::dialog::SemanticFeatureModel_DisplayData>,std::less<morphun::dialog::SemanticValue>,true>,std::allocator<std::__value_type<morphun::dialog::SemanticValue,morphun::dialog::SemanticFeatureModel_DisplayData>>>::destroy(a74);
  if (a2 == 1)
  {
    v77 = __cxa_begin_catch(a1);
    v78 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v77 + 16))(v77);
    std::string::basic_string[abi:ne180100]<0>(&__p, v78);
    v79 = std::string::insert((std::string *)&__p, 0, "GetSemanticModel: Unable to create SemanticModel: ");
    v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
    STACK[0x260] = v79->__r_.__value_.__r.__words[2];
    *(_OWORD *)&STACK[0x250] = v80;
    v79->__r_.__value_.__l.__size_ = 0;
    v79->__r_.__value_.__r.__words[2] = 0;
    v79->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)&STACK[0x250], 3u);
    if (SLOBYTE(STACK[0x267]) < 0)
      operator delete((void *)STACK[0x250]);
    if (a20 < 0)
      operator delete(__p);
    a12[1] = 0u;
    a12[2] = 0u;
    *a12 = 0u;
    *((_QWORD *)a12 + 2) = (char *)a12 + 24;
    __cxa_end_catch();
    JUMPOUT(0x1BF974B38);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((_QWORD *)STACK[0x218]);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x200]);
  STACK[0x250] = (unint64_t)&STACK[0x238];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x250]);
  if (*(char *)(v74 - 121) < 0)
    operator delete(*(void **)(v74 - 144));
  if (*(char *)(v74 - 97) < 0)
    operator delete(*(void **)(v74 - 120));
  _Unwind_Resume(a1);
}

void sub_1BF9752A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (SLOBYTE(STACK[0x267]) < 0)
    operator delete((void *)STACK[0x250]);
  if (a20 < 0)
    operator delete(a15);
  __cxa_end_catch();
  JUMPOUT(0x1BF974DF8);
}

void siri::dialogengine::ReadOneMetadataFile(uint64_t a1, const std::string *a2, uint64_t a3, uint64_t a4, uint64_t **a5)
{
  siri::dialogengine::DialogMetadata::File **v9;
  morphun::dialog::LocalizedCommonConceptFactoryProvider *v10;
  uint64_t DefaultCommonConceptFactoryProvider;
  uint64_t v12;
  uint64_t v13;
  uint64_t NextSemanticValue;
  size_t v15;
  std::string *v16;
  const void *v17;
  int v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  std::string *v21;
  unsigned __int8 v22;
  BOOL v23;
  std::string::size_type size;
  std::string::size_type v25;
  uint64_t v26;
  BOOL v27;
  size_t v28;
  std::string::size_type v29;
  int v30;
  std::string *v31;
  std::string *v32;
  __int128 *v33;
  __int128 v34;
  _QWORD **v35;
  uint64_t Feature;
  char **v37;
  char *v38;
  std::string::size_type v39;
  void *v40;
  int v41;
  uint64_t *v42;
  uint64_t v43;
  int v44;
  BOOL v45;
  std::string *v46;
  __int128 v47;
  int v48;
  const std::string::value_type *v49;
  std::string::size_type v50;
  std::string *v51;
  __int128 v52;
  _QWORD *v53;
  _QWORD **v54;
  char *v55;
  void *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  const std::basic_string<char16_t>::value_type **v61;
  std::basic_string<char16_t> *v62;
  std::basic_string<char16_t> *v63;
  __int128 v64;
  const std::basic_string<char16_t>::value_type **v65;
  const std::basic_string<char16_t>::value_type **v66;
  const std::basic_string<char16_t>::value_type **v67;
  const std::basic_string<char16_t>::value_type *v68;
  const std::basic_string<char16_t>::value_type **v69;
  void *v70;
  __int128 v71;
  uint64_t **v72;
  uint64_t **v73;
  char *v74;
  uint64_t *v75;
  __int128 v76;
  std::string *v77;
  uint64_t v78;
  size_t v79;
  std::string *v80;
  const void *v81;
  int v82;
  const std::string::value_type *v83;
  std::string::size_type v84;
  std::string *v85;
  __int128 v86;
  std::string::size_type v87;
  std::string::size_type v88;
  char *v89;
  _QWORD *v90;
  char **v91;
  char *v92;
  char **v93;
  _QWORD *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t **v97;
  char **v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 *v102;
  __int128 *v103;
  uint64_t v104;
  uint64_t **v105;
  uint64_t v106;
  const std::basic_string<char16_t>::value_type **v107;
  __int128 v108;
  std::string v109;
  std::string v110;
  std::string v111;
  uint64_t *v112;
  uint64_t *v113;
  uint64_t v114;
  std::string v115;
  _QWORD **v116;
  _QWORD *v117[2];
  std::string v118;
  std::string v119;
  void *v120;
  char v121;
  void *v122;
  char v123;
  void *__p[3];
  _BYTE v125[128];
  uint64_t v126;
  _BYTE v127[32];
  void **v128;

  v9 = (siri::dialogengine::DialogMetadata::File **)siri::dialogengine::DialogMetadataReader::DialogMetadataReader((siri::dialogengine::DialogMetadataReader *)&v126);
  if (!siri::dialogengine::DialogMetadataReader::Load(v9, a2, a1))
    goto LABEL_185;
  *(_BYTE *)(a4 + 40) = *(_BYTE *)(v126 + 48);
  memset(&v115, 0, sizeof(v115));
  memset(v127, 0, 24);
  memset(__p, 0, sizeof(__p));
  v10 = (morphun::dialog::LocalizedCommonConceptFactoryProvider *)morphun::util::ULocale::ULocale();
  if ((v127[23] & 0x80000000) != 0)
    operator delete(*(void **)v127);
  if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v115.__r_.__value_.__l.__data_);
  DefaultCommonConceptFactoryProvider = morphun::dialog::LocalizedCommonConceptFactoryProvider::getDefaultCommonConceptFactoryProvider(v10);
  v12 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)DefaultCommonConceptFactoryProvider + 24))(DefaultCommonConceptFactoryProvider, v125);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
  NextSemanticValue = siri::dialogengine::DialogMetadataReader::GetNextSemanticValue((siri::dialogengine::DialogMetadataReader *)&v126);
  if (!NextSemanticValue)
    goto LABEL_184;
  v105 = (uint64_t **)(a4 + 16);
  v101 = a4 + 24;
  v98 = (char **)(a5 + 1);
  v106 = MEMORY[0x1E0DE75F0] + 40;
  v97 = a5;
  v99 = v13;
  do
  {
    memset(__p, 0, sizeof(__p));
    morphun::util::StringUtils::to_u16string();
    morphun::util::StringUtils::to_u16string();
    if (*(char *)(NextSemanticValue + 23) >= 0)
      v15 = *(unsigned __int8 *)(NextSemanticValue + 23);
    else
      v15 = *(_QWORD *)(NextSemanticValue + 8);
    std::string::basic_string[abi:ne180100]((uint64_t)&v115, v15 + 1);
    if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v115;
    else
      v16 = (std::string *)v115.__r_.__value_.__r.__words[0];
    if (v15)
    {
      if (*(char *)(NextSemanticValue + 23) >= 0)
        v17 = (const void *)NextSemanticValue;
      else
        v17 = *(const void **)NextSemanticValue;
      memmove(v16, v17, v15);
    }
    *(_WORD *)((char *)&v16->__r_.__value_.__l.__data_ + v15) = 35;
    v18 = *(char *)(NextSemanticValue + 47);
    if (v18 >= 0)
      v19 = (const std::string::value_type *)(NextSemanticValue + 24);
    else
      v19 = *(const std::string::value_type **)(NextSemanticValue + 24);
    if (v18 >= 0)
      v20 = *(unsigned __int8 *)(NextSemanticValue + 47);
    else
      v20 = *(_QWORD *)(NextSemanticValue + 32);
    v21 = std::string::append(&v115, v19, v20);
    v119 = *v21;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v115.__r_.__value_.__l.__data_);
    v22 = HIBYTE(v119.__r_.__value_.__r.__words[2]);
    v23 = (v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
    if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
    {
      size = v119.__r_.__value_.__l.__size_;
      std::string::__init_copy_ctor_external(&v118, v119.__r_.__value_.__l.__data_, v119.__r_.__value_.__l.__size_);
    }
    else
    {
      v118 = v119;
      size = v119.__r_.__value_.__l.__size_;
    }
    v25 = v22;
    v26 = HIBYTE(v118.__r_.__value_.__r.__words[2]);
    v27 = (v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
    v28 = v118.__r_.__value_.__l.__size_;
    if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v29 = HIBYTE(v118.__r_.__value_.__r.__words[2]);
    else
      v29 = v118.__r_.__value_.__l.__size_;
    if ((v22 & 0x80u) != 0)
      v25 = size;
    if (v29 != v25)
      goto LABEL_163;
    v30 = HIBYTE(v118.__r_.__value_.__r.__words[2]);
    while (1)
    {
      if (v23)
        v31 = (std::string *)v119.__r_.__value_.__r.__words[0];
      else
        v31 = &v119;
      if (v27)
      {
        if (memcmp(v118.__r_.__value_.__l.__data_, v31, v28))
          goto LABEL_163;
        goto LABEL_47;
      }
      if (v30)
        break;
LABEL_47:
      if (!NextSemanticValue)
        goto LABEL_163;
      v33 = *(__int128 **)(NextSemanticValue + 48);
      v102 = *(__int128 **)(NextSemanticValue + 56);
      if (v33 != v102)
      {
        v104 = NextSemanticValue + 24;
        v100 = NextSemanticValue;
        do
        {
          if (*((char *)v33 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v115, *(const std::string::value_type **)v33, *((_QWORD *)v33 + 1));
          }
          else
          {
            v34 = *v33;
            v115.__r_.__value_.__r.__words[2] = *((_QWORD *)v33 + 2);
            *(_OWORD *)&v115.__r_.__value_.__l.__data_ = v34;
          }
          std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&v116, (const void ***)v33 + 3);
          if (v13)
          {
            v103 = v33;
            v113 = 0;
            v114 = 0;
            v112 = (uint64_t *)&v113;
            v35 = v116;
            if (v116 != v117)
            {
              do
              {
                morphun::util::StringUtils::to_u16string();
                Feature = morphun::dialog::SemanticFeatureModel::getFeature();
                if ((v127[23] & 0x80000000) != 0)
                  operator delete(*(void **)v127);
                if (Feature)
                {
                  morphun::util::StringUtils::to_u16string();
                  v37 = (char **)std::__tree<std::__value_type<morphun::dialog::SemanticFeature,std::basic_string<char16_t>>,std::__map_value_compare<morphun::dialog::SemanticFeature,std::__value_type<morphun::dialog::SemanticFeature,std::basic_string<char16_t>>,std::less<morphun::dialog::SemanticFeature>,true>,std::allocator<std::__value_type<morphun::dialog::SemanticFeature,std::basic_string<char16_t>>>>::__find_equal<morphun::dialog::SemanticFeature>((uint64_t)&v112, &v110);
                  if (!*v37)
                  {
                    v38 = (char *)operator new(0x80uLL);
                    *(_QWORD *)v127 = v38;
                    *(_QWORD *)&v127[8] = &v113;
                    v127[16] = 0;
                    morphun::dialog::SemanticFeature::SemanticFeature();
                    *(std::string *)(v38 + 104) = v111;
                    memset(&v111, 0, sizeof(v111));
                    v127[16] = 1;
                    v39 = v110.__r_.__value_.__r.__words[0];
                    *(_QWORD *)v38 = 0;
                    *((_QWORD *)v38 + 1) = 0;
                    *((_QWORD *)v38 + 2) = v39;
                    *v37 = v38;
                    if (*v112)
                    {
                      v112 = (uint64_t *)*v112;
                      v38 = *v37;
                    }
                    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v113, (uint64_t *)v38);
                    ++v114;
                    *(_QWORD *)v127 = 0;
                    std::unique_ptr<std::__tree_node<std::__value_type<morphun::dialog::SemanticFeature,std::basic_string<char16_t>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<morphun::dialog::SemanticFeature,std::basic_string<char16_t>>,void *>>>>::reset[abi:ne180100]((uint64_t)v127);
                  }
                  if ((SHIBYTE(v111.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_86;
                  v40 = (void *)v111.__r_.__value_.__r.__words[0];
                  goto LABEL_85;
                }
                v41 = *((char *)v35 + 55);
                if (v41 < 0)
                {
                  if (v35[5] == (_QWORD *)9)
                  {
                    v42 = v35[4];
LABEL_69:
                    v43 = *v42;
                    v44 = *((unsigned __int8 *)v42 + 8);
                    v45 = v43 == 0x65646E4974726F73 && v44 == 120;
                    if (v45)
                      goto LABEL_86;
                  }
                }
                else
                {
                  v42 = (uint64_t *)(v35 + 4);
                  if (v41 == 9)
                    goto LABEL_69;
                }
                std::operator+<char>();
                v46 = std::string::append(&v110, ":");
                v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
                v111.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v111.__r_.__value_.__l.__data_ = v47;
                v46->__r_.__value_.__l.__size_ = 0;
                v46->__r_.__value_.__r.__words[2] = 0;
                v46->__r_.__value_.__r.__words[0] = 0;
                v48 = *((char *)v35 + 79);
                if (v48 >= 0)
                  v49 = (const std::string::value_type *)(v35 + 7);
                else
                  v49 = (const std::string::value_type *)v35[7];
                if (v48 >= 0)
                  v50 = *((unsigned __int8 *)v35 + 79);
                else
                  v50 = (std::string::size_type)v35[8];
                v51 = std::string::append(&v111, v49, v50);
                v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
                *(_QWORD *)&v127[16] = *((_QWORD *)&v51->__r_.__value_.__l + 2);
                *(_OWORD *)v127 = v52;
                v51->__r_.__value_.__l.__size_ = 0;
                v51->__r_.__value_.__r.__words[2] = 0;
                v51->__r_.__value_.__r.__words[0] = 0;
                siri::dialogengine::Log::LogWithLevel((uint64_t)v127, 1u);
                if ((v127[23] & 0x80000000) != 0)
                  operator delete(*(void **)v127);
                if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v111.__r_.__value_.__l.__data_);
                if ((SHIBYTE(v110.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_86;
                v40 = (void *)v110.__r_.__value_.__r.__words[0];
LABEL_85:
                operator delete(v40);
LABEL_86:
                v53 = v35[1];
                if (v53)
                {
                  do
                  {
                    v54 = (_QWORD **)v53;
                    v53 = (_QWORD *)*v53;
                  }
                  while (v53);
                }
                else
                {
                  do
                  {
                    v54 = (_QWORD **)v35[2];
                    v45 = *v54 == v35;
                    v35 = v54;
                  }
                  while (!v45);
                }
                v35 = v54;
              }
              while (v54 != v117);
            }
            morphun::util::StringUtils::to_u16string();
            v55 = (char *)__p[1];
            if (__p[1] >= __p[2])
            {
              v57 = 0x6DB6DB6DB6DB6DB7 * (((char *)__p[1] - (char *)__p[0]) >> 3);
              v58 = v57 + 1;
              if ((unint64_t)(v57 + 1) > 0x492492492492492)
                std::vector<BOOL>::__throw_length_error[abi:ne180100]();
              if (0xDB6DB6DB6DB6DB6ELL * (((char *)__p[2] - (char *)__p[0]) >> 3) > v58)
                v58 = 0xDB6DB6DB6DB6DB6ELL * (((char *)__p[2] - (char *)__p[0]) >> 3);
              if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((char *)__p[2] - (char *)__p[0]) >> 3)) >= 0x249249249249249)
                v59 = 0x492492492492492;
              else
                v59 = v58;
              v128 = &__p[2];
              if (v59)
              {
                if (v59 > 0x492492492492492)
                  std::__throw_bad_array_new_length[abi:ne180100]();
                v60 = (char *)operator new(56 * v59);
              }
              else
              {
                v60 = 0;
              }
              *(_QWORD *)v127 = v60;
              *(_QWORD *)&v127[8] = &v60[56 * v57];
              *(_QWORD *)&v127[16] = *(_QWORD *)&v127[8];
              *(_QWORD *)&v127[24] = &v60[56 * v59];
              morphun::dialog::SemanticFeatureModel_DisplayValue::SemanticFeatureModel_DisplayValue();
              *(_QWORD *)&v127[16] += 56;
              v61 = (const std::basic_string<char16_t>::value_type **)__p[1];
              v107 = (const std::basic_string<char16_t>::value_type **)__p[0];
              v62 = *(std::basic_string<char16_t> **)&v127[8];
              while (1)
              {
                v63 = v62;
                if (v61 == v107)
                  break;
                v62[-3].__r_.__value_.__r.__words[2] = v106;
                v62 = (std::basic_string<char16_t> *)((char *)v62 - 56);
                if (*((char *)v61 - 25) < 0)
                {
                  std::basic_string<char16_t>::__init_copy_ctor_external(v63 - 2, *(v61 - 6), (std::basic_string<char16_t>::size_type)*(v61 - 5));
                }
                else
                {
                  v64 = *((_OWORD *)v61 - 3);
                  v63[-2].__r_.__value_.__r.__words[2] = (std::basic_string<char16_t>::size_type)*(v61 - 4);
                  *(_OWORD *)&v63[-2].__r_.__value_.__l.__data_ = v64;
                }
                v63[-1].__r_.__value_.__l.__size_ = 0;
                v63[-1].__r_.__value_.__r.__words[0] = (std::basic_string<char16_t>::size_type)&v63[-1].__r_.__value_.__l.__size_;
                v65 = v61 - 7;
                v63[-1].__r_.__value_.__r.__words[2] = 0;
                v66 = (const std::basic_string<char16_t>::value_type **)*(v61 - 3);
                v67 = v61 - 2;
                v61 -= 7;
                if (v66 != v67)
                {
                  do
                  {
                    std::__tree<std::__value_type<morphun::dialog::SemanticFeature,std::basic_string<char16_t>>,std::__map_value_compare<morphun::dialog::SemanticFeature,std::__value_type<morphun::dialog::SemanticFeature,std::basic_string<char16_t>>,std::less<morphun::dialog::SemanticFeature>,true>,std::allocator<std::__value_type<morphun::dialog::SemanticFeature,std::basic_string<char16_t>>>>::__emplace_hint_unique_key_args<morphun::dialog::SemanticFeature,std::pair<morphun::dialog::SemanticFeature const,std::basic_string<char16_t>> const&>((uint64_t **)&v63[-1], (uint64_t *)&v63[-1].__r_.__value_.__l.__size_, (uint64_t)(v66 + 4), (uint64_t)(v66 + 4));
                    v68 = v66[1];
                    if (v68)
                    {
                      do
                      {
                        v69 = (const std::basic_string<char16_t>::value_type **)v68;
                        v68 = *(const std::basic_string<char16_t>::value_type **)v68;
                      }
                      while (v68);
                    }
                    else
                    {
                      do
                      {
                        v69 = (const std::basic_string<char16_t>::value_type **)v66[2];
                        v45 = *v69 == (const std::basic_string<char16_t>::value_type *)v66;
                        v66 = v69;
                      }
                      while (!v45);
                    }
                    v66 = v69;
                  }
                  while (v69 != v67);
                  v61 = v65;
                }
              }
              v70 = __p[2];
              v108 = *(_OWORD *)&v127[16];
              v71 = *(_OWORD *)__p;
              __p[0] = v62;
              *(_OWORD *)&v127[8] = v71;
              *(_OWORD *)&__p[1] = v108;
              *(_QWORD *)&v127[24] = v70;
              *(_QWORD *)v127 = v71;
              std::__split_buffer<morphun::dialog::SemanticFeatureModel_DisplayValue>::~__split_buffer((uint64_t)v127);
              v56 = (void *)v108;
              v13 = v99;
              NextSemanticValue = v100;
              v33 = v103;
            }
            else
            {
              morphun::dialog::SemanticFeatureModel_DisplayValue::SemanticFeatureModel_DisplayValue();
              v33 = v103;
              v56 = v55 + 56;
            }
            __p[1] = v56;
            if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v111.__r_.__value_.__l.__data_);
            std::__tree<std::__value_type<morphun::dialog::SemanticFeature,std::basic_string<char16_t>>,std::__map_value_compare<morphun::dialog::SemanticFeature,std::__value_type<morphun::dialog::SemanticFeature,std::basic_string<char16_t>>,std::less<morphun::dialog::SemanticFeature>,true>,std::allocator<std::__value_type<morphun::dialog::SemanticFeature,std::basic_string<char16_t>>>>::destroy((void **)v113);
          }
          v72 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)v105, &v112, (const void **)v104);
          if (!*v72)
          {
            v73 = v72;
            v74 = (char *)operator new(0x50uLL);
            v75 = (uint64_t *)v74;
            *(_QWORD *)v127 = v74;
            *(_QWORD *)&v127[8] = v101;
            v127[16] = 0;
            if (*(char *)(NextSemanticValue + 47) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)(v74 + 32), *(const std::string::value_type **)(NextSemanticValue + 24), *(_QWORD *)(NextSemanticValue + 32));
            }
            else
            {
              v76 = *(_OWORD *)v104;
              *((_QWORD *)v74 + 6) = *(_QWORD *)(v104 + 16);
              *((_OWORD *)v74 + 2) = v76;
            }
            v77 = (std::string *)(v75 + 7);
            if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(v77, v115.__r_.__value_.__l.__data_, v115.__r_.__value_.__l.__size_);
            }
            else
            {
              *(_OWORD *)&v77->__r_.__value_.__l.__data_ = *(_OWORD *)&v115.__r_.__value_.__l.__data_;
              v75[9] = v115.__r_.__value_.__r.__words[2];
            }
            v127[16] = 1;
            std::__tree<std::string>::__insert_node_at(v105, (uint64_t)v112, v73, v75);
            *(_QWORD *)v127 = 0;
            std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v127);
          }
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v117[0]);
          if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v115.__r_.__value_.__l.__data_);
          v33 += 3;
        }
        while (v33 != v102);
      }
      v78 = siri::dialogengine::DialogMetadataReader::GetNextSemanticValue((siri::dialogengine::DialogMetadataReader *)&v126);
      NextSemanticValue = v78;
      if (v78)
      {
        if (*(char *)(v78 + 23) >= 0)
          v79 = *(unsigned __int8 *)(v78 + 23);
        else
          v79 = *(_QWORD *)(v78 + 8);
        std::string::basic_string[abi:ne180100]((uint64_t)&v109, v79 + 1);
        if ((v109.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v80 = &v109;
        else
          v80 = (std::string *)v109.__r_.__value_.__r.__words[0];
        if (v79)
        {
          if (*(char *)(NextSemanticValue + 23) >= 0)
            v81 = (const void *)NextSemanticValue;
          else
            v81 = *(const void **)NextSemanticValue;
          memmove(v80, v81, v79);
        }
        *(_WORD *)((char *)&v80->__r_.__value_.__l.__data_ + v79) = 35;
        v82 = *(char *)(NextSemanticValue + 47);
        if (v82 >= 0)
          v83 = (const std::string::value_type *)(NextSemanticValue + 24);
        else
          v83 = *(const std::string::value_type **)(NextSemanticValue + 24);
        if (v82 >= 0)
          v84 = *(unsigned __int8 *)(NextSemanticValue + 47);
        else
          v84 = *(_QWORD *)(NextSemanticValue + 32);
        v85 = std::string::append(&v109, v83, v84);
        v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
        v115.__r_.__value_.__r.__words[2] = v85->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v115.__r_.__value_.__l.__data_ = v86;
        v85->__r_.__value_.__l.__size_ = 0;
        v85->__r_.__value_.__r.__words[2] = 0;
        v85->__r_.__value_.__r.__words[0] = 0;
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v115, "");
      }
      if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v118.__r_.__value_.__l.__data_);
      v118 = v115;
      *((_BYTE *)&v115.__r_.__value_.__s + 23) = 0;
      v115.__r_.__value_.__s.__data_[0] = 0;
      if (NextSemanticValue && SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v109.__r_.__value_.__l.__data_);
      v26 = HIBYTE(v118.__r_.__value_.__r.__words[2]);
      v27 = (v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
      v28 = v118.__r_.__value_.__l.__size_;
      if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v87 = HIBYTE(v118.__r_.__value_.__r.__words[2]);
      else
        v87 = v118.__r_.__value_.__l.__size_;
      v23 = (v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
      v88 = v119.__r_.__value_.__l.__size_;
      if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v88 = HIBYTE(v119.__r_.__value_.__r.__words[2]);
      v30 = HIBYTE(v118.__r_.__value_.__r.__words[2]);
      if (v87 != v88)
        goto LABEL_163;
    }
    v32 = &v118;
    while (v32->__r_.__value_.__s.__data_[0] == v31->__r_.__value_.__s.__data_[0])
    {
      v32 = (std::string *)((char *)v32 + 1);
      v31 = (std::string *)((char *)v31 + 1);
      if (!--v26)
        goto LABEL_47;
    }
LABEL_163:
    v89 = (char *)operator new(0x78uLL);
    v90 = v89 + 32;
    morphun::dialog::SemanticValue::SemanticValue();
    morphun::dialog::SemanticFeatureModel_DisplayData::SemanticFeatureModel_DisplayData();
    v91 = v98;
    v92 = *v98;
    v93 = v98;
    if (*v98)
    {
      while (1)
      {
        while (1)
        {
          v93 = (char **)v92;
          v94 = v92 + 32;
          if (!std::less<morphun::dialog::SemanticValue>::operator()[abi:ne180100](v90, (_QWORD *)v92 + 4))
            break;
          v92 = *v93;
          v91 = v93;
          if (!*v93)
            goto LABEL_169;
        }
        if (!std::less<morphun::dialog::SemanticValue>::operator()[abi:ne180100](v94, v90))
          break;
        v91 = v93 + 1;
        v92 = v93[1];
        if (!v92)
          goto LABEL_169;
      }
      std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<morphun::dialog::SemanticValue,morphun::dialog::SemanticFeatureModel_DisplayData>,void *>>>::operator()[abi:ne180100](1, v89);
    }
    else
    {
LABEL_169:
      *(_QWORD *)v89 = 0;
      *((_QWORD *)v89 + 1) = 0;
      *((_QWORD *)v89 + 2) = v93;
      *v91 = v89;
      v95 = (uint64_t *)**v97;
      if (v95)
      {
        *v97 = v95;
        v89 = *v91;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v97[1], (uint64_t *)v89);
      v97[2] = (uint64_t *)((char *)v97[2] + 1);
    }
    if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v118.__r_.__value_.__l.__data_);
      if (v23)
LABEL_175:
        operator delete(v119.__r_.__value_.__l.__data_);
    }
    else if (v23)
    {
      goto LABEL_175;
    }
    if (v121 < 0)
      operator delete(v120);
    if (v123 < 0)
      operator delete(v122);
    v115.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    std::vector<morphun::dialog::SemanticFeatureModel_DisplayValue>::__destroy_vector::operator()[abi:ne180100]((void ***)&v115);
  }
  while (NextSemanticValue);
LABEL_184:
  morphun::util::ULocale::~ULocale((morphun::util::ULocale *)v125);
LABEL_185:
  v96 = v126;
  v126 = 0;
  if (v96)
    std::default_delete<siri::dialogengine::DialogMetadataReader::Impl>::operator()[abi:ne180100](v96);
}

void sub_1BF975E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,uint64_t a61,char a62)
{
  uint64_t v62;
  uint64_t v64;

  morphun::util::ULocale::~ULocale((morphun::util::ULocale *)&a62);
  v64 = *(_QWORD *)(v62 - 152);
  *(_QWORD *)(v62 - 152) = 0;
  if (v64)
    std::default_delete<siri::dialogengine::DialogMetadataReader::Impl>::operator()[abi:ne180100](v64);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<siri::dialogengine::SemanticModelCache::Entry,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 72))
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(_QWORD **)(a1 + 48));
    std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](a1 + 24);
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
  }
  return a1;
}

void siri::dialogengine::SemanticModelCache::Entry::~Entry(siri::dialogengine::SemanticModelCache::Entry *this)
{
  char *v2;

  v2 = (char *)this + 24;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((_QWORD **)this + 6));
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)v2);
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void std::__tree<std::__value_type<morphun::dialog::SemanticValue,morphun::dialog::SemanticFeatureModel_DisplayData>,std::__map_value_compare<morphun::dialog::SemanticValue,std::__value_type<morphun::dialog::SemanticValue,morphun::dialog::SemanticFeatureModel_DisplayData>,std::less<morphun::dialog::SemanticValue>,true>,std::allocator<std::__value_type<morphun::dialog::SemanticValue,morphun::dialog::SemanticFeatureModel_DisplayData>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<morphun::dialog::SemanticValue,morphun::dialog::SemanticFeatureModel_DisplayData>,std::__map_value_compare<morphun::dialog::SemanticValue,std::__value_type<morphun::dialog::SemanticValue,morphun::dialog::SemanticFeatureModel_DisplayData>,std::less<morphun::dialog::SemanticValue>,true>,std::allocator<std::__value_type<morphun::dialog::SemanticValue,morphun::dialog::SemanticFeatureModel_DisplayData>>>::destroy(*a1);
    std::__tree<std::__value_type<morphun::dialog::SemanticValue,morphun::dialog::SemanticFeatureModel_DisplayData>,std::__map_value_compare<morphun::dialog::SemanticValue,std::__value_type<morphun::dialog::SemanticValue,morphun::dialog::SemanticFeatureModel_DisplayData>,std::less<morphun::dialog::SemanticValue>,true>,std::allocator<std::__value_type<morphun::dialog::SemanticValue,morphun::dialog::SemanticFeatureModel_DisplayData>>>::destroy(a1[1]);
    morphun::dialog::SemanticFeatureModel_DisplayData::~SemanticFeatureModel_DisplayData((morphun::dialog::SemanticFeatureModel_DisplayData *)(a1 + 11));
    morphun::dialog::SemanticValue::~SemanticValue((morphun::dialog::SemanticValue *)(a1 + 4));
    operator delete(a1);
  }
}

void std::__shared_ptr_emplace<morphun::dialog::SemanticFeatureModel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E792FE30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<morphun::dialog::SemanticFeatureModel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E792FE30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

void std::__shared_ptr_emplace<morphun::dialog::SemanticFeatureModel>::__on_zero_shared()
{
  JUMPOUT(0x1C3B8D2B4);
}

void std::__tree<std::__value_type<morphun::dialog::SemanticFeature,std::basic_string<char16_t>>,std::__map_value_compare<morphun::dialog::SemanticFeature,std::__value_type<morphun::dialog::SemanticFeature,std::basic_string<char16_t>>,std::less<morphun::dialog::SemanticFeature>,true>,std::allocator<std::__value_type<morphun::dialog::SemanticFeature,std::basic_string<char16_t>>>>::destroy(void **a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<morphun::dialog::SemanticFeature,std::basic_string<char16_t>>,std::__map_value_compare<morphun::dialog::SemanticFeature,std::__value_type<morphun::dialog::SemanticFeature,std::basic_string<char16_t>>,std::less<morphun::dialog::SemanticFeature>,true>,std::allocator<std::__value_type<morphun::dialog::SemanticFeature,std::basic_string<char16_t>>>>::destroy(*a1);
    std::__tree<std::__value_type<morphun::dialog::SemanticFeature,std::basic_string<char16_t>>,std::__map_value_compare<morphun::dialog::SemanticFeature,std::__value_type<morphun::dialog::SemanticFeature,std::basic_string<char16_t>>,std::less<morphun::dialog::SemanticFeature>,true>,std::allocator<std::__value_type<morphun::dialog::SemanticFeature,std::basic_string<char16_t>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<morphun::dialog::SemanticFeature const,std::basic_string<char16_t>>,0>(a1 + 4);
    operator delete(a1);
  }
}

void std::vector<morphun::dialog::SemanticFeatureModel_DisplayValue>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 56;
      v7 = v4 - 56;
      do
      {
        v8 = *(_QWORD *)v7;
        v7 -= 56;
        (*(void (**)(char *))(v8 + 8))(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<morphun::dialog::SemanticValue,morphun::dialog::SemanticFeatureModel_DisplayData>,void *>>>::operator()[abi:ne180100](char a1, char *__p)
{
  if (a1)
  {
    morphun::dialog::SemanticFeatureModel_DisplayData::~SemanticFeatureModel_DisplayData((morphun::dialog::SemanticFeatureModel_DisplayData *)(__p + 88));
    morphun::dialog::SemanticValue::~SemanticValue((morphun::dialog::SemanticValue *)(__p + 32));
  }
  if (__p)
    operator delete(__p);
}

BOOL std::less<morphun::dialog::SemanticValue>::operator()[abi:ne180100](_QWORD *a1, _QWORD *a2)
{
  unsigned __int16 *v2;
  unsigned __int16 *v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  unsigned __int16 *v9;
  unsigned __int16 *v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned __int16 *v15;
  unsigned __int16 *v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  int v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  unsigned __int16 *v24;
  unsigned __int16 *v25;
  unsigned __int16 *v26;
  unsigned __int16 *v27;
  unsigned __int16 *v28;
  unsigned __int16 *v29;
  unsigned int v30;
  unsigned int v31;
  BOOL v32;

  v2 = (unsigned __int16 *)((char *)a1 + *(_QWORD *)(*a1 - 40));
  v3 = (unsigned __int16 *)((char *)a2 + *(_QWORD *)(*a2 - 40));
  v4 = *((unsigned __int8 *)v3 + 23);
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)v3 + 1);
  v6 = *((unsigned __int8 *)v2 + 23);
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)v2 + 1);
  if (v4 >= v6)
    v8 = v6;
  else
    v8 = v4;
  if (v8)
  {
    v9 = *(unsigned __int16 **)v2;
    if (v7 >= 0)
      v9 = (unsigned __int16 *)((char *)a1 + *(_QWORD *)(*a1 - 40));
    v10 = *(unsigned __int16 **)v3;
    if (v5 >= 0)
      v10 = (unsigned __int16 *)((char *)a2 + *(_QWORD *)(*a2 - 40));
    v11 = v8;
    do
    {
      v12 = *v9;
      v13 = *v10;
      if (v12 < v13)
        return 1;
      if (v13 < v12)
        goto LABEL_19;
      ++v9;
      ++v10;
    }
    while (--v11);
  }
  if (v6 < v4)
    return 1;
LABEL_19:
  if (v8)
  {
    if (v5 >= 0)
      v15 = v3;
    else
      v15 = *(unsigned __int16 **)v3;
    if (v7 >= 0)
      v16 = v2;
    else
      v16 = *(unsigned __int16 **)v2;
    do
    {
      v17 = *v15;
      v18 = *v16;
      if (v17 < v18)
        return 0;
      if (v18 < v17)
        goto LABEL_31;
      ++v15;
      ++v16;
    }
    while (--v8);
  }
  if (v4 < v6)
    return 0;
LABEL_31:
  v19 = *((unsigned __int8 *)v3 + 47);
  v20 = (char)v19;
  if ((v19 & 0x80u) != 0)
    v19 = *((_QWORD *)v3 + 4);
  v21 = *((unsigned __int8 *)v2 + 47);
  v22 = (char)v21;
  if ((v21 & 0x80u) != 0)
    v21 = *((_QWORD *)v2 + 4);
  if (v19 >= v21)
    v23 = v21;
  else
    v23 = v19;
  if (v23)
  {
    v26 = (unsigned __int16 *)*((_QWORD *)v2 + 3);
    v24 = v2 + 12;
    v25 = v26;
    if (v22 < 0)
      v24 = v25;
    v29 = (unsigned __int16 *)*((_QWORD *)v3 + 3);
    v27 = v3 + 12;
    v28 = v29;
    if (v20 < 0)
      v27 = v28;
    while (1)
    {
      v30 = *v24;
      v31 = *v27;
      if (v31 != v30)
        break;
      ++v24;
      ++v27;
      if (!--v23)
        goto LABEL_45;
    }
    v32 = v30 >= v31;
  }
  else
  {
LABEL_45:
    v32 = v21 >= v19;
  }
  return !v32;
}

void std::__destroy_at[abi:ne180100]<std::pair<morphun::dialog::SemanticFeature const,std::basic_string<char16_t>>,0>(void **this)
{
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  morphun::dialog::SemanticFeature::~SemanticFeature((morphun::dialog::SemanticFeature *)this);
}

uint64_t std::__split_buffer<morphun::dialog::SemanticFeatureModel_DisplayValue>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(_QWORD *)(i - 56);
    *(_QWORD *)(a1 + 16) = i - 56;
    (*(void (**)(void))(v4 + 8))();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__tree<std::__value_type<morphun::dialog::SemanticFeature,std::basic_string<char16_t>>,std::__map_value_compare<morphun::dialog::SemanticFeature,std::__value_type<morphun::dialog::SemanticFeature,std::basic_string<char16_t>>,std::less<morphun::dialog::SemanticFeature>,true>,std::allocator<std::__value_type<morphun::dialog::SemanticFeature,std::basic_string<char16_t>>>>::__emplace_hint_unique_key_args<morphun::dialog::SemanticFeature,std::pair<morphun::dialog::SemanticFeature const,std::basic_string<char16_t>> const&>(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t **v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t **v13;
  uint64_t *v14;
  BOOL v15;
  uint64_t **v16;
  uint64_t *v17;
  std::basic_string<char16_t> *v18;
  _QWORD v19[2];
  char v20;
  uint64_t *v21;
  _QWORD *v22;

  v7 = a1 + 1;
  if (a1 + 1 != (uint64_t **)a2 && !morphun::dialog::SemanticFeature::operator<())
  {
    if (!morphun::dialog::SemanticFeature::operator<())
    {
      v21 = a2;
      v22 = a2;
      v11 = &v21;
      if (a2)
        return;
      goto LABEL_31;
    }
    v11 = (uint64_t **)(a2 + 1);
    v10 = (uint64_t *)a2[1];
    if (v10)
    {
      v12 = (uint64_t *)a2[1];
      do
      {
        v13 = (uint64_t **)v12;
        v12 = (uint64_t *)*v12;
      }
      while (v12);
    }
    else
    {
      v16 = (uint64_t **)a2;
      do
      {
        v13 = (uint64_t **)v16[2];
        v15 = *v13 == (uint64_t *)v16;
        v16 = v13;
      }
      while (!v15);
    }
    if (v13 != v7)
    {
      if (!morphun::dialog::SemanticFeature::operator<())
      {
LABEL_29:
        v11 = (uint64_t **)std::__tree<std::__value_type<morphun::dialog::SemanticFeature,std::basic_string<char16_t>>,std::__map_value_compare<morphun::dialog::SemanticFeature,std::__value_type<morphun::dialog::SemanticFeature,std::basic_string<char16_t>>,std::less<morphun::dialog::SemanticFeature>,true>,std::allocator<std::__value_type<morphun::dialog::SemanticFeature,std::basic_string<char16_t>>>>::__find_equal<morphun::dialog::SemanticFeature>((uint64_t)a1, &v22);
        goto LABEL_30;
      }
      v10 = *v11;
    }
    if (v10)
    {
      v22 = v13;
      v11 = v13;
    }
    else
    {
      v22 = a2;
    }
LABEL_30:
    if (*v11)
      return;
    goto LABEL_31;
  }
  if (*a1 != a2)
  {
    v8 = (uint64_t *)*a2;
    if (*a2)
    {
      do
      {
        v9 = v8;
        v8 = (uint64_t *)v8[1];
      }
      while (v8);
    }
    else
    {
      v14 = a2;
      do
      {
        v9 = (uint64_t *)v14[2];
        v15 = *v9 == (_QWORD)v14;
        v14 = v9;
      }
      while (v15);
    }
    if (morphun::dialog::SemanticFeature::operator<())
      goto LABEL_16;
    goto LABEL_29;
  }
  v9 = a2;
LABEL_16:
  if (*a2)
  {
    v22 = v9;
    v11 = (uint64_t **)(v9 + 1);
    goto LABEL_30;
  }
  v22 = a2;
  v11 = (uint64_t **)a2;
LABEL_31:
  v17 = (uint64_t *)operator new(0x80uLL);
  v19[0] = v17;
  v19[1] = v7;
  v20 = 0;
  morphun::dialog::SemanticFeature::SemanticFeature();
  v18 = (std::basic_string<char16_t> *)(v17 + 13);
  if (*(char *)(a4 + 95) < 0)
  {
    std::basic_string<char16_t>::__init_copy_ctor_external(v18, *(const std::basic_string<char16_t>::value_type **)(a4 + 72), *(_QWORD *)(a4 + 80));
  }
  else
  {
    *(_OWORD *)&v18->__r_.__value_.__l.__data_ = *(_OWORD *)(a4 + 72);
    v17[15] = *(_QWORD *)(a4 + 88);
  }
  v20 = 1;
  std::__tree<std::string>::__insert_node_at(a1, (uint64_t)v22, v11, v17);
  v19[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<morphun::dialog::SemanticFeature,std::basic_string<char16_t>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<morphun::dialog::SemanticFeature,std::basic_string<char16_t>>,void *>>>>::reset[abi:ne180100]((uint64_t)v19);
}

void sub_1BF9767EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  morphun::dialog::SemanticFeature *v10;

  morphun::dialog::SemanticFeature::~SemanticFeature(v10);
  std::unique_ptr<std::__tree_node<std::__value_type<morphun::dialog::SemanticFeature,std::basic_string<char16_t>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<morphun::dialog::SemanticFeature,std::basic_string<char16_t>>,void *>>>>::reset[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<morphun::dialog::SemanticFeature,std::basic_string<char16_t>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<morphun::dialog::SemanticFeature,std::basic_string<char16_t>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void **v1;

  v1 = *(void ***)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<morphun::dialog::SemanticFeature const,std::basic_string<char16_t>>,0>(v1 + 4);
    operator delete(v1);
  }
}

_QWORD *std::__tree<std::__value_type<morphun::dialog::SemanticFeature,std::basic_string<char16_t>>,std::__map_value_compare<morphun::dialog::SemanticFeature,std::__value_type<morphun::dialog::SemanticFeature,std::basic_string<char16_t>>,std::less<morphun::dialog::SemanticFeature>,true>,std::allocator<std::__value_type<morphun::dialog::SemanticFeature,std::basic_string<char16_t>>>>::__find_equal<morphun::dialog::SemanticFeature>(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  v4 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (v3)
  {
    do
    {
      while (1)
      {
        v5 = v3;
        if (!morphun::dialog::SemanticFeature::operator<())
          break;
        v3 = (_QWORD *)*v5;
        v4 = v5;
        if (!*v5)
          goto LABEL_9;
      }
      if (!morphun::dialog::SemanticFeature::operator<())
        break;
      v4 = v5 + 1;
      v3 = (_QWORD *)v5[1];
    }
    while (v3);
  }
  else
  {
    v5 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v5;
  return v4;
}

void siri::dialogengine::ClearSemanticModelCache(siri::dialogengine *this)
{
  siri::dialogengine::SemanticModelCache *SemanticModelCache;

  SemanticModelCache = (siri::dialogengine::SemanticModelCache *)siri::dialogengine::GetSemanticModelCache(this);
  siri::dialogengine::SemanticModelCache::clear(SemanticModelCache);
}

void siri::dialogengine::PatternSetting::~PatternSetting(siri::dialogengine::PatternSetting *this)
{
  void **v2;

  *(_QWORD *)this = off_1E7931888;
  *((_QWORD *)this + 30) = &unk_1E79318B8;
  v2 = (void **)((char *)this + 240);
  *((_QWORD *)this + 38) = &unk_1E79318D8;
  if (*((char *)this + 359) < 0)
    operator delete(*((void **)this + 42));
  *((_QWORD *)this + 38) = off_1E793AED8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((_QWORD **)this + 40));
  siri::dialogengine::LineNumberBase::~LineNumberBase(v2);
  siri::dialogengine::ObjectProperty::~ObjectProperty((void **)this);
}

{
  void **v2;

  *(_QWORD *)this = off_1E7931888;
  *((_QWORD *)this + 30) = &unk_1E79318B8;
  v2 = (void **)((char *)this + 240);
  *((_QWORD *)this + 38) = &unk_1E79318D8;
  if (*((char *)this + 359) < 0)
    operator delete(*((void **)this + 42));
  *((_QWORD *)this + 38) = off_1E793AED8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((_QWORD **)this + 40));
  siri::dialogengine::LineNumberBase::~LineNumberBase(v2);
  siri::dialogengine::ObjectProperty::~ObjectProperty((void **)this);
  JUMPOUT(0x1C3B8D890);
}

uint64_t siri::dialogengine::PatternSetting::Validate(siri::dialogengine::PatternSetting *this, siri::dialogengine::Context *a2)
{
  uint64_t v4;
  _OWORD *v5;
  std::string::size_type size;
  size_t v7;
  size_t v8;
  unsigned int v9;
  std::string *v10;
  std::string::size_type v11;
  std::string::size_type v12;
  int v13;
  std::string *v14;
  uint64_t v15;
  std::string *v16;
  int v17;
  int v18;
  int v19;
  _BOOL4 v20;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  std::string::size_type v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  std::string::size_type v33;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  __int128 v37;
  void *v38;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  __int128 v42;
  std::string *v43;
  std::string::size_type v44;
  std::string *v45;
  __int128 v46;
  _OWORD *v47;
  uint64_t v48;
  uint64_t v49;
  std::string::size_type v50;
  int v51;
  const void **v52;
  std::string *v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;
  BOOL v60;
  _BOOL4 v61;
  std::string *v62;
  __int128 v63;
  std::string *v64;
  __int128 v65;
  std::string::size_type v66;
  std::string *v67;
  __int128 v68;
  std::string *v69;
  __int128 v70;
  std::string v72;
  std::string v73;
  std::string v74;
  std::string v75;
  std::string v76;
  std::string v77;
  std::string v78;
  std::string v79;
  std::string v80;

  if (!a2)
    return 0;
  v4 = siri::dialogengine::Parameter::Validate(this, a2);
  v5 = (_OWORD *)((char *)this + 208);
  if (*((char *)this + 231) < 0)
  {
    std::string::__init_copy_ctor_external(&v80, *((const std::string::value_type **)this + 26), *((_QWORD *)this + 27));
  }
  else
  {
    *(_OWORD *)&v80.__r_.__value_.__l.__data_ = *v5;
    v80.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 28);
  }
  size = HIBYTE(v80.__r_.__value_.__r.__words[2]);
  if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v80.__r_.__value_.__l.__size_;
  if (size)
  {
    siri::dialogengine::ResolveType(0, (uint64_t)a2, (uint64_t)&v80, 1, (uint64_t)&v79);
    v7 = strlen(siri::dialogengine::TYPE_UNKNOWN);
    v8 = v7;
    v9 = HIBYTE(v79.__r_.__value_.__r.__words[2]);
    if ((*((_BYTE *)&v79.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (v7 != v79.__r_.__value_.__l.__size_)
        goto LABEL_16;
      if (v7 == -1)
        std::string::__throw_out_of_range[abi:ne180100]();
      v10 = (std::string *)v79.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (v7 != HIBYTE(v79.__r_.__value_.__r.__words[2]))
        goto LABEL_16;
      v10 = &v79;
    }
    if (!memcmp(v10, siri::dialogengine::TYPE_UNKNOWN, v8))
    {
      if (*((char *)this + 31) < 0)
        std::string::__init_copy_ctor_external(&v75, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
      else
        v75 = *(std::string *)((char *)this + 8);
      v39 = std::string::insert(&v75, 0, "Pattern setting '");
      v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
      v76.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v40;
      v39->__r_.__value_.__l.__size_ = 0;
      v39->__r_.__value_.__r.__words[2] = 0;
      v39->__r_.__value_.__r.__words[0] = 0;
      v41 = std::string::append(&v76, "' has a default value of unknown type: ");
      v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
      v77.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v42;
      v41->__r_.__value_.__l.__size_ = 0;
      v41->__r_.__value_.__r.__words[2] = 0;
      v41->__r_.__value_.__r.__words[0] = 0;
      if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v43 = &v80;
      else
        v43 = (std::string *)v80.__r_.__value_.__r.__words[0];
      if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v44 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
      else
        v44 = v80.__r_.__value_.__l.__size_;
      v45 = std::string::append(&v77, (const std::string::value_type *)v43, v44);
      v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
      v78.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v46;
      v45->__r_.__value_.__l.__size_ = 0;
      v45->__r_.__value_.__r.__words[2] = 0;
      v45->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Context::AddSchemaError((uint64_t *)a2, (__int128 *)&v78);
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v78.__r_.__value_.__l.__data_);
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v77.__r_.__value_.__l.__data_);
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v76.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v75.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_92;
      v38 = (void *)v75.__r_.__value_.__r.__words[0];
      goto LABEL_91;
    }
LABEL_16:
    if (*((char *)this + 55) < 0)
    {
      std::string::__init_copy_ctor_external(&v78, *((const std::string::value_type **)this + 4), *((_QWORD *)this + 5));
      v9 = HIBYTE(v79.__r_.__value_.__r.__words[2]);
    }
    else
    {
      v78 = *(std::string *)((char *)this + 32);
    }
    if ((v9 & 0x80u) == 0)
      v11 = v9;
    else
      v11 = v79.__r_.__value_.__l.__size_;
    v12 = HIBYTE(v78.__r_.__value_.__r.__words[2]);
    v13 = SHIBYTE(v78.__r_.__value_.__r.__words[2]);
    if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v12 = v78.__r_.__value_.__l.__size_;
    if (v11 == v12)
    {
      if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v14 = &v78;
      else
        v14 = (std::string *)v78.__r_.__value_.__r.__words[0];
      if ((v9 & 0x80) != 0)
      {
        v20 = memcmp(v79.__r_.__value_.__l.__data_, v14, v79.__r_.__value_.__l.__size_) != 0;
        if ((v13 & 0x80000000) == 0)
          goto LABEL_37;
      }
      else if (v9)
      {
        v15 = v9 - 1;
        v16 = &v79;
        do
        {
          v18 = v16->__r_.__value_.__s.__data_[0];
          v16 = (std::string *)((char *)v16 + 1);
          v17 = v18;
          v19 = v14->__r_.__value_.__s.__data_[0];
          v14 = (std::string *)((char *)v14 + 1);
          v20 = v17 != v19;
        }
        while (v17 == v19 && v15-- != 0);
        if ((SHIBYTE(v78.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_37:
          if (!v20)
          {
LABEL_93:
            if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v79.__r_.__value_.__l.__data_);
            goto LABEL_95;
          }
          goto LABEL_41;
        }
      }
      else
      {
        v20 = 0;
        if ((SHIBYTE(v78.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_37;
      }
    }
    else
    {
      v20 = 1;
      if ((SHIBYTE(v78.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_37;
    }
    operator delete(v78.__r_.__value_.__l.__data_);
    if (!v20)
      goto LABEL_93;
LABEL_41:
    if (*((char *)this + 31) < 0)
      std::string::__init_copy_ctor_external(&v72, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
    else
      v72 = *(std::string *)((char *)this + 8);
    v22 = std::string::insert(&v72, 0, "Pattern setting '");
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v73.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    v24 = std::string::append(&v73, "' has a default value of the wrong type: '");
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v74.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v26 = &v80;
    else
      v26 = (std::string *)v80.__r_.__value_.__r.__words[0];
    if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v27 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
    else
      v27 = v80.__r_.__value_.__l.__size_;
    v28 = std::string::append(&v74, (const std::string::value_type *)v26, v27);
    v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v75.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    v30 = std::string::append(&v75, "' (");
    v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v76.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v32 = &v79;
    else
      v32 = (std::string *)v79.__r_.__value_.__r.__words[0];
    if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v33 = HIBYTE(v79.__r_.__value_.__r.__words[2]);
    else
      v33 = v79.__r_.__value_.__l.__size_;
    v34 = std::string::append(&v76, (const std::string::value_type *)v32, v33);
    v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v77.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    v36 = std::string::append(&v77, ")");
    v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    v78.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddSchemaError((uint64_t *)a2, (__int128 *)&v78);
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v78.__r_.__value_.__l.__data_);
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v77.__r_.__value_.__l.__data_);
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v76.__r_.__value_.__l.__data_);
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v75.__r_.__value_.__l.__data_);
    if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v74.__r_.__value_.__l.__data_);
    if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v73.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_92;
    v38 = (void *)v72.__r_.__value_.__r.__words[0];
LABEL_91:
    operator delete(v38);
LABEL_92:
    v4 = 0;
    goto LABEL_93;
  }
LABEL_95:
  if (*((char *)this + 359) < 0)
  {
    if (!*((_QWORD *)this + 43))
      goto LABEL_153;
  }
  else if (!*((_BYTE *)this + 359))
  {
    goto LABEL_153;
  }
  v47 = (_OWORD *)((char *)this + 8);
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v79, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
    LODWORD(v48) = *((unsigned __int8 *)this + 359);
  }
  else
  {
    LODWORD(v48) = *((unsigned __int8 *)this + 359);
    *(_OWORD *)&v79.__r_.__value_.__l.__data_ = *v47;
    v79.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 3);
  }
  v49 = v48;
  if ((v48 & 0x80u) == 0)
    v48 = v48;
  else
    v48 = *((_QWORD *)this + 43);
  v50 = HIBYTE(v79.__r_.__value_.__r.__words[2]);
  v51 = SHIBYTE(v79.__r_.__value_.__r.__words[2]);
  if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v50 = v79.__r_.__value_.__l.__size_;
  if (v48 != v50)
  {
    v61 = 0;
    if ((SHIBYTE(v79.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_125;
    goto LABEL_121;
  }
  v52 = (const void **)((char *)this + 336);
  if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v53 = &v79;
  else
    v53 = (std::string *)v79.__r_.__value_.__r.__words[0];
  if ((v49 & 0x80) != 0)
  {
    v61 = memcmp(*v52, v53, *((_QWORD *)this + 43)) == 0;
    goto LABEL_124;
  }
  if ((_DWORD)v49)
  {
    v54 = v49 - 1;
    do
    {
      v56 = *(unsigned __int8 *)v52;
      v52 = (const void **)((char *)v52 + 1);
      v55 = v56;
      v58 = v53->__r_.__value_.__s.__data_[0];
      v53 = (std::string *)((char *)v53 + 1);
      v57 = v58;
      v60 = v54-- != 0;
      v61 = v55 == v57;
    }
    while (v55 == v57 && v60);
LABEL_124:
    if ((v51 & 0x80000000) == 0)
      goto LABEL_125;
    goto LABEL_121;
  }
  v61 = 1;
  if ((SHIBYTE(v79.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_125:
    if (!v61)
      goto LABEL_136;
    goto LABEL_126;
  }
LABEL_121:
  operator delete(v79.__r_.__value_.__l.__data_);
  if (!v61)
    goto LABEL_136;
LABEL_126:
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v77, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  }
  else
  {
    *(_OWORD *)&v77.__r_.__value_.__l.__data_ = *v47;
    v77.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 3);
  }
  v62 = std::string::insert(&v77, 0, "Pattern setting '");
  v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
  v78.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v63;
  v62->__r_.__value_.__l.__size_ = 0;
  v62->__r_.__value_.__r.__words[2] = 0;
  v62->__r_.__value_.__r.__words[0] = 0;
  v64 = std::string::append(&v78, "' names itself as its 'defaultValueFromSetting' value");
  v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
  v79.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v65;
  v64->__r_.__value_.__l.__size_ = 0;
  v64->__r_.__value_.__r.__words[2] = 0;
  v64->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::Context::AddSchemaError((uint64_t *)a2, (__int128 *)&v79);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v78.__r_.__value_.__l.__data_);
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v77.__r_.__value_.__l.__data_);
  v4 = 0;
LABEL_136:
  if (*((char *)this + 231) < 0)
  {
    std::string::__init_copy_ctor_external(&v79, *((const std::string::value_type **)this + 26), *((_QWORD *)this + 27));
  }
  else
  {
    *(_OWORD *)&v79.__r_.__value_.__l.__data_ = *v5;
    v79.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 28);
  }
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
  {
    v66 = v79.__r_.__value_.__l.__size_;
    operator delete(v79.__r_.__value_.__l.__data_);
    if (!v66)
      goto LABEL_153;
LABEL_143:
    if (*((char *)this + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&v77, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
    }
    else
    {
      *(_OWORD *)&v77.__r_.__value_.__l.__data_ = *v47;
      v77.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 3);
    }
    v67 = std::string::insert(&v77, 0, "Pattern setting '");
    v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
    v78.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v68;
    v67->__r_.__value_.__l.__size_ = 0;
    v67->__r_.__value_.__r.__words[2] = 0;
    v67->__r_.__value_.__r.__words[0] = 0;
    v69 = std::string::append(&v78, "' has both 'defaultValue' and 'defaultValueFromSetting' set");
    v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
    v79.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v70;
    v69->__r_.__value_.__l.__size_ = 0;
    v69->__r_.__value_.__r.__words[2] = 0;
    v69->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddSchemaError((uint64_t *)a2, (__int128 *)&v79);
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v79.__r_.__value_.__l.__data_);
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v78.__r_.__value_.__l.__data_);
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v77.__r_.__value_.__l.__data_);
    v4 = 0;
    goto LABEL_153;
  }
  if (*((_BYTE *)&v79.__r_.__value_.__s + 23))
    goto LABEL_143;
LABEL_153:
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v80.__r_.__value_.__l.__data_);
  return v4;
}

void sub_1BF977180(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  uint64_t v49;

  if (*(char *)(v49 - 105) < 0)
    operator delete(*(void **)(v49 - 128));
  if (*(char *)(v49 - 73) < 0)
    operator delete(*(void **)(v49 - 96));
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'siri::dialogengine::PatternSetting::~PatternSetting(siri::dialogengine::PatternSetting *this)
{
  void **v2;

  *((_QWORD *)this - 30) = off_1E7931888;
  v2 = (void **)((char *)this - 240);
  *(_QWORD *)this = &unk_1E79318B8;
  *((_QWORD *)this + 8) = &unk_1E79318D8;
  if (*((char *)this + 119) < 0)
    operator delete(*((void **)this + 12));
  *((_QWORD *)this + 8) = off_1E793AED8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((_QWORD **)this + 10));
  siri::dialogengine::LineNumberBase::~LineNumberBase((void **)this);
  siri::dialogengine::ObjectProperty::~ObjectProperty(v2);
}

{
  void **v2;

  *((_QWORD *)this - 30) = off_1E7931888;
  v2 = (void **)((char *)this - 240);
  *(_QWORD *)this = &unk_1E79318B8;
  *((_QWORD *)this + 8) = &unk_1E79318D8;
  if (*((char *)this + 119) < 0)
    operator delete(*((void **)this + 12));
  *((_QWORD *)this + 8) = off_1E793AED8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((_QWORD **)this + 10));
  siri::dialogengine::LineNumberBase::~LineNumberBase((void **)this);
  siri::dialogengine::ObjectProperty::~ObjectProperty(v2);
  JUMPOUT(0x1C3B8D890);
}

{
  void **v2;
  void **v3;

  v2 = (void **)((char *)this - 304);
  *((_QWORD *)this - 38) = off_1E7931888;
  *((_QWORD *)this - 8) = &unk_1E79318B8;
  v3 = (void **)((char *)this - 64);
  *(_QWORD *)this = &unk_1E79318D8;
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  *(_QWORD *)this = off_1E793AED8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((_QWORD **)this + 2));
  siri::dialogengine::LineNumberBase::~LineNumberBase(v3);
  siri::dialogengine::ObjectProperty::~ObjectProperty(v2);
}

{
  void **v2;
  void **v3;

  v2 = (void **)((char *)this - 304);
  *((_QWORD *)this - 38) = off_1E7931888;
  *((_QWORD *)this - 8) = &unk_1E79318B8;
  v3 = (void **)((char *)this - 64);
  *(_QWORD *)this = &unk_1E79318D8;
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  *(_QWORD *)this = off_1E793AED8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((_QWORD **)this + 2));
  siri::dialogengine::LineNumberBase::~LineNumberBase(v3);
  siri::dialogengine::ObjectProperty::~ObjectProperty(v2);
  JUMPOUT(0x1C3B8D890);
}

uint64_t `non-virtual thunk to'siri::dialogengine::PatternSetting::Validate(siri::dialogengine::PatternSetting *this, siri::dialogengine::Context *a2)
{
  return siri::dialogengine::PatternSetting::Validate((siri::dialogengine::PatternSetting *)((char *)this - 304), a2);
}

uint64_t siri::dialogengine::PatternSetting::PatternSetting(uint64_t a1, const std::string *a2, const std::string *a3, const std::string *a4, char a5, const std::string *a6, std::string *a7, __int128 *a8)
{
  std::string *v16;
  __int128 v17;
  std::string __p;
  std::string v20;
  std::string v21;

  std::string::basic_string[abi:ne180100]<0>(&v21, "");
  std::string::basic_string[abi:ne180100]<0>(&v20, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::dialogengine::Parameter::Parameter(a1, a2, a3, a4, &v21, &v20, a6, &__p, a7, 1, 0, 0, 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  *(_QWORD *)a1 = off_1E7931888;
  *(_QWORD *)(a1 + 240) = &unk_1E79318B8;
  *(_QWORD *)(a1 + 304) = &unk_1E79318D8;
  v16 = (std::string *)(a1 + 336);
  if (*((char *)a8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)a8, *((_QWORD *)a8 + 1));
  }
  else
  {
    v17 = *a8;
    *(_QWORD *)(a1 + 352) = *((_QWORD *)a8 + 2);
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
  }
  *(_BYTE *)(a1 + 233) = a5;
  return a1;
}

void sub_1BF97765C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  siri::dialogengine::Parameter *v29;

  siri::dialogengine::Parameter::~Parameter(v29);
  _Unwind_Resume(a1);
}

void siri::dialogengine::PatternSetting::GetDefaultValueFromSetting(siri::dialogengine::PatternSetting *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 359) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 42), *((_QWORD *)this + 43));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 21);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 44);
  }
}

std::string *siri::dialogengine::PatternSetting::SetDefaultValueFromSetting(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 14, a2);
}

void sub_1BF977B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;

  std::__tree<std::__value_type<std::string,std::unordered_set<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unordered_set<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::unordered_set<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>>>>::destroy((_QWORD *)STACK[0x228]);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x240]);
  siri::dialogengine::Context::~Context((siri::dialogengine::Context *)&STACK[0x250]);

  if (*(char *)(v13 - 129) < 0)
    operator delete(*(void **)(v13 - 152));
  if (*(char *)(v13 - 105) < 0)
    operator delete(*(void **)(v13 - 128));

  _Unwind_Resume(a1);
}

void sub_1BF977C78()
{
  if (SLOBYTE(STACK[0x217]) < 0)
    operator delete((void *)STACK[0x200]);
  JUMPOUT(0x1BF977C14);
}

void sub_1BF977F9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, _QWORD *a12)
{
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;

  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(a12);

  siri::dialogengine::Context::~Context((siri::dialogengine::Context *)&STACK[0x220]);
  std::__tree<std::__value_type<std::string,std::unordered_set<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unordered_set<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::unordered_set<std::shared_ptr<siri::dialogengine::Parameter>,siri::dialogengine::ParameterCollection::ParameterHash,siri::dialogengine::ParameterCollection::ParameterEqual,std::allocator<std::shared_ptr<siri::dialogengine::Parameter>>>>>>::destroy(*(_QWORD **)(v15 - 176));

  if (*(char *)(v15 - 129) < 0)
    operator delete(*(void **)(v15 - 152));
  if (*(char *)(v15 - 105) < 0)
    operator delete(*(void **)(v15 - 128));

  _Unwind_Resume(a1);
}

void sub_1BF9780A0()
{
  if (SLOBYTE(STACK[0x217]) < 0)
    operator delete((void *)STACK[0x200]);
  JUMPOUT(0x1BF978044);
}

void InitDefaultsscc_info_BinaryButton_Button_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Button.pb.cc", a4);
  SnippetUI::BinaryButton::BinaryButton((SnippetUI::BinaryButton *)&SnippetUI::_BinaryButton_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_BinaryButton_default_instance_, v4);
  qword_1ED1D3D60 = (uint64_t)&SnippetUI::_Button_default_instance_;
  unk_1ED1D3D68 = &SnippetUI::_Button_default_instance_;
}

void InitDefaultsscc_info_Button_Button_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Button.pb.cc", a4);
  SnippetUI::Button::Button((SnippetUI::Button *)&SnippetUI::_Button_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Button_default_instance_, v4);
  qword_1ED1D4DE8 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
  unk_1ED1D4DF0 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D4DF8 = (uint64_t)&SnippetUI::_VisualProperty_default_instance_;
}

SnippetUI::Button *SnippetUI::Button::Button(SnippetUI::Button *this)
{
  *(_QWORD *)this = &off_1E792FF00;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 17) = 0;
  if (atomic_load(scc_info_Button_Button_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Button_Button_2eproto);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_DWORD *)this + 16) = 0;
  return this;
}

void sub_1BF9781FC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Button::~Button(SnippetUI::Button *this)
{
  SnippetUI::Button::~Button(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)this = &off_1E792FF00;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 3);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1C3B8D890](v4, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::Button *)&SnippetUI::_Button_default_instance_)
  {
    v6 = *((_QWORD *)this + 4);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = *((_QWORD *)this + 5);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = *((_QWORD *)this + 6);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::Button *SnippetUI::Button::New(SnippetUI::Button *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Button>(0);
}

SnippetUI::Button *SnippetUI::Button::New(SnippetUI::Button *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Button>(a2);
}

void SnippetUI::Button::Clear(SnippetUI::Button *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  google::protobuf::internal::InternalMetadataWithArena *v8;
  char v9;

  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 3);
  if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
  v4 = *((_QWORD *)this + 4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 4) = 0;
  v5 = *((_QWORD *)this + 5);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v7 = (char *)this + 48;
  v6 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 5) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v9 = *((_BYTE *)this + 8);
  v8 = (SnippetUI::Button *)((char *)this + 8);
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  *((_DWORD *)v7 + 4) = 0;
  if ((v9 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v8);
}

uint64_t SnippetUI::Button::IsInitialized(SnippetUI::Button *this)
{
  return 1;
}

char *SnippetUI::Button::ByteSizeLong(SnippetUI::Button *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const google::protobuf::UnknownFieldSet *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  SnippetUI::ActionProperty *v9;
  char *v10;
  SnippetUI::TextProperty *v11;
  char *v12;
  SnippetUI::VisualProperty *v13;
  char *v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  v6 = *((_QWORD *)this + 3);
  v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v8 = *(_QWORD *)(v6 + 8);
  if ((v7 & 0x80u) == 0)
    v8 = v7;
  v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_13:
  if (this != (SnippetUI::Button *)&SnippetUI::_Button_default_instance_)
  {
    v9 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 4);
    if (v9)
    {
      v10 = SnippetUI::ActionProperty::ByteSizeLong(v9);
      v5 = (const google::protobuf::UnknownFieldSet *)&v10[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
    if (v11)
    {
      v12 = SnippetUI::TextProperty::ByteSizeLong(v11);
      v5 = (const google::protobuf::UnknownFieldSet *)&v12[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v13 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 6);
    if (v13)
    {
      v14 = SnippetUI::VisualProperty::ByteSizeLong(v13);
      v5 = (const google::protobuf::UnknownFieldSet *)&v14[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  v15 = *((_DWORD *)this + 14);
  if (v15)
  {
    if (v15 < 0)
      v16 = 11;
    else
      v16 = ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6) + 1;
    v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v16);
  }
  v17 = *((_DWORD *)this + 15);
  if (v17)
  {
    if (v17 < 0)
      v18 = 11;
    else
      v18 = ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6) + 1;
    v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v18);
  }
  v19 = *((_DWORD *)this + 16);
  if (v19)
  {
    if (v19 < 0)
      v20 = 11;
    else
      v20 = ((9 * (__clz(v19 | 1) ^ 0x1F) + 73) >> 6) + 1;
    v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v20);
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::Button *)((char *)this + 8), v5, (_DWORD *)this + 17);
  *((_DWORD *)this + 17) = (_DWORD)v5;
  return (char *)v5;
}

uint64_t SnippetUI::Button::GetCachedSize(SnippetUI::Button *this)
{
  return *((unsigned int *)this + 17);
}

google::protobuf::internal *SnippetUI::Button::_InternalParse(SnippetUI::Button *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  std::string **v6;
  uint64_t *v7;
  google::protobuf::internal::ParseContext *v8;
  google::protobuf::internal *TagFallback;
  char *v10;
  SnippetUI::ActionProperty *v11;
  char *v12;
  SnippetUI::TextProperty *v13;
  SnippetUI::VisualProperty *v14;
  google::protobuf::internal *v15;
  unint64_t v16;
  int v17;
  std::string *v18;
  std::string::value_type *v19;
  google::protobuf::internal::ParseContext *v20;
  char *v21;
  google::protobuf::internal *v22;
  unint64_t v23;
  int v24;
  google::protobuf::internal *v25;
  unint64_t v26;
  int v27;
  BOOL v28;
  google::protobuf::internal *v30;

  v30 = a2;
  v5 = (std::string **)((char *)this + 24);
  v6 = (std::string **)((char *)this + 16);
  v7 = (uint64_t *)((char *)this + 8);
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v30, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v30;
    TagFallback = (google::protobuf::internal *)((char *)v30 + 1);
    v10 = (char *)*(unsigned __int8 *)v30;
    if ((*(char *)v30 & 0x80000000) == 0)
      goto LABEL_6;
    v10 = (char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v30 + 2);
LABEL_6:
      v30 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v30, v10);
    v30 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    switch(v10 >> 3)
    {
      case 1u:
        if (v10 != 10)
          goto LABEL_49;
        v11 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 4);
        if (!v11)
        {
          v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((_QWORD *)this + 4) = v11;
          TagFallback = v30;
        }
        v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v11, TagFallback);
        goto LABEL_54;
      case 2u:
        if (v10 != 18)
          goto LABEL_49;
        v13 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
        if (!v13)
        {
          v13 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
          *((_QWORD *)this + 5) = v13;
          TagFallback = v30;
        }
        v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v13, TagFallback);
        goto LABEL_54;
      case 3u:
        if (v10 != 26)
          goto LABEL_49;
        v14 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 6);
        if (!v14)
        {
          v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
          *((_QWORD *)this + 6) = v14;
          TagFallback = v30;
        }
        v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::VisualProperty>(a3, v14, TagFallback);
        goto LABEL_54;
      case 4u:
        if (v10 != 32)
          goto LABEL_49;
        v15 = (google::protobuf::internal *)((char *)TagFallback + 1);
        LODWORD(v16) = *(unsigned __int8 *)TagFallback;
        if ((*(char *)TagFallback & 0x80000000) == 0)
          goto LABEL_26;
        v17 = *(char *)v15;
        v16 = v16 + (v17 << 7) - 128;
        if (v17 < 0)
        {
          v30 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v16);
          if (!v30)
            goto LABEL_61;
        }
        else
        {
          v15 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_26:
          v30 = v15;
        }
        *((_DWORD *)this + 14) = v16;
        continue;
      case 5u:
        if (v10 != 42)
          goto LABEL_49;
        v18 = *v6;
        if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v18 = *v6;
          TagFallback = v30;
        }
        v19 = (std::string::value_type *)TagFallback;
        v20 = a3;
        v21 = "SnippetUI.Button.component_name";
        goto LABEL_36;
      case 6u:
        if (v10 != 50)
          goto LABEL_49;
        v18 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v18 = *v5;
          TagFallback = v30;
        }
        v19 = (std::string::value_type *)TagFallback;
        v20 = a3;
        v21 = "SnippetUI.Button.link_identifier";
LABEL_36:
        v12 = google::protobuf::internal::InlineGreedyStringParserUTF8(v18, v19, (uint64_t)v20, (google::protobuf::internal *)v21);
        goto LABEL_54;
      case 7u:
        if (v10 != 56)
          goto LABEL_49;
        v22 = (google::protobuf::internal *)((char *)TagFallback + 1);
        LODWORD(v23) = *(unsigned __int8 *)TagFallback;
        if ((*(char *)TagFallback & 0x80000000) == 0)
          goto LABEL_41;
        v24 = *(char *)v22;
        v23 = v23 + (v24 << 7) - 128;
        if (v24 < 0)
        {
          v30 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v23);
          if (!v30)
            goto LABEL_61;
        }
        else
        {
          v22 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_41:
          v30 = v22;
        }
        *((_DWORD *)this + 15) = v23;
        continue;
      case 8u:
        if (v10 != 64)
          goto LABEL_49;
        v25 = (google::protobuf::internal *)((char *)TagFallback + 1);
        LODWORD(v26) = *(unsigned __int8 *)TagFallback;
        if ((*(char *)TagFallback & 0x80000000) == 0)
          goto LABEL_47;
        v27 = *(char *)v25;
        v26 = v26 + (v27 << 7) - 128;
        if (v27 < 0)
        {
          v30 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v26);
          if (!v30)
            goto LABEL_61;
        }
        else
        {
          v25 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_47:
          v30 = v25;
        }
        *((_DWORD *)this + 16) = v26;
        continue;
      default:
LABEL_49:
        if ((_DWORD)v10)
          v28 = (v10 & 7) == 4;
        else
          v28 = 1;
        if (v28)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v10 - 1;
          return TagFallback;
        }
        v12 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v7, TagFallback, a3, v8);
LABEL_54:
        v30 = (google::protobuf::internal *)v12;
        if (v12)
          continue;
LABEL_61:
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::Button::InternalSerializeWithCachedSizesToArray(SnippetUI::Button *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  SnippetUI::ActionProperty *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  google::protobuf::UnknownFieldSet *v11;
  _BYTE *v12;
  _BYTE *v13;
  unsigned int v14;
  unsigned int v15;
  SnippetUI::TextProperty *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  google::protobuf::UnknownFieldSet *v20;
  _BYTE *v21;
  _BYTE *v22;
  unsigned int v23;
  unsigned int v24;
  SnippetUI::VisualProperty *v25;
  unsigned int v26;
  google::protobuf::UnknownFieldSet *v27;
  unsigned int v28;
  _BYTE *v29;
  _BYTE *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unint64_t v34;
  _BYTE *v35;
  _BYTE *v36;
  unint64_t v37;
  unint64_t v38;
  google::protobuf::internal *v39;
  const char *v40;
  google::protobuf::internal *v41;
  const char *v42;
  unsigned int v43;
  unint64_t v44;
  _BYTE *v45;
  _BYTE *v46;
  unint64_t v47;
  unint64_t v48;
  unsigned int v49;
  unint64_t v50;
  _BYTE *v51;
  _BYTE *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;

  v5 = (char *)a2;
  if (this == (SnippetUI::Button *)&SnippetUI::_Button_default_instance_)
    goto LABEL_37;
  v7 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 4);
  if (v7)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v7 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 4);
    }
    *v5 = 10;
    v8 = *((_DWORD *)v7 + 12);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v12 = v5 + 2;
        do
        {
          v13 = v12;
          *v12++ = v10 | 0x80;
          v14 = v10 >> 7;
          v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        v11 = (google::protobuf::UnknownFieldSet *)(v13 + 2);
        *v12 = v14;
        goto LABEL_13;
      }
      v5[2] = v10;
      v9 = 3;
    }
    else
    {
      v5[1] = v8;
      v9 = 2;
    }
    v11 = (google::protobuf::UnknownFieldSet *)&v5[v9];
LABEL_13:
    v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
  if (!v16)
    goto LABEL_26;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
  }
  *v5 = 18;
  v17 = *((_DWORD *)v16 + 15);
  if (v17 > 0x7F)
  {
    v5[1] = v17 | 0x80;
    v19 = v17 >> 7;
    if (v17 >> 14)
    {
      v21 = v5 + 2;
      do
      {
        v22 = v21;
        *v21++ = v19 | 0x80;
        v23 = v19 >> 7;
        v24 = v19 >> 14;
        v19 >>= 7;
      }
      while (v24);
      v20 = (google::protobuf::UnknownFieldSet *)(v22 + 2);
      *v21 = v23;
      goto LABEL_25;
    }
    v5[2] = v19;
    v18 = 3;
  }
  else
  {
    v5[1] = v17;
    v18 = 2;
  }
  v20 = (google::protobuf::UnknownFieldSet *)&v5[v18];
LABEL_25:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v16, v20, a3, a4);
LABEL_26:
  v25 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 6);
  if (v25)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v25 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 6);
    }
    *v5 = 26;
    v26 = *((_DWORD *)v25 + 15);
    if (v26 > 0x7F)
    {
      v5[1] = v26 | 0x80;
      v28 = v26 >> 7;
      if (v26 >> 14)
      {
        v29 = v5 + 2;
        do
        {
          v30 = v29;
          *v29++ = v28 | 0x80;
          v31 = v28 >> 7;
          v32 = v28 >> 14;
          v28 >>= 7;
        }
        while (v32);
        v27 = (google::protobuf::UnknownFieldSet *)(v30 + 2);
        *v29 = v31;
      }
      else
      {
        v5[2] = v28;
        v27 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v26;
      v27 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::VisualProperty::InternalSerializeWithCachedSizesToArray(v25, v27, a3, a4);
  }
LABEL_37:
  v33 = *((_DWORD *)this + 14);
  if (v33)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v33 = *((_DWORD *)this + 14);
    }
    *v5 = 32;
    if (v33 > 0x7F)
    {
      v5[1] = v33 | 0x80;
      v34 = (unint64_t)(int)v33 >> 7;
      if (v33 >> 14)
      {
        v35 = v5 + 2;
        do
        {
          v36 = v35;
          *v35++ = v34 | 0x80;
          v37 = v34 >> 7;
          v38 = v34 >> 14;
          v34 >>= 7;
        }
        while (v38);
        v5 = v36 + 2;
        *v35 = v37;
      }
      else
      {
        v5[2] = v34;
        v5 += 3;
      }
    }
    else
    {
      v5[1] = v33;
      v5 += 2;
    }
  }
  v39 = (google::protobuf::internal *)*((_QWORD *)this + 2);
  if (*((char *)v39 + 23) < 0)
  {
    v40 = (const char *)*((_QWORD *)v39 + 1);
    if (!v40)
      goto LABEL_53;
    v39 = *(google::protobuf::internal **)v39;
    goto LABEL_52;
  }
  v40 = (const char *)*((unsigned __int8 *)v39 + 23);
  if (*((_BYTE *)v39 + 23))
  {
LABEL_52:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v39, v40, 1, (google::protobuf::internal *)"SnippetUI.Button.component_name");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 5, *((_QWORD *)this + 2), v5);
  }
LABEL_53:
  v41 = (google::protobuf::internal *)*((_QWORD *)this + 3);
  if (*((char *)v41 + 23) < 0)
  {
    v42 = (const char *)*((_QWORD *)v41 + 1);
    if (!v42)
      goto LABEL_59;
    v41 = *(google::protobuf::internal **)v41;
    goto LABEL_58;
  }
  v42 = (const char *)*((unsigned __int8 *)v41 + 23);
  if (*((_BYTE *)v41 + 23))
  {
LABEL_58:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v41, v42, 1, (google::protobuf::internal *)"SnippetUI.Button.link_identifier");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 6, *((_QWORD *)this + 3), v5);
  }
LABEL_59:
  v43 = *((_DWORD *)this + 15);
  if (v43)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v43 = *((_DWORD *)this + 15);
    }
    *v5 = 56;
    if (v43 > 0x7F)
    {
      v5[1] = v43 | 0x80;
      v44 = (unint64_t)(int)v43 >> 7;
      if (v43 >> 14)
      {
        v45 = v5 + 2;
        do
        {
          v46 = v45;
          *v45++ = v44 | 0x80;
          v47 = v44 >> 7;
          v48 = v44 >> 14;
          v44 >>= 7;
        }
        while (v48);
        v5 = v46 + 2;
        *v45 = v47;
      }
      else
      {
        v5[2] = v44;
        v5 += 3;
      }
    }
    else
    {
      v5[1] = v43;
      v5 += 2;
    }
  }
  v49 = *((_DWORD *)this + 16);
  if (v49)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v49 = *((_DWORD *)this + 16);
    }
    *v5 = 64;
    if (v49 > 0x7F)
    {
      v5[1] = v49 | 0x80;
      v50 = (unint64_t)(int)v49 >> 7;
      if (v49 >> 14)
      {
        v51 = v5 + 2;
        do
        {
          v52 = v51;
          *v51++ = v50 | 0x80;
          v53 = v50 >> 7;
          v54 = v50 >> 14;
          v50 >>= 7;
        }
        while (v54);
        v5 = v52 + 2;
        *v51 = v53;
      }
      else
      {
        v5[2] = v50;
        v5 += 3;
      }
    }
    else
    {
      v5[1] = v49;
      v5 += 2;
    }
  }
  v55 = *((_QWORD *)this + 1);
  if ((v55 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v55 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)v5;
}

void SnippetUI::Button::CopyFrom(SnippetUI::Button *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::Button::Clear(this);
    SnippetUI::Button::MergeFrom(this, a2);
  }
}

void SnippetUI::Button::MergeFrom(SnippetUI::Button *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::Button *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Button.pb.cc", 690);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::Button::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BF978E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Button::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 68) = a2;
  return this;
}

uint64_t SnippetUI::Button::GetMetadata(SnippetUI::Button *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_Button_2eproto);
  return file_level_metadata_Button_2eproto;
}

void InitDefaultsscc_info_WatchListButton_Button_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Button.pb.cc", a4);
  SnippetUI::WatchListButton::WatchListButton((SnippetUI::WatchListButton *)&SnippetUI::_WatchListButton_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_WatchListButton_default_instance_, v4);
}

SnippetUI::WatchListButton *SnippetUI::WatchListButton::WatchListButton(SnippetUI::WatchListButton *this)
{
  *(_QWORD *)this = &off_1E7930200;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  if (atomic_load(scc_info_WatchListButton_Button_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_WatchListButton_Button_2eproto);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

void sub_1BF978F34(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::WatchListButton::~WatchListButton(SnippetUI::WatchListButton *this)
{
  SnippetUI::WatchListButton::~WatchListButton(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E7930200;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::WatchListButton *SnippetUI::WatchListButton::New(SnippetUI::WatchListButton *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::WatchListButton>(0);
}

SnippetUI::WatchListButton *SnippetUI::WatchListButton::New(SnippetUI::WatchListButton *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::WatchListButton>(a2);
}

void SnippetUI::WatchListButton::Clear(SnippetUI::WatchListButton *this)
{
  uint64_t v1;
  google::protobuf::internal::InternalMetadataWithArena *v2;
  char v3;

  v1 = *((_QWORD *)this + 2);
  if ((uint64_t *)v1 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v1 + 23) < 0)
    {
      **(_BYTE **)v1 = 0;
      *(_QWORD *)(v1 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v1 = 0;
      *(_BYTE *)(v1 + 23) = 0;
    }
  }
  v3 = *((_BYTE *)this + 8);
  v2 = (SnippetUI::WatchListButton *)((char *)this + 8);
  if ((v3 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v2);
}

uint64_t SnippetUI::WatchListButton::IsInitialized(SnippetUI::WatchListButton *this)
{
  return 1;
}

char *SnippetUI::WatchListButton::ByteSizeLong(SnippetUI::WatchListButton *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const google::protobuf::UnknownFieldSet *v4;

  v1 = *((_QWORD *)this + 2);
  v2 = *(unsigned __int8 *)(v1 + 23);
  if (*(char *)(v1 + 23) < 0)
  {
    if (*(_QWORD *)(v1 + 8))
      goto LABEL_3;
LABEL_7:
    v4 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v1 + 23))
    goto LABEL_7;
LABEL_3:
  v3 = *(_QWORD *)(v1 + 8);
  if ((v2 & 0x80u) == 0)
    v3 = v2;
  v4 = (const google::protobuf::UnknownFieldSet *)(v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::WatchListButton *)((char *)this + 8), v4, (_DWORD *)this + 6);
  *((_DWORD *)this + 6) = (_DWORD)v4;
  return (char *)v4;
}

uint64_t SnippetUI::WatchListButton::GetCachedSize(SnippetUI::WatchListButton *this)
{
  return *((unsigned int *)this + 6);
}

google::protobuf::internal *SnippetUI::WatchListButton::_InternalParse(SnippetUI::WatchListButton *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  uint64_t *v4;
  std::string **v5;
  google::protobuf::internal::ParseContext *v6;
  google::protobuf::internal *TagFallback;
  char *v8;
  char *v10;
  std::string *v11;
  google::protobuf::internal *v13;

  v13 = a2;
  v4 = (uint64_t *)((char *)this + 8);
  v5 = (std::string **)((char *)this + 16);
  while (1)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v13, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v13;
    TagFallback = (google::protobuf::internal *)((char *)v13 + 1);
    v8 = (char *)*(unsigned __int8 *)v13;
    if ((*(char *)v13 & 0x80000000) == 0)
      goto LABEL_6;
    v8 = (char *)(v8 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v13 + 2);
LABEL_6:
      v13 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v13, v8);
    v13 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    if ((_DWORD)v8 == 10)
    {
      v11 = *v5;
      if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v11 = *v5;
        TagFallback = v13;
      }
      v10 = google::protobuf::internal::InlineGreedyStringParserUTF8(v11, (std::string::value_type *)TagFallback, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.WatchListButton.canonical_id");
      goto LABEL_16;
    }
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      break;
    v10 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v8, v4, TagFallback, a3, v6);
LABEL_16:
    v13 = (google::protobuf::internal *)v10;
    if (!v10)
      return 0;
  }
  *((_DWORD *)a3 + 20) = (_DWORD)v8 - 1;
  return TagFallback;
}

const google::protobuf::UnknownFieldSet *SnippetUI::WatchListButton::InternalSerializeWithCachedSizesToArray(SnippetUI::WatchListButton *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  google::protobuf::internal *v7;
  const char *v8;
  uint64_t v9;

  v7 = (google::protobuf::internal *)*((_QWORD *)this + 2);
  if (*((char *)v7 + 23) < 0)
  {
    v8 = (const char *)*((_QWORD *)v7 + 1);
    if (!v8)
      goto LABEL_7;
    v7 = *(google::protobuf::internal **)v7;
    goto LABEL_6;
  }
  v8 = (const char *)*((unsigned __int8 *)v7 + 23);
  if (*((_BYTE *)v7 + 23))
  {
LABEL_6:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v7, v8, 1, (google::protobuf::internal *)"SnippetUI.WatchListButton.canonical_id");
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 2), (char *)a2);
  }
LABEL_7:
  v9 = *((_QWORD *)this + 1);
  if ((v9 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v9 & 0xFFFFFFFFFFFFFFFELL), a2, a3, a4);
  else
    return a2;
}

void SnippetUI::WatchListButton::CopyFrom(SnippetUI::WatchListButton *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::WatchListButton::Clear(this);
    SnippetUI::WatchListButton::MergeFrom(this, a2);
  }
}

void SnippetUI::WatchListButton::MergeFrom(SnippetUI::WatchListButton *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::WatchListButton *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Button.pb.cc", 1824);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::WatchListButton::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BF979300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::WatchListButton::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 24) = a2;
  return this;
}

uint64_t SnippetUI::WatchListButton::GetMetadata(SnippetUI::WatchListButton *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_Button_2eproto);
  return qword_1EF581D18;
}

void *SnippetUI::WatchListButton::default_instance(SnippetUI::WatchListButton *this)
{
  if (atomic_load(scc_info_WatchListButton_Button_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_WatchListButton_Button_2eproto);
  return &SnippetUI::_WatchListButton_default_instance_;
}

void SnippetUI::WatchListButton::MergeFrom(SnippetUI::WatchListButton *this, const SnippetUI::WatchListButton *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  std::string *v7;
  std::string **v8;
  std::string *v9;
  char v10;
  std::string v11[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Button.pb.cc", 1839);
    v4 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::WatchListButton *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_QWORD *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      return;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    return;
  }
  v9 = (std::string *)*((_QWORD *)this + 2);
  v8 = (std::string **)((char *)this + 16);
  v7 = v9;
  if (v9 != (std::string *)v6)
  {
    if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v8, v6);
    else
      std::string::operator=(v7, (const std::string *)v6);
  }
}

void sub_1BF97944C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::WatchListButton *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::WatchListButton>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::WatchListButton *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::WatchListButton *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x20uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::WatchListButton>);
    SnippetUI::WatchListButton::WatchListButton(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::WatchListButton *)operator new();
    SnippetUI::WatchListButton::WatchListButton(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BF9794E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C4084265165);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::WatchListButton>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void InitDefaultsscc_info_StandardPlayerButton_Button_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Button.pb.cc", a4);
  SnippetUI::StandardPlayerButton::StandardPlayerButton((SnippetUI::StandardPlayerButton *)&SnippetUI::_StandardPlayerButton_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_StandardPlayerButton_default_instance_, v4);
  qword_1EF584A28 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
  unk_1EF584A30 = &SnippetUI::_ActionProperty_default_instance_;
}

SnippetUI::StandardPlayerButton *SnippetUI::StandardPlayerButton::StandardPlayerButton(SnippetUI::StandardPlayerButton *this)
{
  *(_QWORD *)this = &off_1E792FFC0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 12) = 0;
  if (atomic_load(scc_info_StandardPlayerButton_Button_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_StandardPlayerButton_Button_2eproto);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  return this;
}

void sub_1BF979654(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::StandardPlayerButton::~StandardPlayerButton(SnippetUI::StandardPlayerButton *this)
{
  SnippetUI::StandardPlayerButton::~StandardPlayerButton(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E792FFC0;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 3);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1C3B8D890](v4, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::StandardPlayerButton *)&SnippetUI::_StandardPlayerButton_default_instance_)
  {
    v6 = *((_QWORD *)this + 4);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = *((_QWORD *)this + 5);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::StandardPlayerButton *SnippetUI::StandardPlayerButton::New(SnippetUI::StandardPlayerButton *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::StandardPlayerButton>(0);
}

SnippetUI::StandardPlayerButton *SnippetUI::StandardPlayerButton::New(SnippetUI::StandardPlayerButton *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::StandardPlayerButton>(a2);
}

void SnippetUI::StandardPlayerButton::Clear(SnippetUI::StandardPlayerButton *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  google::protobuf::internal::InternalMetadataWithArena *v6;
  char v7;

  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 3);
  if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
  v4 = *((_QWORD *)this + 4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 4) = 0;
  v5 = *((_QWORD *)this + 5);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v7 = *((_BYTE *)this + 8);
  v6 = (SnippetUI::StandardPlayerButton *)((char *)this + 8);
  *((_QWORD *)v6 + 4) = 0;
  if ((v7 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v6);
}

uint64_t SnippetUI::StandardPlayerButton::IsInitialized(SnippetUI::StandardPlayerButton *this)
{
  return 1;
}

char *SnippetUI::StandardPlayerButton::ByteSizeLong(SnippetUI::StandardPlayerButton *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const google::protobuf::UnknownFieldSet *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  SnippetUI::ActionProperty *v9;
  char *v10;
  SnippetUI::ActionProperty *v11;
  char *v12;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  v6 = *((_QWORD *)this + 3);
  v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v8 = *(_QWORD *)(v6 + 8);
  if ((v7 & 0x80u) == 0)
    v8 = v7;
  v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_13:
  if (this != (SnippetUI::StandardPlayerButton *)&SnippetUI::_StandardPlayerButton_default_instance_)
  {
    v9 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 4);
    if (v9)
    {
      v10 = SnippetUI::ActionProperty::ByteSizeLong(v9);
      v5 = (const google::protobuf::UnknownFieldSet *)&v10[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v11 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 5);
    if (v11)
    {
      v12 = SnippetUI::ActionProperty::ByteSizeLong(v11);
      v5 = (const google::protobuf::UnknownFieldSet *)&v12[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::StandardPlayerButton *)((char *)this + 8), v5, (_DWORD *)this + 12);
  *((_DWORD *)this + 12) = (_DWORD)v5;
  return (char *)v5;
}

uint64_t SnippetUI::StandardPlayerButton::GetCachedSize(SnippetUI::StandardPlayerButton *this)
{
  return *((unsigned int *)this + 12);
}

google::protobuf::internal *SnippetUI::StandardPlayerButton::_InternalParse(SnippetUI::StandardPlayerButton *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  std::string **v6;
  uint64_t *v7;
  google::protobuf::internal::ParseContext *v8;
  google::protobuf::internal *TagFallback;
  char *v10;
  SnippetUI::ActionProperty *v11;
  char *v12;
  std::string *v13;
  std::string::value_type *v14;
  google::protobuf::internal::ParseContext *v15;
  char *v16;
  BOOL v17;
  google::protobuf::internal *v19;

  v19 = a2;
  v5 = (std::string **)((char *)this + 24);
  v6 = (std::string **)((char *)this + 16);
  v7 = (uint64_t *)((char *)this + 8);
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v19, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v19;
    TagFallback = (google::protobuf::internal *)((char *)v19 + 1);
    v10 = (char *)*(unsigned __int8 *)v19;
    if ((*(char *)v19 & 0x80000000) == 0)
      goto LABEL_6;
    v10 = (char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v19 + 2);
LABEL_6:
      v19 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v19, v10);
    v19 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    switch(v10 >> 3)
    {
      case 1u:
        if (v10 != 10)
          goto LABEL_25;
        v11 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 4);
        if (v11)
          goto LABEL_15;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((_QWORD *)this + 4) = v11;
        goto LABEL_14;
      case 2u:
        if (v10 != 18)
          goto LABEL_25;
        v11 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 5);
        if (!v11)
        {
          v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((_QWORD *)this + 5) = v11;
LABEL_14:
          TagFallback = v19;
        }
LABEL_15:
        v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v11, TagFallback);
        goto LABEL_30;
      case 3u:
        if (v10 != 26)
          goto LABEL_25;
        v13 = *v6;
        if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v13 = *v6;
          TagFallback = v19;
        }
        v14 = (std::string::value_type *)TagFallback;
        v15 = a3;
        v16 = "SnippetUI.StandardPlayerButton.component_name";
        goto LABEL_24;
      case 4u:
        if (v10 != 34)
          goto LABEL_25;
        v13 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v13 = *v5;
          TagFallback = v19;
        }
        v14 = (std::string::value_type *)TagFallback;
        v15 = a3;
        v16 = "SnippetUI.StandardPlayerButton.link_identifier";
LABEL_24:
        v12 = google::protobuf::internal::InlineGreedyStringParserUTF8(v13, v14, (uint64_t)v15, (google::protobuf::internal *)v16);
        goto LABEL_30;
      default:
LABEL_25:
        if ((_DWORD)v10)
          v17 = (v10 & 7) == 4;
        else
          v17 = 1;
        if (v17)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v10 - 1;
          return TagFallback;
        }
        v12 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v7, TagFallback, a3, v8);
LABEL_30:
        v19 = (google::protobuf::internal *)v12;
        if (v12)
          continue;
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::StandardPlayerButton::InternalSerializeWithCachedSizesToArray(SnippetUI::StandardPlayerButton *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  SnippetUI::ActionProperty *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  google::protobuf::UnknownFieldSet *v11;
  _BYTE *v12;
  _BYTE *v13;
  unsigned int v14;
  unsigned int v15;
  SnippetUI::ActionProperty *v16;
  unsigned int v17;
  google::protobuf::UnknownFieldSet *v18;
  unsigned int v19;
  _BYTE *v20;
  _BYTE *v21;
  unsigned int v22;
  unsigned int v23;
  google::protobuf::internal *v24;
  const char *v25;
  google::protobuf::internal *v26;
  const char *v27;
  uint64_t v28;

  v5 = (char *)a2;
  if (this == (SnippetUI::StandardPlayerButton *)&SnippetUI::_StandardPlayerButton_default_instance_)
    goto LABEL_25;
  v7 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 4);
  if (v7)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v7 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 4);
    }
    *v5 = 10;
    v8 = *((_DWORD *)v7 + 12);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v12 = v5 + 2;
        do
        {
          v13 = v12;
          *v12++ = v10 | 0x80;
          v14 = v10 >> 7;
          v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        v11 = (google::protobuf::UnknownFieldSet *)(v13 + 2);
        *v12 = v14;
        goto LABEL_13;
      }
      v5[2] = v10;
      v9 = 3;
    }
    else
    {
      v5[1] = v8;
      v9 = 2;
    }
    v11 = (google::protobuf::UnknownFieldSet *)&v5[v9];
LABEL_13:
    v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  v16 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 5);
  if (v16)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v16 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 5);
    }
    *v5 = 18;
    v17 = *((_DWORD *)v16 + 12);
    if (v17 > 0x7F)
    {
      v5[1] = v17 | 0x80;
      v19 = v17 >> 7;
      if (v17 >> 14)
      {
        v20 = v5 + 2;
        do
        {
          v21 = v20;
          *v20++ = v19 | 0x80;
          v22 = v19 >> 7;
          v23 = v19 >> 14;
          v19 >>= 7;
        }
        while (v23);
        v18 = (google::protobuf::UnknownFieldSet *)(v21 + 2);
        *v20 = v22;
      }
      else
      {
        v5[2] = v19;
        v18 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v17;
      v18 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v16, v18, a3, a4);
  }
LABEL_25:
  v24 = (google::protobuf::internal *)*((_QWORD *)this + 2);
  if (*((char *)v24 + 23) < 0)
  {
    v25 = (const char *)*((_QWORD *)v24 + 1);
    if (!v25)
      goto LABEL_31;
    v24 = *(google::protobuf::internal **)v24;
    goto LABEL_30;
  }
  v25 = (const char *)*((unsigned __int8 *)v24 + 23);
  if (*((_BYTE *)v24 + 23))
  {
LABEL_30:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v24, v25, 1, (google::protobuf::internal *)"SnippetUI.StandardPlayerButton.component_name");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, *((_QWORD *)this + 2), v5);
  }
LABEL_31:
  v26 = (google::protobuf::internal *)*((_QWORD *)this + 3);
  if (*((char *)v26 + 23) < 0)
  {
    v27 = (const char *)*((_QWORD *)v26 + 1);
    if (!v27)
      goto LABEL_37;
    v26 = *(google::protobuf::internal **)v26;
    goto LABEL_36;
  }
  v27 = (const char *)*((unsigned __int8 *)v26 + 23);
  if (*((_BYTE *)v26 + 23))
  {
LABEL_36:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v26, v27, 1, (google::protobuf::internal *)"SnippetUI.StandardPlayerButton.link_identifier");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 4, *((_QWORD *)this + 3), v5);
  }
LABEL_37:
  v28 = *((_QWORD *)this + 1);
  if ((v28 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v28 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)v5;
}

void SnippetUI::StandardPlayerButton::CopyFrom(SnippetUI::StandardPlayerButton *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::StandardPlayerButton::Clear(this);
    SnippetUI::StandardPlayerButton::MergeFrom(this, a2);
  }
}

void SnippetUI::StandardPlayerButton::MergeFrom(SnippetUI::StandardPlayerButton *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::StandardPlayerButton *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Button.pb.cc", 1041);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::StandardPlayerButton::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BF979E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::StandardPlayerButton::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 48) = a2;
  return this;
}

uint64_t SnippetUI::StandardPlayerButton::GetMetadata(SnippetUI::StandardPlayerButton *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_Button_2eproto);
  return qword_1EF581CE8;
}

void *SnippetUI::StandardPlayerButton::default_instance(SnippetUI::StandardPlayerButton *this)
{
  if (atomic_load(scc_info_StandardPlayerButton_Button_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_StandardPlayerButton_Button_2eproto);
  return &SnippetUI::_StandardPlayerButton_default_instance_;
}

void SnippetUI::StandardPlayerButton::MergeFrom(SnippetUI::StandardPlayerButton *this, const SnippetUI::StandardPlayerButton *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  int **v10;
  int **v11;
  int **v12;
  int **v13;
  int **v14;
  int **v15;
  char v16;
  std::string v17[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v17, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Button.pb.cc", 1056);
    v4 = google::protobuf::internal::LogMessage::operator<<(v17, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v16, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v17[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::StandardPlayerButton *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_QWORD *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v6);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(_QWORD *)(v8 + 8))
      goto LABEL_21;
  }
  else if (!*(_BYTE *)(v8 + 23))
  {
    goto LABEL_21;
  }
  v9 = (uint64_t *)*((_QWORD *)this + 3);
  if (v9 != (uint64_t *)v8)
  {
    if (v9 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
    else
      std::string::operator=(*((std::string **)this + 3), (const std::string *)v8);
  }
LABEL_21:
  if (a2 != (const SnippetUI::StandardPlayerButton *)&SnippetUI::_StandardPlayerButton_default_instance_)
  {
    v10 = (int **)*((_QWORD *)a2 + 4);
    if (v10)
    {
      v11 = (int **)*((_QWORD *)this + 4);
      if (!v11)
      {
        v11 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((_QWORD *)this + 4) = v11;
        v10 = (int **)*((_QWORD *)a2 + 4);
      }
      if (v10)
        v12 = v10;
      else
        v12 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      SnippetUI::ActionProperty::MergeFrom(v11, v12);
    }
    v13 = (int **)*((_QWORD *)a2 + 5);
    if (v13)
    {
      v14 = (int **)*((_QWORD *)this + 5);
      if (!v14)
      {
        v14 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((_QWORD *)this + 5) = v14;
        v13 = (int **)*((_QWORD *)a2 + 5);
      }
      if (v13)
        v15 = v13;
      else
        v15 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      SnippetUI::ActionProperty::MergeFrom(v14, v15);
    }
  }
}

void sub_1BF97A01C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::StandardPlayerButton *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::StandardPlayerButton>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::StandardPlayerButton *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::StandardPlayerButton *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x38uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::StandardPlayerButton>);
    SnippetUI::StandardPlayerButton::StandardPlayerButton(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::StandardPlayerButton *)operator new();
    SnippetUI::StandardPlayerButton::StandardPlayerButton(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BF97A0B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C40668C0A6DLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::StandardPlayerButton>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void InitDefaultsscc_info_PlayerButton_Button_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Button.pb.cc", a4);
  SnippetUI::PlayerButton::PlayerButton((SnippetUI::PlayerButton *)&SnippetUI::_PlayerButton_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_PlayerButton_default_instance_, v4);
  qword_1ED1D3D88 = (uint64_t)&SnippetUI::_Button_default_instance_;
  unk_1ED1D3D90 = &SnippetUI::_Button_default_instance_;
}

SnippetUI::PlayerButton *SnippetUI::PlayerButton::PlayerButton(SnippetUI::PlayerButton *this)
{
  *(_QWORD *)this = &off_1E7930140;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 8) = 0;
  if (atomic_load(scc_info_PlayerButton_Button_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_PlayerButton_Button_2eproto);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  return this;
}

void sub_1BF97A290(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::PlayerButton::~PlayerButton(SnippetUI::PlayerButton *this)
{
  SnippetUI::PlayerButton::~PlayerButton(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E7930140;
  if (this != (SnippetUI::PlayerButton *)&SnippetUI::_PlayerButton_default_instance_)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *((_QWORD *)this + 3);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::PlayerButton *SnippetUI::PlayerButton::New(SnippetUI::PlayerButton *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::PlayerButton>(0);
}

SnippetUI::PlayerButton *SnippetUI::PlayerButton::New(SnippetUI::PlayerButton *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::PlayerButton>(a2);
}

void SnippetUI::PlayerButton::Clear(SnippetUI::PlayerButton *this)
{
  uint64_t v2;
  uint64_t v3;
  google::protobuf::internal::InternalMetadataWithArena *v4;
  char v5;

  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 2) = 0;
  v3 = *((_QWORD *)this + 3);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v5 = *((_BYTE *)this + 8);
  v4 = (SnippetUI::PlayerButton *)((char *)this + 8);
  *((_QWORD *)v4 + 2) = 0;
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v4);
}

uint64_t SnippetUI::PlayerButton::IsInitialized(SnippetUI::PlayerButton *this)
{
  return 1;
}

char *SnippetUI::PlayerButton::ByteSizeLong(SnippetUI::PlayerButton *this)
{
  SnippetUI::Button *v2;
  char *v3;
  const google::protobuf::UnknownFieldSet *v4;
  SnippetUI::Button *v5;
  char *v6;

  if (this == (SnippetUI::PlayerButton *)&SnippetUI::_PlayerButton_default_instance_)
  {
    v4 = 0;
  }
  else
  {
    v2 = (SnippetUI::Button *)*((_QWORD *)this + 2);
    if (v2)
    {
      v3 = SnippetUI::Button::ByteSizeLong(v2);
      v4 = (const google::protobuf::UnknownFieldSet *)&v3[((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1];
    }
    else
    {
      v4 = 0;
    }
    v5 = (SnippetUI::Button *)*((_QWORD *)this + 3);
    if (v5)
    {
      v6 = SnippetUI::Button::ByteSizeLong(v5);
      v4 = (const google::protobuf::UnknownFieldSet *)&v6[(_QWORD)v4
                                                        + 1
                                                        + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::PlayerButton *)((char *)this + 8), v4, (_DWORD *)this + 8);
  *((_DWORD *)this + 8) = (_DWORD)v4;
  return (char *)v4;
}

uint64_t SnippetUI::PlayerButton::GetCachedSize(SnippetUI::PlayerButton *this)
{
  return *((unsigned int *)this + 8);
}

google::protobuf::internal *SnippetUI::PlayerButton::_InternalParse(SnippetUI::PlayerButton *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  uint64_t *v5;
  google::protobuf::internal::ParseContext *v6;
  google::protobuf::internal *TagFallback;
  char *v8;
  char *v11;
  SnippetUI::Button *v12;
  google::protobuf::internal *v14;

  v14 = a2;
  v5 = (uint64_t *)((char *)this + 8);
  while (1)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v14, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v14;
    TagFallback = (google::protobuf::internal *)((char *)v14 + 1);
    v8 = (char *)*(unsigned __int8 *)v14;
    if ((*(char *)v14 & 0x80000000) == 0)
      goto LABEL_6;
    v8 = (char *)(v8 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v14 + 2);
LABEL_6:
      v14 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v14, v8);
    v14 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    if (v8 >> 3 == 2)
    {
      if (v8 == 18)
      {
        v12 = (SnippetUI::Button *)*((_QWORD *)this + 3);
        if (!v12)
        {
          v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Button>(0);
          *((_QWORD *)this + 3) = v12;
          goto LABEL_22;
        }
LABEL_23:
        v11 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::Button>(a3, v12, TagFallback);
        goto LABEL_24;
      }
    }
    else if (v8 >> 3 == 1 && v8 == 10)
    {
      v12 = (SnippetUI::Button *)*((_QWORD *)this + 2);
      if (!v12)
      {
        v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Button>(0);
        *((_QWORD *)this + 2) = v12;
LABEL_22:
        TagFallback = v14;
      }
      goto LABEL_23;
    }
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      break;
    v11 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v8, v5, TagFallback, a3, v6);
LABEL_24:
    v14 = (google::protobuf::internal *)v11;
    if (!v11)
      return 0;
  }
  *((_DWORD *)a3 + 20) = (_DWORD)v8 - 1;
  return TagFallback;
}

const google::protobuf::UnknownFieldSet *SnippetUI::PlayerButton::InternalSerializeWithCachedSizesToArray(SnippetUI::PlayerButton *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  SnippetUI::Button *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  google::protobuf::UnknownFieldSet *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned int v13;
  unsigned int v14;
  SnippetUI::Button *v15;
  unsigned int v16;
  unsigned __int8 *v17;
  unsigned int v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;

  if (this == (SnippetUI::PlayerButton *)&SnippetUI::_PlayerButton_default_instance_)
    goto LABEL_25;
  v6 = (SnippetUI::Button *)*((_QWORD *)this + 2);
  if (v6)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v6 = (SnippetUI::Button *)*((_QWORD *)this + 2);
    }
    *a2 = 10;
    v7 = *((_DWORD *)v6 + 17);
    if (v7 > 0x7F)
    {
      a2[1] = v7 | 0x80;
      v9 = v7 >> 7;
      if (v7 >> 14)
      {
        v11 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v12 = v11;
          *v11++ = v9 | 0x80;
          v13 = v9 >> 7;
          v14 = v9 >> 14;
          v9 >>= 7;
        }
        while (v14);
        v10 = (google::protobuf::UnknownFieldSet *)(v12 + 2);
        *v11 = v13;
        goto LABEL_13;
      }
      a2[2] = v9;
      v8 = 3;
    }
    else
    {
      a2[1] = v7;
      v8 = 2;
    }
    v10 = (google::protobuf::UnknownFieldSet *)&a2[v8];
LABEL_13:
    a2 = (char *)SnippetUI::Button::InternalSerializeWithCachedSizesToArray(v6, v10, a3, a4);
  }
  v15 = (SnippetUI::Button *)*((_QWORD *)this + 3);
  if (v15)
  {
    if ((unint64_t)a2 >= *(_QWORD *)a3)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v15 = (SnippetUI::Button *)*((_QWORD *)this + 3);
    }
    *a2 = 18;
    v16 = *((_DWORD *)v15 + 17);
    if (v16 > 0x7F)
    {
      a2[1] = v16 | 0x80;
      v18 = v16 >> 7;
      if (v16 >> 14)
      {
        v19 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v20 = v19;
          *v19++ = v18 | 0x80;
          v21 = v18 >> 7;
          v22 = v18 >> 14;
          v18 >>= 7;
        }
        while (v22);
        v17 = v20 + 2;
        *v19 = v21;
      }
      else
      {
        a2[2] = v18;
        v17 = (unsigned __int8 *)(a2 + 3);
      }
    }
    else
    {
      a2[1] = v16;
      v17 = (unsigned __int8 *)(a2 + 2);
    }
    a2 = (char *)SnippetUI::Button::InternalSerializeWithCachedSizesToArray(v15, (google::protobuf::UnknownFieldSet *)v17, a3, a4);
  }
LABEL_25:
  v23 = *((_QWORD *)this + 1);
  if ((v23 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v23 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)a2;
}

void SnippetUI::PlayerButton::CopyFrom(SnippetUI::PlayerButton *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::PlayerButton::Clear(this);
    SnippetUI::PlayerButton::MergeFrom(this, a2);
  }
}

void SnippetUI::PlayerButton::MergeFrom(SnippetUI::PlayerButton *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::PlayerButton *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Button.pb.cc", 1625);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::PlayerButton::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BF97A7C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::PlayerButton::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 32) = a2;
  return this;
}

uint64_t SnippetUI::PlayerButton::GetMetadata(SnippetUI::PlayerButton *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_Button_2eproto);
  return qword_1EF581D08;
}

void *SnippetUI::PlayerButton::default_instance(SnippetUI::PlayerButton *this)
{
  if (atomic_load(scc_info_PlayerButton_Button_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_PlayerButton_Button_2eproto);
  return &SnippetUI::_PlayerButton_default_instance_;
}

void SnippetUI::PlayerButton::MergeFrom(SnippetUI::PlayerButton *this, const SnippetUI::PlayerButton *a2)
{
  std::string *v4;
  uint64_t v5;
  const SnippetUI::Button *v6;
  SnippetUI::Button *v7;
  const SnippetUI::Button *v8;
  const SnippetUI::Button *v9;
  SnippetUI::Button *v10;
  const SnippetUI::Button *v11;
  char v12;
  std::string v13[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Button.pb.cc", 1640);
    v4 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::PlayerButton *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  if (a2 != (const SnippetUI::PlayerButton *)&SnippetUI::_PlayerButton_default_instance_)
  {
    v6 = (const SnippetUI::Button *)*((_QWORD *)a2 + 2);
    if (v6)
    {
      v7 = (SnippetUI::Button *)*((_QWORD *)this + 2);
      if (!v7)
      {
        v7 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Button>(0);
        *((_QWORD *)this + 2) = v7;
        v6 = (const SnippetUI::Button *)*((_QWORD *)a2 + 2);
      }
      if (v6)
        v8 = v6;
      else
        v8 = (const SnippetUI::Button *)&SnippetUI::_Button_default_instance_;
      SnippetUI::Button::MergeFrom(v7, v8);
    }
    v9 = (const SnippetUI::Button *)*((_QWORD *)a2 + 3);
    if (v9)
    {
      v10 = (SnippetUI::Button *)*((_QWORD *)this + 3);
      if (!v10)
      {
        v10 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Button>(0);
        *((_QWORD *)this + 3) = v10;
        v9 = (const SnippetUI::Button *)*((_QWORD *)a2 + 3);
      }
      if (v9)
        v11 = v9;
      else
        v11 = (const SnippetUI::Button *)&SnippetUI::_Button_default_instance_;
      SnippetUI::Button::MergeFrom(v10, v11);
    }
  }
}

void sub_1BF97A934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::Button *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Button>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::Button *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::Button *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x48uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Button>);
    SnippetUI::Button::Button(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::Button *)operator new();
    SnippetUI::Button::Button(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BF97A9D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C40013F3344);
  _Unwind_Resume(a1);
}

void SnippetUI::Button::MergeFrom(SnippetUI::Button *this, const SnippetUI::Button *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  int **v10;
  int **v11;
  int **v12;
  int **v13;
  int **v14;
  int **v15;
  int **v16;
  int **v17;
  int **v18;
  int v19;
  int v20;
  int v21;
  char v22;
  std::string v23[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v23, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Button.pb.cc", 705);
    v4 = google::protobuf::internal::LogMessage::operator<<(v23, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v22, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v23[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Button *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_QWORD *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v6);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(_QWORD *)(v8 + 8))
      goto LABEL_21;
  }
  else if (!*(_BYTE *)(v8 + 23))
  {
    goto LABEL_21;
  }
  v9 = (uint64_t *)*((_QWORD *)this + 3);
  if (v9 != (uint64_t *)v8)
  {
    if (v9 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
    else
      std::string::operator=(*((std::string **)this + 3), (const std::string *)v8);
  }
LABEL_21:
  if (a2 != (const SnippetUI::Button *)&SnippetUI::_Button_default_instance_)
  {
    v10 = (int **)*((_QWORD *)a2 + 4);
    if (v10)
    {
      v11 = (int **)*((_QWORD *)this + 4);
      if (!v11)
      {
        v11 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((_QWORD *)this + 4) = v11;
        v10 = (int **)*((_QWORD *)a2 + 4);
      }
      if (v10)
        v12 = v10;
      else
        v12 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      SnippetUI::ActionProperty::MergeFrom(v11, v12);
    }
    v13 = (int **)*((_QWORD *)a2 + 5);
    if (v13)
    {
      v14 = (int **)*((_QWORD *)this + 5);
      if (!v14)
      {
        v14 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 5) = v14;
        v13 = (int **)*((_QWORD *)a2 + 5);
      }
      if (v13)
        v15 = v13;
      else
        v15 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v14, v15);
    }
    v16 = (int **)*((_QWORD *)a2 + 6);
    if (v16)
    {
      v17 = (int **)*((_QWORD *)this + 6);
      if (!v17)
      {
        v17 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((_QWORD *)this + 6) = v17;
        v16 = (int **)*((_QWORD *)a2 + 6);
      }
      if (v16)
        v18 = v16;
      else
        v18 = (int **)&SnippetUI::_VisualProperty_default_instance_;
      SnippetUI::VisualProperty::MergeFrom(v17, v18);
    }
  }
  v19 = *((_DWORD *)a2 + 14);
  if (v19)
    *((_DWORD *)this + 14) = v19;
  v20 = *((_DWORD *)a2 + 15);
  if (v20)
    *((_DWORD *)this + 15) = v20;
  v21 = *((_DWORD *)a2 + 16);
  if (v21)
    *((_DWORD *)this + 16) = v21;
}

void sub_1BF97ABD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Button>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

SnippetUI::PlayerButton *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::PlayerButton>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::PlayerButton *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::PlayerButton *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x28uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::PlayerButton>);
    SnippetUI::PlayerButton::PlayerButton(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::PlayerButton *)operator new();
    SnippetUI::PlayerButton::PlayerButton(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BF97AC80(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C40C9A46F13);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::PlayerButton>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void *SnippetUI::Button::default_instance(SnippetUI::Button *this)
{
  if (atomic_load(scc_info_Button_Button_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Button_Button_2eproto);
  return &SnippetUI::_Button_default_instance_;
}

SnippetUI::BinaryButton *SnippetUI::BinaryButton::BinaryButton(SnippetUI::BinaryButton *this)
{
  *(_QWORD *)this = &off_1E7930080;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 12) = 0;
  if (atomic_load(scc_info_BinaryButton_Button_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_BinaryButton_Button_2eproto);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  return this;
}

void sub_1BF97AEBC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::BinaryButton::~BinaryButton(SnippetUI::BinaryButton *this)
{
  SnippetUI::BinaryButton::~BinaryButton(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E7930080;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 3);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1C3B8D890](v4, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::BinaryButton *)&SnippetUI::_BinaryButton_default_instance_)
  {
    v6 = *((_QWORD *)this + 4);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = *((_QWORD *)this + 5);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::BinaryButton *SnippetUI::BinaryButton::New(SnippetUI::BinaryButton *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::BinaryButton>(0);
}

SnippetUI::BinaryButton *SnippetUI::BinaryButton::New(SnippetUI::BinaryButton *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::BinaryButton>(a2);
}

void SnippetUI::BinaryButton::Clear(SnippetUI::BinaryButton *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  google::protobuf::internal::InternalMetadataWithArena *v6;
  char v7;

  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 3);
  if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
  v4 = *((_QWORD *)this + 4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 4) = 0;
  v5 = *((_QWORD *)this + 5);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v7 = *((_BYTE *)this + 8);
  v6 = (SnippetUI::BinaryButton *)((char *)this + 8);
  *((_QWORD *)v6 + 4) = 0;
  if ((v7 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v6);
}

uint64_t SnippetUI::BinaryButton::IsInitialized(SnippetUI::BinaryButton *this)
{
  return 1;
}

char *SnippetUI::BinaryButton::ByteSizeLong(SnippetUI::BinaryButton *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const google::protobuf::UnknownFieldSet *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  SnippetUI::Button *v9;
  char *v10;
  SnippetUI::Button *v11;
  char *v12;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  v6 = *((_QWORD *)this + 3);
  v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v8 = *(_QWORD *)(v6 + 8);
  if ((v7 & 0x80u) == 0)
    v8 = v7;
  v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_13:
  if (this != (SnippetUI::BinaryButton *)&SnippetUI::_BinaryButton_default_instance_)
  {
    v9 = (SnippetUI::Button *)*((_QWORD *)this + 4);
    if (v9)
    {
      v10 = SnippetUI::Button::ByteSizeLong(v9);
      v5 = (const google::protobuf::UnknownFieldSet *)&v10[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v11 = (SnippetUI::Button *)*((_QWORD *)this + 5);
    if (v11)
    {
      v12 = SnippetUI::Button::ByteSizeLong(v11);
      v5 = (const google::protobuf::UnknownFieldSet *)&v12[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::BinaryButton *)((char *)this + 8), v5, (_DWORD *)this + 12);
  *((_DWORD *)this + 12) = (_DWORD)v5;
  return (char *)v5;
}

uint64_t SnippetUI::BinaryButton::GetCachedSize(SnippetUI::BinaryButton *this)
{
  return *((unsigned int *)this + 12);
}

google::protobuf::internal *SnippetUI::BinaryButton::_InternalParse(SnippetUI::BinaryButton *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  std::string **v6;
  uint64_t *v7;
  google::protobuf::internal::ParseContext *v8;
  google::protobuf::internal *TagFallback;
  char *v10;
  SnippetUI::Button *v11;
  char *v12;
  std::string *v13;
  std::string::value_type *v14;
  google::protobuf::internal::ParseContext *v15;
  char *v16;
  BOOL v17;
  google::protobuf::internal *v19;

  v19 = a2;
  v5 = (std::string **)((char *)this + 24);
  v6 = (std::string **)((char *)this + 16);
  v7 = (uint64_t *)((char *)this + 8);
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v19, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v19;
    TagFallback = (google::protobuf::internal *)((char *)v19 + 1);
    v10 = (char *)*(unsigned __int8 *)v19;
    if ((*(char *)v19 & 0x80000000) == 0)
      goto LABEL_6;
    v10 = (char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v19 + 2);
LABEL_6:
      v19 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v19, v10);
    v19 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    switch(v10 >> 3)
    {
      case 1u:
        if (v10 != 10)
          goto LABEL_25;
        v11 = (SnippetUI::Button *)*((_QWORD *)this + 4);
        if (v11)
          goto LABEL_15;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Button>(0);
        *((_QWORD *)this + 4) = v11;
        goto LABEL_14;
      case 2u:
        if (v10 != 18)
          goto LABEL_25;
        v11 = (SnippetUI::Button *)*((_QWORD *)this + 5);
        if (!v11)
        {
          v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Button>(0);
          *((_QWORD *)this + 5) = v11;
LABEL_14:
          TagFallback = v19;
        }
LABEL_15:
        v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::Button>(a3, v11, TagFallback);
        goto LABEL_30;
      case 3u:
        if (v10 != 26)
          goto LABEL_25;
        v13 = *v6;
        if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v13 = *v6;
          TagFallback = v19;
        }
        v14 = (std::string::value_type *)TagFallback;
        v15 = a3;
        v16 = "SnippetUI.BinaryButton.component_name";
        goto LABEL_24;
      case 4u:
        if (v10 != 34)
          goto LABEL_25;
        v13 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v13 = *v5;
          TagFallback = v19;
        }
        v14 = (std::string::value_type *)TagFallback;
        v15 = a3;
        v16 = "SnippetUI.BinaryButton.link_identifier";
LABEL_24:
        v12 = google::protobuf::internal::InlineGreedyStringParserUTF8(v13, v14, (uint64_t)v15, (google::protobuf::internal *)v16);
        goto LABEL_30;
      default:
LABEL_25:
        if ((_DWORD)v10)
          v17 = (v10 & 7) == 4;
        else
          v17 = 1;
        if (v17)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v10 - 1;
          return TagFallback;
        }
        v12 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v7, TagFallback, a3, v8);
LABEL_30:
        v19 = (google::protobuf::internal *)v12;
        if (v12)
          continue;
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::BinaryButton::InternalSerializeWithCachedSizesToArray(SnippetUI::BinaryButton *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  SnippetUI::Button *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  google::protobuf::UnknownFieldSet *v11;
  _BYTE *v12;
  _BYTE *v13;
  unsigned int v14;
  unsigned int v15;
  SnippetUI::Button *v16;
  unsigned int v17;
  google::protobuf::UnknownFieldSet *v18;
  unsigned int v19;
  _BYTE *v20;
  _BYTE *v21;
  unsigned int v22;
  unsigned int v23;
  google::protobuf::internal *v24;
  const char *v25;
  google::protobuf::internal *v26;
  const char *v27;
  uint64_t v28;

  v5 = (char *)a2;
  if (this == (SnippetUI::BinaryButton *)&SnippetUI::_BinaryButton_default_instance_)
    goto LABEL_25;
  v7 = (SnippetUI::Button *)*((_QWORD *)this + 4);
  if (v7)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v7 = (SnippetUI::Button *)*((_QWORD *)this + 4);
    }
    *v5 = 10;
    v8 = *((_DWORD *)v7 + 17);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v12 = v5 + 2;
        do
        {
          v13 = v12;
          *v12++ = v10 | 0x80;
          v14 = v10 >> 7;
          v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        v11 = (google::protobuf::UnknownFieldSet *)(v13 + 2);
        *v12 = v14;
        goto LABEL_13;
      }
      v5[2] = v10;
      v9 = 3;
    }
    else
    {
      v5[1] = v8;
      v9 = 2;
    }
    v11 = (google::protobuf::UnknownFieldSet *)&v5[v9];
LABEL_13:
    v5 = (char *)SnippetUI::Button::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  v16 = (SnippetUI::Button *)*((_QWORD *)this + 5);
  if (v16)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v16 = (SnippetUI::Button *)*((_QWORD *)this + 5);
    }
    *v5 = 18;
    v17 = *((_DWORD *)v16 + 17);
    if (v17 > 0x7F)
    {
      v5[1] = v17 | 0x80;
      v19 = v17 >> 7;
      if (v17 >> 14)
      {
        v20 = v5 + 2;
        do
        {
          v21 = v20;
          *v20++ = v19 | 0x80;
          v22 = v19 >> 7;
          v23 = v19 >> 14;
          v19 >>= 7;
        }
        while (v23);
        v18 = (google::protobuf::UnknownFieldSet *)(v21 + 2);
        *v20 = v22;
      }
      else
      {
        v5[2] = v19;
        v18 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v17;
      v18 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::Button::InternalSerializeWithCachedSizesToArray(v16, v18, a3, a4);
  }
LABEL_25:
  v24 = (google::protobuf::internal *)*((_QWORD *)this + 2);
  if (*((char *)v24 + 23) < 0)
  {
    v25 = (const char *)*((_QWORD *)v24 + 1);
    if (!v25)
      goto LABEL_31;
    v24 = *(google::protobuf::internal **)v24;
    goto LABEL_30;
  }
  v25 = (const char *)*((unsigned __int8 *)v24 + 23);
  if (*((_BYTE *)v24 + 23))
  {
LABEL_30:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v24, v25, 1, (google::protobuf::internal *)"SnippetUI.BinaryButton.component_name");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, *((_QWORD *)this + 2), v5);
  }
LABEL_31:
  v26 = (google::protobuf::internal *)*((_QWORD *)this + 3);
  if (*((char *)v26 + 23) < 0)
  {
    v27 = (const char *)*((_QWORD *)v26 + 1);
    if (!v27)
      goto LABEL_37;
    v26 = *(google::protobuf::internal **)v26;
    goto LABEL_36;
  }
  v27 = (const char *)*((unsigned __int8 *)v26 + 23);
  if (*((_BYTE *)v26 + 23))
  {
LABEL_36:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v26, v27, 1, (google::protobuf::internal *)"SnippetUI.BinaryButton.link_identifier");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 4, *((_QWORD *)this + 3), v5);
  }
LABEL_37:
  v28 = *((_QWORD *)this + 1);
  if ((v28 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v28 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)v5;
}

void SnippetUI::BinaryButton::CopyFrom(SnippetUI::BinaryButton *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::BinaryButton::Clear(this);
    SnippetUI::BinaryButton::MergeFrom(this, a2);
  }
}

void SnippetUI::BinaryButton::MergeFrom(SnippetUI::BinaryButton *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::BinaryButton *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Button.pb.cc", 1364);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::BinaryButton::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BF97B674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::BinaryButton::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 48) = a2;
  return this;
}

uint64_t SnippetUI::BinaryButton::GetMetadata(SnippetUI::BinaryButton *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_Button_2eproto);
  return qword_1EF581CF8;
}

void *SnippetUI::BinaryButton::default_instance(SnippetUI::BinaryButton *this)
{
  if (atomic_load(scc_info_BinaryButton_Button_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_BinaryButton_Button_2eproto);
  return &SnippetUI::_BinaryButton_default_instance_;
}

void SnippetUI::BinaryButton::MergeFrom(SnippetUI::BinaryButton *this, const SnippetUI::BinaryButton *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  const SnippetUI::Button *v10;
  SnippetUI::Button *v11;
  const SnippetUI::Button *v12;
  const SnippetUI::Button *v13;
  SnippetUI::Button *v14;
  const SnippetUI::Button *v15;
  char v16;
  std::string v17[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v17, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Button.pb.cc", 1379);
    v4 = google::protobuf::internal::LogMessage::operator<<(v17, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v16, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v17[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::BinaryButton *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_QWORD *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v6);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(_QWORD *)(v8 + 8))
      goto LABEL_21;
  }
  else if (!*(_BYTE *)(v8 + 23))
  {
    goto LABEL_21;
  }
  v9 = (uint64_t *)*((_QWORD *)this + 3);
  if (v9 != (uint64_t *)v8)
  {
    if (v9 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
    else
      std::string::operator=(*((std::string **)this + 3), (const std::string *)v8);
  }
LABEL_21:
  if (a2 != (const SnippetUI::BinaryButton *)&SnippetUI::_BinaryButton_default_instance_)
  {
    v10 = (const SnippetUI::Button *)*((_QWORD *)a2 + 4);
    if (v10)
    {
      v11 = (SnippetUI::Button *)*((_QWORD *)this + 4);
      if (!v11)
      {
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Button>(0);
        *((_QWORD *)this + 4) = v11;
        v10 = (const SnippetUI::Button *)*((_QWORD *)a2 + 4);
      }
      if (v10)
        v12 = v10;
      else
        v12 = (const SnippetUI::Button *)&SnippetUI::_Button_default_instance_;
      SnippetUI::Button::MergeFrom(v11, v12);
    }
    v13 = (const SnippetUI::Button *)*((_QWORD *)a2 + 5);
    if (v13)
    {
      v14 = (SnippetUI::Button *)*((_QWORD *)this + 5);
      if (!v14)
      {
        v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Button>(0);
        *((_QWORD *)this + 5) = v14;
        v13 = (const SnippetUI::Button *)*((_QWORD *)a2 + 5);
      }
      if (v13)
        v15 = v13;
      else
        v15 = (const SnippetUI::Button *)&SnippetUI::_Button_default_instance_;
      SnippetUI::Button::MergeFrom(v14, v15);
    }
  }
}

void sub_1BF97B884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::BinaryButton *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::BinaryButton>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::BinaryButton *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::BinaryButton *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x38uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::BinaryButton>);
    SnippetUI::BinaryButton::BinaryButton(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::BinaryButton *)operator new();
    SnippetUI::BinaryButton::BinaryButton(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BF97B920(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C40668C0A6DLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::BinaryButton>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t SnippetUI::Button_FormAction_descriptor(SnippetUI *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_Button_2eproto);
  return file_level_enum_descriptors_Button_2eproto;
}

BOOL SnippetUI::Button_FormAction_IsValid(SnippetUI *this)
{
  return this < 3;
}

uint64_t SnippetUI::Button_LabelStyle_descriptor(SnippetUI *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_Button_2eproto);
  return qword_1EF581D30;
}

BOOL SnippetUI::Button_LabelStyle_IsValid(SnippetUI *this)
{
  return this < 4;
}

uint64_t SnippetUI::Button_ButtonRole_descriptor(SnippetUI *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_Button_2eproto);
  return qword_1EF581D38;
}

BOOL SnippetUI::Button_ButtonRole_IsValid(SnippetUI *this)
{
  return this < 3;
}

void SnippetUI::Button::InitAsDefaultInstance(SnippetUI::Button *this)
{
  qword_1ED1D4DE8 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
  unk_1ED1D4DF0 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D4DF8 = (uint64_t)&SnippetUI::_VisualProperty_default_instance_;
}

uint64_t SnippetUI::Button::_Internal::action(SnippetUI::Button::_Internal *this, const SnippetUI::Button *a2)
{
  return *((_QWORD *)this + 4);
}

uint64_t SnippetUI::Button::_Internal::label(SnippetUI::Button::_Internal *this, const SnippetUI::Button *a2)
{
  return *((_QWORD *)this + 5);
}

uint64_t SnippetUI::Button::_Internal::thumbnail(SnippetUI::Button::_Internal *this, const SnippetUI::Button *a2)
{
  return *((_QWORD *)this + 6);
}

uint64_t SnippetUI::Button::clear_action(SnippetUI::Button *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 4) = 0;
  return result;
}

uint64_t SnippetUI::Button::clear_label(SnippetUI::Button *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 5);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 5) = 0;
  return result;
}

uint64_t SnippetUI::Button::clear_thumbnail(SnippetUI::Button *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 6);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 6) = 0;
  return result;
}

SnippetUI::Button *SnippetUI::Button::Button(SnippetUI::Button *this, const SnippetUI::Button *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  SnippetUI::ActionProperty *v10;
  SnippetUI::VisualProperty *v11;
  SnippetUI::TextProperty *v12;
  uint64_t v13;

  *(_QWORD *)this = &off_1E792FF00;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 17) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Button *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
    v9 = *(_QWORD *)(v8 + 8);
  else
    v9 = *(unsigned __int8 *)(v8 + 23);
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v9)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
  if (a2 == (const SnippetUI::Button *)&SnippetUI::_Button_default_instance_)
  {
    v11 = 0;
    *((_QWORD *)this + 4) = 0;
    *((_QWORD *)this + 5) = 0;
  }
  else
  {
    if (*((_QWORD *)a2 + 4))
    {
      v10 = (SnippetUI::ActionProperty *)operator new();
      SnippetUI::ActionProperty::ActionProperty(v10, *((const SnippetUI::ActionProperty **)a2 + 4));
    }
    else
    {
      v10 = 0;
    }
    *((_QWORD *)this + 4) = v10;
    if (*((_QWORD *)a2 + 5))
    {
      v12 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v12, *((const SnippetUI::TextProperty **)a2 + 5));
    }
    else
    {
      v12 = 0;
    }
    *((_QWORD *)this + 5) = v12;
    if (*((_QWORD *)a2 + 6))
    {
      v11 = (SnippetUI::VisualProperty *)operator new();
      SnippetUI::VisualProperty::VisualProperty(v11, *((const SnippetUI::VisualProperty **)a2 + 6));
    }
    else
    {
      v11 = 0;
    }
  }
  *((_QWORD *)this + 6) = v11;
  v13 = *((_QWORD *)a2 + 7);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_QWORD *)this + 7) = v13;
  return this;
}

void sub_1BF97BD44(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x1C3B8D890](v2, 0x10A1C40BEC01B52);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Button::CopyFrom(SnippetUI::Button *this, const SnippetUI::Button *a2)
{
  if (a2 != this)
  {
    SnippetUI::Button::Clear(this);
    SnippetUI::Button::MergeFrom(this, a2);
  }
}

void SnippetUI::Button::InternalSwap(SnippetUI::Button *this, SnippetUI::Button *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  google::protobuf::UnknownFieldSet *v22;

  v4 = (SnippetUI::Button *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v22;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 2);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = (uint64_t *)*((_QWORD *)this + 3);
  v14 = (uint64_t **)((char *)a2 + 24);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_19;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v13 = (uint64_t *)*((_QWORD *)this + 3);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v13[2];
  v17 = *(_OWORD *)v13;
  v18 = v15[2];
  *(_OWORD *)v13 = *(_OWORD *)v15;
  v13[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_19:
  v19 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v19;
  v20 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v20;
  v21 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v21;
  LODWORD(v21) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v21;
  LODWORD(v21) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v21;
  LODWORD(v21) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v21;
}

void SnippetUI::StandardPlayerButton::InitAsDefaultInstance(SnippetUI::StandardPlayerButton *this)
{
  qword_1EF584A28 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
  unk_1EF584A30 = &SnippetUI::_ActionProperty_default_instance_;
}

uint64_t SnippetUI::StandardPlayerButton::_Internal::play_action(SnippetUI::StandardPlayerButton::_Internal *this, const SnippetUI::StandardPlayerButton *a2)
{
  return *((_QWORD *)this + 4);
}

uint64_t SnippetUI::StandardPlayerButton::_Internal::pause_action(SnippetUI::StandardPlayerButton::_Internal *this, const SnippetUI::StandardPlayerButton *a2)
{
  return *((_QWORD *)this + 5);
}

uint64_t SnippetUI::StandardPlayerButton::clear_play_action(SnippetUI::StandardPlayerButton *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 4) = 0;
  return result;
}

uint64_t SnippetUI::StandardPlayerButton::clear_pause_action(SnippetUI::StandardPlayerButton *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 5);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 5) = 0;
  return result;
}

SnippetUI::StandardPlayerButton *SnippetUI::StandardPlayerButton::StandardPlayerButton(SnippetUI::StandardPlayerButton *this, const SnippetUI::StandardPlayerButton *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  SnippetUI::ActionProperty *v10;
  SnippetUI::ActionProperty *v11;

  *(_QWORD *)this = &off_1E792FFC0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 12) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::StandardPlayerButton *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
    v9 = *(_QWORD *)(v8 + 8);
  else
    v9 = *(unsigned __int8 *)(v8 + 23);
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v9)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
  if (a2 == (const SnippetUI::StandardPlayerButton *)&SnippetUI::_StandardPlayerButton_default_instance_)
  {
    v11 = 0;
    *((_QWORD *)this + 4) = 0;
  }
  else
  {
    if (*((_QWORD *)a2 + 4))
    {
      v10 = (SnippetUI::ActionProperty *)operator new();
      SnippetUI::ActionProperty::ActionProperty(v10, *((const SnippetUI::ActionProperty **)a2 + 4));
    }
    else
    {
      v10 = 0;
    }
    *((_QWORD *)this + 4) = v10;
    if (*((_QWORD *)a2 + 5))
    {
      v11 = (SnippetUI::ActionProperty *)operator new();
      SnippetUI::ActionProperty::ActionProperty(v11, *((const SnippetUI::ActionProperty **)a2 + 5));
    }
    else
    {
      v11 = 0;
    }
  }
  *((_QWORD *)this + 5) = v11;
  return this;
}

void sub_1BF97C17C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x1C3B8D890](v2, 0x10A1C40B18DE219);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::StandardPlayerButton::CopyFrom(SnippetUI::StandardPlayerButton *this, const SnippetUI::StandardPlayerButton *a2)
{
  if (a2 != this)
  {
    SnippetUI::StandardPlayerButton::Clear(this);
    SnippetUI::StandardPlayerButton::MergeFrom(this, a2);
  }
}

void SnippetUI::StandardPlayerButton::InternalSwap(SnippetUI::StandardPlayerButton *this, SnippetUI::StandardPlayerButton *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  google::protobuf::UnknownFieldSet *v21;

  v4 = (SnippetUI::StandardPlayerButton *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v21;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 2);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = (uint64_t *)*((_QWORD *)this + 3);
  v14 = (uint64_t **)((char *)a2 + 24);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_19;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v13 = (uint64_t *)*((_QWORD *)this + 3);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v13[2];
  v17 = *(_OWORD *)v13;
  v18 = v15[2];
  *(_OWORD *)v13 = *(_OWORD *)v15;
  v13[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_19:
  v19 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v19;
  v20 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v20;
}

void SnippetUI::BinaryButton::InitAsDefaultInstance(SnippetUI::BinaryButton *this)
{
  qword_1ED1D3D60 = (uint64_t)&SnippetUI::_Button_default_instance_;
  unk_1ED1D3D68 = &SnippetUI::_Button_default_instance_;
}

uint64_t SnippetUI::BinaryButton::_Internal::primary_button(SnippetUI::BinaryButton::_Internal *this, const SnippetUI::BinaryButton *a2)
{
  return *((_QWORD *)this + 4);
}

uint64_t SnippetUI::BinaryButton::_Internal::secondary_button(SnippetUI::BinaryButton::_Internal *this, const SnippetUI::BinaryButton *a2)
{
  return *((_QWORD *)this + 5);
}

SnippetUI::BinaryButton *SnippetUI::BinaryButton::BinaryButton(SnippetUI::BinaryButton *this, const SnippetUI::BinaryButton *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  SnippetUI::Button *v10;
  SnippetUI::Button *v11;

  *(_QWORD *)this = &off_1E7930080;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 12) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::BinaryButton *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
    v9 = *(_QWORD *)(v8 + 8);
  else
    v9 = *(unsigned __int8 *)(v8 + 23);
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v9)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
  if (a2 == (const SnippetUI::BinaryButton *)&SnippetUI::_BinaryButton_default_instance_)
  {
    v11 = 0;
    *((_QWORD *)this + 4) = 0;
  }
  else
  {
    if (*((_QWORD *)a2 + 4))
    {
      v10 = (SnippetUI::Button *)operator new();
      SnippetUI::Button::Button(v10, *((const SnippetUI::Button **)a2 + 4));
    }
    else
    {
      v10 = 0;
    }
    *((_QWORD *)this + 4) = v10;
    if (*((_QWORD *)a2 + 5))
    {
      v11 = (SnippetUI::Button *)operator new();
      SnippetUI::Button::Button(v11, *((const SnippetUI::Button **)a2 + 5));
    }
    else
    {
      v11 = 0;
    }
  }
  *((_QWORD *)this + 5) = v11;
  return this;
}

void sub_1BF97C4F8(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x1C3B8D890](v2, 0x10A1C40013F3344);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::BinaryButton::CopyFrom(SnippetUI::BinaryButton *this, const SnippetUI::BinaryButton *a2)
{
  if (a2 != this)
  {
    SnippetUI::BinaryButton::Clear(this);
    SnippetUI::BinaryButton::MergeFrom(this, a2);
  }
}

void SnippetUI::BinaryButton::InternalSwap(SnippetUI::BinaryButton *this, SnippetUI::BinaryButton *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  google::protobuf::UnknownFieldSet *v21;

  v4 = (SnippetUI::BinaryButton *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v21;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 2);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = (uint64_t *)*((_QWORD *)this + 3);
  v14 = (uint64_t **)((char *)a2 + 24);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_19;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v13 = (uint64_t *)*((_QWORD *)this + 3);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v13[2];
  v17 = *(_OWORD *)v13;
  v18 = v15[2];
  *(_OWORD *)v13 = *(_OWORD *)v15;
  v13[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_19:
  v19 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v19;
  v20 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v20;
}

void SnippetUI::PlayerButton::InitAsDefaultInstance(SnippetUI::PlayerButton *this)
{
  qword_1ED1D3D88 = (uint64_t)&SnippetUI::_Button_default_instance_;
  unk_1ED1D3D90 = &SnippetUI::_Button_default_instance_;
}

uint64_t SnippetUI::PlayerButton::_Internal::play_button(SnippetUI::PlayerButton::_Internal *this, const SnippetUI::PlayerButton *a2)
{
  return *((_QWORD *)this + 2);
}

uint64_t SnippetUI::PlayerButton::_Internal::pause_button(SnippetUI::PlayerButton::_Internal *this, const SnippetUI::PlayerButton *a2)
{
  return *((_QWORD *)this + 3);
}

SnippetUI::PlayerButton *SnippetUI::PlayerButton::PlayerButton(SnippetUI::PlayerButton *this, const SnippetUI::PlayerButton *a2)
{
  uint64_t v4;
  SnippetUI::Button *v5;
  SnippetUI::Button *v6;

  *(_QWORD *)this = &off_1E7930140;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 8) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::PlayerButton *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  if (a2 == (const SnippetUI::PlayerButton *)&SnippetUI::_PlayerButton_default_instance_)
  {
    v6 = 0;
    *((_QWORD *)this + 2) = 0;
  }
  else
  {
    if (*((_QWORD *)a2 + 2))
    {
      v5 = (SnippetUI::Button *)operator new();
      SnippetUI::Button::Button(v5, *((const SnippetUI::Button **)a2 + 2));
    }
    else
    {
      v5 = 0;
    }
    *((_QWORD *)this + 2) = v5;
    if (*((_QWORD *)a2 + 3))
    {
      v6 = (SnippetUI::Button *)operator new();
      SnippetUI::Button::Button(v6, *((const SnippetUI::Button **)a2 + 3));
    }
    else
    {
      v6 = 0;
    }
  }
  *((_QWORD *)this + 3) = v6;
  return this;
}

void sub_1BF97C80C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x1C3B8D890](v2, 0x10A1C40013F3344);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::PlayerButton::CopyFrom(SnippetUI::PlayerButton *this, const SnippetUI::PlayerButton *a2)
{
  if (a2 != this)
  {
    SnippetUI::PlayerButton::Clear(this);
    SnippetUI::PlayerButton::MergeFrom(this, a2);
  }
}

void SnippetUI::PlayerButton::InternalSwap(SnippetUI::PlayerButton *this, SnippetUI::PlayerButton *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t v7;
  uint64_t v8;
  google::protobuf::UnknownFieldSet *v9;

  v4 = (SnippetUI::PlayerButton *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v9;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v7;
  v8 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v8;
}

SnippetUI::WatchListButton *SnippetUI::WatchListButton::WatchListButton(SnippetUI::WatchListButton *this, const SnippetUI::WatchListButton *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E7930200;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::WatchListButton *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  return this;
}

void sub_1BF97C998(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::WatchListButton::CopyFrom(SnippetUI::WatchListButton *this, const SnippetUI::WatchListButton *a2)
{
  if (a2 != this)
  {
    SnippetUI::WatchListButton::Clear(this);
    SnippetUI::WatchListButton::MergeFrom(this, a2);
  }
}

__n128 SnippetUI::WatchListButton::InternalSwap(SnippetUI::WatchListButton *this, SnippetUI::WatchListButton *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  __n128 result;
  std::string **v8;
  std::string *v9;
  uint64_t *v10;
  std::string **v11;
  std::string *v12;
  std::string::size_type v13;
  std::string::size_type v14;
  google::protobuf::UnknownFieldSet *v15;

  v4 = (SnippetUI::WatchListButton *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v15;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  v10 = (uint64_t *)*((_QWORD *)this + 2);
  v8 = (std::string **)((char *)this + 16);
  v9 = (std::string *)v10;
  v11 = (std::string **)((char *)a2 + 16);
  if (v10 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      return result;
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v8, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v12 = *v11;
  if (*v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v11, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v12 = *v11;
  }
  v13 = v9->__r_.__value_.__r.__words[2];
  result = *(__n128 *)&v9->__r_.__value_.__l.__data_;
  v14 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v9->__r_.__value_.__r.__words[2] = v14;
  *(__n128 *)&v12->__r_.__value_.__l.__data_ = result;
  v12->__r_.__value_.__r.__words[2] = v13;
  return result;
}

void siri::dialogengine::ValidateRequestData(siri::dialogengine *this, const siri::dialogengine::Context *a2)
{
  const char *v3;
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  BOOL v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  int v20;
  char v21;
  std::string __p;
  char v23;
  void *v24[2];
  char v25;
  char v26[8];
  uint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  const void *v31;
  std::__shared_weak_count *v32;

  std::string::basic_string[abi:ne180100]<0>(&__p, "device");
  siri::dialogengine::Context::FindVariable((uint64_t)this, (uint64_t)&__p, &v31);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!v31
  {
    v8 = v32;
    if (!v32)
    {
LABEL_42:
      siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Global parameter 'device.voiceGender' is missing, or is not a string, or is an empty string", v3);
      return;
    }
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
LABEL_15:
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    goto LABEL_42;
  }
  v5 = (uint64_t)v4;
  std::string::basic_string[abi:ne180100]<0>(v24, "voiceGender");
  __p.__r_.__value_.__s.__data_[0] = 0;
  v23 = 0;
  LOBYTE(v20) = 0;
  v21 = 0;
  siri::dialogengine::FindVariableString(v5, (const void **)v24, (uint64_t)&__p, &v20, (uint64_t)v26);
  v7 = v27;
  v6 = v28;
  v29 = v27;
  v30 = v28;
  v27 = 0;
  v28 = 0;
  if (v23 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v25 & 0x80000000) == 0)
  {
    if (v7)
      goto LABEL_10;
    goto LABEL_18;
  }
  operator delete(v24[0]);
  if (!v7)
  {
LABEL_18:
    if (v6)
    {
      v11 = (unint64_t *)&v6->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v8 = v32;
    if (!v32)
      goto LABEL_42;
    v13 = (unint64_t *)&v32->__shared_owners_;
    do
      v10 = __ldaxr(v13);
    while (__stlxr(v10 - 1, v13));
    goto LABEL_15;
  }
LABEL_10:
  if (*(char *)(v7 + 95) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v7 + 72), *(_QWORD *)(v7 + 80));
  else
    __p = *(std::string *)(v7 + 72);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    v14 = __p.__r_.__value_.__l.__size_ == 0;
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v6)
      goto LABEL_36;
  }
  else
  {
    v14 = SHIBYTE(__p.__r_.__value_.__r.__words[2]) == 0;
    if (!v6)
      goto LABEL_36;
  }
  v15 = (unint64_t *)&v6->__shared_owners_;
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 - 1, v15));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_36:
  v17 = v32;
  if (v32)
  {
    v18 = (unint64_t *)&v32->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (v14)
    goto LABEL_42;
}

void sub_1BF97CD20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v23 - 48);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v23 - 32);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ParseRequestFromJson(const char *a1@<X0>, const std::string *a2@<X1>, const std::string *a3@<X2>, const std::string *a4@<X3>, siri::dialogengine::Context **a5@<X8>)
{
  unsigned __int8 v10;
  const char *v11;
  os_signpost_id_t v12;
  unint64_t v13;
  NSObject *v14;
  uint64_t v15;
  const char *v16;
  char *v17;
  _BOOL4 v18;
  const char *v19;
  _BOOL4 v20;
  siri::dialogengine::Context *v21;
  NSObject *v22;
  int v23;
  siri::dialogengine::Context *v24;
  NSObject *v25;
  BOOL v26;
  BOOL v27;
  uint64_t v28;
  _BOOL4 v29;
  const char *v30;
  int v31;
  _BOOL4 v32;
  const char *v33;
  _BOOL4 v34;
  const char *v35;
  uint64_t *v36;
  std::string::size_type size;
  unsigned int *v38;
  uint64_t v39;
  uint64_t v40;
  char *String;
  uint64_t v42;
  char *v43;
  const char *v44;
  _BYTE *v45;
  uint64_t *v46;
  siri::dialogengine::Context *v47;
  NSObject *v48;
  siri::dialogengine::Context *v49;
  siri::dialogengine::Context *v50;
  unsigned int *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  siri::dialogengine::Context *v56;
  uint64_t GlobalParameter;
  const char *v58;
  _BYTE *v59;
  uint64_t v60;
  int *v61;
  char *v62;
  const char *v63;
  _BOOL4 v64;
  const char *v65;
  _BOOL4 v66;
  const char *v67;
  _BOOL4 v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  _BOOL4 v72;
  _BOOL4 v73;
  _BOOL8 v74;
  const char *v75;
  BOOL v76;
  std::string *v77;
  __int128 v78;
  BOOL IsDeterministic;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  _BOOL4 v83;
  _BOOL4 v84;
  _BOOL8 v85;
  const char *v86;
  BOOL ShouldValidateAttrs;
  const char *v88;
  _BOOL4 v89;
  siri::dialogengine::Context *v90;
  siri::dialogengine::Context *v91;
  siri::dialogengine::Context *v92;
  siri::dialogengine::Context *v93;
  siri::dialogengine::Context *v94;
  siri::dialogengine::Context *v95;
  siri::dialogengine::Context *v96;
  uint64_t v97;
  siri::dialogengine::Context *v98;
  void **v99;
  unsigned int v100;
  const char *v101;
  char *v102;
  siri::dialogengine::Context *v103;
  const char *v104;
  uint64_t v105;
  const char *v106;
  std::string::size_type v107;
  const char *v108;
  uint64_t v109;
  const siri::dialogengine::Context *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t i;
  char *v114;
  uint64_t v115;
  char *v116;
  const char *v117;
  siri::dialogengine *has_internal_diagnostics;
  const char *v119;
  os_signpost_id_t v120;
  NSObject *v121;
  NSObject *v122;
  void *v123;
  unint64_t *v124;
  unint64_t *v125;
  unint64_t v126;
  void *v127;
  unint64_t *v128;
  unint64_t *v129;
  unint64_t v130;
  const siri::dialogengine::Context *v131;
  std::string v132;
  char *v133;
  std::string v134;
  std::string *v135;
  std::string *v136;
  uint64_t v137;
  __int128 v138;
  _BYTE buf[2512];
  void *__p[2];
  __int128 v141;
  uint64_t v142;
  uint64_t v143;
  std::string v144;
  std::string __str;
  std::string v146;
  std::string v147[2];
  std::string v148;
  std::string v149;
  int v150;
  unsigned int v151;
  uint64_t v152;
  std::string v153;
  std::string v154;
  std::vector<std::string> v155[2];
  int v156;
  char v157;
  char v158;
  uint64_t *v159;
  std::string __s;
  std::string v161;
  std::string v162[2];
  std::vector<std::pair<std::string, std::string>> v163;
  std::string v164;
  std::string v165;
  std::vector<std::string> v166;
  std::string v167;
  std::string v168;
  __int128 v169;
  uint64_t v170;
  unsigned int v171[22];
  unsigned int v172;
  uint64_t v173;

  v173 = *MEMORY[0x1E0C80C00];
  if ((v10 & 1) == 0
  {
    siri::dialogengine::ParseRequestFromJson(std::string const&,std::string const&,std::string const&,std::string const&)::sSignpostLog = (uint64_t)os_log_create("com.apple.siri.DialogEngine", "Request");
  }
  v12 = os_signpost_id_generate((os_log_t)siri::dialogengine::ParseRequestFromJson(std::string const&,std::string const&,std::string const&,std::string const&)::sSignpostLog);
  v13 = v12 - 1;
  if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v14 = siri::dialogengine::ParseRequestFromJson(std::string const&,std::string const&,std::string const&,std::string const&)::sSignpostLog;
    if (os_signpost_enabled((os_log_t)siri::dialogengine::ParseRequestFromJson(std::string const&,std::string const&,std::string const&,std::string const&)::sSignpostLog))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1BF794000, v14, OS_SIGNPOST_INTERVAL_BEGIN, v12, "ParseRequestFromJson", "", buf, 2u);
    }
  }
  siri::dialogengine::Log::Info((siri::dialogengine::Log *)"BEGIN: ParseRequestFromJson", v11);
  _ZNSt3__115allocate_sharedB8ne180100IN4siri12dialogengine7ContextENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(a5);
  v169 = 0uLL;
  v170 = 0;
  memset(&v168, 0, sizeof(v168));
  memset(&v167, 0, sizeof(v167));
  memset(&v166, 0, sizeof(v166));
  v15 = rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::GenericDocument((uint64_t)v171);
  if (a1[23] >= 0)
    v16 = a1;
  else
    v16 = *(const char **)a1;
  *(_QWORD *)buf = v16;
  *(_QWORD *)&buf[8] = v16;
  rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::ParseStream<128u,rapidjson::UTF8<char>,rapidjson::GenericStringStream<rapidjson::UTF8<char>>>(v15, (uint64_t)buf);
  if (!v172)
  {
    siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)&__str);
    std::string::operator=(v147, a2);
    std::string::operator=(&v153, a3);
    std::string::operator=(v162, a4);
    std::string::basic_string[abi:ne180100]<0>(buf, "createTrace");
    v18 = siri::dialogengine::ParseJSONBool(v171, buf, 0);
    v20 = v18;
    if ((buf[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)buf);
      if (!v20)
      {
LABEL_26:
        if (!rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember(v171, "requestType")|| (*(_WORD *)(rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>(v171, "requestType")+ 22) & 0x400) == 0)
        {
          v23 = 0;
          goto LABEL_29;
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "requestType");
        siri::dialogengine::ParseJSONString(v171, (const char *)__p, buf);
        if (SBYTE7(v141) < 0)
          operator delete(__p[0]);
        std::string::basic_string[abi:ne180100]<0>(__p, "visual");
        v26 = siri::dialogengine::StringsEqual((uint64_t)buf, (uint64_t)__p);
        v27 = v26;
        if (SBYTE7(v141) < 0)
        {
          operator delete(__p[0]);
          if (v27)
            goto LABEL_42;
        }
        else if (v26)
        {
LABEL_42:
          v23 = 1;
LABEL_194:
          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
LABEL_29:
          LODWORD(__str.__r_.__value_.__l.__data_) = v23;
          if (rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember(v171, "templateDir"))
          {
            if ((*(_WORD *)(rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>(v171, "templateDir")+ 22) & 0x400) == 0)
            {
              v24 = *a5;
              std::string::basic_string[abi:ne180100]<0>(buf, "request-error");
              std::string::basic_string[abi:ne180100]<0>(__p, "templateDir is not a string");
              std::string::operator=((std::string *)((char *)v24 + 688), (const std::string *)buf);
              siri::dialogengine::Context::SetError((uint64_t)v24, (uint64_t)__p);
              if (SBYTE7(v141) < 0)
                operator delete(__p[0]);
              if ((buf[23] & 0x80000000) != 0)
                operator delete(*(void **)buf);
              if (v13 <= 0xFFFFFFFFFFFFFFFDLL)
              {
                v25 = siri::dialogengine::ParseRequestFromJson(std::string const&,std::string const&,std::string const&,std::string const&)::sSignpostLog;
                if (os_signpost_enabled((os_log_t)siri::dialogengine::ParseRequestFromJson(std::string const&,std::string const&,std::string const&,std::string const&)::sSignpostLog))
                {
                  *(_WORD *)buf = 0;
                  _os_signpost_emit_with_name_impl(&dword_1BF794000, v25, OS_SIGNPOST_INTERVAL_END, v12, "ParseRequestFromJson", "", buf, 2u);
                }
              }
LABEL_310:
              siri::dialogengine::RequestInfo::~RequestInfo((void **)&__str.__r_.__value_.__l.__data_);
              goto LABEL_311;
            }
            std::string::basic_string[abi:ne180100]<0>(__p, "templateDir");
            siri::dialogengine::ParseJSONString(v171, (const char *)__p, buf);
            if (SHIBYTE(v170) < 0)
              operator delete((void *)v169);
            v169 = *(_OWORD *)buf;
            v170 = *(_QWORD *)&buf[16];
            buf[23] = 0;
            buf[0] = 0;
            if (SBYTE7(v141) < 0)
              operator delete(__p[0]);
          }
          v28 = HIBYTE(v170);
          if (v170 < 0)
            v28 = *((_QWORD *)&v169 + 1);
          if (v28)
          {
            if (!siri::dialogengine::DirExists((uint64_t *)&v169))
            {
              std::operator+<char>();
              siri::dialogengine::Log::LogWithLevel((uint64_t)buf, 1u);
              if ((buf[23] & 0x80000000) != 0)
                operator delete(*(void **)buf);
            }
          }
          siri::dialogengine::ValidateTemplateDir((uint64_t)&v169, &v144);
          std::string::basic_string[abi:ne180100]<0>(buf, "enableUpdates");
          v29 = siri::dialogengine::ParseJSONBool(v171, buf, 0);
          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
          v31 = v29 & ~siri::dialogengine::DisableUpdates((uint64_t)&v169);
          if ((v31 & 1) != 0)
          {
            siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Enable updates", v30);
            v156 |= 8u;
          }
          siri::dialogengine::GetTemplateDirs((uint64_t)&v144, v31, (uint64_t)buf);
          std::vector<siri::dialogengine::UpdatableDir>::__assign_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>((uint64_t)&__str.__r_.__value_.__l.__size_, *(std::string **)buf, *(std::string **)&buf[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 5));
          __p[0] = buf;
          std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          std::string::basic_string[abi:ne180100]<0>(buf, "isSpotlight");
          v32 = siri::dialogengine::ParseJSONBool(v171, buf, 0);
          v34 = v32;
          if ((buf[23] & 0x80000000) != 0)
          {
            operator delete(*(void **)buf);
            if (!v34)
            {
LABEL_62:
              if (rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember(v171, "catId")&& (*(_WORD *)(rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>(v171, "catId")+ 22) & 0x400) != 0)
              {
                std::string::basic_string[abi:ne180100]<0>(__p, "catId");
                siri::dialogengine::ParseJSONString(v171, (const char *)__p, buf);
                if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v168.__r_.__value_.__l.__data_);
                v168 = *(std::string *)buf;
                buf[23] = 0;
                buf[0] = 0;
                if (SBYTE7(v141) < 0)
                  operator delete(__p[0]);
              }
              std::string::operator=(&v146, &v168);
              if (rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember(v171, "locale")&& (*(_WORD *)(rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>(v171, "locale")+ 22) & 0x400) != 0)
              {
                std::string::basic_string[abi:ne180100]<0>(&v132, "locale");
                siri::dialogengine::ParseJSONString(v171, (const char *)&v132, __p);
                siri::dialogengine::GetCanonicalLocale((const std::string *)__p, 0, (std::string *)buf);
                if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v167.__r_.__value_.__l.__data_);
                v167 = *(std::string *)buf;
                buf[23] = 0;
                buf[0] = 0;
                if (SBYTE7(v141) < 0)
                  operator delete(__p[0]);
                if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v132.__r_.__value_.__l.__data_);
                siri::dialogengine::GetFallbackLocales((uint64_t)&v167, (uint64_t *)buf);
                std::vector<std::string>::__vdeallocate(&v166);
                v166 = *(std::vector<std::string> *)buf;
                memset(buf, 0, 24);
                __p[0] = buf;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
              }
              std::string::operator=(&v154, &v167);
              std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v155, v166.__begin_, (__int128 *)v166.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v166.__end_ - (char *)v166.__begin_) >> 3));
              if (v166.__begin_ != v166.__end_)
              {
                if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0)
                {
                  if (!a3->__r_.__value_.__l.__size_)
                    goto LABEL_84;
                  v36 = (uint64_t *)a3->__r_.__value_.__r.__words[0];
                }
                else
                {
                  v36 = (uint64_t *)a3;
                  if (!*((_BYTE *)&a3->__r_.__value_.__s + 23))
                    goto LABEL_84;
                }
                siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Ignoring CAT 'locales' parameter from json - using specified CAT locale string '%s'", v35, v36);
              }
LABEL_84:
              if (v23 || v166.__begin_ != v166.__end_)
                goto LABEL_386;
              size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
              if ((size & 0x80u) != 0)
                size = a3->__r_.__value_.__l.__size_;
              if (size)
              {
LABEL_386:
                if (rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember(v171, "dialogMetadata"))
                {
                  v38 = (unsigned int *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>(v171, "dialogMetadata");
                  if (*((_WORD *)v38 + 11) != 3)
                  {
                    v49 = *a5;
                    std::string::basic_string[abi:ne180100]<0>(buf, "request-error");
                    std::string::basic_string[abi:ne180100]<0>(__p, "JSON property dialogMetadata is not an object type");
                    std::string::operator=((std::string *)((char *)v49 + 688), (const std::string *)buf);
                    siri::dialogengine::Context::SetError((uint64_t)v49, (uint64_t)__p);
                    if (SBYTE7(v141) < 0)
                      operator delete(__p[0]);
                    if ((buf[23] & 0x80000000) != 0)
                      operator delete(*(void **)buf);
                    if (v13 > 0xFFFFFFFFFFFFFFFDLL)
                      goto LABEL_308;
                    v48 = siri::dialogengine::ParseRequestFromJson(std::string const&,std::string const&,std::string const&,std::string const&)::sSignpostLog;
                    if (!os_signpost_enabled((os_log_t)siri::dialogengine::ParseRequestFromJson(std::string const&,std::string const&,std::string const&,std::string const&)::sSignpostLog))
                      goto LABEL_308;
                    *(_WORD *)buf = 0;
                    goto LABEL_306;
                  }
                  if (*v38)
                  {
                    v39 = *((_QWORD *)v38 + 1);
                    v40 = v39 + 48 * *v38;
                    do
                    {
                      String = (char *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetString(v39);
                      std::string::basic_string[abi:ne180100]<0>(buf, String);
                      v42 = v39 + 24;
                      v43 = (char *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetString(v42);
                      std::string::basic_string[abi:ne180100]<0>(__p, v43);
                      if (buf[23] >= 0)
                        v45 = buf;
                      else
                        v45 = *(_BYTE **)buf;
                      siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Got dialog metadata for semantic concept category '%s'", v44, v45);
                      v132.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
                      v46 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v159, (const void **)buf, (__int128 **)&v132);
                      std::string::operator=((std::string *)(v46 + 7), (const std::string *)__p);
                      if (SBYTE7(v141) < 0)
                        operator delete(__p[0]);
                      if ((buf[23] & 0x80000000) != 0)
                        operator delete(*(void **)buf);
                      v39 = v42 + 24;
                    }
                    while (v39 != v40);
                  }
                }
                if (rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember(v171, "interactionId"))
                {
                  if ((*(_WORD *)(rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>(v171, "interactionId")+ 22) & 0x400) == 0)
                  {
                    v47 = *a5;
                    std::string::basic_string[abi:ne180100]<0>(buf, "request-error");
                    std::string::basic_string[abi:ne180100]<0>(__p, "interactionId is not a string");
                    std::string::operator=((std::string *)((char *)v47 + 688), (const std::string *)buf);
                    siri::dialogengine::Context::SetError((uint64_t)v47, (uint64_t)__p);
                    if (SBYTE7(v141) < 0)
                      operator delete(__p[0]);
                    if ((buf[23] & 0x80000000) != 0)
                      operator delete(*(void **)buf);
                    if (v13 > 0xFFFFFFFFFFFFFFFDLL)
                      goto LABEL_308;
                    v48 = siri::dialogengine::ParseRequestFromJson(std::string const&,std::string const&,std::string const&,std::string const&)::sSignpostLog;
                    if (!os_signpost_enabled((os_log_t)siri::dialogengine::ParseRequestFromJson(std::string const&,std::string const&,std::string const&,std::string const&)::sSignpostLog))
                      goto LABEL_308;
                    *(_WORD *)buf = 0;
                    goto LABEL_306;
                  }
                  std::string::basic_string[abi:ne180100]<0>(__p, "interactionId");
                  siri::dialogengine::ParseJSONString(v171, (const char *)__p, buf);
                  std::string::operator=(&__s, (const std::string *)buf);
                  if ((buf[23] & 0x80000000) != 0)
                    operator delete(*(void **)buf);
                  if (SBYTE7(v141) < 0)
                    operator delete(__p[0]);
                }
                if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
                  std::string::__init_copy_ctor_external((std::string *)buf, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
                else
                  *(std::string *)buf = __s;
                if ((buf[23] & 0x80000000) != 0)
                  operator delete(*(void **)buf);
                if (rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember(v171, "executionRequestId"))
                {
                  if ((*(_WORD *)(rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>(v171, "executionRequestId")+ 22) & 0x400) == 0)
                  {
                    v50 = *a5;
                    std::string::basic_string[abi:ne180100]<0>(buf, "request-error");
                    std::string::basic_string[abi:ne180100]<0>(__p, "executionRequestId is not a string");
                    std::string::operator=((std::string *)((char *)v50 + 688), (const std::string *)buf);
                    siri::dialogengine::Context::SetError((uint64_t)v50, (uint64_t)__p);
                    if (SBYTE7(v141) < 0)
                      operator delete(__p[0]);
                    if ((buf[23] & 0x80000000) != 0)
                      operator delete(*(void **)buf);
                    if (v13 > 0xFFFFFFFFFFFFFFFDLL)
                      goto LABEL_308;
                    v48 = siri::dialogengine::ParseRequestFromJson(std::string const&,std::string const&,std::string const&,std::string const&)::sSignpostLog;
                    if (!os_signpost_enabled((os_log_t)siri::dialogengine::ParseRequestFromJson(std::string const&,std::string const&,std::string const&,std::string const&)::sSignpostLog))
                      goto LABEL_308;
                    *(_WORD *)buf = 0;
                    goto LABEL_306;
                  }
                  std::string::basic_string[abi:ne180100]<0>(__p, "executionRequestId");
                  siri::dialogengine::ParseJSONString(v171, (const char *)__p, buf);
                  std::string::operator=(&v161, (const std::string *)buf);
                  if ((buf[23] & 0x80000000) != 0)
                    operator delete(*(void **)buf);
                  if (SBYTE7(v141) < 0)
                    operator delete(__p[0]);
                }
                if (rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember(v171, "globalParameters"))
                {
                  v51 = (unsigned int *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>(v171, "globalParameters");
                  if (*((_WORD *)v51 + 11) != 3)
                  {
                    v91 = *a5;
                    std::string::basic_string[abi:ne180100]<0>(buf, "request-error");
                    std::string::basic_string[abi:ne180100]<0>(__p, "JSON property globalParameters is not an object type");
                    std::string::operator=((std::string *)((char *)v91 + 688), (const std::string *)buf);
                    siri::dialogengine::Context::SetError((uint64_t)v91, (uint64_t)__p);
                    if (SBYTE7(v141) < 0)
                      operator delete(__p[0]);
                    if ((buf[23] & 0x80000000) != 0)
                      operator delete(*(void **)buf);
                    if (v13 > 0xFFFFFFFFFFFFFFFDLL)
                      goto LABEL_308;
                    v48 = siri::dialogengine::ParseRequestFromJson(std::string const&,std::string const&,std::string const&,std::string const&)::sSignpostLog;
                    if (!os_signpost_enabled((os_log_t)siri::dialogengine::ParseRequestFromJson(std::string const&,std::string const&,std::string const&,std::string const&)::sSignpostLog))
                      goto LABEL_308;
                    *(_WORD *)buf = 0;
                    goto LABEL_306;
                  }
                  v52 = *v51;
                  if ((_DWORD)v52)
                  {
                    v53 = *((_QWORD *)v51 + 1);
                    v54 = 48 * v52;
                    do
                    {
                      v55 = (char *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetString(v53);
                      std::string::basic_string[abi:ne180100]<0>(buf, v55);
                      v56 = *a5;
                      GlobalParameter = siri::dialogengine::Context::GetGlobalParameter((uint64_t)*a5, (const void **)buf);
                      if (buf[23] >= 0)
                        v59 = buf;
                      else
                        v59 = *(_BYTE **)buf;
                      if (GlobalParameter)
                      {
                        siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Parse global parameter '%s'", v58, v59);
                        siri::dialogengine::ParseJSONVariable((uint64_t)v56, (int *)(v53 + 24), (const std::string *)buf, 0);
                      }
                      else
                      {
                        siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Ignoring unsupported global parameter '%s'", v58, v59);
                      }
                      if ((buf[23] & 0x80000000) != 0)
                        operator delete(*(void **)buf);
                      v53 += 48;
                      v54 -= 48;
                    }
                    while (v54);
                  }
                }
                if (!rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember(v171, "parameters"))goto LABEL_157;
                v60 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>(v171, "parameters");
                v61 = (int *)v60;
                if (*(_WORD *)(v60 + 22) == 3)
                {
                  v141 = 0u;
                  *(_OWORD *)__p = 0u;
                  v142 = 0;
                  v143 = 256;
                  *(_QWORD *)buf = __p;
                  memset(&buf[8], 0, 40);
                  *(_QWORD *)&buf[48] = 512;
                  *(_DWORD *)&buf[56] = 324;
                  buf[60] = 0;
                  rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::Accept<rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>>((unsigned int *)v60, (uint64_t *)buf);
                  v62 = (char *)rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>::GetString((uint64_t *)__p);
                  std::string::basic_string[abi:ne180100]<0>(&v132, v62);
                  std::string::operator=(&v148, &v132);
                  if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v132.__r_.__value_.__l.__data_);
                  siri::dialogengine::ParseJSONObject((uint64_t)*a5, v61, 0);
                  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy((uint64_t)&buf[8]);
                  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy((uint64_t)__p);
LABEL_157:
                  std::string::basic_string[abi:ne180100]<0>(buf, "debug");
                  v64 = siri::dialogengine::ParseJSONBool(v171, buf, 0);
                  if ((buf[23] & 0x80000000) != 0)
                    operator delete(*(void **)buf);
                  if (v64)
                  {
                    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Activate debug mode", v63);
                    siri::dialogengine::Log::SetLogDebugMessages((siri::dialogengine::Log *)1);
                    v156 |= 1u;
                  }
                  std::string::basic_string[abi:ne180100]<0>(buf, "test");
                  v66 = siri::dialogengine::ParseJSONBool(v171, buf, 0);
                  if ((buf[23] & 0x80000000) != 0)
                    operator delete(*(void **)buf);
                  if (v66)
                  {
                    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Activate test mode", v65);
                    v156 |= 2u;
                  }
                  std::string::basic_string[abi:ne180100]<0>(buf, "resetState");
                  v68 = siri::dialogengine::ParseJSONBool(v171, buf, 0);
                  if ((buf[23] & 0x80000000) != 0)
                    operator delete(*(void **)buf);
                  if (v68)
                  {
                    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Reset dialog state", v67);
                    siri::dialogengine::DialogStateBase::Get(buf);
                    (*(void (**)(_QWORD, siri::dialogengine::Context *, std::string *))(**(_QWORD **)buf
                                                                                                 + 56))(*(_QWORD *)buf, *a5, &v168);
                    v69 = *(std::__shared_weak_count **)&buf[8];
                    if (*(_QWORD *)&buf[8])
                    {
                      v70 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
                      do
                        v71 = __ldaxr(v70);
                      while (__stlxr(v71 - 1, v70));
                      if (!v71)
                      {
                        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                        std::__shared_weak_count::__release_weak(v69);
                      }
                    }
                    v156 |= 4u;
                  }
                  std::string::basic_string[abi:ne180100]<0>(buf, "multiuser");
                  v72 = siri::dialogengine::ParseJSONBool(v171, buf, 0);
                  if ((buf[23] & 0x80000000) != 0)
                    operator delete(*(void **)buf);
                  if (v72)
                    v157 = 1;
                  std::string::basic_string[abi:ne180100]<0>(buf, "grounding");
                  v73 = siri::dialogengine::ParseJSONBool(v171, buf, 0);
                  if ((buf[23] & 0x80000000) != 0)
                    operator delete(*(void **)buf);
                  if (v73)
                    v158 = 1;
                  std::string::basic_string[abi:ne180100]<0>(buf, "deterministic");
                  v74 = siri::dialogengine::ParseJSONBool(v171, buf, 0);
                  if (v74)
                  {
                    if ((buf[23] & 0x80000000) != 0)
                      operator delete(*(void **)buf);
                  }
                  else
                  {
                    IsDeterministic = siri::dialogengine::IsDeterministic((siri::dialogengine *)v74);
                    if ((buf[23] & 0x80000000) != 0)
                      operator delete(*(void **)buf);
                    if (!IsDeterministic)
                    {
LABEL_205:
                      std::string::basic_string[abi:ne180100]<0>(buf, "switchFallthrough");
                      v83 = siri::dialogengine::ParseJSONBool(v171, buf, 0);
                      if ((buf[23] & 0x80000000) != 0)
                        operator delete(*(void **)buf);
                      if (v83)
                        v156 |= 0x400u;
                      std::string::basic_string[abi:ne180100]<0>(buf, "includeKeywords");
                      v84 = siri::dialogengine::ParseJSONBool(v171, buf, 0);
                      if ((buf[23] & 0x80000000) != 0)
                        operator delete(*(void **)buf);
                      if (v84)
                        v156 |= 0x800u;
                      std::string::basic_string[abi:ne180100]<0>(buf, "validateAttrs");
                      v85 = siri::dialogengine::ParseJSONBool(v171, buf, 0);
                      if (v85)
                      {
                        if ((buf[23] & 0x80000000) != 0)
                          operator delete(*(void **)buf);
                      }
                      else
                      {
                        ShouldValidateAttrs = siri::dialogengine::ShouldValidateAttrs((siri::dialogengine *)v85);
                        if ((buf[23] & 0x80000000) != 0)
                          operator delete(*(void **)buf);
                        if (!ShouldValidateAttrs)
                        {
LABEL_220:
                          std::string::basic_string[abi:ne180100]<0>(buf, "labelMode");
                          v89 = siri::dialogengine::ParseJSONBool(v171, buf, 0);
                          if ((buf[23] & 0x80000000) != 0)
                            operator delete(*(void **)buf);
                          if (v89)
                          {
                            siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Activate label mode", v88);
                            v156 |= 0x200u;
                          }
                          if (rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember(v171, "useCaseState"))
                          {
                            if ((*(_WORD *)(rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>(v171, "useCaseState")+ 22) & 0x400) == 0)
                            {
                              v90 = *a5;
                              std::string::basic_string[abi:ne180100]<0>(buf, "request-error");
                              std::string::basic_string[abi:ne180100]<0>(__p, "useCaseState is not a string");
                              std::string::operator=((std::string *)((char *)v90 + 688), (const std::string *)buf);
                              siri::dialogengine::Context::SetError((uint64_t)v90, (uint64_t)__p);
                              if (SBYTE7(v141) < 0)
                                operator delete(__p[0]);
                              if ((buf[23] & 0x80000000) != 0)
                                operator delete(*(void **)buf);
                              if (v13 > 0xFFFFFFFFFFFFFFFDLL)
                                goto LABEL_308;
                              v48 = siri::dialogengine::ParseRequestFromJson(std::string const&,std::string const&,std::string const&,std::string const&)::sSignpostLog;
                              if (!os_signpost_enabled((os_log_t)siri::dialogengine::ParseRequestFromJson(std::string const&,std::string const&,std::string const&,std::string const&)::sSignpostLog))
                                goto LABEL_308;
                              *(_WORD *)buf = 0;
                              goto LABEL_306;
                            }
                            std::string::basic_string[abi:ne180100]<0>(__p, "useCaseState");
                            siri::dialogengine::ParseJSONString(v171, (const char *)__p, buf);
                            std::string::operator=(&v164, (const std::string *)buf);
                            if ((buf[23] & 0x80000000) != 0)
                              operator delete(*(void **)buf);
                            if (SBYTE7(v141) < 0)
                              operator delete(__p[0]);
                          }
                          if (rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember(v171, "familyState"))
                          {
                            if ((*(_WORD *)(rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>(v171, "familyState")+ 22) & 0x400) == 0)
                            {
                              v93 = *a5;
                              std::string::basic_string[abi:ne180100]<0>(buf, "request-error");
                              std::string::basic_string[abi:ne180100]<0>(__p, "familyState is not a string");
                              std::string::operator=((std::string *)((char *)v93 + 688), (const std::string *)buf);
                              siri::dialogengine::Context::SetError((uint64_t)v93, (uint64_t)__p);
                              if (SBYTE7(v141) < 0)
                                operator delete(__p[0]);
                              if ((buf[23] & 0x80000000) != 0)
                                operator delete(*(void **)buf);
                              if (v13 > 0xFFFFFFFFFFFFFFFDLL)
                                goto LABEL_308;
                              v48 = siri::dialogengine::ParseRequestFromJson(std::string const&,std::string const&,std::string const&,std::string const&)::sSignpostLog;
                              if (!os_signpost_enabled((os_log_t)siri::dialogengine::ParseRequestFromJson(std::string const&,std::string const&,std::string const&,std::string const&)::sSignpostLog))
                                goto LABEL_308;
                              *(_WORD *)buf = 0;
                              goto LABEL_306;
                            }
                            std::string::basic_string[abi:ne180100]<0>(__p, "familyState");
                            siri::dialogengine::ParseJSONString(v171, (const char *)__p, buf);
                            std::string::operator=(&v165, (const std::string *)buf);
                            if ((buf[23] & 0x80000000) != 0)
                              operator delete(*(void **)buf);
                            if (SBYTE7(v141) < 0)
                              operator delete(__p[0]);
                          }
                          if (rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember(v171, "patternId"))
                          {
                            if ((*(_WORD *)(rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>(v171, "patternId")+ 22) & 0x400) == 0)
                            {
                              v95 = *a5;
                              std::string::basic_string[abi:ne180100]<0>(buf, "request-error");
                              std::string::basic_string[abi:ne180100]<0>(__p, "patternId is not a string");
                              std::string::operator=((std::string *)((char *)v95 + 688), (const std::string *)buf);
                              siri::dialogengine::Context::SetError((uint64_t)v95, (uint64_t)__p);
                              if (SBYTE7(v141) < 0)
                                operator delete(__p[0]);
                              if ((buf[23] & 0x80000000) != 0)
                                operator delete(*(void **)buf);
                              if (v13 > 0xFFFFFFFFFFFFFFFDLL)
                                goto LABEL_308;
                              v48 = siri::dialogengine::ParseRequestFromJson(std::string const&,std::string const&,std::string const&,std::string const&)::sSignpostLog;
                              if (!os_signpost_enabled((os_log_t)siri::dialogengine::ParseRequestFromJson(std::string const&,std::string const&,std::string const&,std::string const&)::sSignpostLog))
                                goto LABEL_308;
                              *(_WORD *)buf = 0;
                              goto LABEL_306;
                            }
                            std::string::basic_string[abi:ne180100]<0>(__p, "patternId");
                            siri::dialogengine::ParseJSONString(v171, (const char *)__p, buf);
                            std::string::operator=(&v149, (const std::string *)buf);
                            if ((buf[23] & 0x80000000) != 0)
                              operator delete(*(void **)buf);
                            if (SBYTE7(v141) < 0)
                              operator delete(__p[0]);
                          }
                          if (rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember(v171, "responseMode"))
                          {
                            if ((*(_WORD *)(rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>(v171, "responseMode")+ 22) & 0x400) == 0)
                            {
                              v96 = *a5;
                              std::string::basic_string[abi:ne180100]<0>(buf, "request-error");
                              std::string::basic_string[abi:ne180100]<0>(__p, "responseMode is not a string");
                              std::string::operator=((std::string *)((char *)v96 + 688), (const std::string *)buf);
                              siri::dialogengine::Context::SetError((uint64_t)v96, (uint64_t)__p);
                              if (SBYTE7(v141) < 0)
                                operator delete(__p[0]);
                              if ((buf[23] & 0x80000000) != 0)
                                operator delete(*(void **)buf);
                              if (v13 > 0xFFFFFFFFFFFFFFFDLL)
                                goto LABEL_308;
                              v48 = siri::dialogengine::ParseRequestFromJson(std::string const&,std::string const&,std::string const&,std::string const&)::sSignpostLog;
                              if (!os_signpost_enabled((os_log_t)siri::dialogengine::ParseRequestFromJson(std::string const&,std::string const&,std::string const&,std::string const&)::sSignpostLog))
                                goto LABEL_308;
                              *(_WORD *)buf = 0;
                              goto LABEL_306;
                            }
                            std::string::basic_string[abi:ne180100]<0>(__p, "responseMode");
                            siri::dialogengine::ParseJSONString(v171, (const char *)__p, buf);
                            siri::dialogengine::RequestInfo::SetResponseMode((uint64_t)&__str, (unint64_t)buf);
                            if ((buf[23] & 0x80000000) != 0)
                              operator delete(*(void **)buf);
                            if (SBYTE7(v141) < 0)
                              operator delete(__p[0]);
                          }
                          if (rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember(v171, "randomSeed"))
                          {
                            v97 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>(v171, "randomSeed");
                            if ((*(_WORD *)(v97 + 22) & 0x40) == 0)
                            {
                              v98 = *a5;
                              std::string::basic_string[abi:ne180100]<0>(buf, "request-error");
                              std::string::basic_string[abi:ne180100]<0>(__p, "randomSeed is not a non-negative integer or is out of range");
                              std::string::operator=((std::string *)((char *)v98 + 688), (const std::string *)buf);
                              siri::dialogengine::Context::SetError((uint64_t)v98, (uint64_t)__p);
                              if (SBYTE7(v141) < 0)
                                operator delete(__p[0]);
                              if ((buf[23] & 0x80000000) != 0)
                                operator delete(*(void **)buf);
                              if (v13 > 0xFFFFFFFFFFFFFFFDLL)
                                goto LABEL_308;
                              v48 = siri::dialogengine::ParseRequestFromJson(std::string const&,std::string const&,std::string const&,std::string const&)::sSignpostLog;
                              if (!os_signpost_enabled((os_log_t)siri::dialogengine::ParseRequestFromJson(std::string const&,std::string const&,std::string const&,std::string const&)::sSignpostLog))
                                goto LABEL_308;
                              *(_WORD *)buf = 0;
                              goto LABEL_306;
                            }
                            v100 = *(_DWORD *)v97;
                          }
                          else
                          {
                            v100 = 0;
                          }
                          v151 = v100;
                          siri::dialogengine::RandomNumberGenerator::RandomNumberGenerator((siri::dialogengine::RandomNumberGenerator *)buf, v100);
                          if ((v156 & 2) != 0)
                          {
                            if (v100)
                              v102 = "Initialize random number generator with specified seed: %u";
                            else
                              v102 = "Initialize random number generator with auto-selected seed: %u";
                            siri::dialogengine::Log::Info((siri::dialogengine::Log *)v102, v101, *(unsigned int *)buf);
                          }
                          v103 = *a5;
                          memcpy((char *)*a5 + 936, buf, 0x9D0uLL);
                          if (rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember(v171, "currentTime"))
                          {
                            v105 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>(v171, "currentTime");
                            if ((*(_WORD *)(v105 + 22) & 0x80) == 0)
                            {
                              siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"currentTime is not an integer", v106);
                              std::string::basic_string[abi:ne180100]<0>(__p, "request-error");
                              std::string::basic_string[abi:ne180100]<0>(&v132, "currentTime is not an integer");
                              std::string::operator=((std::string *)((char *)v103 + 688), (const std::string *)__p);
                              siri::dialogengine::Context::SetError((uint64_t)v103, (uint64_t)&v132);
                              if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
                                operator delete(v132.__r_.__value_.__l.__data_);
                              if (SBYTE7(v141) < 0)
                                operator delete(__p[0]);
                              if (v13 > 0xFFFFFFFFFFFFFFFDLL)
                                goto LABEL_308;
                              v48 = siri::dialogengine::ParseRequestFromJson(std::string const&,std::string const&,std::string const&,std::string const&)::sSignpostLog;
                              if (!os_signpost_enabled((os_log_t)siri::dialogengine::ParseRequestFromJson(std::string const&,std::string const&,std::string const&,std::string const&)::sSignpostLog))
                                goto LABEL_308;
                              LOWORD(__p[0]) = 0;
                              goto LABEL_380;
                            }
                            v107 = *(_QWORD *)v105;
                            v134.__r_.__value_.__r.__words[0] = *(_QWORD *)v105;
                            std::string::basic_string[abi:ne180100]<0>(__p, "now");
                            siri::dialogengine::Context::FindVariable((uint64_t)v103, (uint64_t)__p, &v135);
                            std::dynamic_pointer_cast[abi:ne180100]<siri::dialogengine::VariableObject,siri::dialogengine::Variable>(&v132, v135, (uint64_t)v136);
                            std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v135);
                            if (SBYTE7(v141) < 0)
                              operator delete(__p[0]);
                            if (v132.__r_.__value_.__r.__words[0])
                            {
                              siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Set the global variable 'now' from the value of 'currentTime': %lld", v108, v107);
                              v109 = v132.__r_.__value_.__r.__words[0];
                              std::allocate_shared[abi:ne180100]<siri::dialogengine::VariableNumber,std::allocator<siri::dialogengine::VariableNumber>,char const(&)[5],long long const&,void>(__p, (uint64_t *)&v134);
                              v138 = *(_OWORD *)__p;
                              __p[1] = 0;
                              __p[0] = 0;
                              siri::dialogengine::VariableObject::AddProperty(v109, (uint64_t *)&v138);
                              std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v138);
                              std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)__p);
                            }
                            else
                            {
                              siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Could not find global variable 'now' in order to apply 'currentTime' override", v108);
                            }
                            std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v132);
                          }
                          siri::dialogengine::ExtractUserSettings((siri::dialogengine *)v171, 1, (uint64_t)__p);
                          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t)&v152, (__int128 *)__p[0], (__int128 *)&__p[1]);
                          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((_QWORD *)__p[1]);
                          if (rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember(v171, "customPronunciations"))
                          {
                            v111 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>(v171, "customPronunciations");
                            if (*(_WORD *)(v111 + 22) == 3)
                            {
                              v136 = 0;
                              v137 = 0;
                              v135 = 0;
                              if (*(_WORD *)(v111 + 22) != 3)
                                __assert_rtn("GetObject", "document.h", 1545, "IsObject()");
                              v112 = *(_QWORD *)(v111 + 8);
                              for (i = rapidjson::GenericObject<true,rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>::end((unsigned int *)v111);
                                    v112 != i;
                                    v112 = v115 + 24)
                              {
                                v114 = (char *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetString(v112);
                                std::string::basic_string[abi:ne180100]<0>(&v134, v114);
                                v115 = v112 + 24;
                                v116 = (char *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetString(v115);
                                if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
                                  std::string::__init_copy_ctor_external(&v132, v134.__r_.__value_.__l.__data_, v134.__r_.__value_.__l.__size_);
                                else
                                  v132 = v134;
                                *(_OWORD *)__p = *(_OWORD *)&v132.__r_.__value_.__l.__data_;
                                *(_QWORD *)&v141 = *((_QWORD *)&v132.__r_.__value_.__l + 2);
                                memset(&v132, 0, sizeof(v132));
                                v133 = v116;
                                std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v141 + 1, v116);
                                std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100]((void **)&v135, (__int128 *)__p);
                                if (SHIBYTE(v143) < 0)
                                  operator delete(*((void **)&v141 + 1));
                                if (SBYTE7(v141) < 0)
                                  operator delete(__p[0]);
                                if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
                                  operator delete(v132.__r_.__value_.__l.__data_);
                                if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
                                  operator delete(v134.__r_.__value_.__l.__data_);
                              }
                              if (v135 != v136)
                                std::vector<std::pair<std::string,std::string>>::__assign_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(&v163, v135, v136, 0xAAAAAAAAAAAAAAABLL * (((char *)v136 - (char *)v135) >> 4));
                              __p[0] = &v135;
                              std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                            }
                          }
                          if (siri::dialogengine::DeviceIsHomePod(v103, v110))
                          {
                            siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Device is a HomePod; Forcing response mode to voiceOnly",
                              v117);
                            v150 = 1;
                          }
                          siri::dialogengine::Log::Info((siri::dialogengine::Log *)"CAT Request (Dialog Engine 3400.54.1)", v117);
                          has_internal_diagnostics = (siri::dialogengine *)os_variant_has_internal_diagnostics();
                          if ((_DWORD)has_internal_diagnostics
                            && siri::dialogengine::ShouldLogCATParameters(has_internal_diagnostics, v119))
                          {
                            v120 = os_signpost_id_generate((os_log_t)siri::dialogengine::ParseRequestFromJson(std::string const&,std::string const&,std::string const&,std::string const&)::sSignpostLog);
                            if (v120 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
                            {
                              v121 = siri::dialogengine::ParseRequestFromJson(std::string const&,std::string const&,std::string const&,std::string const&)::sSignpostLog;
                              if (os_signpost_enabled((os_log_t)siri::dialogengine::ParseRequestFromJson(std::string const&,std::string const&,std::string const&,std::string const&)::sSignpostLog))
                              {
                                LOWORD(__p[0]) = 0;
                                _os_signpost_emit_with_name_impl(&dword_1BF794000, v121, OS_SIGNPOST_INTERVAL_BEGIN, v120, "Log request data (JSON)", "", (uint8_t *)__p, 2u);
                              }
                            }
                            std::operator+<char>();
                            siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 0);
                            if (SBYTE7(v141) < 0)
                              operator delete(__p[0]);
                            if (v120 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
                            {
                              v122 = siri::dialogengine::ParseRequestFromJson(std::string const&,std::string const&,std::string const&,std::string const&)::sSignpostLog;
                              if (os_signpost_enabled((os_log_t)siri::dialogengine::ParseRequestFromJson(std::string const&,std::string const&,std::string const&,std::string const&)::sSignpostLog))
                              {
                                LOWORD(__p[0]) = 0;
                                _os_signpost_emit_with_name_impl(&dword_1BF794000, v122, OS_SIGNPOST_INTERVAL_END, v120, "Log request data (JSON)", "", (uint8_t *)__p, 2u);
                              }
                            }
                          }
                          siri::dialogengine::Context::SetRequestInfo((uint64_t)v103, (uint64_t)&__str);
                          v123 = (void *)*((_QWORD *)v103 + 431);
                          v124 = (unint64_t *)*((_QWORD *)v103 + 432);
                          __p[0] = v123;
                          __p[1] = v124;
                          if (v124)
                          {
                            v125 = v124 + 1;
                            do
                              v126 = __ldxr(v125);
                            while (__stxr(v126 + 1, v125));
                          }
                          siri::dialogengine::TraceWriter::Initialize((siri::dialogengine::TraceWriter *)v123, v103);
                          std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)__p);
                          v127 = (void *)*((_QWORD *)v103 + 431);
                          v128 = (unint64_t *)*((_QWORD *)v103 + 432);
                          __p[0] = v127;
                          __p[1] = v128;
                          if (v128)
                          {
                            v129 = v128 + 1;
                            do
                              v130 = __ldxr(v129);
                            while (__stxr(v130 + 1, v129));
                          }
                          siri::dialogengine::TraceWriter::WriteRequestJson((uint64_t)v127, a1);
                          std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)__p);
                          siri::dialogengine::ValidateRequestData(v103, v131);
                          if (v13 > 0xFFFFFFFFFFFFFFFDLL)
                            goto LABEL_308;
                          v48 = siri::dialogengine::ParseRequestFromJson(std::string const&,std::string const&,std::string const&,std::string const&)::sSignpostLog;
                          if (!os_signpost_enabled((os_log_t)siri::dialogengine::ParseRequestFromJson(std::string const&,std::string const&,std::string const&,std::string const&)::sSignpostLog))
                            goto LABEL_308;
                          LOWORD(__p[0]) = 0;
LABEL_380:
                          v99 = __p;
                          goto LABEL_307;
                        }
                      }
                      siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Activate attribute validation", v86);
                      v156 |= 0x80u;
                      goto LABEL_220;
                    }
                  }
                  siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Activate deterministic mode (and reset dialog state)", v75);
                  siri::dialogengine::DialogStateBase::Get(buf);
                  (*(void (**)(_QWORD, siri::dialogengine::Context *, std::string *))(**(_QWORD **)buf + 56))(*(_QWORD *)buf, *a5, &v168);
                  v80 = *(std::__shared_weak_count **)&buf[8];
                  if (*(_QWORD *)&buf[8])
                  {
                    v81 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
                    do
                      v82 = __ldaxr(v81);
                    while (__stlxr(v82 - 1, v81));
                    if (!v82)
                    {
                      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                      std::__shared_weak_count::__release_weak(v80);
                    }
                  }
                  v158 = 0;
                  v156 |= 0x44u;
                  goto LABEL_205;
                }
                v92 = *a5;
                std::string::basic_string[abi:ne180100]<0>(buf, "request-error");
                std::string::basic_string[abi:ne180100]<0>(__p, "JSON property parameters is not an object type");
                std::string::operator=((std::string *)((char *)v92 + 688), (const std::string *)buf);
                siri::dialogengine::Context::SetError((uint64_t)v92, (uint64_t)__p);
                if (SBYTE7(v141) < 0)
                  operator delete(__p[0]);
                if ((buf[23] & 0x80000000) != 0)
                  operator delete(*(void **)buf);
                if (v13 > 0xFFFFFFFFFFFFFFFDLL)
                  goto LABEL_308;
                v48 = siri::dialogengine::ParseRequestFromJson(std::string const&,std::string const&,std::string const&,std::string const&)::sSignpostLog;
                if (!os_signpost_enabled((os_log_t)siri::dialogengine::ParseRequestFromJson(std::string const&,std::string const&,std::string const&,std::string const&)::sSignpostLog))
                  goto LABEL_308;
                *(_WORD *)buf = 0;
              }
              else
              {
                v94 = *a5;
                std::string::basic_string[abi:ne180100]<0>(buf, "request-error");
                std::string::basic_string[abi:ne180100]<0>(__p, "No locale specified");
                std::string::operator=((std::string *)((char *)v94 + 688), (const std::string *)buf);
                siri::dialogengine::Context::SetError((uint64_t)v94, (uint64_t)__p);
                if (SBYTE7(v141) < 0)
                  operator delete(__p[0]);
                if ((buf[23] & 0x80000000) != 0)
                  operator delete(*(void **)buf);
                if (v13 > 0xFFFFFFFFFFFFFFFDLL)
                  goto LABEL_308;
                v48 = siri::dialogengine::ParseRequestFromJson(std::string const&,std::string const&,std::string const&,std::string const&)::sSignpostLog;
                if (!os_signpost_enabled((os_log_t)siri::dialogengine::ParseRequestFromJson(std::string const&,std::string const&,std::string const&,std::string const&)::sSignpostLog))
                  goto LABEL_308;
                *(_WORD *)buf = 0;
              }
LABEL_306:
              v99 = (void **)buf;
LABEL_307:
              _os_signpost_emit_with_name_impl(&dword_1BF794000, v48, OS_SIGNPOST_INTERVAL_END, v12, "ParseRequestFromJson", "", (uint8_t *)v99, 2u);
LABEL_308:
              if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v144.__r_.__value_.__l.__data_);
              goto LABEL_310;
            }
          }
          else if (!v32)
          {
            goto LABEL_62;
          }
          siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Activate spotlight mode", v33);
          v156 |= 0x100u;
          goto LABEL_62;
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "dialog");
        v76 = siri::dialogengine::StringsEqual((uint64_t)buf, (uint64_t)__p);
        if (SBYTE7(v141) < 0)
          operator delete(__p[0]);
        if (!v76)
        {
          std::operator+<char>();
          v77 = std::string::append(&v132, "], defaulting to dialog");
          v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
          *(_QWORD *)&v141 = *((_QWORD *)&v77->__r_.__value_.__l + 2);
          *(_OWORD *)__p = v78;
          v77->__r_.__value_.__l.__size_ = 0;
          v77->__r_.__value_.__r.__words[2] = 0;
          v77->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 1u);
          if (SBYTE7(v141) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v132.__r_.__value_.__l.__data_);
        }
        v23 = 0;
        goto LABEL_194;
      }
    }
    else if (!v18)
    {
      goto LABEL_26;
    }
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Activate trace creation (and debug mode)", v19);
    v156 |= 0x11u;
    goto LABEL_26;
  }
  if (v172 > 0x11)
    v17 = "Unknown error.";
  else
    v17 = off_1E7931C38[v172];
  std::string::basic_string[abi:ne180100]<0>(buf, v17);
  v21 = *a5;
  std::string::basic_string[abi:ne180100]<0>(&__str, "request-error");
  std::operator+<char>();
  std::string::operator=((std::string *)((char *)v21 + 688), &__str);
  siri::dialogengine::Context::SetError((uint64_t)v21, (uint64_t)__p);
  if (SBYTE7(v141) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v13 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v22 = siri::dialogengine::ParseRequestFromJson(std::string const&,std::string const&,std::string const&,std::string const&)::sSignpostLog;
    if (os_signpost_enabled((os_log_t)siri::dialogengine::ParseRequestFromJson(std::string const&,std::string const&,std::string const&,std::string const&)::sSignpostLog))
    {
      LOWORD(__str.__r_.__value_.__l.__data_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1BF794000, v22, OS_SIGNPOST_INTERVAL_END, v12, "ParseRequestFromJson", "", (uint8_t *)&__str, 2u);
    }
  }
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
LABEL_311:
  rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::~GenericDocument((uint64_t)v171);
  *(_QWORD *)buf = &v166;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v167.__r_.__value_.__l.__data_);
  if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v168.__r_.__value_.__l.__data_);
  if (SHIBYTE(v170) < 0)
    operator delete((void *)v169);
}

void sub_1BF97ECF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18)
{
  uint64_t v18;
  uint64_t v19;

  STACK[0xA40] = (unint64_t)&a18;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xA40]);
  if (SLOBYTE(STACK[0xA8F]) < 0)
    operator delete((void *)STACK[0xA78]);
  siri::dialogengine::RequestInfo::~RequestInfo((void **)&STACK[0xA90]);
  rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::~GenericDocument(v19 - 200);
  STACK[0xA90] = (unint64_t)&STACK[0xC80];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xA90]);
  if (SLOBYTE(STACK[0xCB7]) < 0)
    operator delete((void *)STACK[0xCA0]);
  if (*(char *)(v19 - 233) < 0)
    operator delete(*(void **)(v19 - 256));
  if (*(char *)(v19 - 201) < 0)
    operator delete(*(void **)(v19 - 224));
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v18);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ParseJSONVariable(uint64_t a1, int *a2, const std::string *a3, const void *a4)
{
  unsigned __int8 v8;
  os_signpost_id_t v9;
  unint64_t v10;
  NSObject *v11;
  const std::string *v12;
  int v13;
  std::__shared_weak_count_vtbl *v14;
  unsigned int v15;
  uint64_t v16;
  char *String;
  uint64_t v18;
  int v19;
  double v20;
  double Double;
  void *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  NSObject *v27;
  _QWORD *v28;
  _QWORD *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36[2];
  _QWORD v37[2];
  uint64_t v38[2];
  _BYTE buf[12];
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  if ((v8 & 1) == 0
  {
    siri::dialogengine::ParseJSONVariable(siri::dialogengine::Context *,rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>> &,std::string const&,siri::dialogengine::Variable *)::sSignpostLog = (uint64_t)os_log_create("com.apple.siri.DialogEngine", "Request");
  }
  v9 = os_signpost_id_generate((os_log_t)siri::dialogengine::ParseJSONVariable(siri::dialogengine::Context *,rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>> &,std::string const&,siri::dialogengine::Variable *)::sSignpostLog);
  v10 = v9 - 1;
  if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v11 = siri::dialogengine::ParseJSONVariable(siri::dialogengine::Context *,rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>> &,std::string const&,siri::dialogengine::Variable *)::sSignpostLog;
    if (os_signpost_enabled((os_log_t)siri::dialogengine::ParseJSONVariable(siri::dialogengine::Context *,rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>> &,std::string const&,siri::dialogengine::Variable *)::sSignpostLog))
    {
      if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = a3;
      else
        v12 = (const std::string *)a3->__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v12;
      _os_signpost_emit_with_name_impl(&dword_1BF794000, v11, OS_SIGNPOST_INTERVAL_BEGIN, v9, "ParseJSONVariable", "name = %s", buf, 0xCu);
    }
  }
  v13 = *((unsigned __int16 *)a2 + 11);
  if ((v13 & 0x400) != 0)
  {
    v14 = (std::__shared_weak_count_vtbl *)operator new();
    String = (char *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetString((uint64_t)a2);
    std::string::basic_string[abi:ne180100]<0>(buf, String);
    siri::dialogengine::VariableString::VariableString((uint64_t)v14, a3, (uint64_t)buf);
    if (v40 < 0)
      operator delete(*(void **)buf);
  }
  else if ((v13 & 8) != 0)
  {
    v18 = operator new();
    v14 = (std::__shared_weak_count_vtbl *)v18;
    v19 = *((unsigned __int16 *)a2 + 11);
    if ((v19 & 8) == 0)
      __assert_rtn("GetBool", "document.h", 1078, "IsBool()");
    siri::dialogengine::VariableBoolean::VariableBoolean(v18, a3, v19 == 10);
  }
  else if ((v13 & 0x10) != 0)
  {
    v14 = (std::__shared_weak_count_vtbl *)operator new();
    Double = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetDouble(a2, v20);
    siri::dialogengine::VariableNumber::VariableNumber((uint64_t)v14, a3, Double);
  }
  else if (v13 == 3)
  {
    v14 = (std::__shared_weak_count_vtbl *)operator new();
    siri::dialogengine::VariableObject::VariableObject(v14, a3);
    siri::dialogengine::ParseJSONObject(a1, a2, (uint64_t)v14);
  }
  else
  {
    if (v13 != 4)
    {
      if (v10 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v27 = siri::dialogengine::ParseJSONVariable(siri::dialogengine::Context *,rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>> &,std::string const&,siri::dialogengine::Variable *)::sSignpostLog;
        if (os_signpost_enabled((os_log_t)siri::dialogengine::ParseJSONVariable(siri::dialogengine::Context *,rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>> &,std::string const&,siri::dialogengine::Variable *)::sSignpostLog))
        {
          *(_WORD *)buf = 0;
          goto LABEL_50;
        }
      }
      return;
    }
    v14 = (std::__shared_weak_count_vtbl *)operator new();
    siri::dialogengine::VariableArray::VariableArray(v14, a3);
    if (*((_WORD *)a2 + 11) != 4)
LABEL_19:
      __assert_rtn("Size", "document.h", 1557, "IsArray()");
    v15 = 0;
    while (v15 < *a2)
    {
      v16 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]((uint64_t)a2, v15);
      std::string::basic_string[abi:ne180100]<0>(buf, "");
      siri::dialogengine::ParseJSONVariable(a1, v16, buf, v14);
      if (v40 < 0)
        operator delete(*(void **)buf);
      ++v15;
      if (*((_WORD *)a2 + 11) != 4)
        goto LABEL_19;
    }
  }
  if (!a4)
    goto LABEL_43;
  if (v22)
  {
    v23 = (uint64_t)v22;
    v38[0] = (uint64_t)v14;
    v24 = (std::__shared_weak_count *)operator new();
    v24->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    v24->__vftable = (std::__shared_weak_count_vtbl *)&off_1E793A2D8;
    v24->__shared_weak_owners_ = 0;
    v24[1].__vftable = v14;
    v38[1] = (uint64_t)v24;
    siri::dialogengine::VariableObject::AddProperty(v23, v38);
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
    if (v10 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v27 = siri::dialogengine::ParseJSONVariable(siri::dialogengine::Context *,rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>> &,std::string const&,siri::dialogengine::Variable *)::sSignpostLog;
      if (os_signpost_enabled((os_log_t)siri::dialogengine::ParseJSONVariable(siri::dialogengine::Context *,rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>> &,std::string const&,siri::dialogengine::Variable *)::sSignpostLog))
      {
        *(_WORD *)buf = 0;
LABEL_50:
        _os_signpost_emit_with_name_impl(&dword_1BF794000, v27, OS_SIGNPOST_INTERVAL_END, v9, "ParseJSONVariable", "", buf, 2u);
        return;
      }
    }
    return;
  }
  if (!v28)
  {
LABEL_43:
    v36[0] = (uint64_t)v14;
    v33 = (std::__shared_weak_count *)operator new();
    v33->__shared_owners_ = 0;
    v34 = (unint64_t *)&v33->__shared_owners_;
    v33->__vftable = (std::__shared_weak_count_vtbl *)&off_1E793A2D8;
    v33->__shared_weak_owners_ = 0;
    v33[1].__vftable = v14;
    v36[1] = (uint64_t)v33;
    siri::dialogengine::Context::AddVariable(a1, v36);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
    if (v10 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v27 = siri::dialogengine::ParseJSONVariable(siri::dialogengine::Context *,rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>> &,std::string const&,siri::dialogengine::Variable *)::sSignpostLog;
      if (os_signpost_enabled((os_log_t)siri::dialogengine::ParseJSONVariable(siri::dialogengine::Context *,rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>> &,std::string const&,siri::dialogengine::Variable *)::sSignpostLog))
      {
        *(_WORD *)buf = 0;
        goto LABEL_50;
      }
    }
    return;
  }
  v29 = v28;
  v37[0] = v14;
  v30 = (std::__shared_weak_count *)operator new();
  v30->__shared_owners_ = 0;
  v31 = (unint64_t *)&v30->__shared_owners_;
  v30->__vftable = (std::__shared_weak_count_vtbl *)&off_1E793A2D8;
  v30->__shared_weak_owners_ = 0;
  v30[1].__vftable = v14;
  v37[1] = v30;
  siri::dialogengine::VariableArray::AddItem(v29, v37);
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 - 1, v31));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  if (v10 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v27 = siri::dialogengine::ParseJSONVariable(siri::dialogengine::Context *,rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>> &,std::string const&,siri::dialogengine::Variable *)::sSignpostLog;
    if (os_signpost_enabled((os_log_t)siri::dialogengine::ParseJSONVariable(siri::dialogengine::Context *,rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>> &,std::string const&,siri::dialogengine::Variable *)::sSignpostLog))
    {
      *(_WORD *)buf = 0;
      goto LABEL_50;
    }
  }
}

void sub_1BF97F7A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  MEMORY[0x1C3B8D890](v20, 0x10B3C40C1072A30);
  _Unwind_Resume(a1);
}

BOOL rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::Accept<rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>>(unsigned int *a1, uint64_t *a2)
{
  __int16 v2;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  uint64_t String;
  unsigned int StringLength;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  double v16;
  unint64_t v18;
  _BYTE *v19;
  char *v20;
  _BYTE *v21;
  _BYTE *v22;
  _BYTE *v23;
  uint64_t v24;

  v2 = *((_WORD *)a1 + 11);
  switch(v2 & 7)
  {
    case 0:
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Prefix((uint64_t)a2, 0);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteNull(a2);
      return 1;
    case 1:
      v5 = 1;
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Prefix((uint64_t)a2, 1);
      v6 = a2;
      v7 = 0;
      goto LABEL_5;
    case 2:
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Prefix((uint64_t)a2, 2);
      v5 = 1;
      v6 = a2;
      v7 = 1;
LABEL_5:
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteBool(v6, v7);
      return v5;
    case 3:
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartObject((uint64_t)a2);
      if (*((_WORD *)a1 + 11) != 3)
        __assert_rtn("MemberBegin", "document.h", 1155, "IsObject()");
      v8 = *((_QWORD *)a1 + 1);
      while (2)
      {
        if (v8 == *((_QWORD *)a1 + 1) + 48 * *a1)
        {
          rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndObject((uint64_t)a2);
          return 1;
        }
        if ((*(_WORD *)(v8 + 22) & 0x400) == 0)
          __assert_rtn("Accept", "document.h", 1872, "m->name.IsString()");
        String = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetString(v8);
        StringLength = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetStringLength((unsigned int *)v8);
        rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String(a2, String, StringLength);
        v11 = v8 + 24;
        if ((rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::Accept<rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>>(v11, a2) & 1) != 0)
        {
          v8 = v11 + 24;
          if (*((_WORD *)a1 + 11) != 3)
            __assert_rtn("MemberEnd", "document.h", 1158, "IsObject()");
          continue;
        }
        break;
      }
      return 0;
    case 4:
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartArray((uint64_t)a2);
      if (*((_WORD *)a1 + 11) != 4)
        __assert_rtn("Begin", "document.h", 1591, "IsArray()");
      v12 = *((_QWORD *)a1 + 1);
      while (2)
      {
        if (v12 == *((_QWORD *)a1 + 1) + 24 * *a1)
        {
          rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndArray((uint64_t)a2);
          return 1;
        }
        if (rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::Accept<rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>>(v12, a2))
        {
          v12 += 24;
          if (*((_WORD *)a1 + 11) != 4)
            __assert_rtn("End", "document.h", 1594, "IsArray()");
          continue;
        }
        break;
      }
      return 0;
    case 5:
      v13 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetString((uint64_t)a1);
      v14 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetStringLength(a1);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String(a2, v13, v14);
      return 1;
    case 6:
      if ((*((_WORD *)a1 + 11) & 0x200) != 0)
      {
        v16 = *(double *)a1;
        rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Prefix((uint64_t)a2, 6);
        return rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteDouble((uint64_t)a2, v16);
      }
      else
      {
        if ((v2 & 0x20) != 0)
        {
          v18 = *a1;
          rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Prefix((uint64_t)a2, 6);
          v19 = (_BYTE *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>((uint64_t *)*a2, 11);
          v21 = v19;
          if ((v18 & 0x80000000) != 0)
          {
            *v19 = 45;
            v22 = v19 + 1;
            v18 = -(int)v18;
          }
          else
          {
            v22 = v19;
          }
          v23 = rapidjson::internal::u32toa((rapidjson::internal *)v18, v22, v20);
          v24 = *(_QWORD *)(*a2 + 24);
          if (v24 - *(_QWORD *)(*a2 + 16) < (unint64_t)(v21 - v23 + 11))
            __assert_rtn("Pop", "stack.h", 139, "GetSize() >= count * sizeof(T)");
          *(_QWORD *)(*a2 + 24) = v24 - (v21 - v23) - 11;
        }
        else if ((v2 & 0x40) != 0)
        {
          rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Uint((uint64_t **)a2, (rapidjson::internal *)*a1);
        }
        else
        {
          v15 = *(_QWORD *)a1;
          if ((v2 & 0x80) != 0)
            rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Int64((uint64_t **)a2, v15);
          else
            rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Uint64((uint64_t **)a2, v15);
        }
        return 1;
      }
    default:
      __assert_rtn("Accept", "document.h", 1892, "GetType() == kNumberType");
  }
}

void siri::dialogengine::ParseJSONObject(uint64_t a1, int *a2, uint64_t a3)
{
  unsigned __int8 v6;
  os_signpost_id_t v7;
  NSObject *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  char *String;
  uint64_t v13;
  NSObject *v14;
  void *__p[2];
  char v16;

  if ((v6 & 1) == 0
  {
    siri::dialogengine::ParseJSONObject(siri::dialogengine::Context *,rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>> &,siri::dialogengine::Variable *)::sSignpostLog = (uint64_t)os_log_create("com.apple.siri.DialogEngine", "Request");
  }
  v7 = os_signpost_id_generate((os_log_t)siri::dialogengine::ParseJSONObject(siri::dialogengine::Context *,rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>> &,siri::dialogengine::Variable *)::sSignpostLog);
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v8 = siri::dialogengine::ParseJSONObject(siri::dialogengine::Context *,rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>> &,siri::dialogengine::Variable *)::sSignpostLog;
    if (os_signpost_enabled((os_log_t)siri::dialogengine::ParseJSONObject(siri::dialogengine::Context *,rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>> &,siri::dialogengine::Variable *)::sSignpostLog))
    {
      LOWORD(__p[0]) = 0;
      _os_signpost_emit_with_name_impl(&dword_1BF794000, v8, OS_SIGNPOST_INTERVAL_BEGIN, v7, "ParseJSONObject", "", (uint8_t *)__p, 2u);
    }
  }
  if (*((_WORD *)a2 + 11) != 3)
    __assert_rtn("GetObject", "document.h", 1544, "IsObject()");
  v9 = *a2;
  if (*a2)
  {
    v10 = *((_QWORD *)a2 + 1);
    v11 = v10 + 48 * v9;
    do
    {
      String = (char *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetString(v10);
      std::string::basic_string[abi:ne180100]<0>(__p, String);
      v13 = v10 + 24;
      siri::dialogengine::ParseJSONVariable(a1, v13, __p, a3);
      if (v16 < 0)
        operator delete(__p[0]);
      v10 = v13 + 24;
    }
    while (v10 != v11);
  }
  if (v7 - 1 < 0xFFFFFFFFFFFFFFFELL)
  {
    v14 = siri::dialogengine::ParseJSONObject(siri::dialogengine::Context *,rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>> &,siri::dialogengine::Variable *)::sSignpostLog;
    if (os_signpost_enabled((os_log_t)siri::dialogengine::ParseJSONObject(siri::dialogengine::Context *,rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>> &,siri::dialogengine::Variable *)::sSignpostLog))
    {
      LOWORD(__p[0]) = 0;
      _os_signpost_emit_with_name_impl(&dword_1BF794000, v14, OS_SIGNPOST_INTERVAL_END, v7, "ParseJSONObject", "", (uint8_t *)__p, 2u);
    }
  }
}

void sub_1BF97FDE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::dynamic_pointer_cast[abi:ne180100]<siri::dialogengine::VariableObject,siri::dialogengine::Variable>(_QWORD *result, void *lpsrc, uint64_t a3)
{
  _QWORD *v3;
  unint64_t *v5;
  unint64_t v6;

  v3 = result;
  if (lpsrc
  {
    *v3 = result;
    v3[1] = a3;
    if (a3)
    {
      v5 = (unint64_t *)(a3 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
  }
  else
  {
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void std::allocate_shared[abi:ne180100]<siri::dialogengine::VariableNumber,std::allocator<siri::dialogengine::VariableNumber>,char const(&)[5],long long const&,void>(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v4;
  std::string __p;

  v4 = operator new(0x68uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E793A4E0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "secs");
  siri::dialogengine::VariableNumber::VariableNumber((uint64_t)(v4 + 3), &__p, (double)*a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *a1 = v4 + 3;
  a1[1] = v4;
}

void sub_1BF97FEF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__shared_weak_count *v15;
  void *v17;

  if (a15 < 0)
    operator delete(__p);
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

uint64_t rapidjson::GenericObject<true,rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>::end(unsigned int *a1)
{
  if (*((_WORD *)a1 + 11) != 3)
    __assert_rtn("MemberEnd", "document.h", 1158, "IsObject()");
  return *((_QWORD *)a1 + 1) + 48 * *a1;
}

void siri::dialogengine::SetResponseModeToVoiceOnlyIfDeviceIsHomePod(siri::dialogengine *this, siri::dialogengine::Context *a2, siri::dialogengine::RequestInfo *a3)
{
  const char *v4;

  if (siri::dialogengine::DeviceIsHomePod(this, a2))
  {
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Device is a HomePod; Forcing response mode to voiceOnly",
      v4);
    *((_DWORD *)a2 + 38) = 1;
  }
}

uint64_t rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Prefix(uint64_t result, int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  char v7;
  char v8;
  BOOL v9;

  v2 = *(_QWORD *)(result + 32);
  v3 = v2 - *(_QWORD *)(result + 24);
  if (v3)
  {
    if (v3 <= 0xF)
      __assert_rtn("Top", "stack.h", 146, "GetSize() >= sizeof(T)");
    v5 = *(_QWORD *)(v2 - 16);
    if (v5)
    {
      v6 = *(uint64_t **)result;
      if ((v5 & 1) != 0)
        v7 = 58;
      else
        v7 = 44;
      if (*(_BYTE *)(v2 - 8))
        v8 = 44;
      else
        v8 = v7;
      result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(v6, 1);
      *(_BYTE *)result = v8;
      v5 = *(_QWORD *)(v2 - 16);
    }
    if (*(_BYTE *)(v2 - 8))
      v9 = 1;
    else
      v9 = a2 == 5;
    if (!v9 && (v5 & 1) == 0)
      __assert_rtn("Prefix", "writer.h", 483, "type == kStringType");
    *(_QWORD *)(v2 - 16) = v5 + 1;
  }
  else
  {
    if (*(_BYTE *)(result + 60))
      __assert_rtn("Prefix", "writer.h", 487, "!hasRoot_");
    *(_BYTE *)(result + 60) = 1;
  }
  return result;
}

_BYTE *rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartObject(uint64_t a1)
{
  uint64_t v2;
  _BYTE *result;

  rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Prefix(a1, 3);
  v2 = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Level>((uint64_t *)(a1 + 8));
  *(_QWORD *)v2 = 0;
  *(_BYTE *)(v2 + 8) = 0;
  result = (_BYTE *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*(uint64_t **)a1, 1);
  *result = 123;
  return result;
}

_BYTE *rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  if (!a2)
    __assert_rtn("String", "writer.h", 203, "str != 0");
  rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Prefix((uint64_t)a1, 5);
  return rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString(a1, a2, a3);
}

_BYTE *rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndObject(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  _BYTE *result;

  v1 = *(_QWORD *)(a1 + 32);
  if ((unint64_t)(v1 - *(_QWORD *)(a1 + 24)) <= 0xF)
    __assert_rtn("EndObject", "writer.h", 232, "level_stack_.GetSize() >= sizeof(Level)");
  if (*(_BYTE *)(v1 - 8))
    __assert_rtn("EndObject", "writer.h", 233, "!level_stack_.template Top<Level>()->inArray");
  v3 = *(_BYTE *)(v1 - 16);
  v2 = v1 - 16;
  if ((v3 & 1) != 0)
    __assert_rtn("EndObject", "writer.h", 234, "0 == level_stack_.template Top<Level>()->valueCount % 2");
  *(_QWORD *)(a1 + 32) = v2;
  result = (_BYTE *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*(uint64_t **)a1, 1);
  *result = 125;
  return result;
}

_BYTE *rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartArray(uint64_t a1)
{
  uint64_t v2;
  _BYTE *result;

  rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Prefix(a1, 4);
  v2 = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Level>((uint64_t *)(a1 + 8));
  *(_QWORD *)v2 = 0;
  *(_BYTE *)(v2 + 8) = 1;
  result = (_BYTE *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*(uint64_t **)a1, 1);
  *result = 91;
  return result;
}

_BYTE *rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndArray(uint64_t a1)
{
  uint64_t v1;
  _BYTE *result;

  v1 = *(_QWORD *)(a1 + 32);
  if ((unint64_t)(v1 - *(_QWORD *)(a1 + 24)) <= 0xF)
    __assert_rtn("EndArray", "writer.h", 247, "level_stack_.GetSize() >= sizeof(Level)");
  if (!*(_BYTE *)(v1 - 8))
    __assert_rtn("EndArray", "writer.h", 248, "level_stack_.template Top<Level>()->inArray");
  *(_QWORD *)(a1 + 32) = v1 - 16;
  result = (_BYTE *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*(uint64_t **)a1, 1);
  *result = 93;
  return result;
}

_BYTE *rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Uint(uint64_t **a1, rapidjson::internal *a2)
{
  _BYTE *v4;
  char *v5;
  _BYTE *result;
  uint64_t v7;

  rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Prefix((uint64_t)a1, 6);
  v4 = (_BYTE *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*a1, 10);
  result = rapidjson::internal::u32toa(a2, v4, v5);
  v7 = (*a1)[3];
  if (v7 - (*a1)[2] < (unint64_t)(v4 - result + 10))
    __assert_rtn("Pop", "stack.h", 139, "GetSize() >= count * sizeof(T)");
  (*a1)[3] = v7 - (v4 - result) - 10;
  return result;
}

_BYTE *rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Int64(uint64_t **a1, unint64_t a2)
{
  _BYTE *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  _BYTE *result;
  uint64_t v9;

  rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Prefix((uint64_t)a1, 6);
  v4 = (_BYTE *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*a1, 21);
  v6 = v4;
  if ((a2 & 0x8000000000000000) != 0)
  {
    *v4 = 45;
    v7 = v4 + 1;
    a2 = -(uint64_t)a2;
  }
  else
  {
    v7 = v4;
  }
  result = rapidjson::internal::u64toa(a2, v7, v5);
  v9 = (*a1)[3];
  if (v9 - (*a1)[2] < (unint64_t)(v6 - result + 21))
    __assert_rtn("Pop", "stack.h", 139, "GetSize() >= count * sizeof(T)");
  (*a1)[3] = v9 - (v6 - result) - 21;
  return result;
}

_BYTE *rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Uint64(uint64_t **a1, unint64_t a2)
{
  _BYTE *v4;
  char *v5;
  _BYTE *result;
  uint64_t v7;

  rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Prefix((uint64_t)a1, 6);
  v4 = (_BYTE *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*a1, 20);
  result = rapidjson::internal::u64toa(a2, v4, v5);
  v7 = (*a1)[3];
  if (v7 - (*a1)[2] < (unint64_t)(v4 - result + 20))
    __assert_rtn("Pop", "stack.h", 139, "GetSize() >= count * sizeof(T)");
  (*a1)[3] = v7 - (v4 - result) - 20;
  return result;
}

_QWORD *std::shared_ptr<siri::dialogengine::Variable>::shared_ptr[abi:ne180100]<siri::dialogengine::Variable,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E793A2D8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1BF9804F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<siri::dialogengine::Variable *,std::shared_ptr<siri::dialogengine::Variable>::__shared_ptr_default_delete<siri::dialogengine::Variable,siri::dialogengine::Variable>,std::allocator<siri::dialogengine::Variable>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::Variable *,std::shared_ptr<siri::dialogengine::Variable>::__shared_ptr_default_delete<siri::dialogengine::Variable,siri::dialogengine::Variable>,std::allocator<siri::dialogengine::Variable>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::Variable *,std::shared_ptr<siri::dialogengine::Variable>::__shared_ptr_default_delete<siri::dialogengine::Variable,siri::dialogengine::Variable>,std::allocator<siri::dialogengine::Variable>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void siri::dialogengine::ParseRequestFromVariable(uint64_t *a1@<X0>, const std::string *a2@<X1>, const std::string *a3@<X2>, const std::string *a4@<X3>, siri::dialogengine::Context **a5@<X8>)
{
  unsigned __int8 v9;
  const char *v10;
  os_signpost_id_t v11;
  unint64_t v12;
  NSObject *v13;
  uint64_t *v14;
  uint64_t v15;
  const char *v16;
  std::__shared_weak_count *v17;
  int v18;
  unint64_t *v19;
  unint64_t v20;
  siri::dialogengine::Context *v21;
  NSObject *v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  BOOL v26;
  BOOL v27;
  BOOL v28;
  std::string *v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  siri::dialogengine::Context *v36;
  NSObject *v37;
  int v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::string::size_type size;
  uint64_t v43;
  std::__shared_weak_count *v44;
  int v45;
  unint64_t *v46;
  unint64_t v47;
  const char *v48;
  _BOOL4 v49;
  int v50;
  uint64_t v51;
  const char *v52;
  std::__shared_weak_count *v53;
  int v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  const char *v65;
  uint64_t *v66;
  std::string::size_type v67;
  uint64_t v68;
  uint64_t v69;
  const void *v70;
  std::__shared_weak_count *v71;
  unint64_t *p_shared_owners;
  unint64_t v73;
  siri::dialogengine::VariableObject *v74;
  const void **v75;
  std::string::size_type v76;
  char *v77;
  __int128 v78;
  char *v79;
  const char *v80;
  uint64_t v81;
  NSObject *v82;
  char v83;
  std::string *v84;
  uint64_t *v85;
  int v86;
  siri::dialogengine::Context *v87;
  NSObject *v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  siri::dialogengine::Context *v92;
  NSObject *v93;
  int v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  siri::dialogengine::Context *v99;
  NSObject *v100;
  int v101;
  siri::dialogengine::Context *v102;
  NSObject *v103;
  std::string *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  const void *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  siri::dialogengine::VariableObject *v114;
  unint64_t *v115;
  unint64_t v116;
  _QWORD *v117;
  std::string::size_type v118;
  uint64_t v119;
  __int128 v120;
  uint64_t GlobalParameter;
  const char *v122;
  std::string *v123;
  siri::dialogengine::Context *v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  unint64_t *v128;
  unint64_t v129;
  int v130;
  siri::dialogengine::Context *v131;
  NSObject *v132;
  unint64_t *v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  std::string::size_type v138;
  unint64_t *v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t *i;
  std::string::size_type v143;
  siri::dialogengine::Context *v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  unint64_t *v148;
  unint64_t v149;
  uint64_t v150;
  int v151;
  const char *v152;
  uint64_t v153;
  int v154;
  const char *v155;
  uint64_t v156;
  int v157;
  const char *v158;
  uint64_t v159;
  int v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  siri::dialogengine *v164;
  const char *v165;
  BOOL IsDeterministic;
  uint64_t v167;
  int v168;
  uint64_t v169;
  int v170;
  uint64_t v171;
  siri::dialogengine *v172;
  const char *v173;
  BOOL ShouldValidateAttrs;
  uint64_t v175;
  int v176;
  const char *v177;
  uint64_t v178;
  siri::dialogengine::Context *v179;
  NSObject *v180;
  siri::dialogengine::Context *v181;
  NSObject *v182;
  uint64_t v183;
  siri::dialogengine::Context *v184;
  uint64_t v185;
  siri::dialogengine::Context *v186;
  uint64_t v187;
  siri::dialogengine::Context *v188;
  uint64_t v189;
  double v190;
  unsigned int v191;
  siri::dialogengine::Context *v192;
  NSObject *v193;
  std::string *v194;
  const char *v195;
  char *v196;
  uint64_t v197;
  const char *v198;
  const char *v199;
  double v200;
  siri::dialogengine::Context *v201;
  const char *v202;
  uint64_t v203;
  siri::dialogengine::Context *v204;
  NSObject *v205;
  uint64_t v206;
  unint64_t *v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  void *v212;
  uint64_t v213;
  unint64_t *v214;
  unint64_t v215;
  siri::dialogengine::VariableObject *v216;
  unint64_t v217;
  const void **j;
  std::string::size_type v219;
  char *v220;
  char *v221;
  __int128 v222;
  siri::dialogengine::RequestInfo *v223;
  const char *v224;
  siri::dialogengine *has_internal_diagnostics;
  const char *v226;
  os_signpost_id_t v227;
  NSObject *v228;
  unint64_t v229;
  std::string *v230;
  __int128 v231;
  NSObject *v232;
  siri::dialogengine::Context *v233;
  siri::dialogengine::TraceWriter *v234;
  std::string::size_type v235;
  unint64_t *v236;
  unint64_t v237;
  const siri::dialogengine::Context *v238;
  uint64_t *v239;
  std::string __p[12];
  char v242;
  std::string v243;
  std::string v244;
  void *lpsrc;
  uint64_t v246;
  _QWORD v247[2];
  __int128 v248;
  std::string buf[105];
  uint64_t v250[2];
  uint64_t v251[2];
  std::string v252;
  std::string v253;
  std::string v254;
  void *v255;
  uint64_t v256;
  std::string v257;
  std::string v258[2];
  std::string v259;
  std::string v260;
  unsigned int v261;
  uint64_t v262;
  std::string v263;
  std::string v264;
  std::vector<std::string> v265[2];
  int v266;
  char v267;
  char v268;
  uint64_t *v269;
  std::string __s;
  std::string v271;
  std::string v272[2];
  std::vector<std::pair<std::string, std::string>> v273;
  std::string v274;
  std::string v275;
  std::vector<std::string> v276;
  std::string v277;
  std::string __str;
  std::string v279;

  if ((v9 & 1) == 0
  {
    siri::dialogengine::ParseRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog = (uint64_t)os_log_create("com.apple.siri.DialogEngine", "Request");
  }
  v11 = os_signpost_id_generate((os_log_t)siri::dialogengine::ParseRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog);
  v12 = v11 - 1;
  if (v11 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v13 = siri::dialogengine::ParseRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog;
    if (os_signpost_enabled((os_log_t)siri::dialogengine::ParseRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1BF794000, v13, OS_SIGNPOST_INTERVAL_BEGIN, v11, "ParseRequestFromVariable", "", (uint8_t *)buf, 2u);
    }
  }
  siri::dialogengine::Log::Info((siri::dialogengine::Log *)"BEGIN: ParseRequestFromVariable", v10);
  _ZNSt3__115allocate_sharedB8ne180100IN4siri12dialogengine7ContextENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(a5);
  memset(&v279, 0, sizeof(v279));
  memset(&__str, 0, sizeof(__str));
  memset(&v277, 0, sizeof(v277));
  memset(&v276, 0, sizeof(v276));
  siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)&v255);
  std::string::operator=(v258, a2);
  v14 = a1;
  std::string::operator=(&v263, a3);
  std::string::operator=(v272, a4);
  v15 = *a1;
  if (!*a1)
  {
    v21 = *a5;
    std::string::basic_string[abi:ne180100]<0>(buf, "request-error");
    std::string::basic_string[abi:ne180100]<0>(__p, "requestVars is NULL");
    std::string::operator=((std::string *)((char *)v21 + 688), buf);
    siri::dialogengine::Context::SetError((uint64_t)v21, (uint64_t)__p);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
    if (v12 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v22 = siri::dialogengine::ParseRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog;
      if (os_signpost_enabled((os_log_t)siri::dialogengine::ParseRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog))
      {
        LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
        _os_signpost_emit_with_name_impl(&dword_1BF794000, v22, OS_SIGNPOST_INTERVAL_END, v11, "ParseRequestFromVariable", "", (uint8_t *)buf, 2u);
      }
    }
    siri::dialogengine::RequestInfo::~RequestInfo(&v255);
    buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v276;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v277.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v279.__r_.__value_.__l.__data_);
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "createTrace");
  LOWORD(v253.__r_.__value_.__l.__data_) = 256;
  v254.__r_.__value_.__s.__data_[0] = 0;
  v254.__r_.__value_.__s.__data_[4] = 0;
  siri::dialogengine::FindVariableBool(v15, (const void **)&__p[0].__r_.__value_.__l.__data_, (char *)&v253, (int *)&v254, (uint64_t)buf);
  v17 = (std::__shared_weak_count *)buf[0].__r_.__value_.__r.__words[2];
  v18 = *(unsigned __int8 *)(buf[0].__r_.__value_.__l.__size_ + 66);
  if (buf[0].__r_.__value_.__r.__words[2])
  {
    v19 = (unint64_t *)(buf[0].__r_.__value_.__r.__words[2] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!v18)
      goto LABEL_29;
    goto LABEL_28;
  }
  operator delete(__p[0].__r_.__value_.__l.__data_);
  if (v18)
  {
LABEL_28:
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Activate trace creation (and debug mode)", v16);
    v266 |= 0x11u;
  }
LABEL_29:
  v23 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&v254, "requestType");
  buf[0].__r_.__value_.__s.__data_[0] = 0;
  buf[1].__r_.__value_.__s.__data_[0] = 0;
  v253.__r_.__value_.__s.__data_[0] = 0;
  v253.__r_.__value_.__s.__data_[4] = 0;
  siri::dialogengine::FindVariableString(v23, (const void **)&v254.__r_.__value_.__l.__data_, (uint64_t)buf, (int *)&v253, (uint64_t)__p);
  if (buf[1].__r_.__value_.__s.__data_[0] && SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(v254.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v254.__r_.__value_.__l.__data_);
  if (!__p[0].__r_.__value_.__l.__size_)
  {
    v24 = 0;
    goto LABEL_54;
  }
  if (*(char *)(__p[0].__r_.__value_.__l.__size_ + 95) < 0)
    std::string::__init_copy_ctor_external(buf, *(const std::string::value_type **)(__p[0].__r_.__value_.__l.__size_ + 72), *(_QWORD *)(__p[0].__r_.__value_.__l.__size_ + 80));
  else
    buf[0] = *(std::string *)(__p[0].__r_.__value_.__l.__size_ + 72);
  std::string::basic_string[abi:ne180100]<0>(&v254, "visual");
  v25 = siri::dialogengine::StringsEqual((uint64_t)buf, (uint64_t)&v254);
  v26 = v25;
  if (SHIBYTE(v254.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v254.__r_.__value_.__l.__data_);
    if (v26)
      goto LABEL_41;
  }
  else if (v25)
  {
LABEL_41:
    v24 = 1;
    goto LABEL_52;
  }
  std::string::basic_string[abi:ne180100]<0>(&v254, "dialog");
  v27 = siri::dialogengine::StringsEqual((uint64_t)buf, (uint64_t)&v254);
  v28 = v27;
  if ((SHIBYTE(v254.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v27)
      goto LABEL_51;
LABEL_47:
    std::operator+<char>();
    v29 = std::string::append(&v253, "], defaulting to dialog");
    v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v254.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v254.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)&v254, 1u);
    if (SHIBYTE(v254.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v254.__r_.__value_.__l.__data_);
    if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v253.__r_.__value_.__l.__data_);
    goto LABEL_51;
  }
  operator delete(v254.__r_.__value_.__l.__data_);
  if (!v28)
    goto LABEL_47;
LABEL_51:
  v24 = 0;
LABEL_52:
  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf[0].__r_.__value_.__l.__data_);
LABEL_54:
  v31 = (std::__shared_weak_count *)__p[0].__r_.__value_.__r.__words[2];
  if (__p[0].__r_.__value_.__r.__words[2])
  {
    v32 = (unint64_t *)(__p[0].__r_.__value_.__r.__words[2] + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  LODWORD(v255) = v24;
  v34 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&v254, "templateDir");
  buf[0].__r_.__value_.__s.__data_[0] = 0;
  buf[1].__r_.__value_.__s.__data_[0] = 0;
  v253.__r_.__value_.__s.__data_[0] = 0;
  v253.__r_.__value_.__s.__data_[4] = 0;
  siri::dialogengine::FindVariableString(v34, (const void **)&v254.__r_.__value_.__l.__data_, (uint64_t)buf, (int *)&v253, (uint64_t)__p);
  if (buf[1].__r_.__value_.__s.__data_[0] && SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(v254.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v254.__r_.__value_.__l.__data_);
  if (!__p[0].__r_.__value_.__s.__data_[0])
  {
    v35 = 0;
LABEL_81:
    v38 = 1;
    goto LABEL_82;
  }
  if (__p[0].__r_.__value_.__s.__data_[1])
  {
    if (*(char *)(__p[0].__r_.__value_.__l.__size_ + 95) < 0)
      std::string::__init_copy_ctor_external(buf, *(const std::string::value_type **)(__p[0].__r_.__value_.__l.__size_ + 72), *(_QWORD *)(__p[0].__r_.__value_.__l.__size_ + 80));
    else
      buf[0] = *(std::string *)(__p[0].__r_.__value_.__l.__size_ + 72);
    if (SHIBYTE(v279.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v279.__r_.__value_.__l.__data_);
    v35 = 0;
    v279 = buf[0];
    goto LABEL_81;
  }
  v36 = *a5;
  std::string::basic_string[abi:ne180100]<0>(buf, "request-error");
  std::string::basic_string[abi:ne180100]<0>(&v254, "templateDir is not a string");
  std::string::operator=((std::string *)((char *)v36 + 688), buf);
  siri::dialogengine::Context::SetError((uint64_t)v36, (uint64_t)&v254);
  if (SHIBYTE(v254.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v254.__r_.__value_.__l.__data_);
  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf[0].__r_.__value_.__l.__data_);
  if (v12 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v37 = siri::dialogengine::ParseRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog;
    if (os_signpost_enabled((os_log_t)siri::dialogengine::ParseRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1BF794000, v37, OS_SIGNPOST_INTERVAL_END, v11, "ParseRequestFromVariable", "", (uint8_t *)buf, 2u);
    }
  }
  v38 = 0;
  v35 = 1;
LABEL_82:
  v39 = (std::__shared_weak_count *)__p[0].__r_.__value_.__r.__words[2];
  if (!__p[0].__r_.__value_.__r.__words[2])
    goto LABEL_86;
  v40 = (unint64_t *)(__p[0].__r_.__value_.__r.__words[2] + 8);
  do
    v41 = __ldaxr(v40);
  while (__stlxr(v41 - 1, v40));
  if (!v41)
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
    if (v38)
    {
LABEL_87:
      size = HIBYTE(v279.__r_.__value_.__r.__words[2]);
      if ((v279.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v279.__r_.__value_.__l.__size_;
      if (size)
      {
        if (!siri::dialogengine::DirExists((uint64_t *)&v279))
        {
          std::operator+<char>();
          siri::dialogengine::Log::LogWithLevel((uint64_t)buf, 1u);
          if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf[0].__r_.__value_.__l.__data_);
        }
      }
      siri::dialogengine::ValidateTemplateDir((uint64_t)&v279, &v254);
      v43 = *a1;
      std::string::basic_string[abi:ne180100]<0>(__p, "enableUpdates");
      LOWORD(v252.__r_.__value_.__l.__data_) = 256;
      v253.__r_.__value_.__s.__data_[0] = 0;
      v253.__r_.__value_.__s.__data_[4] = 0;
      siri::dialogengine::FindVariableBool(v43, (const void **)&__p[0].__r_.__value_.__l.__data_, (char *)&v252, (int *)&v253, (uint64_t)buf);
      v44 = (std::__shared_weak_count *)buf[0].__r_.__value_.__r.__words[2];
      v45 = *(unsigned __int8 *)(buf[0].__r_.__value_.__l.__size_ + 66);
      if (buf[0].__r_.__value_.__r.__words[2])
      {
        v46 = (unint64_t *)(buf[0].__r_.__value_.__r.__words[2] + 8);
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      v49 = !siri::dialogengine::DisableUpdates((uint64_t)&v279);
      if (v45)
        v50 = v49;
      else
        v50 = 0;
      if ((v50 & 1) != 0)
      {
        siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Enable updates", v48);
        v266 |= 8u;
      }
      siri::dialogengine::GetTemplateDirs((uint64_t)&v254, v50, (uint64_t)buf);
      std::vector<siri::dialogengine::UpdatableDir>::__assign_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>((uint64_t)&v256, (std::string *)buf[0].__r_.__value_.__l.__data_, (std::string *)buf[0].__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(buf[0].__r_.__value_.__l.__size_ - buf[0].__r_.__value_.__r.__words[0]) >> 5));
      __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
      std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      v51 = *a1;
      std::string::basic_string[abi:ne180100]<0>(__p, "isSpotlight");
      LOWORD(v252.__r_.__value_.__l.__data_) = 256;
      v253.__r_.__value_.__s.__data_[0] = 0;
      v253.__r_.__value_.__s.__data_[4] = 0;
      siri::dialogengine::FindVariableBool(v51, (const void **)&__p[0].__r_.__value_.__l.__data_, (char *)&v252, (int *)&v253, (uint64_t)buf);
      v53 = (std::__shared_weak_count *)buf[0].__r_.__value_.__r.__words[2];
      v54 = *(unsigned __int8 *)(buf[0].__r_.__value_.__l.__size_ + 66);
      if (buf[0].__r_.__value_.__r.__words[2])
      {
        v55 = (unint64_t *)(buf[0].__r_.__value_.__r.__words[2] + 8);
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p[0].__r_.__value_.__l.__data_);
        if (!v54)
        {
LABEL_117:
          v57 = *a1;
          std::string::basic_string[abi:ne180100]<0>(&v253, "catId");
          buf[0].__r_.__value_.__s.__data_[0] = 0;
          buf[1].__r_.__value_.__s.__data_[0] = 0;
          LODWORD(v252.__r_.__value_.__l.__data_) = 3;
          v252.__r_.__value_.__s.__data_[4] = 1;
          siri::dialogengine::FindVariableString(v57, (const void **)&v253.__r_.__value_.__l.__data_, (uint64_t)buf, (int *)&v252, (uint64_t)__p);
          if (buf[1].__r_.__value_.__s.__data_[0] && SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf[0].__r_.__value_.__l.__data_);
          if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v253.__r_.__value_.__l.__data_);
          if (__p[0].__r_.__value_.__l.__size_)
          {
            if (*(char *)(__p[0].__r_.__value_.__l.__size_ + 95) < 0)
              std::string::__init_copy_ctor_external(buf, *(const std::string::value_type **)(__p[0].__r_.__value_.__l.__size_ + 72), *(_QWORD *)(__p[0].__r_.__value_.__l.__size_ + 80));
            else
              buf[0] = *(std::string *)(__p[0].__r_.__value_.__l.__size_ + 72);
            v14 = a1;
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            __str = buf[0];
          }
          v58 = (std::__shared_weak_count *)__p[0].__r_.__value_.__r.__words[2];
          if (__p[0].__r_.__value_.__r.__words[2])
          {
            v59 = (unint64_t *)(__p[0].__r_.__value_.__r.__words[2] + 8);
            do
              v60 = __ldaxr(v59);
            while (__stlxr(v60 - 1, v59));
            if (!v60)
            {
              ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
              std::__shared_weak_count::__release_weak(v58);
            }
          }
          std::string::operator=(&v257, &__str);
          v61 = *v14;
          std::string::basic_string[abi:ne180100]<0>(&v253, "locale");
          buf[0].__r_.__value_.__s.__data_[0] = 0;
          buf[1].__r_.__value_.__s.__data_[0] = 0;
          LODWORD(v252.__r_.__value_.__l.__data_) = 1;
          v252.__r_.__value_.__s.__data_[4] = 1;
          siri::dialogengine::FindVariableString(v61, (const void **)&v253.__r_.__value_.__l.__data_, (uint64_t)buf, (int *)&v252, (uint64_t)__p);
          if (buf[1].__r_.__value_.__s.__data_[0] && SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(buf[0].__r_.__value_.__l.__data_);
          if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v253.__r_.__value_.__l.__data_);
          if (__p[0].__r_.__value_.__l.__size_)
          {
            if (*(char *)(__p[0].__r_.__value_.__l.__size_ + 95) < 0)
              std::string::__init_copy_ctor_external(&v253, *(const std::string::value_type **)(__p[0].__r_.__value_.__l.__size_ + 72), *(_QWORD *)(__p[0].__r_.__value_.__l.__size_ + 80));
            else
              v253 = *(std::string *)(__p[0].__r_.__value_.__l.__size_ + 72);
            siri::dialogengine::GetCanonicalLocale(&v253, 0, buf);
            if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v277.__r_.__value_.__l.__data_);
            v277 = buf[0];
            *((_BYTE *)&buf[0].__r_.__value_.__s + 23) = 0;
            buf[0].__r_.__value_.__s.__data_[0] = 0;
            if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v253.__r_.__value_.__l.__data_);
            siri::dialogengine::GetFallbackLocales((uint64_t)&v277, (uint64_t *)buf);
            std::vector<std::string>::__vdeallocate(&v276);
            v276 = (std::vector<std::string>)buf[0];
            memset(buf, 0, 24);
            v253.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v253);
          }
          v62 = (std::__shared_weak_count *)__p[0].__r_.__value_.__r.__words[2];
          if (__p[0].__r_.__value_.__r.__words[2])
          {
            v63 = (unint64_t *)(__p[0].__r_.__value_.__r.__words[2] + 8);
            do
              v64 = __ldaxr(v63);
            while (__stlxr(v64 - 1, v63));
            if (!v64)
            {
              ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
              std::__shared_weak_count::__release_weak(v62);
            }
          }
          std::string::operator=(&v264, &v277);
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v265, v276.__begin_, (__int128 *)v276.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v276.__end_ - (char *)v276.__begin_) >> 3));
          if (v276.__begin_ != v276.__end_)
          {
            if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0)
            {
              if (!a3->__r_.__value_.__l.__size_)
                goto LABEL_160;
              v66 = (uint64_t *)a3->__r_.__value_.__r.__words[0];
            }
            else
            {
              v66 = (uint64_t *)a3;
              if (!*((_BYTE *)&a3->__r_.__value_.__s + 23))
                goto LABEL_160;
            }
            siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Ignoring CAT 'locales' parameter - using specified CAT locale string '%s'", v65, v66);
          }
LABEL_160:
          if (!v24 && v276.__begin_ == v276.__end_)
          {
            v67 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
            if ((v67 & 0x80u) != 0)
              v67 = a3->__r_.__value_.__l.__size_;
            if (!v67)
            {
              v102 = *a5;
              std::string::basic_string[abi:ne180100]<0>(buf, "request-error");
              std::string::basic_string[abi:ne180100]<0>(__p, "No locale specified");
              std::string::operator=((std::string *)((char *)v102 + 688), buf);
              siri::dialogengine::Context::SetError((uint64_t)v102, (uint64_t)__p);
              if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p[0].__r_.__value_.__l.__data_);
              if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
                operator delete(buf[0].__r_.__value_.__l.__data_);
              if (v12 > 0xFFFFFFFFFFFFFFFDLL)
                goto LABEL_589;
              v103 = siri::dialogengine::ParseRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog;
              if (!os_signpost_enabled((os_log_t)siri::dialogengine::ParseRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog))
                goto LABEL_589;
              LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
              v104 = buf;
LABEL_279:
              _os_signpost_emit_with_name_impl(&dword_1BF794000, v103, OS_SIGNPOST_INTERVAL_END, v11, "ParseRequestFromVariable", "", (uint8_t *)v104, 2u);
LABEL_589:
              v35 = 1;
              goto LABEL_590;
            }
          }
          v68 = *v14;
          std::string::basic_string[abi:ne180100]<0>(buf, "dialogMetadata");
          v69 = std::__tree<std::string>::find<std::string>(v68 + 72, (const void **)&buf[0].__r_.__value_.__l.__data_);
          if (v68 + 80 == v69)
          {
            v71 = 0;
            v70 = 0;
            *(_OWORD *)&v244.__r_.__value_.__l.__data_ = 0uLL;
          }
          else
          {
            v70 = *(const void **)(v69 + 56);
            v71 = *(std::__shared_weak_count **)(v69 + 64);
            v244.__r_.__value_.__r.__words[0] = (std::string::size_type)v70;
            v244.__r_.__value_.__l.__size_ = (std::string::size_type)v71;
            if (v71)
            {
              p_shared_owners = (unint64_t *)&v71->__shared_owners_;
              do
                v73 = __ldxr(p_shared_owners);
              while (__stxr(v73 + 1, p_shared_owners));
            }
          }
          if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(buf[0].__r_.__value_.__l.__data_);
            if (v70)
            {
LABEL_173:
              if (v74)
              {
                v239 = (uint64_t *)a5;
                siri::dialogengine::VariableObject::GetValues(v74, &buf[0].__r_.__value_.__l.__data_);
                v76 = buf[0].__r_.__value_.__l.__size_;
                v75 = (const void **)buf[0].__r_.__value_.__r.__words[0];
                if (buf[0].__r_.__value_.__r.__words[0] == buf[0].__r_.__value_.__l.__size_)
                {
LABEL_201:
                  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
                  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                  v86 = 1;
                }
                else
                {
                  while (1)
                  {
                    v77 = (char *)*v75;
                    if (*((char *)*v75 + 31) < 0)
                    {
                      std::string::__init_copy_ctor_external(__p, *((const std::string::value_type **)v77 + 1), *((_QWORD *)v77 + 2));
                    }
                    else
                    {
                      v78 = *(_OWORD *)(v77 + 8);
                      __p[0].__r_.__value_.__r.__words[2] = *((_QWORD *)v77 + 3);
                      *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v78;
                    }
                    if (*v75
                    {
                      if (v79[95] < 0)
                        std::string::__init_copy_ctor_external(&v253, *((const std::string::value_type **)v79 + 9), *((_QWORD *)v79 + 10));
                      else
                        v253 = *(std::string *)(v79 + 3);
                      if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v84 = __p;
                      else
                        v84 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
                      siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Got dialog metadata for semantic concept category '%s'", v80, v84);
                      v252.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
                      v85 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v269, (const void **)&__p[0].__r_.__value_.__l.__data_, (__int128 **)&v252);
                      std::string::operator=((std::string *)(v85 + 7), &v253);
                      if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v253.__r_.__value_.__l.__data_);
                      v83 = 0;
                    }
                    else
                    {
                      v81 = *v239;
                      std::string::basic_string[abi:ne180100]<0>(&v253, "request-error");
                      std::string::basic_string[abi:ne180100]<0>(&v252, "JSON property dialogMetadata has a value that is not a string type");
                      std::string::operator=((std::string *)(v81 + 688), &v253);
                      siri::dialogengine::Context::SetError(v81, (uint64_t)&v252);
                      if (SHIBYTE(v252.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v252.__r_.__value_.__l.__data_);
                      if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v253.__r_.__value_.__l.__data_);
                      if (v12 <= 0xFFFFFFFFFFFFFFFDLL)
                      {
                        v82 = siri::dialogengine::ParseRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog;
                        if (os_signpost_enabled((os_log_t)siri::dialogengine::ParseRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog))
                        {
                          LOWORD(v253.__r_.__value_.__l.__data_) = 0;
                          _os_signpost_emit_with_name_impl(&dword_1BF794000, v82, OS_SIGNPOST_INTERVAL_END, v11, "ParseRequestFromVariable", "", (uint8_t *)&v253, 2u);
                        }
                      }
                      v83 = 1;
                      v35 = 1;
                    }
                    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                      operator delete(__p[0].__r_.__value_.__l.__data_);
                    if ((v83 & 1) != 0)
                      break;
                    v75 += 2;
                    if (v75 == (const void **)v76)
                      goto LABEL_201;
                  }
                  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
                  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                  v86 = 0;
                }
                a5 = (siri::dialogengine::Context **)v239;
                v14 = a1;
                if (!v71)
                  goto LABEL_219;
              }
              else
              {
                v87 = *a5;
                std::string::basic_string[abi:ne180100]<0>(buf, "request-error");
                std::string::basic_string[abi:ne180100]<0>(__p, "JSON property dialogMetadata is not an object type");
                std::string::operator=((std::string *)((char *)v87 + 688), buf);
                siri::dialogengine::Context::SetError((uint64_t)v87, (uint64_t)__p);
                if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p[0].__r_.__value_.__l.__data_);
                if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
                  operator delete(buf[0].__r_.__value_.__l.__data_);
                if (v12 <= 0xFFFFFFFFFFFFFFFDLL)
                {
                  v88 = siri::dialogengine::ParseRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog;
                  if (os_signpost_enabled((os_log_t)siri::dialogengine::ParseRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog))
                  {
                    LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
                    _os_signpost_emit_with_name_impl(&dword_1BF794000, v88, OS_SIGNPOST_INTERVAL_END, v11, "ParseRequestFromVariable", "", (uint8_t *)buf, 2u);
                  }
                }
                v86 = 0;
                v35 = 1;
                if (!v71)
                  goto LABEL_219;
              }
LABEL_216:
              v89 = (unint64_t *)&v71->__shared_owners_;
              do
                v90 = __ldaxr(v89);
              while (__stlxr(v90 - 1, v89));
              if (!v90)
              {
                ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                std::__shared_weak_count::__release_weak(v71);
                if (!v86)
                  goto LABEL_590;
LABEL_220:
                v91 = *v14;
                std::string::basic_string[abi:ne180100]<0>(&v253, "interactionId");
                buf[0].__r_.__value_.__s.__data_[0] = 0;
                buf[1].__r_.__value_.__s.__data_[0] = 0;
                v252.__r_.__value_.__s.__data_[0] = 0;
                v252.__r_.__value_.__s.__data_[4] = 0;
                siri::dialogengine::FindVariableString(v91, (const void **)&v253.__r_.__value_.__l.__data_, (uint64_t)buf, (int *)&v252, (uint64_t)__p);
                if (buf[1].__r_.__value_.__s.__data_[0] && SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
                  operator delete(buf[0].__r_.__value_.__l.__data_);
                if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v253.__r_.__value_.__l.__data_);
                if (__p[0].__r_.__value_.__s.__data_[0])
                {
                  if (!__p[0].__r_.__value_.__s.__data_[1])
                  {
                    v92 = *a5;
                    std::string::basic_string[abi:ne180100]<0>(buf, "request-error");
                    std::string::basic_string[abi:ne180100]<0>(&v253, "interactionId is not a string");
                    std::string::operator=((std::string *)((char *)v92 + 688), buf);
                    siri::dialogengine::Context::SetError((uint64_t)v92, (uint64_t)&v253);
                    if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v253.__r_.__value_.__l.__data_);
                    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
                      operator delete(buf[0].__r_.__value_.__l.__data_);
                    if (v12 <= 0xFFFFFFFFFFFFFFFDLL)
                    {
                      v93 = siri::dialogengine::ParseRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog;
                      if (os_signpost_enabled((os_log_t)siri::dialogengine::ParseRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog))
                      {
                        LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
                        _os_signpost_emit_with_name_impl(&dword_1BF794000, v93, OS_SIGNPOST_INTERVAL_END, v11, "ParseRequestFromVariable", "", (uint8_t *)buf, 2u);
                      }
                    }
                    v94 = 0;
                    v35 = 1;
                    goto LABEL_243;
                  }
                  if (*(char *)(__p[0].__r_.__value_.__l.__size_ + 95) < 0)
                    std::string::__init_copy_ctor_external(buf, *(const std::string::value_type **)(__p[0].__r_.__value_.__l.__size_ + 72), *(_QWORD *)(__p[0].__r_.__value_.__l.__size_ + 80));
                  else
                    buf[0] = *(std::string *)(__p[0].__r_.__value_.__l.__size_ + 72);
                  std::string::operator=(&__s, buf);
                  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
                    operator delete(buf[0].__r_.__value_.__l.__data_);
                }
                v94 = 1;
LABEL_243:
                v95 = (std::__shared_weak_count *)__p[0].__r_.__value_.__r.__words[2];
                if (!__p[0].__r_.__value_.__r.__words[2])
                  goto LABEL_247;
                v96 = (unint64_t *)(__p[0].__r_.__value_.__r.__words[2] + 8);
                do
                  v97 = __ldaxr(v96);
                while (__stlxr(v97 - 1, v96));
                if (v97)
                {
LABEL_247:
                  if (!v94)
                    goto LABEL_590;
LABEL_248:
                  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
                    std::string::__init_copy_ctor_external(buf, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
                  else
                    buf[0] = __s;
                  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
                    operator delete(buf[0].__r_.__value_.__l.__data_);
                  v98 = *v14;
                  std::string::basic_string[abi:ne180100]<0>(&v253, "executionRequestId");
                  buf[0].__r_.__value_.__s.__data_[0] = 0;
                  buf[1].__r_.__value_.__s.__data_[0] = 0;
                  v252.__r_.__value_.__s.__data_[0] = 0;
                  v252.__r_.__value_.__s.__data_[4] = 0;
                  siri::dialogengine::FindVariableString(v98, (const void **)&v253.__r_.__value_.__l.__data_, (uint64_t)buf, (int *)&v252, (uint64_t)__p);
                  if (buf[1].__r_.__value_.__s.__data_[0] && SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
                    operator delete(buf[0].__r_.__value_.__l.__data_);
                  if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v253.__r_.__value_.__l.__data_);
                  if (__p[0].__r_.__value_.__s.__data_[0])
                  {
                    if (!__p[0].__r_.__value_.__s.__data_[1])
                    {
                      v99 = *a5;
                      std::string::basic_string[abi:ne180100]<0>(buf, "request-error");
                      std::string::basic_string[abi:ne180100]<0>(&v253, "executionRequestId is not a string");
                      std::string::operator=((std::string *)((char *)v99 + 688), buf);
                      siri::dialogengine::Context::SetError((uint64_t)v99, (uint64_t)&v253);
                      if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v253.__r_.__value_.__l.__data_);
                      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
                        operator delete(buf[0].__r_.__value_.__l.__data_);
                      if (v12 <= 0xFFFFFFFFFFFFFFFDLL)
                      {
                        v100 = siri::dialogengine::ParseRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog;
                        if (os_signpost_enabled((os_log_t)siri::dialogengine::ParseRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog))
                        {
                          LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
                          _os_signpost_emit_with_name_impl(&dword_1BF794000, v100, OS_SIGNPOST_INTERVAL_END, v11, "ParseRequestFromVariable", "", (uint8_t *)buf, 2u);
                        }
                      }
                      v101 = 0;
                      v35 = 1;
LABEL_284:
                      v105 = (std::__shared_weak_count *)__p[0].__r_.__value_.__r.__words[2];
                      if (__p[0].__r_.__value_.__r.__words[2])
                      {
                        v106 = (unint64_t *)(__p[0].__r_.__value_.__r.__words[2] + 8);
                        do
                          v107 = __ldaxr(v106);
                        while (__stlxr(v107 - 1, v106));
                        if (!v107)
                        {
                          ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                          std::__shared_weak_count::__release_weak(v105);
                        }
                      }
                      if (!v101)
                        goto LABEL_590;
                      v108 = *v14;
                      std::string::basic_string[abi:ne180100]<0>(buf, "globalParameters");
                      v109 = std::__tree<std::string>::find<std::string>(v108 + 72, (const void **)&buf[0].__r_.__value_.__l.__data_);
                      if (v108 + 80 == v109)
                      {
                        v111 = 0;
                        v110 = 0;
                        *(_OWORD *)&v253.__r_.__value_.__l.__data_ = 0uLL;
                      }
                      else
                      {
                        v110 = *(const void **)(v109 + 56);
                        v111 = *(std::__shared_weak_count **)(v109 + 64);
                        v253.__r_.__value_.__r.__words[0] = (std::string::size_type)v110;
                        v253.__r_.__value_.__l.__size_ = (std::string::size_type)v111;
                        if (v111)
                        {
                          v112 = (unint64_t *)&v111->__shared_owners_;
                          do
                            v113 = __ldxr(v112);
                          while (__stxr(v113 + 1, v112));
                        }
                      }
                      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
                        operator delete(buf[0].__r_.__value_.__l.__data_);
                      if (v110)
                      {
                        if (v114)
                        {
                          v252.__r_.__value_.__r.__words[0] = (std::string::size_type)v114;
                          v252.__r_.__value_.__l.__size_ = (std::string::size_type)v111;
                          if (v111)
                          {
                            v115 = (unint64_t *)&v111->__shared_owners_;
                            do
                              v116 = __ldxr(v115);
                            while (__stxr(v116 + 1, v115));
                          }
                          siri::dialogengine::VariableObject::GetValues(v114, &buf[0].__r_.__value_.__l.__data_);
                          v118 = buf[0].__r_.__value_.__l.__size_;
                          v117 = (_QWORD *)buf[0].__r_.__value_.__r.__words[0];
                          if (buf[0].__r_.__value_.__r.__words[0] != buf[0].__r_.__value_.__l.__size_)
                          {
                            do
                            {
                              v119 = *v117;
                              if (*(char *)(*v117 + 31) < 0)
                              {
                                std::string::__init_copy_ctor_external(__p, *(const std::string::value_type **)(v119 + 8), *(_QWORD *)(v119 + 16));
                              }
                              else
                              {
                                v120 = *(_OWORD *)(v119 + 8);
                                __p[0].__r_.__value_.__r.__words[2] = *(_QWORD *)(v119 + 24);
                                *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v120;
                              }
                              GlobalParameter = siri::dialogengine::Context::GetGlobalParameter((uint64_t)*a5, (const void **)&__p[0].__r_.__value_.__l.__data_);
                              if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                                v123 = __p;
                              else
                                v123 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
                              if (GlobalParameter)
                              {
                                siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Store global parameter '%s'", v122, v123);
                                v124 = *a5;
                                v125 = (std::__shared_weak_count *)v117[1];
                                v251[0] = *v117;
                                v251[1] = (uint64_t)v125;
                                if (v125)
                                {
                                  v126 = (unint64_t *)&v125->__shared_owners_;
                                  do
                                    v127 = __ldxr(v126);
                                  while (__stxr(v127 + 1, v126));
                                }
                                siri::dialogengine::Context::AddVariable((uint64_t)v124, v251);
                                if (v125)
                                {
                                  v128 = (unint64_t *)&v125->__shared_owners_;
                                  do
                                    v129 = __ldaxr(v128);
                                  while (__stlxr(v129 - 1, v128));
                                  if (!v129)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
                                    std::__shared_weak_count::__release_weak(v125);
                                  }
                                }
                              }
                              else
                              {
                                siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Ignoring unsupported global parameter '%s'", v122, v123);
                              }
                              if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                                operator delete(__p[0].__r_.__value_.__l.__data_);
                              v117 += 2;
                              v14 = a1;
                            }
                            while (v117 != (_QWORD *)v118);
                            v111 = (std::__shared_weak_count *)v253.__r_.__value_.__l.__size_;
                          }
                          __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
                          std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                          std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v252);
                          v130 = 1;
                          v12 = v11 - 1;
                        }
                        else
                        {
                          *(_OWORD *)&v252.__r_.__value_.__l.__data_ = 0uLL;
                          v131 = *a5;
                          std::string::basic_string[abi:ne180100]<0>(buf, "request-error");
                          std::string::basic_string[abi:ne180100]<0>(__p, "JSON property globalParameters is not an object type");
                          std::string::operator=((std::string *)((char *)v131 + 688), buf);
                          siri::dialogengine::Context::SetError((uint64_t)v131, (uint64_t)__p);
                          if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                            operator delete(__p[0].__r_.__value_.__l.__data_);
                          if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
                            operator delete(buf[0].__r_.__value_.__l.__data_);
                          if (v12 <= 0xFFFFFFFFFFFFFFFDLL)
                          {
                            v132 = siri::dialogengine::ParseRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog;
                            if (os_signpost_enabled((os_log_t)siri::dialogengine::ParseRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog))
                            {
                              LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
                              _os_signpost_emit_with_name_impl(&dword_1BF794000, v132, OS_SIGNPOST_INTERVAL_END, v11, "ParseRequestFromVariable", "", (uint8_t *)buf, 2u);
                            }
                          }
                          std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v252);
                          v130 = 0;
                          v35 = 1;
                        }
                      }
                      else
                      {
                        v130 = 1;
                      }
                      if (v111)
                      {
                        v133 = (unint64_t *)&v111->__shared_owners_;
                        do
                          v134 = __ldaxr(v133);
                        while (__stlxr(v134 - 1, v133));
                        if (!v134)
                        {
                          ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
                          std::__shared_weak_count::__release_weak(v111);
                        }
                      }
                      if (!v130)
                        goto LABEL_590;
                      v135 = *v14;
                      std::string::basic_string[abi:ne180100]<0>(buf, "parameters");
                      v136 = std::__tree<std::string>::find<std::string>(v135 + 72, (const void **)&buf[0].__r_.__value_.__l.__data_);
                      if (v135 + 80 == v136)
                      {
                        v137 = 0;
                        *(_OWORD *)&v253.__r_.__value_.__l.__data_ = 0uLL;
                      }
                      else
                      {
                        v137 = *(void **)(v136 + 56);
                        v138 = *(_QWORD *)(v136 + 64);
                        v253.__r_.__value_.__r.__words[0] = (std::string::size_type)v137;
                        v253.__r_.__value_.__l.__size_ = v138;
                        if (v138)
                        {
                          v139 = (unint64_t *)(v138 + 8);
                          do
                            v140 = __ldxr(v139);
                          while (__stxr(v140 + 1, v139));
                        }
                      }
                      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
                      {
                        operator delete(buf[0].__r_.__value_.__l.__data_);
                        v137 = (void *)v253.__r_.__value_.__r.__words[0];
                      }
                      if (v137)
                      {
                        std::dynamic_pointer_cast[abi:ne180100]<siri::dialogengine::VariableObject,siri::dialogengine::Variable>(&v252, v137, v253.__r_.__value_.__l.__size_);
                        if (!v252.__r_.__value_.__r.__words[0])
                        {
                          v179 = *a5;
                          std::string::basic_string[abi:ne180100]<0>(buf, "request-error");
                          std::string::basic_string[abi:ne180100]<0>(__p, "JSON property parameters is not an object type");
                          std::string::operator=((std::string *)((char *)v179 + 688), buf);
                          siri::dialogengine::Context::SetError((uint64_t)v179, (uint64_t)__p);
                          if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                            operator delete(__p[0].__r_.__value_.__l.__data_);
                          if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
                            operator delete(buf[0].__r_.__value_.__l.__data_);
                          if (v12 <= 0xFFFFFFFFFFFFFFFDLL)
                          {
                            v180 = siri::dialogengine::ParseRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog;
                            if (os_signpost_enabled((os_log_t)siri::dialogengine::ParseRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog))
                            {
                              LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
                              _os_signpost_emit_with_name_impl(&dword_1BF794000, v180, OS_SIGNPOST_INTERVAL_END, v11, "ParseRequestFromVariable", "", (uint8_t *)buf, 2u);
                            }
                          }
                          std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v252);
                          std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v253);
                          goto LABEL_589;
                        }
                        siri::dialogengine::ConvertVariableObjToJSONObj((uint64_t **)__p, (siri::dialogengine *)v252.__r_.__value_.__l.__data_);
                        siri::dialogengine::ConstructJSONString(__p, buf);
                        std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)__p[0].__r_.__value_.__l.__size_);
                        std::string::operator=(&v259, buf);
                        v141 = v12;
                        siri::dialogengine::VariableObject::GetValues((siri::dialogengine::VariableObject *)v252.__r_.__value_.__l.__data_, &__p[0].__r_.__value_.__l.__data_);
                        v143 = __p[0].__r_.__value_.__l.__size_;
                        for (i = (uint64_t *)__p[0].__r_.__value_.__r.__words[0]; i != (uint64_t *)v143; i += 2)
                        {
                          v144 = *a5;
                          v145 = (std::__shared_weak_count *)i[1];
                          v250[0] = *i;
                          v250[1] = (uint64_t)v145;
                          if (v145)
                          {
                            v146 = (unint64_t *)&v145->__shared_owners_;
                            do
                              v147 = __ldxr(v146);
                            while (__stxr(v147 + 1, v146));
                          }
                          siri::dialogengine::Context::AddVariable((uint64_t)v144, v250);
                          if (v145)
                          {
                            v148 = (unint64_t *)&v145->__shared_owners_;
                            do
                              v149 = __ldaxr(v148);
                            while (__stlxr(v149 - 1, v148));
                            if (!v149)
                            {
                              ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
                              std::__shared_weak_count::__release_weak(v145);
                            }
                          }
                        }
                        v244.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
                        std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v244);
                        if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
                          operator delete(buf[0].__r_.__value_.__l.__data_);
                        std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v252);
                        v12 = v141;
                      }
                      std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v253);
                      v150 = *v14;
                      std::string::basic_string[abi:ne180100]<0>(__p, "debug");
                      LOWORD(v252.__r_.__value_.__l.__data_) = 256;
                      v253.__r_.__value_.__s.__data_[0] = 0;
                      v253.__r_.__value_.__s.__data_[4] = 0;
                      siri::dialogengine::FindVariableBool(v150, (const void **)&__p[0].__r_.__value_.__l.__data_, (char *)&v252, (int *)&v253, (uint64_t)buf);
                      v151 = *(unsigned __int8 *)(buf[0].__r_.__value_.__l.__size_ + 66);
                      std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&buf[0].__r_.__value_.__l.__size_);
                      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                        operator delete(__p[0].__r_.__value_.__l.__data_);
                      if (v151)
                      {
                        siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Activate debug mode", v152);
                        siri::dialogengine::Log::SetLogDebugMessages((siri::dialogengine::Log *)1);
                        v266 |= 1u;
                      }
                      v153 = *v14;
                      std::string::basic_string[abi:ne180100]<0>(__p, "test");
                      LOWORD(v252.__r_.__value_.__l.__data_) = 256;
                      v253.__r_.__value_.__s.__data_[0] = 0;
                      v253.__r_.__value_.__s.__data_[4] = 0;
                      siri::dialogengine::FindVariableBool(v153, (const void **)&__p[0].__r_.__value_.__l.__data_, (char *)&v252, (int *)&v253, (uint64_t)buf);
                      v154 = *(unsigned __int8 *)(buf[0].__r_.__value_.__l.__size_ + 66);
                      std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&buf[0].__r_.__value_.__l.__size_);
                      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                        operator delete(__p[0].__r_.__value_.__l.__data_);
                      if (v154)
                      {
                        siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Activate test mode", v155);
                        v266 |= 2u;
                      }
                      v156 = *v14;
                      std::string::basic_string[abi:ne180100]<0>(__p, "resetState");
                      LOWORD(v252.__r_.__value_.__l.__data_) = 256;
                      v253.__r_.__value_.__s.__data_[0] = 0;
                      v253.__r_.__value_.__s.__data_[4] = 0;
                      siri::dialogengine::FindVariableBool(v156, (const void **)&__p[0].__r_.__value_.__l.__data_, (char *)&v252, (int *)&v253, (uint64_t)buf);
                      v157 = *(unsigned __int8 *)(buf[0].__r_.__value_.__l.__size_ + 66);
                      std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&buf[0].__r_.__value_.__l.__size_);
                      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                        operator delete(__p[0].__r_.__value_.__l.__data_);
                      if (v157)
                      {
                        siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Reset dialog state", v158);
                        siri::dialogengine::DialogStateBase::Get(buf);
                        (*(void (**)(std::string::size_type, siri::dialogengine::Context *, std::string *))(*(_QWORD *)buf[0].__r_.__value_.__l.__data_ + 56))(buf[0].__r_.__value_.__r.__words[0], *a5, &__str);
                        std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)buf);
                        v266 |= 4u;
                      }
                      v159 = *v14;
                      std::string::basic_string[abi:ne180100]<0>(__p, "multiuser");
                      LOWORD(v252.__r_.__value_.__l.__data_) = 256;
                      v253.__r_.__value_.__s.__data_[0] = 0;
                      v253.__r_.__value_.__s.__data_[4] = 0;
                      siri::dialogengine::FindVariableBool(v159, (const void **)&__p[0].__r_.__value_.__l.__data_, (char *)&v252, (int *)&v253, (uint64_t)buf);
                      v160 = *(unsigned __int8 *)(buf[0].__r_.__value_.__l.__size_ + 66);
                      std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&buf[0].__r_.__value_.__l.__size_);
                      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                        operator delete(__p[0].__r_.__value_.__l.__data_);
                      if (v160)
                        v267 = 1;
                      v161 = *v14;
                      std::string::basic_string[abi:ne180100]<0>(__p, "grounding");
                      LOWORD(v252.__r_.__value_.__l.__data_) = 256;
                      v253.__r_.__value_.__s.__data_[0] = 0;
                      v253.__r_.__value_.__s.__data_[4] = 0;
                      siri::dialogengine::FindVariableBool(v161, (const void **)&__p[0].__r_.__value_.__l.__data_, (char *)&v252, (int *)&v253, (uint64_t)buf);
                      v162 = *(unsigned __int8 *)(buf[0].__r_.__value_.__l.__size_ + 66);
                      std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&buf[0].__r_.__value_.__l.__size_);
                      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                        operator delete(__p[0].__r_.__value_.__l.__data_);
                      if (v162)
                        v268 = 1;
                      v163 = *v14;
                      std::string::basic_string[abi:ne180100]<0>(__p, "deterministic");
                      LOWORD(v252.__r_.__value_.__l.__data_) = 256;
                      v253.__r_.__value_.__s.__data_[0] = 0;
                      v253.__r_.__value_.__s.__data_[4] = 0;
                      siri::dialogengine::FindVariableBool(v163, (const void **)&__p[0].__r_.__value_.__l.__data_, (char *)&v252, (int *)&v253, (uint64_t)buf);
                      if (*(_BYTE *)(buf[0].__r_.__value_.__l.__size_ + 66))
                      {
                        std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&buf[0].__r_.__value_.__l.__size_);
                        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                          operator delete(__p[0].__r_.__value_.__l.__data_);
                      }
                      else
                      {
                        IsDeterministic = siri::dialogengine::IsDeterministic(v164);
                        std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&buf[0].__r_.__value_.__l.__size_);
                        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                          operator delete(__p[0].__r_.__value_.__l.__data_);
                        if (!IsDeterministic)
                        {
LABEL_391:
                          v167 = *v14;
                          std::string::basic_string[abi:ne180100]<0>(__p, "switchFallthrough");
                          LOWORD(v252.__r_.__value_.__l.__data_) = 256;
                          v253.__r_.__value_.__s.__data_[0] = 0;
                          v253.__r_.__value_.__s.__data_[4] = 0;
                          siri::dialogengine::FindVariableBool(v167, (const void **)&__p[0].__r_.__value_.__l.__data_, (char *)&v252, (int *)&v253, (uint64_t)buf);
                          v168 = *(unsigned __int8 *)(buf[0].__r_.__value_.__l.__size_ + 66);
                          std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&buf[0].__r_.__value_.__l.__size_);
                          if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                            operator delete(__p[0].__r_.__value_.__l.__data_);
                          if (v168)
                            v266 |= 0x400u;
                          v169 = *v14;
                          std::string::basic_string[abi:ne180100]<0>(__p, "includeKeywords");
                          LOWORD(v252.__r_.__value_.__l.__data_) = 256;
                          v253.__r_.__value_.__s.__data_[0] = 0;
                          v253.__r_.__value_.__s.__data_[4] = 0;
                          siri::dialogengine::FindVariableBool(v169, (const void **)&__p[0].__r_.__value_.__l.__data_, (char *)&v252, (int *)&v253, (uint64_t)buf);
                          v170 = *(unsigned __int8 *)(buf[0].__r_.__value_.__l.__size_ + 66);
                          std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&buf[0].__r_.__value_.__l.__size_);
                          if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                            operator delete(__p[0].__r_.__value_.__l.__data_);
                          if (v170)
                            v266 |= 0x800u;
                          v171 = *v14;
                          std::string::basic_string[abi:ne180100]<0>(__p, "validateAttrs");
                          LOWORD(v252.__r_.__value_.__l.__data_) = 256;
                          v253.__r_.__value_.__s.__data_[0] = 0;
                          v253.__r_.__value_.__s.__data_[4] = 0;
                          siri::dialogengine::FindVariableBool(v171, (const void **)&__p[0].__r_.__value_.__l.__data_, (char *)&v252, (int *)&v253, (uint64_t)buf);
                          if (*(_BYTE *)(buf[0].__r_.__value_.__l.__size_ + 66))
                          {
                            std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&buf[0].__r_.__value_.__l.__size_);
                            if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                              operator delete(__p[0].__r_.__value_.__l.__data_);
                          }
                          else
                          {
                            ShouldValidateAttrs = siri::dialogengine::ShouldValidateAttrs(v172);
                            std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&buf[0].__r_.__value_.__l.__size_);
                            if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                              operator delete(__p[0].__r_.__value_.__l.__data_);
                            if (!ShouldValidateAttrs)
                            {
LABEL_406:
                              v175 = *v14;
                              std::string::basic_string[abi:ne180100]<0>(__p, "labelMode");
                              LOWORD(v252.__r_.__value_.__l.__data_) = 256;
                              v253.__r_.__value_.__s.__data_[0] = 0;
                              v253.__r_.__value_.__s.__data_[4] = 0;
                              siri::dialogengine::FindVariableBool(v175, (const void **)&__p[0].__r_.__value_.__l.__data_, (char *)&v252, (int *)&v253, (uint64_t)buf);
                              v176 = *(unsigned __int8 *)(buf[0].__r_.__value_.__l.__size_ + 66);
                              std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&buf[0].__r_.__value_.__l.__size_);
                              if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                                operator delete(__p[0].__r_.__value_.__l.__data_);
                              if (v176)
                              {
                                siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Activate label mode", v177);
                                v266 |= 0x200u;
                              }
                              v178 = *v14;
                              std::string::basic_string[abi:ne180100]<0>(&v253, "useCaseState");
                              buf[0].__r_.__value_.__s.__data_[0] = 0;
                              buf[1].__r_.__value_.__s.__data_[0] = 0;
                              v252.__r_.__value_.__s.__data_[0] = 0;
                              v252.__r_.__value_.__s.__data_[4] = 0;
                              siri::dialogengine::FindVariableString(v178, (const void **)&v253.__r_.__value_.__l.__data_, (uint64_t)buf, (int *)&v252, (uint64_t)__p);
                              if (buf[1].__r_.__value_.__s.__data_[0]
                                && SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
                              {
                                operator delete(buf[0].__r_.__value_.__l.__data_);
                              }
                              if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
                                operator delete(v253.__r_.__value_.__l.__data_);
                              if (__p[0].__r_.__value_.__s.__data_[0])
                              {
                                if (!__p[0].__r_.__value_.__s.__data_[1])
                                {
                                  v181 = *a5;
                                  std::string::basic_string[abi:ne180100]<0>(buf, "request-error");
                                  std::string::basic_string[abi:ne180100]<0>(&v253, "useCaseState is not a string");
                                  std::string::operator=((std::string *)((char *)v181 + 688), buf);
                                  siri::dialogengine::Context::SetError((uint64_t)v181, (uint64_t)&v253);
                                  if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
                                    operator delete(v253.__r_.__value_.__l.__data_);
                                  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
                                    operator delete(buf[0].__r_.__value_.__l.__data_);
                                  if (v12 > 0xFFFFFFFFFFFFFFFDLL)
                                    goto LABEL_492;
                                  v182 = siri::dialogengine::ParseRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog;
                                  if (!os_signpost_enabled((os_log_t)siri::dialogengine::ParseRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog))
                                    goto LABEL_492;
                                  LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
                                  goto LABEL_491;
                                }
                                if (*(char *)(__p[0].__r_.__value_.__l.__size_ + 95) < 0)
                                  std::string::__init_copy_ctor_external(buf, *(const std::string::value_type **)(__p[0].__r_.__value_.__l.__size_ + 72), *(_QWORD *)(__p[0].__r_.__value_.__l.__size_ + 80));
                                else
                                  buf[0] = *(std::string *)(__p[0].__r_.__value_.__l.__size_ + 72);
                                std::string::operator=(&v274, buf);
                                if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
                                  operator delete(buf[0].__r_.__value_.__l.__data_);
                              }
                              std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&__p[0].__r_.__value_.__l.__size_);
                              v183 = *v14;
                              std::string::basic_string[abi:ne180100]<0>(&v253, "familyState");
                              buf[0].__r_.__value_.__s.__data_[0] = 0;
                              buf[1].__r_.__value_.__s.__data_[0] = 0;
                              v252.__r_.__value_.__s.__data_[0] = 0;
                              v252.__r_.__value_.__s.__data_[4] = 0;
                              siri::dialogengine::FindVariableString(v183, (const void **)&v253.__r_.__value_.__l.__data_, (uint64_t)buf, (int *)&v252, (uint64_t)__p);
                              if (buf[1].__r_.__value_.__s.__data_[0]
                                && SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
                              {
                                operator delete(buf[0].__r_.__value_.__l.__data_);
                              }
                              if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
                                operator delete(v253.__r_.__value_.__l.__data_);
                              if (__p[0].__r_.__value_.__s.__data_[0])
                              {
                                if (!__p[0].__r_.__value_.__s.__data_[1])
                                {
                                  v184 = *a5;
                                  std::string::basic_string[abi:ne180100]<0>(buf, "request-error");
                                  std::string::basic_string[abi:ne180100]<0>(&v253, "familyState is not a string");
                                  std::string::operator=((std::string *)((char *)v184 + 688), buf);
                                  siri::dialogengine::Context::SetError((uint64_t)v184, (uint64_t)&v253);
                                  if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
                                    operator delete(v253.__r_.__value_.__l.__data_);
                                  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
                                    operator delete(buf[0].__r_.__value_.__l.__data_);
                                  if (v12 > 0xFFFFFFFFFFFFFFFDLL)
                                    goto LABEL_492;
                                  v182 = siri::dialogengine::ParseRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog;
                                  if (!os_signpost_enabled((os_log_t)siri::dialogengine::ParseRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog))
                                    goto LABEL_492;
                                  LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
                                  goto LABEL_491;
                                }
                                if (*(char *)(__p[0].__r_.__value_.__l.__size_ + 95) < 0)
                                  std::string::__init_copy_ctor_external(buf, *(const std::string::value_type **)(__p[0].__r_.__value_.__l.__size_ + 72), *(_QWORD *)(__p[0].__r_.__value_.__l.__size_ + 80));
                                else
                                  buf[0] = *(std::string *)(__p[0].__r_.__value_.__l.__size_ + 72);
                                std::string::operator=(&v275, buf);
                                if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
                                  operator delete(buf[0].__r_.__value_.__l.__data_);
                              }
                              std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&__p[0].__r_.__value_.__l.__size_);
                              v185 = *v14;
                              std::string::basic_string[abi:ne180100]<0>(&v253, "patternId");
                              buf[0].__r_.__value_.__s.__data_[0] = 0;
                              buf[1].__r_.__value_.__s.__data_[0] = 0;
                              v252.__r_.__value_.__s.__data_[0] = 0;
                              v252.__r_.__value_.__s.__data_[4] = 0;
                              siri::dialogengine::FindVariableString(v185, (const void **)&v253.__r_.__value_.__l.__data_, (uint64_t)buf, (int *)&v252, (uint64_t)__p);
                              if (buf[1].__r_.__value_.__s.__data_[0]
                                && SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
                              {
                                operator delete(buf[0].__r_.__value_.__l.__data_);
                              }
                              if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
                                operator delete(v253.__r_.__value_.__l.__data_);
                              if (__p[0].__r_.__value_.__s.__data_[0])
                              {
                                if (!__p[0].__r_.__value_.__s.__data_[1])
                                {
                                  v186 = *a5;
                                  std::string::basic_string[abi:ne180100]<0>(buf, "request-error");
                                  std::string::basic_string[abi:ne180100]<0>(&v253, "patternId is not a string");
                                  std::string::operator=((std::string *)((char *)v186 + 688), buf);
                                  siri::dialogengine::Context::SetError((uint64_t)v186, (uint64_t)&v253);
                                  if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
                                    operator delete(v253.__r_.__value_.__l.__data_);
                                  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
                                    operator delete(buf[0].__r_.__value_.__l.__data_);
                                  if (v12 > 0xFFFFFFFFFFFFFFFDLL)
                                    goto LABEL_492;
                                  v182 = siri::dialogengine::ParseRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog;
                                  if (!os_signpost_enabled((os_log_t)siri::dialogengine::ParseRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog))
                                    goto LABEL_492;
                                  LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
                                  goto LABEL_491;
                                }
                                if (*(char *)(__p[0].__r_.__value_.__l.__size_ + 95) < 0)
                                  std::string::__init_copy_ctor_external(buf, *(const std::string::value_type **)(__p[0].__r_.__value_.__l.__size_ + 72), *(_QWORD *)(__p[0].__r_.__value_.__l.__size_ + 80));
                                else
                                  buf[0] = *(std::string *)(__p[0].__r_.__value_.__l.__size_ + 72);
                                std::string::operator=(&v260, buf);
                                if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
                                  operator delete(buf[0].__r_.__value_.__l.__data_);
                              }
                              std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&__p[0].__r_.__value_.__l.__size_);
                              v187 = *v14;
                              std::string::basic_string[abi:ne180100]<0>(&v253, "responseMode");
                              buf[0].__r_.__value_.__s.__data_[0] = 0;
                              buf[1].__r_.__value_.__s.__data_[0] = 0;
                              v252.__r_.__value_.__s.__data_[0] = 0;
                              v252.__r_.__value_.__s.__data_[4] = 0;
                              siri::dialogengine::FindVariableString(v187, (const void **)&v253.__r_.__value_.__l.__data_, (uint64_t)buf, (int *)&v252, (uint64_t)__p);
                              if (buf[1].__r_.__value_.__s.__data_[0]
                                && SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
                              {
                                operator delete(buf[0].__r_.__value_.__l.__data_);
                              }
                              if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
                                operator delete(v253.__r_.__value_.__l.__data_);
                              if (!__p[0].__r_.__value_.__s.__data_[0])
                              {
LABEL_496:
                                std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&__p[0].__r_.__value_.__l.__size_);
                                v189 = *v14;
                                std::string::basic_string[abi:ne180100]<0>(__p, "randomSeed");
                                v253.__r_.__value_.__s.__data_[0] = 0;
                                v253.__r_.__value_.__s.__data_[8] = 0;
                                v252.__r_.__value_.__s.__data_[0] = 0;
                                v252.__r_.__value_.__s.__data_[4] = 0;
                                siri::dialogengine::FindVariableDouble(v189, (const void **)&__p[0].__r_.__value_.__l.__data_, (uint64_t)&v253, (int *)&v252, (uint64_t)buf);
                                if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                                  operator delete(__p[0].__r_.__value_.__l.__data_);
                                if (buf[0].__r_.__value_.__s.__data_[0])
                                {
                                  if (!buf[0].__r_.__value_.__s.__data_[1]
                                    || (v190 = *(double *)(buf[0].__r_.__value_.__l.__size_ + 72), v190 < 0.0)
                                    || v190 > 4294967300.0)
                                  {
                                    v192 = *a5;
                                    std::string::basic_string[abi:ne180100]<0>(__p, "request-error");
                                    std::string::basic_string[abi:ne180100]<0>(&v253, "randomSeed is not a non-negative integer or is out of range");
                                    std::string::operator=((std::string *)((char *)v192 + 688), __p);
                                    siri::dialogengine::Context::SetError((uint64_t)v192, (uint64_t)&v253);
                                    if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
                                      operator delete(v253.__r_.__value_.__l.__data_);
                                    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                                      operator delete(__p[0].__r_.__value_.__l.__data_);
                                    if (v12 <= 0xFFFFFFFFFFFFFFFDLL)
                                    {
                                      v193 = siri::dialogengine::ParseRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog;
                                      if (os_signpost_enabled((os_log_t)siri::dialogengine::ParseRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog))
                                      {
                                        LOWORD(__p[0].__r_.__value_.__l.__data_) = 0;
                                        _os_signpost_emit_with_name_impl(&dword_1BF794000, v193, OS_SIGNPOST_INTERVAL_END, v11, "ParseRequestFromVariable", "", (uint8_t *)__p, 2u);
                                      }
                                    }
                                    v194 = buf;
                                    goto LABEL_533;
                                  }
                                  v191 = v190;
                                }
                                else
                                {
                                  v191 = 0;
                                }
                                std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&buf[0].__r_.__value_.__l.__size_);
                                v261 = v191;
                                siri::dialogengine::RandomNumberGenerator::RandomNumberGenerator((siri::dialogengine::RandomNumberGenerator *)buf, v191);
                                if ((v266 & 2) != 0)
                                {
                                  if (v191)
                                    v196 = "Initialize random number generator with specified seed: %u";
                                  else
                                    v196 = "Initialize random number generator with auto-selected seed: %u";
                                  siri::dialogengine::Log::Info((siri::dialogengine::Log *)v196, v195, LODWORD(buf[0].__r_.__value_.__l.__data_));
                                }
                                memcpy((char *)*a5 + 936, buf, 0x9D0uLL);
                                v197 = *v14;
                                std::string::basic_string[abi:ne180100]<0>(&v253, "currentTime");
                                v252.__r_.__value_.__s.__data_[0] = 0;
                                v252.__r_.__value_.__s.__data_[8] = 0;
                                v244.__r_.__value_.__s.__data_[0] = 0;
                                v244.__r_.__value_.__s.__data_[4] = 0;
                                siri::dialogengine::FindVariableDouble(v197, (const void **)&v253.__r_.__value_.__l.__data_, (uint64_t)&v252, (int *)&v244, (uint64_t)__p);
                                if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
                                  operator delete(v253.__r_.__value_.__l.__data_);
                                if (!__p[0].__r_.__value_.__s.__data_[0])
                                  goto LABEL_536;
                                if (__p[0].__r_.__value_.__s.__data_[1])
                                {
                                  v200 = *(double *)(__p[0].__r_.__value_.__l.__size_ + 72);
                                  *(double *)&v243.__r_.__value_.__l.__data_ = v200;
                                  v201 = *a5;
                                  std::string::basic_string[abi:ne180100]<0>(&v253, "now");
                                  siri::dialogengine::Context::FindVariable(&v244, v201, &v253);
                                  std::dynamic_pointer_cast[abi:ne180100]<siri::dialogengine::VariableObject,siri::dialogengine::Variable>(&v252, v244.__r_.__value_.__l.__data_, v244.__r_.__value_.__l.__size_);
                                  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v244);
                                  if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
                                    operator delete(v253.__r_.__value_.__l.__data_);
                                  if (v252.__r_.__value_.__r.__words[0])
                                  {
                                    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Set the global variable 'now' from the value of 'currentTime': %lld", v202, (uint64_t)v200);
                                    v203 = v252.__r_.__value_.__r.__words[0];
                                    std::allocate_shared[abi:ne180100]<siri::dialogengine::VariableNumber,std::allocator<siri::dialogengine::VariableNumber>,char const(&)[5],double const&,void>(&v253, (double *)&v243);
                                    v248 = *(_OWORD *)&v253.__r_.__value_.__l.__data_;
                                    *(_OWORD *)&v253.__r_.__value_.__l.__data_ = 0uLL;
                                    siri::dialogengine::VariableObject::AddProperty(v203, (uint64_t *)&v248);
                                    std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v248);
                                    std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v253);
                                  }
                                  else
                                  {
                                    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Could not find global variable 'now' in order to apply 'currentTime' override", v202);
                                  }
                                  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v252);
LABEL_536:
                                  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&__p[0].__r_.__value_.__l.__size_);
                                  v206 = v14[1];
                                  v247[0] = *v14;
                                  v247[1] = v206;
                                  if (v206)
                                  {
                                    v207 = (unint64_t *)(v206 + 8);
                                    do
                                      v208 = __ldxr(v207);
                                    while (__stxr(v208 + 1, v207));
                                  }
                                  siri::dialogengine::ExtractUserSettings((siri::dialogengine *)v247, (const char *)1, (uint64_t)__p);
                                  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t)&v262, (__int128 *)__p[0].__r_.__value_.__l.__data_, (__int128 *)&__p[0].__r_.__value_.__r.__words[1]);
                                  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((_QWORD *)__p[0].__r_.__value_.__l.__size_);
                                  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)v247);
                                  v209 = *v14;
                                  std::string::basic_string[abi:ne180100]<0>(__p, "customPronunciations");
                                  v210 = std::__tree<std::string>::find<std::string>(v209 + 72, (const void **)&__p[0].__r_.__value_.__l.__data_);
                                  if (v209 + 80 == v210)
                                  {
                                    v212 = 0;
                                    lpsrc = 0;
                                    v246 = 0;
                                  }
                                  else
                                  {
                                    v211 = v210;
                                    v212 = *(void **)(v210 + 56);
                                    v213 = *(_QWORD *)(v211 + 64);
                                    lpsrc = v212;
                                    v246 = v213;
                                    if (v213)
                                    {
                                      v214 = (unint64_t *)(v213 + 8);
                                      do
                                        v215 = __ldxr(v214);
                                      while (__stxr(v215 + 1, v214));
                                    }
                                  }
                                  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                                  {
                                    operator delete(__p[0].__r_.__value_.__l.__data_);
                                    v212 = lpsrc;
                                  }
                                  if (v212)
                                  {
                                    if (v216)
                                    {
                                      v217 = v12;
                                      memset(&v253, 0, sizeof(v253));
                                      siri::dialogengine::VariableObject::GetValues(v216, &v252.__r_.__value_.__l.__data_);
                                      v219 = v252.__r_.__value_.__l.__size_;
                                      for (j = (const void **)v252.__r_.__value_.__r.__words[0];
                                            j != (const void **)v219;
                                            j += 2)
                                      {
                                        if (*j)
                                        {
                                          if (v220)
                                          {
                                            v221 = v220;
                                            if (v220[31] < 0)
                                            {
                                              std::string::__init_copy_ctor_external(&v244, *((const std::string::value_type **)v220 + 1), *((_QWORD *)v220 + 2));
                                            }
                                            else
                                            {
                                              v222 = *(_OWORD *)(v220 + 8);
                                              v244.__r_.__value_.__r.__words[2] = *((_QWORD *)v220 + 3);
                                              *(_OWORD *)&v244.__r_.__value_.__l.__data_ = v222;
                                            }
                                            if (v221[95] < 0)
                                              std::string::__init_copy_ctor_external(&v243, *((const std::string::value_type **)v221 + 9), *((_QWORD *)v221 + 10));
                                            else
                                              v243 = *(std::string *)(v221 + 3);
                                            if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0)
                                              std::string::__init_copy_ctor_external(__p, v244.__r_.__value_.__l.__data_, v244.__r_.__value_.__l.__size_);
                                            else
                                              __p[0] = v244;
                                            __p[1] = v243;
                                            memset(&v243, 0, sizeof(v243));
                                            std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100]((void **)&v253.__r_.__value_.__l.__data_, (__int128 *)__p);
                                            std::pair<std::string const,std::string>::~pair((uint64_t)__p);
                                            if (SHIBYTE(v243.__r_.__value_.__r.__words[2]) < 0)
                                              operator delete(v243.__r_.__value_.__l.__data_);
                                            if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0)
                                              operator delete(v244.__r_.__value_.__l.__data_);
                                          }
                                        }
                                      }
                                      __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v252;
                                      std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                                      v12 = v217;
                                      if (v253.__r_.__value_.__r.__words[0] != v253.__r_.__value_.__l.__size_)
                                        std::vector<std::pair<std::string,std::string>>::__assign_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(&v273, (std::string *)v253.__r_.__value_.__l.__data_, (std::string *)v253.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v253.__r_.__value_.__l.__size_ - v253.__r_.__value_.__r.__words[0]) >> 4));
                                      __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v253;
                                      std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
                                      v14 = a1;
                                    }
                                  }
                                  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&lpsrc);
                                  siri::dialogengine::SetResponseModeToVoiceOnlyIfDeviceIsHomePod(*a5, (siri::dialogengine::Context *)&v255, v223);
                                  siri::dialogengine::Log::Info((siri::dialogengine::Log *)"CAT Request (Dialog Engine 3400.54.1)", v224);
                                  has_internal_diagnostics = (siri::dialogengine *)os_variant_has_internal_diagnostics();
                                  if ((_DWORD)has_internal_diagnostics
                                    && siri::dialogengine::ShouldLogCATParameters(has_internal_diagnostics, v226))
                                  {
                                    v227 = os_signpost_id_generate((os_log_t)siri::dialogengine::ParseRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog);
                                    if (v227 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
                                    {
                                      v228 = siri::dialogengine::ParseRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog;
                                      if (os_signpost_enabled((os_log_t)siri::dialogengine::ParseRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog))
                                      {
                                        LOWORD(__p[0].__r_.__value_.__l.__data_) = 0;
                                        _os_signpost_emit_with_name_impl(&dword_1BF794000, v228, OS_SIGNPOST_INTERVAL_BEGIN, v227, "Log request data (Variable)", "", (uint8_t *)__p, 2u);
                                      }
                                    }
                                    v229 = v12;
                                    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E7938240;
                                    LOWORD(__p[0].__r_.__value_.__r.__words[1]) = 0;
                                    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&__p[0].__r_.__value_.__r.__words[2]);
                                    v242 = 0;
                                    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)*v14 + 16))(*v14, __p);
                                    std::stringbuf::str();
                                    v230 = std::string::insert(&v252, 0, "CAT Request Data (from Variable) = ");
                                    v231 = *(_OWORD *)&v230->__r_.__value_.__l.__data_;
                                    v253.__r_.__value_.__r.__words[2] = v230->__r_.__value_.__r.__words[2];
                                    *(_OWORD *)&v253.__r_.__value_.__l.__data_ = v231;
                                    v230->__r_.__value_.__l.__size_ = 0;
                                    v230->__r_.__value_.__r.__words[2] = 0;
                                    v230->__r_.__value_.__r.__words[0] = 0;
                                    siri::dialogengine::Log::LogWithLevel((uint64_t)&v253, 0);
                                    if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
                                      operator delete(v253.__r_.__value_.__l.__data_);
                                    if (SHIBYTE(v252.__r_.__value_.__r.__words[2]) < 0)
                                      operator delete(v252.__r_.__value_.__l.__data_);
                                    if (v227 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
                                    {
                                      v232 = siri::dialogengine::ParseRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog;
                                      if (os_signpost_enabled((os_log_t)siri::dialogengine::ParseRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog))
                                      {
                                        LOWORD(v253.__r_.__value_.__l.__data_) = 0;
                                        _os_signpost_emit_with_name_impl(&dword_1BF794000, v232, OS_SIGNPOST_INTERVAL_END, v227, "Log request data (Variable)", "", (uint8_t *)&v253, 2u);
                                      }
                                    }
                                    siri::dialogengine::VariableJSONPrinter::~VariableJSONPrinter((siri::dialogengine::VariableJSONPrinter *)__p);
                                    v12 = v229;
                                  }
                                  siri::dialogengine::Context::SetRequestInfo((uint64_t)*a5, (uint64_t)&v255);
                                  v233 = *a5;
                                  v234 = (siri::dialogengine::TraceWriter *)*((_QWORD *)*a5 + 431);
                                  v235 = *((_QWORD *)*a5 + 432);
                                  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v234;
                                  __p[0].__r_.__value_.__l.__size_ = v235;
                                  if (v235)
                                  {
                                    v236 = (unint64_t *)(v235 + 8);
                                    do
                                      v237 = __ldxr(v236);
                                    while (__stxr(v237 + 1, v236));
                                    v233 = *a5;
                                  }
                                  siri::dialogengine::TraceWriter::Initialize(v234, v233);
                                  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)__p);
                                  siri::dialogengine::ValidateRequestData(*a5, v238);
                                  if (v12 > 0xFFFFFFFFFFFFFFFDLL)
                                    goto LABEL_589;
                                  v103 = siri::dialogengine::ParseRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog;
                                  if (!os_signpost_enabled((os_log_t)siri::dialogengine::ParseRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog))
                                    goto LABEL_589;
                                  LOWORD(__p[0].__r_.__value_.__l.__data_) = 0;
                                  v104 = __p;
                                  goto LABEL_279;
                                }
                                siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"currentTime is not an integer", v199);
                                v204 = *a5;
                                std::string::basic_string[abi:ne180100]<0>(&v253, "request-error");
                                std::string::basic_string[abi:ne180100]<0>(&v252, "currentTime is not an integer");
                                std::string::operator=((std::string *)((char *)v204 + 688), &v253);
                                siri::dialogengine::Context::SetError((uint64_t)v204, (uint64_t)&v252);
                                if (SHIBYTE(v252.__r_.__value_.__r.__words[2]) < 0)
                                  operator delete(v252.__r_.__value_.__l.__data_);
                                if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
                                  operator delete(v253.__r_.__value_.__l.__data_);
                                if (v12 <= 0xFFFFFFFFFFFFFFFDLL)
                                {
                                  v205 = siri::dialogengine::ParseRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog;
                                  if (os_signpost_enabled((os_log_t)siri::dialogengine::ParseRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog))
                                  {
                                    LOWORD(v253.__r_.__value_.__l.__data_) = 0;
                                    _os_signpost_emit_with_name_impl(&dword_1BF794000, v205, OS_SIGNPOST_INTERVAL_END, v11, "ParseRequestFromVariable", "", (uint8_t *)&v253, 2u);
                                  }
                                }
                                v194 = __p;
LABEL_533:
                                std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v194->__r_.__value_.__l.__size_);
                                goto LABEL_589;
                              }
                              if (__p[0].__r_.__value_.__s.__data_[1])
                              {
                                if (*(char *)(__p[0].__r_.__value_.__l.__size_ + 95) < 0)
                                  std::string::__init_copy_ctor_external(buf, *(const std::string::value_type **)(__p[0].__r_.__value_.__l.__size_ + 72), *(_QWORD *)(__p[0].__r_.__value_.__l.__size_ + 80));
                                else
                                  buf[0] = *(std::string *)(__p[0].__r_.__value_.__l.__size_ + 72);
                                siri::dialogengine::RequestInfo::SetResponseMode((uint64_t)&v255, (unint64_t)buf);
                                if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
                                  operator delete(buf[0].__r_.__value_.__l.__data_);
                                goto LABEL_496;
                              }
                              v188 = *a5;
                              std::string::basic_string[abi:ne180100]<0>(buf, "request-error");
                              std::string::basic_string[abi:ne180100]<0>(&v253, "responseMode is not a string");
                              std::string::operator=((std::string *)((char *)v188 + 688), buf);
                              siri::dialogengine::Context::SetError((uint64_t)v188, (uint64_t)&v253);
                              if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
                                operator delete(v253.__r_.__value_.__l.__data_);
                              if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
                                operator delete(buf[0].__r_.__value_.__l.__data_);
                              if (v12 > 0xFFFFFFFFFFFFFFFDLL
                                || (v182 = siri::dialogengine::ParseRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog,
                                    !os_signpost_enabled((os_log_t)siri::dialogengine::ParseRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog)))
                              {
LABEL_492:
                                std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&__p[0].__r_.__value_.__l.__size_);
                                goto LABEL_589;
                              }
                              LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
LABEL_491:
                              _os_signpost_emit_with_name_impl(&dword_1BF794000, v182, OS_SIGNPOST_INTERVAL_END, v11, "ParseRequestFromVariable", "", (uint8_t *)buf, 2u);
                              goto LABEL_492;
                            }
                          }
                          siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Activate attribute validation", v173);
                          v266 |= 0x80u;
                          goto LABEL_406;
                        }
                      }
                      siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Activate deterministic mode (and reset dialog state)", v165);
                      siri::dialogengine::DialogStateBase::Get(buf);
                      (*(void (**)(std::string::size_type, siri::dialogengine::Context *, std::string *))(*(_QWORD *)buf[0].__r_.__value_.__l.__data_ + 56))(buf[0].__r_.__value_.__r.__words[0], *a5, &__str);
                      std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)buf);
                      v268 = 0;
                      v266 |= 0x44u;
                      goto LABEL_391;
                    }
                    if (*(char *)(__p[0].__r_.__value_.__l.__size_ + 95) < 0)
                      std::string::__init_copy_ctor_external(buf, *(const std::string::value_type **)(__p[0].__r_.__value_.__l.__size_ + 72), *(_QWORD *)(__p[0].__r_.__value_.__l.__size_ + 80));
                    else
                      buf[0] = *(std::string *)(__p[0].__r_.__value_.__l.__size_ + 72);
                    std::string::operator=(&v271, buf);
                    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
                      operator delete(buf[0].__r_.__value_.__l.__data_);
                  }
                  v101 = 1;
                  goto LABEL_284;
                }
                ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                std::__shared_weak_count::__release_weak(v95);
                if (v94)
                  goto LABEL_248;
LABEL_590:
                if (SHIBYTE(v254.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v254.__r_.__value_.__l.__data_);
                goto LABEL_592;
              }
LABEL_219:
              if (!v86)
                goto LABEL_590;
              goto LABEL_220;
            }
          }
          else if (v70)
          {
            goto LABEL_173;
          }
          v86 = 1;
          if (!v71)
            goto LABEL_219;
          goto LABEL_216;
        }
      }
      else if (!v54)
      {
        goto LABEL_117;
      }
      siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Activate spotlight mode", v52);
      v266 |= 0x100u;
      goto LABEL_117;
    }
  }
  else
  {
LABEL_86:
    if (v38)
      goto LABEL_87;
  }
LABEL_592:
  siri::dialogengine::RequestInfo::~RequestInfo(&v255);
  buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v276;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v277.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v279.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((v35 & 1) != 0)
      return;
    goto LABEL_598;
  }
  operator delete(v279.__r_.__value_.__l.__data_);
  if ((v35 & 1) == 0)
LABEL_598:
    std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)a5);
}

void sub_1BF983200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  uint64_t v59;
  uint64_t v60;

  a13 = &STACK[0xBD0];
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a59);
  if (SLOBYTE(STACK[0xC07]) < 0)
    operator delete((void *)STACK[0xBF0]);
  siri::dialogengine::RequestInfo::~RequestInfo((void **)&STACK[0xC10]);
  STACK[0xC10] = v60 - 224;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xC10]);
  if (*(char *)(v60 - 169) < 0)
    operator delete(*(void **)(v60 - 192));
  if (*(char *)(v60 - 137) < 0)
    operator delete(*(void **)(v60 - 160));
  if (*(char *)(v60 - 105) < 0)
    operator delete(*(void **)(v60 - 128));
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v59);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<siri::dialogengine::VariableNumber,std::allocator<siri::dialogengine::VariableNumber>,char const(&)[5],double const&,void>(_QWORD *a1, double *a2)
{
  _QWORD *v4;
  std::string __p;

  v4 = operator new(0x68uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E793A4E0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "secs");
  siri::dialogengine::VariableNumber::VariableNumber((uint64_t)(v4 + 3), &__p, *a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *a1 = v4 + 3;
  a1[1] = v4;
}

void sub_1BF983A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__shared_weak_count *v15;
  void *v17;

  if (a15 < 0)
    operator delete(__p);
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void siri::dialogengine::VariableJSONPrinter::~VariableJSONPrinter(siri::dialogengine::VariableJSONPrinter *this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (uint64_t *)MEMORY[0x1E0DE4F50];
  *(_QWORD *)this = off_1E7938240;
  v3 = *v2;
  *((_QWORD *)this + 2) = *v2;
  v4 = v2[9];
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 24) + 16) = v2[8];
  *((_QWORD *)this + 5) = MEMORY[0x1E0DE4FB8] + 16;
  *((_QWORD *)this + 4) = v4;
  if (*((char *)this + 127) < 0)
    operator delete(*((void **)this + 13));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C3B8D80C]((char *)this + 144);
}

{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (uint64_t *)MEMORY[0x1E0DE4F50];
  *(_QWORD *)this = off_1E7938240;
  v3 = *v2;
  *((_QWORD *)this + 2) = *v2;
  v4 = v2[9];
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 24) + 16) = v2[8];
  *((_QWORD *)this + 5) = MEMORY[0x1E0DE4FB8] + 16;
  *((_QWORD *)this + 4) = v4;
  if (*((char *)this + 127) < 0)
    operator delete(*((void **)this + 13));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C3B8D80C]((char *)this + 144);
  JUMPOUT(0x1C3B8D890);
}

void siri::dialogengine::PrepareRequestFromJson(const char *a1@<X0>, const std::string *a2@<X1>, const std::string *a3@<X2>, const std::string *a4@<X3>, siri::dialogengine::Context **a5@<X8>)
{
  unsigned __int8 v10;
  os_signpost_id_t v11;
  unint64_t v12;
  NSObject *v13;
  siri::dialogengine::Context *v14;
  _BOOL4 v17;
  NSObject *v18;
  siri::dialogengine::Context *v19;
  NSObject *v20;
  std::string __p;
  std::string v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  std::string __str;
  std::string buf;
  std::string v28;
  std::string v29[6];
  __int128 *v30;
  __int128 *v31;
  std::string v32[5];
  std::string v33[4];

  if ((v10 & 1) == 0
  {
    siri::dialogengine::PrepareRequestFromJson(std::string const&,std::string const&,std::string const&,std::string const&)::sSignpostLog = (uint64_t)os_log_create("com.apple.siri.DialogEngine", "Request");
  }
  v11 = os_signpost_id_generate((os_log_t)siri::dialogengine::PrepareRequestFromJson(std::string const&,std::string const&,std::string const&,std::string const&)::sSignpostLog);
  v12 = v11 - 1;
  if (v11 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v13 = siri::dialogengine::PrepareRequestFromJson(std::string const&,std::string const&,std::string const&,std::string const&)::sSignpostLog;
    if (os_signpost_enabled((os_log_t)siri::dialogengine::PrepareRequestFromJson(std::string const&,std::string const&,std::string const&,std::string const&)::sSignpostLog))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1BF794000, v13, OS_SIGNPOST_INTERVAL_BEGIN, v11, "PrepareRequestFromJson", "", (uint8_t *)&buf, 2u);
    }
  }
  siri::dialogengine::ParseRequestFromJson(a1, a2, a3, a4, a5);
  v14 = *a5;
  if (*a5)
  {
    if (*((char *)v14 + 711) < 0)
      std::string::__init_copy_ctor_external(&buf, *((const std::string::value_type **)v14 + 86), *((_QWORD *)v14 + 87));
    else
      buf = *(std::string *)((char *)v14 + 688);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    {
      if (buf.__r_.__value_.__l.__size_ != 13)
      {
        operator delete(buf.__r_.__value_.__l.__data_);
LABEL_29:
        siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)&buf, (siri::dialogengine::Context *)((char *)*a5 + 8));
        if (LODWORD(buf.__r_.__value_.__l.__data_) == 1)
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          std::vector<siri::dialogengine::UpdatableDir>::__init_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>(&v23, buf.__r_.__value_.__l.__size_, buf.__r_.__value_.__r.__words[2], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(buf.__r_.__value_.__r.__words[2] - buf.__r_.__value_.__l.__size_) >> 5));
          if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v22, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
          else
            v22 = v28;
          siri::dialogengine::FindVisualFile(&v23, (uint64_t)&v22, (uint64_t)&__str);
          std::string::operator=(v33, &__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v22.__r_.__value_.__l.__data_);
        }
        else
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          std::vector<siri::dialogengine::UpdatableDir>::__init_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>(&v23, buf.__r_.__value_.__l.__size_, buf.__r_.__value_.__r.__words[2], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(buf.__r_.__value_.__r.__words[2] - buf.__r_.__value_.__l.__size_) >> 5));
          if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v22, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
          else
            v22 = v28;
          siri::dialogengine::FindParamsFile(&v23, (uint64_t)&v22, (uint64_t)&__str);
          std::string::operator=(v29, &__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v22.__r_.__value_.__l.__data_);
          v22.__r_.__value_.__r.__words[0] = (std::string::size_type)&v23;
          std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
          v23 = 0;
          v24 = 0;
          v25 = 0;
          std::vector<siri::dialogengine::UpdatableDir>::__init_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>(&v23, buf.__r_.__value_.__l.__size_, buf.__r_.__value_.__r.__words[2], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(buf.__r_.__value_.__r.__words[2] - buf.__r_.__value_.__l.__size_) >> 5));
          memset(&v22, 0, sizeof(v22));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v22, v30, v31, 0xAAAAAAAAAAAAAAABLL * (((char *)v31 - (char *)v30) >> 3));
          if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&__p, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
          else
            __p = v28;
          siri::dialogengine::FindLocaleFile(&v23, (__int128 **)&v22, (uint64_t)&__p, (uint64_t)&__str);
          std::string::operator=(v32, &__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v22;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        }
        v22.__r_.__value_.__r.__words[0] = (std::string::size_type)&v23;
        std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
        siri::dialogengine::Context::SetRequestInfo((uint64_t)*a5, (uint64_t)&buf);
        siri::dialogengine::Context::Load(*a5);
        siri::dialogengine::ValidateParamAndVariableTypes(*a5, v19);
        if (v12 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v20 = siri::dialogengine::PrepareRequestFromJson(std::string const&,std::string const&,std::string const&,std::string const&)::sSignpostLog;
          if (os_signpost_enabled((os_log_t)siri::dialogengine::PrepareRequestFromJson(std::string const&,std::string const&,std::string const&,std::string const&)::sSignpostLog))
          {
            LOWORD(__str.__r_.__value_.__l.__data_) = 0;
            _os_signpost_emit_with_name_impl(&dword_1BF794000, v20, OS_SIGNPOST_INTERVAL_END, v11, "PrepareRequestFromJson", "", (uint8_t *)&__str, 2u);
          }
        }
        siri::dialogengine::RequestInfo::~RequestInfo((void **)&buf.__r_.__value_.__l.__data_);
        return;
      }
      v17 = *(_QWORD *)buf.__r_.__value_.__l.__data_ != 0x2D74736575716572
         || *(_QWORD *)(buf.__r_.__value_.__r.__words[0] + 5) != 0x726F7272652D7473;
      operator delete(buf.__r_.__value_.__l.__data_);
      if (v17)
        goto LABEL_29;
    }
    else
    {
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) != 13)
        goto LABEL_29;
      if (buf.__r_.__value_.__r.__words[0] != 0x2D74736575716572
        || *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 5) != 0x726F7272652D7473)
      {
        goto LABEL_29;
      }
    }
  }
  if (v12 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v18 = siri::dialogengine::PrepareRequestFromJson(std::string const&,std::string const&,std::string const&,std::string const&)::sSignpostLog;
    if (os_signpost_enabled((os_log_t)siri::dialogengine::PrepareRequestFromJson(std::string const&,std::string const&,std::string const&,std::string const&)::sSignpostLog))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1BF794000, v18, OS_SIGNPOST_INTERVAL_END, v11, "PrepareRequestFromJson", "", (uint8_t *)&buf, 2u);
    }
  }
}

void sub_1BF983FF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char **a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32)
{
  uint64_t v32;

  a9 = &a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  a16 = &a22;
  std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  siri::dialogengine::RequestInfo::~RequestInfo(&a32);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v32);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ValidateParamAndVariableTypes(siri::dialogengine *this, siri::dialogengine::Context *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  uint64_t Parameter;
  unint64_t *v16;
  unint64_t v17;
  size_t v18;
  size_t v19;
  std::string *v20;
  __int128 v21;
  size_t v22;
  BOOL IsArrayType;
  size_t v24;
  size_t v25;
  std::string *v26;
  size_t v27;
  const void *v28;
  size_t v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  std::string::size_type size;
  size_t v36;
  size_t v37;
  std::string *v38;
  std::string *v39;
  std::string::size_type v40;
  std::string::size_type v41;
  std::string *v42;
  std::string *v43;
  __int128 v44;
  std::string *v45;
  __int128 v46;
  std::string *v47;
  __int128 v48;
  std::string *v49;
  std::string::size_type v50;
  std::string *v51;
  __int128 v52;
  std::string *v53;
  __int128 v54;
  std::string *v55;
  std::string::size_type v56;
  std::string *v57;
  __int128 v58;
  std::string *v59;
  __int128 v60;
  void *v61;
  __int128 v62;
  std::string *v63;
  __int128 v64;
  std::string *v65;
  __int128 v66;
  std::string *v67;
  __int128 v68;
  std::string *v69;
  __int128 v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  __int128 *v74;
  __int128 *v75;
  BOOL v76;
  std::string v77;
  std::string v78;
  std::string v79;
  std::string v80;
  std::string v81;
  std::string v82;
  std::string v83;
  void *__p[2];
  std::string::size_type v85;
  std::string __str;
  std::string v87;
  std::string v88;
  std::string v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  __int128 *v92;
  _QWORD *v93[3];

  if (this)
  {
    v4 = *((_QWORD *)this + 63);
    v3 = (std::__shared_weak_count *)*((_QWORD *)this + 64);
    if (!v3)
      goto LABEL_8;
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v7 = (unint64_t *)&v3->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *, siri::dialogengine::Context *))v3->__on_zero_shared)(v3, a2);
      std::__shared_weak_count::__release_weak(v3);
      if (!v4)
        return;
    }
    else
    {
LABEL_8:
      if (!v4)
        return;
    }
    std::map<std::string,std::shared_ptr<siri::dialogengine::Variable>>::map[abi:ne180100]((uint64_t)&v92, (const void ***)this + 65);
    v9 = v92;
    if (v92 != (__int128 *)v93)
    {
      do
      {
        std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>::pair[abi:ne180100](&v89, v9 + 2);
        v10 = *((_QWORD *)this + 63);
        v11 = (std::__shared_weak_count *)*((_QWORD *)this + 64);
        v87.__r_.__value_.__r.__words[0] = v10;
        v87.__r_.__value_.__l.__size_ = (std::string::size_type)v11;
        if (v11)
        {
          v12 = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldxr(v12);
          while (__stxr(v13 + 1, v12));
        }
        if (*(char *)(v90 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&v88, *(const std::string::value_type **)(v90 + 8), *(_QWORD *)(v90 + 16));
        }
        else
        {
          v14 = *(_OWORD *)(v90 + 8);
          v88.__r_.__value_.__r.__words[2] = *(_QWORD *)(v90 + 24);
          *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v14;
        }
        Parameter = siri::dialogengine::File::GetParameter(v10, (unsigned __int8 **)&v88);
        if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v88.__r_.__value_.__l.__data_);
          if (!v11)
            goto LABEL_23;
        }
        else if (!v11)
        {
          goto LABEL_23;
        }
        v16 = (unint64_t *)&v11->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (v17)
        {
LABEL_23:
          if (Parameter)
            goto LABEL_24;
          goto LABEL_160;
        }
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
        if (Parameter)
        {
LABEL_24:
          if (*(char *)(Parameter + 55) < 0)
            std::string::__init_copy_ctor_external(&v88, *(const std::string::value_type **)(Parameter + 32), *(_QWORD *)(Parameter + 40));
          else
            v88 = *(std::string *)(Parameter + 32);
          if (*(char *)(v90 + 55) < 0)
            std::string::__init_copy_ctor_external(&v87, *(const std::string::value_type **)(v90 + 32), *(_QWORD *)(v90 + 40));
          else
            v87 = *(std::string *)(v90 + 32);
          if (siri::dialogengine::IsArrayType(&v88))
          {
            v18 = strlen((const char *)siri::dialogengine::TYPE_ARRAY);
            v19 = v18;
            if ((SHIBYTE(v87.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              if (v18 == HIBYTE(v87.__r_.__value_.__r.__words[2]))
              {
                v20 = &v87;
                goto LABEL_39;
              }
              goto LABEL_40;
            }
            if (v18 != v87.__r_.__value_.__l.__size_)
              goto LABEL_40;
            if (v18 == -1)
              std::string::__throw_out_of_range[abi:ne180100]();
            v20 = (std::string *)v87.__r_.__value_.__r.__words[0];
LABEL_39:
            if (memcmp(v20, (const void *)siri::dialogengine::TYPE_ARRAY, v19))
            {
LABEL_40:
              std::string::basic_string[abi:ne180100]<0>(&__str, "request-error");
              if (*(char *)(Parameter + 31) < 0)
              {
                std::string::__init_copy_ctor_external(&v80, *(const std::string::value_type **)(Parameter + 8), *(_QWORD *)(Parameter + 16));
              }
              else
              {
                v21 = *(_OWORD *)(Parameter + 8);
                v80.__r_.__value_.__r.__words[2] = *(_QWORD *)(Parameter + 24);
                *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v21;
              }
              v30 = std::string::insert(&v80, 0, "Type mismatch for CAT parameter '");
              v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
              v81.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v31;
              v30->__r_.__value_.__l.__size_ = 0;
              v30->__r_.__value_.__r.__words[2] = 0;
              v30->__r_.__value_.__r.__words[0] = 0;
              v32 = std::string::append(&v81, "': expected array type but received '");
              v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
              v82.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v33;
              v32->__r_.__value_.__l.__size_ = 0;
              v32->__r_.__value_.__r.__words[2] = 0;
              v32->__r_.__value_.__r.__words[0] = 0;
              if (*(char *)(v90 + 55) < 0)
                std::string::__init_copy_ctor_external(&v79, *(const std::string::value_type **)(v90 + 32), *(_QWORD *)(v90 + 40));
              else
                v79 = *(std::string *)(v90 + 32);
              if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v34 = &v79;
              else
                v34 = (std::string *)v79.__r_.__value_.__r.__words[0];
              if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                size = HIBYTE(v79.__r_.__value_.__r.__words[2]);
              else
                size = v79.__r_.__value_.__l.__size_;
              goto LABEL_141;
            }
          }
          if (siri::dialogengine::IsPrimitiveType((const void **)&v88.__r_.__value_.__l.__data_))
          {
            v22 = HIBYTE(v87.__r_.__value_.__r.__words[2]);
            goto LABEL_45;
          }
          IsArrayType = siri::dialogengine::IsArrayType(&v88);
          v22 = HIBYTE(v87.__r_.__value_.__r.__words[2]);
          if (IsArrayType)
          {
LABEL_45:
            v24 = strlen((const char *)siri::dialogengine::TYPE_ARRAY);
            v25 = v24;
            if ((v22 & 0x80) == 0)
            {
              if (v24 == v22)
              {
                v26 = &v87;
                goto LABEL_51;
              }
              v28 = (const void *)siri::dialogengine::TYPE_OBJECT;
              v29 = strlen((const char *)siri::dialogengine::TYPE_OBJECT);
LABEL_68:
              if (v29 == v22)
              {
                v39 = &v87;
                v27 = v22;
                goto LABEL_74;
              }
              goto LABEL_75;
            }
            v27 = v87.__r_.__value_.__l.__size_;
            if (v24 == v87.__r_.__value_.__l.__size_)
            {
              if (v24 == -1)
                std::string::__throw_out_of_range[abi:ne180100]();
              v26 = (std::string *)v87.__r_.__value_.__r.__words[0];
LABEL_51:
              if (memcmp(v26, (const void *)siri::dialogengine::TYPE_ARRAY, v25))
              {
                v28 = (const void *)siri::dialogengine::TYPE_OBJECT;
                v29 = strlen((const char *)siri::dialogengine::TYPE_OBJECT);
                if (((char)v22 & 0x80000000) == 0)
                  goto LABEL_68;
                v27 = v87.__r_.__value_.__l.__size_;
                goto LABEL_71;
              }
              goto LABEL_156;
            }
            v28 = (const void *)siri::dialogengine::TYPE_OBJECT;
            v29 = strlen((const char *)siri::dialogengine::TYPE_OBJECT);
LABEL_71:
            if (v29 == v27)
            {
              if (v27 == -1)
                std::string::__throw_out_of_range[abi:ne180100]();
              v39 = (std::string *)v87.__r_.__value_.__r.__words[0];
LABEL_74:
              if (!memcmp(v39, v28, v27))
              {
LABEL_156:
                if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v87.__r_.__value_.__l.__data_);
                if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v88.__r_.__value_.__l.__data_);
                goto LABEL_160;
              }
            }
LABEL_75:
            if ((v22 & 0x80u) == 0)
              v40 = v22;
            else
              v40 = v87.__r_.__value_.__l.__size_;
            v41 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
            if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v41 = v88.__r_.__value_.__l.__size_;
            if (v40 == v41)
            {
              if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v42 = &v88;
              else
                v42 = (std::string *)v88.__r_.__value_.__r.__words[0];
              if ((char)v22 < 0)
              {
                if (!memcmp(v87.__r_.__value_.__l.__data_, v42, v87.__r_.__value_.__l.__size_))
                  goto LABEL_156;
              }
              else
              {
                if (!v22)
                  goto LABEL_156;
                v43 = &v87;
                while (v43->__r_.__value_.__s.__data_[0] == v42->__r_.__value_.__s.__data_[0])
                {
                  v43 = (std::string *)((char *)v43 + 1);
                  v42 = (std::string *)((char *)v42 + 1);
                  if (!--v22)
                    goto LABEL_156;
                }
              }
            }
            std::string::basic_string[abi:ne180100]<0>(&__str, "request-error");
            if (*(char *)(Parameter + 31) < 0)
            {
              std::string::__init_copy_ctor_external(&v78, *(const std::string::value_type **)(Parameter + 8), *(_QWORD *)(Parameter + 16));
            }
            else
            {
              v44 = *(_OWORD *)(Parameter + 8);
              v78.__r_.__value_.__r.__words[2] = *(_QWORD *)(Parameter + 24);
              *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v44;
            }
            v45 = std::string::insert(&v78, 0, "Type mismatch for CAT parameter '");
            v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
            v79.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v46;
            v45->__r_.__value_.__l.__size_ = 0;
            v45->__r_.__value_.__r.__words[2] = 0;
            v45->__r_.__value_.__r.__words[0] = 0;
            v47 = std::string::append(&v79, "': expected '");
            v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
            v80.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v48;
            v47->__r_.__value_.__l.__size_ = 0;
            v47->__r_.__value_.__r.__words[2] = 0;
            v47->__r_.__value_.__r.__words[0] = 0;
            if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v49 = &v88;
            else
              v49 = (std::string *)v88.__r_.__value_.__r.__words[0];
            if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v50 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
            else
              v50 = v88.__r_.__value_.__l.__size_;
            v51 = std::string::append(&v80, (const std::string::value_type *)v49, v50);
            v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
            v81.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v52;
            v51->__r_.__value_.__l.__size_ = 0;
            v51->__r_.__value_.__r.__words[2] = 0;
            v51->__r_.__value_.__r.__words[0] = 0;
            v53 = std::string::append(&v81, "' but received '");
            v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
            v82.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v54;
            v53->__r_.__value_.__l.__size_ = 0;
            v53->__r_.__value_.__r.__words[2] = 0;
            v53->__r_.__value_.__r.__words[0] = 0;
            if (*(char *)(v90 + 55) < 0)
              std::string::__init_copy_ctor_external(&v77, *(const std::string::value_type **)(v90 + 32), *(_QWORD *)(v90 + 40));
            else
              v77 = *(std::string *)(v90 + 32);
            if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v55 = &v77;
            else
              v55 = (std::string *)v77.__r_.__value_.__r.__words[0];
            if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v56 = HIBYTE(v77.__r_.__value_.__r.__words[2]);
            else
              v56 = v77.__r_.__value_.__l.__size_;
            v57 = std::string::append(&v82, (const std::string::value_type *)v55, v56);
            v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
            v83.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v58;
            v57->__r_.__value_.__l.__size_ = 0;
            v57->__r_.__value_.__r.__words[2] = 0;
            v57->__r_.__value_.__r.__words[0] = 0;
            v59 = std::string::append(&v83, "'");
            v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
            v85 = v59->__r_.__value_.__r.__words[2];
            *(_OWORD *)__p = v60;
            v59->__r_.__value_.__l.__size_ = 0;
            v59->__r_.__value_.__r.__words[2] = 0;
            v59->__r_.__value_.__r.__words[0] = 0;
            std::string::operator=((std::string *)((char *)this + 688), &__str);
            siri::dialogengine::Context::SetError((uint64_t)this, (uint64_t)__p);
            if (SHIBYTE(v85) < 0)
              operator delete(__p[0]);
            if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v83.__r_.__value_.__l.__data_);
            if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v77.__r_.__value_.__l.__data_);
            if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v82.__r_.__value_.__l.__data_);
            if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v81.__r_.__value_.__l.__data_);
            if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v80.__r_.__value_.__l.__data_);
            if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v79.__r_.__value_.__l.__data_);
            if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
            {
              v61 = (void *)v78.__r_.__value_.__r.__words[0];
              goto LABEL_153;
            }
            goto LABEL_154;
          }
          v36 = strlen((const char *)siri::dialogengine::TYPE_OBJECT);
          v37 = v36;
          if ((*((_BYTE *)&v87.__r_.__value_.__s + 23) & 0x80) != 0)
          {
            if (v36 == v87.__r_.__value_.__l.__size_)
            {
              if (v36 == -1)
                std::string::__throw_out_of_range[abi:ne180100]();
              v38 = (std::string *)v87.__r_.__value_.__r.__words[0];
              goto LABEL_128;
            }
          }
          else if (v36 == HIBYTE(v87.__r_.__value_.__r.__words[2]))
          {
            v38 = &v87;
LABEL_128:
            if (!memcmp(v38, (const void *)siri::dialogengine::TYPE_OBJECT, v37))
              goto LABEL_45;
          }
          std::string::basic_string[abi:ne180100]<0>(&__str, "request-error");
          if (*(char *)(Parameter + 31) < 0)
          {
            std::string::__init_copy_ctor_external(&v80, *(const std::string::value_type **)(Parameter + 8), *(_QWORD *)(Parameter + 16));
          }
          else
          {
            v62 = *(_OWORD *)(Parameter + 8);
            v80.__r_.__value_.__r.__words[2] = *(_QWORD *)(Parameter + 24);
            *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v62;
          }
          v63 = std::string::insert(&v80, 0, "Type mismatch for CAT parameter '");
          v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
          v81.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v64;
          v63->__r_.__value_.__l.__size_ = 0;
          v63->__r_.__value_.__r.__words[2] = 0;
          v63->__r_.__value_.__r.__words[0] = 0;
          v65 = std::string::append(&v81, "': expected object type but received '");
          v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
          v82.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v66;
          v65->__r_.__value_.__l.__size_ = 0;
          v65->__r_.__value_.__r.__words[2] = 0;
          v65->__r_.__value_.__r.__words[0] = 0;
          if (*(char *)(v90 + 55) < 0)
            std::string::__init_copy_ctor_external(&v79, *(const std::string::value_type **)(v90 + 32), *(_QWORD *)(v90 + 40));
          else
            v79 = *(std::string *)(v90 + 32);
          if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v34 = &v79;
          else
            v34 = (std::string *)v79.__r_.__value_.__r.__words[0];
          if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v79.__r_.__value_.__r.__words[2]);
          else
            size = v79.__r_.__value_.__l.__size_;
LABEL_141:
          v67 = std::string::append(&v82, (const std::string::value_type *)v34, size);
          v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
          v83.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v68;
          v67->__r_.__value_.__l.__size_ = 0;
          v67->__r_.__value_.__r.__words[2] = 0;
          v67->__r_.__value_.__r.__words[0] = 0;
          v69 = std::string::append(&v83, "'");
          v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
          v85 = v69->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v70;
          v69->__r_.__value_.__l.__size_ = 0;
          v69->__r_.__value_.__r.__words[2] = 0;
          v69->__r_.__value_.__r.__words[0] = 0;
          std::string::operator=((std::string *)((char *)this + 688), &__str);
          siri::dialogengine::Context::SetError((uint64_t)this, (uint64_t)__p);
          if (SHIBYTE(v85) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v83.__r_.__value_.__l.__data_);
          if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v79.__r_.__value_.__l.__data_);
          if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v82.__r_.__value_.__l.__data_);
          if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v81.__r_.__value_.__l.__data_);
          if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
          {
            v61 = (void *)v80.__r_.__value_.__r.__words[0];
LABEL_153:
            operator delete(v61);
          }
LABEL_154:
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          goto LABEL_156;
        }
LABEL_160:
        v71 = v91;
        if (v91)
        {
          v72 = (unint64_t *)&v91->__shared_owners_;
          do
            v73 = __ldaxr(v72);
          while (__stlxr(v73 - 1, v72));
          if (!v73)
          {
            ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
            std::__shared_weak_count::__release_weak(v71);
          }
        }
        if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v89.__r_.__value_.__l.__data_);
        v74 = (__int128 *)*((_QWORD *)v9 + 1);
        if (v74)
        {
          do
          {
            v75 = v74;
            v74 = *(__int128 **)v74;
          }
          while (v74);
        }
        else
        {
          do
          {
            v75 = (__int128 *)*((_QWORD *)v9 + 2);
            v76 = *(_QWORD *)v75 == (_QWORD)v9;
            v9 = v75;
          }
          while (!v76);
        }
        v9 = v75;
      }
      while (v75 != (__int128 *)v93);
    }
    std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(v93[0]);
  }
}

void sub_1BF984A88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  uint64_t v63;

  if (a49 < 0)
    operator delete(__p);
  if (a42 < 0)
    operator delete(a37);
  if (a35 < 0)
    operator delete(a30);
  if (*(char *)(v63 - 209) < 0)
    operator delete(*(void **)(v63 - 232));
  if (*(char *)(v63 - 185) < 0)
    operator delete(*(void **)(v63 - 208));
  if (*(char *)(v63 - 153) < 0)
    operator delete(*(void **)(v63 - 176));
  std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>::~pair(v63 - 152);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*(_QWORD **)(v63 - 104));
  _Unwind_Resume(a1);
}

void siri::dialogengine::PrepareRequestFromVariable(uint64_t *a1@<X0>, const std::string *a2@<X1>, const std::string *a3@<X2>, const std::string *a4@<X3>, siri::dialogengine::Context **a5@<X8>)
{
  unsigned __int8 v10;
  os_signpost_id_t v11;
  unint64_t v12;
  NSObject *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  siri::dialogengine::Context *v20;
  _BOOL4 v23;
  NSObject *v24;
  siri::dialogengine::Context *v25;
  NSObject *v26;
  std::string __p;
  std::string v28;
  __int128 *v29;
  uint64_t v30;
  uint64_t v31;
  std::string __str;
  std::string buf;
  std::string v34;
  std::string v35[6];
  __int128 *v36;
  __int128 *v37;
  std::string v38[5];
  std::string v39[4];
  uint64_t v40[2];

  if ((v10 & 1) == 0
  {
    siri::dialogengine::PrepareRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog = (uint64_t)os_log_create("com.apple.siri.DialogEngine", "Request");
  }
  v11 = os_signpost_id_generate((os_log_t)siri::dialogengine::PrepareRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog);
  v12 = v11 - 1;
  if (v11 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v13 = siri::dialogengine::PrepareRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog;
    if (os_signpost_enabled((os_log_t)siri::dialogengine::PrepareRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1BF794000, v13, OS_SIGNPOST_INTERVAL_BEGIN, v11, "PrepareRequestFromVariable", "", (uint8_t *)&buf, 2u);
    }
  }
  v14 = *a1;
  v15 = (std::__shared_weak_count *)a1[1];
  v40[0] = v14;
  v40[1] = (uint64_t)v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  siri::dialogengine::ParseRequestFromVariable(v40, a2, a3, a4, a5);
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v20 = *a5;
  if (*a5)
  {
    if (*((char *)v20 + 711) < 0)
      std::string::__init_copy_ctor_external(&buf, *((const std::string::value_type **)v20 + 86), *((_QWORD *)v20 + 87));
    else
      buf = *(std::string *)((char *)v20 + 688);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    {
      if (buf.__r_.__value_.__l.__size_ != 13)
      {
        operator delete(buf.__r_.__value_.__l.__data_);
LABEL_37:
        siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)&buf, (siri::dialogengine::Context *)((char *)*a5 + 8));
        if (LODWORD(buf.__r_.__value_.__l.__data_) == 1)
        {
          v29 = 0;
          v30 = 0;
          v31 = 0;
          std::vector<siri::dialogengine::UpdatableDir>::__init_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>(&v29, buf.__r_.__value_.__l.__size_, buf.__r_.__value_.__r.__words[2], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(buf.__r_.__value_.__r.__words[2] - buf.__r_.__value_.__l.__size_) >> 5));
          if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v28, v34.__r_.__value_.__l.__data_, v34.__r_.__value_.__l.__size_);
          else
            v28 = v34;
          siri::dialogengine::FindVisualFile(&v29, (uint64_t)&v28, (uint64_t)&__str);
          std::string::operator=(v39, &__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v28.__r_.__value_.__l.__data_);
        }
        else
        {
          v29 = 0;
          v30 = 0;
          v31 = 0;
          std::vector<siri::dialogengine::UpdatableDir>::__init_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>(&v29, buf.__r_.__value_.__l.__size_, buf.__r_.__value_.__r.__words[2], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(buf.__r_.__value_.__r.__words[2] - buf.__r_.__value_.__l.__size_) >> 5));
          if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v28, v34.__r_.__value_.__l.__data_, v34.__r_.__value_.__l.__size_);
          else
            v28 = v34;
          siri::dialogengine::FindParamsFile(&v29, (uint64_t)&v28, (uint64_t)&__str);
          std::string::operator=(v35, &__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v28.__r_.__value_.__l.__data_);
          v28.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
          std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
          v29 = 0;
          v30 = 0;
          v31 = 0;
          std::vector<siri::dialogengine::UpdatableDir>::__init_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>(&v29, buf.__r_.__value_.__l.__size_, buf.__r_.__value_.__r.__words[2], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(buf.__r_.__value_.__r.__words[2] - buf.__r_.__value_.__l.__size_) >> 5));
          memset(&v28, 0, sizeof(v28));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v28, v36, v37, 0xAAAAAAAAAAAAAAABLL * (((char *)v37 - (char *)v36) >> 3));
          if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&__p, v34.__r_.__value_.__l.__data_, v34.__r_.__value_.__l.__size_);
          else
            __p = v34;
          siri::dialogengine::FindLocaleFile(&v29, (__int128 **)&v28, (uint64_t)&__p, (uint64_t)&__str);
          std::string::operator=(v38, &__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v28;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        }
        v28.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
        std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
        siri::dialogengine::Context::SetRequestInfo((uint64_t)*a5, (uint64_t)&buf);
        siri::dialogengine::Context::Load(*a5);
        siri::dialogengine::ValidateParamAndVariableTypes(*a5, v25);
        if (v12 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v26 = siri::dialogengine::PrepareRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog;
          if (os_signpost_enabled((os_log_t)siri::dialogengine::PrepareRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog))
          {
            LOWORD(__str.__r_.__value_.__l.__data_) = 0;
            _os_signpost_emit_with_name_impl(&dword_1BF794000, v26, OS_SIGNPOST_INTERVAL_END, v11, "PrepareRequestFromVariable", "", (uint8_t *)&__str, 2u);
          }
        }
        siri::dialogengine::RequestInfo::~RequestInfo((void **)&buf.__r_.__value_.__l.__data_);
        return;
      }
      v23 = *(_QWORD *)buf.__r_.__value_.__l.__data_ != 0x2D74736575716572
         || *(_QWORD *)(buf.__r_.__value_.__r.__words[0] + 5) != 0x726F7272652D7473;
      operator delete(buf.__r_.__value_.__l.__data_);
      if (v23)
        goto LABEL_37;
    }
    else
    {
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) != 13)
        goto LABEL_37;
      if (buf.__r_.__value_.__r.__words[0] != 0x2D74736575716572
        || *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 5) != 0x726F7272652D7473)
      {
        goto LABEL_37;
      }
    }
  }
  if (v12 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v24 = siri::dialogengine::PrepareRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog;
    if (os_signpost_enabled((os_log_t)siri::dialogengine::PrepareRequestFromVariable(std::shared_ptr<siri::dialogengine::VariableObject>,std::string const&,std::string const&,std::string const&)::sSignpostLog))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1BF794000, v24, OS_SIGNPOST_INTERVAL_END, v11, "PrepareRequestFromVariable", "", (uint8_t *)&buf, 2u);
    }
  }
}

void sub_1BF9851C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char **a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32)
{
  uint64_t v32;

  a9 = &a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  a16 = &a22;
  std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  siri::dialogengine::RequestInfo::~RequestInfo(&a32);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v32);
  _Unwind_Resume(a1);
}

void siri::dialogengine::GenerateValidationResponse(siri::dialogengine *this@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  std::string::size_type size;
  std::string *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (***v19)(uint64_t);
  void (**v20)(uint64_t);
  BOOL v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  const char *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t i;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  std::string *v33;
  unsigned int v34;
  std::string *v35;
  unsigned int v36;
  std::string *v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t j;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  std::string *v44;
  unsigned int v45;
  std::string *v46;
  unsigned int v47;
  std::string *v48;
  unsigned int v49;
  char *String;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::string __p;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  __int16 v60;
  uint64_t v61;
  _BYTE v62[32];
  uint64_t v63;
  uint64_t v64;
  std::string v65;
  std::string v66;
  std::string v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  __int128 v70;
  std::string::size_type v71;
  __int128 v72;
  std::string::size_type v73;
  __int128 v74;
  std::string v75;
  std::string v76;
  std::string v77;
  _QWORD v78[3];

  v78[1] = *MEMORY[0x1E0C80C00];
  v72 = 0uLL;
  v73 = 0;
  v70 = 0uLL;
  v71 = 0;
  if (!this)
  {
    v68 = 0;
    v69 = 0;
    goto LABEL_47;
  }
  v5 = *((_QWORD *)this + 63);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 64);
  v68 = v5;
  v69 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  if (v5)
  {
    (*(void (**)(uint64_t, siri::dialogengine *))(*(_QWORD *)v5 + 16))(v5, this);
    std::vector<siri::dialogengine::ValidationEntry>::vector<std::__tree_const_iterator<siri::dialogengine::ValidationEntry,std::__tree_node<siri::dialogengine::ValidationEntry,void *> *,long>,0>(&v74, *(_QWORD **)(v5 + 568), (_QWORD *)(v5 + 576));
    std::vector<siri::dialogengine::ValidationEntry>::__vdeallocate((void **)&v72);
    v72 = v74;
    v73 = v75.__r_.__value_.__r.__words[0];
    v75.__r_.__value_.__r.__words[0] = 0;
    v74 = 0uLL;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v74;
    std::vector<siri::dialogengine::ValidationEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    std::vector<siri::dialogengine::ValidationEntry>::vector<std::__tree_const_iterator<siri::dialogengine::ValidationEntry,std::__tree_node<siri::dialogengine::ValidationEntry,void *> *,long>,0>(&v74, *(_QWORD **)(v5 + 592), (_QWORD *)(v5 + 600));
    std::vector<siri::dialogengine::ValidationEntry>::__vdeallocate((void **)&v70);
    v70 = v74;
    v71 = v75.__r_.__value_.__r.__words[0];
    v75.__r_.__value_.__r.__words[0] = 0;
    v74 = 0uLL;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v74;
    std::vector<siri::dialogengine::ValidationEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    goto LABEL_47;
  }
  if (*((char *)this + 711) < 0)
    std::string::__init_copy_ctor_external(&v66, *((const std::string::value_type **)this + 86), *((_QWORD *)this + 87));
  else
    v66 = *(std::string *)((char *)this + 688);
  v8 = std::string::insert(&v66, 0, "Could not load CAT file (");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v67.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = std::string::append(&v67, "): ");
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  *(_QWORD *)&v62[16] = *((_QWORD *)&v10->__r_.__value_.__l + 2);
  *(_OWORD *)v62 = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (*((char *)this + 735) < 0)
    std::string::__init_copy_ctor_external(&v65, *((const std::string::value_type **)this + 89), *((_QWORD *)this + 90));
  else
    v65 = *(std::string *)((char *)this + 712);
  if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = &v65;
  else
    v12 = (std::string *)v65.__r_.__value_.__r.__words[0];
  if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v65.__r_.__value_.__r.__words[2]);
  else
    size = v65.__r_.__value_.__l.__size_;
  v14 = std::string::append((std::string *)v62, (const std::string::value_type *)v12, size);
  __p = *v14;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v15 = siri::dialogengine::ValidationEntry::ValidationEntry((uint64_t)&v74, (__int128 *)&__p, 0);
  v16 = v72;
  if (v73 == (_QWORD)v72)
  {
    std::vector<siri::dialogengine::ValidationEntry>::__vdeallocate((void **)&v72);
    v22 = 0x5D1745D1745D1746 * ((uint64_t)(v73 - v72) >> 3);
    if (v22 <= 1)
      v22 = 1;
    if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v73 - v72) >> 3)) >= 0x1745D1745D1745DLL)
      v23 = 0x2E8BA2E8BA2E8BALL;
    else
      v23 = v22;
    std::vector<siri::dialogengine::ValidationEntry>::__vallocate[abi:ne180100](&v72, v23);
    v24 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::dialogengine::ValidationEntry>,siri::dialogengine::ValidationEntry const*,siri::dialogengine::ValidationEntry const*,siri::dialogengine::ValidationEntry*>((uint64_t)&v74, (uint64_t)v78, *((uint64_t *)&v72 + 1));
  }
  else
  {
    if (*((_QWORD *)&v72 + 1) != (_QWORD)v72)
    {
      *(_QWORD *)(v72 + 8) = *((_QWORD *)&v74 + 1);
      std::string::operator=((std::string *)(v16 + 16), &v75);
      std::string::operator=((std::string *)(v16 + 40), &v76);
      std::string::operator=((std::string *)(v16 + 64), &v77);
      v17 = v16 + 88;
      if (*((_QWORD *)&v72 + 1) != v16 + 88)
      {
        v18 = *((_QWORD *)&v72 + 1) - 88;
        v19 = (void (***)(uint64_t))(*((_QWORD *)&v72 + 1) - 88);
        do
        {
          v20 = *v19;
          v19 -= 11;
          (*v20)(v18);
          v21 = v18 == v17;
          v18 = (uint64_t)v19;
        }
        while (!v21);
      }
      *((_QWORD *)&v72 + 1) = v17;
      goto LABEL_35;
    }
    v24 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::dialogengine::ValidationEntry>,siri::dialogengine::ValidationEntry const*,siri::dialogengine::ValidationEntry const*,siri::dialogengine::ValidationEntry*>(v15, (uint64_t)v78, v72);
  }
  *((_QWORD *)&v72 + 1) = v24;
LABEL_35:
  *(_QWORD *)&v74 = off_1E7930350;
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v77.__r_.__value_.__l.__data_);
  siri::dialogengine::LineNumberBase::~LineNumberBase((void **)&v74);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v65.__r_.__value_.__l.__data_);
  if ((v62[23] & 0x80000000) != 0)
    operator delete(*(void **)v62);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v67.__r_.__value_.__l.__data_);
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v66.__r_.__value_.__l.__data_);
LABEL_47:
  memset(v62, 0, sizeof(v62));
  v63 = 0;
  v64 = 256;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v62;
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0u;
  v56 = 0u;
  v57 = 0;
  v58 = 512;
  v59 = 324;
  v60 = 0x2000;
  v61 = 4;
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartObject((uint64_t)&__p);
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&__p, 5);
  rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&__p, (uint64_t)"status", 6u);
  if (this)
  {
    if ((_QWORD)v72 == *((_QWORD *)&v72 + 1))
    {
      if ((_QWORD)v70 == *((_QWORD *)&v70 + 1))
        v25 = &siri::dialogengine::VALID;
      else
        v25 = &siri::dialogengine::WARNINGS;
    }
    else
    {
      v25 = (uint64_t *)siri::dialogengine::INVALID;
    }
  }
  else
  {
    v25 = (uint64_t *)&siri::dialogengine::ERROR;
  }
  v26 = (const char *)*v25;
  v27 = strlen((const char *)*v25);
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&__p, (uint64_t)v26, v27);
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&__p, 5);
  rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&__p, (uint64_t)"errors", 6u);
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartArray((uint64_t)&__p);
  v28 = *((_QWORD *)&v72 + 1);
  for (i = v72; i != v28; i += 88)
  {
    *(_QWORD *)&v74 = &off_1E793AEA8;
    *((_QWORD *)&v74 + 1) = *(_QWORD *)(i + 8);
    if (*(char *)(i + 39) < 0)
    {
      std::string::__init_copy_ctor_external(&v75, *(const std::string::value_type **)(i + 16), *(_QWORD *)(i + 24));
    }
    else
    {
      v30 = *(_OWORD *)(i + 16);
      v75.__r_.__value_.__r.__words[2] = *(_QWORD *)(i + 32);
      *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v30;
    }
    if (*(char *)(i + 63) < 0)
    {
      std::string::__init_copy_ctor_external(&v76, *(const std::string::value_type **)(i + 40), *(_QWORD *)(i + 48));
    }
    else
    {
      v31 = *(_OWORD *)(i + 40);
      v76.__r_.__value_.__r.__words[2] = *(_QWORD *)(i + 56);
      *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v31;
    }
    *(_QWORD *)&v74 = off_1E7930350;
    if (*(char *)(i + 87) < 0)
    {
      std::string::__init_copy_ctor_external(&v77, *(const std::string::value_type **)(i + 64), *(_QWORD *)(i + 72));
    }
    else
    {
      v32 = *(_OWORD *)(i + 64);
      v77.__r_.__value_.__r.__words[2] = *(_QWORD *)(i + 80);
      *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v32;
    }
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartObject((uint64_t)&__p);
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&__p, 5);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&__p, (uint64_t)"text", 4u);
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v67, v77.__r_.__value_.__l.__data_, v77.__r_.__value_.__l.__size_);
    else
      v67 = v77;
    if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v33 = &v67;
    else
      v33 = (std::string *)v67.__r_.__value_.__r.__words[0];
    v34 = strlen((const char *)v33);
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&__p, (uint64_t)v33, v34);
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v67.__r_.__value_.__l.__data_);
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&__p, 5);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&__p, (uint64_t)"textWithLineNumber", 0x12u);
    siri::dialogengine::ValidationEntry::GetFormattedText((siri::dialogengine::ValidationEntry *)&v74, &v67);
    if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v35 = &v67;
    else
      v35 = (std::string *)v67.__r_.__value_.__r.__words[0];
    v36 = strlen((const char *)v35);
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&__p, (uint64_t)v35, v36);
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v67.__r_.__value_.__l.__data_);
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&__p, 5);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&__p, (uint64_t)"lineNumber", 0xAu);
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Int64((uint64_t **)&__p, *((unint64_t *)&v74 + 1));
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&__p, 5);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&__p, (uint64_t)"filename", 8u);
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v67, v76.__r_.__value_.__l.__data_, v76.__r_.__value_.__l.__size_);
    else
      v67 = v76;
    if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v37 = &v67;
    else
      v37 = (std::string *)v67.__r_.__value_.__r.__words[0];
    v38 = strlen((const char *)v37);
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&__p, (uint64_t)v37, v38);
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v67.__r_.__value_.__l.__data_);
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndObject((uint64_t)&__p);
    *(_QWORD *)&v74 = off_1E7930350;
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v77.__r_.__value_.__l.__data_);
    siri::dialogengine::LineNumberBase::~LineNumberBase((void **)&v74);
  }
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndArray((uint64_t)&__p);
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&__p, 5);
  rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&__p, (uint64_t)"warnings", 8u);
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartArray((uint64_t)&__p);
  v39 = *((_QWORD *)&v70 + 1);
  for (j = v70; j != v39; j += 88)
  {
    *(_QWORD *)&v74 = &off_1E793AEA8;
    *((_QWORD *)&v74 + 1) = *(_QWORD *)(j + 8);
    if (*(char *)(j + 39) < 0)
    {
      std::string::__init_copy_ctor_external(&v75, *(const std::string::value_type **)(j + 16), *(_QWORD *)(j + 24));
    }
    else
    {
      v41 = *(_OWORD *)(j + 16);
      v75.__r_.__value_.__r.__words[2] = *(_QWORD *)(j + 32);
      *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v41;
    }
    if (*(char *)(j + 63) < 0)
    {
      std::string::__init_copy_ctor_external(&v76, *(const std::string::value_type **)(j + 40), *(_QWORD *)(j + 48));
    }
    else
    {
      v42 = *(_OWORD *)(j + 40);
      v76.__r_.__value_.__r.__words[2] = *(_QWORD *)(j + 56);
      *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v42;
    }
    *(_QWORD *)&v74 = off_1E7930350;
    if (*(char *)(j + 87) < 0)
    {
      std::string::__init_copy_ctor_external(&v77, *(const std::string::value_type **)(j + 64), *(_QWORD *)(j + 72));
    }
    else
    {
      v43 = *(_OWORD *)(j + 64);
      v77.__r_.__value_.__r.__words[2] = *(_QWORD *)(j + 80);
      *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v43;
    }
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartObject((uint64_t)&__p);
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&__p, 5);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&__p, (uint64_t)"text", 4u);
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v67, v77.__r_.__value_.__l.__data_, v77.__r_.__value_.__l.__size_);
    else
      v67 = v77;
    if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v44 = &v67;
    else
      v44 = (std::string *)v67.__r_.__value_.__r.__words[0];
    v45 = strlen((const char *)v44);
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&__p, (uint64_t)v44, v45);
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v67.__r_.__value_.__l.__data_);
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&__p, 5);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&__p, (uint64_t)"textWithLineNumber", 0x12u);
    siri::dialogengine::ValidationEntry::GetFormattedText((siri::dialogengine::ValidationEntry *)&v74, &v67);
    if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v46 = &v67;
    else
      v46 = (std::string *)v67.__r_.__value_.__r.__words[0];
    v47 = strlen((const char *)v46);
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&__p, (uint64_t)v46, v47);
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v67.__r_.__value_.__l.__data_);
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&__p, 5);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&__p, (uint64_t)"lineNumber", 0xAu);
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Int64((uint64_t **)&__p, *((unint64_t *)&v74 + 1));
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&__p, 5);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&__p, (uint64_t)"filename", 8u);
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v67, v76.__r_.__value_.__l.__data_, v76.__r_.__value_.__l.__size_);
    else
      v67 = v76;
    if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v48 = &v67;
    else
      v48 = (std::string *)v67.__r_.__value_.__r.__words[0];
    v49 = strlen((const char *)v48);
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&__p, (uint64_t)v48, v49);
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v67.__r_.__value_.__l.__data_);
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndObject((uint64_t)&__p);
    *(_QWORD *)&v74 = off_1E7930350;
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v77.__r_.__value_.__l.__data_);
    siri::dialogengine::LineNumberBase::~LineNumberBase((void **)&v74);
  }
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndArray((uint64_t)&__p);
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndObject((uint64_t)&__p);
  String = (char *)rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>::GetString((uint64_t *)v62);
  std::string::basic_string[abi:ne180100]<0>(a2, String);
  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy((uint64_t)&__p.__r_.__value_.__l.__size_);
  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy((uint64_t)v62);
  v51 = v69;
  if (v69)
  {
    v52 = (unint64_t *)&v69->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  *(_QWORD *)&v74 = &v70;
  std::vector<siri::dialogengine::ValidationEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
  *(_QWORD *)&v74 = &v72;
  std::vector<siri::dialogengine::ValidationEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
}

void sub_1BF985D68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,char a54,uint64_t a55,char a56)
{
  uint64_t v56;
  uint64_t v57;

  *(_QWORD *)(v57 - 216) = v56;
  siri::dialogengine::ValidationEntry::~ValidationEntry((void **)(v57 - 192));
  if (a16 < 0)
    operator delete(__p);
  if (a38 < 0)
    operator delete(a33);
  if (a29 < 0)
    operator delete(a24);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a54);
  *(_QWORD *)(v57 - 192) = &a56;
  std::vector<siri::dialogengine::ValidationEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)(v57 - 192));
  *(_QWORD *)(v57 - 192) = v57 - 224;
  std::vector<siri::dialogengine::ValidationEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)(v57 - 192));
  _Unwind_Resume(a1);
}

void std::vector<siri::dialogengine::ValidationEntry>::__vdeallocate(void **a1)
{
  char *v1;
  char *v3;
  void *v4;
  char *v5;
  char *v6;
  void (**v7)(char *);
  BOOL v8;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      v5 = v3 - 88;
      v6 = v3 - 88;
      do
      {
        v7 = *(void (***)(char *))v6;
        v6 -= 88;
        (*v7)(v5);
        v8 = v5 == v1;
        v5 = v6;
      }
      while (!v8);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::dialogengine::ValidationEntry>,siri::dialogengine::ValidationEntry const*,siri::dialogengine::ValidationEntry const*,siri::dialogengine::ValidationEntry*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    v6 = 0;
    do
    {
      std::allocator<siri::dialogengine::ValidationEntry>::construct[abi:ne180100]<siri::dialogengine::ValidationEntry,siri::dialogengine::ValidationEntry const&>(a3 + v6, a1 + v6);
      v6 += 88;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

void siri::dialogengine::GenerateResponse(uint64_t *__return_ptr a1@<X8>, siri::dialogengine *this@<X0>)
{
  const char *v4;
  const char *v5;
  char *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unsigned int v13;
  const char *v14;
  unsigned int v15;
  __int128 v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  std::string *v24;
  int v25;
  int v26;
  BOOL v27;
  std::string::size_type v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::string::size_type size;
  const char *v35;
  __int128 v36;
  std::string::size_type v37;
  const char *v38;
  std::string *v39;
  _BOOL4 IsAllowed;
  BOOL v41;
  char *v42;
  void *v43;
  const char *v44;
  std::string::size_type v45;
  __int128 v46;
  int v47;
  _BYTE *v48;
  _BYTE *v49;
  std::string *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  int v62;
  const void **i;
  std::string::size_type v64;
  char *v65;
  char *v66;
  std::string::size_type v67;
  std::string *v68;
  uint64_t v69;
  std::string *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  std::string::size_type v79;
  std::string::size_type v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  std::string::size_type v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  char *v90;
  char *v91;
  std::string::size_type v92;
  _QWORD *v93;
  std::string::size_type v94;
  __int128 v95;
  int64x2_t v96;
  std::string::size_type v97;
  int v98;
  siri::dialogengine *v99;
  std::string *v100;
  unsigned int v101;
  std::string *v102;
  unsigned int v103;
  const char *v104;
  char *v105;
  std::string::size_type v106;
  char *v107;
  unint64_t v108;
  uint64_t v109;
  const void *v110;
  siri::dialogengine::Node *v111;
  siri::dialogengine::Node *v112;
  std::string *v113;
  std::string *v114;
  std::string *v115;
  std::string *v116;
  std::string *v117;
  std::string::size_type v118;
  __int128 v119;
  std::string *v120;
  std::string *v121;
  std::string *v122;
  std::string *v123;
  char *v124;
  void **v125;
  char *v126;
  std::string *v127;
  void **v128;
  char *v129;
  std::string *v130;
  unint64_t v131;
  void **v132;
  uint64_t v133;
  std::string *v134;
  std::string *v135;
  int v136;
  std::string::size_type v137;
  const char *v138;
  std::string *v139;
  std::string *v140;
  std::string *v141;
  unsigned int v142;
  std::string *v143;
  unsigned int v144;
  std::string *v145;
  unsigned int v146;
  std::string *v147;
  unsigned int v148;
  std::string *v149;
  unsigned int v150;
  std::string::size_type v151;
  std::string *v152;
  unsigned int v153;
  std::string *v154;
  unsigned int v155;
  siri::dialogengine::Node *v156;
  std::string::size_type v157;
  std::string::size_type v158;
  std::string *v159;
  unsigned int v160;
  std::string *v161;
  unsigned int v162;
  std::string::size_type v163;
  std::string *v164;
  unsigned int v165;
  std::string *v166;
  unsigned int v167;
  std::string *v168;
  unsigned int v169;
  std::string *v170;
  unsigned int v171;
  std::string *v172;
  unsigned int v173;
  std::string *v174;
  unsigned int v175;
  _BOOL4 v176;
  int v177;
  _BOOL4 v178;
  int v179;
  int v180;
  int v181;
  siri::dialogengine *v182;
  uint64_t v183;
  void *v184;
  void *v185;
  uint64_t v186;
  unint64_t v187;
  unint64_t v188;
  char *v189;
  char *v190;
  char *v191;
  uint64_t v192;
  siri::dialogengine::VisualResponse *v193;
  siri::dialogengine::VisualResponse *v194;
  std::string *p_p;
  unsigned int v196;
  std::string *v197;
  unsigned int v198;
  siri::dialogengine *v199;
  std::string *v200;
  uint64_t v201;
  std::string *v202;
  std::string *v203;
  std::string *v204;
  char *v205;
  uint64_t v206;
  std::string *v207;
  unsigned int v208;
  std::string::size_type v209;
  std::string *v210;
  unsigned int v211;
  std::string *v212;
  unsigned int v213;
  std::string *v214;
  std::string *v215;
  uint64_t v216;
  unint64_t v217;
  std::string::size_type j;
  std::string::size_type v219;
  __int128 v220;
  std::string::size_type v221;
  char v222;
  std::string *v223;
  unsigned int v224;
  std::string *v225;
  unsigned int v226;
  siri::dialogengine::TraceWriter *v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  std::string *v231;
  unsigned int v232;
  unint64_t *v233;
  unint64_t v234;
  __int128 v235;
  double v236;
  double v237;
  double v238;
  double v239;
  std::string *v240;
  __int128 v241;
  std::string *v242;
  std::string::size_type v243;
  std::string *v244;
  __int128 v245;
  std::string *v246;
  __int128 v247;
  std::string *v248;
  std::string::size_type v249;
  std::string *v250;
  __int128 v251;
  uint64_t v252;
  std::__shared_weak_count *v253;
  unint64_t *v254;
  unint64_t v255;
  unint64_t *v256;
  unint64_t v257;
  char *String;
  uint64_t v259;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  unint64_t *v263;
  unint64_t v264;
  siri::dialogengine::Trace **v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  unint64_t *v269;
  unint64_t v270;
  std::__shared_weak_count *v271;
  unint64_t *v272;
  unint64_t v273;
  siri::dialogengine::Trace **v274;
  std::__shared_weak_count *v275;
  unint64_t *v276;
  unint64_t v277;
  unint64_t *v278;
  unint64_t v279;
  _BYTE *v280;
  uint64_t *v281;
  int data;
  int v283;
  siri::dialogengine *v284;
  char *v285;
  std::string *v286;
  char *v287;
  void **v288;
  std::string *v289;
  std::string *v290;
  std::string *v291;
  std::string *v292;
  int v293;
  std::string *v294;
  int v295;
  std::string *v296;
  unsigned int v297;
  char *v298;
  _BOOL4 v299;
  char v300;
  siri::dialogengine::Node *v301;
  std::string v302;
  std::string v303;
  std::string v304;
  std::string v305;
  void *v306[2];
  char v307;
  void *v308[2];
  char v309;
  void *v310[2];
  char v311;
  std::string v312;
  std::string v313;
  std::string v314;
  std::string v315;
  std::string v316;
  std::string v317;
  std::string v318;
  std::string v319;
  std::string v320;
  std::string v321;
  void *v322;
  char v323;
  void *v324;
  char v325;
  void *v326;
  char v327;
  void *v328;
  char v329;
  void *v330;
  char v331;
  std::string v332;
  std::string v333;
  void *v334;
  char v335;
  void *v336;
  char v337;
  void *v338;
  char v339;
  void *v340;
  char v341;
  void *v342;
  char v343;
  std::string v344;
  void *v345;
  _BYTE v346[32];
  uint64_t v347;
  uint64_t v348;
  int v349;
  __int16 v350;
  uint64_t v351;
  _BYTE v352[32];
  uint64_t v353;
  uint64_t v354;
  std::string v355;
  std::string v356;
  std::string v357;
  void *v358;
  char v359;
  void *v360;
  char v361;
  void *v362;
  char v363;
  void *v364;
  char v365;
  void *v366;
  unsigned int v367;
  char v368;
  unsigned int v369;
  std::string __p;
  __int128 v371;
  std::string v372;
  std::string v373;
  std::string v374;
  std::string v375;
  std::string v376;
  std::string v377[2];
  __int128 v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  __int128 v384;
  uint64_t v385;
  unsigned __int8 v386;
  uint64_t v387;

  v281 = a1;
  v387 = *MEMORY[0x1E0C80C00];
  if (siri::dialogengine::HasPreloadBeenCalled(this))
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Performance: DialogEngine preload has been called", v4);
  else
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Performance: DialogEngine preload has not been called. This is less significant on 2023 and later releases, but may lead to additional time loading schema and metadata", v4);
  memset(&v375, 0, sizeof(v375));
  memset(&v374, 0, sizeof(v374));
  memset(&v373, 0, sizeof(v373));
  memset(&v372, 0, sizeof(v372));
  v371 = 0uLL;
  std::string::basic_string[abi:ne180100]<0>(&__p, "dialog");
  v284 = this;
  if (!this)
  {
    MEMORY[0x1C3B8D53C](&v374, "internal-error");
    MEMORY[0x1C3B8D53C](&v373, "No context object provided.");
    v283 = 0;
    v295 = 0;
    v293 = 0;
    v297 = 0;
    v299 = 0;
    data = 0;
    goto LABEL_140;
  }
  siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)&v356, (siri::dialogengine *)((char *)this + 8));
  v5 = "";
  if (LODWORD(v356.__r_.__value_.__l.__data_) == 1)
    v5 = "visual";
  data = (int)v356.__r_.__value_.__l.__data_;
  if (LODWORD(v356.__r_.__value_.__l.__data_))
    v6 = (char *)v5;
  else
    v6 = "dialog";
  std::string::basic_string[abi:ne180100]<0>(v377, v6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = v377[0];
  v7 = *((_QWORD *)this + 433);
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 434);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v299 = v7 != 0;
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    v299 = v7 != 0;
  }
  v13 = v367;
  std::string::basic_string[abi:ne180100]<0>(v377, "alwaysDisplayDialog");
  siri::dialogengine::RequestInfo::GetUserSetting((uint64_t)&v356, (const void **)&v377[0].__r_.__value_.__l.__data_, &v355);
  if (SHIBYTE(v377[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v377[0].__r_.__value_.__l.__data_);
  v293 = siri::dialogengine::StringToBool(&v355);
  v15 = v369;
  if (*((char *)this + 711) < 0)
    std::string::__init_copy_ctor_external(v377, *((const std::string::value_type **)this + 86), *((_QWORD *)this + 87));
  else
    v377[0] = *(std::string *)((char *)this + 688);
  if (SHIBYTE(v374.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v374.__r_.__value_.__l.__data_);
  v374 = v377[0];
  v16 = *(_OWORD *)((char *)this + 504);
  v17 = *((_QWORD *)this + 64);
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v371 + 1);
  v371 = v16;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v371;
  if ((_QWORD)v371)
  {
    if (*(char *)(v371 + 127) < 0)
      std::string::__init_copy_ctor_external(v377, *(const std::string::value_type **)(v371 + 104), *(_QWORD *)(v371 + 112));
    else
      v377[0] = *(std::string *)(v371 + 104);
    if (SHIBYTE(v375.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v375.__r_.__value_.__l.__data_);
    v375 = v377[0];
    if ((v15 & 0x200) != 0)
    {
      siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Removing non-label content from file", v14);
      v377[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E7935898;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v23 + 24))(v23, v377);
    }
  }
  if (SHIBYTE(v374.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v374.__r_.__value_.__l.__size_ != 7)
      goto LABEL_132;
    v24 = (std::string *)v374.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (SHIBYTE(v374.__r_.__value_.__r.__words[2]) != 7)
      goto LABEL_132;
    v24 = &v374;
  }
  v25 = (int)v24->__r_.__value_.__l.__data_;
  v26 = *(_DWORD *)((char *)v24->__r_.__value_.__r.__words + 3);
  v27 = v25 == 1667462515 && v26 == 1936942435;
  if (v27 && v23 != 0)
  {
    v30 = *((_QWORD *)this + 63);
    v31 = (std::__shared_weak_count *)*((_QWORD *)this + 64);
    v344.__r_.__value_.__r.__words[0] = v30;
    v344.__r_.__value_.__l.__size_ = (std::string::size_type)v31;
    if (v31)
    {
      v32 = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    if (v30)
    {
      if (*(char *)(v30 + 127) < 0)
        std::string::__init_copy_ctor_external(&v332, *(const std::string::value_type **)(v30 + 104), *(_QWORD *)(v30 + 112));
      else
        v332 = *(std::string *)(v30 + 104);
      size = HIBYTE(v332.__r_.__value_.__r.__words[2]);
      if ((v332.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v332.__r_.__value_.__l.__size_;
      if (size)
      {
        siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)v377, (siri::dialogengine *)((char *)this + 8));
        memset(&v320, 0, sizeof(v320));
        std::vector<siri::dialogengine::UpdatableDir>::__init_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>(&v320, v377[0].__r_.__value_.__l.__size_, v377[0].__r_.__value_.__r.__words[2], 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v377[0].__r_.__value_.__r.__words[2] - v377[0].__r_.__value_.__l.__size_) >> 5));
        siri::dialogengine::RequestInfo::~RequestInfo((void **)&v377[0].__r_.__value_.__l.__data_);
        if (v320.__r_.__value_.__r.__words[0] == v320.__r_.__value_.__l.__size_)
        {
          siri::dialogengine::Log::Info((siri::dialogengine::Log *)"RequestInfo has no template dirs. Can't check grading allow list without a templateDir.", v35);
        }
        else
        {
          if (*(char *)(v320.__r_.__value_.__r.__words[0] + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v377, *(const std::string::value_type **)v320.__r_.__value_.__l.__data_, *(_QWORD *)(v320.__r_.__value_.__r.__words[0] + 8));
          }
          else
          {
            v36 = *(_OWORD *)v320.__r_.__value_.__l.__data_;
            v377[0].__r_.__value_.__r.__words[2] = *(_QWORD *)(v320.__r_.__value_.__r.__words[0] + 16);
            *(_OWORD *)&v377[0].__r_.__value_.__l.__data_ = v36;
          }
          v37 = HIBYTE(v377[0].__r_.__value_.__r.__words[2]);
          if ((v377[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v37 = v377[0].__r_.__value_.__l.__size_;
          if (v37)
          {
            siri::dialogengine::GradingAllowListFactory::GetAllowListForTemplateDir((char *)v377, (uint64_t *)&v319);
            if (v319.__r_.__value_.__r.__words[0])
            {
              v39 = &v332;
              IsAllowed = siri::dialogengine::GradingAllowList::IsAllowed((uint64_t *)v319.__r_.__value_.__l.__data_, (char *)&v332);
              v41 = IsAllowed;
              if ((v332.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v39 = (std::string *)v332.__r_.__value_.__r.__words[0];
              if (IsAllowed)
                v42 = "true";
              else
                v42 = "false";
              v43 = &v345;
              std::string::basic_string[abi:ne180100]<0>(&v345, v42);
              if (v346[15] < 0)
                v43 = v345;
              v45 = v319.__r_.__value_.__r.__words[0];
              if (*(char *)(v319.__r_.__value_.__r.__words[0] + 23) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)v352, *(const std::string::value_type **)v319.__r_.__value_.__l.__data_, *(_QWORD *)(v319.__r_.__value_.__r.__words[0] + 8));
                v45 = v319.__r_.__value_.__r.__words[0];
              }
              else
              {
                v46 = *(_OWORD *)v319.__r_.__value_.__l.__data_;
                *(_QWORD *)&v352[16] = *(_QWORD *)(v319.__r_.__value_.__r.__words[0] + 16);
                *(_OWORD *)v352 = v46;
              }
              v47 = v352[23];
              v48 = *(_BYTE **)v352;
              if (*(char *)(v45 + 47) < 0)
                std::string::__init_copy_ctor_external(&v376, *(const std::string::value_type **)(v45 + 24), *(_QWORD *)(v45 + 32));
              else
                v376 = *(std::string *)(v45 + 24);
              v49 = v352;
              if (v47 < 0)
                v49 = v48;
              v50 = &v376;
              if ((v376.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v50 = (std::string *)v376.__r_.__value_.__r.__words[0];
              siri::dialogengine::Log::Info((siri::dialogengine::Log *)"catId [%s] is approved for grading: %s\nBundle ID: %s\nAllow list: %s", v44, v39, v43, v49, v50);
              if (SHIBYTE(v376.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v376.__r_.__value_.__l.__data_);
              if ((v352[23] & 0x80000000) != 0)
                operator delete(*(void **)v352);
              if ((v346[15] & 0x80000000) != 0)
                operator delete(v345);
              *((_BYTE *)this + 736) = v41;
            }
            else
            {
              siri::dialogengine::Log::Info((siri::dialogengine::Log *)"No grading allow list found.", v38);
            }
            v51 = (std::__shared_weak_count *)v319.__r_.__value_.__l.__size_;
            if (v319.__r_.__value_.__l.__size_)
            {
              v52 = (unint64_t *)(v319.__r_.__value_.__l.__size_ + 8);
              do
                v53 = __ldaxr(v52);
              while (__stlxr(v53 - 1, v52));
              if (!v53)
              {
                ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                std::__shared_weak_count::__release_weak(v51);
              }
            }
          }
          else
          {
            siri::dialogengine::Log::Info((siri::dialogengine::Log *)"templateDir value is empty. Can't check grading allow list without a templateDir.", v35);
          }
          if (SHIBYTE(v377[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v377[0].__r_.__value_.__l.__data_);
        }
        v377[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v320;
        std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)v377);
      }
      else
      {
        siri::dialogengine::Log::Info((siri::dialogengine::Log *)"File has no catId. Can't check grading allow list without a catId.", v14);
      }
      if (SHIBYTE(v332.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v332.__r_.__value_.__l.__data_);
      v31 = (std::__shared_weak_count *)v344.__r_.__value_.__l.__size_;
      if (!v344.__r_.__value_.__l.__size_)
        goto LABEL_122;
    }
    else
    {
      siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Context has no File; therefore no catId. Can't check grading allow list without a catId.",
        v14);
      if (!v31)
      {
LABEL_122:
        v56 = *((_QWORD *)this + 431);
        v57 = (std::__shared_weak_count *)*((_QWORD *)this + 432);
        v377[0].__r_.__value_.__r.__words[0] = v56;
        v377[0].__r_.__value_.__l.__size_ = (std::string::size_type)v57;
        if (v57)
        {
          v58 = (unint64_t *)&v57->__shared_owners_;
          do
            v59 = __ldxr(v58);
          while (__stxr(v59 + 1, v58));
        }
        siri::dialogengine::TraceWriter::WriteDialogStateToFile(v56, (char *)this, 0);
        if (v57)
        {
          v60 = (unint64_t *)&v57->__shared_owners_;
          do
            v61 = __ldaxr(v60);
          while (__stlxr(v61 - 1, v60));
          if (!v61)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)v377, (siri::dialogengine *)((char *)this + 8));
        v62 = v386;
        siri::dialogengine::RequestInfo::~RequestInfo((void **)&v377[0].__r_.__value_.__l.__data_);
        if (!v62)
        {
          v274 = (siri::dialogengine::Trace **)*((_QWORD *)this + 431);
          v275 = (std::__shared_weak_count *)*((_QWORD *)this + 432);
          v377[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v274;
          v377[0].__r_.__value_.__l.__size_ = (std::string::size_type)v275;
          if (v275)
          {
            v276 = (unint64_t *)&v275->__shared_owners_;
            do
              v277 = __ldxr(v276);
            while (__stxr(v277 + 1, v276));
          }
          siri::dialogengine::TraceWriter::WriteExpandedParams(v274, this);
          if (v275)
          {
            v278 = (unint64_t *)&v275->__shared_owners_;
            do
              v279 = __ldaxr(v278);
            while (__stlxr(v279 - 1, v278));
            if (!v279)
            {
              ((void (*)(std::__shared_weak_count *))v275->__on_zero_shared)(v275);
              std::__shared_weak_count::__release_weak(v275);
            }
          }
        }
        siri::dialogengine::File::Execute((siri::dialogengine::File *)v371, (const void ***)this, (uint64_t)v377);
        std::vector<std::shared_ptr<siri::dialogengine::Node>>::__vdeallocate((void **)&v372.__r_.__value_.__l.__data_);
        v372 = v377[0];
        memset(v377, 0, 24);
        v332.__r_.__value_.__r.__words[0] = (std::string::size_type)v377;
        std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v332);
        goto LABEL_132;
      }
    }
    v54 = (unint64_t *)&v31->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
    goto LABEL_122;
  }
LABEL_132:
  if (*((char *)this + 735) < 0)
    std::string::__init_copy_ctor_external(v377, *((const std::string::value_type **)this + 89), *((_QWORD *)this + 90));
  else
    v377[0] = *(std::string *)((char *)this + 712);
  if (SHIBYTE(v373.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v373.__r_.__value_.__l.__data_);
  v295 = (v15 >> 9) & 1;
  v283 = (v15 >> 11) & 1;
  v373 = v377[0];
  if (SHIBYTE(v355.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v355.__r_.__value_.__l.__data_);
  v297 = v13;
  siri::dialogengine::RequestInfo::~RequestInfo((void **)&v356.__r_.__value_.__l.__data_);
LABEL_140:
  memset(&v376, 0, sizeof(v376));
  v64 = v372.__r_.__value_.__l.__size_;
  for (i = (const void **)v372.__r_.__value_.__r.__words[0]; i != (const void **)v64; i += 2)
  {
    if (*i)
    {
      memset(&v320, 0, sizeof(v320));
      if (v65)
      {
        v66 = v65;
        siri::dialogengine::SpeakableString::SpeakableString(v377, (const siri::dialogengine::SpeakableString *)(v65 + 208));
        siri::dialogengine::SpeakableString::SpeakableString(&v356, (const siri::dialogengine::SpeakableString *)(v66 + 376));
        v67 = v320.__r_.__value_.__l.__size_;
        if (v320.__r_.__value_.__l.__size_ >= v320.__r_.__value_.__r.__words[2])
        {
          v75 = 0xCF3CF3CF3CF3CF3DLL
              * ((uint64_t)(v320.__r_.__value_.__l.__size_ - v320.__r_.__value_.__r.__words[0]) >> 3);
          v76 = v75 + 1;
          if (v75 + 1 > 0x186186186186186)
            goto LABEL_750;
          if (0x9E79E79E79E79E7ALL
             * ((uint64_t)(v320.__r_.__value_.__r.__words[2] - v320.__r_.__value_.__r.__words[0]) >> 3) > v76)
            v76 = 0x9E79E79E79E79E7ALL
                * ((uint64_t)(v320.__r_.__value_.__r.__words[2] - v320.__r_.__value_.__r.__words[0]) >> 3);
          if (0xCF3CF3CF3CF3CF3DLL
             * ((uint64_t)(v320.__r_.__value_.__r.__words[2] - v320.__r_.__value_.__r.__words[0]) >> 3) >= 0xC30C30C30C30C3)
            v77 = 0x186186186186186;
          else
            v77 = v76;
          v333.__r_.__value_.__l.__size_ = (std::string::size_type)&v320.__r_.__value_.__r.__words[2];
          if (v77)
            v77 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<siri::dialogengine::SpeakableString>>(v77);
          else
            v78 = 0;
          v332.__r_.__value_.__r.__words[0] = v77;
          v332.__r_.__value_.__l.__size_ = v77 + 168 * v75;
          v332.__r_.__value_.__r.__words[2] = v332.__r_.__value_.__l.__size_;
          v333.__r_.__value_.__r.__words[0] = v77 + 168 * v78;
          siri::dialogengine::SpeakableString::SpeakableString((std::string *)v332.__r_.__value_.__l.__size_, (const siri::dialogengine::SpeakableString *)v377);
          v332.__r_.__value_.__r.__words[2] += 168;
          std::vector<siri::dialogengine::SpeakableString>::__swap_out_circular_buffer(&v320, &v332);
          v68 = (std::string *)v320.__r_.__value_.__l.__size_;
          std::__split_buffer<siri::dialogengine::SpeakableString>::~__split_buffer((uint64_t)&v332);
        }
        else
        {
          siri::dialogengine::SpeakableString::SpeakableString((std::string *)v320.__r_.__value_.__l.__size_, (const siri::dialogengine::SpeakableString *)v377);
          v68 = (std::string *)(v67 + 168);
        }
        v320.__r_.__value_.__l.__size_ = (std::string::size_type)v68;
        if ((unint64_t)v68 >= v320.__r_.__value_.__r.__words[2])
        {
          v81 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)((uint64_t)v68 - v320.__r_.__value_.__r.__words[0]) >> 3);
          v82 = v81 + 1;
          if (v81 + 1 > 0x186186186186186)
LABEL_750:
            std::vector<BOOL>::__throw_length_error[abi:ne180100]();
          if (0x9E79E79E79E79E7ALL
             * ((uint64_t)(v320.__r_.__value_.__r.__words[2] - v320.__r_.__value_.__r.__words[0]) >> 3) > v82)
            v82 = 0x9E79E79E79E79E7ALL
                * ((uint64_t)(v320.__r_.__value_.__r.__words[2] - v320.__r_.__value_.__r.__words[0]) >> 3);
          if (0xCF3CF3CF3CF3CF3DLL
             * ((uint64_t)(v320.__r_.__value_.__r.__words[2] - v320.__r_.__value_.__r.__words[0]) >> 3) >= 0xC30C30C30C30C3)
            v83 = 0x186186186186186;
          else
            v83 = v82;
          v333.__r_.__value_.__l.__size_ = (std::string::size_type)&v320.__r_.__value_.__r.__words[2];
          if (v83)
            v83 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<siri::dialogengine::SpeakableString>>(v83);
          else
            v84 = 0;
          v332.__r_.__value_.__r.__words[0] = v83;
          v332.__r_.__value_.__l.__size_ = v83 + 168 * v81;
          v332.__r_.__value_.__r.__words[2] = v332.__r_.__value_.__l.__size_;
          v333.__r_.__value_.__r.__words[0] = v83 + 168 * v84;
          siri::dialogengine::SpeakableString::SpeakableString((std::string *)v332.__r_.__value_.__l.__size_, (const siri::dialogengine::SpeakableString *)&v356);
          v332.__r_.__value_.__r.__words[2] += 168;
          std::vector<siri::dialogengine::SpeakableString>::__swap_out_circular_buffer(&v320, &v332);
          v80 = v320.__r_.__value_.__l.__size_;
          std::__split_buffer<siri::dialogengine::SpeakableString>::~__split_buffer((uint64_t)&v332);
        }
        else
        {
          siri::dialogengine::SpeakableString::SpeakableString(v68, (const siri::dialogengine::SpeakableString *)&v356);
          v80 = (std::string::size_type)&v68[7];
        }
        v320.__r_.__value_.__l.__size_ = v80;
        if (v368 < 0)
          operator delete(v366);
        if (v365 < 0)
          operator delete(v364);
        if (v363 < 0)
          operator delete(v362);
        if (v361 < 0)
          operator delete(v360);
        if (v359 < 0)
          operator delete(v358);
        if (SHIBYTE(v357.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v357.__r_.__value_.__l.__data_);
        if (SHIBYTE(v356.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v356.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v385) & 0x80000000) == 0)
          goto LABEL_197;
LABEL_196:
        operator delete((void *)v384);
        goto LABEL_197;
      }
    }
    else
    {
      memset(&v320, 0, sizeof(v320));
    }
    v385 = 0;
    v383 = 0u;
    v384 = 0u;
    v381 = 0u;
    v382 = 0u;
    v379 = 0u;
    v380 = 0u;
    v378 = 0u;
    memset(v377, 0, sizeof(v377));
    v357.__r_.__value_.__l.__size_ = (std::string::size_type)&v320.__r_.__value_.__r.__words[2];
    v356.__r_.__value_.__r.__words[0] = (std::string::size_type)std::__allocate_at_least[abi:ne180100]<std::allocator<siri::dialogengine::SpeakableString>>(1uLL);
    v356.__r_.__value_.__l.__size_ = v356.__r_.__value_.__r.__words[0];
    v356.__r_.__value_.__r.__words[2] = v356.__r_.__value_.__r.__words[0];
    v357.__r_.__value_.__r.__words[0] = v356.__r_.__value_.__r.__words[0] + 168 * v69;
    siri::dialogengine::SpeakableString::SpeakableString((std::string *)v356.__r_.__value_.__l.__data_, (const siri::dialogengine::SpeakableString *)v377);
    v356.__r_.__value_.__r.__words[2] += 168;
    std::vector<siri::dialogengine::SpeakableString>::__swap_out_circular_buffer(&v320, &v356);
    v70 = (std::string *)v320.__r_.__value_.__l.__size_;
    std::__split_buffer<siri::dialogengine::SpeakableString>::~__split_buffer((uint64_t)&v356);
    v320.__r_.__value_.__l.__size_ = (std::string::size_type)v70;
    v385 = 0;
    v383 = 0u;
    v384 = 0u;
    v381 = 0u;
    v382 = 0u;
    v379 = 0u;
    v380 = 0u;
    v378 = 0u;
    memset(v377, 0, sizeof(v377));
    if ((unint64_t)v70 >= v320.__r_.__value_.__r.__words[2])
    {
      v71 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)((uint64_t)v70 - v320.__r_.__value_.__r.__words[0]) >> 3);
      v72 = v71 + 1;
      if (v71 + 1 > 0x186186186186186)
        std::vector<BOOL>::__throw_length_error[abi:ne180100]();
      if (0x9E79E79E79E79E7ALL
         * ((uint64_t)(v320.__r_.__value_.__r.__words[2] - v320.__r_.__value_.__r.__words[0]) >> 3) > v72)
        v72 = 0x9E79E79E79E79E7ALL
            * ((uint64_t)(v320.__r_.__value_.__r.__words[2] - v320.__r_.__value_.__r.__words[0]) >> 3);
      if (0xCF3CF3CF3CF3CF3DLL
         * ((uint64_t)(v320.__r_.__value_.__r.__words[2] - v320.__r_.__value_.__r.__words[0]) >> 3) >= 0xC30C30C30C30C3)
        v73 = 0x186186186186186;
      else
        v73 = v72;
      v357.__r_.__value_.__l.__size_ = (std::string::size_type)&v320.__r_.__value_.__r.__words[2];
      if (v73)
        v73 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<siri::dialogengine::SpeakableString>>(v73);
      else
        v74 = 0;
      v356.__r_.__value_.__r.__words[0] = v73;
      v356.__r_.__value_.__l.__size_ = v73 + 168 * v71;
      v356.__r_.__value_.__r.__words[2] = v356.__r_.__value_.__l.__size_;
      v357.__r_.__value_.__r.__words[0] = v73 + 168 * v74;
      siri::dialogengine::SpeakableString::SpeakableString((std::string *)v356.__r_.__value_.__l.__size_, (const siri::dialogengine::SpeakableString *)v377);
      v356.__r_.__value_.__r.__words[2] += 168;
      std::vector<siri::dialogengine::SpeakableString>::__swap_out_circular_buffer(&v320, &v356);
      v79 = v320.__r_.__value_.__l.__size_;
      std::__split_buffer<siri::dialogengine::SpeakableString>::~__split_buffer((uint64_t)&v356);
      v320.__r_.__value_.__l.__size_ = v79;
      if ((SHIBYTE(v385) & 0x80000000) == 0)
        goto LABEL_197;
      goto LABEL_196;
    }
    siri::dialogengine::SpeakableString::SpeakableString(v70, (const siri::dialogengine::SpeakableString *)v377);
    v320.__r_.__value_.__l.__size_ = (std::string::size_type)&v70[7];
LABEL_197:
    if (SHIBYTE(v383) < 0)
      operator delete(*((void **)&v382 + 1));
    if (SBYTE7(v382) < 0)
      operator delete((void *)v381);
    if (SHIBYTE(v380) < 0)
      operator delete(*((void **)&v379 + 1));
    if (SBYTE7(v379) < 0)
      operator delete((void *)v378);
    if (SHIBYTE(v377[1].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v377[1].__r_.__value_.__l.__data_);
    if (SHIBYTE(v377[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v377[0].__r_.__value_.__l.__data_);
    v85 = (_QWORD *)v376.__r_.__value_.__l.__size_;
    if (v376.__r_.__value_.__l.__size_ >= v376.__r_.__value_.__r.__words[2])
    {
      v87 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v376.__r_.__value_.__l.__size_ - v376.__r_.__value_.__r.__words[0]) >> 3);
      v88 = v87 + 1;
      if (v87 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<BOOL>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556
         * ((uint64_t)(v376.__r_.__value_.__r.__words[2] - v376.__r_.__value_.__r.__words[0]) >> 3) > v88)
        v88 = 0x5555555555555556
            * ((uint64_t)(v376.__r_.__value_.__r.__words[2] - v376.__r_.__value_.__r.__words[0]) >> 3);
      if (0xAAAAAAAAAAAAAAABLL
         * ((uint64_t)(v376.__r_.__value_.__r.__words[2] - v376.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
        v89 = 0xAAAAAAAAAAAAAAALL;
      else
        v89 = v88;
      v377[1].__r_.__value_.__l.__size_ = (std::string::size_type)&v376.__r_.__value_.__r.__words[2];
      if (v89)
      {
        if (v89 > 0xAAAAAAAAAAAAAAALL)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v90 = (char *)operator new(24 * v89);
      }
      else
      {
        v90 = 0;
      }
      v91 = &v90[24 * v87];
      v377[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v90;
      v377[0].__r_.__value_.__l.__size_ = (std::string::size_type)v91;
      v377[0].__r_.__value_.__r.__words[2] = (std::string::size_type)v91;
      v377[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&v90[24 * v89];
      *((_QWORD *)v91 + 1) = 0;
      *((_QWORD *)v91 + 2) = 0;
      *(_QWORD *)v91 = 0;
      std::vector<siri::dialogengine::SpeakableString>::__init_with_size[abi:ne180100]<siri::dialogengine::SpeakableString*,siri::dialogengine::SpeakableString*>(v91, (uint64_t)v320.__r_.__value_.__l.__data_, v320.__r_.__value_.__l.__size_, 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v320.__r_.__value_.__l.__size_ - v320.__r_.__value_.__r.__words[0]) >> 3));
      v92 = v377[0].__r_.__value_.__l.__size_;
      v86 = v377[0].__r_.__value_.__r.__words[2] + 24;
      v377[0].__r_.__value_.__r.__words[2] += 24;
      v93 = (_QWORD *)v376.__r_.__value_.__l.__size_;
      v94 = v376.__r_.__value_.__r.__words[0];
      if (v376.__r_.__value_.__l.__size_ == v376.__r_.__value_.__r.__words[0])
      {
        v96 = vdupq_n_s64(v376.__r_.__value_.__l.__size_);
      }
      else
      {
        do
        {
          *(_QWORD *)(v92 - 24) = 0;
          *(_QWORD *)(v92 - 16) = 0;
          v92 -= 24;
          *(_QWORD *)(v92 + 16) = 0;
          v95 = *(_OWORD *)(v93 - 3);
          v93 -= 3;
          *(_OWORD *)v92 = v95;
          *(_QWORD *)(v92 + 16) = v93[2];
          *v93 = 0;
          v93[1] = 0;
          v93[2] = 0;
        }
        while (v93 != (_QWORD *)v94);
        v96 = *(int64x2_t *)&v376.__r_.__value_.__l.__data_;
        v86 = v377[0].__r_.__value_.__r.__words[2];
      }
      v376.__r_.__value_.__r.__words[0] = v92;
      v376.__r_.__value_.__l.__size_ = v86;
      *(int64x2_t *)&v377[0].__r_.__value_.__r.__words[1] = v96;
      v97 = v376.__r_.__value_.__r.__words[2];
      v376.__r_.__value_.__r.__words[2] = v377[1].__r_.__value_.__r.__words[0];
      v377[1].__r_.__value_.__r.__words[0] = v97;
      v377[0].__r_.__value_.__r.__words[0] = v96.i64[0];
      std::__split_buffer<std::vector<siri::dialogengine::SpeakableString>>::~__split_buffer((uint64_t)v377);
    }
    else
    {
      *(_OWORD *)v376.__r_.__value_.__l.__size_ = 0uLL;
      v85[2] = 0;
      std::vector<siri::dialogengine::SpeakableString>::__init_with_size[abi:ne180100]<siri::dialogengine::SpeakableString*,siri::dialogengine::SpeakableString*>(v85, (uint64_t)v320.__r_.__value_.__l.__data_, v320.__r_.__value_.__l.__size_, 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v320.__r_.__value_.__l.__size_ - v320.__r_.__value_.__r.__words[0]) >> 3));
      v86 = (std::string::size_type)(v85 + 3);
    }
    v376.__r_.__value_.__l.__size_ = v86;
    v377[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v320;
    std::vector<siri::dialogengine::SpeakableString>::__destroy_vector::operator()[abi:ne180100]((void ***)v377);
  }
  v98 = v299;
  if (data)
    v98 = 1;
  if (!v297)
    v98 = 1;
  v99 = v284;
  if (((v98 | v295) & 1) == 0)
  {
    siri::dialogengine::NodeVectorDialogFilterAdapter::NodeVectorDialogFilterAdapter((siri::dialogengine::NodeVectorDialogFilterAdapter *)v377, (uint64_t)&v372);
    std::string::basic_string[abi:ne180100]<0>(&v356, "");
    siri::dialogengine::FilterDialogForModeAndSettings((uint64_t *)v377, v297, v293, 0, 0, (uint64_t)&v356);
    if (SHIBYTE(v356.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v356.__r_.__value_.__l.__data_);
    v377[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E79360B8;
    std::__tree<std::__value_type<YAML::detail::node_ref const*,int>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,int>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,int>>>::destroy((_QWORD *)v378);
    if (v377[0].__r_.__value_.__r.__words[2])
    {
      v377[1].__r_.__value_.__r.__words[0] = v377[0].__r_.__value_.__r.__words[2];
      operator delete((void *)v377[0].__r_.__value_.__r.__words[2]);
    }
  }
  memset(v352, 0, sizeof(v352));
  v353 = 0;
  v354 = 256;
  v280 = v346;
  memset(v346, 0, sizeof(v346));
  v345 = v352;
  v347 = 0;
  v348 = 512;
  v349 = 324;
  v350 = 0x2000;
  v351 = 4;
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartObject((uint64_t)&v345);
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v345, 5);
  rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v345, (uint64_t)"status", 6u);
  if ((v374.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v100 = &v374;
  else
    v100 = (std::string *)v374.__r_.__value_.__r.__words[0];
  v101 = strlen((const char *)v100);
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v345, (uint64_t)v100, v101);
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v345, 5);
  rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v345, (uint64_t)"error", 5u);
  if ((v373.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v102 = &v373;
  else
    v102 = (std::string *)v373.__r_.__value_.__r.__words[0];
  v103 = strlen((const char *)v102);
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v345, (uint64_t)v102, v103);
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v345, 5);
  rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v345, (uint64_t)"response", 8u);
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartArray((uint64_t)&v345);
  v300 = 0;
  v105 = 0;
  v298 = 0;
  if (v284)
  {
    v106 = v372.__r_.__value_.__r.__words[0];
    if (v372.__r_.__value_.__l.__size_ != v372.__r_.__value_.__r.__words[0])
    {
      v298 = 0;
      v107 = 0;
      v285 = 0;
      v108 = 0;
      v300 = 0;
      while (1)
      {
        v109 = 16 * v108;
        v110 = *(const void **)(v106 + 16 * v108);
        if (!v110)
        {
LABEL_547:
          v105 = v107;
          goto LABEL_588;
        }
        if (v111)
          break;
LABEL_544:
        v182 = v99;
        v183 = v109;
        if (!v184)
        {
          v105 = v107;
LABEL_568:
          v99 = v182;
          if (v193)
          {
            v194 = v193;
            siri::dialogengine::VisualResponse::GetResponseBase64Protobuf(v193, v377);
            rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartObject((uint64_t)&v345);
            rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v345, 5);
            rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v345, (uint64_t)"type", 4u);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_p = &__p;
            else
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            v196 = strlen((const char *)p_p);
            rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v345, (uint64_t)p_p, v196);
            rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v345, 5);
            rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v345, (uint64_t)"data", 4u);
            if ((v377[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v197 = v377;
            else
              v197 = (std::string *)v377[0].__r_.__value_.__r.__words[0];
            v198 = strlen((const char *)v197);
            v199 = (siri::dialogengine *)rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v345, (uint64_t)v197, v198);
            siri::dialogengine::GetLogStateRef(v199);
            if (HIBYTE(siri::dialogengine::GetLogStateRef(void)::logState))
            {
              rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v345, 5);
              rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v345, (uint64_t)"json", 4u);
              siri::dialogengine::VisualResponse::GetResponseJSON(v194, &v356);
              v200 = (v356.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                   ? &v356
                   : (std::string *)v356.__r_.__value_.__r.__words[0];
              v201 = (v356.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                   ? HIBYTE(v356.__r_.__value_.__r.__words[2])
                   : v356.__r_.__value_.__l.__size_;
              rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::RawValue((uint64_t *)&v345, (uint64_t)v200, v201);
              if (SHIBYTE(v356.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v356.__r_.__value_.__l.__data_);
            }
            rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndObject((uint64_t)&v345);
            if (SHIBYTE(v377[0].__r_.__value_.__r.__words[2]) < 0)
              operator delete(v377[0].__r_.__value_.__l.__data_);
            v106 = v372.__r_.__value_.__r.__words[0];
          }
          goto LABEL_588;
        }
        v185 = v184;
        if (v107 >= v285)
        {
          v186 = (v107 - v298) >> 3;
          v187 = v186 + 1;
          if ((unint64_t)(v186 + 1) >> 61)
            std::vector<BOOL>::__throw_length_error[abi:ne180100]();
          if ((v285 - v298) >> 2 > v187)
            v187 = (v285 - v298) >> 2;
          if ((unint64_t)(v285 - v298) >= 0x7FFFFFFFFFFFFFF8)
            v188 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v188 = v187;
          if (v188)
          {
            if (v188 >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v189 = (char *)operator new(8 * v188);
          }
          else
          {
            v189 = 0;
          }
          v190 = &v189[8 * v186];
          *(_QWORD *)v190 = v185;
          v105 = v190 + 8;
          if (v107 == v298)
          {
            v191 = v298;
          }
          else
          {
            v191 = v298;
            do
            {
              v192 = *((_QWORD *)v107 - 1);
              v107 -= 8;
              *((_QWORD *)v190 - 1) = v192;
              v190 -= 8;
            }
            while (v107 != v298);
          }
          v285 = &v189[8 * v188];
          if (v191)
            operator delete(v191);
          v298 = v190;
        }
        else
        {
          *(_QWORD *)v107 = v184;
          v105 = v107 + 8;
        }
        v106 = v372.__r_.__value_.__r.__words[0];
        v110 = *(const void **)(v372.__r_.__value_.__r.__words[0] + v183);
        if (v110)
          goto LABEL_568;
        v99 = v182;
LABEL_588:
        ++v108;
        v107 = v105;
        if (v108 >= (uint64_t)(v372.__r_.__value_.__l.__size_ - v106) >> 4)
          goto LABEL_589;
      }
      v112 = v111;
      siri::dialogengine::Node::GetGlobalId(v111, v99, &v355);
      siri::dialogengine::SpeakableString::SpeakableString(v377, (siri::dialogengine::Node *)((char *)v112 + 208));
      v301 = v112;
      siri::dialogengine::SpeakableString::SpeakableString(&v356, (siri::dialogengine::Node *)((char *)v112 + 376));
      memset(&v344, 0, sizeof(v344));
      std::vector<siri::dialogengine::SpeakableString>::__init_with_size[abi:ne180100]<siri::dialogengine::SpeakableString*,siri::dialogengine::SpeakableString*>(&v344, *(_QWORD *)(v376.__r_.__value_.__r.__words[0] + 24 * v108), *(_QWORD *)(v376.__r_.__value_.__r.__words[0] + 24 * v108 + 8), 0xCF3CF3CF3CF3CF3DLL* ((uint64_t)(*(_QWORD *)(v376.__r_.__value_.__r.__words[0] + 24 * v108 + 8)- *(_QWORD *)(v376.__r_.__value_.__r.__words[0] + 24 * v108)) >> 3));
      siri::dialogengine::SpeakableString::SpeakableString(&v332, (const siri::dialogengine::SpeakableString *)v344.__r_.__value_.__l.__data_);
      siri::dialogengine::SpeakableString::SpeakableString(&v320, (const siri::dialogengine::SpeakableString *)(v344.__r_.__value_.__r.__words[0] + 168));
      if ((v355.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v113 = &v355;
      else
        v113 = (std::string *)v355.__r_.__value_.__r.__words[0];
      if (SHIBYTE(v377[0].__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v319, v377[0].__r_.__value_.__l.__data_, v377[0].__r_.__value_.__l.__size_);
      else
        v319 = v377[0];
      if ((v319.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v114 = &v319;
      else
        v114 = (std::string *)v319.__r_.__value_.__r.__words[0];
      if (SHIBYTE(v377[1].__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v318, v377[1].__r_.__value_.__l.__data_, v377[1].__r_.__value_.__l.__size_);
      else
        v318 = v377[1];
      v115 = &v318;
      if ((v318.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v115 = (std::string *)v318.__r_.__value_.__r.__words[0];
      v296 = v115;
      if (SHIBYTE(v356.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v317, v356.__r_.__value_.__l.__data_, v356.__r_.__value_.__l.__size_);
      else
        v317 = v356;
      if ((v317.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v116 = &v317;
      else
        v116 = (std::string *)v317.__r_.__value_.__r.__words[0];
      v294 = v116;
      if (SHIBYTE(v357.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v316, v357.__r_.__value_.__l.__data_, v357.__r_.__value_.__l.__size_);
      else
        v316 = v357;
      v117 = &v316;
      if ((v316.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v117 = (std::string *)v316.__r_.__value_.__r.__words[0];
      v292 = v117;
      v118 = v344.__r_.__value_.__r.__words[0];
      if (*(char *)(v344.__r_.__value_.__r.__words[0] + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v315, *(const std::string::value_type **)v344.__r_.__value_.__l.__data_, *(_QWORD *)(v344.__r_.__value_.__r.__words[0] + 8));
        v118 = v344.__r_.__value_.__r.__words[0];
      }
      else
      {
        v119 = *(_OWORD *)v344.__r_.__value_.__l.__data_;
        v315.__r_.__value_.__r.__words[2] = *(_QWORD *)(v344.__r_.__value_.__r.__words[0] + 16);
        *(_OWORD *)&v315.__r_.__value_.__l.__data_ = v119;
      }
      v120 = &v315;
      if ((v315.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v120 = (std::string *)v315.__r_.__value_.__r.__words[0];
      v291 = v120;
      if (*(char *)(v118 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&v314, *(const std::string::value_type **)(v118 + 24), *(_QWORD *)(v118 + 32));
        v118 = v344.__r_.__value_.__r.__words[0];
      }
      else
      {
        v314 = *(std::string *)(v118 + 24);
      }
      v121 = &v314;
      if ((v314.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v121 = (std::string *)v314.__r_.__value_.__r.__words[0];
      v290 = v121;
      if (*(char *)(v118 + 191) < 0)
      {
        std::string::__init_copy_ctor_external(&v313, *(const std::string::value_type **)(v118 + 168), *(_QWORD *)(v118 + 176));
        v118 = v344.__r_.__value_.__r.__words[0];
      }
      else
      {
        v313 = *(std::string *)(v118 + 168);
      }
      v122 = &v313;
      if ((v313.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v122 = (std::string *)v313.__r_.__value_.__r.__words[0];
      v289 = v122;
      if (*(char *)(v118 + 215) < 0)
        std::string::__init_copy_ctor_external(&v312, *(const std::string::value_type **)(v118 + 192), *(_QWORD *)(v118 + 200));
      else
        v312 = *(std::string *)(v118 + 192);
      if ((v312.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v123 = &v312;
      else
        v123 = (std::string *)v312.__r_.__value_.__r.__words[0];
      if (*((_BYTE *)v112 + 547))
      {
        if (*((_BYTE *)v112 + 546))
          v124 = "true";
        else
          v124 = "false";
      }
      else
      {
        v124 = "???";
      }
      std::string::basic_string[abi:ne180100]<0>(v310, v124);
      v125 = v310;
      if (v311 < 0)
        v125 = (void **)v310[0];
      v288 = v125;
      if (*((_BYTE *)v112 + 545))
      {
        if (*((_BYTE *)v112 + 544))
          v126 = "true";
        else
          v126 = "false";
      }
      else
      {
        v126 = "???";
      }
      v287 = v107;
      std::string::basic_string[abi:ne180100]<0>(v308, v126);
      v127 = v123;
      v286 = v114;
      if (v309 >= 0)
        v128 = v308;
      else
        v128 = (void **)v308[0];
      if (*((_BYTE *)v99 + 736))
        v129 = "true";
      else
        v129 = "false";
      std::string::basic_string[abi:ne180100]<0>(v306, v129);
      v130 = v113;
      v131 = v108;
      if (v307 >= 0)
        v132 = v306;
      else
        v132 = (void **)v306[0];
      siri::dialogengine::SpeakableString::GetRedactedPrint((siri::dialogengine::SpeakableString *)v377, &v305);
      v133 = 16 * v108;
      if ((v305.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v134 = &v305;
      else
        v134 = (std::string *)v305.__r_.__value_.__r.__words[0];
      siri::dialogengine::SpeakableString::GetRedactedSpeak((siri::dialogengine::SpeakableString *)v377, &v304);
      if ((v304.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v135 = &v304;
      else
        v135 = (std::string *)v304.__r_.__value_.__r.__words[0];
      siri::dialogengine::SpeakableString::GetRedactedPrint((siri::dialogengine::SpeakableString *)&v356, &v303);
      v136 = SHIBYTE(v303.__r_.__value_.__r.__words[2]);
      v137 = v303.__r_.__value_.__r.__words[0];
      siri::dialogengine::SpeakableString::GetRedactedSpeak((siri::dialogengine::SpeakableString *)&v356, &v302);
      v139 = &v303;
      if (v136 < 0)
        v139 = (std::string *)v137;
      v140 = &v302;
      if ((v302.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v140 = (std::string *)v302.__r_.__value_.__r.__words[0];
      siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Dialog ID: '%s'\nFull print: '%s'\nFull speak: '%s'\nSupporting print: '%s'\nSupporting speak: '%s'\nUnfiltered Full print: '%s'\nUnfiltered Full speak: '%s'\nUnfiltered Supporting print: '%s'\nUnfiltered Supporting speak: '%s'\nspokenOnly: %s\nprintOnly:  %s\nisApprovedForGrading: %s\nRedacted full print: '%s'\nRedacted full speak: '%s'\nRedacted supporting print: '%s'\nRedacted supporting speak: '%s'\n", v138, v130, v286,
        v296,
        v294,
        v292,
        v291,
        v290,
        v289,
        v127,
        v288,
        v128,
        v132,
        v134,
        v135,
        v139,
        v140,
        v280,
        v281);
      v99 = v284;
      v108 = v131;
      v109 = v133;
      v107 = v287;
      if (SHIBYTE(v302.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v302.__r_.__value_.__l.__data_);
      if (SHIBYTE(v303.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v303.__r_.__value_.__l.__data_);
      if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v304.__r_.__value_.__l.__data_);
      if (SHIBYTE(v305.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v305.__r_.__value_.__l.__data_);
      if (v307 < 0)
        operator delete(v306[0]);
      if (v309 < 0)
        operator delete(v308[0]);
      if (v311 < 0)
        operator delete(v310[0]);
      if (SHIBYTE(v312.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v312.__r_.__value_.__l.__data_);
      if (SHIBYTE(v313.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v313.__r_.__value_.__l.__data_);
      if (SHIBYTE(v314.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v314.__r_.__value_.__l.__data_);
      if (SHIBYTE(v315.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v315.__r_.__value_.__l.__data_);
      if (SHIBYTE(v316.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v316.__r_.__value_.__l.__data_);
      if (SHIBYTE(v317.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v317.__r_.__value_.__l.__data_);
      if (SHIBYTE(v318.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v318.__r_.__value_.__l.__data_);
      if (SHIBYTE(v319.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v319.__r_.__value_.__l.__data_);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartObject((uint64_t)&v345);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v345, 5);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v345, (uint64_t)"type", 4u);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v141 = &__p;
      else
        v141 = (std::string *)__p.__r_.__value_.__r.__words[0];
      v142 = strlen((const char *)v141);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v345, (uint64_t)v141, v142);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v345, 5);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v345, (uint64_t)"id", 2u);
      if ((v355.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v143 = &v355;
      else
        v143 = (std::string *)v355.__r_.__value_.__r.__words[0];
      v144 = strlen((const char *)v143);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v345, (uint64_t)v143, v144);
      if (v283)
      {
        rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v345, 5);
        rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v345, (uint64_t)"keywords", 8u);
        if (*((char *)v301 + 599) < 0)
          std::string::__init_copy_ctor_external(&v319, *((const std::string::value_type **)v301 + 72), *((_QWORD *)v301 + 73));
        else
          v319 = *(std::string *)((_BYTE *)v301 + 24);
        v145 = (v319.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
             ? &v319
             : (std::string *)v319.__r_.__value_.__r.__words[0];
        v146 = strlen((const char *)v145);
        rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v345, (uint64_t)v145, v146);
        if (SHIBYTE(v319.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v319.__r_.__value_.__l.__data_);
      }
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v345, 5);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v345, (uint64_t)"content", 7u);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartObject((uint64_t)&v345);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v345, 5);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v345, (uint64_t)"print", 5u);
      if (SHIBYTE(v377[0].__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v319, v377[0].__r_.__value_.__l.__data_, v377[0].__r_.__value_.__l.__size_);
      else
        v319 = v377[0];
      if ((v319.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v147 = &v319;
      else
        v147 = (std::string *)v319.__r_.__value_.__r.__words[0];
      v148 = strlen((const char *)v147);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v345, (uint64_t)v147, v148);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v345, 5);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v345, (uint64_t)"speak", 5u);
      if (SHIBYTE(v377[1].__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v318, v377[1].__r_.__value_.__l.__data_, v377[1].__r_.__value_.__l.__size_);
      else
        v318 = v377[1];
      if ((v318.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v149 = &v318;
      else
        v149 = (std::string *)v318.__r_.__value_.__r.__words[0];
      v150 = strlen((const char *)v149);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v345, (uint64_t)v149, v150);
      siri::dialogengine::SpeakableString::GetRedactedPrint((siri::dialogengine::SpeakableString *)v377, &v317);
      if (SHIBYTE(v317.__r_.__value_.__r.__words[2]) < 0)
      {
        v151 = v317.__r_.__value_.__l.__size_;
        operator delete(v317.__r_.__value_.__l.__data_);
        if (!v151)
          goto LABEL_395;
      }
      else if (!*((_BYTE *)&v317.__r_.__value_.__s + 23))
      {
        goto LABEL_395;
      }
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v345, 5);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v345, (uint64_t)"redactedPrint", 0xDu);
      siri::dialogengine::SpeakableString::GetRedactedPrint((siri::dialogengine::SpeakableString *)v377, &v317);
      if ((v317.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v152 = &v317;
      else
        v152 = (std::string *)v317.__r_.__value_.__r.__words[0];
      v153 = strlen((const char *)v152);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v345, (uint64_t)v152, v153);
      if (SHIBYTE(v317.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v317.__r_.__value_.__l.__data_);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v345, 5);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v345, (uint64_t)"redactedSpeak", 0xDu);
      siri::dialogengine::SpeakableString::GetRedactedSpeak((siri::dialogengine::SpeakableString *)v377, &v317);
      if ((v317.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v154 = &v317;
      else
        v154 = (std::string *)v317.__r_.__value_.__r.__words[0];
      v155 = strlen((const char *)v154);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v345, (uint64_t)v154, v155);
      if (SHIBYTE(v317.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v317.__r_.__value_.__l.__data_);
LABEL_395:
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndObject((uint64_t)&v345);
      v156 = v301;
      v157 = HIBYTE(v357.__r_.__value_.__r.__words[2]);
      if ((v357.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v157 = v357.__r_.__value_.__l.__size_;
      if (!v157)
      {
        v158 = HIBYTE(v356.__r_.__value_.__r.__words[2]);
        if ((v356.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v158 = v356.__r_.__value_.__l.__size_;
        if (!v158)
        {
LABEL_432:
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v345, 5);
          rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v345, (uint64_t)"unfilteredContent", 0x11u);
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartObject((uint64_t)&v345);
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v345, 5);
          rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v345, (uint64_t)"print", 5u);
          if (SHIBYTE(v332.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v317, v332.__r_.__value_.__l.__data_, v332.__r_.__value_.__l.__size_);
          else
            v317 = v332;
          if ((v317.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v168 = &v317;
          else
            v168 = (std::string *)v317.__r_.__value_.__r.__words[0];
          v169 = strlen((const char *)v168);
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v345, (uint64_t)v168, v169);
          if (SHIBYTE(v317.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v317.__r_.__value_.__l.__data_);
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v345, 5);
          rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v345, (uint64_t)"speak", 5u);
          if (SHIBYTE(v333.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v317, v333.__r_.__value_.__l.__data_, v333.__r_.__value_.__l.__size_);
          else
            v317 = v333;
          if ((v317.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v170 = &v317;
          else
            v170 = (std::string *)v317.__r_.__value_.__r.__words[0];
          v171 = strlen((const char *)v170);
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v345, (uint64_t)v170, v171);
          if (SHIBYTE(v317.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v317.__r_.__value_.__l.__data_);
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndObject((uint64_t)&v345);
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v345, 5);
          rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v345, (uint64_t)"unfilteredCaption", 0x11u);
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartObject((uint64_t)&v345);
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v345, 5);
          rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v345, (uint64_t)"print", 5u);
          if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v317, v320.__r_.__value_.__l.__data_, v320.__r_.__value_.__l.__size_);
          else
            v317 = v320;
          if ((v317.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v172 = &v317;
          else
            v172 = (std::string *)v317.__r_.__value_.__r.__words[0];
          v173 = strlen((const char *)v172);
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v345, (uint64_t)v172, v173);
          if (SHIBYTE(v317.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v317.__r_.__value_.__l.__data_);
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v345, 5);
          rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v345, (uint64_t)"speak", 5u);
          if (SHIBYTE(v321.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v317, v321.__r_.__value_.__l.__data_, v321.__r_.__value_.__l.__size_);
          else
            v317 = v321;
          if ((v317.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v174 = &v317;
          else
            v174 = (std::string *)v317.__r_.__value_.__r.__words[0];
          v175 = strlen((const char *)v174);
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v345, (uint64_t)v174, v175);
          if (SHIBYTE(v317.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v317.__r_.__value_.__l.__data_);
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndObject((uint64_t)&v345);
          if (*((_BYTE *)v156 + 545))
          {
            rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v345, 5);
            rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v345, (uint64_t)"printOnly", 9u);
            if (*((_BYTE *)v156 + 545))
            {
              v176 = *((_BYTE *)v156 + 544) != 0;
              if (*((_BYTE *)v156 + 544))
                v177 = 2;
              else
                v177 = 1;
            }
            else
            {
              v176 = 0;
              v177 = 1;
            }
            rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v345, v177);
            rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteBool((uint64_t *)&v345, v176);
          }
          if (*((_BYTE *)v156 + 547))
          {
            rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v345, 5);
            rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v345, (uint64_t)"spokenOnly", 0xAu);
            if (*((_BYTE *)v156 + 547))
            {
              v178 = *((_BYTE *)v156 + 546) != 0;
              if (*((_BYTE *)v156 + 546))
                v179 = 2;
              else
                v179 = 1;
            }
            else
            {
              v178 = 0;
              v179 = 1;
            }
            rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v345, v179);
            rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteBool((uint64_t *)&v345, v178);
          }
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v345, 5);
          rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v345, (uint64_t)"isApprovedForGrading", 0x14u);
          v180 = *((unsigned __int8 *)v284 + 736);
          if (*((_BYTE *)v284 + 736))
            v181 = 2;
          else
            v181 = 1;
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v345, v181);
          rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteBool((uint64_t *)&v345, v180 != 0);
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndObject((uint64_t)&v345);
          if (SHIBYTE(v318.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v318.__r_.__value_.__l.__data_);
          if (SHIBYTE(v319.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v319.__r_.__value_.__l.__data_);
          if (v331 < 0)
            operator delete(v330);
          if (v329 < 0)
            operator delete(v328);
          if (v327 < 0)
            operator delete(v326);
          if (v325 < 0)
            operator delete(v324);
          if (v323 < 0)
            operator delete(v322);
          if (SHIBYTE(v321.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v321.__r_.__value_.__l.__data_);
          if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v320.__r_.__value_.__l.__data_);
          if (v343 < 0)
            operator delete(v342);
          if (v341 < 0)
            operator delete(v340);
          if (v339 < 0)
            operator delete(v338);
          if (v337 < 0)
            operator delete(v336);
          if (v335 < 0)
            operator delete(v334);
          if (SHIBYTE(v333.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v333.__r_.__value_.__l.__data_);
          if (SHIBYTE(v332.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v332.__r_.__value_.__l.__data_);
          v332.__r_.__value_.__r.__words[0] = (std::string::size_type)&v344;
          std::vector<siri::dialogengine::SpeakableString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v332);
          if (v368 < 0)
            operator delete(v366);
          if (v365 < 0)
            operator delete(v364);
          if (v363 < 0)
            operator delete(v362);
          if (v361 < 0)
            operator delete(v360);
          if (v359 < 0)
            operator delete(v358);
          if (SHIBYTE(v357.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v357.__r_.__value_.__l.__data_);
          if (SHIBYTE(v356.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v356.__r_.__value_.__l.__data_);
          if (SHIBYTE(v385) < 0)
            operator delete((void *)v384);
          if (SHIBYTE(v383) < 0)
            operator delete(*((void **)&v382 + 1));
          if (SBYTE7(v382) < 0)
            operator delete((void *)v381);
          if (SHIBYTE(v380) < 0)
            operator delete(*((void **)&v379 + 1));
          if (SBYTE7(v379) < 0)
            operator delete((void *)v378);
          if (SHIBYTE(v377[1].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v377[1].__r_.__value_.__l.__data_);
          if (SHIBYTE(v377[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v377[0].__r_.__value_.__l.__data_);
          if (SHIBYTE(v355.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v355.__r_.__value_.__l.__data_);
          v106 = v372.__r_.__value_.__r.__words[0];
          v110 = *(const void **)(v372.__r_.__value_.__r.__words[0] + v109);
          v300 = 1;
          if (!v110)
            goto LABEL_547;
          goto LABEL_544;
        }
      }
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v345, 5);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v345, (uint64_t)"caption", 7u);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartObject((uint64_t)&v345);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v345, 5);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v345, (uint64_t)"print", 5u);
      if (SHIBYTE(v356.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v317, v356.__r_.__value_.__l.__data_, v356.__r_.__value_.__l.__size_);
      else
        v317 = v356;
      if ((v317.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v159 = &v317;
      else
        v159 = (std::string *)v317.__r_.__value_.__r.__words[0];
      v160 = strlen((const char *)v159);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v345, (uint64_t)v159, v160);
      if (SHIBYTE(v317.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v317.__r_.__value_.__l.__data_);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v345, 5);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v345, (uint64_t)"speak", 5u);
      if (SHIBYTE(v357.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v317, v357.__r_.__value_.__l.__data_, v357.__r_.__value_.__l.__size_);
      else
        v317 = v357;
      if ((v317.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v161 = &v317;
      else
        v161 = (std::string *)v317.__r_.__value_.__r.__words[0];
      v162 = strlen((const char *)v161);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v345, (uint64_t)v161, v162);
      if (SHIBYTE(v317.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v317.__r_.__value_.__l.__data_);
      siri::dialogengine::SpeakableString::GetRedactedPrint((siri::dialogengine::SpeakableString *)&v356, &v317);
      if (SHIBYTE(v317.__r_.__value_.__r.__words[2]) < 0)
      {
        v163 = v317.__r_.__value_.__l.__size_;
        operator delete(v317.__r_.__value_.__l.__data_);
        if (!v163)
        {
LABEL_431:
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndObject((uint64_t)&v345);
          v156 = v301;
          goto LABEL_432;
        }
      }
      else if (!*((_BYTE *)&v317.__r_.__value_.__s + 23))
      {
        goto LABEL_431;
      }
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v345, 5);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v345, (uint64_t)"redactedPrint", 0xDu);
      siri::dialogengine::SpeakableString::GetRedactedPrint((siri::dialogengine::SpeakableString *)&v356, &v317);
      if ((v317.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v164 = &v317;
      else
        v164 = (std::string *)v317.__r_.__value_.__r.__words[0];
      v165 = strlen((const char *)v164);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v345, (uint64_t)v164, v165);
      if (SHIBYTE(v317.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v317.__r_.__value_.__l.__data_);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v345, 5);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v345, (uint64_t)"redactedSpeak", 0xDu);
      siri::dialogengine::SpeakableString::GetRedactedSpeak((siri::dialogengine::SpeakableString *)&v356, &v317);
      if ((v317.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v166 = &v317;
      else
        v166 = (std::string *)v317.__r_.__value_.__r.__words[0];
      v167 = strlen((const char *)v166);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v345, (uint64_t)v166, v167);
      if (SHIBYTE(v317.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v317.__r_.__value_.__l.__data_);
      goto LABEL_431;
    }
  }
LABEL_589:
  if (!data && (v300 & 1) == 0)
  {
    v202 = &v375;
    if ((v375.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v202 = (std::string *)v375.__r_.__value_.__r.__words[0];
    v203 = &v374;
    if ((v374.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v203 = (std::string *)v374.__r_.__value_.__r.__words[0];
    v204 = &v373;
    if ((v373.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v204 = (std::string *)v373.__r_.__value_.__r.__words[0];
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"The execution of dialog CAT '%s' produced no dialog\nSTATUS: %s\nERROR: %s", v104, v202, v203, v204);
  }
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndArray((uint64_t)&v345);
  if (v105 != v298)
  {
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v345, 5);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v345, (uint64_t)"visual_refs", 0xBu);
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartArray((uint64_t)&v345);
    v205 = v298;
    do
    {
      v206 = *(_QWORD *)v205;
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartObject((uint64_t)&v345);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v345, 5);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v345, (uint64_t)"id", 2u);
      if (*(char *)(v206 + 119) < 0)
        std::string::__init_copy_ctor_external(v377, *(const std::string::value_type **)(v206 + 96), *(_QWORD *)(v206 + 104));
      else
        v377[0] = *(std::string *)(v206 + 96);
      if ((v377[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v207 = v377;
      else
        v207 = (std::string *)v377[0].__r_.__value_.__r.__words[0];
      v208 = strlen((const char *)v207);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v345, (uint64_t)v207, v208);
      if (SHIBYTE(v377[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v377[0].__r_.__value_.__l.__data_);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v345, 5);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v345, (uint64_t)"parameters", 0xAu);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartObject((uint64_t)&v345);
      std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&v356, (const void ***)(v206 + 208));
      v209 = v356.__r_.__value_.__r.__words[0];
      if ((std::string::size_type *)v356.__r_.__value_.__l.__data_ != &v356.__r_.__value_.__r.__words[1])
      {
        do
        {
          std::pair<std::string const,std::string>::pair[abi:ne180100](v377, (__int128 *)(v209 + 32));
          if ((v377[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v210 = v377;
          else
            v210 = (std::string *)v377[0].__r_.__value_.__r.__words[0];
          v211 = strlen((const char *)v210);
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v345, (uint64_t)v210, v211);
          if ((v377[1].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v212 = &v377[1];
          else
            v212 = (std::string *)v377[1].__r_.__value_.__l.__data_;
          v213 = strlen((const char *)v212);
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v345, (uint64_t)v212, v213);
          if (SHIBYTE(v377[1].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v377[1].__r_.__value_.__l.__data_);
          if (SHIBYTE(v377[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v377[0].__r_.__value_.__l.__data_);
          v214 = *(std::string **)(v209 + 8);
          if (v214)
          {
            do
            {
              v215 = v214;
              v214 = (std::string *)v214->__r_.__value_.__r.__words[0];
            }
            while (v214);
          }
          else
          {
            do
            {
              v215 = *(std::string **)(v209 + 16);
              v27 = v215->__r_.__value_.__r.__words[0] == v209;
              v209 = (std::string::size_type)v215;
            }
            while (!v27);
          }
          v209 = (std::string::size_type)v215;
        }
        while (v215 != (std::string *)&v356.__r_.__value_.__r.__words[1]);
      }
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((_QWORD *)v356.__r_.__value_.__l.__size_);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndObject((uint64_t)&v345);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndObject((uint64_t)&v345);
      v205 += 8;
    }
    while (v205 != v105);
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndArray((uint64_t)&v345);
    v99 = v284;
  }
  v216 = v371;
  if ((_QWORD)v371)
  {
    std::string::basic_string[abi:ne180100]<0>(v377, "category");
    std::string::basic_string[abi:ne180100]<0>(v377[1].__r_.__value_.__r.__words, "listenAfterSpeaking");
    memset(&v356, 0, sizeof(v356));
    v332.__r_.__value_.__r.__words[0] = (std::string::size_type)&v356;
    v332.__r_.__value_.__s.__data_[8] = 0;
    v356.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
    v356.__r_.__value_.__l.__size_ = v356.__r_.__value_.__r.__words[0];
    v356.__r_.__value_.__r.__words[2] = v356.__r_.__value_.__r.__words[0] + 48;
    v217 = 0;
    v356.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v356.__r_.__value_.__r.__words[2], (__int128 *)v377, &v378, (std::string *)v356.__r_.__value_.__l.__data_);
    do
    {
      if (SHIBYTE(v377[v217 / 0x18 + 1].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v377[v217 / 0x18 + 1].__r_.__value_.__l.__data_);
      v217 -= 24;
    }
    while (v217 != -48);
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v345, 5);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v345, (uint64_t)"meta", 4u);
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartObject((uint64_t)&v345);
    v219 = v356.__r_.__value_.__l.__size_;
    for (j = v356.__r_.__value_.__r.__words[0]; j != v219; j += 24)
    {
      if (*(char *)(j + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v377, *(const std::string::value_type **)j, *(_QWORD *)(j + 8));
      }
      else
      {
        v220 = *(_OWORD *)j;
        v377[0].__r_.__value_.__r.__words[2] = *(_QWORD *)(j + 16);
        *(_OWORD *)&v377[0].__r_.__value_.__l.__data_ = v220;
      }
      siri::dialogengine::File::GetMetadataUnique(v216, (uint64_t)v377, &v332);
      v221 = HIBYTE(v332.__r_.__value_.__r.__words[2]);
      v222 = HIBYTE(v332.__r_.__value_.__r.__words[2]);
      if ((v332.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v221 = v332.__r_.__value_.__l.__size_;
      if (v221)
      {
        if ((v377[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v223 = v377;
        else
          v223 = (std::string *)v377[0].__r_.__value_.__r.__words[0];
        v224 = strlen((const char *)v223);
        rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v345, (uint64_t)v223, v224);
        if ((v332.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v225 = &v332;
        else
          v225 = (std::string *)v332.__r_.__value_.__r.__words[0];
        v226 = strlen((const char *)v225);
        rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v345, (uint64_t)v225, v226);
        v222 = HIBYTE(v332.__r_.__value_.__r.__words[2]);
      }
      if (v222 < 0)
        operator delete(v332.__r_.__value_.__l.__data_);
      if (SHIBYTE(v377[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v377[0].__r_.__value_.__l.__data_);
    }
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndObject((uint64_t)&v345);
    v377[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v356;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v377);
  }
  if (v99)
  {
    v227 = (siri::dialogengine::TraceWriter *)*((_QWORD *)v99 + 431);
    v228 = (std::__shared_weak_count *)*((_QWORD *)v99 + 432);
    v356.__r_.__value_.__r.__words[0] = (std::string::size_type)v227;
    v356.__r_.__value_.__l.__size_ = (std::string::size_type)v228;
    if (v228)
    {
      v229 = (unint64_t *)&v228->__shared_owners_;
      do
        v230 = __ldxr(v229);
      while (__stxr(v230 + 1, v229));
    }
    if (*(_BYTE *)v227)
    {
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v345, 5);
      rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v345, (uint64_t)"traceOutputPath", 0xFu);
      siri::dialogengine::TraceWriter::GetTracePath(v227, v377);
      v231 = (v377[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? v377
           : (std::string *)v377[0].__r_.__value_.__r.__words[0];
      v232 = strlen((const char *)v231);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v345, (uint64_t)v231, v232);
      if (SHIBYTE(v377[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v377[0].__r_.__value_.__l.__data_);
    }
    if (v228)
    {
      v233 = (unint64_t *)&v228->__shared_owners_;
      do
        v234 = __ldaxr(v233);
      while (__stlxr(v234 - 1, v233));
      if (!v234)
      {
        ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
        std::__shared_weak_count::__release_weak(v228);
      }
    }
    v235 = *(_OWORD *)((char *)v99 + 760);
    *(_OWORD *)&v377[0].__r_.__value_.__l.__data_ = *(_OWORD *)((char *)v99 + 744);
    *(_OWORD *)&v377[0].__r_.__value_.__r.__words[2] = v235;
    *(_OWORD *)&v377[1].__r_.__value_.__r.__words[1] = *(_OWORD *)((char *)v99 + 776);
    v236 = siri::dialogengine::ElapsedTimer::CalculateElapsedWallMilliseconds((siri::dialogengine::ElapsedTimer *)v377);
    v237 = *(double *)&v377[0].__r_.__value_.__r.__words[2];
    v238 = -1.0;
    if (*(double *)&v377[0].__r_.__value_.__r.__words[2] != -1.0)
    {
      v239 = v377[1].__r_.__value_.__s.__data_[16]
           ? *(double *)&v377[1].__r_.__value_.__l.__size_
           : siri::dialogengine::GetCurrentThreadMillisecondTime((siri::dialogengine *)v377[0].__r_.__value_.__l.__data_);
      if (v239 != -1.0)
        v238 = v239 - v237;
    }
    siri::dialogengine::LogCoreAnalyticsCatExecutionTimeEvent((uint64_t)&v375, v236, v238);
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v345, 5);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v345, (uint64_t)"elapsed_ms", 0xAu);
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v345, 6);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteDouble((uint64_t)&v345, v236);
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v345, 5);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v345, (uint64_t)"elapsed_thread_ms", 0x11u);
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v345, 6);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteDouble((uint64_t)&v345, v238);
    std::operator+<char>();
    v240 = std::string::append(&v344, "' with ");
    v241 = *(_OWORD *)&v240->__r_.__value_.__l.__data_;
    v355.__r_.__value_.__r.__words[2] = v240->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v355.__r_.__value_.__l.__data_ = v241;
    v240->__r_.__value_.__l.__size_ = 0;
    v240->__r_.__value_.__r.__words[2] = 0;
    v240->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v319, (uint64_t)(v372.__r_.__value_.__l.__size_ - v372.__r_.__value_.__r.__words[0]) >> 4);
    if ((v319.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v242 = &v319;
    else
      v242 = (std::string *)v319.__r_.__value_.__r.__words[0];
    if ((v319.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v243 = HIBYTE(v319.__r_.__value_.__r.__words[2]);
    else
      v243 = v319.__r_.__value_.__l.__size_;
    v244 = std::string::append(&v355, (const std::string::value_type *)v242, v243);
    v245 = *(_OWORD *)&v244->__r_.__value_.__l.__data_;
    v320.__r_.__value_.__r.__words[2] = v244->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v320.__r_.__value_.__l.__data_ = v245;
    v244->__r_.__value_.__l.__size_ = 0;
    v244->__r_.__value_.__r.__words[2] = 0;
    v244->__r_.__value_.__r.__words[0] = 0;
    v246 = std::string::append(&v320, " result(s) in ");
    v247 = *(_OWORD *)&v246->__r_.__value_.__l.__data_;
    v332.__r_.__value_.__r.__words[2] = v246->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v332.__r_.__value_.__l.__data_ = v247;
    v246->__r_.__value_.__l.__size_ = 0;
    v246->__r_.__value_.__r.__words[2] = 0;
    v246->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::ElapsedTimer::GetCombinedMSecsAsString((siri::dialogengine::ElapsedTimer *)v377, &v318);
    if ((v318.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v248 = &v318;
    else
      v248 = (std::string *)v318.__r_.__value_.__r.__words[0];
    if ((v318.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v249 = HIBYTE(v318.__r_.__value_.__r.__words[2]);
    else
      v249 = v318.__r_.__value_.__l.__size_;
    v250 = std::string::append(&v332, (const std::string::value_type *)v248, v249);
    v251 = *(_OWORD *)&v250->__r_.__value_.__l.__data_;
    v356.__r_.__value_.__r.__words[2] = v250->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v356.__r_.__value_.__l.__data_ = v251;
    v250->__r_.__value_.__l.__size_ = 0;
    v250->__r_.__value_.__r.__words[2] = 0;
    v250->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)&v356, 0);
    if (SHIBYTE(v356.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v356.__r_.__value_.__l.__data_);
    if (SHIBYTE(v318.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v318.__r_.__value_.__l.__data_);
    if (SHIBYTE(v332.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v332.__r_.__value_.__l.__data_);
    if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v320.__r_.__value_.__l.__data_);
    if (SHIBYTE(v319.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v319.__r_.__value_.__l.__data_);
    if (SHIBYTE(v355.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v355.__r_.__value_.__l.__data_);
    if (SHIBYTE(v344.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v344.__r_.__value_.__l.__data_);
    if ((_QWORD)v371)
    {
      siri::dialogengine::Context::UpdateState(v99, (const char *)&v345, 1);
      v252 = *((_QWORD *)v99 + 431);
      v253 = (std::__shared_weak_count *)*((_QWORD *)v99 + 432);
      v377[0].__r_.__value_.__r.__words[0] = v252;
      v377[0].__r_.__value_.__l.__size_ = (std::string::size_type)v253;
      if (v253)
      {
        v254 = (unint64_t *)&v253->__shared_owners_;
        do
          v255 = __ldxr(v254);
        while (__stxr(v255 + 1, v254));
      }
      siri::dialogengine::TraceWriter::WriteDialogStateToFile(v252, (char *)v99, 1);
      if (v253)
      {
        v256 = (unint64_t *)&v253->__shared_owners_;
        do
          v257 = __ldaxr(v256);
        while (__stlxr(v257 - 1, v256));
        if (!v257)
        {
          ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
          std::__shared_weak_count::__release_weak(v253);
        }
      }
    }
  }
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndObject((uint64_t)&v345);
  String = (char *)rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>::GetString((uint64_t *)v352);
  std::string::basic_string[abi:ne180100]<0>(v281, String);
  if (v99)
  {
    v259 = *((_QWORD *)v99 + 431);
    v260 = (std::__shared_weak_count *)*((_QWORD *)v99 + 432);
    v377[0].__r_.__value_.__r.__words[0] = v259;
    v377[0].__r_.__value_.__l.__size_ = (std::string::size_type)v260;
    if (v260)
    {
      v261 = (unint64_t *)&v260->__shared_owners_;
      do
        v262 = __ldxr(v261);
      while (__stxr(v262 + 1, v261));
    }
    siri::dialogengine::TraceWriter::WriteResponseJson(v259, (const char *)v281);
    if (v260)
    {
      v263 = (unint64_t *)&v260->__shared_owners_;
      do
        v264 = __ldaxr(v263);
      while (__stlxr(v264 - 1, v263));
      if (!v264)
      {
        ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
        std::__shared_weak_count::__release_weak(v260);
      }
    }
    v265 = (siri::dialogengine::Trace **)*((_QWORD *)v99 + 431);
    v266 = (std::__shared_weak_count *)*((_QWORD *)v99 + 432);
    v377[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v265;
    v377[0].__r_.__value_.__l.__size_ = (std::string::size_type)v266;
    if (v266)
    {
      v267 = (unint64_t *)&v266->__shared_owners_;
      do
        v268 = __ldxr(v267);
      while (__stxr(v268 + 1, v267));
    }
    siri::dialogengine::TraceWriter::WriteRunScript(v265, v99);
    if (v266)
    {
      v269 = (unint64_t *)&v266->__shared_owners_;
      do
        v270 = __ldaxr(v269);
      while (__stlxr(v270 - 1, v269));
      if (!v270)
      {
        ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
        std::__shared_weak_count::__release_weak(v266);
      }
    }
  }
  if (v298)
    operator delete(v298);
  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy((uint64_t)v280);
  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy((uint64_t)v352);
  v377[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v376;
  std::vector<std::vector<siri::dialogengine::SpeakableString>>::__destroy_vector::operator()[abi:ne180100]((void ***)v377);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v271 = (std::__shared_weak_count *)*((_QWORD *)&v371 + 1);
  if (*((_QWORD *)&v371 + 1))
  {
    v272 = (unint64_t *)(*((_QWORD *)&v371 + 1) + 8);
    do
      v273 = __ldaxr(v272);
    while (__stlxr(v273 - 1, v272));
    if (!v273)
    {
      ((void (*)(std::__shared_weak_count *))v271->__on_zero_shared)(v271);
      std::__shared_weak_count::__release_weak(v271);
    }
  }
  v377[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v372;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)v377);
  if (SHIBYTE(v373.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v373.__r_.__value_.__l.__data_);
  if (SHIBYTE(v374.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v374.__r_.__value_.__l.__data_);
  if (SHIBYTE(v375.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v375.__r_.__value_.__l.__data_);
}

void sub_1BF988E2C(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x4A7]) < 0)
    operator delete((void *)STACK[0x490]);
  if (SLOBYTE(STACK[0x45F]) < 0)
    operator delete((void *)STACK[0x448]);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2B0]);
  if (SLOBYTE(STACK[0x7B7]) < 0)
    operator delete((void *)STACK[0x7A0]);
  STACK[0x7A0] = (unint64_t)&STACK[0x2D0];
  std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x7A0]);
  if (SLOBYTE(STACK[0x397]) < 0)
    operator delete((void *)STACK[0x380]);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x430]);
  if (SLOBYTE(STACK[0x4D7]) < 0)
    operator delete((void *)STACK[0x4C0]);
  siri::dialogengine::RequestInfo::~RequestInfo((void **)&STACK[0x4E0]);
  if (SLOBYTE(STACK[0x6E7]) < 0)
    operator delete((void *)STACK[0x6D0]);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x6F0]);
  STACK[0x2D0] = (unint64_t)&STACK[0x700];
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2D0]);
  if (SLOBYTE(STACK[0x737]) < 0)
    operator delete((void *)STACK[0x720]);
  if (SLOBYTE(STACK[0x757]) < 0)
    operator delete((void *)STACK[0x740]);
  if (SLOBYTE(STACK[0x777]) < 0)
    operator delete((void *)STACK[0x760]);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::HasPreloadBeenCalled(siri::dialogengine *this)
{
  uint64_t v1;

  siri::dialogengine::GetPreloadStatusMutex(this);
  std::mutex::lock(&siri::dialogengine::GetPreloadStatusMutex(void)::sMutex);
  v1 = siri::dialogengine::GetPreloadStatus(void)::sPreloadHasBeenCalled;
  std::mutex::unlock(&siri::dialogengine::GetPreloadStatusMutex(void)::sMutex);
  return v1;
}

_QWORD *std::vector<siri::dialogengine::SpeakableString>::__init_with_size[abi:ne180100]<siri::dialogengine::SpeakableString*,siri::dialogengine::SpeakableString*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;

  if (a4)
  {
    if (a4 >= 0x186186186186187)
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    v6 = result;
    result = std::__allocate_at_least[abi:ne180100]<std::allocator<siri::dialogengine::SpeakableString>>(a4);
    v7 = result;
    *v6 = result;
    v6[1] = result;
    v6[2] = &result[21 * v8];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = siri::dialogengine::SpeakableString::SpeakableString((std::string *)&v7[v9 / 8], (const siri::dialogengine::SpeakableString *)(a2 + v9));
        v9 += 168;
      }
      while (a2 + v9 != a3);
      v7 = (_QWORD *)((char *)v7 + v9);
    }
    v6[1] = v7;
  }
  return result;
}

void sub_1BF989658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<siri::dialogengine::SpeakableString>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void siri::dialogengine::NodeVectorDialogFilterAdapter::~NodeVectorDialogFilterAdapter(siri::dialogengine::NodeVectorDialogFilterAdapter *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E79360B8;
  std::__tree<std::__value_type<YAML::detail::node_ref const*,int>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,int>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,int>>>::destroy(*((_QWORD **)this + 6));
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_1E79360B8;
  std::__tree<std::__value_type<YAML::detail::node_ref const*,int>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,int>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,int>>>::destroy(*((_QWORD **)this + 6));
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1C3B8D890);
}

uint64_t *rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::RawValue(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *result;
  unint64_t v7;
  char v8;

  if (!a2)
    __assert_rtn("RawValue", "prettywriter.h", 202, "json != 0");
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)a1, 5);
  result = (uint64_t *)*a1;
  if (*(_QWORD *)(*a1 + 32) - *(_QWORD *)(*a1 + 24) < a3)
  {
    result = (uint64_t *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(result, a3);
    if (!a3)
      return result;
  }
  else if (!a3)
  {
    return result;
  }
  v7 = 0;
  do
  {
    v8 = *(_BYTE *)(a2 + v7);
    if (!v8)
      __assert_rtn("WriteRawValue", "writer.h", 463, "is.Peek() != '\\0'");
    result = (uint64_t *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::PushUnsafe<char>(*a1, 1);
    *(_BYTE *)result = v8;
    ++v7;
  }
  while (v7 < a3);
  return result;
}

void std::vector<std::vector<siri::dialogengine::SpeakableString>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<siri::dialogengine::SpeakableString>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<std::vector<siri::dialogengine::SpeakableString>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void **v4;
  void **v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v6 = v4;
    std::vector<siri::dialogengine::SpeakableString>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void siri::dialogengine::GetPreloadStatusMutex(siri::dialogengine *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE4AB8], &siri::dialogengine::GetPreloadStatusMutex(void)::sMutex, &dword_1BF794000);
    }
  }
}

void siri::dialogengine::ReportPreloadHasBeenCalled(siri::dialogengine *this)
{
  siri::dialogengine::GetPreloadStatusMutex(this);
  std::mutex::lock(&siri::dialogengine::GetPreloadStatusMutex(void)::sMutex);
  siri::dialogengine::GetPreloadStatus(void)::sPreloadHasBeenCalled = 1;
  std::mutex::unlock(&siri::dialogengine::GetPreloadStatusMutex(void)::sMutex);
}

void sub_1BF989AB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BF989BB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BF989C54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)DECompressWriter;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1BF989E14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BF989EB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BF989F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1BF98A040(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BF98A114(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BF98A1B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)DEDecompressWriter;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1BF98A2DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BF98A378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void siri::dialogengine::ChunkVariable::~ChunkVariable(void **this)
{
  *this = off_1E7930388;
  if (*((char *)this + 247) < 0)
    operator delete(this[28]);
  if (*((char *)this + 223) < 0)
    operator delete(this[25]);
  *this = &off_1E7937608;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(this[23]);
  siri::dialogengine::SpeakableString::~SpeakableString(this + 1);
}

{
  *this = off_1E7930388;
  if (*((char *)this + 247) < 0)
    operator delete(this[28]);
  if (*((char *)this + 223) < 0)
    operator delete(this[25]);
  *this = &off_1E7937608;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(this[23]);
  siri::dialogengine::SpeakableString::~SpeakableString(this + 1);
  JUMPOUT(0x1C3B8D890);
}

BOOL siri::dialogengine::ChunkVariable::Validate(uint64_t a1, siri::dialogengine::Context *a2, uint64_t a3)
{
  std::string *v6;
  std::string::size_type size;
  BOOL IsArrayType;
  std::string *v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  siri::dialogengine::File *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  size_t v18;
  size_t v19;
  std::string *p_s1;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  const char *v27;
  std::string *v28;
  std::string::size_type v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  __int128 v33;
  std::string::size_type v34;
  std::string *v35;
  __int128 v36;
  std::string *v37;
  std::string::size_type v38;
  std::string *v39;
  __int128 v40;
  std::string::size_type v41;
  size_t v42;
  void *v43;
  int v44;
  std::string *v45;
  __int128 v46;
  __int128 *v47;
  std::string::size_type v48;
  __int128 *v49;
  std::string::size_type v50;
  std::string::size_type v51;
  size_t v52;
  size_t v53;
  size_t v54;
  std::string *p_p;
  char *v56;
  size_t v57;
  std::string *v58;
  std::string *v59;
  __int128 v60;
  std::string::size_type v61;
  std::string::size_type v62;
  __int128 v63;
  std::string::size_type v64;
  std::string::size_type v65;
  std::string::size_type v66;
  std::string::size_type v67;
  std::string::size_type v68;
  std::string::size_type v69;
  std::string::size_type v70;
  std::string::size_type v71;
  std::string::size_type v72;
  std::string::size_type v73;
  std::string::size_type v74;
  std::string *v75;
  __int128 v76;
  std::string::size_type v77;
  std::string::size_type v78;
  std::string::size_type v79;
  std::string *v80;
  __int128 v81;
  std::string *v82;
  std::string::size_type v83;
  std::string *v84;
  __int128 v85;
  std::string *v86;
  __int128 v87;
  std::string *v88;
  __int128 v89;
  std::string::size_type v90;
  std::string *v91;
  __int128 v92;
  std::string *v93;
  std::string::size_type v94;
  std::string *v95;
  __int128 v96;
  std::string::size_type v97;
  size_t v98;
  void *v99;
  int v100;
  std::string::size_type v101;
  size_t v102;
  void *v103;
  int v104;
  unint64_t v105;
  __int128 *v106;
  unint64_t v107;
  unsigned __int8 v108;
  __int128 *v109;
  __int128 *v110;
  BOOL v111;
  void *v113[2];
  char v114;
  void *v115[2];
  unsigned __int8 v116;
  __int128 *v117;
  _QWORD *v118[2];
  void *v119[2];
  unsigned __int8 v120;
  std::string v121;
  std::string v122;
  std::string v123;
  std::string v124;
  std::string v125;
  std::string v126;
  std::string v127;
  std::string v128;
  std::string v129;
  std::string __str;
  std::string v131;
  std::string v132;
  std::string v133;
  std::string v134;
  std::string v135;
  std::string __p;
  std::string v137[9];
  void *v138[12];
  std::string v139;
  std::string v140;
  std::string __s1;
  void *v142[16];
  std::string __s;
  char v144;

  if (!a2)
    return 0;
  LOBYTE(v142[0]) = 0;
  v144 = 0;
  v6 = (std::string *)(a1 + 200);
  siri::dialogengine::ResolveType(v142, (uint64_t)a2, a1 + 200, 1, (uint64_t)&__s1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "iterator");
  siri::dialogengine::ChunkText::GetAttribute(a1, (uint64_t)&__p, &v140);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  size = HIBYTE(v140.__r_.__value_.__r.__words[2]);
  if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v140.__r_.__value_.__l.__size_;
  if (size)
  {
    IsArrayType = siri::dialogengine::IsArrayType(&__s1);
    if (!IsArrayType)
    {
      std::operator+<char>();
      v9 = std::string::append(&v139, "'");
      v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Context::AddValidationError((uint64_t)a2, (__int128 *)&__p, a3);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v139.__r_.__value_.__l.__data_);
    }
    v12 = (siri::dialogengine::File *)*((_QWORD *)a2 + 63);
    v11 = (std::__shared_weak_count *)*((_QWORD *)a2 + 64);
    v129.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
    v129.__r_.__value_.__l.__size_ = (std::string::size_type)v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    siri::dialogengine::GetArrayElementType((uint64_t)&__s1, &v139);
    std::string::basic_string[abi:ne180100]<0>(&v135, "");
    std::string::basic_string[abi:ne180100]<0>(&v134, "");
    std::string::basic_string[abi:ne180100]<0>(&v133, "");
    std::string::basic_string[abi:ne180100]<0>(&v132, "");
    std::string::basic_string[abi:ne180100]<0>(&v131, "");
    std::string::basic_string[abi:ne180100]<0>(&__str, "");
    siri::dialogengine::Parameter::Parameter((uint64_t)&__p, &v140, &v139, &v135, &v134, &v133, &v132, &v131, &__str, 1, 0, 0, 1);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v131.__r_.__value_.__l.__data_);
    if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v132.__r_.__value_.__l.__data_);
    if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v133.__r_.__value_.__l.__data_);
    if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v134.__r_.__value_.__l.__data_);
    if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v135.__r_.__value_.__l.__data_);
    if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v139.__r_.__value_.__l.__data_);
    siri::dialogengine::File::AddParameter(v12, (const siri::dialogengine::Parameter *)&__p);
    v138[8] = off_1E793AED8;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((_QWORD *)v138[10]);
    siri::dialogengine::LineNumberBase::~LineNumberBase(v138);
    siri::dialogengine::ObjectProperty::~ObjectProperty((void **)&__p.__r_.__value_.__l.__data_);
    if (v11)
    {
      v15 = (unint64_t *)&v11->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else
  {
    IsArrayType = 1;
  }
  if (*(char *)(a1 + 223) < 0)
    v17 = *(_QWORD *)(a1 + 208);
  else
    v17 = *(unsigned __int8 *)(a1 + 223);
  if (!v17)
    goto LABEL_105;
  v18 = strlen(siri::dialogengine::TYPE_UNKNOWN);
  v19 = v18;
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v18 != __s1.__r_.__value_.__l.__size_)
      goto LABEL_52;
    if (v18 == -1)
      std::string::__throw_out_of_range[abi:ne180100]();
    p_s1 = (std::string *)__s1.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (v18 != HIBYTE(__s1.__r_.__value_.__r.__words[2]))
      goto LABEL_52;
    p_s1 = &__s1;
  }
  if (!memcmp(p_s1, siri::dialogengine::TYPE_UNKNOWN, v19))
  {
    std::operator+<char>();
    v21 = std::string::append(&v139, "'");
    v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, (__int128 *)&__p, a3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v139.__r_.__value_.__l.__data_);
    IsArrayType = 0;
  }
LABEL_52:
  if (!siri::dialogengine::IsPropertyValidForType((_BOOL8)a2, (unsigned __int8 *)v6))
  {
    std::operator+<char>();
    v23 = std::string::append(&v139, "'");
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, (__int128 *)&__p, a3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v139.__r_.__value_.__l.__data_);
    IsArrayType = 0;
  }
  if ((siri::dialogengine::IsPropertyValidForLocale((uint64_t)a2, (unsigned __int8 *)v6) & 1) == 0)
  {
    std::operator+<char>();
    v25 = std::string::append(&v134, "' is not valid for locale '");
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v135.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v135.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::GetLocale(a2, v27, (uint64_t)&v133);
    if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = &v133;
    else
      v28 = (std::string *)v133.__r_.__value_.__r.__words[0];
    if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v29 = HIBYTE(v133.__r_.__value_.__r.__words[2]);
    else
      v29 = v133.__r_.__value_.__l.__size_;
    v30 = std::string::append(&v135, (const std::string::value_type *)v28, v29);
    v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v139.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    v32 = std::string::append(&v139, "'");
    v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, (__int128 *)&__p, a3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v139.__r_.__value_.__l.__data_);
    if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v133.__r_.__value_.__l.__data_);
    if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v135.__r_.__value_.__l.__data_);
    if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v134.__r_.__value_.__l.__data_);
    IsArrayType = 0;
  }
  if (v144)
  {
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
    else
      __p = __s;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v34 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v34 = __p.__r_.__value_.__l.__size_;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (!v34)
        goto LABEL_105;
    }
    else if (!v34)
    {
      goto LABEL_105;
    }
    std::operator+<char>();
    v35 = std::string::append(&v135, "' is deprecated: ");
    v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    v139.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v36;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v134, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
    else
      v134 = __s;
    if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v37 = &v134;
    else
      v37 = (std::string *)v134.__r_.__value_.__r.__words[0];
    if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v38 = HIBYTE(v134.__r_.__value_.__r.__words[2]);
    else
      v38 = v134.__r_.__value_.__l.__size_;
    v39 = std::string::append(&v139, (const std::string::value_type *)v37, v38);
    v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationWarning((uint64_t)a2, (__int128 *)&__p, a3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v134.__r_.__value_.__l.__data_);
    if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v139.__r_.__value_.__l.__data_);
    if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v135.__r_.__value_.__l.__data_);
    IsArrayType = 0;
  }
LABEL_105:
  std::string::basic_string[abi:ne180100]<0>(&__p, "number");
  siri::dialogengine::ChunkText::GetAttribute(a1, (uint64_t)&__p, &v139);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v41 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
  if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v41 = v139.__r_.__value_.__l.__size_;
  if (v41)
  {
    siri::dialogengine::ResolveType(0, (uint64_t)a2, (uint64_t)v6, 1, (uint64_t)&__p);
    v42 = strlen(siri::dialogengine::TYPE_NUMBER[0]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v42 == __p.__r_.__value_.__l.__size_)
      {
        if (v42 == -1)
          std::string::__throw_out_of_range[abi:ne180100]();
        v43 = (void *)__p.__r_.__value_.__r.__words[0];
        v44 = memcmp(__p.__r_.__value_.__l.__data_, siri::dialogengine::TYPE_NUMBER[0], v42);
        operator delete(v43);
        if (!v44)
          goto LABEL_124;
      }
      else
      {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else if (v42 == HIBYTE(__p.__r_.__value_.__r.__words[2]) && !memcmp(&__p, siri::dialogengine::TYPE_NUMBER[0], v42))
    {
LABEL_124:
      memset(&v135, 0, sizeof(v135));
      memset(&v134, 0, sizeof(v134));
      siri::dialogengine::ValidateNumber(a2, (uint64_t)&v139, (uint64_t)&__p);
      std::vector<std::string>::__vdeallocate((std::vector<std::string> *)&v135);
      v135 = __p;
      memset(&__p, 0, sizeof(__p));
      std::vector<std::string>::__vdeallocate((std::vector<std::string> *)&v134);
      v134 = v137[0];
      memset(v137, 0, 24);
      v133.__r_.__value_.__r.__words[0] = (std::string::size_type)v137;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v133);
      v133.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v133);
      v48 = v135.__r_.__value_.__l.__size_;
      v47 = (__int128 *)v135.__r_.__value_.__r.__words[0];
      if (v135.__r_.__value_.__r.__words[0] != v135.__r_.__value_.__l.__size_)
      {
        do
        {
          siri::dialogengine::Context::AddValidationError((uint64_t)a2, v47, a3);
          v47 = (__int128 *)((char *)v47 + 24);
        }
        while (v47 != (__int128 *)v48);
        IsArrayType = 0;
      }
      v50 = v134.__r_.__value_.__l.__size_;
      v49 = (__int128 *)v134.__r_.__value_.__r.__words[0];
      if (v134.__r_.__value_.__r.__words[0] != v134.__r_.__value_.__l.__size_)
      {
        do
        {
          siri::dialogengine::Context::AddValidationWarning((uint64_t)a2, v49, a3);
          v49 = (__int128 *)((char *)v49 + 24);
        }
        while (v49 != (__int128 *)v50);
        IsArrayType = 0;
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v134;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v135;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      goto LABEL_131;
    }
    std::operator+<char>();
    v45 = std::string::append(&v135, "'");
    v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v46;
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, (__int128 *)&__p, a3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v135.__r_.__value_.__l.__data_);
    IsArrayType = 0;
    goto LABEL_124;
  }
LABEL_131:
  std::string::basic_string[abi:ne180100]<0>(&__p, "inflect");
  siri::dialogengine::ChunkText::GetAttribute(a1, (uint64_t)&__p, &v135);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v51 = HIBYTE(v135.__r_.__value_.__r.__words[2]);
  if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v51 = v135.__r_.__value_.__l.__size_;
  if (v51)
  {
    siri::dialogengine::ResolveType(0, (uint64_t)a2, (uint64_t)v6, 1, (uint64_t)&__p);
    v52 = strlen(siri::dialogengine::TYPE_STRING[0]);
    v53 = v52;
    v54 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v52 != __p.__r_.__value_.__l.__size_)
      {
        v56 = siri::dialogengine::TYPE_NUMBER[0];
        v57 = strlen(siri::dialogengine::TYPE_NUMBER[0]);
        v54 = __p.__r_.__value_.__l.__size_;
        goto LABEL_149;
      }
      if (v52 == -1)
        std::string::__throw_out_of_range[abi:ne180100]();
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (v52 != HIBYTE(__p.__r_.__value_.__r.__words[2]))
      {
        v56 = siri::dialogengine::TYPE_NUMBER[0];
        v57 = strlen(siri::dialogengine::TYPE_NUMBER[0]);
        goto LABEL_146;
      }
      p_p = &__p;
    }
    if (!memcmp(p_p, siri::dialogengine::TYPE_STRING[0], v53))
      goto LABEL_159;
    v56 = siri::dialogengine::TYPE_NUMBER[0];
    v57 = strlen(siri::dialogengine::TYPE_NUMBER[0]);
    if ((v54 & 0x80) != 0)
    {
      v54 = __p.__r_.__value_.__l.__size_;
LABEL_149:
      if (v57 != v54)
        goto LABEL_153;
      if (v54 == -1)
        std::string::__throw_out_of_range[abi:ne180100]();
      v58 = (std::string *)__p.__r_.__value_.__r.__words[0];
LABEL_152:
      if (memcmp(v58, v56, v54))
      {
LABEL_153:
        if (!siri::dialogengine::IsArrayType(&__p))
        {
          std::operator+<char>();
          v59 = std::string::append(&v133, "'");
          v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
          v134.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v134.__r_.__value_.__l.__data_ = v60;
          v59->__r_.__value_.__l.__size_ = 0;
          v59->__r_.__value_.__r.__words[2] = 0;
          v59->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Context::AddValidationError((uint64_t)a2, (__int128 *)&v134, a3);
          if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v134.__r_.__value_.__l.__data_);
          if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v133.__r_.__value_.__l.__data_);
          IsArrayType = 0;
        }
      }
LABEL_159:
      siri::dialogengine::SemanticFeatureConstraint::ValidateString(a2, (unsigned __int8 *)&v135, (uint64_t)&v134);
      v62 = v134.__r_.__value_.__l.__size_;
      v61 = v134.__r_.__value_.__r.__words[0];
      if (v134.__r_.__value_.__r.__words[0] != v134.__r_.__value_.__l.__size_)
      {
        do
        {
          if (*(char *)(v61 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v133, *(const std::string::value_type **)v61, *(_QWORD *)(v61 + 8));
          }
          else
          {
            v63 = *(_OWORD *)v61;
            v133.__r_.__value_.__r.__words[2] = *(_QWORD *)(v61 + 16);
            *(_OWORD *)&v133.__r_.__value_.__l.__data_ = v63;
          }
          siri::dialogengine::Context::AddValidationError((uint64_t)a2, (__int128 *)&v133, a3);
          if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v133.__r_.__value_.__l.__data_);
          v61 += 24;
        }
        while (v61 != v62);
        IsArrayType = 0;
      }
      v133.__r_.__value_.__r.__words[0] = (std::string::size_type)&v134;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v133);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_169;
    }
LABEL_146:
    if (v57 != v54)
      goto LABEL_153;
    v58 = &__p;
    goto LABEL_152;
  }
LABEL_169:
  std::string::basic_string[abi:ne180100]<0>(&__p, "list");
  siri::dialogengine::ChunkText::GetAttribute(a1, (uint64_t)&__p, &v134);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "beforefirst");
  siri::dialogengine::ChunkText::GetAttribute(a1, (uint64_t)&__p, &v133);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "afterfirst");
  siri::dialogengine::ChunkText::GetAttribute(a1, (uint64_t)&__p, &v132);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "separator");
  siri::dialogengine::ChunkText::GetAttribute(a1, (uint64_t)&__p, &v131);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "beforelast");
  siri::dialogengine::ChunkText::GetAttribute(a1, (uint64_t)&__p, &__str);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "afterlast");
  siri::dialogengine::ChunkText::GetAttribute(a1, (uint64_t)&__p, &v129);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "itemprefix");
  siri::dialogengine::ChunkText::GetAttribute(a1, (uint64_t)&__p, &v128);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "itemsuffix");
  siri::dialogengine::ChunkText::GetAttribute(a1, (uint64_t)&__p, &v127);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "itemformat");
  siri::dialogengine::ChunkText::GetAttribute(a1, (uint64_t)&__p, &v126);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "formatPhrase");
  siri::dialogengine::ChunkText::GetAttribute(a1, (uint64_t)&__p, &v125);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v64 = HIBYTE(v134.__r_.__value_.__r.__words[2]);
  if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v64 = v134.__r_.__value_.__l.__size_;
  if (v64)
    goto LABEL_222;
  v65 = HIBYTE(v133.__r_.__value_.__r.__words[2]);
  if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v65 = v133.__r_.__value_.__l.__size_;
  if (v65)
    goto LABEL_222;
  v66 = HIBYTE(v132.__r_.__value_.__r.__words[2]);
  if ((v132.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v66 = v132.__r_.__value_.__l.__size_;
  if (v66)
    goto LABEL_222;
  v67 = HIBYTE(v131.__r_.__value_.__r.__words[2]);
  if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v67 = v131.__r_.__value_.__l.__size_;
  if (v67)
    goto LABEL_222;
  v68 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v68 = __str.__r_.__value_.__l.__size_;
  if (v68)
    goto LABEL_222;
  v69 = HIBYTE(v129.__r_.__value_.__r.__words[2]);
  if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v69 = v129.__r_.__value_.__l.__size_;
  if (v69)
    goto LABEL_222;
  v70 = HIBYTE(v128.__r_.__value_.__r.__words[2]);
  if ((v128.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v70 = v128.__r_.__value_.__l.__size_;
  if (v70)
    goto LABEL_222;
  v71 = HIBYTE(v127.__r_.__value_.__r.__words[2]);
  if ((v127.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v71 = v127.__r_.__value_.__l.__size_;
  if (v71)
    goto LABEL_222;
  v72 = HIBYTE(v126.__r_.__value_.__r.__words[2]);
  if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v72 = v126.__r_.__value_.__l.__size_;
  if (v72)
    goto LABEL_222;
  v73 = HIBYTE(v140.__r_.__value_.__r.__words[2]);
  if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v73 = v140.__r_.__value_.__l.__size_;
  if (v73)
    goto LABEL_222;
  v74 = HIBYTE(v125.__r_.__value_.__r.__words[2]);
  if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v74 = v125.__r_.__value_.__l.__size_;
  if (v74)
  {
LABEL_222:
    if (!siri::dialogengine::IsArrayType(&__s1))
    {
      std::operator+<char>();
      v75 = std::string::append(&v124, "'");
      v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v76;
      v75->__r_.__value_.__l.__size_ = 0;
      v75->__r_.__value_.__r.__words[2] = 0;
      v75->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Context::AddValidationError((uint64_t)a2, (__int128 *)&__p, a3);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v124.__r_.__value_.__l.__data_);
      IsArrayType = 0;
    }
  }
  if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v77 = HIBYTE(v140.__r_.__value_.__r.__words[2]);
  else
    v77 = v140.__r_.__value_.__l.__size_;
  v78 = HIBYTE(v125.__r_.__value_.__r.__words[2]);
  if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v78 = v125.__r_.__value_.__l.__size_;
  if (v77)
  {
    if (v78)
      goto LABEL_240;
  }
  else if (!v78)
  {
    goto LABEL_240;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "Missing 'iterator' or 'formatPhrase' attributes; both of these attributes must be set");
  siri::dialogengine::Context::AddValidationError((uint64_t)a2, (__int128 *)&__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  IsArrayType = 0;
LABEL_240:
  v79 = HIBYTE(v126.__r_.__value_.__r.__words[2]);
  if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v79 = v126.__r_.__value_.__l.__size_;
  if (v79
    && (siri::dialogengine::ValidateArrayItemFormat((uint64_t)a2, &v126, (const void **)&v6->__r_.__value_.__l.__data_) & 1) == 0)
  {
    std::operator+<char>();
    v80 = std::string::append(&v122, "' references unknown type: '");
    v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
    v123.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v123.__r_.__value_.__l.__data_ = v81;
    v80->__r_.__value_.__l.__size_ = 0;
    v80->__r_.__value_.__r.__words[2] = 0;
    v80->__r_.__value_.__r.__words[0] = 0;
    if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v82 = &v126;
    else
      v82 = (std::string *)v126.__r_.__value_.__r.__words[0];
    if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v83 = HIBYTE(v126.__r_.__value_.__r.__words[2]);
    else
      v83 = v126.__r_.__value_.__l.__size_;
    v84 = std::string::append(&v123, (const std::string::value_type *)v82, v83);
    v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
    v124.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v85;
    v84->__r_.__value_.__l.__size_ = 0;
    v84->__r_.__value_.__r.__words[2] = 0;
    v84->__r_.__value_.__r.__words[0] = 0;
    v86 = std::string::append(&v124, "'");
    v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v87;
    v86->__r_.__value_.__l.__size_ = 0;
    v86->__r_.__value_.__r.__words[2] = 0;
    v86->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, (__int128 *)&__p, a3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v124.__r_.__value_.__l.__data_);
    if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v123.__r_.__value_.__l.__data_);
    if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v122.__r_.__value_.__l.__data_);
    IsArrayType = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "transform");
  siri::dialogengine::ChunkText::GetAttribute(a1, (uint64_t)&__p, &v124);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v124.__r_.__value_.__l.__size_)
      goto LABEL_271;
  }
  else if (!*((_BYTE *)&v124.__r_.__value_.__s + 23))
  {
    goto LABEL_271;
  }
  if (!siri::dialogengine::IsValidTransformMode(&v124))
  {
    std::operator+<char>();
    v88 = std::string::append(&v123, "'");
    v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v88->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v89;
    v88->__r_.__value_.__l.__size_ = 0;
    v88->__r_.__value_.__r.__words[2] = 0;
    v88->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, (__int128 *)&__p, 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v123.__r_.__value_.__l.__data_);
    IsArrayType = 0;
  }
LABEL_271:
  std::string::basic_string[abi:ne180100]<0>(&__p, "ground");
  siri::dialogengine::ChunkText::GetAttribute(a1, (uint64_t)&__p, &v123);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v90 = HIBYTE(v123.__r_.__value_.__r.__words[2]);
  if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v90 = v123.__r_.__value_.__l.__size_;
  if (v90 && !siri::dialogengine::GetGroundingMode((unsigned __int8 *)&v123))
  {
    std::operator+<char>();
    v91 = std::string::append(&v121, "': ");
    v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
    v122.__r_.__value_.__r.__words[2] = v91->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v122.__r_.__value_.__l.__data_ = v92;
    v91->__r_.__value_.__l.__size_ = 0;
    v91->__r_.__value_.__r.__words[2] = 0;
    v91->__r_.__value_.__r.__words[0] = 0;
    if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v93 = &v123;
    else
      v93 = (std::string *)v123.__r_.__value_.__r.__words[0];
    if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v94 = HIBYTE(v123.__r_.__value_.__r.__words[2]);
    else
      v94 = v123.__r_.__value_.__l.__size_;
    v95 = std::string::append(&v122, (const std::string::value_type *)v93, v94);
    v96 = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v95->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v96;
    v95->__r_.__value_.__l.__size_ = 0;
    v95->__r_.__value_.__r.__words[2] = 0;
    v95->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, (__int128 *)&__p, a3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v122.__r_.__value_.__l.__data_);
    if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v121.__r_.__value_.__l.__data_);
    IsArrayType = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "groundvar");
  siri::dialogengine::ChunkText::GetAttribute(a1, (uint64_t)&__p, &v122);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v97 = HIBYTE(v122.__r_.__value_.__r.__words[2]);
  if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v97 = v122.__r_.__value_.__l.__size_;
  if (v97)
  {
    siri::dialogengine::ResolveType(0, (uint64_t)a2, (uint64_t)&v122, 1, (uint64_t)&__p);
    v98 = strlen(siri::dialogengine::TYPE_UNKNOWN);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (v98 != HIBYTE(__p.__r_.__value_.__r.__words[2]) || memcmp(&__p, siri::dialogengine::TYPE_UNKNOWN, v98))
        goto LABEL_306;
      goto LABEL_302;
    }
    if (v98 != __p.__r_.__value_.__l.__size_)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_306;
    }
    if (v98 == -1)
      std::string::__throw_out_of_range[abi:ne180100]();
    v99 = (void *)__p.__r_.__value_.__r.__words[0];
    v100 = memcmp(__p.__r_.__value_.__l.__data_, siri::dialogengine::TYPE_UNKNOWN, v98);
    operator delete(v99);
    if (!v100)
    {
LABEL_302:
      std::operator+<char>();
      siri::dialogengine::Context::AddValidationError((uint64_t)a2, (__int128 *)&__p, a3);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      IsArrayType = 0;
    }
  }
LABEL_306:
  std::string::basic_string[abi:ne180100]<0>(&__p, "semanticConcept");
  siri::dialogengine::ChunkText::GetAttribute(a1, (uint64_t)&__p, &v121);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v101 = HIBYTE(v121.__r_.__value_.__r.__words[2]);
  if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v101 = v121.__r_.__value_.__l.__size_;
  if (!v101)
    goto LABEL_322;
  siri::dialogengine::GetLiteralType(v6, &__p);
  v102 = strlen(siri::dialogengine::TYPE_UNKNOWN);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v102 == __p.__r_.__value_.__l.__size_)
    {
      if (v102 == -1)
        std::string::__throw_out_of_range[abi:ne180100]();
      v103 = (void *)__p.__r_.__value_.__r.__words[0];
      v104 = memcmp(__p.__r_.__value_.__l.__data_, siri::dialogengine::TYPE_UNKNOWN, v102);
      operator delete(v103);
      if (v104)
        goto LABEL_322;
      goto LABEL_318;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  else if (v102 == HIBYTE(__p.__r_.__value_.__r.__words[2]) && !memcmp(&__p, siri::dialogengine::TYPE_UNKNOWN, v102))
  {
LABEL_318:
    std::string::basic_string[abi:ne180100]<0>(&__p, "Semantic concepts should be defined in the params file for non-literals, not on the <var> element");
    siri::dialogengine::Context::AddValidationWarning((uint64_t)a2, (__int128 *)&__p, a3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    IsArrayType = 0;
  }
LABEL_322:
  siri::dialogengine::ValidateVariableVersion((uint64_t)a2, (uint64_t)v6, v119);
  v105 = v120;
  if ((v120 & 0x80u) != 0)
    v105 = (unint64_t)v119[1];
  if (v105)
  {
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, (__int128 *)v119, a3);
    IsArrayType = 0;
  }
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&v117, (const void ***)(a1 + 176));
  v106 = v117;
  if (v117 != (__int128 *)v118)
  {
    do
    {
      std::pair<std::string const,std::string>::pair[abi:ne180100](&__p, v106 + 2);
      std::string::basic_string[abi:ne180100]<0>(v113, "var");
      siri::dialogengine::ValidateXmlAttributeVersion(a2, (const void **)v113, (uint64_t)&__p, v115);
      if (v114 < 0)
        operator delete(v113[0]);
      v107 = v116;
      v108 = v116;
      if ((v116 & 0x80u) != 0)
        v107 = (unint64_t)v115[1];
      if (v107)
      {
        siri::dialogengine::Context::AddValidationError((uint64_t)a2, (__int128 *)v115, 0);
        IsArrayType = 0;
        v108 = v116;
      }
      if ((v108 & 0x80) != 0)
        operator delete(v115[0]);
      if (SHIBYTE(v137[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v137[0].__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v109 = (__int128 *)*((_QWORD *)v106 + 1);
      if (v109)
      {
        do
        {
          v110 = v109;
          v109 = *(__int128 **)v109;
        }
        while (v109);
      }
      else
      {
        do
        {
          v110 = (__int128 *)*((_QWORD *)v106 + 2);
          v111 = *(_QWORD *)v110 == (_QWORD)v106;
          v106 = v110;
        }
        while (!v111);
      }
      v106 = v110;
    }
    while (v110 != (__int128 *)v118);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v118[0]);
  if ((char)v120 < 0)
    operator delete(v119[0]);
  if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v121.__r_.__value_.__l.__data_);
  if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v122.__r_.__value_.__l.__data_);
  if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v123.__r_.__value_.__l.__data_);
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v124.__r_.__value_.__l.__data_);
  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v125.__r_.__value_.__l.__data_);
  if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v126.__r_.__value_.__l.__data_);
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v127.__r_.__value_.__l.__data_);
  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v128.__r_.__value_.__l.__data_);
  if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v129.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v131.__r_.__value_.__l.__data_);
  if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v132.__r_.__value_.__l.__data_);
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v133.__r_.__value_.__l.__data_);
  if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v134.__r_.__value_.__l.__data_);
  if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v135.__r_.__value_.__l.__data_);
  if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v139.__r_.__value_.__l.__data_);
  if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v140.__r_.__value_.__l.__data_);
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s1.__r_.__value_.__l.__data_);
  if (v144)
    siri::dialogengine::ObjectProperty::~ObjectProperty(v142);
  return IsArrayType;
}

void sub_1BF98BC08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,void *a63)
{
  void *a71;

  if (SLOBYTE(STACK[0x377]) < 0)
    operator delete((void *)STACK[0x360]);
  if (SLOBYTE(STACK[0x207]) < 0)
    operator delete(a71);
  if (SLOBYTE(STACK[0x38F]) < 0)
    operator delete((void *)STACK[0x378]);
  if (SLOBYTE(STACK[0x3A7]) < 0)
    operator delete((void *)STACK[0x390]);
  if (LOBYTE(STACK[0x498]))
    siri::dialogengine::ObjectProperty::~ObjectProperty((void **)&STACK[0x3A8]);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ChunkVariable::Expand(siri::dialogengine::ChunkVariable *this@<X0>, siri::dialogengine::Context *a2@<X1>, uint64_t a3@<X8>)
{
  std::string::size_type size;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char ShouldGround;
  char v11;
  unint64_t *v12;
  unint64_t v13;
  siri::dialogengine::VariableArray *v14;
  siri::dialogengine::VariableArray *v15;
  std::string::size_type v16;
  std::string::size_type v17;
  char v18;
  std::string::size_type v19;
  std::string::size_type v20;
  void *v21;
  std::string *v22;
  int v23;
  int v24;
  _BOOL4 v26;
  BOOL v27;
  int v28;
  int v29;
  _QWORD *v30;
  int v31;
  std::string::size_type v32;
  char v33;
  std::string *v34;
  int data;
  int v36;
  BOOL v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::string v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  void *__p[2];
  _OWORD v52[2];
  std::string v53;
  std::string v54;
  _BYTE v55[32];
  void *v56[2];
  _BYTE v57[32];
  void *v58[2];
  void *v59[4];
  void *v60[2];
  void *v61[4];
  void *v62[2];
  _OWORD v63[2];
  std::string v64[2];
  std::string v65[2];
  _QWORD v66[2];
  std::string v67;
  std::string v68;
  std::string v69;
  std::string v70;
  std::string v71;
  std::string v72;
  std::string v73;
  std::string v74;
  std::string v75;
  void *v76[19];
  char v77;
  std::string __s;
  char v79;
  const void *v80;
  std::__shared_weak_count *v81;
  std::string v82;
  std::string __str;
  std::string v84;
  std::string *v85;

  if (!a2)
  {
    *(_QWORD *)(a3 + 160) = 0;
    *(_OWORD *)(a3 + 128) = 0u;
    *(_OWORD *)(a3 + 144) = 0u;
    *(_OWORD *)(a3 + 96) = 0u;
    *(_OWORD *)(a3 + 112) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "inflect");
  siri::dialogengine::ChunkText::GetAttribute((uint64_t)this, (uint64_t)__p, &v84);
  if (SBYTE7(v52[0]) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "semanticConcept");
  siri::dialogengine::ChunkText::GetAttribute((uint64_t)this, (uint64_t)__p, &__str);
  if (SBYTE7(v52[0]) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "transform");
  siri::dialogengine::ChunkText::GetAttribute((uint64_t)this, (uint64_t)__p, &v82);
  if (SBYTE7(v52[0]) < 0)
    operator delete(__p[0]);
  siri::dialogengine::ResolveValue((uint64_t)a2, (uint64_t)this + 200, 0, (uint64_t)&v84, (uint64_t)&__str, (uint64_t *)&v80);
  if (v80)
  {
    LOBYTE(v76[0]) = 0;
    v79 = 0;
    siri::dialogengine::ResolveType(v76, (uint64_t)a2, (uint64_t)this + 200, 1, (uint64_t)&v75);
    (*(void (**)(std::string *__return_ptr, const void *, siri::dialogengine::Context *, std::string *))(*(_QWORD *)v80 + 56))(&v68, v80, a2, &v75);
    if (v79)
    {
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v67, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
      else
        v67 = __s;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v67, "");
    }
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __str.__r_.__value_.__l.__size_;
    if (size)
      std::string::operator=(&v67, &__str);
    v7 = v81;
    v66[0] = v80;
    v66[1] = v81;
    if (v81)
    {
      p_shared_owners = (unint64_t *)&v81->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    ShouldGround = siri::dialogengine::ChunkVariable::ShouldGround((uint64_t)this, (uint64_t)a2, v66, &v68);
    v11 = ShouldGround;
    if (!v7)
      goto LABEL_27;
    v12 = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if ((v11 & 1) != 0)
        goto LABEL_28;
    }
    else
    {
LABEL_27:
      if ((ShouldGround & 1) != 0)
      {
LABEL_28:
        if (v80)
        {
          if (v14)
          {
            v15 = v14;
            if (*((_QWORD *)v14 + 10) != *((_QWORD *)v14 + 9))
            {
              memset(&v53, 0, sizeof(v53));
              *(_OWORD *)__p = 0u;
              memset(v52, 0, sizeof(v52));
              *(_OWORD *)&v54.__r_.__value_.__r.__words[1] = 0u;
              memset(v55, 0, sizeof(v55));
              *(_OWORD *)v56 = 0u;
              memset(v57, 0, sizeof(v57));
              *(_OWORD *)v58 = 0u;
              memset(v59, 0, sizeof(v59));
              *(_OWORD *)v60 = 0u;
              memset(v61, 0, sizeof(v61));
              *(_OWORD *)v62 = 0u;
              memset(v63, 0, sizeof(v63));
              memset(v64, 0, sizeof(v64));
              memset(v65, 0, sizeof(v65));
              std::string::basic_string[abi:ne180100]<0>(&v50, "iterator");
              siri::dialogengine::ChunkText::GetAttribute((uint64_t)this, (uint64_t)&v50, &v42);
              if (SBYTE7(v52[0]) < 0)
                operator delete(__p[0]);
              *(_OWORD *)__p = *(_OWORD *)&v42.__r_.__value_.__l.__data_;
              *(_QWORD *)&v52[0] = *((_QWORD *)&v42.__r_.__value_.__l + 2);
              *((_BYTE *)&v42.__r_.__value_.__s + 23) = 0;
              v42.__r_.__value_.__s.__data_[0] = 0;
              if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v50.__r_.__value_.__l.__data_);
              std::string::basic_string[abi:ne180100]<0>(&v50, "formatPhrase");
              siri::dialogengine::ChunkText::GetAttribute((uint64_t)this, (uint64_t)&v50, &v42);
              if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v53.__r_.__value_.__l.__data_);
              v53 = v42;
              *((_BYTE *)&v42.__r_.__value_.__s + 23) = 0;
              v42.__r_.__value_.__s.__data_[0] = 0;
              if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v50.__r_.__value_.__l.__data_);
              std::string::basic_string[abi:ne180100]<0>(&v50, "index");
              siri::dialogengine::ChunkText::GetAttribute((uint64_t)this, (uint64_t)&v50, &v42);
              if (SHIBYTE(v52[1]) < 0)
                operator delete(*((void **)&v52[0] + 1));
              *(std::string *)((char *)v52 + 8) = v42;
              *((_BYTE *)&v42.__r_.__value_.__s + 23) = 0;
              v42.__r_.__value_.__s.__data_[0] = 0;
              if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v50.__r_.__value_.__l.__data_);
              v16 = BYTE7(v52[0]);
              if (SBYTE7(v52[0]) < 0)
                v16 = (std::string::size_type)__p[1];
              if (v16)
              {
                v16 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
                if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v16 = v53.__r_.__value_.__l.__size_;
                LOBYTE(v16) = v16 != 0;
              }
              v54.__r_.__value_.__s.__data_[0] = v16;
              std::string::basic_string[abi:ne180100]<0>(&v50, "list");
              siri::dialogengine::ChunkText::GetAttribute((uint64_t)this, (uint64_t)&v50, &v42);
              if ((v55[7] & 0x80000000) != 0)
                operator delete((void *)v54.__r_.__value_.__l.__size_);
              *(_OWORD *)&v54.__r_.__value_.__r.__words[1] = *(_OWORD *)&v42.__r_.__value_.__l.__data_;
              *(_QWORD *)v55 = *((_QWORD *)&v42.__r_.__value_.__l + 2);
              *((_BYTE *)&v42.__r_.__value_.__s + 23) = 0;
              v42.__r_.__value_.__s.__data_[0] = 0;
              if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v50.__r_.__value_.__l.__data_);
              std::string::basic_string[abi:ne180100]<0>(&v50, "beforefirst");
              siri::dialogengine::ChunkText::GetAttribute((uint64_t)this, (uint64_t)&v50, &v42);
              if ((v55[31] & 0x80000000) != 0)
                operator delete(*(void **)&v55[8]);
              *(std::string *)&v55[8] = v42;
              *((_BYTE *)&v42.__r_.__value_.__s + 23) = 0;
              v42.__r_.__value_.__s.__data_[0] = 0;
              if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v50.__r_.__value_.__l.__data_);
              std::string::basic_string[abi:ne180100]<0>(&v50, "afterfirst");
              siri::dialogengine::ChunkText::GetAttribute((uint64_t)this, (uint64_t)&v50, &v42);
              if ((v57[7] & 0x80000000) != 0)
                operator delete(v56[0]);
              *(_OWORD *)v56 = *(_OWORD *)&v42.__r_.__value_.__l.__data_;
              *(_QWORD *)v57 = *((_QWORD *)&v42.__r_.__value_.__l + 2);
              *((_BYTE *)&v42.__r_.__value_.__s + 23) = 0;
              v42.__r_.__value_.__s.__data_[0] = 0;
              if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v50.__r_.__value_.__l.__data_);
              std::string::basic_string[abi:ne180100]<0>(&v50, "separator");
              siri::dialogengine::ChunkText::GetAttribute((uint64_t)this, (uint64_t)&v50, &v42);
              if ((v57[31] & 0x80000000) != 0)
                operator delete(*(void **)&v57[8]);
              *(std::string *)&v57[8] = v42;
              *((_BYTE *)&v42.__r_.__value_.__s + 23) = 0;
              v42.__r_.__value_.__s.__data_[0] = 0;
              if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v50.__r_.__value_.__l.__data_);
              std::string::basic_string[abi:ne180100]<0>(&v50, "beforelast");
              siri::dialogengine::ChunkText::GetAttribute((uint64_t)this, (uint64_t)&v50, &v42);
              if (SHIBYTE(v59[0]) < 0)
                operator delete(v58[0]);
              *(_OWORD *)v58 = *(_OWORD *)&v42.__r_.__value_.__l.__data_;
              v59[0] = (void *)v42.__r_.__value_.__r.__words[2];
              *((_BYTE *)&v42.__r_.__value_.__s + 23) = 0;
              v42.__r_.__value_.__s.__data_[0] = 0;
              if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v50.__r_.__value_.__l.__data_);
              std::string::basic_string[abi:ne180100]<0>(&v50, "afterlast");
              siri::dialogengine::ChunkText::GetAttribute((uint64_t)this, (uint64_t)&v50, &v42);
              if (SHIBYTE(v59[3]) < 0)
                operator delete(v59[1]);
              *(std::string *)&v59[1] = v42;
              *((_BYTE *)&v42.__r_.__value_.__s + 23) = 0;
              v42.__r_.__value_.__s.__data_[0] = 0;
              if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v50.__r_.__value_.__l.__data_);
              std::string::basic_string[abi:ne180100]<0>(&v50, "itemprefix");
              siri::dialogengine::ChunkText::GetAttribute((uint64_t)this, (uint64_t)&v50, &v42);
              if (SHIBYTE(v61[0]) < 0)
                operator delete(v60[0]);
              *(_OWORD *)v60 = *(_OWORD *)&v42.__r_.__value_.__l.__data_;
              v61[0] = (void *)v42.__r_.__value_.__r.__words[2];
              *((_BYTE *)&v42.__r_.__value_.__s + 23) = 0;
              v42.__r_.__value_.__s.__data_[0] = 0;
              if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v50.__r_.__value_.__l.__data_);
              std::string::basic_string[abi:ne180100]<0>(&v50, "itemsuffix");
              siri::dialogengine::ChunkText::GetAttribute((uint64_t)this, (uint64_t)&v50, &v42);
              if (SHIBYTE(v61[3]) < 0)
                operator delete(v61[1]);
              *(std::string *)&v61[1] = v42;
              *((_BYTE *)&v42.__r_.__value_.__s + 23) = 0;
              v42.__r_.__value_.__s.__data_[0] = 0;
              if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v50.__r_.__value_.__l.__data_);
              std::string::basic_string[abi:ne180100]<0>(&v50, "itemformat");
              siri::dialogengine::ChunkText::GetAttribute((uint64_t)this, (uint64_t)&v50, &v42);
              if (SBYTE7(v63[0]) < 0)
                operator delete(v62[0]);
              *(_OWORD *)v62 = *(_OWORD *)&v42.__r_.__value_.__l.__data_;
              *(_QWORD *)&v63[0] = *((_QWORD *)&v42.__r_.__value_.__l + 2);
              *((_BYTE *)&v42.__r_.__value_.__s + 23) = 0;
              v42.__r_.__value_.__s.__data_[0] = 0;
              if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v50.__r_.__value_.__l.__data_);
              std::string::operator=(&v64[1], &v82);
              std::string::operator=((std::string *)((char *)v63 + 8), &v67);
              std::string::operator=(v64, &v84);
              std::string::operator=(v65, (const std::string *)((char *)this + 200));
              std::string::operator=(&v65[1], &v75);
              siri::dialogengine::VariableArray::Iterate(v15, a2, (siri::dialogengine::FormatAttributes *)__p, (uint64_t)&v50);
              memset(&v49, 0, sizeof(v49));
              if (!v54.__r_.__value_.__s.__data_[0])
              {
                v17 = HIBYTE(v67.__r_.__value_.__r.__words[2]);
                if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v17 = v67.__r_.__value_.__l.__size_;
                if (!v17)
                {
                  siri::dialogengine::SemanticFeatureConstraint::FromString((uint64_t)a2, (unsigned __int8 *)&v84, (uint64_t *)&v42);
                  std::vector<siri::dialogengine::SemanticFeatureConstraint>::__vdeallocate((void **)&v49.__r_.__value_.__l.__data_);
                  v49 = v42;
                  memset(&v42, 0, sizeof(v42));
                  v85 = &v42;
                  std::vector<siri::dialogengine::SemanticFeatureConstraint>::__destroy_vector::operator()[abi:ne180100]((void ***)&v85);
                }
              }
              siri::dialogengine::FormatList(a2, (siri::dialogengine::Context *)&v50, (uint64_t)&v54.__r_.__value_.__l.__size_, (uint64_t)&v55[8], (uint64_t)v56, (uint64_t)&v57[8], (uint64_t)v58, (uint64_t)&v59[1], (uint64_t)&v42, (uint64_t)v60, (uint64_t)&v61[1], (__int128 **)&v49);
              std::string::operator=(&v68, &v42);
              std::string::operator=(&v69, &v43);
              std::string::operator=(&v70, &v44);
              std::string::operator=(&v71, &v45);
              std::string::operator=(&v72, &v46);
              std::string::operator=(&v73, &v47);
              std::string::operator=(&v74, &v48);
              if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v48.__r_.__value_.__l.__data_);
              if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v47.__r_.__value_.__l.__data_);
              if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v46.__r_.__value_.__l.__data_);
              if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v45.__r_.__value_.__l.__data_);
              if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v44.__r_.__value_.__l.__data_);
              if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v43.__r_.__value_.__l.__data_);
              if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v42.__r_.__value_.__l.__data_);
              v42.__r_.__value_.__r.__words[0] = (std::string::size_type)&v49;
              std::vector<siri::dialogengine::SemanticFeatureConstraint>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
              v42.__r_.__value_.__r.__words[0] = (std::string::size_type)&v50;
              std::vector<siri::dialogengine::SpeakableString>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
              siri::dialogengine::FormatAttributes::~FormatAttributes(__p);
            }
            v18 = 1;
LABEL_155:
            if (v79)
              v27 = v77 == 0;
            else
              v27 = 0;
            v28 = !v27;
            LOBYTE(v29) = 1;
            v30 = v80;
            do
            {
              v31 = *((unsigned __int8 *)v30 + 65);
              v30 = (_QWORD *)v30[7];
              v29 = v29 & (v31 != 0);
            }
            while (v30);
            if ((v28 & v29) == 1)
            {
              MEMORY[0x1C3B8D53C](&v70, "[[Redacted]]");
              MEMORY[0x1C3B8D53C](&v71, "[[Redacted]]");
            }
            v32 = HIBYTE(v82.__r_.__value_.__r.__words[2]);
            if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v32 = v82.__r_.__value_.__l.__size_;
            if (v32)
              v33 = v18;
            else
              v33 = 1;
            if ((v33 & 1) != 0)
              goto LABEL_208;
            if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)__p, v68.__r_.__value_.__l.__data_, v68.__r_.__value_.__l.__size_);
            }
            else
            {
              *(_OWORD *)__p = *(_OWORD *)&v68.__r_.__value_.__l.__data_;
              *(_QWORD *)&v52[0] = *((_QWORD *)&v68.__r_.__value_.__l + 2);
            }
            if (SBYTE7(v52[0]) < 0)
            {
              if (!__p[1])
                goto LABEL_179;
              operator delete(__p[0]);
            }
            else if (!BYTE7(v52[0]))
            {
LABEL_179:
              if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
              {
                if (v82.__r_.__value_.__l.__size_ == 5)
                {
                  v34 = (std::string *)v82.__r_.__value_.__r.__words[0];
                  goto LABEL_184;
                }
              }
              else if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) == 5)
              {
                v34 = &v82;
LABEL_184:
                data = (int)v34->__r_.__value_.__l.__data_;
                v36 = v34->__r_.__value_.__s.__data_[4];
                v38 = data == 1953461617 && v36 == 101;
LABEL_191:
                if (SBYTE7(v52[0]) < 0)
                  operator delete(__p[0]);
                if (v38)
                  goto LABEL_208;
                goto LABEL_194;
              }
              v38 = 0;
              goto LABEL_191;
            }
LABEL_194:
            siri::dialogengine::TransformText((siri::dialogengine::SpeakableString *)&v68, a2, (uint64_t)&v82, (std::string *)__p);
            std::string::operator=(&v68, (const std::string *)__p);
            std::string::operator=(&v69, (const std::string *)((char *)v52 + 8));
            std::string::operator=(&v70, &v53);
            std::string::operator=(&v71, &v54);
            std::string::operator=(&v72, (const std::string *)v55);
            std::string::operator=(&v73, (const std::string *)&v55[24]);
            std::string::operator=(&v74, (const std::string *)v57);
            if ((v57[23] & 0x80000000) != 0)
              operator delete(*(void **)v57);
            if (SHIBYTE(v56[1]) < 0)
              operator delete(*(void **)&v55[24]);
            if ((v55[23] & 0x80000000) != 0)
              operator delete(*(void **)v55);
            if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v54.__r_.__value_.__l.__data_);
            if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v53.__r_.__value_.__l.__data_);
            if (SHIBYTE(v52[1]) < 0)
              operator delete(*((void **)&v52[0] + 1));
            if (SBYTE7(v52[0]) < 0)
              operator delete(__p[0]);
LABEL_208:
            siri::dialogengine::SpeakableString::SpeakableString((std::string *)a3, (const siri::dialogengine::SpeakableString *)&v68);
LABEL_209:
            if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v67.__r_.__value_.__l.__data_);
            if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v74.__r_.__value_.__l.__data_);
            if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v73.__r_.__value_.__l.__data_);
            if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v72.__r_.__value_.__l.__data_);
            if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v71.__r_.__value_.__l.__data_);
            if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v70.__r_.__value_.__l.__data_);
            if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v69.__r_.__value_.__l.__data_);
            if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v68.__r_.__value_.__l.__data_);
            if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v75.__r_.__value_.__l.__data_);
            if (v79)
              siri::dialogengine::ObjectProperty::~ObjectProperty(v76);
            goto LABEL_229;
          }
        }
        v19 = HIBYTE(v67.__r_.__value_.__r.__words[2]);
        if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v19 = v67.__r_.__value_.__l.__size_;
        if (v19)
        {
LABEL_154:
          v18 = 0;
          goto LABEL_155;
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "number");
        siri::dialogengine::ChunkText::GetAttribute((uint64_t)this, (uint64_t)__p, &v42);
        if (SBYTE7(v52[0]) < 0)
          operator delete(__p[0]);
        v20 = HIBYTE(v42.__r_.__value_.__r.__words[2]);
        if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v20 = v42.__r_.__value_.__l.__size_;
        if (v20)
        {
          if (v80
          {
            siri::dialogengine::FormatNumber(a2, (uint64_t)v21, &v42, (uint64_t)__p);
            siri::dialogengine::SpeakableString::operator=(&v68, (const std::string *)__p);
            siri::dialogengine::SpeakableString::~SpeakableString(__p);
          }
          else
          {
            if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v50, v68.__r_.__value_.__l.__data_, v68.__r_.__value_.__l.__size_);
            else
              v50 = v68;
            siri::dialogengine::FormatNumber(a2, &v50, &v42, (uint64_t)__p);
            siri::dialogengine::SpeakableString::operator=(&v68, (const std::string *)__p);
            siri::dialogengine::SpeakableString::~SpeakableString(__p);
            if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v50.__r_.__value_.__l.__data_);
          }
        }
        siri::dialogengine::SemanticFeatureConstraint::FromString((uint64_t)a2, (unsigned __int8 *)&v84, (uint64_t *)&v50);
        if (v50.__r_.__value_.__r.__words[0] == v50.__r_.__value_.__l.__size_)
        {
LABEL_152:
          __p[0] = &v50;
          std::vector<siri::dialogengine::SemanticFeatureConstraint>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v42.__r_.__value_.__l.__data_);
          goto LABEL_154;
        }
        if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
        {
          if (v82.__r_.__value_.__l.__size_ != 7)
            goto LABEL_135;
          v22 = (std::string *)v82.__r_.__value_.__r.__words[0];
        }
        else
        {
          if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) != 7)
            goto LABEL_135;
          v22 = &v82;
        }
        v23 = (int)v22->__r_.__value_.__l.__data_;
        v24 = *(_DWORD *)((char *)v22->__r_.__value_.__r.__words + 3);
        if (v23 == 1852797552 && v24 == 1853189998)
        {
          v26 = 1;
LABEL_138:
          siri::dialogengine::InflectDialog(a2, (siri::dialogengine::Context *)&v50, (uint64_t)&v68, v26, (std::string *)__p);
          std::string::operator=(&v68, (const std::string *)__p);
          std::string::operator=(&v69, (const std::string *)((char *)v52 + 8));
          std::string::operator=(&v70, &v53);
          std::string::operator=(&v71, &v54);
          std::string::operator=(&v72, (const std::string *)v55);
          std::string::operator=(&v73, (const std::string *)&v55[24]);
          std::string::operator=(&v74, (const std::string *)v57);
          if ((v57[23] & 0x80000000) != 0)
            operator delete(*(void **)v57);
          if (SHIBYTE(v56[1]) < 0)
            operator delete(*(void **)&v55[24]);
          if ((v55[23] & 0x80000000) != 0)
            operator delete(*(void **)v55);
          if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v54.__r_.__value_.__l.__data_);
          if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v53.__r_.__value_.__l.__data_);
          if (SHIBYTE(v52[1]) < 0)
            operator delete(*((void **)&v52[0] + 1));
          if (SBYTE7(v52[0]) < 0)
            operator delete(__p[0]);
          goto LABEL_152;
        }
LABEL_135:
        siri::dialogengine::ResolveType(v76, (uint64_t)a2, (uint64_t)this + 200, 0, (uint64_t)__p);
        v26 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "dialog.Pronoun");
        if (SBYTE7(v52[0]) < 0)
          operator delete(__p[0]);
        goto LABEL_138;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    siri::dialogengine::SpeakableString::SpeakableString(a3, (uint64_t)__p);
    if (SBYTE7(v52[0]) < 0)
      operator delete(__p[0]);
    goto LABEL_209;
  }
  *(_QWORD *)(a3 + 160) = 0;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
LABEL_229:
  v39 = v81;
  if (v81)
  {
    v40 = (unint64_t *)&v81->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v82.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v84.__r_.__value_.__l.__data_);
}

void sub_1BF98D318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a20 < 0)
    operator delete(__p);
  if (SLOBYTE(STACK[0x2E7]) < 0)
    operator delete((void *)STACK[0x2D0]);
  siri::dialogengine::SpeakableString::~SpeakableString((void **)&STACK[0x2E8]);
  if (SLOBYTE(STACK[0x3A7]) < 0)
    operator delete((void *)STACK[0x390]);
  if (LOBYTE(STACK[0x498]))
    siri::dialogengine::ObjectProperty::~ObjectProperty((void **)&STACK[0x3A8]);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v20 - 192);
  if (*(char *)(v20 - 153) < 0)
    operator delete(*(void **)(v20 - 176));
  if (*(char *)(v20 - 129) < 0)
    operator delete(*(void **)(v20 - 152));
  if (*(char *)(v20 - 105) < 0)
    operator delete(*(void **)(v20 - 128));
  _Unwind_Resume(a1);
}

void sub_1BF98D540()
{
  JUMPOUT(0x1BF98D508);
}

void sub_1BF98D548(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a50 < 0)
    JUMPOUT(0x1BF98D514);
  JUMPOUT(0x1BF98D518);
}

void sub_1BF98D55C()
{
  JUMPOUT(0x1BF98D518);
}

void sub_1BF98D564(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a50 < 0)
    JUMPOUT(0x1BF98D524);
  JUMPOUT(0x1BF98D528);
}

void sub_1BF98D578()
{
  JUMPOUT(0x1BF98D528);
}

void sub_1BF98D580(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a50 < 0)
    JUMPOUT(0x1BF98D534);
  JUMPOUT(0x1BF98D538);
}

uint64_t siri::dialogengine::ChunkVariable::ShouldGround(uint64_t a1, uint64_t a2, _QWORD *a3, const std::string *a4)
{
  std::string::size_type size;
  std::string::size_type v9;
  std::string *v10;
  char *v11;
  std::string::size_type v12;
  std::string::size_type *p_size;
  char v14;
  std::string::size_type v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  int GroundingMode;
  uint64_t ShouldGround;
  std::string v22;
  std::string v23;
  std::string v24;
  _BYTE v25[32];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  std::string v33;
  std::string v34;
  std::string v35;
  std::string __p;
  std::string v37;
  std::string v38;
  std::string v39;
  std::string v40;
  std::string v41;
  std::string v42;
  std::string v43;
  void *v44[2];
  char v45;
  uint64_t v46;
  std::__shared_weak_count *v47;

  std::string::basic_string[abi:ne180100]<0>(&__p, "ground");
  siri::dialogengine::ChunkText::GetAttribute(a1, (uint64_t)&__p, &v35);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "groundvar");
  siri::dialogengine::ChunkText::GetAttribute(a1, (uint64_t)&__p, &v34);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v35.__r_.__value_.__l.__size_;
  if (size)
    goto LABEL_11;
  v9 = HIBYTE(v34.__r_.__value_.__r.__words[2]);
  if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v9 = v34.__r_.__value_.__l.__size_;
  if (v9)
  {
LABEL_11:
    v32 = 0u;
    memset(&v33, 0, sizeof(v33));
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v27 = 0u;
    v26 = 0u;
    memset(v25, 0, sizeof(v25));
    if (a4)
    {
      std::string::operator=((std::string *)v25, a4);
      std::string::operator=((std::string *)&v25[24], a4 + 1);
      std::string::operator=((std::string *)&v27, a4 + 2);
      std::string::operator=((std::string *)((char *)&v28 + 8), a4 + 3);
      std::string::operator=((std::string *)&v30, a4 + 4);
      std::string::operator=((std::string *)((char *)&v31 + 8), a4 + 5);
      std::string::operator=(&v33, a4 + 6);
    }
    else
    {
      siri::dialogengine::ResolveType(0, a2, a1 + 200, 1, (uint64_t)v44);
      (*(void (**)(std::string *__return_ptr, _QWORD, uint64_t, void **))(*(_QWORD *)*a3 + 56))(&__p, *a3, a2, v44);
      std::string::operator=((std::string *)v25, &__p);
      std::string::operator=((std::string *)&v25[24], &v37);
      std::string::operator=((std::string *)&v27, &v38);
      std::string::operator=((std::string *)((char *)&v28 + 8), &v39);
      std::string::operator=((std::string *)&v30, &v40);
      std::string::operator=((std::string *)((char *)&v31 + 8), &v41);
      std::string::operator=(&v33, &v42);
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v42.__r_.__value_.__l.__data_);
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v41.__r_.__value_.__l.__data_);
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v40.__r_.__value_.__l.__data_);
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v39.__r_.__value_.__l.__data_);
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v38.__r_.__value_.__l.__data_);
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v37.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v45 < 0)
        operator delete(v44[0]);
    }
    v10 = (std::string *)(a1 + 200);
    v11 = (char *)&v34.__r_.__value_.__r.__words[2] + 7;
    v12 = HIBYTE(v34.__r_.__value_.__r.__words[2]);
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v12 = v34.__r_.__value_.__l.__size_;
    if (v12)
      v10 = &v34;
    else
      v11 = (char *)(a1 + 223);
    if (*v11 < 0)
    {
      p_size = &v34.__r_.__value_.__l.__size_;
      if (!v12)
        p_size = (std::string::size_type *)(a1 + 208);
      std::string::__init_copy_ctor_external(&v24, v10->__r_.__value_.__l.__data_, *p_size);
    }
    else
    {
      v24 = *v10;
    }
    siri::dialogengine::SpeakableString::ToMultiplexedString((siri::dialogengine::SpeakableString *)v25, &v22);
    v14 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v23, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
    else
      v23 = v22;
    v15 = HIBYTE(v34.__r_.__value_.__r.__words[2]);
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v15 = v34.__r_.__value_.__l.__size_;
    if (v15)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      std::string::basic_string[abi:ne180100]<0>(v44, "");
      siri::dialogengine::ResolveValue(a2, (uint64_t)&v34, 1, (uint64_t)&__p, (uint64_t)v44, &v46);
      if (v45 < 0)
        operator delete(v44[0]);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v46)
      {
        siri::dialogengine::ResolveType(0, a2, (uint64_t)&v34, 1, (uint64_t)v44);
        (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, void **))(*(_QWORD *)v46 + 56))(&__p, v46, a2, v44);
        siri::dialogengine::SpeakableString::ToMultiplexedString((siri::dialogengine::SpeakableString *)&__p, &v43);
        if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v23.__r_.__value_.__l.__data_);
        v23 = v43;
        *((_BYTE *)&v43.__r_.__value_.__s + 23) = 0;
        v43.__r_.__value_.__s.__data_[0] = 0;
        if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v42.__r_.__value_.__l.__data_);
        if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v41.__r_.__value_.__l.__data_);
        if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v40.__r_.__value_.__l.__data_);
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v39.__r_.__value_.__l.__data_);
        if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v38.__r_.__value_.__l.__data_);
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v37.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (v45 < 0)
          operator delete(v44[0]);
      }
      v16 = v47;
      if (v47)
      {
        p_shared_owners = (unint64_t *)&v47->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v14 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
    }
    if (v14 < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
    GroundingMode = siri::dialogengine::GetGroundingMode((unsigned __int8 *)&v35);
    ShouldGround = siri::dialogengine::Grounding::ShouldGround(a2, (char *)&v24, (uint64_t)&v23, GroundingMode);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    if (SHIBYTE(v32) < 0)
      operator delete(*((void **)&v31 + 1));
    if (SBYTE7(v31) < 0)
      operator delete((void *)v30);
    if (SHIBYTE(v29) < 0)
      operator delete(*((void **)&v28 + 1));
    if (SBYTE7(v28) < 0)
      operator delete((void *)v27);
    if (SHIBYTE(v26) < 0)
      operator delete(*(void **)&v25[24]);
    if ((v25[23] & 0x80000000) != 0)
      operator delete(*(void **)v25);
    if ((*((_BYTE *)&v34.__r_.__value_.__s + 23) & 0x80) != 0)
      goto LABEL_95;
  }
  else
  {
    ShouldGround = 1;
    if ((*((_BYTE *)&v34.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_95:
      operator delete(v34.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  return ShouldGround;
}

void sub_1BF98DB48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,void *a60)
{
  int v60;
  uint64_t v61;

  siri::dialogengine::SpeakableString::~SpeakableString(&a60);
  if (*(char *)(v61 - 65) < 0)
    operator delete(*(void **)(v61 - 88));
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v61 - 64);
  if (a18 < 0)
    operator delete(__p);
  if (v60 < 0)
    operator delete(a10);
  if (a25 < 0)
    operator delete(a20);
  siri::dialogengine::SpeakableString::~SpeakableString(&a27);
  if (a53 < 0)
    operator delete(a48);
  if (a59 < 0)
    operator delete(a54);
  _Unwind_Resume(a1);
}

void siri::dialogengine::FormatAttributes::~FormatAttributes(void **this)
{
  if (*((char *)this + 415) < 0)
    operator delete(this[49]);
  if (*((char *)this + 391) < 0)
    operator delete(this[46]);
  if (*((char *)this + 367) < 0)
    operator delete(this[43]);
  if (*((char *)this + 343) < 0)
    operator delete(this[40]);
  if (*((char *)this + 319) < 0)
    operator delete(this[37]);
  if (*((char *)this + 295) < 0)
    operator delete(this[34]);
  if (*((char *)this + 271) < 0)
    operator delete(this[31]);
  if (*((char *)this + 247) < 0)
    operator delete(this[28]);
  if (*((char *)this + 223) < 0)
    operator delete(this[25]);
  if (*((char *)this + 199) < 0)
    operator delete(this[22]);
  if (*((char *)this + 175) < 0)
    operator delete(this[19]);
  if (*((char *)this + 151) < 0)
    operator delete(this[16]);
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

double siri::dialogengine::ChunkVariable::ChunkVariable(siri::dialogengine::ChunkVariable *this)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = (char *)this + 184;
  *(_QWORD *)this = off_1E7930388;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *((_BYTE *)this + 248) = 0;
  return result;
}

{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = (char *)this + 184;
  *(_QWORD *)this = off_1E7930388;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *((_BYTE *)this + 248) = 0;
  return result;
}

double siri::dialogengine::ChunkVariable::ChunkVariable(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = siri::dialogengine::ChunkText::ChunkText(a1, a2);
  *(_QWORD *)v2 = off_1E7930388;
  result = 0.0;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_BYTE *)(v2 + 248) = 0;
  return result;
}

{
  uint64_t v2;
  double result;

  v2 = siri::dialogengine::ChunkText::ChunkText(a1, a2);
  *(_QWORD *)v2 = off_1E7930388;
  result = 0.0;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_BYTE *)(v2 + 248) = 0;
  return result;
}

uint64_t siri::dialogengine::ChunkVariable::ChunkVariable(uint64_t a1, uint64_t a2, __int128 *a3)
{
  _QWORD *v5;
  std::string *v6;
  __int128 v7;

  v5 = (_QWORD *)siri::dialogengine::ChunkText::ChunkText(a1, a2);
  *v5 = off_1E7930388;
  v6 = (std::string *)(v5 + 25);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    v6->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  return a1;
}

void sub_1BF98DF4C(_Unwind_Exception *a1)
{
  siri::dialogengine::ChunkText *v1;

  siri::dialogengine::ChunkText::~ChunkText(v1);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ChunkVariable::GetName(siri::dialogengine::ChunkVariable *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 223) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 25), *((_QWORD *)this + 26));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 200);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 27);
  }
}

double siri::dialogengine::ChunkVariable::SetName(uint64_t a1, const std::string *a2)
{
  void **v3;
  double result;
  std::string v5;

  siri::dialogengine::StringTrim(" \t\n\r", a2, &v5);
  v3 = (void **)(a1 + 200);
  if (*(char *)(a1 + 223) < 0)
    operator delete(*v3);
  result = *(double *)&v5.__r_.__value_.__l.__data_;
  *(_OWORD *)v3 = *(_OWORD *)&v5.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 216) = *((_QWORD *)&v5.__r_.__value_.__l + 2);
  return result;
}

void siri::dialogengine::ChunkVariable::GetId(siri::dialogengine::ChunkVariable *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 247) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 28), *((_QWORD *)this + 29));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 14);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 30);
  }
}

std::string *siri::dialogengine::ChunkVariable::SetId(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 224), a2);
}

uint64_t siri::dialogengine::ChunkVariable::IsOptional(siri::dialogengine::ChunkVariable *this)
{
  return *((unsigned __int8 *)this + 248);
}

uint64_t siri::dialogengine::ChunkVariable::SetOptional(uint64_t this, char a2)
{
  *(_BYTE *)(this + 248) = a2;
  return this;
}

uint64_t siri::dialogengine::WriteParametersXml(siri::dialogengine::File *this, uint64_t a2)
{
  uint64_t v3;
  char *v5;
  uint64_t v6;
  std::string::size_type size;
  _BOOL4 v8;
  const char *v9;
  void **v10;
  const char *v11;
  xmlTextWriter *v12;
  _xmlTextWriter *v13;
  _BOOL4 started;
  std::string *v15;
  const char *v16;
  __int128 v17;
  const char *v18;
  std::string *v19;
  const char *v20;
  BOOL v21;
  const char *v22;
  std::string::size_type v23;
  _QWORD *v24;
  const char *v25;
  const xmlChar *v26;
  const char *v27;
  const xmlChar *v28;
  const char *v29;
  _QWORD *v30;
  _QWORD *v31;
  BOOL v32;
  std::string *v33;
  std::string *v34;
  __int128 v35;
  const char *v36;
  _BOOL4 v37;
  std::string *v38;
  std::string::size_type v39;
  char *v40;
  const char *v41;
  __int128 v42;
  std::string *v43;
  _BOOL4 v44;
  const char *v45;
  _BOOL4 v46;
  __int128 v47;
  std::string *v48;
  _BOOL4 v49;
  const char *v50;
  _BOOL4 v51;
  __int128 v52;
  _BOOL4 v53;
  __int128 v54;
  _BOOL4 v55;
  __int128 v56;
  char v57;
  _BOOL4 v58;
  __int128 v59;
  char v60;
  _BOOL4 v61;
  __int128 v62;
  char v63;
  _BOOL4 v64;
  _BOOL4 v65;
  const char *v66;
  char v67;
  const char *v68;
  char v69;
  const char *v70;
  char v71;
  BOOL v72;
  const char *v73;
  char *v74;
  const char *v75;
  char *v76;
  xmlTextWriter *v77;
  char v79;
  std::string *v80;
  std::string v81;
  std::string v82;
  std::string v83;
  std::string *v84;

  if (!this)
  {
    v5 = "File cannot be null, not writing.";
LABEL_9:
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)v5, (const char *)a2);
    return 0;
  }
  v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a2 + 8);
  if (!v3)
  {
    v5 = "Path cannot be empty, not writing.";
    goto LABEL_9;
  }
  if (*((char *)this + 55) < 0)
    std::string::__init_copy_ctor_external(&v83, *((const std::string::value_type **)this + 4), *((_QWORD *)this + 5));
  else
    v83 = *(std::string *)((char *)this + 32);
  size = HIBYTE(v83.__r_.__value_.__r.__words[2]);
  if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v83.__r_.__value_.__l.__size_;
  if (size)
  {
    v8 = 0;
    if ((*((_BYTE *)&v83.__r_.__value_.__s + 23) & 0x80) == 0)
      goto LABEL_16;
LABEL_24:
    operator delete(v83.__r_.__value_.__l.__data_);
    if (v8)
      goto LABEL_17;
    goto LABEL_25;
  }
  siri::dialogengine::File::GetMetadata(this, (uint64_t)&v82);
  if (v82.__r_.__value_.__r.__words[2])
  {
    v8 = 0;
  }
  else
  {
    memset(&v81, 0, sizeof(v81));
    std::vector<siri::dialogengine::Parameter>::__init_with_size[abi:ne180100]<siri::dialogengine::Parameter*,siri::dialogengine::Parameter*>(&v81, *((_QWORD *)this + 22), *((_QWORD *)this + 23), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*((_QWORD *)this + 23) - *((_QWORD *)this + 22)) >> 4));
    v8 = v81.__r_.__value_.__r.__words[0] == v81.__r_.__value_.__l.__size_;
    v84 = &v81;
    std::vector<siri::dialogengine::Parameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&v84);
  }
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy((_QWORD *)v82.__r_.__value_.__l.__size_);
  if ((*((_BYTE *)&v83.__r_.__value_.__s + 23) & 0x80) != 0)
    goto LABEL_24;
LABEL_16:
  if (v8)
  {
LABEL_17:
    std::operator+<char>();
    siri::dialogengine::Log::Debug((siri::dialogengine *)&v83);
    if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v83.__r_.__value_.__l.__data_);
    return 1;
  }
LABEL_25:
  if (*(char *)(a2 + 23) >= 0)
    v9 = (const char *)a2;
  else
    v9 = *(const char **)a2;
  v10 = (void **)xmlNewTextWriterFilename(v9, 0);
  v84 = (std::string *)v10;
  if (!v10)
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Unable to create xmlWriter", v11);
    return 0;
  }
  v12 = (xmlTextWriter *)v10;
  xmlTextWriterSetIndent((xmlTextWriterPtr)v10, 1);
  xmlTextWriterSetIndentString(v12, (const xmlChar *)"  ");
  started = siri::dialogengine::StartXmlDocument(v12, v13);
  if (*((char *)this + 175) < 0)
    std::string::__init_copy_ctor_external(&v82, *((const std::string::value_type **)this + 19), *((_QWORD *)this + 20));
  else
    v82 = *(std::string *)((char *)this + 152);
  v15 = std::string::insert(&v82, 0, "urn:apple:names:siri:cat:");
  v17 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v83.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v17;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v82.__r_.__value_.__l.__data_);
    if (!started)
    {
LABEL_44:
      v21 = 0;
      goto LABEL_45;
    }
  }
  else if (!started)
  {
    goto LABEL_44;
  }
  if (!siri::dialogengine::StartXmlElement(v12, (const xmlChar *)"cat", v16))
    goto LABEL_44;
  v19 = (v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
      ? &v83
      : (std::string *)v83.__r_.__value_.__r.__words[0];
  if (!siri::dialogengine::WriteXmlAttribute(v12, (const xmlChar *)"xmlns", (const xmlChar *)v19, v18))
    goto LABEL_44;
  if (*((char *)this + 127) < 0)
    std::string::__init_copy_ctor_external(&v82, *((const std::string::value_type **)this + 13), *((_QWORD *)this + 14));
  else
    v82 = *(std::string *)((char *)this + 104);
  v79 = HIBYTE(v82.__r_.__value_.__r.__words[2]);
  if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v80 = &v82;
  else
    v80 = (std::string *)v82.__r_.__value_.__r.__words[0];
  if (v80->__r_.__value_.__s.__data_[0])
  {
    v21 = siri::dialogengine::WriteXmlAttribute(v12, (const xmlChar *)"id", (const xmlChar *)v80, v20);
    v79 = HIBYTE(v82.__r_.__value_.__r.__words[2]);
  }
  else
  {
    v21 = 1;
  }
  if (v79 < 0)
    operator delete(v82.__r_.__value_.__l.__data_);
LABEL_45:
  siri::dialogengine::File::GetMetadata(this, (uint64_t)&v82);
  v23 = v82.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v82.__r_.__value_.__l.__data_ != &v82.__r_.__value_.__r.__words[1])
  {
    while (1)
    {
      v24 = *(_QWORD **)(v23 + 56);
      if (v24 != (_QWORD *)(v23 + 64))
        break;
LABEL_65:
      v33 = *(std::string **)(v23 + 8);
      if (v33)
      {
        do
        {
          v34 = v33;
          v33 = (std::string *)v33->__r_.__value_.__r.__words[0];
        }
        while (v33);
      }
      else
      {
        do
        {
          v34 = *(std::string **)(v23 + 16);
          v32 = v34->__r_.__value_.__r.__words[0] == v23;
          v23 = (std::string::size_type)v34;
        }
        while (!v32);
      }
      v23 = (std::string::size_type)v34;
      if (v34 == (std::string *)&v82.__r_.__value_.__r.__words[1])
        goto LABEL_71;
    }
    while (1)
    {
      if (!v21 || !siri::dialogengine::StartXmlElement(v12, (const xmlChar *)"meta", v22))
        goto LABEL_58;
      v26 = (const xmlChar *)(v23 + 32);
      if (*(char *)(v23 + 55) < 0)
        v26 = *(const xmlChar **)(v23 + 32);
      if (!siri::dialogengine::WriteXmlAttribute(v12, (const xmlChar *)"name", v26, v25))
        goto LABEL_58;
      v28 = (const xmlChar *)(v24 + 4);
      if (*((char *)v24 + 55) < 0)
        v28 = *(const xmlChar **)v28;
      if (!siri::dialogengine::WriteXmlAttribute(v12, (const xmlChar *)"value", v28, v27))
        goto LABEL_58;
      if (xmlTextWriterEndElement(v12) == -1)
        break;
      v21 = 1;
LABEL_59:
      v30 = (_QWORD *)v24[1];
      if (v30)
      {
        do
        {
          v31 = v30;
          v30 = (_QWORD *)*v30;
        }
        while (v30);
      }
      else
      {
        do
        {
          v31 = (_QWORD *)v24[2];
          v32 = *v31 == (_QWORD)v24;
          v24 = v31;
        }
        while (!v32);
      }
      v24 = v31;
      if (v31 == (_QWORD *)(v23 + 64))
        goto LABEL_65;
    }
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Error ending element.", v29);
LABEL_58:
    v21 = 0;
    goto LABEL_59;
  }
LABEL_71:
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy((_QWORD *)v82.__r_.__value_.__l.__size_);
  memset(&v82, 0, sizeof(v82));
  std::vector<siri::dialogengine::Parameter>::__init_with_size[abi:ne180100]<siri::dialogengine::Parameter*,siri::dialogengine::Parameter*>(&v82, *((_QWORD *)this + 22), *((_QWORD *)this + 23), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*((_QWORD *)this + 23) - *((_QWORD *)this + 22)) >> 4));
  v35 = *(_OWORD *)&v82.__r_.__value_.__l.__data_;
  v81.__r_.__value_.__r.__words[0] = (std::string::size_type)&v82;
  std::vector<siri::dialogengine::Parameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&v81);
  if ((_QWORD)v35 == *((_QWORD *)&v35 + 1))
  {
    if (!v21)
      goto LABEL_213;
  }
  else
  {
    LOBYTE(v37) = v21 && siri::dialogengine::StartXmlElement(v12, (const xmlChar *)"parameters", v36);
    memset(&v82, 0, sizeof(v82));
    std::vector<siri::dialogengine::Parameter>::__init_with_size[abi:ne180100]<siri::dialogengine::Parameter*,siri::dialogengine::Parameter*>(&v82, *((_QWORD *)this + 22), *((_QWORD *)this + 23), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*((_QWORD *)this + 23) - *((_QWORD *)this + 22)) >> 4));
    v39 = v82.__r_.__value_.__l.__size_;
    if (v82.__r_.__value_.__r.__words[0] != v82.__r_.__value_.__l.__size_)
    {
      v40 = (char *)(v82.__r_.__value_.__r.__words[0] + 207);
      while (1)
      {
        if (!v37 || !siri::dialogengine::StartXmlElement(v12, (const xmlChar *)"parameter", (const char *)v38))
          goto LABEL_203;
        if (*(v40 - 176) < 0)
        {
          std::string::__init_copy_ctor_external(&v81, *(const std::string::value_type **)(v40 - 199), *(_QWORD *)(v40 - 191));
        }
        else
        {
          v42 = *(_OWORD *)(v40 - 199);
          v81.__r_.__value_.__r.__words[2] = *(_QWORD *)(v40 - 183);
          *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v42;
        }
        v43 = (v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v81
            : (std::string *)v81.__r_.__value_.__r.__words[0];
        v44 = siri::dialogengine::WriteXmlAttribute(v12, (const xmlChar *)"name", (const xmlChar *)v43, v41);
        v46 = v44;
        if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v81.__r_.__value_.__l.__data_);
          if (!v46)
            goto LABEL_203;
        }
        else if (!v44)
        {
          goto LABEL_203;
        }
        if (*(v40 - 152) < 0)
        {
          std::string::__init_copy_ctor_external(&v81, *(const std::string::value_type **)(v40 - 175), *(_QWORD *)(v40 - 167));
        }
        else
        {
          v47 = *(_OWORD *)(v40 - 175);
          v81.__r_.__value_.__r.__words[2] = *(_QWORD *)(v40 - 159);
          *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v47;
        }
        v48 = (v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v81
            : (std::string *)v81.__r_.__value_.__r.__words[0];
        v49 = siri::dialogengine::WriteXmlAttribute(v12, (const xmlChar *)"type", (const xmlChar *)v48, v45);
        v51 = v49;
        if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v81.__r_.__value_.__l.__data_);
          if (!v51)
            goto LABEL_203;
        }
        else if (!v49)
        {
          goto LABEL_203;
        }
        if (*(v40 - 128) < 0)
        {
          std::string::__init_copy_ctor_external(&v81, *(const std::string::value_type **)(v40 - 151), *(_QWORD *)(v40 - 143));
        }
        else
        {
          v52 = *(_OWORD *)(v40 - 151);
          v81.__r_.__value_.__r.__words[2] = *(_QWORD *)(v40 - 135);
          *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v52;
        }
        v38 = (v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v81
            : (std::string *)v81.__r_.__value_.__r.__words[0];
        if (v38->__r_.__value_.__s.__data_[0])
          break;
        v53 = 1;
        if ((*((_BYTE *)&v81.__r_.__value_.__s + 23) & 0x80) != 0)
          goto LABEL_109;
LABEL_110:
        if (!v53)
          goto LABEL_203;
        if (*(v40 - 24) < 0)
        {
          std::string::__init_copy_ctor_external(&v81, *(const std::string::value_type **)(v40 - 47), *(_QWORD *)(v40 - 39));
        }
        else
        {
          v54 = *(_OWORD *)(v40 - 47);
          v81.__r_.__value_.__r.__words[2] = *(_QWORD *)(v40 - 31);
          *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v54;
        }
        if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v38 = &v81;
        else
          v38 = (std::string *)v81.__r_.__value_.__r.__words[0];
        if (!v38->__r_.__value_.__s.__data_[0])
        {
          v55 = 1;
          if ((*((_BYTE *)&v81.__r_.__value_.__s + 23) & 0x80) == 0)
            goto LABEL_122;
LABEL_121:
          operator delete(v81.__r_.__value_.__l.__data_);
          goto LABEL_122;
        }
        v55 = siri::dialogengine::WriteXmlAttribute(v12, (const xmlChar *)"semanticConcept", (const xmlChar *)v38, v50);
        if ((*((_BYTE *)&v81.__r_.__value_.__s + 23) & 0x80) != 0)
          goto LABEL_121;
LABEL_122:
        if (!v55)
          goto LABEL_203;
        if (*(v40 - 104) < 0)
        {
          std::string::__init_copy_ctor_external(&v81, *(const std::string::value_type **)(v40 - 127), *(_QWORD *)(v40 - 119));
        }
        else
        {
          v56 = *(_OWORD *)(v40 - 127);
          v81.__r_.__value_.__r.__words[2] = *(_QWORD *)(v40 - 111);
          *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v56;
        }
        v57 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
        if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v38 = &v81;
        else
          v38 = (std::string *)v81.__r_.__value_.__r.__words[0];
        if (v38->__r_.__value_.__s.__data_[0])
        {
          v58 = siri::dialogengine::WriteXmlAttribute(v12, (const xmlChar *)"sampleValue", (const xmlChar *)v38, v50);
          v57 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
        }
        else
        {
          v58 = 1;
        }
        if (v57 < 0)
          operator delete(v81.__r_.__value_.__l.__data_);
        if (!v58)
          goto LABEL_203;
        if (*(v40 - 56) < 0)
        {
          std::string::__init_copy_ctor_external(&v81, *(const std::string::value_type **)(v40 - 79), *(_QWORD *)(v40 - 71));
        }
        else
        {
          v59 = *(_OWORD *)(v40 - 79);
          v81.__r_.__value_.__r.__words[2] = *(_QWORD *)(v40 - 63);
          *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v59;
        }
        v60 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
        if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v38 = &v81;
        else
          v38 = (std::string *)v81.__r_.__value_.__r.__words[0];
        if (v38->__r_.__value_.__s.__data_[0])
        {
          v61 = siri::dialogengine::WriteXmlAttribute(v12, (const xmlChar *)"deprecated", (const xmlChar *)v38, v50);
          v60 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
        }
        else
        {
          v61 = 1;
        }
        if (v60 < 0)
          operator delete(v81.__r_.__value_.__l.__data_);
        if (!v61)
          goto LABEL_203;
        if (*v40 < 0)
        {
          std::string::__init_copy_ctor_external(&v81, *(const std::string::value_type **)(v40 - 23), *(_QWORD *)(v40 - 15));
        }
        else
        {
          v62 = *(_OWORD *)(v40 - 23);
          v81.__r_.__value_.__r.__words[2] = *(_QWORD *)(v40 - 7);
          *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v62;
        }
        v63 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
        if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v38 = &v81;
        else
          v38 = (std::string *)v81.__r_.__value_.__r.__words[0];
        if (v38->__r_.__value_.__s.__data_[0])
        {
          v64 = siri::dialogengine::WriteXmlAttribute(v12, (const xmlChar *)"valueFromCat", (const xmlChar *)v38, v50);
          v63 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
        }
        else
        {
          v64 = 1;
        }
        if (v63 < 0)
          operator delete(v81.__r_.__value_.__l.__data_);
        if (*(v40 - 55))
          v65 = v64;
        else
          v65 = 0;
        if (*(v40 - 55))
          v64 = 0;
        if (v65)
        {
          std::string::basic_string[abi:ne180100]<0>(&v81, "true");
          v67 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
          v38 = (v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &v81
              : (std::string *)v81.__r_.__value_.__r.__words[0];
          if (v38->__r_.__value_.__s.__data_[0])
          {
            v64 = siri::dialogengine::WriteXmlAttribute(v12, (const xmlChar *)"profanityFilter", (const xmlChar *)v38, v66);
            v67 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
          }
          else
          {
            v64 = 1;
          }
          if (v67 < 0)
            operator delete(v81.__r_.__value_.__l.__data_);
        }
        if (*(v40 - 54))
          v37 = v64;
        else
          v37 = 0;
        if (!*(v40 - 54) && v64)
        {
          std::string::basic_string[abi:ne180100]<0>(&v81, "false");
          v69 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
          v38 = (v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &v81
              : (std::string *)v81.__r_.__value_.__r.__words[0];
          if (v38->__r_.__value_.__s.__data_[0])
          {
            v37 = siri::dialogengine::WriteXmlAttribute(v12, (const xmlChar *)"optional", (const xmlChar *)v38, v68);
            v69 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
          }
          else
          {
            v37 = 1;
          }
          if (v69 < 0)
            operator delete(v81.__r_.__value_.__l.__data_);
        }
        if (*(v40 - 53))
        {
          if (!v37)
            goto LABEL_204;
        }
        else
        {
          if (!v37)
            goto LABEL_204;
          std::string::basic_string[abi:ne180100]<0>(&v81, "false");
          v71 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
          if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v38 = &v81;
          else
            v38 = (std::string *)v81.__r_.__value_.__r.__words[0];
          if (v38->__r_.__value_.__s.__data_[0])
          {
            v72 = siri::dialogengine::WriteXmlAttribute(v12, (const xmlChar *)"redacted", (const xmlChar *)v38, v70);
            v71 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
          }
          else
          {
            v72 = 1;
          }
          if (v71 < 0)
            operator delete(v81.__r_.__value_.__l.__data_);
          if (!v72)
            goto LABEL_203;
        }
        if (xmlTextWriterEndElement(v12) == -1)
        {
          siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Error ending element.", v73);
LABEL_203:
          LOBYTE(v37) = 0;
          goto LABEL_204;
        }
        LOBYTE(v37) = 1;
LABEL_204:
        v74 = v40 + 129;
        v40 += 336;
        if (v74 == (char *)v39)
          goto LABEL_205;
      }
      v53 = siri::dialogengine::WriteXmlAttribute(v12, (const xmlChar *)"description", (const xmlChar *)v38, v50);
      if ((*((_BYTE *)&v81.__r_.__value_.__s + 23) & 0x80) == 0)
        goto LABEL_110;
LABEL_109:
      operator delete(v81.__r_.__value_.__l.__data_);
      goto LABEL_110;
    }
LABEL_205:
    v81.__r_.__value_.__r.__words[0] = (std::string::size_type)&v82;
    std::vector<siri::dialogengine::Parameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&v81);
    if (!v37)
      goto LABEL_213;
    if (xmlTextWriterFullEndElement(v12) == -1)
      goto LABEL_210;
  }
  if (xmlTextWriterFullEndElement(v12) == -1)
  {
LABEL_210:
    v76 = "Error ending element.";
LABEL_212:
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)v76, v75);
LABEL_213:
    v6 = 0;
    goto LABEL_214;
  }
  if (xmlTextWriterEndDocument(v12) == -1)
  {
    v76 = "Error while Ending Document.";
    goto LABEL_212;
  }
  v6 = 1;
LABEL_214:
  xmlTextWriterFlush(v12);
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v83.__r_.__value_.__l.__data_);
  v77 = (xmlTextWriter *)v84;
  v84 = 0;
  if (v77)
    xmlFreeTextWriter(v77);
  return v6;
}

void sub_1BF98EAB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  if (a16 < 0)
    operator delete(__p);
  __p = &a18;
  std::vector<siri::dialogengine::Parameter>::__destroy_vector::operator()[abi:ne180100](&__p);
  if (a30 < 0)
    operator delete(a25);
  std::unique_ptr<_xmlTextWriter,siri::dialogengine::xmlTextWriterDeleter>::reset[abi:ne180100]((xmlTextWriter **)(v30 - 88));
  _Unwind_Resume(a1);
}

void std::unique_ptr<_xmlTextWriter,siri::dialogengine::xmlTextWriterDeleter>::reset[abi:ne180100](xmlTextWriter **a1)
{
  xmlTextWriter *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
    xmlFreeTextWriter(v2);
}

uint64_t siri::dialogengine::WriteLocaleXml(uint64_t a1, char *uri)
{
  uint64_t v2;
  xmlTextWriter *v3;
  const char *v4;
  xmlTextWriter *v5;
  _xmlTextWriter *v6;
  _BOOL4 started;
  std::string *v8;
  const char *v9;
  __int128 v10;
  const char *v11;
  const xmlChar *v12;
  const char *v13;
  char v14;
  std::string *v15;
  _BOOL4 v16;
  char v17;
  std::string *v18;
  _BOOL4 v19;
  _BOOL4 v20;
  __int128 v21;
  const char *v22;
  BOOL v23;
  const char *v24;
  std::string::size_type i;
  std::string::size_type size;
  const char *v27;
  std::string *v28;
  _BOOL4 v29;
  std::string *v30;
  const siri::dialogengine::ConditionEntry *v31;
  _xmlTextWriter **j;
  std::string::size_type v33;
  const char *v34;
  std::string *v35;
  _BOOL4 v36;
  const char *v37;
  std::string *v38;
  std::string *v39;
  const char *v40;
  __int128 v41;
  const char *v42;
  char v43;
  const siri::dialogengine::Group *v44;
  _xmlTextWriter **k;
  std::string::size_type v46;
  const char *v47;
  _xmlTextWriter *v48;
  std::__shared_weak_count *v49;
  unint64_t *p_shared_owners;
  unint64_t v51;
  unint64_t v52;
  int v53;
  const siri::dialogengine::Group *v54;
  uint64_t v55;
  __int128 v56;
  const char *v57;
  _BOOL8 v58;
  const void **v59;
  std::string::size_type v60;
  _xmlTextWriter *v61;
  const siri::dialogengine::Dialog *v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  int v70;
  const char *v71;
  const char *v72;
  BOOL v73;
  char v74;
  std::string *v75;
  std::string::size_type v76;
  const char *v77;
  const char *v78;
  std::string *v79;
  const xmlChar *v80;
  const char *v81;
  std::string *v82;
  std::string *v83;
  BOOL v84;
  const char *v85;
  std::__shared_weak_count *v86;
  uint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t v90;
  const char *v91;
  char *v92;
  xmlTextWriter *v93;
  void *v95[2];
  int64_t v96;
  xmlTextWriterPtr writer;
  std::string *v98;
  std::string v99;
  void *__p;
  char v101;
  std::string v102;

  v2 = a1;
  if (!a1)
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"File cannot be null, not writing.", uri);
    return v2;
  }
  if (uri[23] < 0)
  {
    if (!*((_QWORD *)uri + 1))
    {
LABEL_11:
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Path cannot be empty, not writing.", uri);
      return 0;
    }
    uri = *(char **)uri;
  }
  else if (!uri[23])
  {
    goto LABEL_11;
  }
  v3 = xmlNewTextWriterFilename(uri, 0);
  writer = v3;
  if (!v3)
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Unable to create xmlWriter", v4);
    return 0;
  }
  v5 = v3;
  xmlTextWriterSetIndent(v3, 1);
  xmlTextWriterSetIndentString(v5, (const xmlChar *)"  ");
  started = siri::dialogengine::StartXmlDocument(v5, v6);
  if (*(char *)(v2 + 175) < 0)
    std::string::__init_copy_ctor_external(&v99, *(const std::string::value_type **)(v2 + 152), *(_QWORD *)(v2 + 160));
  else
    v99 = *(std::string *)(v2 + 152);
  v8 = std::string::insert(&v99, 0, "urn:apple:names:siri:cat:");
  v10 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v96 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)v95 = v10;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v99.__r_.__value_.__l.__data_);
    if (!started)
      goto LABEL_49;
  }
  else if (!started)
  {
    goto LABEL_49;
  }
  if (siri::dialogengine::StartXmlElement(v5, (const xmlChar *)"cat", v9))
  {
    v12 = v96 >= 0 ? (const xmlChar *)v95 : (const xmlChar *)v95[0];
    if (siri::dialogengine::WriteXmlAttribute(v5, (const xmlChar *)"xmlns", v12, v11))
    {
      if (*(char *)(v2 + 127) < 0)
        std::string::__init_copy_ctor_external(&v99, *(const std::string::value_type **)(v2 + 104), *(_QWORD *)(v2 + 112));
      else
        v99 = *(std::string *)(v2 + 104);
      v14 = HIBYTE(v99.__r_.__value_.__r.__words[2]);
      if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v15 = &v99;
      else
        v15 = (std::string *)v99.__r_.__value_.__r.__words[0];
      if (v15->__r_.__value_.__s.__data_[0])
      {
        v16 = siri::dialogengine::WriteXmlAttribute(v5, (const xmlChar *)"id", (const xmlChar *)v15, v13);
        v14 = HIBYTE(v99.__r_.__value_.__r.__words[2]);
      }
      else
      {
        v16 = 1;
      }
      if (v14 < 0)
        operator delete(v99.__r_.__value_.__l.__data_);
      if (v16)
      {
        if (*(char *)(v2 + 151) < 0)
          std::string::__init_copy_ctor_external(&v99, *(const std::string::value_type **)(v2 + 128), *(_QWORD *)(v2 + 136));
        else
          v99 = *(std::string *)(v2 + 128);
        v17 = HIBYTE(v99.__r_.__value_.__r.__words[2]);
        if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v18 = &v99;
        else
          v18 = (std::string *)v99.__r_.__value_.__r.__words[0];
        if (v18->__r_.__value_.__s.__data_[0])
        {
          v19 = siri::dialogengine::WriteXmlAttribute(v5, (const xmlChar *)"locale", (const xmlChar *)v18, v13);
          v17 = HIBYTE(v99.__r_.__value_.__r.__words[2]);
        }
        else
        {
          v19 = 1;
        }
        if (v17 < 0)
          operator delete(v99.__r_.__value_.__l.__data_);
        if (v19)
        {
          v20 = xmlTextWriterWriteRaw(v5, (const xmlChar *)"\n") != -1;
          goto LABEL_50;
        }
      }
    }
  }
LABEL_49:
  v20 = 0;
LABEL_50:
  siri::dialogengine::File::GetConditions(v2, &v99.__r_.__value_.__l.__data_);
  v21 = *(_OWORD *)&v99.__r_.__value_.__l.__data_;
  v102.__r_.__value_.__r.__words[0] = (std::string::size_type)&v99;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v102);
  if (*((_QWORD *)&v21 + 1) == (_QWORD)v21)
    goto LABEL_98;
  v23 = v20
     && xmlTextWriterWriteRaw(v5, (const xmlChar *)"\n") != -1
     && siri::dialogengine::StartXmlElement(v5, (const xmlChar *)"conditions", v22);
  siri::dialogengine::File::GetConditions(v2, &v99.__r_.__value_.__l.__data_);
  size = v99.__r_.__value_.__l.__size_;
  for (i = v99.__r_.__value_.__r.__words[0]; i != size; i += 16)
  {
    if (v23 && siri::dialogengine::StartXmlElement(v5, (const xmlChar *)"condition", v24))
    {
      v28 = *(std::string **)i;
      if (*(char *)(*(_QWORD *)i + 119) < 0)
        std::string::__init_copy_ctor_external(&v102, v28[4].__r_.__value_.__l.__data_, v28[4].__r_.__value_.__l.__size_);
      else
        v102 = v28[4];
      if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &v102;
      else
        v35 = (std::string *)v102.__r_.__value_.__r.__words[0];
      v36 = siri::dialogengine::WriteXmlAttribute(v5, (const xmlChar *)"name", (const xmlChar *)v35, v27);
      v29 = v36;
      if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v102.__r_.__value_.__l.__data_);
        if (!v29)
          goto LABEL_61;
      }
      else if (!v36)
      {
        goto LABEL_61;
      }
      v38 = *(std::string **)i;
      if (*(char *)(*(_QWORD *)i + 143) < 0)
        std::string::__init_copy_ctor_external(&v102, v38[5].__r_.__value_.__l.__data_, v38[5].__r_.__value_.__l.__size_);
      else
        v102 = v38[5];
      if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v39 = &v102;
      else
        v39 = (std::string *)v102.__r_.__value_.__r.__words[0];
      if (v39->__r_.__value_.__s.__data_[0])
      {
        LOBYTE(v29) = siri::dialogengine::WriteXmlAttribute(v5, (const xmlChar *)"note", (const xmlChar *)v39, v37);
        if ((*((_BYTE *)&v102.__r_.__value_.__s + 23) & 0x80) != 0)
          goto LABEL_92;
      }
      else
      {
        LOBYTE(v29) = 1;
        if ((*((_BYTE *)&v102.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_92:
          operator delete(v102.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      LOBYTE(v29) = 0;
    }
LABEL_61:
    v30 = *(std::string **)i;
    memset(&v102, 0, sizeof(v102));
    std::vector<std::shared_ptr<siri::dialogengine::ConditionEntry>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::ConditionEntry>*,std::shared_ptr<siri::dialogengine::ConditionEntry>*>((char *)&v102, (_QWORD *)v30[6].__r_.__value_.__l.__data_, (_QWORD *)v30[6].__r_.__value_.__l.__size_, (uint64_t)(v30[6].__r_.__value_.__l.__size_ - v30[6].__r_.__value_.__r.__words[0]) >> 4);
    v33 = v102.__r_.__value_.__l.__size_;
    for (j = (_xmlTextWriter **)v102.__r_.__value_.__r.__words[0]; j != (_xmlTextWriter **)v33; j += 2)
      LOBYTE(v29) = v29 && siri::dialogengine::_WriteConditionEntry(v5, *j, v31);
    v98 = &v102;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v98);
    if (!v29)
      goto LABEL_71;
    if (xmlTextWriterEndElement(v5) == -1)
    {
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Error ending element.", v34);
LABEL_71:
      v23 = 0;
      continue;
    }
    v23 = 1;
  }
  v102.__r_.__value_.__r.__words[0] = (std::string::size_type)&v99;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v102);
  if (v23)
  {
    if (xmlTextWriterFullEndElement(v5) != -1)
    {
      v20 = 1;
      goto LABEL_98;
    }
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Error ending element.", v40);
  }
  v20 = 0;
LABEL_98:
  siri::dialogengine::GroupPhrases::GetPhrases((siri::dialogengine::GroupPhrases *)(v2 + 312), (uint64_t)&v99);
  v41 = *(_OWORD *)&v99.__r_.__value_.__l.__data_;
  v102.__r_.__value_.__r.__words[0] = (std::string::size_type)&v99;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v102);
  if (*((_QWORD *)&v41 + 1) != (_QWORD)v41)
  {
    v43 = v20
       && xmlTextWriterWriteRaw(v5, (const xmlChar *)"\n") != -1
       && siri::dialogengine::StartXmlElement(v5, (const xmlChar *)"phrases", v42);
    siri::dialogengine::GroupPhrases::GetPhrases((siri::dialogengine::GroupPhrases *)(v2 + 312), (uint64_t)&v99);
    v46 = v99.__r_.__value_.__l.__size_;
    for (k = (_xmlTextWriter **)v99.__r_.__value_.__r.__words[0]; k != (_xmlTextWriter **)v46; k += 2)
    {
      if ((v43 & 1) != 0)
        v43 = siri::dialogengine::_WriteGroup(v5, *k, v44);
      else
        v43 = 0;
    }
    v102.__r_.__value_.__r.__words[0] = (std::string::size_type)&v99;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v102);
    if ((v43 & 1) != 0)
    {
      if (xmlTextWriterFullEndElement(v5) != -1)
      {
        v20 = 1;
        goto LABEL_114;
      }
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Error ending element.", v47);
    }
    v20 = 0;
  }
LABEL_114:
  v48 = *(_xmlTextWriter **)(v2 + 224);
  v49 = *(std::__shared_weak_count **)(v2 + 232);
  if (v49)
  {
    p_shared_owners = (unint64_t *)&v49->__shared_owners_;
    do
      v51 = __ldxr(p_shared_owners);
    while (__stxr(v51 + 1, p_shared_owners));
    do
      v52 = __ldaxr(p_shared_owners);
    while (__stlxr(v52 - 1, p_shared_owners));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  if (v48)
    v53 = 0;
  else
    v53 = v20;
  if (v48 && v20)
  {
    if (xmlTextWriterWriteRaw(v5, (const xmlChar *)"\n") == -1)
      v53 = 0;
    else
      v53 = siri::dialogengine::_WriteGroup(v5, v48, v54);
  }
  v55 = *(_QWORD *)(v2 + 296);
  if (v55)
  {
    memset(&v99, 0, sizeof(v99));
    std::vector<std::shared_ptr<siri::dialogengine::Node>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Node>*,std::shared_ptr<siri::dialogengine::Node>*>((char *)&v99, *(_QWORD **)(v55 + 208), *(_QWORD **)(v55 + 216), (uint64_t)(*(_QWORD *)(v55 + 216) - *(_QWORD *)(v55 + 208)) >> 4);
    v56 = *(_OWORD *)&v99.__r_.__value_.__l.__data_;
    v102.__r_.__value_.__r.__words[0] = (std::string::size_type)&v99;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v102);
    if (*((_QWORD *)&v56 + 1) != (_QWORD)v56)
    {
      v58 = v53
         && xmlTextWriterWriteRaw(v5, (const xmlChar *)"\n") != -1
         && siri::dialogengine::StartXmlElement(v5, (const xmlChar *)"fallback", v57);
      memset(&v99, 0, sizeof(v99));
      std::vector<std::shared_ptr<siri::dialogengine::Node>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Node>*,std::shared_ptr<siri::dialogengine::Node>*>((char *)&v99, *(_QWORD **)(v55 + 208), *(_QWORD **)(v55 + 216), (uint64_t)(*(_QWORD *)(v55 + 216) - *(_QWORD *)(v55 + 208)) >> 4);
      v60 = v99.__r_.__value_.__l.__size_;
      v59 = (const void **)v99.__r_.__value_.__r.__words[0];
      if (v99.__r_.__value_.__r.__words[0] == v99.__r_.__value_.__l.__size_)
      {
        LOBYTE(v63) = v58;
      }
      else
      {
        do
        {
          if (*v59)
          {
            v63 = (v61 == 0) & v58;
            if (v61 && v58)
              v63 = siri::dialogengine::_WriteDialog(v5, v61, v62);
          }
          else
          {
            v63 = v58;
          }
          v59 += 2;
          v58 = v63;
        }
        while (v59 != (const void **)v60);
      }
      v102.__r_.__value_.__r.__words[0] = (std::string::size_type)&v99;
      std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v102);
      if ((v63 & 1) != 0)
      {
        if (xmlTextWriterFullEndElement(v5) != -1)
        {
          v53 = 1;
          goto LABEL_148;
        }
        siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Error ending element.", v64);
      }
      v53 = 0;
    }
  }
LABEL_148:
  v65 = *(_QWORD *)(v2 + 240);
  v66 = *(std::__shared_weak_count **)(v2 + 248);
  if (v66)
  {
    v67 = (unint64_t *)&v66->__shared_owners_;
    do
      v68 = __ldxr(v67);
    while (__stxr(v68 + 1, v67));
    do
      v69 = __ldaxr(v67);
    while (__stlxr(v69 - 1, v67));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  if (v65)
    v70 = 0;
  else
    v70 = v53;
  if (v65 && ((v53 ^ 1) & 1) == 0)
  {
    if (xmlTextWriterWriteRaw(v5, (const xmlChar *)"\n") != -1)
    {
      if (siri::dialogengine::VisualRef::IsEmpty((siri::dialogengine::VisualRef *)v65))
      {
LABEL_202:
        v70 = 1;
        goto LABEL_205;
      }
      if (siri::dialogengine::StartXmlElement(v5, (const xmlChar *)"visual", v71))
      {
        if (*(char *)(v65 + 119) < 0)
          std::string::__init_copy_ctor_external(&v99, *(const std::string::value_type **)(v65 + 96), *(_QWORD *)(v65 + 104));
        else
          v99 = *(std::string *)(v65 + 96);
        v74 = HIBYTE(v99.__r_.__value_.__r.__words[2]);
        if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v75 = &v99;
        else
          v75 = (std::string *)v99.__r_.__value_.__r.__words[0];
        if (v75->__r_.__value_.__s.__data_[0])
        {
          v73 = siri::dialogengine::WriteXmlAttribute(v5, (const xmlChar *)"id", (const xmlChar *)v75, v72);
          v74 = HIBYTE(v99.__r_.__value_.__r.__words[2]);
        }
        else
        {
          v73 = 1;
        }
        if (v74 < 0)
          operator delete(v99.__r_.__value_.__l.__data_);
      }
      else
      {
        v73 = 0;
      }
      std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&v102, (const void ***)(v65 + 208));
      v76 = v102.__r_.__value_.__r.__words[0];
      if ((std::string::size_type *)v102.__r_.__value_.__l.__data_ != &v102.__r_.__value_.__r.__words[1])
      {
        while (1)
        {
          std::pair<std::string const,std::string>::pair[abi:ne180100](&v99, (__int128 *)(v76 + 32));
          if (!v73 || !siri::dialogengine::StartXmlElement(v5, (const xmlChar *)"param", v77))
            goto LABEL_189;
          v79 = (v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &v99
              : (std::string *)v99.__r_.__value_.__r.__words[0];
          if (v79->__r_.__value_.__s.__data_[0]
            && !siri::dialogengine::WriteXmlAttribute(v5, (const xmlChar *)"name", (const xmlChar *)v79, v78))
          {
            goto LABEL_189;
          }
          v80 = v101 >= 0 ? (const xmlChar *)&__p : (const xmlChar *)__p;
          if (xmlTextWriterWriteRaw(v5, v80) == -1)
            goto LABEL_189;
          if (xmlTextWriterEndElement(v5) == -1)
            break;
          v73 = 1;
LABEL_190:
          if (v101 < 0)
            operator delete(__p);
          if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v99.__r_.__value_.__l.__data_);
          v82 = *(std::string **)(v76 + 8);
          if (v82)
          {
            do
            {
              v83 = v82;
              v82 = (std::string *)v82->__r_.__value_.__r.__words[0];
            }
            while (v82);
          }
          else
          {
            do
            {
              v83 = *(std::string **)(v76 + 16);
              v84 = v83->__r_.__value_.__r.__words[0] == v76;
              v76 = (std::string::size_type)v83;
            }
            while (!v84);
          }
          v76 = (std::string::size_type)v83;
          if (v83 == (std::string *)&v102.__r_.__value_.__r.__words[1])
            goto LABEL_200;
        }
        siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Error ending element.", v81);
LABEL_189:
        v73 = 0;
        goto LABEL_190;
      }
LABEL_200:
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((_QWORD *)v102.__r_.__value_.__l.__size_);
      if (v73)
      {
        if (xmlTextWriterEndElement(v5) != -1)
          goto LABEL_202;
        siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Error ending element.", v85);
      }
    }
    v70 = 0;
  }
LABEL_205:
  v87 = *(_QWORD *)(v2 + 256);
  v86 = *(std::__shared_weak_count **)(v2 + 264);
  if (!v86)
    goto LABEL_210;
  v88 = (unint64_t *)&v86->__shared_owners_;
  do
    v89 = __ldxr(v88);
  while (__stxr(v89 + 1, v88));
  do
    v90 = __ldaxr(v88);
  while (__stlxr(v90 - 1, v88));
  if (!v90)
  {
    ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
    std::__shared_weak_count::__release_weak(v86);
    if (v87)
      goto LABEL_211;
  }
  else
  {
LABEL_210:
    if (v87)
    {
LABEL_211:
      if (!v70
        || xmlTextWriterWriteRaw(v5, (const xmlChar *)"\n") == -1
        || !siri::dialogengine::StartXmlElement(v5, (const xmlChar *)"response", v91))
      {
        goto LABEL_222;
      }
      if (xmlTextWriterFullEndElement(v5) == -1)
        goto LABEL_221;
      goto LABEL_218;
    }
  }
  if (!v70)
  {
LABEL_222:
    v2 = 0;
    goto LABEL_223;
  }
LABEL_218:
  if (xmlTextWriterWriteRaw(v5, (const xmlChar *)"\n") == -1)
    goto LABEL_222;
  if (xmlTextWriterFullEndElement(v5) == -1)
  {
LABEL_221:
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Error ending element.", v92, v95[0], v95[1], v96);
    goto LABEL_222;
  }
  v2 = siri::dialogengine::EndXmlDocument(v5, (_xmlTextWriter *)v92);
LABEL_223:
  xmlTextWriterFlush(v5);
  if (SHIBYTE(v96) < 0)
    operator delete(v95[0]);
  v93 = writer;
  writer = 0;
  if (v93)
    xmlFreeTextWriter(v93);
  return v2;
}

void sub_1BF98F71C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, xmlTextWriter *a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a14 < 0)
    operator delete(__p);
  std::unique_ptr<_xmlTextWriter,siri::dialogengine::xmlTextWriterDeleter>::reset[abi:ne180100](&a16);
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::_WriteConditionEntry(siri::dialogengine *this, _xmlTextWriter *a2, const siri::dialogengine::ConditionEntry *a3)
{
  const char *v5;
  std::string *v6;
  std::string::size_type v7;
  std::string *v8;
  __int128 v9;
  const char *v10;
  const char *v11;
  _BOOL8 result;
  const char *v13;
  const char *v14;
  char v15;
  std::string *p_p;
  const siri::dialogengine::ConditionEntry *v17;
  std::string::size_type i;
  std::string::size_type size;
  _xmlTextWriter *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::string *v26;
  const siri::dialogengine::ConditionEntry *v27;
  std::string::size_type j;
  std::string::size_type v29;
  _xmlTextWriter *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::string *v36;
  const siri::dialogengine::ConditionEntry *v37;
  std::string::size_type v38;
  std::string::size_type v39;
  _xmlTextWriter *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  const char *v46;
  std::string *v47;
  _BOOL4 v48;
  const char *v49;
  _BOOL4 v50;
  std::string *v51;
  _BOOL4 v52;
  _BOOL4 v53;
  std::string *v54;
  _BOOL4 v55;
  char v56;
  std::string *v57;
  _BOOL4 v58;
  char v59;
  std::string *v60;
  _BOOL4 v61;
  std::string v62;
  std::string v63;
  std::string __p;

  switch(*((_DWORD *)a2 + 8))
  {
    case 0:
      if (siri::dialogengine::StartXmlElement(this, (const xmlChar *)"and", (const char *)a3))
      {
        if (*((char *)a2 + 63) < 0)
          std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 5), *((_QWORD *)a2 + 6));
        else
          __p = *(std::string *)((char *)a2 + 40);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if (!p_p->__r_.__value_.__s.__data_[0])
        {
          v15 = 1;
          if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
            goto LABEL_39;
          goto LABEL_38;
        }
        v15 = siri::dialogengine::WriteXmlAttribute(this, (const xmlChar *)"note", (const xmlChar *)p_p, v5);
        if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_38:
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        v15 = 0;
      }
LABEL_39:
      memset(&__p, 0, sizeof(__p));
      std::vector<std::shared_ptr<siri::dialogengine::ConditionEntry>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::ConditionEntry>*,std::shared_ptr<siri::dialogengine::ConditionEntry>*>((char *)&__p, *((_QWORD **)a2 + 8), *((_QWORD **)a2 + 9), (uint64_t)(*((_QWORD *)a2 + 9) - *((_QWORD *)a2 + 8)) >> 4);
      size = __p.__r_.__value_.__l.__size_;
      for (i = __p.__r_.__value_.__r.__words[0]; ; i += 16)
      {
        if (i == size)
          goto LABEL_95;
        v20 = *(_xmlTextWriter **)i;
        v21 = *(std::__shared_weak_count **)(i + 8);
        v63.__r_.__value_.__r.__words[0] = *(_QWORD *)i;
        v63.__r_.__value_.__l.__size_ = (std::string::size_type)v21;
        if (v21)
        {
          p_shared_owners = (unint64_t *)&v21->__shared_owners_;
          do
            v23 = __ldxr(p_shared_owners);
          while (__stxr(v23 + 1, p_shared_owners));
        }
        if ((v15 & 1) != 0)
        {
          v15 = siri::dialogengine::_WriteConditionEntry(this, v20, v17);
          if (!v21)
            continue;
        }
        else
        {
          v15 = 0;
          if (!v21)
            continue;
        }
        v24 = (unint64_t *)&v21->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    case 1:
      if (!siri::dialogengine::StartXmlElement(this, (const xmlChar *)"or", (const char *)a3))
      {
        v15 = 0;
        goto LABEL_60;
      }
      if (*((char *)a2 + 63) < 0)
        std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 5), *((_QWORD *)a2 + 6));
      else
        __p = *(std::string *)((char *)a2 + 40);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v26 = &__p;
      else
        v26 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if (v26->__r_.__value_.__s.__data_[0])
      {
        v15 = siri::dialogengine::WriteXmlAttribute(this, (const xmlChar *)"note", (const xmlChar *)v26, v10);
        if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
          goto LABEL_60;
        goto LABEL_59;
      }
      v15 = 1;
      if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_59:
        operator delete(__p.__r_.__value_.__l.__data_);
LABEL_60:
      memset(&__p, 0, sizeof(__p));
      std::vector<std::shared_ptr<siri::dialogengine::ConditionEntry>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::ConditionEntry>*,std::shared_ptr<siri::dialogengine::ConditionEntry>*>((char *)&__p, *((_QWORD **)a2 + 8), *((_QWORD **)a2 + 9), (uint64_t)(*((_QWORD *)a2 + 9) - *((_QWORD *)a2 + 8)) >> 4);
      v29 = __p.__r_.__value_.__l.__size_;
      for (j = __p.__r_.__value_.__r.__words[0]; ; j += 16)
      {
        if (j == v29)
          goto LABEL_95;
        v30 = *(_xmlTextWriter **)j;
        v31 = *(std::__shared_weak_count **)(j + 8);
        v63.__r_.__value_.__r.__words[0] = *(_QWORD *)j;
        v63.__r_.__value_.__l.__size_ = (std::string::size_type)v31;
        if (v31)
        {
          v32 = (unint64_t *)&v31->__shared_owners_;
          do
            v33 = __ldxr(v32);
          while (__stxr(v33 + 1, v32));
        }
        if ((v15 & 1) != 0)
        {
          v15 = siri::dialogengine::_WriteConditionEntry(this, v30, v27);
          if (!v31)
            continue;
        }
        else
        {
          v15 = 0;
          if (!v31)
            continue;
        }
        v34 = (unint64_t *)&v31->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
    case 2:
      if (!siri::dialogengine::StartXmlElement(this, (const xmlChar *)"not", (const char *)a3))
      {
        v15 = 0;
        goto LABEL_81;
      }
      if (*((char *)a2 + 63) < 0)
        std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 5), *((_QWORD *)a2 + 6));
      else
        __p = *(std::string *)((char *)a2 + 40);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = &__p;
      else
        v36 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if (v36->__r_.__value_.__s.__data_[0])
      {
        v15 = siri::dialogengine::WriteXmlAttribute(this, (const xmlChar *)"note", (const xmlChar *)v36, v11);
        if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
          goto LABEL_81;
        goto LABEL_80;
      }
      v15 = 1;
      if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_80:
        operator delete(__p.__r_.__value_.__l.__data_);
LABEL_81:
      memset(&__p, 0, sizeof(__p));
      std::vector<std::shared_ptr<siri::dialogengine::ConditionEntry>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::ConditionEntry>*,std::shared_ptr<siri::dialogengine::ConditionEntry>*>((char *)&__p, *((_QWORD **)a2 + 8), *((_QWORD **)a2 + 9), (uint64_t)(*((_QWORD *)a2 + 9) - *((_QWORD *)a2 + 8)) >> 4);
      v39 = __p.__r_.__value_.__l.__size_;
      v38 = __p.__r_.__value_.__r.__words[0];
      while (2)
      {
        if (v38 != v39)
        {
          v40 = *(_xmlTextWriter **)v38;
          v41 = *(std::__shared_weak_count **)(v38 + 8);
          v63.__r_.__value_.__r.__words[0] = *(_QWORD *)v38;
          v63.__r_.__value_.__l.__size_ = (std::string::size_type)v41;
          if (v41)
          {
            v42 = (unint64_t *)&v41->__shared_owners_;
            do
              v43 = __ldxr(v42);
            while (__stxr(v43 + 1, v42));
          }
          if ((v15 & 1) != 0)
          {
            v15 = siri::dialogengine::_WriteConditionEntry(this, v40, v37);
            if (!v41)
              goto LABEL_94;
          }
          else
          {
            v15 = 0;
            if (!v41)
            {
LABEL_94:
              v38 += 16;
              continue;
            }
          }
          v44 = (unint64_t *)&v41->__shared_owners_;
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
          goto LABEL_94;
        }
        break;
      }
LABEL_95:
      v63.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
      if ((v15 & 1) != 0)
        goto LABEL_96;
      return 0;
    case 3:
      result = siri::dialogengine::StartXmlElement(this, (const xmlChar *)"expression", (const char *)a3);
      if (!result)
        return result;
      if (*((char *)a2 + 175) < 0)
        std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 19), *((_QWORD *)a2 + 20));
      else
        __p = *(std::string *)((char *)a2 + 152);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v47 = &__p;
      else
        v47 = (std::string *)__p.__r_.__value_.__r.__words[0];
      v48 = siri::dialogengine::WriteXmlAttribute(this, (const xmlChar *)"name", (const xmlChar *)v47, v13);
      v50 = v48;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (!v50)
          return 0;
      }
      else if (!v48)
      {
        return 0;
      }
      if (*((char *)a2 + 199) < 0)
        std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 22), *((_QWORD *)a2 + 23));
      else
        __p = *(std::string *)((char *)a2 + 176);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v54 = &__p;
      else
        v54 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if (v54->__r_.__value_.__s.__data_[0])
      {
        v55 = siri::dialogengine::WriteXmlAttribute(this, (const xmlChar *)"op", (const xmlChar *)v54, v49);
        if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
          goto LABEL_132;
        goto LABEL_131;
      }
      v55 = 1;
      if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_131:
        operator delete(__p.__r_.__value_.__l.__data_);
LABEL_132:
      if (!v55)
        return 0;
      if (*((char *)a2 + 223) < 0)
        std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 25), *((_QWORD *)a2 + 26));
      else
        __p = *(std::string *)((char *)a2 + 200);
      v59 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v60 = &__p;
      else
        v60 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if (v60->__r_.__value_.__s.__data_[0])
      {
        v61 = siri::dialogengine::WriteXmlAttribute(this, (const xmlChar *)"value", (const xmlChar *)v60, v49);
        v59 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else
      {
        v61 = 1;
      }
      if (v59 < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (!v61)
        return 0;
      if (*((char *)a2 + 63) < 0)
        std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 5), *((_QWORD *)a2 + 6));
      else
        __p = *(std::string *)((char *)a2 + 40);
      v56 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v57 = &__p;
      else
        v57 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if (v57->__r_.__value_.__s.__data_[0])
      {
LABEL_140:
        v58 = siri::dialogengine::WriteXmlAttribute(this, (const xmlChar *)"note", (const xmlChar *)v57, v49);
        if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
        {
LABEL_142:
          if (!v58)
            return 0;
LABEL_96:
          if (xmlTextWriterEndElement(this) == -1)
          {
            siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Error ending element.", v46);
            return 0;
          }
          return 1;
        }
      }
      else
      {
LABEL_165:
        v58 = 1;
        if ((v56 & 0x80) == 0)
          goto LABEL_142;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_142;
    case 4:
      result = siri::dialogengine::StartXmlElement(this, (const xmlChar *)"sub-condition", (const char *)a3);
      if (!result)
        return result;
      if (*((char *)a2 + 175) < 0)
        std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 19), *((_QWORD *)a2 + 20));
      else
        __p = *(std::string *)((char *)a2 + 152);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v51 = &__p;
      else
        v51 = (std::string *)__p.__r_.__value_.__r.__words[0];
      v52 = siri::dialogengine::WriteXmlAttribute(this, (const xmlChar *)"name", (const xmlChar *)v51, v14);
      v53 = v52;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (!v53)
          return 0;
      }
      else if (!v52)
      {
        return 0;
      }
      if (*((char *)a2 + 63) < 0)
        std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 5), *((_QWORD *)a2 + 6));
      else
        __p = *(std::string *)((char *)a2 + 40);
      v56 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v57 = &__p;
      else
        v57 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if (v57->__r_.__value_.__s.__data_[0])
        goto LABEL_140;
      goto LABEL_165;
    default:
      std::string::basic_string[abi:ne180100]<0>(&v63, "Unsupported Condition Entry type:");
      std::to_string(&v62, *((_DWORD *)a2 + 8));
      if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v6 = &v62;
      else
        v6 = (std::string *)v62.__r_.__value_.__r.__words[0];
      if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v7 = HIBYTE(v62.__r_.__value_.__r.__words[2]);
      else
        v7 = v62.__r_.__value_.__l.__size_;
      v8 = std::string::append(&v63, (const std::string::value_type *)v6, v7);
      v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Log::LogWithLevel((uint64_t)&__p, 3u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v62.__r_.__value_.__l.__data_);
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v63.__r_.__value_.__l.__data_);
      return 0;
  }
}

void sub_1BF990014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::_WriteGroup(siri::dialogengine *this, _xmlTextWriter *a2, const siri::dialogengine::Group *a3)
{
  void *v5;
  void *v6;
  void *v7;
  char *v8;
  char *v9;
  const char *v10;
  const char *v11;
  std::string *v12;
  _BOOL4 v13;
  std::string *v14;
  _BOOL4 v15;
  char *v16;
  std::string *v17;
  _BOOL4 v18;
  char v19;
  std::string *v20;
  _BOOL4 v21;
  char v22;
  std::string *v23;
  _BOOL4 v24;
  float v25;
  void **v26;
  int v27;
  const void **v28;
  const void **v29;
  const void *v30;
  _xmlTextWriter *v31;
  const siri::dialogengine::Group *v32;
  int v33;
  _xmlTextWriter *v34;
  const siri::dialogengine::Dialog *v35;
  int v36;
  char *v37;
  const char *v38;
  char *v39;
  const char *v40;
  std::string *v41;
  _BOOL4 v42;
  std::string *v43;
  _BOOL4 v44;
  std::string *v45;
  _BOOL4 v46;
  std::string *v47;
  _BOOL4 v48;
  float v49;
  const xmlChar *v50;
  _BOOL4 v51;
  const siri::dialogengine::SpeakableString *v52;
  int v53;
  const char *v54;
  _BOOL4 v56;
  char v57;
  std::string *v58;
  const void **v59;
  const void **v60;
  uint64_t v61;
  void *v62[2];
  char v63;
  std::string v64;
  void *v65;
  char v66;
  void *v67;
  char v68;
  void *v69;
  char v70;
  void *v71;
  char v72;
  void *v73;
  char v74;
  void *__p;
  char v76;
  void *v77[2];
  char v78;

  if (!a2)
    goto LABEL_38;
  v9 = v8;
  if (v5)
  {
    v10 = "all";
    goto LABEL_8;
  }
  if (v6)
  {
    v10 = "first";
    goto LABEL_8;
  }
  if (!v7)
  {
    if (v8)
    {
      if (!siri::dialogengine::StartXmlElement(this, (const xmlChar *)"switch", (const char *)a3))
        goto LABEL_77;
      goto LABEL_9;
    }
LABEL_38:
    v16 = "Unrecognized Group node type.";
    goto LABEL_183;
  }
  v10 = "random";
LABEL_8:
  if (!siri::dialogengine::StartXmlElement(this, (const xmlChar *)v10, (const char *)a3))
    goto LABEL_77;
LABEL_9:
  if (*((char *)a2 + 119) < 0)
    std::string::__init_copy_ctor_external(&v64, *((const std::string::value_type **)a2 + 12), *((_QWORD *)a2 + 13));
  else
    v64 = *(std::string *)((_BYTE *)a2 + 4);
  if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = &v64;
  else
    v12 = (std::string *)v64.__r_.__value_.__r.__words[0];
  if (v12->__r_.__value_.__s.__data_[0])
  {
    v13 = siri::dialogengine::WriteXmlAttribute(this, (const xmlChar *)"id", (const xmlChar *)v12, v11);
    if ((*((_BYTE *)&v64.__r_.__value_.__s + 23) & 0x80) == 0)
      goto LABEL_17;
  }
  else
  {
    v13 = 1;
    if ((*((_BYTE *)&v64.__r_.__value_.__s + 23) & 0x80) == 0)
    {
LABEL_17:
      if (!v13)
        goto LABEL_77;
      goto LABEL_21;
    }
  }
  operator delete(v64.__r_.__value_.__l.__data_);
  if (!v13)
    goto LABEL_77;
LABEL_21:
  if (*((char *)a2 + 191) < 0)
    std::string::__init_copy_ctor_external(&v64, *((const std::string::value_type **)a2 + 21), *((_QWORD *)a2 + 22));
  else
    v64 = *(std::string *)((_BYTE *)a2 + 7);
  if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = &v64;
  else
    v14 = (std::string *)v64.__r_.__value_.__r.__words[0];
  if (v14->__r_.__value_.__s.__data_[0])
  {
    v15 = siri::dialogengine::WriteXmlAttribute(this, (const xmlChar *)"note", (const xmlChar *)v14, v11);
    if ((*((_BYTE *)&v64.__r_.__value_.__s + 23) & 0x80) == 0)
      goto LABEL_29;
  }
  else
  {
    v15 = 1;
    if ((*((_BYTE *)&v64.__r_.__value_.__s + 23) & 0x80) == 0)
    {
LABEL_29:
      if (!v15)
        goto LABEL_77;
      goto LABEL_33;
    }
  }
  operator delete(v64.__r_.__value_.__l.__data_);
  if (!v15)
    goto LABEL_77;
LABEL_33:
  if (*((char *)a2 + 255) < 0)
    std::string::__init_copy_ctor_external(&v64, *((const std::string::value_type **)a2 + 29), *((_QWORD *)a2 + 30));
  else
    v64 = *(std::string *)((char *)a2 + 232);
  if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = &v64;
  else
    v17 = (std::string *)v64.__r_.__value_.__r.__words[0];
  if (!v17->__r_.__value_.__s.__data_[0])
  {
    v18 = 1;
    if ((*((_BYTE *)&v64.__r_.__value_.__s + 23) & 0x80) == 0)
      goto LABEL_46;
    goto LABEL_45;
  }
  v18 = siri::dialogengine::WriteXmlAttribute(this, (const xmlChar *)"phrase", (const xmlChar *)v17, v11);
  if ((*((_BYTE *)&v64.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_45:
    operator delete(v64.__r_.__value_.__l.__data_);
LABEL_46:
  if (v18)
  {
    if (*((char *)a2 + 167) < 0)
      std::string::__init_copy_ctor_external(&v64, *((const std::string::value_type **)a2 + 18), *((_QWORD *)a2 + 19));
    else
      v64 = *(std::string *)((_BYTE *)a2 + 6);
    v19 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
    if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = &v64;
    else
      v20 = (std::string *)v64.__r_.__value_.__r.__words[0];
    if (v20->__r_.__value_.__s.__data_[0])
    {
      v21 = siri::dialogengine::WriteXmlAttribute(this, (const xmlChar *)"case", (const xmlChar *)v20, v11);
      v19 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
    }
    else
    {
      v21 = 1;
    }
    if (v19 < 0)
      operator delete(v64.__r_.__value_.__l.__data_);
    if (v21)
    {
      if (*((char *)a2 + 143) < 0)
        std::string::__init_copy_ctor_external(&v64, *((const std::string::value_type **)a2 + 15), *((_QWORD *)a2 + 16));
      else
        v64 = *(std::string *)((_BYTE *)a2 + 5);
      v22 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
      if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v23 = &v64;
      else
        v23 = (std::string *)v64.__r_.__value_.__r.__words[0];
      if (v23->__r_.__value_.__s.__data_[0])
      {
        v24 = siri::dialogengine::WriteXmlAttribute(this, (const xmlChar *)"condition", (const xmlChar *)v23, v11);
        v22 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
      }
      else
      {
        v24 = 1;
      }
      if (v22 < 0)
        operator delete(v64.__r_.__value_.__l.__data_);
      if (v24)
      {
        v25 = *((float *)a2 + 48);
        if (v25 == 1.0)
        {
          v26 = (void **)"";
        }
        else
        {
          siri::dialogengine::StringFromDouble((siri::dialogengine *)0xFFFFFFFFLL, (uint64_t)v62);
          if (v63 >= 0)
            v26 = v62;
          else
            v26 = (void **)v62[0];
        }
        if (*(_BYTE *)v26)
          v56 = siri::dialogengine::WriteXmlAttribute(this, (const xmlChar *)"weight", (const xmlChar *)v26, v11);
        else
          v56 = 1;
        if (v25 != 1.0 && v63 < 0)
          operator delete(v62[0]);
        if (v9)
          v27 = 0;
        else
          v27 = v56;
        if (v9 && v56)
        {
          if (v9[279] < 0)
            std::string::__init_copy_ctor_external(&v64, *((const std::string::value_type **)v9 + 32), *((_QWORD *)v9 + 33));
          else
            v64 = *(std::string *)(v9 + 256);
          v57 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
          v58 = (v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &v64
              : (std::string *)v64.__r_.__value_.__r.__words[0];
          if (v58->__r_.__value_.__s.__data_[0])
          {
            v27 = siri::dialogengine::WriteXmlAttribute(this, (const xmlChar *)"value", (const xmlChar *)v58, v11);
            v57 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
          }
          else
          {
            v27 = 1;
          }
          if (v57 < 0)
            operator delete(v64.__r_.__value_.__l.__data_);
        }
        goto LABEL_78;
      }
    }
  }
LABEL_77:
  v27 = 0;
LABEL_78:
  v59 = 0;
  v60 = 0;
  v61 = 0;
  std::vector<std::shared_ptr<siri::dialogengine::Node>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Node>*,std::shared_ptr<siri::dialogengine::Node>*>((char *)&v59, *((_QWORD **)a2 + 26), *((_QWORD **)a2 + 27), (uint64_t)(*((_QWORD *)a2 + 27) - *((_QWORD *)a2 + 26)) >> 4);
  v29 = v59;
  v28 = v60;
  while (v29 != v28)
  {
    v30 = *v29;
    if (!*v29)
      goto LABEL_148;
    v33 = (v31 == 0) & v27;
    if (v31)
    {
      if (((v27 ^ 1) & 1) == 0)
      {
        v33 = siri::dialogengine::_WriteGroup(this, v31, v32);
        v30 = *v29;
        v27 = v33;
        if (!*v29)
          goto LABEL_148;
      }
    }
    v36 = v34 ? 0 : v33;
    if (v34)
    {
      if (v33)
      {
        v36 = siri::dialogengine::_WriteDialog(this, v34, v35);
        v30 = *v29;
        v27 = v36;
        if (!*v29)
          goto LABEL_148;
      }
    }
    v27 = v37 ? 0 : v36;
    if (!v37 || !v36)
      goto LABEL_148;
    v39 = v37;
    if (!siri::dialogengine::StartXmlElement(this, (const xmlChar *)"text", v38))
    {
LABEL_146:
      xmlTextWriterSetIndent(this, 0);
      v27 = 0;
      goto LABEL_147;
    }
    if (v39[119] < 0)
      std::string::__init_copy_ctor_external(&v64, *((const std::string::value_type **)v39 + 12), *((_QWORD *)v39 + 13));
    else
      v64 = *(std::string *)(v39 + 4);
    if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v41 = &v64;
    else
      v41 = (std::string *)v64.__r_.__value_.__r.__words[0];
    if (v41->__r_.__value_.__s.__data_[0])
    {
      v42 = siri::dialogengine::WriteXmlAttribute(this, (const xmlChar *)"id", (const xmlChar *)v41, v40);
      if ((*((_BYTE *)&v64.__r_.__value_.__s + 23) & 0x80) == 0)
        goto LABEL_103;
    }
    else
    {
      v42 = 1;
      if ((*((_BYTE *)&v64.__r_.__value_.__s + 23) & 0x80) == 0)
      {
LABEL_103:
        if (!v42)
          goto LABEL_146;
        goto LABEL_107;
      }
    }
    operator delete(v64.__r_.__value_.__l.__data_);
    if (!v42)
      goto LABEL_146;
LABEL_107:
    if (v39[191] < 0)
      std::string::__init_copy_ctor_external(&v64, *((const std::string::value_type **)v39 + 21), *((_QWORD *)v39 + 22));
    else
      v64 = *(std::string *)(v39 + 7);
    if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v43 = &v64;
    else
      v43 = (std::string *)v64.__r_.__value_.__r.__words[0];
    if (v43->__r_.__value_.__s.__data_[0])
    {
      v44 = siri::dialogengine::WriteXmlAttribute(this, (const xmlChar *)"note", (const xmlChar *)v43, v40);
      if ((*((_BYTE *)&v64.__r_.__value_.__s + 23) & 0x80) == 0)
        goto LABEL_115;
    }
    else
    {
      v44 = 1;
      if ((*((_BYTE *)&v64.__r_.__value_.__s + 23) & 0x80) == 0)
      {
LABEL_115:
        if (!v44)
          goto LABEL_146;
        goto LABEL_119;
      }
    }
    operator delete(v64.__r_.__value_.__l.__data_);
    if (!v44)
      goto LABEL_146;
LABEL_119:
    if (v39[143] < 0)
      std::string::__init_copy_ctor_external(&v64, *((const std::string::value_type **)v39 + 15), *((_QWORD *)v39 + 16));
    else
      v64 = *(std::string *)(v39 + 5);
    if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v45 = &v64;
    else
      v45 = (std::string *)v64.__r_.__value_.__r.__words[0];
    if (v45->__r_.__value_.__s.__data_[0])
    {
      v46 = siri::dialogengine::WriteXmlAttribute(this, (const xmlChar *)"condition", (const xmlChar *)v45, v40);
      if ((*((_BYTE *)&v64.__r_.__value_.__s + 23) & 0x80) == 0)
        goto LABEL_127;
    }
    else
    {
      v46 = 1;
      if ((*((_BYTE *)&v64.__r_.__value_.__s + 23) & 0x80) == 0)
      {
LABEL_127:
        if (!v46)
          goto LABEL_146;
        goto LABEL_131;
      }
    }
    operator delete(v64.__r_.__value_.__l.__data_);
    if (!v46)
      goto LABEL_146;
LABEL_131:
    if (v39[167] < 0)
      std::string::__init_copy_ctor_external(&v64, *((const std::string::value_type **)v39 + 18), *((_QWORD *)v39 + 19));
    else
      v64 = *(std::string *)(v39 + 6);
    if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v47 = &v64;
    else
      v47 = (std::string *)v64.__r_.__value_.__r.__words[0];
    if (v47->__r_.__value_.__s.__data_[0])
    {
      v48 = siri::dialogengine::WriteXmlAttribute(this, (const xmlChar *)"case", (const xmlChar *)v47, v40);
      if ((*((_BYTE *)&v64.__r_.__value_.__s + 23) & 0x80) == 0)
        goto LABEL_139;
    }
    else
    {
      v48 = 1;
      if ((*((_BYTE *)&v64.__r_.__value_.__s + 23) & 0x80) == 0)
      {
LABEL_139:
        if (!v48)
          goto LABEL_146;
        goto LABEL_140;
      }
    }
    operator delete(v64.__r_.__value_.__l.__data_);
    if (!v48)
      goto LABEL_146;
LABEL_140:
    v49 = *((float *)v39 + 48);
    if (v49 == 1.0)
    {
      v50 = (const xmlChar *)"";
    }
    else
    {
      siri::dialogengine::StringFromDouble((siri::dialogengine *)0xFFFFFFFFLL, (uint64_t)v77);
      if (v78 >= 0)
        v50 = (const xmlChar *)v77;
      else
        v50 = (const xmlChar *)v77[0];
    }
    if (*v50)
      v51 = siri::dialogengine::WriteXmlAttribute(this, (const xmlChar *)"weight", v50, v40);
    else
      v51 = 1;
    if (v49 == 1.0)
    {
      xmlTextWriterSetIndent(this, 0);
      if (!v51)
        goto LABEL_178;
    }
    else
    {
      if (v78 < 0)
        operator delete(v77[0]);
      xmlTextWriterSetIndent(this, 0);
      if (!v51)
        goto LABEL_178;
    }
    siri::dialogengine::SpeakableString::SpeakableString(&v64, (const siri::dialogengine::SpeakableString *)(v39 + 208));
    v53 = siri::dialogengine::_WriteSpeakableString(this, (_xmlTextWriter *)&v64, v52);
    if (v76 < 0)
      operator delete(__p);
    if (v74 < 0)
      operator delete(v73);
    if (v72 < 0)
      operator delete(v71);
    if (v70 < 0)
      operator delete(v69);
    if (v68 < 0)
      operator delete(v67);
    if (v66 < 0)
      operator delete(v65);
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v64.__r_.__value_.__l.__data_);
    if (!v53)
      goto LABEL_178;
    if (xmlTextWriterEndElement(this) == -1)
    {
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Error ending element.", v54);
LABEL_178:
      v27 = 0;
      goto LABEL_147;
    }
    v27 = 1;
LABEL_147:
    xmlTextWriterWriteRaw(this, (const xmlChar *)"\n");
    xmlTextWriterSetIndent(this, 1);
LABEL_148:
    v29 += 2;
  }
  v64.__r_.__value_.__r.__words[0] = (std::string::size_type)&v59;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v64);
  if ((v27 & 1) == 0)
    return 0;
  if (xmlTextWriterFullEndElement(this) != -1)
    return 1;
  v16 = "Error ending element.";
LABEL_183:
  siri::dialogengine::Log::Error((siri::dialogengine::Log *)v16, (const char *)a2, a3);
  return 0;
}

void sub_1BF990A44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::_WriteDialog(siri::dialogengine *this, _xmlTextWriter *a2, const siri::dialogengine::Dialog *a3)
{
  const char *v5;
  std::string *v6;
  _BOOL4 v7;
  std::string *v8;
  std::string *v9;
  _BOOL4 v10;
  char *v11;
  std::string *v12;
  char *v13;
  char v14;
  std::string *v15;
  BOOL v16;
  const siri::dialogengine::SpeakableString *v17;
  int started;
  uint64_t v19;
  _BOOL4 v20;
  std::string::size_type size;
  const char *v22;
  uint64_t v23;
  std::string::size_type v24;
  const siri::dialogengine::SpeakableString *v25;
  const char *v26;
  uint64_t v27;
  std::string *v29;
  char v30;
  std::string *v31;
  char v32;
  std::string *v33;
  char v34;
  std::string *v35;
  std::string v36;
  void *v37;
  uint64_t v38;
  unsigned __int8 v39;
  void *v40;
  char v41;
  void *v42;
  char v43;
  void *v44;
  char v45;
  void *v46;
  char v47;
  void *__p;
  char v49;
  std::string v50;
  void *v51;
  uint64_t v52;
  unsigned __int8 v53;
  void *v54;
  char v55;
  void *v56;
  char v57;
  void *v58;
  char v59;
  void *v60;
  char v61;
  void *v62;
  char v63;

  if (!siri::dialogengine::StartXmlElement(this, (const xmlChar *)"dialog", (const char *)a3))
    goto LABEL_72;
  if (*((char *)a2 + 119) < 0)
    std::string::__init_copy_ctor_external(&v50, *((const std::string::value_type **)a2 + 12), *((_QWORD *)a2 + 13));
  else
    v50 = *(std::string *)((_BYTE *)a2 + 4);
  if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = &v50;
  else
    v6 = (std::string *)v50.__r_.__value_.__r.__words[0];
  if (v6->__r_.__value_.__s.__data_[0])
  {
    v7 = siri::dialogengine::WriteXmlAttribute(this, (const xmlChar *)"id", (const xmlChar *)v6, v5);
    if ((*((_BYTE *)&v50.__r_.__value_.__s + 23) & 0x80) == 0)
      goto LABEL_10;
LABEL_13:
    operator delete(v50.__r_.__value_.__l.__data_);
    if (!v7)
      goto LABEL_73;
    goto LABEL_14;
  }
  v7 = 1;
  if ((*((_BYTE *)&v50.__r_.__value_.__s + 23) & 0x80) != 0)
    goto LABEL_13;
LABEL_10:
  if (!v7)
    goto LABEL_73;
LABEL_14:
  if (*((char *)a2 + 191) < 0)
    std::string::__init_copy_ctor_external(&v50, *((const std::string::value_type **)a2 + 21), *((_QWORD *)a2 + 22));
  else
    v50 = *(std::string *)((_BYTE *)a2 + 7);
  if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v50;
  else
    v8 = (std::string *)v50.__r_.__value_.__r.__words[0];
  if (v8->__r_.__value_.__s.__data_[0])
  {
    v7 = siri::dialogengine::WriteXmlAttribute(this, (const xmlChar *)"note", (const xmlChar *)v8, v5);
    if ((*((_BYTE *)&v50.__r_.__value_.__s + 23) & 0x80) == 0)
      goto LABEL_22;
LABEL_25:
    operator delete(v50.__r_.__value_.__l.__data_);
    if (!v7)
      goto LABEL_73;
    goto LABEL_26;
  }
  v7 = 1;
  if ((*((_BYTE *)&v50.__r_.__value_.__s + 23) & 0x80) != 0)
    goto LABEL_25;
LABEL_22:
  if (!v7)
    goto LABEL_73;
LABEL_26:
  if (*((char *)a2 + 143) < 0)
    std::string::__init_copy_ctor_external(&v50, *((const std::string::value_type **)a2 + 15), *((_QWORD *)a2 + 16));
  else
    v50 = *(std::string *)((_BYTE *)a2 + 5);
  if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = &v50;
  else
    v9 = (std::string *)v50.__r_.__value_.__r.__words[0];
  if (v9->__r_.__value_.__s.__data_[0])
  {
    v7 = siri::dialogengine::WriteXmlAttribute(this, (const xmlChar *)"condition", (const xmlChar *)v9, v5);
    if ((*((_BYTE *)&v50.__r_.__value_.__s + 23) & 0x80) == 0)
      goto LABEL_35;
    goto LABEL_34;
  }
  v7 = 1;
  if ((*((_BYTE *)&v50.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_34:
    operator delete(v50.__r_.__value_.__l.__data_);
LABEL_35:
  if (*((_BYTE *)a2 + 545))
    v10 = v7;
  else
    v10 = 0;
  if (*((_BYTE *)a2 + 545))
    v7 = 0;
  if (v10)
  {
    if (*((_BYTE *)a2 + 544))
      v11 = "true";
    else
      v11 = "false";
    std::string::basic_string[abi:ne180100]<0>(&v50, v11);
    if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = &v50;
    else
      v12 = (std::string *)v50.__r_.__value_.__r.__words[0];
    if (v12->__r_.__value_.__s.__data_[0])
    {
      v7 = siri::dialogengine::WriteXmlAttribute(this, (const xmlChar *)"printOnly", (const xmlChar *)v12, v5);
      if ((*((_BYTE *)&v50.__r_.__value_.__s + 23) & 0x80) == 0)
        goto LABEL_50;
      goto LABEL_49;
    }
    v7 = 1;
    if ((*((_BYTE *)&v50.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_49:
      operator delete(v50.__r_.__value_.__l.__data_);
  }
LABEL_50:
  if (*((_BYTE *)a2 + 547))
  {
    if (!v7)
      goto LABEL_73;
    if (*((_BYTE *)a2 + 546))
      v13 = "true";
    else
      v13 = "false";
    std::string::basic_string[abi:ne180100]<0>(&v50, v13);
    v14 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
    if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = &v50;
    else
      v15 = (std::string *)v50.__r_.__value_.__r.__words[0];
    if (v15->__r_.__value_.__s.__data_[0])
    {
      v16 = siri::dialogengine::WriteXmlAttribute(this, (const xmlChar *)"spokenOnly", (const xmlChar *)v15, v5);
      v14 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
    }
    else
    {
      v16 = 1;
    }
    if (v14 < 0)
      operator delete(v50.__r_.__value_.__l.__data_);
    if (v16)
      goto LABEL_70;
LABEL_72:
    v7 = 0;
    goto LABEL_73;
  }
  if (!v7)
    goto LABEL_73;
LABEL_70:
  if (*((char *)a2 + 167) < 0)
    std::string::__init_copy_ctor_external(&v50, *((const std::string::value_type **)a2 + 18), *((_QWORD *)a2 + 19));
  else
    v50 = *(std::string *)((_BYTE *)a2 + 6);
  if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v29 = &v50;
  else
    v29 = (std::string *)v50.__r_.__value_.__r.__words[0];
  if (v29->__r_.__value_.__s.__data_[0])
  {
    v7 = siri::dialogengine::WriteXmlAttribute(this, (const xmlChar *)"case", (const xmlChar *)v29, v5);
    if ((*((_BYTE *)&v50.__r_.__value_.__s + 23) & 0x80) == 0)
      goto LABEL_142;
    goto LABEL_141;
  }
  v7 = 1;
  if ((*((_BYTE *)&v50.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_141:
    operator delete(v50.__r_.__value_.__l.__data_);
LABEL_142:
  if (v7)
  {
    if (*((char *)a2 + 575) < 0)
      std::string::__init_copy_ctor_external(&v50, *((const std::string::value_type **)a2 + 69), *((_QWORD *)a2 + 70));
    else
      v50 = *(std::string *)((_BYTE *)a2 + 23);
    v30 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
    if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v31 = &v50;
    else
      v31 = (std::string *)v50.__r_.__value_.__r.__words[0];
    if (v31->__r_.__value_.__s.__data_[0])
    {
      v7 = siri::dialogengine::WriteXmlAttribute(this, (const xmlChar *)"type", (const xmlChar *)v31, v5);
      v30 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
    }
    else
    {
      v7 = 1;
    }
    if (v30 < 0)
      operator delete(v50.__r_.__value_.__l.__data_);
    if (v7)
    {
      if (*((float *)a2 + 48) == 1.0)
        goto LABEL_167;
      siri::dialogengine::StringFromDouble((siri::dialogengine *)0xFFFFFFFFLL, (uint64_t)&v50);
      v32 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
      if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v33 = &v50;
      else
        v33 = (std::string *)v50.__r_.__value_.__r.__words[0];
      if (v33->__r_.__value_.__s.__data_[0])
      {
        v7 = siri::dialogengine::WriteXmlAttribute(this, (const xmlChar *)"weight", (const xmlChar *)v33, v5);
        v32 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
      }
      else
      {
        v7 = 1;
      }
      if (v32 < 0)
        operator delete(v50.__r_.__value_.__l.__data_);
      if (v7)
      {
LABEL_167:
        if (*((char *)a2 + 599) < 0)
          std::string::__init_copy_ctor_external(&v50, *((const std::string::value_type **)a2 + 72), *((_QWORD *)a2 + 73));
        else
          v50 = *(std::string *)((_BYTE *)a2 + 24);
        v34 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v35 = &v50;
        else
          v35 = (std::string *)v50.__r_.__value_.__r.__words[0];
        if (v35->__r_.__value_.__s.__data_[0])
        {
          v7 = siri::dialogengine::WriteXmlAttribute(this, (const xmlChar *)"keywords", (const xmlChar *)v35, v5);
          v34 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
        }
        else
        {
          v7 = 1;
        }
        if (v34 < 0)
          operator delete(v50.__r_.__value_.__l.__data_);
      }
    }
  }
LABEL_73:
  siri::dialogengine::SpeakableString::SpeakableString(&v50, (_xmlTextWriter *)((char *)a2 + 208));
  siri::dialogengine::SpeakableString::SpeakableString(&v36, (_xmlTextWriter *)((char *)a2 + 376));
  if (siri::dialogengine::SpeakableString::operator==((unsigned __int8 *)&v36, (unsigned __int8 *)&v50))
  {
    if (!v7)
      goto LABEL_105;
    started = siri::dialogengine::_WriteSpeakableString(this, (_xmlTextWriter *)&v50, v17);
  }
  else
  {
    v19 = v53;
    if ((v53 & 0x80u) != 0)
      v19 = v52;
    if (v19)
    {
      v20 = 0;
    }
    else
    {
      size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
      if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v50.__r_.__value_.__l.__size_;
      v20 = size == 0;
    }
    started = v20 && v7;
    if (!v20 && v7)
    {
      started = siri::dialogengine::StartXmlElement(this, (const xmlChar *)"full", (const char *)v17);
      if (started)
      {
        started = siri::dialogengine::_WriteSpeakableString(this, (_xmlTextWriter *)&v50, v17);
        if (started)
        {
          if (xmlTextWriterEndElement(this) == -1)
          {
            siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Error ending element.", v22);
            started = 0;
          }
          else
          {
            started = 1;
          }
        }
      }
    }
    v23 = v39;
    if ((v39 & 0x80u) != 0)
      v23 = v38;
    if (v23)
      goto LABEL_180;
    v24 = HIBYTE(v36.__r_.__value_.__r.__words[2]);
    if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v24 = v36.__r_.__value_.__l.__size_;
    if (v24)
    {
LABEL_180:
      if (!started
        || !siri::dialogengine::StartXmlElement(this, (const xmlChar *)"supporting", (const char *)v17)
        || !siri::dialogengine::_WriteSpeakableString(this, (_xmlTextWriter *)&v36, v25))
      {
        goto LABEL_105;
      }
      if (xmlTextWriterEndElement(this) == -1)
        goto LABEL_104;
      goto LABEL_102;
    }
  }
  if (started)
  {
LABEL_102:
    if (xmlTextWriterEndElement(this) != -1)
    {
      v27 = 1;
      goto LABEL_106;
    }
LABEL_104:
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Error ending element.", v26);
  }
LABEL_105:
  v27 = 0;
LABEL_106:
  if (v49 < 0)
    operator delete(__p);
  if (v47 < 0)
    operator delete(v46);
  if (v45 < 0)
    operator delete(v44);
  if (v43 < 0)
    operator delete(v42);
  if (v41 < 0)
    operator delete(v40);
  if ((char)v39 < 0)
    operator delete(v37);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (v63 < 0)
    operator delete(v62);
  if (v61 < 0)
    operator delete(v60);
  if (v59 < 0)
    operator delete(v58);
  if (v57 < 0)
    operator delete(v56);
  if (v55 < 0)
    operator delete(v54);
  if ((char)v53 < 0)
    operator delete(v51);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  return v27;
}

void sub_1BF99120C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::_WriteSpeakableString(siri::dialogengine *this, _xmlTextWriter *a2, const siri::dialogengine::SpeakableString *a3)
{
  const char *v5;
  std::string *p_p;
  uint64_t v7;
  std::string::size_type size;
  std::string *v9;
  int v10;
  const char *v11;
  unsigned int v12;
  _OWORD *v13;
  std::string::size_type v14;
  std::string *v15;
  int v16;
  const char *v17;
  std::string __p;

  if (siri::dialogengine::SpeakableString::SpeakEqualsPrint(a2))
  {
    if (*((char *)a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    else
      __p = *(std::string *)a2;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v7 = xmlTextWriterWriteRaw(this, (const xmlChar *)p_p) != -1;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return v7;
  }
  if (*((char *)a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  else
    __p = *(std::string *)a2;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __p.__r_.__value_.__l.__size_;
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!size)
    {
LABEL_28:
      v12 = 1;
      goto LABEL_31;
    }
  }
  else if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
  {
    goto LABEL_28;
  }
  if (siri::dialogengine::StartXmlElement(this, (const xmlChar *)"print", v5))
  {
    if (*((char *)a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    else
      __p = *(std::string *)a2;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = &__p;
    else
      v9 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v10 = xmlTextWriterWriteRaw(this, (const xmlChar *)v9);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v10 != -1)
    {
      if (xmlTextWriterEndElement(this) != -1)
        goto LABEL_28;
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Error ending element.", v11);
    }
  }
  v12 = 0;
LABEL_31:
  v13 = (_OWORD *)((char *)a2 + 24);
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v13;
    __p.__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    v14 = __p.__r_.__value_.__l.__size_;
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v14)
      v7 = 0;
    else
      v7 = v12;
    if (!v14)
      return v7;
  }
  else
  {
    if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
      v7 = 0;
    else
      v7 = v12;
    if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
      return v7;
  }
  if (((v12 ^ 1) & 1) == 0)
  {
    if (siri::dialogengine::StartXmlElement(this, (const xmlChar *)"speak", v5))
    {
      if (*((char *)a2 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
      }
      else
      {
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v13;
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v15 = &__p;
      else
        v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
      v16 = xmlTextWriterWriteRaw(this, (const xmlChar *)v15);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v16 != -1)
      {
        if (xmlTextWriterEndElement(this) != -1)
          return 1;
        siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Error ending element.", v17);
      }
    }
    return 0;
  }
  return v7;
}

void sub_1BF9914EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double YAML::Scanner::Scanner(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  double result;

  v2 = YAML::Stream::Stream(a1, a2);
  *(_DWORD *)(v2 + 144) = 0;
  result = 0.0;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 248) = 0u;
  *(_QWORD *)(v2 + 312) = 0;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_OWORD *)(v2 + 280) = 0u;
  *(_OWORD *)(v2 + 296) = 0u;
  return result;
}

{
  uint64_t v2;
  double result;

  v2 = YAML::Stream::Stream(a1, a2);
  *(_DWORD *)(v2 + 144) = 0;
  result = 0.0;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 248) = 0u;
  *(_QWORD *)(v2 + 312) = 0;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_OWORD *)(v2 + 280) = 0u;
  *(_OWORD *)(v2 + 296) = 0u;
  return result;
}

void YAML::Scanner::~Scanner(YAML::Scanner *this)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  void **v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void **v25;
  void **v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void **v34;
  void **v35;
  unint64_t v36;
  void **v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;

  v2 = (void **)*((_QWORD *)this + 35);
  v3 = (void **)*((_QWORD *)this + 36);
  *((_QWORD *)this + 39) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)*((_QWORD *)this + 36);
      v2 = (void **)(*((_QWORD *)this + 35) + 8);
      *((_QWORD *)this + 35) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 512;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 1024;
LABEL_7:
    *((_QWORD *)this + 38) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *((_QWORD *)this + 35);
    v8 = *((_QWORD *)this + 36);
    if (v8 != v9)
      *((_QWORD *)this + 36) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  v10 = (void *)*((_QWORD *)this + 34);
  if (v10)
    operator delete(v10);
  v11 = (_QWORD *)*((_QWORD *)this + 31);
  if (v11)
  {
    v12 = (_QWORD *)*((_QWORD *)this + 32);
    v13 = (void *)*((_QWORD *)this + 31);
    if (v12 != v11)
    {
      do
      {
        v15 = *--v12;
        v14 = v15;
        *v12 = 0;
        if (v15)
          MEMORY[0x1C3B8D890](v14, 0x1020C406E52F545);
      }
      while (v12 != v11);
      v13 = (void *)*((_QWORD *)this + 31);
    }
    *((_QWORD *)this + 32) = v11;
    operator delete(v13);
  }
  v16 = (void **)*((_QWORD *)this + 26);
  v17 = (void **)*((_QWORD *)this + 27);
  *((_QWORD *)this + 30) = 0;
  v18 = (char *)v17 - (char *)v16;
  if ((unint64_t)((char *)v17 - (char *)v16) >= 0x11)
  {
    do
    {
      operator delete(*v16);
      v17 = (void **)*((_QWORD *)this + 27);
      v16 = (void **)(*((_QWORD *)this + 26) + 8);
      *((_QWORD *)this + 26) = v16;
      v18 = (char *)v17 - (char *)v16;
    }
    while ((unint64_t)((char *)v17 - (char *)v16) > 0x10);
  }
  v19 = v18 >> 3;
  if (v19 == 1)
  {
    v20 = 256;
    goto LABEL_27;
  }
  if (v19 == 2)
  {
    v20 = 512;
LABEL_27:
    *((_QWORD *)this + 29) = v20;
  }
  if (v16 != v17)
  {
    do
    {
      v21 = *v16++;
      operator delete(v21);
    }
    while (v16 != v17);
    v23 = *((_QWORD *)this + 26);
    v22 = *((_QWORD *)this + 27);
    if (v22 != v23)
      *((_QWORD *)this + 27) = v22 + ((v23 - v22 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  v24 = (void *)*((_QWORD *)this + 25);
  if (v24)
    operator delete(v24);
  v25 = (void **)*((_QWORD *)this + 20);
  v26 = (void **)*((_QWORD *)this + 21);
  *((_QWORD *)this + 24) = 0;
  v27 = (char *)v26 - (char *)v25;
  if ((unint64_t)((char *)v26 - (char *)v25) >= 0x11)
  {
    do
    {
      operator delete(*v25);
      v26 = (void **)*((_QWORD *)this + 21);
      v25 = (void **)(*((_QWORD *)this + 20) + 8);
      *((_QWORD *)this + 20) = v25;
      v27 = (char *)v26 - (char *)v25;
    }
    while ((unint64_t)((char *)v26 - (char *)v25) > 0x10);
  }
  v28 = v27 >> 3;
  if (v28 == 1)
  {
    v29 = 42;
    goto LABEL_40;
  }
  if (v28 == 2)
  {
    v29 = 85;
LABEL_40:
    *((_QWORD *)this + 23) = v29;
  }
  if (v25 != v26)
  {
    do
    {
      v30 = *v25++;
      operator delete(v30);
    }
    while (v25 != v26);
    v32 = *((_QWORD *)this + 20);
    v31 = *((_QWORD *)this + 21);
    if (v31 != v32)
      *((_QWORD *)this + 21) = v31 + ((v32 - v31 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  v33 = (void *)*((_QWORD *)this + 19);
  if (v33)
    operator delete(v33);
  v34 = (void **)*((_QWORD *)this + 13);
  v35 = (void **)*((_QWORD *)this + 14);
  if (v35 == v34)
  {
    v35 = (void **)*((_QWORD *)this + 13);
  }
  else
  {
    v36 = *((_QWORD *)this + 16);
    v37 = &v34[v36 / 0x33];
    v38 = (uint64_t)*v37 + 80 * (v36 % 0x33);
    v39 = (unint64_t)v34[(*((_QWORD *)this + 17) + v36) / 0x33] + 80 * ((*((_QWORD *)this + 17) + v36) % 0x33);
    if (v38 != v39)
    {
      do
      {
        std::allocator<YAML::Token>::destroy[abi:ne180100](v38);
        v38 += 80;
        if (v38 - (_QWORD)*v37 == 4080)
        {
          v40 = (uint64_t)v37[1];
          ++v37;
          v38 = v40;
        }
      }
      while (v38 != v39);
      v34 = (void **)*((_QWORD *)this + 13);
      v35 = (void **)*((_QWORD *)this + 14);
    }
  }
  *((_QWORD *)this + 17) = 0;
  v41 = (char *)v35 - (char *)v34;
  if ((unint64_t)((char *)v35 - (char *)v34) >= 0x11)
  {
    do
    {
      operator delete(*v34);
      v35 = (void **)*((_QWORD *)this + 14);
      v34 = (void **)(*((_QWORD *)this + 13) + 8);
      *((_QWORD *)this + 13) = v34;
      v41 = (char *)v35 - (char *)v34;
    }
    while ((unint64_t)((char *)v35 - (char *)v34) > 0x10);
  }
  v42 = v41 >> 3;
  if (v42 == 1)
  {
    v43 = 25;
    goto LABEL_60;
  }
  if (v42 == 2)
  {
    v43 = 51;
LABEL_60:
    *((_QWORD *)this + 16) = v43;
  }
  if (v34 != v35)
  {
    do
    {
      v44 = *v34++;
      operator delete(v44);
    }
    while (v34 != v35);
    v46 = *((_QWORD *)this + 13);
    v45 = *((_QWORD *)this + 14);
    if (v45 != v46)
      *((_QWORD *)this + 14) = v45 + ((v46 - v45 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  v47 = (void *)*((_QWORD *)this + 12);
  if (v47)
    operator delete(v47);
  YAML::Stream::~Stream(this);
}

void std::allocator<YAML::Token>::destroy[abi:ne180100](uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

BOOL YAML::Scanner::empty(YAML::Scanner *this)
{
  YAML::Scanner::EnsureTokensInQueue(this);
  return *((_QWORD *)this + 17) == 0;
}

void YAML::Scanner::EnsureTokensInQueue(YAML::Scanner *this)
{
  char *v2;
  int v3;

  v2 = (char *)this + 96;
  while (1)
  {
    while (1)
    {
      if (!*((_QWORD *)this + 17))
        goto LABEL_5;
      v3 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 13) + 8 * (*((_QWORD *)this + 16) / 0x33uLL))
                     + 80 * (*((_QWORD *)this + 16) % 0x33uLL));
      if (v3 != 1)
        break;
      std::deque<YAML::Token>::pop_front((uint64_t)v2);
    }
    if (!v3)
      return;
LABEL_5:
    if (*((_BYTE *)this + 145))
      break;
    YAML::Scanner::ScanNextToken(this);
  }
}

void std::deque<YAML::Token>::pop_front(uint64_t a1)
{
  int64x2_t v2;

  std::allocator<YAML::Token>::destroy[abi:ne180100](*(_QWORD *)(*(_QWORD *)(a1 + 8)
                                                               + 8 * (*(_QWORD *)(a1 + 32) / 0x33uLL)) + 80 * (*(_QWORD *)(a1 + 32) % 0x33uLL));
  v2 = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_1BFCB1AF0);
  *(int64x2_t *)(a1 + 32) = v2;
  if (v2.i64[0] >= 0x66uLL)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 51;
  }
}

void YAML::Scanner::ScanNextToken(YAML::Scanner *this)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  void *v5;
  int *ValueRegex;
  uint64_t v7;
  int v8;
  _BOOL4 v9;
  void *v10;
  uint64_t v11;
  int v12;
  int v13;
  _QWORD *exception;
  int v15;
  __int128 v16;
  uint64_t v17;
  int v18;

  if (!*((_BYTE *)this + 145))
  {
    if (!*((_BYTE *)this + 144))
    {
      YAML::Scanner::StartStream(this);
      return;
    }
    YAML::Scanner::ScanToNextToken(this);
    YAML::Scanner::PopIndentToHere(this);
    if (*(_DWORD *)(*(_QWORD *)this + *(_QWORD *)(**(_QWORD **)this - 24) + 32)
      && (!*((_QWORD *)this + 8)
       || *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 4) + ((*((_QWORD *)this + 7) >> 9) & 0x7FFFFFFFFFFFF8))
                   + (*((_QWORD *)this + 7) & 0xFFFLL)) == 4))
    {
      YAML::Scanner::EndStream(this);
      return;
    }
    if (!*((_DWORD *)this + 4))
    {
      if (*((_QWORD *)this + 8)
        && *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 4) + ((*((_QWORD *)this + 7) >> 9) & 0x7FFFFFFFFFFFF8))
                    + (*((_QWORD *)this + 7) & 0xFFFLL)) == 37)
      {
        YAML::Scanner::ScanDirective(this);
        return;
      }
      YAML::Exp::DocStart((YAML::Exp *)v2);
      *(_QWORD *)&v16 = 0;
      *((_QWORD *)&v16 + 1) = this;
      v2 = YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)YAML::Exp::DocStart(void)::e, (unint64_t *)&v16);
      if ((v2 & 0x80000000) == 0)
      {
        YAML::Scanner::ScanDocStart(this);
        return;
      }
      if (!*((_DWORD *)this + 4))
      {
        YAML::Exp::DocEnd((YAML::Exp *)v2);
        *(_QWORD *)&v16 = 0;
        *((_QWORD *)&v16 + 1) = this;
        v2 = YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)YAML::Exp::DocEnd(void)::e, (unint64_t *)&v16);
        if ((v2 & 0x80000000) == 0)
        {
          YAML::Scanner::ScanDocEnd(this);
          return;
        }
      }
    }
    if (*((_QWORD *)this + 8))
    {
      v3 = *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 4) + ((*((_QWORD *)this + 7) >> 9) & 0x7FFFFFFFFFFFF8))
                              + (*((_QWORD *)this + 7) & 0xFFFLL));
      if (v3 <= 0x5C)
      {
        if (v3 == 44)
        {
          YAML::Scanner::ScanFlowEntry(this);
          return;
        }
        if (v3 == 91)
          goto LABEL_14;
      }
      else
      {
        if (v3 == 93 || v3 == 125)
        {
          YAML::Scanner::ScanFlowEnd(this);
          return;
        }
        if (v3 == 123)
        {
LABEL_14:
          YAML::Scanner::ScanFlowStart(this);
          return;
        }
      }
    }
    YAML::Exp::BlockEntry((YAML::Exp *)v2);
    *(_QWORD *)&v16 = 0;
    *((_QWORD *)&v16 + 1) = this;
    v4 = YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)&YAML::Exp::BlockEntry(void)::e, (unint64_t *)&v16);
    if ((v4 & 0x80000000) == 0)
    {
      YAML::Scanner::ScanBlockEntry(this);
      return;
    }
    if (*((_QWORD *)this + 39))
    {
      YAML::Exp::KeyInFlow((YAML::Exp *)v4);
      v5 = &YAML::Exp::KeyInFlow(void)::e;
    }
    else
    {
      YAML::Exp::Key((YAML::Exp *)v4);
      v5 = &YAML::Exp::Key(void)::e;
    }
    *(_QWORD *)&v16 = 0;
    *((_QWORD *)&v16 + 1) = this;
    if ((YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)v5, (unint64_t *)&v16) & 0x80000000) == 0)
    {
      YAML::Scanner::ScanKey(this);
      return;
    }
    ValueRegex = YAML::Scanner::GetValueRegex(this);
    *(_QWORD *)&v16 = 0;
    *((_QWORD *)&v16 + 1) = this;
    v7 = YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)ValueRegex, (unint64_t *)&v16);
    if ((v7 & 0x80000000) == 0)
    {
      YAML::Scanner::ScanValue(this);
      return;
    }
    if (*((_QWORD *)this + 8))
    {
      v8 = *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 4) + ((*((_QWORD *)this + 7) >> 9) & 0x7FFFFFFFFFFFF8))
                              + (*((_QWORD *)this + 7) & 0xFFFLL));
      if (v8 == 33)
      {
        YAML::Scanner::ScanTag(this);
        return;
      }
      if (v8 == 42 || v8 == 38)
      {
        YAML::Scanner::ScanAnchorOrAlias((void **)this);
        return;
      }
      v11 = *((_QWORD *)this + 39);
      v9 = v11 == 0;
      if (!v11)
      {
        v13 = *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 4)
                                             + ((*((_QWORD *)this + 7) >> 9) & 0x7FFFFFFFFFFFF8))
                                 + (*((_QWORD *)this + 7) & 0xFFFLL));
        if (v13 == 124 || v13 == 62)
        {
          YAML::Scanner::ScanBlockScalar(this);
          return;
        }
      }
      v12 = *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 4) + ((*((_QWORD *)this + 7) >> 9) & 0x7FFFFFFFFFFFF8))
                               + (*((_QWORD *)this + 7) & 0xFFFLL));
      if (v12 == 39 || v12 == 34)
      {
        YAML::Scanner::ScanQuotedScalar(this);
        return;
      }
    }
    else
    {
      v9 = *((_QWORD *)this + 39) == 0;
    }
    if (v9)
    {
      YAML::Exp::PlainScalar((YAML::Exp *)v7);
      v10 = &YAML::Exp::PlainScalar(void)::e;
    }
    else
    {
      YAML::Exp::PlainScalarInFlow((YAML::Exp *)v7);
      v10 = &YAML::Exp::PlainScalarInFlow(void)::e;
    }
    *(_QWORD *)&v16 = 0;
    *((_QWORD *)&v16 + 1) = this;
    if ((YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)v10, (unint64_t *)&v16) & 0x80000000) != 0)
    {
      exception = __cxa_allocate_exception(0x38uLL);
      v15 = *((_DWORD *)this + 4);
      v17 = *((_QWORD *)this + 1);
      v18 = v15;
      std::string::basic_string[abi:ne180100]<0>(&v16, "unknown token");
      YAML::Exception::Exception((uint64_t)exception, &v17, &v16);
      *exception = &off_1E793AF28;
    }
    YAML::Scanner::ScanPlainScalar(this);
  }
}

void sub_1BF991EC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t YAML::Scanner::StartStream(YAML::Scanner *this)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  *((_BYTE *)this + 144) = 1;
  *((_BYTE *)this + 146) = 1;
  v2 = operator new();
  *(_QWORD *)v2 = 0x2FFFFFFFFLL;
  *(_DWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  v5 = v2;
  YAML::ptr_vector<YAML::Scanner::IndentMarker>::push_back((char **)this + 31, &v5);
  v4 = *(_QWORD *)(*((_QWORD *)this + 32) - 8);
  std::deque<YAML::Scanner::IndentMarker *>::push_back((_QWORD *)this + 25, &v4);
  result = v5;
  if (v5)
    JUMPOUT(0x1C3B8D890);
  return result;
}

void sub_1BF991FA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    MEMORY[0x1C3B8D890](a10, 0x1020C406E52F545);
  _Unwind_Resume(exception_object);
}

uint64_t YAML::Scanner::ScanToNextToken(YAML::Scanner *this)
{
  uint64_t v2;
  int v3;
  unsigned __int8 v5;
  unsigned __int8 v6;
  int v7;
  uint64_t v8;
  uint64_t result;
  int v10;
  int v11;
  unint64_t v12;
  _QWORD v13[3];
  void **v14[3];

  while (1)
  {
    while (1)
    {
      v2 = *((_QWORD *)this + 8);
      if (*(_DWORD *)(*(_QWORD *)this + *(_QWORD *)(**(_QWORD **)this - 24) + 32))
      {
        if (!v2
          || *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 4) + ((*((_QWORD *)this + 7) >> 9) & 0x7FFFFFFFFFFFF8))
                      + (*((_QWORD *)this + 7) & 0xFFFLL)) == 4)
        {
          break;
        }
      }
      else if (!v2)
      {
        break;
      }
      v3 = *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 4) + ((*((_QWORD *)this + 7) >> 9) & 0x7FFFFFFFFFFFF8))
                              + (*((_QWORD *)this + 7) & 0xFFFLL));
      if (v3 != 32 && v3 != 9)
        break;
      if (!*((_QWORD *)this + 39))
      {
        {
          YAML::Exp::Tab(void)::e = 1;
          word_1EF580A2C = 9;
          qword_1EF580A38 = 0;
          unk_1EF580A40 = 0;
          qword_1EF580A30 = 0;
          __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Tab(void)::e, &dword_1BF794000);
        }
        v12 = 0;
        v13[0] = this;
        if ((YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)&YAML::Exp::Tab(void)::e, &v12) & 0x80000000) == 0)
          *((_BYTE *)this + 146) = 0;
      }
      YAML::Stream::get(this);
    }
    {
      YAML::Exp::Comment(void)::e = 1;
      word_1EF580AEC = 35;
      qword_1EF580AF8 = 0;
      unk_1EF580B00 = 0;
      qword_1EF580AF0 = 0;
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Comment(void)::e, &dword_1BF794000);
    }
    LODWORD(v12) = YAML::Exp::Comment(void)::e;
    WORD2(v12) = word_1EF580AEC;
    memset(v13, 0, sizeof(v13));
    std::vector<YAML::RegEx>::__init_with_size[abi:ne180100]<YAML::RegEx*,YAML::RegEx*>(v13, (int *)qword_1EF580AF0, (int *)qword_1EF580AF8, (qword_1EF580AF8 - qword_1EF580AF0) >> 5);
    v14[0] = 0;
    v14[1] = (void **)this;
    v7 = YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)&v12, (unint64_t *)v14);
    v14[0] = (void **)v13;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](v14);
    if ((v7 & 0x80000000) == 0)
    {
      while (!*(_DWORD *)(*(_QWORD *)this + *(_QWORD *)(**(_QWORD **)this - 24) + 32)
           || *((_QWORD *)this + 8)
           && *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 4) + ((*((_QWORD *)this + 7) >> 9) & 0x7FFFFFFFFFFFF8))
                       + (*((_QWORD *)this + 7) & 0xFFFLL)) != 4)
      {
        YAML::Exp::Break((YAML::Exp *)v8);
        v12 = 0;
        v13[0] = this;
        v8 = YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)YAML::Exp::Break(void)::e, &v12);
        if ((v8 & 0x80000000) == 0)
          break;
        v8 = YAML::Stream::get(this);
      }
    }
    YAML::Exp::Break((YAML::Exp *)v8);
    v12 = 0;
    v13[0] = this;
    result = YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)YAML::Exp::Break(void)::e, &v12);
    if ((result & 0x80000000) != 0)
      return result;
    YAML::Exp::Break((YAML::Exp *)result);
    v12 = 0;
    v13[0] = this;
    v10 = YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)YAML::Exp::Break(void)::e, &v12);
    if (v10 >= 1)
    {
      v11 = v10;
      do
      {
        YAML::Stream::get(this);
        --v11;
      }
      while (v11);
    }
    YAML::Scanner::InvalidateSimpleKey(this);
    if (!*((_QWORD *)this + 39))
      *((_BYTE *)this + 146) = 1;
  }
}

void sub_1BF99229C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void YAML::Scanner::PopIndentToHere(YAML::Scanner *this)
{
  uint64_t v2;
  _DWORD *v3;
  int v4;
  unint64_t v5[2];

  if (!*((_QWORD *)this + 39))
  {
    v2 = *((_QWORD *)this + 30);
    if (v2)
    {
      while (1)
      {
        v3 = *(_DWORD **)(*(_QWORD *)(*((_QWORD *)this + 26)
                                    + (((unint64_t)(v2 + *((_QWORD *)this + 29) - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((v2 + *((_QWORD *)this + 29) - 1) & 0x1FF));
        v4 = *((_DWORD *)this + 4);
        if (*v3 < v4)
          goto LABEL_11;
        if (*v3 == v4)
        {
          if (v3[1] != 1)
            goto LABEL_11;
          YAML::Exp::BlockEntry(this);
          v5[0] = 0;
          v5[1] = (unint64_t)this;
          if ((YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)&YAML::Exp::BlockEntry(void)::e, v5) & 0x80000000) == 0)
            break;
        }
        YAML::Scanner::PopIndent(this);
        v2 = *((_QWORD *)this + 30);
        if (!v2)
          return;
      }
      while (1)
      {
        v2 = *((_QWORD *)this + 30);
        if (!v2)
          break;
LABEL_11:
        if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 26)
                                               + (((unint64_t)(v2 + *((_QWORD *)this + 29) - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                   + 8 * ((v2 + *((_QWORD *)this + 29) - 1) & 0x1FF))
                       + 8) != 1)
          return;
        YAML::Scanner::PopIndent(this);
      }
    }
  }
}

void YAML::Scanner::EndStream(YAML::Scanner *this)
{
  uint64_t i;

  if (*((int *)this + 4) >= 1)
    *((_DWORD *)this + 4) = 0;
  YAML::Scanner::PopAllIndents(this);
  for (i = *((_QWORD *)this + 24); i; i = *((_QWORD *)this + 24))
  {
    *((_QWORD *)this + 24) = i - 1;
    std::deque<YAML::Scanner::SimpleKey>::__maybe_remove_back_spare[abi:ne180100]((_QWORD *)this + 19);
  }
  *(_WORD *)((char *)this + 145) = 1;
}

void YAML::Exp::DocStart(YAML::Exp *this)
{
  unsigned __int8 v1;
  YAML::Exp *v2;
  int v3;
  __int16 v4;
  _QWORD v5[3];
  void **v6;
  uint64_t v7;
  void *__p[2];
  char v9;
  int v10;
  uint64_t v11;
  void **v12;

  {
    std::string::basic_string[abi:ne180100]<0>(__p, "---");
    v2 = (YAML::Exp *)YAML::RegEx::RegEx((uint64_t)&v10, (char *)__p, 6);
    YAML::Exp::BlankOrBreak(v2);
    v3 = 0;
    v4 = 0;
    memset(v5, 0, sizeof(v5));
    YAML::operator|(YAML::Exp::BlankOrBreak(void)::e, &v3, (uint64_t)&v6);
    YAML::operator+(&v10, (int *)&v6, (uint64_t)&YAML::Exp::DocStart(void)::e);
    v12 = (void **)&v7;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v12);
    v12 = (void **)v5;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v12);
    v6 = (void **)&v11;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v6);
    if (v9 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::DocStart(void)::e, &dword_1BF794000);
  }
}

void sub_1BF992520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)(v24 - 40) = v23 + 8;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 40));
  *(_QWORD *)(v24 - 40) = v22;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 40));
  a13 = v24 - 64;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t YAML::RegEx::Match<YAML::StreamCharSource>(uint64_t a1, unint64_t *a2)
{
  YAML::Stream *v4;
  unint64_t v5;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  _QWORD v26[2];

  v5 = *a2;
  v4 = (YAML::Stream *)a2[1];
  if (*((_QWORD *)v4 + 8) > v5 || YAML::Stream::_ReadAheadTo(v4, v5))
  {
    switch(*(_DWORD *)a1)
    {
      case 0:
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2[1] + 32)
                                  + (((*(_QWORD *)(a2[1] + 56) + *a2) >> 9) & 0x7FFFFFFFFFFFF8))
                      + ((*(_QWORD *)(a2[1] + 56) + *a2) & 0xFFF)) == 4)
          return 0;
        else
          return 0xFFFFFFFFLL;
      case 1:
        if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2[1] + 32)
                                            + (((*(_QWORD *)(a2[1] + 56) + *a2) >> 9) & 0x7FFFFFFFFFFFF8))
                                + ((*(_QWORD *)(a2[1] + 56) + *a2) & 0xFFF)) == *(unsigned __int8 *)(a1 + 4))
          return 1;
        else
          return 0xFFFFFFFFLL;
      case 2:
        v8 = *(char *)(*(_QWORD *)(*(_QWORD *)(a2[1] + 32)
                                 + (((*(_QWORD *)(a2[1] + 56) + *a2) >> 9) & 0x7FFFFFFFFFFFF8))
                     + ((*(_QWORD *)(a2[1] + 56) + *a2) & 0xFFF));
        v7 = 0xFFFFFFFFLL;
        if (*(char *)(a1 + 4) <= v8)
        {
          if (*(char *)(a1 + 5) < v8)
            return 0xFFFFFFFFLL;
          else
            return 1;
        }
        return v7;
      case 3:
        v9 = *(_QWORD *)(a1 + 8);
        if (*(_QWORD *)(a1 + 16) == v9)
          return 0xFFFFFFFFLL;
        v10 = 0;
        v11 = 0;
        while (1)
        {
          v12 = YAML::RegEx::MatchUnchecked<YAML::StreamCharSource>(v9 + v10, a2);
          if ((v12 & 0x80000000) == 0)
            break;
          ++v11;
          v9 = *(_QWORD *)(a1 + 8);
          v10 += 32;
          v7 = 0xFFFFFFFFLL;
          if (v11 >= (*(_QWORD *)(a1 + 16) - v9) >> 5)
            return v7;
        }
        return v12;
      case 4:
        v13 = *(_QWORD *)(a1 + 8);
        if (*(_QWORD *)(a1 + 16) == v13)
          return 0xFFFFFFFFLL;
        v14 = 0;
        v15 = 0;
        LODWORD(v7) = -1;
        break;
      case 5:
        v17 = *(_QWORD *)(a1 + 8);
        v7 = 0xFFFFFFFFLL;
        if (v17 != *(_QWORD *)(a1 + 16))
        {
          if ((int)YAML::RegEx::MatchUnchecked<YAML::StreamCharSource>(v17, a2) >= 0)
            return 0xFFFFFFFFLL;
          else
            return 1;
        }
        return v7;
      case 6:
        v18 = *(_QWORD *)(a1 + 8);
        if (*(_QWORD *)(a1 + 16) == v18)
          return 0;
        v19 = 0;
        LODWORD(v7) = 0;
        v20 = 0;
        while (1)
        {
          v21 = v18 + v19;
          v22 = a2[1];
          v23 = *a2 + (int)v7;
          if ((int)(v7 + *a2) < 0 != __OFADD__((_DWORD)v7, *a2))
            v23 = 0;
          v26[0] = v23;
          v26[1] = v22;
          v24 = YAML::RegEx::Match<YAML::StreamCharSource>(v21, v26);
          if (v24 == -1)
            break;
          v7 = (v24 + v7);
          ++v20;
          v18 = *(_QWORD *)(a1 + 8);
          v19 += 32;
          if (v20 >= (*(_QWORD *)(a1 + 16) - v18) >> 5)
            return v7;
        }
        return 0xFFFFFFFFLL;
      default:
        return 0xFFFFFFFFLL;
    }
    while (1)
    {
      v16 = YAML::RegEx::MatchUnchecked<YAML::StreamCharSource>(v13 + v14, a2);
      if (v16 == -1)
        break;
      if (v15)
        v7 = v7;
      else
        v7 = v16;
      ++v15;
      v13 = *(_QWORD *)(a1 + 8);
      v14 += 32;
      if (v15 >= (*(_QWORD *)(a1 + 16) - v13) >> 5)
        return v7;
    }
  }
  return 0xFFFFFFFFLL;
}

void YAML::Exp::DocEnd(YAML::Exp *this)
{
  unsigned __int8 v1;
  YAML::Exp *v2;
  int v3;
  __int16 v4;
  _QWORD v5[3];
  void **v6;
  uint64_t v7;
  void *__p[2];
  char v9;
  int v10;
  uint64_t v11;
  void **v12;

  {
    std::string::basic_string[abi:ne180100]<0>(__p, "...");
    v2 = (YAML::Exp *)YAML::RegEx::RegEx((uint64_t)&v10, (char *)__p, 6);
    YAML::Exp::BlankOrBreak(v2);
    v3 = 0;
    v4 = 0;
    memset(v5, 0, sizeof(v5));
    YAML::operator|(YAML::Exp::BlankOrBreak(void)::e, &v3, (uint64_t)&v6);
    YAML::operator+(&v10, (int *)&v6, (uint64_t)&YAML::Exp::DocEnd(void)::e);
    v12 = (void **)&v7;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v12);
    v12 = (void **)v5;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v12);
    v6 = (void **)&v11;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v6);
    if (v9 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::DocEnd(void)::e, &dword_1BF794000);
  }
}

void sub_1BF992904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)(v24 - 40) = v23 + 8;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 40));
  *(_QWORD *)(v24 - 40) = v22;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 40));
  a13 = v24 - 64;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void YAML::Exp::BlockEntry(YAML::Exp *this)
{
  unsigned __int8 v1;
  YAML::Exp *v2;
  int v3;
  __int16 v4;
  _QWORD v5[3];
  void **v6;
  uint64_t v7;
  int v8;
  __int16 v9;
  _QWORD v10[3];
  void **v11;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      v8 = 1;
      v9 = 45;
      memset(v10, 0, sizeof(v10));
      YAML::Exp::BlankOrBreak(v2);
      v3 = 0;
      v4 = 0;
      memset(v5, 0, sizeof(v5));
      YAML::operator|(YAML::Exp::BlankOrBreak(void)::e, &v3, (uint64_t)&v6);
      YAML::operator+(&v8, (int *)&v6, (uint64_t)&YAML::Exp::BlockEntry(void)::e);
      v11 = (void **)&v7;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v11);
      v11 = (void **)v5;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v11);
      v6 = (void **)v10;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v6);
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::BlockEntry(void)::e, &dword_1BF794000);
    }
  }
}

void sub_1BF992A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va;

  va_start(va, a6);
  *(_QWORD *)(v8 - 40) = v7 + 8;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v8 - 40));
  *(_QWORD *)(v8 - 40) = v6;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v8 - 40));
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void YAML::Exp::Key(YAML::Exp *this)
{
  unsigned __int8 v1;
  YAML::Exp *v2;
  int v3;
  __int16 v4;
  _QWORD v5[3];
  void **v6;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      v3 = 1;
      v4 = 63;
      memset(v5, 0, sizeof(v5));
      YAML::Exp::BlankOrBreak(v2);
      YAML::operator+(&v3, YAML::Exp::BlankOrBreak(void)::e, (uint64_t)&YAML::Exp::Key(void)::e);
      v6 = (void **)v5;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v6);
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Key(void)::e, &dword_1BF794000);
    }
  }
}

void sub_1BF992B84(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 24) = v1;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 24));
  _Unwind_Resume(a1);
}

void YAML::Exp::KeyInFlow(YAML::Exp *this)
{
  unsigned __int8 v1;
  YAML::Exp *v2;
  int v3;
  __int16 v4;
  _QWORD v5[3];
  void **v6;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      v3 = 1;
      v4 = 63;
      memset(v5, 0, sizeof(v5));
      YAML::Exp::BlankOrBreak(v2);
      YAML::operator+(&v3, YAML::Exp::BlankOrBreak(void)::e, (uint64_t)&YAML::Exp::KeyInFlow(void)::e);
      v6 = (void **)v5;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v6);
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::KeyInFlow(void)::e, &dword_1BF794000);
    }
  }
}

void sub_1BF992C5C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 24) = v1;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 24));
  _Unwind_Resume(a1);
}

int *YAML::Scanner::GetValueRegex(YAML::Scanner *this)
{
  unsigned __int8 v1;
  int *v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  __guard *v6;
  YAML::Exp *v7;
  YAML::Exp *v8;
  void *__p[2];
  char v10;
  int v11;
  __int16 v12;
  _QWORD v13[3];
  void **v14;
  _BYTE v15[24];
  int v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;

  if (!*((_QWORD *)this + 39))
  {
    if ((v3 & 1) != 0)
      return (int *)&YAML::Exp::Value(void)::e;
    if (!(_DWORD)v7)
      return (int *)&YAML::Exp::Value(void)::e;
    v16 = 1;
    v17 = 58;
    v19 = 0;
    v20 = 0;
    v18 = 0;
    YAML::Exp::BlankOrBreak(v7);
    v11 = 0;
    v12 = 0;
    memset(v13, 0, sizeof(v13));
    YAML::operator|(YAML::Exp::BlankOrBreak(void)::e, &v11, (uint64_t)&v14);
    YAML::operator+(&v16, (int *)&v14, (uint64_t)&YAML::Exp::Value(void)::e);
    __p[0] = v15;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    __p[0] = v13;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    v14 = (void **)&v18;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v14);
    v2 = (int *)&YAML::Exp::Value(void)::e;
    __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Value(void)::e, &dword_1BF794000);
LABEL_18:
    __cxa_guard_release(v6);
    return v2;
  }
  if (!*((_BYTE *)this + 147))
  {
    if ((v4 & 1) != 0)
      return (int *)&YAML::Exp::ValueInFlow(void)::e;
    if (!(_DWORD)v8)
      return (int *)&YAML::Exp::ValueInFlow(void)::e;
    v16 = 1;
    v17 = 58;
    v19 = 0;
    v20 = 0;
    v18 = 0;
    YAML::Exp::BlankOrBreak(v8);
    std::string::basic_string[abi:ne180100]<0>(__p, ",}");
    YAML::RegEx::RegEx((uint64_t)&v11, (char *)__p, 3);
    YAML::operator|(YAML::Exp::BlankOrBreak(void)::e, &v11, (uint64_t)&v14);
    YAML::operator+(&v16, (int *)&v14, (uint64_t)&YAML::Exp::ValueInFlow(void)::e);
    v21 = (void **)v15;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v21);
    v21 = (void **)v13;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v21);
    if (v10 < 0)
      operator delete(__p[0]);
    v14 = (void **)&v18;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v14);
    v2 = (int *)&YAML::Exp::ValueInFlow(void)::e;
    __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::ValueInFlow(void)::e, &dword_1BF794000);
    goto LABEL_18;
  }
  if ((v1 & 1) == 0)
  {
    v2 = &YAML::Exp::ValueInJSONFlow(void)::e;
      return v2;
    YAML::Exp::ValueInJSONFlow(void)::e = 1;
    word_1EF581D7C = 58;
    qword_1EF581D88 = 0;
    unk_1EF581D90 = 0;
    qword_1EF581D80 = 0;
    __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::ValueInJSONFlow(void)::e, &dword_1BF794000);
    goto LABEL_18;
  }
  return &YAML::Exp::ValueInJSONFlow(void)::e;
}

void sub_1BF992F1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v20 - 40) = v19 + 8;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v20 - 40));
  *(_QWORD *)(v20 - 40) = &a16;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v20 - 40));
  if (a14 < 0)
    operator delete(__p);
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  _Unwind_Resume(a1);
}

uint64_t YAML::RegEx::MatchUnchecked<YAML::StreamCharSource>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _QWORD v23[2];

  switch(*(_DWORD *)a1)
  {
    case 0:
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2[1] + 32)
                                + (((*(_QWORD *)(a2[1] + 56) + *a2) >> 9) & 0x7FFFFFFFFFFFF8))
                    + ((*(_QWORD *)(a2[1] + 56) + *a2) & 0xFFFLL)) == 4)
        v4 = 0;
      else
        v4 = 0xFFFFFFFFLL;
      break;
    case 1:
      if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2[1] + 32)
                                          + (((*(_QWORD *)(a2[1] + 56) + *a2) >> 9) & 0x7FFFFFFFFFFFF8))
                              + ((*(_QWORD *)(a2[1] + 56) + *a2) & 0xFFFLL)) == *(unsigned __int8 *)(a1 + 4))
        v4 = 1;
      else
        v4 = 0xFFFFFFFFLL;
      break;
    case 2:
      v5 = *(char *)(*(_QWORD *)(*(_QWORD *)(a2[1] + 32)
                               + (((*(_QWORD *)(a2[1] + 56) + *a2) >> 9) & 0x7FFFFFFFFFFFF8))
                   + ((*(_QWORD *)(a2[1] + 56) + *a2) & 0xFFFLL));
      v4 = 0xFFFFFFFFLL;
      if (*(char *)(a1 + 4) <= v5)
      {
        if (*(char *)(a1 + 5) < v5)
          v4 = 0xFFFFFFFFLL;
        else
          v4 = 1;
      }
      break;
    case 3:
      v6 = *(_QWORD *)(a1 + 8);
      if (*(_QWORD *)(a1 + 16) == v6)
        goto LABEL_37;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = YAML::RegEx::MatchUnchecked<YAML::StreamCharSource>(v6 + v7, a2);
        if ((v9 & 0x80000000) == 0)
          break;
        ++v8;
        v6 = *(_QWORD *)(a1 + 8);
        v7 += 32;
        if (v8 >= (*(_QWORD *)(a1 + 16) - v6) >> 5)
          goto LABEL_37;
      }
      v4 = v9;
      break;
    case 4:
      v10 = *(_QWORD *)(a1 + 8);
      if (*(_QWORD *)(a1 + 16) == v10)
        goto LABEL_37;
      v11 = 0;
      v12 = 0;
      LODWORD(v4) = -1;
      do
      {
        v13 = YAML::RegEx::MatchUnchecked<YAML::StreamCharSource>(v10 + v11, a2);
        if (v13 == -1)
          goto LABEL_37;
        if (v12)
          v4 = v4;
        else
          v4 = v13;
        ++v12;
        v10 = *(_QWORD *)(a1 + 8);
        v11 += 32;
      }
      while (v12 < (*(_QWORD *)(a1 + 16) - v10) >> 5);
      break;
    case 5:
      v14 = *(_QWORD *)(a1 + 8);
      v4 = 0xFFFFFFFFLL;
      if (v14 != *(_QWORD *)(a1 + 16))
      {
        if ((int)YAML::RegEx::MatchUnchecked<YAML::StreamCharSource>(v14, a2) >= 0)
          v4 = 0xFFFFFFFFLL;
        else
          v4 = 1;
      }
      break;
    case 6:
      v15 = *(_QWORD *)(a1 + 8);
      if (*(_QWORD *)(a1 + 16) == v15)
      {
        v4 = 0;
      }
      else
      {
        v16 = 0;
        LODWORD(v4) = 0;
        v17 = 0;
        do
        {
          v18 = v15 + v16;
          v19 = a2[1];
          v20 = *a2 + (int)v4;
          if ((int)(v4 + *a2) < 0 != __OFADD__((_DWORD)v4, *a2))
            v20 = 0;
          v23[0] = v20;
          v23[1] = v19;
          v21 = YAML::RegEx::Match<YAML::StreamCharSource>(v18, v23);
          if (v21 == -1)
            goto LABEL_37;
          v4 = (v21 + v4);
          ++v17;
          v15 = *(_QWORD *)(a1 + 8);
          v16 += 32;
        }
        while (v17 < (*(_QWORD *)(a1 + 16) - v15) >> 5);
      }
      break;
    default:
LABEL_37:
      v4 = 0xFFFFFFFFLL;
      break;
  }
  return v4;
}

void YAML::Scanner::PopAllIndents(YAML::Scanner *this)
{
  uint64_t v2;

  if (!*((_QWORD *)this + 39))
  {
    while (1)
    {
      v2 = *((_QWORD *)this + 30);
      if (!v2
        || *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 26)
                                             + (((unint64_t)(v2 + *((_QWORD *)this + 29) - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                 + 8 * ((v2 + *((_QWORD *)this + 29) - 1) & 0x1FF))
                     + 4) == 2)
      {
        break;
      }
      YAML::Scanner::PopIndent(this);
    }
  }
}

void YAML::Scanner::PopIndent(YAML::Scanner *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  __int128 v13;
  int v14;
  void *__p[2];
  __int128 v16;
  __int128 v17;
  int v18;
  void **v19;

  v3 = *((_QWORD *)this + 26);
  v2 = *((_QWORD *)this + 27);
  v4 = ((v2 - v3) << 6) - 1;
  if (v2 == v3)
    v4 = 0;
  v5 = *((_QWORD *)this + 30) - 1;
  v6 = v5 + *((_QWORD *)this + 29);
  v7 = *(_QWORD *)(*(_QWORD *)(v3 + ((v6 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v6 & 0x1FF));
  *((_QWORD *)this + 30) = v5;
  if (v4 - v6 >= 0x400)
  {
    operator delete(*(void **)(v2 - 8));
    *((_QWORD *)this + 27) -= 8;
  }
  if (*(_DWORD *)(v7 + 8))
  {
    YAML::Scanner::InvalidateSimpleKey(this);
    return;
  }
  v8 = *(_DWORD *)(v7 + 4);
  if (v8)
  {
    if (v8 != 1)
      return;
    v9 = *((_QWORD *)this + 1);
    v10 = *((_DWORD *)this + 4);
    *(_QWORD *)&v13 = 0x500000000;
    *((_QWORD *)&v13 + 1) = v9;
    v14 = v10;
    *(_OWORD *)__p = 0u;
    v16 = 0u;
    v17 = 0u;
    v18 = 0;
    std::deque<YAML::Token>::push_back((_QWORD *)this + 12, &v13);
  }
  else
  {
    v11 = *((_QWORD *)this + 1);
    v12 = *((_DWORD *)this + 4);
    *(_QWORD *)&v13 = 0x600000000;
    *((_QWORD *)&v13 + 1) = v11;
    v14 = v12;
    *(_OWORD *)__p = 0u;
    v16 = 0u;
    v17 = 0u;
    v18 = 0;
    std::deque<YAML::Token>::push_back((_QWORD *)this + 12, &v13);
  }
  v19 = (void **)&v16 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  if (SBYTE7(v16) < 0)
    operator delete(__p[0]);
}

void sub_1BF9933BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  YAML::Token::~Token((void **)va);
  _Unwind_Resume(a1);
}

void YAML::ptr_vector<YAML::Scanner::IndentMarker>::push_back(char **a1, uint64_t *a2)
{
  unint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v8 = (v5 - *a1) >> 3;
    if ((unint64_t)(v8 + 1) >> 61)
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    v9 = v4 - (_QWORD)*a1;
    v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1))
      v10 = v8 + 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
    {
      if (v11 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v12 = (char *)operator new(8 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[8 * v8];
    v14 = &v12[8 * v11];
    v15 = *a2;
    *a2 = 0;
    *(_QWORD *)v13 = v15;
    v7 = v13 + 8;
    v16 = *a1;
    v17 = a1[1];
    if (v17 == *a1)
    {
      *a1 = v13;
      a1[1] = v7;
      a1[2] = v14;
    }
    else
    {
      do
      {
        v18 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *(_QWORD *)v17 = 0;
        *((_QWORD *)v13 - 1) = v18;
        v13 -= 8;
      }
      while (v17 != v16);
      v17 = *a1;
      v19 = a1[1];
      *a1 = v13;
      a1[1] = v7;
      a1[2] = v14;
      while (v19 != v17)
      {
        v21 = *((_QWORD *)v19 - 1);
        v19 -= 8;
        v20 = v21;
        *(_QWORD *)v19 = 0;
        if (v21)
          MEMORY[0x1C3B8D890](v20, 0x1020C406E52F545);
      }
    }
    if (v17)
      operator delete(v17);
  }
  else
  {
    v6 = *a2;
    *a2 = 0;
    *(_QWORD *)v5 = v6;
    v7 = v5 + 8;
  }
  a1[1] = v7;
}

void std::deque<YAML::Scanner::IndentMarker *>::push_back(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  __int128 v35;
  void *v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  int64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t i;
  _QWORD *v79;
  char *v80;
  _BYTE *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  __int128 v112;

  v4 = (char *)a1[2];
  v5 = (char *)a1[1];
  v6 = v4 - v5;
  if (v4 == v5)
    v7 = 0;
  else
    v7 = ((v4 - v5) << 6) - 1;
  v9 = a1[4];
  v8 = a1[5];
  v10 = v8 + v9;
  if (v7 == v8 + v9)
  {
    if (v9 >= 0x200)
    {
      a1[4] = v9 - 512;
      v13 = *(_QWORD *)v5;
      v11 = v5 + 8;
      v12 = v13;
      a1[1] = v11;
      if ((char *)a1[3] == v4)
      {
        v14 = (uint64_t)&v11[-*a1];
        if ((unint64_t)v11 <= *a1)
        {
          if (v4 == (char *)*a1)
            v42 = 1;
          else
            v42 = (uint64_t)&v4[-*a1] >> 2;
          v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v42);
          v45 = &v43[8 * (v42 >> 2)];
          v46 = (uint64_t *)a1[1];
          v4 = v45;
          v47 = a1[2] - (_QWORD)v46;
          if (v47)
          {
            v4 = &v45[v47 & 0xFFFFFFFFFFFFFFF8];
            v48 = 8 * (v47 >> 3);
            v49 = &v43[8 * (v42 >> 2)];
            do
            {
              v50 = *v46++;
              *(_QWORD *)v49 = v50;
              v49 += 8;
              v48 -= 8;
            }
            while (v48);
          }
          v51 = (char *)*a1;
          *a1 = v43;
          a1[1] = v45;
          a1[2] = v4;
          a1[3] = &v43[8 * v44];
          if (v51)
          {
            operator delete(v51);
            v4 = (char *)a1[2];
          }
        }
        else
        {
          v15 = v14 >> 3;
          v16 = v14 >> 3 < -1;
          v17 = (v14 >> 3) + 2;
          if (v16)
            v18 = v17;
          else
            v18 = v15 + 1;
          v19 = -(v18 >> 1);
          v20 = v18 >> 1;
          v21 = &v11[-8 * v20];
          v22 = v4 - v11;
          if (v4 == v11)
          {
            v23 = v4;
          }
          else
          {
            memmove(&v11[-8 * v20], v11, v4 - v11);
            v23 = (char *)a1[1];
          }
          v4 = &v21[v22];
          a1[1] = &v23[8 * v19];
          a1[2] = &v21[v22];
        }
      }
      *(_QWORD *)v4 = v12;
LABEL_82:
      a1[2] += 8;
LABEL_83:
      v5 = (char *)a1[1];
      v8 = a1[5];
      v10 = a1[4] + v8;
      goto LABEL_84;
    }
    v24 = v6 >> 3;
    v25 = (char *)a1[3];
    v26 = (char *)*a1;
    v27 = (uint64_t)&v25[-*a1];
    if (v6 >> 3 < (unint64_t)(v27 >> 3))
    {
      v28 = operator new(0x1000uLL);
      v29 = v28;
      if (v25 == v4)
      {
        if (v26 == v5)
        {
          if (v4 == v5)
            v52 = 1;
          else
            v52 = v27 >> 2;
          v53 = 2 * v52;
          v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v52);
          v5 = &v54[(v53 + 6) & 0xFFFFFFFFFFFFFFF8];
          v56 = (uint64_t *)a1[1];
          v57 = v5;
          v58 = a1[2] - (_QWORD)v56;
          if (v58)
          {
            v57 = &v5[v58 & 0xFFFFFFFFFFFFFFF8];
            v59 = 8 * (v58 >> 3);
            v60 = v5;
            do
            {
              v61 = *v56++;
              *(_QWORD *)v60 = v61;
              v60 += 8;
              v59 -= 8;
            }
            while (v59);
          }
          v62 = (char *)*a1;
          *a1 = v54;
          a1[1] = v5;
          a1[2] = v57;
          a1[3] = &v54[8 * v55];
          if (v62)
          {
            operator delete(v62);
            v5 = (char *)a1[1];
          }
        }
        *((_QWORD *)v5 - 1) = v29;
        v63 = (char *)a1[1];
        v64 = (char *)a1[2];
        a1[1] = v63 - 8;
        v65 = *((_QWORD *)v63 - 1);
        a1[1] = v63;
        if (v64 == (char *)a1[3])
        {
          v66 = (uint64_t)&v63[-*a1];
          if ((unint64_t)v63 <= *a1)
          {
            if (v64 == (char *)*a1)
              v97 = 1;
            else
              v97 = (uint64_t)&v64[-*a1] >> 2;
            v98 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v97);
            v100 = &v98[8 * (v97 >> 2)];
            v101 = (uint64_t *)a1[1];
            v64 = v100;
            v102 = a1[2] - (_QWORD)v101;
            if (v102)
            {
              v64 = &v100[v102 & 0xFFFFFFFFFFFFFFF8];
              v103 = 8 * (v102 >> 3);
              v104 = &v98[8 * (v97 >> 2)];
              do
              {
                v105 = *v101++;
                *(_QWORD *)v104 = v105;
                v104 += 8;
                v103 -= 8;
              }
              while (v103);
            }
            v106 = (char *)*a1;
            *a1 = v98;
            a1[1] = v100;
            a1[2] = v64;
            a1[3] = &v98[8 * v99];
            if (v106)
            {
              operator delete(v106);
              v64 = (char *)a1[2];
            }
          }
          else
          {
            v67 = v66 >> 3;
            v16 = v66 >> 3 < -1;
            v68 = (v66 >> 3) + 2;
            if (v16)
              v69 = v68;
            else
              v69 = v67 + 1;
            v70 = -(v69 >> 1);
            v71 = v69 >> 1;
            v72 = &v63[-8 * v71];
            v73 = v64 - v63;
            if (v64 != v63)
            {
              memmove(&v63[-8 * v71], v63, v64 - v63);
              v63 = (char *)a1[1];
            }
            v64 = &v72[v73];
            a1[1] = &v63[8 * v70];
            a1[2] = &v72[v73];
          }
        }
        *(_QWORD *)v64 = v65;
      }
      else
      {
        *(_QWORD *)v4 = v28;
      }
      goto LABEL_82;
    }
    if (v25 == v26)
      v30 = 1;
    else
      v30 = v27 >> 2;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v30);
    v33 = v32;
    v34 = &v31[8 * v24];
    *(_QWORD *)&v35 = v31;
    *((_QWORD *)&v35 + 1) = v34;
    v110 = v35;
    v36 = operator new(0x1000uLL);
    *(_QWORD *)&v37 = v34;
    *((_QWORD *)&v37 + 1) = &v31[8 * v33];
    if (v24 == v33)
    {
      v38 = 8 * v24;
      *(_QWORD *)&v39 = v110;
      if (v6 >= 1)
      {
        v40 = v38 >> 3;
        if (v40 >= -1)
          v41 = v40 + 1;
        else
          v41 = v40 + 2;
        v34 -= 8 * (v41 >> 1);
        *(_QWORD *)&v37 = v34;
        *((_QWORD *)&v39 + 1) = v34;
        goto LABEL_56;
      }
      v74 = v38 >> 2;
      if (v4 == v5)
        v75 = 1;
      else
        v75 = v74;
      v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v75);
      v34 = &v76[8 * (v75 >> 2)];
      *(_QWORD *)&v39 = v76;
      *((_QWORD *)&v39 + 1) = v34;
      *(_QWORD *)&v37 = v34;
      *((_QWORD *)&v37 + 1) = &v76[8 * v77];
      if (!v31)
        goto LABEL_56;
      v107 = v37;
      v110 = v39;
      operator delete(v31);
      v37 = v107;
    }
    v39 = v110;
LABEL_56:
    *(_QWORD *)v34 = v36;
    *(_QWORD *)&v37 = v37 + 8;
    for (i = a1[2]; i != a1[1]; i -= 8)
    {
      v79 = (_QWORD *)*((_QWORD *)&v39 + 1);
      if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      {
        v81 = (_BYTE *)v37;
        if ((unint64_t)v37 >= *((_QWORD *)&v37 + 1))
        {
          if (*((_QWORD *)&v37 + 1) == *((_QWORD *)&v39 + 1))
            v86 = 1;
          else
            v86 = (uint64_t)(*((_QWORD *)&v37 + 1) - *((_QWORD *)&v39 + 1)) >> 2;
          v87 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v86);
          v80 = &v87[(2 * v86 + 6) & 0xFFFFFFFFFFFFFFF8];
          v89 = v80;
          v90 = v81 - (_BYTE *)v79;
          if (v81 != (_BYTE *)v79)
          {
            v89 = &v80[v90 & 0xFFFFFFFFFFFFFFF8];
            v91 = 8 * (v90 >> 3);
            v92 = v80;
            v93 = v79;
            do
            {
              v94 = *v93++;
              *(_QWORD *)v92 = v94;
              v92 += 8;
              v91 -= 8;
            }
            while (v91);
          }
          *(_QWORD *)&v39 = v87;
          *((_QWORD *)&v39 + 1) = v80;
          *(_QWORD *)&v37 = v89;
          *((_QWORD *)&v37 + 1) = &v87[8 * v88];
          if (v79)
          {
            v108 = v37;
            v112 = v39;
            operator delete(v79);
            v37 = v108;
            v39 = v112;
          }
        }
        else
        {
          v82 = (uint64_t)(*((_QWORD *)&v37 + 1) - v37) >> 3;
          if (v82 >= -1)
            v83 = v82 + 1;
          else
            v83 = v82 + 2;
          v84 = v83 >> 1;
          v85 = v37 + 8 * (v83 >> 1);
          v80 = (char *)(v85 - (v37 - *((_QWORD *)&v39 + 1)));
          if ((_QWORD)v37 == *((_QWORD *)&v39 + 1))
          {
            v81 = (_BYTE *)*((_QWORD *)&v39 + 1);
          }
          else
          {
            v109 = *((_QWORD *)&v37 + 1);
            v111 = v39;
            memmove((void *)(v85 - (v37 - *((_QWORD *)&v39 + 1))), *((const void **)&v39 + 1), v37 - *((_QWORD *)&v39 + 1));
            *((_QWORD *)&v37 + 1) = v109;
            *(_QWORD *)&v39 = v111;
          }
          *((_QWORD *)&v39 + 1) = v80;
          *(_QWORD *)&v37 = &v81[8 * v84];
        }
      }
      else
      {
        v80 = (char *)*((_QWORD *)&v39 + 1);
      }
      v95 = *(_QWORD *)(i - 8);
      *((_QWORD *)v80 - 1) = v95;
      *((_QWORD *)&v39 + 1) -= 8;
    }
    v96 = (char *)*a1;
    *(_OWORD *)a1 = v39;
    *((_OWORD *)a1 + 1) = v37;
    if (v96)
      operator delete(v96);
    goto LABEL_83;
  }
LABEL_84:
  *(_QWORD *)(*(_QWORD *)&v5[(v10 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v10 & 0x1FF)) = *a2;
  a1[5] = v8 + 1;
}

void sub_1BF993A4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11)
{
  void *v11;

  operator delete(v11);
  if ((_QWORD)a11)
    operator delete((void *)a11);
  _Unwind_Resume(a1);
}

void YAML::Scanner::pop(YAML::Scanner *this)
{
  YAML::Scanner::EnsureTokensInQueue(this);
  if (*((_QWORD *)this + 17))
    std::deque<YAML::Token>::pop_front((uint64_t)this + 96);
}

unint64_t YAML::Scanner::peek(YAML::Scanner *this)
{
  YAML::Scanner::EnsureTokensInQueue(this);
  if (!*((_QWORD *)this + 17))
    __assert_rtn("peek", "scanner.cpp", 37, "!m_tokens.empty()");
  return *(_QWORD *)(*((_QWORD *)this + 13) + 8 * (*((_QWORD *)this + 16) / 0x33uLL))
       + 80 * (*((_QWORD *)this + 16) % 0x33uLL);
}

uint64_t YAML::Scanner::mark(YAML::Scanner *this)
{
  return *((_QWORD *)this + 1);
}

BOOL YAML::Scanner::IsWhitespaceToBeEaten(YAML::Scanner *this, int a2)
{
  return a2 == 32 || a2 == 9;
}

unint64_t YAML::Scanner::PushToken(uint64_t a1, int a2)
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  __int128 v7;
  int v8;
  void *__p[2];
  _OWORD v10[2];
  int v11;
  void **v12;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_DWORD *)(a1 + 16);
  LODWORD(v7) = 0;
  DWORD1(v7) = a2;
  *((_QWORD *)&v7 + 1) = v3;
  v8 = v4;
  *(_OWORD *)__p = 0u;
  memset(v10, 0, sizeof(v10));
  v11 = 0;
  std::deque<YAML::Token>::push_back((_QWORD *)(a1 + 96), &v7);
  v12 = (void **)v10 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v12);
  if (SBYTE7(v10[0]) < 0)
    operator delete(__p[0]);
  v5 = *(_QWORD *)(a1 + 136) + *(_QWORD *)(a1 + 128) - 1;
  return *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8 * (v5 / 0x33)) + 80 * (v5 % 0x33);
}

void sub_1BF993C04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  YAML::Token::~Token((void **)va);
  _Unwind_Resume(a1);
}

uint64_t YAML::Scanner::GetStartTokenFor(uint64_t a1, int a2)
{
  if (!a2)
    return 4;
  if (a2 != 1)
  {
    if (a2 == 2)
      __assert_rtn("GetStartTokenFor", "scanner.cpp", 279, "false");
    __assert_rtn("GetStartTokenFor", "scanner.cpp", 282, "false");
  }
  return 3;
}

uint64_t YAML::Scanner::PushIndentTo(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  int StartTokenFor;
  uint64_t v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 312))
  {
    v7 = operator new();
    v8 = v7;
    *(_DWORD *)v7 = a2;
    *(_DWORD *)(v7 + 4) = a3;
    *(_DWORD *)(v7 + 8) = 0;
    *(_QWORD *)(v7 + 16) = 0;
    v9 = *(_QWORD *)(a1 + 240) + *(_QWORD *)(a1 + 232) - 1;
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + ((v9 >> 6) & 0x3FFFFFFFFFFFFF8));
    v15 = v7;
    v11 = *(_DWORD **)(v10 + 8 * (v9 & 0x1FF));
    if (*v11 > a2 || *v11 == a2 && (a3 != 1 || v11[1]))
    {
      v3 = 0;
    }
    else
    {
      StartTokenFor = YAML::Scanner::GetStartTokenFor(v7, a3);
      *(_QWORD *)(v8 + 16) = YAML::Scanner::PushToken(a1, StartTokenFor);
      v14 = v8;
      std::deque<YAML::Scanner::IndentMarker *>::push_back((_QWORD *)(a1 + 200), &v14);
      YAML::ptr_vector<YAML::Scanner::IndentMarker>::push_back((char **)(a1 + 248), &v15);
      v3 = *(_QWORD *)(*(_QWORD *)(a1 + 256) - 8);
      v8 = v15;
      if (!v15)
        return v3;
    }
    MEMORY[0x1C3B8D890](v8, 0x1020C406E52F545);
    return v3;
  }
  return 0;
}

void sub_1BF993DA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x1020C406E52F545);
  _Unwind_Resume(a1);
}

uint64_t YAML::Scanner::GetTopIndent(YAML::Scanner *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 30);
  if (v1)
    return **(unsigned int **)(*(_QWORD *)(*((_QWORD *)this + 26)
                                         + (((unint64_t)(v1 + *((_QWORD *)this + 29) - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                             + 8 * ((v1 + *((_QWORD *)this + 29) - 1) & 0x1FF));
  else
    return 0;
}

void YAML::Scanner::ThrowParserException(_QWORD *a1, __int128 *a2)
{
  unint64_t v3;
  void *exception;
  uint64_t v5;
  int v6;

  v5 = -1;
  v6 = -1;
  if (a1[17])
  {
    v3 = *(_QWORD *)(a1[13] + 8 * (a1[16] / 0x33uLL)) + 80 * (a1[16] % 0x33uLL);
    v5 = *(_QWORD *)(v3 + 8);
    v6 = *(_DWORD *)(v3 + 16);
  }
  exception = __cxa_allocate_exception(0x38uLL);
  YAML::ParserException::ParserException((uint64_t)exception, &v5, a2);
}

void sub_1BF993EB8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *YAML::ParserException::ParserException(uint64_t a1, _DWORD *a2, __int128 *a3)
{
  _QWORD *result;

  result = (_QWORD *)YAML::Exception::Exception(a1, a2, a3);
  *result = &off_1E793AF28;
  return result;
}

void siri::dialogengine::RoundTemperatureValue(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  std::string *v6;
  double v7;
  double v8;
  char *v9;
  int v10;
  double v11;
  const char *v12;
  std::string *p_p;
  std::string __p;

  v3 = (int)a2;
  *(_DWORD *)a3 = *(_DWORD *)a1;
  v6 = (std::string *)(a3 + 8);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    *(_QWORD *)(a3 + 24) = *(_QWORD *)(a1 + 24);
  }
  v7 = *(double *)(a1 + 32);
  *(double *)(a3 + 32) = v7;
  switch(v3)
  {
    case 0:
      v8 = (double)(int)llround(v7);
      v9 = "Temperature rounding mode: TEMPERATURE_ROUNDING_INTEGER (%f -> %f)";
      goto LABEL_10;
    case 1:
      v10 = *(_DWORD *)a1;
      if ((*(_DWORD *)a1 | 2) == 3)
        v11 = (double)(int)llround(v7);
      else
        v11 = round(v7 * 10.0) / 10.0;
      *(double *)(a3 + 32) = v11;
      siri::dialogengine::GetUnitLabel<siri::dialogengine::Temperature>(&__p, v10);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Temperature rounding mode: TEMPERATURE_ROUNDING_BY_UNIT (unit: %s) (%f -> %f)", v12, p_p, *(_QWORD *)(a1 + 32), *(_QWORD *)(a3 + 32));
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      return;
    case 2:
      v8 = round(v7 * 10.0) / 10.0;
      v9 = "Temperature rounding mode: TEMPERATURE_ROUNDING_ONE_DIGIT (%f -> %f)";
      goto LABEL_10;
    case 3:
      v8 = round(v7 * 100.0) / 100.0;
      v9 = "Temperature rounding mode: TEMPERATURE_ROUNDING_TWO_DIGITS (%f -> %f)";
LABEL_10:
      *(double *)(a3 + 32) = v8;
      siri::dialogengine::Log::Info((siri::dialogengine::Log *)v9, a2, *(_QWORD *)&v7, *(_QWORD *)&v8);
      break;
    default:
      return;
  }
}

void sub_1BF994058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void **v17;
  uint64_t v18;

  if (a17 < 0)
    operator delete(__p);
  if (*(char *)(v18 + 31) < 0)
    operator delete(*v17);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::GetRoundedValueFromTemperatureVar(uint64_t a1, uint64_t a2, const char *a3)
{
  double *RequiredNumberParameter;
  double *v7;
  uint64_t v8;
  void *size;
  std::string v11;
  uint64_t v12;
  double v13;
  std::string v14;
  uint64_t v15;
  double v16;

  std::string::basic_string[abi:ne180100]<0>(&v14, "value");
  RequiredNumberParameter = (double *)siri::dialogengine::GetRequiredNumberParameter((const void **)&v14.__r_.__value_.__l.__data_, a2);
  v7 = RequiredNumberParameter;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    if (v7)
    {
LABEL_3:
      siri::dialogengine::GetConvertedUnitInfo<siri::dialogengine::Temperature>(v7[9], a1, a2, (uint64_t)&v14);
      siri::dialogengine::RoundTemperatureValue((uint64_t)&v14, a3, (uint64_t)&v11);
      LODWORD(v14.__r_.__value_.__l.__data_) = v11.__r_.__value_.__l.__data_;
      if (SHIBYTE(v15) < 0)
        operator delete((void *)v14.__r_.__value_.__l.__size_);
      *(_OWORD *)&v14.__r_.__value_.__r.__words[1] = *(_OWORD *)&v11.__r_.__value_.__r.__words[1];
      v15 = v12;
      v16 = v13;
      v8 = operator new();
      std::string::basic_string[abi:ne180100]<0>(&v11, "");
      siri::dialogengine::VariableNumber::VariableNumber(v8, &v11, v16);
      if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v11.__r_.__value_.__l.__data_);
      if (SHIBYTE(v15) < 0)
      {
        size = (void *)v14.__r_.__value_.__l.__size_;
LABEL_12:
        operator delete(size);
        return v8;
      }
      return v8;
    }
  }
  else if (RequiredNumberParameter)
  {
    goto LABEL_3;
  }
  v8 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&v14, "");
  siri::dialogengine::VariableNumber::VariableNumber(v8, &v14, 0.0);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    size = (void *)v14.__r_.__value_.__r.__words[0];
    goto LABEL_12;
  }
  return v8;
}

void sub_1BF994204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, void *a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a22 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8D890](v26, 0x10B3C4030AE2ACELL);
  _Unwind_Resume(a1);
}

std::string *siri::dialogengine::FormatTemperature(_QWORD *a1, uint64_t a2, unsigned int a3, const char *a4)
{
  void *RequiredNumberParameter;
  void *v9;
  long double v10;
  char *OptionalStringParameter;
  char *v12;
  std::string *v13;
  void *v14;
  int v15;
  unsigned int data;
  unsigned int v17;
  siri::dialogengine *v18;
  const char *v19;
  char *v20;
  uint64_t i;
  std::__shared_weak_count *size;
  unint64_t *v23;
  unint64_t v24;
  std::string v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  const void **v31[3];
  std::string v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  std::string __p;
  __int128 v37;
  void *v38[3];
  void *v39[2];
  uint64_t v40;
  char v41;
  void *v42;
  __int128 v43;
  void *v44;
  char v45;
  void *v46[2];
  _QWORD v47[3];
  __int128 v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&__p, "value");
  RequiredNumberParameter = siri::dialogengine::GetRequiredNumberParameter((const void **)&__p.__r_.__value_.__l.__data_, a2);
  v9 = RequiredNumberParameter;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v9)
    {
LABEL_3:
      v10 = *((double *)v9 + 9);
      std::string::basic_string[abi:ne180100]<0>(&__p, "units");
      OptionalStringParameter = (char *)siri::dialogengine::GetOptionalStringParameter((const void **)&__p.__r_.__value_.__l.__data_, a2);
      v12 = OptionalStringParameter;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v12)
        {
LABEL_5:
          if (v12[95] < 0)
            std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v12 + 9), *((_QWORD *)v12 + 10));
          else
            __p = *(std::string *)(v12 + 3);
          v15 = siri::dialogengine::ParseUnitLabel<siri::dialogengine::Temperature>((uint64_t)&__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
LABEL_17:
          siri::dialogengine::GetConvertedUnitInfo<siri::dialogengine::Temperature>(v10, (uint64_t)a1, a2, (uint64_t)&v33);
          siri::dialogengine::RoundTemperatureValue((uint64_t)&v33, a4, (uint64_t)&__p);
          data = __p.__r_.__value_.__l.__data_;
          LODWORD(v33) = __p.__r_.__value_.__l.__data_;
          if (SBYTE7(v35) < 0)
          {
            operator delete((void *)v34);
            data = v33;
          }
          v34 = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
          v35 = v37;
          if (data == -2)
          {
            v17 = v15;
          }
          else
          {
            v10 = *((double *)&v37 + 1);
            v17 = data;
          }
          if (v10 == 0.0)
            v18 = 0;
          else
            v18 = (siri::dialogengine *)(fmod(v10, 1000000.0) == 0.0);
          memset(&v32, 0, sizeof(v32));
          if (a3 >= 2)
          {
            if (v17 > 3)
              v20 = "unit#degreesValue";
            else
              v20 = off_1E79303A8[v17];
            std::string::basic_string[abi:ne180100]<0>(&__p, v20);
            if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v32.__r_.__value_.__l.__data_);
            v32 = __p;
          }
          else
          {
            if (v17 == 2)
              v19 = "unit#kelvinValue";
            else
              v19 = "unit#degreesValue";
            MEMORY[0x1C3B8D53C](&v32, v19);
          }
          siri::dialogengine::CreateJSONDoubleVal(v10, (uint64_t *)&v26);
          std::string::basic_string[abi:ne180100]<0>(&__p, "number");
          v37 = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
          *(_OWORD *)&v26.__r_.__value_.__l.__data_ = 0uLL;
          siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)(v10 < 0.0), (uint64_t *)&v30);
          std::string::basic_string[abi:ne180100]<0>(v38, "numberIsNegative");
          *(_OWORD *)v39 = v30;
          v30 = 0uLL;
          siri::dialogengine::CreateJSONDoubleVal(fabs(v10), (uint64_t *)&v29);
          std::string::basic_string[abi:ne180100]<0>(&v40, "numberAbsolute");
          v43 = v29;
          v29 = 0uLL;
          siri::dialogengine::CreateJSONBoolVal(v18, (uint64_t *)&v28);
          std::string::basic_string[abi:ne180100]<0>(&v44, "numberIsMultipleOfMillion");
          *(_OWORD *)v46 = v28;
          v28 = 0uLL;
          siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)(a3 == 0), (uint64_t *)&v27);
          std::string::basic_string[abi:ne180100]<0>(v47, "abbreviated");
          v48 = v27;
          v27 = 0uLL;
          std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100]((uint64_t)v31, (const void **)&__p.__r_.__value_.__l.__data_, 5);
          for (i = 0; i != -25; i -= 5)
          {
            std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v48 + i * 8);
            if (SHIBYTE(v47[i + 2]) < 0)
              operator delete((void *)v47[i]);
          }
          size = (std::__shared_weak_count *)v26.__r_.__value_.__l.__size_;
          if (v26.__r_.__value_.__l.__size_)
          {
            v23 = (unint64_t *)(v26.__r_.__value_.__l.__size_ + 8);
            do
              v24 = __ldaxr(v23);
            while (__stlxr(v24 - 1, v23));
            if (!v24)
            {
              ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
              std::__shared_weak_count::__release_weak(size);
            }
          }
          siri::dialogengine::ExecuteSharedCat(a1, (uint64_t)&v32, v31, (uint64_t)&__p);
          v13 = (std::string *)operator new();
          std::string::basic_string[abi:ne180100]<0>(&v26, "");
          siri::dialogengine::VariableString::VariableString(v13, &v26, (const siri::dialogengine::SpeakableString *)&__p);
          if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v26.__r_.__value_.__l.__data_);
          if (SHIBYTE(v47[0]) < 0)
            operator delete(v46[0]);
          if (v45 < 0)
            operator delete(v44);
          if (SHIBYTE(v43) < 0)
            operator delete(v42);
          if (v41 < 0)
            operator delete(v39[1]);
          if (SHIBYTE(v39[0]) < 0)
            operator delete(v38[1]);
          if (SHIBYTE(v38[0]) < 0)
            operator delete((void *)v37);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(v31[1]);
          if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v32.__r_.__value_.__l.__data_);
          if (SBYTE7(v35) < 0)
          {
            v14 = (void *)v34;
            goto LABEL_65;
          }
          return v13;
        }
      }
      else if (OptionalStringParameter)
      {
        goto LABEL_5;
      }
      v15 = -1;
      goto LABEL_17;
    }
  }
  else if (RequiredNumberParameter)
  {
    goto LABEL_3;
  }
  v13 = (std::string *)operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::basic_string[abi:ne180100]<0>(&v33, "");
  siri::dialogengine::VariableString::VariableString((uint64_t)v13, &__p, (uint64_t)&v33);
  if (SHIBYTE(v34) < 0)
    operator delete(v33);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    v14 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_65:
    operator delete(v14);
  }
  return v13;
}

void sub_1BF9947CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,void *a35,int a36,__int16 a37,char a38,char a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a33 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a35);
  _Unwind_Resume(exception_object);
}

std::string *siri::dialogengine::DialogTemperature::toString(siri::dialogengine::DialogTemperature *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::FormatTemperature(this, (uint64_t)a2, 2u, 0);
}

std::string *siri::dialogengine::DialogTemperature::longSpoken(siri::dialogengine::DialogTemperature *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::FormatTemperature(this, (uint64_t)a2, 2u, 0);
}

std::string *siri::dialogengine::DialogTemperature::shortSpoken(siri::dialogengine::DialogTemperature *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::FormatTemperature(this, (uint64_t)a2, 0, 0);
}

std::string *siri::dialogengine::DialogTemperature::mediumSpoken(siri::dialogengine::DialogTemperature *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::FormatTemperature(this, (uint64_t)a2, 1u, 0);
}

uint64_t siri::dialogengine::DialogTemperature::units(siri::dialogengine::DialogTemperature *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v3;
  std::string __p;
  _BYTE v6[8];
  void *v7;
  char v8;

  siri::dialogengine::GetConvertedUnitInfo<siri::dialogengine::Temperature>(0.0, (uint64_t)this, (uint64_t)a2, (uint64_t)v6);
  v3 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::dialogengine::VariableString::VariableString(v3, &__p, (uint64_t)&v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v8 < 0)
    operator delete(v7);
  return v3;
}

void sub_1BF994A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a14 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8D890](v21, 0x10B3C40D3060B95);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogTemperature::value(siri::dialogengine::DialogTemperature *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::GetRoundedValueFromTemperatureVar((uint64_t)this, (uint64_t)a2, 0);
}

_QWORD *siri::dialogengine::DialogTemperature::asPreciseTemperature(siri::dialogengine::DialogTemperature *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  _QWORD *v4;
  uint64_t v5;
  std::string *v6;
  std::string *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *size;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v23[2];
  std::string *v24;
  std::string *v25;
  _QWORD v26[2];
  char v27;
  std::string v28;
  _QWORD v29[3];
  _QWORD v30[3];
  __int128 v31;

  *(_QWORD *)&v31 = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)operator new();
  if (*((char *)a2 + 31) < 0)
    std::string::__init_copy_ctor_external(&v28, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  else
    v28 = *(std::string *)((char *)a2 + 8);
  siri::dialogengine::VariableObject::VariableObject(v4, &v28);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v28, "value");
  std::string::basic_string[abi:ne180100]<0>(v29, "units");
  std::string::basic_string[abi:ne180100]<0>(v30, "outputUnits");
  v24 = 0;
  v25 = 0;
  v26[0] = 0;
  v26[1] = &v24;
  v27 = 0;
  v24 = (std::string *)operator new(0x48uLL);
  v25 = v24;
  v26[0] = v24 + 3;
  v5 = 0;
  v25 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v26, (__int128 *)&v28, &v31, v24);
  do
  {
    if (SHIBYTE(v30[v5 + 2]) < 0)
      operator delete((void *)v30[v5]);
    v5 -= 3;
  }
  while (v5 != -9);
  v6 = v24;
  v7 = v25;
  if (v24 != v25)
  {
    v8 = (char *)a2 + 72;
    v9 = (char *)a2 + 80;
    do
    {
      v10 = std::__tree<std::string>::find<std::string>((uint64_t)v8, (const void **)&v6->__r_.__value_.__l.__data_);
      if (v9 == (char *)v10)
      {
        *(_OWORD *)&v28.__r_.__value_.__l.__data_ = 0uLL;
      }
      else
      {
        v11 = *(_QWORD *)(v10 + 56);
        v12 = *(std::__shared_weak_count **)(v10 + 64);
        v28.__r_.__value_.__r.__words[0] = v11;
        v28.__r_.__value_.__l.__size_ = (std::string::size_type)v12;
        if (v12)
        {
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        if (v11)
        {
          v23[0] = v11;
          v23[1] = (uint64_t)v12;
          if (v12)
          {
            v15 = (unint64_t *)&v12->__shared_owners_;
            do
              v16 = __ldxr(v15);
            while (__stxr(v16 + 1, v15));
          }
          siri::dialogengine::VariableObject::AddProperty((uint64_t)v4, v23);
          if (v12)
          {
            v17 = (unint64_t *)&v12->__shared_owners_;
            do
              v18 = __ldaxr(v17);
            while (__stlxr(v18 - 1, v17));
            if (!v18)
            {
              ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
              std::__shared_weak_count::__release_weak(v12);
            }
          }
        }
      }
      size = (std::__shared_weak_count *)v28.__r_.__value_.__l.__size_;
      if (v28.__r_.__value_.__l.__size_)
      {
        v20 = (unint64_t *)(v28.__r_.__value_.__l.__size_ + 8);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      ++v6;
    }
    while (v6 != v7);
  }
  v28.__r_.__value_.__r.__words[0] = (std::string::size_type)&v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
  return v4;
}

void sub_1BF994D34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  MEMORY[0x1C3B8D890](v22, 0x10B3C40C1072A30);
  _Unwind_Resume(a1);
}

void InitDefaultsscc_info_SimpleItem_Player_SimpleItem_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SimpleItem.pb.cc", a4);
  SnippetUI::SimpleItem_Player::SimpleItem_Player((SnippetUI::SimpleItem_Player *)&SnippetUI::_SimpleItem_Player_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_SimpleItem_Player_default_instance_, v4);
  qword_1ED1D42B8 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D42C0 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D42C8 = (uint64_t)&SnippetUI::_MultilineTextProperty_default_instance_;
  unk_1ED1D42D0 = &SnippetUI::_ActionProperty_default_instance_;
  qword_1ED1D42D8 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
}

SnippetUI::SimpleItem_Player *SnippetUI::SimpleItem_Player::SimpleItem_Player(SnippetUI::SimpleItem_Player *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)this = &off_1E7930758;
  *((_DWORD *)this + 24) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (atomic_load(scc_info_SimpleItem_Player_SimpleItem_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SimpleItem_Player_SimpleItem_2eproto);
  *((_QWORD *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_QWORD *)this + 11) = 0;
  return this;
}

void sub_1BF994F08(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v1 + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

void SnippetUI::SimpleItem_Player::~SimpleItem_Player(SnippetUI::SimpleItem_Player *this)
{
  SnippetUI::SimpleItem_Player::~SimpleItem_Player(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)this = &off_1E7930758;
  v2 = *((_QWORD *)this + 5);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 6);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1C3B8D890](v4, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::SimpleItem_Player *)&SnippetUI::_SimpleItem_Player_default_instance_)
  {
    v6 = *((_QWORD *)this + 7);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = *((_QWORD *)this + 8);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = *((_QWORD *)this + 9);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = *((_QWORD *)this + 10);
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v10 = *((_QWORD *)this + 11);
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((SnippetUI::SimpleItem_Player *)((char *)this + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::SimpleItem_Player *SnippetUI::SimpleItem_Player::New(SnippetUI::SimpleItem_Player *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SimpleItem_Player>(0);
}

SnippetUI::SimpleItem_Player *SnippetUI::SimpleItem_Player::New(SnippetUI::SimpleItem_Player *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SimpleItem_Player>(a2);
}

void SnippetUI::SimpleItem_Player::Clear(SnippetUI::SimpleItem_Player *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  google::protobuf::internal::InternalMetadataWithArena *v9;
  char v10;

  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16);
  v2 = *((_QWORD *)this + 5);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 6);
  if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
  v4 = *((_QWORD *)this + 7);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 7) = 0;
  v5 = *((_QWORD *)this + 8);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *((_QWORD *)this + 8) = 0;
  v6 = *((_QWORD *)this + 9);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *((_QWORD *)this + 9) = 0;
  v7 = *((_QWORD *)this + 10);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  *((_QWORD *)this + 10) = 0;
  v8 = *((_QWORD *)this + 11);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v10 = *((_BYTE *)this + 8);
  v9 = (SnippetUI::SimpleItem_Player *)((char *)this + 8);
  *((_QWORD *)v9 + 10) = 0;
  if ((v10 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v9);
}

uint64_t SnippetUI::SimpleItem_Player::IsInitialized(SnippetUI::SimpleItem_Player *this)
{
  return 1;
}

char *SnippetUI::SimpleItem_Player::ByteSizeLong(SnippetUI::SimpleItem_Player *this)
{
  const google::protobuf::UnknownFieldSet *v2;
  uint64_t v3;
  SnippetUI::Player **v4;
  uint64_t v5;
  SnippetUI::Player *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  SnippetUI::TextProperty *v14;
  char *v15;
  SnippetUI::TextProperty *v16;
  char *v17;
  SnippetUI::MultilineTextProperty *v18;
  char *v19;
  SnippetUI::ActionProperty *v20;
  char *v21;
  SnippetUI::TextProperty *v22;
  char *v23;

  v2 = (const google::protobuf::UnknownFieldSet *)*((int *)this + 6);
  v3 = *((_QWORD *)this + 4);
  if (v3)
    v4 = (SnippetUI::Player **)(v3 + 8);
  else
    v4 = 0;
  if ((_DWORD)v2)
  {
    v5 = 8 * (_QWORD)v2;
    do
    {
      v6 = *v4++;
      v7 = SnippetUI::Player::ByteSizeLong(v6);
      v2 = (const google::protobuf::UnknownFieldSet *)((char *)v2
                                                     + (_QWORD)v7
                                                     + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6));
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    v2 = 0;
  }
  v8 = *((_QWORD *)this + 5);
  v9 = *(unsigned __int8 *)(v8 + 23);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(_QWORD *)(v8 + 8))
      goto LABEL_14;
  }
  else if (!*(_BYTE *)(v8 + 23))
  {
    goto LABEL_14;
  }
  v10 = *(_QWORD *)(v8 + 8);
  if ((v9 & 0x80u) == 0)
    v10 = v9;
  v2 = (const google::protobuf::UnknownFieldSet *)((char *)v2 + v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_14:
  v11 = *((_QWORD *)this + 6);
  v12 = *(unsigned __int8 *)(v11 + 23);
  if (*(char *)(v11 + 23) < 0)
  {
    if (!*(_QWORD *)(v11 + 8))
      goto LABEL_19;
  }
  else if (!*(_BYTE *)(v11 + 23))
  {
    goto LABEL_19;
  }
  v13 = *(_QWORD *)(v11 + 8);
  if ((v12 & 0x80u) == 0)
    v13 = v12;
  v2 = (const google::protobuf::UnknownFieldSet *)((char *)v2 + v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_19:
  if (this != (SnippetUI::SimpleItem_Player *)&SnippetUI::_SimpleItem_Player_default_instance_)
  {
    v14 = (SnippetUI::TextProperty *)*((_QWORD *)this + 7);
    if (v14)
    {
      v15 = SnippetUI::TextProperty::ByteSizeLong(v14);
      v2 = (const google::protobuf::UnknownFieldSet *)&v15[(_QWORD)v2
                                                         + 1
                                                         + ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 8);
    if (v16)
    {
      v17 = SnippetUI::TextProperty::ByteSizeLong(v16);
      v2 = (const google::protobuf::UnknownFieldSet *)&v17[(_QWORD)v2
                                                         + 1
                                                         + ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v18 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 9);
    if (v18)
    {
      v19 = SnippetUI::MultilineTextProperty::ByteSizeLong(v18);
      v2 = (const google::protobuf::UnknownFieldSet *)&v19[(_QWORD)v2
                                                         + 1
                                                         + ((9 * (__clz(v19 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v20 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 10);
    if (v20)
    {
      v21 = SnippetUI::ActionProperty::ByteSizeLong(v20);
      v2 = (const google::protobuf::UnknownFieldSet *)&v21[(_QWORD)v2
                                                         + 1
                                                         + ((9 * (__clz(v21 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v22 = (SnippetUI::TextProperty *)*((_QWORD *)this + 11);
    if (v22)
    {
      v23 = SnippetUI::TextProperty::ByteSizeLong(v22);
      v2 = (const google::protobuf::UnknownFieldSet *)&v23[(_QWORD)v2
                                                         + 1
                                                         + ((9 * (__clz(v23 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::SimpleItem_Player *)((char *)this + 8), v2, (_DWORD *)this + 24);
  *((_DWORD *)this + 24) = (_DWORD)v2;
  return (char *)v2;
}

uint64_t SnippetUI::SimpleItem_Player::GetCachedSize(SnippetUI::SimpleItem_Player *this)
{
  return *((unsigned int *)this + 24);
}

google::protobuf::internal *SnippetUI::SimpleItem_Player::_InternalParse(SnippetUI::SimpleItem_Player *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  std::string **v6;
  unsigned int *v7;
  uint64_t *v8;
  google::protobuf::internal::ParseContext *v9;
  google::protobuf::internal *TagFallback;
  char *v11;
  char *v12;
  google::protobuf::internal *v13;
  int *v14;
  uint64_t v15;
  int v16;
  SnippetUI::Player *v17;
  uint64_t v18;
  uint64_t v19;
  SnippetUI::TextProperty *v20;
  SnippetUI::MultilineTextProperty *v21;
  char *v22;
  SnippetUI::ActionProperty *v23;
  std::string *v24;
  std::string::value_type *v25;
  google::protobuf::internal::ParseContext *v26;
  char *v27;
  BOOL v28;
  google::protobuf::internal *v30;

  v30 = a2;
  v5 = (std::string **)((char *)this + 48);
  v6 = (std::string **)((char *)this + 40);
  v7 = (unsigned int *)((char *)this + 16);
  v8 = (uint64_t *)((char *)this + 8);
LABEL_2:
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v30, *((_DWORD *)a3 + 23)) & 1) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v30 + 1);
      v11 = (char *)*(unsigned __int8 *)v30;
      if (*(char *)v30 < 0)
      {
        v11 = (char *)(v11 + (*(unsigned __int8 *)TagFallback << 7) - 128);
        if (*(char *)TagFallback < 0)
        {
          TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v30, v11);
          v30 = TagFallback;
          if (!TagFallback)
            return TagFallback;
LABEL_7:
          switch(v11 >> 3)
          {
            case 1u:
              if (v11 != 10)
                goto LABEL_51;
              v12 = (char *)TagFallback - 1;
              break;
            case 2u:
              if (v11 != 18)
                goto LABEL_51;
              v20 = (SnippetUI::TextProperty *)*((_QWORD *)this + 7);
              if (v20)
                goto LABEL_50;
              v20 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
              *((_QWORD *)this + 7) = v20;
              goto LABEL_49;
            case 3u:
              if (v11 != 26)
                goto LABEL_51;
              v20 = (SnippetUI::TextProperty *)*((_QWORD *)this + 8);
              if (v20)
                goto LABEL_50;
              v20 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
              *((_QWORD *)this + 8) = v20;
              goto LABEL_49;
            case 4u:
              if (v11 != 34)
                goto LABEL_51;
              v21 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 9);
              if (!v21)
              {
                v21 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
                *((_QWORD *)this + 9) = v21;
                TagFallback = v30;
              }
              v22 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::MultilineTextProperty>(a3, v21, TagFallback);
              goto LABEL_56;
            case 5u:
              if (v11 != 42)
                goto LABEL_51;
              v23 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 10);
              if (!v23)
              {
                v23 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
                *((_QWORD *)this + 10) = v23;
                TagFallback = v30;
              }
              v22 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v23, TagFallback);
              goto LABEL_56;
            case 6u:
              if (v11 != 50)
                goto LABEL_51;
              v24 = *v6;
              if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              {
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
                v24 = *v6;
                TagFallback = v30;
              }
              v25 = (std::string::value_type *)TagFallback;
              v26 = a3;
              v27 = "SnippetUI.SimpleItem_Player.component_name";
              goto LABEL_45;
            case 7u:
              if (v11 != 58)
                goto LABEL_51;
              v24 = *v5;
              if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              {
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
                v24 = *v5;
                TagFallback = v30;
              }
              v25 = (std::string::value_type *)TagFallback;
              v26 = a3;
              v27 = "SnippetUI.SimpleItem_Player.link_identifier";
LABEL_45:
              v22 = google::protobuf::internal::InlineGreedyStringParserUTF8(v24, v25, (uint64_t)v26, (google::protobuf::internal *)v27);
              goto LABEL_56;
            case 8u:
              if (v11 != 66)
                goto LABEL_51;
              v20 = (SnippetUI::TextProperty *)*((_QWORD *)this + 11);
              if (v20)
                goto LABEL_50;
              v20 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
              *((_QWORD *)this + 11) = v20;
LABEL_49:
              TagFallback = v30;
LABEL_50:
              v22 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v20, TagFallback);
              goto LABEL_56;
            default:
LABEL_51:
              if ((_DWORD)v11)
                v28 = (v11 & 7) == 4;
              else
                v28 = 1;
              if (v28)
              {
                *((_DWORD *)a3 + 20) = (_DWORD)v11 - 1;
                return TagFallback;
              }
              v22 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v11, v8, TagFallback, a3, v9);
LABEL_56:
              v30 = (google::protobuf::internal *)v22;
              if (v22)
                continue;
              return 0;
          }
          while (1)
          {
            v13 = (google::protobuf::internal *)(v12 + 1);
            v30 = (google::protobuf::internal *)(v12 + 1);
            v14 = (int *)*((_QWORD *)this + 4);
            if (!v14)
              break;
            v15 = *((int *)this + 6);
            v16 = *v14;
            if ((int)v15 >= *v14)
            {
              if (v16 == *((_DWORD *)this + 7))
              {
LABEL_15:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v7, v16 + 1);
                v14 = (int *)*((_QWORD *)this + 4);
                v16 = *v14;
              }
              *v14 = v16 + 1;
              v17 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Player>(*((google::protobuf::internal::ArenaImpl **)this
                                                                                   + 2));
              v18 = *((_QWORD *)this + 4);
              v19 = *((int *)this + 6);
              *((_DWORD *)this + 6) = v19 + 1;
              *(_QWORD *)(v18 + 8 * v19 + 8) = v17;
              v13 = v30;
              goto LABEL_17;
            }
            *((_DWORD *)this + 6) = v15 + 1;
            v17 = *(SnippetUI::Player **)&v14[2 * v15 + 2];
LABEL_17:
            v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::Player>(a3, v17, v13);
            v30 = (google::protobuf::internal *)v12;
            if (!v12)
              return 0;
            if (*(_QWORD *)a3 <= (unint64_t)v12 || *v12 != 10)
              goto LABEL_2;
          }
          v16 = *((_DWORD *)this + 7);
          goto LABEL_15;
        }
        TagFallback = (google::protobuf::internal *)((char *)v30 + 2);
      }
      v30 = TagFallback;
      goto LABEL_7;
    }
    return v30;
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::SimpleItem_Player::InternalSerializeWithCachedSizesToArray(SnippetUI::SimpleItem_Player *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v7;
  int i;
  SnippetUI::Player *v9;
  google::protobuf::io::EpsCopyOutputStream *v10;
  unsigned int v11;
  google::protobuf::UnknownFieldSet *v12;
  unsigned int v13;
  _BYTE *v14;
  _BYTE *v15;
  unsigned int v16;
  unsigned int v17;
  SnippetUI::TextProperty *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  google::protobuf::UnknownFieldSet *v22;
  _BYTE *v23;
  _BYTE *v24;
  unsigned int v25;
  unsigned int v26;
  SnippetUI::TextProperty *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  google::protobuf::UnknownFieldSet *v31;
  _BYTE *v32;
  _BYTE *v33;
  unsigned int v34;
  unsigned int v35;
  SnippetUI::MultilineTextProperty *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  google::protobuf::UnknownFieldSet *v40;
  _BYTE *v41;
  _BYTE *v42;
  unsigned int v43;
  unsigned int v44;
  SnippetUI::ActionProperty *v45;
  unsigned int v46;
  google::protobuf::UnknownFieldSet *v47;
  unsigned int v48;
  _BYTE *v49;
  _BYTE *v50;
  unsigned int v51;
  unsigned int v52;
  google::protobuf::internal *v53;
  const char *v54;
  uint64_t *v55;
  const char *v56;
  SnippetUI::TextProperty *v57;
  unsigned int v58;
  google::protobuf::UnknownFieldSet *v59;
  unsigned int v60;
  _BYTE *v61;
  _BYTE *v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;

  v7 = *((_DWORD *)this + 6);
  if (v7)
  {
    for (i = 0; i != v7; ++i)
    {
      if ((unint64_t)a2 >= *(_QWORD *)a3)
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v9 = (SnippetUI::Player *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16, i);
      *(_BYTE *)a2 = 10;
      v11 = *((_DWORD *)v9 + 14);
      if (v11 > 0x7F)
      {
        *((_BYTE *)a2 + 1) = v11 | 0x80;
        v13 = v11 >> 7;
        if (v11 >> 14)
        {
          v14 = (char *)a2 + 2;
          do
          {
            v15 = v14;
            *v14++ = v13 | 0x80;
            v16 = v13 >> 7;
            v17 = v13 >> 14;
            v13 >>= 7;
          }
          while (v17);
          v12 = (google::protobuf::UnknownFieldSet *)(v15 + 2);
          *v14 = v16;
        }
        else
        {
          *((_BYTE *)a2 + 2) = v13;
          v12 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
        }
      }
      else
      {
        *((_BYTE *)a2 + 1) = v11;
        v12 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
      }
      a2 = SnippetUI::Player::InternalSerializeWithCachedSizesToArray(v9, v12, a3, v10);
    }
  }
  if (this != (SnippetUI::SimpleItem_Player *)&SnippetUI::_SimpleItem_Player_default_instance_)
  {
    v18 = (SnippetUI::TextProperty *)*((_QWORD *)this + 7);
    if (!v18)
      goto LABEL_26;
    if ((unint64_t)a2 >= *(_QWORD *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v18 = (SnippetUI::TextProperty *)*((_QWORD *)this + 7);
    }
    *(_BYTE *)a2 = 18;
    v19 = *((_DWORD *)v18 + 15);
    if (v19 > 0x7F)
    {
      *((_BYTE *)a2 + 1) = v19 | 0x80;
      v21 = v19 >> 7;
      if (v19 >> 14)
      {
        v23 = (char *)a2 + 2;
        do
        {
          v24 = v23;
          *v23++ = v21 | 0x80;
          v25 = v21 >> 7;
          v26 = v21 >> 14;
          v21 >>= 7;
        }
        while (v26);
        v22 = (google::protobuf::UnknownFieldSet *)(v24 + 2);
        *v23 = v25;
        goto LABEL_25;
      }
      *((_BYTE *)a2 + 2) = v21;
      v20 = 3;
    }
    else
    {
      *((_BYTE *)a2 + 1) = v19;
      v20 = 2;
    }
    v22 = (google::protobuf::UnknownFieldSet *)((char *)a2 + v20);
LABEL_25:
    a2 = SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v18, v22, a3, a4);
LABEL_26:
    v27 = (SnippetUI::TextProperty *)*((_QWORD *)this + 8);
    if (!v27)
      goto LABEL_38;
    if ((unint64_t)a2 >= *(_QWORD *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v27 = (SnippetUI::TextProperty *)*((_QWORD *)this + 8);
    }
    *(_BYTE *)a2 = 26;
    v28 = *((_DWORD *)v27 + 15);
    if (v28 > 0x7F)
    {
      *((_BYTE *)a2 + 1) = v28 | 0x80;
      v30 = v28 >> 7;
      if (v28 >> 14)
      {
        v32 = (char *)a2 + 2;
        do
        {
          v33 = v32;
          *v32++ = v30 | 0x80;
          v34 = v30 >> 7;
          v35 = v30 >> 14;
          v30 >>= 7;
        }
        while (v35);
        v31 = (google::protobuf::UnknownFieldSet *)(v33 + 2);
        *v32 = v34;
        goto LABEL_37;
      }
      *((_BYTE *)a2 + 2) = v30;
      v29 = 3;
    }
    else
    {
      *((_BYTE *)a2 + 1) = v28;
      v29 = 2;
    }
    v31 = (google::protobuf::UnknownFieldSet *)((char *)a2 + v29);
LABEL_37:
    a2 = SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v27, v31, a3, a4);
LABEL_38:
    v36 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 9);
    if (!v36)
      goto LABEL_50;
    if ((unint64_t)a2 >= *(_QWORD *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v36 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 9);
    }
    *(_BYTE *)a2 = 34;
    v37 = *((_DWORD *)v36 + 15);
    if (v37 > 0x7F)
    {
      *((_BYTE *)a2 + 1) = v37 | 0x80;
      v39 = v37 >> 7;
      if (v37 >> 14)
      {
        v41 = (char *)a2 + 2;
        do
        {
          v42 = v41;
          *v41++ = v39 | 0x80;
          v43 = v39 >> 7;
          v44 = v39 >> 14;
          v39 >>= 7;
        }
        while (v44);
        v40 = (google::protobuf::UnknownFieldSet *)(v42 + 2);
        *v41 = v43;
        goto LABEL_49;
      }
      *((_BYTE *)a2 + 2) = v39;
      v38 = 3;
    }
    else
    {
      *((_BYTE *)a2 + 1) = v37;
      v38 = 2;
    }
    v40 = (google::protobuf::UnknownFieldSet *)((char *)a2 + v38);
LABEL_49:
    a2 = SnippetUI::MultilineTextProperty::InternalSerializeWithCachedSizesToArray(v36, v40, a3, a4);
LABEL_50:
    v45 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 10);
    if (v45)
    {
      if ((unint64_t)a2 >= *(_QWORD *)a3)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
        v45 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 10);
      }
      *(_BYTE *)a2 = 42;
      v46 = *((_DWORD *)v45 + 12);
      if (v46 > 0x7F)
      {
        *((_BYTE *)a2 + 1) = v46 | 0x80;
        v48 = v46 >> 7;
        if (v46 >> 14)
        {
          v49 = (char *)a2 + 2;
          do
          {
            v50 = v49;
            *v49++ = v48 | 0x80;
            v51 = v48 >> 7;
            v52 = v48 >> 14;
            v48 >>= 7;
          }
          while (v52);
          v47 = (google::protobuf::UnknownFieldSet *)(v50 + 2);
          *v49 = v51;
        }
        else
        {
          *((_BYTE *)a2 + 2) = v48;
          v47 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
        }
      }
      else
      {
        *((_BYTE *)a2 + 1) = v46;
        v47 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
      }
      a2 = SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v45, v47, a3, a4);
    }
  }
  v53 = (google::protobuf::internal *)*((_QWORD *)this + 5);
  if (*((char *)v53 + 23) < 0)
  {
    v54 = (const char *)*((_QWORD *)v53 + 1);
    if (!v54)
      goto LABEL_67;
    v53 = *(google::protobuf::internal **)v53;
    goto LABEL_66;
  }
  v54 = (const char *)*((unsigned __int8 *)v53 + 23);
  if (*((_BYTE *)v53 + 23))
  {
LABEL_66:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v53, v54, 1, (google::protobuf::internal *)"SnippetUI.SimpleItem_Player.component_name");
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 6, *((_QWORD *)this + 5), (char *)a2);
  }
LABEL_67:
  v55 = (uint64_t *)*((_QWORD *)this + 6);
  if ((*((char *)v55 + 23) & 0x80000000) == 0)
  {
    v56 = (const char *)*((unsigned __int8 *)v55 + 23);
    if (!*((_BYTE *)v55 + 23))
      goto LABEL_73;
    goto LABEL_72;
  }
  v56 = (const char *)v55[1];
  if (v56)
  {
    v55 = (uint64_t *)*v55;
LABEL_72:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((google::protobuf::internal *)v55, v56, 1, (google::protobuf::internal *)"SnippetUI.SimpleItem_Player.link_identifier");
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 7, *((_QWORD *)this + 6), (char *)a2);
  }
LABEL_73:
  if (this != (SnippetUI::SimpleItem_Player *)&SnippetUI::_SimpleItem_Player_default_instance_)
  {
    v57 = (SnippetUI::TextProperty *)*((_QWORD *)this + 11);
    if (v57)
    {
      if ((unint64_t)a2 >= *(_QWORD *)a3)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
        v57 = (SnippetUI::TextProperty *)*((_QWORD *)this + 11);
      }
      *(_BYTE *)a2 = 66;
      v58 = *((_DWORD *)v57 + 15);
      if (v58 > 0x7F)
      {
        *((_BYTE *)a2 + 1) = v58 | 0x80;
        v60 = v58 >> 7;
        if (v58 >> 14)
        {
          v61 = (char *)a2 + 2;
          do
          {
            v62 = v61;
            *v61++ = v60 | 0x80;
            v63 = v60 >> 7;
            v64 = v60 >> 14;
            v60 >>= 7;
          }
          while (v64);
          v59 = (google::protobuf::UnknownFieldSet *)(v62 + 2);
          *v61 = v63;
        }
        else
        {
          *((_BYTE *)a2 + 2) = v60;
          v59 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
        }
      }
      else
      {
        *((_BYTE *)a2 + 1) = v58;
        v59 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
      }
      a2 = SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v57, v59, a3, a4);
    }
  }
  v65 = *((_QWORD *)this + 1);
  if ((v65 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v65 & 0xFFFFFFFFFFFFFFFELL), a2, a3, a4);
  else
    return a2;
}

void SnippetUI::SimpleItem_Player::CopyFrom(SnippetUI::SimpleItem_Player *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::SimpleItem_Player::Clear(this);
    SnippetUI::SimpleItem_Player::MergeFrom(this, a2);
  }
}

void SnippetUI::SimpleItem_Player::MergeFrom(SnippetUI::SimpleItem_Player *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::SimpleItem_Player *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SimpleItem.pb.cc", 2990);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::SimpleItem_Player::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BF995C28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::SimpleItem_Player::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 96) = a2;
  return this;
}

uint64_t SnippetUI::SimpleItem_Player::GetMetadata(SnippetUI::SimpleItem_Player *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_SimpleItem_2eproto);
  return qword_1EF581DE8;
}

void InitDefaultsscc_info_SimpleItem_Visual_SimpleItem_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SimpleItem.pb.cc", a4);
  SnippetUI::SimpleItem_Visual::SimpleItem_Visual((SnippetUI::SimpleItem_Visual *)&SnippetUI::_SimpleItem_Visual_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_SimpleItem_Visual_default_instance_, v4);
  qword_1ED1D4320 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
  unk_1ED1D4328 = &SnippetUI::_TextProperty_default_instance_;
}

SnippetUI::SimpleItem_Visual *SnippetUI::SimpleItem_Visual::SimpleItem_Visual(SnippetUI::SimpleItem_Visual *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)this = &off_1E7930698;
  *((_DWORD *)this + 18) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (atomic_load(scc_info_SimpleItem_Visual_SimpleItem_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SimpleItem_Visual_SimpleItem_2eproto);
  *((_QWORD *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  return this;
}

void sub_1BF995D50(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v1 + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

void SnippetUI::SimpleItem_Visual::~SimpleItem_Visual(SnippetUI::SimpleItem_Visual *this)
{
  SnippetUI::SimpleItem_Visual::~SimpleItem_Visual(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E7930698;
  v2 = *((_QWORD *)this + 5);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 6);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1C3B8D890](v4, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::SimpleItem_Visual *)&SnippetUI::_SimpleItem_Visual_default_instance_)
  {
    v6 = *((_QWORD *)this + 7);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = *((_QWORD *)this + 8);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((SnippetUI::SimpleItem_Visual *)((char *)this + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::SimpleItem_Visual *SnippetUI::SimpleItem_Visual::New(SnippetUI::SimpleItem_Visual *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SimpleItem_Visual>(0);
}

SnippetUI::SimpleItem_Visual *SnippetUI::SimpleItem_Visual::New(SnippetUI::SimpleItem_Visual *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SimpleItem_Visual>(a2);
}

void SnippetUI::SimpleItem_Visual::Clear(SnippetUI::SimpleItem_Visual *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  google::protobuf::internal::InternalMetadataWithArena *v6;
  char v7;

  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualProperty>::TypeHandler>((uint64_t)this + 16);
  v2 = *((_QWORD *)this + 5);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 6);
  if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
  v4 = *((_QWORD *)this + 7);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 7) = 0;
  v5 = *((_QWORD *)this + 8);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v7 = *((_BYTE *)this + 8);
  v6 = (SnippetUI::SimpleItem_Visual *)((char *)this + 8);
  *((_QWORD *)v6 + 7) = 0;
  if ((v7 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v6);
}

uint64_t SnippetUI::SimpleItem_Visual::IsInitialized(SnippetUI::SimpleItem_Visual *this)
{
  return 1;
}

char *SnippetUI::SimpleItem_Visual::ByteSizeLong(SnippetUI::SimpleItem_Visual *this)
{
  const google::protobuf::UnknownFieldSet *v2;
  uint64_t v3;
  SnippetUI::VisualProperty **v4;
  uint64_t v5;
  SnippetUI::VisualProperty *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  SnippetUI::ActionProperty *v14;
  char *v15;
  SnippetUI::TextProperty *v16;
  char *v17;

  v2 = (const google::protobuf::UnknownFieldSet *)*((int *)this + 6);
  v3 = *((_QWORD *)this + 4);
  if (v3)
    v4 = (SnippetUI::VisualProperty **)(v3 + 8);
  else
    v4 = 0;
  if ((_DWORD)v2)
  {
    v5 = 8 * (_QWORD)v2;
    do
    {
      v6 = *v4++;
      v7 = SnippetUI::VisualProperty::ByteSizeLong(v6);
      v2 = (const google::protobuf::UnknownFieldSet *)((char *)v2
                                                     + (_QWORD)v7
                                                     + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6));
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    v2 = 0;
  }
  v8 = *((_QWORD *)this + 5);
  v9 = *(unsigned __int8 *)(v8 + 23);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(_QWORD *)(v8 + 8))
      goto LABEL_14;
  }
  else if (!*(_BYTE *)(v8 + 23))
  {
    goto LABEL_14;
  }
  v10 = *(_QWORD *)(v8 + 8);
  if ((v9 & 0x80u) == 0)
    v10 = v9;
  v2 = (const google::protobuf::UnknownFieldSet *)((char *)v2 + v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_14:
  v11 = *((_QWORD *)this + 6);
  v12 = *(unsigned __int8 *)(v11 + 23);
  if (*(char *)(v11 + 23) < 0)
  {
    if (!*(_QWORD *)(v11 + 8))
      goto LABEL_19;
  }
  else if (!*(_BYTE *)(v11 + 23))
  {
    goto LABEL_19;
  }
  v13 = *(_QWORD *)(v11 + 8);
  if ((v12 & 0x80u) == 0)
    v13 = v12;
  v2 = (const google::protobuf::UnknownFieldSet *)((char *)v2 + v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_19:
  if (this != (SnippetUI::SimpleItem_Visual *)&SnippetUI::_SimpleItem_Visual_default_instance_)
  {
    v14 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 7);
    if (v14)
    {
      v15 = SnippetUI::ActionProperty::ByteSizeLong(v14);
      v2 = (const google::protobuf::UnknownFieldSet *)&v15[(_QWORD)v2
                                                         + 1
                                                         + ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 8);
    if (v16)
    {
      v17 = SnippetUI::TextProperty::ByteSizeLong(v16);
      v2 = (const google::protobuf::UnknownFieldSet *)&v17[(_QWORD)v2
                                                         + 1
                                                         + ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::SimpleItem_Visual *)((char *)this + 8), v2, (_DWORD *)this + 18);
  *((_DWORD *)this + 18) = (_DWORD)v2;
  return (char *)v2;
}

uint64_t SnippetUI::SimpleItem_Visual::GetCachedSize(SnippetUI::SimpleItem_Visual *this)
{
  return *((unsigned int *)this + 18);
}

google::protobuf::internal *SnippetUI::SimpleItem_Visual::_InternalParse(SnippetUI::SimpleItem_Visual *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  std::string **v6;
  unsigned int *v7;
  uint64_t *v8;
  google::protobuf::internal::ParseContext *v9;
  google::protobuf::internal *TagFallback;
  char *v11;
  char *v12;
  google::protobuf::internal *v13;
  int *v14;
  uint64_t v15;
  int v16;
  SnippetUI::VisualProperty *v17;
  uint64_t v18;
  uint64_t v19;
  SnippetUI::ActionProperty *v20;
  char *v21;
  SnippetUI::TextProperty *v22;
  std::string *v23;
  std::string::value_type *v24;
  google::protobuf::internal::ParseContext *v25;
  char *v26;
  BOOL v27;
  google::protobuf::internal *v29;

  v29 = a2;
  v5 = (std::string **)((char *)this + 48);
  v6 = (std::string **)((char *)this + 40);
  v7 = (unsigned int *)((char *)this + 16);
  v8 = (uint64_t *)((char *)this + 8);
LABEL_2:
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v29, *((_DWORD *)a3 + 23)) & 1) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v29 + 1);
      v11 = (char *)*(unsigned __int8 *)v29;
      if (*(char *)v29 < 0)
      {
        v11 = (char *)(v11 + (*(unsigned __int8 *)TagFallback << 7) - 128);
        if (*(char *)TagFallback < 0)
        {
          TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v29, v11);
          v29 = TagFallback;
          if (!TagFallback)
            return TagFallback;
LABEL_7:
          switch(v11 >> 3)
          {
            case 1u:
              if (v11 != 10)
                goto LABEL_38;
              v12 = (char *)TagFallback - 1;
              break;
            case 2u:
              if (v11 != 18)
                goto LABEL_38;
              v20 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 7);
              if (!v20)
              {
                v20 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
                *((_QWORD *)this + 7) = v20;
                TagFallback = v29;
              }
              v21 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v20, TagFallback);
              goto LABEL_43;
            case 3u:
              if (v11 != 26)
                goto LABEL_38;
              v22 = (SnippetUI::TextProperty *)*((_QWORD *)this + 8);
              if (!v22)
              {
                v22 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
                *((_QWORD *)this + 8) = v22;
                TagFallback = v29;
              }
              v21 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v22, TagFallback);
              goto LABEL_43;
            case 4u:
              if (v11 != 34)
                goto LABEL_38;
              v23 = *v6;
              if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              {
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
                v23 = *v6;
                TagFallback = v29;
              }
              v24 = (std::string::value_type *)TagFallback;
              v25 = a3;
              v26 = "SnippetUI.SimpleItem_Visual.component_name";
              goto LABEL_37;
            case 5u:
              if (v11 != 42)
                goto LABEL_38;
              v23 = *v5;
              if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              {
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
                v23 = *v5;
                TagFallback = v29;
              }
              v24 = (std::string::value_type *)TagFallback;
              v25 = a3;
              v26 = "SnippetUI.SimpleItem_Visual.link_identifier";
LABEL_37:
              v21 = google::protobuf::internal::InlineGreedyStringParserUTF8(v23, v24, (uint64_t)v25, (google::protobuf::internal *)v26);
              goto LABEL_43;
            default:
LABEL_38:
              if ((_DWORD)v11)
                v27 = (v11 & 7) == 4;
              else
                v27 = 1;
              if (v27)
              {
                *((_DWORD *)a3 + 20) = (_DWORD)v11 - 1;
                return TagFallback;
              }
              v21 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v11, v8, TagFallback, a3, v9);
LABEL_43:
              v29 = (google::protobuf::internal *)v21;
              if (!v21)
                return 0;
              continue;
          }
          while (1)
          {
            v13 = (google::protobuf::internal *)(v12 + 1);
            v29 = (google::protobuf::internal *)(v12 + 1);
            v14 = (int *)*((_QWORD *)this + 4);
            if (!v14)
              break;
            v15 = *((int *)this + 6);
            v16 = *v14;
            if ((int)v15 >= *v14)
            {
              if (v16 == *((_DWORD *)this + 7))
              {
LABEL_15:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v7, v16 + 1);
                v14 = (int *)*((_QWORD *)this + 4);
                v16 = *v14;
              }
              *v14 = v16 + 1;
              v17 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(*((google::protobuf::internal::ArenaImpl **)this
                                                                                           + 2));
              v18 = *((_QWORD *)this + 4);
              v19 = *((int *)this + 6);
              *((_DWORD *)this + 6) = v19 + 1;
              *(_QWORD *)(v18 + 8 * v19 + 8) = v17;
              v13 = v29;
              goto LABEL_17;
            }
            *((_DWORD *)this + 6) = v15 + 1;
            v17 = *(SnippetUI::VisualProperty **)&v14[2 * v15 + 2];
LABEL_17:
            v12 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::VisualProperty>(a3, v17, v13);
            v29 = (google::protobuf::internal *)v12;
            if (!v12)
              return 0;
            if (*(_QWORD *)a3 <= (unint64_t)v12 || *v12 != 10)
              goto LABEL_2;
          }
          v16 = *((_DWORD *)this + 7);
          goto LABEL_15;
        }
        TagFallback = (google::protobuf::internal *)((char *)v29 + 2);
      }
      v29 = TagFallback;
      goto LABEL_7;
    }
    return v29;
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::SimpleItem_Visual::InternalSerializeWithCachedSizesToArray(SnippetUI::SimpleItem_Visual *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v7;
  int v8;
  std::string *v9;
  std::string *v10;
  SnippetUI::VisualProperty *v11;
  unsigned int v12;
  google::protobuf::UnknownFieldSet *v13;
  unsigned int v14;
  _BYTE *v15;
  _BYTE *v16;
  unsigned int v17;
  unsigned int v18;
  SnippetUI::ActionProperty *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  google::protobuf::UnknownFieldSet *v23;
  _BYTE *v24;
  _BYTE *v25;
  unsigned int v26;
  unsigned int v27;
  SnippetUI::TextProperty *v28;
  unsigned int v29;
  google::protobuf::UnknownFieldSet *v30;
  unsigned int v31;
  _BYTE *v32;
  _BYTE *v33;
  unsigned int v34;
  unsigned int v35;
  google::protobuf::internal *v36;
  const char *v37;
  google::protobuf::internal *v38;
  const char *v39;
  uint64_t v40;
  char v42;
  std::string v43[2];

  v7 = *((_DWORD *)this + 6);
  if (v7)
  {
    v8 = 0;
    while ((unint64_t)a2 < *(_QWORD *)a3)
    {
      if (v8 < 0)
        goto LABEL_5;
LABEL_6:
      if (*((_DWORD *)this + 6) <= v8)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v43, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1539);
        v10 = google::protobuf::internal::LogMessage::operator<<(v43, "CHECK failed: (index) < (current_size_): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v42, (const char **)&v10->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v43[0].__r_.__value_.__l.__data_);
      }
      v11 = *(SnippetUI::VisualProperty **)(*((_QWORD *)this + 4) + 8 * v8 + 8);
      *(_BYTE *)a2 = 10;
      v12 = *((_DWORD *)v11 + 15);
      if (v12 > 0x7F)
      {
        *((_BYTE *)a2 + 1) = v12 | 0x80;
        v14 = v12 >> 7;
        if (v12 >> 14)
        {
          v15 = (char *)a2 + 2;
          do
          {
            v16 = v15;
            *v15++ = v14 | 0x80;
            v17 = v14 >> 7;
            v18 = v14 >> 14;
            v14 >>= 7;
          }
          while (v18);
          v13 = (google::protobuf::UnknownFieldSet *)(v16 + 2);
          *v15 = v17;
        }
        else
        {
          *((_BYTE *)a2 + 2) = v14;
          v13 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
        }
      }
      else
      {
        *((_BYTE *)a2 + 1) = v12;
        v13 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
      }
      a2 = SnippetUI::VisualProperty::InternalSerializeWithCachedSizesToArray(v11, v13, a3, a4);
      if (++v8 == v7)
        goto LABEL_19;
    }
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_6;
LABEL_5:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v43, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v9 = google::protobuf::internal::LogMessage::operator<<(v43, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v42, (const char **)&v9->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v43[0].__r_.__value_.__l.__data_);
    goto LABEL_6;
  }
LABEL_19:
  if (this != (SnippetUI::SimpleItem_Visual *)&SnippetUI::_SimpleItem_Visual_default_instance_)
  {
    v19 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 7);
    if (!v19)
      goto LABEL_32;
    if ((unint64_t)a2 >= *(_QWORD *)a3)
    {
      a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v19 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 7);
    }
    *(_BYTE *)a2 = 18;
    v20 = *((_DWORD *)v19 + 12);
    if (v20 > 0x7F)
    {
      *((_BYTE *)a2 + 1) = v20 | 0x80;
      v22 = v20 >> 7;
      if (v20 >> 14)
      {
        v24 = (char *)a2 + 2;
        do
        {
          v25 = v24;
          *v24++ = v22 | 0x80;
          v26 = v22 >> 7;
          v27 = v22 >> 14;
          v22 >>= 7;
        }
        while (v27);
        v23 = (google::protobuf::UnknownFieldSet *)(v25 + 2);
        *v24 = v26;
        goto LABEL_31;
      }
      *((_BYTE *)a2 + 2) = v22;
      v21 = 3;
    }
    else
    {
      *((_BYTE *)a2 + 1) = v20;
      v21 = 2;
    }
    v23 = (google::protobuf::UnknownFieldSet *)((char *)a2 + v21);
LABEL_31:
    a2 = SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v19, v23, a3, a4);
LABEL_32:
    v28 = (SnippetUI::TextProperty *)*((_QWORD *)this + 8);
    if (v28)
    {
      if ((unint64_t)a2 >= *(_QWORD *)a3)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
        v28 = (SnippetUI::TextProperty *)*((_QWORD *)this + 8);
      }
      *(_BYTE *)a2 = 26;
      v29 = *((_DWORD *)v28 + 15);
      if (v29 > 0x7F)
      {
        *((_BYTE *)a2 + 1) = v29 | 0x80;
        v31 = v29 >> 7;
        if (v29 >> 14)
        {
          v32 = (char *)a2 + 2;
          do
          {
            v33 = v32;
            *v32++ = v31 | 0x80;
            v34 = v31 >> 7;
            v35 = v31 >> 14;
            v31 >>= 7;
          }
          while (v35);
          v30 = (google::protobuf::UnknownFieldSet *)(v33 + 2);
          *v32 = v34;
        }
        else
        {
          *((_BYTE *)a2 + 2) = v31;
          v30 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
        }
      }
      else
      {
        *((_BYTE *)a2 + 1) = v29;
        v30 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
      }
      a2 = SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v28, v30, a3, a4);
    }
  }
  v36 = (google::protobuf::internal *)*((_QWORD *)this + 5);
  if (*((char *)v36 + 23) < 0)
  {
    v37 = (const char *)*((_QWORD *)v36 + 1);
    if (!v37)
      goto LABEL_49;
    v36 = *(google::protobuf::internal **)v36;
    goto LABEL_48;
  }
  v37 = (const char *)*((unsigned __int8 *)v36 + 23);
  if (*((_BYTE *)v36 + 23))
  {
LABEL_48:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v36, v37, 1, (google::protobuf::internal *)"SnippetUI.SimpleItem_Visual.component_name");
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 4, *((_QWORD *)this + 5), (char *)a2);
  }
LABEL_49:
  v38 = (google::protobuf::internal *)*((_QWORD *)this + 6);
  if (*((char *)v38 + 23) < 0)
  {
    v39 = (const char *)*((_QWORD *)v38 + 1);
    if (!v39)
      goto LABEL_55;
    v38 = *(google::protobuf::internal **)v38;
    goto LABEL_54;
  }
  v39 = (const char *)*((unsigned __int8 *)v38 + 23);
  if (*((_BYTE *)v38 + 23))
  {
LABEL_54:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v38, v39, 1, (google::protobuf::internal *)"SnippetUI.SimpleItem_Visual.link_identifier");
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 5, *((_QWORD *)this + 6), (char *)a2);
  }
LABEL_55:
  v40 = *((_QWORD *)this + 1);
  if ((v40 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v40 & 0xFFFFFFFFFFFFFFFELL), a2, a3, a4);
  else
    return a2;
}

void sub_1BF9966F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::SimpleItem_Visual::CopyFrom(SnippetUI::SimpleItem_Visual *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::SimpleItem_Visual::Clear(this);
    SnippetUI::SimpleItem_Visual::MergeFrom(this, a2);
  }
}

void SnippetUI::SimpleItem_Visual::MergeFrom(SnippetUI::SimpleItem_Visual *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::SimpleItem_Visual *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SimpleItem.pb.cc", 2486);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::SimpleItem_Visual::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BF9967F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::SimpleItem_Visual::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 72) = a2;
  return this;
}

uint64_t SnippetUI::SimpleItem_Visual::GetMetadata(SnippetUI::SimpleItem_Visual *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_SimpleItem_2eproto);
  return qword_1EF581DD8;
}

void *SnippetUI::SimpleItem_Visual::default_instance(SnippetUI::SimpleItem_Visual *this)
{
  if (atomic_load(scc_info_SimpleItem_Visual_SimpleItem_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SimpleItem_Visual_SimpleItem_2eproto);
  return &SnippetUI::_SimpleItem_Visual_default_instance_;
}

void SnippetUI::SimpleItem_Visual::MergeFrom(SnippetUI::SimpleItem_Visual *this, const SnippetUI::SimpleItem_Visual *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  int **v10;
  int **v11;
  int **v12;
  int **v13;
  int **v14;
  int **v15;
  char v16;
  std::string v17[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v17, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SimpleItem.pb.cc", 2501);
    v4 = google::protobuf::internal::LogMessage::operator<<(v17, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v16, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v17[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::SimpleItem_Visual *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::VisualProperty>::TypeHandler>((int **)this + 2, (uint64_t)a2 + 16);
  v6 = *((_QWORD *)a2 + 5);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 5);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 5, v6);
    else
      std::string::operator=(*((std::string **)this + 5), (const std::string *)v6);
  }
LABEL_13:
  v8 = *((_QWORD *)a2 + 6);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(_QWORD *)(v8 + 8))
      goto LABEL_21;
  }
  else if (!*(_BYTE *)(v8 + 23))
  {
    goto LABEL_21;
  }
  v9 = (uint64_t *)*((_QWORD *)this + 6);
  if (v9 != (uint64_t *)v8)
  {
    if (v9 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, v8);
    else
      std::string::operator=(*((std::string **)this + 6), (const std::string *)v8);
  }
LABEL_21:
  if (a2 != (const SnippetUI::SimpleItem_Visual *)&SnippetUI::_SimpleItem_Visual_default_instance_)
  {
    v10 = (int **)*((_QWORD *)a2 + 7);
    if (v10)
    {
      v11 = (int **)*((_QWORD *)this + 7);
      if (!v11)
      {
        v11 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((_QWORD *)this + 7) = v11;
        v10 = (int **)*((_QWORD *)a2 + 7);
      }
      if (v10)
        v12 = v10;
      else
        v12 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      SnippetUI::ActionProperty::MergeFrom(v11, v12);
    }
    v13 = (int **)*((_QWORD *)a2 + 8);
    if (v13)
    {
      v14 = (int **)*((_QWORD *)this + 8);
      if (!v14)
      {
        v14 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 8) = v14;
        v13 = (int **)*((_QWORD *)a2 + 8);
      }
      if (v13)
        v15 = v13;
      else
        v15 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v14, v15);
    }
  }
}

void sub_1BF996A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::VisualProperty>::TypeHandler>(int **this, uint64_t a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int ***v13;
  int ***v14;
  int **v15;
  int **v16;
  int **v17;
  google::protobuf::internal::ArenaImpl *v18;
  int v19;
  uint64_t v20;
  int ***v21;
  int ***v22;
  int **v23;
  int **v24;
  int v25;
  int *v26;
  char v27;
  std::string v28[2];

  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    v9 = *this[2];
    v10 = *((int *)this + 2);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (int ***)(v6 + 8);
      v14 = (int ***)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<SnippetUI::VisualProperty>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (int ***)((char *)v8 + v20);
      v22 = (int ***)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(v18);
        google::protobuf::internal::GenericTypeHandler<SnippetUI::VisualProperty>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25)
      *v26 = v25;
  }
}

void sub_1BF996B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<SnippetUI::VisualProperty>::Merge(int **a1, int **a2)
{
  SnippetUI::VisualProperty::MergeFrom(a2, a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualProperty>::TypeHandler>(uint64_t a1)
{
  uint64_t v1;
  SnippetUI::VisualProperty **v3;
  SnippetUI::VisualProperty *v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v1)
  {
    v3 = (SnippetUI::VisualProperty **)(*(_QWORD *)(a1 + 16) + 8);
    do
    {
      v4 = *v3++;
      SnippetUI::VisualProperty::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_1BF996C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::SimpleItem_Visual *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SimpleItem_Visual>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::SimpleItem_Visual *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::SimpleItem_Visual *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x50uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::SimpleItem_Visual>);
    SnippetUI::SimpleItem_Visual::SimpleItem_Visual(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::SimpleItem_Visual *)operator new();
    SnippetUI::SimpleItem_Visual::SimpleItem_Visual(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BF996CD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C40A49539A5);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::SimpleItem_Visual>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void InitDefaultsscc_info_SimpleItem_Standard_SimpleItem_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SimpleItem.pb.cc", a4);
  SnippetUI::SimpleItem_Standard::SimpleItem_Standard((SnippetUI::SimpleItem_Standard *)&SnippetUI::_SimpleItem_Standard_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_SimpleItem_Standard_default_instance_, v4);
  qword_1ED1D5488 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D5490 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D5498 = (uint64_t)&SnippetUI::_MultilineTextProperty_default_instance_;
  unk_1ED1D54A0 = &SnippetUI::_MultilineTextProperty_default_instance_;
  qword_1ED1D54A8 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
  unk_1ED1D54B0 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D54B8 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
}

SnippetUI::SimpleItem_Standard *SnippetUI::SimpleItem_Standard::SimpleItem_Standard(SnippetUI::SimpleItem_Standard *this)
{
  *(_QWORD *)this = &off_1E7930458;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 22) = 0;
  if (atomic_load(scc_info_SimpleItem_Standard_SimpleItem_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SimpleItem_Standard_SimpleItem_2eproto);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_QWORD *)this + 10) = 0;
  return this;
}

void sub_1BF996EE4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::SimpleItem_Standard::~SimpleItem_Standard(SnippetUI::SimpleItem_Standard *this)
{
  SnippetUI::SimpleItem_Standard::~SimpleItem_Standard(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)this = &off_1E7930458;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 3);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1C3B8D890](v4, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::SimpleItem_Standard *)&SnippetUI::_SimpleItem_Standard_default_instance_)
  {
    v6 = *((_QWORD *)this + 4);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = *((_QWORD *)this + 5);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = *((_QWORD *)this + 6);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = *((_QWORD *)this + 7);
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v10 = *((_QWORD *)this + 8);
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v11 = *((_QWORD *)this + 9);
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = *((_QWORD *)this + 10);
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::SimpleItem_Standard *SnippetUI::SimpleItem_Standard::New(SnippetUI::SimpleItem_Standard *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SimpleItem_Standard>(0);
}

SnippetUI::SimpleItem_Standard *SnippetUI::SimpleItem_Standard::New(SnippetUI::SimpleItem_Standard *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SimpleItem_Standard>(a2);
}

void SnippetUI::SimpleItem_Standard::Clear(SnippetUI::SimpleItem_Standard *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  google::protobuf::internal::InternalMetadataWithArena *v11;
  char v12;

  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 3);
  if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
  v4 = *((_QWORD *)this + 4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 4) = 0;
  v5 = *((_QWORD *)this + 5);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *((_QWORD *)this + 5) = 0;
  v6 = *((_QWORD *)this + 6);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *((_QWORD *)this + 6) = 0;
  v7 = *((_QWORD *)this + 7);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  *((_QWORD *)this + 7) = 0;
  v8 = *((_QWORD *)this + 8);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  *((_QWORD *)this + 8) = 0;
  v9 = *((_QWORD *)this + 9);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  *((_QWORD *)this + 9) = 0;
  v10 = *((_QWORD *)this + 10);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v12 = *((_BYTE *)this + 8);
  v11 = (SnippetUI::SimpleItem_Standard *)((char *)this + 8);
  *((_QWORD *)v11 + 9) = 0;
  if ((v12 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v11);
}

uint64_t SnippetUI::SimpleItem_Standard::IsInitialized(SnippetUI::SimpleItem_Standard *this)
{
  return 1;
}

char *SnippetUI::SimpleItem_Standard::ByteSizeLong(SnippetUI::SimpleItem_Standard *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const google::protobuf::UnknownFieldSet *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  SnippetUI::TextProperty *v9;
  char *v10;
  SnippetUI::TextProperty *v11;
  char *v12;
  SnippetUI::MultilineTextProperty *v13;
  char *v14;
  SnippetUI::MultilineTextProperty *v15;
  char *v16;
  SnippetUI::ActionProperty *v17;
  char *v18;
  SnippetUI::TextProperty *v19;
  char *v20;
  SnippetUI::TextProperty *v21;
  char *v22;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  v6 = *((_QWORD *)this + 3);
  v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v8 = *(_QWORD *)(v6 + 8);
  if ((v7 & 0x80u) == 0)
    v8 = v7;
  v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_13:
  if (this != (SnippetUI::SimpleItem_Standard *)&SnippetUI::_SimpleItem_Standard_default_instance_)
  {
    v9 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
    if (v9)
    {
      v10 = SnippetUI::TextProperty::ByteSizeLong(v9);
      v5 = (const google::protobuf::UnknownFieldSet *)&v10[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
    if (v11)
    {
      v12 = SnippetUI::TextProperty::ByteSizeLong(v11);
      v5 = (const google::protobuf::UnknownFieldSet *)&v12[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v13 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 6);
    if (v13)
    {
      v14 = SnippetUI::MultilineTextProperty::ByteSizeLong(v13);
      v5 = (const google::protobuf::UnknownFieldSet *)&v14[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v15 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 7);
    if (v15)
    {
      v16 = SnippetUI::MultilineTextProperty::ByteSizeLong(v15);
      v5 = (const google::protobuf::UnknownFieldSet *)&v16[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v17 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 8);
    if (v17)
    {
      v18 = SnippetUI::ActionProperty::ByteSizeLong(v17);
      v5 = (const google::protobuf::UnknownFieldSet *)&v18[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v18 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v19 = (SnippetUI::TextProperty *)*((_QWORD *)this + 9);
    if (v19)
    {
      v20 = SnippetUI::TextProperty::ByteSizeLong(v19);
      v5 = (const google::protobuf::UnknownFieldSet *)&v20[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v21 = (SnippetUI::TextProperty *)*((_QWORD *)this + 10);
    if (v21)
    {
      v22 = SnippetUI::TextProperty::ByteSizeLong(v21);
      v5 = (const google::protobuf::UnknownFieldSet *)&v22[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::SimpleItem_Standard *)((char *)this + 8), v5, (_DWORD *)this + 22);
  *((_DWORD *)this + 22) = (_DWORD)v5;
  return (char *)v5;
}

uint64_t SnippetUI::SimpleItem_Standard::GetCachedSize(SnippetUI::SimpleItem_Standard *this)
{
  return *((unsigned int *)this + 22);
}

google::protobuf::internal *SnippetUI::SimpleItem_Standard::_InternalParse(SnippetUI::SimpleItem_Standard *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  std::string **v6;
  uint64_t *v7;
  google::protobuf::internal::ParseContext *v8;
  google::protobuf::internal *TagFallback;
  char *v10;
  SnippetUI::TextProperty *v11;
  SnippetUI::MultilineTextProperty *v12;
  char *v13;
  SnippetUI::ActionProperty *v14;
  std::string *v15;
  std::string::value_type *v16;
  google::protobuf::internal::ParseContext *v17;
  char *v18;
  BOOL v19;
  google::protobuf::internal *v21;

  v21 = a2;
  v5 = (std::string **)((char *)this + 24);
  v6 = (std::string **)((char *)this + 16);
  v7 = (uint64_t *)((char *)this + 8);
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v21, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v21;
    TagFallback = (google::protobuf::internal *)((char *)v21 + 1);
    v10 = (char *)*(unsigned __int8 *)v21;
    if ((*(char *)v21 & 0x80000000) == 0)
      goto LABEL_6;
    v10 = (char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v21 + 2);
LABEL_6:
      v21 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v21, v10);
    v21 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    switch(v10 >> 3)
    {
      case 1u:
        if (v10 != 10)
          goto LABEL_45;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
        if (v11)
          goto LABEL_39;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 4) = v11;
        goto LABEL_38;
      case 2u:
        if (v10 != 18)
          goto LABEL_45;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
        if (v11)
          goto LABEL_39;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 5) = v11;
        goto LABEL_38;
      case 3u:
        if (v10 != 26)
          goto LABEL_45;
        v12 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 6);
        if (v12)
          goto LABEL_23;
        v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((_QWORD *)this + 6) = v12;
        goto LABEL_22;
      case 4u:
        if (v10 != 34)
          goto LABEL_45;
        v12 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 7);
        if (v12)
          goto LABEL_23;
        v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((_QWORD *)this + 7) = v12;
LABEL_22:
        TagFallback = v21;
LABEL_23:
        v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::MultilineTextProperty>(a3, v12, TagFallback);
        goto LABEL_50;
      case 5u:
        if (v10 != 42)
          goto LABEL_45;
        v14 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 8);
        if (!v14)
        {
          v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((_QWORD *)this + 8) = v14;
          TagFallback = v21;
        }
        v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v14, TagFallback);
        goto LABEL_50;
      case 6u:
        if (v10 != 50)
          goto LABEL_45;
        v15 = *v6;
        if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v15 = *v6;
          TagFallback = v21;
        }
        v16 = (std::string::value_type *)TagFallback;
        v17 = a3;
        v18 = "SnippetUI.SimpleItem_Standard.component_name";
        goto LABEL_44;
      case 7u:
        if (v10 != 58)
          goto LABEL_45;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 9);
        if (v11)
          goto LABEL_39;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 9) = v11;
        goto LABEL_38;
      case 8u:
        if (v10 != 66)
          goto LABEL_45;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 10);
        if (v11)
          goto LABEL_39;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 10) = v11;
LABEL_38:
        TagFallback = v21;
LABEL_39:
        v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v11, TagFallback);
        goto LABEL_50;
      case 9u:
        if (v10 != 74)
          goto LABEL_45;
        v15 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v15 = *v5;
          TagFallback = v21;
        }
        v16 = (std::string::value_type *)TagFallback;
        v17 = a3;
        v18 = "SnippetUI.SimpleItem_Standard.link_identifier";
LABEL_44:
        v13 = google::protobuf::internal::InlineGreedyStringParserUTF8(v15, v16, (uint64_t)v17, (google::protobuf::internal *)v18);
        goto LABEL_50;
      default:
LABEL_45:
        if ((_DWORD)v10)
          v19 = (v10 & 7) == 4;
        else
          v19 = 1;
        if (v19)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v10 - 1;
          return TagFallback;
        }
        v13 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v7, TagFallback, a3, v8);
LABEL_50:
        v21 = (google::protobuf::internal *)v13;
        if (v13)
          continue;
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::SimpleItem_Standard::InternalSerializeWithCachedSizesToArray(SnippetUI::SimpleItem_Standard *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  SnippetUI::TextProperty *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  google::protobuf::UnknownFieldSet *v11;
  _BYTE *v12;
  _BYTE *v13;
  unsigned int v14;
  unsigned int v15;
  SnippetUI::TextProperty *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  google::protobuf::UnknownFieldSet *v20;
  _BYTE *v21;
  _BYTE *v22;
  unsigned int v23;
  unsigned int v24;
  SnippetUI::MultilineTextProperty *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  google::protobuf::UnknownFieldSet *v29;
  _BYTE *v30;
  _BYTE *v31;
  unsigned int v32;
  unsigned int v33;
  SnippetUI::MultilineTextProperty *v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  google::protobuf::UnknownFieldSet *v38;
  _BYTE *v39;
  _BYTE *v40;
  unsigned int v41;
  unsigned int v42;
  SnippetUI::ActionProperty *v43;
  unsigned int v44;
  google::protobuf::UnknownFieldSet *v45;
  unsigned int v46;
  _BYTE *v47;
  _BYTE *v48;
  unsigned int v49;
  unsigned int v50;
  google::protobuf::internal *v51;
  const char *v52;
  SnippetUI::TextProperty *v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;
  google::protobuf::UnknownFieldSet *v57;
  _BYTE *v58;
  _BYTE *v59;
  unsigned int v60;
  unsigned int v61;
  SnippetUI::TextProperty *v62;
  unsigned int v63;
  google::protobuf::UnknownFieldSet *v64;
  unsigned int v65;
  _BYTE *v66;
  _BYTE *v67;
  unsigned int v68;
  unsigned int v69;
  google::protobuf::internal *v70;
  const char *v71;
  uint64_t v72;

  v5 = (char *)a2;
  if (this == (SnippetUI::SimpleItem_Standard *)&SnippetUI::_SimpleItem_Standard_default_instance_)
    goto LABEL_61;
  v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
  if (v7)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
    }
    *v5 = 10;
    v8 = *((_DWORD *)v7 + 15);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v12 = v5 + 2;
        do
        {
          v13 = v12;
          *v12++ = v10 | 0x80;
          v14 = v10 >> 7;
          v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        v11 = (google::protobuf::UnknownFieldSet *)(v13 + 2);
        *v12 = v14;
        goto LABEL_13;
      }
      v5[2] = v10;
      v9 = 3;
    }
    else
    {
      v5[1] = v8;
      v9 = 2;
    }
    v11 = (google::protobuf::UnknownFieldSet *)&v5[v9];
LABEL_13:
    v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
  if (!v16)
    goto LABEL_26;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
  }
  *v5 = 18;
  v17 = *((_DWORD *)v16 + 15);
  if (v17 > 0x7F)
  {
    v5[1] = v17 | 0x80;
    v19 = v17 >> 7;
    if (v17 >> 14)
    {
      v21 = v5 + 2;
      do
      {
        v22 = v21;
        *v21++ = v19 | 0x80;
        v23 = v19 >> 7;
        v24 = v19 >> 14;
        v19 >>= 7;
      }
      while (v24);
      v20 = (google::protobuf::UnknownFieldSet *)(v22 + 2);
      *v21 = v23;
      goto LABEL_25;
    }
    v5[2] = v19;
    v18 = 3;
  }
  else
  {
    v5[1] = v17;
    v18 = 2;
  }
  v20 = (google::protobuf::UnknownFieldSet *)&v5[v18];
LABEL_25:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v16, v20, a3, a4);
LABEL_26:
  v25 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 6);
  if (!v25)
    goto LABEL_38;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v25 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 6);
  }
  *v5 = 26;
  v26 = *((_DWORD *)v25 + 15);
  if (v26 > 0x7F)
  {
    v5[1] = v26 | 0x80;
    v28 = v26 >> 7;
    if (v26 >> 14)
    {
      v30 = v5 + 2;
      do
      {
        v31 = v30;
        *v30++ = v28 | 0x80;
        v32 = v28 >> 7;
        v33 = v28 >> 14;
        v28 >>= 7;
      }
      while (v33);
      v29 = (google::protobuf::UnknownFieldSet *)(v31 + 2);
      *v30 = v32;
      goto LABEL_37;
    }
    v5[2] = v28;
    v27 = 3;
  }
  else
  {
    v5[1] = v26;
    v27 = 2;
  }
  v29 = (google::protobuf::UnknownFieldSet *)&v5[v27];
LABEL_37:
  v5 = (char *)SnippetUI::MultilineTextProperty::InternalSerializeWithCachedSizesToArray(v25, v29, a3, a4);
LABEL_38:
  v34 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 7);
  if (!v34)
    goto LABEL_50;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v34 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 7);
  }
  *v5 = 34;
  v35 = *((_DWORD *)v34 + 15);
  if (v35 > 0x7F)
  {
    v5[1] = v35 | 0x80;
    v37 = v35 >> 7;
    if (v35 >> 14)
    {
      v39 = v5 + 2;
      do
      {
        v40 = v39;
        *v39++ = v37 | 0x80;
        v41 = v37 >> 7;
        v42 = v37 >> 14;
        v37 >>= 7;
      }
      while (v42);
      v38 = (google::protobuf::UnknownFieldSet *)(v40 + 2);
      *v39 = v41;
      goto LABEL_49;
    }
    v5[2] = v37;
    v36 = 3;
  }
  else
  {
    v5[1] = v35;
    v36 = 2;
  }
  v38 = (google::protobuf::UnknownFieldSet *)&v5[v36];
LABEL_49:
  v5 = (char *)SnippetUI::MultilineTextProperty::InternalSerializeWithCachedSizesToArray(v34, v38, a3, a4);
LABEL_50:
  v43 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 8);
  if (v43)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v43 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 8);
    }
    *v5 = 42;
    v44 = *((_DWORD *)v43 + 12);
    if (v44 > 0x7F)
    {
      v5[1] = v44 | 0x80;
      v46 = v44 >> 7;
      if (v44 >> 14)
      {
        v47 = v5 + 2;
        do
        {
          v48 = v47;
          *v47++ = v46 | 0x80;
          v49 = v46 >> 7;
          v50 = v46 >> 14;
          v46 >>= 7;
        }
        while (v50);
        v45 = (google::protobuf::UnknownFieldSet *)(v48 + 2);
        *v47 = v49;
      }
      else
      {
        v5[2] = v46;
        v45 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v44;
      v45 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v43, v45, a3, a4);
  }
LABEL_61:
  v51 = (google::protobuf::internal *)*((_QWORD *)this + 2);
  if (*((char *)v51 + 23) < 0)
  {
    v52 = (const char *)*((_QWORD *)v51 + 1);
    if (!v52)
      goto LABEL_67;
    v51 = *(google::protobuf::internal **)v51;
    goto LABEL_66;
  }
  v52 = (const char *)*((unsigned __int8 *)v51 + 23);
  if (*((_BYTE *)v51 + 23))
  {
LABEL_66:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v51, v52, 1, (google::protobuf::internal *)"SnippetUI.SimpleItem_Standard.component_name");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 6, *((_QWORD *)this + 2), v5);
  }
LABEL_67:
  if (this == (SnippetUI::SimpleItem_Standard *)&SnippetUI::_SimpleItem_Standard_default_instance_)
    goto LABEL_91;
  v53 = (SnippetUI::TextProperty *)*((_QWORD *)this + 9);
  if (v53)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v53 = (SnippetUI::TextProperty *)*((_QWORD *)this + 9);
    }
    *v5 = 58;
    v54 = *((_DWORD *)v53 + 15);
    if (v54 > 0x7F)
    {
      v5[1] = v54 | 0x80;
      v56 = v54 >> 7;
      if (v54 >> 14)
      {
        v58 = v5 + 2;
        do
        {
          v59 = v58;
          *v58++ = v56 | 0x80;
          v60 = v56 >> 7;
          v61 = v56 >> 14;
          v56 >>= 7;
        }
        while (v61);
        v57 = (google::protobuf::UnknownFieldSet *)(v59 + 2);
        *v58 = v60;
        goto LABEL_79;
      }
      v5[2] = v56;
      v55 = 3;
    }
    else
    {
      v5[1] = v54;
      v55 = 2;
    }
    v57 = (google::protobuf::UnknownFieldSet *)&v5[v55];
LABEL_79:
    v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v53, v57, a3, a4);
  }
  v62 = (SnippetUI::TextProperty *)*((_QWORD *)this + 10);
  if (v62)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v62 = (SnippetUI::TextProperty *)*((_QWORD *)this + 10);
    }
    *v5 = 66;
    v63 = *((_DWORD *)v62 + 15);
    if (v63 > 0x7F)
    {
      v5[1] = v63 | 0x80;
      v65 = v63 >> 7;
      if (v63 >> 14)
      {
        v66 = v5 + 2;
        do
        {
          v67 = v66;
          *v66++ = v65 | 0x80;
          v68 = v65 >> 7;
          v69 = v65 >> 14;
          v65 >>= 7;
        }
        while (v69);
        v64 = (google::protobuf::UnknownFieldSet *)(v67 + 2);
        *v66 = v68;
      }
      else
      {
        v5[2] = v65;
        v64 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v63;
      v64 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v62, v64, a3, a4);
  }
LABEL_91:
  v70 = (google::protobuf::internal *)*((_QWORD *)this + 3);
  if (*((char *)v70 + 23) < 0)
  {
    v71 = (const char *)*((_QWORD *)v70 + 1);
    if (!v71)
      goto LABEL_97;
    v70 = *(google::protobuf::internal **)v70;
    goto LABEL_96;
  }
  v71 = (const char *)*((unsigned __int8 *)v70 + 23);
  if (*((_BYTE *)v70 + 23))
  {
LABEL_96:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v70, v71, 1, (google::protobuf::internal *)"SnippetUI.SimpleItem_Standard.link_identifier");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 9, *((_QWORD *)this + 3), v5);
  }
LABEL_97:
  v72 = *((_QWORD *)this + 1);
  if ((v72 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v72 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)v5;
}

void SnippetUI::SimpleItem_Standard::CopyFrom(SnippetUI::SimpleItem_Standard *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::SimpleItem_Standard::Clear(this);
    SnippetUI::SimpleItem_Standard::MergeFrom(this, a2);
  }
}

void SnippetUI::SimpleItem_Standard::MergeFrom(SnippetUI::SimpleItem_Standard *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::SimpleItem_Standard *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SimpleItem.pb.cc", 841);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::SimpleItem_Standard::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BF997C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::SimpleItem_Standard::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 88) = a2;
  return this;
}

uint64_t SnippetUI::SimpleItem_Standard::GetMetadata(SnippetUI::SimpleItem_Standard *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_SimpleItem_2eproto);
  return file_level_metadata_SimpleItem_2eproto;
}

void *SnippetUI::SimpleItem_Standard::default_instance(SnippetUI::SimpleItem_Standard *this)
{
  if (atomic_load(scc_info_SimpleItem_Standard_SimpleItem_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SimpleItem_Standard_SimpleItem_2eproto);
  return &SnippetUI::_SimpleItem_Standard_default_instance_;
}

void SnippetUI::SimpleItem_Standard::MergeFrom(SnippetUI::SimpleItem_Standard *this, const SnippetUI::SimpleItem_Standard *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  int **v10;
  int **v11;
  int **v12;
  int **v13;
  int **v14;
  int **v15;
  int **v16;
  int **v17;
  int **v18;
  int **v19;
  int **v20;
  int **v21;
  int **v22;
  int **v23;
  int **v24;
  int **v25;
  int **v26;
  int **v27;
  int **v28;
  int **v29;
  int **v30;
  char v31;
  std::string v32[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v32, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SimpleItem.pb.cc", 856);
    v4 = google::protobuf::internal::LogMessage::operator<<(v32, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v31, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v32[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::SimpleItem_Standard *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_QWORD *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v6);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(_QWORD *)(v8 + 8))
      goto LABEL_21;
  }
  else if (!*(_BYTE *)(v8 + 23))
  {
    goto LABEL_21;
  }
  v9 = (uint64_t *)*((_QWORD *)this + 3);
  if (v9 != (uint64_t *)v8)
  {
    if (v9 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
    else
      std::string::operator=(*((std::string **)this + 3), (const std::string *)v8);
  }
LABEL_21:
  if (a2 != (const SnippetUI::SimpleItem_Standard *)&SnippetUI::_SimpleItem_Standard_default_instance_)
  {
    v10 = (int **)*((_QWORD *)a2 + 4);
    if (v10)
    {
      v11 = (int **)*((_QWORD *)this + 4);
      if (!v11)
      {
        v11 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 4) = v11;
        v10 = (int **)*((_QWORD *)a2 + 4);
      }
      if (v10)
        v12 = v10;
      else
        v12 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v11, v12);
    }
    v13 = (int **)*((_QWORD *)a2 + 5);
    if (v13)
    {
      v14 = (int **)*((_QWORD *)this + 5);
      if (!v14)
      {
        v14 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 5) = v14;
        v13 = (int **)*((_QWORD *)a2 + 5);
      }
      if (v13)
        v15 = v13;
      else
        v15 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v14, v15);
    }
    v16 = (int **)*((_QWORD *)a2 + 6);
    if (v16)
    {
      v17 = (int **)*((_QWORD *)this + 6);
      if (!v17)
      {
        v17 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((_QWORD *)this + 6) = v17;
        v16 = (int **)*((_QWORD *)a2 + 6);
      }
      if (v16)
        v18 = v16;
      else
        v18 = (int **)&SnippetUI::_MultilineTextProperty_default_instance_;
      SnippetUI::MultilineTextProperty::MergeFrom(v17, v18);
    }
    v19 = (int **)*((_QWORD *)a2 + 7);
    if (v19)
    {
      v20 = (int **)*((_QWORD *)this + 7);
      if (!v20)
      {
        v20 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((_QWORD *)this + 7) = v20;
        v19 = (int **)*((_QWORD *)a2 + 7);
      }
      if (v19)
        v21 = v19;
      else
        v21 = (int **)&SnippetUI::_MultilineTextProperty_default_instance_;
      SnippetUI::MultilineTextProperty::MergeFrom(v20, v21);
    }
    v22 = (int **)*((_QWORD *)a2 + 8);
    if (v22)
    {
      v23 = (int **)*((_QWORD *)this + 8);
      if (!v23)
      {
        v23 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((_QWORD *)this + 8) = v23;
        v22 = (int **)*((_QWORD *)a2 + 8);
      }
      if (v22)
        v24 = v22;
      else
        v24 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      SnippetUI::ActionProperty::MergeFrom(v23, v24);
    }
    v25 = (int **)*((_QWORD *)a2 + 9);
    if (v25)
    {
      v26 = (int **)*((_QWORD *)this + 9);
      if (!v26)
      {
        v26 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 9) = v26;
        v25 = (int **)*((_QWORD *)a2 + 9);
      }
      if (v25)
        v27 = v25;
      else
        v27 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v26, v27);
    }
    v28 = (int **)*((_QWORD *)a2 + 10);
    if (v28)
    {
      v29 = (int **)*((_QWORD *)this + 10);
      if (!v29)
      {
        v29 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 10) = v29;
        v28 = (int **)*((_QWORD *)a2 + 10);
      }
      if (v28)
        v30 = v28;
      else
        v30 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v29, v30);
    }
  }
}

void sub_1BF997F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::SimpleItem_Standard *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SimpleItem_Standard>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::SimpleItem_Standard *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::SimpleItem_Standard *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x60uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::SimpleItem_Standard>);
    SnippetUI::SimpleItem_Standard::SimpleItem_Standard(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::SimpleItem_Standard *)operator new();
    SnippetUI::SimpleItem_Standard::SimpleItem_Standard(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BF997F9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C404A70EBA6);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::SimpleItem_Standard>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void InitDefaultsscc_info_SimpleItem_RichSearchResult_SimpleItem_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SimpleItem.pb.cc", a4);
  SnippetUI::SimpleItem_RichSearchResult::SimpleItem_RichSearchResult((SnippetUI::SimpleItem_RichSearchResult *)&SnippetUI::_SimpleItem_RichSearchResult_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_SimpleItem_RichSearchResult_default_instance_, v4);
  qword_1EF5844F0 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EF5844F8 = &SnippetUI::_TextProperty_default_instance_;
  qword_1EF584500 = (uint64_t)&SnippetUI::_MultilineTextProperty_default_instance_;
  unk_1EF584508 = &SnippetUI::_TextProperty_default_instance_;
  qword_1EF584510 = (uint64_t)&SnippetUI::_MultilineTextProperty_default_instance_;
  unk_1EF584518 = &SnippetUI::_TextProperty_default_instance_;
  qword_1EF584520 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EF584528 = &SnippetUI::_TextProperty_default_instance_;
  qword_1EF584530 = (uint64_t)&SnippetUI::_VisualProperty_default_instance_;
  unk_1EF584538 = &SnippetUI::_ActionProperty_default_instance_;
}

SnippetUI::SimpleItem_RichSearchResult *SnippetUI::SimpleItem_RichSearchResult::SimpleItem_RichSearchResult(SnippetUI::SimpleItem_RichSearchResult *this)
{
  *(_QWORD *)this = &off_1E7930818;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 28) = 0;
  if (atomic_load(scc_info_SimpleItem_RichSearchResult_SimpleItem_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SimpleItem_RichSearchResult_SimpleItem_2eproto);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  return this;
}

void sub_1BF998218(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::SimpleItem_RichSearchResult::~SimpleItem_RichSearchResult(SnippetUI::SimpleItem_RichSearchResult *this)
{
  SnippetUI::SimpleItem_RichSearchResult::~SimpleItem_RichSearchResult(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)this = &off_1E7930818;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 3);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1C3B8D890](v4, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::SimpleItem_RichSearchResult *)&SnippetUI::_SimpleItem_RichSearchResult_default_instance_)
  {
    v6 = *((_QWORD *)this + 4);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = *((_QWORD *)this + 5);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = *((_QWORD *)this + 6);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = *((_QWORD *)this + 7);
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v10 = *((_QWORD *)this + 8);
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v11 = *((_QWORD *)this + 9);
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = *((_QWORD *)this + 10);
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v13 = *((_QWORD *)this + 11);
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *((_QWORD *)this + 12);
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v15 = *((_QWORD *)this + 13);
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::SimpleItem_RichSearchResult *SnippetUI::SimpleItem_RichSearchResult::New(SnippetUI::SimpleItem_RichSearchResult *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SimpleItem_RichSearchResult>(0);
}

SnippetUI::SimpleItem_RichSearchResult *SnippetUI::SimpleItem_RichSearchResult::New(SnippetUI::SimpleItem_RichSearchResult *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SimpleItem_RichSearchResult>(a2);
}

void SnippetUI::SimpleItem_RichSearchResult::Clear(SnippetUI::SimpleItem_RichSearchResult *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  google::protobuf::internal::InternalMetadataWithArena *v14;
  char v15;

  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 3);
  if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
  v4 = *((_QWORD *)this + 4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 4) = 0;
  v5 = *((_QWORD *)this + 5);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *((_QWORD *)this + 5) = 0;
  v6 = *((_QWORD *)this + 6);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *((_QWORD *)this + 6) = 0;
  v7 = *((_QWORD *)this + 7);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  *((_QWORD *)this + 7) = 0;
  v8 = *((_QWORD *)this + 8);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  *((_QWORD *)this + 8) = 0;
  v9 = *((_QWORD *)this + 9);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  *((_QWORD *)this + 9) = 0;
  v10 = *((_QWORD *)this + 10);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  *((_QWORD *)this + 10) = 0;
  v11 = *((_QWORD *)this + 11);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  *((_QWORD *)this + 11) = 0;
  v12 = *((_QWORD *)this + 12);
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  *((_QWORD *)this + 12) = 0;
  v13 = *((_QWORD *)this + 13);
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15 = *((_BYTE *)this + 8);
  v14 = (SnippetUI::SimpleItem_RichSearchResult *)((char *)this + 8);
  *((_QWORD *)v14 + 12) = 0;
  if ((v15 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v14);
}

uint64_t SnippetUI::SimpleItem_RichSearchResult::IsInitialized(SnippetUI::SimpleItem_RichSearchResult *this)
{
  return 1;
}

char *SnippetUI::SimpleItem_RichSearchResult::ByteSizeLong(SnippetUI::SimpleItem_RichSearchResult *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const google::protobuf::UnknownFieldSet *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  SnippetUI::TextProperty *v9;
  char *v10;
  SnippetUI::TextProperty *v11;
  char *v12;
  SnippetUI::MultilineTextProperty *v13;
  char *v14;
  SnippetUI::TextProperty *v15;
  char *v16;
  SnippetUI::MultilineTextProperty *v17;
  char *v18;
  SnippetUI::TextProperty *v19;
  char *v20;
  SnippetUI::TextProperty *v21;
  char *v22;
  SnippetUI::TextProperty *v23;
  char *v24;
  SnippetUI::VisualProperty *v25;
  char *v26;
  SnippetUI::ActionProperty *v27;
  char *v28;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  v6 = *((_QWORD *)this + 3);
  v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v8 = *(_QWORD *)(v6 + 8);
  if ((v7 & 0x80u) == 0)
    v8 = v7;
  v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_13:
  if (this != (SnippetUI::SimpleItem_RichSearchResult *)&SnippetUI::_SimpleItem_RichSearchResult_default_instance_)
  {
    v9 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
    if (v9)
    {
      v10 = SnippetUI::TextProperty::ByteSizeLong(v9);
      v5 = (const google::protobuf::UnknownFieldSet *)&v10[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
    if (v11)
    {
      v12 = SnippetUI::TextProperty::ByteSizeLong(v11);
      v5 = (const google::protobuf::UnknownFieldSet *)&v12[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v13 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 6);
    if (v13)
    {
      v14 = SnippetUI::MultilineTextProperty::ByteSizeLong(v13);
      v5 = (const google::protobuf::UnknownFieldSet *)&v14[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v15 = (SnippetUI::TextProperty *)*((_QWORD *)this + 7);
    if (v15)
    {
      v16 = SnippetUI::TextProperty::ByteSizeLong(v15);
      v5 = (const google::protobuf::UnknownFieldSet *)&v16[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v17 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 8);
    if (v17)
    {
      v18 = SnippetUI::MultilineTextProperty::ByteSizeLong(v17);
      v5 = (const google::protobuf::UnknownFieldSet *)&v18[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v18 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v19 = (SnippetUI::TextProperty *)*((_QWORD *)this + 9);
    if (v19)
    {
      v20 = SnippetUI::TextProperty::ByteSizeLong(v19);
      v5 = (const google::protobuf::UnknownFieldSet *)&v20[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v21 = (SnippetUI::TextProperty *)*((_QWORD *)this + 10);
    if (v21)
    {
      v22 = SnippetUI::TextProperty::ByteSizeLong(v21);
      v5 = (const google::protobuf::UnknownFieldSet *)&v22[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v23 = (SnippetUI::TextProperty *)*((_QWORD *)this + 11);
    if (v23)
    {
      v24 = SnippetUI::TextProperty::ByteSizeLong(v23);
      v5 = (const google::protobuf::UnknownFieldSet *)&v24[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v24 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v25 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 12);
    if (v25)
    {
      v26 = SnippetUI::VisualProperty::ByteSizeLong(v25);
      v5 = (const google::protobuf::UnknownFieldSet *)&v26[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v26 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v27 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 13);
    if (v27)
    {
      v28 = SnippetUI::ActionProperty::ByteSizeLong(v27);
      v5 = (const google::protobuf::UnknownFieldSet *)&v28[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v28 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::SimpleItem_RichSearchResult *)((char *)this + 8), v5, (_DWORD *)this + 28);
  *((_DWORD *)this + 28) = (_DWORD)v5;
  return (char *)v5;
}

uint64_t SnippetUI::SimpleItem_RichSearchResult::GetCachedSize(SnippetUI::SimpleItem_RichSearchResult *this)
{
  return *((unsigned int *)this + 28);
}

google::protobuf::internal *SnippetUI::SimpleItem_RichSearchResult::_InternalParse(SnippetUI::SimpleItem_RichSearchResult *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  std::string **v6;
  uint64_t *v7;
  google::protobuf::internal::ParseContext *v8;
  google::protobuf::internal *TagFallback;
  char *v10;
  SnippetUI::TextProperty *v11;
  SnippetUI::MultilineTextProperty *v12;
  char *v13;
  SnippetUI::VisualProperty *v14;
  SnippetUI::ActionProperty *v15;
  std::string *v16;
  std::string::value_type *v17;
  google::protobuf::internal::ParseContext *v18;
  char *v19;
  BOOL v20;
  google::protobuf::internal *v22;

  v22 = a2;
  v5 = (std::string **)((char *)this + 24);
  v6 = (std::string **)((char *)this + 16);
  v7 = (uint64_t *)((char *)this + 8);
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v22, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v22;
    TagFallback = (google::protobuf::internal *)((char *)v22 + 1);
    v10 = (char *)*(unsigned __int8 *)v22;
    if ((*(char *)v22 & 0x80000000) == 0)
      goto LABEL_6;
    v10 = (char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v22 + 2);
LABEL_6:
      v22 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v22, v10);
    v22 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    switch(v10 >> 3)
    {
      case 1u:
        if (v10 != 10)
          goto LABEL_55;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
        if (v11)
          goto LABEL_37;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 4) = v11;
        goto LABEL_36;
      case 2u:
        if (v10 != 18)
          goto LABEL_55;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
        if (v11)
          goto LABEL_37;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 5) = v11;
        goto LABEL_36;
      case 3u:
        if (v10 != 26)
          goto LABEL_55;
        v12 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 6);
        if (v12)
          goto LABEL_26;
        v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((_QWORD *)this + 6) = v12;
        goto LABEL_25;
      case 4u:
        if (v10 != 34)
          goto LABEL_55;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 7);
        if (v11)
          goto LABEL_37;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 7) = v11;
        goto LABEL_36;
      case 5u:
        if (v10 != 42)
          goto LABEL_55;
        v12 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 8);
        if (v12)
          goto LABEL_26;
        v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((_QWORD *)this + 8) = v12;
LABEL_25:
        TagFallback = v22;
LABEL_26:
        v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::MultilineTextProperty>(a3, v12, TagFallback);
        goto LABEL_60;
      case 6u:
        if (v10 != 50)
          goto LABEL_55;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 9);
        if (v11)
          goto LABEL_37;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 9) = v11;
        goto LABEL_36;
      case 7u:
        if (v10 != 58)
          goto LABEL_55;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 10);
        if (v11)
          goto LABEL_37;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 10) = v11;
        goto LABEL_36;
      case 8u:
        if (v10 != 66)
          goto LABEL_55;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 11);
        if (v11)
          goto LABEL_37;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 11) = v11;
LABEL_36:
        TagFallback = v22;
LABEL_37:
        v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v11, TagFallback);
        goto LABEL_60;
      case 9u:
        if (v10 != 74)
          goto LABEL_55;
        v14 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 12);
        if (!v14)
        {
          v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
          *((_QWORD *)this + 12) = v14;
          TagFallback = v22;
        }
        v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::VisualProperty>(a3, v14, TagFallback);
        goto LABEL_60;
      case 0xAu:
        if (v10 != 82)
          goto LABEL_55;
        v15 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 13);
        if (!v15)
        {
          v15 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((_QWORD *)this + 13) = v15;
          TagFallback = v22;
        }
        v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v15, TagFallback);
        goto LABEL_60;
      case 0xBu:
        if (v10 != 90)
          goto LABEL_55;
        v16 = *v6;
        if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v16 = *v6;
          TagFallback = v22;
        }
        v17 = (std::string::value_type *)TagFallback;
        v18 = a3;
        v19 = "SnippetUI.SimpleItem_RichSearchResult.component_name";
        goto LABEL_54;
      case 0xCu:
        if (v10 != 98)
          goto LABEL_55;
        v16 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v16 = *v5;
          TagFallback = v22;
        }
        v17 = (std::string::value_type *)TagFallback;
        v18 = a3;
        v19 = "SnippetUI.SimpleItem_RichSearchResult.link_identifier";
LABEL_54:
        v13 = google::protobuf::internal::InlineGreedyStringParserUTF8(v16, v17, (uint64_t)v18, (google::protobuf::internal *)v19);
        goto LABEL_60;
      default:
LABEL_55:
        if ((_DWORD)v10)
          v20 = (v10 & 7) == 4;
        else
          v20 = 1;
        if (v20)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v10 - 1;
          return TagFallback;
        }
        v13 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v7, TagFallback, a3, v8);
LABEL_60:
        v22 = (google::protobuf::internal *)v13;
        if (v13)
          continue;
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::SimpleItem_RichSearchResult::InternalSerializeWithCachedSizesToArray(SnippetUI::SimpleItem_RichSearchResult *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  SnippetUI::TextProperty *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  google::protobuf::UnknownFieldSet *v11;
  _BYTE *v12;
  _BYTE *v13;
  unsigned int v14;
  unsigned int v15;
  SnippetUI::TextProperty *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  google::protobuf::UnknownFieldSet *v20;
  _BYTE *v21;
  _BYTE *v22;
  unsigned int v23;
  unsigned int v24;
  SnippetUI::MultilineTextProperty *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  google::protobuf::UnknownFieldSet *v29;
  _BYTE *v30;
  _BYTE *v31;
  unsigned int v32;
  unsigned int v33;
  SnippetUI::TextProperty *v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  google::protobuf::UnknownFieldSet *v38;
  _BYTE *v39;
  _BYTE *v40;
  unsigned int v41;
  unsigned int v42;
  SnippetUI::MultilineTextProperty *v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  google::protobuf::UnknownFieldSet *v47;
  _BYTE *v48;
  _BYTE *v49;
  unsigned int v50;
  unsigned int v51;
  SnippetUI::TextProperty *v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int v55;
  google::protobuf::UnknownFieldSet *v56;
  _BYTE *v57;
  _BYTE *v58;
  unsigned int v59;
  unsigned int v60;
  SnippetUI::TextProperty *v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int v64;
  google::protobuf::UnknownFieldSet *v65;
  _BYTE *v66;
  _BYTE *v67;
  unsigned int v68;
  unsigned int v69;
  SnippetUI::TextProperty *v70;
  unsigned int v71;
  uint64_t v72;
  unsigned int v73;
  google::protobuf::UnknownFieldSet *v74;
  _BYTE *v75;
  _BYTE *v76;
  unsigned int v77;
  unsigned int v78;
  SnippetUI::VisualProperty *v79;
  unsigned int v80;
  uint64_t v81;
  unsigned int v82;
  google::protobuf::UnknownFieldSet *v83;
  _BYTE *v84;
  _BYTE *v85;
  unsigned int v86;
  unsigned int v87;
  SnippetUI::ActionProperty *v88;
  unsigned int v89;
  google::protobuf::UnknownFieldSet *v90;
  unsigned int v91;
  _BYTE *v92;
  _BYTE *v93;
  unsigned int v94;
  unsigned int v95;
  google::protobuf::internal *v96;
  const char *v97;
  google::protobuf::internal *v98;
  const char *v99;
  uint64_t v100;

  v5 = (char *)a2;
  if (this == (SnippetUI::SimpleItem_RichSearchResult *)&SnippetUI::_SimpleItem_RichSearchResult_default_instance_)
    goto LABEL_121;
  v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
  if (v7)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
    }
    *v5 = 10;
    v8 = *((_DWORD *)v7 + 15);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v12 = v5 + 2;
        do
        {
          v13 = v12;
          *v12++ = v10 | 0x80;
          v14 = v10 >> 7;
          v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        v11 = (google::protobuf::UnknownFieldSet *)(v13 + 2);
        *v12 = v14;
        goto LABEL_13;
      }
      v5[2] = v10;
      v9 = 3;
    }
    else
    {
      v5[1] = v8;
      v9 = 2;
    }
    v11 = (google::protobuf::UnknownFieldSet *)&v5[v9];
LABEL_13:
    v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
  if (!v16)
    goto LABEL_26;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
  }
  *v5 = 18;
  v17 = *((_DWORD *)v16 + 15);
  if (v17 > 0x7F)
  {
    v5[1] = v17 | 0x80;
    v19 = v17 >> 7;
    if (v17 >> 14)
    {
      v21 = v5 + 2;
      do
      {
        v22 = v21;
        *v21++ = v19 | 0x80;
        v23 = v19 >> 7;
        v24 = v19 >> 14;
        v19 >>= 7;
      }
      while (v24);
      v20 = (google::protobuf::UnknownFieldSet *)(v22 + 2);
      *v21 = v23;
      goto LABEL_25;
    }
    v5[2] = v19;
    v18 = 3;
  }
  else
  {
    v5[1] = v17;
    v18 = 2;
  }
  v20 = (google::protobuf::UnknownFieldSet *)&v5[v18];
LABEL_25:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v16, v20, a3, a4);
LABEL_26:
  v25 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 6);
  if (!v25)
    goto LABEL_38;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v25 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 6);
  }
  *v5 = 26;
  v26 = *((_DWORD *)v25 + 15);
  if (v26 > 0x7F)
  {
    v5[1] = v26 | 0x80;
    v28 = v26 >> 7;
    if (v26 >> 14)
    {
      v30 = v5 + 2;
      do
      {
        v31 = v30;
        *v30++ = v28 | 0x80;
        v32 = v28 >> 7;
        v33 = v28 >> 14;
        v28 >>= 7;
      }
      while (v33);
      v29 = (google::protobuf::UnknownFieldSet *)(v31 + 2);
      *v30 = v32;
      goto LABEL_37;
    }
    v5[2] = v28;
    v27 = 3;
  }
  else
  {
    v5[1] = v26;
    v27 = 2;
  }
  v29 = (google::protobuf::UnknownFieldSet *)&v5[v27];
LABEL_37:
  v5 = (char *)SnippetUI::MultilineTextProperty::InternalSerializeWithCachedSizesToArray(v25, v29, a3, a4);
LABEL_38:
  v34 = (SnippetUI::TextProperty *)*((_QWORD *)this + 7);
  if (!v34)
    goto LABEL_50;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v34 = (SnippetUI::TextProperty *)*((_QWORD *)this + 7);
  }
  *v5 = 34;
  v35 = *((_DWORD *)v34 + 15);
  if (v35 > 0x7F)
  {
    v5[1] = v35 | 0x80;
    v37 = v35 >> 7;
    if (v35 >> 14)
    {
      v39 = v5 + 2;
      do
      {
        v40 = v39;
        *v39++ = v37 | 0x80;
        v41 = v37 >> 7;
        v42 = v37 >> 14;
        v37 >>= 7;
      }
      while (v42);
      v38 = (google::protobuf::UnknownFieldSet *)(v40 + 2);
      *v39 = v41;
      goto LABEL_49;
    }
    v5[2] = v37;
    v36 = 3;
  }
  else
  {
    v5[1] = v35;
    v36 = 2;
  }
  v38 = (google::protobuf::UnknownFieldSet *)&v5[v36];
LABEL_49:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v34, v38, a3, a4);
LABEL_50:
  v43 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 8);
  if (!v43)
    goto LABEL_62;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v43 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 8);
  }
  *v5 = 42;
  v44 = *((_DWORD *)v43 + 15);
  if (v44 > 0x7F)
  {
    v5[1] = v44 | 0x80;
    v46 = v44 >> 7;
    if (v44 >> 14)
    {
      v48 = v5 + 2;
      do
      {
        v49 = v48;
        *v48++ = v46 | 0x80;
        v50 = v46 >> 7;
        v51 = v46 >> 14;
        v46 >>= 7;
      }
      while (v51);
      v47 = (google::protobuf::UnknownFieldSet *)(v49 + 2);
      *v48 = v50;
      goto LABEL_61;
    }
    v5[2] = v46;
    v45 = 3;
  }
  else
  {
    v5[1] = v44;
    v45 = 2;
  }
  v47 = (google::protobuf::UnknownFieldSet *)&v5[v45];
LABEL_61:
  v5 = (char *)SnippetUI::MultilineTextProperty::InternalSerializeWithCachedSizesToArray(v43, v47, a3, a4);
LABEL_62:
  v52 = (SnippetUI::TextProperty *)*((_QWORD *)this + 9);
  if (!v52)
    goto LABEL_74;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v52 = (SnippetUI::TextProperty *)*((_QWORD *)this + 9);
  }
  *v5 = 50;
  v53 = *((_DWORD *)v52 + 15);
  if (v53 > 0x7F)
  {
    v5[1] = v53 | 0x80;
    v55 = v53 >> 7;
    if (v53 >> 14)
    {
      v57 = v5 + 2;
      do
      {
        v58 = v57;
        *v57++ = v55 | 0x80;
        v59 = v55 >> 7;
        v60 = v55 >> 14;
        v55 >>= 7;
      }
      while (v60);
      v56 = (google::protobuf::UnknownFieldSet *)(v58 + 2);
      *v57 = v59;
      goto LABEL_73;
    }
    v5[2] = v55;
    v54 = 3;
  }
  else
  {
    v5[1] = v53;
    v54 = 2;
  }
  v56 = (google::protobuf::UnknownFieldSet *)&v5[v54];
LABEL_73:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v52, v56, a3, a4);
LABEL_74:
  v61 = (SnippetUI::TextProperty *)*((_QWORD *)this + 10);
  if (!v61)
    goto LABEL_86;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v61 = (SnippetUI::TextProperty *)*((_QWORD *)this + 10);
  }
  *v5 = 58;
  v62 = *((_DWORD *)v61 + 15);
  if (v62 > 0x7F)
  {
    v5[1] = v62 | 0x80;
    v64 = v62 >> 7;
    if (v62 >> 14)
    {
      v66 = v5 + 2;
      do
      {
        v67 = v66;
        *v66++ = v64 | 0x80;
        v68 = v64 >> 7;
        v69 = v64 >> 14;
        v64 >>= 7;
      }
      while (v69);
      v65 = (google::protobuf::UnknownFieldSet *)(v67 + 2);
      *v66 = v68;
      goto LABEL_85;
    }
    v5[2] = v64;
    v63 = 3;
  }
  else
  {
    v5[1] = v62;
    v63 = 2;
  }
  v65 = (google::protobuf::UnknownFieldSet *)&v5[v63];
LABEL_85:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v61, v65, a3, a4);
LABEL_86:
  v70 = (SnippetUI::TextProperty *)*((_QWORD *)this + 11);
  if (!v70)
    goto LABEL_98;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v70 = (SnippetUI::TextProperty *)*((_QWORD *)this + 11);
  }
  *v5 = 66;
  v71 = *((_DWORD *)v70 + 15);
  if (v71 > 0x7F)
  {
    v5[1] = v71 | 0x80;
    v73 = v71 >> 7;
    if (v71 >> 14)
    {
      v75 = v5 + 2;
      do
      {
        v76 = v75;
        *v75++ = v73 | 0x80;
        v77 = v73 >> 7;
        v78 = v73 >> 14;
        v73 >>= 7;
      }
      while (v78);
      v74 = (google::protobuf::UnknownFieldSet *)(v76 + 2);
      *v75 = v77;
      goto LABEL_97;
    }
    v5[2] = v73;
    v72 = 3;
  }
  else
  {
    v5[1] = v71;
    v72 = 2;
  }
  v74 = (google::protobuf::UnknownFieldSet *)&v5[v72];
LABEL_97:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v70, v74, a3, a4);
LABEL_98:
  v79 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 12);
  if (!v79)
    goto LABEL_110;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v79 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 12);
  }
  *v5 = 74;
  v80 = *((_DWORD *)v79 + 15);
  if (v80 > 0x7F)
  {
    v5[1] = v80 | 0x80;
    v82 = v80 >> 7;
    if (v80 >> 14)
    {
      v84 = v5 + 2;
      do
      {
        v85 = v84;
        *v84++ = v82 | 0x80;
        v86 = v82 >> 7;
        v87 = v82 >> 14;
        v82 >>= 7;
      }
      while (v87);
      v83 = (google::protobuf::UnknownFieldSet *)(v85 + 2);
      *v84 = v86;
      goto LABEL_109;
    }
    v5[2] = v82;
    v81 = 3;
  }
  else
  {
    v5[1] = v80;
    v81 = 2;
  }
  v83 = (google::protobuf::UnknownFieldSet *)&v5[v81];
LABEL_109:
  v5 = (char *)SnippetUI::VisualProperty::InternalSerializeWithCachedSizesToArray(v79, v83, a3, a4);
LABEL_110:
  v88 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 13);
  if (v88)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v88 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 13);
    }
    *v5 = 82;
    v89 = *((_DWORD *)v88 + 12);
    if (v89 > 0x7F)
    {
      v5[1] = v89 | 0x80;
      v91 = v89 >> 7;
      if (v89 >> 14)
      {
        v92 = v5 + 2;
        do
        {
          v93 = v92;
          *v92++ = v91 | 0x80;
          v94 = v91 >> 7;
          v95 = v91 >> 14;
          v91 >>= 7;
        }
        while (v95);
        v90 = (google::protobuf::UnknownFieldSet *)(v93 + 2);
        *v92 = v94;
      }
      else
      {
        v5[2] = v91;
        v90 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v89;
      v90 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v88, v90, a3, a4);
  }
LABEL_121:
  v96 = (google::protobuf::internal *)*((_QWORD *)this + 2);
  if (*((char *)v96 + 23) < 0)
  {
    v97 = (const char *)*((_QWORD *)v96 + 1);
    if (!v97)
      goto LABEL_127;
    v96 = *(google::protobuf::internal **)v96;
    goto LABEL_126;
  }
  v97 = (const char *)*((unsigned __int8 *)v96 + 23);
  if (*((_BYTE *)v96 + 23))
  {
LABEL_126:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v96, v97, 1, (google::protobuf::internal *)"SnippetUI.SimpleItem_RichSearchResult.component_name");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 11, *((_QWORD *)this + 2), v5);
  }
LABEL_127:
  v98 = (google::protobuf::internal *)*((_QWORD *)this + 3);
  if (*((char *)v98 + 23) < 0)
  {
    v99 = (const char *)*((_QWORD *)v98 + 1);
    if (!v99)
      goto LABEL_133;
    v98 = *(google::protobuf::internal **)v98;
    goto LABEL_132;
  }
  v99 = (const char *)*((unsigned __int8 *)v98 + 23);
  if (*((_BYTE *)v98 + 23))
  {
LABEL_132:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v98, v99, 1, (google::protobuf::internal *)"SnippetUI.SimpleItem_RichSearchResult.link_identifier");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 12, *((_QWORD *)this + 3), v5);
  }
LABEL_133:
  v100 = *((_QWORD *)this + 1);
  if ((v100 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v100 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)v5;
}

void SnippetUI::SimpleItem_RichSearchResult::CopyFrom(SnippetUI::SimpleItem_RichSearchResult *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::SimpleItem_RichSearchResult::Clear(this);
    SnippetUI::SimpleItem_RichSearchResult::MergeFrom(this, a2);
  }
}

void SnippetUI::SimpleItem_RichSearchResult::MergeFrom(SnippetUI::SimpleItem_RichSearchResult *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::SimpleItem_RichSearchResult *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SimpleItem.pb.cc", 3699);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::SimpleItem_RichSearchResult::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BF999290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::SimpleItem_RichSearchResult::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 112) = a2;
  return this;
}

uint64_t SnippetUI::SimpleItem_RichSearchResult::GetMetadata(SnippetUI::SimpleItem_RichSearchResult *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_SimpleItem_2eproto);
  return qword_1EF581DF8;
}

void *SnippetUI::SimpleItem_RichSearchResult::default_instance(SnippetUI::SimpleItem_RichSearchResult *this)
{
  if (atomic_load(scc_info_SimpleItem_RichSearchResult_SimpleItem_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SimpleItem_RichSearchResult_SimpleItem_2eproto);
  return &SnippetUI::_SimpleItem_RichSearchResult_default_instance_;
}

void SnippetUI::SimpleItem_RichSearchResult::MergeFrom(SnippetUI::SimpleItem_RichSearchResult *this, const SnippetUI::SimpleItem_RichSearchResult *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  int **v10;
  int **v11;
  int **v12;
  int **v13;
  int **v14;
  int **v15;
  int **v16;
  int **v17;
  int **v18;
  int **v19;
  int **v20;
  int **v21;
  int **v22;
  int **v23;
  int **v24;
  int **v25;
  int **v26;
  int **v27;
  int **v28;
  int **v29;
  int **v30;
  int **v31;
  int **v32;
  int **v33;
  int **v34;
  int **v35;
  int **v36;
  int **v37;
  int **v38;
  int **v39;
  char v40;
  std::string v41[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v41, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SimpleItem.pb.cc", 3714);
    v4 = google::protobuf::internal::LogMessage::operator<<(v41, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v40, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v41[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::SimpleItem_RichSearchResult *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_QWORD *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v6);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(_QWORD *)(v8 + 8))
      goto LABEL_21;
  }
  else if (!*(_BYTE *)(v8 + 23))
  {
    goto LABEL_21;
  }
  v9 = (uint64_t *)*((_QWORD *)this + 3);
  if (v9 != (uint64_t *)v8)
  {
    if (v9 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
    else
      std::string::operator=(*((std::string **)this + 3), (const std::string *)v8);
  }
LABEL_21:
  if (a2 != (const SnippetUI::SimpleItem_RichSearchResult *)&SnippetUI::_SimpleItem_RichSearchResult_default_instance_)
  {
    v10 = (int **)*((_QWORD *)a2 + 4);
    if (v10)
    {
      v11 = (int **)*((_QWORD *)this + 4);
      if (!v11)
      {
        v11 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 4) = v11;
        v10 = (int **)*((_QWORD *)a2 + 4);
      }
      if (v10)
        v12 = v10;
      else
        v12 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v11, v12);
    }
    v13 = (int **)*((_QWORD *)a2 + 5);
    if (v13)
    {
      v14 = (int **)*((_QWORD *)this + 5);
      if (!v14)
      {
        v14 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 5) = v14;
        v13 = (int **)*((_QWORD *)a2 + 5);
      }
      if (v13)
        v15 = v13;
      else
        v15 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v14, v15);
    }
    v16 = (int **)*((_QWORD *)a2 + 6);
    if (v16)
    {
      v17 = (int **)*((_QWORD *)this + 6);
      if (!v17)
      {
        v17 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((_QWORD *)this + 6) = v17;
        v16 = (int **)*((_QWORD *)a2 + 6);
      }
      if (v16)
        v18 = v16;
      else
        v18 = (int **)&SnippetUI::_MultilineTextProperty_default_instance_;
      SnippetUI::MultilineTextProperty::MergeFrom(v17, v18);
    }
    v19 = (int **)*((_QWORD *)a2 + 7);
    if (v19)
    {
      v20 = (int **)*((_QWORD *)this + 7);
      if (!v20)
      {
        v20 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 7) = v20;
        v19 = (int **)*((_QWORD *)a2 + 7);
      }
      if (v19)
        v21 = v19;
      else
        v21 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v20, v21);
    }
    v22 = (int **)*((_QWORD *)a2 + 8);
    if (v22)
    {
      v23 = (int **)*((_QWORD *)this + 8);
      if (!v23)
      {
        v23 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((_QWORD *)this + 8) = v23;
        v22 = (int **)*((_QWORD *)a2 + 8);
      }
      if (v22)
        v24 = v22;
      else
        v24 = (int **)&SnippetUI::_MultilineTextProperty_default_instance_;
      SnippetUI::MultilineTextProperty::MergeFrom(v23, v24);
    }
    v25 = (int **)*((_QWORD *)a2 + 9);
    if (v25)
    {
      v26 = (int **)*((_QWORD *)this + 9);
      if (!v26)
      {
        v26 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 9) = v26;
        v25 = (int **)*((_QWORD *)a2 + 9);
      }
      if (v25)
        v27 = v25;
      else
        v27 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v26, v27);
    }
    v28 = (int **)*((_QWORD *)a2 + 10);
    if (v28)
    {
      v29 = (int **)*((_QWORD *)this + 10);
      if (!v29)
      {
        v29 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 10) = v29;
        v28 = (int **)*((_QWORD *)a2 + 10);
      }
      if (v28)
        v30 = v28;
      else
        v30 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v29, v30);
    }
    v31 = (int **)*((_QWORD *)a2 + 11);
    if (v31)
    {
      v32 = (int **)*((_QWORD *)this + 11);
      if (!v32)
      {
        v32 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 11) = v32;
        v31 = (int **)*((_QWORD *)a2 + 11);
      }
      if (v31)
        v33 = v31;
      else
        v33 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v32, v33);
    }
    v34 = (int **)*((_QWORD *)a2 + 12);
    if (v34)
    {
      v35 = (int **)*((_QWORD *)this + 12);
      if (!v35)
      {
        v35 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((_QWORD *)this + 12) = v35;
        v34 = (int **)*((_QWORD *)a2 + 12);
      }
      if (v34)
        v36 = v34;
      else
        v36 = (int **)&SnippetUI::_VisualProperty_default_instance_;
      SnippetUI::VisualProperty::MergeFrom(v35, v36);
    }
    v37 = (int **)*((_QWORD *)a2 + 13);
    if (v37)
    {
      v38 = (int **)*((_QWORD *)this + 13);
      if (!v38)
      {
        v38 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((_QWORD *)this + 13) = v38;
        v37 = (int **)*((_QWORD *)a2 + 13);
      }
      if (v37)
        v39 = v37;
      else
        v39 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      SnippetUI::ActionProperty::MergeFrom(v38, v39);
    }
  }
}

void sub_1BF9995F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::SimpleItem_RichSearchResult *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SimpleItem_RichSearchResult>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::SimpleItem_RichSearchResult *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::SimpleItem_RichSearchResult *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x78uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::SimpleItem_RichSearchResult>);
    SnippetUI::SimpleItem_RichSearchResult::SimpleItem_RichSearchResult(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::SimpleItem_RichSearchResult *)operator new();
    SnippetUI::SimpleItem_RichSearchResult::SimpleItem_RichSearchResult(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BF999694(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C40E3061A4BLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::SimpleItem_RichSearchResult>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void InitDefaultsscc_info_SimpleItem_Rich_SimpleItem_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SimpleItem.pb.cc", a4);
  SnippetUI::SimpleItem_Rich::SimpleItem_Rich((SnippetUI::SimpleItem_Rich *)&SnippetUI::_SimpleItem_Rich_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_SimpleItem_Rich_default_instance_, v4);
  qword_1ED1D40A0 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D40A8 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D40B0 = (uint64_t)&SnippetUI::_MultilineTextProperty_default_instance_;
  unk_1ED1D40B8 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D40C0 = (uint64_t)&SnippetUI::_MultilineTextProperty_default_instance_;
  unk_1ED1D40C8 = &SnippetUI::_VisualProperty_default_instance_;
  qword_1ED1D40D0 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
  unk_1ED1D40D8 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D40E0 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D40E8 = &SnippetUI::_TextProperty_default_instance_;
}

SnippetUI::SimpleItem_Rich *SnippetUI::SimpleItem_Rich::SimpleItem_Rich(SnippetUI::SimpleItem_Rich *this)
{
  *(_QWORD *)this = &off_1E7930518;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 28) = 0;
  if (atomic_load(scc_info_SimpleItem_Rich_SimpleItem_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SimpleItem_Rich_SimpleItem_2eproto);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  return this;
}

void sub_1BF99994C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::SimpleItem_Rich::~SimpleItem_Rich(SnippetUI::SimpleItem_Rich *this)
{
  SnippetUI::SimpleItem_Rich::~SimpleItem_Rich(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)this = &off_1E7930518;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 3);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1C3B8D890](v4, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::SimpleItem_Rich *)&SnippetUI::_SimpleItem_Rich_default_instance_)
  {
    v6 = *((_QWORD *)this + 4);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = *((_QWORD *)this + 5);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = *((_QWORD *)this + 6);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = *((_QWORD *)this + 7);
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v10 = *((_QWORD *)this + 8);
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v11 = *((_QWORD *)this + 9);
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = *((_QWORD *)this + 10);
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v13 = *((_QWORD *)this + 11);
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *((_QWORD *)this + 12);
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v15 = *((_QWORD *)this + 13);
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::SimpleItem_Rich *SnippetUI::SimpleItem_Rich::New(SnippetUI::SimpleItem_Rich *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SimpleItem_Rich>(0);
}

SnippetUI::SimpleItem_Rich *SnippetUI::SimpleItem_Rich::New(SnippetUI::SimpleItem_Rich *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SimpleItem_Rich>(a2);
}

void SnippetUI::SimpleItem_Rich::Clear(SnippetUI::SimpleItem_Rich *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  google::protobuf::internal::InternalMetadataWithArena *v14;
  char v15;

  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 3);
  if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
  v4 = *((_QWORD *)this + 4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 4) = 0;
  v5 = *((_QWORD *)this + 5);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *((_QWORD *)this + 5) = 0;
  v6 = *((_QWORD *)this + 6);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *((_QWORD *)this + 6) = 0;
  v7 = *((_QWORD *)this + 7);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  *((_QWORD *)this + 7) = 0;
  v8 = *((_QWORD *)this + 8);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  *((_QWORD *)this + 8) = 0;
  v9 = *((_QWORD *)this + 9);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  *((_QWORD *)this + 9) = 0;
  v10 = *((_QWORD *)this + 10);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  *((_QWORD *)this + 10) = 0;
  v11 = *((_QWORD *)this + 11);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  *((_QWORD *)this + 11) = 0;
  v12 = *((_QWORD *)this + 12);
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  *((_QWORD *)this + 12) = 0;
  v13 = *((_QWORD *)this + 13);
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15 = *((_BYTE *)this + 8);
  v14 = (SnippetUI::SimpleItem_Rich *)((char *)this + 8);
  *((_QWORD *)v14 + 12) = 0;
  if ((v15 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v14);
}

uint64_t SnippetUI::SimpleItem_Rich::IsInitialized(SnippetUI::SimpleItem_Rich *this)
{
  return 1;
}

char *SnippetUI::SimpleItem_Rich::ByteSizeLong(SnippetUI::SimpleItem_Rich *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const google::protobuf::UnknownFieldSet *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  SnippetUI::TextProperty *v9;
  char *v10;
  SnippetUI::TextProperty *v11;
  char *v12;
  SnippetUI::MultilineTextProperty *v13;
  char *v14;
  SnippetUI::TextProperty *v15;
  char *v16;
  SnippetUI::MultilineTextProperty *v17;
  char *v18;
  SnippetUI::VisualProperty *v19;
  char *v20;
  SnippetUI::ActionProperty *v21;
  char *v22;
  SnippetUI::TextProperty *v23;
  char *v24;
  SnippetUI::TextProperty *v25;
  char *v26;
  SnippetUI::TextProperty *v27;
  char *v28;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  v6 = *((_QWORD *)this + 3);
  v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v8 = *(_QWORD *)(v6 + 8);
  if ((v7 & 0x80u) == 0)
    v8 = v7;
  v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_13:
  if (this != (SnippetUI::SimpleItem_Rich *)&SnippetUI::_SimpleItem_Rich_default_instance_)
  {
    v9 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
    if (v9)
    {
      v10 = SnippetUI::TextProperty::ByteSizeLong(v9);
      v5 = (const google::protobuf::UnknownFieldSet *)&v10[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
    if (v11)
    {
      v12 = SnippetUI::TextProperty::ByteSizeLong(v11);
      v5 = (const google::protobuf::UnknownFieldSet *)&v12[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v13 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 6);
    if (v13)
    {
      v14 = SnippetUI::MultilineTextProperty::ByteSizeLong(v13);
      v5 = (const google::protobuf::UnknownFieldSet *)&v14[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v15 = (SnippetUI::TextProperty *)*((_QWORD *)this + 7);
    if (v15)
    {
      v16 = SnippetUI::TextProperty::ByteSizeLong(v15);
      v5 = (const google::protobuf::UnknownFieldSet *)&v16[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v17 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 8);
    if (v17)
    {
      v18 = SnippetUI::MultilineTextProperty::ByteSizeLong(v17);
      v5 = (const google::protobuf::UnknownFieldSet *)&v18[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v18 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v19 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 9);
    if (v19)
    {
      v20 = SnippetUI::VisualProperty::ByteSizeLong(v19);
      v5 = (const google::protobuf::UnknownFieldSet *)&v20[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v21 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 10);
    if (v21)
    {
      v22 = SnippetUI::ActionProperty::ByteSizeLong(v21);
      v5 = (const google::protobuf::UnknownFieldSet *)&v22[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v23 = (SnippetUI::TextProperty *)*((_QWORD *)this + 11);
    if (v23)
    {
      v24 = SnippetUI::TextProperty::ByteSizeLong(v23);
      v5 = (const google::protobuf::UnknownFieldSet *)&v24[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v24 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v25 = (SnippetUI::TextProperty *)*((_QWORD *)this + 12);
    if (v25)
    {
      v26 = SnippetUI::TextProperty::ByteSizeLong(v25);
      v5 = (const google::protobuf::UnknownFieldSet *)&v26[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v26 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v27 = (SnippetUI::TextProperty *)*((_QWORD *)this + 13);
    if (v27)
    {
      v28 = SnippetUI::TextProperty::ByteSizeLong(v27);
      v5 = (const google::protobuf::UnknownFieldSet *)&v28[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v28 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::SimpleItem_Rich *)((char *)this + 8), v5, (_DWORD *)this + 28);
  *((_DWORD *)this + 28) = (_DWORD)v5;
  return (char *)v5;
}

uint64_t SnippetUI::SimpleItem_Rich::GetCachedSize(SnippetUI::SimpleItem_Rich *this)
{
  return *((unsigned int *)this + 28);
}

google::protobuf::internal *SnippetUI::SimpleItem_Rich::_InternalParse(SnippetUI::SimpleItem_Rich *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  std::string **v6;
  uint64_t *v7;
  google::protobuf::internal::ParseContext *v8;
  google::protobuf::internal *TagFallback;
  char *v10;
  SnippetUI::TextProperty *v11;
  SnippetUI::MultilineTextProperty *v12;
  char *v13;
  SnippetUI::VisualProperty *v14;
  SnippetUI::ActionProperty *v15;
  std::string *v16;
  std::string::value_type *v17;
  google::protobuf::internal::ParseContext *v18;
  char *v19;
  BOOL v20;
  google::protobuf::internal *v22;

  v22 = a2;
  v5 = (std::string **)((char *)this + 24);
  v6 = (std::string **)((char *)this + 16);
  v7 = (uint64_t *)((char *)this + 8);
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v22, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v22;
    TagFallback = (google::protobuf::internal *)((char *)v22 + 1);
    v10 = (char *)*(unsigned __int8 *)v22;
    if ((*(char *)v22 & 0x80000000) == 0)
      goto LABEL_6;
    v10 = (char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v22 + 2);
LABEL_6:
      v22 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v22, v10);
    v22 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    switch(v10 >> 3)
    {
      case 1u:
        if (v10 != 10)
          goto LABEL_55;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
        if (v11)
          goto LABEL_49;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 4) = v11;
        goto LABEL_48;
      case 2u:
        if (v10 != 18)
          goto LABEL_55;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
        if (v11)
          goto LABEL_49;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 5) = v11;
        goto LABEL_48;
      case 3u:
        if (v10 != 26)
          goto LABEL_55;
        v12 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 6);
        if (v12)
          goto LABEL_26;
        v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((_QWORD *)this + 6) = v12;
        goto LABEL_25;
      case 4u:
        if (v10 != 34)
          goto LABEL_55;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 7);
        if (v11)
          goto LABEL_49;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 7) = v11;
        goto LABEL_48;
      case 5u:
        if (v10 != 42)
          goto LABEL_55;
        v12 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 8);
        if (v12)
          goto LABEL_26;
        v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((_QWORD *)this + 8) = v12;
LABEL_25:
        TagFallback = v22;
LABEL_26:
        v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::MultilineTextProperty>(a3, v12, TagFallback);
        goto LABEL_60;
      case 6u:
        if (v10 != 50)
          goto LABEL_55;
        v14 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 9);
        if (!v14)
        {
          v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
          *((_QWORD *)this + 9) = v14;
          TagFallback = v22;
        }
        v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::VisualProperty>(a3, v14, TagFallback);
        goto LABEL_60;
      case 7u:
        if (v10 != 58)
          goto LABEL_55;
        v15 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 10);
        if (!v15)
        {
          v15 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((_QWORD *)this + 10) = v15;
          TagFallback = v22;
        }
        v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v15, TagFallback);
        goto LABEL_60;
      case 8u:
        if (v10 != 66)
          goto LABEL_55;
        v16 = *v6;
        if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v16 = *v6;
          TagFallback = v22;
        }
        v17 = (std::string::value_type *)TagFallback;
        v18 = a3;
        v19 = "SnippetUI.SimpleItem_Rich.component_name";
        goto LABEL_54;
      case 9u:
        if (v10 != 74)
          goto LABEL_55;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 11);
        if (v11)
          goto LABEL_49;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 11) = v11;
        goto LABEL_48;
      case 0xAu:
        if (v10 != 82)
          goto LABEL_55;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 12);
        if (v11)
          goto LABEL_49;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 12) = v11;
        goto LABEL_48;
      case 0xBu:
        if (v10 != 90)
          goto LABEL_55;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 13);
        if (v11)
          goto LABEL_49;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 13) = v11;
LABEL_48:
        TagFallback = v22;
LABEL_49:
        v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v11, TagFallback);
        goto LABEL_60;
      case 0xCu:
        if (v10 != 98)
          goto LABEL_55;
        v16 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v16 = *v5;
          TagFallback = v22;
        }
        v17 = (std::string::value_type *)TagFallback;
        v18 = a3;
        v19 = "SnippetUI.SimpleItem_Rich.link_identifier";
LABEL_54:
        v13 = google::protobuf::internal::InlineGreedyStringParserUTF8(v16, v17, (uint64_t)v18, (google::protobuf::internal *)v19);
        goto LABEL_60;
      default:
LABEL_55:
        if ((_DWORD)v10)
          v20 = (v10 & 7) == 4;
        else
          v20 = 1;
        if (v20)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v10 - 1;
          return TagFallback;
        }
        v13 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v7, TagFallback, a3, v8);
LABEL_60:
        v22 = (google::protobuf::internal *)v13;
        if (v13)
          continue;
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::SimpleItem_Rich::InternalSerializeWithCachedSizesToArray(SnippetUI::SimpleItem_Rich *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  SnippetUI::TextProperty *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  google::protobuf::UnknownFieldSet *v11;
  _BYTE *v12;
  _BYTE *v13;
  unsigned int v14;
  unsigned int v15;
  SnippetUI::TextProperty *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  google::protobuf::UnknownFieldSet *v20;
  _BYTE *v21;
  _BYTE *v22;
  unsigned int v23;
  unsigned int v24;
  SnippetUI::MultilineTextProperty *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  google::protobuf::UnknownFieldSet *v29;
  _BYTE *v30;
  _BYTE *v31;
  unsigned int v32;
  unsigned int v33;
  SnippetUI::TextProperty *v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  google::protobuf::UnknownFieldSet *v38;
  _BYTE *v39;
  _BYTE *v40;
  unsigned int v41;
  unsigned int v42;
  SnippetUI::MultilineTextProperty *v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  google::protobuf::UnknownFieldSet *v47;
  _BYTE *v48;
  _BYTE *v49;
  unsigned int v50;
  unsigned int v51;
  SnippetUI::VisualProperty *v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int v55;
  google::protobuf::UnknownFieldSet *v56;
  _BYTE *v57;
  _BYTE *v58;
  unsigned int v59;
  unsigned int v60;
  SnippetUI::ActionProperty *v61;
  unsigned int v62;
  google::protobuf::UnknownFieldSet *v63;
  unsigned int v64;
  _BYTE *v65;
  _BYTE *v66;
  unsigned int v67;
  unsigned int v68;
  google::protobuf::internal *v69;
  const char *v70;
  SnippetUI::TextProperty *v71;
  unsigned int v72;
  uint64_t v73;
  unsigned int v74;
  google::protobuf::UnknownFieldSet *v75;
  _BYTE *v76;
  _BYTE *v77;
  unsigned int v78;
  unsigned int v79;
  SnippetUI::TextProperty *v80;
  unsigned int v81;
  uint64_t v82;
  unsigned int v83;
  google::protobuf::UnknownFieldSet *v84;
  _BYTE *v85;
  _BYTE *v86;
  unsigned int v87;
  unsigned int v88;
  SnippetUI::TextProperty *v89;
  unsigned int v90;
  google::protobuf::UnknownFieldSet *v91;
  unsigned int v92;
  _BYTE *v93;
  _BYTE *v94;
  unsigned int v95;
  unsigned int v96;
  google::protobuf::internal *v97;
  const char *v98;
  uint64_t v99;

  v5 = (char *)a2;
  if (this == (SnippetUI::SimpleItem_Rich *)&SnippetUI::_SimpleItem_Rich_default_instance_)
    goto LABEL_85;
  v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
  if (v7)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
    }
    *v5 = 10;
    v8 = *((_DWORD *)v7 + 15);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v12 = v5 + 2;
        do
        {
          v13 = v12;
          *v12++ = v10 | 0x80;
          v14 = v10 >> 7;
          v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        v11 = (google::protobuf::UnknownFieldSet *)(v13 + 2);
        *v12 = v14;
        goto LABEL_13;
      }
      v5[2] = v10;
      v9 = 3;
    }
    else
    {
      v5[1] = v8;
      v9 = 2;
    }
    v11 = (google::protobuf::UnknownFieldSet *)&v5[v9];
LABEL_13:
    v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
  if (!v16)
    goto LABEL_26;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
  }
  *v5 = 18;
  v17 = *((_DWORD *)v16 + 15);
  if (v17 > 0x7F)
  {
    v5[1] = v17 | 0x80;
    v19 = v17 >> 7;
    if (v17 >> 14)
    {
      v21 = v5 + 2;
      do
      {
        v22 = v21;
        *v21++ = v19 | 0x80;
        v23 = v19 >> 7;
        v24 = v19 >> 14;
        v19 >>= 7;
      }
      while (v24);
      v20 = (google::protobuf::UnknownFieldSet *)(v22 + 2);
      *v21 = v23;
      goto LABEL_25;
    }
    v5[2] = v19;
    v18 = 3;
  }
  else
  {
    v5[1] = v17;
    v18 = 2;
  }
  v20 = (google::protobuf::UnknownFieldSet *)&v5[v18];
LABEL_25:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v16, v20, a3, a4);
LABEL_26:
  v25 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 6);
  if (!v25)
    goto LABEL_38;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v25 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 6);
  }
  *v5 = 26;
  v26 = *((_DWORD *)v25 + 15);
  if (v26 > 0x7F)
  {
    v5[1] = v26 | 0x80;
    v28 = v26 >> 7;
    if (v26 >> 14)
    {
      v30 = v5 + 2;
      do
      {
        v31 = v30;
        *v30++ = v28 | 0x80;
        v32 = v28 >> 7;
        v33 = v28 >> 14;
        v28 >>= 7;
      }
      while (v33);
      v29 = (google::protobuf::UnknownFieldSet *)(v31 + 2);
      *v30 = v32;
      goto LABEL_37;
    }
    v5[2] = v28;
    v27 = 3;
  }
  else
  {
    v5[1] = v26;
    v27 = 2;
  }
  v29 = (google::protobuf::UnknownFieldSet *)&v5[v27];
LABEL_37:
  v5 = (char *)SnippetUI::MultilineTextProperty::InternalSerializeWithCachedSizesToArray(v25, v29, a3, a4);
LABEL_38:
  v34 = (SnippetUI::TextProperty *)*((_QWORD *)this + 7);
  if (!v34)
    goto LABEL_50;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v34 = (SnippetUI::TextProperty *)*((_QWORD *)this + 7);
  }
  *v5 = 34;
  v35 = *((_DWORD *)v34 + 15);
  if (v35 > 0x7F)
  {
    v5[1] = v35 | 0x80;
    v37 = v35 >> 7;
    if (v35 >> 14)
    {
      v39 = v5 + 2;
      do
      {
        v40 = v39;
        *v39++ = v37 | 0x80;
        v41 = v37 >> 7;
        v42 = v37 >> 14;
        v37 >>= 7;
      }
      while (v42);
      v38 = (google::protobuf::UnknownFieldSet *)(v40 + 2);
      *v39 = v41;
      goto LABEL_49;
    }
    v5[2] = v37;
    v36 = 3;
  }
  else
  {
    v5[1] = v35;
    v36 = 2;
  }
  v38 = (google::protobuf::UnknownFieldSet *)&v5[v36];
LABEL_49:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v34, v38, a3, a4);
LABEL_50:
  v43 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 8);
  if (!v43)
    goto LABEL_62;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v43 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 8);
  }
  *v5 = 42;
  v44 = *((_DWORD *)v43 + 15);
  if (v44 > 0x7F)
  {
    v5[1] = v44 | 0x80;
    v46 = v44 >> 7;
    if (v44 >> 14)
    {
      v48 = v5 + 2;
      do
      {
        v49 = v48;
        *v48++ = v46 | 0x80;
        v50 = v46 >> 7;
        v51 = v46 >> 14;
        v46 >>= 7;
      }
      while (v51);
      v47 = (google::protobuf::UnknownFieldSet *)(v49 + 2);
      *v48 = v50;
      goto LABEL_61;
    }
    v5[2] = v46;
    v45 = 3;
  }
  else
  {
    v5[1] = v44;
    v45 = 2;
  }
  v47 = (google::protobuf::UnknownFieldSet *)&v5[v45];
LABEL_61:
  v5 = (char *)SnippetUI::MultilineTextProperty::InternalSerializeWithCachedSizesToArray(v43, v47, a3, a4);
LABEL_62:
  v52 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 9);
  if (!v52)
    goto LABEL_74;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v52 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 9);
  }
  *v5 = 50;
  v53 = *((_DWORD *)v52 + 15);
  if (v53 > 0x7F)
  {
    v5[1] = v53 | 0x80;
    v55 = v53 >> 7;
    if (v53 >> 14)
    {
      v57 = v5 + 2;
      do
      {
        v58 = v57;
        *v57++ = v55 | 0x80;
        v59 = v55 >> 7;
        v60 = v55 >> 14;
        v55 >>= 7;
      }
      while (v60);
      v56 = (google::protobuf::UnknownFieldSet *)(v58 + 2);
      *v57 = v59;
      goto LABEL_73;
    }
    v5[2] = v55;
    v54 = 3;
  }
  else
  {
    v5[1] = v53;
    v54 = 2;
  }
  v56 = (google::protobuf::UnknownFieldSet *)&v5[v54];
LABEL_73:
  v5 = (char *)SnippetUI::VisualProperty::InternalSerializeWithCachedSizesToArray(v52, v56, a3, a4);
LABEL_74:
  v61 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 10);
  if (v61)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v61 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 10);
    }
    *v5 = 58;
    v62 = *((_DWORD *)v61 + 12);
    if (v62 > 0x7F)
    {
      v5[1] = v62 | 0x80;
      v64 = v62 >> 7;
      if (v62 >> 14)
      {
        v65 = v5 + 2;
        do
        {
          v66 = v65;
          *v65++ = v64 | 0x80;
          v67 = v64 >> 7;
          v68 = v64 >> 14;
          v64 >>= 7;
        }
        while (v68);
        v63 = (google::protobuf::UnknownFieldSet *)(v66 + 2);
        *v65 = v67;
      }
      else
      {
        v5[2] = v64;
        v63 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v62;
      v63 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v61, v63, a3, a4);
  }
LABEL_85:
  v69 = (google::protobuf::internal *)*((_QWORD *)this + 2);
  if (*((char *)v69 + 23) < 0)
  {
    v70 = (const char *)*((_QWORD *)v69 + 1);
    if (!v70)
      goto LABEL_91;
    v69 = *(google::protobuf::internal **)v69;
    goto LABEL_90;
  }
  v70 = (const char *)*((unsigned __int8 *)v69 + 23);
  if (*((_BYTE *)v69 + 23))
  {
LABEL_90:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v69, v70, 1, (google::protobuf::internal *)"SnippetUI.SimpleItem_Rich.component_name");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 8, *((_QWORD *)this + 2), v5);
  }
LABEL_91:
  if (this == (SnippetUI::SimpleItem_Rich *)&SnippetUI::_SimpleItem_Rich_default_instance_)
    goto LABEL_127;
  v71 = (SnippetUI::TextProperty *)*((_QWORD *)this + 11);
  if (v71)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v71 = (SnippetUI::TextProperty *)*((_QWORD *)this + 11);
    }
    *v5 = 74;
    v72 = *((_DWORD *)v71 + 15);
    if (v72 > 0x7F)
    {
      v5[1] = v72 | 0x80;
      v74 = v72 >> 7;
      if (v72 >> 14)
      {
        v76 = v5 + 2;
        do
        {
          v77 = v76;
          *v76++ = v74 | 0x80;
          v78 = v74 >> 7;
          v79 = v74 >> 14;
          v74 >>= 7;
        }
        while (v79);
        v75 = (google::protobuf::UnknownFieldSet *)(v77 + 2);
        *v76 = v78;
        goto LABEL_103;
      }
      v5[2] = v74;
      v73 = 3;
    }
    else
    {
      v5[1] = v72;
      v73 = 2;
    }
    v75 = (google::protobuf::UnknownFieldSet *)&v5[v73];
LABEL_103:
    v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v71, v75, a3, a4);
  }
  v80 = (SnippetUI::TextProperty *)*((_QWORD *)this + 12);
  if (!v80)
    goto LABEL_116;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v80 = (SnippetUI::TextProperty *)*((_QWORD *)this + 12);
  }
  *v5 = 82;
  v81 = *((_DWORD *)v80 + 15);
  if (v81 > 0x7F)
  {
    v5[1] = v81 | 0x80;
    v83 = v81 >> 7;
    if (v81 >> 14)
    {
      v85 = v5 + 2;
      do
      {
        v86 = v85;
        *v85++ = v83 | 0x80;
        v87 = v83 >> 7;
        v88 = v83 >> 14;
        v83 >>= 7;
      }
      while (v88);
      v84 = (google::protobuf::UnknownFieldSet *)(v86 + 2);
      *v85 = v87;
      goto LABEL_115;
    }
    v5[2] = v83;
    v82 = 3;
  }
  else
  {
    v5[1] = v81;
    v82 = 2;
  }
  v84 = (google::protobuf::UnknownFieldSet *)&v5[v82];
LABEL_115:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v80, v84, a3, a4);
LABEL_116:
  v89 = (SnippetUI::TextProperty *)*((_QWORD *)this + 13);
  if (v89)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v89 = (SnippetUI::TextProperty *)*((_QWORD *)this + 13);
    }
    *v5 = 90;
    v90 = *((_DWORD *)v89 + 15);
    if (v90 > 0x7F)
    {
      v5[1] = v90 | 0x80;
      v92 = v90 >> 7;
      if (v90 >> 14)
      {
        v93 = v5 + 2;
        do
        {
          v94 = v93;
          *v93++ = v92 | 0x80;
          v95 = v92 >> 7;
          v96 = v92 >> 14;
          v92 >>= 7;
        }
        while (v96);
        v91 = (google::protobuf::UnknownFieldSet *)(v94 + 2);
        *v93 = v95;
      }
      else
      {
        v5[2] = v92;
        v91 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v90;
      v91 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v89, v91, a3, a4);
  }
LABEL_127:
  v97 = (google::protobuf::internal *)*((_QWORD *)this + 3);
  if (*((char *)v97 + 23) < 0)
  {
    v98 = (const char *)*((_QWORD *)v97 + 1);
    if (!v98)
      goto LABEL_133;
    v97 = *(google::protobuf::internal **)v97;
    goto LABEL_132;
  }
  v98 = (const char *)*((unsigned __int8 *)v97 + 23);
  if (*((_BYTE *)v97 + 23))
  {
LABEL_132:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v97, v98, 1, (google::protobuf::internal *)"SnippetUI.SimpleItem_Rich.link_identifier");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 12, *((_QWORD *)this + 3), v5);
  }
LABEL_133:
  v99 = *((_QWORD *)this + 1);
  if ((v99 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v99 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)v5;
}

void SnippetUI::SimpleItem_Rich::CopyFrom(SnippetUI::SimpleItem_Rich *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::SimpleItem_Rich::Clear(this);
    SnippetUI::SimpleItem_Rich::MergeFrom(this, a2);
  }
}

void SnippetUI::SimpleItem_Rich::MergeFrom(SnippetUI::SimpleItem_Rich *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::SimpleItem_Rich *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SimpleItem.pb.cc", 1556);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::SimpleItem_Rich::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BF99A9C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::SimpleItem_Rich::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 112) = a2;
  return this;
}

uint64_t SnippetUI::SimpleItem_Rich::GetMetadata(SnippetUI::SimpleItem_Rich *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_SimpleItem_2eproto);
  return qword_1EF581DB8;
}

void *SnippetUI::SimpleItem_Rich::default_instance(SnippetUI::SimpleItem_Rich *this)
{
  if (atomic_load(scc_info_SimpleItem_Rich_SimpleItem_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SimpleItem_Rich_SimpleItem_2eproto);
  return &SnippetUI::_SimpleItem_Rich_default_instance_;
}

void SnippetUI::SimpleItem_Rich::MergeFrom(SnippetUI::SimpleItem_Rich *this, const SnippetUI::SimpleItem_Rich *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  int **v10;
  int **v11;
  int **v12;
  int **v13;
  int **v14;
  int **v15;
  int **v16;
  int **v17;
  int **v18;
  int **v19;
  int **v20;
  int **v21;
  int **v22;
  int **v23;
  int **v24;
  int **v25;
  int **v26;
  int **v27;
  int **v28;
  int **v29;
  int **v30;
  int **v31;
  int **v32;
  int **v33;
  int **v34;
  int **v35;
  int **v36;
  int **v37;
  int **v38;
  int **v39;
  char v40;
  std::string v41[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v41, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SimpleItem.pb.cc", 1571);
    v4 = google::protobuf::internal::LogMessage::operator<<(v41, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v40, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v41[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::SimpleItem_Rich *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_QWORD *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v6);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(_QWORD *)(v8 + 8))
      goto LABEL_21;
  }
  else if (!*(_BYTE *)(v8 + 23))
  {
    goto LABEL_21;
  }
  v9 = (uint64_t *)*((_QWORD *)this + 3);
  if (v9 != (uint64_t *)v8)
  {
    if (v9 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
    else
      std::string::operator=(*((std::string **)this + 3), (const std::string *)v8);
  }
LABEL_21:
  if (a2 != (const SnippetUI::SimpleItem_Rich *)&SnippetUI::_SimpleItem_Rich_default_instance_)
  {
    v10 = (int **)*((_QWORD *)a2 + 4);
    if (v10)
    {
      v11 = (int **)*((_QWORD *)this + 4);
      if (!v11)
      {
        v11 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 4) = v11;
        v10 = (int **)*((_QWORD *)a2 + 4);
      }
      if (v10)
        v12 = v10;
      else
        v12 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v11, v12);
    }
    v13 = (int **)*((_QWORD *)a2 + 5);
    if (v13)
    {
      v14 = (int **)*((_QWORD *)this + 5);
      if (!v14)
      {
        v14 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 5) = v14;
        v13 = (int **)*((_QWORD *)a2 + 5);
      }
      if (v13)
        v15 = v13;
      else
        v15 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v14, v15);
    }
    v16 = (int **)*((_QWORD *)a2 + 6);
    if (v16)
    {
      v17 = (int **)*((_QWORD *)this + 6);
      if (!v17)
      {
        v17 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((_QWORD *)this + 6) = v17;
        v16 = (int **)*((_QWORD *)a2 + 6);
      }
      if (v16)
        v18 = v16;
      else
        v18 = (int **)&SnippetUI::_MultilineTextProperty_default_instance_;
      SnippetUI::MultilineTextProperty::MergeFrom(v17, v18);
    }
    v19 = (int **)*((_QWORD *)a2 + 7);
    if (v19)
    {
      v20 = (int **)*((_QWORD *)this + 7);
      if (!v20)
      {
        v20 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 7) = v20;
        v19 = (int **)*((_QWORD *)a2 + 7);
      }
      if (v19)
        v21 = v19;
      else
        v21 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v20, v21);
    }
    v22 = (int **)*((_QWORD *)a2 + 8);
    if (v22)
    {
      v23 = (int **)*((_QWORD *)this + 8);
      if (!v23)
      {
        v23 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((_QWORD *)this + 8) = v23;
        v22 = (int **)*((_QWORD *)a2 + 8);
      }
      if (v22)
        v24 = v22;
      else
        v24 = (int **)&SnippetUI::_MultilineTextProperty_default_instance_;
      SnippetUI::MultilineTextProperty::MergeFrom(v23, v24);
    }
    v25 = (int **)*((_QWORD *)a2 + 9);
    if (v25)
    {
      v26 = (int **)*((_QWORD *)this + 9);
      if (!v26)
      {
        v26 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((_QWORD *)this + 9) = v26;
        v25 = (int **)*((_QWORD *)a2 + 9);
      }
      if (v25)
        v27 = v25;
      else
        v27 = (int **)&SnippetUI::_VisualProperty_default_instance_;
      SnippetUI::VisualProperty::MergeFrom(v26, v27);
    }
    v28 = (int **)*((_QWORD *)a2 + 10);
    if (v28)
    {
      v29 = (int **)*((_QWORD *)this + 10);
      if (!v29)
      {
        v29 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((_QWORD *)this + 10) = v29;
        v28 = (int **)*((_QWORD *)a2 + 10);
      }
      if (v28)
        v30 = v28;
      else
        v30 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      SnippetUI::ActionProperty::MergeFrom(v29, v30);
    }
    v31 = (int **)*((_QWORD *)a2 + 11);
    if (v31)
    {
      v32 = (int **)*((_QWORD *)this + 11);
      if (!v32)
      {
        v32 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 11) = v32;
        v31 = (int **)*((_QWORD *)a2 + 11);
      }
      if (v31)
        v33 = v31;
      else
        v33 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v32, v33);
    }
    v34 = (int **)*((_QWORD *)a2 + 12);
    if (v34)
    {
      v35 = (int **)*((_QWORD *)this + 12);
      if (!v35)
      {
        v35 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 12) = v35;
        v34 = (int **)*((_QWORD *)a2 + 12);
      }
      if (v34)
        v36 = v34;
      else
        v36 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v35, v36);
    }
    v37 = (int **)*((_QWORD *)a2 + 13);
    if (v37)
    {
      v38 = (int **)*((_QWORD *)this + 13);
      if (!v38)
      {
        v38 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 13) = v38;
        v37 = (int **)*((_QWORD *)a2 + 13);
      }
      if (v37)
        v39 = v37;
      else
        v39 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v38, v39);
    }
  }
}

void sub_1BF99AD30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::SimpleItem_Rich *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SimpleItem_Rich>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::SimpleItem_Rich *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::SimpleItem_Rich *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x78uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::SimpleItem_Rich>);
    SnippetUI::SimpleItem_Rich::SimpleItem_Rich(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::SimpleItem_Rich *)operator new();
    SnippetUI::SimpleItem_Rich::SimpleItem_Rich(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BF99ADCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C40E3061A4BLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::SimpleItem_Rich>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void InitDefaultsscc_info_SimpleItem_ReverseRich_SimpleItem_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SimpleItem.pb.cc", a4);
  SnippetUI::SimpleItem_ReverseRich::SimpleItem_ReverseRich((SnippetUI::SimpleItem_ReverseRich *)&SnippetUI::_SimpleItem_ReverseRich_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_SimpleItem_ReverseRich_default_instance_, v4);
  qword_1ED1D4750 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D4758 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D4760 = (uint64_t)&SnippetUI::_MultilineTextProperty_default_instance_;
  unk_1ED1D4768 = &SnippetUI::_VisualProperty_default_instance_;
  qword_1ED1D4770 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
  unk_1ED1D4778 = &SnippetUI::_TextProperty_default_instance_;
}

SnippetUI::SimpleItem_ReverseRich *SnippetUI::SimpleItem_ReverseRich::SimpleItem_ReverseRich(SnippetUI::SimpleItem_ReverseRich *this)
{
  *(_QWORD *)this = &off_1E79305D8;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 20) = 0;
  if (atomic_load(scc_info_SimpleItem_ReverseRich_SimpleItem_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SimpleItem_ReverseRich_SimpleItem_2eproto);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  return this;
}

void sub_1BF99B078(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::SimpleItem_ReverseRich::~SimpleItem_ReverseRich(SnippetUI::SimpleItem_ReverseRich *this)
{
  SnippetUI::SimpleItem_ReverseRich::~SimpleItem_ReverseRich(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)this = &off_1E79305D8;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 3);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1C3B8D890](v4, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::SimpleItem_ReverseRich *)&SnippetUI::_SimpleItem_ReverseRich_default_instance_)
  {
    v6 = *((_QWORD *)this + 4);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = *((_QWORD *)this + 5);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = *((_QWORD *)this + 6);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = *((_QWORD *)this + 7);
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v10 = *((_QWORD *)this + 8);
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v11 = *((_QWORD *)this + 9);
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::SimpleItem_ReverseRich *SnippetUI::SimpleItem_ReverseRich::New(SnippetUI::SimpleItem_ReverseRich *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SimpleItem_ReverseRich>(0);
}

SnippetUI::SimpleItem_ReverseRich *SnippetUI::SimpleItem_ReverseRich::New(SnippetUI::SimpleItem_ReverseRich *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SimpleItem_ReverseRich>(a2);
}

void SnippetUI::SimpleItem_ReverseRich::Clear(SnippetUI::SimpleItem_ReverseRich *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  google::protobuf::internal::InternalMetadataWithArena *v10;
  char v11;

  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 3);
  if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
  v4 = *((_QWORD *)this + 4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 4) = 0;
  v5 = *((_QWORD *)this + 5);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *((_QWORD *)this + 5) = 0;
  v6 = *((_QWORD *)this + 6);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *((_QWORD *)this + 6) = 0;
  v7 = *((_QWORD *)this + 7);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  *((_QWORD *)this + 7) = 0;
  v8 = *((_QWORD *)this + 8);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  *((_QWORD *)this + 8) = 0;
  v9 = *((_QWORD *)this + 9);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v11 = *((_BYTE *)this + 8);
  v10 = (SnippetUI::SimpleItem_ReverseRich *)((char *)this + 8);
  *((_QWORD *)v10 + 8) = 0;
  if ((v11 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v10);
}

uint64_t SnippetUI::SimpleItem_ReverseRich::IsInitialized(SnippetUI::SimpleItem_ReverseRich *this)
{
  return 1;
}

char *SnippetUI::SimpleItem_ReverseRich::ByteSizeLong(SnippetUI::SimpleItem_ReverseRich *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const google::protobuf::UnknownFieldSet *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  SnippetUI::TextProperty *v9;
  char *v10;
  SnippetUI::TextProperty *v11;
  char *v12;
  SnippetUI::MultilineTextProperty *v13;
  char *v14;
  SnippetUI::VisualProperty *v15;
  char *v16;
  SnippetUI::ActionProperty *v17;
  char *v18;
  SnippetUI::TextProperty *v19;
  char *v20;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  v6 = *((_QWORD *)this + 3);
  v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v8 = *(_QWORD *)(v6 + 8);
  if ((v7 & 0x80u) == 0)
    v8 = v7;
  v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_13:
  if (this != (SnippetUI::SimpleItem_ReverseRich *)&SnippetUI::_SimpleItem_ReverseRich_default_instance_)
  {
    v9 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
    if (v9)
    {
      v10 = SnippetUI::TextProperty::ByteSizeLong(v9);
      v5 = (const google::protobuf::UnknownFieldSet *)&v10[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
    if (v11)
    {
      v12 = SnippetUI::TextProperty::ByteSizeLong(v11);
      v5 = (const google::protobuf::UnknownFieldSet *)&v12[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v13 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 6);
    if (v13)
    {
      v14 = SnippetUI::MultilineTextProperty::ByteSizeLong(v13);
      v5 = (const google::protobuf::UnknownFieldSet *)&v14[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v15 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 7);
    if (v15)
    {
      v16 = SnippetUI::VisualProperty::ByteSizeLong(v15);
      v5 = (const google::protobuf::UnknownFieldSet *)&v16[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v17 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 8);
    if (v17)
    {
      v18 = SnippetUI::ActionProperty::ByteSizeLong(v17);
      v5 = (const google::protobuf::UnknownFieldSet *)&v18[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v18 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v19 = (SnippetUI::TextProperty *)*((_QWORD *)this + 9);
    if (v19)
    {
      v20 = SnippetUI::TextProperty::ByteSizeLong(v19);
      v5 = (const google::protobuf::UnknownFieldSet *)&v20[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::SimpleItem_ReverseRich *)((char *)this + 8), v5, (_DWORD *)this + 20);
  *((_DWORD *)this + 20) = (_DWORD)v5;
  return (char *)v5;
}

uint64_t SnippetUI::SimpleItem_ReverseRich::GetCachedSize(SnippetUI::SimpleItem_ReverseRich *this)
{
  return *((unsigned int *)this + 20);
}

google::protobuf::internal *SnippetUI::SimpleItem_ReverseRich::_InternalParse(SnippetUI::SimpleItem_ReverseRich *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  std::string **v6;
  uint64_t *v7;
  google::protobuf::internal::ParseContext *v8;
  google::protobuf::internal *TagFallback;
  char *v10;
  SnippetUI::TextProperty *v11;
  SnippetUI::MultilineTextProperty *v12;
  char *v13;
  SnippetUI::VisualProperty *v14;
  SnippetUI::ActionProperty *v15;
  std::string *v16;
  std::string::value_type *v17;
  google::protobuf::internal::ParseContext *v18;
  char *v19;
  BOOL v20;
  google::protobuf::internal *v22;

  v22 = a2;
  v5 = (std::string **)((char *)this + 24);
  v6 = (std::string **)((char *)this + 16);
  v7 = (uint64_t *)((char *)this + 8);
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v22, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v22;
    TagFallback = (google::protobuf::internal *)((char *)v22 + 1);
    v10 = (char *)*(unsigned __int8 *)v22;
    if ((*(char *)v22 & 0x80000000) == 0)
      goto LABEL_6;
    v10 = (char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v22 + 2);
LABEL_6:
      v22 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v22, v10);
    v22 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    switch(v10 >> 3)
    {
      case 1u:
        if (v10 != 10)
          goto LABEL_42;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
        if (v11)
          goto LABEL_36;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 4) = v11;
        goto LABEL_35;
      case 2u:
        if (v10 != 18)
          goto LABEL_42;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
        if (v11)
          goto LABEL_36;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 5) = v11;
        goto LABEL_35;
      case 3u:
        if (v10 != 26)
          goto LABEL_42;
        v12 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 6);
        if (!v12)
        {
          v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
          *((_QWORD *)this + 6) = v12;
          TagFallback = v22;
        }
        v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::MultilineTextProperty>(a3, v12, TagFallback);
        goto LABEL_47;
      case 4u:
        if (v10 != 34)
          goto LABEL_42;
        v14 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 7);
        if (!v14)
        {
          v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
          *((_QWORD *)this + 7) = v14;
          TagFallback = v22;
        }
        v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::VisualProperty>(a3, v14, TagFallback);
        goto LABEL_47;
      case 5u:
        if (v10 != 42)
          goto LABEL_42;
        v15 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 8);
        if (!v15)
        {
          v15 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((_QWORD *)this + 8) = v15;
          TagFallback = v22;
        }
        v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v15, TagFallback);
        goto LABEL_47;
      case 6u:
        if (v10 != 50)
          goto LABEL_42;
        v16 = *v6;
        if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v16 = *v6;
          TagFallback = v22;
        }
        v17 = (std::string::value_type *)TagFallback;
        v18 = a3;
        v19 = "SnippetUI.SimpleItem_ReverseRich.component_name";
        goto LABEL_41;
      case 7u:
        if (v10 != 58)
          goto LABEL_42;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 9);
        if (v11)
          goto LABEL_36;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 9) = v11;
LABEL_35:
        TagFallback = v22;
LABEL_36:
        v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v11, TagFallback);
        goto LABEL_47;
      case 8u:
        if (v10 != 66)
          goto LABEL_42;
        v16 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v16 = *v5;
          TagFallback = v22;
        }
        v17 = (std::string::value_type *)TagFallback;
        v18 = a3;
        v19 = "SnippetUI.SimpleItem_ReverseRich.link_identifier";
LABEL_41:
        v13 = google::protobuf::internal::InlineGreedyStringParserUTF8(v16, v17, (uint64_t)v18, (google::protobuf::internal *)v19);
        goto LABEL_47;
      default:
LABEL_42:
        if ((_DWORD)v10)
          v20 = (v10 & 7) == 4;
        else
          v20 = 1;
        if (v20)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v10 - 1;
          return TagFallback;
        }
        v13 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v7, TagFallback, a3, v8);
LABEL_47:
        v22 = (google::protobuf::internal *)v13;
        if (v13)
          continue;
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::SimpleItem_ReverseRich::InternalSerializeWithCachedSizesToArray(SnippetUI::SimpleItem_ReverseRich *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  SnippetUI::TextProperty *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  google::protobuf::UnknownFieldSet *v11;
  _BYTE *v12;
  _BYTE *v13;
  unsigned int v14;
  unsigned int v15;
  SnippetUI::TextProperty *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  google::protobuf::UnknownFieldSet *v20;
  _BYTE *v21;
  _BYTE *v22;
  unsigned int v23;
  unsigned int v24;
  SnippetUI::MultilineTextProperty *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  google::protobuf::UnknownFieldSet *v29;
  _BYTE *v30;
  _BYTE *v31;
  unsigned int v32;
  unsigned int v33;
  SnippetUI::VisualProperty *v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  google::protobuf::UnknownFieldSet *v38;
  _BYTE *v39;
  _BYTE *v40;
  unsigned int v41;
  unsigned int v42;
  SnippetUI::ActionProperty *v43;
  unsigned int v44;
  google::protobuf::UnknownFieldSet *v45;
  unsigned int v46;
  _BYTE *v47;
  _BYTE *v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t *v51;
  const char *v52;
  SnippetUI::TextProperty *v53;
  unsigned int v54;
  google::protobuf::UnknownFieldSet *v55;
  unsigned int v56;
  _BYTE *v57;
  _BYTE *v58;
  unsigned int v59;
  unsigned int v60;
  google::protobuf::internal *v61;
  const char *v62;
  uint64_t v63;

  v5 = (char *)a2;
  if (this == (SnippetUI::SimpleItem_ReverseRich *)&SnippetUI::_SimpleItem_ReverseRich_default_instance_)
    goto LABEL_61;
  v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
  if (v7)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
    }
    *v5 = 10;
    v8 = *((_DWORD *)v7 + 15);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v12 = v5 + 2;
        do
        {
          v13 = v12;
          *v12++ = v10 | 0x80;
          v14 = v10 >> 7;
          v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        v11 = (google::protobuf::UnknownFieldSet *)(v13 + 2);
        *v12 = v14;
        goto LABEL_13;
      }
      v5[2] = v10;
      v9 = 3;
    }
    else
    {
      v5[1] = v8;
      v9 = 2;
    }
    v11 = (google::protobuf::UnknownFieldSet *)&v5[v9];
LABEL_13:
    v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
  if (!v16)
    goto LABEL_26;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
  }
  *v5 = 18;
  v17 = *((_DWORD *)v16 + 15);
  if (v17 > 0x7F)
  {
    v5[1] = v17 | 0x80;
    v19 = v17 >> 7;
    if (v17 >> 14)
    {
      v21 = v5 + 2;
      do
      {
        v22 = v21;
        *v21++ = v19 | 0x80;
        v23 = v19 >> 7;
        v24 = v19 >> 14;
        v19 >>= 7;
      }
      while (v24);
      v20 = (google::protobuf::UnknownFieldSet *)(v22 + 2);
      *v21 = v23;
      goto LABEL_25;
    }
    v5[2] = v19;
    v18 = 3;
  }
  else
  {
    v5[1] = v17;
    v18 = 2;
  }
  v20 = (google::protobuf::UnknownFieldSet *)&v5[v18];
LABEL_25:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v16, v20, a3, a4);
LABEL_26:
  v25 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 6);
  if (!v25)
    goto LABEL_38;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v25 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 6);
  }
  *v5 = 26;
  v26 = *((_DWORD *)v25 + 15);
  if (v26 > 0x7F)
  {
    v5[1] = v26 | 0x80;
    v28 = v26 >> 7;
    if (v26 >> 14)
    {
      v30 = v5 + 2;
      do
      {
        v31 = v30;
        *v30++ = v28 | 0x80;
        v32 = v28 >> 7;
        v33 = v28 >> 14;
        v28 >>= 7;
      }
      while (v33);
      v29 = (google::protobuf::UnknownFieldSet *)(v31 + 2);
      *v30 = v32;
      goto LABEL_37;
    }
    v5[2] = v28;
    v27 = 3;
  }
  else
  {
    v5[1] = v26;
    v27 = 2;
  }
  v29 = (google::protobuf::UnknownFieldSet *)&v5[v27];
LABEL_37:
  v5 = (char *)SnippetUI::MultilineTextProperty::InternalSerializeWithCachedSizesToArray(v25, v29, a3, a4);
LABEL_38:
  v34 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 7);
  if (!v34)
    goto LABEL_50;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v34 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 7);
  }
  *v5 = 34;
  v35 = *((_DWORD *)v34 + 15);
  if (v35 > 0x7F)
  {
    v5[1] = v35 | 0x80;
    v37 = v35 >> 7;
    if (v35 >> 14)
    {
      v39 = v5 + 2;
      do
      {
        v40 = v39;
        *v39++ = v37 | 0x80;
        v41 = v37 >> 7;
        v42 = v37 >> 14;
        v37 >>= 7;
      }
      while (v42);
      v38 = (google::protobuf::UnknownFieldSet *)(v40 + 2);
      *v39 = v41;
      goto LABEL_49;
    }
    v5[2] = v37;
    v36 = 3;
  }
  else
  {
    v5[1] = v35;
    v36 = 2;
  }
  v38 = (google::protobuf::UnknownFieldSet *)&v5[v36];
LABEL_49:
  v5 = (char *)SnippetUI::VisualProperty::InternalSerializeWithCachedSizesToArray(v34, v38, a3, a4);
LABEL_50:
  v43 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 8);
  if (v43)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v43 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 8);
    }
    *v5 = 42;
    v44 = *((_DWORD *)v43 + 12);
    if (v44 > 0x7F)
    {
      v5[1] = v44 | 0x80;
      v46 = v44 >> 7;
      if (v44 >> 14)
      {
        v47 = v5 + 2;
        do
        {
          v48 = v47;
          *v47++ = v46 | 0x80;
          v49 = v46 >> 7;
          v50 = v46 >> 14;
          v46 >>= 7;
        }
        while (v50);
        v45 = (google::protobuf::UnknownFieldSet *)(v48 + 2);
        *v47 = v49;
      }
      else
      {
        v5[2] = v46;
        v45 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v44;
      v45 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v43, v45, a3, a4);
  }
LABEL_61:
  v51 = (uint64_t *)*((_QWORD *)this + 2);
  if ((*((char *)v51 + 23) & 0x80000000) == 0)
  {
    v52 = (const char *)*((unsigned __int8 *)v51 + 23);
    if (!*((_BYTE *)v51 + 23))
      goto LABEL_67;
    goto LABEL_66;
  }
  v52 = (const char *)v51[1];
  if (v52)
  {
    v51 = (uint64_t *)*v51;
LABEL_66:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((google::protobuf::internal *)v51, v52, 1, (google::protobuf::internal *)"SnippetUI.SimpleItem_ReverseRich.component_name");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 6, *((_QWORD *)this + 2), v5);
  }
LABEL_67:
  if (this != (SnippetUI::SimpleItem_ReverseRich *)&SnippetUI::_SimpleItem_ReverseRich_default_instance_)
  {
    v53 = (SnippetUI::TextProperty *)*((_QWORD *)this + 9);
    if (v53)
    {
      if ((unint64_t)v5 >= *(_QWORD *)a3)
      {
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
        v53 = (SnippetUI::TextProperty *)*((_QWORD *)this + 9);
      }
      *v5 = 58;
      v54 = *((_DWORD *)v53 + 15);
      if (v54 > 0x7F)
      {
        v5[1] = v54 | 0x80;
        v56 = v54 >> 7;
        if (v54 >> 14)
        {
          v57 = v5 + 2;
          do
          {
            v58 = v57;
            *v57++ = v56 | 0x80;
            v59 = v56 >> 7;
            v60 = v56 >> 14;
            v56 >>= 7;
          }
          while (v60);
          v55 = (google::protobuf::UnknownFieldSet *)(v58 + 2);
          *v57 = v59;
        }
        else
        {
          v5[2] = v56;
          v55 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
        }
      }
      else
      {
        v5[1] = v54;
        v55 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
      }
      v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v53, v55, a3, a4);
    }
  }
  v61 = (google::protobuf::internal *)*((_QWORD *)this + 3);
  if (*((char *)v61 + 23) < 0)
  {
    v62 = (const char *)*((_QWORD *)v61 + 1);
    if (!v62)
      goto LABEL_85;
    v61 = *(google::protobuf::internal **)v61;
    goto LABEL_84;
  }
  v62 = (const char *)*((unsigned __int8 *)v61 + 23);
  if (*((_BYTE *)v61 + 23))
  {
LABEL_84:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v61, v62, 1, (google::protobuf::internal *)"SnippetUI.SimpleItem_ReverseRich.link_identifier");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 8, *((_QWORD *)this + 3), v5);
  }
LABEL_85:
  v63 = *((_QWORD *)this + 1);
  if ((v63 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v63 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)v5;
}

void SnippetUI::SimpleItem_ReverseRich::CopyFrom(SnippetUI::SimpleItem_ReverseRich *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::SimpleItem_ReverseRich::Clear(this);
    SnippetUI::SimpleItem_ReverseRich::MergeFrom(this, a2);
  }
}

void SnippetUI::SimpleItem_ReverseRich::MergeFrom(SnippetUI::SimpleItem_ReverseRich *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::SimpleItem_ReverseRich *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SimpleItem.pb.cc", 2103);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::SimpleItem_ReverseRich::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BF99BCA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::SimpleItem_ReverseRich::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 80) = a2;
  return this;
}

uint64_t SnippetUI::SimpleItem_ReverseRich::GetMetadata(SnippetUI::SimpleItem_ReverseRich *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_SimpleItem_2eproto);
  return qword_1EF581DC8;
}

void *SnippetUI::SimpleItem_ReverseRich::default_instance(SnippetUI::SimpleItem_ReverseRich *this)
{
  if (atomic_load(scc_info_SimpleItem_ReverseRich_SimpleItem_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SimpleItem_ReverseRich_SimpleItem_2eproto);
  return &SnippetUI::_SimpleItem_ReverseRich_default_instance_;
}

void SnippetUI::SimpleItem_ReverseRich::MergeFrom(SnippetUI::SimpleItem_ReverseRich *this, const SnippetUI::SimpleItem_ReverseRich *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  int **v10;
  int **v11;
  int **v12;
  int **v13;
  int **v14;
  int **v15;
  int **v16;
  int **v17;
  int **v18;
  int **v19;
  int **v20;
  int **v21;
  int **v22;
  int **v23;
  int **v24;
  int **v25;
  int **v26;
  int **v27;
  char v28;
  std::string v29[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v29, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SimpleItem.pb.cc", 2118);
    v4 = google::protobuf::internal::LogMessage::operator<<(v29, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v28, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v29[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::SimpleItem_ReverseRich *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_QWORD *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v6);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(_QWORD *)(v8 + 8))
      goto LABEL_21;
  }
  else if (!*(_BYTE *)(v8 + 23))
  {
    goto LABEL_21;
  }
  v9 = (uint64_t *)*((_QWORD *)this + 3);
  if (v9 != (uint64_t *)v8)
  {
    if (v9 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
    else
      std::string::operator=(*((std::string **)this + 3), (const std::string *)v8);
  }
LABEL_21:
  if (a2 != (const SnippetUI::SimpleItem_ReverseRich *)&SnippetUI::_SimpleItem_ReverseRich_default_instance_)
  {
    v10 = (int **)*((_QWORD *)a2 + 4);
    if (v10)
    {
      v11 = (int **)*((_QWORD *)this + 4);
      if (!v11)
      {
        v11 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 4) = v11;
        v10 = (int **)*((_QWORD *)a2 + 4);
      }
      if (v10)
        v12 = v10;
      else
        v12 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v11, v12);
    }
    v13 = (int **)*((_QWORD *)a2 + 5);
    if (v13)
    {
      v14 = (int **)*((_QWORD *)this + 5);
      if (!v14)
      {
        v14 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 5) = v14;
        v13 = (int **)*((_QWORD *)a2 + 5);
      }
      if (v13)
        v15 = v13;
      else
        v15 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v14, v15);
    }
    v16 = (int **)*((_QWORD *)a2 + 6);
    if (v16)
    {
      v17 = (int **)*((_QWORD *)this + 6);
      if (!v17)
      {
        v17 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((_QWORD *)this + 6) = v17;
        v16 = (int **)*((_QWORD *)a2 + 6);
      }
      if (v16)
        v18 = v16;
      else
        v18 = (int **)&SnippetUI::_MultilineTextProperty_default_instance_;
      SnippetUI::MultilineTextProperty::MergeFrom(v17, v18);
    }
    v19 = (int **)*((_QWORD *)a2 + 7);
    if (v19)
    {
      v20 = (int **)*((_QWORD *)this + 7);
      if (!v20)
      {
        v20 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((_QWORD *)this + 7) = v20;
        v19 = (int **)*((_QWORD *)a2 + 7);
      }
      if (v19)
        v21 = v19;
      else
        v21 = (int **)&SnippetUI::_VisualProperty_default_instance_;
      SnippetUI::VisualProperty::MergeFrom(v20, v21);
    }
    v22 = (int **)*((_QWORD *)a2 + 8);
    if (v22)
    {
      v23 = (int **)*((_QWORD *)this + 8);
      if (!v23)
      {
        v23 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((_QWORD *)this + 8) = v23;
        v22 = (int **)*((_QWORD *)a2 + 8);
      }
      if (v22)
        v24 = v22;
      else
        v24 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      SnippetUI::ActionProperty::MergeFrom(v23, v24);
    }
    v25 = (int **)*((_QWORD *)a2 + 9);
    if (v25)
    {
      v26 = (int **)*((_QWORD *)this + 9);
      if (!v26)
      {
        v26 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 9) = v26;
        v25 = (int **)*((_QWORD *)a2 + 9);
      }
      if (v25)
        v27 = v25;
      else
        v27 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v26, v27);
    }
  }
}

void sub_1BF99BF6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::SimpleItem_ReverseRich *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SimpleItem_ReverseRich>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::SimpleItem_ReverseRich *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::SimpleItem_ReverseRich *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x58uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::SimpleItem_ReverseRich>);
    SnippetUI::SimpleItem_ReverseRich::SimpleItem_ReverseRich(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::SimpleItem_ReverseRich *)operator new();
    SnippetUI::SimpleItem_ReverseRich::SimpleItem_ReverseRich(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BF99C008(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C401DBA19FDLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::SimpleItem_ReverseRich>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void *SnippetUI::SimpleItem_Player::default_instance(SnippetUI::SimpleItem_Player *this)
{
  if (atomic_load(scc_info_SimpleItem_Player_SimpleItem_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SimpleItem_Player_SimpleItem_2eproto);
  return &SnippetUI::_SimpleItem_Player_default_instance_;
}

void SnippetUI::SimpleItem_Player::MergeFrom(SnippetUI::SimpleItem_Player *this, const SnippetUI::SimpleItem_Player *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  int **v10;
  int **v11;
  int **v12;
  int **v13;
  int **v14;
  int **v15;
  int **v16;
  int **v17;
  int **v18;
  int **v19;
  int **v20;
  int **v21;
  int **v22;
  int **v23;
  int **v24;
  char v25;
  std::string v26[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/SimpleItem.pb.cc", 3005);
    v4 = google::protobuf::internal::LogMessage::operator<<(v26, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v25, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v26[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::SimpleItem_Player *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((int **)this + 2, (uint64_t)a2 + 16);
  v6 = *((_QWORD *)a2 + 5);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 5);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 5, v6);
    else
      std::string::operator=(*((std::string **)this + 5), (const std::string *)v6);
  }
LABEL_13:
  v8 = *((_QWORD *)a2 + 6);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(_QWORD *)(v8 + 8))
      goto LABEL_21;
  }
  else if (!*(_BYTE *)(v8 + 23))
  {
    goto LABEL_21;
  }
  v9 = (uint64_t *)*((_QWORD *)this + 6);
  if (v9 != (uint64_t *)v8)
  {
    if (v9 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, v8);
    else
      std::string::operator=(*((std::string **)this + 6), (const std::string *)v8);
  }
LABEL_21:
  if (a2 != (const SnippetUI::SimpleItem_Player *)&SnippetUI::_SimpleItem_Player_default_instance_)
  {
    v10 = (int **)*((_QWORD *)a2 + 7);
    if (v10)
    {
      v11 = (int **)*((_QWORD *)this + 7);
      if (!v11)
      {
        v11 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 7) = v11;
        v10 = (int **)*((_QWORD *)a2 + 7);
      }
      if (v10)
        v12 = v10;
      else
        v12 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v11, v12);
    }
    v13 = (int **)*((_QWORD *)a2 + 8);
    if (v13)
    {
      v14 = (int **)*((_QWORD *)this + 8);
      if (!v14)
      {
        v14 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 8) = v14;
        v13 = (int **)*((_QWORD *)a2 + 8);
      }
      if (v13)
        v15 = v13;
      else
        v15 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v14, v15);
    }
    v16 = (int **)*((_QWORD *)a2 + 9);
    if (v16)
    {
      v17 = (int **)*((_QWORD *)this + 9);
      if (!v17)
      {
        v17 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((_QWORD *)this + 9) = v17;
        v16 = (int **)*((_QWORD *)a2 + 9);
      }
      if (v16)
        v18 = v16;
      else
        v18 = (int **)&SnippetUI::_MultilineTextProperty_default_instance_;
      SnippetUI::MultilineTextProperty::MergeFrom(v17, v18);
    }
    v19 = (int **)*((_QWORD *)a2 + 10);
    if (v19)
    {
      v20 = (int **)*((_QWORD *)this + 10);
      if (!v20)
      {
        v20 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((_QWORD *)this + 10) = v20;
        v19 = (int **)*((_QWORD *)a2 + 10);
      }
      if (v19)
        v21 = v19;
      else
        v21 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      SnippetUI::ActionProperty::MergeFrom(v20, v21);
    }
    v22 = (int **)*((_QWORD *)a2 + 11);
    if (v22)
    {
      v23 = (int **)*((_QWORD *)this + 11);
      if (!v23)
      {
        v23 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 11) = v23;
        v22 = (int **)*((_QWORD *)a2 + 11);
      }
      if (v22)
        v24 = v22;
      else
        v24 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v23, v24);
    }
  }
}

void sub_1BF99C3D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::SimpleItem_Player *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::SimpleItem_Player>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::SimpleItem_Player *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::SimpleItem_Player *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x68uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::SimpleItem_Player>);
    SnippetUI::SimpleItem_Player::SimpleItem_Player(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::SimpleItem_Player *)operator new();
    SnippetUI::SimpleItem_Player::SimpleItem_Player(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BF99C46C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C40E5E897A7);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::SimpleItem_Player>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void SnippetUI::SimpleItem_Standard::InitAsDefaultInstance(SnippetUI::SimpleItem_Standard *this)
{
  qword_1ED1D5488 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D5490 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D5498 = (uint64_t)&SnippetUI::_MultilineTextProperty_default_instance_;
  unk_1ED1D54A0 = &SnippetUI::_MultilineTextProperty_default_instance_;
  qword_1ED1D54A8 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
  unk_1ED1D54B0 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D54B8 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
}

uint64_t SnippetUI::SimpleItem_Standard::_Internal::text_1(SnippetUI::SimpleItem_Standard::_Internal *this, const SnippetUI::SimpleItem_Standard *a2)
{
  return *((_QWORD *)this + 4);
}

uint64_t SnippetUI::SimpleItem_Standard::_Internal::text_2(SnippetUI::SimpleItem_Standard::_Internal *this, const SnippetUI::SimpleItem_Standard *a2)
{
  return *((_QWORD *)this + 5);
}

uint64_t SnippetUI::SimpleItem_Standard::_Internal::text_3(SnippetUI::SimpleItem_Standard::_Internal *this, const SnippetUI::SimpleItem_Standard *a2)
{
  return *((_QWORD *)this + 6);
}

uint64_t SnippetUI::SimpleItem_Standard::_Internal::text_4(SnippetUI::SimpleItem_Standard::_Internal *this, const SnippetUI::SimpleItem_Standard *a2)
{
  return *((_QWORD *)this + 7);
}

uint64_t SnippetUI::SimpleItem_Standard::_Internal::action(SnippetUI::SimpleItem_Standard::_Internal *this, const SnippetUI::SimpleItem_Standard *a2)
{
  return *((_QWORD *)this + 8);
}

uint64_t SnippetUI::SimpleItem_Standard::_Internal::text_5(SnippetUI::SimpleItem_Standard::_Internal *this, const SnippetUI::SimpleItem_Standard *a2)
{
  return *((_QWORD *)this + 9);
}

uint64_t SnippetUI::SimpleItem_Standard::_Internal::text_6(SnippetUI::SimpleItem_Standard::_Internal *this, const SnippetUI::SimpleItem_Standard *a2)
{
  return *((_QWORD *)this + 10);
}

uint64_t SnippetUI::SimpleItem_Standard::clear_text_1(SnippetUI::SimpleItem_Standard *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 4) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_Standard::clear_text_2(SnippetUI::SimpleItem_Standard *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 5);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 5) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_Standard::clear_text_3(SnippetUI::SimpleItem_Standard *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 6);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 6) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_Standard::clear_text_4(SnippetUI::SimpleItem_Standard *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 7);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 7) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_Standard::clear_action(SnippetUI::SimpleItem_Standard *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 8) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_Standard::clear_text_5(SnippetUI::SimpleItem_Standard *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 9);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 9) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_Standard::clear_text_6(SnippetUI::SimpleItem_Standard *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 10);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 10) = 0;
  return result;
}

SnippetUI::SimpleItem_Standard *SnippetUI::SimpleItem_Standard::SimpleItem_Standard(SnippetUI::SimpleItem_Standard *this, const SnippetUI::SimpleItem_Standard *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  SnippetUI::TextProperty *v10;
  SnippetUI::TextProperty *v11;
  SnippetUI::TextProperty *v12;
  SnippetUI::MultilineTextProperty *v13;
  SnippetUI::MultilineTextProperty *v14;
  SnippetUI::ActionProperty *v15;
  SnippetUI::TextProperty *v16;

  *(_QWORD *)this = &off_1E7930458;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 22) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::SimpleItem_Standard *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
    v9 = *(_QWORD *)(v8 + 8);
  else
    v9 = *(unsigned __int8 *)(v8 + 23);
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v9)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
  if (a2 == (const SnippetUI::SimpleItem_Standard *)&SnippetUI::_SimpleItem_Standard_default_instance_)
  {
    v11 = 0;
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 2) = 0u;
  }
  else
  {
    if (*((_QWORD *)a2 + 4))
    {
      v10 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v10, *((const SnippetUI::TextProperty **)a2 + 4));
    }
    else
    {
      v10 = 0;
    }
    *((_QWORD *)this + 4) = v10;
    if (*((_QWORD *)a2 + 5))
    {
      v12 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v12, *((const SnippetUI::TextProperty **)a2 + 5));
    }
    else
    {
      v12 = 0;
    }
    *((_QWORD *)this + 5) = v12;
    if (*((_QWORD *)a2 + 6))
    {
      v13 = (SnippetUI::MultilineTextProperty *)operator new();
      SnippetUI::MultilineTextProperty::MultilineTextProperty(v13, *((const SnippetUI::MultilineTextProperty **)a2 + 6));
    }
    else
    {
      v13 = 0;
    }
    *((_QWORD *)this + 6) = v13;
    if (*((_QWORD *)a2 + 7))
    {
      v14 = (SnippetUI::MultilineTextProperty *)operator new();
      SnippetUI::MultilineTextProperty::MultilineTextProperty(v14, *((const SnippetUI::MultilineTextProperty **)a2 + 7));
    }
    else
    {
      v14 = 0;
    }
    *((_QWORD *)this + 7) = v14;
    if (*((_QWORD *)a2 + 8))
    {
      v15 = (SnippetUI::ActionProperty *)operator new();
      SnippetUI::ActionProperty::ActionProperty(v15, *((const SnippetUI::ActionProperty **)a2 + 8));
    }
    else
    {
      v15 = 0;
    }
    *((_QWORD *)this + 8) = v15;
    if (*((_QWORD *)a2 + 9))
    {
      v16 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v16, *((const SnippetUI::TextProperty **)a2 + 9));
    }
    else
    {
      v16 = 0;
    }
    *((_QWORD *)this + 9) = v16;
    if (*((_QWORD *)a2 + 10))
    {
      v11 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v11, *((const SnippetUI::TextProperty **)a2 + 10));
    }
    else
    {
      v11 = 0;
    }
  }
  *((_QWORD *)this + 10) = v11;
  return this;
}

void sub_1BF99CA14(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x1C3B8D890](v2, 0x10A1C40BEC01B52);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::SimpleItem_Standard::CopyFrom(SnippetUI::SimpleItem_Standard *this, const SnippetUI::SimpleItem_Standard *a2)
{
  if (a2 != this)
  {
    SnippetUI::SimpleItem_Standard::Clear(this);
    SnippetUI::SimpleItem_Standard::MergeFrom(this, a2);
  }
}

void SnippetUI::SimpleItem_Standard::InternalSwap(SnippetUI::SimpleItem_Standard *this, SnippetUI::SimpleItem_Standard *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  google::protobuf::UnknownFieldSet *v26;

  v4 = (SnippetUI::SimpleItem_Standard *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v26;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 2);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = (uint64_t *)*((_QWORD *)this + 3);
  v14 = (uint64_t **)((char *)a2 + 24);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_19;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v13 = (uint64_t *)*((_QWORD *)this + 3);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v13[2];
  v17 = *(_OWORD *)v13;
  v18 = v15[2];
  *(_OWORD *)v13 = *(_OWORD *)v15;
  v13[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_19:
  v19 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v19;
  v20 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v20;
  v21 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v21;
  v22 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v22;
  v23 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v23;
  v24 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v24;
  v25 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v25;
}

void SnippetUI::SimpleItem_Rich::InitAsDefaultInstance(SnippetUI::SimpleItem_Rich *this)
{
  qword_1ED1D40A0 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D40A8 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D40B0 = (uint64_t)&SnippetUI::_MultilineTextProperty_default_instance_;
  unk_1ED1D40B8 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D40C0 = (uint64_t)&SnippetUI::_MultilineTextProperty_default_instance_;
  unk_1ED1D40C8 = &SnippetUI::_VisualProperty_default_instance_;
  qword_1ED1D40D0 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
  unk_1ED1D40D8 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D40E0 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D40E8 = &SnippetUI::_TextProperty_default_instance_;
}

uint64_t SnippetUI::SimpleItem_Rich::_Internal::text_1(SnippetUI::SimpleItem_Rich::_Internal *this, const SnippetUI::SimpleItem_Rich *a2)
{
  return *((_QWORD *)this + 4);
}

uint64_t SnippetUI::SimpleItem_Rich::_Internal::text_2(SnippetUI::SimpleItem_Rich::_Internal *this, const SnippetUI::SimpleItem_Rich *a2)
{
  return *((_QWORD *)this + 5);
}

uint64_t SnippetUI::SimpleItem_Rich::_Internal::text_3(SnippetUI::SimpleItem_Rich::_Internal *this, const SnippetUI::SimpleItem_Rich *a2)
{
  return *((_QWORD *)this + 6);
}

uint64_t SnippetUI::SimpleItem_Rich::_Internal::text_4(SnippetUI::SimpleItem_Rich::_Internal *this, const SnippetUI::SimpleItem_Rich *a2)
{
  return *((_QWORD *)this + 7);
}

uint64_t SnippetUI::SimpleItem_Rich::_Internal::text_5(SnippetUI::SimpleItem_Rich::_Internal *this, const SnippetUI::SimpleItem_Rich *a2)
{
  return *((_QWORD *)this + 8);
}

uint64_t SnippetUI::SimpleItem_Rich::_Internal::thumbnail(SnippetUI::SimpleItem_Rich::_Internal *this, const SnippetUI::SimpleItem_Rich *a2)
{
  return *((_QWORD *)this + 9);
}

uint64_t SnippetUI::SimpleItem_Rich::_Internal::action(SnippetUI::SimpleItem_Rich::_Internal *this, const SnippetUI::SimpleItem_Rich *a2)
{
  return *((_QWORD *)this + 10);
}

uint64_t SnippetUI::SimpleItem_Rich::_Internal::text_6(SnippetUI::SimpleItem_Rich::_Internal *this, const SnippetUI::SimpleItem_Rich *a2)
{
  return *((_QWORD *)this + 11);
}

uint64_t SnippetUI::SimpleItem_Rich::_Internal::text_7(SnippetUI::SimpleItem_Rich::_Internal *this, const SnippetUI::SimpleItem_Rich *a2)
{
  return *((_QWORD *)this + 12);
}

uint64_t SnippetUI::SimpleItem_Rich::_Internal::text_8(SnippetUI::SimpleItem_Rich::_Internal *this, const SnippetUI::SimpleItem_Rich *a2)
{
  return *((_QWORD *)this + 13);
}

uint64_t SnippetUI::SimpleItem_Rich::clear_text_1(SnippetUI::SimpleItem_Rich *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 4) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_Rich::clear_text_2(SnippetUI::SimpleItem_Rich *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 5);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 5) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_Rich::clear_text_3(SnippetUI::SimpleItem_Rich *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 6);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 6) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_Rich::clear_text_4(SnippetUI::SimpleItem_Rich *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 7);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 7) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_Rich::clear_text_5(SnippetUI::SimpleItem_Rich *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 8) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_Rich::clear_thumbnail(SnippetUI::SimpleItem_Rich *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 9);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 9) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_Rich::clear_action(SnippetUI::SimpleItem_Rich *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 10);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 10) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_Rich::clear_text_6(SnippetUI::SimpleItem_Rich *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 11);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 11) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_Rich::clear_text_7(SnippetUI::SimpleItem_Rich *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 12);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 12) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_Rich::clear_text_8(SnippetUI::SimpleItem_Rich *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 13);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 13) = 0;
  return result;
}

SnippetUI::SimpleItem_Rich *SnippetUI::SimpleItem_Rich::SimpleItem_Rich(SnippetUI::SimpleItem_Rich *this, const SnippetUI::SimpleItem_Rich *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  SnippetUI::TextProperty *v10;
  SnippetUI::TextProperty *v11;
  SnippetUI::TextProperty *v12;
  SnippetUI::MultilineTextProperty *v13;
  SnippetUI::TextProperty *v14;
  SnippetUI::MultilineTextProperty *v15;
  SnippetUI::VisualProperty *v16;
  SnippetUI::ActionProperty *v17;
  SnippetUI::TextProperty *v18;
  SnippetUI::TextProperty *v19;

  *(_QWORD *)this = &off_1E7930518;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 28) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::SimpleItem_Rich *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
    v9 = *(_QWORD *)(v8 + 8);
  else
    v9 = *(unsigned __int8 *)(v8 + 23);
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v9)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
  if (a2 == (const SnippetUI::SimpleItem_Rich *)&SnippetUI::_SimpleItem_Rich_default_instance_)
  {
    v11 = 0;
    *((_QWORD *)this + 12) = 0;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
  }
  else
  {
    if (*((_QWORD *)a2 + 4))
    {
      v10 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v10, *((const SnippetUI::TextProperty **)a2 + 4));
    }
    else
    {
      v10 = 0;
    }
    *((_QWORD *)this + 4) = v10;
    if (*((_QWORD *)a2 + 5))
    {
      v12 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v12, *((const SnippetUI::TextProperty **)a2 + 5));
    }
    else
    {
      v12 = 0;
    }
    *((_QWORD *)this + 5) = v12;
    if (*((_QWORD *)a2 + 6))
    {
      v13 = (SnippetUI::MultilineTextProperty *)operator new();
      SnippetUI::MultilineTextProperty::MultilineTextProperty(v13, *((const SnippetUI::MultilineTextProperty **)a2 + 6));
    }
    else
    {
      v13 = 0;
    }
    *((_QWORD *)this + 6) = v13;
    if (*((_QWORD *)a2 + 7))
    {
      v14 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v14, *((const SnippetUI::TextProperty **)a2 + 7));
    }
    else
    {
      v14 = 0;
    }
    *((_QWORD *)this + 7) = v14;
    if (*((_QWORD *)a2 + 8))
    {
      v15 = (SnippetUI::MultilineTextProperty *)operator new();
      SnippetUI::MultilineTextProperty::MultilineTextProperty(v15, *((const SnippetUI::MultilineTextProperty **)a2 + 8));
    }
    else
    {
      v15 = 0;
    }
    *((_QWORD *)this + 8) = v15;
    if (*((_QWORD *)a2 + 9))
    {
      v16 = (SnippetUI::VisualProperty *)operator new();
      SnippetUI::VisualProperty::VisualProperty(v16, *((const SnippetUI::VisualProperty **)a2 + 9));
    }
    else
    {
      v16 = 0;
    }
    *((_QWORD *)this + 9) = v16;
    if (*((_QWORD *)a2 + 10))
    {
      v17 = (SnippetUI::ActionProperty *)operator new();
      SnippetUI::ActionProperty::ActionProperty(v17, *((const SnippetUI::ActionProperty **)a2 + 10));
    }
    else
    {
      v17 = 0;
    }
    *((_QWORD *)this + 10) = v17;
    if (*((_QWORD *)a2 + 11))
    {
      v18 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v18, *((const SnippetUI::TextProperty **)a2 + 11));
    }
    else
    {
      v18 = 0;
    }
    *((_QWORD *)this + 11) = v18;
    if (*((_QWORD *)a2 + 12))
    {
      v19 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v19, *((const SnippetUI::TextProperty **)a2 + 12));
    }
    else
    {
      v19 = 0;
    }
    *((_QWORD *)this + 12) = v19;
    if (*((_QWORD *)a2 + 13))
    {
      v11 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v11, *((const SnippetUI::TextProperty **)a2 + 13));
    }
    else
    {
      v11 = 0;
    }
  }
  *((_QWORD *)this + 13) = v11;
  return this;
}

void sub_1BF99D240(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x1C3B8D890](v2, 0x10A1C40BEC01B52);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::SimpleItem_Rich::CopyFrom(SnippetUI::SimpleItem_Rich *this, const SnippetUI::SimpleItem_Rich *a2)
{
  if (a2 != this)
  {
    SnippetUI::SimpleItem_Rich::Clear(this);
    SnippetUI::SimpleItem_Rich::MergeFrom(this, a2);
  }
}

void SnippetUI::SimpleItem_Rich::InternalSwap(SnippetUI::SimpleItem_Rich *this, SnippetUI::SimpleItem_Rich *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  google::protobuf::UnknownFieldSet *v29;

  v4 = (SnippetUI::SimpleItem_Rich *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v29;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 2);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = (uint64_t *)*((_QWORD *)this + 3);
  v14 = (uint64_t **)((char *)a2 + 24);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_19;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v13 = (uint64_t *)*((_QWORD *)this + 3);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v13[2];
  v17 = *(_OWORD *)v13;
  v18 = v15[2];
  *(_OWORD *)v13 = *(_OWORD *)v15;
  v13[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_19:
  v19 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v19;
  v20 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v20;
  v21 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v21;
  v22 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v22;
  v23 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v23;
  v24 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v24;
  v25 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v25;
  v26 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v26;
  v27 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v27;
  v28 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v28;
}

void SnippetUI::SimpleItem_ReverseRich::InitAsDefaultInstance(SnippetUI::SimpleItem_ReverseRich *this)
{
  qword_1ED1D4750 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D4758 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D4760 = (uint64_t)&SnippetUI::_MultilineTextProperty_default_instance_;
  unk_1ED1D4768 = &SnippetUI::_VisualProperty_default_instance_;
  qword_1ED1D4770 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
  unk_1ED1D4778 = &SnippetUI::_TextProperty_default_instance_;
}

uint64_t SnippetUI::SimpleItem_ReverseRich::_Internal::text_1(SnippetUI::SimpleItem_ReverseRich::_Internal *this, const SnippetUI::SimpleItem_ReverseRich *a2)
{
  return *((_QWORD *)this + 4);
}

uint64_t SnippetUI::SimpleItem_ReverseRich::_Internal::text_2(SnippetUI::SimpleItem_ReverseRich::_Internal *this, const SnippetUI::SimpleItem_ReverseRich *a2)
{
  return *((_QWORD *)this + 5);
}

uint64_t SnippetUI::SimpleItem_ReverseRich::_Internal::text_3(SnippetUI::SimpleItem_ReverseRich::_Internal *this, const SnippetUI::SimpleItem_ReverseRich *a2)
{
  return *((_QWORD *)this + 6);
}

uint64_t SnippetUI::SimpleItem_ReverseRich::_Internal::thumbnail(SnippetUI::SimpleItem_ReverseRich::_Internal *this, const SnippetUI::SimpleItem_ReverseRich *a2)
{
  return *((_QWORD *)this + 7);
}

uint64_t SnippetUI::SimpleItem_ReverseRich::_Internal::action(SnippetUI::SimpleItem_ReverseRich::_Internal *this, const SnippetUI::SimpleItem_ReverseRich *a2)
{
  return *((_QWORD *)this + 8);
}

uint64_t SnippetUI::SimpleItem_ReverseRich::_Internal::text_4(SnippetUI::SimpleItem_ReverseRich::_Internal *this, const SnippetUI::SimpleItem_ReverseRich *a2)
{
  return *((_QWORD *)this + 9);
}

uint64_t SnippetUI::SimpleItem_ReverseRich::clear_text_1(SnippetUI::SimpleItem_ReverseRich *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 4) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_ReverseRich::clear_text_2(SnippetUI::SimpleItem_ReverseRich *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 5);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 5) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_ReverseRich::clear_text_3(SnippetUI::SimpleItem_ReverseRich *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 6);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 6) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_ReverseRich::clear_thumbnail(SnippetUI::SimpleItem_ReverseRich *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 7);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 7) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_ReverseRich::clear_action(SnippetUI::SimpleItem_ReverseRich *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 8) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_ReverseRich::clear_text_4(SnippetUI::SimpleItem_ReverseRich *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 9);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 9) = 0;
  return result;
}

SnippetUI::SimpleItem_ReverseRich *SnippetUI::SimpleItem_ReverseRich::SimpleItem_ReverseRich(SnippetUI::SimpleItem_ReverseRich *this, const SnippetUI::SimpleItem_ReverseRich *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  SnippetUI::TextProperty *v10;
  SnippetUI::TextProperty *v11;
  SnippetUI::TextProperty *v12;
  SnippetUI::MultilineTextProperty *v13;
  SnippetUI::VisualProperty *v14;
  SnippetUI::ActionProperty *v15;

  *(_QWORD *)this = &off_1E79305D8;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 20) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::SimpleItem_ReverseRich *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
    v9 = *(_QWORD *)(v8 + 8);
  else
    v9 = *(unsigned __int8 *)(v8 + 23);
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v9)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
  if (a2 == (const SnippetUI::SimpleItem_ReverseRich *)&SnippetUI::_SimpleItem_ReverseRich_default_instance_)
  {
    v11 = 0;
    *((_QWORD *)this + 8) = 0;
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
  }
  else
  {
    if (*((_QWORD *)a2 + 4))
    {
      v10 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v10, *((const SnippetUI::TextProperty **)a2 + 4));
    }
    else
    {
      v10 = 0;
    }
    *((_QWORD *)this + 4) = v10;
    if (*((_QWORD *)a2 + 5))
    {
      v12 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v12, *((const SnippetUI::TextProperty **)a2 + 5));
    }
    else
    {
      v12 = 0;
    }
    *((_QWORD *)this + 5) = v12;
    if (*((_QWORD *)a2 + 6))
    {
      v13 = (SnippetUI::MultilineTextProperty *)operator new();
      SnippetUI::MultilineTextProperty::MultilineTextProperty(v13, *((const SnippetUI::MultilineTextProperty **)a2 + 6));
    }
    else
    {
      v13 = 0;
    }
    *((_QWORD *)this + 6) = v13;
    if (*((_QWORD *)a2 + 7))
    {
      v14 = (SnippetUI::VisualProperty *)operator new();
      SnippetUI::VisualProperty::VisualProperty(v14, *((const SnippetUI::VisualProperty **)a2 + 7));
    }
    else
    {
      v14 = 0;
    }
    *((_QWORD *)this + 7) = v14;
    if (*((_QWORD *)a2 + 8))
    {
      v15 = (SnippetUI::ActionProperty *)operator new();
      SnippetUI::ActionProperty::ActionProperty(v15, *((const SnippetUI::ActionProperty **)a2 + 8));
    }
    else
    {
      v15 = 0;
    }
    *((_QWORD *)this + 8) = v15;
    if (*((_QWORD *)a2 + 9))
    {
      v11 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v11, *((const SnippetUI::TextProperty **)a2 + 9));
    }
    else
    {
      v11 = 0;
    }
  }
  *((_QWORD *)this + 9) = v11;
  return this;
}

void sub_1BF99D8CC(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x1C3B8D890](v2, 0x10A1C40BEC01B52);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::SimpleItem_ReverseRich::CopyFrom(SnippetUI::SimpleItem_ReverseRich *this, const SnippetUI::SimpleItem_ReverseRich *a2)
{
  if (a2 != this)
  {
    SnippetUI::SimpleItem_ReverseRich::Clear(this);
    SnippetUI::SimpleItem_ReverseRich::MergeFrom(this, a2);
  }
}

void SnippetUI::SimpleItem_ReverseRich::InternalSwap(SnippetUI::SimpleItem_ReverseRich *this, SnippetUI::SimpleItem_ReverseRich *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  google::protobuf::UnknownFieldSet *v25;

  v4 = (SnippetUI::SimpleItem_ReverseRich *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v25;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 2);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = (uint64_t *)*((_QWORD *)this + 3);
  v14 = (uint64_t **)((char *)a2 + 24);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_19;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v13 = (uint64_t *)*((_QWORD *)this + 3);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v13[2];
  v17 = *(_OWORD *)v13;
  v18 = v15[2];
  *(_OWORD *)v13 = *(_OWORD *)v15;
  v13[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_19:
  v19 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v19;
  v20 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v20;
  v21 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v21;
  v22 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v22;
  v23 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v23;
  v24 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v24;
}

void SnippetUI::SimpleItem_Visual::InitAsDefaultInstance(SnippetUI::SimpleItem_Visual *this)
{
  qword_1ED1D4320 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
  unk_1ED1D4328 = &SnippetUI::_TextProperty_default_instance_;
}

uint64_t SnippetUI::SimpleItem_Visual::_Internal::action(SnippetUI::SimpleItem_Visual::_Internal *this, const SnippetUI::SimpleItem_Visual *a2)
{
  return *((_QWORD *)this + 7);
}

uint64_t SnippetUI::SimpleItem_Visual::_Internal::text_1(SnippetUI::SimpleItem_Visual::_Internal *this, const SnippetUI::SimpleItem_Visual *a2)
{
  return *((_QWORD *)this + 8);
}

void SnippetUI::SimpleItem_Visual::clear_thumbnails(SnippetUI::SimpleItem_Visual *this)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::VisualProperty>::TypeHandler>((uint64_t)this + 16);
}

uint64_t SnippetUI::SimpleItem_Visual::clear_action(SnippetUI::SimpleItem_Visual *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 7);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 7) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_Visual::clear_text_1(SnippetUI::SimpleItem_Visual *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 8) = 0;
  return result;
}

SnippetUI::SimpleItem_Visual *SnippetUI::SimpleItem_Visual::SimpleItem_Visual(SnippetUI::SimpleItem_Visual *this, const SnippetUI::SimpleItem_Visual *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  SnippetUI::ActionProperty *v11;
  SnippetUI::TextProperty *v12;

  *(_QWORD *)this = &off_1E7930698;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (SnippetUI::SimpleItem_Visual *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::VisualProperty>::TypeHandler>((int **)this + 2, (uint64_t)a2 + 16);
  *((_DWORD *)this + 18) = 0;
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom(v4, (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  v6 = *((_QWORD *)a2 + 5);
  if (*(char *)(v6 + 23) < 0)
    v7 = *(_QWORD *)(v6 + 8);
  else
    v7 = *(unsigned __int8 *)(v6 + 23);
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string && v7 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 5, v6);
  *((_QWORD *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  v9 = *((_QWORD *)a2 + 6);
  if (*(char *)(v9 + 23) < 0)
    v10 = *(_QWORD *)(v9 + 8);
  else
    v10 = *(unsigned __int8 *)(v9 + 23);
  if ((uint64_t *)v9 != &google::protobuf::internal::fixed_address_empty_string && v10)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, v9);
  if (a2 == (const SnippetUI::SimpleItem_Visual *)&SnippetUI::_SimpleItem_Visual_default_instance_)
  {
    v12 = 0;
    *((_QWORD *)this + 7) = 0;
  }
  else
  {
    if (*((_QWORD *)a2 + 7))
    {
      v11 = (SnippetUI::ActionProperty *)operator new();
      SnippetUI::ActionProperty::ActionProperty(v11, *((const SnippetUI::ActionProperty **)a2 + 7));
    }
    else
    {
      v11 = 0;
    }
    *((_QWORD *)this + 7) = v11;
    if (*((_QWORD *)a2 + 8))
    {
      v12 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v12, *((const SnippetUI::TextProperty **)a2 + 8));
    }
    else
    {
      v12 = 0;
    }
  }
  *((_QWORD *)this + 8) = v12;
  return this;
}

void sub_1BF99DD40(_Unwind_Exception *a1)
{
  uint64_t *v1;
  google::protobuf::internal::RepeatedPtrFieldBase *v2;
  uint64_t v3;

  MEMORY[0x1C3B8D890](v3, 0x10A1C40BEC01B52);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::SimpleItem_Visual::CopyFrom(SnippetUI::SimpleItem_Visual *this, const SnippetUI::SimpleItem_Visual *a2)
{
  if (a2 != this)
  {
    SnippetUI::SimpleItem_Visual::Clear(this);
    SnippetUI::SimpleItem_Visual::MergeFrom(this, a2);
  }
}

void SnippetUI::SimpleItem_Visual::InternalSwap(SnippetUI::SimpleItem_Visual *this, SnippetUI::SimpleItem_Visual *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  google::protobuf::UnknownFieldSet *v21;

  v4 = (SnippetUI::SimpleItem_Visual *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v21;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((SnippetUI::SimpleItem_Visual *)((char *)this + 16), (SnippetUI::SimpleItem_Visual *)((char *)a2 + 16));
  v7 = (uint64_t *)*((_QWORD *)this + 5);
  v8 = (uint64_t **)((char *)a2 + 40);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 5, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 5);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 5, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = (uint64_t *)*((_QWORD *)this + 6);
  v14 = (uint64_t **)((char *)a2 + 48);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_19;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 6, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v13 = (uint64_t *)*((_QWORD *)this + 6);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 6, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v13[2];
  v17 = *(_OWORD *)v13;
  v18 = v15[2];
  *(_OWORD *)v13 = *(_OWORD *)v15;
  v13[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_19:
  v19 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v19;
  v20 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v20;
}

void SnippetUI::SimpleItem_Player::InitAsDefaultInstance(SnippetUI::SimpleItem_Player *this)
{
  qword_1ED1D42B8 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D42C0 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D42C8 = (uint64_t)&SnippetUI::_MultilineTextProperty_default_instance_;
  unk_1ED1D42D0 = &SnippetUI::_ActionProperty_default_instance_;
  qword_1ED1D42D8 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
}

uint64_t SnippetUI::SimpleItem_Player::_Internal::text_1(SnippetUI::SimpleItem_Player::_Internal *this, const SnippetUI::SimpleItem_Player *a2)
{
  return *((_QWORD *)this + 7);
}

uint64_t SnippetUI::SimpleItem_Player::_Internal::text_2(SnippetUI::SimpleItem_Player::_Internal *this, const SnippetUI::SimpleItem_Player *a2)
{
  return *((_QWORD *)this + 8);
}

uint64_t SnippetUI::SimpleItem_Player::_Internal::text_3(SnippetUI::SimpleItem_Player::_Internal *this, const SnippetUI::SimpleItem_Player *a2)
{
  return *((_QWORD *)this + 9);
}

uint64_t SnippetUI::SimpleItem_Player::_Internal::action(SnippetUI::SimpleItem_Player::_Internal *this, const SnippetUI::SimpleItem_Player *a2)
{
  return *((_QWORD *)this + 10);
}

uint64_t SnippetUI::SimpleItem_Player::_Internal::text_4(SnippetUI::SimpleItem_Player::_Internal *this, const SnippetUI::SimpleItem_Player *a2)
{
  return *((_QWORD *)this + 11);
}

void SnippetUI::SimpleItem_Player::clear_player(SnippetUI::SimpleItem_Player *this)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((uint64_t)this + 16);
}

uint64_t SnippetUI::SimpleItem_Player::clear_text_1(SnippetUI::SimpleItem_Player *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 7);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 7) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_Player::clear_text_2(SnippetUI::SimpleItem_Player *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 8) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_Player::clear_text_3(SnippetUI::SimpleItem_Player *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 9);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 9) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_Player::clear_action(SnippetUI::SimpleItem_Player *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 10);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 10) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_Player::clear_text_4(SnippetUI::SimpleItem_Player *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 11);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 11) = 0;
  return result;
}

SnippetUI::SimpleItem_Player *SnippetUI::SimpleItem_Player::SimpleItem_Player(SnippetUI::SimpleItem_Player *this, const SnippetUI::SimpleItem_Player *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  SnippetUI::TextProperty *v11;
  SnippetUI::TextProperty *v12;
  SnippetUI::TextProperty *v13;
  SnippetUI::MultilineTextProperty *v14;
  SnippetUI::ActionProperty *v15;

  *(_QWORD *)this = &off_1E7930758;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (SnippetUI::SimpleItem_Player *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::Player>::TypeHandler>((int **)this + 2, (uint64_t)a2 + 16);
  *((_DWORD *)this + 24) = 0;
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom(v4, (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  v6 = *((_QWORD *)a2 + 5);
  if (*(char *)(v6 + 23) < 0)
    v7 = *(_QWORD *)(v6 + 8);
  else
    v7 = *(unsigned __int8 *)(v6 + 23);
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string && v7 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 5, v6);
  *((_QWORD *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  v9 = *((_QWORD *)a2 + 6);
  if (*(char *)(v9 + 23) < 0)
    v10 = *(_QWORD *)(v9 + 8);
  else
    v10 = *(unsigned __int8 *)(v9 + 23);
  if ((uint64_t *)v9 != &google::protobuf::internal::fixed_address_empty_string && v10)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, v9);
  if (a2 == (const SnippetUI::SimpleItem_Player *)&SnippetUI::_SimpleItem_Player_default_instance_)
  {
    v12 = 0;
    *(_OWORD *)((char *)this + 72) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
  }
  else
  {
    if (*((_QWORD *)a2 + 7))
    {
      v11 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v11, *((const SnippetUI::TextProperty **)a2 + 7));
    }
    else
    {
      v11 = 0;
    }
    *((_QWORD *)this + 7) = v11;
    if (*((_QWORD *)a2 + 8))
    {
      v13 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v13, *((const SnippetUI::TextProperty **)a2 + 8));
    }
    else
    {
      v13 = 0;
    }
    *((_QWORD *)this + 8) = v13;
    if (*((_QWORD *)a2 + 9))
    {
      v14 = (SnippetUI::MultilineTextProperty *)operator new();
      SnippetUI::MultilineTextProperty::MultilineTextProperty(v14, *((const SnippetUI::MultilineTextProperty **)a2 + 9));
    }
    else
    {
      v14 = 0;
    }
    *((_QWORD *)this + 9) = v14;
    if (*((_QWORD *)a2 + 10))
    {
      v15 = (SnippetUI::ActionProperty *)operator new();
      SnippetUI::ActionProperty::ActionProperty(v15, *((const SnippetUI::ActionProperty **)a2 + 10));
    }
    else
    {
      v15 = 0;
    }
    *((_QWORD *)this + 10) = v15;
    if (*((_QWORD *)a2 + 11))
    {
      v12 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v12, *((const SnippetUI::TextProperty **)a2 + 11));
    }
    else
    {
      v12 = 0;
    }
  }
  *((_QWORD *)this + 11) = v12;
  return this;
}

void sub_1BF99E2FC(_Unwind_Exception *a1)
{
  uint64_t *v1;
  google::protobuf::internal::RepeatedPtrFieldBase *v2;
  uint64_t v3;

  MEMORY[0x1C3B8D890](v3, 0x10A1C40BEC01B52);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::SimpleItem_Player::CopyFrom(SnippetUI::SimpleItem_Player *this, const SnippetUI::SimpleItem_Player *a2)
{
  if (a2 != this)
  {
    SnippetUI::SimpleItem_Player::Clear(this);
    SnippetUI::SimpleItem_Player::MergeFrom(this, a2);
  }
}

void SnippetUI::SimpleItem_Player::InternalSwap(SnippetUI::SimpleItem_Player *this, SnippetUI::SimpleItem_Player *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  google::protobuf::UnknownFieldSet *v24;

  v4 = (SnippetUI::SimpleItem_Player *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v24;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((SnippetUI::SimpleItem_Player *)((char *)this + 16), (SnippetUI::SimpleItem_Player *)((char *)a2 + 16));
  v7 = (uint64_t *)*((_QWORD *)this + 5);
  v8 = (uint64_t **)((char *)a2 + 40);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 5, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 5);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 5, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = (uint64_t *)*((_QWORD *)this + 6);
  v14 = (uint64_t **)((char *)a2 + 48);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_19;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 6, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v13 = (uint64_t *)*((_QWORD *)this + 6);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 6, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v13[2];
  v17 = *(_OWORD *)v13;
  v18 = v15[2];
  *(_OWORD *)v13 = *(_OWORD *)v15;
  v13[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_19:
  v19 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v19;
  v20 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v20;
  v21 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v21;
  v22 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v22;
  v23 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v23;
}

void SnippetUI::SimpleItem_RichSearchResult::InitAsDefaultInstance(SnippetUI::SimpleItem_RichSearchResult *this)
{
  qword_1EF5844F0 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EF5844F8 = &SnippetUI::_TextProperty_default_instance_;
  qword_1EF584500 = (uint64_t)&SnippetUI::_MultilineTextProperty_default_instance_;
  unk_1EF584508 = &SnippetUI::_TextProperty_default_instance_;
  qword_1EF584510 = (uint64_t)&SnippetUI::_MultilineTextProperty_default_instance_;
  unk_1EF584518 = &SnippetUI::_TextProperty_default_instance_;
  qword_1EF584520 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EF584528 = &SnippetUI::_TextProperty_default_instance_;
  qword_1EF584530 = (uint64_t)&SnippetUI::_VisualProperty_default_instance_;
  unk_1EF584538 = &SnippetUI::_ActionProperty_default_instance_;
}

uint64_t SnippetUI::SimpleItem_RichSearchResult::_Internal::text_1(SnippetUI::SimpleItem_RichSearchResult::_Internal *this, const SnippetUI::SimpleItem_RichSearchResult *a2)
{
  return *((_QWORD *)this + 4);
}

uint64_t SnippetUI::SimpleItem_RichSearchResult::_Internal::text_2(SnippetUI::SimpleItem_RichSearchResult::_Internal *this, const SnippetUI::SimpleItem_RichSearchResult *a2)
{
  return *((_QWORD *)this + 5);
}

uint64_t SnippetUI::SimpleItem_RichSearchResult::_Internal::text_3(SnippetUI::SimpleItem_RichSearchResult::_Internal *this, const SnippetUI::SimpleItem_RichSearchResult *a2)
{
  return *((_QWORD *)this + 6);
}

uint64_t SnippetUI::SimpleItem_RichSearchResult::_Internal::text_4(SnippetUI::SimpleItem_RichSearchResult::_Internal *this, const SnippetUI::SimpleItem_RichSearchResult *a2)
{
  return *((_QWORD *)this + 7);
}

uint64_t SnippetUI::SimpleItem_RichSearchResult::_Internal::text_5(SnippetUI::SimpleItem_RichSearchResult::_Internal *this, const SnippetUI::SimpleItem_RichSearchResult *a2)
{
  return *((_QWORD *)this + 8);
}

uint64_t SnippetUI::SimpleItem_RichSearchResult::_Internal::text_6(SnippetUI::SimpleItem_RichSearchResult::_Internal *this, const SnippetUI::SimpleItem_RichSearchResult *a2)
{
  return *((_QWORD *)this + 9);
}

uint64_t SnippetUI::SimpleItem_RichSearchResult::_Internal::text_7(SnippetUI::SimpleItem_RichSearchResult::_Internal *this, const SnippetUI::SimpleItem_RichSearchResult *a2)
{
  return *((_QWORD *)this + 10);
}

uint64_t SnippetUI::SimpleItem_RichSearchResult::_Internal::text_8(SnippetUI::SimpleItem_RichSearchResult::_Internal *this, const SnippetUI::SimpleItem_RichSearchResult *a2)
{
  return *((_QWORD *)this + 11);
}

uint64_t SnippetUI::SimpleItem_RichSearchResult::_Internal::thumbnail(SnippetUI::SimpleItem_RichSearchResult::_Internal *this, const SnippetUI::SimpleItem_RichSearchResult *a2)
{
  return *((_QWORD *)this + 12);
}

uint64_t SnippetUI::SimpleItem_RichSearchResult::_Internal::action(SnippetUI::SimpleItem_RichSearchResult::_Internal *this, const SnippetUI::SimpleItem_RichSearchResult *a2)
{
  return *((_QWORD *)this + 13);
}

uint64_t SnippetUI::SimpleItem_RichSearchResult::clear_text_1(SnippetUI::SimpleItem_RichSearchResult *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 4) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_RichSearchResult::clear_text_2(SnippetUI::SimpleItem_RichSearchResult *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 5);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 5) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_RichSearchResult::clear_text_3(SnippetUI::SimpleItem_RichSearchResult *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 6);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 6) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_RichSearchResult::clear_text_4(SnippetUI::SimpleItem_RichSearchResult *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 7);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 7) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_RichSearchResult::clear_text_5(SnippetUI::SimpleItem_RichSearchResult *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 8) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_RichSearchResult::clear_text_6(SnippetUI::SimpleItem_RichSearchResult *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 9);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 9) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_RichSearchResult::clear_text_7(SnippetUI::SimpleItem_RichSearchResult *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 10);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 10) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_RichSearchResult::clear_text_8(SnippetUI::SimpleItem_RichSearchResult *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 11);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 11) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_RichSearchResult::clear_thumbnail(SnippetUI::SimpleItem_RichSearchResult *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 12);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 12) = 0;
  return result;
}

uint64_t SnippetUI::SimpleItem_RichSearchResult::clear_action(SnippetUI::SimpleItem_RichSearchResult *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 13);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 13) = 0;
  return result;
}

SnippetUI::SimpleItem_RichSearchResult *SnippetUI::SimpleItem_RichSearchResult::SimpleItem_RichSearchResult(SnippetUI::SimpleItem_RichSearchResult *this, const SnippetUI::SimpleItem_RichSearchResult *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  SnippetUI::TextProperty *v10;
  SnippetUI::ActionProperty *v11;
  SnippetUI::TextProperty *v12;
  SnippetUI::MultilineTextProperty *v13;
  SnippetUI::TextProperty *v14;
  SnippetUI::MultilineTextProperty *v15;
  SnippetUI::TextProperty *v16;
  SnippetUI::TextProperty *v17;
  SnippetUI::TextProperty *v18;
  SnippetUI::VisualProperty *v19;

  *(_QWORD *)this = &off_1E7930818;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 28) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::SimpleItem_RichSearchResult *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
    v9 = *(_QWORD *)(v8 + 8);
  else
    v9 = *(unsigned __int8 *)(v8 + 23);
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v9)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
  if (a2 == (const SnippetUI::SimpleItem_RichSearchResult *)&SnippetUI::_SimpleItem_RichSearchResult_default_instance_)
  {
    v11 = 0;
    *((_QWORD *)this + 12) = 0;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
  }
  else
  {
    if (*((_QWORD *)a2 + 4))
    {
      v10 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v10, *((const SnippetUI::TextProperty **)a2 + 4));
    }
    else
    {
      v10 = 0;
    }
    *((_QWORD *)this + 4) = v10;
    if (*((_QWORD *)a2 + 5))
    {
      v12 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v12, *((const SnippetUI::TextProperty **)a2 + 5));
    }
    else
    {
      v12 = 0;
    }
    *((_QWORD *)this + 5) = v12;
    if (*((_QWORD *)a2 + 6))
    {
      v13 = (SnippetUI::MultilineTextProperty *)operator new();
      SnippetUI::MultilineTextProperty::MultilineTextProperty(v13, *((const SnippetUI::MultilineTextProperty **)a2 + 6));
    }
    else
    {
      v13 = 0;
    }
    *((_QWORD *)this + 6) = v13;
    if (*((_QWORD *)a2 + 7))
    {
      v14 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v14, *((const SnippetUI::TextProperty **)a2 + 7));
    }
    else
    {
      v14 = 0;
    }
    *((_QWORD *)this + 7) = v14;
    if (*((_QWORD *)a2 + 8))
    {
      v15 = (SnippetUI::MultilineTextProperty *)operator new();
      SnippetUI::MultilineTextProperty::MultilineTextProperty(v15, *((const SnippetUI::MultilineTextProperty **)a2 + 8));
    }
    else
    {
      v15 = 0;
    }
    *((_QWORD *)this + 8) = v15;
    if (*((_QWORD *)a2 + 9))
    {
      v16 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v16, *((const SnippetUI::TextProperty **)a2 + 9));
    }
    else
    {
      v16 = 0;
    }
    *((_QWORD *)this + 9) = v16;
    if (*((_QWORD *)a2 + 10))
    {
      v17 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v17, *((const SnippetUI::TextProperty **)a2 + 10));
    }
    else
    {
      v17 = 0;
    }
    *((_QWORD *)this + 10) = v17;
    if (*((_QWORD *)a2 + 11))
    {
      v18 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v18, *((const SnippetUI::TextProperty **)a2 + 11));
    }
    else
    {
      v18 = 0;
    }
    *((_QWORD *)this + 11) = v18;
    if (*((_QWORD *)a2 + 12))
    {
      v19 = (SnippetUI::VisualProperty *)operator new();
      SnippetUI::VisualProperty::VisualProperty(v19, *((const SnippetUI::VisualProperty **)a2 + 12));
    }
    else
    {
      v19 = 0;
    }
    *((_QWORD *)this + 12) = v19;
    if (*((_QWORD *)a2 + 13))
    {
      v11 = (SnippetUI::ActionProperty *)operator new();
      SnippetUI::ActionProperty::ActionProperty(v11, *((const SnippetUI::ActionProperty **)a2 + 13));
    }
    else
    {
      v11 = 0;
    }
  }
  *((_QWORD *)this + 13) = v11;
  return this;
}

void sub_1BF99EB24(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x1C3B8D890](v2, 0x10A1C40B18DE219);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::SimpleItem_RichSearchResult::CopyFrom(SnippetUI::SimpleItem_RichSearchResult *this, const SnippetUI::SimpleItem_RichSearchResult *a2)
{
  if (a2 != this)
  {
    SnippetUI::SimpleItem_RichSearchResult::Clear(this);
    SnippetUI::SimpleItem_RichSearchResult::MergeFrom(this, a2);
  }
}

void SnippetUI::SimpleItem_RichSearchResult::InternalSwap(SnippetUI::SimpleItem_RichSearchResult *this, SnippetUI::SimpleItem_RichSearchResult *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  google::protobuf::UnknownFieldSet *v29;

  v4 = (SnippetUI::SimpleItem_RichSearchResult *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v29;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 2);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = (uint64_t *)*((_QWORD *)this + 3);
  v14 = (uint64_t **)((char *)a2 + 24);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_19;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v13 = (uint64_t *)*((_QWORD *)this + 3);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v13[2];
  v17 = *(_OWORD *)v13;
  v18 = v15[2];
  *(_OWORD *)v13 = *(_OWORD *)v15;
  v13[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_19:
  v19 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v19;
  v20 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v20;
  v21 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v21;
  v22 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v22;
  v23 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v23;
  v24 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v24;
  v25 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v25;
  v26 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v26;
  v27 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v27;
  v28 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v28;
}

std::string *siri::dialogengine::DialogSpeed::toString(siri::dialogengine::DialogSpeed *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::FormatSpeed(this, (uint64_t)a2, 0);
}

std::string *siri::dialogengine::FormatSpeed(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  void *RequiredNumberParameter;
  void *v7;
  long double v8;
  char *OptionalStringParameter;
  char *v10;
  std::string *v11;
  void *v12;
  const char *v13;
  unsigned int v14;
  unsigned int data;
  siri::dialogengine *v16;
  double v17;
  double v18;
  unsigned int v19;
  char *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *size;
  int v26;
  std::string::size_type v27;
  std::string *p_p;
  std::string *v29;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  const void **v39[3];
  void *v40[2];
  char v41;
  std::string v42;
  char v43;
  double v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  void *v48[2];
  void *v49[2];
  __int128 v50;
  void *v51[2];
  void *v52[2];
  __int128 v53;
  std::string v54;
  std::string __p;
  std::string v56;
  void *v57;
  void *v58[2];
  uint64_t v59;
  char v60;
  std::string v61;
  std::string v62;
  std::string v63;
  __int128 v64;
  uint64_t v65[3];
  __int128 v66;
  uint64_t v67[3];
  __int128 v68;
  uint64_t v69[3];
  __int128 v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&__p, "value");
  RequiredNumberParameter = siri::dialogengine::GetRequiredNumberParameter((const void **)&__p.__r_.__value_.__l.__data_, a2);
  v7 = RequiredNumberParameter;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v7)
    {
LABEL_3:
      v8 = *((double *)v7 + 9);
      std::string::basic_string[abi:ne180100]<0>(&__p, "units");
      OptionalStringParameter = (char *)siri::dialogengine::GetOptionalStringParameter((const void **)&__p.__r_.__value_.__l.__data_, a2);
      v10 = OptionalStringParameter;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v10)
        {
LABEL_5:
          if (v10[95] < 0)
            std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v10 + 9), *((_QWORD *)v10 + 10));
          else
            __p = *(std::string *)(v10 + 3);
LABEL_15:
          v14 = siri::dialogengine::ParseUnitLabel<siri::dialogengine::Speed>((uint64_t)&__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v53 = 0u;
          memset(&v54, 0, sizeof(v54));
          *(_OWORD *)v51 = 0u;
          *(_OWORD *)v52 = 0u;
          *(_OWORD *)v49 = 0u;
          v50 = 0u;
          v47 = 0u;
          *(_OWORD *)v48 = 0u;
          v45 = 0u;
          v46 = 0u;
          if (v14 == -1)
          {
            if (v10)
            {
              if (*(char *)(a2 + 31) < 0)
                std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
              else
                __p = *(std::string *)(a2 + 8);
              v26 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
              v27 = __p.__r_.__value_.__r.__words[0];
              if (v10[95] < 0)
                std::string::__init_copy_ctor_external(&v42, *((const std::string::value_type **)v10 + 9), *((_QWORD *)v10 + 10));
              else
                v42 = *(std::string *)(v10 + 3);
              p_p = &__p;
              if (v26 < 0)
                p_p = (std::string *)v27;
              v29 = &v42;
              if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v29 = (std::string *)v42.__r_.__value_.__r.__words[0];
              siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Unrecognized 'units' input for variable '%s' of type 'dialog.Speed': %s", v13, p_p, v29);
              if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v42.__r_.__value_.__l.__data_);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
            }
            std::to_string(&__p, v8);
            siri::dialogengine::SpeakableString::SetString((uint64_t)&v45, (uint64_t)&__p);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              size = (void *)__p.__r_.__value_.__r.__words[0];
              goto LABEL_74;
            }
          }
          else
          {
            siri::dialogengine::GetConvertedUnitInfo<siri::dialogengine::Speed>(v8, (uint64_t)a1, a2, (uint64_t)&v42);
            if (LODWORD(v42.__r_.__value_.__l.__data_) == -2)
            {
              data = v14;
            }
            else
            {
              v8 = v44;
              data = v42.__r_.__value_.__l.__data_;
            }
            if (v8 == 0.0)
              v16 = 0;
            else
              v16 = (siri::dialogengine *)(fmod(v8, 1000000.0) == 0.0);
            v17 = round(v8);
            v18 = fmod(v8, 1.0);
            if (fabs(v17) >= 1000.0)
              v19 = a3;
            else
              v19 = 0;
            if (data > 4)
              v20 = "unit#unknownSpeedValue";
            else
              v20 = off_1E7930958[data];
            std::string::basic_string[abi:ne180100]<0>(v40, v20);
            siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)(v19 & 1), (uint64_t *)&v38);
            std::string::basic_string[abi:ne180100]<0>(&__p, "compactDecimalLong");
            *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v38;
            v38 = 0uLL;
            siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)((v19 >> 1) & 1), (uint64_t *)&v37);
            std::string::basic_string[abi:ne180100]<0>(&v56.__r_.__value_.__r.__words[2], "compactDecimalShort");
            *(_OWORD *)v58 = v37;
            v37 = 0uLL;
            siri::dialogengine::CreateJSONBoolVal(v16, (uint64_t *)&v36);
            std::string::basic_string[abi:ne180100]<0>(&v59, "numberIsMultipleOfMillion");
            *(_OWORD *)&v61.__r_.__value_.__r.__words[1] = v36;
            v36 = 0uLL;
            siri::dialogengine::CreateJSONDoubleVal(v8, (uint64_t *)&v35);
            std::string::basic_string[abi:ne180100]<0>(&v62, "number");
            *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v35;
            v35 = 0uLL;
            siri::dialogengine::CreateJSONDoubleVal(v17, (uint64_t *)&v34);
            std::string::basic_string[abi:ne180100]<0>(&v63.__r_.__value_.__r.__words[2], "numberRounded");
            v64 = v34;
            v34 = 0uLL;
            siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)1, (uint64_t *)&v33);
            std::string::basic_string[abi:ne180100]<0>(v65, "primaryContent");
            v66 = v33;
            v33 = 0uLL;
            siri::dialogengine::CreateJSONDoubleVal(v18 * 100.0, (uint64_t *)&v32);
            std::string::basic_string[abi:ne180100]<0>(v67, "remainders");
            v68 = v32;
            v32 = 0uLL;
            siri::dialogengine::CreateJSONDoubleVal(v8 - v18, (uint64_t *)&v31);
            std::string::basic_string[abi:ne180100]<0>(v69, "wholeUnits");
            v70 = v31;
            v31 = 0uLL;
            std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100]((uint64_t)v39, (const void **)&__p.__r_.__value_.__l.__data_, 8);
            v21 = 40;
            do
            {
              std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v54.__r_.__value_.__r.__words[v21 + 2]);
              if (SHIBYTE(v54.__r_.__value_.__r.__words[v21 + 1]) < 0)
                operator delete(*(void **)((char *)&v53 + v21 * 8 + 8));
              v21 -= 5;
            }
            while (v21 * 8);
            v22 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
            if (*((_QWORD *)&v38 + 1))
            {
              v23 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
              do
                v24 = __ldaxr(v23);
              while (__stlxr(v24 - 1, v23));
              if (!v24)
              {
                ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
                std::__shared_weak_count::__release_weak(v22);
              }
            }
            siri::dialogengine::ExecuteSharedCat(a1, (uint64_t)v40, v39, (uint64_t)&__p);
            std::string::operator=((std::string *)&v45, &__p);
            std::string::operator=((std::string *)((char *)&v46 + 8), &v56);
            std::string::operator=((std::string *)v48, (const std::string *)&v57);
            std::string::operator=((std::string *)&v49[1], (const std::string *)&v58[1]);
            std::string::operator=((std::string *)v51, &v61);
            std::string::operator=((std::string *)&v52[1], &v62);
            std::string::operator=(&v54, &v63);
            if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v63.__r_.__value_.__l.__data_);
            if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v62.__r_.__value_.__l.__data_);
            if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v61.__r_.__value_.__l.__data_);
            if (v60 < 0)
              operator delete(v58[1]);
            if (SHIBYTE(v58[0]) < 0)
              operator delete(v57);
            if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v56.__r_.__value_.__l.__data_);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(v39[1]);
            if (v41 < 0)
              operator delete(v40[0]);
            if (v43 < 0)
            {
              size = (void *)v42.__r_.__value_.__l.__size_;
LABEL_74:
              operator delete(size);
            }
          }
          v11 = (std::string *)operator new();
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          siri::dialogengine::VariableString::VariableString(v11, &__p, (const siri::dialogengine::SpeakableString *)&v45);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v54.__r_.__value_.__l.__data_);
          if (SHIBYTE(v53) < 0)
            operator delete(v52[1]);
          if (SHIBYTE(v52[0]) < 0)
            operator delete(v51[0]);
          if (SHIBYTE(v50) < 0)
            operator delete(v49[1]);
          if (SHIBYTE(v49[0]) < 0)
            operator delete(v48[0]);
          if (SHIBYTE(v47) < 0)
            operator delete(*((void **)&v46 + 1));
          if (SBYTE7(v46) < 0)
          {
            v12 = (void *)v45;
            goto LABEL_91;
          }
          return v11;
        }
      }
      else if (OptionalStringParameter)
      {
        goto LABEL_5;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      goto LABEL_15;
    }
  }
  else if (RequiredNumberParameter)
  {
    goto LABEL_3;
  }
  v11 = (std::string *)operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::basic_string[abi:ne180100]<0>(&v45, "");
  siri::dialogengine::VariableString::VariableString((uint64_t)v11, &__p, (uint64_t)&v45);
  if (SBYTE7(v46) < 0)
    operator delete((void *)v45);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    v12 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_91:
    operator delete(v12);
  }
  return v11;
}

void sub_1BF99F510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,int a63)
{
  char a66;

  if (a66 < 0)
    operator delete(__p);
  siri::dialogengine::SpeakableString::~SpeakableString(&a39);
  _Unwind_Resume(a1);
}

std::string *siri::dialogengine::DialogSpeed::compactDecimalLong(siri::dialogengine::DialogSpeed *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::FormatSpeed(this, (uint64_t)a2, 1u);
}

std::string *siri::dialogengine::DialogSpeed::compactDecimalShort(siri::dialogengine::DialogSpeed *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::FormatSpeed(this, (uint64_t)a2, 2u);
}

uint64_t siri::dialogengine::DialogSpeed::units(siri::dialogengine::DialogSpeed *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v3;
  std::string __p;
  _BYTE v6[8];
  void *v7;
  char v8;

  siri::dialogengine::GetConvertedUnitInfo<siri::dialogengine::Speed>(0.0, (uint64_t)this, (uint64_t)a2, (uint64_t)v6);
  v3 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::dialogengine::VariableString::VariableString(v3, &__p, (uint64_t)&v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v8 < 0)
    operator delete(v7);
  return v3;
}

void sub_1BF99F818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a14 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8D890](v21, 0x10B3C40D3060B95);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogSpeed::value(siri::dialogengine::DialogSpeed *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  double *RequiredNumberParameter;
  double *v6;
  uint64_t v7;
  void *size;
  std::string __p;
  std::string v11;
  char v12;
  double v13;

  std::string::basic_string[abi:ne180100]<0>(&v11, "value");
  RequiredNumberParameter = (double *)siri::dialogengine::GetRequiredNumberParameter((const void **)&v11.__r_.__value_.__l.__data_, (uint64_t)a2);
  v6 = RequiredNumberParameter;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v11.__r_.__value_.__l.__data_);
    if (v6)
    {
LABEL_3:
      siri::dialogengine::GetConvertedUnitInfo<siri::dialogengine::Speed>(round(v6[9]), (uint64_t)this, (uint64_t)a2, (uint64_t)&v11);
      v7 = operator new();
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      siri::dialogengine::VariableNumber::VariableNumber(v7, &__p, v13);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v12 < 0)
      {
        size = (void *)v11.__r_.__value_.__l.__size_;
LABEL_10:
        operator delete(size);
        return v7;
      }
      return v7;
    }
  }
  else if (RequiredNumberParameter)
  {
    goto LABEL_3;
  }
  v7 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&v11, "");
  siri::dialogengine::VariableNumber::VariableNumber(v7, &v11, 0.0);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
  {
    size = (void *)v11.__r_.__value_.__r.__words[0];
    goto LABEL_10;
  }
  return v7;
}

void sub_1BF99F998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, void *a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  if (a20 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8D890](v24, 0x10B3C4030AE2ACELL);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::ChunkPhrase::Validate(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::string::size_type v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  char *Phrase;
  char *v17;
  unint64_t *v18;
  unint64_t v19;
  char v20;
  void *v21;
  std::string *v22;
  __int128 v23;
  std::string::size_type v24;
  unint64_t v25;
  unsigned __int8 v26;
  std::string *v27;
  std::string *v28;
  BOOL v29;
  void *v31[2];
  char v32;
  void *v33[2];
  unsigned __int8 v34;
  std::string __p;
  void *v36;
  char v37;
  std::string v38;

  if (!a2)
    goto LABEL_21;
  v7 = a2[63];
  v6 = (std::__shared_weak_count *)a2[64];
  if (!v6)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v10 = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (v11)
  {
LABEL_8:
    if (v7)
      goto LABEL_9;
LABEL_21:
    v20 = 0;
    return v20 & 1;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  if (!v7)
    goto LABEL_21;
LABEL_9:
  if ((*(char *)(a1 + 223) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 223))
      goto LABEL_11;
LABEL_23:
    std::string::basic_string[abi:ne180100]<0>(&__p, "Phrase with no name attribute found.");
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, (__int128 *)&__p, a3);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_31:
      v20 = 0;
      goto LABEL_32;
    }
    v21 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_30:
    operator delete(v21);
    goto LABEL_31;
  }
  if (!*(_QWORD *)(a1 + 208))
    goto LABEL_23;
LABEL_11:
  v12 = a2[63];
  v13 = (std::__shared_weak_count *)a2[64];
  __p.__r_.__value_.__r.__words[0] = v12;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  Phrase = siri::dialogengine::GroupPhrases::GetPhrase(v12 + 312, (unsigned __int8 *)(a1 + 200));
  v17 = Phrase;
  if (v13)
  {
    v18 = (unint64_t *)&v13->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
      if (v17)
        goto LABEL_19;
      goto LABEL_26;
    }
  }
  if (!Phrase)
  {
LABEL_26:
    std::operator+<char>();
    v22 = std::string::append(&v38, "'");
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, (__int128 *)&__p, a3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_31;
    v21 = (void *)v38.__r_.__value_.__r.__words[0];
    goto LABEL_30;
  }
LABEL_19:
  v20 = 1;
LABEL_32:
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&v38, (const void ***)(a1 + 176));
  v24 = v38.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v38.__r_.__value_.__l.__data_ != &v38.__r_.__value_.__r.__words[1])
  {
    do
    {
      std::pair<std::string const,std::string>::pair[abi:ne180100](&__p, (__int128 *)(v24 + 32));
      std::string::basic_string[abi:ne180100]<0>(v31, "phrase");
      siri::dialogengine::ValidateXmlAttributeVersion(a2, (const void **)v31, (uint64_t)&__p, v33);
      if (v32 < 0)
        operator delete(v31[0]);
      v25 = v34;
      v26 = v34;
      if ((v34 & 0x80u) != 0)
        v25 = (unint64_t)v33[1];
      if (v25)
      {
        siri::dialogengine::Context::AddValidationError((uint64_t)a2, (__int128 *)v33, 0);
        v20 = 0;
        v26 = v34;
      }
      if ((v26 & 0x80) != 0)
        operator delete(v33[0]);
      if (v37 < 0)
        operator delete(v36);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v27 = *(std::string **)(v24 + 8);
      if (v27)
      {
        do
        {
          v28 = v27;
          v27 = (std::string *)v27->__r_.__value_.__r.__words[0];
        }
        while (v27);
      }
      else
      {
        do
        {
          v28 = *(std::string **)(v24 + 16);
          v29 = v28->__r_.__value_.__r.__words[0] == v24;
          v24 = (std::string::size_type)v28;
        }
        while (!v29);
      }
      v24 = (std::string::size_type)v28;
    }
    while (v28 != (std::string *)&v38.__r_.__value_.__r.__words[1]);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((_QWORD *)v38.__r_.__value_.__l.__size_);
  return v20 & 1;
}

void sub_1BF99FD80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a26 < 0)
    operator delete(__p);
  if (*(char *)(v26 - 49) < 0)
    operator delete(*(void **)(v26 - 72));
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ChunkPhrase::Expand(siri::dialogengine::ChunkPhrase *this@<X0>, siri::dialogengine::Context *a2@<X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  siri::dialogengine::SpeakableString *v7;
  std::__shared_weak_count *v8;

  siri::dialogengine::ChunkPhrase::ExpandPtr(this, a2, &v7);
  if (v7)
  {
    siri::dialogengine::SpeakableString::SpeakableString((std::string *)a3, v7);
  }
  else
  {
    *(_QWORD *)(a3 + 160) = 0;
    *(_OWORD *)(a3 + 128) = 0u;
    *(_OWORD *)(a3 + 144) = 0u;
    *(_OWORD *)(a3 + 96) = 0u;
    *(_OWORD *)(a3 + 112) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1BF99FEB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ChunkPhrase::ExpandPtr(siri::dialogengine::ChunkPhrase *this@<X0>, siri::dialogengine::Context *a2@<X1>, _QWORD *a3@<X8>)
{
  __int128 *v5;
  std::string *v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::string *v18;
  __int128 v19;
  std::string::size_type v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  char *Phrase;
  char *v25;
  unint64_t *v26;
  unint64_t v27;
  char *v28;
  char *v29;
  std::string *v30;
  __int128 v31;
  const siri::dialogengine::SpeakableString *v32;
  std::string *v33;
  std::string::size_type size;
  std::string *v35;
  __int128 v36;
  std::string *v37;
  __int128 v38;
  std::string *v39;
  std::string *v40;
  __int128 v41;
  std::string *v42;
  __int128 v43;
  std::string *v44;
  __int128 v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::string __p;
  void *v50;
  char v51;
  void *v52;
  char v53;
  void *v54;
  char v55;
  void *v56;
  char v57;
  void *v58;
  char v59;
  void *v60;
  char v61;
  std::string v62;
  std::string v63;
  std::string v64;
  std::string v65;
  std::string v66;
  uint64_t *v67;
  std::__shared_weak_count *v68;
  std::string v69;

  v5 = (__int128 *)((char *)this + 200);
  std::operator+<char>();
  v6 = std::string::append(&v69, "'...");
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::Log::Debug((siri::dialogengine *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v69.__r_.__value_.__l.__data_);
    if (!a2)
      goto LABEL_63;
  }
  else if (!a2)
  {
    goto LABEL_63;
  }
  v9 = *((_QWORD *)a2 + 63);
  v8 = (std::__shared_weak_count *)*((_QWORD *)a2 + 64);
  if (!v8)
    goto LABEL_13;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (v13)
  {
LABEL_13:
    if (v9)
      goto LABEL_14;
LABEL_63:
    *a3 = 0;
    a3[1] = 0;
    return;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  if (!v9)
    goto LABEL_63;
LABEL_14:
  v14 = (uint64_t *)*((_QWORD *)a2 + 114);
  v15 = (std::__shared_weak_count *)*((_QWORD *)a2 + 115);
  v67 = v14;
  v68 = v15;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  if (v14 && siri::dialogengine::ExecutionState::IsInfiniteLoop(v14, v5))
  {
    std::operator+<char>();
    v18 = std::string::append(&v69, "'. Unwinding...");
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)&__p, 3u);
LABEL_67:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v69.__r_.__value_.__l.__data_);
    *a3 = 0;
    a3[1] = 0;
    goto LABEL_79;
  }
  v20 = *((_QWORD *)a2 + 63);
  v21 = (std::__shared_weak_count *)*((_QWORD *)a2 + 64);
  __p.__r_.__value_.__r.__words[0] = v20;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)v21;
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  Phrase = siri::dialogengine::GroupPhrases::GetPhrase(v20 + 312, (unsigned __int8 *)v5);
  v25 = Phrase;
  if (!v21)
    goto LABEL_27;
  v26 = (unint64_t *)&v21->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (v27)
  {
LABEL_27:
    if (Phrase)
      goto LABEL_28;
LABEL_66:
    std::operator+<char>();
    v42 = std::string::append(&v69, "'");
    v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v43;
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)&__p, 3u);
    goto LABEL_67;
  }
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  if (!v25)
    goto LABEL_66;
LABEL_28:
  (*(void (**)(std::string *__return_ptr, char *, siri::dialogengine::Context *))(*(_QWORD *)v25 + 40))(&v69, v25, a2);
  if (v69.__r_.__value_.__r.__words[0] == v69.__r_.__value_.__l.__size_)
  {
    std::operator+<char>();
    v44 = std::string::append(&v66, "'");
    v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::Debug((siri::dialogengine *)&__p);
    goto LABEL_73;
  }
  if (!*(_QWORD *)v69.__r_.__value_.__l.__data_
  {
    std::operator+<char>();
    v40 = std::string::append(&v66, "' - not supported.");
    v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v41;
    v40->__r_.__value_.__l.__size_ = 0;
    v40->__r_.__value_.__r.__words[2] = 0;
    v40->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)&__p, 3u);
LABEL_73:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v66.__r_.__value_.__l.__data_);
    *a3 = 0;
    a3[1] = 0;
    goto LABEL_78;
  }
  v29 = v28;
  std::operator+<char>();
  v30 = std::string::append(&v63, "' expanded to: '");
  v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v64.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  v32 = (const siri::dialogengine::SpeakableString *)(v29 + 208);
  siri::dialogengine::SpeakableString::SpeakableString(&__p, (const siri::dialogengine::SpeakableString *)(v29 + 208));
  siri::dialogengine::SpeakableString::ToMultiplexedString((siri::dialogengine::SpeakableString *)&__p, &v62);
  if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v33 = &v62;
  else
    v33 = (std::string *)v62.__r_.__value_.__r.__words[0];
  if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v62.__r_.__value_.__r.__words[2]);
  else
    size = v62.__r_.__value_.__l.__size_;
  v35 = std::string::append(&v64, (const std::string::value_type *)v33, size);
  v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
  v65.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v36;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  v37 = std::string::append(&v65, "'");
  v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v66.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::Log::Debug((siri::dialogengine *)&v66);
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v66.__r_.__value_.__l.__data_);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v65.__r_.__value_.__l.__data_);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
  if (v61 < 0)
    operator delete(v60);
  if (v59 < 0)
    operator delete(v58);
  if (v57 < 0)
    operator delete(v56);
  if (v55 < 0)
    operator delete(v54);
  if (v53 < 0)
    operator delete(v52);
  if (v51 < 0)
    operator delete(v50);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v64.__r_.__value_.__l.__data_);
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63.__r_.__value_.__l.__data_);
  v39 = (std::string *)operator new();
  siri::dialogengine::SpeakableString::SpeakableString(v39, v32);
  std::shared_ptr<siri::dialogengine::SpeakableString>::shared_ptr[abi:ne180100]<siri::dialogengine::SpeakableString,void>(a3, (uint64_t)v39);
LABEL_78:
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v69;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_79:
  v46 = v68;
  if (v68)
  {
    v47 = (unint64_t *)&v68->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
}

void sub_1BF9A0430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v45;
  uint64_t v46;

  MEMORY[0x1C3B8D890](v45, 0x1012C4059F2399FLL);
  a9 = (void *)(v46 - 72);
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v46 - 88);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<siri::dialogengine::SpeakableString>::shared_ptr[abi:ne180100]<siri::dialogengine::SpeakableString,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E79327C0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1BF9A0628(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<siri::dialogengine::SpeakableString>::reset[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void **std::unique_ptr<siri::dialogengine::SpeakableString>::reset[abi:ne180100](void ***a1)
{
  void **result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    siri::dialogengine::SpeakableString::~SpeakableString(result);
    JUMPOUT(0x1C3B8D890);
  }
  return result;
}

void std::__shared_ptr_pointer<siri::dialogengine::SpeakableString *,std::shared_ptr<siri::dialogengine::SpeakableString>::__shared_ptr_default_delete<siri::dialogengine::SpeakableString,siri::dialogengine::SpeakableString>,std::allocator<siri::dialogengine::SpeakableString>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

void **std::__shared_ptr_pointer<siri::dialogengine::SpeakableString *,std::shared_ptr<siri::dialogengine::SpeakableString>::__shared_ptr_default_delete<siri::dialogengine::SpeakableString,siri::dialogengine::SpeakableString>,std::allocator<siri::dialogengine::SpeakableString>>::__on_zero_shared(uint64_t a1)
{
  void **result;

  result = *(void ***)(a1 + 24);
  if (result)
  {
    siri::dialogengine::SpeakableString::~SpeakableString(result);
    JUMPOUT(0x1C3B8D890);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::SpeakableString *,std::shared_ptr<siri::dialogengine::SpeakableString>::__shared_ptr_default_delete<siri::dialogengine::SpeakableString,siri::dialogengine::SpeakableString>,std::allocator<siri::dialogengine::SpeakableString>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

double siri::dialogengine::ChunkPhrase::ChunkPhrase(siri::dialogengine::ChunkPhrase *this)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = (char *)this + 184;
  *(_QWORD *)this = off_1E7930990;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *((_BYTE *)this + 248) = 0;
  return result;
}

{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = (char *)this + 184;
  *(_QWORD *)this = off_1E7930990;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *((_BYTE *)this + 248) = 0;
  return result;
}

uint64_t siri::dialogengine::ChunkPhrase::ChunkPhrase(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = siri::dialogengine::ChunkText::ChunkText(a1, a2);
  *(_QWORD *)v4 = off_1E7930990;
  *(_OWORD *)(v4 + 200) = 0u;
  *(_OWORD *)(v4 + 216) = 0u;
  *(_OWORD *)(v4 + 232) = 0u;
  *(_BYTE *)(v4 + 248) = 0;
  siri::dialogengine::ChunkText::SetText(v4, a2);
  return a1;
}

void sub_1BF9A0828(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 247) < 0)
    operator delete(*(void **)(v1 + 224));
  if (*(char *)(v1 + 223) < 0)
    operator delete(*v2);
  siri::dialogengine::ChunkText::~ChunkText((siri::dialogengine::ChunkText *)v1);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ChunkPhrase::GetName(siri::dialogengine::ChunkPhrase *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 223) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 25), *((_QWORD *)this + 26));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 200);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 27);
  }
}

double siri::dialogengine::ChunkPhrase::SetName(uint64_t a1, const std::string *a2)
{
  void **v3;
  double result;
  std::string v5;

  siri::dialogengine::StringTrim(" \t\n\r", a2, &v5);
  v3 = (void **)(a1 + 200);
  if (*(char *)(a1 + 223) < 0)
    operator delete(*v3);
  result = *(double *)&v5.__r_.__value_.__l.__data_;
  *(_OWORD *)v3 = *(_OWORD *)&v5.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 216) = *((_QWORD *)&v5.__r_.__value_.__l + 2);
  return result;
}

void siri::dialogengine::ChunkPhrase::GetId(siri::dialogengine::ChunkPhrase *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 247) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 28), *((_QWORD *)this + 29));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 14);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 30);
  }
}

std::string *siri::dialogengine::ChunkPhrase::SetId(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 224), a2);
}

uint64_t siri::dialogengine::ChunkPhrase::IsOptional(siri::dialogengine::ChunkPhrase *this)
{
  return *((unsigned __int8 *)this + 248);
}

uint64_t siri::dialogengine::ChunkPhrase::SetOptional(uint64_t this, char a2)
{
  *(_BYTE *)(this + 248) = a2;
  return this;
}

BOOL YAML::IsNullString(_BYTE *a1)
{
  int v1;
  uint64_t v2;

  if ((char)a1[23] < 0)
  {
    v2 = *((_QWORD *)a1 + 1);
    if (v2)
    {
      if (v2 != 1)
      {
        if (v2 == 4)
        {
          a1 = *(_BYTE **)a1;
          if (*(_DWORD *)a1 == 1819047278 || *(_DWORD *)a1 == 1819047246)
            return 1;
          return *(_DWORD *)a1 == 1280070990;
        }
        return 0;
      }
      if (**(_BYTE **)a1 != 126)
        return 0;
    }
    return 1;
  }
  v1 = a1[23];
  if (!a1[23])
    return 1;
  if (v1 != 1)
  {
    if (v1 == 4)
    {
      if ((*(_DWORD *)a1 & 0xFFFFFFDF) == 0x6C6C754E)
        return 1;
      return *(_DWORD *)a1 == 1280070990;
    }
    return 0;
  }
  return *a1 == 126;
}

void sub_1BF9A0A64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BF9A0B18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BF9A0C50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  void *v21;
  void *v22;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(a1);
}

void sub_1BF9A0F78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  void *v37;

  siri::dialogengine::GroundingInfo::~GroundingInfo(&a19);
  if (a18 < 0)
    operator delete(__p);
  if (v37)
  {
    a36 = (uint64_t)v37;
    operator delete(v37);
  }

  _Unwind_Resume(a1);
}

void sub_1BF9A10E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  siri::dialogengine::GroundingInfo::~GroundingInfo((void **)va);
  _Unwind_Resume(a1);
}

void sub_1BF9A1238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *__assign_helper_atomic_property__3830(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  if (a1 != a2)
    std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>((char *)(a1 + 8), *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  return std::string::operator=((std::string *)(a1 + 32), (const std::string *)(a2 + 32));
}

char *std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 3)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<double>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

void __copy_helper_atomic_property__3831(_QWORD *a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;

  *a1 = *(_QWORD *)a2;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(a1 + 1, *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  v4 = (std::string *)(a1 + 4);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 32);
    a1[6] = *(_QWORD *)(a2 + 48);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
}

void sub_1BF9A14D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BF9A16DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10, uint64_t a11, char a12)
{
  std::__tree<std::string>::destroy((uint64_t)&a9, a10);
  siri::dialogengine::DialogStateUseCase::~DialogStateUseCase((siri::dialogengine::DialogStateUseCase *)&a12);
  _Unwind_Resume(a1);
}

void sub_1BF9A17E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;

  if (a14 < 0)
    operator delete(__p);
  siri::dialogengine::DialogStateUseCase::~DialogStateUseCase((siri::dialogengine::DialogStateUseCase *)&a15);

  _Unwind_Resume(a1);
}

void sub_1BF9A1928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10, uint64_t a11, char a12)
{
  std::__tree<std::string>::destroy((uint64_t)&a9, a10);
  siri::dialogengine::DialogStateUseCase::~DialogStateUseCase((siri::dialogengine::DialogStateUseCase *)&a12);
  _Unwind_Resume(a1);
}

void sub_1BF9A1B5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  void *v28;
  void *v29;
  void *v30;

  if (v29)
    operator delete(v29);
  siri::dialogengine::GroundingInfo::~GroundingInfo(&a21);
  siri::dialogengine::DialogStateUseCase::~DialogStateUseCase((siri::dialogengine::DialogStateUseCase *)&a28);

  _Unwind_Resume(a1);
}

void sub_1BF9A1E64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, uint64_t a17, char a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  void *v28;

  siri::dialogengine::DialogStateUseCase::~DialogStateUseCase((siri::dialogengine::DialogStateUseCase *)&a28);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::GetPatternUsageFromString(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  unsigned __int16 *v13;
  uint64_t v14;
  char v15;

  siri::dialogengine::StringToLower(a1, (uint64_t)&v13);
  if (v15 < 0)
  {
    switch(v14)
    {
      case 8:
        if (*(_QWORD *)v13 == 0x6465726975716572)
        {
          v9 = 1;
LABEL_48:
          operator delete(v13);
          return v9;
        }
        break;
      case 9:
        if (*(_QWORD *)v13 == 0x6F746C7561666564 && *((_BYTE *)v13 + 8) == 110)
        {
          v9 = 2;
          goto LABEL_48;
        }
        break;
      case 10:
        if (*(_QWORD *)v13 == 0x6F746C7561666564 && v13[4] == 26214)
        {
          v9 = 3;
        }
        else
        {
          v6 = 0x646973616C6C6F77;
          v7 = bswap64(*(_QWORD *)v13);
          if (v7 == 0x646973616C6C6F77 && (v7 = bswap32(v13[4]) >> 16, v6 = 25956, (_DWORD)v7 == 25956))
          {
            v8 = 0;
          }
          else if (v7 < v6)
          {
            v8 = -1;
          }
          else
          {
            v8 = 1;
          }
          v9 = 4 * (v8 == 0);
        }
        goto LABEL_48;
    }
    v9 = 0;
    goto LABEL_48;
  }
  if (v15 == 8)
    return v13 == (unsigned __int16 *)0x6465726975716572;
  if (v15 == 9)
  {
    if (v13 == (unsigned __int16 *)0x6F746C7561666564 && v14 == 110)
      return 2;
    return 0;
  }
  if (v15 != 10)
    return 0;
  if (v13 == (unsigned __int16 *)0x6F746C7561666564 && (unsigned __int16)v14 == 26214)
    return 3;
  v2 = 0x646973616C6C6F77;
  v3 = bswap64((unint64_t)v13);
  if (v3 == 0x646973616C6C6F77 && (v3 = bswap32((unsigned __int16)v14) >> 16, v2 = 25956, (_DWORD)v3 == 25956))
  {
    v4 = 0;
  }
  else if (v3 < v2)
  {
    v4 = -1;
  }
  else
  {
    v4 = 1;
  }
  return 4 * (v4 == 0);
}

_QWORD *siri::dialogengine::GetStringFromPatternUsage@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if ((a1 - 1) > 3)
    v2 = "";
  else
    v2 = off_1E79309B0[a1 - 1];
  return std::string::basic_string[abi:ne180100]<0>(a2, v2);
}

uint64_t siri::dialogengine::PatternSchemaUsage::PatternSchemaUsage(uint64_t this)
{
  *(_DWORD *)this = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 8) = 0;
  return this;
}

{
  *(_DWORD *)this = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 8) = 0;
  return this;
}

uint64_t siri::dialogengine::PatternSchemaUsage::GetUsage(siri::dialogengine::PatternSchemaUsage *this)
{
  return *(unsigned int *)this;
}

_DWORD *siri::dialogengine::PatternSchemaUsage::SetUsage(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

void siri::dialogengine::PatternSchemaUsage::GetCondition(siri::dialogengine::PatternSchemaUsage *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 3);
  }
}

std::string *siri::dialogengine::PatternSchemaUsage::SetCondition(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 8), a2);
}

uint64_t siri::dialogengine::SemanticModelCache::Entry::Entry(uint64_t result, __int128 *a2, uint64_t a3)
{
  __int128 v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a2;
  *(_QWORD *)(result + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)result = v3;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_OWORD *)(result + 24) = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(result + 40) = *(_QWORD *)(a3 + 16);
  v4 = (_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(result + 48) = v5;
  v6 = result + 48;
  v7 = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(result + 56) = v7;
  if (v7)
  {
    *(_QWORD *)(v5 + 16) = v6;
    *(_QWORD *)(a3 + 16) = v4;
    *v4 = 0;
    *(_QWORD *)(a3 + 32) = 0;
  }
  else
  {
    *(_QWORD *)(result + 40) = v6;
  }
  *(_BYTE *)(result + 64) = *(_BYTE *)(a3 + 40);
  return result;
}

void siri::dialogengine::SemanticModelCache::Entry::GetFilePathOrTag(siri::dialogengine::SemanticModelCache::Entry *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((_QWORD *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 2);
  }
}

uint64_t siri::dialogengine::SemanticModelCache::Entry::GetModel(siri::dialogengine::SemanticModelCache::Entry *this)
{
  return (uint64_t)this + 24;
}

double siri::dialogengine::SemanticModelCache::SemanticModelCache(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  double result;

  v2 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v2;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a1 + 24) = 850045863;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  return result;
}

{
  __int128 v2;
  double result;

  v2 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v2;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a1 + 24) = 850045863;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = a1 + 96;
  return result;
}

void siri::dialogengine::SemanticModelCache::GetDescription(siri::dialogengine::SemanticModelCache *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((_QWORD *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 2);
  }
}

void siri::dialogengine::SemanticModelCache::Find(uint64_t a1@<X0>, _QWORD *a2@<X1>, std::string *a3@<X8>)
{
  std::mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _BOOL4 v11;
  _QWORD *v12;
  char v13;
  __int128 v14;
  std::string::size_type v15;
  unint64_t *v16;
  unint64_t v17;

  v6 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  v9 = *(_QWORD **)(a1 + 96);
  v7 = (_QWORD *)(a1 + 96);
  v8 = v9;
  if (!v9)
    goto LABEL_8;
  v10 = v7;
  do
  {
    v11 = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v8 + 4, a2);
    v12 = v8 + 1;
    if (!v11)
    {
      v12 = v8;
      v10 = v8;
    }
    v8 = (_QWORD *)*v12;
  }
  while (*v12);
  if (v10 == v7 || std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a2, v10 + 4))
  {
LABEL_8:
    v13 = 0;
    a3->__r_.__value_.__s.__data_[0] = 0;
  }
  else
  {
    if (*((char *)v10 + 79) < 0)
    {
      std::string::__init_copy_ctor_external(a3, (const std::string::value_type *)v10[7], v10[8]);
    }
    else
    {
      v14 = *(_OWORD *)(v10 + 7);
      a3->__r_.__value_.__r.__words[2] = v10[9];
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v14;
    }
    v15 = v10[11];
    a3[1].__r_.__value_.__r.__words[0] = v10[10];
    a3[1].__r_.__value_.__l.__size_ = v15;
    if (v15)
    {
      v16 = (unint64_t *)(v15 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&a3[1].__r_.__value_.__r.__words[2], (const void ***)v10 + 12);
    a3[2].__r_.__value_.__s.__data_[16] = *((_BYTE *)v10 + 120);
    v13 = 1;
  }
  a3[3].__r_.__value_.__s.__data_[0] = v13;
  std::mutex::unlock(v6);
}

void sub_1BF9A2438(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::SemanticModelCache::Insert(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  std::mutex *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t **v9;
  uint64_t *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _QWORD *v13;
  const char *v14;
  _QWORD *v15;
  char *v16;
  std::string *v17;
  uint64_t v18;
  uint64_t *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  uint64_t *v28;
  const std::string::value_type *v29;
  uint64_t v30;
  const std::string::value_type *v32;
  _QWORD v33[2];
  char v34;

  v5 = a1;
  v6 = (std::mutex *)(a1 + 3);
  std::mutex::lock((std::mutex *)(a1 + 3));
  v7 = (uint64_t *)v5[12];
  v8 = (uint64_t **)(v5 + 12);
  v9 = (uint64_t **)(v5 + 12);
  if (!v7)
  {
LABEL_13:
    v16 = (char *)operator new(0x80uLL);
    v33[0] = v16;
    v33[1] = v5 + 12;
    v34 = 0;
    v17 = (std::string *)(v16 + 32);
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&v17->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      *((_QWORD *)v16 + 6) = *(_QWORD *)(a2 + 16);
    }
    *(_OWORD *)(v16 + 88) = 0u;
    *((_QWORD *)v16 + 15) = 0;
    *(_OWORD *)(v16 + 72) = 0u;
    *(_OWORD *)(v16 + 56) = 0u;
    *(_OWORD *)(v16 + 104) = 0u;
    *((_QWORD *)v16 + 12) = v16 + 104;
    v34 = 1;
    *(_QWORD *)v16 = 0;
    *((_QWORD *)v16 + 1) = 0;
    *((_QWORD *)v16 + 2) = v8;
    *v9 = (uint64_t *)v16;
    v18 = *(_QWORD *)v5[11];
    v19 = (uint64_t *)v16;
    if (v18)
    {
      v5[11] = v18;
      v19 = *v9;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v5[12], v19);
    ++v5[13];
    v33[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::dialogengine::SemanticModelCache::Entry>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::dialogengine::SemanticModelCache::Entry>,void *>>>>::reset[abi:ne180100]((uint64_t)v33);
LABEL_19:
    std::string::operator=((std::string *)(v16 + 56), (const std::string *)a3);
    v22 = *(_QWORD *)(a3 + 24);
    v21 = *(_QWORD *)(a3 + 32);
    if (v21)
    {
      v23 = (unint64_t *)(v21 + 8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    v25 = (std::__shared_weak_count *)*((_QWORD *)v16 + 11);
    *((_QWORD *)v16 + 10) = v22;
    *((_QWORD *)v16 + 11) = v21;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldaxr(p_shared_owners);
      while (__stlxr(v27 - 1, p_shared_owners));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    if (v16 + 56 != (char *)a3)
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t)(v16 + 96), *(__int128 **)(a3 + 40), (__int128 *)(a3 + 48));
    v16[120] = *(_BYTE *)(a3 + 64);
    v28 = v5;
    if (*((char *)v5 + 23) < 0)
      v28 = (uint64_t *)*v5;
    if (*(char *)(a2 + 23) >= 0)
      v29 = (const std::string::value_type *)a2;
    else
      v29 = *(const std::string::value_type **)a2;
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"SemanticModelCache: Added entry to %s cache with key \"%s\" (New cache size: %zu)", v20, v28, v29, v5[13]);
    v30 = 1;
    goto LABEL_35;
  }
  v10 = v5 + 12;
  v11 = (_QWORD *)v5[12];
  do
  {
    v12 = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v11 + 4, (_QWORD *)a2);
    v13 = v11 + 1;
    if (!v12)
    {
      v13 = v11;
      v10 = v11;
    }
    v11 = (_QWORD *)*v13;
  }
  while (*v13);
  if (v10 == v5 + 12
    || std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>((_QWORD *)a2, v10 + 4))
  {
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v7;
        v15 = v7 + 4;
        if (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>((_QWORD *)a2, v15))
          break;
        v7 = *v8;
        v9 = v8;
        if (!*v8)
          goto LABEL_13;
      }
      if (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v15, (_QWORD *)a2))
        break;
      v9 = v8 + 1;
      v7 = v8[1];
      if (!v7)
        goto LABEL_13;
    }
    v16 = (char *)v8;
    goto LABEL_19;
  }
  if (*((char *)v5 + 23) < 0)
    v5 = (uint64_t *)*v5;
  if (*(char *)(a2 + 23) >= 0)
    v32 = (const std::string::value_type *)a2;
  else
    v32 = *(const std::string::value_type **)a2;
  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"SemanticModelCache: The %s cache already contains an entry with key \"%s\"", v14, v5, v32);
  v30 = 0;
LABEL_35:
  std::mutex::unlock(v6);
  return v30;
}

void sub_1BF9A2718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  std::mutex *v4;
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::dialogengine::SemanticModelCache::Entry>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::dialogengine::SemanticModelCache::Entry>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  std::mutex::unlock(v4);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::dialogengine::SemanticModelCache::Entry>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::dialogengine::SemanticModelCache::Entry>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,siri::dialogengine::SemanticModelCache::Entry>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

uint64_t siri::dialogengine::SemanticModelCache::size(siri::dialogengine::SemanticModelCache *this)
{
  std::mutex *v2;
  uint64_t v3;

  v2 = (std::mutex *)((char *)this + 24);
  std::mutex::lock((std::mutex *)((char *)this + 24));
  v3 = *((_QWORD *)this + 13);
  std::mutex::unlock(v2);
  return v3;
}

void siri::dialogengine::SemanticModelCache::clear(siri::dialogengine::SemanticModelCache *this)
{
  siri::dialogengine::SemanticModelCache *v1;
  std::mutex *v2;
  _QWORD *v3;

  v1 = this;
  v2 = (std::mutex *)((char *)this + 24);
  std::mutex::lock((std::mutex *)((char *)this + 24));
  v3 = (_QWORD *)*((_QWORD *)v1 + 12);
  v1 = (siri::dialogengine::SemanticModelCache *)((char *)v1 + 96);
  std::__tree<std::__value_type<std::string,siri::dialogengine::SemanticModelCache::Entry>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::SemanticModelCache::Entry>,std::less<void>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::SemanticModelCache::Entry>>>::destroy(v3);
  *((_QWORD *)v1 - 1) = v1;
  *(_QWORD *)v1 = 0;
  *((_QWORD *)v1 + 1) = 0;
  std::mutex::unlock(v2);
}

void siri::dialogengine::SemanticModelCache::CreateKey(const void **a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  int v5;
  const std::string::value_type *v6;
  std::string::size_type v7;
  std::string *v8;
  std::string v9;

  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&v9, a1, 35);
  v5 = *(char *)(a2 + 23);
  if (v5 >= 0)
    v6 = (const std::string::value_type *)a2;
  else
    v6 = *(const std::string::value_type **)a2;
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(a2 + 23);
  else
    v7 = *(_QWORD *)(a2 + 8);
  v8 = std::string::append(&v9, v6, v7);
  *a3 = *v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
}

void sub_1BF9A2874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(uint64_t a1, const void **a2, char a3)
{
  size_t v5;
  uint64_t result;
  char *v7;
  const void *v8;
  char *v9;

  if (*((char *)a2 + 23) >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  result = std::string::basic_string[abi:ne180100](a1, v5 + 1);
  if (*(char *)(result + 23) >= 0)
    v7 = (char *)result;
  else
    v7 = *(char **)result;
  if (v5)
  {
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = *a2;
    result = (uint64_t)memmove(v7, v8, v5);
  }
  v9 = &v7[v5];
  *v9 = a3;
  v9[1] = 0;
  return result;
}

double siri::dialogengine::PatternGroup::PatternGroup(uint64_t a1, uint64_t a2, const std::string *a3)
{
  uint64_t v3;
  double result;

  v3 = siri::dialogengine::LineNumberBase::LineNumberBase(a1, a2, a3);
  *(_QWORD *)v3 = &off_1E79309E0;
  result = 0.0;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 192) = 0u;
  return result;
}

{
  uint64_t v3;
  double result;

  v3 = siri::dialogengine::LineNumberBase::LineNumberBase(a1, a2, a3);
  *(_QWORD *)v3 = &off_1E79309E0;
  result = 0.0;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 192) = 0u;
  return result;
}

uint64_t siri::dialogengine::PatternGroup::PatternGroup(uint64_t a1, __int128 *a2, __int128 *a3, __int128 *a4)
{
  __int128 v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;

  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = &off_1E79309E0;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 64), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v7 = *a2;
    *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 64) = v7;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 88), *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v8 = *a3;
    *(_QWORD *)(a1 + 104) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 88) = v8;
  }
  v9 = (std::string *)(a1 + 112);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v10 = *a4;
    *(_QWORD *)(a1 + 128) = *((_QWORD *)a4 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  *(_QWORD *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  return a1;
}

void sub_1BF9A2A80(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 111) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 87) < 0)
    operator delete(*v2);
  siri::dialogengine::LineNumberBase::~LineNumberBase((void **)v1);
  _Unwind_Resume(a1);
}

void siri::dialogengine::PatternGroup::GetName(siri::dialogengine::PatternGroup *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 87) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 8), *((_QWORD *)this + 9));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 4);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 10);
  }
}

std::string *siri::dialogengine::PatternGroup::SetName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 64), a2);
}

void siri::dialogengine::PatternGroup::GetDialogId(siri::dialogengine::PatternGroup *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 111) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 11), *((_QWORD *)this + 12));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 88);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 13);
  }
}

std::string *siri::dialogengine::PatternGroup::SetDialogId(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 88), a2);
}

void siri::dialogengine::PatternGroup::SetDialogIdWithComponent(uint64_t a1, std::string *a2)
{
  std::string::size_type size;
  std::string *v4;
  unint64_t v5;
  int v6;
  void **v7;
  void **v8;
  void *__p[2];
  char v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;

  size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v4 = a2;
  else
    v4 = (std::string *)a2->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = a2->__r_.__value_.__l.__size_;
  if (!size)
    goto LABEL_12;
  v5 = 0;
  do
  {
    v6 = v4->__r_.__value_.__s.__data_[0];
    v4 = (std::string *)((char *)v4 + 1);
    if (v6 == 35)
      ++v5;
    --size;
  }
  while (size);
  if (v5 <= 1)
  {
LABEL_12:
    std::string::operator=((std::string *)(a1 + 88), a2);
    JUMPOUT(0x1C3B8D53CLL);
  }
  siri::dialogengine::StringSplit((unsigned __int8 *)a2, "#", &v13);
  std::string::operator=((std::string *)(a1 + 160), (const std::string *)v14 - 1);
  v7 = v14 - 3;
  if (*((char *)v14 - 1) < 0)
    operator delete(*v7);
  v14 = v7;
  std::string::basic_string[abi:ne180100]<0>(__p, "#");
  siri::dialogengine::StringJoinInternal<std::vector<std::string>>((uint64_t)&v11, v13, (uint64_t)v14, (uint64_t)__p);
  v8 = (void **)(a1 + 88);
  if (*(char *)(a1 + 111) < 0)
    operator delete(*v8);
  *(_OWORD *)v8 = v11;
  *(_QWORD *)(a1 + 104) = v12;
  HIBYTE(v12) = 0;
  LOBYTE(v11) = 0;
  if (v10 < 0)
    operator delete(__p[0]);
  *(_QWORD *)&v11 = &v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
}

void sub_1BF9A2C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  uint64_t v16;

  if (a15 < 0)
    operator delete(__p);
  a16 = v16 - 40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

void siri::dialogengine::PatternGroup::GetDialogIdWithComponent(siri::dialogengine::PatternGroup *this@<X0>, std::string *a2@<X8>)
{
  size_t v4;
  std::string *p_p;
  char *v6;
  int v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  std::string __p;

  if (*((char *)this + 183) < 0)
  {
    if (*((_QWORD *)this + 21))
      goto LABEL_3;
LABEL_22:
    if (*((char *)this + 111) < 0)
    {
      std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 11), *((_QWORD *)this + 12));
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 88);
      a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 13);
    }
    return;
  }
  if (!*((_BYTE *)this + 183))
    goto LABEL_22;
LABEL_3:
  if (*((char *)this + 111) >= 0)
    v4 = *((unsigned __int8 *)this + 111);
  else
    v4 = *((_QWORD *)this + 12);
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v4 + 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v4)
  {
    if (*((char *)this + 111) >= 0)
      v6 = (char *)this + 88;
    else
      v6 = (char *)*((_QWORD *)this + 11);
    memmove(p_p, v6, v4);
  }
  *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v4) = 35;
  v7 = *((char *)this + 183);
  if (v7 >= 0)
    v8 = (char *)this + 160;
  else
    v8 = (const std::string::value_type *)*((_QWORD *)this + 20);
  if (v7 >= 0)
    v9 = *((unsigned __int8 *)this + 183);
  else
    v9 = *((_QWORD *)this + 21);
  v10 = std::string::append(&__p, v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  a2->__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF9A2DDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::PatternGroup::GetVisualId(siri::dialogengine::PatternGroup *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 135) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 14), *((_QWORD *)this + 15));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 7);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 16);
  }
}

std::string *siri::dialogengine::PatternGroup::SetVisualId(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 112), a2);
}

void siri::dialogengine::PatternGroup::SetVisualIdWithComponent(uint64_t a1, std::string *a2)
{
  std::string::size_type size;
  std::string *v4;
  unint64_t v5;
  int v6;
  void **v7;
  void **v8;
  void *__p[2];
  char v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;

  size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v4 = a2;
  else
    v4 = (std::string *)a2->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = a2->__r_.__value_.__l.__size_;
  if (!size)
    goto LABEL_12;
  v5 = 0;
  do
  {
    v6 = v4->__r_.__value_.__s.__data_[0];
    v4 = (std::string *)((char *)v4 + 1);
    if (v6 == 35)
      ++v5;
    --size;
  }
  while (size);
  if (v5 <= 1)
  {
LABEL_12:
    std::string::operator=((std::string *)(a1 + 112), a2);
    JUMPOUT(0x1C3B8D53CLL);
  }
  siri::dialogengine::StringSplit((unsigned __int8 *)a2, "#", &v13);
  std::string::operator=((std::string *)(a1 + 184), (const std::string *)v14 - 1);
  v7 = v14 - 3;
  if (*((char *)v14 - 1) < 0)
    operator delete(*v7);
  v14 = v7;
  std::string::basic_string[abi:ne180100]<0>(__p, "#");
  siri::dialogengine::StringJoinInternal<std::vector<std::string>>((uint64_t)&v11, v13, (uint64_t)v14, (uint64_t)__p);
  v8 = (void **)(a1 + 112);
  if (*(char *)(a1 + 135) < 0)
    operator delete(*v8);
  *(_OWORD *)v8 = v11;
  *(_QWORD *)(a1 + 128) = v12;
  HIBYTE(v12) = 0;
  LOBYTE(v11) = 0;
  if (v10 < 0)
    operator delete(__p[0]);
  *(_QWORD *)&v11 = &v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
}

void sub_1BF9A2F60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  uint64_t v16;

  if (a15 < 0)
    operator delete(__p);
  a16 = v16 - 40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

void siri::dialogengine::PatternGroup::GetVisualIdWithComponent(siri::dialogengine::PatternGroup *this@<X0>, std::string *a2@<X8>)
{
  size_t v4;
  std::string *p_p;
  char *v6;
  int v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  std::string __p;

  if (*((char *)this + 207) < 0)
  {
    if (*((_QWORD *)this + 24))
      goto LABEL_3;
LABEL_22:
    if (*((char *)this + 135) < 0)
    {
      std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 14), *((_QWORD *)this + 15));
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 7);
      a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 16);
    }
    return;
  }
  if (!*((_BYTE *)this + 207))
    goto LABEL_22;
LABEL_3:
  if (*((char *)this + 135) >= 0)
    v4 = *((unsigned __int8 *)this + 135);
  else
    v4 = *((_QWORD *)this + 15);
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v4 + 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v4)
  {
    if (*((char *)this + 135) >= 0)
      v6 = (char *)this + 112;
    else
      v6 = (char *)*((_QWORD *)this + 14);
    memmove(p_p, v6, v4);
  }
  *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v4) = 35;
  v7 = *((char *)this + 207);
  if (v7 >= 0)
    v8 = (char *)this + 184;
  else
    v8 = (const std::string::value_type *)*((_QWORD *)this + 23);
  if (v7 >= 0)
    v9 = *((unsigned __int8 *)this + 207);
  else
    v9 = *((_QWORD *)this + 24);
  v10 = std::string::append(&__p, v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  a2->__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF9A30D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::PatternGroup::GetDialogComponent(siri::dialogengine::PatternGroup *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 183) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 20), *((_QWORD *)this + 21));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 10);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 22);
  }
}

std::string *siri::dialogengine::PatternGroup::SetDialogComponent(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 160), a2);
}

void siri::dialogengine::PatternGroup::GetVisualComponent(siri::dialogengine::PatternGroup *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 207) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 23), *((_QWORD *)this + 24));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 184);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 25);
  }
}

std::string *siri::dialogengine::PatternGroup::SetVisualComponent(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 184), a2);
}

void siri::dialogengine::PatternGroup::GetNestedPattern(siri::dialogengine::PatternGroup *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 159) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 17), *((_QWORD *)this + 18));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 136);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 19);
  }
}

std::string *siri::dialogengine::PatternGroup::SetNestedPattern(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 136), a2);
}

void siri::dialogengine::ChunkTag::~ChunkTag(void **this)
{
  *this = off_1E7930A18;
  if (*((char *)this + 223) < 0)
    operator delete(this[25]);
  *this = &off_1E7937608;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(this[23]);
  siri::dialogengine::SpeakableString::~SpeakableString(this + 1);
}

{
  *this = off_1E7930A18;
  if (*((char *)this + 223) < 0)
    operator delete(this[25]);
  *this = &off_1E7937608;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(this[23]);
  siri::dialogengine::SpeakableString::~SpeakableString(this + 1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t siri::dialogengine::ChunkTag::Validate(uint64_t a1, siri::dialogengine::Context *a2, uint64_t a3, uint64_t a4)
{
  const void **v8;
  int v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  int v17;
  int v18;
  __int128 v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  char *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::string *p_p;
  BOOL v27;
  int v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  int v34;
  __int128 *v35;
  std::string::size_type v36;
  char i;
  int v38;
  int v39;
  std::string::size_type v41;
  std::string::size_type v42;
  unint64_t v43;
  unsigned __int8 v44;
  std::string *v45;
  std::string *v46;
  std::string::size_type v48;
  std::string::size_type v49;
  _BOOL4 v50;
  std::string::size_type size;
  __int128 *v52;
  std::string::size_type v53;
  _QWORD *v54;
  int v55;
  std::string __p;
  void *v57;
  char v58;
  void *v59[2];
  unsigned __int8 v60;
  std::string v61;
  char *v62;
  std::__shared_weak_count *v63;
  std::string v64;
  void **v65[2];

  v8 = (const void **)(a1 + 200);
  if (*(char *)(a1 + 223) < 0)
  {
    v12 = *(_QWORD *)(a1 + 208);
    if (v12 != 3)
    {
      if (v12 != 4)
      {
        if (v12 != 8)
          goto LABEL_68;
        v11 = *(_QWORD **)*v8;
LABEL_10:
        if (v11 == (_QWORD *)0x797469746E617571)
        {
          if ((v13 & 1) == 0
          {
            v54 = (_QWORD *)operator new();
            *v54 = 0;
            siri::dialogengine::ChunkTag::Validate(siri::dialogengine::Context *,siri::dialogengine::LineNumberBase const*,std::vector<std::shared_ptr<siri::dialogengine::ChunkText>> const&)const::flag = (uint64_t)v54;
          }
          v14 = atomic_load((unint64_t *)siri::dialogengine::ChunkTag::Validate(siri::dialogengine::Context *,siri::dialogengine::LineNumberBase const*,std::vector<std::shared_ptr<siri::dialogengine::ChunkText>> const&)const::flag);
          if (v14 != -1)
          {
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v61;
            v64.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
            std::__call_once((std::once_flag::_State_type *)siri::dialogengine::ChunkTag::Validate(siri::dialogengine::Context *,siri::dialogengine::LineNumberBase const*,std::vector<std::shared_ptr<siri::dialogengine::ChunkText>> const&)const::flag, &v64, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::ChunkTag::Validate(siri::dialogengine::Context *,siri::dialogengine::LineNumberBase const*,std::vector<std::shared_ptr<siri::dialogengine::ChunkText>> const&)::$_0 &&>>);
          }
          v15 = *(uint64_t **)a4;
          if (*(_QWORD *)(a4 + 8) != *(_QWORD *)a4)
          {
            v16 = 0;
            v17 = 0;
            v18 = 0;
            v55 = 0;
            while (1)
            {
              v19 = *(_OWORD *)&v15[2 * v16];
              *(_OWORD *)v59 = v19;
              v20 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
              if (*((_QWORD *)&v19 + 1))
              {
                v21 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
                do
                  v22 = __ldxr(v21);
                while (__stxr(v22 + 1, v21));
              }
              if ((_QWORD)v19
              {
                v62 = v23;
                v63 = v20;
                if (v20)
                {
                  p_shared_owners = (unint64_t *)&v20->__shared_owners_;
                  do
                    v25 = __ldxr(p_shared_owners);
                  while (__stxr(v25 + 1, p_shared_owners));
                }
                if (v23[223] < 0)
                  std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v23 + 25), *((_QWORD *)v23 + 26));
                else
                  __p = *(std::string *)(v23 + 200);
              }
              else
              {
                v62 = 0;
                v63 = 0;
                std::string::basic_string[abi:ne180100]<0>(&__p, "");
                v20 = 0;
              }
              if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                break;
              if (__p.__r_.__value_.__l.__size_)
              {
                if (__p.__r_.__value_.__l.__size_ != 4)
                  goto LABEL_35;
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
LABEL_34:
                if (LODWORD(p_p->__r_.__value_.__l.__data_) == 1851879539)
                {
                  v55 = 1;
                }
                else
                {
LABEL_35:
                  v27 = siri::dialogengine::ChunkTag::Validate(siri::dialogengine::Context *,siri::dialogengine::LineNumberBase const*,std::vector<std::shared_ptr<siri::dialogengine::ChunkText>> const&)const::sNumberTags
                      + 8 == std::__tree<std::string>::find<std::string>(siri::dialogengine::ChunkTag::Validate(siri::dialogengine::Context *,siri::dialogengine::LineNumberBase const*,std::vector<std::shared_ptr<siri::dialogengine::ChunkText>> const&)const::sNumberTags, (const void **)&__p.__r_.__value_.__l.__data_);
                  v28 = !v27;
                  v18 |= v28;
                  v17 |= v27;
                }
                siri::dialogengine::ChunkList::ChunkList((uint64_t **)&v61, (uint64_t **)a4);
                siri::dialogengine::ChunkList::GetInnerChunks((siri::dialogengine::ChunkList *)&v61, v16, (uint64_t)&v64);
                v16 += ((uint64_t)(v64.__r_.__value_.__l.__size_ - v64.__r_.__value_.__r.__words[0]) >> 4) + 1;
                v65[0] = (void **)&v64;
                std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](v65);
                v65[0] = (void **)&v61;
                std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](v65);
                if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_41;
              }
              operator delete(__p.__r_.__value_.__l.__data_);
LABEL_41:
              if (v20)
              {
                v29 = (unint64_t *)&v20->__shared_owners_;
                do
                  v30 = __ldaxr(v29);
                while (__stlxr(v30 - 1, v29));
                if (!v30)
                {
                  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
                  std::__shared_weak_count::__release_weak(v20);
                }
              }
              v31 = (std::__shared_weak_count *)v59[1];
              if (v59[1])
              {
                v32 = (unint64_t *)((char *)v59[1] + 8);
                do
                  v33 = __ldaxr(v32);
                while (__stlxr(v33 - 1, v32));
                if (!v33)
                {
                  ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
                  std::__shared_weak_count::__release_weak(v31);
                }
              }
              ++v16;
              v15 = *(uint64_t **)a4;
              if (v16 >= (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 4)
                goto LABEL_109;
            }
            if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
              goto LABEL_41;
            if (HIBYTE(__p.__r_.__value_.__r.__words[2]) == 4)
            {
              p_p = &__p;
              goto LABEL_34;
            }
            goto LABEL_35;
          }
          v55 = 0;
          v18 = 0;
          v17 = 0;
LABEL_109:
          std::string::basic_string[abi:ne180100]<0>(&v64, "includevalue");
          siri::dialogengine::ChunkText::GetAttribute(a1, (uint64_t)&v64, &__p);
          if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v64.__r_.__value_.__l.__data_);
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = __p.__r_.__value_.__l.__size_;
          if (size && !siri::dialogengine::StringToBool(&__p))
          {
            if (((v55 | v17) & 1) != 0)
            {
              std::string::basic_string[abi:ne180100]<0>(&v64, "<quantity> element with includeValue=\"false\" should only contain elements like <one>, <other>, etc.");
              siri::dialogengine::Context::AddValidationError((uint64_t)a2, (__int128 *)&v64, a3);
              goto LABEL_129;
            }
          }
          else if (((v18 | v17) & 1) != 0)
          {
            std::string::basic_string[abi:ne180100]<0>(&v64, "<quantity> element with includeValue=\"true\" should only contain a <span> element");
            siri::dialogengine::Context::AddValidationError((uint64_t)a2, (__int128 *)&v64, a3);
LABEL_129:
            if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v64.__r_.__value_.__l.__data_);
            i = 0;
            goto LABEL_133;
          }
          i = 1;
LABEL_133:
          std::string::basic_string[abi:ne180100]<0>(&v61, "inflect");
          siri::dialogengine::ChunkText::GetAttribute(a1, (uint64_t)&v61, &v64);
          if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v61.__r_.__value_.__l.__data_);
          siri::dialogengine::SemanticFeatureConstraint::ValidateString(a2, (unsigned __int8 *)&v64, (uint64_t)&v61);
          v53 = v61.__r_.__value_.__l.__size_;
          v52 = (__int128 *)v61.__r_.__value_.__r.__words[0];
          if (v61.__r_.__value_.__r.__words[0] != v61.__r_.__value_.__l.__size_)
          {
            do
            {
              siri::dialogengine::Context::AddValidationError((uint64_t)a2, v52, a3);
              v52 = (__int128 *)((char *)v52 + 24);
            }
            while (v52 != (__int128 *)v53);
            i = 0;
          }
          v59[0] = &v61;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v59);
          if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v64.__r_.__value_.__l.__data_);
LABEL_140:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          goto LABEL_69;
        }
LABEL_68:
        i = 1;
        goto LABEL_69;
      }
      v34 = *(_DWORD *)*v8;
LABEL_57:
      if (v34 == 1851879539)
      {
        std::string::basic_string[abi:ne180100]<0>(&v64, "inflect");
        siri::dialogengine::ChunkText::GetAttribute(a1, (uint64_t)&v64, &__p);
        if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v64.__r_.__value_.__l.__data_);
        siri::dialogengine::SemanticFeatureConstraint::ValidateString(a2, (unsigned __int8 *)&__p, (uint64_t)&v64);
        v36 = v64.__r_.__value_.__l.__size_;
        v35 = (__int128 *)v64.__r_.__value_.__r.__words[0];
        for (i = v64.__r_.__value_.__r.__words[0] == v64.__r_.__value_.__l.__size_;
              v35 != (__int128 *)v36;
              v35 = (__int128 *)((char *)v35 + 24))
        {
          siri::dialogengine::Context::AddValidationError((uint64_t)a2, v35, a3);
        }
        v61.__r_.__value_.__r.__words[0] = (std::string::size_type)&v64;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
        goto LABEL_140;
      }
      goto LABEL_68;
    }
    v10 = *v8;
  }
  else
  {
    v9 = *(unsigned __int8 *)(a1 + 223);
    v10 = (_QWORD *)(a1 + 200);
    if (v9 != 3)
    {
      if (v9 != 4)
      {
        if (v9 != 8)
          goto LABEL_68;
        v11 = *v8;
        goto LABEL_10;
      }
      v34 = *(_DWORD *)v8;
      goto LABEL_57;
    }
  }
  v38 = *(unsigned __int16 *)v10;
  v39 = *((unsigned __int8 *)v10 + 2);
  if (v38 != 29812 || v39 != 115)
    goto LABEL_68;
  std::string::basic_string[abi:ne180100]<0>(&v64, "play");
  siri::dialogengine::ChunkText::GetAttribute(a1, (uint64_t)&v64, &__p);
  v48 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v48 = __p.__r_.__value_.__l.__size_;
  if (v48)
  {
    std::string::basic_string[abi:ne180100]<0>(v59, "sirifamily");
    siri::dialogengine::ChunkText::GetAttribute(a1, (uint64_t)v59, &v61);
    v49 = v61.__r_.__value_.__l.__size_;
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v49 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
    v50 = v49 != 0;
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v61.__r_.__value_.__l.__data_);
    if ((char)v60 < 0)
      operator delete(v59[0]);
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
      goto LABEL_104;
  }
  else
  {
    v50 = 0;
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_104:
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v64.__r_.__value_.__l.__data_);
    if (!v50)
      goto LABEL_122;
LABEL_120:
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"tts\" element has both attributes \"play\" and \"sirifamily\"; The \"sirifamily\" value will be ignored");
    siri::dialogengine::Context::AddValidationWarning((uint64_t)a2, (__int128 *)&__p, a3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_122;
  }
  if (v50)
    goto LABEL_120;
LABEL_122:
  if (*(_QWORD *)a4 == *(_QWORD *)(a4 + 8))
  {
    i = !v50;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"tts\" element should not have any content; behavior will be as if the content follows the element");
    siri::dialogengine::Context::AddValidationWarning((uint64_t)a2, (__int128 *)&__p, a3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    i = 0;
  }
LABEL_69:
  siri::dialogengine::ValidateXmlElementVersion((uint64_t)a2, (uint64_t)v8, &v64);
  v41 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
  if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v41 = v64.__r_.__value_.__l.__size_;
  if (v41)
  {
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, (__int128 *)&v64, a3);
    i = 0;
  }
  else
  {
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&v61, (const void ***)(a1 + 176));
    v42 = v61.__r_.__value_.__r.__words[0];
    if ((std::string::size_type *)v61.__r_.__value_.__l.__data_ != &v61.__r_.__value_.__r.__words[1])
    {
      do
      {
        std::pair<std::string const,std::string>::pair[abi:ne180100](&__p, (__int128 *)(v42 + 32));
        siri::dialogengine::ValidateXmlAttributeVersion(a2, v8, (uint64_t)&__p, v59);
        v43 = v60;
        v44 = v60;
        if ((v60 & 0x80u) != 0)
          v43 = (unint64_t)v59[1];
        if (v43)
        {
          siri::dialogengine::Context::AddValidationError((uint64_t)a2, (__int128 *)v59, a3);
          i = 0;
          v44 = v60;
        }
        if ((v44 & 0x80) != 0)
          operator delete(v59[0]);
        if (v58 < 0)
          operator delete(v57);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v45 = *(std::string **)(v42 + 8);
        if (v45)
        {
          do
          {
            v46 = v45;
            v45 = (std::string *)v45->__r_.__value_.__r.__words[0];
          }
          while (v45);
        }
        else
        {
          do
          {
            v46 = *(std::string **)(v42 + 16);
            v27 = v46->__r_.__value_.__r.__words[0] == v42;
            v42 = (std::string::size_type)v46;
          }
          while (!v27);
        }
        v42 = (std::string::size_type)v46;
      }
      while (v46 != (std::string *)&v61.__r_.__value_.__r.__words[1]);
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((_QWORD *)v61.__r_.__value_.__l.__size_);
  }
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v64.__r_.__value_.__l.__data_);
  return i & 1;
}

void sub_1BF9A3A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33)
{
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::ChunkTag::Validate(siri::dialogengine::Context *,siri::dialogengine::LineNumberBase const*,std::vector<std::shared_ptr<siri::dialogengine::ChunkText>> const&)::$_0 &&>>()
{
  uint64_t *v0;
  uint64_t v1;
  const void *v2[3];
  _QWORD v3[3];
  _QWORD v4[3];
  _QWORD v5[3];
  _QWORD v6[3];
  _QWORD v7[3];
  _QWORD v8[4];

  v8[3] = *MEMORY[0x1E0C80C00];
  v0 = (uint64_t *)operator new();
  std::string::basic_string[abi:ne180100]<0>(v2, "zero");
  std::string::basic_string[abi:ne180100]<0>(v3, "one");
  std::string::basic_string[abi:ne180100]<0>(v4, "two");
  std::string::basic_string[abi:ne180100]<0>(v5, "few");
  std::string::basic_string[abi:ne180100]<0>(v6, "many");
  std::string::basic_string[abi:ne180100]<0>(v7, "other");
  std::string::basic_string[abi:ne180100]<0>(v8, "lessthanorequalto");
  std::set<std::string>::set[abi:ne180100](v0, v2, 7);
  v1 = 0;
  siri::dialogengine::ChunkTag::Validate(siri::dialogengine::Context *,siri::dialogengine::LineNumberBase const*,std::vector<std::shared_ptr<siri::dialogengine::ChunkText>> const&)const::sNumberTags = (uint64_t)v0;
  do
  {
    if (SHIBYTE(v8[v1 + 2]) < 0)
      operator delete((void *)v8[v1]);
    v1 -= 3;
  }
  while (v1 != -21);
}

void sub_1BF9A3D34(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = 0;
  while (1)
  {
    if (*(char *)(v2 + v4 + 167) < 0)
      operator delete(*(void **)(v2 + v4 + 144));
    v4 -= 24;
    if (v4 == -168)
    {
      MEMORY[0x1C3B8D890](v1, 0x1020C4062D53EE8);
      _Unwind_Resume(a1);
    }
  }
}

double siri::dialogengine::ChunkTag::ChunkTag(siri::dialogengine::ChunkTag *this)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 23) = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = (char *)this + 184;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  *(_QWORD *)this = off_1E7930A18;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_WORD *)this + 112) = 0;
  return result;
}

{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 23) = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = (char *)this + 184;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  *(_QWORD *)this = off_1E7930A18;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_WORD *)this + 112) = 0;
  return result;
}

uint64_t siri::dialogengine::ChunkTag::ChunkTag(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = siri::dialogengine::ChunkText::ChunkText(a1, a2);
  *(_QWORD *)result = off_1E7930A18;
  *(_QWORD *)(result + 208) = 0;
  *(_QWORD *)(result + 216) = 0;
  *(_QWORD *)(result + 200) = 0;
  *(_WORD *)(result + 224) = 0;
  return result;
}

{
  uint64_t result;

  result = siri::dialogengine::ChunkText::ChunkText(a1, a2);
  *(_QWORD *)result = off_1E7930A18;
  *(_QWORD *)(result + 208) = 0;
  *(_QWORD *)(result + 216) = 0;
  *(_QWORD *)(result + 200) = 0;
  *(_WORD *)(result + 224) = 0;
  return result;
}

void siri::dialogengine::ChunkTag::GetName(siri::dialogengine::ChunkTag *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 223) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 25), *((_QWORD *)this + 26));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 200);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 27);
  }
}

std::string *siri::dialogengine::ChunkTag::SetName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 200), a2);
}

uint64_t siri::dialogengine::ChunkTag::IsOpenTag(siri::dialogengine::ChunkTag *this)
{
  return *((unsigned __int8 *)this + 224);
}

uint64_t siri::dialogengine::ChunkTag::SetOpenTag(uint64_t this, char a2)
{
  *(_BYTE *)(this + 224) = a2;
  return this;
}

uint64_t siri::dialogengine::ChunkTag::IsCloseTag(siri::dialogengine::ChunkTag *this)
{
  return *((unsigned __int8 *)this + 225);
}

uint64_t siri::dialogengine::ChunkTag::SetCloseTag(uint64_t this, char a2)
{
  *(_BYTE *)(this + 225) = a2;
  return this;
}

siri::dialogengine::DialogMetadataReader *siri::dialogengine::DialogMetadataReader::DialogMetadataReader(siri::dialogengine::DialogMetadataReader *this)
{
  uint64_t v2;

  v2 = operator new();
  siri::dialogengine::DialogMetadata::File::File((siri::dialogengine::DialogMetadata::File *)v2);
  *(_DWORD *)(v2 + 152) = 0;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_QWORD *)this = v2;
  return this;
}

void sub_1BF9A3F64(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10B2C4090B26B8FLL);
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogMetadataReader::~DialogMetadataReader(siri::dialogengine::DialogMetadataReader *this)
{
  uint64_t v2;

  v2 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v2)
    std::default_delete<siri::dialogengine::DialogMetadataReader::Impl>::operator()[abi:ne180100](v2);
}

{
  uint64_t v2;

  v2 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v2)
    std::default_delete<siri::dialogengine::DialogMetadataReader::Impl>::operator()[abi:ne180100](v2);
}

void std::default_delete<siri::dialogengine::DialogMetadataReader::Impl>::operator()[abi:ne180100](uint64_t a1)
{
  void **v2;

  if (*(char *)(a1 + 151) < 0)
    operator delete(*(void **)(a1 + 128));
  v2 = (void **)(a1 + 104);
  std::vector<siri::dialogengine::DialogMetadataDisplayValue>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  *(_QWORD *)a1 = &off_1E792A850;
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(a1 + 24));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)(a1 + 8));
  JUMPOUT(0x1C3B8D890);
}

void std::vector<siri::dialogengine::DialogMetadataDisplayValue>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::allocator<siri::dialogengine::DialogMetadataDisplayValue>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<siri::dialogengine::DialogMetadataDisplayValue>::destroy[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(_QWORD **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void siri::dialogengine::DialogMetadataReader::GetSemanticConcept(siri::dialogengine::DialogMetadataReader *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2;
  __int128 v3;

  v2 = *(_QWORD *)this;
  if (*(char *)(*(_QWORD *)this + 151) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 128), *(_QWORD *)(v2 + 136));
  }
  else
  {
    v3 = *(_OWORD *)(v2 + 128);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v2 + 144);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

uint64_t siri::dialogengine::DialogMetadataReader::GetNextSemanticValue(siri::dialogengine::DialogMetadataReader *this)
{
  uint64_t v1;
  int v2;
  siri::dialogengine::DialogMetadataReader *v3;
  const siri::dialogengine::DialogMetadata::SemanticValue *v4;
  int v5;
  int v6;
  const siri::dialogengine::DialogMetadata::DisplayValue *v7;
  siri::dialogengine::DialogMetadataReader *v8;
  int v9;
  int v10;
  const siri::dialogengine::DialogMetadata::Constraint *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64x2_t v29;
  const void **v30;
  uint64_t v31;
  std::string *v32;
  uint64_t v33;
  uint64_t v34;
  void **v35;
  int64x2_t v36;
  unint64_t v37;
  uint64_t v38;
  void *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  std::string *v47;
  std::string *v48;
  uint64_t i;
  uint64_t v50;
  std::string v52;
  std::string v53;
  uint64_t *v54;
  _QWORD *v55[2];
  std::string v56;
  uint64_t v57;
  int v58;
  std::string *__str;
  std::string v60[2];
  int64x2_t v61;
  const void **v62;
  _BYTE v63[24];
  uint64_t v64;
  int v65;
  uint64_t v66;
  __int128 *v67;
  unint64_t v68;
  int64x2_t v69;
  const void **v70;
  const void ***v71;

  v1 = *(_QWORD *)this;
  v2 = *(_DWORD *)(*(_QWORD *)this + 152);
  if (v2 >= *(_DWORD *)(*(_QWORD *)this + 32))
    return 0;
  v3 = this;
  *(_DWORD *)(v1 + 152) = v2 + 1;
  v4 = (const siri::dialogengine::DialogMetadata::SemanticValue *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<siri::dialogengine::DialogMetadata::SemanticValue>::TypeHandler>(v1 + 24, v2);
  siri::dialogengine::DialogMetadata::SemanticValue::SemanticValue((siri::dialogengine::DialogMetadata::SemanticValue *)v63, v4);
  v62 = 0;
  v61 = 0u;
  memset(v60, 0, sizeof(v60));
  std::string::operator=(v60, (const std::string *)(*(_QWORD *)v3 + 128));
  siri::dialogengine::StringToLower(v66, (uint64_t)&v56);
  if (SHIBYTE(v60[1].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60[1].__r_.__value_.__l.__data_);
  v60[1] = v56;
  v5 = v65;
  if (v65 >= 1)
  {
    v6 = 0;
    do
    {
      v7 = (const siri::dialogengine::DialogMetadata::DisplayValue *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<siri::dialogengine::DialogMetadata::DisplayValue>::TypeHandler>((uint64_t)&v64, v6);
      siri::dialogengine::DialogMetadata::DisplayValue::DisplayValue((siri::dialogengine::DialogMetadata::DisplayValue *)&v56, v7);
      v8 = v3;
      memset(&v53, 0, sizeof(v53));
      v55[0] = 0;
      v55[1] = 0;
      v54 = (uint64_t *)v55;
      std::string::operator=(&v53, __str);
      v9 = v58;
      if (v58 >= 1)
      {
        v10 = 0;
        do
        {
          v11 = (const siri::dialogengine::DialogMetadata::Constraint *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<siri::dialogengine::DialogMetadata::Constraint>::TypeHandler>((uint64_t)&v57, v10);
          siri::dialogengine::DialogMetadata::Constraint::Constraint((siri::dialogengine::DialogMetadata::Constraint *)&v68, v11);
          siri::dialogengine::StringTrim("\"", (const std::string *)v71, &v52);
          v67 = (__int128 *)v70;
          v12 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v54, v70, &v67);
          std::string::operator=((std::string *)(v12 + 7), &v52);
          if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v52.__r_.__value_.__l.__data_);
          siri::dialogengine::DialogMetadata::Constraint::~Constraint((siri::dialogengine::DialogMetadata::Constraint *)&v68);
          ++v10;
        }
        while (v9 != v10);
      }
      v13 = v61.i64[1];
      if (v61.i64[1] >= (unint64_t)v62)
      {
        v15 = 0xAAAAAAAAAAAAAAABLL * ((v61.i64[1] - v61.i64[0]) >> 4);
        v16 = v15 + 1;
        if (v15 + 1 > 0x555555555555555)
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        v3 = v8;
        if (0x5555555555555556 * (((uint64_t)v62 - v61.i64[0]) >> 4) > v16)
          v16 = 0x5555555555555556 * (((uint64_t)v62 - v61.i64[0]) >> 4);
        if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v62 - v61.i64[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL)
          v17 = 0x555555555555555;
        else
          v17 = v16;
        v71 = &v62;
        if (v17)
          v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<siri::dialogengine::DatabaseField>>(v17);
        else
          v18 = 0;
        v68 = v17;
        v69.i64[0] = v17 + 48 * v15;
        v69.i64[1] = v69.i64[0];
        v70 = (const void **)(v17 + 48 * v18);
        std::allocator<siri::dialogengine::DialogMetadataDisplayValue>::construct[abi:ne180100]<siri::dialogengine::DialogMetadataDisplayValue,siri::dialogengine::DialogMetadataDisplayValue const&>((std::string *)v69.i64[0], (__int128 *)&v53);
        v19 = v69.i64[0];
        v14 = v69.i64[1] + 48;
        v69.i64[1] += 48;
        v20 = v61;
        if (v61.i64[1] == v61.i64[0])
        {
          v29 = vdupq_n_s64(v61.u64[1]);
        }
        else
        {
          v21 = 0;
          do
          {
            v22 = v19 + v21;
            v23 = v20.i64[1] + v21;
            v24 = *(_OWORD *)(v20.i64[1] + v21 - 48);
            *(_QWORD *)(v22 - 32) = *(_QWORD *)(v20.i64[1] + v21 - 32);
            *(_OWORD *)(v22 - 48) = v24;
            *(_QWORD *)(v23 - 40) = 0;
            *(_QWORD *)(v23 - 32) = 0;
            *(_QWORD *)(v23 - 48) = 0;
            *(_QWORD *)(v22 - 24) = *(_QWORD *)(v20.i64[1] + v21 - 24);
            v25 = (uint64_t *)(v20.i64[1] + v21 - 16);
            v26 = *v25;
            *(_QWORD *)(v19 + v21 - 16) = *v25;
            v27 = v19 + v21 - 16;
            v28 = *(_QWORD *)(v20.i64[1] + v21 - 8);
            *(_QWORD *)(v22 - 8) = v28;
            if (v28)
            {
              *(_QWORD *)(v26 + 16) = v27;
              *(_QWORD *)(v23 - 24) = v25;
              *v25 = 0;
              *(_QWORD *)(v20.i64[1] + v21 - 8) = 0;
            }
            else
            {
              *(_QWORD *)(v22 - 24) = v27;
            }
            v21 -= 48;
          }
          while (v20.i64[1] + v21 != v20.i64[0]);
          v19 += v21;
          v29 = v61;
          v14 = v69.i64[1];
        }
        v61.i64[0] = v19;
        v61.i64[1] = v14;
        v69 = v29;
        v30 = v62;
        v62 = v70;
        v70 = v30;
        v68 = v29.i64[0];
        std::__split_buffer<siri::dialogengine::DialogMetadataDisplayValue>::~__split_buffer((uint64_t)&v68);
      }
      else
      {
        std::allocator<siri::dialogengine::DialogMetadataDisplayValue>::construct[abi:ne180100]<siri::dialogengine::DialogMetadataDisplayValue,siri::dialogengine::DialogMetadataDisplayValue const&>((std::string *)v61.i64[1], (__int128 *)&v53);
        v3 = v8;
        v14 = v13 + 48;
      }
      v61.i64[1] = v14;
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v55[0]);
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v53.__r_.__value_.__l.__data_);
      siri::dialogengine::DialogMetadata::DisplayValue::~DisplayValue((siri::dialogengine::DialogMetadata::DisplayValue *)&v56);
      ++v6;
    }
    while (v6 != v5);
  }
  v31 = *(_QWORD *)v3;
  v32 = (std::string *)(*(_QWORD *)v3 + 56);
  std::string::operator=(v32, v60);
  std::string::operator=((std::string *)(v31 + 80), &v60[1]);
  if (v32 != v60)
  {
    v33 = *(_QWORD *)(v31 + 120);
    v35 = (void **)(v31 + 104);
    v34 = *(_QWORD *)(v31 + 104);
    v36 = v61;
    v37 = 0xAAAAAAAAAAAAAAABLL * ((v61.i64[1] - v61.i64[0]) >> 4);
    if (0xAAAAAAAAAAAAAAABLL * ((v33 - v34) >> 4) >= v37)
    {
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v31 + 112) - v34) >> 4) >= v37)
      {
        v48 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<siri::dialogengine::DialogMetadataDisplayValue *,siri::dialogengine::DialogMetadataDisplayValue *,siri::dialogengine::DialogMetadataDisplayValue *>((std::string *)v61.i64[0], (std::string *)v61.i64[1], *(std::string **)(v31 + 104));
        for (i = *(_QWORD *)(v31 + 112);
              (std::string *)i != v48;
              std::allocator<siri::dialogengine::DialogMetadataDisplayValue>::destroy[abi:ne180100](i))
        {
          i -= 48;
        }
        *(_QWORD *)(v31 + 112) = v48;
        goto LABEL_57;
      }
      v47 = (std::string *)(v61.i64[0] + 16 * ((*(_QWORD *)(v31 + 112) - v34) >> 4));
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<siri::dialogengine::DialogMetadataDisplayValue *,siri::dialogengine::DialogMetadataDisplayValue *,siri::dialogengine::DialogMetadataDisplayValue *>((std::string *)v61.i64[0], v47, *(std::string **)(v31 + 104));
      v45 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::dialogengine::DialogMetadataDisplayValue>,siri::dialogengine::DialogMetadataDisplayValue*,siri::dialogengine::DialogMetadataDisplayValue*,siri::dialogengine::DialogMetadataDisplayValue*>(v31 + 120, (uint64_t)v47, v36.i64[1], *(_QWORD *)(v31 + 112));
    }
    else
    {
      if (v34)
      {
        v38 = *(_QWORD *)(v31 + 112);
        v39 = *(void **)(v31 + 104);
        if (v38 != v34)
        {
          do
          {
            v38 -= 48;
            std::allocator<siri::dialogengine::DialogMetadataDisplayValue>::destroy[abi:ne180100](v38);
          }
          while (v38 != v34);
          v39 = *v35;
        }
        *(_QWORD *)(v31 + 112) = v34;
        operator delete(v39);
        v33 = 0;
        *v35 = 0;
        *(_QWORD *)(v31 + 112) = 0;
        *(_QWORD *)(v31 + 120) = 0;
      }
      if (v37 > 0x555555555555555)
        goto LABEL_64;
      v40 = 0xAAAAAAAAAAAAAAABLL * (v33 >> 4);
      v41 = 2 * v40;
      if (2 * v40 <= v37)
        v41 = v37;
      v42 = v40 >= 0x2AAAAAAAAAAAAAALL ? 0x555555555555555 : v41;
      if (v42 > 0x555555555555555)
LABEL_64:
        std::vector<BOOL>::__throw_length_error[abi:ne180100]();
      v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<siri::dialogengine::DatabaseField>>(v42);
      *(_QWORD *)(v31 + 104) = v43;
      *(_QWORD *)(v31 + 112) = v43;
      *(_QWORD *)(v31 + 120) = &v43[48 * v44];
      v45 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::dialogengine::DialogMetadataDisplayValue>,siri::dialogengine::DialogMetadataDisplayValue*,siri::dialogengine::DialogMetadataDisplayValue*,siri::dialogengine::DialogMetadataDisplayValue*>(v31 + 120, v36.i64[0], v36.i64[1], (uint64_t)v43);
    }
    *(_QWORD *)(v31 + 112) = v45;
  }
LABEL_57:
  v50 = *(_QWORD *)v3;
  v56.__r_.__value_.__r.__words[0] = (std::string::size_type)&v61;
  std::vector<siri::dialogengine::DialogMetadataDisplayValue>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
  if (SHIBYTE(v60[1].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60[1].__r_.__value_.__l.__data_);
  v46 = v50 + 56;
  if (SHIBYTE(v60[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60[0].__r_.__value_.__l.__data_);
  siri::dialogengine::DialogMetadata::SemanticValue::~SemanticValue((siri::dialogengine::DialogMetadata::SemanticValue *)v63);
  return v46;
}

void sub_1BF9A46B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  *(_QWORD *)(v38 + 112) = v37;
  siri::dialogengine::DialogMetadataSemanticValue::~DialogMetadataSemanticValue(&a30);
  siri::dialogengine::DialogMetadata::SemanticValue::~SemanticValue((siri::dialogengine::DialogMetadata::SemanticValue *)(v39 - 200));
  _Unwind_Resume(a1);
}

uint64_t std::allocator<siri::dialogengine::DialogMetadataDisplayValue>::construct[abi:ne180100]<siri::dialogengine::DialogMetadataDisplayValue,siri::dialogengine::DialogMetadataDisplayValue const&>(std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  return std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&this[1], (const void ***)a2 + 3);
}

void sub_1BF9A47B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::DialogMetadataDisplayValue::~DialogMetadataDisplayValue(siri::dialogengine::DialogMetadataDisplayValue *this)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((_QWORD **)this + 4));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void siri::dialogengine::DialogMetadataSemanticValue::~DialogMetadataSemanticValue(void **this)
{
  void **v2;

  v2 = this + 6;
  std::vector<siri::dialogengine::DialogMetadataDisplayValue>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

uint64_t std::__split_buffer<siri::dialogengine::DialogMetadataDisplayValue>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 48;
    std::allocator<siri::dialogengine::DialogMetadataDisplayValue>::destroy[abi:ne180100](i - 48);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

std::string *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<siri::dialogengine::DialogMetadataDisplayValue *,siri::dialogengine::DialogMetadataDisplayValue *,siri::dialogengine::DialogMetadataDisplayValue *>(std::string *__str, std::string *a2, std::string *this)
{
  std::string *v5;
  __int128 *v6;

  if (__str != a2)
  {
    v5 = __str;
    v6 = (__int128 *)&__str[1].__r_.__value_.__r.__words[1];
    do
    {
      std::string::operator=(this, v5);
      if (v5 != this)
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t)&this[1], (__int128 *)v5[1].__r_.__value_.__l.__data_, v6);
      v5 += 2;
      this += 2;
      v6 += 3;
    }
    while (v5 != a2);
  }
  return this;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::dialogengine::DialogMetadataDisplayValue>,siri::dialogengine::DialogMetadataDisplayValue*,siri::dialogengine::DialogMetadataDisplayValue*,siri::dialogengine::DialogMetadataDisplayValue*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  __int128 v10;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      v8 = a4 + v7;
      v9 = (__int128 *)(a2 + v7);
      if (*(char *)(a2 + v7 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(a4 + v7), *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
      }
      else
      {
        v10 = *v9;
        *(_QWORD *)(v8 + 16) = *((_QWORD *)v9 + 2);
        *(_OWORD *)v8 = v10;
      }
      std::map<std::string,std::string>::map[abi:ne180100](a4 + v7 + 24, (const void ***)(a2 + v7 + 24));
      v7 += 48;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1BF9A49B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  while (v2 != v1)
  {
    v2 -= 48;
    std::allocator<siri::dialogengine::DialogMetadataDisplayValue>::destroy[abi:ne180100](v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::DialogMetadataReader::GetAllowUnbounded(siri::dialogengine::DialogMetadataReader *this)
{
  return *(unsigned __int8 *)(*(_QWORD *)this + 48);
}

BOOL siri::dialogengine::DialogMetadataReader::Load(siri::dialogengine::DialogMetadata::File **a1, const std::string *a2, uint64_t a3)
{
  _BOOL8 v5;
  std::string v7;
  void (**v8)(siri::dialogengine::DialogMetadataFileParser *__hidden);
  std::string __p;

  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v7 = *(std::string *)a3;
  v8 = off_1E7930A48;
  __p = v7;
  memset(&v7, 0, sizeof(v7));
  v5 = siri::dialogengine::DialogMetadataReader::Load(a1, a2, (uint64_t)&v8);
  v8 = off_1E7930A48;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v5;
}

{
  siri::dialogengine::DialogMetadata::File *v6;
  int v7;
  siri::dialogengine::DialogMetadata::File *v8;
  const char *v9;
  void **v10;
  void *__p[2];
  char v13;
  void (**v14)(siri::dialogengine::DialogMetadata::File *__hidden);
  uint64_t v15[2];
  _BYTE v16[32];
  unsigned __int8 v17;

  siri::dialogengine::DialogMetadata::File::File((siri::dialogengine::DialogMetadata::File *)&v14);
  if (*a1 != (siri::dialogengine::DialogMetadata::File *)&v14)
    siri::dialogengine::DialogMetadata::File::InternalSwap(*a1, (siri::dialogengine::DialogMetadata::File *)&v14);
  v14 = &off_1E792A850;
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)v16);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v15);
  v6 = *a1;
  *((_DWORD *)v6 + 38) = 0;
  std::string::operator=((std::string *)((char *)v6 + 128), a2);
  (*(void (**)(void (***__return_ptr)(siri::dialogengine::DialogMetadata::File *__hidden), uint64_t))(*(_QWORD *)a3 + 16))(&v14, a3);
  v7 = v17;
  if (v17)
  {
    v8 = *a1;
    if (&v14 == (void (***)(siri::dialogengine::DialogMetadata::File *__hidden))*a1)
    {
LABEL_12:
      v14 = &off_1E792A850;
      google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)v16);
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v15);
      return v7 != 0;
    }
    siri::dialogengine::DialogMetadata::File::Clear(*a1);
    siri::dialogengine::DialogMetadata::File::MergeFrom(v8, (const siri::dialogengine::DialogMetadata::File *)&v14);
  }
  else
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a3 + 24))(__p, a3);
    if (v13 >= 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Failed to parse dialog metadata from %s", v9, v10);
    if (v13 < 0)
      operator delete(__p[0]);
  }
  if (v17)
    goto LABEL_12;
  return v7 != 0;
}

void sub_1BF9A4AA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1BF9A4C08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a15 < 0)
    operator delete(__p);
  if (a23)
  {
    google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)&a19);
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(&a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::SiriKitDeviceState::isDialogDriven(siri::dialogengine::SiriKitDeviceState *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v4;
  void **v5;
  void *v6;
  int v7;
  char v9;
  void *__p[2];
  char v12;
  std::string v13;

  v4 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&v13, "");
  siri::dialogengine::GetInteractionType((siri::dialogengine *)__p, a2);
  if (v12 < 0)
  {
    if (__p[1] == (void *)12)
    {
      v5 = (void **)__p[0];
      goto LABEL_6;
    }
LABEL_12:
    v9 = 0;
    goto LABEL_13;
  }
  if (v12 != 12)
    goto LABEL_12;
  v5 = __p;
LABEL_6:
  v6 = *v5;
  v7 = *((_DWORD *)v5 + 2);
  v9 = v6 == (void *)0x7264676F6C616964 && v7 == 1852143209;
LABEL_13:
  siri::dialogengine::VariableBoolean::VariableBoolean(v4, &v13, v9);
  if (v12 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  return v4;
}

void sub_1BF9A4D3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  MEMORY[0x1C3B8D890](v20, 0x10B3C408E4F17DDLL);
  _Unwind_Resume(a1);
}

void siri::dialogengine::GetInteractionType(siri::dialogengine *this, const siri::dialogengine::VariableObject *a2)
{
  void *OptionalStringParameter;
  void *v5;
  std::string __p;
  void *v7;
  char v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  void *v13;
  char v14;
  void *v15;
  char v16;
  void *v17;
  char v18;
  std::string v19;

  std::string::basic_string[abi:ne180100]<0>(&__p, "interactionType");
  OptionalStringParameter = siri::dialogengine::GetOptionalStringParameter((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)a2);
  v5 = OptionalStringParameter;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v5)
      goto LABEL_3;
LABEL_6:
    std::string::basic_string[abi:ne180100]<0>(this, "");
    return;
  }
  if (!OptionalStringParameter)
    goto LABEL_6;
LABEL_3:
  (*(void (**)(std::string *__return_ptr, void *))(*(_QWORD *)v5 + 48))(&__p, v5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v19, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v19 = __p;
  siri::dialogengine::StringToLower((uint64_t)&v19, (uint64_t)this);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (v18 < 0)
    operator delete(v17);
  if (v16 < 0)
    operator delete(v15);
  if (v14 < 0)
    operator delete(v13);
  if (v12 < 0)
    operator delete(v11);
  if (v10 < 0)
    operator delete(v9);
  if (v8 < 0)
    operator delete(v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF9A4ECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  siri::dialogengine::SpeakableString::~SpeakableString(&__p);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::SiriKitDeviceState::isDisplayDriven(siri::dialogengine::SiriKitDeviceState *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t v7;
  char v9;
  void *__p[2];
  char v12;
  std::string v13;

  v4 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&v13, "");
  siri::dialogengine::GetInteractionType((siri::dialogengine *)__p, a2);
  if (v12 < 0)
  {
    if (__p[1] == (void *)13)
    {
      v5 = (void **)__p[0];
      goto LABEL_6;
    }
LABEL_12:
    v9 = 0;
    goto LABEL_13;
  }
  if (v12 != 13)
    goto LABEL_12;
  v5 = __p;
LABEL_6:
  v6 = *v5;
  v7 = *(uint64_t *)((char *)v5 + 5);
  v9 = v6 == (void *)0x6479616C70736964 && v7 == 0x6E65766972647961;
LABEL_13:
  siri::dialogengine::VariableBoolean::VariableBoolean(v4, &v13, v9);
  if (v12 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  return v4;
}

void sub_1BF9A5000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  MEMORY[0x1C3B8D890](v20, 0x10B3C408E4F17DDLL);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::SiriKitDeviceState::isMultiUser(siri::dialogengine::SiriKitDeviceState *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v4;
  void *OptionalStringParameter;
  void *v6;
  void **v7;
  int v8;
  int v9;
  char v11;
  void *v13[2];
  char v14;
  std::string v15;
  std::string __p;
  void *v17;
  char v18;
  void *v19;
  char v20;
  void *v21;
  char v22;
  void *v23;
  char v24;
  void *v25;
  char v26;
  void *v27;
  char v28;
  std::string v29;

  v4 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&v15, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "multiUserState");
  OptionalStringParameter = siri::dialogengine::GetOptionalStringParameter((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)a2);
  v6 = OptionalStringParameter;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v6)
      goto LABEL_3;
LABEL_6:
    std::string::basic_string[abi:ne180100]<0>(v13, "");
    goto LABEL_24;
  }
  if (!OptionalStringParameter)
    goto LABEL_6;
LABEL_3:
  (*(void (**)(std::string *__return_ptr, void *))(*(_QWORD *)v6 + 48))(&__p, v6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v29, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v29 = __p;
  siri::dialogengine::StringToLower((uint64_t)&v29, (uint64_t)v13);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (v28 < 0)
    operator delete(v27);
  if (v26 < 0)
    operator delete(v25);
  if (v24 < 0)
    operator delete(v23);
  if (v22 < 0)
    operator delete(v21);
  if (v20 < 0)
    operator delete(v19);
  if (v18 < 0)
    operator delete(v17);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_24:
  if (v14 < 0)
  {
    if (v13[1] == (void *)7)
    {
      v7 = (void **)v13[0];
      goto LABEL_29;
    }
LABEL_35:
    v11 = 0;
    goto LABEL_36;
  }
  if (v14 != 7)
    goto LABEL_35;
  v7 = v13;
LABEL_29:
  v8 = *(_DWORD *)v7;
  v9 = *(_DWORD *)((char *)v7 + 3);
  v11 = v8 == 1650552421 && v9 == 1684368482;
LABEL_36:
  siri::dialogengine::VariableBoolean::VariableBoolean(v4, &v15, v11);
  if (v14 < 0)
    operator delete(v13[0]);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  return v4;
}

void sub_1BF9A5244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  siri::dialogengine::SpeakableString::~SpeakableString((void **)&a22);
  if (a21 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8D890](v27, 0x10B3C408E4F17DDLL);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::SiriKitDeviceState::isVoiceGenderMale(siri::dialogengine::SiriKitDeviceState *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v4;
  const siri::dialogengine::VariableObject *v5;
  char v6;
  std::string __p;

  v4 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  v6 = siri::dialogengine::GetVoiceGender(a2, v5) == 0;
  siri::dialogengine::VariableBoolean::VariableBoolean(v4, &__p, v6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v4;
}

void sub_1BF9A5354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1C3B8D890](v15, 0x10B3C408E4F17DDLL);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::GetVoiceGender(siri::dialogengine *this, const siri::dialogengine::VariableObject *a2)
{
  void *OptionalStringParameter;
  void *v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  std::string __p;
  void *v14;
  char v15;
  void *v16;
  char v17;
  void *v18;
  char v19;
  void *v20;
  char v21;
  void *v22;
  char v23;
  void *v24;
  char v25;
  std::string v26;
  unsigned int *v27;
  uint64_t v28;
  char v29;

  std::string::basic_string[abi:ne180100]<0>(&__p, "voiceGender");
  OptionalStringParameter = siri::dialogengine::GetOptionalStringParameter((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)this);
  v4 = OptionalStringParameter;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v4)
      goto LABEL_3;
LABEL_6:
    std::string::basic_string[abi:ne180100]<0>(&v27, "");
    goto LABEL_24;
  }
  if (!OptionalStringParameter)
    goto LABEL_6;
LABEL_3:
  (*(void (**)(std::string *__return_ptr, void *))(*(_QWORD *)v4 + 48))(&__p, v4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v26, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v26 = __p;
  siri::dialogengine::StringToLower((uint64_t)&v26, (uint64_t)&v27);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (v25 < 0)
    operator delete(v24);
  if (v23 < 0)
    operator delete(v22);
  if (v21 < 0)
    operator delete(v20);
  if (v19 < 0)
    operator delete(v18);
  if (v17 < 0)
    operator delete(v16);
  if (v15 < 0)
    operator delete(v14);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_24:
  if (v29 < 0)
  {
    if (v28 == 4)
    {
      if (*v27 == 1701601645)
      {
        v11 = 0;
        goto LABEL_52;
      }
    }
    else if (v28 == 6)
    {
      v8 = 1717923169;
      v9 = bswap32(*v27);
      if (v9 == 1717923169 && (v9 = bswap32(*((unsigned __int16 *)v27 + 2)) >> 16, v8 = 27749, v9 == 27749))
      {
        v10 = 0;
      }
      else if (v9 < v8)
      {
        v10 = -1;
      }
      else
      {
        v10 = 1;
      }
      if (v10)
        v11 = 2;
      else
        v11 = 1;
      goto LABEL_52;
    }
    v11 = 2;
LABEL_52:
    operator delete(v27);
    return v11;
  }
  if (v29 == 4)
    return 2 * ((_DWORD)v27 != 1701601645);
  if (v29 != 6)
    return 2;
  v5 = 1717923169;
  v6 = bswap32(v27);
  if (v6 == 1717923169 && (v6 = bswap32(WORD2(v27)) >> 16, v5 = 27749, v6 == 27749))
  {
    v7 = 0;
  }
  else if (v6 < v5)
  {
    v7 = -1;
  }
  else
  {
    v7 = 1;
  }
  if (v7)
    return 2;
  else
    return 1;
}

void sub_1BF9A55EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  siri::dialogengine::SpeakableString::~SpeakableString(&__p);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::SiriKitDeviceState::isVoiceGenderFemale(siri::dialogengine::SiriKitDeviceState *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v4;
  const siri::dialogengine::VariableObject *v5;
  char v6;
  std::string __p;

  v4 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  v6 = siri::dialogengine::GetVoiceGender(a2, v5) == 1;
  siri::dialogengine::VariableBoolean::VariableBoolean(v4, &__p, v6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v4;
}

void sub_1BF9A56B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1C3B8D890](v15, 0x10B3C408E4F17DDLL);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::SiriKitDeviceState::isVoiceGenderUnknown(siri::dialogengine::SiriKitDeviceState *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v4;
  const siri::dialogengine::VariableObject *v5;
  char v6;
  std::string __p;

  v4 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  v6 = siri::dialogengine::GetVoiceGender(a2, v5) == 2;
  siri::dialogengine::VariableBoolean::VariableBoolean(v4, &__p, v6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v4;
}

void sub_1BF9A5774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1C3B8D890](v15, 0x10B3C408E4F17DDLL);
  _Unwind_Resume(a1);
}

siri::dialogengine::VariableObject *siri::dialogengine::SiriKitDeviceState::pronoun(siri::dialogengine::SiriKitDeviceState *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  int VoiceGender;
  const char *v4;
  siri::dialogengine::VariableObject *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  void *v13[2];
  char v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::string __p;
  uint64_t v18;
  std::__shared_weak_count *v19;
  void *v20[2];
  uint64_t v21;

  VoiceGender = siri::dialogengine::GetVoiceGender(a2, a2);
  v20[0] = 0;
  v20[1] = 0;
  v21 = 0;
  if (VoiceGender == 1)
  {
    v4 = "feminine";
    goto LABEL_5;
  }
  if (!VoiceGender)
  {
    v4 = "masculine";
LABEL_5:
    MEMORY[0x1C3B8D53C](v20, v4);
  }
  v5 = (siri::dialogengine::VariableObject *)operator new();
  siri::dialogengine::VariableObject::VariableObject(v5);
  std::string::basic_string[abi:ne180100]<0>(&__p, "gender");
  siri::dialogengine::VariableObject::AddStringProperty((uint64_t)v5, &__p, (uint64_t)v20, &v18);
  v6 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "requestType");
  std::string::basic_string[abi:ne180100]<0>(v13, "sirikit.DeviceState");
  siri::dialogengine::VariableObject::AddStringProperty((uint64_t)v5, &__p, (uint64_t)v13, &v15);
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v14 < 0)
    operator delete(v13[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21) < 0)
    operator delete(v20[0]);
  return v5;
}

void sub_1BF9A5934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (*(char *)(v23 - 17) < 0)
    operator delete(*(void **)(v23 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t YAML::RegEx::RegEx(uint64_t result, int a2)
{
  *(_DWORD *)result = a2;
  *(_WORD *)(result + 4) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 8) = 0;
  return result;
}

{
  *(_DWORD *)result = a2;
  *(_WORD *)(result + 4) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 8) = 0;
  return result;
}

uint64_t YAML::RegEx::RegEx(uint64_t this)
{
  *(_DWORD *)this = 0;
  *(_WORD *)(this + 4) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 8) = 0;
  return this;
}

{
  *(_DWORD *)this = 0;
  *(_WORD *)(this + 4) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 8) = 0;
  return this;
}

uint64_t YAML::RegEx::RegEx(uint64_t this, char a2)
{
  *(_DWORD *)this = 1;
  *(_BYTE *)(this + 4) = a2;
  *(_BYTE *)(this + 5) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 8) = 0;
  return this;
}

{
  *(_DWORD *)this = 1;
  *(_BYTE *)(this + 4) = a2;
  *(_BYTE *)(this + 5) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 8) = 0;
  return this;
}

uint64_t YAML::RegEx::RegEx(uint64_t this, char a2, char a3)
{
  *(_DWORD *)this = 2;
  *(_BYTE *)(this + 4) = a2;
  *(_BYTE *)(this + 5) = a3;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 8) = 0;
  return this;
}

{
  *(_DWORD *)this = 2;
  *(_BYTE *)(this + 4) = a2;
  *(_BYTE *)(this + 5) = a3;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 8) = 0;
  return this;
}

uint64_t YAML::RegEx::RegEx(uint64_t a1, char *a2, int a3)
{
  unint64_t v4;
  unint64_t v5;

  *(_DWORD *)a1 = a3;
  *(_WORD *)(a1 + 4) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if (a2[23] >= 0)
  {
    v5 = a2[23];
  }
  else
  {
    a2 = *(char **)a2;
    v5 = v4;
  }
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  std::vector<YAML::RegEx>::__init_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>((_QWORD *)(a1 + 8), a2, &a2[v5], v5);
  return a1;
}

{
  unint64_t v4;
  unint64_t v5;

  *(_DWORD *)a1 = a3;
  *(_WORD *)(a1 + 4) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if (a2[23] >= 0)
  {
    v5 = a2[23];
  }
  else
  {
    a2 = *(char **)a2;
    v5 = v4;
  }
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  std::vector<YAML::RegEx>::__init_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>((_QWORD *)(a1 + 8), a2, &a2[v5], v5);
  return a1;
}

_QWORD *std::vector<YAML::RegEx>::__init_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(_QWORD *result, char *a2, char *a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  if (a4)
  {
    v6 = result;
    std::vector<YAML::RegEx>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v12 = v7;
    v11 = v7;
    v9[0] = v6 + 2;
    v9[1] = &v11;
    v9[2] = &v12;
    if (a2 != a3)
    {
      do
      {
        v8 = *a2++;
        *(_DWORD *)v7 = 1;
        *(_BYTE *)(v7 + 4) = v8;
        *(_BYTE *)(v7 + 5) = 0;
        *(_QWORD *)(v7 + 16) = 0;
        *(_QWORD *)(v7 + 24) = 0;
        *(_QWORD *)(v7 + 8) = 0;
        v7 += 32;
      }
      while (a2 != a3);
      v12 = v7;
    }
    v10 = 1;
    result = (_QWORD *)std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<YAML::RegEx>,YAML::RegEx*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
    v6[1] = v7;
  }
  return result;
}

void sub_1BF9A5B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t YAML::operator!@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  *(_DWORD *)a2 = 5;
  *(_WORD *)(a2 + 4) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  result = std::vector<YAML::RegEx>::__push_back_slow_path<YAML::RegEx const&>((uint64_t *)(a2 + 8), a1);
  *(_QWORD *)(a2 + 16) = result;
  return result;
}

void sub_1BF9A5C20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<YAML::RegEx>::__push_back_slow_path<YAML::RegEx const&>(uint64_t *a1, int *a2)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  __int16 v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v22;
  unint64_t v23;
  _BYTE v24[24];
  _QWORD *v25;
  _QWORD v26[3];
  char v27;
  __int128 v28;
  __int128 v29;

  v2 = (a1[1] - *a1) >> 5;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 59)
    std::vector<BOOL>::__throw_length_error[abi:ne180100]();
  v6 = a1 + 2;
  v7 = a1[2] - *a1;
  if (v7 >> 4 > v3)
    v3 = v7 >> 4;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFE0)
    v8 = 0x7FFFFFFFFFFFFFFLL;
  else
    v8 = v3;
  v25 = v6;
  if (v8)
    v8 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::RegEx>>(v8);
  else
    v9 = 0;
  v10 = v8 + 32 * v2;
  v23 = v8;
  *(_QWORD *)v24 = v10;
  *(_QWORD *)&v24[8] = v10;
  *(_QWORD *)&v24[16] = v8 + 32 * v9;
  v11 = *a2;
  *(_WORD *)(v10 + 4) = *((_WORD *)a2 + 2);
  *(_DWORD *)v10 = v11;
  *(_QWORD *)(v10 + 16) = 0;
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 8) = 0;
  std::vector<YAML::RegEx>::__init_with_size[abi:ne180100]<YAML::RegEx*,YAML::RegEx*>((_QWORD *)(v10 + 8), *((int **)a2 + 1), *((int **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 5);
  v12 = *(_QWORD *)v24;
  *(_QWORD *)&v24[8] += 32;
  v14 = *a1;
  v13 = a1[1];
  *(_QWORD *)&v29 = *(_QWORD *)v24;
  *((_QWORD *)&v29 + 1) = *(_QWORD *)v24;
  v28 = v29;
  v26[0] = v6;
  v26[1] = &v28;
  v26[2] = &v29;
  v27 = 0;
  while (v13 != v14)
  {
    v15 = *(_DWORD *)(v13 - 32);
    v13 -= 32;
    v16 = *(_WORD *)(v13 + 4);
    *(_QWORD *)(v12 - 24) = 0;
    v17 = (_QWORD *)(v12 - 24);
    *((_WORD *)v17 - 2) = v16;
    *((_DWORD *)v17 - 2) = v15;
    v17[1] = 0;
    v17[2] = 0;
    std::vector<YAML::RegEx>::__init_with_size[abi:ne180100]<YAML::RegEx*,YAML::RegEx*>(v17, *(int **)(v13 + 8), *(int **)(v13 + 16), (uint64_t)(*(_QWORD *)(v13 + 16) - *(_QWORD *)(v13 + 8)) >> 5);
    v12 = *((_QWORD *)&v29 + 1) - 32;
    *((_QWORD *)&v29 + 1) -= 32;
  }
  v27 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<YAML::RegEx>,std::reverse_iterator<YAML::RegEx*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v26);
  v18 = a1[2];
  v19 = *(_OWORD *)&v24[8];
  v22 = *(_QWORD *)&v24[8];
  v20 = *(_OWORD *)a1;
  *a1 = v12;
  *(_OWORD *)v24 = v20;
  *(_OWORD *)(a1 + 1) = v19;
  *(_QWORD *)&v24[16] = v18;
  v23 = v20;
  std::__split_buffer<YAML::RegEx>::~__split_buffer((uint64_t)&v23);
  return v22;
}

void sub_1BF9A5DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::__split_buffer<YAML::RegEx>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<YAML::RegEx>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void **v5;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 32;
    v5 = (void **)(i - 24);
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<YAML::RegEx>,std::reverse_iterator<YAML::RegEx*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  void **v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    while (v3 != v4)
    {
      v5 = (void **)(v3 + 8);
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v5);
      v3 += 32;
    }
  }
  return a1;
}

uint64_t YAML::operator|@<X0>(int *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  *(_DWORD *)a3 = 3;
  *(_WORD *)(a3 + 4) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  v5 = std::vector<YAML::RegEx>::__push_back_slow_path<YAML::RegEx const&>((uint64_t *)(a3 + 8), a1);
  v6 = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 16) = v5;
  if (v5 >= v6)
  {
    result = std::vector<YAML::RegEx>::__push_back_slow_path<YAML::RegEx const&>((uint64_t *)(a3 + 8), a2);
  }
  else
  {
    std::vector<YAML::RegEx>::__construct_one_at_end[abi:ne180100]<YAML::RegEx const&>(a3 + 8, a2);
    result = v5 + 32;
  }
  *(_QWORD *)(a3 + 16) = result;
  return result;
}

void sub_1BF9A5F30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<YAML::RegEx>::__construct_one_at_end[abi:ne180100]<YAML::RegEx const&>(uint64_t a1, int *a2)
{
  uint64_t v3;
  int v4;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *a2;
  *(_WORD *)(v3 + 4) = *((_WORD *)a2 + 2);
  *(_DWORD *)v3 = v4;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 8) = 0;
  result = std::vector<YAML::RegEx>::__init_with_size[abi:ne180100]<YAML::RegEx*,YAML::RegEx*>((_QWORD *)(v3 + 8), *((int **)a2 + 1), *((int **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 5);
  *(_QWORD *)(a1 + 8) = v3 + 32;
  return result;
}

void sub_1BF9A5FA0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t YAML::operator&@<X0>(int *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  *(_DWORD *)a3 = 4;
  *(_WORD *)(a3 + 4) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  v5 = std::vector<YAML::RegEx>::__push_back_slow_path<YAML::RegEx const&>((uint64_t *)(a3 + 8), a1);
  v6 = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 16) = v5;
  if (v5 >= v6)
  {
    result = std::vector<YAML::RegEx>::__push_back_slow_path<YAML::RegEx const&>((uint64_t *)(a3 + 8), a2);
  }
  else
  {
    std::vector<YAML::RegEx>::__construct_one_at_end[abi:ne180100]<YAML::RegEx const&>(a3 + 8, a2);
    result = v5 + 32;
  }
  *(_QWORD *)(a3 + 16) = result;
  return result;
}

void sub_1BF9A6034(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t YAML::operator+@<X0>(int *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  *(_DWORD *)a3 = 6;
  *(_WORD *)(a3 + 4) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  v5 = std::vector<YAML::RegEx>::__push_back_slow_path<YAML::RegEx const&>((uint64_t *)(a3 + 8), a1);
  v6 = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 16) = v5;
  if (v5 >= v6)
  {
    result = std::vector<YAML::RegEx>::__push_back_slow_path<YAML::RegEx const&>((uint64_t *)(a3 + 8), a2);
  }
  else
  {
    std::vector<YAML::RegEx>::__construct_one_at_end[abi:ne180100]<YAML::RegEx const&>(a3 + 8, a2);
    result = v5 + 32;
  }
  *(_QWORD *)(a3 + 16) = result;
  return result;
}

void sub_1BF9A60D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::IsDisplayMode(int a1)
{
  return (a1 - 3) < 2;
}

_QWORD *siri::dialogengine::ResponseModeToString@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if ((a1 - 1) > 3)
    v2 = "";
  else
    v2 = off_1E7930A68[a1 - 1];
  return std::string::basic_string[abi:ne180100]<0>(a2, v2);
}

uint64_t siri::dialogengine::ParseResponseModeString(unint64_t a1)
{
  unint64_t v1;
  int v2;
  uint64_t result;
  unint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  _BOOL4 v9;
  unint64_t v10;
  int v11;
  _BOOL4 v13;

  v1 = a1;
  v2 = *(char *)(a1 + 23);
  if (v2 < 0)
  {
    result = 0;
    switch(*(_QWORD *)(v1 + 8))
    {
      case 9:
        v1 = *(_QWORD *)v1;
LABEL_5:
        v4 = bswap64(*(_QWORD *)v1);
        if (v4 == 0x766F6963654F6E6CLL)
        {
          v5 = *(unsigned __int8 *)(v1 + 8) - 121;
        }
        else if (v4 < 0x766F6963654F6E6CLL)
        {
          v5 = -1;
        }
        else
        {
          v5 = 1;
        }
        result = v5 == 0;
        break;
      case 0xBLL:
        v1 = *(_QWORD *)v1;
LABEL_12:
        v6 = *(_QWORD *)v1;
        v7 = *(_QWORD *)(v1 + 3);
        v9 = v6 == 0x4F79616C70736964 && v7 == 0x796C6E4F79616C70;
        result = (4 * v9);
        break;
      case 0xCLL:
        v1 = *(_QWORD *)v1;
LABEL_20:
        v10 = *(_QWORD *)v1;
        v11 = *(_DWORD *)(v1 + 8);
        v13 = v10 == 0x726F466563696F76 && v11 == 1685217655;
        result = (2 * v13);
        break;
      case 0xELL:
        v1 = *(_QWORD *)v1;
LABEL_28:
        if (*(_QWORD *)v1 ^ 0x4679616C70736964 | *(_QWORD *)(v1 + 6) ^ 0x64726177726F4679)
          result = 0;
        else
          result = 3;
        break;
      default:
        return result;
    }
  }
  else
  {
    result = 0;
    switch((char)v2)
    {
      case 9:
        goto LABEL_5;
      case 11:
        goto LABEL_12;
      case 12:
        goto LABEL_20;
      case 14:
        goto LABEL_28;
      default:
        return result;
    }
  }
  return result;
}

siri::dialogengine::RequestInfo *siri::dialogengine::RequestInfo::RequestInfo(siri::dialogengine::RequestInfo *this)
{
  const void ***v2;
  siri::dialogengine *v3;
  int v4;

  *(_DWORD *)this = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_QWORD *)this + 19) = 0;
  v2 = (const void ***)siri::dialogengine::DefaultUserSettings(this);
  v3 = (siri::dialogengine *)std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)this + 160, v2);
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_QWORD *)((char *)this + 278) = 0;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  if (siri::dialogengine::PreferSSML(v3))
    v4 = 0;
  else
    v4 = 2;
  *((_DWORD *)this + 72) = v4;
  *((_QWORD *)this + 38) = 0;
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 37) = (char *)this + 304;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *(_OWORD *)((char *)this + 473) = 0u;
  return this;
}

void sub_1BF9A6378(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 + 279) < 0)
    operator delete(*(void **)(v2 + 256));
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 231) < 0)
    operator delete(*(void **)(v2 + 208));
  if (*(char *)(v2 + 207) < 0)
    operator delete(*v3);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(_QWORD **)(v2 + 168));
  if (*(char *)(v2 + 151) < 0)
    operator delete(*(void **)(v2 + 128));
  if (*(char *)(v2 + 127) < 0)
    operator delete(*(void **)(v2 + 104));
  if (*(char *)(v2 + 103) < 0)
    operator delete(*(void **)(v2 + 80));
  if (*(char *)(v2 + 79) < 0)
    operator delete(*(void **)(v2 + 56));
  if (*(char *)(v2 + 55) < 0)
    operator delete(*(void **)(v2 + 32));
  std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::RequestInfo::GetRequestType(siri::dialogengine::RequestInfo *this)
{
  return *(unsigned int *)this;
}

_QWORD *siri::dialogengine::RequestInfo::GetRequestTypeString@<X0>(siri::dialogengine::RequestInfo *this@<X0>, _QWORD *a2@<X8>)
{
  const char *v2;
  char *v3;

  v2 = "";
  if (*(_DWORD *)this == 1)
    v2 = "visual";
  if (*(_DWORD *)this)
    v3 = (char *)v2;
  else
    v3 = "dialog";
  return std::string::basic_string[abi:ne180100]<0>(a2, v3);
}

_DWORD *siri::dialogengine::RequestInfo::SetRequestType(_DWORD *result, _DWORD *a2)
{
  *result = *a2;
  return result;
}

_QWORD *siri::dialogengine::RequestInfo::GetTemplateDirs@<X0>(siri::dialogengine::RequestInfo *this@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<siri::dialogengine::UpdatableDir>::__init_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>(a2, *((_QWORD *)this + 1), *((_QWORD *)this + 2), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 2) - *((_QWORD *)this + 1)) >> 5));
}

_QWORD *std::vector<siri::dialogengine::UpdatableDir>::__init_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<siri::dialogengine::UpdatableDir>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::dialogengine::UpdatableDir>,siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1BF9A6504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void siri::dialogengine::RequestInfo::SetTemplateDirs(uint64_t a1, std::string **a2)
{
  uint64_t v2;

  v2 = a1 + 8;
  if ((std::string **)v2 != a2)
    std::vector<siri::dialogengine::UpdatableDir>::__assign_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>(v2, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 5));
}

void siri::dialogengine::RequestInfo::GetCatId(siri::dialogengine::RequestInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 55) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 4), *((_QWORD *)this + 5));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 2);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 6);
  }
}

std::string *siri::dialogengine::RequestInfo::SetCatId(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 32), a2);
}

void siri::dialogengine::RequestInfo::GetParamsPath(siri::dialogengine::RequestInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 103) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 10), *((_QWORD *)this + 11));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 5);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 12);
  }
}

std::string *siri::dialogengine::RequestInfo::SetParamsPath(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 80), a2);
}

void siri::dialogengine::RequestInfo::GetParamsString(siri::dialogengine::RequestInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 79) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 7), *((_QWORD *)this + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 56);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 9);
  }
}

std::string *siri::dialogengine::RequestInfo::SetParamsString(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 56), a2);
}

void siri::dialogengine::RequestInfo::GetRequestParamString(siri::dialogengine::RequestInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 127) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 13), *((_QWORD *)this + 14));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 104);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 15);
  }
}

std::string *siri::dialogengine::RequestInfo::SetRequestParamsString(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 104), a2);
}

void siri::dialogengine::RequestInfo::GetPatternId(siri::dialogengine::RequestInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 151) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 16), *((_QWORD *)this + 17));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 8);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 18);
  }
}

std::string *siri::dialogengine::RequestInfo::SetPatternId(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 128), a2);
}

uint64_t siri::dialogengine::RequestInfo::GetResponseMode(siri::dialogengine::RequestInfo *this)
{
  return *((unsigned int *)this + 38);
}

uint64_t siri::dialogengine::RequestInfo::SetResponseMode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 152) = a2;
  return result;
}

void siri::dialogengine::RequestInfo::SetResponseMode(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  const char *v4;
  int v5;

  v2 = a2;
  v5 = siri::dialogengine::ParseResponseModeString(a2);
  if (!v5)
  {
    if ((*(char *)(v2 + 23) & 0x80000000) == 0)
    {
      if (!*(_BYTE *)(v2 + 23))
        goto LABEL_8;
      goto LABEL_7;
    }
    if (*(_QWORD *)(v2 + 8))
    {
      v2 = *(_QWORD *)v2;
LABEL_7:
      siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Unrecognized response mode string '%s'", v4, v2);
    }
  }
LABEL_8:
  *(_DWORD *)(a1 + 152) = v5;
}

uint64_t siri::dialogengine::RequestInfo::GetRandomSeed(siri::dialogengine::RequestInfo *this)
{
  return *((unsigned int *)this + 39);
}

uint64_t siri::dialogengine::RequestInfo::SetRandomSeed(uint64_t this, int a2)
{
  *(_DWORD *)(this + 156) = a2;
  return this;
}

uint64_t siri::dialogengine::RequestInfo::GetUserSettings@<X0>(const void ***this@<X0>, uint64_t a2@<X8>)
{
  return std::map<std::string,std::string>::map[abi:ne180100](a2, this + 20);
}

void siri::dialogengine::RequestInfo::GetUserSetting(uint64_t a1@<X0>, const void **a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v5;
  __int128 v6;

  v5 = std::__tree<std::string>::find<std::string>(a1 + 160, a2);
  if (a1 + 168 == v5)
  {
    std::string::basic_string[abi:ne180100]<0>(a3, "");
  }
  else if (*(char *)(v5 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)(v5 + 56), *(_QWORD *)(v5 + 64));
  }
  else
  {
    v6 = *(_OWORD *)(v5 + 56);
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + 72);
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v6;
  }
}

BOOL siri::dialogengine::RequestInfo::HasUserSetting(uint64_t a1, const void **a2)
{
  return a1 + 168 != std::__tree<std::string>::find<std::string>(a1 + 160, a2);
}

void siri::dialogengine::RequestInfo::SetUserSettings(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a1 + 160;
  if (v2 != a2)
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>(v2, *(__int128 **)a2, (__int128 *)(a2 + 8));
}

std::string *siri::dialogengine::RequestInfo::SetUserSetting(uint64_t **a1, const void **a2, const std::string *a3)
{
  uint64_t v6;
  std::string *result;
  uint64_t *v8;
  const void **v9;

  v6 = siri::dialogengine::DefaultUserSettings((siri::dialogengine *)a1);
  result = (std::string *)std::__tree<std::string>::find<std::string>(v6, a2);
  if ((std::string *)(v6 + 8) != result)
  {
    v9 = a2;
    v8 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 20, a2, (__int128 **)&v9);
    return std::string::operator=((std::string *)(v8 + 7), a3);
  }
  return result;
}

void siri::dialogengine::RequestInfo::GetRequestedLocale(siri::dialogengine::RequestInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 231) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 26), *((_QWORD *)this + 27));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 13);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 28);
  }
}

std::string *siri::dialogengine::RequestInfo::SetRequestedLocale(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 208), a2);
}

std::string *siri::dialogengine::RequestInfo::GetLocales@<X0>(__int128 **this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, this[29], this[30], 0xAAAAAAAAAAAAAAABLL * (((char *)this[30] - (char *)this[29]) >> 3));
}

void siri::dialogengine::RequestInfo::SetLocales(uint64_t a1, uint64_t a2)
{
  std::vector<std::string> *v2;

  v2 = (std::vector<std::string> *)(a1 + 232);
  if (v2 != (std::vector<std::string> *)a2)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v2, *(std::string **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
}

void siri::dialogengine::RequestInfo::GetLocalePath(siri::dialogengine::RequestInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 279) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 32), *((_QWORD *)this + 33));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 16);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 34);
  }
}

std::string *siri::dialogengine::RequestInfo::SetLocalePath(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 256), a2);
}

void siri::dialogengine::RequestInfo::GetLocaleString(siri::dialogengine::RequestInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 207) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 23), *((_QWORD *)this + 24));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 184);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 25);
  }
}

std::string *siri::dialogengine::RequestInfo::SetLocaleString(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 184), a2);
}

void siri::dialogengine::RequestInfo::GetVisualPath(siri::dialogengine::RequestInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 415) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 49), *((_QWORD *)this + 50));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 392);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 51);
  }
}

std::string *siri::dialogengine::RequestInfo::SetVisualPath(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 392), a2);
}

void siri::dialogengine::RequestInfo::GetVisualString(siri::dialogengine::RequestInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 391) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 46), *((_QWORD *)this + 47));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 23);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 48);
  }
}

std::string *siri::dialogengine::RequestInfo::SetVisualString(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 368), a2);
}

uint64_t siri::dialogengine::RequestInfo::GetOptions(siri::dialogengine::RequestInfo *this)
{
  return *((unsigned int *)this + 70);
}

BOOL siri::dialogengine::RequestInfo::HasOption(siri::dialogengine::RequestInfo *this, int a2)
{
  return (a2 & ~*((_DWORD *)this + 70)) == 0;
}

uint64_t siri::dialogengine::RequestInfo::SetOptions(uint64_t this, int a2)
{
  *(_DWORD *)(this + 280) = a2;
  return this;
}

uint64_t siri::dialogengine::RequestInfo::AddOption(uint64_t this, int a2)
{
  *(_DWORD *)(this + 280) |= a2;
  return this;
}

uint64_t siri::dialogengine::RequestInfo::IsMultiUser(siri::dialogengine::RequestInfo *this)
{
  return *((unsigned __int8 *)this + 284);
}

uint64_t siri::dialogengine::RequestInfo::SetMultiUser(uint64_t this, char a2)
{
  *(_BYTE *)(this + 284) = a2;
  return this;
}

uint64_t siri::dialogengine::RequestInfo::GetGrounding(siri::dialogengine::RequestInfo *this)
{
  return *((unsigned __int8 *)this + 285);
}

uint64_t siri::dialogengine::RequestInfo::SetGrounding(uint64_t this, char a2)
{
  *(_BYTE *)(this + 285) = a2;
  return this;
}

void siri::dialogengine::RequestInfo::GetUseCaseState(siri::dialogengine::RequestInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 463) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 55), *((_QWORD *)this + 56));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 440);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 57);
  }
}

std::string *siri::dialogengine::RequestInfo::SetUseCaseState(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 440), a2);
}

void siri::dialogengine::RequestInfo::GetFamilyState(siri::dialogengine::RequestInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 487) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 58), *((_QWORD *)this + 59));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 29);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 60);
  }
}

std::string *siri::dialogengine::RequestInfo::SetFamilyState(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 464), a2);
}

uint64_t siri::dialogengine::RequestInfo::GetSSMLMode(siri::dialogengine::RequestInfo *this)
{
  return *((unsigned int *)this + 72);
}

uint64_t siri::dialogengine::RequestInfo::SetSSMLMode(uint64_t result, int a2)
{
  *(_DWORD *)(result + 288) = a2;
  return result;
}

std::string *siri::dialogengine::RequestInfo::SetDialogMetadata(uint64_t a1, __int128 *a2, const std::string *a3)
{
  uint64_t *v4;
  __int128 *v6;

  v6 = a2;
  v4 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 296), (const void **)a2, &v6);
  return std::string::operator=((std::string *)(v4 + 7), a3);
}

void siri::dialogengine::RequestInfo::GetDialogMetadata(uint64_t a1@<X0>, const void **a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v5;
  __int128 v6;

  v5 = std::__tree<std::string>::find<std::string>(a1 + 296, a2);
  if (a1 + 304 == v5)
  {
    std::string::basic_string[abi:ne180100]<0>(a3, "");
  }
  else if (*(char *)(v5 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)(v5 + 56), *(_QWORD *)(v5 + 64));
  }
  else
  {
    v6 = *(_OWORD *)(v5 + 56);
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + 72);
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v6;
  }
}

void siri::dialogengine::RequestInfo::SetDialogMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a1 + 296;
  if (v2 != a2)
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>(v2, *(__int128 **)a2, (__int128 *)(a2 + 8));
}

uint64_t siri::dialogengine::RequestInfo::GetDialogMetadata@<X0>(const void ***this@<X0>, uint64_t a2@<X8>)
{
  return std::map<std::string,std::string>::map[abi:ne180100](a2, this + 37);
}

void siri::dialogengine::RequestInfo::GetInteractionId(siri::dialogengine::RequestInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 343) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 40), *((_QWORD *)this + 41));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 20);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 42);
  }
}

std::string *siri::dialogengine::RequestInfo::SetInteractionId(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 320), a2);
}

void siri::dialogengine::RequestInfo::GetExecutionRequestId(siri::dialogengine::RequestInfo *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 367) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 43), *((_QWORD *)this + 44));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 344);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 45);
  }
}

std::string *siri::dialogengine::RequestInfo::SetExecutionRequestId(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 344), a2);
}

_QWORD *siri::dialogengine::RequestInfo::GetCustomPronunciations@<X0>(siri::dialogengine::RequestInfo *this@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(a2, *((_QWORD *)this + 52), *((_QWORD *)this + 53), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 53) - *((_QWORD *)this + 52)) >> 4));
}

_QWORD *std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<siri::dialogengine::DatabaseField>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1BF9A6C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      std::pair<std::string,std::string>::pair[abi:ne180100]((std::string *)(a4 + v7), (__int128 *)(a2 + v7));
      v7 += 48;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

std::string *std::pair<std::string,std::string>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_1BF9A6D5C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::RequestInfo::SetCustomProunciations(uint64_t a1, std::string **a2)
{
  std::vector<std::pair<std::string, std::string>> *v2;

  v2 = (std::vector<std::pair<std::string, std::string>> *)(a1 + 416);
  if (v2 != (std::vector<std::pair<std::string, std::string>> *)a2)
    std::vector<std::pair<std::string,std::string>>::__assign_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v2, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 4));
}

void std::vector<std::pair<std::string,std::string>>::__assign_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(std::vector<std::pair<std::string, std::string>> *this, std::string *__str, std::string *a3, unint64_t a4)
{
  std::__compressed_pair<std::pair<std::string, std::string> *, std::allocator<std::pair<std::string, std::string>>> *p_end_cap;
  std::vector<std::pair<std::string, std::string>>::pointer begin;
  unint64_t v10;
  unint64_t v11;
  std::pair<std::string, std::string> *v12;
  std::string *v13;
  std::pair<std::string, std::string> *v14;
  std::vector<std::pair<std::string, std::string>>::pointer i;

  p_end_cap = &this->__end_cap_;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 4) < a4)
  {
    std::vector<siri::dialogengine::DatabaseField>::__vdeallocate(this);
    if (a4 > 0x555555555555555)
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 4);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 4) >= 0x2AAAAAAAAAAAAAALL)
      v11 = 0x555555555555555;
    else
      v11 = v10;
    std::vector<siri::dialogengine::DatabaseField>::__vallocate[abi:ne180100](this, v11);
    v12 = (std::pair<std::string, std::string> *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>((uint64_t)p_end_cap, (uint64_t)__str, (uint64_t)a3, (uint64_t)this->__end_);
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)begin) >> 4) < a4)
  {
    v13 = (std::string *)((char *)__str + 16 * (((char *)this->__end_ - (char *)begin) >> 4));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<siri::dialogengine::DatabaseField *,siri::dialogengine::DatabaseField *,siri::dialogengine::DatabaseField *>(__str, v13, &begin->first);
    v12 = (std::pair<std::string, std::string> *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>((uint64_t)p_end_cap, (uint64_t)v13, (uint64_t)a3, (uint64_t)this->__end_);
LABEL_11:
    this->__end_ = v12;
    return;
  }
  v14 = (std::pair<std::string, std::string> *)std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<siri::dialogengine::DatabaseField *,siri::dialogengine::DatabaseField *,siri::dialogengine::DatabaseField *>(__str, a3, &begin->first);
  for (i = this->__end_; i != v14; std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)i))
    --i;
  this->__end_ = v14;
}

void sub_1BF9A6F00(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1BF9A6F08(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::RequestInfo::IsBuiltinCAT(siri::dialogengine::RequestInfo *this)
{
  return *((unsigned __int8 *)this + 488);
}

uint64_t siri::dialogengine::RequestInfo::SetBuiltinCAT(uint64_t this, char a2)
{
  *(_BYTE *)(this + 488) = a2;
  return this;
}

void sub_1BF9A7024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1BF9A7118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1BF9A7268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  void *v18;
  void *v19;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1BF9A7438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  void *v13;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a13);

  _Unwind_Resume(a1);
}

void sub_1BF9A75F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void siri::dialogengine::Trace::GeneratePathForTrace(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  std::string::size_type v6;
  _QWORD *v7;
  size_t v8;
  _QWORD *v9;
  _QWORD *v10;
  void **v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  std::string *v15;
  std::string::size_type size;
  uint64_t v17;
  void *__p[2];
  char v19;
  timeval v20;
  _QWORD v21[11];
  char v22;
  uint64_t v23;
  std::string v24;
  void *v25[2];
  unsigned __int8 v26;
  tm v27;
  time_t v28;
  void *v29[2];
  char v30;
  char __s[16];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  GenerateAllTracesPath((uint64_t)v29);
  if (a3 == 0.0)
  {
    gettimeofday(&v20, 0);
    a3 = (double)v20.tv_usec / 1000000.0 + (double)v20.tv_sec;
  }
  v28 = (uint64_t)a3;
  gmtime_r(&v28, &v27);
  strftime(__s, 0x10uLL, "%Y%m%d_%H%M%S", &v27);
  FormatDecimalDigits(a3, v25, 3u);
  if (*(char *)(a1 + 23) < 0)
  {
    v6 = *(_QWORD *)(a1 + 8);
    if (v6)
    {
      std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)a1, v6);
      goto LABEL_9;
    }
  }
  else if (*(_BYTE *)(a1 + 23))
  {
    v24 = *(std::string *)a1;
    goto LABEL_9;
  }
  std::string::basic_string[abi:ne180100]<0>(&v24, "None");
LABEL_9:
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v20);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"DialogEngine_", 13);
  v8 = strlen(__s);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)__s, v8);
  LOBYTE(__p[0]) = 95;
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)__p, 1);
  if ((v26 & 0x80u) == 0)
    v11 = v25;
  else
    v11 = (void **)v25[0];
  if ((v26 & 0x80u) == 0)
    v12 = v26;
  else
    v12 = (uint64_t)v25[1];
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
  LOBYTE(__p[0]) = 95;
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)__p, 1);
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = &v24;
  else
    v15 = (std::string *)v24.__r_.__value_.__r.__words[0];
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
  else
    size = v24.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, size);
  std::stringbuf::str();
  siri::dialogengine::JoinPath((uint64_t)v29, (uint64_t)__p, a2);
  if (v19 < 0)
    operator delete(__p[0]);
  v20.tv_sec = *MEMORY[0x1E0DE4F50];
  v17 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(__darwin_time_t *)((char *)&v20.tv_sec + *(_QWORD *)(v20.tv_sec - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v21[0] = v17;
  v21[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v22 < 0)
    operator delete((void *)v21[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C3B8D80C](&v23);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if ((char)v26 < 0)
    operator delete(v25[0]);
  if (v30 < 0)
    operator delete(v29[0]);
}

void sub_1BF9A79A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  if (*(char *)(v15 - 161) < 0)
    operator delete(*(void **)(v15 - 184));
  if (*(char *)(v15 - 73) < 0)
    operator delete(*(void **)(v15 - 96));
  _Unwind_Resume(exception_object);
}

void GenerateAllTracesPath(uint64_t a1)
{
  void *__p[2];
  char v3;
  void *v4[2];
  char v5;

  std::string::basic_string[abi:ne180100]<0>(v4, "/tmp");
  std::string::basic_string[abi:ne180100]<0>(__p, "DialogEngine_traces");
  siri::dialogengine::JoinPath((uint64_t)v4, (uint64_t)__p, a1);
  if (v3 < 0)
    operator delete(__p[0]);
  if (v5 < 0)
    operator delete(v4[0]);
}

void sub_1BF9A7A9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t FormatDecimalDigits(double a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  char v6;
  _QWORD v7[2];
  _QWORD v8[11];
  char v9;
  uint64_t v10;

  __exp10((double)a3);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v7);
  *(_QWORD *)((char *)&v8[3] + *(_QWORD *)(v8[0] - 24)) = a3;
  v6 = 48;
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v8, &v6);
  std::ostream::operator<<();
  std::stringbuf::str();
  v7[0] = *MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v7 + *(_QWORD *)(v7[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v8[0] = v4;
  v8[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v9 < 0)
    operator delete((void *)v8[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C3B8D80C](&v10);
}

void sub_1BF9A7BD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *siri::dialogengine::Trace::Trace(std::string *this, __int128 *a2, int a3, double a4)
{
  __int128 v6;
  std::string::size_type v7;
  std::string::size_type v8;
  void **p_size;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  std::ios_base *v13;
  double v14;
  void **v15;
  void **v16;
  void **v19;
  void **v20;
  void **v21;
  void *__p[2];
  char v23;
  timeval v24;
  std::string::size_type v25;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v6;
  }
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 16);
  this[8].__r_.__value_.__r.__words[2] = v7;
  *(double *)&this[1].__r_.__value_.__l.__data_ = a4;
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = 0u;
  p_size = (void **)&this[1].__r_.__value_.__l.__size_;
  v10 = (void **)&this[2].__r_.__value_.__l.__size_;
  *(_OWORD *)&this[3].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[5].__r_.__value_.__r.__words[1] = 0u;
  v21 = (void **)&this[4].__r_.__value_.__l.__size_;
  *(_OWORD *)&this[7].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[4].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[4].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[6].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[6].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)((char *)&this[7].__r_.__value_.__r.__words[2] + 2) = 0u;
  v11 = MEMORY[0x1E0DE4FB0];
  v12 = MEMORY[0x1E0DE4FB0] + 64;
  this[26].__r_.__value_.__r.__words[0] = MEMORY[0x1E0DE4FB0] + 64;
  *(std::string::size_type *)((char *)&this[8].__r_.__value_.__r.__words[2] + *(_QWORD *)(v7 - 24)) = v8;
  v13 = (std::ios_base *)((char *)&this[8].__r_.__value_.__r.__words[2]
                        + *(_QWORD *)(this[8].__r_.__value_.__r.__words[2] - 24));
  std::ios_base::init(v13, &this[9]);
  v13[1].__vftable = 0;
  v13[1].__fmtflags_ = -1;
  this[8].__r_.__value_.__r.__words[2] = v11 + 24;
  this[26].__r_.__value_.__r.__words[0] = v12;
  MEMORY[0x1C3B8D5FC](&this[9]);
  v14 = *(double *)&this[1].__r_.__value_.__l.__data_;
  v16 = (void **)&this[5].__r_.__value_.__l.__size_;
  v15 = (void **)&this[3].__r_.__value_.__l.__size_;
  if (v14 == 0.0)
  {
    gettimeofday(&v24, 0);
    v14 = (double)v24.tv_usec / 1000000.0 + (double)v24.tv_sec;
    *(double *)&this[1].__r_.__value_.__l.__data_ = v14;
  }
  siri::dialogengine::Trace::GeneratePathForTrace((uint64_t)this, (uint64_t)&v24, v14);
  if (this[2].__r_.__value_.__s.__data_[7] < 0)
    operator delete(*p_size);
  *(timeval *)p_size = v24;
  this[2].__r_.__value_.__r.__words[0] = v25;
  std::string::basic_string[abi:ne180100]<0>(__p, "Templates");
  siri::dialogengine::JoinPath((uint64_t)&this[1].__r_.__value_.__l.__size_, (uint64_t)__p, (uint64_t)&v24);
  if (this[3].__r_.__value_.__s.__data_[7] < 0)
    operator delete(*v10);
  *(timeval *)v10 = v24;
  this[3].__r_.__value_.__r.__words[0] = v25;
  HIBYTE(v25) = 0;
  LOBYTE(v24.tv_sec) = 0;
  if (v23 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "dialog");
  siri::dialogengine::JoinPath((uint64_t)&this[2].__r_.__value_.__l.__size_, (uint64_t)__p, (uint64_t)&v24);
  if (this[4].__r_.__value_.__s.__data_[7] < 0)
    operator delete(*v15);
  *(timeval *)v15 = v24;
  this[4].__r_.__value_.__r.__words[0] = v25;
  HIBYTE(v25) = 0;
  LOBYTE(v24.tv_sec) = 0;
  if (v23 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "metadata");
  siri::dialogengine::JoinPath((uint64_t)&this[2].__r_.__value_.__l.__size_, (uint64_t)__p, (uint64_t)&v24);
  if (this[6].__r_.__value_.__s.__data_[7] < 0)
    operator delete(*v16);
  *(timeval *)v16 = v24;
  this[6].__r_.__value_.__r.__words[0] = v25;
  HIBYTE(v25) = 0;
  LOBYTE(v24.tv_sec) = 0;
  if (v23 < 0)
    operator delete(__p[0]);
  v20 = (void **)&this[6].__r_.__value_.__l.__size_;
  std::string::basic_string[abi:ne180100]<0>(__p, "schema");
  siri::dialogengine::JoinPath((uint64_t)&this[2].__r_.__value_.__l.__size_, (uint64_t)__p, (uint64_t)&v24);
  if (this[7].__r_.__value_.__s.__data_[7] < 0)
    operator delete(*v20);
  *(timeval *)v20 = v24;
  this[7].__r_.__value_.__r.__words[0] = v25;
  HIBYTE(v25) = 0;
  LOBYTE(v24.tv_sec) = 0;
  if (v23 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "visual");
  siri::dialogengine::JoinPath((uint64_t)&this[2].__r_.__value_.__l.__size_, (uint64_t)__p, (uint64_t)&v24);
  if (this[5].__r_.__value_.__s.__data_[7] < 0)
    operator delete(*v21);
  *(timeval *)v21 = v24;
  this[5].__r_.__value_.__r.__words[0] = v25;
  HIBYTE(v25) = 0;
  LOBYTE(v24.tv_sec) = 0;
  if (v23 < 0)
    operator delete(__p[0]);
  v19 = (void **)&this[7].__r_.__value_.__l.__size_;
  siri::dialogengine::CatIdToPath((uint64_t)this, __p);
  siri::dialogengine::JoinPath((uint64_t)&this[2].__r_.__value_.__l.__size_, (uint64_t)__p, (uint64_t)&v24);
  if (this[8].__r_.__value_.__s.__data_[7] < 0)
    operator delete(*v19);
  *(timeval *)v19 = v24;
  this[8].__r_.__value_.__r.__words[0] = v25;
  HIBYTE(v25) = 0;
  LOBYTE(v24.tv_sec) = 0;
  if (v23 < 0)
    operator delete(__p[0]);
  if (a3)
    siri::dialogengine::Trace::InitLogging((uint64_t)this);
  return this;
}

void sub_1BF9A7FC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12, void **a13, void **a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  void **v21;
  void **v22;
  _QWORD *v23;

  std::ofstream::~ofstream(v23);
  if (*(char *)(v20 + 199) < 0)
    operator delete(*a10);
  if (*(char *)(v20 + 175) < 0)
    operator delete(*a11);
  if (*(char *)(v20 + 151) < 0)
    operator delete(*a13);
  if (*(char *)(v20 + 127) < 0)
    operator delete(*a12);
  if (*(char *)(v20 + 103) < 0)
    operator delete(*a14);
  if (*(char *)(v20 + 79) < 0)
    operator delete(*v22);
  if (*(char *)(v20 + 55) < 0)
    operator delete(*v21);
  if (*(char *)(v20 + 23) < 0)
    operator delete(*(void **)v20);
  _Unwind_Resume(a1);
}

void sub_1BF9A80B8()
{
  uint64_t v0;

  std::ostream::~ostream();
  MEMORY[0x1C3B8D80C](v0);
  JUMPOUT(0x1BF9A801CLL);
}

uint64_t siri::dialogengine::Trace::InitLogging(uint64_t this)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void *v4[2];
  char v5;
  void *__p;
  char v7;
  _BYTE v8[24];
  _BYTE *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(this + 201))
  {
    v1 = this;
    this = siri::dialogengine::Trace::CreateFolders((siri::dialogengine::Trace *)this);
    if ((_DWORD)this)
    {
      std::string::basic_string[abi:ne180100]<0>(v4, "log.txt");
      siri::dialogengine::JoinPath(v1 + 32, (uint64_t)v4, (uint64_t)&__p);
      std::ofstream::open();
      if (v7 < 0)
        operator delete(__p);
      if (v5 < 0)
        operator delete(v4[0]);
      v2 = operator new(0x20uLL);
      *v2 = &off_1E7930A98;
      v2[1] = siri::dialogengine::Trace::Log;
      v2[2] = 0;
      v2[3] = v1;
      v9 = v2;
      siri::dialogengine::Log::SetLoggerCallback((siri::dialogengine *)v8);
      this = (uint64_t)v9;
      if (v9 == v8)
      {
        v3 = 4;
        this = (uint64_t)v8;
      }
      else
      {
        if (!v9)
        {
LABEL_12:
          *(_BYTE *)(v1 + 201) = 1;
          return this;
        }
        v3 = 5;
      }
      this = (*(uint64_t (**)(void))(*(_QWORD *)this + 8 * v3))();
      goto LABEL_12;
    }
  }
  return this;
}

void sub_1BF9A81F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,char *a25)
{
  char *v25;
  char *v27;
  uint64_t v28;

  v27 = a25;
  if (a25 == v25)
  {
    v28 = 4;
    v27 = &a22;
  }
  else
  {
    if (!a25)
      goto LABEL_6;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::Trace::CreateFolders(siri::dialogengine::Trace *this)
{
  _BOOL8 v1;
  char Dir;
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  const char *v10;
  char v11;
  std::string __p;

  if (*((_BYTE *)this + 200))
    return 1;
  GenerateAllTracesPath((uint64_t)&__p);
  if (!siri::dialogengine::DirExists((uint64_t *)&__p))
  {
    siri::dialogengine::CreateDir(&__p, 504);
    siri::dialogengine::AddPermissions((const char *)&__p, 511);
  }
  *((_BYTE *)this + 200) = siri::dialogengine::CreateDir((std::string *)((char *)this + 80), 504);
  Dir = siri::dialogengine::CreateDir((std::string *)((char *)this + 128), 504);
  if (*((_BYTE *)this + 200))
    v4 = Dir;
  else
    v4 = 0;
  *((_BYTE *)this + 200) = v4;
  v5 = siri::dialogengine::CreateDir((std::string *)((char *)this + 152), 504);
  if (*((_BYTE *)this + 200))
    v6 = v5;
  else
    v6 = 0;
  *((_BYTE *)this + 200) = v6;
  v7 = siri::dialogengine::CreateDir((std::string *)((char *)this + 176), 504);
  if (*((_BYTE *)this + 200))
    v8 = v7;
  else
    v8 = 0;
  *((_BYTE *)this + 200) = v8;
  v9 = siri::dialogengine::CreateDir((std::string *)((char *)this + 104), 504);
  if (*((_BYTE *)this + 200))
    v11 = v9;
  else
    v11 = 0;
  *((_BYTE *)this + 200) = v11;
  if ((v11 & 1) != 0)
  {
    v1 = 1;
  }
  else
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Failed to create folders for trace", v10);
    v1 = *((_BYTE *)this + 200) != 0;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v1;
}

void sub_1BF9A837C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::Trace::Log(siri::dialogengine::Trace *this, const siri::dialogengine::LogEntry *a2)
{
  double *v4;
  size_t v5;
  _QWORD *v6;
  _QWORD *v7;
  void **v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v14;
  std::string __p;
  void *v16[2];
  unsigned __int8 v17;
  tm v18;
  time_t v19;
  char v20;
  char __s[20];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 201))
  {
    v4 = (double *)((char *)a2 + 32);
    v19 = (uint64_t)*((double *)a2 + 4);
    gmtime_r(&v19, &v18);
    strftime(__s, 0x14uLL, "%Y-%m-%d %H:%M:%S", &v18);
    FormatDecimalDigits(*v4, v16, 6u);
    v5 = strlen(__s);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)this + 26, (uint64_t)__s, v5);
    __p.__r_.__value_.__s.__data_[0] = 46;
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&__p, 1);
    if ((v17 & 0x80u) == 0)
      v8 = v16;
    else
      v8 = (void **)v16[0];
    if ((v17 & 0x80u) == 0)
      v9 = v17;
    else
      v9 = (uint64_t)v16[1];
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
    __p.__r_.__value_.__s.__data_[0] = 32;
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)&__p, 1);
    siri::dialogengine::LogEntry::AsString(a2, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)p_p, size);
    v20 = 10;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v20, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((char)v17 < 0)
      operator delete(v16[0]);
  }
  else
  {
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Trace::Log() was called but logging has not been initialized.", (const char *)a2);
  }
}

void sub_1BF9A8540(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<std::__bind<void (siri::dialogengine::Trace::*)(siri::dialogengine::LogEntry const&),siri::dialogengine::Trace*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (siri::dialogengine::Trace::*)(siri::dialogengine::LogEntry const&),siri::dialogengine::Trace*,std::placeholders::__ph<1> const&>>,void ()(siri::dialogengine::LogEntry const&)>::~__func()
{
  JUMPOUT(0x1C3B8D890);
}

__n128 std::__function::__func<std::__bind<void (siri::dialogengine::Trace::*)(siri::dialogengine::LogEntry const&),siri::dialogengine::Trace*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (siri::dialogengine::Trace::*)(siri::dialogengine::LogEntry const&),siri::dialogengine::Trace*,std::placeholders::__ph<1> const&>>,void ()(siri::dialogengine::LogEntry const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E7930A98;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::__bind<void (siri::dialogengine::Trace::*)(siri::dialogengine::LogEntry const&),siri::dialogengine::Trace*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (siri::dialogengine::Trace::*)(siri::dialogengine::LogEntry const&),siri::dialogengine::Trace*,std::placeholders::__ph<1> const&>>,void ()(siri::dialogengine::LogEntry const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E7930A98;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<void (siri::dialogengine::Trace::*)(siri::dialogengine::LogEntry const&),siri::dialogengine::Trace*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (siri::dialogengine::Trace::*)(siri::dialogengine::LogEntry const&),siri::dialogengine::Trace*,std::placeholders::__ph<1> const&>>,void ()(siri::dialogengine::LogEntry const&)>::operator()(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t std::__function::__func<std::__bind<void (siri::dialogengine::Trace::*)(siri::dialogengine::LogEntry const&),siri::dialogengine::Trace*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (siri::dialogengine::Trace::*)(siri::dialogengine::LogEntry const&),siri::dialogengine::Trace*,std::placeholders::__ph<1> const&>>,void ()(siri::dialogengine::LogEntry const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::__bind<void (siri::dialogengine::Trace::*)(siri::dialogengine::LogEntry const&),siri::dialogengine::Trace*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (siri::dialogengine::Trace::*)(siri::dialogengine::LogEntry const&),siri::dialogengine::Trace*,std::placeholders::__ph<1> const&>>,void ()(siri::dialogengine::LogEntry const&)>::target_type()
{
}

void siri::dialogengine::Trace::~Trace(siri::dialogengine::Trace *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v6[24];
  _BYTE *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 201))
  {
    v7 = 0;
    siri::dialogengine::Log::SetLoggerCallback((siri::dialogengine *)v6);
    v2 = v7;
    if (v7 == v6)
    {
      v3 = 4;
      v2 = v6;
    }
    else
    {
      if (!v7)
        goto LABEL_7;
      v3 = 5;
    }
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
LABEL_7:
  v4 = MEMORY[0x1E0DE4F48];
  v5 = *MEMORY[0x1E0DE4F48];
  *((_QWORD *)this + 26) = *MEMORY[0x1E0DE4F48];
  *(_QWORD *)((char *)this + *(_QWORD *)(v5 - 24) + 208) = *(_QWORD *)(v4 + 24);
  MEMORY[0x1C3B8D608]((char *)this + 216);
  std::ostream::~ostream();
  MEMORY[0x1C3B8D80C]((char *)this + 624);
  if (*((char *)this + 199) < 0)
    operator delete(*((void **)this + 22));
  if (*((char *)this + 175) < 0)
    operator delete(*((void **)this + 19));
  if (*((char *)this + 151) < 0)
    operator delete(*((void **)this + 16));
  if (*((char *)this + 127) < 0)
    operator delete(*((void **)this + 13));
  if (*((char *)this + 103) < 0)
    operator delete(*((void **)this + 10));
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void sub_1BF9A87C4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void siri::dialogengine::Trace::GetCatId(siri::dialogengine::Trace *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((_QWORD *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 2);
  }
}

double siri::dialogengine::Trace::GetUtcTime(siri::dialogengine::Trace *this)
{
  return *((double *)this + 3);
}

void siri::dialogengine::Trace::GetPath(siri::dialogengine::Trace *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 55) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 4), *((_QWORD *)this + 5));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 2);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 6);
  }
}

void siri::dialogengine::Trace::WriteExpandedParams(siri::dialogengine::Trace *this, siri::dialogengine::Context *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  int v10;
  char *v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t v14;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  _OWORD *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  const void **v31;
  _QWORD *v32;
  uint64_t *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t *v37;
  unint64_t *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  char *v42;
  char *v43;
  uint64_t i;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  char *v48;
  const void *v49[2];
  void *__p[2];
  _BYTE v51[16];
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  void *v55;
  _QWORD *v56;
  char v57;
  const void *v58;
  std::__shared_weak_count *v59;
  std::string v60;
  uint64_t *v61;
  _QWORD *v62[2];
  uint64_t *v63;
  _QWORD *v64[2];
  void **v65;
  void *v66;
  _QWORD *v67;
  char v68;
  __int128 v69;
  _QWORD v70[3];
  _OWORD v71[27];
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    v48 = "No context found during parameter expansion in trace";
LABEL_94:
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)v48, (const char *)a2);
    return;
  }
  v4 = *((_QWORD *)a2 + 63);
  v5 = (std::__shared_weak_count *)*((_QWORD *)a2 + 64);
  if (!v5)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  v8 = (unint64_t *)&v5->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
  {
LABEL_8:
    if (v4)
      goto LABEL_9;
    goto LABEL_93;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if (!v4)
  {
LABEL_93:
    v48 = "No file object found during parameter expansion in trace";
    goto LABEL_94;
  }
LABEL_9:
  siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)&v66, (siri::dialogengine::Context *)((char *)a2 + 8));
  v10 = (int)v66;
  siri::dialogengine::RequestInfo::~RequestInfo(&v66);
  if (v10 != 1)
  {
    v64[0] = 0;
    v64[1] = 0;
    v62[1] = 0;
    v63 = (uint64_t *)v64;
    v61 = (uint64_t *)v62;
    v62[0] = 0;
    std::map<std::string,std::shared_ptr<siri::dialogengine::Variable>>::map[abi:ne180100]((uint64_t)&v66, (const void ***)a2 + 65);
    v11 = (char *)v66;
    if (v66 != &v67)
    {
      do
      {
        if (v11[55] < 0)
          std::string::__init_copy_ctor_external(&v60, *((const std::string::value_type **)v11 + 4), *((_QWORD *)v11 + 5));
        else
          v60 = *(std::string *)(v11 + 32);
        v12 = (unint64_t *)*((_QWORD *)v11 + 8);
        v58 = (const void *)*((_QWORD *)v11 + 7);
        v59 = (std::__shared_weak_count *)v12;
        if (v12)
        {
          v13 = v12 + 1;
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
        siri::dialogengine::ResolveType(0, (uint64_t)a2, (uint64_t)&v60, 0, (uint64_t)&v55);
        v15 = v57;
        if (v57 < 0)
        {
          if (v56 != (_QWORD *)19)
            goto LABEL_29;
          v16 = (uint64_t *)v55;
        }
        else
        {
          if (v57 != 19)
            goto LABEL_29;
          v16 = (uint64_t *)&v55;
        }
        v17 = *v16;
        v18 = v16[1];
        v19 = *(uint64_t *)((char *)v16 + 11);
        v20 = v17 == 0x2E74696B69726973 && v18 == 0x7453656369766544;
        if (!v20 || v19 != 0x6574617453656369)
        {
LABEL_29:
          *((_QWORD *)&v53 + 1) = 0;
          v54 = 0;
          *(_QWORD *)&v53 = (char *)&v53 + 8;
          siri::dialogengine::CreateJSONStringVal((uint64_t)&v55, (uint64_t *)&v52);
          std::string::basic_string[abi:ne180100]<0>(__p, "type");
          v65 = __p;
          v22 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v53, (const void **)__p, (_OWORD **)&v65);
          std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)v22 + 56, &v52);
          if ((v51[7] & 0x80000000) != 0)
            operator delete(__p[0]);
          v23 = (std::__shared_weak_count *)*((_QWORD *)&v52 + 1);
          if (*((_QWORD *)&v52 + 1))
          {
            v24 = (unint64_t *)(*((_QWORD *)&v52 + 1) + 8);
            do
              v25 = __ldaxr(v24);
            while (__stlxr(v25 - 1, v24));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
              std::__shared_weak_count::__release_weak(v23);
            }
          }
          v26 = v59;
          v49[0] = v58;
          v49[1] = v59;
          if (v59)
          {
            v27 = (unint64_t *)&v59->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          siri::dialogengine::ExpandParameters((uint64_t)a2, v49, (const void **)&v55, (uint64_t **)&v53);
          if (v26)
          {
            v29 = (unint64_t *)&v26->__shared_owners_;
            do
              v30 = __ldaxr(v29);
            while (__stlxr(v30 - 1, v29));
            if (!v30)
            {
              ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
              std::__shared_weak_count::__release_weak(v26);
            }
          }
          siri::dialogengine::Context::GetGlobalParameters(a2, (uint64_t)__p);
          v31 = (const void **)__p[1];
          if (__p[1])
          {
            while (1)
            {
              if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)v51, (const void **)&v60.__r_.__value_.__l.__data_, v31 + 4))
              {
                if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)v51, v31 + 4, (const void **)&v60.__r_.__value_.__l.__data_))
                {
                  std::__tree<std::__value_type<std::string,siri::dialogengine::Parameter>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::Parameter>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::Parameter>>>::destroy((_QWORD *)__p[1]);
                  siri::dialogengine::CreateJSONObjectVal((const void ***)&v53, (uint64_t *)__p);
                  *(_QWORD *)&v52 = &v60;
                  v37 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v61, (const void **)&v60.__r_.__value_.__l.__data_, (__int128 **)&v52);
                  std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)(v37 + 7), (__int128 *)__p);
                  v34 = (std::__shared_weak_count *)__p[1];
                  if (__p[1])
                  {
                    v38 = (unint64_t *)((char *)__p[1] + 8);
                    do
                      v36 = __ldaxr(v38);
                    while (__stlxr(v36 - 1, v38));
                    goto LABEL_58;
                  }
                  goto LABEL_60;
                }
                ++v31;
              }
              v31 = (const void **)*v31;
              if (!v31)
              {
                v32 = __p[1];
                goto LABEL_51;
              }
            }
          }
          v32 = 0;
LABEL_51:
          std::__tree<std::__value_type<std::string,siri::dialogengine::Parameter>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::Parameter>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::Parameter>>>::destroy(v32);
          siri::dialogengine::CreateJSONObjectVal((const void ***)&v53, (uint64_t *)__p);
          *(_QWORD *)&v52 = &v60;
          v33 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v63, (const void **)&v60.__r_.__value_.__l.__data_, (__int128 **)&v52);
          std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)(v33 + 7), (__int128 *)__p);
          v34 = (std::__shared_weak_count *)__p[1];
          if (__p[1])
          {
            v35 = (unint64_t *)((char *)__p[1] + 8);
            do
              v36 = __ldaxr(v35);
            while (__stlxr(v36 - 1, v35));
LABEL_58:
            if (!v36)
            {
              ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
              std::__shared_weak_count::__release_weak(v34);
            }
          }
LABEL_60:
          std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*((_QWORD **)&v53 + 1));
          v15 = v57;
        }
        if (v15 < 0)
          operator delete(v55);
        v39 = v59;
        if (v59)
        {
          v40 = (unint64_t *)&v59->__shared_owners_;
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
        if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v60.__r_.__value_.__l.__data_);
        v42 = (char *)*((_QWORD *)v11 + 1);
        if (v42)
        {
          do
          {
            v43 = v42;
            v42 = *(char **)v42;
          }
          while (v42);
        }
        else
        {
          do
          {
            v43 = (char *)*((_QWORD *)v11 + 2);
            v20 = *(_QWORD *)v43 == (_QWORD)v11;
            v11 = v43;
          }
          while (!v20);
        }
        v11 = v43;
      }
      while (v43 != (char *)&v67);
    }
    std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(v67);
    siri::dialogengine::CreateJSONObjectVal((const void ***)&v61, (uint64_t *)&v53);
    std::string::basic_string[abi:ne180100]<0>(&v66, "expandedGlobalParameters");
    v69 = v53;
    v53 = 0uLL;
    siri::dialogengine::CreateJSONObjectVal((const void ***)&v63, (uint64_t *)__p);
    std::string::basic_string[abi:ne180100]<0>(v70, "expandedInputParameters");
    v71[0] = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100]((uint64_t)&v55, (const void **)&v66, 2);
    siri::dialogengine::ConstructJSONString(&v55, &v60);
    std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(v56);
    for (i = 0; i != -10; i -= 5)
    {
      std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)v71 + i * 8);
      if (SHIBYTE(v70[i + 2]) < 0)
        operator delete((void *)v70[i]);
    }
    v45 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
    if (*((_QWORD *)&v53 + 1))
    {
      v46 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v66, "expandedParams.json");
    siri::dialogengine::Trace::WriteStringToFile(this, (uint64_t)&v60, (uint64_t)this + 32, (uint64_t)&v66);
    if (v68 < 0)
      operator delete(v66);
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v60.__r_.__value_.__l.__data_);
    std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(v62[0]);
    std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(v64[0]);
  }
}

void sub_1BF9A8E90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,_QWORD *a41,uint64_t a42,uint64_t a43,_QWORD *a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (a52 < 0)
    operator delete(__p);
  if (a38 < 0)
    operator delete(a33);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(a41);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(a44);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ExpandParameters(uint64_t a1, const void **a2, const void **a3, uint64_t **a4)
{
  const void ***v8;
  uint64_t v9;
  std::string *v10;
  std::string *v11;
  _OWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _OWORD *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::string::size_type v20;
  _OWORD *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::string *v34;
  std::string *v35;
  BOOL v36;
  uint64_t *v37;
  void *v38;
  void *v39;
  _OWORD *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  _OWORD *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *size;
  unint64_t *v49;
  unint64_t v50;
  _QWORD v51[2];
  __int128 v52;
  void *v53[2];
  char v54;
  void *v55[2];
  char v56;
  std::string v57;
  __int128 v58;
  uint64_t v59;
  std::string v60;
  std::string v61;
  void *v62;
  char v63;
  void *v64;
  char v65;
  void *v66;
  char v67;
  void *v68;
  char v69;
  void *__p;
  char v71;
  std::string v72;
  std::string v73;
  void **v74;

  if (*a2)
  else
    v8 = 0;
  DefaultPropertyMap();
  v9 = qword_1EF581E28;
  if (!qword_1EF581E28)
  {
LABEL_9:
    (*(void (**)(std::string *__return_ptr, const void *, uint64_t, const void **))(*(_QWORD *)*a2 + 56))(&v60, *a2, a1, a3);
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v73, v60.__r_.__value_.__l.__data_, v60.__r_.__value_.__l.__size_);
    else
      v73 = v60;
    if (v71 < 0)
      operator delete(__p);
    if (v69 < 0)
      operator delete(v68);
    if (v67 < 0)
      operator delete(v66);
    if (v65 < 0)
      operator delete(v64);
    if (v63 < 0)
      operator delete(v62);
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v61.__r_.__value_.__l.__data_);
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v60.__r_.__value_.__l.__data_);
    (*(void (**)(std::string *__return_ptr, const void *, uint64_t, const void **))(*(_QWORD *)*a2 + 56))(&v60, *a2, a1, a3);
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v72, v61.__r_.__value_.__l.__data_, v61.__r_.__value_.__l.__size_);
    else
      v72 = v61;
    if (v71 < 0)
      operator delete(__p);
    if (v69 < 0)
      operator delete(v68);
    if (v67 < 0)
      operator delete(v66);
    if (v65 < 0)
      operator delete(v64);
    if (v63 < 0)
      operator delete(v62);
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v61.__r_.__value_.__l.__data_);
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v60.__r_.__value_.__l.__data_);
    if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v73.__r_.__value_.__l.__size_ != 8)
        goto LABEL_49;
      v10 = (std::string *)v73.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) != 8)
        goto LABEL_49;
      v10 = &v73;
    }
    if (v10->__r_.__value_.__r.__words[0] == 0x5D7463656A624F5BLL)
      goto LABEL_69;
LABEL_49:
    if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v72.__r_.__value_.__l.__size_ == 8)
      {
        v11 = (std::string *)v72.__r_.__value_.__r.__words[0];
LABEL_54:
        if (v11->__r_.__value_.__r.__words[0] != 0x5D7463656A624F5BLL)
          goto LABEL_55;
LABEL_69:
        std::map<std::string,std::shared_ptr<siri::dialogengine::Variable>>::map[abi:ne180100]((uint64_t)&v60, v8 + 9);
        v20 = v60.__r_.__value_.__r.__words[0];
        if ((std::string::size_type *)v60.__r_.__value_.__l.__data_ != &v60.__r_.__value_.__r.__words[1])
        {
          do
          {
            *((_QWORD *)&v58 + 1) = 0;
            v59 = 0;
            *(_QWORD *)&v58 = (char *)&v58 + 8;
            if (*(char *)(v20 + 55) < 0)
              std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)(v20 + 32), *(_QWORD *)(v20 + 40));
            else
              v57 = *(std::string *)(v20 + 32);
            siri::dialogengine::Variable::GetFullName(*(siri::dialogengine::Variable **)(v20 + 56), (uint64_t)v53);
            siri::dialogengine::ResolveType(0, a1, (uint64_t)v53, 0, (uint64_t)v55);
            if (v54 < 0)
              operator delete(v53[0]);
            siri::dialogengine::CreateJSONStringVal((uint64_t)v55, (uint64_t *)&v52);
            std::string::basic_string[abi:ne180100]<0>(v53, "type");
            v74 = v53;
            v21 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v58, (const void **)v53, (_OWORD **)&v74);
            std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)v21 + 56, &v52);
            if (v54 < 0)
              operator delete(v53[0]);
            v22 = (std::__shared_weak_count *)*((_QWORD *)&v52 + 1);
            if (*((_QWORD *)&v52 + 1))
            {
              v23 = (unint64_t *)(*((_QWORD *)&v52 + 1) + 8);
              do
                v24 = __ldaxr(v23);
              while (__stlxr(v24 - 1, v23));
              if (!v24)
              {
                ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
                std::__shared_weak_count::__release_weak(v22);
              }
            }
            v25 = *(std::__shared_weak_count **)(v20 + 64);
            v51[0] = *(_QWORD *)(v20 + 56);
            v51[1] = v25;
            if (v25)
            {
              p_shared_owners = (unint64_t *)&v25->__shared_owners_;
              do
                v27 = __ldxr(p_shared_owners);
              while (__stxr(v27 + 1, p_shared_owners));
            }
            siri::dialogengine::ExpandParameters(a1, v51, v55, &v58);
            if (v25)
            {
              v28 = (unint64_t *)&v25->__shared_owners_;
              do
                v29 = __ldaxr(v28);
              while (__stlxr(v29 - 1, v28));
              if (!v29)
              {
                ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
                std::__shared_weak_count::__release_weak(v25);
              }
            }
            siri::dialogengine::CreateJSONObjectVal((const void ***)&v58, (uint64_t *)v53);
            *(_QWORD *)&v52 = &v57;
            v30 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, (const void **)&v57.__r_.__value_.__l.__data_, (__int128 **)&v52);
            std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)(v30 + 7), (__int128 *)v53);
            v31 = (std::__shared_weak_count *)v53[1];
            if (v53[1])
            {
              v32 = (unint64_t *)((char *)v53[1] + 8);
              do
                v33 = __ldaxr(v32);
              while (__stlxr(v33 - 1, v32));
              if (!v33)
              {
                ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
                std::__shared_weak_count::__release_weak(v31);
              }
            }
            if (v56 < 0)
              operator delete(v55[0]);
            if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v57.__r_.__value_.__l.__data_);
            std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*((_QWORD **)&v58 + 1));
            v34 = *(std::string **)(v20 + 8);
            if (v34)
            {
              do
              {
                v35 = v34;
                v34 = (std::string *)v34->__r_.__value_.__r.__words[0];
              }
              while (v34);
            }
            else
            {
              do
              {
                v35 = *(std::string **)(v20 + 16);
                v36 = v35->__r_.__value_.__r.__words[0] == v20;
                v20 = (std::string::size_type)v35;
              }
              while (!v36);
            }
            v20 = (std::string::size_type)v35;
          }
          while (v35 != (std::string *)&v60.__r_.__value_.__r.__words[1]);
        }
        std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)v60.__r_.__value_.__l.__size_);
        goto LABEL_106;
      }
    }
    else if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) == 8)
    {
      v11 = &v72;
      goto LABEL_54;
    }
LABEL_55:
    siri::dialogengine::CreateJSONStringVal((uint64_t)&v73, (uint64_t *)&v58);
    std::string::basic_string[abi:ne180100]<0>(&v60, "print");
    v57.__r_.__value_.__r.__words[0] = (std::string::size_type)&v60;
    v12 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a4, (const void **)&v60.__r_.__value_.__l.__data_, &v57);
    std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)v12 + 56, &v58);
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v60.__r_.__value_.__l.__data_);
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v58 + 1);
    if (*((_QWORD *)&v58 + 1))
    {
      v14 = (unint64_t *)(*((_QWORD *)&v58 + 1) + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    siri::dialogengine::CreateJSONStringVal((uint64_t)&v72, (uint64_t *)&v58);
    std::string::basic_string[abi:ne180100]<0>(&v60, "speak");
    v57.__r_.__value_.__r.__words[0] = (std::string::size_type)&v60;
    v16 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a4, (const void **)&v60.__r_.__value_.__l.__data_, &v57);
    std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)v16 + 56, &v58);
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v60.__r_.__value_.__l.__data_);
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v58 + 1);
    if (*((_QWORD *)&v58 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v58 + 1) + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
LABEL_106:
    if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v72.__r_.__value_.__l.__data_);
    goto LABEL_172;
  }
  while (std::less<std::string>::operator()[abi:ne180100]((uint64_t)&unk_1EF581E30, a3, (const void **)(v9 + 32)))
  {
LABEL_8:
    v9 = *(_QWORD *)v9;
    if (!v9)
      goto LABEL_9;
  }
  if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)&unk_1EF581E30, (const void **)(v9 + 32), a3))
  {
    v9 += 8;
    goto LABEL_8;
  }
  DefaultPropertyMap();
  v60.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  v37 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&DefaultPropertyMap(void)::sDefaultPropertyMap, a3, (__int128 **)&v60);
  if (*((char *)v37 + 79) < 0)
    std::string::__init_copy_ctor_external(&v73, (const std::string::value_type *)v37[7], v37[8]);
  else
    v73 = *(std::string *)(v37 + 7);
  std::operator+<char>();
  siri::dialogengine::ConceptCallbacks::InvokeCallback(a1, (uint64_t)a3, (uint64_t)&v73, (uint64_t)v8, (uint64_t)&v60, &v57);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  if (v57.__r_.__value_.__r.__words[0])
  {
    if (v38)
    {
      v39 = v38;
      (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v38 + 48))(&v60);
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v72, v60.__r_.__value_.__l.__data_, v60.__r_.__value_.__l.__size_);
      else
        v72 = v60;
      siri::dialogengine::CreateJSONStringVal((uint64_t)&v72, (uint64_t *)v55);
      std::string::basic_string[abi:ne180100]<0>(&v58, "print");
      v53[0] = &v58;
      v40 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a4, (const void **)&v58, (_OWORD **)v53);
      std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)v40 + 56, (__int128 *)v55);
      if (SHIBYTE(v59) < 0)
        operator delete((void *)v58);
      v41 = (std::__shared_weak_count *)v55[1];
      if (v55[1])
      {
        v42 = (unint64_t *)((char *)v55[1] + 8);
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v72.__r_.__value_.__l.__data_);
      if (v71 < 0)
        operator delete(__p);
      if (v69 < 0)
        operator delete(v68);
      if (v67 < 0)
        operator delete(v66);
      if (v65 < 0)
        operator delete(v64);
      if (v63 < 0)
        operator delete(v62);
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v61.__r_.__value_.__l.__data_);
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v60.__r_.__value_.__l.__data_);
      (*(void (**)(std::string *__return_ptr, void *))(*(_QWORD *)v39 + 48))(&v60, v39);
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v72, v61.__r_.__value_.__l.__data_, v61.__r_.__value_.__l.__size_);
      else
        v72 = v61;
      siri::dialogengine::CreateJSONStringVal((uint64_t)&v72, (uint64_t *)v55);
      std::string::basic_string[abi:ne180100]<0>(&v58, "speak");
      v53[0] = &v58;
      v44 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a4, (const void **)&v58, (_OWORD **)v53);
      std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)v44 + 56, (__int128 *)v55);
      if (SHIBYTE(v59) < 0)
        operator delete((void *)v58);
      v45 = (std::__shared_weak_count *)v55[1];
      if (v55[1])
      {
        v46 = (unint64_t *)((char *)v55[1] + 8);
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v72.__r_.__value_.__l.__data_);
      if (v71 < 0)
        operator delete(__p);
      if (v69 < 0)
        operator delete(v68);
      if (v67 < 0)
        operator delete(v66);
      if (v65 < 0)
        operator delete(v64);
      if (v63 < 0)
        operator delete(v62);
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v61.__r_.__value_.__l.__data_);
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v60.__r_.__value_.__l.__data_);
    }
  }
  size = (std::__shared_weak_count *)v57.__r_.__value_.__l.__size_;
  if (v57.__r_.__value_.__l.__size_)
  {
    v49 = (unint64_t *)(v57.__r_.__value_.__l.__size_ + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
LABEL_172:
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
}

void sub_1BF9A99D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  uint64_t v43;

  siri::dialogengine::SpeakableString::~SpeakableString(&a38);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  if (*(char *)(v43 - 89) < 0)
    operator delete(*(void **)(v43 - 112));
  _Unwind_Resume(a1);
}

void siri::dialogengine::Trace::WriteStringToFile(siri::dialogengine::Trace *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const char *v7;
  void **v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  BOOL v13;
  void *__p[2];
  char v15;
  void *v16[2];
  char v17;
  uint64_t v18;
  _BYTE v19[408];
  _QWORD v20[20];

  v20[19] = *MEMORY[0x1E0C80C00];
  if (!siri::dialogengine::Trace::CreateFolders(a1))
    return;
  siri::dialogengine::JoinPath(a3, a4, (uint64_t)v16);
  if (v17 >= 0)
    v8 = v16;
  else
    v8 = (void **)v16[0];
  siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Write file to trace: %s", v7, v8);
  std::ofstream::basic_ofstream(&v18);
  v9 = *(char *)(a2 + 23);
  if (v9 >= 0)
    v10 = a2;
  else
    v10 = *(_QWORD *)a2;
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(a2 + 23);
  else
    v11 = *(_QWORD *)(a2 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, v10, v11);
  std::string::basic_string[abi:ne180100]<0>(__p, "\n");
  v12 = siri::dialogengine::StringEndsWith((std::string *)a2, (unsigned __int8 *)__p);
  v13 = v12;
  if ((v15 & 0x80000000) == 0)
  {
    if (v12)
      goto LABEL_16;
    goto LABEL_15;
  }
  operator delete(__p[0]);
  if (!v13)
  {
LABEL_15:
    LOBYTE(__p[0]) = 10;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)__p, 1);
  }
LABEL_16:
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)&v19[*(_QWORD *)(v18 - 24) - 8], *(_DWORD *)&v19[*(_QWORD *)(v18 - 24) + 24] | 4);
  v18 = *MEMORY[0x1E0DE4F48];
  *(_QWORD *)&v19[*(_QWORD *)(v18 - 24) - 8] = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 24);
  MEMORY[0x1C3B8D608](v19);
  std::ostream::~ostream();
  MEMORY[0x1C3B8D80C](v20);
  if (v17 < 0)
    operator delete(v16[0]);
}

void sub_1BF9A9D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23)
{
  if (a16 < 0)
    operator delete(__p);
  std::ofstream::~ofstream(&a23);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(a1);
}

void DefaultPropertyMap(void)
{
  unsigned __int8 v0;
  uint64_t i;
  const void *v2[6];
  _QWORD v3[6];
  _QWORD v4[6];
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[7];

  v7[6] = *MEMORY[0x1E0C80C00];
  {
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[20],0>(v2);
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[18],0>(v3);
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[30],char const(&)[6],0>(v4);
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[5],0>(v5);
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v6);
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[12],0>(v7);
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&DefaultPropertyMap(void)::sDefaultPropertyMap, v2, 6);
    for (i = 30; i != -6; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v2[i]);
    __cxa_atexit((void (*)(void *))std::map<std::string,std::string>::~map[abi:ne180100], &DefaultPropertyMap(void)::sDefaultPropertyMap, &dword_1BF794000);
  }
}

void sub_1BF9A9EA4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 240; i != -48; i -= 48)
    std::pair<std::string const,std::string>::~pair(v1 + i);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[20],0>(_QWORD *a1)
{
  _QWORD *v2;

  v2 = std::string::basic_string[abi:ne180100]<0>(a1, "dialog.Calendar");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "dateTimeDescriptive");
  return a1;
}

void sub_1BF9A9F38(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[18],0>(_QWORD *a1)
{
  _QWORD *v2;

  v2 = std::string::basic_string[abi:ne180100]<0>(a1, "dialog.CalendarRange");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "dateTimeRangeLong");
  return a1;
}

void sub_1BF9A9F90(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[30],char const(&)[6],0>(_QWORD *a1)
{
  _QWORD *v2;

  v2 = std::string::basic_string[abi:ne180100]<0>(a1, "dialog.ConvertibleMeasurement");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "value");
  return a1;
}

void sub_1BF9A9FE8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[5],0>(_QWORD *a1)
{
  _QWORD *v2;

  v2 = std::string::basic_string[abi:ne180100]<0>(a1, "dialog.LocationAddress");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "name");
  return a1;
}

void sub_1BF9AA040(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(_QWORD *a1)
{
  _QWORD *v2;

  v2 = std::string::basic_string[abi:ne180100]<0>(a1, "dialog.State");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "usageCount");
  return a1;
}

void sub_1BF9AA098(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[12],0>(_QWORD *a1)
{
  _QWORD *v2;

  v2 = std::string::basic_string[abi:ne180100]<0>(a1, "dialog.TimeZone");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "formatShort");
  return a1;
}

void sub_1BF9AA0F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::Trace::WriteRequestInfo(siri::dialogengine::Trace *this, const siri::dialogengine::Context *a2)
{
  std::string::size_type v4;
  siri::dialogengine *v5;
  siri::dialogengine *v6;
  _BOOL8 v7;
  siri::dialogengine *v8;
  _BOOL8 v9;
  _BOOL8 v10;
  siri::dialogengine *v11;
  _BOOL8 v12;
  _BOOL8 v13;
  siri::dialogengine *v14;
  _BOOL8 v15;
  morphun::util::VersionUtils *v16;
  char *LibraryVersion;
  uint64_t i;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t j;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  void *__p[2];
  char v70;
  uint64_t v71[3];
  void *v72[2];
  char v73;
  uint64_t v74[3];
  void *v75[2];
  char v76;
  uint64_t v77[3];
  const void **v78[3];
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  void *v83[2];
  char v84;
  std::string v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  void *v89[2];
  char v90;
  std::string v91;
  __int128 v92;
  __int128 v93;
  const void **v94[3];
  __int128 v95;
  __int128 v96;
  __int128 v97;
  std::string v98;
  __int128 v99;
  _QWORD v100[3];
  std::string v101;
  void **v102[3];
  __int128 v103;
  _QWORD v104[3];
  __int128 v105;
  _QWORD v106[3];
  __int128 v107;
  void *v108[2];
  uint64_t v109;
  __int128 v110;
  _QWORD v111[3];
  __int128 v112;
  uint64_t v113;
  __int128 v114;
  _QWORD v115[3];
  __int128 v116;
  _QWORD v117[3];
  __int128 v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  __int128 v124;
  _QWORD v125[3];
  __int128 v126;
  _QWORD v127[3];
  __int128 v128;
  _QWORD v129[3];
  __int128 v130;
  _QWORD v131[3];
  __int128 v132;
  _QWORD v133[3];
  __int128 v134;
  _QWORD v135[3];
  __int128 v136;
  uint64_t v137;

  v137 = *MEMORY[0x1E0C80C00];
  siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)&v119, (const siri::dialogengine::Context *)((char *)a2 + 8));
  v108[1] = 0;
  v108[0] = 0;
  v109 = 0;
  std::vector<siri::dialogengine::UpdatableDir>::__init_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>(v108, v120, v121, 0xAAAAAAAAAAAAAAABLL * ((v121 - v120) >> 5));
  siri::dialogengine::GetBaseDir((__int128 **)v108, &v101);
  v102[0] = v108;
  std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100](v102);
  siri::dialogengine::RequestInfo::~RequestInfo(&v119);
  if (*((char *)this + 23) < 0)
  {
    v4 = *((_QWORD *)this + 1);
    if (v4)
    {
      std::string::__init_copy_ctor_external(&v98, *(const std::string::value_type **)this, v4);
      goto LABEL_7;
    }
LABEL_6:
    std::string::basic_string[abi:ne180100]<0>(&v98, "");
    goto LABEL_7;
  }
  if (!*((_BYTE *)this + 23))
    goto LABEL_6;
  v98 = *(std::string *)this;
LABEL_7:
  siri::dialogengine::CreateJSONStringVal((uint64_t)&v98, (uint64_t *)&v99);
  std::string::basic_string[abi:ne180100]<0>(v108, "catId");
  v110 = v99;
  v99 = 0uLL;
  siri::dialogengine::CreateJSONDoubleVal(*((double *)this + 3), (uint64_t *)&v97);
  std::string::basic_string[abi:ne180100]<0>(v111, "utcTime");
  v112 = v97;
  v97 = 0uLL;
  if (a2)
    v5 = (siri::dialogengine *)*((unsigned int *)a2 + 234);
  else
    v5 = 0;
  siri::dialogengine::CreateJSONUintVal(v5, (uint64_t *)&v96);
  v6 = (siri::dialogengine *)std::string::basic_string[abi:ne180100]<0>(&v113, "randomSeed");
  v114 = v96;
  v96 = 0uLL;
  v7 = siri::dialogengine::AllowEmptyPhrases(v6);
  siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)v7, (uint64_t *)&v93);
  std::string::basic_string[abi:ne180100]<0>(&v119, "allowEmptyPhrases");
  v122 = v93;
  v93 = 0uLL;
  std::string::basic_string[abi:ne180100]<0>(v89, "");
  siri::dialogengine::UpdaterCategory((siri::dialogengine *)v89, &v91);
  siri::dialogengine::CreateJSONStringVal((uint64_t)&v91, (uint64_t *)&v92);
  v8 = (siri::dialogengine *)std::string::basic_string[abi:ne180100]<0>(&v123, "category");
  v124 = v92;
  v92 = 0uLL;
  v9 = siri::dialogengine::EnableDebug(v8);
  siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)v9, (uint64_t *)&v88);
  std::string::basic_string[abi:ne180100]<0>(v125, "debug");
  v126 = v88;
  v88 = 0uLL;
  v10 = siri::dialogengine::DisableUpdates((uint64_t)&v101);
  siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)v10, (uint64_t *)&v87);
  std::string::basic_string[abi:ne180100]<0>(v127, "disableUpdates");
  v128 = v87;
  v87 = 0uLL;
  std::string::basic_string[abi:ne180100]<0>(v83, "");
  siri::dialogengine::UpdaterHostname((siri::dialogengine *)v83, &v85);
  siri::dialogengine::CreateJSONStringVal((uint64_t)&v85, (uint64_t *)&v86);
  v11 = (siri::dialogengine *)std::string::basic_string[abi:ne180100]<0>(v129, "hostname");
  v130 = v86;
  v86 = 0uLL;
  v12 = siri::dialogengine::PreferSSML(v11);
  siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)v12, (uint64_t *)&v82);
  std::string::basic_string[abi:ne180100]<0>(v131, "preferSSML");
  v132 = v82;
  v82 = 0uLL;
  v13 = siri::dialogengine::PreferXMLFiles((uint64_t)&v101);
  siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)v13, (uint64_t *)&v81);
  v14 = (siri::dialogengine *)std::string::basic_string[abi:ne180100]<0>(v133, "preferXML");
  v134 = v81;
  v81 = 0uLL;
  v15 = siri::dialogengine::TraceEnabled(v14);
  siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)v15, (uint64_t *)&v80);
  std::string::basic_string[abi:ne180100]<0>(v135, "trace");
  v136 = v80;
  v80 = 0uLL;
  std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100]((uint64_t)v94, (const void **)&v119, 8);
  siri::dialogengine::CreateJSONObjectVal(v94, (uint64_t *)&v95);
  std::string::basic_string[abi:ne180100]<0>(v115, "defaults");
  v116 = v95;
  v95 = 0uLL;
  siri::dialogengine::BuildId((uint64_t)v75);
  siri::dialogengine::CreateJSONStringVal((uint64_t)v75, v77);
  std::string::basic_string[abi:ne180100]<0>(v102, "operatingSystem");
  v103 = *(_OWORD *)v77;
  *(_OWORD *)v77 = 0uLL;
  std::string::basic_string[abi:ne180100]<0>(v72, "3400.54.1");
  siri::dialogengine::CreateJSONStringVal((uint64_t)v72, v74);
  v16 = (morphun::util::VersionUtils *)std::string::basic_string[abi:ne180100]<0>(v104, "DialogEngine");
  v105 = *(_OWORD *)v74;
  *(_OWORD *)v74 = 0uLL;
  LibraryVersion = (char *)morphun::util::VersionUtils::getLibraryVersion(v16);
  std::string::basic_string[abi:ne180100]<0>(__p, LibraryVersion);
  siri::dialogengine::CreateJSONStringVal((uint64_t)__p, v71);
  std::string::basic_string[abi:ne180100]<0>(v106, "Morphun");
  v107 = *(_OWORD *)v71;
  *(_OWORD *)v71 = 0uLL;
  std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100]((uint64_t)v78, (const void **)v102, 3);
  siri::dialogengine::CreateJSONObjectVal(v78, (uint64_t *)&v79);
  std::string::basic_string[abi:ne180100]<0>(v117, "version");
  v118 = v79;
  v79 = 0uLL;
  std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100]((uint64_t)v100, (const void **)v108, 5);
  for (i = 0; i != -25; i -= 5)
  {
    std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v118 + i * 8);
    if (SHIBYTE(v117[i + 2]) < 0)
      operator delete((void *)v117[i]);
  }
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
  if (*((_QWORD *)&v79 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(v78[1]);
  for (j = 0; j != -15; j -= 5)
  {
    std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v108[j - 2]);
    if (SHIBYTE(v106[j + 2]) < 0)
      operator delete((void *)v106[j]);
  }
  v23 = (std::__shared_weak_count *)v71[1];
  if (v71[1])
  {
    v24 = (unint64_t *)(v71[1] + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (v70 < 0)
    operator delete(__p[0]);
  v26 = (std::__shared_weak_count *)v74[1];
  if (v74[1])
  {
    v27 = (unint64_t *)(v74[1] + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (v73 < 0)
    operator delete(v72[0]);
  v29 = (std::__shared_weak_count *)v77[1];
  if (v77[1])
  {
    v30 = (unint64_t *)(v77[1] + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (v76 < 0)
    operator delete(v75[0]);
  v32 = (std::__shared_weak_count *)*((_QWORD *)&v95 + 1);
  if (*((_QWORD *)&v95 + 1))
  {
    v33 = (unint64_t *)(*((_QWORD *)&v95 + 1) + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(v94[1]);
  v35 = 40;
  do
  {
    std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v118 + v35 * 8);
    if (SHIBYTE(v117[v35 + 2]) < 0)
      operator delete((void *)v117[v35]);
    v35 -= 5;
  }
  while (v35 * 8);
  v36 = (std::__shared_weak_count *)*((_QWORD *)&v80 + 1);
  if (*((_QWORD *)&v80 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v80 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = (std::__shared_weak_count *)*((_QWORD *)&v81 + 1);
  if (*((_QWORD *)&v81 + 1))
  {
    v40 = (unint64_t *)(*((_QWORD *)&v81 + 1) + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = (std::__shared_weak_count *)*((_QWORD *)&v82 + 1);
  if (*((_QWORD *)&v82 + 1))
  {
    v43 = (unint64_t *)(*((_QWORD *)&v82 + 1) + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = (std::__shared_weak_count *)*((_QWORD *)&v86 + 1);
  if (*((_QWORD *)&v86 + 1))
  {
    v46 = (unint64_t *)(*((_QWORD *)&v86 + 1) + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v85.__r_.__value_.__l.__data_);
  if (v84 < 0)
    operator delete(v83[0]);
  v48 = (std::__shared_weak_count *)*((_QWORD *)&v87 + 1);
  if (*((_QWORD *)&v87 + 1))
  {
    v49 = (unint64_t *)(*((_QWORD *)&v87 + 1) + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v51 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
  if (*((_QWORD *)&v88 + 1))
  {
    v52 = (unint64_t *)(*((_QWORD *)&v88 + 1) + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v54 = (std::__shared_weak_count *)*((_QWORD *)&v92 + 1);
  if (*((_QWORD *)&v92 + 1))
  {
    v55 = (unint64_t *)(*((_QWORD *)&v92 + 1) + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v91.__r_.__value_.__l.__data_);
  if (v90 < 0)
    operator delete(v89[0]);
  v57 = (std::__shared_weak_count *)*((_QWORD *)&v93 + 1);
  if (*((_QWORD *)&v93 + 1))
  {
    v58 = (unint64_t *)(*((_QWORD *)&v93 + 1) + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  v60 = (std::__shared_weak_count *)*((_QWORD *)&v96 + 1);
  if (*((_QWORD *)&v96 + 1))
  {
    v61 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v63 = (std::__shared_weak_count *)*((_QWORD *)&v97 + 1);
  if (*((_QWORD *)&v97 + 1))
  {
    v64 = (unint64_t *)(*((_QWORD *)&v97 + 1) + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v66 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
  if (*((_QWORD *)&v99 + 1))
  {
    v67 = (unint64_t *)(*((_QWORD *)&v99 + 1) + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v98.__r_.__value_.__l.__data_);
  siri::dialogengine::ConstructJSONString(v100, &v119);
  std::string::basic_string[abi:ne180100]<0>(v108, "info.json");
  siri::dialogengine::Trace::WriteStringToFile(this, (uint64_t)&v119, (uint64_t)this + 32, (uint64_t)v108);
  if (SHIBYTE(v109) < 0)
    operator delete(v108[0]);
  if (SHIBYTE(v121) < 0)
    operator delete(v119);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)v100[1]);
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v101.__r_.__value_.__l.__data_);
}

void sub_1BF9AAADC(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x257]) < 0)
    operator delete((void *)STACK[0x240]);
  _Unwind_Resume(a1);
}

void siri::dialogengine::Trace::WriteRequestJson(siri::dialogengine::Trace *a1, uint64_t a2)
{
  uint64_t v4;
  void *__p[2];
  char v6;

  v4 = (uint64_t)a1 + 32;
  std::string::basic_string[abi:ne180100]<0>(__p, "request.json");
  siri::dialogengine::Trace::WriteStringToFile(a1, a2, v4, (uint64_t)__p);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_1BF9AAFB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::Trace::CopyParamsFile(siri::dialogengine::Trace *a1, uint64_t a2)
{
  siri::dialogengine::Trace::CopyFile(a1, a2, (uint64_t)a1 + 176);
}

void siri::dialogengine::Trace::CopyFile(siri::dialogengine::Trace *a1, uint64_t a2, uint64_t a3)
{
  const char *v5;
  uint64_t v6;
  std::string *v7;
  std::string __p;
  std::string v9;

  if (siri::dialogengine::Trace::CreateFolders(a1))
  {
    siri::dialogengine::BaseName(a2, &__p);
    siri::dialogengine::JoinPath(a3, (uint64_t)&__p, (uint64_t)&v9);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (*(char *)(a2 + 23) >= 0)
      v6 = a2;
    else
      v6 = *(_QWORD *)a2;
    v7 = &v9;
    if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v7 = (std::string *)v9.__r_.__value_.__r.__words[0];
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Copy file to trace: [%s] -> [%s]", v5, v6, v7);
    siri::dialogengine::CopyFile((uint64_t *)a2, &v9);
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v9.__r_.__value_.__l.__data_);
  }
}

void sub_1BF9AB084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::Trace::CopyLocaleFile(siri::dialogengine::Trace *a1, uint64_t a2)
{
  siri::dialogengine::Trace::CopyFile(a1, a2, (uint64_t)a1 + 176);
}

void siri::dialogengine::Trace::WriteParamsXmlFile(siri::dialogengine::Trace *a1, uint64_t a2)
{
  uint64_t v4;
  void *__p[2];
  char v6;

  v4 = (uint64_t)a1 + 80;
  std::string::basic_string[abi:ne180100]<0>(__p, "_params.cat.xml");
  siri::dialogengine::Trace::WriteStringToFile(a1, a2, v4, (uint64_t)__p);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_1BF9AB124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::Trace::WriteLocaleXmlFile(siri::dialogengine::Trace *a1, uint64_t a2)
{
  uint64_t v4;
  void *__p[2];
  char v6;

  v4 = (uint64_t)a1 + 80;
  std::string::basic_string[abi:ne180100]<0>(__p, "locale.cat.xml");
  siri::dialogengine::Trace::WriteStringToFile(a1, a2, v4, (uint64_t)__p);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_1BF9AB1A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::Trace::WriteVisualXmlFile(siri::dialogengine::Trace *a1, uint64_t a2)
{
  uint64_t v4;
  void *__p[2];
  char v6;

  v4 = (uint64_t)a1 + 104;
  std::string::basic_string[abi:ne180100]<0>(__p, "visualcat.vcatxml");
  siri::dialogengine::Trace::WriteStringToFile(a1, a2, v4, (uint64_t)__p);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_1BF9AB22C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::Trace::CopySchemaFile(siri::dialogengine::Trace *a1, uint64_t a2)
{
  siri::dialogengine::Trace::CopyFile(a1, a2, (uint64_t)a1 + 152);
}

void siri::dialogengine::Trace::CopyMetadataFile(siri::dialogengine::Trace *a1, const std::string *a2)
{
  const char *v4;
  int v5;
  void *__p[2];
  char v7;
  _BYTE v8[32];
  std::string __str;

  memset(&__str, 0, sizeof(__str));
  std::string::basic_string[abi:ne180100]<0>(__p, "metadata");
  siri::dialogengine::RelativePathFromFolder((uint64_t)a2, (unsigned __int8 **)__p, (uint64_t)v8);
  v5 = v8[0];
  __str = *(std::string *)&v8[8];
  v8[31] = 0;
  v8[8] = 0;
  if (v7 < 0)
  {
    operator delete(__p[0]);
    if (v5)
      goto LABEL_6;
  }
  else if (v8[0])
  {
    goto LABEL_6;
  }
  siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Loading a metadata file from a path that doesn't include 'metadata'", v4);
  std::string::operator=(&__str, a2);
LABEL_6:
  siri::dialogengine::DirName(&__str, (uint64_t)__p);
  siri::dialogengine::JoinPath((uint64_t)a1 + 128, (uint64_t)__p, (uint64_t)v8);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  __str = *(std::string *)v8;
  v8[23] = 0;
  v8[0] = 0;
  if (v7 < 0)
    operator delete(__p[0]);
  siri::dialogengine::Trace::CopyFile(a1, (uint64_t)a2, (uint64_t)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1BF9AB36C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a15 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::Trace::WriteDialogStateToFile(siri::dialogengine::Trace *a1, siri::dialogengine::Context *a2, int a3)
{
  char *v6;
  std::string *v7;
  uint64_t v8;
  __int128 v9;
  const char *v10;
  void **v11;
  std::string *v12;
  __int128 v13;
  const char *v14;
  void **v15;
  std::string v16;
  std::string v17;
  void *__p[2];
  int64_t v19;
  void *v20[2];
  char v21;
  void *v22;
  char v23;

  if (siri::dialogengine::Trace::CreateFolders(a1))
  {
    if (a3)
      v6 = "-after";
    else
      v6 = "-before";
    std::string::basic_string[abi:ne180100]<0>(&v22, v6);
    std::operator+<char>();
    v7 = std::string::append(&v17, ".xml");
    v8 = (uint64_t)a1 + 32;
    v9 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v19 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v9;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::JoinPath(v8, (uint64_t)__p, (uint64_t)v20);
    if (SHIBYTE(v19) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
    v11 = v20;
    if (v21 < 0)
      v11 = (void **)v20[0];
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Write DialogStateUseCase to trace: %s", v10, v11);
    siri::dialogengine::WriteDialogStateUseCaseToFile(a2, (const char *)v20);
    std::operator+<char>();
    v12 = std::string::append(&v16, ".xml");
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::JoinPath(v8, (uint64_t)&v17, (uint64_t)__p);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
    v15 = __p;
    if (v19 < 0)
      v15 = (void **)__p[0];
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Write DialogStateFamily to trace: %s", v14, v15);
    siri::dialogengine::WriteDialogStateFamilyToFile(a2, (const char *)__p);
    if (SHIBYTE(v19) < 0)
      operator delete(__p[0]);
    if (v21 < 0)
      operator delete(v20[0]);
    if (v23 < 0)
      operator delete(v22);
  }
}

void sub_1BF9AB574(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (*(char *)(v28 - 57) < 0)
    operator delete(*(void **)(v28 - 80));
  if (*(char *)(v28 - 33) < 0)
    operator delete(*(void **)(v28 - 56));
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::Trace::WriteResponseJson(siri::dialogengine::Trace *a1, uint64_t a2)
{
  uint64_t v4;
  void *__p[2];
  char v6;

  v4 = (uint64_t)a1 + 32;
  std::string::basic_string[abi:ne180100]<0>(__p, "response.json");
  siri::dialogengine::Trace::WriteStringToFile(a1, a2, v4, (uint64_t)__p);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_1BF9AB684(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::Trace::WriteRunScript(siri::dialogengine::Trace *this, const siri::dialogengine::Context *a2)
{
  unsigned int v4;
  std::string v5;
  void *__p[2];
  char v7;
  std::string v8;
  std::string v9;

  std::string::basic_string[abi:ne180100]<0>(&v9, "#!/bin/bash\ntrace_dir=\"$( cd \"$( dirname \"$0\")\" >/dev/null 2>&1 && pwd)\"\nexport PATH=${PATH}:/System/Library/PrivateFrameworks/DialogEngine.framework\ncmd=\"catutil execute --json ${trace_dir}/request.json --templateDir ${trace_dir}/Templates --randomSeed RANDOMSEED\"\necho $cmd\n$cmd\n");
  std::string::basic_string[abi:ne180100]<0>(__p, "RANDOMSEED");
  if (a2)
    v4 = *((_DWORD *)a2 + 234);
  else
    v4 = 0;
  std::to_string(&v5, v4);
  siri::dialogengine::StringReplace((uint64_t)&v9, (char *)__p, (uint64_t)&v5, 0, &v8);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  v9 = v8;
  *((_BYTE *)&v8.__r_.__value_.__s + 23) = 0;
  v8.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(&v8, "run.sh");
  siri::dialogengine::Trace::WriteStringToFile(this, (uint64_t)&v9, (uint64_t)this + 32, (uint64_t)&v8);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(__p, "run.sh");
  siri::dialogengine::JoinPath((uint64_t)this + 32, (uint64_t)__p, (uint64_t)&v8);
  siri::dialogengine::AddPermissions((const char *)&v8, 73);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  if (v7 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
}

void sub_1BF9AB7F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (a27 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v27 - 25) < 0)
    operator delete(*(void **)(v27 - 48));
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::WriteParametersBinary(siri::dialogengine::File *this, uint64_t a2, siri::dialogengine::File *a3)
{
  uint64_t v4;
  char *v7;
  _BOOL8 v8;
  std::string::size_type size;
  _BOOL4 v10;
  uint64_t (*v11)();
  const char *v12;
  const siri::dialogengine::CatBinary::cat *v13;
  std::string __p[7];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18[5];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  std::string v23;

  if (!this)
  {
    v7 = "File cannot be null, not writing.";
LABEL_9:
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)v7, (const char *)a2);
    return 0;
  }
  v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
  {
    v7 = "Path cannot be empty, not writing.";
    goto LABEL_9;
  }
  if (*((char *)this + 55) < 0)
    std::string::__init_copy_ctor_external(__p, *((const std::string::value_type **)this + 4), *((_QWORD *)this + 5));
  else
    __p[0] = *(std::string *)((char *)this + 32);
  size = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p[0].__r_.__value_.__l.__size_;
  if (size)
  {
    v10 = 0;
    if ((*((_BYTE *)&__p[0].__r_.__value_.__s + 23) & 0x80) == 0)
      goto LABEL_15;
LABEL_23:
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if (v10)
      goto LABEL_16;
    goto LABEL_24;
  }
  siri::dialogengine::File::GetMetadata(this, (uint64_t)&v23);
  if (v23.__r_.__value_.__r.__words[2])
  {
    v10 = 0;
  }
  else
  {
    v19 = 0;
    v20 = 0;
    v21 = 0;
    std::vector<siri::dialogengine::Parameter>::__init_with_size[abi:ne180100]<siri::dialogengine::Parameter*,siri::dialogengine::Parameter*>(&v19, *((_QWORD *)this + 22), *((_QWORD *)this + 23), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*((_QWORD *)this + 23) - *((_QWORD *)this + 22)) >> 4));
    v10 = v19 == v20;
    v22 = (void **)&v19;
    std::vector<siri::dialogengine::Parameter>::__destroy_vector::operator()[abi:ne180100](&v22);
  }
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy((_QWORD *)v23.__r_.__value_.__l.__size_);
  if ((*((_BYTE *)&__p[0].__r_.__value_.__s + 23) & 0x80) != 0)
    goto LABEL_23;
LABEL_15:
  if (v10)
  {
LABEL_16:
    std::operator+<char>();
    siri::dialogengine::Log::Debug((siri::dialogengine *)__p);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    return 1;
  }
LABEL_24:
  v11 = google::protobuf::SetLogHandler((uint64_t (*)())siri::dialogengine::ScopedLogHandler::logHandler);
  siri::dialogengine::CatBinary::cat::cat((siri::dialogengine::CatBinary::cat *)__p);
  LODWORD(__p[0].__r_.__value_.__r.__words[2]) |= 1u;
  std::string::basic_string[abi:ne180100]<0>(&v23, "CATPB");
  google::protobuf::internal::ArenaStringPtr::SetNoArena(&v16, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v23);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (*((char *)this + 175) < 0)
    std::string::__init_copy_ctor_external(&v23, *((const std::string::value_type **)this + 19), *((_QWORD *)this + 20));
  else
    v23 = *(std::string *)((char *)this + 152);
  LODWORD(__p[0].__r_.__value_.__r.__words[2]) |= 2u;
  google::protobuf::internal::ArenaStringPtr::SetNoArena(&v17, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v23);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (*((char *)this + 127) < 0)
    std::string::__init_copy_ctor_external(&v23, *((const std::string::value_type **)this + 13), *((_QWORD *)this + 14));
  else
    v23 = *(std::string *)((char *)this + 104);
  LODWORD(__p[0].__r_.__value_.__r.__words[2]) |= 4u;
  google::protobuf::internal::ArenaStringPtr::SetNoArena(v18, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v23);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if ((siri::dialogengine::AddMetaAndParameters((siri::dialogengine *)__p, this, a3) & 1) != 0)
  {
    if (*(char *)(a2 + 23) >= 0)
      v13 = (const siri::dialogengine::CatBinary::cat *)a2;
    else
      v13 = *(const siri::dialogengine::CatBinary::cat **)a2;
    v8 = siri::dialogengine::SaveProtobuf((siri::dialogengine *)__p, v13, v12);
  }
  else
  {
    v8 = 0;
  }
  siri::dialogengine::CatBinary::cat::~cat((siri::dialogengine::CatBinary::cat *)__p);
  google::protobuf::SetLogHandler(v11);
  return v8;
}

void sub_1BF9ABB5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(*(_QWORD **)(v14 - 72));
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::AddMetaAndParameters(siri::dialogengine *this, siri::dialogengine::CatBinary::cat *a2, siri::dialogengine::File *a3)
{
  int v3;
  std::string *v5;
  _QWORD **v6;
  _QWORD *v7;
  const void **v8;
  uint64_t v9;
  _QWORD *v10;
  std::string::size_type size;
  char v12;
  unsigned __int8 *v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  BOOL v25;
  _BOOL4 v26;
  const void *v27;
  int *v28;
  uint64_t v29;
  int v30;
  siri::dialogengine::CatBinary::metadata *v31;
  uint64_t v32;
  uint64_t v33;
  std::string *v34;
  const std::string *v35;
  std::string *v36;
  std::string **v37;
  uint64_t *v38;
  _QWORD *v39;
  _QWORD *v40;
  BOOL v41;
  _QWORD *v42;
  _QWORD **v43;
  const char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  int *v48;
  uint64_t v49;
  int v50;
  siri::dialogengine::CatBinary::parameter *v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  char *v56;
  __int128 v57;
  std::string::size_type v58;
  __int128 v59;
  char *v60;
  __int128 v61;
  std::string::size_type v62;
  __int128 v63;
  char *v64;
  __int128 v65;
  std::string::size_type v66;
  __int128 v67;
  char *v68;
  __int128 v69;
  std::string::size_type v70;
  __int128 v71;
  char *v72;
  __int128 v73;
  std::string::size_type v74;
  __int128 v75;
  char *v76;
  siri::dialogengine::CatBinary::cat *v78;
  void *v79[2];
  char v80;
  void *__p[2];
  unsigned __int8 v82;
  void *v83[2];
  char v84;
  std::string v85;
  _QWORD **v86;
  _QWORD *v87[2];

  v3 = (int)a3;
  v78 = a2;
  siri::dialogengine::File::GetMetadata(a2, (uint64_t)&v86);
  v6 = v86;
  if (v86 != v87)
  {
    while (1)
    {
      v7 = v6[7];
      if (v7 != v6 + 8)
        break;
LABEL_79:
      v42 = v6[1];
      if (v42)
      {
        do
        {
          v43 = (_QWORD **)v42;
          v42 = (_QWORD *)*v42;
        }
        while (v42);
      }
      else
      {
        do
        {
          v43 = (_QWORD **)v6[2];
          v41 = *v43 == v6;
          v6 = v43;
        }
        while (!v41);
      }
      v6 = v43;
      if (v43 == v87)
        goto LABEL_85;
    }
    v8 = (const void **)(v6 + 4);
    while (1)
    {
      if (!v3)
        goto LABEL_56;
      std::string::basic_string[abi:ne180100]<0>(v83, "description");
      siri::dialogengine::StringToLower((uint64_t)v83, (uint64_t)&v85);
      v9 = *((unsigned __int8 *)v6 + 55);
      if ((v9 & 0x80u) == 0)
        v10 = (_QWORD *)*((unsigned __int8 *)v6 + 55);
      else
        v10 = v6[5];
      size = HIBYTE(v85.__r_.__value_.__r.__words[2]);
      v12 = HIBYTE(v85.__r_.__value_.__r.__words[2]);
      if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v85.__r_.__value_.__l.__size_;
      if (v10 == (_QWORD *)size)
      {
        if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v5 = &v85;
        else
          v5 = (std::string *)v85.__r_.__value_.__r.__words[0];
        if ((v9 & 0x80) != 0)
        {
          if (!memcmp(*v8, v5, (size_t)v6[5]))
          {
LABEL_41:
            v26 = 1;
            if ((v12 & 0x80) == 0)
              goto LABEL_50;
LABEL_49:
            operator delete(v85.__r_.__value_.__l.__data_);
            goto LABEL_50;
          }
        }
        else
        {
          if (!*((_BYTE *)v6 + 55))
            goto LABEL_41;
          v13 = (unsigned __int8 *)(v6 + 4);
          while (*v13 == v5->__r_.__value_.__s.__data_[0])
          {
            ++v13;
            v5 = (std::string *)((char *)v5 + 1);
            if (!--v9)
              goto LABEL_41;
          }
        }
      }
      std::string::basic_string[abi:ne180100]<0>(v79, "excludeIfSet");
      siri::dialogengine::StringToLower((uint64_t)v79, (uint64_t)__p);
      v14 = *((unsigned __int8 *)v6 + 55);
      if ((v14 & 0x80u) == 0)
        v15 = (_QWORD *)*((unsigned __int8 *)v6 + 55);
      else
        v15 = v6[5];
      v16 = v82;
      v17 = (char)v82;
      if ((v82 & 0x80u) != 0)
        v16 = (unint64_t)__p[1];
      if (v15 != (_QWORD *)v16)
        break;
      if ((v82 & 0x80u) == 0)
        v5 = (std::string *)__p;
      else
        v5 = (std::string *)__p[0];
      if ((v14 & 0x80) != 0)
      {
        v26 = memcmp(*v8, v5, (size_t)v6[5]) == 0;
LABEL_44:
        if ((v17 & 0x80000000) == 0)
          goto LABEL_46;
LABEL_45:
        operator delete(__p[0]);
        goto LABEL_46;
      }
      if (*((_BYTE *)v6 + 55))
      {
        v18 = v14 - 1;
        v19 = (unsigned __int8 *)(v6 + 4);
        do
        {
          v21 = *v19++;
          v20 = v21;
          v23 = v5->__r_.__value_.__s.__data_[0];
          v5 = (std::string *)((char *)v5 + 1);
          v22 = v23;
          v25 = v18-- != 0;
          v26 = v20 == v22;
        }
        while (v20 == v22 && v25);
        goto LABEL_44;
      }
      v26 = 1;
      if ((char)v82 < 0)
        goto LABEL_45;
LABEL_46:
      if (v80 < 0)
        operator delete(v79[0]);
      if ((*((_BYTE *)&v85.__r_.__value_.__s + 23) & 0x80) != 0)
        goto LABEL_49;
LABEL_50:
      if (v84 < 0)
      {
        operator delete(v83[0]);
        if (v26)
        {
LABEL_52:
          v27 = v6 + 4;
          if (*((char *)v6 + 55) < 0)
            v27 = *v8;
          siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Omitting meta element(s) with name '%s'", (const char *)v5, v27, v78);
          goto LABEL_70;
        }
      }
      else if (v26)
      {
        goto LABEL_52;
      }
LABEL_56:
      v28 = (int *)*((_QWORD *)this + 5);
      if (!v28)
      {
        v30 = *((_DWORD *)this + 9);
        goto LABEL_62;
      }
      v29 = *((int *)this + 8);
      v30 = *v28;
      if ((int)v29 >= *v28)
      {
        if (v30 == *((_DWORD *)this + 9))
        {
LABEL_62:
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 6, v30 + 1);
          v28 = (int *)*((_QWORD *)this + 5);
          v30 = *v28;
        }
        *v28 = v30 + 1;
        v31 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::metadata>(*((google::protobuf::internal::ArenaImpl **)this + 3));
        v32 = *((_QWORD *)this + 5);
        v33 = *((int *)this + 8);
        *((_DWORD *)this + 8) = v33 + 1;
        *(_QWORD *)(v32 + 8 * v33 + 8) = v31;
        if (!v31)
        {
LABEL_182:
          siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Can't create metadata buffer.", (const char *)v5);
          std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(v87[0]);
          return 0;
        }
        goto LABEL_64;
      }
      *((_DWORD *)this + 8) = v29 + 1;
      v31 = *(siri::dialogengine::CatBinary::metadata **)&v28[2 * v29 + 2];
      if (!v31)
        goto LABEL_182;
LABEL_64:
      v34 = (std::string *)*((_QWORD *)v31 + 3);
      *((_DWORD *)v31 + 4) |= 1u;
      if (v34 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v31 + 3, (uint64_t)(v6 + 4));
      else
        std::string::operator=(v34, (const std::string *)(v6 + 4));
      v35 = (const std::string *)(v7 + 4);
      v38 = (uint64_t *)*((_QWORD *)v31 + 4);
      v37 = (std::string **)((char *)v31 + 32);
      v36 = (std::string *)v38;
      *((_DWORD *)v37 - 4) |= 2u;
      if (v38 == &google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v37, (uint64_t)v35);
      else
        std::string::operator=(v36, v35);
LABEL_70:
      v39 = (_QWORD *)v7[1];
      if (v39)
      {
        do
        {
          v40 = v39;
          v39 = (_QWORD *)*v39;
        }
        while (v39);
      }
      else
      {
        do
        {
          v40 = (_QWORD *)v7[2];
          v41 = *v40 == (_QWORD)v7;
          v7 = v40;
        }
        while (!v41);
      }
      v7 = v40;
      if (v40 == v6 + 8)
        goto LABEL_79;
    }
    v26 = 0;
    if (((char)v82 & 0x80000000) == 0)
      goto LABEL_46;
    goto LABEL_45;
  }
LABEL_85:
  std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(v87[0]);
  v86 = 0;
  v87[0] = 0;
  v87[1] = 0;
  std::vector<siri::dialogengine::Parameter>::__init_with_size[abi:ne180100]<siri::dialogengine::Parameter*,siri::dialogengine::Parameter*>(&v86, *((_QWORD *)v78 + 22), *((_QWORD *)v78 + 23), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*((_QWORD *)v78 + 23) - *((_QWORD *)v78 + 22)) >> 4));
  v45 = (char *)v87[0];
  v46 = 1;
  if (v86 == v87[0])
    goto LABEL_184;
  v47 = (char *)v86 + 207;
  while (1)
  {
    v48 = (int *)*((_QWORD *)this + 8);
    if (!v48)
    {
      v50 = *((_DWORD *)this + 15);
      goto LABEL_93;
    }
    v49 = *((int *)this + 14);
    v50 = *v48;
    if ((int)v49 >= *v48)
      break;
    *((_DWORD *)this + 14) = v49 + 1;
    v51 = *(siri::dialogengine::CatBinary::parameter **)&v48[2 * v49 + 2];
    if (!v51)
      goto LABEL_183;
LABEL_95:
    if (*(v47 - 176) < 0)
    {
      std::string::__init_copy_ctor_external(&v85, *(const std::string::value_type **)(v47 - 199), *(_QWORD *)(v47 - 191));
    }
    else
    {
      v54 = *(_OWORD *)(v47 - 199);
      v85.__r_.__value_.__r.__words[2] = *(_QWORD *)(v47 - 183);
      *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v54;
    }
    *((_DWORD *)v51 + 4) |= 1u;
    google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v51 + 3, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v85);
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v85.__r_.__value_.__l.__data_);
    if (*(v47 - 152) < 0)
    {
      std::string::__init_copy_ctor_external(&v85, *(const std::string::value_type **)(v47 - 175), *(_QWORD *)(v47 - 167));
    }
    else
    {
      v55 = *(_OWORD *)(v47 - 175);
      v85.__r_.__value_.__r.__words[2] = *(_QWORD *)(v47 - 159);
      *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v55;
    }
    *((_DWORD *)v51 + 4) |= 2u;
    google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v51 + 4, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v85);
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v85.__r_.__value_.__l.__data_);
    v56 = v47 - 151;
    if (*(v47 - 128) < 0)
    {
      std::string::__init_copy_ctor_external(&v85, *(const std::string::value_type **)(v47 - 151), *(_QWORD *)(v47 - 143));
    }
    else
    {
      v57 = *(_OWORD *)v56;
      v85.__r_.__value_.__r.__words[2] = *(_QWORD *)(v47 - 135);
      *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v57;
    }
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    {
      v58 = v85.__r_.__value_.__l.__size_;
      operator delete(v85.__r_.__value_.__l.__data_);
      if (!v58)
        goto LABEL_117;
    }
    else if (!*((_BYTE *)&v85.__r_.__value_.__s + 23))
    {
      goto LABEL_117;
    }
    if (*(v47 - 128) < 0)
    {
      std::string::__init_copy_ctor_external(&v85, *(const std::string::value_type **)(v47 - 151), *(_QWORD *)(v47 - 143));
    }
    else
    {
      v59 = *(_OWORD *)v56;
      v85.__r_.__value_.__r.__words[2] = *(_QWORD *)(v47 - 135);
      *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v59;
    }
    *((_DWORD *)v51 + 4) |= 4u;
    google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v51 + 5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v85);
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v85.__r_.__value_.__l.__data_);
LABEL_117:
    v60 = v47 - 47;
    if (*(v47 - 24) < 0)
    {
      std::string::__init_copy_ctor_external(&v85, *(const std::string::value_type **)(v47 - 47), *(_QWORD *)(v47 - 39));
    }
    else
    {
      v61 = *(_OWORD *)v60;
      v85.__r_.__value_.__r.__words[2] = *(_QWORD *)(v47 - 31);
      *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v61;
    }
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    {
      v62 = v85.__r_.__value_.__l.__size_;
      operator delete(v85.__r_.__value_.__l.__data_);
      if (!v62)
        goto LABEL_128;
    }
    else if (!*((_BYTE *)&v85.__r_.__value_.__s + 23))
    {
      goto LABEL_128;
    }
    if (*(v47 - 24) < 0)
    {
      std::string::__init_copy_ctor_external(&v85, *(const std::string::value_type **)(v47 - 47), *(_QWORD *)(v47 - 39));
    }
    else
    {
      v63 = *(_OWORD *)v60;
      v85.__r_.__value_.__r.__words[2] = *(_QWORD *)(v47 - 31);
      *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v63;
    }
    *((_DWORD *)v51 + 4) |= 8u;
    google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v51 + 6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v85);
    if ((SHIBYTE(v85.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_128:
      if ((v3 & 1) != 0)
        goto LABEL_161;
      goto LABEL_129;
    }
    operator delete(v85.__r_.__value_.__l.__data_);
    if ((v3 & 1) != 0)
      goto LABEL_161;
LABEL_129:
    v64 = v47 - 127;
    if (*(v47 - 104) < 0)
    {
      std::string::__init_copy_ctor_external(&v85, *(const std::string::value_type **)(v47 - 127), *(_QWORD *)(v47 - 119));
    }
    else
    {
      v65 = *(_OWORD *)v64;
      v85.__r_.__value_.__r.__words[2] = *(_QWORD *)(v47 - 111);
      *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v65;
    }
    if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v66 = HIBYTE(v85.__r_.__value_.__r.__words[2]);
    else
      v66 = v85.__r_.__value_.__l.__size_;
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v85.__r_.__value_.__l.__data_);
      if (!v66)
        goto LABEL_146;
    }
    else if (!v66)
    {
      goto LABEL_146;
    }
    if (*(v47 - 104) < 0)
    {
      std::string::__init_copy_ctor_external(&v85, *(const std::string::value_type **)(v47 - 127), *(_QWORD *)(v47 - 119));
    }
    else
    {
      v67 = *(_OWORD *)v64;
      v85.__r_.__value_.__r.__words[2] = *(_QWORD *)(v47 - 111);
      *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v67;
    }
    *((_DWORD *)v51 + 4) |= 0x10u;
    google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v51 + 7, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v85);
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v85.__r_.__value_.__l.__data_);
LABEL_146:
    v68 = v47 - 79;
    if (*(v47 - 56) < 0)
    {
      std::string::__init_copy_ctor_external(&v85, *(const std::string::value_type **)(v47 - 79), *(_QWORD *)(v47 - 71));
    }
    else
    {
      v69 = *(_OWORD *)v68;
      v85.__r_.__value_.__r.__words[2] = *(_QWORD *)(v47 - 63);
      *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v69;
    }
    if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v70 = HIBYTE(v85.__r_.__value_.__r.__words[2]);
    else
      v70 = v85.__r_.__value_.__l.__size_;
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v85.__r_.__value_.__l.__data_);
      if (!v70)
        goto LABEL_161;
    }
    else if (!v70)
    {
      goto LABEL_161;
    }
    if (*(v47 - 56) < 0)
    {
      std::string::__init_copy_ctor_external(&v85, *(const std::string::value_type **)(v47 - 79), *(_QWORD *)(v47 - 71));
    }
    else
    {
      v71 = *(_OWORD *)v68;
      v85.__r_.__value_.__r.__words[2] = *(_QWORD *)(v47 - 63);
      *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v71;
    }
    *((_DWORD *)v51 + 4) |= 0x20u;
    google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v51 + 8, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v85);
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v85.__r_.__value_.__l.__data_);
LABEL_161:
    v72 = v47 - 23;
    if (*v47 < 0)
    {
      std::string::__init_copy_ctor_external(&v85, *(const std::string::value_type **)(v47 - 23), *(_QWORD *)(v47 - 15));
    }
    else
    {
      v73 = *(_OWORD *)v72;
      v85.__r_.__value_.__r.__words[2] = *(_QWORD *)(v47 - 7);
      *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v73;
    }
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    {
      v74 = v85.__r_.__value_.__l.__size_;
      operator delete(v85.__r_.__value_.__l.__data_);
      if (!v74)
        goto LABEL_172;
    }
    else if (!*((_BYTE *)&v85.__r_.__value_.__s + 23))
    {
      goto LABEL_172;
    }
    if (*v47 < 0)
    {
      std::string::__init_copy_ctor_external(&v85, *(const std::string::value_type **)(v47 - 23), *(_QWORD *)(v47 - 15));
    }
    else
    {
      v75 = *(_OWORD *)v72;
      v85.__r_.__value_.__r.__words[2] = *(_QWORD *)(v47 - 7);
      *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v75;
    }
    *((_DWORD *)v51 + 4) |= 0x40u;
    google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v51 + 9, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v85);
    if ((SHIBYTE(v85.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_172:
      if ((v3 & 1) == 0)
        goto LABEL_173;
      goto LABEL_176;
    }
    operator delete(v85.__r_.__value_.__l.__data_);
    if ((v3 & 1) == 0)
    {
LABEL_173:
      if (!*(v47 - 54))
      {
        *((_DWORD *)v51 + 4) |= 0x100u;
        *((_BYTE *)v51 + 81) = 0;
      }
    }
LABEL_176:
    if (*(v47 - 55))
    {
      *((_DWORD *)v51 + 4) |= 0x80u;
      *((_BYTE *)v51 + 80) = 1;
    }
    if (!*(v47 - 53))
    {
      *((_DWORD *)v51 + 4) |= 0x200u;
      *((_BYTE *)v51 + 82) = 0;
    }
    v76 = v47 + 129;
    v47 += 336;
    if (v76 == v45)
    {
      v46 = 1;
      goto LABEL_184;
    }
  }
  if (v50 != *((_DWORD *)this + 15))
    goto LABEL_94;
LABEL_93:
  google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 12, v50 + 1);
  v48 = (int *)*((_QWORD *)this + 8);
  v50 = *v48;
LABEL_94:
  *v48 = v50 + 1;
  v51 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::parameter>(*((google::protobuf::internal::ArenaImpl **)this
                                                                                              + 6));
  v52 = *((_QWORD *)this + 8);
  v53 = *((int *)this + 14);
  *((_DWORD *)this + 14) = v53 + 1;
  *(_QWORD *)(v52 + 8 * v53 + 8) = v51;
  if (v51)
    goto LABEL_95;
LABEL_183:
  siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Can't create parameter buffer.", v44);
  v46 = 0;
LABEL_184:
  v85.__r_.__value_.__r.__words[0] = (std::string::size_type)&v86;
  std::vector<siri::dialogengine::Parameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&v85);
  return v46;
}

void sub_1BF9AC548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  __p = (void *)(v32 - 104);
  std::vector<siri::dialogengine::Parameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::SaveProtobuf(siri::dialogengine *this, const siri::dialogengine::CatBinary::cat *a2, const char *a3)
{
  const char *v4;
  _BOOL8 v5;
  std::string __p;
  std::string v8;

  memset(&v8, 0, sizeof(v8));
  if (google::protobuf::MessageLite::SerializeToString((const char *)this, &v8))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)a2);
    v5 = siri::dialogengine::WriteGzippedFile(&__p, (const void **)&v8.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Error while serializing cat data.", v4);
    v5 = 0;
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  return v5;
}

void sub_1BF9AC6B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::WriteCatBinary(uint64_t a1, uint64_t a2, siri::dialogengine::CatBinary::condition_entry *a3)
{
  uint64_t v4;
  char *v7;
  _BOOL8 v8;
  _OWORD *v9;
  std::string::size_type size;
  _OWORD *v11;
  std::string::size_type v12;
  const char *v13;
  std::string::size_type v14;
  std::string::size_type v15;
  _DWORD *v16;
  uint64_t v17;
  int v18;
  siri::dialogengine::CatBinary::condition *v19;
  uint64_t v20;
  std::string *v21;
  std::string *v22;
  std::string::size_type v23;
  std::string *v24;
  std::string *v25;
  siri::dialogengine **v26;
  std::string::size_type v27;
  int *v28;
  uint64_t v29;
  int v30;
  siri::dialogengine::CatBinary::condition_entry *v31;
  uint64_t v32;
  uint64_t v33;
  siri::dialogengine **v34;
  std::string::size_type v35;
  _DWORD *v36;
  uint64_t v37;
  int v38;
  siri::dialogengine::CatBinary::node *v39;
  uint64_t v40;
  size_t v41;
  siri::dialogengine *v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  unint64_t v46;
  siri::dialogengine::CatBinary::node *v47;
  uint64_t v48;
  const char *v49;
  const void **v50;
  std::string::size_type v51;
  siri::dialogengine *v52;
  siri::dialogengine *v53;
  _DWORD *v54;
  uint64_t v55;
  int v56;
  siri::dialogengine::CatBinary::node *v57;
  uint64_t v58;
  siri::dialogengine *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  _DWORD *v64;
  uint64_t v65;
  int v66;
  siri::dialogengine::CatBinary::node *v67;
  uint64_t v68;
  std::string::size_type v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::string *v73;
  const siri::dialogengine::CatBinary::cat *v75;
  unint64_t *v76;
  unint64_t v77;
  google::protobuf::internal::ArenaImpl **v78;
  uint64_t (*v79)();
  std::string v80;
  _BYTE v81[16];
  int v82;
  google::protobuf::internal::ArenaImpl *v83;
  int v84;
  int v85;
  _DWORD *v86;
  google::protobuf::internal::ArenaImpl *v87;
  int v88;
  int v89;
  _DWORD *v90;
  google::protobuf::internal::ArenaImpl *v91;
  int v92;
  int v93;
  _DWORD *v94;
  google::protobuf::internal::ArenaImpl *v95;
  int v96;
  int v97;
  _DWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  siri::dialogengine::CatBinary::node *v103;
  std::string v104;
  void **v105[2];

  if (!a1)
  {
    v7 = "File cannot be null, not writing.";
LABEL_11:
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)v7, (const char *)a2);
    return 0;
  }
  v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
  {
    v7 = "Path cannot be empty, not writing.";
    goto LABEL_11;
  }
  v79 = google::protobuf::SetLogHandler((uint64_t (*)())siri::dialogengine::ScopedLogHandler::logHandler);
  siri::dialogengine::CatBinary::cat::cat((siri::dialogengine::CatBinary::cat *)v81);
  v82 |= 1u;
  std::string::basic_string[abi:ne180100]<0>(&v104, "CATPB");
  google::protobuf::internal::ArenaStringPtr::SetNoArena(&v99, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v104);
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v104.__r_.__value_.__l.__data_);
  if (*(char *)(a1 + 175) < 0)
    std::string::__init_copy_ctor_external(&v104, *(const std::string::value_type **)(a1 + 152), *(_QWORD *)(a1 + 160));
  else
    v104 = *(std::string *)(a1 + 152);
  v82 |= 2u;
  google::protobuf::internal::ArenaStringPtr::SetNoArena(&v100, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v104);
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v104.__r_.__value_.__l.__data_);
  v9 = (_OWORD *)(a1 + 104);
  if (*(char *)(a1 + 127) < 0)
  {
    std::string::__init_copy_ctor_external(&v104, *(const std::string::value_type **)(a1 + 104), *(_QWORD *)(a1 + 112));
  }
  else
  {
    *(_OWORD *)&v104.__r_.__value_.__l.__data_ = *v9;
    v104.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 120);
  }
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
  {
    size = v104.__r_.__value_.__l.__size_;
    operator delete(v104.__r_.__value_.__l.__data_);
    if (!size)
      goto LABEL_27;
  }
  else if (!*((_BYTE *)&v104.__r_.__value_.__s + 23))
  {
    goto LABEL_27;
  }
  if (*(char *)(a1 + 127) < 0)
  {
    std::string::__init_copy_ctor_external(&v104, *(const std::string::value_type **)(a1 + 104), *(_QWORD *)(a1 + 112));
  }
  else
  {
    *(_OWORD *)&v104.__r_.__value_.__l.__data_ = *v9;
    v104.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 120);
  }
  v82 |= 4u;
  google::protobuf::internal::ArenaStringPtr::SetNoArena(&v101, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v104);
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v104.__r_.__value_.__l.__data_);
LABEL_27:
  v11 = (_OWORD *)(a1 + 128);
  if (*(char *)(a1 + 151) < 0)
  {
    std::string::__init_copy_ctor_external(&v104, *(const std::string::value_type **)(a1 + 128), *(_QWORD *)(a1 + 136));
  }
  else
  {
    *(_OWORD *)&v104.__r_.__value_.__l.__data_ = *v11;
    v104.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 144);
  }
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
  {
    v12 = v104.__r_.__value_.__l.__size_;
    operator delete(v104.__r_.__value_.__l.__data_);
    if (!v12)
      goto LABEL_39;
  }
  else if (!*((_BYTE *)&v104.__r_.__value_.__s + 23))
  {
    goto LABEL_39;
  }
  if (*(char *)(a1 + 151) < 0)
  {
    std::string::__init_copy_ctor_external(&v104, *(const std::string::value_type **)(a1 + 128), *(_QWORD *)(a1 + 136));
  }
  else
  {
    *(_OWORD *)&v104.__r_.__value_.__l.__data_ = *v11;
    v104.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 144);
  }
  v82 |= 8u;
  google::protobuf::internal::ArenaStringPtr::SetNoArena(&v102, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v104);
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v104.__r_.__value_.__l.__data_);
LABEL_39:
  siri::dialogengine::File::GetConditions(a1, &v104.__r_.__value_.__l.__data_);
  v15 = v104.__r_.__value_.__l.__size_;
  v14 = v104.__r_.__value_.__r.__words[0];
  if (v104.__r_.__value_.__r.__words[0] != v104.__r_.__value_.__l.__size_)
  {
    v78 = &v83;
    while (1)
    {
      v16 = v86;
      if (!v86)
        break;
      v17 = v84;
      v18 = *v86;
      if (v84 < *v86)
      {
        ++v84;
        v19 = *(siri::dialogengine::CatBinary::condition **)&v86[2 * v17 + 2];
        goto LABEL_48;
      }
      if (v18 == v85)
        goto LABEL_46;
LABEL_47:
      *v16 = v18 + 1;
      v19 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::condition>(v83);
      v20 = v84++;
      *(_QWORD *)&v86[2 * v20 + 2] = v19;
LABEL_48:
      if (!v19)
      {
        siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Can't create condition buffer.", v13);
        goto LABEL_153;
      }
      v21 = *(std::string **)v14;
      if (*(char *)(*(_QWORD *)v14 + 119) < 0)
        std::string::__init_copy_ctor_external(&v80, v21[4].__r_.__value_.__l.__data_, v21[4].__r_.__value_.__l.__size_);
      else
        v80 = v21[4];
      *((_DWORD *)v19 + 4) |= 1u;
      google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v19 + 6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v80);
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v80.__r_.__value_.__l.__data_);
        if ((a3 & 1) != 0)
          goto LABEL_71;
      }
      else if ((a3 & 1) != 0)
      {
        goto LABEL_71;
      }
      v22 = *(std::string **)v14;
      if (*(char *)(*(_QWORD *)v14 + 143) < 0)
        std::string::__init_copy_ctor_external(&v80, v22[5].__r_.__value_.__l.__data_, v22[5].__r_.__value_.__l.__size_);
      else
        v80 = v22[5];
      if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v23 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
      else
        v23 = v80.__r_.__value_.__l.__size_;
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v80.__r_.__value_.__l.__data_);
        if (v23)
        {
LABEL_66:
          v24 = *(std::string **)v14;
          if (*(char *)(*(_QWORD *)v14 + 143) < 0)
            std::string::__init_copy_ctor_external(&v80, v24[5].__r_.__value_.__l.__data_, v24[5].__r_.__value_.__l.__size_);
          else
            v80 = v24[5];
          *((_DWORD *)v19 + 4) |= 2u;
          google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v19 + 7, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v80);
          if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v80.__r_.__value_.__l.__data_);
        }
      }
      else if (v23)
      {
        goto LABEL_66;
      }
LABEL_71:
      v25 = *(std::string **)v14;
      memset(&v80, 0, sizeof(v80));
      std::vector<std::shared_ptr<siri::dialogengine::ConditionEntry>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::ConditionEntry>*,std::shared_ptr<siri::dialogengine::ConditionEntry>*>((char *)&v80, (_QWORD *)v25[6].__r_.__value_.__l.__data_, (_QWORD *)v25[6].__r_.__value_.__l.__size_, (uint64_t)(v25[6].__r_.__value_.__l.__size_ - v25[6].__r_.__value_.__r.__words[0]) >> 4);
      v27 = v80.__r_.__value_.__l.__size_;
      v26 = (siri::dialogengine **)v80.__r_.__value_.__r.__words[0];
      if (v80.__r_.__value_.__r.__words[0] != v80.__r_.__value_.__l.__size_)
      {
        while (1)
        {
          v28 = (int *)*((_QWORD *)v19 + 5);
          if (!v28)
            break;
          v29 = *((int *)v19 + 8);
          v30 = *v28;
          if ((int)v29 >= *v28)
          {
            if (v30 == *((_DWORD *)v19 + 9))
            {
LABEL_78:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)v19 + 6, v30 + 1);
              v28 = (int *)*((_QWORD *)v19 + 5);
              v30 = *v28;
            }
            *v28 = v30 + 1;
            v31 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::condition_entry>(*((google::protobuf::internal::ArenaImpl **)v19 + 3));
            v32 = *((_QWORD *)v19 + 5);
            v33 = *((int *)v19 + 8);
            *((_DWORD *)v19 + 8) = v33 + 1;
            *(_QWORD *)(v32 + 8 * v33 + 8) = v31;
            if (!v31)
            {
LABEL_129:
              siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Can't create condition entry buffer.", (const char *)v31, &v83, v79);
LABEL_130:
              v105[0] = (void **)&v80;
              std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](v105);
              goto LABEL_153;
            }
            goto LABEL_80;
          }
          *((_DWORD *)v19 + 8) = v29 + 1;
          v31 = *(siri::dialogengine::CatBinary::condition_entry **)&v28[2 * v29 + 2];
          if (!v31)
            goto LABEL_129;
LABEL_80:
          if ((siri::dialogengine::FillConditionEntryMsg(*v26, v31, a3) & 1) == 0)
            goto LABEL_130;
          v26 += 2;
          if (v26 == (siri::dialogengine **)v27)
            goto LABEL_82;
        }
        v30 = *((_DWORD *)v19 + 9);
        goto LABEL_78;
      }
LABEL_82:
      v105[0] = (void **)&v80;
      std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](v105);
      v14 += 16;
      if (v14 == v15)
        goto LABEL_83;
    }
    v18 = v85;
LABEL_46:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)&v83, v18 + 1);
    v16 = v86;
    v18 = *v86;
    goto LABEL_47;
  }
LABEL_83:
  v80.__r_.__value_.__r.__words[0] = (std::string::size_type)&v104;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v80);
  siri::dialogengine::GroupPhrases::GetPhrases((siri::dialogengine::GroupPhrases *)(a1 + 312), (uint64_t)&v104);
  v35 = v104.__r_.__value_.__l.__size_;
  v34 = (siri::dialogengine **)v104.__r_.__value_.__r.__words[0];
  if (v104.__r_.__value_.__r.__words[0] == v104.__r_.__value_.__l.__size_)
  {
LABEL_94:
    v80.__r_.__value_.__r.__words[0] = (std::string::size_type)&v104;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v80);
    v42 = *(siri::dialogengine **)(a1 + 224);
    v43 = *(std::__shared_weak_count **)(a1 + 232);
    if (v43)
    {
      p_shared_owners = (unint64_t *)&v43->__shared_owners_;
      do
        v45 = __ldxr(p_shared_owners);
      while (__stxr(v45 + 1, p_shared_owners));
      do
        v46 = __ldaxr(p_shared_owners);
      while (__stlxr(v46 - 1, p_shared_owners));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    if (v42)
    {
      v82 |= 0x20u;
      v47 = v103;
      if (!v103)
      {
        v47 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::node>(0);
        v103 = v47;
        if (!v47)
        {
          siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Can't create root group buffer.", 0);
          goto LABEL_154;
        }
      }
      if (!siri::dialogengine::FillNodeMsg(v42, v47, a3))
        goto LABEL_154;
    }
    v48 = *(_QWORD *)(a1 + 296);
    if (v48)
    {
      memset(&v104, 0, sizeof(v104));
      std::vector<std::shared_ptr<siri::dialogengine::Node>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Node>*,std::shared_ptr<siri::dialogengine::Node>*>((char *)&v104, *(_QWORD **)(v48 + 208), *(_QWORD **)(v48 + 216), (uint64_t)(*(_QWORD *)(v48 + 216) - *(_QWORD *)(v48 + 208)) >> 4);
      v51 = v104.__r_.__value_.__l.__size_;
      v50 = (const void **)v104.__r_.__value_.__r.__words[0];
      if (v104.__r_.__value_.__r.__words[0] != v104.__r_.__value_.__l.__size_)
      {
        while (1)
        {
          if (!*v50
          {
            siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Unexpected type for fallback dialog.", v49, v78, v79);
            goto LABEL_153;
          }
          v53 = v52;
          v54 = v94;
          if (!v94)
            break;
          v55 = v92;
          v56 = *v94;
          if (v92 < *v94)
          {
            ++v92;
            v57 = *(siri::dialogengine::CatBinary::node **)&v94[2 * v55 + 2];
            goto LABEL_115;
          }
          if (v56 == v93)
            goto LABEL_113;
LABEL_114:
          *v54 = v56 + 1;
          v57 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::node>(v91);
          v58 = v92++;
          *(_QWORD *)&v94[2 * v58 + 2] = v57;
LABEL_115:
          if (!v57)
          {
            siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Can't create fallback dialog buffer.", 0);
            goto LABEL_153;
          }
          if (!siri::dialogengine::FillNodeMsg(v53, v57, a3))
            goto LABEL_153;
          v50 += 2;
          if (v50 == (const void **)v51)
            goto LABEL_118;
        }
        v56 = v93;
LABEL_113:
        google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)&v91, v56 + 1);
        v54 = v94;
        v56 = *v94;
        goto LABEL_114;
      }
LABEL_118:
      v80.__r_.__value_.__r.__words[0] = (std::string::size_type)&v104;
      std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v80);
    }
    v59 = *(siri::dialogengine **)(a1 + 240);
    v60 = *(std::__shared_weak_count **)(a1 + 248);
    if (v60)
    {
      v61 = (unint64_t *)&v60->__shared_owners_;
      do
        v62 = __ldxr(v61);
      while (__stxr(v62 + 1, v61));
      do
        v63 = __ldaxr(v61);
      while (__stlxr(v63 - 1, v61));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
    if (!v59)
    {
LABEL_142:
      v69 = *(_QWORD *)(a1 + 256);
      v70 = *(std::__shared_weak_count **)(a1 + 264);
      v80.__r_.__value_.__r.__words[0] = v69;
      v80.__r_.__value_.__l.__size_ = (std::string::size_type)v70;
      if (v70)
      {
        v71 = (unint64_t *)&v70->__shared_owners_;
        do
          v72 = __ldxr(v71);
        while (__stxr(v72 + 1, v71));
      }
      if (!v69)
        goto LABEL_161;
      if ((siri::dialogengine::AddMetaAndParameters((siri::dialogengine *)v81, (siri::dialogengine::CatBinary::cat *)a1, a3) & 1) == 0)
      {
        v8 = 0;
LABEL_165:
        if (v70)
        {
          v76 = (unint64_t *)&v70->__shared_owners_;
          do
            v77 = __ldaxr(v76);
          while (__stlxr(v77 - 1, v76));
          if (!v77)
          {
            ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
            std::__shared_weak_count::__release_weak(v70);
          }
        }
        goto LABEL_155;
      }
      google::protobuf::MessageLite::SerializeAsString((google::protobuf::MessageLite *)(v69 + 208), (uint64_t)&v104);
      if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
      {
        v41 = v104.__r_.__value_.__l.__size_;
        if (!v104.__r_.__value_.__l.__size_)
        {
LABEL_160:
          operator delete(v104.__r_.__value_.__l.__data_);
          goto LABEL_161;
        }
        v73 = (std::string *)v104.__r_.__value_.__r.__words[0];
      }
      else
      {
        v41 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
        if (!*((_BYTE *)&v104.__r_.__value_.__s + 23))
          goto LABEL_161;
        v73 = &v104;
      }
      siri::dialogengine::CatBinary::cat::set_visual_response((siri::dialogengine::CatBinary::cat *)v81, v73, v41);
      if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_160;
LABEL_161:
      if (*(char *)(a2 + 23) >= 0)
        v75 = (const siri::dialogengine::CatBinary::cat *)a2;
      else
        v75 = *(const siri::dialogengine::CatBinary::cat **)a2;
      v8 = siri::dialogengine::SaveProtobuf((siri::dialogengine *)v81, v75, (const char *)v41);
      goto LABEL_165;
    }
    v64 = v98;
    if (v98)
    {
      v65 = v96;
      v66 = *v98;
      if (v96 < *v98)
      {
        ++v96;
        v67 = *(siri::dialogengine::CatBinary::node **)&v98[2 * v65 + 2];
LABEL_140:
        if (!v67)
        {
          siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Can't create visual reference node", 0);
          goto LABEL_154;
        }
        if (!siri::dialogengine::FillNodeMsg(v59, v67, a3))
          goto LABEL_154;
        goto LABEL_142;
      }
      if (v66 != v97)
      {
LABEL_139:
        *v64 = v66 + 1;
        v67 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::node>(v95);
        v68 = v96++;
        *(_QWORD *)&v98[2 * v68 + 2] = v67;
        goto LABEL_140;
      }
    }
    else
    {
      v66 = v97;
    }
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)&v95, v66 + 1);
    v64 = v98;
    v66 = *v98;
    goto LABEL_139;
  }
  while (1)
  {
    v36 = v90;
    if (!v90)
    {
      v38 = v89;
LABEL_89:
      google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)&v87, v38 + 1);
      v36 = v90;
      v38 = *v90;
      goto LABEL_90;
    }
    v37 = v88;
    v38 = *v90;
    if (v88 < *v90)
    {
      ++v88;
      v39 = *(siri::dialogengine::CatBinary::node **)&v90[2 * v37 + 2];
      goto LABEL_91;
    }
    if (v38 == v89)
      goto LABEL_89;
LABEL_90:
    *v36 = v38 + 1;
    v39 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::node>(v87);
    v40 = v88++;
    *(_QWORD *)&v90[2 * v40 + 2] = v39;
LABEL_91:
    if (!v39)
      break;
    if (!siri::dialogengine::FillNodeMsg(*v34, v39, a3))
      goto LABEL_153;
    v34 += 2;
    if (v34 == (siri::dialogengine **)v35)
      goto LABEL_94;
  }
  siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Can't create phrase buffer.", 0);
LABEL_153:
  v80.__r_.__value_.__r.__words[0] = (std::string::size_type)&v104;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v80);
LABEL_154:
  v8 = 0;
LABEL_155:
  siri::dialogengine::CatBinary::cat::~cat((siri::dialogengine::CatBinary::cat *)v81);
  google::protobuf::SetLogHandler(v79);
  return v8;
}

void sub_1BF9AD130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t (*a10)(), void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 - 105) < 0)
    operator delete(*(void **)(v17 - 128));
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  siri::dialogengine::CatBinary::cat::~cat((siri::dialogengine::CatBinary::cat *)&a17);
  google::protobuf::SetLogHandler(a10);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::FillConditionEntryMsg(siri::dialogengine *this, const siri::dialogengine::ConditionEntry *a2, siri::dialogengine::CatBinary::condition_entry *a3)
{
  uint64_t result;
  int v7;
  int v8;
  int v9;
  _OWORD *v10;
  std::string::size_type size;
  _OWORD *v12;
  std::string::size_type v13;
  BOOL v14;
  std::string::size_type v15;
  std::string::size_type v16;
  int *v17;
  uint64_t v18;
  int v19;
  siri::dialogengine::CatBinary::condition_entry *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;
  int v25;
  _OWORD *v26;
  std::string::size_type v27;
  std::string v28;
  std::string *v29;

  switch(*((_DWORD *)this + 8))
  {
    case 0:
      *((_DWORD *)a2 + 4) |= 0x10u;
      *((_DWORD *)a2 + 20) = 0;
      goto LABEL_41;
    case 1:
      *((_DWORD *)a2 + 4) |= 0x10u;
      v7 = 1;
      goto LABEL_6;
    case 2:
      *((_DWORD *)a2 + 4) |= 0x10u;
      v7 = 2;
LABEL_6:
      *((_DWORD *)a2 + 20) = v7;
      goto LABEL_41;
    case 3:
      v8 = *((_DWORD *)a2 + 4) | 0x10;
      *((_DWORD *)a2 + 4) = v8;
      *((_DWORD *)a2 + 20) = 3;
      if (*((char *)this + 175) < 0)
      {
        std::string::__init_copy_ctor_external(&v28, *((const std::string::value_type **)this + 19), *((_QWORD *)this + 20));
        v8 = *((_DWORD *)a2 + 4);
      }
      else
      {
        v28 = *(std::string *)((char *)this + 152);
      }
      *((_DWORD *)a2 + 4) = v8 | 1;
      google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)a2 + 6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v28);
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v28.__r_.__value_.__l.__data_);
      v10 = (_OWORD *)((char *)this + 176);
      if (*((char *)this + 199) < 0)
      {
        std::string::__init_copy_ctor_external(&v28, *((const std::string::value_type **)this + 22), *((_QWORD *)this + 23));
      }
      else
      {
        *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *v10;
        v28.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 24);
      }
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      {
        size = v28.__r_.__value_.__l.__size_;
        operator delete(v28.__r_.__value_.__l.__data_);
        if (!size)
          goto LABEL_28;
      }
      else if (!*((_BYTE *)&v28.__r_.__value_.__s + 23))
      {
        goto LABEL_28;
      }
      if (*((char *)this + 199) < 0)
      {
        std::string::__init_copy_ctor_external(&v28, *((const std::string::value_type **)this + 22), *((_QWORD *)this + 23));
      }
      else
      {
        *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *v10;
        v28.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 24);
      }
      *((_DWORD *)a2 + 4) |= 2u;
      google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)a2 + 7, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v28);
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v28.__r_.__value_.__l.__data_);
LABEL_28:
      v12 = (_OWORD *)((char *)this + 200);
      if (*((char *)this + 223) < 0)
      {
        std::string::__init_copy_ctor_external(&v28, *((const std::string::value_type **)this + 25), *((_QWORD *)this + 26));
      }
      else
      {
        *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *v12;
        v28.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 27);
      }
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      {
        v13 = v28.__r_.__value_.__l.__size_;
        operator delete(v28.__r_.__value_.__l.__data_);
        if (!v13)
          goto LABEL_41;
      }
      else if (!*((_BYTE *)&v28.__r_.__value_.__s + 23))
      {
        goto LABEL_41;
      }
      if (*((char *)this + 223) < 0)
      {
        std::string::__init_copy_ctor_external(&v28, *((const std::string::value_type **)this + 25), *((_QWORD *)this + 26));
      }
      else
      {
        *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *v12;
        v28.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 27);
      }
      *((_DWORD *)a2 + 4) |= 4u;
      google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)a2 + 8, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v28);
LABEL_39:
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v28.__r_.__value_.__l.__data_);
LABEL_41:
      memset(&v28, 0, sizeof(v28));
      std::vector<std::shared_ptr<siri::dialogengine::ConditionEntry>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::ConditionEntry>*,std::shared_ptr<siri::dialogengine::ConditionEntry>*>((char *)&v28, *((_QWORD **)this + 8), *((_QWORD **)this + 9), (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 4);
      v15 = v28.__r_.__value_.__l.__size_;
      if (v28.__r_.__value_.__r.__words[0] != v28.__r_.__value_.__l.__size_)
      {
        v16 = v28.__r_.__value_.__r.__words[0] + 16;
        while (1)
        {
          v17 = (int *)*((_QWORD *)a2 + 5);
          if (!v17)
            break;
          v18 = *((int *)a2 + 8);
          v19 = *v17;
          if ((int)v18 >= *v17)
          {
            if (v19 == *((_DWORD *)a2 + 9))
            {
LABEL_48:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a2 + 6, v19 + 1);
              v17 = (int *)*((_QWORD *)a2 + 5);
              v19 = *v17;
            }
            *v17 = v19 + 1;
            v20 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::condition_entry>(*((google::protobuf::internal::ArenaImpl **)a2 + 3));
            v21 = *((_QWORD *)a2 + 5);
            v22 = *((int *)a2 + 8);
            *((_DWORD *)a2 + 8) = v22 + 1;
            *(_QWORD *)(v21 + 8 * v22 + 8) = v20;
            goto LABEL_50;
          }
          *((_DWORD *)a2 + 8) = v18 + 1;
          v20 = *(siri::dialogengine::CatBinary::condition_entry **)&v17[2 * v18 + 2];
LABEL_50:
          v23 = siri::dialogengine::FillConditionEntryMsg(*(siri::dialogengine **)(v16 - 16), v20, a3, v14);
          if (v16 == v15)
            v24 = 0;
          else
            v24 = v23;
          v16 += 16;
          if ((v24 & 1) == 0)
          {
            v25 = v23 ^ 1;
            goto LABEL_56;
          }
        }
        v19 = *((_DWORD *)a2 + 9);
        goto LABEL_48;
      }
      v25 = 0;
LABEL_56:
      v29 = &v28;
      std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
      result = v25 ^ 1u;
      if ((v25 & 1) != 0 || (a3 & 1) != 0)
        return result;
      v26 = (_OWORD *)((char *)this + 40);
      if (*((char *)this + 63) < 0)
      {
        std::string::__init_copy_ctor_external(&v28, *((const std::string::value_type **)this + 5), *((_QWORD *)this + 6));
      }
      else
      {
        *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *v26;
        v28.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 7);
      }
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = HIBYTE(v28.__r_.__value_.__r.__words[2]);
      else
        v27 = v28.__r_.__value_.__l.__size_;
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v28.__r_.__value_.__l.__data_);
        if (!v27)
          return 1;
      }
      else if (!v27)
      {
        return 1;
      }
      if (*((char *)this + 63) < 0)
      {
        std::string::__init_copy_ctor_external(&v28, *((const std::string::value_type **)this + 5), *((_QWORD *)this + 6));
      }
      else
      {
        *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *v26;
        v28.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 7);
      }
      *((_DWORD *)a2 + 4) |= 8u;
      google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)a2 + 9, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v28);
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v28.__r_.__value_.__l.__data_);
      return 1;
    case 4:
      v9 = *((_DWORD *)a2 + 4) | 0x10;
      *((_DWORD *)a2 + 4) = v9;
      *((_DWORD *)a2 + 20) = 4;
      if (*((char *)this + 175) < 0)
      {
        std::string::__init_copy_ctor_external(&v28, *((const std::string::value_type **)this + 19), *((_QWORD *)this + 20));
        v9 = *((_DWORD *)a2 + 4);
      }
      else
      {
        v28 = *(std::string *)((char *)this + 152);
      }
      *((_DWORD *)a2 + 4) = v9 | 1;
      google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)a2 + 6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v28);
      goto LABEL_39;
    default:
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Unrecognized condition entry type: %d", (const char *)a2, *((unsigned int *)this + 8));
      return 0;
  }
}

void sub_1BF9AD6F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::FillNodeMsg(siri::dialogengine *this, const siri::dialogengine::Node *a2, siri::dialogengine::CatBinary::node *a3)
{
  std::string *v6;
  std::string::size_type size;
  _OWORD *v8;
  std::string::size_type v9;
  _OWORD *v10;
  std::string::size_type v11;
  float v12;
  _OWORD *v13;
  std::string::size_type v14;
  char *v15;
  const siri::dialogengine::SpeakableString *v16;
  std::string::size_type v17;
  BOOL v18;
  char *v19;
  char *v20;
  const siri::dialogengine::SpeakableString *v21;
  std::string::size_type v22;
  BOOL v23;
  std::string::size_type v24;
  const void ***v25;
  std::string::size_type v26;
  const char *v27;
  int *v28;
  uint64_t v29;
  int v30;
  siri::dialogengine::CatBinary::visual_parameter *v31;
  uint64_t v32;
  uint64_t v33;
  _BOOL8 v34;
  std::string *v35;
  std::string *v36;
  std::string *v37;
  std::string *v38;
  std::string *v39;
  BOOL v40;
  std::string::size_type v41;
  std::string::size_type v42;
  BOOL v43;
  std::string::size_type v44;
  char v45;
  char v46;
  _OWORD *v47;
  std::string::size_type v48;
  _OWORD *v49;
  std::string::size_type v50;
  char *v52;
  void *v53;
  void *v54;
  void *v55;
  char *v56;
  const char *v57;
  char *v58;
  int v59;
  _OWORD *v60;
  std::string::size_type v61;
  _OWORD *v62;
  std::string::size_type v63;
  BOOL v64;
  std::string::size_type v65;
  std::string::size_type v66;
  int *v67;
  uint64_t v68;
  int v69;
  siri::dialogengine::CatBinary::node *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  std::string *p_str;
  std::string v76;
  std::string __str;
  std::string v78;
  void *v79;
  char v80;
  void *v81;
  char v82;
  void *v83;
  char v84;
  void *v85;
  char v86;
  void *__p;
  char v88;

  v6 = (std::string *)((char *)this + 96);
  if (*((char *)this + 119) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)this + 12), *((_QWORD *)this + 13));
  }
  else
  {
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 14);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __str.__r_.__value_.__l.__size_;
    operator delete(__str.__r_.__value_.__l.__data_);
    if (!size)
      goto LABEL_13;
  }
  else if (!*((_BYTE *)&__str.__r_.__value_.__s + 23))
  {
    goto LABEL_13;
  }
  if (*((char *)this + 119) < 0)
    std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)this + 12), *((_QWORD *)this + 13));
  else
    __str = *v6;
  *((_DWORD *)a2 + 4) |= 1u;
  google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)a2 + 9, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
LABEL_13:
  v8 = (_OWORD *)((char *)this + 120);
  if (*((char *)this + 143) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)this + 15), *((_QWORD *)this + 16));
  }
  else
  {
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *v8;
    __str.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 17);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    v9 = __str.__r_.__value_.__l.__size_;
    operator delete(__str.__r_.__value_.__l.__data_);
    if (!v9)
      goto LABEL_25;
  }
  else if (!*((_BYTE *)&__str.__r_.__value_.__s + 23))
  {
    goto LABEL_25;
  }
  if (*((char *)this + 143) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)this + 15), *((_QWORD *)this + 16));
  }
  else
  {
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *v8;
    __str.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 17);
  }
  *((_DWORD *)a2 + 4) |= 2u;
  google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)a2 + 10, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
LABEL_25:
  v10 = (_OWORD *)((char *)this + 144);
  if (*((char *)this + 167) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)this + 18), *((_QWORD *)this + 19));
  }
  else
  {
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *v10;
    __str.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 20);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    v11 = __str.__r_.__value_.__l.__size_;
    operator delete(__str.__r_.__value_.__l.__data_);
    if (!v11)
      goto LABEL_37;
  }
  else if (!*((_BYTE *)&__str.__r_.__value_.__s + 23))
  {
    goto LABEL_37;
  }
  if (*((char *)this + 167) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)this + 18), *((_QWORD *)this + 19));
  }
  else
  {
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *v10;
    __str.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 20);
  }
  *((_DWORD *)a2 + 4) |= 0x100u;
  google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)a2 + 17, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
LABEL_37:
  v12 = *((float *)this + 48);
  if (v12 != 1.0)
  {
    *((_DWORD *)a2 + 4) |= 0x8000u;
    *((float *)a2 + 44) = v12;
  }
  if ((a3 & 1) == 0)
  {
    v13 = (_OWORD *)((char *)this + 168);
    if (*((char *)this + 191) < 0)
    {
      std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)this + 21), *((_QWORD *)this + 22));
    }
    else
    {
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *v13;
      __str.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 23);
    }
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    else
      v14 = __str.__r_.__value_.__l.__size_;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__str.__r_.__value_.__l.__data_);
      if (!v14)
        goto LABEL_55;
    }
    else if (!v14)
    {
      goto LABEL_55;
    }
    if (*((char *)this + 191) < 0)
    {
      std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)this + 21), *((_QWORD *)this + 22));
    }
    else
    {
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *v13;
      __str.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 23);
    }
    *((_DWORD *)a2 + 4) |= 4u;
    google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)a2 + 11, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
LABEL_55:
  if (v15)
  {
    *((_DWORD *)a2 + 4) |= 0x1000u;
    *((_DWORD *)a2 + 42) = 4;
    v16 = (const siri::dialogengine::SpeakableString *)(v15 + 208);
    siri::dialogengine::SpeakableString::SpeakableString(&__str, (const siri::dialogengine::SpeakableString *)(v15 + 208));
    v17 = HIBYTE(v78.__r_.__value_.__r.__words[2]);
    if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v17 = v78.__r_.__value_.__l.__size_;
    if (v17)
    {
      v18 = 0;
    }
    else
    {
      v24 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v24 = __str.__r_.__value_.__l.__size_;
      v18 = v24 == 0;
    }
    if (v88 < 0)
      operator delete(__p);
    if (v86 < 0)
      operator delete(v85);
    if (v84 < 0)
      operator delete(v83);
    if (v82 < 0)
      operator delete(v81);
    if (v80 < 0)
      operator delete(v79);
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v78.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (v18)
        return 1;
      goto LABEL_84;
    }
    operator delete(__str.__r_.__value_.__l.__data_);
    if (!v18)
    {
LABEL_84:
      siri::dialogengine::SpeakableString::SpeakableString(&__str, v16);
      siri::dialogengine::SpeakableString::ToMultiplexedString((siri::dialogengine::SpeakableString *)&__str, &v76);
      *((_DWORD *)a2 + 4) |= 0x40u;
      google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)a2 + 15, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v76);
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v76.__r_.__value_.__l.__data_);
      if (v88 < 0)
        operator delete(__p);
      if (v86 < 0)
        operator delete(v85);
      if (v84 < 0)
        operator delete(v83);
      if (v82 < 0)
        operator delete(v81);
      if (v80 < 0)
        operator delete(v79);
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v78.__r_.__value_.__l.__data_);
      goto LABEL_232;
    }
    return 1;
  }
  if (v19)
  {
    v20 = v19;
    *((_DWORD *)a2 + 4) |= 0x1000u;
    *((_DWORD *)a2 + 42) = 3;
    v21 = (const siri::dialogengine::SpeakableString *)(v19 + 208);
    siri::dialogengine::SpeakableString::SpeakableString(&__str, (const siri::dialogengine::SpeakableString *)(v19 + 208));
    v22 = HIBYTE(v78.__r_.__value_.__r.__words[2]);
    if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v22 = v78.__r_.__value_.__l.__size_;
    if (v22)
    {
      v23 = 0;
    }
    else
    {
      v41 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v41 = __str.__r_.__value_.__l.__size_;
      v23 = v41 == 0;
    }
    if (v88 < 0)
      operator delete(__p);
    if (v86 < 0)
      operator delete(v85);
    if (v84 < 0)
      operator delete(v83);
    if (v82 < 0)
      operator delete(v81);
    if (v80 < 0)
      operator delete(v79);
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v78.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__str.__r_.__value_.__l.__data_);
      if (v23)
        goto LABEL_166;
    }
    else if (v23)
    {
      goto LABEL_166;
    }
    siri::dialogengine::SpeakableString::SpeakableString(&__str, v21);
    siri::dialogengine::SpeakableString::ToMultiplexedString((siri::dialogengine::SpeakableString *)&__str, &v76);
    *((_DWORD *)a2 + 4) |= 0x10u;
    google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)a2 + 13, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v76);
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v76.__r_.__value_.__l.__data_);
    if (v88 < 0)
      operator delete(__p);
    if (v86 < 0)
      operator delete(v85);
    if (v84 < 0)
      operator delete(v83);
    if (v82 < 0)
      operator delete(v81);
    if (v80 < 0)
      operator delete(v79);
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v78.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
LABEL_166:
    siri::dialogengine::SpeakableString::SpeakableString(&__str, (const siri::dialogengine::SpeakableString *)(v20 + 376));
    v42 = HIBYTE(v78.__r_.__value_.__r.__words[2]);
    if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v42 = v78.__r_.__value_.__l.__size_;
    if (v42)
    {
      v43 = 0;
    }
    else
    {
      v44 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v44 = __str.__r_.__value_.__l.__size_;
      v43 = v44 == 0;
    }
    if (v88 < 0)
      operator delete(__p);
    if (v86 < 0)
      operator delete(v85);
    if (v84 < 0)
      operator delete(v83);
    if (v82 < 0)
      operator delete(v81);
    if (v80 < 0)
      operator delete(v79);
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v78.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__str.__r_.__value_.__l.__data_);
      if (v43)
        goto LABEL_205;
    }
    else if (v43)
    {
      goto LABEL_205;
    }
    siri::dialogengine::SpeakableString::SpeakableString(&__str, (const siri::dialogengine::SpeakableString *)(v20 + 376));
    siri::dialogengine::SpeakableString::ToMultiplexedString((siri::dialogengine::SpeakableString *)&__str, &v76);
    *((_DWORD *)a2 + 4) |= 0x20u;
    google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)a2 + 14, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v76);
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v76.__r_.__value_.__l.__data_);
    if (v88 < 0)
      operator delete(__p);
    if (v86 < 0)
      operator delete(v85);
    if (v84 < 0)
      operator delete(v83);
    if (v82 < 0)
      operator delete(v81);
    if (v80 < 0)
      operator delete(v79);
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v78.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
LABEL_205:
    if (v20[547])
    {
      v45 = v20[546];
      *((_DWORD *)a2 + 4) |= 0x2000u;
      *((_BYTE *)a2 + 172) = v45;
    }
    if (v20[545])
    {
      v46 = v20[544];
      *((_DWORD *)a2 + 4) |= 0x4000u;
      *((_BYTE *)a2 + 173) = v46;
    }
    v47 = v20 + 552;
    if (v20[575] < 0)
    {
      std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v20 + 69), *((_QWORD *)v20 + 70));
    }
    else
    {
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *v47;
      __str.__r_.__value_.__r.__words[2] = *((_QWORD *)v20 + 71);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      v48 = __str.__r_.__value_.__l.__size_;
      operator delete(__str.__r_.__value_.__l.__data_);
      if (!v48)
        goto LABEL_221;
    }
    else if (!*((_BYTE *)&__str.__r_.__value_.__s + 23))
    {
      goto LABEL_221;
    }
    if (v20[575] < 0)
    {
      std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v20 + 69), *((_QWORD *)v20 + 70));
    }
    else
    {
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *v47;
      __str.__r_.__value_.__r.__words[2] = *((_QWORD *)v20 + 71);
    }
    *((_DWORD *)a2 + 4) |= 0x400u;
    google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)a2 + 19, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
LABEL_221:
    v49 = v20 + 576;
    if (v20[599] < 0)
    {
      std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v20 + 72), *((_QWORD *)v20 + 73));
    }
    else
    {
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *v49;
      __str.__r_.__value_.__r.__words[2] = *((_QWORD *)v20 + 74);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      v50 = __str.__r_.__value_.__l.__size_;
      operator delete(__str.__r_.__value_.__l.__data_);
      if (!v50)
        return 1;
    }
    else if (!*((_BYTE *)&__str.__r_.__value_.__s + 23))
    {
      return 1;
    }
    if (v20[599] < 0)
    {
      std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v20 + 72), *((_QWORD *)v20 + 73));
    }
    else
    {
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *v49;
      __str.__r_.__value_.__r.__words[2] = *((_QWORD *)v20 + 74);
    }
    *((_DWORD *)a2 + 4) |= 0x800u;
    google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)a2 + 20, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&__str);
LABEL_232:
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    return 1;
  }
  if (!v25)
  {
    v58 = v56;
    if (v53)
    {
      v59 = 2;
    }
    else if (v54)
    {
      v59 = 1;
    }
    else if (v55)
    {
      v59 = 0;
    }
    else
    {
      if (!v56)
      {
        if (*((char *)this + 119) < 0)
          std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)this + 12), *((_QWORD *)this + 13));
        else
          __str = *v6;
        p_str = &__str;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Unrecognized Group node type for '%s'.", v57, p_str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        return 0;
      }
      v59 = 5;
    }
    *((_DWORD *)a2 + 4) |= 0x1000u;
    *((_DWORD *)a2 + 42) = v59;
    if (v52)
    {
      v60 = v52 + 232;
      if (v52[255] < 0)
      {
        std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v52 + 29), *((_QWORD *)v52 + 30));
      }
      else
      {
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *v60;
        __str.__r_.__value_.__r.__words[2] = *((_QWORD *)v52 + 31);
      }
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v61 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      else
        v61 = __str.__r_.__value_.__l.__size_;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (v61)
      {
        if (v52[255] < 0)
        {
          std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v52 + 29), *((_QWORD *)v52 + 30));
        }
        else
        {
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *v60;
          __str.__r_.__value_.__r.__words[2] = *((_QWORD *)v52 + 31);
        }
        *((_DWORD *)a2 + 4) |= 8u;
        google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)a2 + 12, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
      }
    }
    if (v58)
    {
      v62 = v58 + 256;
      if (v58[279] < 0)
      {
        std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v58 + 32), *((_QWORD *)v58 + 33));
      }
      else
      {
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *v62;
        __str.__r_.__value_.__r.__words[2] = *((_QWORD *)v58 + 34);
      }
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v63 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      else
        v63 = __str.__r_.__value_.__l.__size_;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (v63)
      {
        if (v58[279] < 0)
        {
          std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v58 + 32), *((_QWORD *)v58 + 33));
        }
        else
        {
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *v62;
          __str.__r_.__value_.__r.__words[2] = *((_QWORD *)v58 + 34);
        }
        *((_DWORD *)a2 + 4) |= 0x80u;
        google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)a2 + 16, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
      }
    }
    memset(&__str, 0, sizeof(__str));
    std::vector<std::shared_ptr<siri::dialogengine::Node>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Node>*,std::shared_ptr<siri::dialogengine::Node>*>((char *)&__str, *((_QWORD **)v52 + 26), *((_QWORD **)v52 + 27), (uint64_t)(*((_QWORD *)v52 + 27) - *((_QWORD *)v52 + 26)) >> 4);
    v65 = __str.__r_.__value_.__l.__size_;
    if (__str.__r_.__value_.__r.__words[0] == __str.__r_.__value_.__l.__size_)
    {
      v34 = 1;
LABEL_289:
      v76.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
      std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v76);
      return v34;
    }
    v66 = __str.__r_.__value_.__r.__words[0] + 16;
    while (1)
    {
      v67 = (int *)*((_QWORD *)a2 + 5);
      if (!v67)
        break;
      v68 = *((int *)a2 + 8);
      v69 = *v67;
      if ((int)v68 >= *v67)
      {
        if (v69 == *((_DWORD *)a2 + 9))
        {
LABEL_281:
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a2 + 6, v69 + 1);
          v67 = (int *)*((_QWORD *)a2 + 5);
          v69 = *v67;
        }
        *v67 = v69 + 1;
        v70 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::node>(*((google::protobuf::internal::ArenaImpl **)a2
                                                                                               + 3));
        v71 = *((_QWORD *)a2 + 5);
        v72 = *((int *)a2 + 8);
        *((_DWORD *)a2 + 8) = v72 + 1;
        *(_QWORD *)(v71 + 8 * v72 + 8) = v70;
        goto LABEL_283;
      }
      *((_DWORD *)a2 + 8) = v68 + 1;
      v70 = *(siri::dialogengine::CatBinary::node **)&v67[2 * v68 + 2];
LABEL_283:
      v73 = siri::dialogengine::FillNodeMsg(*(siri::dialogengine **)(v66 - 16), v70, a3, v64);
      v34 = v73;
      if (v66 == v65)
        v74 = 0;
      else
        v74 = v73;
      v66 += 16;
      if ((v74 & 1) == 0)
        goto LABEL_289;
    }
    v69 = *((_DWORD *)a2 + 9);
    goto LABEL_281;
  }
  *((_DWORD *)a2 + 4) |= 0x1000u;
  *((_DWORD *)a2 + 42) = 6;
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&v76, v25 + 26);
  v26 = v76.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v76.__r_.__value_.__l.__data_ != &v76.__r_.__value_.__r.__words[1])
  {
    while (1)
    {
      std::pair<std::string const,std::string>::pair[abi:ne180100](&__str, (__int128 *)(v26 + 32));
      v28 = (int *)*((_QWORD *)a2 + 8);
      if (!v28)
        break;
      v29 = *((int *)a2 + 14);
      v30 = *v28;
      if ((int)v29 < *v28)
      {
        *((_DWORD *)a2 + 14) = v29 + 1;
        v31 = *(siri::dialogengine::CatBinary::visual_parameter **)&v28[2 * v29 + 2];
        goto LABEL_107;
      }
      if (v30 == *((_DWORD *)a2 + 15))
        goto LABEL_105;
LABEL_106:
      *v28 = v30 + 1;
      v31 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::CatBinary::visual_parameter>(*((google::protobuf::internal::ArenaImpl **)a2 + 6));
      v32 = *((_QWORD *)a2 + 8);
      v33 = *((int *)a2 + 14);
      *((_DWORD *)a2 + 14) = v33 + 1;
      *(_QWORD *)(v32 + 8 * v33 + 8) = v31;
LABEL_107:
      v34 = v31 != 0;
      if (v31)
      {
        v35 = (std::string *)*((_QWORD *)v31 + 3);
        *((_DWORD *)v31 + 4) |= 1u;
        if (v35 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v31 + 3, (uint64_t)&__str);
        else
          std::string::operator=(v35, &__str);
        v37 = (std::string *)*((_QWORD *)v31 + 4);
        *((_DWORD *)v31 + 4) |= 2u;
        if (v37 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)v31 + 4, (uint64_t)&v78);
        else
          std::string::operator=(v37, &v78);
      }
      else
      {
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v36 = &__str;
        else
          v36 = (std::string *)__str.__r_.__value_.__r.__words[0];
        siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Can't create parameter \"%s\" in visual reference", v27, v36);
      }
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v78.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (!v31)
        goto LABEL_130;
      v38 = *(std::string **)(v26 + 8);
      if (v38)
      {
        do
        {
          v39 = v38;
          v38 = (std::string *)v38->__r_.__value_.__r.__words[0];
        }
        while (v38);
      }
      else
      {
        do
        {
          v39 = *(std::string **)(v26 + 16);
          v40 = v39->__r_.__value_.__r.__words[0] == v26;
          v26 = (std::string::size_type)v39;
        }
        while (!v40);
      }
      v26 = (std::string::size_type)v39;
      if (v39 == (std::string *)&v76.__r_.__value_.__r.__words[1])
        goto LABEL_129;
    }
    v30 = *((_DWORD *)a2 + 15);
LABEL_105:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a2 + 12, v30 + 1);
    v28 = (int *)*((_QWORD *)a2 + 8);
    v30 = *v28;
    goto LABEL_106;
  }
LABEL_129:
  v34 = 1;
LABEL_130:
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((_QWORD *)v76.__r_.__value_.__l.__size_);
  return v34;
}

void sub_1BF9AE61C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::CatBinary::cat::set_visual_response(siri::dialogengine::CatBinary::cat *this, void *a2, size_t a3)
{
  uint64_t *v3;
  __n128 __p;
  char v5;

  *((_DWORD *)this + 4) |= 0x10u;
  v3 = (uint64_t *)((char *)this + 200);
  std::string::basic_string[abi:ne180100](&__p, a2, a3);
  google::protobuf::internal::ArenaStringPtr::SetNoArena(v3, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, &__p);
  if (v5 < 0)
    operator delete((void *)__p.n128_u64[0]);
}

void sub_1BF9AE724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1BF9AE7F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1BF9AE878(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BF9AE994(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1BF9AEA14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)DEFileReader;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1BF9AEADC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BF9AEBB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BF9AEC6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BF9AECD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BF9AEDF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BF9AEE68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)DERewindableReader;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1BF9AF044(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BF9AF12C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1BF9AF364(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1BF9AF408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)DEFileWriter;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1BF9AF548(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BF9AF648(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BF9AF764(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void siri::dialogengine::Text::~Text(siri::dialogengine::Text *this)
{
  *(_QWORD *)this = off_1E7933D08;
  *((_QWORD *)this + 8) = &unk_1E7933D60;
  siri::dialogengine::SpeakableString::~SpeakableString((void **)this + 26);
  *(_QWORD *)this = off_1E793A6B0;
  *((_QWORD *)this + 8) = &unk_1E793A708;
  if (*((char *)this + 191) < 0)
    operator delete(*((void **)this + 21));
  if (*((char *)this + 167) < 0)
    operator delete(*((void **)this + 18));
  if (*((char *)this + 143) < 0)
    operator delete(*((void **)this + 15));
  if (*((char *)this + 119) < 0)
    operator delete(*((void **)this + 12));
  *((_QWORD *)this + 8) = off_1E793AED8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((_QWORD **)this + 10));
  siri::dialogengine::LineNumberBase::~LineNumberBase((void **)this);
}

{
  *(_QWORD *)this = off_1E7933D08;
  *((_QWORD *)this + 8) = &unk_1E7933D60;
  siri::dialogengine::SpeakableString::~SpeakableString((void **)this + 26);
  *(_QWORD *)this = off_1E793A6B0;
  *((_QWORD *)this + 8) = &unk_1E793A708;
  if (*((char *)this + 191) < 0)
    operator delete(*((void **)this + 21));
  if (*((char *)this + 167) < 0)
    operator delete(*((void **)this + 18));
  if (*((char *)this + 143) < 0)
    operator delete(*((void **)this + 15));
  if (*((char *)this + 119) < 0)
    operator delete(*((void **)this + 12));
  *((_QWORD *)this + 8) = off_1E793AED8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((_QWORD **)this + 10));
  siri::dialogengine::LineNumberBase::~LineNumberBase((void **)this);
  JUMPOUT(0x1C3B8D890);
}

uint64_t siri::dialogengine::Text::Accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, a1);
}

{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, a1);
}

uint64_t siri::dialogengine::Text::Validate(const void ***this, siri::dialogengine::Context *a2)
{
  char v4;
  const char *v5;
  char v6;
  const char *v7;
  char v8;
  char v9;
  void **p_data;
  unint64_t v11;
  unsigned __int8 v12;
  void **v13;
  void **v14;
  BOOL v15;
  void *__p[2];
  char v18;
  void *v19[2];
  unsigned __int8 v20;
  std::string v21;
  void *v22;
  char v23;
  std::string *v24;
  _QWORD *v25[2];

  v4 = siri::dialogengine::Node::Validate((siri::dialogengine::Node *)this, a2);
  siri::dialogengine::SpeakableString::GetSpeakChunks((siri::dialogengine::SpeakableString *)(this + 26), v5, &v21);
  v6 = siri::dialogengine::ChunkList::Validate((siri::dialogengine::ChunkList *)&v21, a2, (const siri::dialogengine::LineNumberBase *)this);
  v24 = &v21;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  if ((v6 & 1) != 0)
  {
    siri::dialogengine::SpeakableString::GetPrintChunks((siri::dialogengine::SpeakableString *)(this + 26), v7, &v21);
    v8 = siri::dialogengine::ChunkList::Validate((siri::dialogengine::ChunkList *)&v21, a2, (const siri::dialogengine::LineNumberBase *)this);
    v24 = &v21;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
    v9 = v8 & v4;
  }
  else
  {
    v9 = 0;
  }
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&v24, this + 9);
  p_data = (void **)&v24->__r_.__value_.__l.__data_;
  if (v24 != (std::string *)v25)
  {
    do
    {
      std::pair<std::string const,std::string>::pair[abi:ne180100](&v21, (__int128 *)p_data + 2);
      std::string::basic_string[abi:ne180100]<0>(__p, "text");
      siri::dialogengine::ValidateXmlAttributeVersion(a2, (const void **)__p, (uint64_t)&v21, v19);
      if (v18 < 0)
        operator delete(__p[0]);
      v11 = v20;
      v12 = v20;
      if ((v20 & 0x80u) != 0)
        v11 = (unint64_t)v19[1];
      if (v11)
      {
        siri::dialogengine::Context::AddValidationError((uint64_t)a2, (__int128 *)v19, 0);
        v9 = 0;
        v12 = v20;
      }
      if ((v12 & 0x80) != 0)
        operator delete(v19[0]);
      if (v23 < 0)
        operator delete(v22);
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v21.__r_.__value_.__l.__data_);
      v13 = (void **)p_data[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (void **)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (void **)p_data[2];
          v15 = *v14 == p_data;
          p_data = v14;
        }
        while (!v15);
      }
      p_data = v14;
    }
    while (v14 != (void **)v25);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v25[0]);
  return v9 & 1;
}

void sub_1BF9AFBBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v23 - 72) = v22;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v23 - 72));
  _Unwind_Resume(a1);
}

void siri::dialogengine::Text::Execute(siri::dialogengine::Text *this@<X0>, siri::dialogengine::Context *a2@<X1>, char **a3@<X8>)
{
  const siri::dialogengine::SpeakableString *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  int64x2_t v24;
  char *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  __int128 v31;
  siri::dialogengine::SpeakableString *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  int64x2_t v35;
  char *v36;
  _QWORD *v37;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v5 = (siri::dialogengine::Text *)((char *)this + 208);
  siri::dialogengine::SpeakableString::GetExpanded((siri::dialogengine::Text *)((char *)this + 208), a2, (std::string **)&v32);
  if (v32)
  {
    v6 = operator new();
    siri::dialogengine::Node::Node((siri::dialogengine::Node *)v6, this);
    *(_QWORD *)v6 = off_1E7933D08;
    *(_QWORD *)(v6 + 64) = &unk_1E7933D60;
    siri::dialogengine::SpeakableString::SpeakableString((std::string *)(v6 + 208), v5);
    *(_QWORD *)&v31 = v6;
    v7 = (_QWORD *)operator new();
    *v7 = &off_1E7930B88;
    v7[1] = 0;
    v7[2] = 0;
    v7[3] = v6;
    *((_QWORD *)&v31 + 1) = v7;
    siri::dialogengine::Text::SetValue((siri::dialogengine::Text *)v6, (const std::string *)v32);
    if (*((_QWORD *)&v31 + 1))
    {
      v8 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    v10 = (unint64_t)a3[2];
    v11 = a3[1];
    if ((unint64_t)v11 >= v10)
    {
      v13 = (v11 - *a3) >> 4;
      if ((unint64_t)(v13 + 1) >> 60)
        std::vector<BOOL>::__throw_length_error[abi:ne180100]();
      v14 = v10 - (_QWORD)*a3;
      v15 = v14 >> 3;
      if (v14 >> 3 <= (unint64_t)(v13 + 1))
        v15 = v13 + 1;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
        v16 = 0xFFFFFFFFFFFFFFFLL;
      else
        v16 = v15;
      v37 = a3 + 2;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v16);
      v19 = &v17[16 * v13];
      *(_OWORD *)v19 = v31;
      v21 = *a3;
      v20 = a3[1];
      if (v20 == *a3)
      {
        v24 = vdupq_n_s64((unint64_t)v20);
        v22 = &v17[16 * v13];
      }
      else
      {
        v22 = &v17[16 * v13];
        do
        {
          v23 = *((_OWORD *)v20 - 1);
          v20 -= 16;
          *((_OWORD *)v22 - 1) = v23;
          v22 -= 16;
          *(_QWORD *)v20 = 0;
          *((_QWORD *)v20 + 1) = 0;
        }
        while (v20 != v21);
        v24 = *(int64x2_t *)a3;
      }
      v12 = v19 + 16;
      *a3 = v22;
      a3[1] = v19 + 16;
      v35 = v24;
      v25 = a3[2];
      a3[2] = &v17[16 * v18];
      v36 = v25;
      v34 = v24.i64[0];
      std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)&v34);
    }
    else
    {
      *(_OWORD *)v11 = v31;
      v12 = v11 + 16;
    }
    a3[1] = v12;
    if (*((_QWORD *)&v31 + 1))
    {
      v26 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v31 + 1) + 16))(*((_QWORD *)&v31 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v31 + 1));
      }
    }
  }
  v28 = v33;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_1BF9AFE64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)va2);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'siri::dialogengine::Text::~Text(siri::dialogengine::Text *this)
{
  void **v2;

  *((_QWORD *)this - 8) = off_1E7933D08;
  v2 = (void **)((char *)this - 64);
  *(_QWORD *)this = &unk_1E7933D60;
  siri::dialogengine::SpeakableString::~SpeakableString((void **)this + 18);
  *v2 = off_1E793A6B0;
  *(_QWORD *)this = &unk_1E793A708;
  if (*((char *)this + 127) < 0)
    operator delete(*((void **)this + 13));
  if (*((char *)this + 103) < 0)
    operator delete(*((void **)this + 10));
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  *(_QWORD *)this = off_1E793AED8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((_QWORD **)this + 2));
  siri::dialogengine::LineNumberBase::~LineNumberBase(v2);
}

{
  siri::dialogengine::Text::~Text((siri::dialogengine::Text *)((char *)this - 64));
}

uint64_t `non-virtual thunk to'siri::dialogengine::Text::Validate(const void ***this, siri::dialogengine::Context *a2)
{
  return siri::dialogengine::Text::Validate(this - 8, a2);
}

std::string *siri::dialogengine::Text::SetValue(siri::dialogengine::Text *this, const std::string *a2)
{
  std::string::operator=((std::string *)((char *)this + 208), a2);
  std::string::operator=((std::string *)((char *)this + 232), a2 + 1);
  std::string::operator=((std::string *)((char *)this + 256), a2 + 2);
  std::string::operator=((std::string *)((char *)this + 280), a2 + 3);
  std::string::operator=((std::string *)((char *)this + 304), a2 + 4);
  std::string::operator=((std::string *)((char *)this + 328), a2 + 5);
  return std::string::operator=((std::string *)((char *)this + 352), a2 + 6);
}

void std::__shared_ptr_pointer<siri::dialogengine::Text *,std::shared_ptr<siri::dialogengine::Text>::__shared_ptr_default_delete<siri::dialogengine::Text,siri::dialogengine::Text>,std::allocator<siri::dialogengine::Text>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::Text *,std::shared_ptr<siri::dialogengine::Text>::__shared_ptr_default_delete<siri::dialogengine::Text,siri::dialogengine::Text>,std::allocator<siri::dialogengine::Text>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::Text *,std::shared_ptr<siri::dialogengine::Text>::__shared_ptr_default_delete<siri::dialogengine::Text,siri::dialogengine::Text>,std::allocator<siri::dialogengine::Text>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

std::string *siri::dialogengine::Text::GetValue@<X0>(siri::dialogengine::Text *this@<X0>, std::string *a2@<X8>)
{
  return siri::dialogengine::SpeakableString::SpeakableString(a2, (siri::dialogengine::Text *)((char *)this + 208));
}

uint64_t siri::dialogengine::Text::HasRequiredVariablesOrPhrases(siri::dialogengine::Text *this, siri::dialogengine::Context *a2)
{
  siri::dialogengine::SpeakableString *v2;
  uint64_t HasRequiredVariablesOrPhrases;
  const char *v4;
  void **v6[3];
  _QWORD v7[3];
  void ***v8;

  v2 = (siri::dialogengine::Text *)((char *)this + 208);
  siri::dialogengine::SpeakableString::GetSpeakChunks((siri::dialogengine::Text *)((char *)this + 208), (const char *)a2, v7);
  if ((siri::dialogengine::ChunkList::HasRequiredVariablesOrPhrases((siri::dialogengine::ChunkList *)v7) & 1) != 0)
  {
    HasRequiredVariablesOrPhrases = 1;
  }
  else if (siri::dialogengine::SpeakableString::SpeakEqualsPrint(v2))
  {
    HasRequiredVariablesOrPhrases = 0;
  }
  else
  {
    siri::dialogengine::SpeakableString::GetPrintChunks(v2, v4, v6);
    HasRequiredVariablesOrPhrases = siri::dialogengine::ChunkList::HasRequiredVariablesOrPhrases((siri::dialogengine::ChunkList *)v6);
    v8 = v6;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  }
  v6[0] = (void **)v7;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](v6);
  return HasRequiredVariablesOrPhrases;
}

void sub_1BF9B0134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(v14 - 24) = v13;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 24));
  a10 = (void **)&a13;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::Text::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = siri::dialogengine::Node::operator==(a1, a2);
  if ((_DWORD)result)
    return siri::dialogengine::SpeakableString::operator==((unsigned __int8 *)(a1 + 208), (unsigned __int8 *)(a2 + 208));
  return result;
}

uint64_t siri::dialogengine::Text::operator!=(uint64_t a1, uint64_t a2)
{
  if (siri::dialogengine::Node::operator==(a1, a2))
    return siri::dialogengine::SpeakableString::operator==((unsigned __int8 *)(a1 + 208), (unsigned __int8 *)(a2 + 208)) ^ 1;
  else
    return 1;
}

void sub_1BF9B024C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1BF9B03C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1BF9B043C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)DECryptor;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1BF9B0570(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1BF9B0658(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void siri::dialogengine::PatternFactory::Create(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  uint64_t *p_s1;
  _QWORD *v7;
  __int128 v8;
  void (**v9)(siri::dialogengine::ExecuteTableSet *__hidden);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t i;
  uint64_t v40;
  uint64_t n;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t j;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t k;
  uint64_t m;
  std::string *v65;
  std::string *v66;
  __int128 *v67;
  __int128 v68;
  void *__s1;
  _BYTE v70[32];
  __int128 v71;
  _QWORD v72[3];
  _QWORD v73[3];
  _QWORD v74[3];
  _QWORD v75[3];
  _QWORD v76[3];
  __int128 v77;

  *(_QWORD *)&v77 = *MEMORY[0x1E0C80C00];
  siri::dialogengine::StringToLower(a1, (uint64_t)&__s1);
  v3 = v70[15];
  if ((v70[15] & 0x80000000) == 0)
  {
    p_s1 = (uint64_t *)&__s1;
    switch(v70[15])
    {
      case 0x10:
        if (__s1 != (void *)0x2E6E726574746170 || *(_QWORD *)v70 != 0x746573656C626174)
          goto LABEL_191;
        goto LABEL_15;
      case 0x11:
        if (__s1 != (void *)0x2E6E726574746170 || *(_QWORD *)v70 != 0x6573746C75736572 || v70[8] != 116)
          goto LABEL_191;
        goto LABEL_63;
      case 0x12:
      case 0x18:
      case 0x19:
      case 0x1B:
      case 0x1C:
      case 0x1D:
        goto LABEL_191;
      case 0x13:
        v12 = *(_QWORD *)v70;
        v13 = *(_QWORD *)&v70[3];
        v14 = 0x737574617473726FLL;
        v15 = __s1 == (void *)0x2E6E726574746170;
        v16 = 0x617473726F727265;
        break;
      case 0x14:
        if (__s1 != (void *)0x2E6E726574746170
          || *(_QWORD *)v70 != 0x6572656C706D6973
          || *(_DWORD *)&v70[8] != 1953265011)
        {
          goto LABEL_191;
        }
        goto LABEL_81;
      case 0x15:
        v19 = *(_QWORD *)v70;
        v20 = *(_QWORD *)&v70[5];
        v21 = __s1 == (void *)0x2E6E726574746170;
        v22 = 0x736563637573;
        goto LABEL_114;
      case 0x16:
        if (__s1 != (void *)0x2E6E726574746170
          || *(_QWORD *)v70 != 0x64656C6961746564
          || *(_QWORD *)&v70[6] != 0x746C757365726465)
        {
          goto LABEL_113;
        }
        goto LABEL_157;
      case 0x17:
        v12 = *(_QWORD *)v70;
        v13 = *(_QWORD *)&v70[7];
        v14 = 0x7375746174736465;
        v15 = __s1 == (void *)0x2E6E726574746170;
        v16 = 0x656C6C65636E6163;
        break;
      case 0x1A:
        goto LABEL_161;
      case 0x1E:
        goto LABEL_181;
      default:
        goto LABEL_174;
    }
    if (!v15 || v12 != v16 || v13 != v14)
      goto LABEL_191;
    goto LABEL_138;
  }
  switch(*(_QWORD *)v70)
  {
    case 0x10:
      if (*(_QWORD *)__s1 != 0x2E6E726574746170 || *((_QWORD *)__s1 + 1) != 0x746573656C626174)
        goto LABEL_102;
LABEL_15:
      v7 = operator new(0x80uLL);
      v7[1] = 0;
      v7[2] = 0;
      *v7 = &off_1E7930C78;
      v8 = 0uLL;
      *((_OWORD *)v7 + 2) = 0u;
      *((_OWORD *)v7 + 3) = 0u;
      *((_OWORD *)v7 + 4) = 0u;
      *((_OWORD *)v7 + 5) = 0u;
      v9 = &off_1E7932F38;
      goto LABEL_158;
    case 0x11:
      if (*(_QWORD *)__s1 != 0x2E6E726574746170
        || *((_QWORD *)__s1 + 1) != 0x6573746C75736572
        || *((_BYTE *)__s1 + 16) != 116)
      {
        goto LABEL_102;
      }
LABEL_63:
      v7 = operator new(0x80uLL);
      v7[1] = 0;
      v7[2] = 0;
      *v7 = &off_1E7930C00;
      v8 = 0uLL;
      *((_OWORD *)v7 + 2) = 0u;
      *((_OWORD *)v7 + 3) = 0u;
      *((_OWORD *)v7 + 4) = 0u;
      *((_OWORD *)v7 + 5) = 0u;
      v9 = &off_1E7930C50;
      goto LABEL_158;
    case 0x13:
      if (*(_QWORD *)__s1 == 0x2E6E726574746170
        && *((_QWORD *)__s1 + 1) == 0x617473726F727265
        && *(_QWORD *)((char *)__s1 + 11) == 0x737574617473726FLL)
      {
        goto LABEL_138;
      }
      if ((v70[15] & 0x80) == 0)
        goto LABEL_191;
      goto LABEL_102;
    case 0x14:
      if (*(_QWORD *)__s1 != 0x2E6E726574746170
        || *((_QWORD *)__s1 + 1) != 0x6572656C706D6973
        || *((_DWORD *)__s1 + 4) != 1953265011)
      {
        goto LABEL_102;
      }
LABEL_81:
      std::string::basic_string[abi:ne180100]<0>(&v71, "Sash");
      std::string::basic_string[abi:ne180100]<0>(v72, "Item");
      std::string::basic_string[abi:ne180100]<0>(v73, "Attribution");
      std::string::basic_string[abi:ne180100]<0>(v74, "Reference");
      std::string::basic_string[abi:ne180100]<0>(v75, "Prompt");
      v65 = 0;
      v66 = 0;
      v67 = 0;
      *(_QWORD *)&v70[16] = &v65;
      v70[24] = 0;
      v65 = (std::string *)operator new(0x78uLL);
      v66 = v65;
      v67 = (__int128 *)&v65[5];
      v66 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v67, &v71, (__int128 *)v76, v65);
      std::allocate_shared[abi:ne180100]<siri::dialogengine::ExecutePatternSimple,std::allocator<siri::dialogengine::ExecutePatternSimple>,std::vector<std::string>,void>((uint64_t *)&v68, (__int128 **)&v65);
      *(_OWORD *)a2 = v68;
      *(_QWORD *)&v70[16] = &v65;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70[16]);
      for (i = 0; i != -15; i -= 3)
      {
        if (SHIBYTE(v75[i + 2]) < 0)
          operator delete((void *)v75[i]);
      }
      goto LABEL_204;
    case 0x15:
      if (*(_QWORD *)__s1 == 0x2E6E726574746170
        && *((_QWORD *)__s1 + 1) == 0x7373736563637573
        && *(_QWORD *)((char *)__s1 + 13) == 0x7375746174737373)
      {
        goto LABEL_138;
      }
      goto LABEL_102;
    case 0x16:
      if (*(_QWORD *)__s1 != 0x2E6E726574746170
        || *((_QWORD *)__s1 + 1) != 0x64656C6961746564
        || *(_QWORD *)((char *)__s1 + 14) != 0x746C757365726465)
      {
        goto LABEL_102;
      }
LABEL_157:
      v7 = operator new(0x80uLL);
      v7[1] = 0;
      v7[2] = 0;
      *v7 = &off_1E7930D18;
      v8 = 0uLL;
      *((_OWORD *)v7 + 2) = 0u;
      *((_OWORD *)v7 + 3) = 0u;
      *((_OWORD *)v7 + 4) = 0u;
      *((_OWORD *)v7 + 5) = 0u;
      v9 = &off_1E7933A40;
LABEL_158:
      *((_OWORD *)v7 + 6) = v8;
      *((_OWORD *)v7 + 7) = v8;
      v7[3] = v9;
      *(_QWORD *)a2 = v7 + 3;
      *(_QWORD *)(a2 + 8) = v7;
      goto LABEL_204;
    default:
LABEL_102:
      if (*(_QWORD *)v70 != 23)
        goto LABEL_123;
      if (*(_QWORD *)__s1 == 0x2E6E726574746170
        && *((_QWORD *)__s1 + 1) == 0x656C6C65636E6163
        && *(_QWORD *)((char *)__s1 + 15) == 0x7375746174736465)
      {
        goto LABEL_138;
      }
      if ((v70[15] & 0x80) != 0)
      {
LABEL_123:
        if (*(_QWORD *)v70 == 22)
        {
          if (*(_QWORD *)__s1 == 0x2E6E726574746170
            && *((_QWORD *)__s1 + 1) == 0x73736572676F7270
            && *(_QWORD *)((char *)__s1 + 14) == 0x7375746174737373)
          {
            goto LABEL_138;
          }
          if ((v70[15] & 0x80) == 0)
            goto LABEL_191;
        }
        if (*(_QWORD *)v70 == 41)
        {
          if (!memcmp(__s1, "pattern.simpledisambiguationclarification", 0x29uLL))
            goto LABEL_176;
          if ((v3 & 0x80) == 0)
          {
            if (v3 == 26)
            {
LABEL_156:
              p_s1 = (uint64_t *)&__s1;
              goto LABEL_161;
            }
            if (v3 != 30)
              goto LABEL_191;
            goto LABEL_181;
          }
        }
        if (*(_QWORD *)v70 != 30)
          goto LABEL_159;
        if (*(_QWORD *)__s1 != 0x2E6E726574746170
          || *((_QWORD *)__s1 + 1) != 0x65646E656E65706FLL
          || *((_QWORD *)__s1 + 2) != 0x69666972616C6364
          || *(_QWORD *)((char *)__s1 + 22) != 0x6E6F697461636966)
        {
          if ((v3 & 0x80) == 0)
          {
LABEL_155:
            if (v3 != 26)
              goto LABEL_191;
            goto LABEL_156;
          }
LABEL_159:
          if (*(_QWORD *)v70 != 26)
            goto LABEL_191;
          p_s1 = (uint64_t *)__s1;
LABEL_161:
          v49 = *p_s1;
          v50 = p_s1[1];
          v51 = p_s1[2];
          v52 = *((unsigned __int16 *)p_s1 + 12);
          if (v49 != 0x2E6E726574746170 || v50 != 0x616C636F6E736579 || v51 != 0x6974616369666972 || v52 != 28271)
            goto LABEL_191;
        }
LABEL_176:
        std::string::basic_string[abi:ne180100]<0>(&v71, "Sash");
        std::string::basic_string[abi:ne180100]<0>(v72, "Preview");
        std::string::basic_string[abi:ne180100]<0>(v73, "Attribution");
        std::string::basic_string[abi:ne180100]<0>(v74, "Reference");
        std::string::basic_string[abi:ne180100]<0>(v75, "Prompt");
        v65 = 0;
        v66 = 0;
        v67 = 0;
        *(_QWORD *)&v70[16] = &v65;
        v70[24] = 0;
        v65 = (std::string *)operator new(0x78uLL);
        v66 = v65;
        v67 = (__int128 *)&v65[5];
        v66 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v67, &v71, (__int128 *)v76, v65);
        std::allocate_shared[abi:ne180100]<siri::dialogengine::ExecutePatternSimple,std::allocator<siri::dialogengine::ExecutePatternSimple>,std::vector<std::string>,void>((uint64_t *)&v68, (__int128 **)&v65);
        *(_OWORD *)a2 = v68;
        v68 = 0uLL;
        *(_QWORD *)&v70[16] = &v65;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70[16]);
        for (j = 0; j != -15; j -= 3)
        {
          if (SHIBYTE(v75[j + 2]) < 0)
            operator delete((void *)v75[j]);
        }
        goto LABEL_204;
      }
      if (v70[15] > 0x1Du)
      {
        if (v70[15] != 30)
        {
LABEL_174:
          if (v70[15] != 41 || memcmp(&__s1, "pattern.simpledisambiguationclarification", 0x29uLL))
            goto LABEL_191;
          goto LABEL_176;
        }
LABEL_181:
        if (__s1 != (void *)0x2E6E726574746170
          || *(_QWORD *)v70 != 0x65646E656E65706FLL
          || *(_QWORD *)&v70[8] != 0x69666972616C6364
          || *(_QWORD *)&v70[14] != 0x6E6F697461636966)
        {
          goto LABEL_191;
        }
        goto LABEL_176;
      }
      if (v70[15] != 22)
        goto LABEL_155;
LABEL_113:
      v19 = *(_QWORD *)v70;
      v20 = *(_QWORD *)&v70[6];
      v21 = __s1 == (void *)0x2E6E726574746170;
      v22 = 0x6572676F7270;
LABEL_114:
      v40 = v22 & 0xFFFFFFFFFFFFLL | 0x7373000000000000;
      if (!v21 || v19 != v40 || v20 != 0x7375746174737373)
      {
LABEL_191:
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__s1, "pattern.detaileddisambiguationclarification"))
        {
          v60 = operator new(0x80uLL);
          v60[1] = 0;
          v60[2] = 0;
          *v60 = &off_1E7930D68;
          *((_OWORD *)v60 + 2) = 0u;
          *((_OWORD *)v60 + 3) = 0u;
          *((_OWORD *)v60 + 4) = 0u;
          *((_OWORD *)v60 + 5) = 0u;
          *((_OWORD *)v60 + 6) = 0u;
          *((_OWORD *)v60 + 7) = 0u;
          v60[3] = &off_1E7930DB8;
          *(_QWORD *)a2 = v60 + 3;
          *(_QWORD *)(a2 + 8) = v60;
          v71 = 0uLL;
          std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v71);
        }
        else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__s1, "pattern.multilevelresultset"))
        {
          v61 = operator new(0x80uLL);
          v61[1] = 0;
          v61[2] = 0;
          *v61 = &off_1E7930DE0;
          *((_OWORD *)v61 + 2) = 0u;
          *((_OWORD *)v61 + 3) = 0u;
          *((_OWORD *)v61 + 4) = 0u;
          *((_OWORD *)v61 + 5) = 0u;
          *((_OWORD *)v61 + 6) = 0u;
          *((_OWORD *)v61 + 7) = 0u;
          v61[3] = &off_1E7934540;
          *(_QWORD *)a2 = v61 + 3;
          *(_QWORD *)(a2 + 8) = v61;
          v71 = 0uLL;
          std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v71);
        }
        else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__s1, "prompt.detaileddisambiguationprompt"))
        {
          v62 = operator new(0x80uLL);
          v62[1] = 0;
          v62[2] = 0;
          *v62 = &off_1E7930E30;
          *((_OWORD *)v62 + 2) = 0u;
          *((_OWORD *)v62 + 3) = 0u;
          *((_OWORD *)v62 + 4) = 0u;
          *((_OWORD *)v62 + 5) = 0u;
          *((_OWORD *)v62 + 6) = 0u;
          *((_OWORD *)v62 + 7) = 0u;
          v62[3] = &off_1E7935EC0;
          *(_QWORD *)a2 = v62 + 3;
          *(_QWORD *)(a2 + 8) = v62;
          v71 = 0uLL;
          std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v71);
        }
        else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__s1, "prompt.simpledisambiguationprompt")|| std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__s1, "prompt.openendedprompt")|| std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__s1, "prompt.yesnoprompt"))
        {
          std::string::basic_string[abi:ne180100]<0>(&v71, "Sash");
          std::string::basic_string[abi:ne180100]<0>(v72, "Prompt");
          std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v65, &v71, 2uLL);
          std::allocate_shared[abi:ne180100]<siri::dialogengine::ExecutePatternSimple,std::allocator<siri::dialogengine::ExecutePatternSimple>,std::vector<std::string>,void>((uint64_t *)&v70[16], (__int128 **)&v65);
          *(_OWORD *)a2 = *(_OWORD *)&v70[16];
          *(_OWORD *)&v70[16] = 0uLL;
          std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v70[16]);
          *(_QWORD *)&v68 = &v65;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
          for (k = 0; k != -6; k -= 3)
          {
            if (SHIBYTE(v72[k + 2]) < 0)
              operator delete((void *)v72[k]);
          }
        }
        else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__s1, "pattern.disambiguationclarification"))
        {
          std::string::basic_string[abi:ne180100]<0>(&v71, "Sash");
          std::string::basic_string[abi:ne180100]<0>(v72, "Preview");
          std::string::basic_string[abi:ne180100]<0>(v73, "Attribution");
          std::string::basic_string[abi:ne180100]<0>(v74, "Prompt");
          std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v65, &v71, 4uLL);
          std::allocate_shared[abi:ne180100]<siri::dialogengine::ExecutePatternSimple,std::allocator<siri::dialogengine::ExecutePatternSimple>,std::vector<std::string>,void>((uint64_t *)&v70[16], (__int128 **)&v65);
          *(_OWORD *)a2 = *(_OWORD *)&v70[16];
          *(_OWORD *)&v70[16] = 0uLL;
          std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v70[16]);
          *(_QWORD *)&v68 = &v65;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
          for (m = 0; m != -12; m -= 3)
          {
            if (SHIBYTE(v74[m + 2]) < 0)
              operator delete((void *)v74[m]);
          }
        }
        else
        {
          *(_QWORD *)a2 = 0;
          *(_QWORD *)(a2 + 8) = 0;
        }
        goto LABEL_204;
      }
LABEL_138:
      std::string::basic_string[abi:ne180100]<0>(&v71, "Sash");
      std::string::basic_string[abi:ne180100]<0>(v72, "Preview");
      std::string::basic_string[abi:ne180100]<0>(v73, "Attribution");
      std::string::basic_string[abi:ne180100]<0>(v74, "Reference");
      std::string::basic_string[abi:ne180100]<0>(v75, "Status");
      std::string::basic_string[abi:ne180100]<0>(v76, "Prompt");
      v65 = 0;
      v66 = 0;
      v67 = 0;
      *(_QWORD *)&v70[16] = &v65;
      v70[24] = 0;
      v65 = (std::string *)operator new(0x90uLL);
      v66 = v65;
      v67 = (__int128 *)&v65[6];
      v66 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v67, &v71, &v77, v65);
      std::allocate_shared[abi:ne180100]<siri::dialogengine::ExecutePatternSimple,std::allocator<siri::dialogengine::ExecutePatternSimple>,std::vector<std::string>,void>((uint64_t *)&v68, (__int128 **)&v65);
      *(_OWORD *)a2 = v68;
      *(_QWORD *)&v70[16] = &v65;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v70[16]);
      for (n = 0; n != -18; n -= 3)
      {
        if (SHIBYTE(v76[n + 2]) < 0)
          operator delete((void *)v76[n]);
      }
LABEL_204:
      if ((v70[15] & 0x80000000) != 0)
        operator delete(__s1);
      return;
  }
}

void sub_1BF9B13B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v43;

  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  v43 = 0;
  while (1)
  {
    if (*(&a42 + v43) < 0)
      operator delete(*(void **)((char *)&a37 + v43));
    v43 -= 24;
    if (v43 == -96)
    {
      if (a21 < 0)
        operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t std::allocate_shared[abi:ne180100]<siri::dialogengine::ExecutePatternSimple,std::allocator<siri::dialogengine::ExecutePatternSimple>,std::vector<std::string>,void>(uint64_t *a1, __int128 **a2)
{
  _QWORD *v4;
  uint64_t result;

  v4 = operator new(0x98uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E7930CC8;
  result = siri::dialogengine::ExecutePatternSimple::ExecutePatternSimple((uint64_t)(v4 + 3), a2);
  *a1 = result;
  a1[1] = (uint64_t)v4;
  return result;
}

void sub_1BF9B1684(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::string>::vector[abi:ne180100](uint64_t a1, __int128 *a2, unint64_t a3)
{
  uint64_t v4;

  *(_QWORD *)(a1 + 16) = 0;
  v4 = a1 + 16;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  if (a3)
  {
    std::vector<std::string>::__vallocate[abi:ne180100]((_QWORD *)a1, a3);
    *(_QWORD *)(a1 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(v4, a2, (__int128 *)((char *)a2 + 24 * a3), *(std::string **)(a1 + 8));
  }
  return a1;
}

void sub_1BF9B1718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<siri::dialogengine::ExecuteDetailedDisambiguationPrompt>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7930E30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::dialogengine::ExecuteDetailedDisambiguationPrompt>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7930E30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::ExecuteDetailedDisambiguationPrompt>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<siri::dialogengine::ExecuteMultiLevelResultSet>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7930DE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::dialogengine::ExecuteMultiLevelResultSet>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7930DE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::ExecuteMultiLevelResultSet>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<siri::dialogengine::ExecuteDetailedDisambiguationClarification>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7930D68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::dialogengine::ExecuteDetailedDisambiguationClarification>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7930D68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::ExecuteDetailedDisambiguationClarification>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<siri::dialogengine::ExecuteDetailedResult>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7930D18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::dialogengine::ExecuteDetailedResult>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7930D18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::ExecuteDetailedResult>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<siri::dialogengine::ExecutePatternSimple>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7930CC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::dialogengine::ExecutePatternSimple>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7930CC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::ExecutePatternSimple>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<siri::dialogengine::ExecuteTableSet>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7930C78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::dialogengine::ExecuteTableSet>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7930C78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::ExecuteTableSet>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<siri::dialogengine::ExecuteResultSet>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7930C00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::dialogengine::ExecuteResultSet>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7930C00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::ExecuteResultSet>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t GetProfanityFilter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  int v5;
  uint64_t v12;
  int *v13;
  int v17;
  int v18;
  uint64_t result;
  _WORD *v22;
  BOOL v24;
  BOOL v27;
  uint64_t v28;
  unsigned __int8 v29;
  _WORD *v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  BOOL v33;
  unsigned __int8 v35;
  int v36;
  int v37;
  unsigned __int8 v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  unsigned __int8 v42;
  unsigned __int8 v43;
  unsigned __int8 v44;
  uint64_t i;
  uint64_t nn;
  uint64_t j;
  uint64_t k;
  uint64_t n;
  uint64_t mm;
  uint64_t m;
  uint64_t ii;
  uint64_t jj;
  uint64_t kk;
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[6];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[6];
  _QWORD v88[6];
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  _QWORD v92[6];
  _QWORD v93[6];
  _QWORD v94[6];
  _QWORD v95[6];
  _QWORD v96[6];
  _QWORD v97[6];
  _QWORD v98[6];
  _QWORD v99[6];
  _QWORD v100[6];
  _QWORD v101[6];
  _QWORD v102[6];
  _QWORD v103[6];
  _QWORD v104[6];
  _QWORD v105[6];
  _QWORD v106[6];
  _QWORD v107[6];
  _QWORD v108[6];
  _QWORD v109[6];
  _QWORD v110[6];
  _QWORD v111[6];
  _QWORD v112[6];
  _QWORD v113[6];
  _QWORD v114[6];
  _QWORD v115[6];
  _QWORD v116[6];
  _QWORD v117[6];
  _QWORD v118[6];
  _QWORD v119[6];
  _QWORD v120[6];
  _QWORD v121[6];
  _QWORD v122[6];
  _QWORD v123[6];
  _QWORD v124[6];
  _QWORD v125[6];
  _QWORD v126[6];
  _QWORD v127[6];
  _QWORD v128[6];
  _QWORD v129[6];
  _QWORD v130[6];
  _QWORD v131[6];
  _QWORD v132[6];
  _QWORD v133[6];
  _QWORD v134[6];
  _QWORD v135[6];
  _QWORD v136[6];
  _QWORD v137[6];
  _QWORD v138[6];
  _QWORD v139[6];
  _QWORD v140[6];
  _QWORD v141[6];
  _QWORD v142[6];
  _QWORD v143[6];
  _QWORD v144[6];
  _QWORD v145[6];
  _QWORD v146[6];
  _QWORD v147[6];
  _QWORD v148[6];
  _QWORD v149[6];
  _QWORD v150[6];
  _QWORD v151[6];
  _QWORD v152[6];
  _QWORD v153[6];
  _QWORD v154[6];
  _QWORD v155[6];
  _QWORD v156[6];
  _QWORD v157[6];
  _QWORD v158[6];
  _QWORD v159[6];
  _QWORD v160[6];
  _QWORD v161[6];
  _QWORD v162[6];
  _QWORD v163[6];
  _QWORD v164[6];
  _QWORD v165[6];
  _QWORD v166[6];
  _QWORD v167[6];
  _QWORD v168[6];
  _QWORD v169[6];
  _QWORD v170[6];
  _QWORD v171[6];
  _QWORD v172[6];
  _QWORD v173[6];
  _QWORD v174[6];
  _QWORD v175[6];
  _QWORD v176[6];
  _QWORD v177[6];
  _QWORD v178[6];
  _QWORD v179[6];
  _QWORD v180[6];
  _QWORD v181[6];
  _QWORD v182[6];
  _QWORD v183[6];
  _QWORD v184[6];
  _QWORD v185[6];
  _QWORD v186[6];
  _QWORD v187[6];
  _QWORD v188[6];
  _QWORD v189[6];
  _QWORD v190[6];
  _QWORD v191[6];
  _QWORD v192[6];
  _QWORD v193[6];
  _QWORD v194[6];
  _QWORD v195[6];
  _QWORD v196[6];
  _QWORD v197[6];
  _QWORD v198[6];
  _QWORD v199[6];
  _QWORD v200[6];
  _QWORD v201[6];
  _QWORD v202[6];
  _QWORD v203[6];
  _QWORD v204[6];
  _QWORD v205[6];
  _QWORD v206[6];
  _QWORD v207[6];
  _QWORD v208[6];
  _QWORD v209[6];
  _QWORD v210[6];
  _QWORD v211[6];
  _QWORD v212[6];
  _QWORD v213[6];
  _QWORD v214[6];
  _QWORD v215[6];
  _QWORD v216[6];
  _QWORD v217[6];
  _QWORD v218[6];
  _QWORD v219[6];
  _QWORD v220[6];
  _QWORD v221[6];
  _QWORD v222[6];
  _QWORD v223[6];
  _QWORD v224[6];
  _QWORD v225[6];
  _QWORD v226[6];
  _QWORD v227[6];
  _QWORD v228[6];
  _QWORD v229[6];
  _QWORD v230[6];
  _QWORD v231[6];
  _QWORD v232[6];
  _QWORD v233[6];
  _QWORD v234[6];
  _QWORD v235[6];
  _QWORD v236[6];
  _QWORD v237[6];
  _QWORD v238[6];
  _QWORD v239[6];
  _QWORD v240[6];
  _QWORD v241[6];
  _QWORD v242[6];
  _QWORD v243[6];
  _QWORD v244[6];
  _QWORD v245[6];
  _QWORD v246[6];
  _QWORD v247[6];
  _QWORD v248[6];
  _QWORD v249[6];
  _QWORD v250[6];
  _QWORD v251[6];
  _QWORD v252[6];
  _QWORD v253[6];
  _QWORD v254[6];
  _QWORD v255[6];
  _QWORD v256[6];
  _QWORD v257[6];
  _QWORD v258[6];
  _QWORD v259[6];
  _QWORD v260[6];
  _QWORD v261[6];
  _QWORD v262[6];
  _QWORD v263[6];
  _QWORD v264[6];
  _QWORD v265[6];
  _QWORD v266[6];
  _QWORD v267[6];
  _QWORD v268[6];
  _QWORD v269[6];
  _QWORD v270[6];
  _QWORD v271[6];
  _QWORD v272[6];
  _QWORD v273[6];
  _QWORD v274[6];
  _QWORD v275[6];
  _QWORD v276[6];
  _QWORD v277[6];
  _QWORD v278[6];
  _QWORD v279[6];
  _QWORD v280[6];
  _QWORD v281[6];
  _QWORD v282[6];
  _QWORD v283[6];
  _QWORD v284[6];
  _QWORD v285[6];
  _QWORD v286[7];

  v1 = MEMORY[0x1E0C80A78](a1);
  v2 = (_QWORD *)v1;
  v4 = v3;
  v286[6] = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned __int8 *)(v1 + 23);
  if (*(char *)(v1 + 23) < 0)
  {
    v12 = *(_QWORD *)(v1 + 8);
    if (v12 != 2)
    {
      if (v12 == 3)
      {
        if (**(_WORD **)v1 == 30073 && *(_BYTE *)(*(_QWORD *)v1 + 2) == 101)
        {
LABEL_94:
          if ((v29 & 1) == 0
          {
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[4],0>(v55, "up乜春", "***");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[3],0>(v56, "on9", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v57, "黑鬼", "黑*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v58, "黐脷筋", "**筋");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v59, "黐筋", "*筋");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v60, "黐孖筋", "**筋");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v61, "麻甩佬", "**佬");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v62, "鸠", "*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v63, "食撚屎", "食**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v64, "食屎", "食*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v65, "颜射", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[5],0>(v66, "顶你个肺", "****");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v67, "霎昂", "*昂");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v68, "閪头", "*头");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v69, "閪", "*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v70, "躝瘫", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v71, "躝坦", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v72, "足交", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v73, "贱精", "*精");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v74, "贱种", "*种");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v75, "贱格", "*格");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v76, "贱", "*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v77, "西头", "*头");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v78, "茂里", "*里");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v79, "臭閪", "臭*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v80, "臭西", "臭*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v81, "臭屄", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v82, "脚交", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v83, "肛交", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v84, "肏", "*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v85, "粉肠", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v86, "粉皮", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v87, "笨柒", "笨*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v88, "碌柒", "碌*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v89, "白鬼", "白*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v90, "痴鸠线", "**线");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v91, "痴线", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v92, "痴撚线", "**线");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v93, "生仔无屎窟", "生仔***");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v94, "生仔无屎忽", "生仔***");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[10],0>(v95, "生仔冇屎忽", "生仔***");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v96, "玩撚完", "玩*完");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v97, "猪閪", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v98, "猪兜", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v99, "猪乸", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v100, "死柒头", "**头");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v101, "柒头", "*头");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v102, "柒", "*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v103, "条条揈", "**揈");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v104, "杂种", "*种");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v105, "晏昼屌你屎忽窿", "晏昼*****");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[11],0>(v106, "晏昼屌你屎忽", "晏昼****");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[12],0>(v107, "晏昼叼你屎忽窿", "晏昼*****");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[11],0>(v108, "晏昼叼你屎忽", "晏昼****");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v109, "是撚但", "是*但");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v110, "是尻但", "是*但");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v111, "春袋", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v112, "昂居", "昂*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v113, "收皮啦", "**啦");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v114, "收皮", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v115, "收皮", "收*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v116, "收爹", "收*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v117, "操你妈", "**妈");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v118, "撚野", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v119, "撚样", "*样");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v120, "撚屌", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v121, "撚", "*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v122, "搅嘢", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v123, "援交妹", "**妹");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v124, "援交", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v125, "指交", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v126, "拾下拾下", "*下*下");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v127, "把撚", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v128, "扯旗", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v129, "打飞机", "打**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v130, "打靶仔", "**仔");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v131, "打潜艇", "打**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v132, "打柒佢", "**佢");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v133, "打手枪", "打**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v134, "扑野", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v135, "扑街女", "**女");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v136, "扑街仔", "**仔");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v137, "扑街", "*街");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v138, "扑晒街", "**街");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[14],0>(v139, "成嚿叉烧咁", "成嚿*烧咁");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v140, "戆鸠鸠", "***");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v141, "戆鸠", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v142, "戆胶", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v143, "戆撚鸠", "***");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v144, "戆居", "戆*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v145, "懵盛盛", "懵**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v146, "废柴", "*柴");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v147, "干你娘", "**娘");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v148, "屎忽鬼", "***");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v149, "屌那星", "**星");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v150, "屌那妈", "***");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v151, "屌柒", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v152, "屌揾你", "**你");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v153, "屌屌揈", "**揈");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v154, "屌屄", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v155, "屌尻爆你", "***你");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v156, "屌尻你", "**你");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v157, "屌尻", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v158, "屌佢", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v159, "屌你老母閪", "*你***");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[9],0>(v160, "屌你老母臭閪", "*你****");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v161, "屌你老母", "*你**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v162, "屌你老味閪", "*你***");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v163, "屌你老味", "*你**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v164, "屌你老味", "*你**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v165, "屌你", "*你");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v166, "屌", "*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v167, "屄", "*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v168, "尻", "*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v169, "小喇叭", "小**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v170, "射精", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v171, "孤鸠寒", "孤*寒");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v172, "妖", "*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v173, "好on9", "好**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v174, "好撚on9", "好****");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v175, "好撚柒", "好**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v176, "好撚", "好*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v177, "契弟", "*弟");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v178, "大鸠镬", "大**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v179, "大波", "大*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v180, "大撚镬", "大*镬");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v181, "多鸠余", "多*余");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v182, "含撚", "含*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v183, "叼那妈", "***");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v184, "叼柒", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v185, "叼揾你", "**你");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v186, "叼屄", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v187, "叼尻", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v188, "叼叼揈", "**揈");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v189, "叼你老母", "*你**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v190, "叼你", "*你");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v191, "叼", "*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v192, "叫鸭", "叫*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v193, "叫鸡", "叫*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v194, "口爆", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v195, "口交", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v196, "冚家铲", "***");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v197, "冚家铲", "**铲");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v198, "冚家拎", "**拎");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v199, "冚家富贵", "**富贵");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v200, "兽交", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v201, "八婆", "*婆");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v202, "八公", "*公");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v203, "做咩撚", "做咩*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v204, "做乜撚野", "做乜**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v205, "做乜撚嘢", "做乜**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v206, "做乜撚", "做乜*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v207, "你老母", "你**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v208, "你老尾", "你**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v209, "你老味", "你**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v210, "你好on9", "你好**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v211, "你卤味", "你**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v212, "低B", "低*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v213, "他妈的", "他*的");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[11],0>(v214, "今朝拮你箩柚", "今朝****");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v215, "仆街女", "**女");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v216, "仆街仔", "**仔");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v217, "仆街", "*街");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v218, "仆晒街", "**街");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v219, "仆你个街", "**个*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v220, "仆你个臭街", "**个**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v221, "乸型", "*型");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v222, "乳交", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v223, "乜鸠", "乜*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v224, "一楼一凤", "一*一*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v225, "一楼一", "一*一");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v226, "SM", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v227, "3P", "3*");
            std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_yue(void)::sProfanityData_yue, (uint64_t)v55, 0xADuLL);
            for (i = 0; i != -1038; i -= 6)
              std::pair<std::string const,std::string>::~pair((uint64_t)&v227[i]);
            __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_yue(void)::sProfanityData_yue, &dword_1BF794000);
          }
          *v4 = 0;
          v4[1] = 0;
          v4[2] = 0;
          return (uint64_t)std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v4, GetProfanityFilter_yue(void)::sProfanityData_yue[0], unk_1EF582228, 0xAAAAAAAAAAAAAAABLL* ((unk_1EF582228 - GetProfanityFilter_yue(void)::sProfanityData_yue[0]) >> 4));
        }
      }
      else if (v12 == 5)
      {
        v13 = *(int **)v1;
        if (**(_DWORD **)v1 == 1230992489 && *(_BYTE *)(*(_QWORD *)v1 + 4) == 84)
        {
LABEL_106:
          if ((v32 & 1) == 0
          {
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[23],0>(v55, "vai a fare in culo", "v********************o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[19],0>(v56, "testa di minchia", "t****************a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v57, "porco dio", "p********o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[15],0>(v58, "porca puttana", "p************a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[23],0>(v59, "mannaggia la madonna", "m********************a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[18],0>(v60, "mannaggia cristo", "m***************o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[15],0>(v61, "madonna troia", "m************a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[16],0>(v62, "madonna maiala", "m*************a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[18],0>(v63, "madonna impestata", "m***************a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[18],0>(v64, "figlio di troia", "f***************a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[20],0>(v65, "figlio di puttana", "f*****************a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[18],0>(v66, "figlia di troia", "f***************a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[20],0>(v67, "figlia di puttana", "f*****************a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[13],0>(v68, "dio stronzo", "d**********o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v69, "dio porco", "d********o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[11],0>(v70, "dio ladro", "d********o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(v71, "dio fa", "d*****a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[16],0>(v72, "brutta stronza", "b*************a");
            std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_it_IT(void)::sProfanityData_it_IT, (uint64_t)v55, 0x12uLL);
            for (j = 102; j != -6; j -= 6)
              std::pair<std::string const,std::string>::~pair((uint64_t)&v55[j]);
            __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_it_IT(void)::sProfanityData_it_IT, &dword_1BF794000);
          }
          *v4 = 0;
          v4[1] = 0;
          v4[2] = 0;
          return (uint64_t)std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v4, GetProfanityFilter_it_IT(void)::sProfanityData_it_IT[0], unk_1EF582208, 0xAAAAAAAAAAAAAAABLL* ((unk_1EF582208 - GetProfanityFilter_it_IT(void)::sProfanityData_it_IT[0]) >> 4));
        }
        if (*v13 == 1348433008 && *((_BYTE *)v13 + 4) == 84)
        {
LABEL_124:
          if ((v35 & 1) == 0
          {
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v55, "xanax", "x***x");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v56, "viadao", "v****o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v57, "viada", "v***a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v58, "veadao", "v****o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v59, "veada", "v***a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v60, "veadão", "v****o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v61, "vagabunda", "v*******a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v62, "vadia", "v***a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v63, "trolha", "t****a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v64, "transe-me", "t*******e");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v65, "transa-la", "t*******a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v66, "tomar no cu", "t*********u");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v67, "sapatao", "s*****o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v68, "sapatão", "s*****o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v69, "rabudona", "r******a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v70, "rabudo", "r****o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v71, "rabudao", "r*****o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v72, "rabuda", "r****a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v73, "rabudão", "r*****o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v74, "porra", "p***a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v75, "pixereca", "p******a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v76, "pemba", "p***a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v77, "mariquinhas", "m*********s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v78, "mariquinha", "m********a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v79, "maricas", "m*****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v80, "marica", "m****a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v81, "fodo", "f**o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v82, "fodido", "f****o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v83, "fodemos", "f*****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v84, "fodam", "f***m");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v85, "foda-se", "f*****e");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v86, "foda", "f**a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v87, "fodê", "f**ê");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v88, "filho da puta", "f***********a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v89, "fdp", "f*p");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v90, "escroto", "e*****o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v91, "ejaculei-me", "e*********e");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v92, "corrê", "c***ê");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v93, "cornuda", "c*****a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v94, "corno", "c***o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v95, "corna", "c***a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v96, "cona", "c**a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v97, "colhões", "c*****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v98, "cocô", "c**ô");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v99, "cacete", "c****e");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v100, "cabronas", "c******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v101, "cabrona", "c*****a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v102, "cabrões", "c*****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v103, "cabrão", "c****o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v104, "broxou-me", "b*******e");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v105, "bostana", "b*****a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v106, "bosseta", "b*****a");
            std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_pt_PT(void)::sProfanityData_pt_PT, (uint64_t)v55, 0x34uLL);
            for (k = 306; k != -6; k -= 6)
              std::pair<std::string const,std::string>::~pair((uint64_t)&v55[k]);
            __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_pt_PT(void)::sProfanityData_pt_PT, &dword_1BF794000);
          }
          *v4 = 0;
          v4[1] = 0;
          v4[2] = 0;
          return (uint64_t)std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v4, GetProfanityFilter_pt_PT(void)::sProfanityData_pt_PT[0], unk_1EF582248, 0xAAAAAAAAAAAAAAABLL* ((unk_1EF582248 - GetProfanityFilter_pt_PT(void)::sProfanityData_pt_PT[0]) >> 4));
        }
        if (*v13 == 1113551984 && *((_BYTE *)v13 + 4) == 82)
        {
LABEL_140:
          if ((v41 & 1) == 0
          {
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v55, "xoxotonas", "x*******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v56, "xoxotona", "x******a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v57, "xoxotinhas", "x********s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v58, "xoxotas", "x*****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v59, "xoxotões", "x******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v60, "xoxhotas", "x******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v61, "xotinhas", "x******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v62, "xotas", "x***s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v63, "xotões", "x****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v64, "xiricas", "x*****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v65, "xirica", "x****a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v66, "xibungos", "x******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v67, "xibungo", "x*****o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v68, "xibius", "x****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v69, "xexecas", "x*****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v70, "xererecas", "x*******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v71, "xecas", "x***s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v72, "xavascas", "x******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v73, "xaninhas", "x******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v74, "xanas", "x***s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v75, "viadagens", "v*******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v76, "viadagem", "v******m");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v77, "vagabas", "v*****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v78, "vagaba", "v****a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v79, "travecos", "t******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v80, "traveco", "t*****o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v81, "traveca", "t*****a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v82, "transei", "t*****i");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v83, "transe", "t****e");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v84, "transar", "t*****r");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v85, "transa", "t****a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v86, "tobona", "t****a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v87, "tobinha", "t*****a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v88, "tobão", "t***o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v89, "tetinhas", "t******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v90, "tetões", "t****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v91, "tesudos", "t*****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v92, "tesudas", "t*****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v93, "tesoes", "t****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v94, "tesões", "t****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v95, "surubas", "s*****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v96, "siriricas", "s*******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v97, "putos", "p***s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v98, "putonas", "p*****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v99, "putinhas", "p******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v100, "putinha", "p*****a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v101, "puteiros", "p******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v102, "puteiro", "p*****o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v103, "putanas", "p*****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v104, "putão", "p***o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v105, "punheteiro", "p********o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v106, "prexerecas", "p********s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v107, "prexecas", "p******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v108, "prechecas", "p*******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v109, "pixiricas", "p*******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v110, "pirocos", "p*****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v111, "pirocas", "p*****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v112, "pirocao", "p*****o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v113, "piroca", "p****a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v114, "pirocões", "p******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v115, "pirocão", "p*****o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v116, "picões", "p****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v117, "piçou", "p***u");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v118, "piços", "p***s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v119, "piço", "p**o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v120, "piçadas", "P*****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v121, "piçada", "p****a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v122, "pexerecas", "p*******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v123, "pentelhudos", "p*********s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v124, "pentelhudo", "p********o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v125, "pentelhudas", "p*********s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v126, "pentelhuda", "p********a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v127, "pentelho", "p******o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v128, "pentelha", "p******a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v129, "olhotas", "o*****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v130, "merdosos", "m******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v131, "merdosas", "m******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v132, "merdosa", "m*****a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v133, "grelos", "g****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v134, "grelo", "g***o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v135, "grelinhos", "g*******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v136, "grelinho", "g******o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v137, "grelões", "g*****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v138, "grelão", "g****o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v139, "furnicou", "f******u");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v140, "funicou", "f*****u");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v141, "fudida", "f****a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v142, "fudi", "f**i");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v143, "fudeu", "f***u");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v144, "fuderam", "f*****m");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v145, "fuder", "f***r");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v146, "fudedor", "f*****r");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v147, "fornicou", "f******u");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v148, "fornicar", "f******r");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v149, "fodi", "f**i");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v150, "fodeu", "f***u");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v151, "foderam", "f*****m");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v152, "fodecao", "f*****o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v153, "fodeção", "f*****o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v154, "fodões", "f****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v155, "fodão", "f***o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v156, "fiofós", "f****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v157, "fiofó", "f***ó");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v158, "esporrou", "e******u");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v159, "esporrados", "e********s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v160, "esporradas", "e********s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v161, "escrotos", "e******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v162, "escrotas", "e******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v163, "escrotíssimos", "e***********s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v164, "enrabei", "e*****i");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v165, "embocetados", "e*********s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v166, "embocetado", "e********o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v167, "embocetadas", "e*********s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v168, "embocetada", "e********a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v169, "cuzudos", "c*****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v170, "cuzudas", "c*****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v171, "cuzinhos", "c******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v172, "cuzões", "c****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v173, "cus", "c*s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v174, "curras", "c****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v175, "curradas", "c******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v176, "curalhos", "c******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v177, "cunilingus", "c********s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v178, "cunilingua", "c********a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v179, "ciriricas", "c*******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v180, "chotas", "c****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v181, "chochotonas", "c*********s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v182, "chochotona", "c********a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v183, "chochotas", "c*******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v184, "chibungos", "c*******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v185, "chibungo", "c******o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v186, "chibumbos", "c*******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v187, "chibumbas", "c*******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v188, "cherecas", "c******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v189, "chechecas", "c*******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v190, "chavascas", "c*******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v191, "chavasca", "c******a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v192, "chaninhas", "c*******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v193, "chaninha", "c******a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v194, "chanas", "c****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v195, "caralhudos", "c********s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v196, "caralhos", "c******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v197, "caralhões", "c*******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v198, "cagonas", "c*****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v199, "cagona", "c****a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v200, "cagados", "c*****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v201, "cagadores", "c*******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v202, "cagador", "c*****r");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v203, "cagaço", "c****o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v204, "cagões", "c****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v205, "cabaçudos", "c*******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v206, "cabaçudas", "c*******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v207, "cabaços", "c*****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v208, "buzanfas", "b******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v209, "buzanfa", "b*****a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v210, "bussetas", "b******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v211, "bucetinhas", "b********s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v212, "bucetas", "b*****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v213, "bucetões", "b******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v214, "buças", "b***s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v215, "broxou", "b****u");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v216, "broxei", "b****i");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v217, "broxasse", "b******e");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v218, "broxados", "b******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v219, "broxado", "b*****o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v220, "broxadas", "b******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v221, "broxada", "b*****a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v222, "brochou", "b*****u");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v223, "brochei", "b*****i");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v224, "brochados", "b*******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v225, "brochado", "b******o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v226, "brochadas", "b*******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v227, "brochada", "b******a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v228, "brioquinhos", "b*********s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v229, "brioquinho", "b********o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v230, "briocuzinhos", "b**********s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v231, "briocuzinho", "b*********o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v232, "briocozinhos", "b**********s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v233, "briocozinho", "b*********o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v234, "briocos", "b*****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v235, "briocões", "b******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v236, "briocão", "b*****o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v237, "bostonas", "b******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v238, "bostona", "b*****a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v239, "bosteiros", "b*******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v240, "bostas", "b****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v241, "bostadas", "b******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v242, "bostada", "b*****a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v243, "bostões", "b*****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v244, "bostão", "b****o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v245, "boquetes", "b******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v246, "boquete", "b*****e");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v247, "boiolas", "b*****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v248, "boioladas", "b*******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v249, "boiolada", "b******a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v250, "bocetinhas", "b********s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v251, "bocetinha", "b*******a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v252, "bocetas", "b*****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v253, "boceta", "b****a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v254, "bocetões", "b******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v255, "bocetão", "b*****o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v256, "boazudas", "b******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v257, "boazuda", "b*****a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v258, "bixonas", "b*****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v259, "bixona", "b****a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v260, "bixas", "b***s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v261, "bimbas", "b****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v262, "bimbadas", "b******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v263, "bimba", "b***a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v264, "bilauzinhos", "b*********s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v265, "bilauzinho", "b********o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v266, "bilauzões", "b*******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v267, "bilauzão", "b******o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v268, "bilaus", "b****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v269, "bichonas", "b******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v270, "bichona", "b*****a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v271, "bichinhas", "b*******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v272, "bichinha", "b******a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v273, "bichas", "b****s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v274, "baranguinhas", "b**********s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v275, "baranguinha", "b*********a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v276, "barangonas", "b********s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v277, "barangona", "b*******a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v278, "barangas", "b******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v279, "baranga", "b*****a");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v280, "baitolas", "b******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v281, "aviadados", "a*******s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v282, "aviadado", "a******o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[13],0>(v283, "autofelações", "a**********s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[12],0>(v284, "autofelação", "a*********o");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v285, "abaitolados", "a*********s");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v286, "abaitolado", "a********o");
            std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_pt_BR(void)::sProfanityData_pt_BR, (uint64_t)v55, 0xE8uLL);
            for (m = 0; m != -1392; m -= 6)
              std::pair<std::string const,std::string>::~pair((uint64_t)&v286[m]);
            __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_pt_BR(void)::sProfanityData_pt_BR, &dword_1BF794000);
          }
          *v4 = 0;
          v4[1] = 0;
          v4[2] = 0;
          return (uint64_t)std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v4, GetProfanityFilter_pt_BR(void)::sProfanityData_pt_BR[0], unk_1EF582268, 0xAAAAAAAAAAAAAAABLL* ((unk_1EF582268 - GetProfanityFilter_pt_BR(void)::sProfanityData_pt_BR[0]) >> 4));
        }
        v17 = *v13;
        v18 = *((unsigned __int8 *)v13 + 4);
        if (v17 == 1214212218 && v18 == 75)
          return (uint64_t)GetProfanityFilter_zh_HK((uint64_t)v4);
        if ((v5 & 0x80) == 0)
        {
          if (v5 != 5)
            goto LABEL_57;
LABEL_21:
          if (*(_DWORD *)v1 != 1130326138 || *(_BYTE *)(v1 + 4) != 78)
          {
            if (*(_DWORD *)v1 != 1415538810 || *(_BYTE *)(v1 + 4) != 87)
              goto LABEL_84;
            goto LABEL_142;
          }
LABEL_136:
          if ((v39 & 1) == 0
          {
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v55, "鸡巴蛋", "***");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v56, "鸡巴", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v57, "鸡巴", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v58, "骚逼", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v59, "阴道", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v60, "阴道", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v61, "阴茎", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v62, "阴茎", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v63, "阳萎", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v64, "阳具", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[6],0>(v65, "长成个逼样", "*****");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v66, "迷奸", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v67, "轮奸", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[2],0>(v68, "贱B", "*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v69, "蠢货", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v70, "臭婊子", "***");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v71, "肥尻", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v72, "肛交", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v73, "肏", "*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v74, "肉洞", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v75, "肉棒", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v76, "肉棍", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v77, "粪便", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v78, "秃屌", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v79, "狗日的", "***");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v80, "狗娘养的", "狗***");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v81, "狗交", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[3],0>(v82, "狗B", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v83, "爆菊花", "***");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v84, "混蛋", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[6],0>(v85, "滚你娘的逼", "*****");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v86, "深喉", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[6],0>(v87, "日你龟儿子", "*****");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v88, "日你妈的", "***的");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v89, "日你妈", "***");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v90, "日你", "*你");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v91, "操逼", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v92, "操死", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v93, "操我", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[5],0>(v94, "操你屁眼", "****");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[7],0>(v95, "操你娘老鸡巴", "******");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v96, "操你娘", "***");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[5],0>(v97, "操你姥姥", "****");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v98, "操你妹", "***");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[6],0>(v99, "操你妈的逼", "*****");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[8],0>(v100, "操你妈的大鸡巴", "*******");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[5],0>(v101, "操你妈的B", "****");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v102, "操你妈", "***");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[5],0>(v103, "操你大爷", "****");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v104, "操你", "*你");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v105, "操他妈", "***");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[3],0>(v106, "操B", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v107, "操", "*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v108, "插死你", "***");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v109, "插我", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v110, "插她", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v111, "插你", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v112, "插他", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v113, "捅我", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v114, "捅你", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[8],0>(v115, "我靠你老娘", "我****");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v116, "我靠", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v117, "我日", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v118, "我操", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v119, "性奴", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v120, "幼交", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[5],0>(v121, "干你娘的", "****");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v122, "干你妈", "***");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[5],0>(v123, "屌你老妈", "****");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v124, "屌", "*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v125, "屄缝", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v126, "屄", "*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v127, "屁眼", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v128, "射精", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v129, "嫩逼", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v130, "婊子", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v131, "姦童", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v132, "妓女", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v133, "奸虐", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v134, "奸尸", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[5],0>(v135, "吮吸阴茎", "****");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[5],0>(v136, "后背体位", "****");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[8],0>(v137, "叼你妈的小屁屁", "*******");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v138, "口交", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v139, "勃起", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v140, "兽交", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v141, "傻逼", "傻*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v142, "傻屄", "傻*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v143, "傻B", "傻*");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v144, "你妈逼", "你**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v145, "你妈的逼", "你***");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v146, "你妈的屄", "你***");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v147, "他媽", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[4],0>(v148, "他妈的", "***");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v149, "他妈", "**");
            std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[5],0>(v150, "乳房性交", "****");
            std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_zh_CN(void)::sProfanityData_zh_CN, (uint64_t)v55, 0x60uLL);
            for (n = 0; n != -576; n -= 6)
              std::pair<std::string const,std::string>::~pair((uint64_t)&v150[n]);
            __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_zh_CN(void)::sProfanityData_zh_CN, &dword_1BF794000);
          }
          *v4 = 0;
          v4[1] = 0;
          v4[2] = 0;
          return (uint64_t)std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v4, GetProfanityFilter_zh_CN(void)::sProfanityData_zh_CN[0], unk_1EF5822A8, 0xAAAAAAAAAAAAAAABLL* ((unk_1EF5822A8 - GetProfanityFilter_zh_CN(void)::sProfanityData_zh_CN[0]) >> 4));
        }
      }
      if (*(_QWORD *)(v1 + 8) != 5
        || (**(_DWORD **)v1 == 1130326138 ? (v24 = *(_BYTE *)(*(_QWORD *)v1 + 4) == 78) : (v24 = 0), !v24))
      {
        if (*(_QWORD *)(v1 + 8) == 5)
        {
          if (**(_DWORD **)v1 == 1415538810 && *(_BYTE *)(*(_QWORD *)v1 + 4) == 87)
          {
LABEL_142:
            if ((v42 & 1) == 0
            {
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v55, "shit", "s**t");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v56, "motherfucking", "m*********ing");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v57, "motherfucker", "m*********er");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v58, "motherfuck", "m********k");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v59, "fucks", "f**ks");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v60, "fucking", "f***ing");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v61, "fuckin", "f****n");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v62, "fuck", "f**k");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v63, "bullshit", "b******t");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v64, "blowjob", "b*****b");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v65, "bitch", "b***h");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v66, "asshole", "a*****e");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v67, "龜公", "**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v68, "龜兒子", "龜**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v69, "黑鬼", "黑*");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v70, "鬼子", "*子");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v71, "駛恁娘", "駛**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v72, "馬的", "*的");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v73, "顏射", "顏*");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v74, "韓狗", "韓*");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v75, "靠腰", "**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v76, "靠背", "**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v77, "靠夭", "**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v78, "靠卑", "**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v79, "靠北", "**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v80, "雞歪", "**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v81, "雞掰", "**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v82, "雞巴", "**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v83, "雞八", "**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v84, "趕羚羊", "趕**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v85, "賽羚羊", "賽**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v86, "賤人", "**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v87, "該死", "該*");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v88, "草枝擺", "草**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v89, "臭雞掰", "臭**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v90, "肚爛", "肚*");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v91, "老雞排", "老**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v92, "老目", "老*");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v93, "老母", "老*");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v94, "老木", "老*");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v95, "破麻", "**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v96, "白鬼", "白*");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v97, "畜生", "*生");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v98, "王八蛋", "王**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v99, "王八", "王*");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v100, "狗屎", "狗*");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v101, "狗屁", "狗*");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v102, "狗娘", "狗*");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v103, "混蛋", "**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v104, "混帳", "**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v105, "洋鬼子", "洋**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v106, "母狗", "*狗");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v107, "死泡菜", "**菜");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v108, "機掰", "**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v109, "機巴", "**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v110, "機八", "**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v111, "日本鬼子", "日本**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v112, "操俗揦", "操**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[7],0>(v113, "操你媽的B", "操***");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v114, "操你", "*你");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v115, "打飛機", "打**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v116, "打炮", "打*");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v117, "打泡", "打*");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v118, "打手槍", "打**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v119, "我靠", "我*");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v120, "我操", "我*");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v121, "懶趴", "**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v122, "懶叫", "**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v123, "恁娘卡好", "恁***");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v124, "幹林", "*林");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v125, "幹恁老母", "幹***");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v126, "幹恁老師", "幹***");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v127, "幹恁娘", "幹**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v128, "幹你老師", "幹***");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v129, "幹你娘", "幹**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v130, "幹你", "*你");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v131, "幹他", "*他");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v132, "屌", "*");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v133, "屄", "*");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v134, "屁眼", "**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[2],0>(v135, "尻", "*");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v136, "射精", "射*");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v137, "媽的", "*的");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v138, "婊子", "**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v139, "嘰歪", "**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[5],0>(v140, "唧唧歪歪", "****");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v141, "哭爸", "**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v142, "哭夭", "**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v143, "吹簫", "吹*");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v144, "吞精", "吞*");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[2],0>(v145, "吃屎", "*");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[2],0>(v146, "吃屌", "*");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v147, "吃大便", "吃**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v148, "口爆", "口*");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v149, "口交", "口*");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v150, "去死", "去*");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v151, "去你的", "去**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v152, "北嘛", "**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v153, "北七", "**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v154, "內射", "內*");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v155, "你老母", "你**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v156, "他馬的", "他*的");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v157, "他祖宗", "他**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v158, "他媽的", "他**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v159, "他媽的", "他*的");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v160, "他姥姥", "他**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[7],0>(v161, "他奶奶的", "他***");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v162, "他奶奶", "他**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v163, "下賤", "**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[6],0>(v164, "下地獄", "下**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[3],0>(v165, "三小", "**");
              std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v166, "㩕老師", "*老師");
              std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_zh_TW(void)::sProfanityData_zh_TW, (uint64_t)v55, 0x70uLL);
              for (ii = 0; ii != -672; ii -= 6)
                std::pair<std::string const,std::string>::~pair((uint64_t)&v166[ii]);
              __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_zh_TW(void)::sProfanityData_zh_TW, &dword_1BF794000);
            }
            *v4 = 0;
            v4[1] = 0;
            v4[2] = 0;
            return (uint64_t)std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v4, GetProfanityFilter_zh_TW(void)::sProfanityData_zh_TW[0], unk_1EF5822C8, 0xAAAAAAAAAAAAAAABLL* ((unk_1EF5822C8 - GetProfanityFilter_zh_TW(void)::sProfanityData_zh_TW[0]) >> 4));
          }
          if ((v5 & 0x80) == 0)
          {
            if (v5 != 5)
              goto LABEL_57;
LABEL_84:
            if (*(_DWORD *)v1 != 1096774241 || *(_BYTE *)(v1 + 4) != 69)
            {
              v27 = *(_DWORD *)v1 == 1113549934 && *(_BYTE *)(v1 + 4) == 69;
              v28 = v1;
              if (!v27)
              {
LABEL_128:
                v36 = *(_DWORD *)v28;
                v37 = *(unsigned __int8 *)(v28 + 4);
                if (v36 == 1314876526 && v37 == 76)
                  return (uint64_t)GetProfanityFilter_nl_NL(v4);
LABEL_57:
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)v1, "de_CH"))
                {
                  return (uint64_t)GetProfanityFilter_de_CH(v4);
                }
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "de_AT"))
                  return (uint64_t)GetProfanityFilter_de_AT(v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "de_DE"))
                  return (uint64_t)GetProfanityFilter_de_DE(v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "fr_BE"))
                  return (uint64_t)GetProfanityFilter_fr_BE((uint64_t)v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "fr_CA"))
                  return (uint64_t)GetProfanityFilter_fr_CA(v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "es_US"))
                  return (uint64_t)GetProfanityFilter_es_US((uint64_t)v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "es_MX"))
                  return (uint64_t)GetProfanityFilter_es_MX((uint64_t)v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "es_ES"))
                  return (uint64_t)GetProfanityFilter_es_ES((uint64_t)v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "es_CL"))
                  return (uint64_t)GetProfanityFilter_es_CL((uint64_t)v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "en_US"))
                  return (uint64_t)GetProfanityFilter_en_US(v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "en_NZ"))
                  return (uint64_t)GetProfanityFilter_en_NZ(v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "en_IN"))
                  return (uint64_t)GetProfanityFilter_en_IN(v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "en_CA"))
                  return (uint64_t)GetProfanityFilter_en_CA(v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "en_ZA"))
                  return (uint64_t)GetProfanityFilter_en_ZA((uint64_t)v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "en_SG"))
                  return (uint64_t)GetProfanityFilter_en_SG(v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "en_GB"))
                  return (uint64_t)GetProfanityFilter_en_GB(v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "en_AU"))
                  return (uint64_t)GetProfanityFilter_en_AU(v4);
                result = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "en_IE");
                if ((_DWORD)result)
                  return (uint64_t)GetProfanityFilter_en_IE(v4);
LABEL_272:
                *v4 = 0;
                v4[1] = 0;
                v4[2] = 0;
                return result;
              }
              goto LABEL_149;
            }
            return (uint64_t)GetProfanityFilter_ar_AE((uint64_t)v4);
          }
        }
        if (*(_QWORD *)(v1 + 8) != 5
          || (**(_DWORD **)v1 == 1096774241 ? (v33 = *(_BYTE *)(*(_QWORD *)v1 + 4) == 69) : (v33 = 0), !v33))
        {
          if (*(_QWORD *)(v1 + 8) == 5)
          {
            if (**(_DWORD **)v1 == 1113549934 && *(_BYTE *)(*(_QWORD *)v1 + 4) == 69)
            {
LABEL_149:
              if ((v43 & 1) == 0
              {
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v55, "zweetreten", "z********n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v56, "zweetreetjes", "z**********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v57, "zweetreetje", "z*********e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v58, "zweetreet", "z*******t");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v59, "zweefteven", "z********n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v60, "zweefteefjes", "z**********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v61, "zweefteefje", "z*********e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v62, "zweefteef", "z*******f");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v63, "zuigzeugjes", "z*********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v64, "zuigzeugje", "z********e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v65, "zuigzeugen", "z********n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v66, "zuigzeug", "z******g");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v67, "zeikwijven", "z********n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v68, "zeikwijf", "z******f");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v69, "zeiker", "z****r");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v70, "wippen", "w****n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v71, "wipkippetjes", "w**********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v72, "wipkippetje", "w*********e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v73, "wipkippen", "w*******n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v74, "wipkip", "w****p");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v75, "websletten", "w********n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v76, "websletjes", "w********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v77, "websletje", "w*******e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v78, "webslet", "w*****t");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[13],0>(v79, "vortzakskes", "v**********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[12],0>(v80, "vortzakske", "v*********e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v81, "vortzakken", "v********n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v82, "vortzakjes", "v********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v83, "vortzakje", "v*******e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v84, "vortzak", "v*****k");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v85, "turbotrutten", "t**********n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v86, "turbotrutjes", "t**********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v87, "turbotrutje", "t*********e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v88, "turbotrut", "t*******t");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v89, "turboteven", "t********n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v90, "turboteefjes", "t**********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v91, "turboteefje", "t*********e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v92, "turboteef", "t*******f");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v93, "turbokutten", "t*********n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v94, "turbokutjes", "t*********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v95, "turbokutje", "t********e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v96, "turbokut", "t******t");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v97, "torenpoepsters", "t************s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v98, "torenpoepster", "t***********r");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v99, "torenpoepers", "t**********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v100, "torenpoeper", "t*********r");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v101, "tieten", "t****n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v102, "teven", "t***n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v103, "tettenkoppen", "t**********n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v104, "tettenkopjes", "t**********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v105, "tettenkopje", "t*********e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v106, "tettenkop", "t*******p");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v107, "tetten", "t****n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v108, "tettekoppen", "t*********n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v109, "tettekopjes", "t*********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v110, "tettekopje", "t********e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v111, "tettekop", "t******p");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v112, "tetjes", "t****s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v113, "tetje", "t***e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v114, "tet", "t*t");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[14],0>(v115, "teringtubby’s", "t***********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v116, "teringtubby", "t*********y");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v117, "teringtubbietjes", "t**************s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v118, "teringtubbietje", "t*************e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v119, "tentsletten", "t*********n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v120, "tentsletjes", "t*********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v121, "tentsletje", "t********e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v122, "tentslet", "t******t");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v123, "takkewijven", "t*********n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v124, "strandjanetten", "s************n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v125, "strandjanetjes", "s************s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v126, "strandjanetje", "s***********e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v127, "strandjanet", "s*********t");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v128, "sopkutten", "s*******n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v129, "sopkutjes", "s*******s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v130, "sopkutje", "s******e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v131, "sopkut", "s****t");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v132, "sloeries", "s******s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v133, "slobberkutten", "s***********n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v134, "slobberkutjes", "s***********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v135, "slobberkutje", "s**********e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v136, "slobberkut", "s********t");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v137, "schimmelfoefjes", "s*************s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v138, "schimmelfoefje", "s************e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v139, "schimmelfoefen", "s************n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v140, "schimmelfoef", "s**********f");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v141, "schijtluizen", "s**********n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v142, "schijtluis", "s********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v143, "schijterij", "s********j");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v144, "scheefpoepers", "s***********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v145, "scheefpoeperij", "s************j");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v146, "scheefpoeper", "s**********r");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v147, "scheefpoepen", "s**********n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v148, "scheefgepoepte", "s************e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v149, "scheefgepoept", "s***********t");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v150, "scheefgeneukte", "s************e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v151, "scheefgeneukt", "s***********t");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v152, "rotzakskes", "r********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v153, "rotzakske", "r*******e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v154, "rotzakken", "r*******n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v155, "rotzakjes", "r*******s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v156, "rotzakje", "r*****e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v157, "rotzak", "r****k");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v158, "rondpoepen", "r********n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v159, "rondgepoept", "r*********t");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v160, "reteskevertjes", "r***********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v161, "retekevertje", "r**********e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v162, "retekevers", "r********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v163, "retekever", "r*******r");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v164, "reetkevertjes", "r***********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v165, "reetkevertje", "r**********e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v166, "reetkevers", "r********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v167, "reetkever", "r*******r");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v168, "puddinglulletjes", "p**************s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v169, "puddinglulletje", "p*************e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v170, "puddinglullen", "p***********n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v171, "puddinglul", "p********l");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v172, "pruttelkutten", "p***********n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v173, "pruttelkutjes", "p***********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v174, "pruttelkutje", "p**********e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v175, "pruttelkut", "p********t");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v176, "ponylulletjes", "p***********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v177, "ponylulletje", "p**********e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v178, "ponylullen", "p********n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v179, "ponylul", "p*****l");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v180, "pijpmuiltjes", "p**********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v181, "pijpmuiltje", "p*********e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v182, "pijpmuilen", "p********n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v183, "pijpmuil", "p******l");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v184, "mierenneukertjes", "m**************s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v185, "mierenneukertje", "m*************e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v186, "mierenneuker", "m**********r");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[14],0>(v187, "miereneukers", "m***********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v188, "makakken", "m******n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v189, "makakjes", "m******s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v190, "makakje", "m*****e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v191, "makak", "m***k");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v192, "loezen", "l****n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v193, "kuttenkoppen", "k*********n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v194, "kuttenkopjes", "k*********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v195, "kuttenkopje", "k*********e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v196, "kuttenkop", "k*******p");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v197, "kuttekoppen", "k********n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v198, "kuttekopjes", "k*********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v199, "kuttekopje", "k********e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v200, "kuttekop", "k******p");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v201, "kutkopjes", "k*******s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v202, "kutkopje", "k******e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v203, "kutkop", "k****p");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v204, "klotewijven", "k*********n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v205, "klotewijf", "k*******f");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v206, "kloteventjes", "k**********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v207, "kloteventje", "k*********e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v208, "kloteventen", "k*********n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v209, "klotevent", "k*******t");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v210, "kinderporno", "k*********o");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[16],0>(v211, "kakmadammetjes", "k*************s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v212, "kakmadammetje", "k***********e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v213, "kakmadammen", "k*********n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v214, "kakmadammekes", "k***********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v215, "kakmadammeke", "k**********e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v216, "kakmadam", "k******m");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v217, "kakkers", "k*****s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v218, "kakker", "k****r");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v219, "hoererij", "h******j");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v220, "hoererige", "h*******e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v221, "hoererig", "h******g");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v222, "gepoepte", "g******e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v223, "gepoept", "g*****t");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v224, "gepoep", "g****p");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v225, "foorwijven", "f********n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v226, "foorwijf", "f******f");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v227, "foefkoppen", "f********n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v228, "foefkop", "f****p");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v229, "foefen", "f****n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v230, "foef", "f**f");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v231, "droogneukertjes", "d*************s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v232, "droogneukertje", "d************e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v233, "droogneukers", "d**********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v234, "droogneukerij", "d***********j");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v235, "droogneuker", "d*********r");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v236, "droogneuken", "d*********n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v237, "droogkloten", "d*********n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v238, "droogkloot", "d********t");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v239, "drooggeneukt", "d**********t");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v240, "darmtoeristjes", "d************s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v241, "darmtoeristje", "d***********e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v242, "darmtoeristen", "d***********n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v243, "darmtoerist", "d*********t");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v244, "bospoepers", "b********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v245, "bospoeperkes", "b**********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v246, "bospoeperke", "b*********e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v247, "bospoeper", "b*******r");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v248, "boskakkertjes", "b***********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v249, "boskakkertje", "b**********e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v250, "boskakkers", "b********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v251, "boskakker", "b*******r");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v252, "boshoertjes", "b*********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v253, "boshoertje", "b********e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v254, "boshoeren", "b*******n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v255, "boshoer", "b*****r");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v256, "befkonijntjes", "b***********s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v257, "befkonijntje", "b**********e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v258, "befkonijnen", "b*********n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v259, "befkonijn", "b*******n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v260, "assenpoepsters", "a************s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v261, "assenpoepster", "a***********r");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v262, "aarsgeweien", "a*********n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v263, "aarsgewei", "a*******i");
                std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_nl_BE(void)::sProfanityData_nl_BE, (uint64_t)v55, 0xD1uLL);
                for (jj = 0; jj != -1254; jj -= 6)
                  std::pair<std::string const,std::string>::~pair((uint64_t)&v263[jj]);
                __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_nl_BE(void)::sProfanityData_nl_BE, &dword_1BF794000);
              }
              *v4 = 0;
              v4[1] = 0;
              v4[2] = 0;
              return (uint64_t)std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v4, GetProfanityFilter_nl_BE(void)::sProfanityData_nl_BE[0], unk_1EF582308, 0xAAAAAAAAAAAAAAABLL* ((unk_1EF582308 - GetProfanityFilter_nl_BE(void)::sProfanityData_nl_BE[0]) >> 4));
            }
            if ((v5 & 0x80) == 0)
            {
              v28 = v1;
              if (v5 != 5)
                goto LABEL_57;
              goto LABEL_128;
            }
          }
          if (*(_QWORD *)(v1 + 8) != 5)
            goto LABEL_57;
          v28 = *(_QWORD *)v1;
          goto LABEL_128;
        }
        return (uint64_t)GetProfanityFilter_ar_AE((uint64_t)v4);
      }
      goto LABEL_136;
    }
    v30 = *(_WORD **)v1;
    if (**(_WORD **)v1 != 27507)
    {
      if (*v30 != 27760)
      {
        if (*v30 != 26998)
        {
          if (*v30 != 30323)
          {
            if (*v30 != 25960)
            {
              if ((v5 & 0x80) != 0)
              {
                if (*(_QWORD *)(v1 + 8) != 2 || **(_WORD **)v1 != 29549)
                {
                  if (*(_QWORD *)(v1 + 8) != 2)
                    goto LABEL_161;
                  v22 = *(_WORD **)v1;
                  goto LABEL_160;
                }
                goto LABEL_163;
              }
              if (v5 != 2)
                goto LABEL_161;
LABEL_66:
              if (*(_WORD *)v1 != 29549)
              {
                v22 = (_WORD *)v1;
LABEL_160:
                if (*v22 == 24932)
                  return (uint64_t)GetProfanityFilter_da((uint64_t)v4);
LABEL_161:
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)v1, "ja"))
                  return (uint64_t)GetProfanityFilter_ja((uint64_t)v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "el"))
                  return (uint64_t)GetProfanityFilter_el((uint64_t)v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "it"))
                  return (uint64_t)GetProfanityFilter_it((uint64_t)v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "ca"))
                  return (uint64_t)GetProfanityFilter_ca(v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "cs"))
                  return (uint64_t)GetProfanityFilter_cs((uint64_t)v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "ru"))
                  return (uint64_t)GetProfanityFilter_ru((uint64_t)v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "ro"))
                  return (uint64_t)GetProfanityFilter_ro((uint64_t)v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "pt"))
                  return (uint64_t)GetProfanityFilter_pt((uint64_t)v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "uk"))
                  return (uint64_t)GetProfanityFilter_uk((uint64_t)v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "ar"))
                  return (uint64_t)GetProfanityFilter_ar((uint64_t)v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "hr"))
                  return (uint64_t)GetProfanityFilter_hr((uint64_t)v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "hu"))
                  return (uint64_t)GetProfanityFilter_hu((uint64_t)v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "nl"))
                  return GetProfanityFilter_nl();
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "nb"))
                  return (uint64_t)GetProfanityFilter_nb(v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "hi"))
                  return (uint64_t)GetProfanityFilter_hi((uint64_t)v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "de"))
                  return (uint64_t)GetProfanityFilter_de((uint64_t)v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "ko"))
                  return (uint64_t)GetProfanityFilter_ko((uint64_t)v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "fi"))
                  return (uint64_t)GetProfanityFilter_fi((uint64_t)v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "id"))
                  return (uint64_t)GetProfanityFilter_id(v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "fr"))
                  return (uint64_t)GetProfanityFilter_fr((uint64_t)v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "en"))
                  return (uint64_t)GetProfanityFilter_en((uint64_t)v4);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "th"))
                  return (uint64_t)GetProfanityFilter_th((uint64_t)v4);
                result = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, "tr");
                if ((_DWORD)result)
                  return (uint64_t)GetProfanityFilter_tr((uint64_t)v4);
                goto LABEL_272;
              }
LABEL_163:
              if ((v44 & 1) == 0
              {
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v55, "tetek senget", "t***k senget");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v56, "tetek menglebeh", "t***k menglebeh");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v57, "tetek", "t***k");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v58, "telur loyot", "t***r l***t");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v59, "sundal", "s****l");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v60, "sial", "s**l");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v61, "puting lendir", "p****g lendir");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v62, "pundek", "p****k");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v63, "pukimak", "p*****k");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v64, "puki mak", "p*** **k");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v65, "puki busuk", "p*** busuk");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v66, "puki basi", "p*** basi");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v67, "puki babi", "p*** b**i");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v68, "puki anjing", "p*** anjing");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v69, "puki", "p***");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v70, "pergi mampus", "pergi m****s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v71, "pepek daki", "p***k d**i");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v72, "pepek", "p***k");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v73, "pelir mamak", "p***r m***k");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v74, "pelir", "p***r");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v75, "peler", "p***r");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[18],0>(v76, "pantat berserabai", "p****t b********i");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v77, "pantat", "p****t");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v78, "palat", "p***t");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v79, "nonok", "n***k");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v80, "ne-nen", "n****n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v81, "melancap", "m******p");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v82, "mangkuk hayun", "mangkuk h***n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v83, "mangkuk hanyun", "mangkuk h****n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v84, "lanchiau", "l******u");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v85, "lancap", "l****p");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v86, "lahanat", "l*****t");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v87, "kulum kote", "k***m k**e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v88, "kulum", "k***m");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v89, "kote neraka", "k**e n****a");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v90, "kote", "k**e");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v91, "kongkek", "k*****k");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v92, "konek gajus", "k***k g***s");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v93, "konek babi", "k***k b**i");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v94, "konek", "k***k");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v95, "keting", "k****g");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v96, "kepala butto", "kepala b***o");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v97, "kepala butoh", "kepala b***h");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v98, "kepala bana", "kepala b**a");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v99, "kelentit", "k******t");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v100, "jilat totok", "j***t t***k");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v101, "jilat tonton", "j***t t****n");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v102, "jilat puki", "j***t p***");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v103, "jilat nonok", "j***t n***k");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[18],0>(v104, "jilat lubang puki", "j***t l****g p***");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v105, "jilat jubur", "j***t j***r");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v106, "jantan sial", "j****n s**l");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v107, "jalang", "j****g");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v108, "isap kote kuda", "i**p k**e kuda");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v109, "isap kote anjing", "i**p k**e anjing");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v110, "hisap telur", "h***p t***r");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v111, "hisap konek", "h***p k***k");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v112, "haram jadah", "h***m j***h");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v113, "gatal burit", "g***l b***t");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v114, "cipap", "c***p");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v115, "cibai", "c***i");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v116, "butuh tua", "b***h tua");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v117, "butuh", "b***h");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v118, "butu buruk", "b**u buruk");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v119, "butoh pak hang", "b***h pak hang");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v120, "butoh", "b***h");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v121, "burit lebeh", "b***t l***h");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v122, "burit", "b***t");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v123, "bijik tersentil", "b***k t*******l");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v124, "bijik panjang", "b***k p*****g");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v125, "bijik kelentit", "b***k k******t");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v126, "bijik hang", "b***k h**g");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v127, "bijik gatal", "b***k g***l");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v128, "barua", "b****");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[20],0>(v129, "bapakmu telur kecut", "bapakmu t***r k***t");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[18],0>(v130, "bapak telur kecut", "bapak t***r k***t");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v131, "bahlul", "b****l");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v132, "anak luar nikah", "anak l**r n***h");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v133, "anak haram", "anak h***m");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v134, "anak gampang", "anak g*****g");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v135, "aku henjut mak", "aku h****t mak");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[22],char const(&)[22],0>(v136, "Bapak kau telur kecut", "bapak kau t***r k***t");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[23],0>(v137, "Bapak kamu telur kecut", "bapak kamu t***r k***t");
                std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[23],0>(v138, "Bapak awak telur kecut", "bapak awak t***r k***t");
                std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_ms(void)::sProfanityData_ms, (uint64_t)v55, 0x54uLL);
                for (kk = 498; kk != -6; kk -= 6)
                  std::pair<std::string const,std::string>::~pair((uint64_t)&v55[kk]);
                __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_ms(void)::sProfanityData_ms, &dword_1BF794000);
              }
              *v4 = 0;
              v4[1] = 0;
              v4[2] = 0;
              return (uint64_t)std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v4, GetProfanityFilter_ms(void)::sProfanityData_ms[0], unk_1EF581EE8, 0xAAAAAAAAAAAAAAABLL* ((unk_1EF581EE8 - GetProfanityFilter_ms(void)::sProfanityData_ms[0]) >> 4));
            }
            return (uint64_t)GetProfanityFilter_he(v4);
          }
          return (uint64_t)GetProfanityFilter_sv((uint64_t)v4);
        }
        goto LABEL_138;
      }
      return (uint64_t)GetProfanityFilter_pl((uint64_t)v4);
    }
  }
  else
  {
    if (v5 != 2)
    {
      if (v5 != 3)
      {
        if (v5 != 5)
          goto LABEL_57;
        if (*(_DWORD *)v1 != 1230992489 || *(_BYTE *)(v1 + 4) != 84)
        {
          if (*(_DWORD *)v1 != 1348433008 || *(_BYTE *)(v1 + 4) != 84)
          {
            if (*(_DWORD *)v1 != 1113551984 || *(_BYTE *)(v1 + 4) != 82)
            {
              if (*(_DWORD *)v1 != 1214212218 || *(_BYTE *)(v1 + 4) != 75)
                goto LABEL_21;
              return (uint64_t)GetProfanityFilter_zh_HK((uint64_t)v4);
            }
            goto LABEL_140;
          }
          goto LABEL_124;
        }
        goto LABEL_106;
      }
      if (*(_WORD *)v1 != 30073 || *(_BYTE *)(v1 + 2) != 101)
        goto LABEL_57;
      goto LABEL_94;
    }
    if (*(_WORD *)v1 != 27507)
    {
      if (*(_WORD *)v1 != 27760)
      {
        if (*(_WORD *)v1 != 26998)
        {
          if (*(_WORD *)v1 != 30323)
          {
            if (*(_WORD *)v1 != 25960)
              goto LABEL_66;
            return (uint64_t)GetProfanityFilter_he(v4);
          }
          return (uint64_t)GetProfanityFilter_sv((uint64_t)v4);
        }
LABEL_138:
        {
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(v55, "nứng", "n**g");
          std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(v56, "lồn", "l*n");
          std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_vi(void)::sProfanityData_vi, (uint64_t)v55, 2uLL);
          for (mm = 6; mm != -6; mm -= 6)
            std::pair<std::string const,std::string>::~pair((uint64_t)&v55[mm]);
          __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_vi(void)::sProfanityData_vi, &dword_1BF794000);
        }
        *v4 = 0;
        v4[1] = 0;
        v4[2] = 0;
        return (uint64_t)std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v4, GetProfanityFilter_vi(void)::sProfanityData_vi[0], unk_1EF581E88, 0xAAAAAAAAAAAAAAABLL* ((unk_1EF581E88 - GetProfanityFilter_vi(void)::sProfanityData_vi[0]) >> 4));
      }
      return (uint64_t)GetProfanityFilter_pl((uint64_t)v4);
    }
  }
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v55, "šukanie", "š*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v56, "čurák", "č***k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v57, "zmrdi", "z***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v58, "zmrda", "z***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v59, "zmrd", "z**d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v60, "zhovadilosti", "z**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v61, "zdebilieva", "z********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v62, "zblbol", "z****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v63, "zasranov", "z******v");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v64, "zasrani", "z*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v65, "zaprdenom", "z*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v66, "vysral", "v****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v67, "vyserte", "v*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v68, "vyseriem", "v******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v69, "vyserie", "v*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v70, "vyjeb", "v***b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v71, "vydrbe", "v****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v72, "vydrbali", "v******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v73, "tupcov", "t****v");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v74, "tupcom", "t****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v75, "trtkať", "t****ť");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v76, "trtkačka", "t******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v77, "svinstvách", "s********h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v78, "svinstvá", "s******á");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v79, "svinstve", "s******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v80, "svinstva", "s******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v81, "svinstiev", "s*******v");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v82, "sviniar", "s*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v83, "superblbec", "s********c");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v84, "suky", "s**y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v85, "suka", "s**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v86, "sráčmi", "s****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v87, "srať", "s**ť");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v88, "sračkách", "s******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v89, "sračky", "s****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v90, "sračku", "s****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v91, "sračiek", "s*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v92, "sranie", "s****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v93, "srací", "s***í");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v94, "sprostú", "s*****ú");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v95, "sprostí", "s*****í");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v96, "sprostého", "s*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v97, "sprostou", "s******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v98, "sprostota", "s*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v99, "sprostosti", "s********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v100, "sprosto", "s*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v101, "sprostejšie", "s*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v102, "sprostej", "s******j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v103, "sproste", "s*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v104, "skurveny", "s******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v105, "skurvene", "s******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v106, "skurvena", "s******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v107, "seriem", "s****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v108, "serete", "s****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v109, "serem", "s***m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v110, "rozjebal", "r******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v111, "rozjeb", "r****b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v112, "riť", "r*ť");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v113, "ritiek", "r****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v114, "prďúsov", "p*****v");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v115, "prďúsi", "p****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v116, "prúseroch", "p*******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v117, "prúser", "p****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v118, "pruser", "p****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v119, "priblbo", "p*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v120, "priblblých", "p********h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v121, "priblblé", "p******é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v122, "presrali", "p******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v123, "presral", "p*****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v124, "posrať", "p****ť");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v125, "posralo", "p*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v126, "posrala", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v127, "poserieš", "p******š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v128, "poser", "p***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v129, "pojeb", "p***b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v130, "pičovina", "p******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v131, "pičný", "p***ý");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v132, "pičisko", "p*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v133, "piča", "p**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v134, "osraným", "o*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v135, "ojeb", "o**b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v136, "odrbávať", "o******ť");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v137, "odrbáva", "o*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v138, "odrbe", "o***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v139, "odrbať", "o****ť");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v140, "odrbal", "o****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v141, "odjeb", "o***b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v142, "nesralo", "n*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v143, "nesrali", "n*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v144, "neserú", "n****ú");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v145, "neser", "n***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v146, "neposer", "n*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v147, "neodrbeš", "n******š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v148, "neodrbe", "n*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v149, "nenasral", "n******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v150, "nekurvím", "n******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v151, "negrov", "n****v");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v152, "negrom", "n****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v153, "nasrať", "n****ť");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v154, "nasratý", "n*****ý");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v155, "nasraté", "n*****é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v156, "nasratosti", "n********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v157, "nasraný", "n*****ý");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v158, "nasrané", "n*****é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v159, "nasralo", "n*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v160, "nasrali", "n*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v161, "nasral", "n****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v162, "nasieral", "n******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v163, "naserie", "n*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v164, "naprd", "n***d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v165, "nahovno", "n*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v166, "mrdnutím", "m******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v167, "lesieb", "l****b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v168, "lesba", "l***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v169, "kurvy", "k***y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v170, "kurva", "k***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v171, "kurevsky", "k******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v172, "kravín", "k****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v173, "kraviny", "k*****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v174, "kokotsky", "k******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v175, "kokotiny", "k******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v176, "kokotina", "k******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v177, "kokot", "k***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v178, "jebák", "j***k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v179, "jebo", "j**o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v180, "jebnutom", "j******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v181, "jeblina", "j*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v182, "jebe", "j**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v183, "jebať", "j***ť");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v184, "jebačka", "j*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v185, "jebal", "j***l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v186, "jeb", "j*b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v187, "hovná", "h***á");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v188, "hovnová", "h*****á");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v189, "hovno", "h***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v190, "hovna", "h***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v191, "hovienko", "h******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v192, "hovadinku", "h*******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v193, "hovadine", "h******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v194, "hovadina", "h******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v195, "hajzlíky", "h******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v196, "hajzlík", "h*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v197, "hajzlom", "h*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v198, "hajzli", "h****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v199, "hajzle", "h****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v200, "hajzel", "h****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v201, "drbnúť", "d****ť");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v202, "dodrbávanie", "d*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v203, "dodrbe", "d****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v204, "dodrbal", "d*****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v205, "dilino", "d****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v206, "dilinko", "d*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v207, "dementovi", "d*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v208, "dementov", "d******v");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v209, "dementný", "d******ý");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v210, "dementne", "d******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v211, "dementi", "d*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v212, "dementa", "d*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v213, "degeši", "d****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v214, "degeš", "d***š");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v215, "debilov", "d*****v");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v216, "debilom", "d*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v217, "debilný", "d*****ý");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v218, "debilné", "d*****é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v219, "debilne", "d*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v220, "debilku", "d*****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v221, "debilkov", "d******v");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v222, "debilko", "d*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v223, "debilitou", "d*******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v224, "debili", "d****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v225, "debil", "d***l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v226, "chujovina", "c*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v227, "chujovi", "c*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v228, "chuji", "c***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v229, "buzna", "b***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v230, "buzerantovi", "b*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v231, "buzerantov", "b********v");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v232, "buzerantom", "b********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v233, "buzerant", "b******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v234, "blbými", "b****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v235, "blbý", "b**ý");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v236, "blbú", "b**ú");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v237, "blbí", "b**í");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v238, "blbé", "b**é");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v239, "blbosťou", "b******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v240, "blbom", "b***m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v241, "blbne", "b***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v242, "blbiny", "b****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v243, "blbej", "b***j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v244, "blbcoch", "b*****h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v245, "blbcami", "b*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v246, "bastardoch", "b********h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v247, "bastarda", "b******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v248, "bastard", "b*****d");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_sk(void)::sProfanityData_sk, (uint64_t)v55, 0xC2uLL);
    for (nn = 0; nn != -1164; nn -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v248[nn]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_sk(void)::sProfanityData_sk, &dword_1BF794000);
  }
  *v4 = 0;
  v4[1] = 0;
  v4[2] = 0;
  return (uint64_t)std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v4, GetProfanityFilter_sk(void)::sProfanityData_sk[0], unk_1EF581E48, 0xAAAAAAAAAAAAAAABLL * ((unk_1EF581E48 - GetProfanityFilter_sk(void)::sProfanityData_sk[0]) >> 4));
}

void sub_1BF9BC428(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 3984; i != -48; i -= 48)
    std::pair<std::string const,std::string>::~pair(v1 + i);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BF9BC794(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BF9BC7E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BF9BC834(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BF9BC884(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BF9BC8D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BF9BC924(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BF9BC974(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BF9BC9C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BF9BCA14(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BF9BCA64(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BF9BCAB4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BF9BCB04(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BF9BCB54(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BF9BCBA4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BF9BCBF4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BF9BCC44(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BF9BCC94(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BF9BCCE4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BF9BCD34(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BF9BCD84(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BF9BCDD4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;

  a1[2] = 0;
  v4 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  if (a3)
  {
    std::vector<siri::dialogengine::DatabaseField>::__vallocate[abi:ne180100](a1, a3);
    a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::pair<std::string,std::string> const*,std::pair<std::string,std::string> const*,std::pair<std::string,std::string>*>(v4, a2, a2 + 48 * a3, a1[1]);
  }
  return a1;
}

void sub_1BF9BCE6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void **std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100](void **a1)
{
  void **v3;

  v3 = a1;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

_QWORD *GetProfanityFilter_pl(uint64_t a1)
{
  _QWORD *v1;
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[6];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[6];
  _QWORD v88[6];
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  _QWORD v92[6];
  _QWORD v93[6];
  _QWORD v94[6];
  _QWORD v95[6];
  _QWORD v96[6];
  _QWORD v97[6];
  _QWORD v98[6];
  _QWORD v99[6];
  _QWORD v100[6];
  _QWORD v101[6];
  _QWORD v102[6];
  _QWORD v103[6];
  _QWORD v104[6];
  _QWORD v105[6];
  _QWORD v106[6];
  _QWORD v107[6];
  _QWORD v108[6];
  _QWORD v109[6];
  _QWORD v110[6];
  _QWORD v111[6];
  _QWORD v112[6];
  _QWORD v113[6];
  _QWORD v114[6];
  _QWORD v115[6];
  _QWORD v116[6];
  _QWORD v117[6];
  _QWORD v118[6];
  _QWORD v119[6];
  _QWORD v120[6];
  _QWORD v121[6];
  _QWORD v122[6];
  _QWORD v123[6];
  _QWORD v124[6];
  _QWORD v125[6];
  _QWORD v126[6];
  _QWORD v127[6];
  _QWORD v128[6];
  _QWORD v129[6];
  _QWORD v130[6];
  _QWORD v131[6];
  _QWORD v132[6];
  _QWORD v133[6];
  _QWORD v134[6];
  _QWORD v135[6];
  _QWORD v136[6];
  _QWORD v137[6];
  _QWORD v138[6];
  _QWORD v139[6];
  _QWORD v140[6];
  _QWORD v141[6];
  _QWORD v142[6];
  _QWORD v143[6];
  _QWORD v144[6];
  _QWORD v145[6];
  _QWORD v146[6];
  _QWORD v147[6];
  _QWORD v148[6];
  _QWORD v149[6];
  _QWORD v150[6];
  _QWORD v151[6];
  _QWORD v152[6];
  _QWORD v153[6];
  _QWORD v154[6];
  _QWORD v155[6];
  _QWORD v156[6];
  _QWORD v157[6];
  _QWORD v158[6];
  _QWORD v159[6];
  _QWORD v160[6];
  _QWORD v161[6];
  _QWORD v162[6];
  _QWORD v163[6];
  _QWORD v164[6];
  _QWORD v165[6];
  _QWORD v166[6];
  _QWORD v167[6];
  _QWORD v168[6];
  _QWORD v169[6];
  _QWORD v170[6];
  _QWORD v171[6];
  _QWORD v172[6];
  _QWORD v173[6];
  _QWORD v174[6];
  _QWORD v175[6];
  _QWORD v176[6];
  _QWORD v177[6];
  _QWORD v178[6];
  _QWORD v179[6];
  _QWORD v180[6];
  _QWORD v181[6];
  _QWORD v182[6];
  _QWORD v183[6];
  _QWORD v184[6];
  _QWORD v185[6];
  _QWORD v186[6];
  _QWORD v187[6];
  _QWORD v188[6];
  _QWORD v189[6];
  _QWORD v190[6];
  _QWORD v191[6];
  _QWORD v192[6];
  _QWORD v193[6];
  _QWORD v194[6];
  _QWORD v195[6];
  _QWORD v196[6];
  _QWORD v197[6];
  _QWORD v198[6];
  _QWORD v199[6];
  _QWORD v200[6];
  _QWORD v201[6];
  _QWORD v202[6];
  _QWORD v203[6];
  _QWORD v204[6];
  _QWORD v205[6];
  _QWORD v206[6];
  _QWORD v207[6];
  _QWORD v208[6];
  _QWORD v209[6];
  _QWORD v210[6];
  _QWORD v211[6];
  _QWORD v212[6];
  _QWORD v213[6];
  _QWORD v214[6];
  _QWORD v215[6];
  _QWORD v216[6];
  _QWORD v217[6];
  _QWORD v218[6];
  _QWORD v219[6];
  _QWORD v220[6];
  _QWORD v221[6];
  _QWORD v222[6];
  _QWORD v223[6];
  _QWORD v224[6];
  _QWORD v225[6];
  _QWORD v226[6];
  _QWORD v227[6];
  _QWORD v228[6];
  _QWORD v229[6];
  _QWORD v230[6];
  _QWORD v231[6];
  _QWORD v232[6];
  _QWORD v233[6];
  _QWORD v234[6];
  _QWORD v235[6];
  _QWORD v236[6];
  _QWORD v237[6];
  _QWORD v238[6];
  _QWORD v239[6];
  _QWORD v240[6];
  _QWORD v241[6];
  _QWORD v242[6];
  _QWORD v243[6];
  _QWORD v244[6];
  _QWORD v245[6];
  _QWORD v246[6];
  _QWORD v247[6];
  _QWORD v248[6];
  _QWORD v249[6];
  _QWORD v250[6];
  _QWORD v251[6];
  _QWORD v252[6];
  _QWORD v253[6];
  _QWORD v254[6];
  _QWORD v255[6];
  _QWORD v256[6];
  _QWORD v257[6];
  _QWORD v258[6];
  _QWORD v259[6];
  _QWORD v260[6];
  _QWORD v261[6];
  _QWORD v262[6];
  _QWORD v263[6];
  _QWORD v264[6];
  _QWORD v265[6];
  _QWORD v266[6];
  _QWORD v267[6];
  _QWORD v268[6];
  _QWORD v269[6];
  _QWORD v270[6];
  _QWORD v271[6];
  _QWORD v272[6];
  _QWORD v273[6];
  _QWORD v274[6];
  _QWORD v275[6];
  _QWORD v276[6];
  _QWORD v277[6];
  _QWORD v278[6];
  _QWORD v279[6];
  _QWORD v280[6];
  _QWORD v281[6];
  _QWORD v282[6];
  _QWORD v283[6];
  _QWORD v284[6];
  _QWORD v285[6];
  _QWORD v286[6];
  _QWORD v287[6];
  _QWORD v288[6];
  _QWORD v289[6];
  _QWORD v290[6];
  _QWORD v291[6];
  _QWORD v292[6];
  _QWORD v293[6];
  _QWORD v294[6];
  _QWORD v295[6];
  _QWORD v296[6];
  _QWORD v297[6];
  _QWORD v298[6];
  _QWORD v299[6];
  _QWORD v300[6];
  _QWORD v301[6];
  _QWORD v302[6];
  _QWORD v303[6];
  _QWORD v304[6];
  _QWORD v305[6];
  _QWORD v306[6];
  _QWORD v307[6];
  _QWORD v308[6];
  _QWORD v309[6];
  _QWORD v310[6];
  _QWORD v311[6];
  _QWORD v312[6];
  _QWORD v313[6];
  _QWORD v314[6];
  _QWORD v315[6];
  _QWORD v316[6];
  _QWORD v317[6];
  _QWORD v318[6];
  _QWORD v319[6];
  _QWORD v320[6];
  _QWORD v321[6];
  _QWORD v322[6];
  _QWORD v323[6];
  _QWORD v324[6];
  _QWORD v325[6];
  _QWORD v326[6];
  _QWORD v327[6];
  _QWORD v328[6];
  _QWORD v329[6];
  _QWORD v330[6];
  _QWORD v331[6];
  _QWORD v332[6];
  _QWORD v333[6];
  _QWORD v334[6];
  _QWORD v335[6];
  _QWORD v336[6];
  _QWORD v337[6];
  _QWORD v338[6];
  _QWORD v339[6];
  _QWORD v340[6];
  _QWORD v341[6];
  _QWORD v342[6];
  _QWORD v343[6];
  _QWORD v344[6];
  _QWORD v345[6];
  _QWORD v346[6];
  _QWORD v347[6];
  _QWORD v348[6];
  _QWORD v349[6];
  _QWORD v350[6];
  _QWORD v351[6];
  _QWORD v352[6];
  _QWORD v353[6];
  _QWORD v354[6];
  _QWORD v355[6];
  _QWORD v356[6];
  _QWORD v357[6];
  _QWORD v358[6];
  _QWORD v359[6];
  _QWORD v360[6];
  _QWORD v361[6];
  _QWORD v362[6];
  _QWORD v363[6];
  _QWORD v364[6];
  _QWORD v365[6];
  _QWORD v366[6];
  _QWORD v367[6];
  _QWORD v368[6];
  _QWORD v369[6];
  _QWORD v370[6];
  _QWORD v371[6];
  _QWORD v372[6];
  _QWORD v373[6];
  _QWORD v374[6];
  _QWORD v375[6];
  _QWORD v376[6];
  _QWORD v377[6];
  _QWORD v378[6];
  _QWORD v379[6];
  _QWORD v380[6];
  _QWORD v381[6];
  _QWORD v382[6];
  _QWORD v383[6];
  _QWORD v384[6];
  _QWORD v385[6];
  _QWORD v386[6];
  _QWORD v387[6];
  _QWORD v388[6];
  _QWORD v389[6];
  _QWORD v390[6];
  _QWORD v391[6];
  _QWORD v392[6];
  _QWORD v393[6];
  _QWORD v394[6];
  _QWORD v395[6];
  _QWORD v396[6];
  _QWORD v397[6];
  _QWORD v398[6];
  _QWORD v399[6];
  _QWORD v400[6];
  _QWORD v401[6];
  _QWORD v402[6];
  _QWORD v403[6];
  _QWORD v404[6];
  _QWORD v405[6];
  _QWORD v406[6];
  _QWORD v407[6];
  _QWORD v408[6];
  _QWORD v409[6];
  _QWORD v410[6];
  _QWORD v411[6];
  _QWORD v412[6];
  _QWORD v413[6];
  _QWORD v414[6];
  _QWORD v415[6];
  _QWORD v416[6];
  _QWORD v417[6];
  _QWORD v418[6];
  _QWORD v419[7];

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](a1);
  v419[6] = *MEMORY[0x1E0C80C00];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v5, "zjebie", "z****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v6, "zjebany", "z*****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v7, "zjeb", "z**b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v8, "zesrasz", "z*****z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v9, "zesrali", "z*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v10, "zesrają", "z*****ą");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v11, "zesrały", "z*****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v12, "zesrało", "z*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v13, "zesrałbyś", "z*******ś");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v14, "zesrała", "z*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v15, "zesrał", "z****ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v16, "zasranymi", "z*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v17, "zasranych", "z*******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v18, "zasrany", "z*****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v19, "zasrani", "z*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v20, "zasranej", "z******j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v21, "zasranego", "z*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v22, "zasrane", "z*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v23, "zasraną", "z*****ą");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v24, "zasrańcu", "z******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v25, "zasrańcom", "z*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v26, "zasrańce", "z******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v27, "zasrańca", "z******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v28, "zasra", "z***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v29, "zapierniczać", "z**********ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v30, "zapierdzielaj", "z***********j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v31, "zapierdzielać", "z***********ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v32, "zapierdziel", "z*********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v33, "zapierdoli", "z********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v34, "zapierdol", "z*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v35, "zapierdalaj", "z*********j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v36, "zapierdala", "z********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v37, "zapieprzasz", "z*********z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v38, "zapieprzają", "z*********ą");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v39, "zapieprzać", "z********ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v40, "zapieprza", "z*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v41, "zajebistym", "z********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v42, "zajebisty", "z*******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v43, "zajebistość", "z*********ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v44, "zajebistego", "z*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v45, "zajebiste", "z*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v46, "zajebista", "z*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v47, "zajebiesz", "z*******z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v48, "zajebiście", "z********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v49, "zajebałem", "z*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v50, "zajebał", "z*****ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v51, "zajebać", "z*****ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v52, "zajeb", "z***b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v53, "wysrać", "w****ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v54, "wyruchana", "w*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v55, "wyrucham", "w******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v56, "wyruchali", "w*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v57, "wyruchałby", "w********y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v58, "wyruchał", "w******ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v59, "wyrucha", "w*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v60, "wypierdzielone", "w************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v61, "wypierdolona", "w**********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v62, "wypierdolili", "w**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v63, "wypierdolił", "w*********ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v64, "wypierdol", "w*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v65, "wypierdalania", "w***********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v66, "wypierdalam", "w*********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v67, "wypierdalaj", "w*********j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v68, "wypierdalać", "w*********ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v69, "wypieprzyć", "w********ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v70, "wypieprzeniu", "w**********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v71, "wypieprza", "w*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v72, "wyjebane", "w******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v73, "wyjebać", "w*****ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v74, "wydymany", "w******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v75, "wydymaniu", "w*******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v76, "wydymanie", "w*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v77, "wydymana", "w******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v78, "wydymać", "w*****ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v79, "wpiernicz", "w*******z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v80, "wpierdzieli", "w*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v81, "wpierdziela", "w*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v82, "wpierdol", "w******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v83, "wpierdalają", "w*********ą");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v84, "wpierdala", "w*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v85, "wpieprzył", "w*******ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v86, "wpieprzyć", "w*******ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v87, "wpieprzają", "w********ą");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v88, "wkurwiony", "w*******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v89, "wkurwionego", "w*********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v90, "wkurwili", "w******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v91, "wkurwienie", "w********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v92, "wkurwiam", "w******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v93, "wkurwiali", "w*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v94, "wkurwiającego", "w***********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v95, "wkurwiacie", "w********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v96, "wkurwia", "w*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v97, "wkurwiłem", "w*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v98, "wkurwić", "w*****ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v99, "wkurw", "w***w");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v100, "wjebany", "w*****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v101, "wjebał", "w****ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v102, "upierdolony", "u*********y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v103, "szczy", "s***y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v104, "szczochach", "s********h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v105, "szczochów", "s*******w");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v106, "szczanie", "s******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v107, "szczam", "s****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v108, "szczała", "s*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v109, "szczał", "s****ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v110, "szczać", "s****ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v111, "szcza", "s***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v112, "szczące", "s*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v113, "szczą", "s***ą");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v114, "srasz", "s***z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v115, "sraniem", "s*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v116, "sranie", "s****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v117, "srania", "s****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v118, "sranego", "s*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v119, "sram", "s**m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v120, "srali", "s***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v121, "sraki", "s***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v122, "srakę", "s***ę");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v123, "srak", "s**k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v124, "srajtaśma", "s*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v125, "srających", "s*******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v126, "srający", "s*****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v127, "srające", "s*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v128, "srają", "s***ą");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v129, "sraczy", "s****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v130, "sracze", "s****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v131, "sraczce", "s*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v132, "sraczach", "s******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v133, "sracza", "s****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v134, "sracz", "s***z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v135, "sracie", "s****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v136, "srał", "s**ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v137, "srać", "s**ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v138, "sra", "s*a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v139, "spierdzielaj", "s**********j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v140, "spierdział", "s********ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v141, "spierdol", "s******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[16],0>(v142, "spierdalaliście", "s*************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v143, "spierdalaj", "s********j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v144, "spierdala", "s*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v145, "spieprzaj", "s*******j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v146, "skurwysyny", "s********y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v147, "skurwysynu", "s********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v148, "skurwysynom", "s*********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v149, "skurwysynie", "s*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v150, "skurwysynem", "s*********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v151, "skurwysynami", "s**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v152, "skurwysyna", "s********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v153, "skurwysynów", "s*********w");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v154, "skurwysyn", "s*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v155, "skurwieni", "s*******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v156, "skurwił", "s*****ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v157, "skurwi", "s****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v158, "ruchasz", "r*****z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v159, "ruchanie", "r******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v160, "ruchania", "r******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v161, "rucham", "r****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v162, "ruchali", "r*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v163, "ruchacz", "r*****z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v164, "ruchało", "r*****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v165, "ruchałem", "r******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v166, "ruchać", "r****ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v167, "rucha", "r***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v168, "rozpierdolę", "r*********ę");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v169, "rozpieprzyli", "r**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v170, "rozpieprzy", "r********y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v171, "rozjebania", "r********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v172, "rozjebał", "r******ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v173, "rozdupcył", "r*******ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v174, "przypierdolił", "p***********ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v175, "przypierdolić", "p***********ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v176, "przypierdol", "p*********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v177, "przypierdalać", "p***********ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v178, "przypieprzajmy", "p************y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v179, "przyjebali", "p********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v180, "przesrany", "p*******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v181, "przesrane", "p*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v182, "przejebane", "p********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v183, "przejebać", "p*******ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v184, "przejeb", "p*****b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v185, "posrywający", "p*********y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v186, "posrasz", "p*****z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v187, "posranych", "p*******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v188, "posrany", "p*****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v189, "posraniec", "p*******c");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v190, "posrani", "p*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v191, "posranego", "p*******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v192, "posrana", "p*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v193, "posraną", "p*****ą");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v194, "posrali", "p*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v195, "posracie", "p******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v196, "posrańcami", "p********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v197, "poruchamy", "p*******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v198, "poruchał", "p******ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v199, "popierdzielone", "p************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v200, "popierdzielania", "p*************a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v201, "popierdywanie", "p***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v202, "popierdolonych", "p************h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v203, "popierdolone", "p**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v204, "popierdolilo", "p**********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v205, "pojeby", "p****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v206, "pojebie", "p*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v207, "pojebanym", "p*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v208, "pojebany", "p******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v209, "pojebane", "p******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v210, "pojebańcy", "p*******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v211, "pojebańcu", "p*******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v212, "pojebało", "p******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v213, "pojeba", "p****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v214, "pojebów", "p*****w");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v215, "pojeb", "p***b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v216, "podupczą", "p******ą");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v217, "podsrywaniu", "p*********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v218, "podpierdolono", "p***********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v219, "podpierdolili", "p***********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v220, "pizgać", "p****ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v221, "pizga", "p***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v222, "pizdy", "p***y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v223, "pizdu", "p***u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v224, "pizda", "p***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v225, "pizdę", "p***ę");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v226, "pizd", "p**d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v227, "pindy", "p***y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v228, "pindo", "p***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v229, "pinda", "p***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v230, "pindą", "p***ą");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v231, "pierdziut", "p*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v232, "pierdziucha", "p*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v233, "pierdzistołek", "p***********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v234, "pierdzielone", "p**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v235, "pierdzielić", "p*********ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v236, "pierdzieli", "p********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v237, "pierdzielenie", "p***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v238, "pierdzielenia", "p***********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v239, "pierdziele", "p********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v240, "pierdziela", "p********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v241, "pierdzielę", "p********ę");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v242, "pierdziel", "p*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v243, "pierdzieć", "p*******ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v244, "pierdzie", "p******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v245, "pierdziała", "p********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v246, "pierdział", "p*******ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v247, "pierdzi", "p*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v248, "pierdzeniu", "p********u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v249, "pierdzenie", "p********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v250, "pierdzenia", "p********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v251, "pierdzących", "p*********h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v252, "pierdzące", "p*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v253, "pierdzą", "p*****ą");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v254, "pierdyknął", "p********ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v255, "pierdykam", "p*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v256, "pierdu", "p****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v257, "pierdolonym", "p*********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v258, "pierdolone", "p********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v259, "pierdolnie", "p********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v260, "pierdolnięty", "p**********y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v261, "pierdolnięte", "p**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v262, "pierdolnięta", "p**********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v263, "pierdolnięci", "p**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v264, "pierdolił", "p*******ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v265, "pierdolić", "p*******ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v266, "pierdoli", "p******i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v267, "pierdolenie", "p*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v268, "pierdolenia", "p*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v269, "pierdolca", "p*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v270, "pierdolę", "p******ę");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v271, "pierdolą", "p******ą");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v272, "pieprzyła", "p*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v273, "pieprzony", "p*******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v274, "pieprznięta", "p*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v275, "pieprzenie", "p********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v276, "pieprzę", "p*****ę");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v277, "piczki", "p****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v278, "piczkę", "p****ę");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v279, "piździec", "p******c");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v280, "piździ", "p****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v281, "osranej", "o*****j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v282, "osrać", "o***ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v283, "opierdzielić", "o**********ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v284, "opierdalanie", "o**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v285, "opierdalania", "o**********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v286, "opierdalajcie", "o***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v287, "opierdala", "o*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v288, "opieprzył", "o*******ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v289, "opieprzy", "o******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v290, "opieprzasz", "o********z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v291, "opieprzanie", "o*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v292, "opieprzają", "o********ą");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v293, "opieprzą", "o******ą");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v294, "odpierdzielony", "o************y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v295, "odpierdoli", "o********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v296, "odpierdalasz", "o**********z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v297, "odpierdala", "o********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v298, "odpieprzy", "o*******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v299, "odpieprzcie", "o*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v300, "obsrywać", "o******ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v301, "obsrany", "o*****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v302, "obsrane", "o*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v303, "obsrana", "o*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v304, "obsrały", "o*****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v305, "obsrała", "o*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v306, "nieskurwienie", "n***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v307, "nasrane", "n*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v308, "nasrał", "n****ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v309, "nasra", "n***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v310, "napierdzielanie", "n*************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v311, "napierdalacie", "n***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v312, "napierdalać", "n*********ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v313, "napierdala", "n********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v314, "najebany", "n******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v315, "kurwy", "k***y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v316, "kurwował", "k******ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v317, "kurwom", "k****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v318, "kurwo", "k***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v319, "kurwiszony", "k********y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v320, "kurwiszonie", "k*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v321, "kurwiszonami", "k**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v322, "kurwiszon", "k*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v323, "kurwie", "k****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v324, "kurwidole", "k*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v325, "kurwidołek", "k********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v326, "kurwidół", "k******ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v327, "kurwi", "k***i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v328, "kurwami", "k*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v329, "kurwach", "k*****h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v330, "kurwa", "k***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v331, "kurwę", "k***ę");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v332, "kurwą", "k***ą");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v333, "kurw", "k**w");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v334, "kurewstwie", "k********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v335, "kurewsko", "k******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v336, "kurewska", "k******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v337, "kurewka", "k*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v338, "kurew", "k***w");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v339, "jebnij", "j****j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v340, "jebnięty", "j******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v341, "jebnąłby", "j******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v342, "jebnąć", "j****ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v343, "jebliwa", "j*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v344, "jebie", "j***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v345, "jebany", "j****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v346, "jebania", "j*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v347, "jebani", "j****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v348, "jebanego", "j******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v349, "jebane", "j****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v350, "jebana", "j****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v351, "jebaną", "j****ą");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v352, "jebaki", "j****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v353, "jebaka", "j****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v354, "jebak", "j***k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v355, "jebałem", "j*****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v356, "jebał", "j***ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v357, "jebać", "j***ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v358, "jeba", "j**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v359, "jebło", "j***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v360, "jeb", "j*b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v361, "hwdp", "h**p");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v362, "huje", "h**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v363, "gównozjady", "g********y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v364, "gównozjadem", "g*********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v365, "gównojady", "g*******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v366, "gówno", "g***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v367, "gównie", "g****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v368, "gównianym", "g*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v369, "gówniany", "g******y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v370, "gównianej", "g*******j");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v371, "gówniane", "g******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v372, "gówniana", "g******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v373, "gównem", "g****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v374, "gównami", "g*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v375, "gównach", "g*****h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v376, "gówna", "g***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v377, "fiuty", "f***y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v378, "fiutem", "f****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v379, "fiutami", "f*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v380, "fiuta", "f***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v381, "fiutów", "f****w");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v382, "fiut", "f**t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v383, "dymanku", "d*****u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v384, "dymaniem", "d******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v385, "dymania", "d*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v386, "dymani", "d****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v387, "dymana", "d****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v388, "dymali", "d****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v389, "dymał", "d***ł");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v390, "dymać", "d***ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v391, "dupy", "d**y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v392, "dupo", "d**o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v393, "dupczy", "d****y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v394, "dupczenia", "d*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v395, "dupcz", "d***z");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v396, "dupami", "d****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v397, "dupach", "d****h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v398, "dosrajcie", "d*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v399, "dosrać", "d****ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v400, "dopierdolić", "d*********ć");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v401, "dopieprzenie", "d**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v402, "cweluchu", "c******u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v403, "cwelu", "c***u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v404, "cwelem", "c****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v405, "cwele", "c***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v406, "cwela", "c***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v407, "cwel", "c**l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v408, "ciulu", "c***u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v409, "ciula", "c***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v410, "ciul", "c**l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v411, "cipo", "c**o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v412, "cipa", "c**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v413, "cip", "c*p");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v414, "chuju", "c***u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v415, "chujowe", "c*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v416, "chujem", "c****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v417, "chuje", "c***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v418, "chuja", "c***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v419, "chuj", "c**j");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_pl(void)::sProfanityData_pl, (uint64_t)v5, 0x19FuLL);
    for (i = 0; i != -2490; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v419[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_pl(void)::sProfanityData_pl, &dword_1BF794000);
  }
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, GetProfanityFilter_pl(void)::sProfanityData_pl[0], unk_1EF581E68, 0xAAAAAAAAAAAAAAABLL * ((unk_1EF581E68 - GetProfanityFilter_pl(void)::sProfanityData_pl[0]) >> 4));
}

void sub_1BF9C05B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + 19872;
  v4 = -19920;
  do
  {
    v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BF9C0648(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[4],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BF9C0698(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *GetProfanityFilter_sv(uint64_t a1)
{
  _QWORD *v1;
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[6];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[6];
  _QWORD v88[6];
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  _QWORD v92[6];
  _QWORD v93[6];
  _QWORD v94[6];
  _QWORD v95[6];
  _QWORD v96[6];
  _QWORD v97[6];
  _QWORD v98[6];
  _QWORD v99[6];
  _QWORD v100[6];
  _QWORD v101[6];
  _QWORD v102[6];
  _QWORD v103[6];
  _QWORD v104[6];
  _QWORD v105[6];
  _QWORD v106[6];
  _QWORD v107[6];
  _QWORD v108[6];
  _QWORD v109[6];
  _QWORD v110[6];
  _QWORD v111[6];
  _QWORD v112[6];
  _QWORD v113[6];
  _QWORD v114[6];
  _QWORD v115[6];
  _QWORD v116[6];
  _QWORD v117[6];
  _QWORD v118[6];
  _QWORD v119[6];
  _QWORD v120[6];
  _QWORD v121[6];
  _QWORD v122[6];
  _QWORD v123[6];
  _QWORD v124[6];
  _QWORD v125[6];
  _QWORD v126[6];
  _QWORD v127[6];
  _QWORD v128[6];
  _QWORD v129[6];
  _QWORD v130[6];
  _QWORD v131[6];
  _QWORD v132[6];
  _QWORD v133[6];
  _QWORD v134[6];
  _QWORD v135[6];
  _QWORD v136[6];
  _QWORD v137[6];
  _QWORD v138[6];
  _QWORD v139[6];
  _QWORD v140[6];
  _QWORD v141[6];
  _QWORD v142[6];
  _QWORD v143[6];
  _QWORD v144[6];
  _QWORD v145[6];
  _QWORD v146[6];
  _QWORD v147[6];
  _QWORD v148[6];
  _QWORD v149[6];
  _QWORD v150[6];
  _QWORD v151[6];
  _QWORD v152[6];
  _QWORD v153[6];
  _QWORD v154[6];
  _QWORD v155[6];
  _QWORD v156[6];
  _QWORD v157[6];
  _QWORD v158[6];
  _QWORD v159[6];
  _QWORD v160[6];
  _QWORD v161[6];
  _QWORD v162[6];
  _QWORD v163[6];
  _QWORD v164[6];
  _QWORD v165[6];
  _QWORD v166[6];
  _QWORD v167[6];
  _QWORD v168[6];
  _QWORD v169[6];
  _QWORD v170[6];
  _QWORD v171[6];
  _QWORD v172[6];
  _QWORD v173[6];
  _QWORD v174[6];
  _QWORD v175[6];
  _QWORD v176[6];
  _QWORD v177[6];
  _QWORD v178[6];
  _QWORD v179[6];
  _QWORD v180[6];
  _QWORD v181[6];
  _QWORD v182[6];
  _QWORD v183[6];
  _QWORD v184[6];
  _QWORD v185[6];
  _QWORD v186[6];
  _QWORD v187[6];
  _QWORD v188[6];
  _QWORD v189[6];
  _QWORD v190[6];
  _QWORD v191[6];
  _QWORD v192[6];
  _QWORD v193[6];
  _QWORD v194[6];
  _QWORD v195[6];
  _QWORD v196[6];
  _QWORD v197[6];
  _QWORD v198[6];
  _QWORD v199[6];
  _QWORD v200[6];
  _QWORD v201[6];
  _QWORD v202[6];
  _QWORD v203[6];
  _QWORD v204[6];
  _QWORD v205[6];
  _QWORD v206[6];
  _QWORD v207[6];
  _QWORD v208[6];
  _QWORD v209[6];
  _QWORD v210[6];
  _QWORD v211[6];
  _QWORD v212[6];
  _QWORD v213[6];
  _QWORD v214[6];
  _QWORD v215[6];
  _QWORD v216[6];
  _QWORD v217[6];
  _QWORD v218[6];
  _QWORD v219[6];
  _QWORD v220[6];
  _QWORD v221[6];
  _QWORD v222[6];
  _QWORD v223[6];
  _QWORD v224[6];
  _QWORD v225[6];
  _QWORD v226[6];
  _QWORD v227[6];
  _QWORD v228[6];
  _QWORD v229[6];
  _QWORD v230[6];
  _QWORD v231[6];
  _QWORD v232[6];
  _QWORD v233[6];
  _QWORD v234[6];
  _QWORD v235[6];
  _QWORD v236[6];
  _QWORD v237[6];
  _QWORD v238[6];
  _QWORD v239[6];
  _QWORD v240[6];
  _QWORD v241[6];
  _QWORD v242[6];
  _QWORD v243[6];
  _QWORD v244[6];
  _QWORD v245[6];
  _QWORD v246[6];
  _QWORD v247[6];
  _QWORD v248[6];
  _QWORD v249[6];
  _QWORD v250[6];
  _QWORD v251[6];
  _QWORD v252[6];
  _QWORD v253[6];
  _QWORD v254[6];
  _QWORD v255[6];
  _QWORD v256[6];
  _QWORD v257[6];
  _QWORD v258[6];
  _QWORD v259[6];
  _QWORD v260[6];
  _QWORD v261[6];
  _QWORD v262[6];
  _QWORD v263[6];
  _QWORD v264[6];
  _QWORD v265[6];
  _QWORD v266[6];
  _QWORD v267[6];
  _QWORD v268[6];
  _QWORD v269[6];
  _QWORD v270[6];
  _QWORD v271[6];
  _QWORD v272[6];
  _QWORD v273[6];
  _QWORD v274[6];
  _QWORD v275[6];
  _QWORD v276[6];
  _QWORD v277[6];
  _QWORD v278[6];
  _QWORD v279[6];
  _QWORD v280[6];
  _QWORD v281[6];
  _QWORD v282[6];
  _QWORD v283[6];
  _QWORD v284[6];
  _QWORD v285[6];
  _QWORD v286[6];
  _QWORD v287[6];
  _QWORD v288[6];
  _QWORD v289[6];
  _QWORD v290[6];
  _QWORD v291[6];
  _QWORD v292[6];
  _QWORD v293[6];
  _QWORD v294[6];
  _QWORD v295[6];
  _QWORD v296[6];
  _QWORD v297[6];
  _QWORD v298[6];
  _QWORD v299[6];
  _QWORD v300[6];
  _QWORD v301[6];
  _QWORD v302[6];
  _QWORD v303[6];
  _QWORD v304[6];
  _QWORD v305[6];
  _QWORD v306[6];
  _QWORD v307[6];
  _QWORD v308[6];
  _QWORD v309[6];
  _QWORD v310[6];
  _QWORD v311[6];
  _QWORD v312[6];
  _QWORD v313[6];
  _QWORD v314[6];
  _QWORD v315[6];
  _QWORD v316[6];
  _QWORD v317[6];
  _QWORD v318[6];
  _QWORD v319[6];
  _QWORD v320[6];
  _QWORD v321[6];
  _QWORD v322[6];
  _QWORD v323[6];
  _QWORD v324[6];
  _QWORD v325[6];
  _QWORD v326[6];
  _QWORD v327[6];
  _QWORD v328[6];
  _QWORD v329[6];
  _QWORD v330[6];
  _QWORD v331[6];
  _QWORD v332[6];
  _QWORD v333[6];
  _QWORD v334[6];
  _QWORD v335[6];
  _QWORD v336[6];
  _QWORD v337[6];
  _QWORD v338[6];
  _QWORD v339[6];
  _QWORD v340[6];
  _QWORD v341[6];
  _QWORD v342[6];
  _QWORD v343[6];
  _QWORD v344[6];
  _QWORD v345[6];
  _QWORD v346[6];
  _QWORD v347[6];
  _QWORD v348[6];
  _QWORD v349[6];
  _QWORD v350[6];
  _QWORD v351[6];
  _QWORD v352[6];
  _QWORD v353[6];
  _QWORD v354[6];
  _QWORD v355[6];
  _QWORD v356[6];
  _QWORD v357[6];
  _QWORD v358[6];
  _QWORD v359[6];
  _QWORD v360[6];
  _QWORD v361[6];
  _QWORD v362[6];
  _QWORD v363[6];
  _QWORD v364[6];
  _QWORD v365[6];
  _QWORD v366[6];
  _QWORD v367[6];
  _QWORD v368[6];
  _QWORD v369[6];
  _QWORD v370[6];
  _QWORD v371[6];
  _QWORD v372[6];
  _QWORD v373[6];
  _QWORD v374[6];
  _QWORD v375[6];
  _QWORD v376[6];
  _QWORD v377[6];
  _QWORD v378[6];
  _QWORD v379[6];
  _QWORD v380[6];
  _QWORD v381[6];
  _QWORD v382[6];
  _QWORD v383[6];
  _QWORD v384[6];
  _QWORD v385[6];
  _QWORD v386[6];
  _QWORD v387[6];
  _QWORD v388[6];
  _QWORD v389[6];
  _QWORD v390[6];
  _QWORD v391[6];
  _QWORD v392[6];
  _QWORD v393[6];
  _QWORD v394[6];
  _QWORD v395[6];
  _QWORD v396[6];
  _QWORD v397[6];
  _QWORD v398[6];
  _QWORD v399[6];
  _QWORD v400[6];
  _QWORD v401[6];
  _QWORD v402[6];
  _QWORD v403[6];
  _QWORD v404[6];
  _QWORD v405[6];
  _QWORD v406[6];
  _QWORD v407[6];
  _QWORD v408[7];

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](a1);
  v408[6] = *MEMORY[0x1E0C80C00];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v5, "zigenarstuk", "z*********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v6, "zigenare", "z******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v7, "vildknull", "v*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[19],0>(v8, "vibrationslösfitta", "v****************a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v9, "tjockis", "t*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v10, "tjackluder", "t********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v11, "tjackhora", "t*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v12, "tattarna", "t******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v13, "tattarjänta", "t*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v14, "tattare", "t*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v15, "tamejfan", "t******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v16, "tölp", "t**p");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v17, "svennehora", "s********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v18, "svartskalle", "s*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v19, "svartskallarna", "s************a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v20, "svartskallar", "s**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v21, "svartingen", "s*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v22, "svartingarna", "s**********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v23, "svartingar", "s********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v24, "svarting", "s******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v25, "stridspittar", "s**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[17],0>(v26, "stockholmsjävlar", "s**************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v27, "spermaharen", "s*********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v28, "spagge", "s****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v29, "spaggarna", "s*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v30, "snorunge", "s******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v31, "småjävlig", "s*******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v32, "slyngel", "s*****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v33, "slyna", "s***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v34, "slampa", "s****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v35, "skitvillkor", "s*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v36, "skitviktigt", "s*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v37, "skitviktig", "s********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v38, "skittufft", "s*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v39, "skittråkigt", "s*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v40, "skittråkig", "s********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v41, "skitträff", "s*******f");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v42, "skittjock", "s*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v43, "skittaskiga", "s*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v44, "skittaskig", "s********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v45, "skitsystem", "s********m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v46, "skitsvårt", "s*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v47, "skitsura", "s******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v48, "skitstressad", "s**********d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v49, "skitstark", "s*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v50, "skitstövlarna", "s***********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v51, "skitstövlar", "s*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v52, "skitstöveln", "s*********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v53, "skitstövel", "s********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v54, "skitställe", "s********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v55, "skitsnygga", "s********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v56, "skitsnygg", "s*******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v57, "skitsnacksmejl", "s************l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v58, "skitsnackare", "s**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v59, "skitsmarta", "s********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v60, "skitskyttar", "s*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v61, "skitsida", "s******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v62, "skitsaker", "s*******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v63, "skitsak", "s*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v64, "skitsäsong", "s********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v65, "skitroligt", "s********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v66, "skitroliga", "s********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v67, "skitprylar", "s********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v68, "skitprogrammet", "s************t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v69, "skitprat", "s******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v70, "skitpappa", "s*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v71, "skitont", "s*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v72, "skitobehagligt", "s************t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v73, "skitnervös", "s********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v74, "skitnöjda", "s*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v75, "skitnöjd", "s******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v76, "skitnödigt", "s********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v77, "skitnödig", "s*******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v78, "skitmusik", "s*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v79, "skitmedicin", "s*********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v80, "skitmatchen", "s*********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v81, "skitmatch", "s*******h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v82, "skitmat", "s*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v83, "skitmål", "s*****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v84, "skitlukten", "s********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v85, "skitliv", "s*****v");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v86, "skitligan", "s*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v87, "skitliberal", "s*********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v88, "skitland", "s******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v89, "skitlag", "s*****g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v90, "skitlöner", "s*******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v91, "skitlön", "s*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v92, "skitlöjligt", "s*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v93, "skitlöjliga", "s*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v94, "skitlätt", "s******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v95, "skitläckert", "s*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v96, "skitkonstigt", "s**********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v97, "skitkonstiga", "s**********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v98, "skitkass", "s******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v99, "skitkallt", "s*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v100, "skitkåt", "s*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v101, "skitjobbiga", "s*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v102, "skitjobbig", "s********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v103, "skitjobbet", "s********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v104, "skitit", "s****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v105, "skitirriterad", "s***********d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v106, "skithockey", "s********y");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v107, "skithemskt", "s********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v108, "skithelg", "s******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v109, "skithögt", "s******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v110, "skithögen", "s*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v111, "skithäftigt", "s*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v112, "skitgoda", "s******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v113, "skitgnäll", "s*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v114, "skitglada", "s*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v115, "skitglad", "s******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v116, "skitgörat", "s*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v117, "skitgöra", "s******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v118, "skitful", "s*****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v119, "skitfränt", "s*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v120, "skitfilmer", "s********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[15],0>(v121, "skitförbannade", "s************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v122, "skitfärdig", "s********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v123, "skitenkelt", "s********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v124, "skitdagis", "s*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v125, "skitdag", "s*****g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v126, "skitdåligt", "s********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v127, "skitdålig", "s*******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v128, "skitcoolt", "s*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v129, "skitbränsle", "s*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v130, "skitblaska", "s********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v131, "skitbilligt", "s*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v132, "skitband", "s******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v133, "skitballt", "s*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v134, "skitavtal", "s*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v135, "skitarga", "s******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v136, "skitäckligt", "s*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v137, "skit-tV", "s*****v");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v138, "skit", "s**t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v139, "skadehelvete", "s**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v140, "sjuhelvetes", "s*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v141, "sjuhelsikes", "s*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[15],0>(v142, "sjözigenarfolk", "s************k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v143, "shit", "s**t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[16],0>(v144, "schlagerbögarna", "s*************a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v145, "satan", "s***n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v146, "sandneger", "s******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v147, "salthelvete", "s*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[4],0>(v148, "sär", "s*r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v149, "runkobjekt", "r********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v150, "runkat", "r****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v151, "runkar", "r****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v152, "runkade", "r*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v153, "runkad", "r****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v154, "runka", "r***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v155, "rövunge", "r*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v156, "rövknullare", "r*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v157, "rövknullade", "r*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v158, "rövknull", "r******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v159, "rövhatt", "r*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v160, "rövhål", "r****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v161, "röv", "r**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v162, "röding", "r****g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v163, "råttpiss", "r******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v164, "punkjävlar", "p********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v165, "pundhuvud", "p*******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v166, "pundhuve", "p******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v167, "pucko", "p***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v168, "praktarsel", "p********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v169, "pitten", "p****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v170, "pitt", "p**t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v171, "pissvädret", "p********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v172, "pisstidningar", "p***********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v173, "pissråttan", "p********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v174, "pisslata", "p******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v175, "pissland", "p******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v176, "pattar", "p****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v177, "pajjas", "p****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v178, "pajas", "p***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v179, "orre", "o**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v180, "operabögar", "o********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v181, "niggrerna", "n*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v182, "niggern", "n*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v183, "nigger", "n****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v184, "negrer", "n****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v185, "negerpojkar", "n*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v186, "negerbollar", "n*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v187, "negerboll", "n*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v188, "neger", "n***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v189, "muhammedhundar", "m************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v190, "muhammedhund", "m**********d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v191, "mongo", "m***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v192, "mes", "m*s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v193, "masjävlar", "m*******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v194, "mammaknullare", "m***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[18],0>(v195, "mainstream-skiten", "m***************n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v196, "mainstream-skit", "m*************t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[4],0>(v197, "mög", "m*g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v198, "lyxrunka", "l******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v199, "luder", "l***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v200, "lebb", "l**b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v201, "lassemajas", "l********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v202, "lappjävlar", "l********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v203, "lappjäveln", "l********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v204, "lappjävel", "l*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v205, "lapphelvetet", "l**********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v206, "läbb", "l**b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v207, "kuksugerska", "k*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v208, "kuksugareskan", "k**********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v209, "kuksugaren", "k******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v210, "kuksugare", "k******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v211, "kukkunskap", "k********p");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v212, "kukjävel", "k******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v213, "kukhuvud", "k******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v214, "kuken", "k***n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v215, "kukbruk", "k*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v216, "kukat", "k***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v217, "kukarna", "k*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v218, "kukar", "k***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v219, "kuk", "k*k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v220, "koskit", "k****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[19],0>(v221, "kommunistkärringen", "k****************n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v222, "knullmara", "k*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v223, "knullkompisar", "k***********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v224, "knullkompis", "k*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[18],0>(v225, "knullborgarmärket", "k***************t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v226, "knullat", "k*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v227, "knullas", "k*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v228, "knullare", "k******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v229, "knullar", "k*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v230, "knullade", "k******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v231, "knulla", "k****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v232, "klyktattare", "k*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v233, "klitta", "k****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v234, "klantarsel", "k********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v235, "kanadickerna", "k**********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v236, "kanadicken", "k********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v237, "kanadick", "k******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v238, "kötthuvud", "k*******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v239, "kärring", "k*****g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v240, "juggen", "j****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v241, "juggemaffian", "j**********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v242, "juggejävel", "j********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v243, "juggedisco", "j********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v244, "jugge", "j***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v245, "juggar", "j****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v246, "jävulsk", "j*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v247, "jävligaste", "j********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v248, "jävligare", "j*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v249, "jävliga", "j*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v250, "jävlig", "j****g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v251, "jävlats", "j*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v252, "jävlarna", "j******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v253, "jävlar", "j****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v254, "jävlad", "j****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v255, "jävla", "j***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v256, "jävelskap", "j*******p");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v257, "jäveln", "j****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v258, "jävel", "j***l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[6],0>(v259, "jäklar", "j***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v260, "idiot", "i***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v261, "husneger", "h******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v262, "hundskiten", "h********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v263, "hundskit", "h******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v264, "horunge", "h*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v265, "horbock", "h*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v266, "horan", "h***n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v267, "hora", "h**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v268, "hondjävulen", "h*********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v269, "homos", "h***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v270, "homoresorna", "h*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v271, "homomän", "h*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v272, "homolobbyns", "h*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v273, "homo", "h**o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v274, "herrejävlar", "h*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v275, "helvetes", "h******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v276, "helvete", "h*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v277, "hönshjärna", "h********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v278, "hästskiten", "h********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v279, "hästskit", "h******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v280, "hästkuk", "h*****k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v281, "hängtuttar", "h********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[8],0>(v282, "hängröv", "h*****v");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v283, "hängbröst", "h*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v284, "gulingen", "g*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v285, "gulingarna", "g********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v286, "guling", "g****g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v287, "gubbslemmet", "g*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v288, "gubbjävlar", "g********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v289, "gubbjävel", "g*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v290, "gubbfan", "g*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v291, "groggluder", "g********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[12],0>(v292, "grönjävligt", "g*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v293, "golfidioter", "g*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[15],0>(v294, "gnällkärringar", "g************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[13],0>(v295, "gnällkärring", "g**********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v296, "göka", "g**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v297, "fucking", "f*****g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v298, "fuckar", "f****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v299, "frilanshelvetet", "f*************t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v300, "flugskit", "f******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v301, "flinfitta", "f*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v302, "flatorna", "f******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v303, "flata", "f***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v304, "fjolla", "f****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[7],0>(v305, "fjant", "f****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v306, "fittstim", "f******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v307, "fittslickare", "f**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v308, "fittorna", "f******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v309, "fittor", "f****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v310, "fittjävel", "f*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v311, "fitthora", "f******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v312, "fittfis", "f******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v313, "fittfakta", "f*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v314, "fittan", "f****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v315, "fitta", "f***a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v316, "finndjävul", "f********l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v317, "fikus", "f***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v318, "fetto", "f***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v319, "fanstygen", "f*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v320, "fanskapet", "f*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v321, "fanken", "f****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v322, "fan", "f*n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v323, "förbannat", "f*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v324, "förbannade", "f********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v325, "förbövelen", "f********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v326, "fåntratt", "f******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v327, "dummerjöns", "d********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v328, "dumjävel", "d******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v329, "dumhuvud", "d******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v330, "dumhuve", "d*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v331, "dumfan", "d****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v332, "djävulusiska", "d**********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v333, "djävligt", "d******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v334, "djävlarna", "d*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v335, "djävlar", "d*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v336, "djävelskap", "d********p");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v337, "djäveln", "d*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v338, "djävel", "d****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v339, "djäkla", "d****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v340, "datorrunkande", "d***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v341, "datajävel", "d*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v342, "danskjävlar", "d*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v343, "cp", "c*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v344, "butchflator", "b*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[18],0>(v345, "bullshit-filsosof", "b***************f");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v346, "breeders", "b******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v347, "brakskit", "b******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v348, "bonnläppar", "b********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v349, "bonnjävlar", "b********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v350, "bondläpp", "b******p");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v351, "bollibompasex", "b***********x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v352, "bokhora-sidan", "b***********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v353, "bokhora", "b*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[16],0>(v354, "blodsugarjävlar", "b*************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v355, "blattesvenska", "b***********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v356, "blattesnack", "b*********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v357, "blatten", "b*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v358, "blattehumor", "b*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v359, "blatte", "b****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v360, "blattarna", "b*******a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v361, "blattar", "b*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v362, "bitterfittan", "b**********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[18],0>(v363, "bitterfittalappen", "b***************n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v364, "bitterfitta", "b*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v365, "betongröv", "b*******v");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v366, "betonghäck", "b********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v367, "balle", "b***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v368, "ballar", "b****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v369, "badjävlar", "b*******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v370, "badhelvetet", "b*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v371, "babbe", "b***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[12],0>(v372, "bögskräcken", "b*********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v373, "bögskräck", "b*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v374, "bögskämt", "b******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v375, "bögporr", "b*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v376, "bögparlör", "b*******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v377, "bögpar", "b****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v378, "bögmagasin", "b********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[12],0>(v379, "bögjävlarna", "b*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v380, "bögjävel", "b******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v381, "böghora", "b*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v382, "böghatare", "b*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[7],0>(v383, "böghög", "b****g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v384, "bögfaktor", "b*******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v385, "bögen", "b***n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v386, "bögdjävel", "b*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v387, "bögbomb", "b*****b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v388, "bögbingo", "b******o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v389, "bögarnas", "b******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v390, "bögarna", "b*****a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v391, "bögar", "b***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v392, "böga", "b**a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[4],0>(v393, "bög", "b*g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v394, "avsugning", "a*******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v395, "avskum", "a****m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v396, "attackflator", "a**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v397, "as", "a*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v398, "arslen", "a****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v399, "arsle", "a***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v400, "arselet", "a*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v401, "arsel", "a***l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v402, "arschel", "a*****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v403, "analt", "a***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v404, "analsex", "a*****x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v405, "analporr", "a******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v406, "analplugg", "a*******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v407, "analkulor", "a*******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v408, "a-hole", "a****e");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_sv(void)::sProfanityData_sv, (uint64_t)v5, 0x194uLL);
    for (i = 0; i != -2424; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v408[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_sv(void)::sProfanityData_sv, &dword_1BF794000);
  }
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, GetProfanityFilter_sv(void)::sProfanityData_sv[0], unk_1EF581EA8, 0xAAAAAAAAAAAAAAABLL * ((unk_1EF581EA8 - GetProfanityFilter_sv(void)::sProfanityData_sv[0]) >> 4));
}

void sub_1BF9C3C2C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + 19344;
  v4 = -19392;
  do
  {
    v3 = std::pair<std::string const,std::string>::~pair(v3) - 48;
    v4 += 48;
  }
  while (v4);
  _Unwind_Resume(a1);
}

_QWORD *GetProfanityFilter_he(_QWORD *a1)
{
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[7];

  v16[6] = *MEMORY[0x1E0C80C00];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[8],0>(v5, "שרמוטה", "ש***ה");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v6, "צ׳חצ׳ח", "צ׳**ח");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v7, "צ׳וח", "צ׳*ח");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v8, "פרענק", "פ***ק");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v9, "פרחולה", "פ****ה");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[10],0>(v10, "ערסוואט", "ע*****ט");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[9],0>(v11, "ערבוש", "ע****ש");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v12, "מזדיין", "מ****ן");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v13, "לזיין", "ל***ן");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[8],0>(v14, "כושון", "כ***ן");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[9],0>(v15, "יהודון", "י****ן");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v16, "זונה", "ז***ה");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_he(void)::sProfanityData_he, (uint64_t)v5, 0xCuLL);
    for (i = 66; i != -6; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v5[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_he(void)::sProfanityData_he, &dword_1BF794000);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(a1, GetProfanityFilter_he(void)::sProfanityData_he[0], unk_1EF581EC8, 0xAAAAAAAAAAAAAAABLL * ((unk_1EF581EC8 - GetProfanityFilter_he(void)::sProfanityData_he[0]) >> 4));
}

void sub_1BF9C3EF8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t i;

  for (i = 528; i != -48; i -= 48)
    std::pair<std::string const,std::string>::~pair(v1 + i);
  _Unwind_Resume(a1);
}

_QWORD *GetProfanityFilter_da(uint64_t a1)
{
  _QWORD *v1;
  unsigned __int8 v2;
  uint64_t i;
  _QWORD v5[6];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[6];
  _QWORD v22[6];
  _QWORD v23[6];
  _QWORD v24[6];
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[6];
  _QWORD v28[6];
  _QWORD v29[6];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _QWORD v33[6];
  _QWORD v34[6];
  _QWORD v35[6];
  _QWORD v36[6];
  _QWORD v37[6];
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[6];
  _QWORD v47[6];
  _QWORD v48[6];
  _QWORD v49[6];
  _QWORD v50[6];
  _QWORD v51[6];
  _QWORD v52[6];
  _QWORD v53[6];
  _QWORD v54[6];
  _QWORD v55[6];
  _QWORD v56[6];
  _QWORD v57[6];
  _QWORD v58[6];
  _QWORD v59[6];
  _QWORD v60[6];
  _QWORD v61[6];
  _QWORD v62[6];
  _QWORD v63[6];
  _QWORD v64[6];
  _QWORD v65[6];
  _QWORD v66[6];
  _QWORD v67[6];
  _QWORD v68[6];
  _QWORD v69[6];
  _QWORD v70[6];
  _QWORD v71[6];
  _QWORD v72[6];
  _QWORD v73[6];
  _QWORD v74[6];
  _QWORD v75[6];
  _QWORD v76[6];
  _QWORD v77[6];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[6];
  _QWORD v81[6];
  _QWORD v82[6];
  _QWORD v83[6];
  _QWORD v84[6];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[6];
  _QWORD v88[6];
  _QWORD v89[6];
  _QWORD v90[6];
  _QWORD v91[6];
  _QWORD v92[6];
  _QWORD v93[6];
  _QWORD v94[6];
  _QWORD v95[6];
  _QWORD v96[6];
  _QWORD v97[6];
  _QWORD v98[6];
  _QWORD v99[6];
  _QWORD v100[6];
  _QWORD v101[6];
  _QWORD v102[6];
  _QWORD v103[6];
  _QWORD v104[6];
  _QWORD v105[6];
  _QWORD v106[6];
  _QWORD v107[6];
  _QWORD v108[6];
  _QWORD v109[6];
  _QWORD v110[6];
  _QWORD v111[6];
  _QWORD v112[6];
  _QWORD v113[6];
  _QWORD v114[6];
  _QWORD v115[6];
  _QWORD v116[6];
  _QWORD v117[6];
  _QWORD v118[6];
  _QWORD v119[6];
  _QWORD v120[6];
  _QWORD v121[6];
  _QWORD v122[6];
  _QWORD v123[6];
  _QWORD v124[6];
  _QWORD v125[6];
  _QWORD v126[6];
  _QWORD v127[6];
  _QWORD v128[6];
  _QWORD v129[6];
  _QWORD v130[6];
  _QWORD v131[6];
  _QWORD v132[6];
  _QWORD v133[6];
  _QWORD v134[6];
  _QWORD v135[6];
  _QWORD v136[6];
  _QWORD v137[6];
  _QWORD v138[6];
  _QWORD v139[6];
  _QWORD v140[6];
  _QWORD v141[6];
  _QWORD v142[6];
  _QWORD v143[6];
  _QWORD v144[6];
  _QWORD v145[6];
  _QWORD v146[6];
  _QWORD v147[6];
  _QWORD v148[6];
  _QWORD v149[6];
  _QWORD v150[6];
  _QWORD v151[6];
  _QWORD v152[6];
  _QWORD v153[6];
  _QWORD v154[6];
  _QWORD v155[6];
  _QWORD v156[6];
  _QWORD v157[6];
  _QWORD v158[6];
  _QWORD v159[6];
  _QWORD v160[6];
  _QWORD v161[6];
  _QWORD v162[6];
  _QWORD v163[6];
  _QWORD v164[6];
  _QWORD v165[6];
  _QWORD v166[6];
  _QWORD v167[6];
  _QWORD v168[6];
  _QWORD v169[6];
  _QWORD v170[6];
  _QWORD v171[6];
  _QWORD v172[6];
  _QWORD v173[6];
  _QWORD v174[6];
  _QWORD v175[6];
  _QWORD v176[6];
  _QWORD v177[6];
  _QWORD v178[6];
  _QWORD v179[6];
  _QWORD v180[6];
  _QWORD v181[6];
  _QWORD v182[6];
  _QWORD v183[6];
  _QWORD v184[6];
  _QWORD v185[6];
  _QWORD v186[6];
  _QWORD v187[6];
  _QWORD v188[6];
  _QWORD v189[6];
  _QWORD v190[6];
  _QWORD v191[6];
  _QWORD v192[6];
  _QWORD v193[6];
  _QWORD v194[6];
  _QWORD v195[6];
  _QWORD v196[6];
  _QWORD v197[6];
  _QWORD v198[6];
  _QWORD v199[6];
  _QWORD v200[6];
  _QWORD v201[6];
  _QWORD v202[6];
  _QWORD v203[6];
  _QWORD v204[6];
  _QWORD v205[6];
  _QWORD v206[6];
  _QWORD v207[6];
  _QWORD v208[6];
  _QWORD v209[6];
  _QWORD v210[6];
  _QWORD v211[6];
  _QWORD v212[6];
  _QWORD v213[6];
  _QWORD v214[6];
  _QWORD v215[6];
  _QWORD v216[6];
  _QWORD v217[6];
  _QWORD v218[6];
  _QWORD v219[6];
  _QWORD v220[6];
  _QWORD v221[6];
  _QWORD v222[6];
  _QWORD v223[6];
  _QWORD v224[6];
  _QWORD v225[6];
  _QWORD v226[6];
  _QWORD v227[6];
  _QWORD v228[6];
  _QWORD v229[6];
  _QWORD v230[6];
  _QWORD v231[6];
  _QWORD v232[6];
  _QWORD v233[6];
  _QWORD v234[6];
  _QWORD v235[6];
  _QWORD v236[6];
  _QWORD v237[6];
  _QWORD v238[6];
  _QWORD v239[6];
  _QWORD v240[6];
  _QWORD v241[6];
  _QWORD v242[6];
  _QWORD v243[6];
  _QWORD v244[6];
  _QWORD v245[6];
  _QWORD v246[6];
  _QWORD v247[6];
  _QWORD v248[6];
  _QWORD v249[6];
  _QWORD v250[6];
  _QWORD v251[6];
  _QWORD v252[6];
  _QWORD v253[6];
  _QWORD v254[6];
  _QWORD v255[6];
  _QWORD v256[6];
  _QWORD v257[6];
  _QWORD v258[6];
  _QWORD v259[6];
  _QWORD v260[6];
  _QWORD v261[6];
  _QWORD v262[6];
  _QWORD v263[6];
  _QWORD v264[6];
  _QWORD v265[6];
  _QWORD v266[6];
  _QWORD v267[6];
  _QWORD v268[6];
  _QWORD v269[6];
  _QWORD v270[6];
  _QWORD v271[6];
  _QWORD v272[6];
  _QWORD v273[6];
  _QWORD v274[6];
  _QWORD v275[6];
  _QWORD v276[6];
  _QWORD v277[6];
  _QWORD v278[6];
  _QWORD v279[6];
  _QWORD v280[6];
  _QWORD v281[6];
  _QWORD v282[6];
  _QWORD v283[6];
  _QWORD v284[6];
  _QWORD v285[6];
  _QWORD v286[6];
  _QWORD v287[6];
  _QWORD v288[6];
  _QWORD v289[6];
  _QWORD v290[6];
  _QWORD v291[6];
  _QWORD v292[6];
  _QWORD v293[6];
  _QWORD v294[6];
  _QWORD v295[6];
  _QWORD v296[6];
  _QWORD v297[6];
  _QWORD v298[6];
  _QWORD v299[6];
  _QWORD v300[6];
  _QWORD v301[6];
  _QWORD v302[6];
  _QWORD v303[6];
  _QWORD v304[6];
  _QWORD v305[6];
  _QWORD v306[6];
  _QWORD v307[6];
  _QWORD v308[6];
  _QWORD v309[6];
  _QWORD v310[6];
  _QWORD v311[6];
  _QWORD v312[6];
  _QWORD v313[6];
  _QWORD v314[6];
  _QWORD v315[6];
  _QWORD v316[6];
  _QWORD v317[6];
  _QWORD v318[6];
  _QWORD v319[6];
  _QWORD v320[6];
  _QWORD v321[6];
  _QWORD v322[6];
  _QWORD v323[6];
  _QWORD v324[6];
  _QWORD v325[6];
  _QWORD v326[6];
  _QWORD v327[6];
  _QWORD v328[6];
  _QWORD v329[6];
  _QWORD v330[6];
  _QWORD v331[6];
  _QWORD v332[6];
  _QWORD v333[6];
  _QWORD v334[6];
  _QWORD v335[6];
  _QWORD v336[6];
  _QWORD v337[6];
  _QWORD v338[6];
  _QWORD v339[6];
  _QWORD v340[6];
  _QWORD v341[6];
  _QWORD v342[6];
  _QWORD v343[6];
  _QWORD v344[6];
  _QWORD v345[6];
  _QWORD v346[6];
  _QWORD v347[6];
  _QWORD v348[6];
  _QWORD v349[6];
  _QWORD v350[6];
  _QWORD v351[6];
  _QWORD v352[6];
  _QWORD v353[6];
  _QWORD v354[6];
  _QWORD v355[6];
  _QWORD v356[6];
  _QWORD v357[6];
  _QWORD v358[6];
  _QWORD v359[6];
  _QWORD v360[6];
  _QWORD v361[6];
  _QWORD v362[6];
  _QWORD v363[6];
  _QWORD v364[6];
  _QWORD v365[6];
  _QWORD v366[6];
  _QWORD v367[6];
  _QWORD v368[6];
  _QWORD v369[6];
  _QWORD v370[6];
  _QWORD v371[6];
  _QWORD v372[6];
  _QWORD v373[6];
  _QWORD v374[6];
  _QWORD v375[6];
  _QWORD v376[6];
  _QWORD v377[6];
  _QWORD v378[6];
  _QWORD v379[6];
  _QWORD v380[6];
  _QWORD v381[6];
  _QWORD v382[6];
  _QWORD v383[6];
  _QWORD v384[6];
  _QWORD v385[6];
  _QWORD v386[6];
  _QWORD v387[6];
  _QWORD v388[6];
  _QWORD v389[6];
  _QWORD v390[6];
  _QWORD v391[6];
  _QWORD v392[6];
  _QWORD v393[6];
  _QWORD v394[6];
  _QWORD v395[6];
  _QWORD v396[6];
  _QWORD v397[6];
  _QWORD v398[6];
  _QWORD v399[6];
  _QWORD v400[6];
  _QWORD v401[6];
  _QWORD v402[6];
  _QWORD v403[6];
  _QWORD v404[6];
  _QWORD v405[6];
  _QWORD v406[6];
  _QWORD v407[6];
  _QWORD v408[6];
  _QWORD v409[6];
  _QWORD v410[6];
  _QWORD v411[6];
  _QWORD v412[6];
  _QWORD v413[6];
  _QWORD v414[6];
  _QWORD v415[6];
  _QWORD v416[6];
  _QWORD v417[6];
  _QWORD v418[6];
  _QWORD v419[6];
  _QWORD v420[6];
  _QWORD v421[6];
  _QWORD v422[6];
  _QWORD v423[6];
  _QWORD v424[6];
  _QWORD v425[6];
  _QWORD v426[6];
  _QWORD v427[6];
  _QWORD v428[6];
  _QWORD v429[6];
  _QWORD v430[6];
  _QWORD v431[6];
  _QWORD v432[6];
  _QWORD v433[6];
  _QWORD v434[6];
  _QWORD v435[6];
  _QWORD v436[6];
  _QWORD v437[6];
  _QWORD v438[6];
  _QWORD v439[6];
  _QWORD v440[6];
  _QWORD v441[6];
  _QWORD v442[6];
  _QWORD v443[6];
  _QWORD v444[6];
  _QWORD v445[6];
  _QWORD v446[6];
  _QWORD v447[6];
  _QWORD v448[6];
  _QWORD v449[6];
  _QWORD v450[7];

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](a1);
  v450[6] = *MEMORY[0x1E0C80C00];
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[15],0>(v5, "voldtægtsporno", "v************o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[18],0>(v6, "underklassetosser", "u***************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[22],0>(v7, "underkastelseskælling", "u*******************g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v8, "tyndskid", "t******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v9, "tuneserpjok", "t*********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v10, "toiletsex", "t*******x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v11, "svagpisser", "s********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v12, "stikkersvin", "s*********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v13, "spassere", "s******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v14, "spasser", "s*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v15, "sortsmudskede", "s***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v16, "smatso", "s****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[15],0>(v17, "sladderkælling", "s************g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v18, "skidefornuftig", "s************g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v19, "skidefarligt", "s**********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v20, "skidefalsk", "s********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v21, "skidebange", "s********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[15],0>(v22, "skideærgerligt", "s************t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v23, "skamlæberne", "s*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v24, "skabsmuslimer", "s***********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[23],0>(v25, "skabsmandschauvinister", "s********************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v26, "skøge", "s***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[14],0>(v27, "sigøjnertøser", "s***********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v28, "shemale", "s*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v29, "sgu", "s*u");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v30, "sexslaveri", "s********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v31, "sexslaver", "s*******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v32, "sexslave", "s******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v33, "sexobjekt", "s*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v34, "sexfreak", "s******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v35, "seniorsex", "s*******x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[25],char const(&)[25],0>(v36, "selvudslettelsesreligion", "s**********************n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v37, "sateme", "s****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v38, "rygersvin", "r*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v39, "rumpehul", "r******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v40, "roetyskerne", "r*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v41, "racist-pia", "r********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v42, "racismekortet", "r***********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v43, "racetænkning", "r**********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v44, "racerent", "r******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v45, "røvsygt", "r*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v46, "røvsyge", "r*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v47, "røvsyg", "r****g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v48, "røvkedelige", "r*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v49, "røvhul", "r****l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v50, "røvgode", "r*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[17],0>(v51, "røverkapitalisme", "r**************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[13],0>(v52, "røværgerligt", "r**********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v53, "rødfascist", "r********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v54, "pulet", "p***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v55, "pules", "p***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v56, "puler", "p***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v57, "puledes", "p*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v58, "pulede", "p****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v59, "pule", "p**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v60, "pul", "p*l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[17],0>(v61, "pisseuretfærdigt", "p**************t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v62, "pissets", "p*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v63, "pissetræt", "p*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v64, "pisset", "p****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v65, "pissesur", "p******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v66, "pisses", "p****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v67, "pisserig", "p******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v68, "pisser", "p****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v69, "pissende", "p******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v70, "pissen", "p****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v71, "pissegrådige", "p**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v72, "pissedes", "p******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v73, "pissede", "p*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v74, "pissebarnlig", "p**********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v75, "pissebange", "p********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v76, "pisse", "p***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v77, "pisnings", "p******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v78, "pisningers", "p********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v79, "pisninger", "p*******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v80, "pisningen", "p*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v81, "pisning", "p*****g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v82, "pis", "p*s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v83, "piks", "p**s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v84, "piknings", "p******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v85, "pikløshed", "p*******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v86, "pikløse", "p*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v87, "pikløs", "p****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v88, "pikkets", "p*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v89, "pikket", "p****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v90, "pikkes", "p****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v91, "pikker", "p****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v92, "pikkens", "p*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v93, "pikkenes", "p******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v94, "pikkene", "p*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v95, "pikken", "p****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v96, "pikkedes", "p******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v97, "pikkede", "p*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v98, "pikke", "p***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v99, "pikhoved", "p******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v100, "pik", "p*k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v101, "pigesex", "p*****x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v102, "pigerøve", "p******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v103, "perkersvin", "p********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v104, "perkere", "p*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v105, "perkerdansk", "p*********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v106, "perker", "p****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v107, "penetrering", "p*********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v108, "patters", "p*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v109, "patterne", "p******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v110, "patter", "p****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v111, "pat", "p*t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v112, "parvoldtægt", "p*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v113, "panserkælling", "p***********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v114, "overpisset", "o********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v115, "orgiets", "o*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v116, "orgiet", "o****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v117, "orgies", "o****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v118, "orgiers", "o*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v119, "orgiernes", "o*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v120, "orgierne", "o******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v121, "orgier", "o****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v122, "ordvoldtægt", "o*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v123, "oralsex", "o*****x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v124, "orale", "o***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v125, "onanists", "o******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v126, "onanisters", "o********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v127, "onanister", "o*******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v128, "onanist", "o*****t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v129, "onanis", "o****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v130, "onaniens", "o******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v131, "onanien", "o*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v132, "onaneret", "o******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v133, "onanerer", "o******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v134, "onanerende", "o********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v135, "onaneredes", "o********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v136, "onanerede", "o*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v137, "onanere", "o*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v138, "onaner", "o****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v139, "omgangsluder", "o**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v140, "nynazistiske", "n**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v141, "nynazistisk", "n*********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v142, "nynazist", "n******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v143, "nyfascistiske", "n***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v144, "nyfascistisk", "n**********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v145, "nyfascisterne", "n***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v146, "numsemanden", "n*********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v147, "numsehuls", "n*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v148, "numsehuller", "n*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v149, "numsehul", "n******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v150, "nosses", "n****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v151, "nossers", "n*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v152, "nossernes", "n*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v153, "nosserne", "n******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v154, "nossens", "n*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v155, "nossen", "n****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v156, "nosseløse", "n*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v157, "nosse", "n***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v158, "niggers", "n*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v159, "niggernes", "n*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v160, "niggerne", "n******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v161, "niggeres", "n******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v162, "niggerens", "n*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v163, "niggeren", "n******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v164, "niggere", "n*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v165, "nigger", "n****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v166, "nervevrag", "n*******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v167, "neosvin", "n*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[21],0>(v168, "neonazistgrupperings", "n******************s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v169, "neonazisters", "n**********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v170, "neofascists", "n*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v171, "neofascistiske", "n************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v172, "neofascistisk", "n***********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v173, "neofascisters", "n***********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v174, "neofascister", "n**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v175, "neofascistens", "n***********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v176, "neofascisten", "n**********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v177, "neofascist", "n********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v178, "neo-fascistisk", "n************k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v179, "negres", "n****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v180, "negrenes", "n******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v181, "negrene", "n*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v182, "negre", "n***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v183, "negers", "n****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v184, "negerpikke", "n********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v185, "negernes", "n******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v186, "negerne", "n*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v187, "negeres", "n*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v188, "negerens", "n******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v189, "negeren", "n*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v190, "negerdrengen", "n**********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v191, "negerdreng", "n********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v192, "neger", "n***r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v193, "nasserøve", "n*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v194, "nasserøv", "n******v");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v195, "narrøve", "n*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v196, "narkoluderne", "n**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v197, "narkoluderen", "n**********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v198, "narkoludere", "n*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v199, "narkoluder", "n********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v200, "narhoveder", "n********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v201, "muslimhadere", "m**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v202, "muslimhader", "m*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v203, "muslimfrit", "m********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v204, "mundsex", "m*****x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v205, "mundlort", "m******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v206, "mundgalde", "m*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v207, "muhammedbog", "m*********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v208, "muhammedanske", "m***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v209, "muhammedanernes", "m*************s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v210, "muhammedanerne", "m************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[18],0>(v211, "muhammed-reaktion", "m***************n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v212, "muhammed-bamse", "m************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v213, "muhamedanske", "m**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v214, "muhamedansk", "m*********k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v215, "muhamedanismens", "m*************s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v216, "muhamedanerne", "m***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v217, "muhamedaneres", "m***********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v218, "muhamedanerens", "m************s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v219, "muhamedaneren", "m***********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v220, "muhamedanere", "m**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v221, "motherfucker", "m**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v222, "morgensex", "m*******x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v223, "morgenbolledamer", "m**************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v224, "moone", "m***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v225, "medieliderlig", "m***********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v226, "masturberet", "m*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v227, "masturberede", "m**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v228, "masturbere", "m********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v229, "masturber", "m*******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v230, "møgunge", "m*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v231, "møgsvinets", "m********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v232, "møgsvinet", "m*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v233, "møgsvin", "m*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v234, "møgsos", "m****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v235, "møgsoer", "m*****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v236, "møgsoens", "m******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v237, "møgsoen", "m*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v238, "møgso", "m***o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v239, "møgkælling", "m********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v240, "møggrisens", "m********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v241, "møggris", "m*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v242, "møgfeminister", "m***********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v243, "mæres", "m***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v244, "mærens", "m****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v245, "mærenes", "m*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v246, "mæren", "m***n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[5],0>(v247, "mære", "m**e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[4],0>(v248, "mær", "m*r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[6],0>(v249, "måsen", "m***n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v250, "luksusluder", "l*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v251, "luders", "l****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v252, "ludernes", "l******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v253, "luderne", "l*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v254, "luderkræft", "l********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v255, "luderes", "l*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v256, "luderen", "l*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v257, "ludere", "l****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v258, "luderagtigt", "l*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v259, "luderagtige", "l*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v260, "ludders", "l*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v261, "luddernes", "l*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v262, "ludderne", "l******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v263, "ludderes", "l******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v264, "ludderens", "l*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v265, "ludderen", "l******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v266, "luddere", "l*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v267, "ludder", "l****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v268, "lorts", "l***s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v269, "lortespanden", "l**********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v270, "lortesituation", "l************n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v271, "lortesag", "l******g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v272, "lortes", "l****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v273, "lorteregering", "l***********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v274, "lorteposen", "l********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v275, "lorten", "l****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v276, "lortelandet", "l*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v277, "lortejobs", "l*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v278, "lortefilm", "l*******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v279, "lortede", "l*****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v280, "lortebrune", "l********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v281, "lorteartikler", "l***********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v282, "lorteargument", "l***********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v283, "lortearbejde", "l**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v284, "lokumsaftalen", "l***********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v285, "lokumsaftale", "l**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v286, "listepik", "l******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v287, "liderligheden", "l***********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v288, "liderlige", "l*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v289, "lebbe", "l***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v290, "langpisseri", "l*********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[12],0>(v291, "læderbøsser", "l*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[11],0>(v292, "læderbøsse", "l********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v293, "kvindfolk", "k*******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v294, "kvinderøv", "k*******v");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v295, "kusses", "k****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v296, "kusserne", "k******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v297, "kussens", "k*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v298, "kussekarl", "k*******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v299, "kussegalleri", "k**********i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[16],0>(v300, "kraftværks-svin", "k*************n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v301, "kraftedeme", "k********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v302, "kommunistsvin", "k***********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[21],0>(v303, "kommunist-fascismens", "k******************s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v304, "kneppen", "k*****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v305, "klimasvin", "k*******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v306, "klidmostre", "k********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v307, "kartoffeltyskere", "k**************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[20],0>(v308, "kartoffelpolakkerne", "k*****************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v309, "kamelklapper", "k**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v310, "kønsdele", "k******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[8],0>(v311, "købesex", "k*****x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[21],char const(&)[20],0>(v312, "københavnerasiatisk", "k*****************k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[15],0>(v313, "kærlighedssovs", "k************s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v314, "kæmpevagina", "k*********a");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v315, "jødeso", "j****o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v316, "jøderent", "j******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v317, "jødekost", "j******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v318, "jødeblodet", "j********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v319, "islam-hadende", "i***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v320, "horkarle", "h******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v321, "horeunge", "h******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v322, "hoer", "h**r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v323, "hjernelamme", "h*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v324, "hitlers", "h*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v325, "hitler-lignende", "h*************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v326, "hitler-kortet", "h***********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v327, "hitler", "h****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v328, "hipsterlebbe", "h**********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v329, "hippiefis", "h*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v330, "himpegimpes", "h*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v331, "himpegimpers", "h**********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v332, "himpegimpernes", "h************s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v333, "himpegimperne", "h***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v334, "himpegimper", "h*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v335, "himpegimpens", "h**********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v336, "himpegimpen", "h*********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v337, "himpegimpe", "h********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v338, "hesteluder", "h********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v339, "halvhjerner", "h*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v340, "halenegerne", "h*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v341, "halalhysteriet", "h************t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v342, "gruppesex", "g*******x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v343, "gruppeknald", "g*********d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v344, "gramsedes", "g*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[15],0>(v345, "grønlænderstiv", "g************v");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v346, "goddammit", "g*******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v347, "fucking", "f*****g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v348, "fuckfinger", "f********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v349, "fucker", "f****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v350, "fucked-up", "f*******p");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v351, "fucked", "f****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v352, "fuck", "f**k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v353, "forpulet", "f******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v354, "forpulede", "f*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v355, "forhud", "f****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[23],0>(v356, "forfatnings-striptease", "f********************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v357, "fluelort", "f******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v358, "fluekneppe", "f********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[16],0>(v359, "fløjlshængerøve", "f*************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[19],0>(v360, "flæskestegsdansker", "f****************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[18],0>(v361, "flæskestegsædende", "f***************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v362, "fist-fucking", "f**********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v363, "fisses", "f****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v364, "fissers", "f*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v365, "fissernes", "f*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v366, "fisserne", "f******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v367, "fisser", "f****r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v368, "fissens", "f*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v369, "fissen", "f****n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v370, "fisse", "f***e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v371, "festivalsex", "f*********x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[4],0>(v372, "fes", "f*s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v373, "engangsknald", "e**********d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v374, "ejakulering", "e*********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v375, "dyresex", "d*****x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v376, "dyrepornografi", "d************i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v377, "duskes", "d****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v378, "duskens", "d*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v379, "dusk", "d**k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v380, "dumb", "d**b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[10],0>(v381, "drypperts", "d*******s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v382, "drypperters", "d*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v383, "drypperten", "d********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v384, "dryppert", "d******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v385, "dopehead", "d******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[5],0>(v386, "dick", "d**k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v387, "diarréen", "d******n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v388, "danselebbe", "d********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v389, "damned", "d****d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[14],0>(v390, "dæmon-moderen", "d***********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v391, "dåsesnak", "d******k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v392, "cojones", "c*****s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v393, "burlesk-freaks", "b************s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v394, "bunkepul", "b******l");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v395, "bullshitter", "b*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v396, "bongopatter", "b*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v397, "bondeislamisme", "b************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v398, "bollerummet", "b*********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v399, "bollerum", "b******m");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v400, "bolleri", "b*****i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v401, "bogluder", "b******r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v402, "boblepatter", "b*********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v403, "blowjobbets", "b*********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v404, "blowjob", "b*****b");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v405, "blegfede", "b******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v406, "bj", "b*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[3],0>(v407, "bj", "b*");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v408, "bitterfisser", "b**********r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v409, "bitterfissens", "b***********s");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v410, "bitterfissen", "b**********n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[12],0>(v411, "bitterfisse", "b*********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v412, "bitche", "b****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v413, "bitch", "b***h");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v414, "betonsocialisten", "b**************n");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v415, "betonsocialist", "b************t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[23],char const(&)[23],0>(v416, "betonsocialdemokratisk", "b********************k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v417, "betonmarxister", "b************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[18],0>(v418, "betonliberalister", "b***************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v419, "betonliberalist", "b*************t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v420, "betonlebbe", "b********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v421, "betonkommunister", "b**************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v422, "betonkommunist", "b************t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v423, "betonfeministisk", "b**************k");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[18],char const(&)[18],0>(v424, "betonfeministerne", "b***************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v425, "betonfeminister", "b*************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[14],0>(v426, "betonfeminist", "b***********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v427, "betonfeminisme", "b************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[20],char const(&)[20],0>(v428, "betonchauvinistiske", "b*****************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[16],0>(v429, "beton-feminisme", "b*************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[11],0>(v430, "begramsede", "b********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v431, "barrøvet", "b******t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[19],char const(&)[19],0>(v432, "bananrepublikanere", "b****************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const(&)[15],0>(v433, "bananplukkerne", "b************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v434, "bøssestening", "b**********g");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[15],0>(v435, "bøssesexfester", "b************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[10],0>(v436, "bøsserøve", "b*******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[11],char const(&)[10],0>(v437, "børnevold", "b*******d");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v438, "børnesex", "b******x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[16],0>(v439, "børnepornosider", "b*************r");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[16],0>(v440, "børnepornografi", "b*************i");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[11],0>(v441, "børneporno", "b********o");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[16],char const(&)[14],0>(v442, "børnekrænkere", "b***********e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[7],0>(v443, "bæerne", "b****e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v444, "analt", "a***t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[8],0>(v445, "analsex", "a*****x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v446, "analkløe", "a******e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v447, "afføringssex", "a**********x");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[13],0>(v448, "abekasteriet", "a**********t");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[17],char const(&)[17],0>(v449, "åndsforsnottede", "å*************e");
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(v450, "åndsamøber", "å********r");
    std::vector<std::pair<std::string,std::string>>::vector[abi:ne180100](GetProfanityFilter_da(void)::sProfanityData_da, (uint64_t)v5, 0x1BEuLL);
    for (i = 0; i != -2676; i -= 6)
      std::pair<std::string const,std::string>::~pair((uint64_t)&v450[i]);
    __cxa_atexit((void (*)(void *))std::vector<std::pair<std::string,std::string>>::~vector[abi:ne180100], GetProfanityFilter_da(void)::sProfanityData_da, &dword_1BF794000);
  }
  *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v1, GetProfanityFilter_da(void)::sProfanityData_da[0], unk_1EF581F08, 0xAAAAAAAAAAAAAAABLL * ((unk_1EF581F08 - GetProfanityFilter_da(void)::sProfanityData_da[0]) >> 4));
}

