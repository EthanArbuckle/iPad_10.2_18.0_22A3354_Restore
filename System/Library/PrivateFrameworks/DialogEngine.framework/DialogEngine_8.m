void SnippetUI::Switch::CopyFrom(SnippetUI::Switch *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::Switch::Clear(this);
    SnippetUI::Switch::MergeFrom(this, a2);
  }
}

void SnippetUI::Switch::MergeFrom(SnippetUI::Switch *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::Switch *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Switch.pb.cc", 372);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::Switch::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BFC1A66C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Switch::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 52) = a2;
  return this;
}

uint64_t SnippetUI::Switch::GetMetadata(SnippetUI::Switch *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_Switch_2eproto);
  return file_level_metadata_Switch_2eproto;
}

void *SnippetUI::Switch::default_instance(SnippetUI::Switch *this)
{
  if (atomic_load(scc_info_Switch_Switch_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Switch_Switch_2eproto);
  return &SnippetUI::_Switch_default_instance_;
}

void SnippetUI::Switch::MergeFrom(SnippetUI::Switch *this, const SnippetUI::Switch *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  int **v10;
  int **v11;
  int **v12;
  int **v13;
  int **v14;
  int **v15;
  char v16;
  std::string v17[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v17, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Switch.pb.cc", 387);
    v4 = google::protobuf::internal::LogMessage::operator<<(v17, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v16, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v17[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Switch *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_QWORD *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v6);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(_QWORD *)(v8 + 8))
      goto LABEL_21;
  }
  else if (!*(_BYTE *)(v8 + 23))
  {
    goto LABEL_21;
  }
  v9 = (uint64_t *)*((_QWORD *)this + 3);
  if (v9 != (uint64_t *)v8)
  {
    if (v9 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
    else
      std::string::operator=(*((std::string **)this + 3), (const std::string *)v8);
  }
LABEL_21:
  if (a2 != (const SnippetUI::Switch *)&SnippetUI::_Switch_default_instance_)
  {
    v10 = (int **)*((_QWORD *)a2 + 4);
    if (v10)
    {
      v11 = (int **)*((_QWORD *)this + 4);
      if (!v11)
      {
        v11 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((_QWORD *)this + 4) = v11;
        v10 = (int **)*((_QWORD *)a2 + 4);
      }
      if (v10)
        v12 = v10;
      else
        v12 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      SnippetUI::ActionProperty::MergeFrom(v11, v12);
    }
    v13 = (int **)*((_QWORD *)a2 + 5);
    if (v13)
    {
      v14 = (int **)*((_QWORD *)this + 5);
      if (!v14)
      {
        v14 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((_QWORD *)this + 5) = v14;
        v13 = (int **)*((_QWORD *)a2 + 5);
      }
      if (v13)
        v15 = v13;
      else
        v15 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      SnippetUI::ActionProperty::MergeFrom(v14, v15);
    }
  }
  if (*((_BYTE *)a2 + 48))
    *((_BYTE *)this + 48) = 1;
}

void sub_1BFC1A88C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::Switch *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Switch>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::Switch *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::Switch *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x38uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Switch>);
    SnippetUI::Switch::Switch(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::Switch *)operator new();
    SnippetUI::Switch::Switch(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFC1A928(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C405CE0ED13);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Switch>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void SnippetUI::Switch::InitAsDefaultInstance(SnippetUI::Switch *this)
{
  qword_1ED1D3C08 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
  unk_1ED1D3C10 = &SnippetUI::_ActionProperty_default_instance_;
}

uint64_t SnippetUI::Switch::_Internal::on_action(SnippetUI::Switch::_Internal *this, const SnippetUI::Switch *a2)
{
  return *((_QWORD *)this + 4);
}

uint64_t SnippetUI::Switch::_Internal::off_action(SnippetUI::Switch::_Internal *this, const SnippetUI::Switch *a2)
{
  return *((_QWORD *)this + 5);
}

uint64_t SnippetUI::Switch::clear_on_action(SnippetUI::Switch *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 4) = 0;
  return result;
}

uint64_t SnippetUI::Switch::clear_off_action(SnippetUI::Switch *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 5);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 5) = 0;
  return result;
}

SnippetUI::Switch *SnippetUI::Switch::Switch(SnippetUI::Switch *this, const SnippetUI::Switch *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  SnippetUI::ActionProperty *v10;
  SnippetUI::ActionProperty *v11;

  *(_QWORD *)this = &off_1E7938168;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 13) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Switch *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
    v9 = *(_QWORD *)(v8 + 8);
  else
    v9 = *(unsigned __int8 *)(v8 + 23);
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v9)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
  if (a2 == (const SnippetUI::Switch *)&SnippetUI::_Switch_default_instance_)
  {
    v11 = 0;
    *((_QWORD *)this + 4) = 0;
  }
  else
  {
    if (*((_QWORD *)a2 + 4))
    {
      v10 = (SnippetUI::ActionProperty *)operator new();
      SnippetUI::ActionProperty::ActionProperty(v10, *((const SnippetUI::ActionProperty **)a2 + 4));
    }
    else
    {
      v10 = 0;
    }
    *((_QWORD *)this + 4) = v10;
    if (*((_QWORD *)a2 + 5))
    {
      v11 = (SnippetUI::ActionProperty *)operator new();
      SnippetUI::ActionProperty::ActionProperty(v11, *((const SnippetUI::ActionProperty **)a2 + 5));
    }
    else
    {
      v11 = 0;
    }
  }
  *((_QWORD *)this + 5) = v11;
  *((_BYTE *)this + 48) = *((_BYTE *)a2 + 48);
  return this;
}

void sub_1BFC1AC2C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x1C3B8D890](v2, 0x10A1C40B18DE219);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Switch::CopyFrom(SnippetUI::Switch *this, const SnippetUI::Switch *a2)
{
  if (a2 != this)
  {
    SnippetUI::Switch::Clear(this);
    SnippetUI::Switch::MergeFrom(this, a2);
  }
}

void SnippetUI::Switch::InternalSwap(SnippetUI::Switch *this, SnippetUI::Switch *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  google::protobuf::UnknownFieldSet *v21;

  v4 = (SnippetUI::Switch *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v21;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 2);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = (uint64_t *)*((_QWORD *)this + 3);
  v14 = (uint64_t **)((char *)a2 + 24);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_19;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v13 = (uint64_t *)*((_QWORD *)this + 3);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v13[2];
  v17 = *(_OWORD *)v13;
  v18 = v15[2];
  *(_OWORD *)v13 = *(_OWORD *)v15;
  v13[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_19:
  v19 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v19;
  v20 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v20;
  LOBYTE(v20) = *((_BYTE *)this + 48);
  *((_BYTE *)this + 48) = *((_BYTE *)a2 + 48);
  *((_BYTE *)a2 + 48) = v20;
}

void YAML::Scanner::ScanDirective(YAML::Scanner *this)
{
  uint64_t i;
  uint64_t v3;
  int v4;
  unsigned __int8 v5;
  std::string::value_type v6;
  YAML::Exp *v7;
  YAML::Exp *v8;
  unsigned __int8 v9;
  uint64_t v10;
  unsigned __int8 v11;
  int v12;
  unsigned __int8 v13;
  std::string::value_type v14;
  YAML::Exp *v15;
  YAML::Exp *v16;
  _OWORD *v17;
  __int128 v18;
  uint64_t v19;
  YAML::Exp *v20;
  YAML::Exp *v21;
  std::string v22;
  uint64_t v23;
  __int128 v24;
  int v25;
  void *__p[2];
  __int128 v27;
  __int128 v28;
  int v29;
  _QWORD v30[4];
  std::string::size_type *p_size;
  YAML::Scanner *v32;

  memset(v30, 0, 24);
  YAML::Scanner::PopAllIndents(this);
  for (i = *((_QWORD *)this + 24); i; i = *((_QWORD *)this + 24))
  {
    *((_QWORD *)this + 24) = i - 1;
    std::deque<YAML::Scanner::SimpleKey>::__maybe_remove_back_spare[abi:ne180100]((_QWORD *)this + 19);
  }
  *((_WORD *)this + 73) = 0;
  v3 = *((_QWORD *)this + 1);
  v4 = *((_DWORD *)this + 4);
  *(_QWORD *)&v24 = 0;
  *((_QWORD *)&v24 + 1) = v3;
  v25 = v4;
  *(_OWORD *)__p = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0;
  YAML::Stream::get(this);
  while (!*(_DWORD *)(*(_QWORD *)this + *(_QWORD *)(**(_QWORD **)this - 24) + 32)
       || *((_QWORD *)this + 8)
       && *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 4) + ((*((_QWORD *)this + 7) >> 9) & 0x7FFFFFFFFFFFF8))
                   + (*((_QWORD *)this + 7) & 0xFFFLL)) != 4)
  {
    if ((v5 & 1) == 0)
    {
      if ((_DWORD)v7)
      {
        YAML::Exp::Blank(v7);
        YAML::Exp::Break(v8);
        YAML::operator|(YAML::Exp::Blank(void)::e, YAML::Exp::Break(void)::e, (uint64_t)YAML::Exp::BlankOrBreak(void)::e);
        __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, YAML::Exp::BlankOrBreak(void)::e, &dword_1BF794000);
      }
    }
    v22.__r_.__value_.__r.__words[0] = 0;
    v22.__r_.__value_.__l.__size_ = (std::string::size_type)this;
    if ((YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)YAML::Exp::BlankOrBreak(void)::e, (unint64_t *)&v22) & 0x80000000) == 0)break;
    v6 = YAML::Stream::get(this);
    std::string::push_back((std::string *)__p, v6);
  }
  while (1)
  {
    while (1)
    {
      if ((v9 & 1) == 0)
      {
        if ((_DWORD)v20)
        {
          YAML::Exp::Space(v20);
          YAML::Exp::Tab(v21);
          YAML::operator|(&YAML::Exp::Space(void)::e, &YAML::Exp::Tab(void)::e, (uint64_t)YAML::Exp::Blank(void)::e);
          __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, YAML::Exp::Blank(void)::e, &dword_1BF794000);
        }
      }
      v22.__r_.__value_.__r.__words[0] = 0;
      v22.__r_.__value_.__l.__size_ = (std::string::size_type)this;
      v10 = YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)YAML::Exp::Blank(void)::e, (unint64_t *)&v22);
      if ((v10 & 0x80000000) != 0)
        break;
      YAML::Stream::get(this);
    }
    if (*(_DWORD *)(*(_QWORD *)this + *(_QWORD *)(**(_QWORD **)this - 24) + 32)
      && (!*((_QWORD *)this + 8)
       || *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 4) + ((*((_QWORD *)this + 7) >> 9) & 0x7FFFFFFFFFFFF8))
                   + (*((_QWORD *)this + 7) & 0xFFFLL)) == 4))
    {
      break;
    }
    YAML::Exp::Break((YAML::Exp *)v10);
    v22.__r_.__value_.__r.__words[0] = 0;
    v22.__r_.__value_.__l.__size_ = (std::string::size_type)this;
    if ((YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)YAML::Exp::Break(void)::e, (unint64_t *)&v22) & 0x80000000) == 0)
      break;
    {
      YAML::Exp::Comment(void)::e = 1;
      word_1EF580AEC = 35;
      qword_1EF580AF8 = 0;
      unk_1EF580B00 = 0;
      qword_1EF580AF0 = 0;
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Comment(void)::e, &dword_1BF794000);
    }
    LODWORD(v22.__r_.__value_.__l.__data_) = YAML::Exp::Comment(void)::e;
    WORD2(v22.__r_.__value_.__r.__words[0]) = word_1EF580AEC;
    v23 = 0;
    *(_OWORD *)&v22.__r_.__value_.__r.__words[1] = 0uLL;
    std::vector<YAML::RegEx>::__init_with_size[abi:ne180100]<YAML::RegEx*,YAML::RegEx*>(&v22.__r_.__value_.__l.__size_, (int *)qword_1EF580AF0, (int *)qword_1EF580AF8, (qword_1EF580AF8 - qword_1EF580AF0) >> 5);
    p_size = 0;
    v32 = this;
    v12 = YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)&v22, (unint64_t *)&p_size);
    p_size = &v22.__r_.__value_.__l.__size_;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_size);
    if ((v12 & 0x80000000) == 0)
      break;
    memset(&v22, 0, sizeof(v22));
    while (!*(_DWORD *)(*(_QWORD *)this + *(_QWORD *)(**(_QWORD **)this - 24) + 32)
         || *((_QWORD *)this + 8)
         && *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 4) + ((*((_QWORD *)this + 7) >> 9) & 0x7FFFFFFFFFFFF8))
                     + (*((_QWORD *)this + 7) & 0xFFFLL)) != 4)
    {
      if ((v13 & 1) == 0)
      {
        if ((_DWORD)v15)
        {
          YAML::Exp::Blank(v15);
          YAML::Exp::Break(v16);
          YAML::operator|(YAML::Exp::Blank(void)::e, YAML::Exp::Break(void)::e, (uint64_t)YAML::Exp::BlankOrBreak(void)::e);
          __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, YAML::Exp::BlankOrBreak(void)::e, &dword_1BF794000);
        }
      }
      p_size = 0;
      v32 = this;
      if ((YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)YAML::Exp::BlankOrBreak(void)::e, (unint64_t *)&p_size) & 0x80000000) == 0)break;
      v14 = YAML::Stream::get(this);
      std::string::push_back(&v22, v14);
    }
    v17 = (_OWORD *)v28;
    if ((unint64_t)v28 >= *((_QWORD *)&v28 + 1))
    {
      v19 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v27 + 1, (__int128 *)&v22);
    }
    else
    {
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v28, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
      }
      else
      {
        v18 = *(_OWORD *)&v22.__r_.__value_.__l.__data_;
        *(_QWORD *)(v28 + 16) = *((_QWORD *)&v22.__r_.__value_.__l + 2);
        *v17 = v18;
      }
      v19 = (uint64_t)v17 + 24;
    }
    *(_QWORD *)&v28 = v19;
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
  }
  std::deque<YAML::Token>::push_back((_QWORD *)this + 12, &v24);
  v22.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27 + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
  if (SBYTE7(v27) < 0)
    operator delete(__p[0]);
  *(_QWORD *)&v24 = v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
}

void sub_1BFC1B2EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  YAML::Token::~Token((void **)&a17);
  a17 = &a27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  _Unwind_Resume(a1);
}

std::string *std::deque<YAML::Token>::push_back(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  std::string *result;

  v4 = a1[1];
  v5 = a1[2];
  v6 = 51 * ((v5 - v4) >> 3) - 1;
  if (v5 == v4)
    v6 = 0;
  if (v6 == a1[5] + a1[4])
  {
    std::deque<YAML::Token>::__add_back_capacity(a1);
    v4 = a1[1];
    v5 = a1[2];
  }
  if (v5 == v4)
  {
    v8 = 0;
  }
  else
  {
    v7 = a1[5] + a1[4];
    v8 = *(_QWORD *)(v4 + 8 * (v7 / 0x33)) + 80 * (v7 % 0x33);
  }
  v9 = *a2;
  *(_DWORD *)(v8 + 16) = *((_DWORD *)a2 + 4);
  *(_OWORD *)v8 = v9;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v8 + 24), *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v10 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(v8 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v8 + 24) = v10;
  }
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 56) = 0;
  *(_QWORD *)(v8 + 64) = 0;
  result = std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(v8 + 48), *((__int128 **)a2 + 6), *((__int128 **)a2 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 3));
  *(_DWORD *)(v8 + 72) = *((_DWORD *)a2 + 18);
  ++a1[5];
  return result;
}

void sub_1BFC1B4C8(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 + 47) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void YAML::Scanner::ScanDocStart(YAML::Scanner *this)
{
  uint64_t i;
  uint64_t v3;
  int v4;
  int v5;
  __int128 v6;
  int v7;
  void *__p[2];
  _OWORD v9[2];
  int v10;
  void **v11;

  YAML::Scanner::PopAllIndents(this);
  for (i = *((_QWORD *)this + 24); i; i = *((_QWORD *)this + 24))
  {
    *((_QWORD *)this + 24) = i - 1;
    std::deque<YAML::Scanner::SimpleKey>::__maybe_remove_back_spare[abi:ne180100]((_QWORD *)this + 19);
  }
  *((_WORD *)this + 73) = 0;
  v3 = *((_QWORD *)this + 1);
  v4 = 3;
  v5 = *((_DWORD *)this + 4);
  do
  {
    YAML::Stream::get(this);
    --v4;
  }
  while (v4);
  *(_QWORD *)&v6 = 0x100000000;
  *((_QWORD *)&v6 + 1) = v3;
  v7 = v5;
  *(_OWORD *)__p = 0u;
  memset(v9, 0, sizeof(v9));
  v10 = 0;
  std::deque<YAML::Token>::push_back((_QWORD *)this + 12, &v6);
  v11 = (void **)v9 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v11);
  if (SBYTE7(v9[0]) < 0)
    operator delete(__p[0]);
}

void sub_1BFC1B5AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  YAML::Token::~Token((void **)va);
  _Unwind_Resume(a1);
}

void YAML::Scanner::ScanDocEnd(YAML::Scanner *this)
{
  uint64_t i;
  uint64_t v3;
  int v4;
  int v5;
  __int128 v6;
  int v7;
  void *__p[2];
  _OWORD v9[2];
  int v10;
  void **v11;

  YAML::Scanner::PopAllIndents(this);
  for (i = *((_QWORD *)this + 24); i; i = *((_QWORD *)this + 24))
  {
    *((_QWORD *)this + 24) = i - 1;
    std::deque<YAML::Scanner::SimpleKey>::__maybe_remove_back_spare[abi:ne180100]((_QWORD *)this + 19);
  }
  *((_WORD *)this + 73) = 0;
  v3 = *((_QWORD *)this + 1);
  v4 = 3;
  v5 = *((_DWORD *)this + 4);
  do
  {
    YAML::Stream::get(this);
    --v4;
  }
  while (v4);
  *(_QWORD *)&v6 = 0x200000000;
  *((_QWORD *)&v6 + 1) = v3;
  v7 = v5;
  *(_OWORD *)__p = 0u;
  memset(v9, 0, sizeof(v9));
  v10 = 0;
  std::deque<YAML::Token>::push_back((_QWORD *)this + 12, &v6);
  v11 = (void **)v9 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v11);
  if (SBYTE7(v9[0]) < 0)
    operator delete(__p[0]);
}

void sub_1BFC1B688(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  YAML::Token::~Token((void **)va);
  _Unwind_Resume(a1);
}

void YAML::Scanner::ScanFlowStart(YAML::Scanner *this)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  char **v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  size_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  __int128 v42;
  void *v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  unint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  void *v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  void *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  int64_t v84;
  void *v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  char *i;
  _QWORD *v91;
  char *v92;
  _BYTE *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  char *v112;
  uint64_t v113;
  char *v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  void *v120;
  int v121;
  int v122;
  uint64_t v123;
  _BOOL4 v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  __int128 v131;
  __int128 v132;
  int v133;
  void *__p[2];
  _OWORD v135[2];
  int v136;
  void **v137;

  YAML::Scanner::InsertPotentialSimpleKey(this);
  *((_WORD *)this + 73) = 1;
  v2 = *((_QWORD *)this + 1);
  v3 = *((_DWORD *)this + 4);
  v4 = YAML::Stream::get(this);
  v5 = v4;
  v6 = (char **)((char *)this + 280);
  v7 = (char *)*((_QWORD *)this + 36);
  v8 = (char *)*((_QWORD *)this + 35);
  v9 = v7 - v8;
  if (v7 == v8)
    v10 = 0;
  else
    v10 = ((v7 - v8) << 7) - 1;
  v11 = v4 == 91;
  v13 = *((_QWORD *)this + 38);
  v12 = *((_QWORD *)this + 39);
  v14 = v12 + v13;
  if (v10 == v12 + v13)
  {
    v124 = v4 == 91;
    if (v13 < 0x400)
    {
      v122 = v3;
      v123 = v2;
      v31 = v9 >> 3;
      v32 = (char *)*((_QWORD *)this + 37);
      v33 = (char *)*((_QWORD *)this + 34);
      v34 = v32 - v33;
      if (v9 >> 3 >= (unint64_t)((v32 - v33) >> 3))
      {
        if (v32 == v33)
          v37 = 1;
        else
          v37 = v34 >> 2;
        v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v37);
        v40 = v39;
        v41 = &v38[8 * v31];
        *(_QWORD *)&v42 = v38;
        *((_QWORD *)&v42 + 1) = v41;
        v128 = v42;
        v43 = operator new(0x1000uLL);
        *(_QWORD *)&v44 = v41;
        *((_QWORD *)&v44 + 1) = &v38[8 * v40];
        if (v31 == v40)
        {
          v45 = 8 * v31;
          v2 = v123;
          *(_QWORD *)&v46 = v128;
          if (v9 < 1)
          {
            v85 = v43;
            v86 = v45 >> 2;
            if (v7 == v8)
              v87 = 1;
            else
              v87 = v86;
            v88 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v87);
            v41 = &v88[8 * (v87 >> 2)];
            *(_QWORD *)&v46 = v88;
            *((_QWORD *)&v46 + 1) = v41;
            *(_QWORD *)&v44 = v41;
            *((_QWORD *)&v44 + 1) = &v88[8 * v89];
            if (v38)
            {
              v125 = v44;
              v129 = v46;
              operator delete(v38);
              v44 = v125;
              v46 = v129;
            }
            v43 = v85;
          }
          else
          {
            v47 = v45 >> 3;
            if (v47 >= -1)
              v48 = v47 + 1;
            else
              v48 = v47 + 2;
            v41 -= 8 * (v48 >> 1);
            *(_QWORD *)&v44 = v41;
            *((_QWORD *)&v46 + 1) = v41;
          }
        }
        else
        {
          v2 = v123;
          v46 = v128;
        }
        *(_QWORD *)v41 = v43;
        *(_QWORD *)&v44 = v44 + 8;
        for (i = (char *)*((_QWORD *)this + 36); i != *v6; i -= 8)
        {
          v91 = (_QWORD *)*((_QWORD *)&v46 + 1);
          if (*((_QWORD *)&v46 + 1) == (_QWORD)v46)
          {
            v93 = (_BYTE *)v44;
            if ((unint64_t)v44 >= *((_QWORD *)&v44 + 1))
            {
              if (*((_QWORD *)&v44 + 1) == *((_QWORD *)&v46 + 1))
                v98 = 1;
              else
                v98 = (uint64_t)(*((_QWORD *)&v44 + 1) - *((_QWORD *)&v46 + 1)) >> 2;
              v99 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v98);
              v92 = &v99[(2 * v98 + 6) & 0xFFFFFFFFFFFFFFF8];
              v101 = v92;
              v102 = v93 - (_BYTE *)v91;
              if (v93 != (_BYTE *)v91)
              {
                v101 = &v92[v102 & 0xFFFFFFFFFFFFFFF8];
                v103 = 8 * (v102 >> 3);
                v104 = v92;
                v105 = v91;
                do
                {
                  v106 = *v105++;
                  *(_QWORD *)v104 = v106;
                  v104 += 8;
                  v103 -= 8;
                }
                while (v103);
              }
              *(_QWORD *)&v46 = v99;
              *((_QWORD *)&v46 + 1) = v92;
              *(_QWORD *)&v44 = v101;
              *((_QWORD *)&v44 + 1) = &v99[8 * v100];
              if (v91)
              {
                v126 = v44;
                v131 = v46;
                operator delete(v91);
                v44 = v126;
                v46 = v131;
              }
            }
            else
            {
              v94 = (uint64_t)(*((_QWORD *)&v44 + 1) - v44) >> 3;
              if (v94 >= -1)
                v95 = v94 + 1;
              else
                v95 = v94 + 2;
              v96 = v95 >> 1;
              v97 = v44 + 8 * (v95 >> 1);
              v92 = (char *)(v97 - (v44 - *((_QWORD *)&v46 + 1)));
              if ((_QWORD)v44 == *((_QWORD *)&v46 + 1))
              {
                v93 = (_BYTE *)*((_QWORD *)&v46 + 1);
              }
              else
              {
                v127 = *((_QWORD *)&v44 + 1);
                v130 = v46;
                memmove((void *)(v97 - (v44 - *((_QWORD *)&v46 + 1))), *((const void **)&v46 + 1), v44 - *((_QWORD *)&v46 + 1));
                *((_QWORD *)&v44 + 1) = v127;
                *(_QWORD *)&v46 = v130;
              }
              *((_QWORD *)&v46 + 1) = v92;
              *(_QWORD *)&v44 = &v93[8 * v96];
            }
          }
          else
          {
            v92 = (char *)*((_QWORD *)&v46 + 1);
          }
          v107 = *((_QWORD *)i - 1);
          *((_QWORD *)v92 - 1) = v107;
          *((_QWORD *)&v46 + 1) -= 8;
        }
        v108 = (void *)*((_QWORD *)this + 34);
        *((_OWORD *)this + 17) = v46;
        *((_OWORD *)this + 18) = v44;
        v3 = v122;
        if (v108)
          operator delete(v108);
      }
      else
      {
        v35 = operator new(0x1000uLL);
        v36 = v35;
        if (v32 == v7)
        {
          if (v33 == v8)
          {
            if (v7 == v8)
              v62 = 1;
            else
              v62 = v34 >> 2;
            v63 = 2 * v62;
            v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v62);
            v8 = &v64[(v63 + 6) & 0xFFFFFFFFFFFFFFF8];
            v66 = (uint64_t *)*((_QWORD *)this + 35);
            v67 = v8;
            v68 = *((_QWORD *)this + 36) - (_QWORD)v66;
            if (v68)
            {
              v67 = &v8[v68 & 0xFFFFFFFFFFFFFFF8];
              v69 = 8 * (v68 >> 3);
              v70 = v8;
              do
              {
                v71 = *v66++;
                *(_QWORD *)v70 = v71;
                v70 += 8;
                v69 -= 8;
              }
              while (v69);
            }
            v72 = (void *)*((_QWORD *)this + 34);
            *((_QWORD *)this + 34) = v64;
            *((_QWORD *)this + 35) = v8;
            *((_QWORD *)this + 36) = v67;
            *((_QWORD *)this + 37) = &v64[8 * v65];
            if (v72)
            {
              operator delete(v72);
              v8 = *v6;
            }
          }
          *((_QWORD *)v8 - 1) = v36;
          v73 = (char *)*((_QWORD *)this + 35);
          v74 = (char *)*((_QWORD *)this + 36);
          *((_QWORD *)this + 35) = v73 - 8;
          v75 = *((_QWORD *)v73 - 1);
          *((_QWORD *)this + 35) = v73;
          v2 = v123;
          if (v74 == *((char **)this + 37))
          {
            v76 = *((_QWORD *)this + 34);
            v77 = (uint64_t)&v73[-v76];
            if ((unint64_t)v73 <= v76)
            {
              v109 = (uint64_t)&v74[-v76];
              v49 = v109 == 0;
              v110 = v109 >> 2;
              if (v49)
                v111 = 1;
              else
                v111 = v110;
              v112 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v111);
              v114 = &v112[8 * (v111 >> 2)];
              v115 = (uint64_t *)*((_QWORD *)this + 35);
              v74 = v114;
              v116 = *((_QWORD *)this + 36) - (_QWORD)v115;
              if (v116)
              {
                v74 = &v114[v116 & 0xFFFFFFFFFFFFFFF8];
                v117 = 8 * (v116 >> 3);
                v118 = &v112[8 * (v111 >> 2)];
                do
                {
                  v119 = *v115++;
                  *(_QWORD *)v118 = v119;
                  v118 += 8;
                  v117 -= 8;
                }
                while (v117);
              }
              v120 = (void *)*((_QWORD *)this + 34);
              *((_QWORD *)this + 34) = v112;
              *((_QWORD *)this + 35) = v114;
              *((_QWORD *)this + 36) = v74;
              *((_QWORD *)this + 37) = &v112[8 * v113];
              if (v120)
              {
                operator delete(v120);
                v74 = (char *)*((_QWORD *)this + 36);
              }
            }
            else
            {
              v78 = v77 >> 3;
              v22 = v77 >> 3 < -1;
              v79 = (v77 >> 3) + 2;
              if (v22)
                v80 = v79;
              else
                v80 = v78 + 1;
              v81 = -(v80 >> 1);
              v82 = v80 >> 1;
              v83 = &v73[-8 * v82];
              v84 = v74 - v73;
              if (v74 != v73)
              {
                memmove(&v73[-8 * v82], v73, v74 - v73);
                v73 = *v6;
              }
              v74 = &v83[v84];
              *((_QWORD *)this + 35) = &v73[8 * v81];
              *((_QWORD *)this + 36) = &v83[v84];
            }
          }
          *(_QWORD *)v74 = v75;
          *((_QWORD *)this + 36) += 8;
        }
        else
        {
          *(_QWORD *)v7 = v35;
          *((_QWORD *)this + 36) += 8;
          v2 = v123;
        }
        v3 = v122;
      }
    }
    else
    {
      *((_QWORD *)this + 38) = v13 - 1024;
      v17 = *(_QWORD *)v8;
      v15 = v8 + 8;
      v16 = v17;
      *((_QWORD *)this + 35) = v15;
      if (*((char **)this + 37) == v7)
      {
        v18 = *((_QWORD *)this + 34);
        v19 = (uint64_t)&v15[-v18];
        if ((unint64_t)v15 <= v18)
        {
          v50 = (uint64_t)&v7[-v18];
          v49 = v50 == 0;
          v51 = v50 >> 2;
          if (v49)
            v52 = 1;
          else
            v52 = v51;
          v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v52);
          v55 = &v53[8 * (v52 >> 2)];
          v56 = (uint64_t *)*((_QWORD *)this + 35);
          v7 = v55;
          v57 = *((_QWORD *)this + 36) - (_QWORD)v56;
          if (v57)
          {
            v7 = &v55[v57 & 0xFFFFFFFFFFFFFFF8];
            v58 = 8 * (v57 >> 3);
            v59 = &v53[8 * (v52 >> 2)];
            do
            {
              v60 = *v56++;
              *(_QWORD *)v59 = v60;
              v59 += 8;
              v58 -= 8;
            }
            while (v58);
          }
          v61 = (void *)*((_QWORD *)this + 34);
          *((_QWORD *)this + 34) = v53;
          *((_QWORD *)this + 35) = v55;
          *((_QWORD *)this + 36) = v7;
          *((_QWORD *)this + 37) = &v53[8 * v54];
          if (v61)
          {
            operator delete(v61);
            v7 = (char *)*((_QWORD *)this + 36);
          }
        }
        else
        {
          v20 = v3;
          v21 = v19 >> 3;
          v22 = v19 >> 3 < -1;
          v23 = (v19 >> 3) + 2;
          if (v22)
            v24 = v23;
          else
            v24 = v21 + 1;
          v25 = -(v24 >> 1);
          v26 = v24 >> 1;
          v27 = &v15[-8 * v26];
          v28 = v7 - v15;
          if (v7 == v15)
          {
            v30 = v7;
          }
          else
          {
            v29 = &v15[-8 * v26];
            memmove(v29, v15, v28);
            v27 = v29;
            v30 = *v6;
          }
          v7 = &v27[v28];
          *((_QWORD *)this + 35) = &v30[8 * v25];
          *((_QWORD *)this + 36) = &v27[v28];
          v3 = v20;
        }
      }
      *(_QWORD *)v7 = v16;
      *((_QWORD *)this + 36) += 8;
    }
    v8 = (char *)*((_QWORD *)this + 35);
    v12 = *((_QWORD *)this + 39);
    v14 = *((_QWORD *)this + 38) + v12;
    v11 = v124;
  }
  *(_DWORD *)(*(_QWORD *)&v8[(v14 >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * (v14 & 0x3FF)) = v11;
  *((_QWORD *)this + 39) = v12 + 1;
  if (v5 == 91)
    v121 = 8;
  else
    v121 = 9;
  LODWORD(v132) = 0;
  DWORD1(v132) = v121;
  *((_QWORD *)&v132 + 1) = v2;
  v133 = v3;
  *(_OWORD *)__p = 0u;
  memset(v135, 0, sizeof(v135));
  v136 = 0;
  std::deque<YAML::Token>::push_back((_QWORD *)this + 12, &v132);
  v137 = (void **)v135 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v137);
  if (SBYTE7(v135[0]) < 0)
    operator delete(__p[0]);
}

void sub_1BFC1BCC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int128 a15, char a16)
{
  void *v16;

  operator delete(v16);
  if ((_QWORD)a15)
    operator delete((void *)a15);
  _Unwind_Resume(a1);
}

void YAML::Scanner::ScanFlowEnd(YAML::Scanner *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD *exception;
  int v17;
  _QWORD *v18;
  __int128 v19;
  int v20;
  void *__p[2];
  __int128 v22;
  __int128 v23;
  int v24;
  void **v25;
  int v26;
  void **v27;

  v2 = *((_QWORD *)this + 39);
  if (!v2)
  {
    exception = __cxa_allocate_exception(0x38uLL);
    v17 = *((_DWORD *)this + 4);
    v25 = (void **)*((_QWORD *)this + 1);
    v26 = v17;
    std::string::basic_string[abi:ne180100]<0>(&v19, "illegal flow end");
    YAML::Exception::Exception((uint64_t)exception, &v25, &v19);
    *exception = &off_1E793AF28;
  }
  v3 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 35)
                             + (((unint64_t)(v2 + *((_QWORD *)this + 38) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                 + 4 * ((v2 + *((_QWORD *)this + 38) - 1) & 0x3FF));
  if (!v3)
  {
    if ((YAML::Scanner::VerifySimpleKey(this) & 1) != 0)
    {
      v4 = *((_QWORD *)this + 1);
      v5 = *((_DWORD *)this + 4);
      *(_QWORD *)&v19 = 0xF00000000;
      *((_QWORD *)&v19 + 1) = v4;
      v20 = v5;
      *(_OWORD *)__p = 0u;
      v22 = 0u;
      v23 = 0u;
      v24 = 0;
      std::deque<YAML::Token>::push_back((_QWORD *)this + 12, &v19);
      v25 = (void **)&v22 + 1;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v25);
      if (SBYTE7(v22) < 0)
        operator delete(__p[0]);
      goto LABEL_9;
    }
    v6 = *((_QWORD *)this + 39) + *((_QWORD *)this + 38) - 1;
    v3 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 35) + ((v6 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v6 & 0x3FF));
  }
  if (v3 == 1)
    YAML::Scanner::InvalidateSimpleKey(this);
LABEL_9:
  *((_WORD *)this + 73) = 256;
  v7 = *((_DWORD *)this + 4);
  v25 = (void **)*((_QWORD *)this + 1);
  v26 = v7;
  v8 = YAML::Stream::get(this);
  v9 = *((_QWORD *)this + 39) - 1;
  v10 = v9 + *((_QWORD *)this + 38);
  v11 = *((_QWORD *)this + 35);
  if (*(_DWORD *)(*(_QWORD *)(v11 + ((v10 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v10 & 0x3FF)) != (v8 == 93))
  {
    v18 = __cxa_allocate_exception(0x38uLL);
    std::string::basic_string[abi:ne180100]<0>(&v19, "illegal flow end");
    YAML::Exception::Exception((uint64_t)v18, &v25, &v19);
    *v18 = &off_1E793AF28;
  }
  v12 = v8;
  v13 = *((_QWORD *)this + 36);
  *((_QWORD *)this + 39) = v9;
  if (v13 == v11)
    v14 = 0;
  else
    v14 = ((v13 - v11) << 7) - 1;
  if (v14 - v10 >= 0x800)
  {
    operator delete(*(void **)(v13 - 8));
    *((_QWORD *)this + 36) -= 8;
  }
  if (v12 == 93)
    v15 = 10;
  else
    v15 = 11;
  LODWORD(v19) = 0;
  DWORD1(v19) = v15;
  *((_QWORD *)&v19 + 1) = v25;
  v20 = v26;
  *(_OWORD *)__p = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0;
  std::deque<YAML::Token>::push_back((_QWORD *)this + 12, &v19);
  v27 = (void **)&v22 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v27);
  if (SBYTE7(v22) < 0)
    operator delete(__p[0]);
}

void sub_1BFC1BFBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  YAML::Token::~Token(&__p);
  _Unwind_Resume(a1);
}

void YAML::Scanner::ScanFlowEntry(YAML::Scanner *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  __int128 v9;
  int v10;
  void *__p[2];
  __int128 v12;
  __int128 v13;
  int v14;
  void **v15;

  v2 = *((_QWORD *)this + 39);
  if (!v2)
    goto LABEL_9;
  v3 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 35)
                             + (((unint64_t)(v2 + *((_QWORD *)this + 38) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                 + 4 * ((v2 + *((_QWORD *)this + 38) - 1) & 0x3FF));
  if (!v3)
  {
    if ((YAML::Scanner::VerifySimpleKey(this) & 1) != 0)
    {
      v4 = *((_QWORD *)this + 1);
      v5 = *((_DWORD *)this + 4);
      *(_QWORD *)&v9 = 0xF00000000;
      *((_QWORD *)&v9 + 1) = v4;
      v10 = v5;
      *(_OWORD *)__p = 0u;
      v12 = 0u;
      v13 = 0u;
      v14 = 0;
      std::deque<YAML::Token>::push_back((_QWORD *)this + 12, &v9);
      v15 = (void **)&v12 + 1;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v15);
      if (SBYTE7(v12) < 0)
        operator delete(__p[0]);
      goto LABEL_9;
    }
    v6 = *((_QWORD *)this + 39) + *((_QWORD *)this + 38) - 1;
    v3 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 35) + ((v6 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v6 & 0x3FF));
  }
  if (v3 == 1)
    YAML::Scanner::InvalidateSimpleKey(this);
LABEL_9:
  *((_WORD *)this + 73) = 1;
  v7 = *((_QWORD *)this + 1);
  v8 = *((_DWORD *)this + 4);
  YAML::Stream::get(this);
  *(_QWORD *)&v9 = 0xD00000000;
  *((_QWORD *)&v9 + 1) = v7;
  v10 = v8;
  *(_OWORD *)__p = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0;
  std::deque<YAML::Token>::push_back((_QWORD *)this + 12, &v9);
  v15 = (void **)&v12 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v15);
  if (SBYTE7(v12) < 0)
    operator delete(__p[0]);
}

void sub_1BFC1C178(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  YAML::Token::~Token((void **)va);
  _Unwind_Resume(a1);
}

void YAML::Scanner::ScanBlockEntry(YAML::Scanner *this)
{
  uint64_t v2;
  int v3;
  _QWORD *exception;
  int v5;
  _QWORD *v6;
  int v7;
  __int128 v8;
  int v9;
  void *__p[2];
  _OWORD v11[2];
  int v12;
  void **v13;
  int v14;

  if (*((_QWORD *)this + 39))
  {
    exception = __cxa_allocate_exception(0x38uLL);
    v5 = *((_DWORD *)this + 4);
    v13 = (void **)*((_QWORD *)this + 1);
    v14 = v5;
    std::string::basic_string[abi:ne180100]<0>(&v8, "illegal block entry");
    YAML::Exception::Exception((uint64_t)exception, &v13, &v8);
    *exception = &off_1E793AF28;
  }
  if (!*((_BYTE *)this + 146))
  {
    v6 = __cxa_allocate_exception(0x38uLL);
    v7 = *((_DWORD *)this + 4);
    v13 = (void **)*((_QWORD *)this + 1);
    v14 = v7;
    std::string::basic_string[abi:ne180100]<0>(&v8, "illegal block entry");
    YAML::Exception::Exception((uint64_t)v6, &v13, &v8);
    *v6 = &off_1E793AF28;
  }
  YAML::Scanner::PushIndentTo((uint64_t)this, *((_DWORD *)this + 4), 1);
  *((_WORD *)this + 73) = 1;
  v2 = *((_QWORD *)this + 1);
  v3 = *((_DWORD *)this + 4);
  YAML::Stream::get(this);
  *(_QWORD *)&v8 = 0x700000000;
  *((_QWORD *)&v8 + 1) = v2;
  v9 = v3;
  *(_OWORD *)__p = 0u;
  memset(v11, 0, sizeof(v11));
  v12 = 0;
  std::deque<YAML::Token>::push_back((_QWORD *)this + 12, &v8);
  v13 = (void **)v11 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v13);
  if (SBYTE7(v11[0]) < 0)
    operator delete(__p[0]);
}

void sub_1BFC1C324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

void YAML::Scanner::ScanKey(YAML::Scanner *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  _QWORD *exception;
  YAML::Scanner *v6;
  _QWORD *v7;
  void **v8;
  __int128 v9;
  int v10;
  void *__p[2];
  _OWORD v12[2];
  int v13;
  void **v14;
  int v15;

  v2 = *((_QWORD *)this + 39);
  if (!v2)
  {
    if (!*((_BYTE *)this + 146))
    {
      exception = __cxa_allocate_exception(0x38uLL);
      v6 = this;
      v7 = exception;
      v8 = (void **)*((_QWORD *)v6 + 1);
      LODWORD(v6) = *((_DWORD *)v6 + 4);
      v14 = v8;
      v15 = (int)v6;
      std::string::basic_string[abi:ne180100]<0>(&v9, "illegal map key");
      YAML::Exception::Exception((uint64_t)v7, &v14, &v9);
      *v7 = &off_1E793AF28;
    }
    YAML::Scanner::PushIndentTo((uint64_t)this, *((_DWORD *)this + 4), 0);
    v2 = *((_QWORD *)this + 39);
  }
  *((_BYTE *)this + 146) = v2 == 0;
  v3 = *((_QWORD *)this + 1);
  v4 = *((_DWORD *)this + 4);
  YAML::Stream::get(this);
  *(_QWORD *)&v9 = 0xE00000000;
  *((_QWORD *)&v9 + 1) = v3;
  v10 = v4;
  *(_OWORD *)__p = 0u;
  memset(v12, 0, sizeof(v12));
  v13 = 0;
  std::deque<YAML::Token>::push_back((_QWORD *)this + 12, &v9);
  v14 = (void **)v12 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v14);
  if (SBYTE7(v12[0]) < 0)
    operator delete(__p[0]);
}

void sub_1BFC1C4A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

void YAML::Scanner::ScanValue(YAML::Scanner *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  _QWORD *exception;
  YAML::Scanner *v7;
  _QWORD *v8;
  void **v9;
  __int128 v10;
  int v11;
  void *__p[2];
  _OWORD v13[2];
  int v14;
  void **v15;
  int v16;

  v2 = YAML::Scanner::VerifySimpleKey(this);
  *((_BYTE *)this + 147) = 0;
  if (v2)
  {
    *((_BYTE *)this + 146) = 0;
  }
  else
  {
    v3 = *((_QWORD *)this + 39);
    if (!v3)
    {
      if (!*((_BYTE *)this + 146))
      {
        exception = __cxa_allocate_exception(0x38uLL);
        v7 = this;
        v8 = exception;
        v9 = (void **)*((_QWORD *)v7 + 1);
        LODWORD(v7) = *((_DWORD *)v7 + 4);
        v15 = v9;
        v16 = (int)v7;
        std::string::basic_string[abi:ne180100]<0>(&v10, "illegal map value");
        YAML::Exception::Exception((uint64_t)v8, &v15, &v10);
        *v8 = &off_1E793AF28;
      }
      YAML::Scanner::PushIndentTo((uint64_t)this, *((_DWORD *)this + 4), 0);
      v3 = *((_QWORD *)this + 39);
    }
    *((_BYTE *)this + 146) = v3 == 0;
  }
  v4 = *((_QWORD *)this + 1);
  v5 = *((_DWORD *)this + 4);
  YAML::Stream::get(this);
  *(_QWORD *)&v10 = 0xF00000000;
  *((_QWORD *)&v10 + 1) = v4;
  v11 = v5;
  *(_OWORD *)__p = 0u;
  memset(v13, 0, sizeof(v13));
  v14 = 0;
  std::deque<YAML::Token>::push_back((_QWORD *)this + 12, &v10);
  v15 = (void **)v13 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v15);
  if (SBYTE7(v13[0]) < 0)
    operator delete(__p[0]);
}

void sub_1BFC1C638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

void YAML::Scanner::ScanAnchorOrAlias(void **this)
{
  void *v2;
  int v3;
  int v4;
  unsigned __int8 v5;
  std::string::value_type v6;
  YAML::Exp *v7;
  std::string::size_type size;
  unsigned __int8 v9;
  int v10;
  _QWORD *exception;
  int v12;
  char *v13;
  YAML::Exp *v14;
  _QWORD *v15;
  int v16;
  char *v17;
  __int128 v18;
  int v19;
  void *v20[2];
  _OWORD v21[2];
  int v22;
  std::string __str;
  void *__p[2];
  char v25;
  void *v26;
  int v27;
  char v28;
  void **v29[2];

  memset(&__str, 0, sizeof(__str));
  YAML::Scanner::InsertPotentialSimpleKey((YAML::Scanner *)this);
  *((_WORD *)this + 73) = 0;
  v2 = this[1];
  v3 = *((_DWORD *)this + 4);
  v4 = YAML::Stream::get((YAML::Stream *)this);
  while (!*(_DWORD *)((char *)*this + *(_QWORD *)(*(_QWORD *)*this - 24) + 32)
       || this[8]
       && *(_BYTE *)(*(_QWORD *)((char *)this[4] + (((unint64_t)this[7] >> 9) & 0x7FFFFFFFFFFFF8))
                   + ((unint64_t)this[7] & 0xFFF)) != 4)
  {
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "[]{},");
      v7 = (YAML::Exp *)YAML::RegEx::RegEx((uint64_t)&v26, (char *)__p, 3);
      YAML::Exp::BlankOrBreak(v7);
      YAML::operator|((int *)&v26, YAML::Exp::BlankOrBreak(void)::e, (uint64_t)&v18);
      YAML::operator!((int *)&v18, (uint64_t)&YAML::Exp::Anchor(void)::e);
      v29[0] = (void **)&v18 + 1;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](v29);
      v29[0] = (void **)&v27;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](v29);
      if (v25 < 0)
        operator delete(__p[0]);
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Anchor(void)::e, &dword_1BF794000);
    }
    *(_QWORD *)&v18 = 0;
    *((_QWORD *)&v18 + 1) = this;
    if ((YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)&YAML::Exp::Anchor(void)::e, (unint64_t *)&v18) & 0x80000000) != 0)
      break;
    v6 = YAML::Stream::get((YAML::Stream *)this);
    std::string::push_back(&__str, v6);
  }
  size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __str.__r_.__value_.__l.__size_;
  if (!size)
  {
    exception = __cxa_allocate_exception(0x38uLL);
    v12 = *((_DWORD *)this + 4);
    v26 = this[1];
    v27 = v12;
    if (v4 == 42)
      v13 = "alias not found after *";
    else
      v13 = "anchor not found after &";
    std::string::basic_string[abi:ne180100]<0>(&v18, v13);
    YAML::Exception::Exception((uint64_t)exception, &v26, &v18);
    *exception = &off_1E793AF28;
  }
  if (!*(_DWORD *)((char *)*this + *(_QWORD *)(*(_QWORD *)*this - 24) + 32)
    || this[8]
    && *(_BYTE *)(*(_QWORD *)((char *)this[4] + (((unint64_t)this[7] >> 9) & 0x7FFFFFFFFFFFF8))
                + ((unint64_t)this[7] & 0xFFF)) != 4)
  {
    {
      v14 = (YAML::Exp *)YAML::RegEx::RegEx((uint64_t)&v18, (char *)&v26, 3);
      YAML::Exp::BlankOrBreak(v14);
      YAML::operator|((int *)&v18, YAML::Exp::BlankOrBreak(void)::e, (uint64_t)&YAML::Exp::AnchorEnd(void)::e);
      __p[0] = (char *)&v18 + 8;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      if (v28 < 0)
        operator delete(v26);
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::AnchorEnd(void)::e, &dword_1BF794000);
    }
    *(_QWORD *)&v18 = 0;
    *((_QWORD *)&v18 + 1) = this;
    if ((YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)&YAML::Exp::AnchorEnd(void)::e, (unint64_t *)&v18) & 0x80000000) != 0)
    {
      v15 = __cxa_allocate_exception(0x38uLL);
      v16 = *((_DWORD *)this + 4);
      v26 = this[1];
      v27 = v16;
      if (v4 == 42)
        v17 = "illegal character found while scanning alias";
      else
        v17 = "illegal character found while scanning anchor";
      std::string::basic_string[abi:ne180100]<0>(&v18, v17);
      YAML::Exception::Exception((uint64_t)v15, &v26, &v18);
      *v15 = &off_1E793AF28;
    }
  }
  if (v4 == 42)
    v10 = 17;
  else
    v10 = 16;
  LODWORD(v18) = 0;
  DWORD1(v18) = v10;
  *((_QWORD *)&v18 + 1) = v2;
  v19 = v3;
  *(_OWORD *)v20 = 0u;
  memset(v21, 0, sizeof(v21));
  v22 = 0;
  std::string::operator=((std::string *)v20, &__str);
  std::deque<YAML::Token>::push_back(this + 12, &v18);
  v26 = (char *)v21 + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  if (SBYTE7(v21[0]) < 0)
    operator delete(v20[0]);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1BFC1CAB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a39 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(a1);
}

void YAML::Scanner::ScanTag(YAML::Scanner *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  void *v5;
  int v6;
  _OWORD *v7;
  __int128 v8;
  int v9;
  uint64_t v10;
  char v11;
  std::string __str;
  __int128 v13;
  int v14;
  void *__p[2];
  __int128 v16;
  __int128 v17;
  int v18;

  YAML::Scanner::InsertPotentialSimpleKey(this);
  *((_WORD *)this + 73) = 0;
  v2 = *((_QWORD *)this + 1);
  v3 = *((_DWORD *)this + 4);
  *(_QWORD *)&v13 = 0x1200000000;
  *((_QWORD *)&v13 + 1) = v2;
  v14 = v3;
  *(_OWORD *)__p = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0;
  YAML::Stream::get(this);
  v4 = *((_QWORD *)this + 8);
  if (*(_DWORD *)(*(_QWORD *)this + *(_QWORD *)(**(_QWORD **)this - 24) + 32))
  {
    if (!v4
      || *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 4) + ((*((_QWORD *)this + 7) >> 9) & 0x7FFFFFFFFFFFF8))
                  + (*((_QWORD *)this + 7) & 0xFFFLL)) == 4)
    {
      goto LABEL_9;
    }
  }
  else if (!v4)
  {
    goto LABEL_9;
  }
  if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 4) + ((*((_QWORD *)this + 7) >> 9) & 0x7FFFFFFFFFFFF8))
                + (*((_QWORD *)this + 7) & 0xFFFLL)) == 60)
  {
    YAML::ScanVerbatimTag(this, &__str);
    std::string::operator=((std::string *)__p, &__str);
    v18 = 0;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    goto LABEL_34;
  }
LABEL_9:
  v11 = 0;
  YAML::ScanTagHandle(this, (YAML::Stream *)&v11, &__str);
  std::string::operator=((std::string *)__p, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v5 = (void *)BYTE7(v16);
  if (!v11)
  {
    if (SBYTE7(v16) < 0)
      v5 = __p[1];
    if (v5)
      v9 = 1;
    else
      v9 = 4;
    goto LABEL_33;
  }
  if (SBYTE7(v16) < 0)
    v5 = __p[1];
  if (v5)
    v6 = 1;
  else
    v6 = 2;
  v18 = v6;
  if (*((_QWORD *)this + 8)
    && *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 4) + ((*((_QWORD *)this + 7) >> 9) & 0x7FFFFFFFFFFFF8))
                + (*((_QWORD *)this + 7) & 0xFFFLL)) == 33)
  {
    YAML::Stream::get(this);
    YAML::ScanTagSuffix((std::string *)this, (uint64_t)&__str);
    v7 = (_OWORD *)v17;
    if ((unint64_t)v17 >= *((_QWORD *)&v17 + 1))
    {
      v10 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v16 + 1, (__int128 *)&__str);
    }
    else
    {
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v17, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
      }
      else
      {
        v8 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
        *(_QWORD *)(v17 + 16) = *((_QWORD *)&__str.__r_.__value_.__l + 2);
        *v7 = v8;
      }
      v10 = (uint64_t)v7 + 24;
    }
    *(_QWORD *)&v17 = v10;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v9 = 3;
LABEL_33:
    v18 = v9;
  }
LABEL_34:
  std::deque<YAML::Token>::push_back((_QWORD *)this + 12, &v13);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16 + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if (SBYTE7(v16) < 0)
    operator delete(__p[0]);
}

void sub_1BFC1CE24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a15 < 0)
    operator delete(__p);
  YAML::Token::~Token(&a16);
  _Unwind_Resume(a1);
}

void YAML::Scanner::ScanPlainScalar(YAML::Scanner *this)
{
  unsigned __int8 v2;
  void *v3;
  unsigned __int8 v4;
  int v5;
  uint64_t v6;
  std::string::size_type v7;
  int v8;
  YAML::Exp *v9;
  YAML::Exp *v10;
  __guard *v11;
  YAML::Exp *v12;
  YAML::Exp *v13;
  std::string v14;
  void *__p[2];
  _OWORD v16[2];
  int v17;
  void *v18;
  char v19;
  int v20;
  __int16 v21;
  char v22;
  int v23;
  char v24;
  uint64_t v25;
  int v26;
  char v27;
  std::string __str;
  void **v29;
  _BYTE v30[24];
  std::string::size_type *p_size;

  memset(&__str, 0, sizeof(__str));
  v22 = 0;
  v21 = 0;
  v27 = 0;
  if (*((_QWORD *)this + 39))
  {
    if ((v2 & 1) != 0
          !(_DWORD)v9))
    {
      v3 = &YAML::Exp::ScanScalarEndInFlow(void)::e;
      goto LABEL_6;
    }
    YAML::Exp::EndScalarInFlow(v9);
    YAML::Exp::BlankOrBreak(v10);
    YAML::Exp::Comment((YAML::Exp *)&v29);
    YAML::operator+(YAML::Exp::BlankOrBreak(void)::e, (int *)&v29, (uint64_t)&v14);
    YAML::operator|(YAML::Exp::EndScalarInFlow(void)::e, (int *)&v14, (uint64_t)&YAML::Exp::ScanScalarEndInFlow(void)::e);
    p_size = &v14.__r_.__value_.__l.__size_;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_size);
    p_size = (std::string::size_type *)v30;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_size);
    v3 = &YAML::Exp::ScanScalarEndInFlow(void)::e;
  }
  else
  {
    if ((v4 & 1) != 0
    {
      v3 = &YAML::Exp::ScanScalarEnd(void)::e;
      goto LABEL_6;
    }
    YAML::Exp::EndScalar(v12);
    YAML::Exp::BlankOrBreak(v13);
    YAML::Exp::Comment((YAML::Exp *)&v29);
    YAML::operator+(YAML::Exp::BlankOrBreak(void)::e, (int *)&v29, (uint64_t)&v14);
    YAML::operator|(YAML::Exp::EndScalar(void)::e, (int *)&v14, (uint64_t)&YAML::Exp::ScanScalarEnd(void)::e);
    p_size = &v14.__r_.__value_.__l.__size_;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_size);
    p_size = (std::string::size_type *)v30;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_size);
    v3 = &YAML::Exp::ScanScalarEnd(void)::e;
  }
  __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, v3, &dword_1BF794000);
  __cxa_guard_release(v11);
LABEL_6:
  v5 = 0;
  v18 = v3;
  v19 = 0;
  if (!*((_QWORD *)this + 39))
  {
    v6 = *((_QWORD *)this + 30);
    if (v6)
      v5 = **(_DWORD **)(*(_QWORD *)(*((_QWORD *)this + 26)
                                   + (((unint64_t)(v6 + *((_QWORD *)this + 29) - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((v6 + *((_QWORD *)this + 29) - 1) & 0x1FF))
         + 1;
    else
      v5 = 1;
  }
  v20 = v5;
  v23 = 2;
  HIBYTE(v21) = 1;
  v24 = 1;
  v25 = 0x1FFFFFFFFLL;
  v26 = 2;
  YAML::Scanner::InsertPotentialSimpleKey(this);
  v7 = *((_QWORD *)this + 1);
  v8 = *((_DWORD *)this + 4);
  YAML::ScanScalar((uint64_t)this, (uint64_t)&v18, &v14);
  __str = v14;
  *((_BYTE *)this + 146) = v27;
  *((_BYTE *)this + 147) = 0;
  v14.__r_.__value_.__r.__words[0] = 0x1300000000;
  v14.__r_.__value_.__l.__size_ = v7;
  LODWORD(v14.__r_.__value_.__r.__words[2]) = v8;
  *(_OWORD *)__p = 0u;
  memset(v16, 0, sizeof(v16));
  v17 = 0;
  std::string::operator=((std::string *)__p, &__str);
  std::deque<YAML::Token>::push_back((_QWORD *)this + 12, (__int128 *)&v14);
  v29 = (void **)v16 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v29);
  if (SBYTE7(v16[0]) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1BFC1D14C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 40) = v1 + 8;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 40));
  *(_QWORD *)(v2 - 40) = v2 - 64;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 40));
  _Unwind_Resume(a1);
}

_QWORD *YAML::Exp::Comment(YAML::Exp *this)
{
  unsigned __int8 v1;
  int v3;
  YAML::Exp *v4;

  if ((v1 & 1) == 0)
  {
    v4 = this;
    this = v4;
    if (v3)
    {
      YAML::Exp::Comment(void)::e = 1;
      word_1EF580AEC = 35;
      qword_1EF580AF8 = 0;
      unk_1EF580B00 = 0;
      qword_1EF580AF0 = 0;
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Comment(void)::e, &dword_1BF794000);
      this = v4;
    }
  }
  *(_DWORD *)this = YAML::Exp::Comment(void)::e;
  *((_WORD *)this + 2) = word_1EF580AEC;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 1) = 0;
  return std::vector<YAML::RegEx>::__init_with_size[abi:ne180100]<YAML::RegEx*,YAML::RegEx*>((_QWORD *)this + 1, (int *)qword_1EF580AF0, (int *)qword_1EF580AF8, (qword_1EF580AF8 - qword_1EF580AF0) >> 5);
}

void YAML::Scanner::ScanQuotedScalar(YAML::Scanner *this)
{
  int v2;
  unsigned __int8 v3;
  char v4;
  std::string::size_type v5;
  int v6;
  std::string v7;
  void *__p[2];
  _OWORD v9[2];
  int v10;
  std::string::size_type *p_size;
  uint64_t v12;
  int v13;
  char v14;
  char v15;
  _QWORD v16[3];
  int *v17;
  char v18;
  _DWORD v19[2];
  int v20;
  char v21;
  _QWORD v22[2];
  std::string __str;
  void **v24[2];
  char v25;

  memset(&__str, 0, sizeof(__str));
  if (*((_QWORD *)this + 8))
    v2 = *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 4) + ((*((_QWORD *)this + 7) >> 9) & 0x7FFFFFFFFFFFF8))
                            + (*((_QWORD *)this + 7) & 0xFFFLL));
  else
    v2 = 4;
  v17 = 0;
  v18 = 0;
  v21 = 0;
  v20 = 0;
  memset(v19, 0, 7);
  v22[0] = 0;
  *(_QWORD *)((char *)v22 + 5) = 0;
  if (v2 == 39)
  {
    LODWORD(v7.__r_.__value_.__l.__data_) = 1;
    WORD2(v7.__r_.__value_.__r.__words[0]) = 39;
    __p[0] = 0;
    *(_OWORD *)&v7.__r_.__value_.__r.__words[1] = 0uLL;
    {
      std::string::basic_string[abi:ne180100]<0>(v24, "''");
      YAML::RegEx::RegEx((uint64_t)YAML::Exp::EscSingleQuote(void)::e, (char *)v24, 6);
      if (v25 < 0)
        operator delete(v24[0]);
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, YAML::Exp::EscSingleQuote(void)::e, &dword_1BF794000);
    }
    YAML::operator!(YAML::Exp::EscSingleQuote(void)::e, (uint64_t)&p_size);
    YAML::operator&((int *)&v7, (int *)&p_size, (uint64_t)&v13);
    v24[0] = (void **)&v12;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](v24);
    p_size = &v7.__r_.__value_.__l.__size_;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_size);
    v4 = 39;
  }
  else
  {
    v13 = 1;
    v14 = v2;
    v15 = 0;
    v4 = 92;
    memset(v16, 0, sizeof(v16));
  }
  v17 = &v13;
  v18 = 1;
  BYTE2(v19[1]) = v4;
  v19[0] = 0;
  v20 = 2;
  BYTE1(v19[1]) = 1;
  v21 = 0;
  v22[0] = 0x200000000;
  YAML::Scanner::InsertPotentialSimpleKey(this);
  v5 = *((_QWORD *)this + 1);
  v6 = *((_DWORD *)this + 4);
  YAML::Stream::get(this);
  YAML::ScanScalar((uint64_t)this, (uint64_t)&v17, &v7);
  __str = v7;
  *((_WORD *)this + 73) = 256;
  v7.__r_.__value_.__r.__words[0] = 0x1400000000;
  v7.__r_.__value_.__l.__size_ = v5;
  LODWORD(v7.__r_.__value_.__r.__words[2]) = v6;
  *(_OWORD *)__p = 0u;
  memset(v9, 0, sizeof(v9));
  v10 = 0;
  std::string::operator=((std::string *)__p, &__str);
  std::deque<YAML::Token>::push_back((_QWORD *)this + 12, (__int128 *)&v7);
  p_size = (std::string::size_type *)v9 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_size);
  if (SBYTE7(v9[0]) < 0)
    operator delete(__p[0]);
  v7.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1BFC1D57C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  if (*(char *)(v11 - 49) < 0)
    operator delete(*(void **)(v11 - 72));
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void YAML::Scanner::ScanBlockScalar(YAML::Scanner *this)
{
  std::string::size_type v2;
  int v3;
  unsigned __int8 v4;
  int v5;
  int v6;
  int v7;
  unsigned __int8 v8;
  int v9;
  int v10;
  YAML::Exp *v11;
  YAML::Exp *v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *exception;
  int v19;
  YAML::Exp *v20;
  YAML::Exp *v21;
  YAML::Exp *v22;
  YAML::Exp *v23;
  YAML::Exp *v24;
  YAML::Exp *v25;
  _QWORD *v26;
  int v27;
  std::string __p;
  void *v29[2];
  _OWORD v30[2];
  int v31;
  uint64_t v32;
  char v33;
  int v34;
  __int16 v35;
  char v36;
  _BOOL4 v37;
  char v38;
  int v39;
  uint64_t v40;
  char v41;
  std::string __str;
  void **v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  std::string::size_type *p_size;
  YAML::Scanner *v48;
  void **v49[2];

  memset(&__str, 0, sizeof(__str));
  v32 = 0;
  v33 = 0;
  v38 = 0;
  v36 = 0;
  v40 = 0;
  v41 = 0;
  v34 = 1;
  v35 = 1;
  v2 = *((_QWORD *)this + 1);
  v3 = *((_DWORD *)this + 4);
  v37 = YAML::Stream::get(this) == 62;
  v39 = 0;
  if ((v4 & 1) == 0)
  {
    if ((_DWORD)v20)
    {
      YAML::Exp::ChompIndicator(v20);
      YAML::Exp::Digit(v21);
      v22 = (YAML::Exp *)YAML::operator+(YAML::Exp::ChompIndicator(void)::e, &YAML::Exp::Digit(void)::e, (uint64_t)&v45);
      YAML::Exp::Digit(v22);
      YAML::Exp::ChompIndicator(v23);
      YAML::operator+(&YAML::Exp::Digit(void)::e, YAML::Exp::ChompIndicator(void)::e, (uint64_t)&v43);
      v24 = (YAML::Exp *)YAML::operator|(&v45, (int *)&v43, (uint64_t)&p_size);
      YAML::Exp::ChompIndicator(v24);
      v25 = (YAML::Exp *)YAML::operator|((int *)&p_size, YAML::Exp::ChompIndicator(void)::e, (uint64_t)&__p);
      YAML::Exp::Digit(v25);
      YAML::operator|((int *)&__p, &YAML::Exp::Digit(void)::e, (uint64_t)&YAML::Exp::Chomp(void)::e);
      v49[0] = (void **)&__p.__r_.__value_.__l.__size_;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](v49);
      v49[0] = (void **)&v48;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](v49);
      v49[0] = (void **)&v44;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](v49);
      v43 = (void **)&v46;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v43);
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Chomp(void)::e, &dword_1BF794000);
    }
  }
  __p.__r_.__value_.__r.__words[0] = 0;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)this;
  v5 = YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)&YAML::Exp::Chomp(void)::e, (unint64_t *)&__p);
  if (v5 >= 1)
  {
    while (1)
    {
      v6 = YAML::Stream::get(this);
      v7 = v6;
      if (v6 == 45)
      {
        v39 = -1;
      }
      else if (v6 == 43)
      {
        v39 = 1;
      }
      else
      {
        {
          YAML::Exp::Digit(void)::e = 2;
          word_1EF580774 = 14640;
          qword_1EF580780 = 0;
          unk_1EF580788 = 0;
          qword_1EF580778 = 0;
          __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Digit(void)::e, &dword_1BF794000);
        }
        memset(&__p, 0, sizeof(__p));
        std::string::push_back(&__p, v7);
        v9 = YAML::RegEx::Match((uint64_t)&YAML::Exp::Digit(void)::e, (char *)&__p);
        v10 = v9;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if ((v10 & 0x80000000) == 0)
          {
LABEL_12:
            if (v7 == 48)
            {
              exception = __cxa_allocate_exception(0x38uLL);
              v19 = *((_DWORD *)this + 4);
              p_size = (std::string::size_type *)*((_QWORD *)this + 1);
              LODWORD(v48) = v19;
              std::string::basic_string[abi:ne180100]<0>(&__p, "cannot set zero indentation for a block scalar");
              YAML::Exception::Exception((uint64_t)exception, &p_size, (__int128 *)&__p);
              *exception = &off_1E793AF28;
            }
            v34 = v7 - 48;
            LOBYTE(v35) = 0;
          }
        }
        else if ((v9 & 0x80000000) == 0)
        {
          goto LABEL_12;
        }
      }
      if (!--v5)
        goto LABEL_21;
    }
  }
  while (1)
  {
LABEL_21:
    if ((v13 & 1) == 0)
    {
      if ((_DWORD)v11)
      {
        YAML::Exp::Space(v11);
        YAML::Exp::Tab(v12);
        YAML::operator|(&YAML::Exp::Space(void)::e, &YAML::Exp::Tab(void)::e, (uint64_t)YAML::Exp::Blank(void)::e);
        __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, YAML::Exp::Blank(void)::e, &dword_1BF794000);
      }
    }
    __p.__r_.__value_.__r.__words[0] = 0;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)this;
    if ((YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)YAML::Exp::Blank(void)::e, (unint64_t *)&__p) & 0x80000000) != 0)
      break;
    YAML::Stream::get(this);
  }
  {
    YAML::Exp::Comment(void)::e = 1;
    word_1EF580AEC = 35;
    qword_1EF580AF8 = 0;
    unk_1EF580B00 = 0;
    qword_1EF580AF0 = 0;
    __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Comment(void)::e, &dword_1BF794000);
  }
  LODWORD(__p.__r_.__value_.__l.__data_) = YAML::Exp::Comment(void)::e;
  WORD2(__p.__r_.__value_.__r.__words[0]) = word_1EF580AEC;
  v29[0] = 0;
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
  std::vector<YAML::RegEx>::__init_with_size[abi:ne180100]<YAML::RegEx*,YAML::RegEx*>(&__p.__r_.__value_.__l.__size_, (int *)qword_1EF580AF0, (int *)qword_1EF580AF8, (qword_1EF580AF8 - qword_1EF580AF0) >> 5);
  p_size = 0;
  v48 = this;
  v15 = YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)&__p, (unint64_t *)&p_size);
  p_size = &__p.__r_.__value_.__l.__size_;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_size);
  if ((v15 & 0x80000000) == 0)
  {
    while (!*(_DWORD *)(*(_QWORD *)this + *(_QWORD *)(**(_QWORD **)this - 24) + 32)
         || *((_QWORD *)this + 8)
         && *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 4) + ((*((_QWORD *)this + 7) >> 9) & 0x7FFFFFFFFFFFF8))
                     + (*((_QWORD *)this + 7) & 0xFFFLL)) != 4)
    {
      YAML::Exp::Break((YAML::Exp *)v16);
      __p.__r_.__value_.__r.__words[0] = 0;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)this;
      v16 = YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)YAML::Exp::Break(void)::e, (unint64_t *)&__p);
      if ((v16 & 0x80000000) == 0)
        break;
      v16 = YAML::Stream::get(this);
    }
  }
  if (!*(_DWORD *)(*(_QWORD *)this + *(_QWORD *)(**(_QWORD **)this - 24) + 32)
    || *((_QWORD *)this + 8)
    && *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 4) + ((*((_QWORD *)this + 7) >> 9) & 0x7FFFFFFFFFFFF8))
                + (*((_QWORD *)this + 7) & 0xFFFLL)) != 4)
  {
    YAML::Exp::Break((YAML::Exp *)v16);
    __p.__r_.__value_.__r.__words[0] = 0;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)this;
    if ((YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)YAML::Exp::Break(void)::e, (unint64_t *)&__p) & 0x80000000) != 0)
    {
      v26 = __cxa_allocate_exception(0x38uLL);
      v27 = *((_DWORD *)this + 4);
      p_size = (std::string::size_type *)*((_QWORD *)this + 1);
      LODWORD(v48) = v27;
      std::string::basic_string[abi:ne180100]<0>(&__p, "unexpected character in block scalar");
      YAML::Exception::Exception((uint64_t)v26, &p_size, (__int128 *)&__p);
      *v26 = &off_1E793AF28;
    }
  }
  v17 = *((_QWORD *)this + 30);
  if (!v17
    || (LODWORD(v17) = **(_DWORD **)(*(_QWORD *)(*((_QWORD *)this + 26)
                                               + (((unint64_t)(v17 + *((_QWORD *)this + 29) - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                   + 8 * ((v17 + *((_QWORD *)this + 29) - 1) & 0x1FF)),
        (v17 & 0x80000000) == 0))
  {
    v34 += v17;
  }
  HIBYTE(v35) = 0;
  v38 = 0;
  HIDWORD(v40) = 2;
  YAML::ScanScalar((uint64_t)this, (uint64_t)&v32, &__p);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  __str = __p;
  *((_WORD *)this + 73) = 1;
  __p.__r_.__value_.__r.__words[0] = 0x1400000000;
  __p.__r_.__value_.__l.__size_ = v2;
  LODWORD(__p.__r_.__value_.__r.__words[2]) = v3;
  *(_OWORD *)v29 = 0u;
  memset(v30, 0, sizeof(v30));
  v31 = 0;
  std::string::operator=((std::string *)v29, &__str);
  std::deque<YAML::Token>::push_back((_QWORD *)this + 12, (__int128 *)&__p);
  p_size = (std::string::size_type *)v30 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_size);
  if (SBYTE7(v30[0]) < 0)
    operator delete(v29[0]);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1BFC1DCE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  uint64_t v36;
  uint64_t v37;

  *(_QWORD *)(v37 - 96) = v36 + 8;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 96));
  *(_QWORD *)(v37 - 96) = v37 - 120;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 96));
  *(_QWORD *)(v37 - 96) = &a36;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 96));
  a35 = v37 - 152;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
  if (a33 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void YAML::Exp::ChompIndicator(YAML::Exp *this)
{
  unsigned __int8 v1;
  void *__p[2];
  char v3;

  {
    std::string::basic_string[abi:ne180100]<0>(__p, "+-");
    YAML::RegEx::RegEx((uint64_t)&YAML::Exp::ChompIndicator(void)::e, (char *)__p, 3);
    if (v3 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::ChompIndicator(void)::e, &dword_1BF794000);
  }
}

void sub_1BFC1DEC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::VariableJSONPrinter::Visit(siri::dialogengine::VariableJSONPrinter *this, siri::dialogengine::VariableArray *a2)
{
  unint64_t i;
  uint64_t v5;
  __n128 v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *size;
  unint64_t *v10;
  unint64_t v11;
  std::string __p;

  if (*((char *)a2 + 31) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  else
    __p = *(std::string *)((char *)a2 + 8);
  siri::dialogengine::VariableJSONPrinter::Open((uint64_t)this, (uint64_t)&__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  for (i = 0; ; ++i)
  {
    v5 = *((_QWORD *)a2 + 9);
    if (i >= (*((_QWORD *)a2 + 10) - v5) >> 4)
      break;
    v6 = *(__n128 *)(v5 + 16 * i);
    *(__n128 *)&__p.__r_.__value_.__l.__data_ = v6;
    if (v6.n128_u64[1])
    {
      v7 = (unint64_t *)(v6.n128_u64[1] + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    (*(void (**)(unint64_t, siri::dialogengine::VariableJSONPrinter *, __n128))(*(_QWORD *)v6.n128_u64[0]
                                                                                                + 16))(v6.n128_u64[0], this, v6);
    size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v10 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
  }
  return siri::dialogengine::VariableJSONPrinter::Close(this, 0);
}

void sub_1BFC1E0B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::VariableJSONPrinter::Visit(siri::dialogengine::VariableJSONPrinter *this, siri::dialogengine::VariableBoolean *a2)
{
  char *v4;
  void *__p[2];
  char v6;
  std::string v7;

  if (*((char *)a2 + 31) < 0)
    std::string::__init_copy_ctor_external(&v7, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  else
    v7 = *(std::string *)((char *)a2 + 8);
  if (*((_BYTE *)a2 + 66))
    v4 = "true";
  else
    v4 = "false";
  std::string::basic_string[abi:ne180100]<0>(__p, v4);
  siri::dialogengine::VariableJSONPrinter::PrintValue((uint64_t)this, (uint64_t)&v7, (uint64_t)__p, 0);
  if (v6 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
}

void sub_1BFC1E188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::VariableJSONPrinter::Visit(siri::dialogengine::VariableJSONPrinter *this, siri::dialogengine::VariableNumber *a2)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  std::string *v8;
  int v9;
  std::string __p;
  std::string v11;

  std::to_string(&v11, *((double *)a2 + 9));
  std::string::basic_string[abi:ne180100]<0>(&__p, ".");
  v4 = siri::dialogengine::StringContains(&v11.__r_.__value_.__l.__data_, (char *)&__p);
  v5 = v4;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v4)
      goto LABEL_5;
    goto LABEL_22;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v5)
    goto LABEL_22;
  while (1)
  {
LABEL_5:
    if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (HIBYTE(v11.__r_.__value_.__r.__words[2]) <= 1u)
      {
        if (!*((_BYTE *)&v11.__r_.__value_.__s + 23))
          goto LABEL_22;
        v6 = v11.__r_.__value_.__s.__data_[HIBYTE(v11.__r_.__value_.__r.__words[2]) - 1];
LABEL_15:
        if (v6 != 46)
          goto LABEL_22;
        v7 = HIBYTE(v11.__r_.__value_.__r.__words[2]) - 1;
        --*((_BYTE *)&v11.__r_.__value_.__s + 23);
        v8 = &v11;
        goto LABEL_21;
      }
      v6 = *((unsigned __int8 *)&__p.__r_.__value_.__r.__words[2] + HIBYTE(v11.__r_.__value_.__r.__words[2]) + 7);
      if (v6 != 48)
        goto LABEL_15;
      v7 = HIBYTE(v11.__r_.__value_.__r.__words[2]) - 1;
      --*((_BYTE *)&v11.__r_.__value_.__s + 23);
      v8 = &v11;
      goto LABEL_12;
    }
    v7 = v11.__r_.__value_.__l.__size_ - 1;
    if (v11.__r_.__value_.__l.__size_ <= 1)
      break;
    v8 = (std::string *)v11.__r_.__value_.__r.__words[0];
    v9 = *(unsigned __int8 *)(v11.__r_.__value_.__r.__words[0] + v11.__r_.__value_.__l.__size_ - 1);
    if (v9 != 48)
      goto LABEL_19;
    --v11.__r_.__value_.__l.__size_;
LABEL_12:
    v8->__r_.__value_.__s.__data_[v7] = 0;
  }
  if (!v11.__r_.__value_.__l.__size_)
    goto LABEL_22;
  v8 = (std::string *)v11.__r_.__value_.__r.__words[0];
  v9 = *(unsigned __int8 *)(v11.__r_.__value_.__r.__words[0] + v11.__r_.__value_.__l.__size_ - 1);
LABEL_19:
  if (v9 != 46)
    goto LABEL_22;
  --v11.__r_.__value_.__l.__size_;
LABEL_21:
  v8->__r_.__value_.__s.__data_[v7] = 0;
LABEL_22:
  if (*((char *)a2 + 31) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  else
    __p = *(std::string *)((char *)a2 + 8);
  siri::dialogengine::VariableJSONPrinter::PrintValue((uint64_t)this, (uint64_t)&__p, (uint64_t)&v11, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_1BFC1E344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *siri::dialogengine::VariableJSONPrinter::Visit(siri::dialogengine::VariableJSONPrinter *this, siri::dialogengine::VariableObject *a2)
{
  _QWORD *i;
  std::string::size_type size;
  std::string __p;
  std::string *p_p;

  if (*((char *)a2 + 31) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  else
    __p = *(std::string *)((char *)a2 + 8);
  siri::dialogengine::VariableJSONPrinter::Open((uint64_t)this, (uint64_t)&__p, 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  siri::dialogengine::VariableObject::GetValues(a2, &__p.__r_.__value_.__l.__data_);
  size = __p.__r_.__value_.__l.__size_;
  for (i = (_QWORD *)__p.__r_.__value_.__r.__words[0]; i != (_QWORD *)size; i += 2)
    (*(void (**)(_QWORD, siri::dialogengine::VariableJSONPrinter *))(*(_QWORD *)*i + 16))(*i, this);
  p_p = &__p;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
  return siri::dialogengine::VariableJSONPrinter::Close(this, 1);
}

void sub_1BFC1E448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::VariableJSONPrinter::Visit(siri::dialogengine::VariableJSONPrinter *this, const std::string::value_type **a2)
{
  uint64_t v4;
  std::string::size_type size;
  std::string __p;
  std::string v7;
  std::string v8;
  void *v9;
  uint64_t v10;
  unsigned __int8 v11;
  void *v12;
  char v13;
  void *v14;
  char v15;
  void *v16;
  char v17;
  void *v18;
  char v19;
  void *v20;
  char v21;

  (*((void (**)(std::string *__return_ptr, const std::string::value_type **))*a2 + 6))(&v8, a2);
  memset(&v7, 0, sizeof(v7));
  v4 = v11;
  if ((v11 & 0x80u) != 0)
    v4 = v10;
  if (v4)
    goto LABEL_36;
  size = HIBYTE(v8.__r_.__value_.__r.__words[2]);
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v8.__r_.__value_.__l.__size_;
  if (size)
  {
LABEL_36:
    if (siri::dialogengine::SpeakableString::SpeakEqualsPrint((siri::dialogengine::SpeakableString *)&v8))
    {
      if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&__p, v8.__r_.__value_.__l.__data_, v8.__r_.__value_.__l.__size_);
      else
        __p = v8;
    }
    else
    {
      siri::dialogengine::SpeakableString::ToMultiplexedString((siri::dialogengine::SpeakableString *)&v8, &__p);
    }
    v7 = __p;
  }
  if (*((char *)a2 + 31) < 0)
    std::string::__init_copy_ctor_external(&__p, a2[1], (std::string::size_type)a2[2]);
  else
    __p = *(std::string *)(a2 + 1);
  siri::dialogengine::VariableJSONPrinter::PrintValue((uint64_t)this, (uint64_t)&__p, (uint64_t)&v7, 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (v21 < 0)
    operator delete(v20);
  if (v19 < 0)
    operator delete(v18);
  if (v17 < 0)
    operator delete(v16);
  if (v15 < 0)
    operator delete(v14);
  if (v13 < 0)
    operator delete(v12);
  if ((char)v11 < 0)
    operator delete(v9);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
}

void sub_1BFC1E61C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22)
{
  siri::dialogengine::SpeakableString::~SpeakableString(&a22);
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::VariableJSONPrinter::PrintValue(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  _QWORD *result;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;

  siri::dialogengine::VariableJSONPrinter::Indent((_QWORD *)a1, 1);
  v23 = 34;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a1 + 32), (uint64_t)&v23, 1);
  v9 = *(char *)(a2 + 23);
  if (v9 >= 0)
    v10 = a2;
  else
    v10 = *(_QWORD *)a2;
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(a2 + 23);
  else
    v11 = *(_QWORD *)(a2 + 8);
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
  v24 = 34;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v24, 1);
  v25 = 58;
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)&v25, 1);
  v26 = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v26, 1);
  if (a4)
  {
    v27 = 34;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a1 + 32), (uint64_t)&v27, 1);
    v15 = *(char *)(a3 + 23);
    if (v15 >= 0)
      v16 = a3;
    else
      v16 = *(_QWORD *)a3;
    if (v15 >= 0)
      v17 = *(unsigned __int8 *)(a3 + 23);
    else
      v17 = *(_QWORD *)(a3 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a1 + 32), v16, v17);
    v28 = 34;
    v18 = &v28;
    v19 = (_QWORD *)(a1 + 32);
    v20 = 1;
  }
  else
  {
    v21 = *(char *)(a3 + 23);
    if (v21 >= 0)
      v18 = (char *)a3;
    else
      v18 = *(char **)a3;
    if (v21 >= 0)
      v20 = *(unsigned __int8 *)(a3 + 23);
    else
      v20 = *(_QWORD *)(a3 + 8);
    v19 = (_QWORD *)(a1 + 32);
  }
  result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v18, v20);
  *(_BYTE *)(a1 + 296) = 1;
  return result;
}

_QWORD *siri::dialogengine::VariableJSONPrinter::Indent(_QWORD *this, int a2)
{
  uint64_t v2;
  unsigned int v3;
  char v4;
  char v5;

  v2 = (uint64_t)this;
  if (*((_BYTE *)this + 296))
  {
    if (a2)
    {
      v4 = 44;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(this + 4, (uint64_t)&v4, 1);
    }
    v5 = 10;
    this = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(v2 + 32), (uint64_t)&v5, 1);
    *(_BYTE *)(v2 + 296) = 0;
  }
  if (*(_WORD *)(v2 + 8))
  {
    v3 = 0;
    do
    {
      this = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(v2 + 32), (uint64_t)"    ", 4);
      ++v3;
    }
    while (v3 < *(unsigned __int16 *)(v2 + 8));
  }
  return this;
}

_QWORD *siri::dialogengine::VariableJSONPrinter::Open(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  _QWORD *v15;
  _QWORD *result;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;

  siri::dialogengine::VariableJSONPrinter::Indent((_QWORD *)a1, 1);
  v6 = *(unsigned __int8 *)(a2 + 23);
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a2 + 8);
  if (v6)
  {
    v17 = 34;
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a1 + 32), (uint64_t)&v17, 1);
    v8 = *(char *)(a2 + 23);
    if (v8 >= 0)
      v9 = a2;
    else
      v9 = *(_QWORD *)a2;
    if (v8 >= 0)
      v10 = *(unsigned __int8 *)(a2 + 23);
    else
      v10 = *(_QWORD *)(a2 + 8);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
    v18 = 34;
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)&v18, 1);
    v19 = 58;
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v19, 1);
    v20 = 32;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)&v20, 1);
  }
  if (a3)
    v14 = 123;
  else
    v14 = 91;
  v21 = v14;
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a1 + 32), (uint64_t)&v21, 1);
  v22 = 10;
  result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)&v22, 1);
  ++*(_WORD *)(a1 + 8);
  return result;
}

_QWORD *siri::dialogengine::VariableJSONPrinter::Close(siri::dialogengine::VariableJSONPrinter *this, int a2)
{
  char v3;
  _QWORD *result;
  char v5;

  if (*((_WORD *)this + 4))
    --*((_WORD *)this + 4);
  if (a2)
    v3 = 125;
  else
    v3 = 93;
  siri::dialogengine::VariableJSONPrinter::Indent(this, 0);
  v5 = v3;
  result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)this + 4, (uint64_t)&v5, 1);
  *((_BYTE *)this + 296) = 1;
  return result;
}

uint64_t siri::dialogengine::VariableJSONPrinter::str(siri::dialogengine::VariableJSONPrinter *this)
{
  return std::stringbuf::str();
}

void siri::dialogengine::VariableJSONPrinter::clear(siri::dialogengine::VariableJSONPrinter *this)
{
  std::string __str;

  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::operator=((std::string *)((char *)this + 104), &__str);
  std::stringbuf::__init_buf_ptrs[abi:ne180100]((uint64_t)this + 40);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *((_BYTE *)this + 296) = 0;
}

void sub_1BFC1EA08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1BFC1EAB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1BFC1EB7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1BFC1ECBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v16 - 32);
  _Unwind_Resume(a1);
}

void sub_1BFC1EE20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v16 - 32);
  _Unwind_Resume(a1);
}

void sub_1BFC1F030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1BFC1F220(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BFC1F428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1BFC1F618(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1BFC1F81C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1BFC1FA0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void __assign_helper_atomic_property__48850(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v3 = *a2;
  v2 = a2[1];
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (std::__shared_weak_count *)a1[1];
  *a1 = v3;
  a1[1] = v2;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

_QWORD *__copy_helper_atomic_property__48851(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = a2[1];
  *result = *a2;
  result[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void sub_1BFC1FC50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  if (a19 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void siri::dialogengine::VoiceServices::ApplySubstitutions(siri::dialogengine::VoiceServices *this@<X0>, siri::dialogengine::Context *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7[3];
  void *v8[52];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14[2];

  siri::dialogengine::Context::GetLocale(this, (const char *)a2, (uint64_t)v14);
  siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)v8, (siri::dialogengine::VoiceServices *)((char *)this + 8));
  v11 = 0;
  v12 = 0;
  v13 = 0;
  std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(&v11, v9, v10, 0xAAAAAAAAAAAAAAABLL * ((v10 - v9) >> 4));
  siri::dialogengine::RequestInfo::~RequestInfo(v8);
  memset(v7, 0, sizeof(v7));
  std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(v7, v11, v12, 0xAAAAAAAAAAAAAAABLL * ((v12 - v11) >> 4));
  siri::dialogengine::SubstituteWords((uint64_t)a2, v7, v14, 1, a3);
}

void sub_1BFC1FD84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13)
{
  uint64_t v13;

  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&a13);
  a13 = (void **)(v13 - 80);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&a13);
  if (*(char *)(v13 - 33) < 0)
    operator delete(*(void **)(v13 - 56));
  _Unwind_Resume(a1);
}

void sub_1BFC1FEE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;
  void *v27;
  uint64_t v28;

  if (*(char *)(v28 - 33) < 0)
    operator delete(*(void **)(v28 - 56));

  _Unwind_Resume(a1);
}

void sub_1BFC20054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;
  void *v27;
  uint64_t v28;

  if (*(char *)(v28 - 33) < 0)
    operator delete(*(void **)(v28 - 56));

  _Unwind_Resume(a1);
}

void sub_1BFC201C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;
  void *v27;
  uint64_t v28;

  if (*(char *)(v28 - 33) < 0)
    operator delete(*(void **)(v28 - 56));

  _Unwind_Resume(a1);
}

void sub_1BFC2033C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;
  void *v27;
  uint64_t v28;

  if (*(char *)(v28 - 33) < 0)
    operator delete(*(void **)(v28 - 56));

  _Unwind_Resume(a1);
}

void sub_1BFC204B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;
  void *v27;
  uint64_t v28;

  if (*(char *)(v28 - 33) < 0)
    operator delete(*(void **)(v28 - 56));

  _Unwind_Resume(a1);
}

void sub_1BFC20624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;
  void *v27;
  uint64_t v28;

  if (*(char *)(v28 - 33) < 0)
    operator delete(*(void **)(v28 - 56));

  _Unwind_Resume(a1);
}

void siri::dialogengine::NodeVisitor::Visit(siri::dialogengine::NodeVisitor *this, siri::dialogengine::Group *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  void **v8;

  v5 = 0;
  v6 = 0;
  v7 = 0;
  std::vector<std::shared_ptr<siri::dialogengine::Node>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Node>*,std::shared_ptr<siri::dialogengine::Node>*>((char *)&v5, *((_QWORD **)a2 + 26), *((_QWORD **)a2 + 27), (uint64_t)(*((_QWORD *)a2 + 27) - *((_QWORD *)a2 + 26)) >> 4);
  v3 = v5;
  v4 = v6;
  while (v3 != v4)
  {
    (*(void (**)(_QWORD, siri::dialogengine::NodeVisitor *))(*(_QWORD *)*v3 + 16))(*v3, this);
    v3 += 2;
  }
  v8 = (void **)&v5;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v8);
}

void sub_1BFC20720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ConstNodeVisitor::Visit(siri::dialogengine::ConstNodeVisitor *this, const siri::dialogengine::Group *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  void **v8;

  v5 = 0;
  v6 = 0;
  v7 = 0;
  std::vector<std::shared_ptr<siri::dialogengine::Node>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Node>*,std::shared_ptr<siri::dialogengine::Node>*>((char *)&v5, *((_QWORD **)a2 + 26), *((_QWORD **)a2 + 27), (uint64_t)(*((_QWORD *)a2 + 27) - *((_QWORD *)a2 + 26)) >> 4);
  v3 = v5;
  v4 = v6;
  while (v3 != v4)
  {
    (*(void (**)(_QWORD, siri::dialogengine::ConstNodeVisitor *))(*(_QWORD *)*v3 + 24))(*v3, this);
    v3 += 2;
  }
  v8 = (void **)&v5;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v8);
}

void sub_1BFC207C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_1BFC208A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::HasCATExtension(std::string *a1, int a2)
{
  BOOL v4;
  BOOL v5;
  BOOL v6;
  BOOL v7;
  void *__p[2];
  char v10;

  if ((a2 & 0xFFFFFFFD) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, ".cat.xml");
    v4 = siri::dialogengine::StringEndsWith(a1, (unsigned __int8 *)__p);
    v5 = v4;
    if (v10 < 0)
    {
      operator delete(__p[0]);
      if (v5)
        return 1;
    }
    else if (v4)
    {
      return 1;
    }
  }
  if ((a2 - 1) <= 1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, ".cat.bin");
    v6 = siri::dialogengine::StringEndsWith(a1, (unsigned __int8 *)__p);
    v7 = v6;
    if (v10 < 0)
    {
      operator delete(__p[0]);
      if (v7)
        return 1;
    }
    else if (v6)
    {
      return 1;
    }
  }
  return 0;
}

void sub_1BFC209BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::HasVisualCATExtension(std::string *a1, int a2)
{
  BOOL v4;
  BOOL v5;
  void *__p[2];
  char v8;
  void *v9[2];
  char v10;

  if ((a2 & 0xFFFFFFFD) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v9, ".vcatxml");
    if (siri::dialogengine::StringEndsWith(a1, (unsigned __int8 *)v9))
    {
      v4 = 1;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, ".visualcat.xml");
      v4 = siri::dialogengine::StringEndsWith(a1, (unsigned __int8 *)__p);
      if (v8 < 0)
        operator delete(__p[0]);
    }
    if (v10 < 0)
    {
      operator delete(v9[0]);
      if (v4)
        return 1;
    }
    else if (v4)
    {
      return 1;
    }
  }
  if ((a2 - 1) <= 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v9, ".vcatbin");
    if (siri::dialogengine::StringEndsWith(a1, (unsigned __int8 *)v9))
    {
      v5 = 1;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, ".visualcat.bin");
      v5 = siri::dialogengine::StringEndsWith(a1, (unsigned __int8 *)__p);
      if (v8 < 0)
        operator delete(__p[0]);
    }
    if (v10 < 0)
    {
      operator delete(v9[0]);
      if (v5)
        return 1;
    }
    else if (v5)
    {
      return 1;
    }
  }
  return 0;
}

void sub_1BFC20B10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::HasPatternExtension(std::string *a1, int a2)
{
  BOOL v4;
  BOOL v5;
  void *__p[2];
  char v8;
  void *v9[2];
  char v10;

  if ((a2 & 0xFFFFFFFD) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v9, ".patternxml");
    if (siri::dialogengine::StringEndsWith(a1, (unsigned __int8 *)v9))
    {
      v4 = 1;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, ".pattern.xml");
      v4 = siri::dialogengine::StringEndsWith(a1, (unsigned __int8 *)__p);
      if (v8 < 0)
        operator delete(__p[0]);
    }
    if (v10 < 0)
    {
      operator delete(v9[0]);
      if (v4)
        return 1;
    }
    else if (v4)
    {
      return 1;
    }
  }
  if ((a2 - 1) <= 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v9, ".patternbin");
    if (siri::dialogengine::StringEndsWith(a1, (unsigned __int8 *)v9))
    {
      v5 = 1;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, ".pattern.bin");
      v5 = siri::dialogengine::StringEndsWith(a1, (unsigned __int8 *)__p);
      if (v8 < 0)
        operator delete(__p[0]);
    }
    if (v10 < 0)
    {
      operator delete(v9[0]);
      if (v5)
        return 1;
    }
    else if (v5)
    {
      return 1;
    }
  }
  return 0;
}

void sub_1BFC20C88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::HasSchemaExtension(std::string *a1, int a2)
{
  BOOL v4;
  BOOL v5;
  BOOL v6;
  BOOL v7;
  void *__p[2];
  char v10;

  if ((a2 & 0xFFFFFFFE) == 2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "catschema");
    v4 = siri::dialogengine::StringEndsWith(a1, (unsigned __int8 *)__p);
    v5 = v4;
    if (v10 < 0)
    {
      operator delete(__p[0]);
      if (v5)
        return 1;
    }
    else if (v4)
    {
      return 1;
    }
  }
  if (a2 == 4 || a2 == 2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "catschema.bin");
    v6 = siri::dialogengine::StringEndsWith(a1, (unsigned __int8 *)__p);
    v7 = v6;
    if (v10 < 0)
    {
      operator delete(__p[0]);
      if (v7)
        return 1;
    }
    else if (v6)
    {
      return 1;
    }
  }
  return 0;
}

void sub_1BFC20D98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::HasPatternSchemaExtension(std::string *a1, int a2)
{
  BOOL v4;
  BOOL v5;
  BOOL v6;
  BOOL v7;
  void *__p[2];
  char v10;

  if (a2 != 2)
  {
    if (a2 == 6)
    {
LABEL_9:
      std::string::basic_string[abi:ne180100]<0>(__p, "patternschema.bin");
      v6 = siri::dialogengine::StringEndsWith(a1, (unsigned __int8 *)__p);
      v7 = v6;
      if (v10 < 0)
      {
        operator delete(__p[0]);
        if (v7)
          return 1;
      }
      else if (v6)
      {
        return 1;
      }
      return 0;
    }
    if (a2 != 5)
      return 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "patternschema");
  v4 = siri::dialogengine::StringEndsWith(a1, (unsigned __int8 *)__p);
  v5 = v4;
  if (v10 < 0)
  {
    operator delete(__p[0]);
    if (v5)
      return 1;
  }
  else if (v4)
  {
    return 1;
  }
  if (a2 == 2)
    goto LABEL_9;
  return 0;
}

void sub_1BFC20E88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ChangeCATExtension(uint64_t a1@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  char *v5;
  void *__p[2];
  char v7;
  void *v8[2];
  char v9;
  std::string v10;
  std::string v11;

  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v11 = *(std::string *)a1;
  std::string::basic_string[abi:ne180100]<0>(v8, ".cat.xml");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  siri::dialogengine::StringReplace((uint64_t)&v11, (char *)v8, (uint64_t)__p, 0, &v10);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  v11 = v10;
  *((_BYTE *)&v10.__r_.__value_.__s + 23) = 0;
  v10.__r_.__value_.__s.__data_[0] = 0;
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  std::string::basic_string[abi:ne180100]<0>(v8, ".cat.bin");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  siri::dialogengine::StringReplace((uint64_t)&v11, (char *)v8, (uint64_t)__p, 0, &v10);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  v11 = v10;
  *((_BYTE *)&v10.__r_.__value_.__s + 23) = 0;
  v10.__r_.__value_.__s.__data_[0] = 0;
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  if (a2 == 1)
    v5 = ".cat.bin";
  else
    v5 = ".cat.xml";
  std::string::basic_string[abi:ne180100]<0>(&v10, v5);
  siri::dialogengine::AddExtension((uint64_t)&v11, (uint64_t)&v10, a3);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_1BFC21048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (a27 < 0)
    operator delete(__p);
  if (*(char *)(v27 - 41) < 0)
    operator delete(*(void **)(v27 - 64));
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ChangeVisualCATExtension(uint64_t a1@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  char *v5;
  void *__p[2];
  char v7;
  void *v8[2];
  char v9;
  std::string v10;
  std::string v11;

  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v11 = *(std::string *)a1;
  std::string::basic_string[abi:ne180100]<0>(v8, ".vcatxml");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  siri::dialogengine::StringReplace((uint64_t)&v11, (char *)v8, (uint64_t)__p, 0, &v10);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  v11 = v10;
  *((_BYTE *)&v10.__r_.__value_.__s + 23) = 0;
  v10.__r_.__value_.__s.__data_[0] = 0;
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  std::string::basic_string[abi:ne180100]<0>(v8, ".vcatbin");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  siri::dialogengine::StringReplace((uint64_t)&v11, (char *)v8, (uint64_t)__p, 0, &v10);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  v11 = v10;
  *((_BYTE *)&v10.__r_.__value_.__s + 23) = 0;
  v10.__r_.__value_.__s.__data_[0] = 0;
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  std::string::basic_string[abi:ne180100]<0>(v8, ".visualcat.xml");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  siri::dialogengine::StringReplace((uint64_t)&v11, (char *)v8, (uint64_t)__p, 0, &v10);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  v11 = v10;
  *((_BYTE *)&v10.__r_.__value_.__s + 23) = 0;
  v10.__r_.__value_.__s.__data_[0] = 0;
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  std::string::basic_string[abi:ne180100]<0>(v8, ".visualcat.bin");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  siri::dialogengine::StringReplace((uint64_t)&v11, (char *)v8, (uint64_t)__p, 0, &v10);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  v11 = v10;
  *((_BYTE *)&v10.__r_.__value_.__s + 23) = 0;
  v10.__r_.__value_.__s.__data_[0] = 0;
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  if (a2 == 1)
    v5 = ".vcatbin";
  else
    v5 = ".vcatxml";
  std::string::basic_string[abi:ne180100]<0>(&v10, v5);
  siri::dialogengine::AddExtension((uint64_t)&v11, (uint64_t)&v10, a3);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_1BFC21358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (a27 < 0)
    operator delete(__p);
  if (*(char *)(v27 - 41) < 0)
    operator delete(*(void **)(v27 - 64));
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ChangePatternExtension(uint64_t a1@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  char *v5;
  void *__p[2];
  char v7;
  void *v8[2];
  char v9;
  std::string v10;
  std::string v11;

  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v11 = *(std::string *)a1;
  std::string::basic_string[abi:ne180100]<0>(v8, ".patternxml");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  siri::dialogengine::StringReplace((uint64_t)&v11, (char *)v8, (uint64_t)__p, 0, &v10);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  v11 = v10;
  *((_BYTE *)&v10.__r_.__value_.__s + 23) = 0;
  v10.__r_.__value_.__s.__data_[0] = 0;
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  std::string::basic_string[abi:ne180100]<0>(v8, ".patternbin");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  siri::dialogengine::StringReplace((uint64_t)&v11, (char *)v8, (uint64_t)__p, 0, &v10);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  v11 = v10;
  *((_BYTE *)&v10.__r_.__value_.__s + 23) = 0;
  v10.__r_.__value_.__s.__data_[0] = 0;
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  std::string::basic_string[abi:ne180100]<0>(v8, ".pattern.xml");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  siri::dialogengine::StringReplace((uint64_t)&v11, (char *)v8, (uint64_t)__p, 0, &v10);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  v11 = v10;
  *((_BYTE *)&v10.__r_.__value_.__s + 23) = 0;
  v10.__r_.__value_.__s.__data_[0] = 0;
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  std::string::basic_string[abi:ne180100]<0>(v8, ".pattern.bin");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  siri::dialogengine::StringReplace((uint64_t)&v11, (char *)v8, (uint64_t)__p, 0, &v10);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  v11 = v10;
  *((_BYTE *)&v10.__r_.__value_.__s + 23) = 0;
  v10.__r_.__value_.__s.__data_[0] = 0;
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  if (a2 == 1)
    v5 = ".patternbin";
  else
    v5 = ".patternxml";
  std::string::basic_string[abi:ne180100]<0>(&v10, v5);
  siri::dialogengine::AddExtension((uint64_t)&v11, (uint64_t)&v10, a3);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_1BFC21680(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (a27 < 0)
    operator delete(__p);
  if (*(char *)(v27 - 41) < 0)
    operator delete(*(void **)(v27 - 64));
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ChangeSchemaExtension(uint64_t a1@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  char *v5;
  void *__p[2];
  char v7;
  void *v8[2];
  char v9;
  std::string v10;
  std::string v11;

  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v11 = *(std::string *)a1;
  std::string::basic_string[abi:ne180100]<0>(v8, ".catschema.bin");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  siri::dialogengine::StringReplace((uint64_t)&v11, (char *)v8, (uint64_t)__p, 0, &v10);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  v11 = v10;
  *((_BYTE *)&v10.__r_.__value_.__s + 23) = 0;
  v10.__r_.__value_.__s.__data_[0] = 0;
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  std::string::basic_string[abi:ne180100]<0>(v8, ".catschema");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  siri::dialogengine::StringReplace((uint64_t)&v11, (char *)v8, (uint64_t)__p, 0, &v10);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  v11 = v10;
  *((_BYTE *)&v10.__r_.__value_.__s + 23) = 0;
  v10.__r_.__value_.__s.__data_[0] = 0;
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  if (a2 == 4)
    v5 = "catschema.bin";
  else
    v5 = "catschema";
  std::string::basic_string[abi:ne180100]<0>(&v10, v5);
  siri::dialogengine::AddExtension((uint64_t)&v11, (uint64_t)&v10, a3);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_1BFC218A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (a27 < 0)
    operator delete(__p);
  if (*(char *)(v27 - 25) < 0)
    operator delete(*(void **)(v27 - 48));
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ChangePatternSchemaExtension(uint64_t a1@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  char *v5;
  void *__p[2];
  char v7;
  void *v8[2];
  char v9;
  std::string v10;
  std::string v11;

  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v11 = *(std::string *)a1;
  std::string::basic_string[abi:ne180100]<0>(v8, ".patternschema.bin");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  siri::dialogengine::StringReplace((uint64_t)&v11, (char *)v8, (uint64_t)__p, 0, &v10);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  v11 = v10;
  *((_BYTE *)&v10.__r_.__value_.__s + 23) = 0;
  v10.__r_.__value_.__s.__data_[0] = 0;
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  std::string::basic_string[abi:ne180100]<0>(v8, ".patternschema");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  siri::dialogengine::StringReplace((uint64_t)&v11, (char *)v8, (uint64_t)__p, 0, &v10);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  v11 = v10;
  *((_BYTE *)&v10.__r_.__value_.__s + 23) = 0;
  v10.__r_.__value_.__s.__data_[0] = 0;
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  if (a2 == 6)
    v5 = "patternschema.bin";
  else
    v5 = "patternschema";
  std::string::basic_string[abi:ne180100]<0>(&v10, v5);
  siri::dialogengine::AddExtension((uint64_t)&v11, (uint64_t)&v10, a3);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_1BFC21AB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (a27 < 0)
    operator delete(__p);
  if (*(char *)(v27 - 25) < 0)
    operator delete(*(void **)(v27 - 48));
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetCatLocales(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  std::vector<std::string>::pointer end;
  std::vector<std::string> v10;
  void *__p[2];
  char v12;
  std::vector<std::string> *v13;

  v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    siri::dialogengine::CatIdToPath(a2, __p);
    v6 = *a1;
    if (a1[1] != *a1)
    {
      v7 = 0;
      v8 = 0;
      do
      {
        siri::dialogengine::UpdatableDir::FindFile(v6 + v7, (uint64_t)__p, &v10);
        if (SHIBYTE(v10.__end_cap_.__value_) < 0)
        {
          end = v10.__end_;
          operator delete(v10.__begin_);
          if (end)
          {
LABEL_13:
            siri::dialogengine::UpdatableDir::ListDir(v6 + v7, (uint64_t)__p, &v10);
            siri::dialogengine::GetCatLocales((unsigned __int8 **)&v10, a3);
            v13 = &v10;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
            goto LABEL_14;
          }
        }
        else if (HIBYTE(v10.__end_cap_.__value_))
        {
          goto LABEL_13;
        }
        ++v8;
        v6 = *a1;
        v7 += 96;
      }
      while (v8 < 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5));
    }
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
LABEL_14:
    if (v12 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void sub_1BFC21C48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void siri::dialogengine::FindParamsFile(__int128 **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::string *v6;
  std::string *v7;
  int v8;
  const std::string::value_type *v9;
  std::string::size_type size;
  std::string *v11;
  __int128 v12;
  std::string v13;
  void *__p[2];
  std::string::size_type v15;
  void *v16[2];
  char v17;
  void *v18[2];
  char v19;
  std::string *v20;
  std::string *v21;

  siri::dialogengine::GetCATExtensions(&v20, a1);
  v6 = v20;
  v7 = v21;
  if (v20 == v21)
  {
LABEL_22:
    v18[0] = &v20;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v18);
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)a3, "");
    return;
  }
  while (1)
  {
    siri::dialogengine::CatIdToPath(a2, v16);
    std::string::basic_string[abi:ne180100]<0>(&v13, "_params.cat");
    v8 = SHIBYTE(v6->__r_.__value_.__r.__words[2]);
    if (v8 >= 0)
      v9 = (const std::string::value_type *)v6;
    else
      v9 = (const std::string::value_type *)v6->__r_.__value_.__r.__words[0];
    if (v8 >= 0)
      size = HIBYTE(v6->__r_.__value_.__r.__words[2]);
    else
      size = v6->__r_.__value_.__l.__size_;
    v11 = std::string::append(&v13, v9, size);
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v15 = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::JoinPath((uint64_t)v16, (uint64_t)__p, (uint64_t)v18);
    if (SHIBYTE(v15) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
    if (v17 < 0)
      operator delete(v16[0]);
    siri::dialogengine::FindFileInUpdatableDirs((uint64_t)v18, (uint64_t *)a1, a3);
    if (*(char *)(a3 + 23) < 0)
      break;
    if (*(_BYTE *)(a3 + 23))
      goto LABEL_23;
LABEL_19:
    if (v19 < 0)
      operator delete(v18[0]);
    if (++v6 == v7)
      goto LABEL_22;
  }
  if (!*(_QWORD *)(a3 + 8))
  {
    operator delete(*(void **)a3);
    goto LABEL_19;
  }
LABEL_23:
  if (v19 < 0)
    operator delete(v18[0]);
  v18[0] = &v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v18);
}

void sub_1BFC21E00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (a33 < 0)
    operator delete(__p);
  __p = (void *)(v33 - 88);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void siri::dialogengine::GetCATExtensions(std::string **a1, __int128 **a2)
{
  _BOOL4 v3;
  _BOOL4 v4;
  std::string *v5;
  uint64_t v6;
  std::string *v7;
  uint64_t v8;
  std::string __p;
  _QWORD v10[3];
  __int128 v11;

  *(_QWORD *)&v11 = *MEMORY[0x1E0C80C00];
  siri::dialogengine::GetBaseDir(a2, &__p);
  v3 = siri::dialogengine::PreferXMLFiles((uint64_t)&__p);
  v4 = v3;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v4)
    {
LABEL_3:
      std::string::basic_string[abi:ne180100]<0>(&__p, ".xml");
      std::string::basic_string[abi:ne180100]<0>(v10, ".bin");
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      v5 = (std::string *)operator new(0x30uLL);
      *a1 = v5;
      a1[1] = v5;
      a1[2] = v5 + 2;
      v6 = 0;
      a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)(a1 + 2), (__int128 *)&__p, &v11, v5);
      do
      {
        if (SHIBYTE(v10[v6 + 2]) < 0)
          operator delete(*(void **)((char *)&__p + v6 * 8 + 24));
        v6 -= 3;
      }
      while (v6 != -6);
      return;
    }
  }
  else if (v3)
  {
    goto LABEL_3;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, ".bin");
  std::string::basic_string[abi:ne180100]<0>(v10, ".xml");
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v7 = (std::string *)operator new(0x30uLL);
  *a1 = v7;
  a1[1] = v7;
  a1[2] = v7 + 2;
  v8 = 0;
  a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)(a1 + 2), (__int128 *)&__p, &v11, v7);
  do
  {
    if (SHIBYTE(v10[v8 + 2]) < 0)
      operator delete(*(void **)((char *)&__p + v8 * 8 + 24));
    v8 -= 3;
  }
  while (v8 != -6);
}

void sub_1BFC2201C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;

  v25 = v24;
  *(_QWORD *)(v23 + 8) = v25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  v27 = 0;
  while (1)
  {
    if (*(&a23 + v27) < 0)
      operator delete(*(void **)((char *)&a18 + v27));
    v27 -= 24;
    if (v27 == -48)
      _Unwind_Resume(a1);
  }
}

void siri::dialogengine::FindParamsFile(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  int v6;
  const std::string::value_type *v7;
  std::string::size_type size;
  std::string *v9;
  __int128 v10;
  std::string v11;
  std::string *v12;
  std::string *v13;
  std::string v14;
  std::string *v15;
  char v16;
  void *v17[2];
  std::string::size_type v18;
  void *__p;
  char v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  v23[1] = *MEMORY[0x1E0C80C00];
  siri::dialogengine::ValidateTemplateDir(a1, &v14);
  siri::dialogengine::UpdatableDir::UpdatableDir((siri::dialogengine::UpdatableDir *)v17, (__int128 *)&v14, 0);
  memset(&v11, 0, sizeof(v11));
  v15 = &v11;
  v16 = 0;
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x60uLL);
  v11.__r_.__value_.__l.__size_ = v11.__r_.__value_.__r.__words[0];
  v11.__r_.__value_.__r.__words[2] = v11.__r_.__value_.__r.__words[0] + 96;
  v11.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::dialogengine::UpdatableDir>,siri::dialogengine::UpdatableDir const*,siri::dialogengine::UpdatableDir const*,siri::dialogengine::UpdatableDir*>((uint64_t)&v11.__r_.__value_.__r.__words[2], (uint64_t)v17, (uint64_t)v23, (uint64_t)v11.__r_.__value_.__l.__data_);
  siri::dialogengine::GetCATExtensions(&v12, (__int128 **)&v11);
  v15 = &v11;
  std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  v15 = (std::string *)&v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  v15 = (std::string *)&v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  if (v20 < 0)
    operator delete(__p);
  if (SHIBYTE(v18) < 0)
    operator delete(v17[0]);
  v4 = v12;
  v5 = v13;
  if (v12 == v13)
  {
LABEL_20:
    v17[0] = &v12;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v17);
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)a2, "");
  }
  else
  {
    while (1)
    {
      std::string::basic_string[abi:ne180100]<0>(&v11, "_params.cat");
      v6 = SHIBYTE(v4->__r_.__value_.__r.__words[2]);
      if (v6 >= 0)
        v7 = (const std::string::value_type *)v4;
      else
        v7 = (const std::string::value_type *)v4->__r_.__value_.__r.__words[0];
      if (v6 >= 0)
        size = HIBYTE(v4->__r_.__value_.__r.__words[2]);
      else
        size = v4->__r_.__value_.__l.__size_;
      v9 = std::string::append(&v11, v7, size);
      v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v18 = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)v17 = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::JoinPath(a1, (uint64_t)v17, a2);
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v11.__r_.__value_.__l.__data_);
      if (siri::dialogengine::PathExists((uint64_t *)a2))
        break;
      if (*(char *)(a2 + 23) < 0)
        operator delete(*(void **)a2);
      if (++v4 == v5)
        goto LABEL_20;
    }
    v17[0] = &v12;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v17);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
}

void sub_1BFC222F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ValidateTemplateDir(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  _BOOL4 v4;
  BOOL HasExtension;
  BOOL v6;
  size_t v7;
  BOOL v8;
  size_t size;
  std::string::size_type v10;
  size_t v11;
  std::string::size_type v12;
  std::string *p_p;
  _BOOL4 v14;
  std::string::size_type v15;
  std::string *p_s1;
  size_t v17;
  void *v18[2];
  char v19;
  std::string v20;
  std::string __s1;
  std::string __p;

  std::string::basic_string[abi:ne180100]<0>(&__s1, "dialog");
  siri::dialogengine::JoinPath(a1, (uint64_t)&__s1, (uint64_t)&__p);
  v4 = siri::dialogengine::DirExists((uint64_t *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__s1.__r_.__value_.__l.__data_);
    if (v4)
      goto LABEL_12;
  }
  else if (v4)
  {
LABEL_12:
    if (*(char *)(a1 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
    }
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "cat");
  HasExtension = siri::dialogengine::HasExtension(a1, (uint64_t)&__p);
  v6 = HasExtension;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v6)
      goto LABEL_12;
  }
  else if (!HasExtension)
  {
    goto LABEL_12;
  }
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  siri::dialogengine::DirName((std::string *)a1, (uint64_t)&__s1);
  v7 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  v8 = (__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
  size = __s1.__r_.__value_.__l.__size_;
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  else
    v10 = __s1.__r_.__value_.__l.__size_;
  if (v10)
  {
    while (1)
    {
      if (v8)
        v11 = size;
      else
        v11 = v7;
      v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v12 = __p.__r_.__value_.__l.__size_;
      if (v11 == v12)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if (v8)
        {
          if (!memcmp(__s1.__r_.__value_.__l.__data_, p_p, size))
            goto LABEL_47;
        }
        else
        {
          if (!v7)
            goto LABEL_47;
          p_s1 = &__s1;
          v17 = v7;
          while (p_s1->__r_.__value_.__s.__data_[0] == p_p->__r_.__value_.__s.__data_[0])
          {
            p_s1 = (std::string *)((char *)p_s1 + 1);
            p_p = (std::string *)((char *)p_p + 1);
            if (!--v17)
              goto LABEL_47;
          }
        }
      }
      std::string::basic_string[abi:ne180100]<0>(v18, "dialog");
      siri::dialogengine::JoinPath((uint64_t)&__s1, (uint64_t)v18, (uint64_t)&v20);
      v14 = siri::dialogengine::DirExists((uint64_t *)&v20);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v20.__r_.__value_.__l.__data_);
      if (v19 < 0)
        operator delete(v18[0]);
      if (v14)
        break;
      std::string::operator=(&__p, &__s1);
      siri::dialogengine::DirName(&__s1, (uint64_t)&v20);
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s1.__r_.__value_.__l.__data_);
      __s1 = v20;
      v7 = HIBYTE(v20.__r_.__value_.__r.__words[2]);
      v8 = (v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
      size = v20.__r_.__value_.__l.__size_;
      if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v15 = HIBYTE(v20.__r_.__value_.__r.__words[2]);
      else
        v15 = __s1.__r_.__value_.__l.__size_;
      if (!v15)
        goto LABEL_47;
    }
    *a2 = __s1;
    goto LABEL_53;
  }
LABEL_47:
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
      goto LABEL_53;
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
    if ((v7 & 0x80) == 0)
      goto LABEL_53;
  }
  operator delete(__s1.__r_.__value_.__l.__data_);
LABEL_53:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BFC2266C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a26 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::FindLocaleFile(__int128 **a1@<X0>, __int128 **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::string::size_type v7;
  void **v8;
  void **v9;
  size_t v10;
  std::string *v11;
  const void *v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  std::string::size_type size;
  void *__p[2];
  char v20;
  std::string v21;
  void *v22[2];
  std::string::size_type v23;
  void **v24[3];
  std::string v25;

  siri::dialogengine::IncludeEnglishIfNeeded(a2, &v25);
  size = v25.__r_.__value_.__l.__size_;
  v7 = v25.__r_.__value_.__r.__words[0];
  if (v25.__r_.__value_.__r.__words[0] != v25.__r_.__value_.__l.__size_)
  {
    while (2)
    {
      siri::dialogengine::GetCATExtensions((std::string **)v24, a1);
      v9 = v24[0];
      v8 = v24[1];
      while (v9 != v8)
      {
        if (*(char *)(v7 + 23) >= 0)
          v10 = *(unsigned __int8 *)(v7 + 23);
        else
          v10 = *(_QWORD *)(v7 + 8);
        std::string::basic_string[abi:ne180100]((uint64_t)&v21, v10 + 4);
        if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v11 = &v21;
        else
          v11 = (std::string *)v21.__r_.__value_.__r.__words[0];
        if (v10)
        {
          if (*(char *)(v7 + 23) >= 0)
            v12 = (const void *)v7;
          else
            v12 = *(const void **)v7;
          memmove(v11, v12, v10);
        }
        strcpy((char *)v11 + v10, ".cat");
        v13 = *((char *)v9 + 23);
        if (v13 >= 0)
          v14 = (const std::string::value_type *)v9;
        else
          v14 = (const std::string::value_type *)*v9;
        if (v13 >= 0)
          v15 = *((unsigned __int8 *)v9 + 23);
        else
          v15 = (std::string::size_type)v9[1];
        v16 = std::string::append(&v21, v14, v15);
        v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
        v23 = v16->__r_.__value_.__r.__words[2];
        *(_OWORD *)v22 = v17;
        v16->__r_.__value_.__l.__size_ = 0;
        v16->__r_.__value_.__r.__words[2] = 0;
        v16->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v21.__r_.__value_.__l.__data_);
        siri::dialogengine::CatIdToPath(a3, __p);
        siri::dialogengine::JoinPath((uint64_t)__p, (uint64_t)v22, (uint64_t)&v21);
        if (v20 < 0)
          operator delete(__p[0]);
        siri::dialogengine::FindFileInUpdatableDirs((uint64_t)&v21, (uint64_t *)a1, a4);
        if (*(char *)(a4 + 23) < 0)
        {
          if (*(_QWORD *)(a4 + 8))
          {
LABEL_37:
            if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v21.__r_.__value_.__l.__data_);
            if (SHIBYTE(v23) < 0)
              operator delete(v22[0]);
            v22[0] = v24;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v22);
            goto LABEL_42;
          }
          operator delete(*(void **)a4);
        }
        else if (*(_BYTE *)(a4 + 23))
        {
          goto LABEL_37;
        }
        if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v21.__r_.__value_.__l.__data_);
        if (SHIBYTE(v23) < 0)
          operator delete(v22[0]);
        v9 += 3;
      }
      v22[0] = v24;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v22);
      v7 += 24;
      if (v7 != size)
        continue;
      break;
    }
  }
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)a4, "");
LABEL_42:
  v24[0] = (void **)&v25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v24);
}

void sub_1BFC22938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30)
{
  uint64_t v30;

  a23 = (void *)(v30 - 104);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  _Unwind_Resume(a1);
}

void siri::dialogengine::FindLocaleFile(uint64_t a1@<X0>, __int128 **a2@<X1>, uint64_t a3@<X8>)
{
  std::string::size_type v5;
  std::string::size_type size;
  std::string *v7;
  std::string *v8;
  size_t v9;
  std::string *v10;
  const void *v11;
  int v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  std::string *v15;
  __int128 v16;
  std::string v17;
  std::string *v18[3];
  std::string v19;
  std::string v20;
  std::string *v21;
  char v22;
  void *v23[2];
  std::string::size_type v24;
  void *__p;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  siri::dialogengine::IncludeEnglishIfNeeded(a2, &v20);
  siri::dialogengine::ValidateTemplateDir(a1, &v19);
  size = v20.__r_.__value_.__l.__size_;
  v5 = v20.__r_.__value_.__r.__words[0];
  if (v20.__r_.__value_.__r.__words[0] != v20.__r_.__value_.__l.__size_)
  {
    while (2)
    {
      siri::dialogengine::UpdatableDir::UpdatableDir((siri::dialogengine::UpdatableDir *)v23, (__int128 *)&v19, 0);
      memset(&v17, 0, sizeof(v17));
      v21 = &v17;
      v22 = 0;
      v17.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x60uLL);
      v17.__r_.__value_.__l.__size_ = v17.__r_.__value_.__r.__words[0];
      v17.__r_.__value_.__r.__words[2] = v17.__r_.__value_.__r.__words[0] + 96;
      v17.__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::dialogengine::UpdatableDir>,siri::dialogengine::UpdatableDir const*,siri::dialogengine::UpdatableDir const*,siri::dialogengine::UpdatableDir*>((uint64_t)&v17.__r_.__value_.__r.__words[2], (uint64_t)v23, (uint64_t)&v29, (uint64_t)v17.__r_.__value_.__l.__data_);
      siri::dialogengine::GetCATExtensions(v18, (__int128 **)&v17);
      v21 = &v17;
      std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
      v21 = (std::string *)&v28;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
      v21 = (std::string *)&v27;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
      if (v26 < 0)
        operator delete(__p);
      if (SHIBYTE(v24) < 0)
        operator delete(v23[0]);
      v8 = v18[0];
      v7 = v18[1];
      while (v8 != v7)
      {
        if (*(char *)(v5 + 23) >= 0)
          v9 = *(unsigned __int8 *)(v5 + 23);
        else
          v9 = *(_QWORD *)(v5 + 8);
        std::string::basic_string[abi:ne180100]((uint64_t)&v17, v9 + 4);
        if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v10 = &v17;
        else
          v10 = (std::string *)v17.__r_.__value_.__r.__words[0];
        if (v9)
        {
          if (*(char *)(v5 + 23) >= 0)
            v11 = (const void *)v5;
          else
            v11 = *(const void **)v5;
          memmove(v10, v11, v9);
        }
        strcpy((char *)v10 + v9, ".cat");
        v12 = SHIBYTE(v8->__r_.__value_.__r.__words[2]);
        if (v12 >= 0)
          v13 = (const std::string::value_type *)v8;
        else
          v13 = (const std::string::value_type *)v8->__r_.__value_.__r.__words[0];
        if (v12 >= 0)
          v14 = HIBYTE(v8->__r_.__value_.__r.__words[2]);
        else
          v14 = v8->__r_.__value_.__l.__size_;
        v15 = std::string::append(&v17, v13, v14);
        v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
        v24 = v15->__r_.__value_.__r.__words[2];
        *(_OWORD *)v23 = v16;
        v15->__r_.__value_.__l.__size_ = 0;
        v15->__r_.__value_.__r.__words[2] = 0;
        v15->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v17.__r_.__value_.__l.__data_);
        siri::dialogengine::JoinPath(a1, (uint64_t)v23, a3);
        if (siri::dialogengine::PathExists((uint64_t *)a3))
        {
          if (SHIBYTE(v24) < 0)
            operator delete(v23[0]);
          v23[0] = v18;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
          goto LABEL_38;
        }
        if (*(char *)(a3 + 23) < 0)
          operator delete(*(void **)a3);
        if (SHIBYTE(v24) < 0)
          operator delete(v23[0]);
        ++v8;
      }
      v23[0] = v18;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
      v5 += 24;
      if (v5 != size)
        continue;
      break;
    }
  }
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)a3, "");
LABEL_38:
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  v23[0] = &v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
}

void sub_1BFC22C94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a27 < 0)
    operator delete(__p);
  a33 = &a28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  _Unwind_Resume(a1);
}

void siri::dialogengine::FindVisualFile(__int128 **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _BOOL4 v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  std::string *i;
  std::vector<std::string>::pointer end;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  std::string *v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  std::vector<std::string>::pointer begin;
  std::vector<std::string>::pointer v21;
  std::vector<std::string> v23;
  void *v24[2];
  std::string::size_type v25;
  std::string *v26;
  std::string *v27;
  std::string *v28;
  std::__split_buffer<std::string> __p;
  _QWORD v30[3];
  _QWORD v31[3];
  __int128 v32;

  *(_QWORD *)&v32 = *MEMORY[0x1E0C80C00];
  memset(&v23, 0, sizeof(v23));
  siri::dialogengine::GetBaseDir(a1, (std::string *)&__p);
  v5 = siri::dialogengine::PreferXMLFiles((uint64_t)&__p);
  v6 = v5;
  if ((SHIBYTE(__p.__end_) & 0x80000000) == 0)
  {
    if (v5)
      goto LABEL_3;
LABEL_9:
    std::string::basic_string[abi:ne180100]<0>(&__p, ".vcatbin");
    std::string::basic_string[abi:ne180100]<0>(&__p.__end_cap_.__value_, ".vcatxml");
    std::string::basic_string[abi:ne180100]<0>(v30, ".visualcat.bin");
    std::string::basic_string[abi:ne180100]<0>(v31, ".visualcat.xml");
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v24[0] = &v26;
    LOBYTE(v24[1]) = 0;
    v26 = (std::string *)operator new(0x60uLL);
    v27 = v26;
    v28 = v26 + 4;
    v8 = 0;
    v27 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v28, (__int128 *)&__p, &v32, v26);
    do
    {
      if (SHIBYTE(v31[v8 + 2]) < 0)
        operator delete((void *)v31[v8]);
      v8 -= 3;
    }
    while (v8 != -12);
    goto LABEL_13;
  }
  operator delete(__p.__first_);
  if (!v6)
    goto LABEL_9;
LABEL_3:
  std::string::basic_string[abi:ne180100]<0>(&__p, ".vcatxml");
  std::string::basic_string[abi:ne180100]<0>(&__p.__end_cap_.__value_, ".vcatbin");
  std::string::basic_string[abi:ne180100]<0>(v30, ".visualcat.xml");
  std::string::basic_string[abi:ne180100]<0>(v31, ".visualcat.bin");
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v24[0] = &v26;
  LOBYTE(v24[1]) = 0;
  v26 = (std::string *)operator new(0x60uLL);
  v27 = v26;
  v28 = v26 + 4;
  v7 = 0;
  v27 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v28, (__int128 *)&__p, &v32, v26);
  do
  {
    if (SHIBYTE(v31[v7 + 2]) < 0)
      operator delete((void *)v31[v7]);
    v7 -= 3;
  }
  while (v7 != -12);
LABEL_13:
  v9 = v26;
  for (i = v27; v9 != i; ++v9)
  {
    siri::dialogengine::VisualCatIdToPath(a2, (uint64_t)v9, v24);
    end = v23.__end_;
    if (v23.__end_ >= v23.__end_cap_.__value_)
    {
      v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)v23.__end_ - (char *)v23.__begin_) >> 3);
      v14 = v13 + 1;
      if (v13 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<BOOL>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (((char *)v23.__end_cap_.__value_ - (char *)v23.__begin_) >> 3) > v14)
        v14 = 0x5555555555555556 * (((char *)v23.__end_cap_.__value_ - (char *)v23.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v23.__end_cap_.__value_ - (char *)v23.__begin_) >> 3) >= 0x555555555555555)
        v15 = 0xAAAAAAAAAAAAAAALL;
      else
        v15 = v14;
      __p.__end_cap_.__value_ = (std::allocator<std::string> *)&v23.__end_cap_;
      if (v15)
        v16 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v23.__end_cap_, v15);
      else
        v16 = 0;
      v17 = v16 + v13;
      __p.__first_ = v16;
      __p.__begin_ = v17;
      __p.__end_cap_.__value_ = &v16[v15];
      v18 = *(_OWORD *)v24;
      v17->__r_.__value_.__r.__words[2] = v25;
      *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
      v24[1] = 0;
      v25 = 0;
      v24[0] = 0;
      __p.__end_ = v17 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v23, &__p);
      v19 = v23.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__p);
      v23.__end_ = v19;
      if (SHIBYTE(v25) < 0)
        operator delete(v24[0]);
    }
    else
    {
      v12 = *(_OWORD *)v24;
      v23.__end_->__r_.__value_.__r.__words[2] = v25;
      *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
      v23.__end_ = end + 1;
    }
  }
  __p.__first_ = (std::__split_buffer<std::string>::pointer)&v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  begin = v23.__begin_;
  v21 = v23.__end_;
  while (1)
  {
    if (begin == v21)
    {
      __p.__first_ = (std::__split_buffer<std::string>::pointer)&v23;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      std::string::basic_string[abi:ne180100]<0>((_QWORD *)a3, "");
      return;
    }
    siri::dialogengine::FindFileInUpdatableDirs((uint64_t)begin, (uint64_t *)a1, a3);
    if (*(char *)(a3 + 23) < 0)
      break;
    if (*(_BYTE *)(a3 + 23))
      goto LABEL_37;
LABEL_35:
    ++begin;
  }
  if (!*(_QWORD *)(a3 + 8))
  {
    operator delete(*(void **)a3);
    goto LABEL_35;
  }
LABEL_37:
  __p.__first_ = (std::__split_buffer<std::string>::pointer)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1BFC23148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v40;

  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  v40 = 0;
  while (1)
  {
    if (*(&a39 + v40) < 0)
      operator delete(*(void **)((char *)&a34 + v40));
    v40 -= 24;
    if (v40 == -96)
    {
      a13 = &a10;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
      _Unwind_Resume(a1);
    }
  }
}

void siri::dialogengine::FindSchemaFile(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v6[2];
  char v7;
  std::string v8;
  std::string v9;
  std::string __p;
  void *v11[2];
  char v12;
  void *v13[2];
  char v14;

  std::string::basic_string[abi:ne180100]<0>(v11, "schema");
  std::string::basic_string[abi:ne180100]<0>(&v9, "catschema.bin");
  siri::dialogengine::AddExtension(a2, (uint64_t)&v9, &__p);
  siri::dialogengine::JoinPath((uint64_t)v11, (uint64_t)&__p, (uint64_t)v13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  if (v12 < 0)
    operator delete(v11[0]);
  std::string::basic_string[abi:ne180100]<0>(&__p, "schema");
  std::string::basic_string[abi:ne180100]<0>(&v8, "catschema");
  siri::dialogengine::AddExtension(a2, (uint64_t)&v8, &v9);
  siri::dialogengine::JoinPath((uint64_t)&__p, (uint64_t)&v9, (uint64_t)v11);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v9, "schema");
  std::string::basic_string[abi:ne180100]<0>(v6, ".yaml");
  siri::dialogengine::AddExtension(a2, (uint64_t)v6, &v8);
  siri::dialogengine::JoinPath((uint64_t)&v9, (uint64_t)&v8, (uint64_t)&__p);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  if (v7 < 0)
    operator delete(v6[0]);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  siri::dialogengine::FindFileInUpdatableDirs((uint64_t)v13, a1, a3);
  if (*(char *)(a3 + 23) < 0)
  {
    if (*(_QWORD *)(a3 + 8))
      goto LABEL_32;
  }
  else if (*(_BYTE *)(a3 + 23))
  {
    goto LABEL_32;
  }
  siri::dialogengine::FindFileInUpdatableDirs((uint64_t)v11, a1, (uint64_t)&v9);
  if (*(char *)(a3 + 23) < 0)
    operator delete(*(void **)a3);
  *(std::string *)a3 = v9;
  if (*(char *)(a3 + 23) < 0)
  {
    if (*(_QWORD *)(a3 + 8))
      goto LABEL_32;
  }
  else if (*(_BYTE *)(a3 + 23))
  {
    goto LABEL_32;
  }
  siri::dialogengine::FindFileInUpdatableDirs((uint64_t)&__p, a1, (uint64_t)&v9);
  if (*(char *)(a3 + 23) < 0)
    operator delete(*(void **)a3);
  *(std::string *)a3 = v9;
LABEL_32:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v12 < 0)
    operator delete(v11[0]);
  if (v14 < 0)
    operator delete(v13[0]);
}

void sub_1BFC23510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;
  uint64_t v33;

  if (*(char *)(v32 + 23) < 0)
    operator delete(*(void **)v32);
  if (a32 < 0)
    operator delete(__p);
  if (*(char *)(v33 - 57) < 0)
    operator delete(*(void **)(v33 - 80));
  if (*(char *)(v33 - 33) < 0)
    operator delete(*(void **)(v33 - 56));
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::FindPatternFile(__int128 **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _BOOL4 v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  std::string *v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  std::string *v14;
  std::string **v15;
  char v16;
  std::string __p;
  _QWORD v18[3];
  _QWORD v19[3];
  _QWORD v20[3];
  __int128 v21;

  *(_QWORD *)&v21 = *MEMORY[0x1E0C80C00];
  siri::dialogengine::GetBaseDir(a1, &__p);
  v6 = siri::dialogengine::PreferXMLFiles((uint64_t)&__p);
  v7 = v6;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v6)
      goto LABEL_3;
LABEL_9:
    std::string::basic_string[abi:ne180100]<0>(&__p, ".patternbin");
    std::string::basic_string[abi:ne180100]<0>(v18, ".patternxml");
    std::string::basic_string[abi:ne180100]<0>(v19, ".pattern.bin");
    std::string::basic_string[abi:ne180100]<0>(v20, ".pattern.xml");
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = &v12;
    v16 = 0;
    v12 = (std::string *)operator new(0x60uLL);
    v13 = v12;
    v14 = v12 + 4;
    v9 = 0;
    v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v14, (__int128 *)&__p, &v21, v12);
    do
    {
      if (SHIBYTE(v20[v9 + 2]) < 0)
        operator delete((void *)v20[v9]);
      v9 -= 3;
    }
    while (v9 != -12);
    goto LABEL_13;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v7)
    goto LABEL_9;
LABEL_3:
  std::string::basic_string[abi:ne180100]<0>(&__p, ".patternxml");
  std::string::basic_string[abi:ne180100]<0>(v18, ".patternbin");
  std::string::basic_string[abi:ne180100]<0>(v19, ".pattern.xml");
  std::string::basic_string[abi:ne180100]<0>(v20, ".pattern.bin");
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = &v12;
  v16 = 0;
  v12 = (std::string *)operator new(0x60uLL);
  v13 = v12;
  v14 = v12 + 4;
  v8 = 0;
  v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v14, (__int128 *)&__p, &v21, v12);
  do
  {
    if (SHIBYTE(v20[v8 + 2]) < 0)
      operator delete((void *)v20[v8]);
    v8 -= 3;
  }
  while (v8 != -12);
LABEL_13:
  v10 = v12;
  v11 = v13;
  while (1)
  {
    if (v10 == v11)
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      std::string::basic_string[abi:ne180100]<0>((_QWORD *)a3, "");
      return;
    }
    siri::dialogengine::PatternIdToPath(a2, (uint64_t)v10, &__p);
    siri::dialogengine::FindFileInUpdatableDirs((uint64_t)&__p, (uint64_t *)a1, a3);
    if (*(char *)(a3 + 23) < 0)
      break;
    if (*(_BYTE *)(a3 + 23))
      goto LABEL_24;
LABEL_20:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    ++v10;
  }
  if (!*(_QWORD *)(a3 + 8))
  {
    operator delete(*(void **)a3);
    goto LABEL_20;
  }
LABEL_24:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1BFC238FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v32;

  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  v32 = 0;
  while (1)
  {
    if (*(&a31 + v32) < 0)
      operator delete(*(void **)((char *)&a26 + v32));
    v32 -= 24;
    if (v32 == -96)
      _Unwind_Resume(a1);
  }
}

void siri::dialogengine::FindPatternSchemaFile(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v6[2];
  char v7;
  std::string v8;
  std::string __p;
  void *v10[2];
  char v11;
  void *v12[2];
  char v13;

  std::string::basic_string[abi:ne180100]<0>(v10, "schema");
  std::string::basic_string[abi:ne180100]<0>(&v8, "patternschema.bin");
  siri::dialogengine::AddExtension(a2, (uint64_t)&v8, &__p);
  siri::dialogengine::JoinPath((uint64_t)v10, (uint64_t)&__p, (uint64_t)v12);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  if (v11 < 0)
    operator delete(v10[0]);
  std::string::basic_string[abi:ne180100]<0>(&__p, "schema");
  std::string::basic_string[abi:ne180100]<0>(v6, "patternschema");
  siri::dialogengine::AddExtension(a2, (uint64_t)v6, &v8);
  siri::dialogengine::JoinPath((uint64_t)&__p, (uint64_t)&v8, (uint64_t)v10);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  if (v7 < 0)
    operator delete(v6[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  siri::dialogengine::FindFileInUpdatableDirs((uint64_t)v12, a1, a3);
  if (*(char *)(a3 + 23) < 0)
  {
    if (*(_QWORD *)(a3 + 8))
      goto LABEL_20;
  }
  else if (*(_BYTE *)(a3 + 23))
  {
    goto LABEL_20;
  }
  siri::dialogengine::FindFileInUpdatableDirs((uint64_t)v10, a1, (uint64_t)&__p);
  if (*(char *)(a3 + 23) < 0)
    operator delete(*(void **)a3);
  *(std::string *)a3 = __p;
LABEL_20:
  if (v11 < 0)
    operator delete(v10[0]);
  if (v13 < 0)
    operator delete(v12[0]);
}

void sub_1BFC23BBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  uint64_t v34;

  if (*(char *)(v33 + 23) < 0)
    operator delete(*(void **)v33);
  if (a33 < 0)
    operator delete(__p);
  if (*(char *)(v34 - 33) < 0)
    operator delete(*(void **)(v34 - 56));
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetDialogMetadataFilename(const void **a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  size_t v7;
  const void *v8;
  _QWORD *v9;
  size_t v10;
  const void *v11;
  uint64_t i;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  std::string **v16;
  char v17;
  __int128 v18;
  _QWORD v19[2];
  char v20;
  _QWORD v21[2];
  char v22;
  __int128 v23;

  *(_QWORD *)&v23 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&v18, "metadata");
  v6 = v19;
  if (*((char *)a1 + 23) >= 0)
    v7 = *((unsigned __int8 *)a1 + 23);
  else
    v7 = (size_t)a1[1];
  std::string::basic_string[abi:ne180100]((uint64_t)v19, v7 + 5);
  if (v20 < 0)
    v6 = (_QWORD *)v19[0];
  if (v7)
  {
    if (*((char *)a1 + 23) >= 0)
      v8 = a1;
    else
      v8 = *a1;
    memmove(v6, v8, v7);
  }
  strcpy((char *)v6 + v7, ".dtag");
  v9 = v21;
  if (*((char *)a2 + 23) >= 0)
    v10 = *((unsigned __int8 *)a2 + 23);
  else
    v10 = (size_t)a2[1];
  std::string::basic_string[abi:ne180100]((uint64_t)v21, v10 + 9);
  if (v22 < 0)
    v9 = (_QWORD *)v21[0];
  if (v10)
  {
    if (*((char *)a2 + 23) >= 0)
      v11 = a2;
    else
      v11 = *a2;
    memmove(v9, v11, v10);
  }
  strcpy((char *)v9 + v10, ".dtag.bin");
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = &v13;
  v17 = 0;
  v13 = (std::string *)operator new(0x48uLL);
  v14 = v13;
  v15 = v13 + 3;
  v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v15, &v18, &v23, v13);
  siri::dialogengine::JoinPath((uint64_t *)&v13, a3);
  v16 = &v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
  for (i = 0; i != -9; i -= 3)
  {
    if (*(&v22 + i * 8) < 0)
      operator delete((void *)v21[i]);
  }
}

void sub_1BFC23E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, char a15)
{
  uint64_t v16;

  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a13);
  v16 = 0;
  while (1)
  {
    if (*(&a15 + v16 + 71) < 0)
      operator delete(*(void **)(&a15 + v16 + 48));
    v16 -= 24;
    if (v16 == -72)
      _Unwind_Resume(a1);
  }
}

void siri::dialogengine::FindDialogMetadataFile(uint64_t *a1@<X0>, const void **a2@<X1>, const void **a3@<X2>, uint64_t a4@<X8>)
{
  void *__p[2];
  char v7;

  siri::dialogengine::GetDialogMetadataFilename(a2, a3, (uint64_t)__p);
  siri::dialogengine::FindFileInUpdatableDirs((uint64_t)__p, a1, a4);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_1BFC23F58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::DialogMetadataDirExists(uint64_t *a1, const void **a2)
{
  size_t v4;
  void **v5;
  const void *v6;
  _BOOL8 v7;
  void *v9[2];
  char v10;
  void *v11[2];
  char v12;
  void *__p[2];
  char v14;
  void *v15[2];
  char v16;

  std::string::basic_string[abi:ne180100]<0>(v11, "metadata");
  if (*((char *)a2 + 23) >= 0)
    v4 = *((unsigned __int8 *)a2 + 23);
  else
    v4 = (size_t)a2[1];
  v5 = v9;
  std::string::basic_string[abi:ne180100]((uint64_t)v9, v4 + 5);
  if (v10 < 0)
    v5 = (void **)v9[0];
  if (v4)
  {
    if (*((char *)a2 + 23) >= 0)
      v6 = a2;
    else
      v6 = *a2;
    memmove(v5, v6, v4);
  }
  strcpy((char *)v5 + v4, ".dtag");
  siri::dialogengine::JoinPath((uint64_t)v11, (uint64_t)v9, (uint64_t)__p);
  siri::dialogengine::FindFileInUpdatableDirs((uint64_t)__p, a1, (uint64_t)v15);
  if (v16 < 0)
  {
    v7 = v15[1] != 0;
    operator delete(v15[0]);
  }
  else
  {
    v7 = v16 != 0;
  }
  if (v14 < 0)
    operator delete(__p[0]);
  if (v10 < 0)
    operator delete(v9[0]);
  if (v12 < 0)
    operator delete(v11[0]);
  return v7;
}

void sub_1BFC2409C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ExecuteCatutil(uint64_t *a1@<X0>, int a2@<W1>, int *a3@<X2>, std::string *a4@<X8>)
{
  char *v7;
  std::string *v8;
  __int128 v9;
  void **v10;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  void *v18[2];
  char v19;
  void *__p[2];
  unsigned __int8 v21;
  std::string v22;
  std::string v23;
  std::string v24;
  __int128 v25;
  std::string::size_type v26;
  void *v27[2];
  unsigned __int8 v28;

  if (a2)
    v7 = " 2>&1 1>/dev/null";
  else
    v7 = "";
  std::string::basic_string[abi:ne180100]<0>(v27, v7);
  siri::dialogengine::GetCatutilPath(&v22);
  v8 = std::string::append(&v22, " ");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v18, " ");
  siri::dialogengine::StringJoinInternal<std::vector<std::string>>((uint64_t)__p, *a1, a1[1], (uint64_t)v18);
  if ((v21 & 0x80u) == 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  if ((v21 & 0x80u) == 0)
    v11 = v21;
  else
    v11 = (std::string::size_type)__p[1];
  v12 = std::string::append(&v23, (const std::string::value_type *)v10, v11);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if ((v28 & 0x80u) == 0)
    v14 = (const std::string::value_type *)v27;
  else
    v14 = (const std::string::value_type *)v27[0];
  if ((v28 & 0x80u) == 0)
    v15 = v28;
  else
    v15 = (std::string::size_type)v27[1];
  v16 = std::string::append(&v24, v14, v15);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v26 = v16->__r_.__value_.__r.__words[2];
  v25 = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if ((char)v21 < 0)
    operator delete(__p[0]);
  if (v19 < 0)
    operator delete(v18[0]);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  siri::dialogengine::ExecuteShellCommand((const char *)&v25, a3, a4);
  if (SHIBYTE(v26) < 0)
    operator delete((void *)v25);
  if ((char)v28 < 0)
    operator delete(v27[0]);
}

void sub_1BFC24284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;

  if (*(char *)(v40 - 57) < 0)
    operator delete(*(void **)(v40 - 80));
  if (*(char *)(v40 - 33) < 0)
    operator delete(*(void **)(v40 - 56));
  _Unwind_Resume(exception_object);
}

std::string *siri::dialogengine::GetTemplateDirEnvVar@<X0>(std::string *a1@<X8>)
{
  unsigned __int8 v3;
  unint64_t v4;
  __int128 **v5;
  _QWORD *v7;
  char v8;
  char **v9;
  char *v10;

  {
    v7 = (_QWORD *)operator new();
    *v7 = 0;
    siri::dialogengine::GetTemplateDirEnvVar(void)::flag = (uint64_t)v7;
  }
  v4 = atomic_load((unint64_t *)siri::dialogengine::GetTemplateDirEnvVar(void)::flag);
  if (v4 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once((std::once_flag::_State_type *)siri::dialogengine::GetTemplateDirEnvVar(void)::flag, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetTemplateDirEnvVar(void)::$_0 &&>>);
  }
  v5 = (__int128 **)siri::dialogengine::GetTemplateDirEnvVar(void)::sEnvVar;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a1, *v5, v5[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v5[1] - (char *)*v5) >> 3));
}

void sub_1BFC24404(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetTemplateDirEnvVar(void)::$_0 &&>>()
{
  char *v0;
  char *v1;
  _QWORD *v2;
  void *__p[2];
  char v4;

  v0 = getenv("DIALOGENGINE_TEMPLATE_DIR");
  if (v0)
    v1 = v0;
  else
    v1 = "";
  std::string::basic_string[abi:ne180100]<0>(__p, v1);
  v2 = (_QWORD *)operator new();
  siri::dialogengine::StringSplit((unsigned __int8 *)__p, ":", v2);
  siri::dialogengine::GetTemplateDirEnvVar(void)::sEnvVar = (uint64_t)v2;
  if (v4 < 0)
    operator delete(__p[0]);
}

void sub_1BFC244A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;

  v16 = v15;
  MEMORY[0x1C3B8D890](v16, 0x20C40960023A9);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::GetUnentitledAppEnvVar(siri::dialogengine *this)
{
  char *v1;
  _BOOL8 v2;
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  v1 = getenv("DIALOGENGINE_UNENTITLED_APP");
  if (!v1)
    return 0;
  std::string::basic_string[abi:ne180100]<0>(__p, v1);
  siri::dialogengine::StringToLower((uint64_t)__p, (uint64_t)v6);
  if (v5 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "true");
  v2 = siri::dialogengine::StringsEqual((uint64_t)v6, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  return v2;
}

void sub_1BFC2458C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetDtdSearchPaths(siri::dialogengine *this@<X0>, std::string *a2@<X8>)
{
  siri::dialogengine *v3;
  uint64_t DtdPathsRef;
  __int128 *v5;
  __int128 *v6;
  std::string::size_type size;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t i;
  std::string::size_type v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  std::string *v20;
  std::string *v21;
  __int128 v22;
  uint64_t v23;
  int v24;
  std::mutex *PathsMutexRef;
  void *v26[2];
  char v27;
  void *__p[2];
  std::string::size_type v29;
  std::string v30;
  std::string __s;
  std::__split_buffer<std::string> __v;

  PathsMutexRef = (std::mutex *)siri::dialogengine::GetPathsMutexRef(this);
  std::mutex::lock(PathsMutexRef);
  DtdPathsRef = siri::dialogengine::GetDtdPathsRef(v3);
  v5 = *(__int128 **)DtdPathsRef;
  v6 = *(__int128 **)(DtdPathsRef + 8);
  if (*(__int128 **)DtdPathsRef == v6)
  {
    siri::dialogengine::GetFrameworkResourcePath(&__s);
    size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __s.__r_.__value_.__l.__size_;
    if (size)
    {
      v8 = *(_QWORD *)(DtdPathsRef + 8);
      if (v8 >= *(_QWORD *)(DtdPathsRef + 16))
      {
        v10 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)DtdPathsRef, (__int128 *)&__s);
      }
      else
      {
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(*(std::string **)(DtdPathsRef + 8), __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
        }
        else
        {
          v9 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
          *(_QWORD *)(v8 + 16) = *((_QWORD *)&__s.__r_.__value_.__l + 2);
          *(_OWORD *)v8 = v9;
        }
        v10 = v8 + 24;
        *(_QWORD *)(DtdPathsRef + 8) = v8 + 24;
      }
      *(_QWORD *)(DtdPathsRef + 8) = v10;
    }
    siri::dialogengine::GetTemplateDirEnvVar(&v30);
    v12 = v30.__r_.__value_.__l.__size_;
    for (i = v30.__r_.__value_.__r.__words[0]; i != v12; i += 24)
    {
      std::string::basic_string[abi:ne180100]<0>(v26, "resources");
      siri::dialogengine::JoinPath(i, (uint64_t)v26, (uint64_t)__p);
      v13 = *(_QWORD *)(DtdPathsRef + 8);
      v14 = *(_QWORD *)(DtdPathsRef + 16);
      if (v13 >= v14)
      {
        v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - *(_QWORD *)DtdPathsRef) >> 3);
        v17 = v16 + 1;
        if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - *(_QWORD *)DtdPathsRef) >> 3);
        if (2 * v18 > v17)
          v17 = 2 * v18;
        if (v18 >= 0x555555555555555)
          v19 = 0xAAAAAAAAAAAAAAALL;
        else
          v19 = v17;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(DtdPathsRef + 16);
        if (v19)
          v20 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(DtdPathsRef + 16, v19);
        else
          v20 = 0;
        v21 = v20 + v16;
        __v.__first_ = v20;
        __v.__begin_ = v21;
        __v.__end_cap_.__value_ = &v20[v19];
        v22 = *(_OWORD *)__p;
        v21->__r_.__value_.__r.__words[2] = v29;
        *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
        __p[1] = 0;
        v29 = 0;
        __p[0] = 0;
        __v.__end_ = v21 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)DtdPathsRef, &__v);
        v23 = *(_QWORD *)(DtdPathsRef + 8);
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        v24 = SHIBYTE(v29);
        *(_QWORD *)(DtdPathsRef + 8) = v23;
        if (v24 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v15 = *(_OWORD *)__p;
        *(_QWORD *)(v13 + 16) = v29;
        *(_OWORD *)v13 = v15;
        __p[1] = 0;
        v29 = 0;
        __p[0] = 0;
        *(_QWORD *)(DtdPathsRef + 8) = v13 + 24;
      }
      if (v27 < 0)
        operator delete(v26[0]);
    }
    __v.__first_ = &v30;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, *(__int128 **)DtdPathsRef, *(__int128 **)(DtdPathsRef + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(DtdPathsRef + 8) - *(_QWORD *)DtdPathsRef) >> 3));
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s.__r_.__value_.__l.__data_);
  }
  else
  {
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, v5, v6, 0xAAAAAAAAAAAAAAABLL * (((char *)v6 - (char *)v5) >> 3));
  }
  std::mutex::unlock(PathsMutexRef);
}

void sub_1BFC24874(_Unwind_Exception *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, void *a8, std::mutex *a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, void *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,std::__split_buffer<std::string> *a23,uint64_t a24,void *__pa,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  *(_QWORD *)(v30 + 8) = v31;
  if (a30 < 0)
    operator delete(__pa);
  std::mutex::unlock(a9);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::GetPathsMutexRef(siri::dialogengine *this)
{
  unsigned __int8 v1;
  unint64_t v2;
  _QWORD *v4;
  char v5;
  char **v6;
  char *v7;

  {
    v4 = (_QWORD *)operator new();
    *v4 = 0;
    siri::dialogengine::GetPathsMutexRef(void)::flag = (uint64_t)v4;
  }
  v2 = atomic_load((unint64_t *)siri::dialogengine::GetPathsMutexRef(void)::flag);
  if (v2 != -1)
  {
    v7 = &v5;
    v6 = &v7;
    std::__call_once((std::once_flag::_State_type *)siri::dialogengine::GetPathsMutexRef(void)::flag, &v6, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetPathsMutexRef(void)::$_0 &&>>);
  }
  return siri::dialogengine::GetPathsMutexRef(void)::pathsMutex;
}

void sub_1BFC249BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::GetDtdPathsRef(siri::dialogengine *this)
{
  unsigned __int8 v1;
  unint64_t v2;
  _QWORD *v4;
  char v5;
  char **v6;
  char *v7;

  {
    v4 = (_QWORD *)operator new();
    *v4 = 0;
    siri::dialogengine::GetDtdPathsRef(void)::flag = (uint64_t)v4;
  }
  v2 = atomic_load((unint64_t *)siri::dialogengine::GetDtdPathsRef(void)::flag);
  if (v2 != -1)
  {
    v7 = &v5;
    v6 = &v7;
    std::__call_once((std::once_flag::_State_type *)siri::dialogengine::GetDtdPathsRef(void)::flag, &v6, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetDtdPathsRef(void)::$_0 &&>>);
  }
  return siri::dialogengine::GetDtdPathsRef(void)::dtdPaths;
}

void sub_1BFC24A80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetDtdPathsRef(void)::$_0 &&>>()
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  result[1] = 0;
  result[2] = 0;
  *result = 0;
  siri::dialogengine::GetDtdPathsRef(void)::dtdPaths = (uint64_t)result;
  return result;
}

double std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetPathsMutexRef(void)::$_0 &&>>()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  *(_QWORD *)v0 = 850045863;
  result = 0.0;
  *(_OWORD *)(v0 + 8) = 0u;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_QWORD *)(v0 + 56) = 0;
  siri::dialogengine::GetPathsMutexRef(void)::pathsMutex = v0;
  return result;
}

void siri::dialogengine::GetGradingAllowListSearchPaths(siri::dialogengine *this@<X0>, std::string *a2@<X8>)
{
  unsigned __int8 v3;
  char *v4;
  char *v5;
  const void *v6;
  size_t v7;
  const char *v8;
  size_t v9;
  siri::dialogengine *v10;
  int v11;
  uint64_t GradingAllowListPathsRef;
  uint64_t v13;
  const char *v14;
  std::string::size_type size;
  const char *v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  std::string *v25;
  std::string *v26;
  __int128 v27;
  uint64_t v28;
  _QWORD *v29;
  unsigned __int8 *v30;
  const char *v31;
  char *v32;
  char *i;
  const char *v34;
  unint64_t v35;
  unint64_t v36;
  __int128 v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  std::string *v43;
  std::string *v44;
  __int128 v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  __int128 *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  BOOL v55;
  const char *v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  std::string *v63;
  std::mutex *PathsMutexRef;
  void *v65[2];
  char v66;
  void *v67[2];
  std::string::size_type v68;
  void *__p[2];
  std::string::size_type v70;
  std::string v71[2];
  std::__split_buffer<std::string> __v;

  PathsMutexRef = (std::mutex *)siri::dialogengine::GetPathsMutexRef(this);
  std::mutex::lock(PathsMutexRef);
  if ((v3 & 1) == 0
  {
    v62 = (_QWORD *)operator new();
    *v62 = 0;
    v62[1] = 0;
    v62[2] = 0;
    siri::dialogengine::GetGradingAllowListSearchPaths(void)::sTemplateDirEnvVar = (uint64_t)v62;
  }
  v4 = getenv("DIALOGENGINE_TEMPLATE_DIR");
  if (v4)
    v5 = v4;
  else
    v5 = "";
  v6 = (const void *)siri::dialogengine::GetGradingAllowListSearchPaths(void)::sTemplateDirEnvVar;
  v7 = strlen(v5);
  v9 = v7;
  if (*(char *)(siri::dialogengine::GetGradingAllowListSearchPaths(void)::sTemplateDirEnvVar + 23) < 0)
  {
    if (v7 != *(_QWORD *)(siri::dialogengine::GetGradingAllowListSearchPaths(void)::sTemplateDirEnvVar + 8))
    {
      v6 = *(const void **)siri::dialogengine::GetGradingAllowListSearchPaths(void)::sTemplateDirEnvVar;
      goto LABEL_14;
    }
    if (v7 == -1)
      std::string::__throw_out_of_range[abi:ne180100]();
    v6 = *(const void **)siri::dialogengine::GetGradingAllowListSearchPaths(void)::sTemplateDirEnvVar;
  }
  else if (v7 != *(unsigned __int8 *)(siri::dialogengine::GetGradingAllowListSearchPaths(void)::sTemplateDirEnvVar + 23))
  {
    goto LABEL_14;
  }
  v10 = (siri::dialogengine *)memcmp(v6, v5, v7);
  if (!(_DWORD)v10)
  {
    v11 = 0;
    goto LABEL_15;
  }
LABEL_14:
  siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Environment variable DIALOGENGINE_TEMPLATE_DIR changed\nOld: %s\nNew: %s", v8, v9, v6, v5);
  v11 = 1;
LABEL_15:
  GradingAllowListPathsRef = siri::dialogengine::GetGradingAllowListPathsRef(v10);
  v13 = GradingAllowListPathsRef;
  if (v11)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)GradingAllowListPathsRef);
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Reset GradingAllowListSearchPaths", v14);
  }
  else if (*(_QWORD *)GradingAllowListPathsRef != *(_QWORD *)(GradingAllowListPathsRef + 8))
  {
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, *(__int128 **)GradingAllowListPathsRef, *(__int128 **)(GradingAllowListPathsRef + 8), 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(_QWORD *)(GradingAllowListPathsRef + 8) - *(_QWORD *)GradingAllowListPathsRef) >> 3));
    goto LABEL_80;
  }
  siri::dialogengine::GetFrameworkResourcePath(v71);
  size = HIBYTE(v71[0].__r_.__value_.__r.__words[2]);
  if ((v71[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v71[0].__r_.__value_.__l.__size_;
  if (size)
  {
    siri::dialogengine::GetDomainTemplateDir((uint64_t)v71, (uint64_t)v67);
    std::string::basic_string[abi:ne180100]<0>(v65, "grading");
    siri::dialogengine::JoinPath((uint64_t)v67, (uint64_t)v65, (uint64_t)__p);
    v17 = *(_QWORD *)(v13 + 16);
    v18 = *(_QWORD *)(v13 + 8);
    if (v18 >= v17)
    {
      v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - *(_QWORD *)v13) >> 3);
      v22 = v21 + 1;
      if (v21 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<BOOL>::__throw_length_error[abi:ne180100]();
      v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - *(_QWORD *)v13) >> 3);
      if (2 * v23 > v22)
        v22 = 2 * v23;
      if (v23 >= 0x555555555555555)
        v24 = 0xAAAAAAAAAAAAAAALL;
      else
        v24 = v22;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)(v13 + 16);
      if (v24)
        v25 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v13 + 16, v24);
      else
        v25 = 0;
      v26 = v25 + v21;
      __v.__first_ = v25;
      __v.__begin_ = v26;
      __v.__end_cap_.__value_ = &v25[v24];
      v27 = *(_OWORD *)__p;
      v26->__r_.__value_.__r.__words[2] = v70;
      *(_OWORD *)&v26->__r_.__value_.__l.__data_ = v27;
      __p[1] = 0;
      v70 = 0;
      __p[0] = 0;
      __v.__end_ = v26 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)v13, &__v);
      v20 = *(_QWORD *)(v13 + 8);
      std::__split_buffer<std::string>::~__split_buffer(&__v);
    }
    else
    {
      v19 = *(_OWORD *)__p;
      *(_QWORD *)(v18 + 16) = v70;
      *(_OWORD *)v18 = v19;
      __p[1] = 0;
      v70 = 0;
      __p[0] = 0;
      v20 = v18 + 24;
      *(_QWORD *)(v13 + 8) = v18 + 24;
    }
    *(_QWORD *)(v13 + 8) = v20;
    if (SHIBYTE(v70) < 0)
      operator delete(__p[0]);
    if (v66 < 0)
      operator delete(v65[0]);
    if (SHIBYTE(v68) < 0)
      operator delete(v67[0]);
    v28 = *(_QWORD *)(v13 + 8);
    v29 = (_QWORD *)(v28 - 24);
    if (*(char *)(v28 - 1) < 0)
      v29 = (_QWORD *)*v29;
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Added to GradingAllowListSearchPaths: %s", v16, v29);
  }
  v30 = (unsigned __int8 *)std::string::basic_string[abi:ne180100]<0>(&__v, v5);
  siri::dialogengine::StringSplit(v30, ":", __p);
  v63 = a2;
  if (SHIBYTE(__v.__end_) < 0)
    operator delete(__v.__first_);
  v32 = (char *)__p[0];
  for (i = (char *)__p[1]; v32 != i; v32 += 24)
  {
    std::string::basic_string[abi:ne180100]<0>(v65, "grading");
    siri::dialogengine::JoinPath((uint64_t)v32, (uint64_t)v65, (uint64_t)v67);
    v35 = *(_QWORD *)(v13 + 8);
    v36 = *(_QWORD *)(v13 + 16);
    if (v35 >= v36)
    {
      v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - *(_QWORD *)v13) >> 3);
      v40 = v39 + 1;
      if (v39 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<BOOL>::__throw_length_error[abi:ne180100]();
      v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - *(_QWORD *)v13) >> 3);
      if (2 * v41 > v40)
        v40 = 2 * v41;
      if (v41 >= 0x555555555555555)
        v42 = 0xAAAAAAAAAAAAAAALL;
      else
        v42 = v40;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)(v13 + 16);
      if (v42)
        v43 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v13 + 16, v42);
      else
        v43 = 0;
      v44 = v43 + v39;
      __v.__first_ = v43;
      __v.__begin_ = v44;
      __v.__end_cap_.__value_ = &v43[v42];
      v45 = *(_OWORD *)v67;
      v44->__r_.__value_.__r.__words[2] = v68;
      *(_OWORD *)&v44->__r_.__value_.__l.__data_ = v45;
      v67[1] = 0;
      v68 = 0;
      v67[0] = 0;
      __v.__end_ = v44 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)v13, &__v);
      v38 = *(_QWORD *)(v13 + 8);
      std::__split_buffer<std::string>::~__split_buffer(&__v);
    }
    else
    {
      v37 = *(_OWORD *)v67;
      *(_QWORD *)(v35 + 16) = v68;
      *(_OWORD *)v35 = v37;
      v67[1] = 0;
      v68 = 0;
      v67[0] = 0;
      v38 = v35 + 24;
      *(_QWORD *)(v13 + 8) = v35 + 24;
    }
    *(_QWORD *)(v13 + 8) = v38;
    if (SHIBYTE(v68) < 0)
      operator delete(v67[0]);
    if (v66 < 0)
      operator delete(v65[0]);
    v46 = *(_QWORD *)(v13 + 8);
    v47 = (_QWORD *)(v46 - 24);
    if (*(char *)(v46 - 1) < 0)
      v47 = (_QWORD *)*v47;
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Added to GradingAllowListSearchPaths: %s", v34, v47);
  }
  v49 = *(__int128 **)v13;
  v48 = *(_QWORD *)(v13 + 8);
  if (*(_QWORD *)v13 != v48)
  {
    v50 = v48 - 24;
    if (v50 > (unint64_t)v49)
    {
      v51 = (unint64_t)v49 + 24;
      do
      {
        v52 = *(_QWORD *)(v51 - 8);
        v53 = *(_OWORD *)(v51 - 24);
        v54 = *(_QWORD *)(v50 + 16);
        *(_OWORD *)(v51 - 24) = *(_OWORD *)v50;
        *(_QWORD *)(v51 - 8) = v54;
        *(_OWORD *)v50 = v53;
        *(_QWORD *)(v50 + 16) = v52;
        v50 -= 24;
        v55 = v51 >= v50;
        v51 += 24;
      }
      while (!v55);
    }
  }
  siri::dialogengine::Log::Info((siri::dialogengine::Log *)"GradingAllowListSearchPaths...", v31);
  v57 = *(uint64_t **)v13;
  v58 = *(uint64_t **)(v13 + 8);
  if (*(uint64_t **)v13 != v58)
  {
    do
    {
      v59 = v57;
      if (*((char *)v57 + 23) < 0)
        v59 = (uint64_t *)*v57;
      siri::dialogengine::Log::Info((siri::dialogengine::Log *)"%s", v56, v59);
      v57 += 3;
    }
    while (v57 != v58);
  }
  v60 = siri::dialogengine::GetGradingAllowListSearchPaths(void)::sTemplateDirEnvVar;
  if (siri::dialogengine::GetGradingAllowListSearchPaths(void)::sTemplateDirEnvVar)
  {
    if (*(char *)(siri::dialogengine::GetGradingAllowListSearchPaths(void)::sTemplateDirEnvVar + 23) < 0)
      operator delete(*(void **)siri::dialogengine::GetGradingAllowListSearchPaths(void)::sTemplateDirEnvVar);
    MEMORY[0x1C3B8D890](v60, 0x1012C40EC159624);
  }
  v61 = (_QWORD *)operator new();
  std::string::basic_string[abi:ne180100]<0>(v61, v5);
  siri::dialogengine::GetGradingAllowListSearchPaths(void)::sTemplateDirEnvVar = (uint64_t)v61;
  v63->__r_.__value_.__l.__size_ = 0;
  v63->__r_.__value_.__r.__words[2] = 0;
  v63->__r_.__value_.__r.__words[0] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v63, *(__int128 **)v13, *(__int128 **)(v13 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v13 + 8) - *(_QWORD *)v13) >> 3));
  __v.__first_ = (std::__split_buffer<std::string>::pointer)__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  if (SHIBYTE(v71[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v71[0].__r_.__value_.__l.__data_);
LABEL_80:
  std::mutex::unlock(PathsMutexRef);
}

void sub_1BFC2514C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::mutex *a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  std::mutex::unlock(a14);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::GetGradingAllowListPathsRef(siri::dialogengine *this)
{
  unsigned __int8 v1;
  unint64_t v2;
  _QWORD *v4;
  char v5;
  char **v6;
  char *v7;

  if ((v1 & 1) == 0
  {
    v4 = (_QWORD *)operator new();
    *v4 = 0;
    siri::dialogengine::GetGradingAllowListPathsRef(void)::flag = (uint64_t)v4;
  }
  v2 = atomic_load((unint64_t *)siri::dialogengine::GetGradingAllowListPathsRef(void)::flag);
  if (v2 != -1)
  {
    v7 = &v5;
    v6 = &v7;
    std::__call_once((std::once_flag::_State_type *)siri::dialogengine::GetGradingAllowListPathsRef(void)::flag, &v6, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetGradingAllowListPathsRef(void)::$_0 &&>>);
  }
  return siri::dialogengine::GetGradingAllowListPathsRef(void)::gradingAllowListPaths;
}

void sub_1BFC25340(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void siri::dialogengine::GetDomainTemplateDir(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *__p[2];
  char v5;

  std::string::basic_string[abi:ne180100]<0>(__p, "Templates");
  siri::dialogengine::JoinPath(a1, (uint64_t)__p, a2);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_1BFC253B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetGradingAllowListPathsRef(void)::$_0 &&>>()
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  result[1] = 0;
  result[2] = 0;
  *result = 0;
  siri::dialogengine::GetGradingAllowListPathsRef(void)::gradingAllowListPaths = (uint64_t)result;
  return result;
}

void siri::dialogengine::GetSchemaSearchPaths(siri::dialogengine *this@<X0>, std::string *a2@<X8>)
{
  std::mutex *PathsMutexRef;
  siri::dialogengine *v4;
  uint64_t SchemaPathsRef;
  __int128 *v6;
  __int128 *v7;
  uint64_t i;
  std::string::size_type size;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  std::string *v17;
  std::string *v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  std::string::size_type v22;
  unint64_t v23;
  unint64_t v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  std::string *v30;
  std::string *v31;
  __int128 v32;
  uint64_t v33;
  int v34;
  std::string *v35;
  std::mutex *v36;
  std::__split_buffer<std::string> __v;
  char v38;
  uint64_t v39;
  uint64_t v40;
  void *v41[2];
  char v42;
  void *__p[2];
  std::string::size_type v44;
  std::string v45;

  PathsMutexRef = (std::mutex *)siri::dialogengine::GetPathsMutexRef(this);
  std::mutex::lock(PathsMutexRef);
  SchemaPathsRef = siri::dialogengine::GetSchemaPathsRef(v4);
  v6 = *(__int128 **)SchemaPathsRef;
  v7 = *(__int128 **)(SchemaPathsRef + 8);
  if (*(__int128 **)SchemaPathsRef == v7)
  {
    v35 = a2;
    v36 = PathsMutexRef;
    siri::dialogengine::GetTemplateDirEnvVar(&v45);
    size = v45.__r_.__value_.__l.__size_;
    for (i = v45.__r_.__value_.__r.__words[0]; i != size; i += 24)
    {
      std::string::basic_string[abi:ne180100]<0>(v41, "schema");
      siri::dialogengine::JoinPath(i, (uint64_t)v41, (uint64_t)__p);
      v10 = *(_QWORD *)(SchemaPathsRef + 8);
      v11 = *(_QWORD *)(SchemaPathsRef + 16);
      if (v10 >= v11)
      {
        v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - *(_QWORD *)SchemaPathsRef) >> 3);
        v14 = v13 + 1;
        if (v13 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *(_QWORD *)SchemaPathsRef) >> 3);
        if (2 * v15 > v14)
          v14 = 2 * v15;
        if (v15 >= 0x555555555555555)
          v16 = 0xAAAAAAAAAAAAAAALL;
        else
          v16 = v14;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(SchemaPathsRef + 16);
        if (v16)
          v17 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(SchemaPathsRef + 16, v16);
        else
          v17 = 0;
        v18 = v17 + v13;
        __v.__first_ = v17;
        __v.__begin_ = v18;
        __v.__end_cap_.__value_ = &v17[v16];
        v19 = *(_OWORD *)__p;
        v18->__r_.__value_.__r.__words[2] = v44;
        *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
        __p[1] = 0;
        v44 = 0;
        __p[0] = 0;
        __v.__end_ = v18 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)SchemaPathsRef, &__v);
        v20 = *(_QWORD *)(SchemaPathsRef + 8);
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        v21 = SHIBYTE(v44);
        *(_QWORD *)(SchemaPathsRef + 8) = v20;
        if (v21 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v12 = *(_OWORD *)__p;
        *(_QWORD *)(v10 + 16) = v44;
        *(_OWORD *)v10 = v12;
        __p[1] = 0;
        v44 = 0;
        __p[0] = 0;
        *(_QWORD *)(SchemaPathsRef + 8) = v10 + 24;
      }
      if (v42 < 0)
        operator delete(v41[0]);
    }
    __v.__first_ = &v45;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
    siri::dialogengine::GetSharedTemplateDir(0, (siri::dialogengine::UpdatableDir *)&__v);
    PathsMutexRef = v36;
    if (SHIBYTE(__v.__end_) < 0)
    {
      std::string::__init_copy_ctor_external(&v45, (const std::string::value_type *)__v.__first_, (std::string::size_type)__v.__begin_);
    }
    else
    {
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = *(_OWORD *)&__v.__first_;
      v45.__r_.__value_.__r.__words[2] = (std::string::size_type)__v.__end_;
    }
    __p[0] = &v40;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    __p[0] = &v39;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    if (v38 < 0)
      operator delete(__v.__end_cap_.__value_);
    if (SHIBYTE(__v.__end_) < 0)
      operator delete(__v.__first_);
    v22 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v22 = v45.__r_.__value_.__l.__size_;
    if (v22)
    {
      std::string::basic_string[abi:ne180100]<0>(v41, "schema");
      siri::dialogengine::JoinPath((uint64_t)&v45, (uint64_t)v41, (uint64_t)__p);
      v23 = *(_QWORD *)(SchemaPathsRef + 16);
      v24 = *(_QWORD *)(SchemaPathsRef + 8);
      if (v24 >= v23)
      {
        v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - *(_QWORD *)SchemaPathsRef) >> 3);
        v27 = v26 + 1;
        if (v26 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *(_QWORD *)SchemaPathsRef) >> 3);
        if (2 * v28 > v27)
          v27 = 2 * v28;
        if (v28 >= 0x555555555555555)
          v29 = 0xAAAAAAAAAAAAAAALL;
        else
          v29 = v27;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(SchemaPathsRef + 16);
        if (v29)
          v30 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(SchemaPathsRef + 16, v29);
        else
          v30 = 0;
        v31 = v30 + v26;
        __v.__first_ = v30;
        __v.__begin_ = v31;
        __v.__end_cap_.__value_ = &v30[v29];
        v32 = *(_OWORD *)__p;
        v31->__r_.__value_.__r.__words[2] = v44;
        *(_OWORD *)&v31->__r_.__value_.__l.__data_ = v32;
        __p[1] = 0;
        v44 = 0;
        __p[0] = 0;
        __v.__end_ = v31 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)SchemaPathsRef, &__v);
        v33 = *(_QWORD *)(SchemaPathsRef + 8);
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        v34 = SHIBYTE(v44);
        *(_QWORD *)(SchemaPathsRef + 8) = v33;
        if (v34 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v25 = *(_OWORD *)__p;
        *(_QWORD *)(v24 + 16) = v44;
        *(_OWORD *)v24 = v25;
        __p[1] = 0;
        v44 = 0;
        __p[0] = 0;
        *(_QWORD *)(SchemaPathsRef + 8) = v24 + 24;
      }
      if (v42 < 0)
        operator delete(v41[0]);
    }
    v35->__r_.__value_.__r.__words[0] = 0;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v35, *(__int128 **)SchemaPathsRef, *(__int128 **)(SchemaPathsRef + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(SchemaPathsRef + 8) - *(_QWORD *)SchemaPathsRef) >> 3));
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
  }
  else
  {
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, v6, v7, 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)v6) >> 3));
  }
  std::mutex::unlock(PathsMutexRef);
}

void sub_1BFC2580C(_Unwind_Exception *a1, std::mutex *a2, std::__split_buffer<std::string> *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::mutex *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__pa,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;

  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a11);
  if (a40 < 0)
    operator delete(__pa);
  if (a34 < 0)
    operator delete(a29);
  if (*(char *)(v40 - 89) < 0)
    operator delete(*(void **)(v40 - 112));
  std::mutex::unlock(a10);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::GetSchemaPathsRef(siri::dialogengine *this)
{
  unsigned __int8 v1;
  unint64_t v2;
  _QWORD *v4;
  char v5;
  char **v6;
  char *v7;

  {
    v4 = (_QWORD *)operator new();
    *v4 = 0;
    siri::dialogengine::GetSchemaPathsRef(void)::flag = (uint64_t)v4;
  }
  v2 = atomic_load((unint64_t *)siri::dialogengine::GetSchemaPathsRef(void)::flag);
  if (v2 != -1)
  {
    v7 = &v5;
    v6 = &v7;
    std::__call_once((std::once_flag::_State_type *)siri::dialogengine::GetSchemaPathsRef(void)::flag, &v6, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetSchemaPathsRef(void)::$_0 &&>>);
  }
  return siri::dialogengine::GetSchemaPathsRef(void)::schemaPaths;
}

void sub_1BFC259A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void siri::dialogengine::GetSharedTemplateDir(siri::dialogengine *this@<X0>, siri::dialogengine::UpdatableDir *a2@<X8>)
{
  int v2;
  void *__p[2];
  char v5;
  std::string v6;
  __int128 v7;
  char v8;

  v2 = (int)this;
  siri::dialogengine::GetFrameworkResourcePath(&v6);
  std::string::basic_string[abi:ne180100]<0>(__p, "Templates");
  siri::dialogengine::JoinPath((uint64_t)&v6, (uint64_t)__p, (uint64_t)&v7);
  if (v5 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if (siri::dialogengine::DirExists((uint64_t *)&v7))
  {
    siri::dialogengine::UpdatableDir::UpdatableDir(a2, &v7, v2);
  }
  else
  {
    std::operator+<char>();
    siri::dialogengine::Log::LogWithLevel((uint64_t)&v6, 3u);
    if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v6.__r_.__value_.__l.__data_);
    *((_OWORD *)a2 + 4) = 0u;
    *((_OWORD *)a2 + 5) = 0u;
    *((_OWORD *)a2 + 2) = 0u;
    *((_OWORD *)a2 + 3) = 0u;
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
  }
  if (v8 < 0)
    operator delete((void *)v7);
}

void sub_1BFC25A98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a21 < 0)
    operator delete(__p);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

_QWORD *std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetSchemaPathsRef(void)::$_0 &&>>()
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  result[1] = 0;
  result[2] = 0;
  *result = 0;
  siri::dialogengine::GetSchemaPathsRef(void)::schemaPaths = (uint64_t)result;
  return result;
}

uint64_t siri::dialogengine::GetTemplateDirsCacheMutex(siri::dialogengine *this)
{
  unsigned __int8 v1;
  unint64_t v2;
  _QWORD *v4;
  char v5;
  char **v6;
  char *v7;

  if ((v1 & 1) == 0
  {
    v4 = (_QWORD *)operator new();
    *v4 = 0;
    siri::dialogengine::GetTemplateDirsCacheMutex(void)::flag = (uint64_t)v4;
  }
  v2 = atomic_load((unint64_t *)siri::dialogengine::GetTemplateDirsCacheMutex(void)::flag);
  if (v2 != -1)
  {
    v7 = &v5;
    v6 = &v7;
    std::__call_once((std::once_flag::_State_type *)siri::dialogengine::GetTemplateDirsCacheMutex(void)::flag, &v6, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetTemplateDirsCacheMutex(void)::$_0 &&>>);
  }
  return siri::dialogengine::GetTemplateDirsCacheMutex(void)::sMutex;
}

void sub_1BFC25BE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetTemplateDirsCacheMutex(void)::$_0 &&>>()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  *(_QWORD *)v0 = 850045863;
  result = 0.0;
  *(_OWORD *)(v0 + 8) = 0u;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_QWORD *)(v0 + 56) = 0;
  siri::dialogengine::GetTemplateDirsCacheMutex(void)::sMutex = v0;
  return result;
}

uint64_t siri::dialogengine::GetTemplateDirsCache(siri::dialogengine *this)
{
  unsigned __int8 v1;
  unint64_t v2;
  _QWORD *v4;
  char v5;
  char **v6;
  char *v7;

  {
    v4 = (_QWORD *)operator new();
    *v4 = 0;
    siri::dialogengine::GetTemplateDirsCache(void)::flag = (uint64_t)v4;
  }
  v2 = atomic_load((unint64_t *)siri::dialogengine::GetTemplateDirsCache(void)::flag);
  if (v2 != -1)
  {
    v7 = &v5;
    v6 = &v7;
    std::__call_once((std::once_flag::_State_type *)siri::dialogengine::GetTemplateDirsCache(void)::flag, &v6, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetTemplateDirsCache(void)::$_0 &&>>);
  }
  return siri::dialogengine::GetTemplateDirsCache(void)::sCache;
}

void sub_1BFC25CF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetTemplateDirsCache(void)::$_0 &&>>()
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  result[2] = 0;
  result[1] = 0;
  *result = result + 1;
  siri::dialogengine::GetTemplateDirsCache(void)::sCache = (uint64_t)result;
  return result;
}

void siri::dialogengine::ClearTemplateDirsCache(siri::dialogengine *this)
{
  std::mutex *TemplateDirsCacheMutex;
  const char *v2;
  siri::dialogengine *v3;
  uint64_t TemplateDirsCache;

  TemplateDirsCacheMutex = (std::mutex *)siri::dialogengine::GetTemplateDirsCacheMutex(this);
  std::mutex::lock(TemplateDirsCacheMutex);
  siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Clearing the TemplateDirs cache", v2);
  TemplateDirsCache = siri::dialogengine::GetTemplateDirsCache(v3);
  std::__tree<std::__value_type<std::pair<std::string,BOOL>,std::vector<siri::dialogengine::UpdatableDir>>,std::__map_value_compare<std::pair<std::string,BOOL>,std::__value_type<std::pair<std::string,BOOL>,std::vector<siri::dialogengine::UpdatableDir>>,std::less<std::pair<std::string,BOOL>>,true>,std::allocator<std::__value_type<std::pair<std::string,BOOL>,std::vector<siri::dialogengine::UpdatableDir>>>>::destroy(*(_QWORD **)(TemplateDirsCache + 8));
  *(_QWORD *)TemplateDirsCache = TemplateDirsCache + 8;
  *(_QWORD *)(TemplateDirsCache + 16) = 0;
  *(_QWORD *)(TemplateDirsCache + 8) = 0;
  std::mutex::unlock(TemplateDirsCacheMutex);
}

void sub_1BFC25DA8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::pair<std::string,BOOL>,std::vector<siri::dialogengine::UpdatableDir>>,std::__map_value_compare<std::pair<std::string,BOOL>,std::__value_type<std::pair<std::string,BOOL>,std::vector<siri::dialogengine::UpdatableDir>>,std::less<std::pair<std::string,BOOL>>,true>,std::allocator<std::__value_type<std::pair<std::string,BOOL>,std::vector<siri::dialogengine::UpdatableDir>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::pair<std::string,BOOL>,std::vector<siri::dialogengine::UpdatableDir>>,std::__map_value_compare<std::pair<std::string,BOOL>,std::__value_type<std::pair<std::string,BOOL>,std::vector<siri::dialogengine::UpdatableDir>>,std::less<std::pair<std::string,BOOL>>,true>,std::allocator<std::__value_type<std::pair<std::string,BOOL>,std::vector<siri::dialogengine::UpdatableDir>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::pair<std::string,BOOL>,std::vector<siri::dialogengine::UpdatableDir>>,std::__map_value_compare<std::pair<std::string,BOOL>,std::__value_type<std::pair<std::string,BOOL>,std::vector<siri::dialogengine::UpdatableDir>>,std::less<std::pair<std::string,BOOL>>,true>,std::allocator<std::__value_type<std::pair<std::string,BOOL>,std::vector<siri::dialogengine::UpdatableDir>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::pair<std::string,BOOL> const,std::vector<siri::dialogengine::UpdatableDir>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::pair<std::string,BOOL> const,std::vector<siri::dialogengine::UpdatableDir>>,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 32);
  std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void siri::dialogengine::GetTemplateDirs(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  siri::dialogengine *v5;
  uint64_t TemplateDirsCache;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  uint64_t *v10;
  int v11;
  std::string::size_type v12;
  char *v13;
  const char *v14;
  std::string *v15;
  void **v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  void *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  void **v27;
  void **v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _BOOL4 v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  __int128 v37;
  void *v38;
  unint64_t v39;
  int v40;
  std::string::size_type v41;
  char *v42;
  const char *v43;
  std::string *v44;
  void **v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  void **v50;
  void **v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 *i;
  __int128 *v56;
  unint64_t v57;
  unint64_t v58;
  __int128 v59;
  void *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  void **v66;
  void **v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  unint64_t v71;
  unint64_t v72;
  __int128 v73;
  void *v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  void **v80;
  void **v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  uint64_t **v85;
  uint64_t *v86;
  uint64_t **v87;
  const void **v88;
  _QWORD *v89;
  std::string *v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  std::mutex *TemplateDirsCacheMutex;
  uint64_t **v95;
  int v96[3];
  __int128 *v97;
  char v98;
  void *__p[2];
  void *v100;
  void *v101[2];
  void *v102;
  __int128 v103;
  void *v104;
  __int128 v105;
  void *v106;
  std::string v107;
  char v108;
  void **v109;
  void **v110;
  void **v111;
  void **v112;
  uint64_t v113;

  v96[0] = a2;
  TemplateDirsCacheMutex = (std::mutex *)siri::dialogengine::GetTemplateDirsCacheMutex((siri::dialogengine *)a1);
  std::mutex::lock(TemplateDirsCacheMutex);
  TemplateDirsCache = siri::dialogengine::GetTemplateDirsCache(v5);
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v107, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v107 = *(std::string *)a1;
  v108 = v96[0];
  v93 = TemplateDirsCache;
  v7 = *(_QWORD *)(TemplateDirsCache + 8);
  v95 = (uint64_t **)(TemplateDirsCache + 8);
  if (!v7)
    goto LABEL_11;
  v8 = TemplateDirsCache + 8;
  do
  {
    v9 = std::less<std::pair<std::string,BOOL>>::operator()[abi:ne180100]((const void **)(v7 + 32), (const void **)&v107.__r_.__value_.__l.__data_);
    v10 = (uint64_t *)(v7 + 8);
    if (!v9)
    {
      v10 = (uint64_t *)v7;
      v8 = v7;
    }
    v7 = *v10;
  }
  while (*v10);
  if ((uint64_t **)v8 == v95
    || std::less<std::pair<std::string,BOOL>>::operator()[abi:ne180100]((const void **)&v107.__r_.__value_.__l.__data_, (const void **)(v8 + 32)))
  {
LABEL_11:
    v11 = SHIBYTE(v107.__r_.__value_.__r.__words[2]);
    v12 = v107.__r_.__value_.__r.__words[0];
    if (v96[0])
      v13 = "true";
    else
      v13 = "false";
    std::string::basic_string[abi:ne180100]<0>(__p, v13);
    v15 = &v107;
    if (v11 < 0)
      v15 = (std::string *)v12;
    if (SHIBYTE(v100) >= 0)
      v16 = __p;
    else
      v16 = (void **)__p[0];
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"TemplateDirs cache does not contain key ['%s', %s]", v14, v15, v16);
    if (SHIBYTE(v100) < 0)
      operator delete(__p[0]);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    v17 = *(unsigned __int8 *)(a1 + 23);
    if ((v17 & 0x80u) != 0)
      v17 = *(_QWORD *)(a1 + 8);
    if (v17)
    {
      siri::dialogengine::UpdatableDir::UpdatableDir((siri::dialogengine::UpdatableDir *)__p, (__int128 *)a1, v96[0]);
      v18 = *(_QWORD *)(a3 + 16);
      v19 = *(_QWORD *)(a3 + 8);
      if (v19 >= v18)
      {
        v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - *(_QWORD *)a3) >> 5);
        v24 = v23 + 1;
        if (v23 + 1 > 0x2AAAAAAAAAAAAAALL)
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - *(_QWORD *)a3) >> 5);
        if (2 * v25 > v24)
          v24 = 2 * v25;
        if (v25 >= 0x155555555555555)
          v26 = 0x2AAAAAAAAAAAAAALL;
        else
          v26 = v24;
        v113 = a3 + 16;
        v27 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<siri::dialogengine::UpdatableDir>>(v26);
        v28 = &v27[12 * v23];
        v109 = v27;
        v110 = v28;
        v112 = &v27[12 * v29];
        v30 = *(_OWORD *)__p;
        v28[2] = v100;
        *(_OWORD *)v28 = v30;
        __p[1] = 0;
        v100 = 0;
        __p[0] = 0;
        v31 = *(_OWORD *)v101;
        v28[5] = v102;
        *(_OWORD *)(v28 + 3) = v31;
        v101[1] = 0;
        v102 = 0;
        v101[0] = 0;
        v28[6] = 0;
        v28[7] = 0;
        v28[8] = 0;
        *((_OWORD *)v28 + 3) = v103;
        v28[8] = v104;
        v103 = 0uLL;
        v104 = 0;
        v28[9] = 0;
        v28[10] = 0;
        v28[11] = 0;
        *(_OWORD *)(v28 + 9) = v105;
        v28[11] = v106;
        v105 = 0uLL;
        v106 = 0;
        v111 = v28 + 12;
        std::vector<siri::dialogengine::UpdatableDir>::__swap_out_circular_buffer((uint64_t *)a3, &v109);
        v22 = *(_QWORD *)(a3 + 8);
        std::__split_buffer<siri::dialogengine::UpdatableDir>::~__split_buffer((uint64_t)&v109);
      }
      else
      {
        v20 = *(_OWORD *)__p;
        *(_QWORD *)(v19 + 16) = v100;
        *(_OWORD *)v19 = v20;
        __p[0] = 0;
        __p[1] = 0;
        v21 = v102;
        *(_OWORD *)(v19 + 24) = *(_OWORD *)v101;
        *(_QWORD *)(v19 + 40) = v21;
        *(_QWORD *)(v19 + 48) = 0;
        v100 = 0;
        v101[0] = 0;
        v101[1] = 0;
        v102 = 0;
        *(_QWORD *)(v19 + 56) = 0;
        *(_QWORD *)(v19 + 64) = 0;
        *(_OWORD *)(v19 + 48) = v103;
        v103 = 0uLL;
        *(_QWORD *)(v19 + 64) = v104;
        *(_QWORD *)(v19 + 72) = 0;
        *(_QWORD *)(v19 + 80) = 0;
        *(_QWORD *)(v19 + 88) = 0;
        *(_OWORD *)(v19 + 72) = v105;
        *(_QWORD *)(v19 + 88) = v106;
        v104 = 0;
        v105 = 0uLL;
        v106 = 0;
        v22 = v19 + 96;
      }
      *(_QWORD *)(a3 + 8) = v22;
      v109 = (void **)&v105;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v109);
      v109 = (void **)&v103;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v109);
      if (SHIBYTE(v102) < 0)
        operator delete(v101[0]);
      if (SHIBYTE(v100) < 0)
        operator delete(__p[0]);
      siri::dialogengine::DirName((std::string *)a1, (uint64_t)&v96[1]);
      v32 = 0;
      do
      {
        std::string::basic_string[abi:ne180100]<0>(__p, off_1E7938330[v32]);
        siri::dialogengine::JoinPath((uint64_t)&v96[1], (uint64_t)__p, (uint64_t)&v109);
        v33 = siri::dialogengine::DirExists((uint64_t *)&v109);
        if (SHIBYTE(v111) < 0)
          operator delete(v109);
        if (SHIBYTE(v100) < 0)
          operator delete(__p[0]);
        v34 = v32++ == 4 || v33;
      }
      while ((v34 & 1) == 0);
      if (v33)
      {
        siri::dialogengine::UpdatableDir::UpdatableDir((siri::dialogengine::UpdatableDir *)__p, (__int128 *)&v96[1], v96[0]);
        v35 = *(_QWORD *)(a3 + 8);
        v36 = *(_QWORD *)(a3 + 16);
        if (v35 >= v36)
        {
          v46 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - *(_QWORD *)a3) >> 5);
          v47 = v46 + 1;
          if (v46 + 1 > 0x2AAAAAAAAAAAAAALL)
            std::vector<BOOL>::__throw_length_error[abi:ne180100]();
          v48 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - *(_QWORD *)a3) >> 5);
          if (2 * v48 > v47)
            v47 = 2 * v48;
          if (v48 >= 0x155555555555555)
            v49 = 0x2AAAAAAAAAAAAAALL;
          else
            v49 = v47;
          v113 = a3 + 16;
          v50 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<siri::dialogengine::UpdatableDir>>(v49);
          v51 = &v50[12 * v46];
          v109 = v50;
          v110 = v51;
          v112 = &v50[12 * v52];
          v53 = *(_OWORD *)__p;
          v51[2] = v100;
          *(_OWORD *)v51 = v53;
          __p[1] = 0;
          v100 = 0;
          __p[0] = 0;
          v54 = *(_OWORD *)v101;
          v51[5] = v102;
          *(_OWORD *)(v51 + 3) = v54;
          v101[1] = 0;
          v102 = 0;
          v101[0] = 0;
          v51[6] = 0;
          v51[7] = 0;
          v51[8] = 0;
          *((_OWORD *)v51 + 3) = v103;
          v51[8] = v104;
          v103 = 0uLL;
          v104 = 0;
          v51[9] = 0;
          v51[10] = 0;
          v51[11] = 0;
          *(_OWORD *)(v51 + 9) = v105;
          v51[11] = v106;
          v105 = 0uLL;
          v106 = 0;
          v111 = v51 + 12;
          std::vector<siri::dialogengine::UpdatableDir>::__swap_out_circular_buffer((uint64_t *)a3, &v109);
          v39 = *(_QWORD *)(a3 + 8);
          std::__split_buffer<siri::dialogengine::UpdatableDir>::~__split_buffer((uint64_t)&v109);
        }
        else
        {
          v37 = *(_OWORD *)__p;
          *(_QWORD *)(v35 + 16) = v100;
          *(_OWORD *)v35 = v37;
          __p[0] = 0;
          __p[1] = 0;
          v38 = v102;
          *(_OWORD *)(v35 + 24) = *(_OWORD *)v101;
          *(_QWORD *)(v35 + 40) = v38;
          *(_QWORD *)(v35 + 48) = 0;
          v100 = 0;
          v101[0] = 0;
          v101[1] = 0;
          v102 = 0;
          *(_QWORD *)(v35 + 56) = 0;
          *(_QWORD *)(v35 + 64) = 0;
          *(_OWORD *)(v35 + 48) = v103;
          v103 = 0uLL;
          *(_QWORD *)(v35 + 64) = v104;
          *(_QWORD *)(v35 + 72) = 0;
          *(_QWORD *)(v35 + 80) = 0;
          *(_QWORD *)(v35 + 88) = 0;
          *(_OWORD *)(v35 + 72) = v105;
          *(_QWORD *)(v35 + 88) = v106;
          v104 = 0;
          v105 = 0uLL;
          v106 = 0;
          v39 = v35 + 96;
        }
        *(_QWORD *)(a3 + 8) = v39;
        v109 = (void **)&v105;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v109);
        v109 = (void **)&v103;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v109);
        if (SHIBYTE(v102) < 0)
          operator delete(v101[0]);
        if (SHIBYTE(v100) < 0)
          operator delete(__p[0]);
      }
      if (v98 < 0)
        operator delete(*(void **)&v96[1]);
    }
    siri::dialogengine::GetTemplateDirEnvVar((std::string *)&v96[1]);
    v56 = v97;
    for (i = *(__int128 **)&v96[1]; i != v56; i = (__int128 *)((char *)i + 24))
    {
      siri::dialogengine::UpdatableDir::UpdatableDir((siri::dialogengine::UpdatableDir *)__p, i, 0);
      v57 = *(_QWORD *)(a3 + 8);
      v58 = *(_QWORD *)(a3 + 16);
      if (v57 >= v58)
      {
        v62 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v57 - *(_QWORD *)a3) >> 5);
        v63 = v62 + 1;
        if (v62 + 1 > 0x2AAAAAAAAAAAAAALL)
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        v64 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v58 - *(_QWORD *)a3) >> 5);
        if (2 * v64 > v63)
          v63 = 2 * v64;
        if (v64 >= 0x155555555555555)
          v65 = 0x2AAAAAAAAAAAAAALL;
        else
          v65 = v63;
        v113 = a3 + 16;
        v66 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<siri::dialogengine::UpdatableDir>>(v65);
        v67 = &v66[12 * v62];
        v109 = v66;
        v110 = v67;
        v112 = &v66[12 * v68];
        v69 = *(_OWORD *)__p;
        v67[2] = v100;
        *(_OWORD *)v67 = v69;
        __p[1] = 0;
        v100 = 0;
        __p[0] = 0;
        v70 = *(_OWORD *)v101;
        v67[5] = v102;
        *(_OWORD *)(v67 + 3) = v70;
        v101[1] = 0;
        v102 = 0;
        v101[0] = 0;
        v67[6] = 0;
        v67[7] = 0;
        v67[8] = 0;
        *((_OWORD *)v67 + 3) = v103;
        v67[8] = v104;
        v103 = 0uLL;
        v104 = 0;
        v67[9] = 0;
        v67[10] = 0;
        v67[11] = 0;
        *(_OWORD *)(v67 + 9) = v105;
        v67[11] = v106;
        v105 = 0uLL;
        v106 = 0;
        v111 = v67 + 12;
        std::vector<siri::dialogengine::UpdatableDir>::__swap_out_circular_buffer((uint64_t *)a3, &v109);
        v61 = *(_QWORD *)(a3 + 8);
        std::__split_buffer<siri::dialogengine::UpdatableDir>::~__split_buffer((uint64_t)&v109);
      }
      else
      {
        v59 = *(_OWORD *)__p;
        *(_QWORD *)(v57 + 16) = v100;
        *(_OWORD *)v57 = v59;
        __p[1] = 0;
        v100 = 0;
        __p[0] = 0;
        v60 = v102;
        *(_OWORD *)(v57 + 24) = *(_OWORD *)v101;
        *(_QWORD *)(v57 + 40) = v60;
        *(_QWORD *)(v57 + 48) = 0;
        v101[1] = 0;
        v102 = 0;
        v101[0] = 0;
        *(_QWORD *)(v57 + 56) = 0;
        *(_QWORD *)(v57 + 64) = 0;
        *(_OWORD *)(v57 + 48) = v103;
        v103 = 0uLL;
        *(_QWORD *)(v57 + 64) = v104;
        *(_QWORD *)(v57 + 72) = 0;
        v104 = 0;
        *(_QWORD *)(v57 + 80) = 0;
        *(_QWORD *)(v57 + 88) = 0;
        *(_OWORD *)(v57 + 72) = v105;
        *(_QWORD *)(v57 + 88) = v106;
        v105 = 0uLL;
        v106 = 0;
        v61 = v57 + 96;
      }
      *(_QWORD *)(a3 + 8) = v61;
      v109 = (void **)&v105;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v109);
      v109 = (void **)&v103;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v109);
      if (SHIBYTE(v102) < 0)
        operator delete(v101[0]);
      if (SHIBYTE(v100) < 0)
        operator delete(__p[0]);
    }
    __p[0] = &v96[1];
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    siri::dialogengine::GetSharedTemplateDir((siri::dialogengine *)v96[0], (siri::dialogengine::UpdatableDir *)__p);
    v71 = *(_QWORD *)(a3 + 16);
    v72 = *(_QWORD *)(a3 + 8);
    if (v72 >= v71)
    {
      v76 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v72 - *(_QWORD *)a3) >> 5);
      v77 = v76 + 1;
      if (v76 + 1 > 0x2AAAAAAAAAAAAAALL)
        std::vector<BOOL>::__throw_length_error[abi:ne180100]();
      v78 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v71 - *(_QWORD *)a3) >> 5);
      if (2 * v78 > v77)
        v77 = 2 * v78;
      if (v78 >= 0x155555555555555)
        v79 = 0x2AAAAAAAAAAAAAALL;
      else
        v79 = v77;
      v113 = a3 + 16;
      v80 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<siri::dialogengine::UpdatableDir>>(v79);
      v81 = &v80[12 * v76];
      v109 = v80;
      v110 = v81;
      v112 = &v80[12 * v82];
      v83 = *(_OWORD *)__p;
      v81[2] = v100;
      *(_OWORD *)v81 = v83;
      __p[1] = 0;
      v100 = 0;
      __p[0] = 0;
      v84 = *(_OWORD *)v101;
      v81[5] = v102;
      *(_OWORD *)(v81 + 3) = v84;
      v101[1] = 0;
      v102 = 0;
      v101[0] = 0;
      v81[6] = 0;
      v81[7] = 0;
      v81[8] = 0;
      *((_OWORD *)v81 + 3) = v103;
      v81[8] = v104;
      v103 = 0uLL;
      v104 = 0;
      v81[9] = 0;
      v81[10] = 0;
      v81[11] = 0;
      *(_OWORD *)(v81 + 9) = v105;
      v81[11] = v106;
      v105 = 0uLL;
      v106 = 0;
      v111 = v81 + 12;
      std::vector<siri::dialogengine::UpdatableDir>::__swap_out_circular_buffer((uint64_t *)a3, &v109);
      v75 = *(_QWORD *)(a3 + 8);
      std::__split_buffer<siri::dialogengine::UpdatableDir>::~__split_buffer((uint64_t)&v109);
    }
    else
    {
      v73 = *(_OWORD *)__p;
      *(_QWORD *)(v72 + 16) = v100;
      *(_OWORD *)v72 = v73;
      __p[0] = 0;
      __p[1] = 0;
      v74 = v102;
      *(_OWORD *)(v72 + 24) = *(_OWORD *)v101;
      *(_QWORD *)(v72 + 40) = v74;
      *(_QWORD *)(v72 + 48) = 0;
      v100 = 0;
      v101[0] = 0;
      v101[1] = 0;
      v102 = 0;
      *(_QWORD *)(v72 + 56) = 0;
      *(_QWORD *)(v72 + 64) = 0;
      *(_OWORD *)(v72 + 48) = v103;
      v103 = 0uLL;
      *(_QWORD *)(v72 + 64) = v104;
      *(_QWORD *)(v72 + 72) = 0;
      *(_QWORD *)(v72 + 80) = 0;
      *(_QWORD *)(v72 + 88) = 0;
      *(_OWORD *)(v72 + 72) = v105;
      *(_QWORD *)(v72 + 88) = v106;
      v104 = 0;
      v105 = 0uLL;
      v106 = 0;
      v75 = v72 + 96;
    }
    *(_QWORD *)(a3 + 8) = v75;
    v109 = (void **)&v105;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v109);
    v109 = (void **)&v103;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v109);
    if (SHIBYTE(v102) < 0)
      operator delete(v101[0]);
    if (SHIBYTE(v100) < 0)
      operator delete(__p[0]);
    v85 = v95;
    v86 = *v95;
    v87 = v95;
    if (*v95)
    {
      while (1)
      {
        while (1)
        {
          v87 = (uint64_t **)v86;
          v88 = (const void **)(v86 + 4);
          if (!std::less<std::pair<std::string,BOOL>>::operator()[abi:ne180100]((const void **)&v107.__r_.__value_.__l.__data_, (const void **)v86 + 4))break;
          v86 = *v87;
          v85 = v87;
          if (!*v87)
            goto LABEL_107;
        }
        if (!std::less<std::pair<std::string,BOOL>>::operator()[abi:ne180100](v88, (const void **)&v107.__r_.__value_.__l.__data_))break;
        v85 = v87 + 1;
        v86 = v87[1];
        if (!v86)
          goto LABEL_107;
      }
      v89 = v87;
    }
    else
    {
LABEL_107:
      v89 = operator new(0x58uLL);
      __p[0] = v89;
      __p[1] = v95;
      LOBYTE(v100) = 0;
      v90 = (std::string *)(v89 + 4);
      if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v90, v107.__r_.__value_.__l.__data_, v107.__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)&v90->__r_.__value_.__l.__data_ = *(_OWORD *)&v107.__r_.__value_.__l.__data_;
        v89[6] = *((_QWORD *)&v107.__r_.__value_.__l + 2);
      }
      *((_BYTE *)v89 + 56) = v108;
      v89[9] = 0;
      v89[10] = 0;
      v89[8] = 0;
      LOBYTE(v100) = 1;
      *v89 = 0;
      v89[1] = 0;
      v89[2] = v87;
      *v85 = v89;
      v91 = **(_QWORD **)v93;
      v92 = v89;
      if (v91)
      {
        *(_QWORD *)v93 = v91;
        v92 = *v85;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v93 + 8), v92);
      ++*(_QWORD *)(v93 + 16);
      __p[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::pair<std::string,BOOL>,std::vector<siri::dialogengine::UpdatableDir>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,BOOL>,std::vector<siri::dialogengine::UpdatableDir>>,void *>>>>::reset[abi:ne180100]((uint64_t)__p);
    }
    if (v89 + 8 != (_QWORD *)a3)
      std::vector<siri::dialogengine::UpdatableDir>::__assign_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>((uint64_t)(v89 + 8), *(std::string **)a3, *(std::string **)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 5));
  }
  else
  {
    v40 = SHIBYTE(v107.__r_.__value_.__r.__words[2]);
    v41 = v107.__r_.__value_.__r.__words[0];
    if (v96[0])
      v42 = "true";
    else
      v42 = "false";
    std::string::basic_string[abi:ne180100]<0>(__p, v42);
    v44 = &v107;
    if (v40 < 0)
      v44 = (std::string *)v41;
    if (SHIBYTE(v100) >= 0)
      v45 = __p;
    else
      v45 = (void **)__p[0];
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Using TemplateDirs cache value for key ['%s', %s]", v43, v44, v45);
    if (SHIBYTE(v100) < 0)
      operator delete(__p[0]);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    std::vector<siri::dialogengine::UpdatableDir>::__init_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>((_QWORD *)a3, *(_QWORD *)(v8 + 64), *(_QWORD *)(v8 + 72), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v8 + 72) - *(_QWORD *)(v8 + 64)) >> 5));
  }
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v107.__r_.__value_.__l.__data_);
  std::mutex::unlock(TemplateDirsCacheMutex);
}

void sub_1BFC26998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::mutex *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a42 < 0)
    operator delete(__p);
  std::mutex::unlock(a13);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::pair<std::string,BOOL>,std::vector<siri::dialogengine::UpdatableDir>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,BOOL>,std::vector<siri::dialogengine::UpdatableDir>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::pair<std::string,BOOL> const,std::vector<siri::dialogengine::UpdatableDir>>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

BOOL std::less<std::pair<std::string,BOOL>>::operator()[abi:ne180100](const void **a1, const void **a2)
{
  int v4;
  int v5;
  size_t v6;
  const void *v7;
  size_t v8;
  const void *v9;
  size_t v10;
  int v11;
  BOOL v12;
  int v14;
  BOOL v15;

  v4 = *((char *)a2 + 23);
  v5 = *((char *)a1 + 23);
  if (v5 >= 0)
    v6 = *((unsigned __int8 *)a1 + 23);
  else
    v6 = (size_t)a1[1];
  if (v5 >= 0)
    v7 = a1;
  else
    v7 = *a1;
  if (v4 >= 0)
    v8 = *((unsigned __int8 *)a2 + 23);
  else
    v8 = (size_t)a2[1];
  if (v4 >= 0)
    v9 = a2;
  else
    v9 = *a2;
  if (v8 >= v6)
    v10 = v6;
  else
    v10 = v8;
  v11 = memcmp(v7, v9, v10);
  v12 = v6 < v8;
  if (v11)
    v12 = v11 < 0;
  if (v12)
    return 1;
  v14 = memcmp(v9, v7, v10);
  v15 = v8 < v6;
  if (v14)
    v15 = v14 < 0;
  return !v15 && *((unsigned __int8 *)a1 + 24) < *((unsigned __int8 *)a2 + 24);
}

uint64_t *std::vector<siri::dialogengine::UpdatableDir>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v5 = a2[1];
  }
  else
  {
    do
    {
      v5 = v4 - 96;
      v6 = *(_OWORD *)(v3 - 96);
      *(_QWORD *)(v4 - 80) = *(_QWORD *)(v3 - 80);
      *(_OWORD *)(v4 - 96) = v6;
      *(_QWORD *)(v3 - 88) = 0;
      *(_QWORD *)(v3 - 80) = 0;
      *(_QWORD *)(v3 - 96) = 0;
      v7 = *(_OWORD *)(v3 - 72);
      *(_QWORD *)(v4 - 56) = *(_QWORD *)(v3 - 56);
      *(_OWORD *)(v4 - 72) = v7;
      *(_QWORD *)(v3 - 64) = 0;
      *(_QWORD *)(v3 - 56) = 0;
      *(_QWORD *)(v3 - 72) = 0;
      *(_QWORD *)(v4 - 48) = 0;
      *(_QWORD *)(v4 - 40) = 0;
      *(_QWORD *)(v4 - 32) = 0;
      *(_OWORD *)(v4 - 48) = *(_OWORD *)(v3 - 48);
      *(_QWORD *)(v4 - 32) = *(_QWORD *)(v3 - 32);
      *(_QWORD *)(v3 - 48) = 0;
      *(_QWORD *)(v3 - 40) = 0;
      *(_QWORD *)(v3 - 32) = 0;
      *(_QWORD *)(v4 - 24) = 0;
      *(_QWORD *)(v4 - 16) = 0;
      *(_QWORD *)(v4 - 8) = 0;
      *(_OWORD *)(v4 - 24) = *(_OWORD *)(v3 - 24);
      *(_QWORD *)(v4 - 8) = *(_QWORD *)(v3 - 8);
      *(_QWORD *)(v3 - 24) = 0;
      *(_QWORD *)(v3 - 16) = 0;
      *(_QWORD *)(v3 - 8) = 0;
      v4 -= 96;
      v3 -= 96;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  v8 = *result;
  *result = v5;
  a2[1] = v8;
  v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<siri::dialogengine::UpdatableDir>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 96;
    std::allocator<siri::dialogengine::UpdatableDir>::destroy[abi:ne180100](i - 96);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void siri::dialogengine::ClearSearchPathCaches(siri::dialogengine *this)
{
  uint64_t *SchemaPathsRef;
  siri::dialogengine *v2;
  uint64_t *DtdPathsRef;
  siri::dialogengine *v4;
  uint64_t *GradingAllowListPathsRef;

  SchemaPathsRef = (uint64_t *)siri::dialogengine::GetSchemaPathsRef(this);
  std::vector<std::string>::__clear[abi:ne180100](SchemaPathsRef);
  DtdPathsRef = (uint64_t *)siri::dialogengine::GetDtdPathsRef(v2);
  std::vector<std::string>::__clear[abi:ne180100](DtdPathsRef);
  GradingAllowListPathsRef = (uint64_t *)siri::dialogengine::GetGradingAllowListPathsRef(v4);
  std::vector<std::string>::__clear[abi:ne180100](GradingAllowListPathsRef);
}

uint64_t siri::dialogengine::DialogState::usageCount(siri::dialogengine::DialogState *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v4;
  siri::dialogengine::Context *v5;
  uint64_t CatCount;
  std::string __p;

  v4 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  CatCount = siri::dialogengine::getCatCount(this, v5);
  siri::dialogengine::VariableNumber::VariableNumber(v4, &__p, (double)(unint64_t)CatCount);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v4;
}

void sub_1BFC26DA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1C3B8D890](v15, 0x10B3C4030AE2ACELL);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::getCatCount(siri::dialogengine *this, siri::dialogengine::Context *a2)
{
  uint64_t v2;
  uint64_t v4;
  char *v5[3];
  char *v6[6];

  siri::dialogengine::Context::GetUseCaseState(this, (const char *)a2, (uint64_t)&v4);
  v2 = v4;
  std::__tree<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>>>::destroy((_QWORD *)v6[4]);
  std::__tree<std::string>::destroy((uint64_t)v6, v6[1]);
  std::__tree<std::string>::destroy((uint64_t)v5, v5[1]);
  return v2 + 1;
}

uint64_t siri::dialogengine::DialogState::minsSinceLastUse(siri::dialogengine::DialogState *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v4;
  double v5;
  std::string __p;

  v4 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::dialogengine::getTimeDiff(this, 0, 60.0);
  siri::dialogengine::VariableNumber::VariableNumber(v4, &__p, v5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v4;
}

void sub_1BFC26EBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1C3B8D890](v15, 0x10B3C4030AE2ACELL);
  _Unwind_Resume(a1);
}

void siri::dialogengine::getTimeDiff(siri::dialogengine *this, siri::dialogengine::Context *a2, double a3)
{
  double v4;
  double v5;
  _BYTE v6[8];
  double v7;
  char *v8[3];
  char *v9[6];

  if ((_DWORD)a2)
  {
    siri::dialogengine::Context::GetFamilyState(this, (const char *)a2);
    v5 = v4;
  }
  else
  {
    siri::dialogengine::Context::GetUseCaseState(this, (const char *)a2, (uint64_t)v6);
    v5 = v7;
    std::__tree<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>>>::destroy((_QWORD *)v9[4]);
    std::__tree<std::string>::destroy((uint64_t)v9, v9[1]);
    std::__tree<std::string>::destroy((uint64_t)v8, v8[1]);
  }
  if (v5 != 0.0)
    siri::dialogengine::Context::GetCurrentTime(this);
}

uint64_t siri::dialogengine::DialogState::hoursSinceLastUse(siri::dialogengine::DialogState *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v4;
  double v5;
  std::string __p;

  v4 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::dialogengine::getTimeDiff(this, 0, 3600.0);
  siri::dialogengine::VariableNumber::VariableNumber(v4, &__p, v5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v4;
}

void sub_1BFC27018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1C3B8D890](v15, 0x10B3C4030AE2ACELL);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogState::daysSinceLastUse(siri::dialogengine::DialogState *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v4;
  double v5;
  std::string __p;

  v4 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::dialogengine::getTimeDiff(this, 0, 86400.0);
  siri::dialogengine::VariableNumber::VariableNumber(v4, &__p, v5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v4;
}

void sub_1BFC270D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1C3B8D890](v15, 0x10B3C4030AE2ACELL);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogState::isFirstTime(siri::dialogengine::DialogState *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v4;
  siri::dialogengine::Context *v5;
  char v6;
  std::string __p;

  v4 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  v6 = siri::dialogengine::getCatCount(this, v5) == 1;
  siri::dialogengine::VariableBoolean::VariableBoolean(v4, &__p, v6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v4;
}

void sub_1BFC27194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1C3B8D890](v15, 0x10B3C408E4F17DDLL);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogState::isSecondTime(siri::dialogengine::DialogState *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v4;
  siri::dialogengine::Context *v5;
  char v6;
  std::string __p;

  v4 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  v6 = siri::dialogengine::getCatCount(this, v5) == 2;
  siri::dialogengine::VariableBoolean::VariableBoolean(v4, &__p, v6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v4;
}

void sub_1BFC27250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1C3B8D890](v15, 0x10B3C408E4F17DDLL);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogState::isFirstTimeToday(siri::dialogengine::DialogState *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v5;
  const char *v6;
  const char *v7;
  std::string *v8;
  const char *v9;
  char v10;
  std::string *p_p;
  const siri::dialogengine::TimeStamp *v12;
  uint64_t ICUDifferenceInDays;
  int v14;
  const char *v15;
  char *v16;
  const char *v17;
  void *v18;
  uint64_t v19;
  uint64_t v21;
  std::string __p;
  void *v23;
  std::string v24;
  _BYTE v25[8];
  double v26;
  char *v27[3];
  char *v28[6];

  siri::dialogengine::Context::GetUseCaseState(this, (const char *)a2, (uint64_t)v25);
  v5 = (uint64_t)v26;
  siri::dialogengine::Log::Info((siri::dialogengine::Log *)"(DialogState::isFirstTimeToday) Last usage secsSinceEpoch: %ld", v6, (uint64_t)v26);
  if (v5 <= 0)
  {
    v10 = 1;
LABEL_16:
    v16 = "true";
    goto LABEL_19;
  }
  siri::dialogengine::GetNowTimeStamp(this, a2, &v23);
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v24;
  else
    v8 = (std::string *)v24.__r_.__value_.__r.__words[0];
  siri::dialogengine::Log::Info((siri::dialogengine::Log *)"(DialogState::isFirstTimeToday) Now secsSinceEpoch: %ld / timeZone: [%s]", v7, v23, v8);
  v21 = v5;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
    v5 = v21;
  }
  else
  {
    __p = v24;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  siri::dialogengine::Log::Info((siri::dialogengine::Log *)"(DialogState::isFirstTimeToday) Last usage secsSinceEpoch: %ld / timeZone: [%s]", v9, v5, p_p);
  ICUDifferenceInDays = siri::dialogengine::GetICUDifferenceInDays((siri::dialogengine *)&v21, (const siri::dialogengine::TimeStamp *)&v23, v12);
  v14 = ICUDifferenceInDays;
  siri::dialogengine::Log::Info((siri::dialogengine::Log *)"(DialogState::isFirstTimeToday) Difference in days: %d", v15, ICUDifferenceInDays);
  v10 = v14 != 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v24.__r_.__value_.__l.__data_);
    if (v14)
      goto LABEL_16;
  }
  else if (v14)
  {
    goto LABEL_16;
  }
  v16 = "false";
LABEL_19:
  std::string::basic_string[abi:ne180100]<0>(&v23, v16);
  if (v24.__r_.__value_.__s.__data_[15] >= 0)
    v18 = &v23;
  else
    v18 = v23;
  siri::dialogengine::Log::Info((siri::dialogengine::Log *)"(DialogState::isFirstTimeToday) Result: %s", v17, v18);
  if (v24.__r_.__value_.__s.__data_[15] < 0)
    operator delete(v23);
  v19 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&v23, "");
  siri::dialogengine::VariableBoolean::VariableBoolean(v19, (const std::string *)&v23, v10);
  if (v24.__r_.__value_.__s.__data_[15] < 0)
    operator delete(v23);
  std::__tree<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>>>::destroy((_QWORD *)v28[4]);
  std::__tree<std::string>::destroy((uint64_t)v28, v28[1]);
  std::__tree<std::string>::destroy((uint64_t)v27, v27[1]);
  return v19;
}

void sub_1BFC27490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, void *__p,int a21,__int16 a22,char a23,char a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a28 < 0)
    operator delete(__p);
  siri::dialogengine::DialogStateUseCase::~DialogStateUseCase((siri::dialogengine::DialogStateUseCase *)&a29);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogState::isUnfamiliar(siri::dialogengine::DialogState *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v4;
  siri::dialogengine::Context *v5;
  char v6;
  std::string __p;

  v4 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  v6 = (unint64_t)siri::dialogengine::getCatCount(this, v5) < 6;
  siri::dialogengine::VariableBoolean::VariableBoolean(v4, &__p, v6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v4;
}

void sub_1BFC275B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1C3B8D890](v15, 0x10B3C408E4F17DDLL);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogState::isFamiliar(siri::dialogengine::DialogState *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v4;
  siri::dialogengine::Context *v5;
  char v6;
  std::string __p;

  v4 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  v6 = (unint64_t)siri::dialogengine::getCatCount(this, v5) > 5;
  siri::dialogengine::VariableBoolean::VariableBoolean(v4, &__p, v6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v4;
}

void sub_1BFC27670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1C3B8D890](v15, 0x10B3C408E4F17DDLL);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogState::isVeryFamiliar(siri::dialogengine::DialogState *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v4;
  siri::dialogengine::Context *v5;
  char v6;
  std::string __p;

  v4 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  v6 = (unint64_t)siri::dialogengine::getCatCount(this, v5) > 0x14;
  siri::dialogengine::VariableBoolean::VariableBoolean(v4, &__p, v6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v4;
}

void sub_1BFC2772C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1C3B8D890](v15, 0x10B3C408E4F17DDLL);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogState::familyUsageCount(siri::dialogengine::DialogState *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v4;
  const char *v5;
  uint64_t FamilyState;
  std::string __p;

  v4 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  FamilyState = siri::dialogengine::Context::GetFamilyState(this, v5);
  siri::dialogengine::VariableNumber::VariableNumber(v4, &__p, (double)(unint64_t)(FamilyState + 1));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v4;
}

void sub_1BFC277E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1C3B8D890](v15, 0x10B3C4030AE2ACELL);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogState::familyMinsSinceLastUse(siri::dialogengine::DialogState *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v4;
  double v5;
  std::string __p;

  v4 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::dialogengine::getTimeDiff(this, (siri::dialogengine::Context *)1, 60.0);
  siri::dialogengine::VariableNumber::VariableNumber(v4, &__p, v5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v4;
}

void sub_1BFC278A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1C3B8D890](v15, 0x10B3C4030AE2ACELL);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogState::familyHoursSinceLastUse(siri::dialogengine::DialogState *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v4;
  double v5;
  std::string __p;

  v4 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::dialogengine::getTimeDiff(this, (siri::dialogengine::Context *)1, 3600.0);
  siri::dialogengine::VariableNumber::VariableNumber(v4, &__p, v5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v4;
}

void sub_1BFC27968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1C3B8D890](v15, 0x10B3C4030AE2ACELL);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogState::familyDaysSinceLastUse(siri::dialogengine::DialogState *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v4;
  double v5;
  std::string __p;

  v4 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::dialogengine::getTimeDiff(this, (siri::dialogengine::Context *)1, 86400.0);
  siri::dialogengine::VariableNumber::VariableNumber(v4, &__p, v5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v4;
}

void sub_1BFC27A28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1C3B8D890](v15, 0x10B3C4030AE2ACELL);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogState::isUnfamiliarWithFamily(siri::dialogengine::DialogState *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v4;
  const char *v5;
  char v6;
  std::string __p;

  v4 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  v6 = (unint64_t)(siri::dialogengine::Context::GetFamilyState(this, v5) + 1) < 6;
  siri::dialogengine::VariableBoolean::VariableBoolean(v4, &__p, v6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v4;
}

void sub_1BFC27AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1C3B8D890](v15, 0x10B3C408E4F17DDLL);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogState::isFamiliarWithFamily(siri::dialogengine::DialogState *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v4;
  const char *v5;
  char v6;
  std::string __p;

  v4 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  v6 = (unint64_t)(siri::dialogengine::Context::GetFamilyState(this, v5) - 5) < 0xFFFFFFFFFFFFFFFALL;
  siri::dialogengine::VariableBoolean::VariableBoolean(v4, &__p, v6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v4;
}

void sub_1BFC27BA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1C3B8D890](v15, 0x10B3C408E4F17DDLL);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogState::isVeryFamiliarWithFamily(siri::dialogengine::DialogState *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v4;
  const char *v5;
  char v6;
  std::string __p;

  v4 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  v6 = (unint64_t)(siri::dialogengine::Context::GetFamilyState(this, v5) - 20) < 0xFFFFFFFFFFFFFFEBLL;
  siri::dialogengine::VariableBoolean::VariableBoolean(v4, &__p, v6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v4;
}

void sub_1BFC27C68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1C3B8D890](v15, 0x10B3C408E4F17DDLL);
  _Unwind_Resume(a1);
}

void InitDefaultsscc_info_Group_PatternSchemaBinary_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.cc", a4);
  siri::dialogengine::PatternSchemaBinary::Group::Group((siri::dialogengine::PatternSchemaBinary::Group *)&siri::dialogengine::PatternSchemaBinary::_Group_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&siri::dialogengine::PatternSchemaBinary::_Group_default_instance_, v4);
  qword_1EF584780 = (uint64_t)&siri::dialogengine::PatternSchemaBinary::_Usage_default_instance_;
  unk_1EF584788 = &siri::dialogengine::PatternSchemaBinary::_VisualComponentsCombination_default_instance_;
}

void InitDefaultsscc_info_PatternComponent_PatternSchemaBinary_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.cc", a4);
  siri::dialogengine::PatternSchemaBinary::PatternComponent::PatternComponent((siri::dialogengine::PatternSchemaBinary::PatternComponent *)&siri::dialogengine::PatternSchemaBinary::_PatternComponent_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&siri::dialogengine::PatternSchemaBinary::_PatternComponent_default_instance_, v4);
  qword_1EF5847E0 = (uint64_t)&siri::dialogengine::PatternSchemaBinary::_ModeConfiguration_default_instance_;
  unk_1EF5847E8 = &siri::dialogengine::PatternSchemaBinary::_ModeConfiguration_default_instance_;
  qword_1EF5847F0 = (uint64_t)&siri::dialogengine::PatternSchemaBinary::_Usage_default_instance_;
}

void InitDefaultsscc_info_ModeConfiguration_PatternSchemaBinary_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.cc", a4);
  siri::dialogengine::PatternSchemaBinary::ModeConfiguration::ModeConfiguration((siri::dialogengine::PatternSchemaBinary::ModeConfiguration *)&siri::dialogengine::PatternSchemaBinary::_ModeConfiguration_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&siri::dialogengine::PatternSchemaBinary::_ModeConfiguration_default_instance_, v4);
  qword_1EF5849C8 = (uint64_t)&siri::dialogengine::PatternSchemaBinary::_Usage_default_instance_;
}

void InitDefaultsscc_info_Override_PatternSchemaBinary_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.cc", a4);
  siri::dialogengine::PatternSchemaBinary::Override::Override((siri::dialogengine::PatternSchemaBinary::Override *)&siri::dialogengine::PatternSchemaBinary::_Override_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&siri::dialogengine::PatternSchemaBinary::_Override_default_instance_, v4);
  qword_1EF584A00 = (uint64_t)&siri::dialogengine::PatternSchemaBinary::_Usage_default_instance_;
}

siri::dialogengine::PatternSchemaBinary::Override *siri::dialogengine::PatternSchemaBinary::Override::Override(siri::dialogengine::PatternSchemaBinary::Override *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)this = &off_1E7938B68;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  if (atomic_load(scc_info_Override_PatternSchemaBinary_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Override_PatternSchemaBinary_2eproto);
  *((_QWORD *)this + 6) = 0;
  return this;
}

void sub_1BFC27EA4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v1 + 24);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

void siri::dialogengine::PatternSchemaBinary::Override::~Override(siri::dialogengine::PatternSchemaBinary::Override *this)
{
  siri::dialogengine::PatternSchemaBinary::Override::~Override(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E7938B68;
  if (this != (siri::dialogengine::PatternSchemaBinary::Override *)&siri::dialogengine::PatternSchemaBinary::_Override_default_instance_)
  {
    v2 = *((_QWORD *)this + 6);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField((char *)this + 24);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *siri::dialogengine::PatternSchemaBinary::Override::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "siri.dialogengine.PatternSchemaBinary.Override");
}

siri::dialogengine::PatternSchemaBinary::Override *siri::dialogengine::PatternSchemaBinary::Override::New(siri::dialogengine::PatternSchemaBinary::Override *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Override>(0);
}

siri::dialogengine::PatternSchemaBinary::Override *siri::dialogengine::PatternSchemaBinary::Override::New(siri::dialogengine::PatternSchemaBinary::Override *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Override>(a2);
}

void siri::dialogengine::PatternSchemaBinary::Override::Clear(siri::dialogengine::PatternSchemaBinary::Override *this)
{
  siri::dialogengine::PatternSchemaBinary::Usage *v2;
  std::string *v3;
  google::protobuf::internal::InternalMetadataWithArenaLite *v4;
  char v5;
  char v6;
  std::string v7[2];

  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24);
  if ((*((_BYTE *)this + 16) & 1) != 0)
  {
    v2 = (siri::dialogengine::PatternSchemaBinary::Usage *)*((_QWORD *)this + 6);
    if (!v2)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.cc", 4309);
      v3 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: usage_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v3->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
      v2 = (siri::dialogengine::PatternSchemaBinary::Usage *)*((_QWORD *)this + 6);
    }
    siri::dialogengine::PatternSchemaBinary::Usage::Clear(v2);
  }
  v5 = *((_BYTE *)this + 8);
  v4 = (siri::dialogengine::PatternSchemaBinary::Override *)((char *)this + 8);
  *((_DWORD *)v4 + 2) = 0;
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v4);
}

void sub_1BFC27F9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::PatternSchemaBinary::Override::IsInitialized(siri::dialogengine::PatternSchemaBinary::Override *this)
{
  return 1;
}

void siri::dialogengine::PatternSchemaBinary::Override::CheckTypeAndMergeFrom(siri::dialogengine::PatternSchemaBinary::Override *this, const google::protobuf::MessageLite *lpsrc)
{
  siri::dialogengine::PatternSchemaBinary::Override::MergeFrom(this, lpsrc);
}

uint64_t siri::dialogengine::PatternSchemaBinary::Override::ByteSizeLong(siri::dialogengine::PatternSchemaBinary::Override *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;

  v2 = *((_DWORD *)this + 8);
  if (v2 < 1)
  {
    v4 = *((unsigned int *)this + 8);
  }
  else
  {
    v3 = 0;
    v4 = *((unsigned int *)this + 8);
    do
    {
      v5 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24, v3);
      v6 = *(unsigned __int8 *)(v5 + 23);
      if ((v6 & 0x80u) != 0)
        v6 = *(_QWORD *)(v5 + 8);
      v4 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  if ((*((_BYTE *)this + 16) & 1) != 0)
  {
    v7 = siri::dialogengine::PatternSchemaBinary::Usage::ByteSizeLong(*((siri::dialogengine::PatternSchemaBinary::Usage **)this
                                                                      + 6));
    v4 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  v8 = *((_QWORD *)this + 1);
  if ((v8 & 1) != 0)
  {
    v10 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v10 + 23) < 0)
      v11 = *(_QWORD *)(v10 + 8);
    else
      v11 = *(unsigned __int8 *)(v10 + 23);
    v4 += v11;
  }
  *((_DWORD *)this + 5) = v4;
  return v4;
}

uint64_t siri::dialogengine::PatternSchemaBinary::Override::GetCachedSize(siri::dialogengine::PatternSchemaBinary::Override *this)
{
  return *((unsigned int *)this + 5);
}

google::protobuf::internal *siri::dialogengine::PatternSchemaBinary::Override::_InternalParse(siri::dialogengine::PatternSchemaBinary::Override *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  unsigned int *v5;
  uint64_t *v6;
  google::protobuf::internal *TagFallback;
  const char *v8;
  BOOL v10;
  google::protobuf::internal *v11;
  char *v12;
  std::string::value_type *v13;
  int *v14;
  uint64_t v15;
  int v16;
  std::string *AlignedAndAddCleanup;
  google::protobuf::internal::ArenaImpl *v18;
  uint64_t v19;
  uint64_t v20;
  siri::dialogengine::PatternSchemaBinary::Usage *v21;
  google::protobuf::internal *v23;

  v23 = a2;
  v5 = (unsigned int *)((char *)this + 24);
  v6 = (uint64_t *)((char *)this + 8);
  while ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v23, *((_DWORD *)a3 + 23)) & 1) == 0)
  {
    TagFallback = (google::protobuf::internal *)((char *)v23 + 1);
    LODWORD(v8) = *(unsigned __int8 *)v23;
    if ((*(char *)v23 & 0x80000000) == 0)
      goto LABEL_6;
    v8 = (const char *)(v8 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v23 + 2);
LABEL_6:
      v23 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v23, v8);
    v23 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    if (v8 >> 3 == 2)
    {
      if (v8 != 18)
        goto LABEL_12;
      v12 = (char *)TagFallback - 1;
LABEL_19:
      v13 = v12 + 1;
      v23 = (google::protobuf::internal *)(v12 + 1);
      v14 = (int *)*((_QWORD *)this + 5);
      if (v14)
      {
        v15 = *((int *)this + 8);
        v16 = *v14;
        if ((int)v15 < *v14)
        {
          *((_DWORD *)this + 8) = v15 + 1;
          AlignedAndAddCleanup = *(std::string **)&v14[2 * v15 + 2];
          goto LABEL_31;
        }
        if (v16 == *((_DWORD *)this + 9))
        {
LABEL_24:
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v16 + 1);
          v14 = (int *)*((_QWORD *)this + 5);
          v16 = *v14;
        }
        *v14 = v16 + 1;
        v18 = *(google::protobuf::internal::ArenaImpl **)v5;
        if (*(_QWORD *)v5)
        {
          if (*((_QWORD *)v18 + 14))
          AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v18, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
        }
        else
        {
          AlignedAndAddCleanup = (std::string *)operator new();
        }
        AlignedAndAddCleanup->__r_.__value_.__r.__words[0] = 0;
        AlignedAndAddCleanup->__r_.__value_.__l.__size_ = 0;
        AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = 0;
        v19 = *((_QWORD *)this + 5);
        v20 = *((int *)this + 8);
        *((_DWORD *)this + 8) = v20 + 1;
        *(_QWORD *)(v19 + 8 * v20 + 8) = AlignedAndAddCleanup;
        v13 = (std::string::value_type *)v23;
LABEL_31:
        v12 = google::protobuf::internal::InlineGreedyStringParser(AlignedAndAddCleanup, v13, (uint64_t)a3);
        v23 = (google::protobuf::internal *)v12;
        if (!v12)
          return 0;
        if (*(_QWORD *)a3 <= (unint64_t)v12 || *v12 != 18)
          continue;
        goto LABEL_19;
      }
      v16 = *((_DWORD *)this + 9);
      goto LABEL_24;
    }
    if (v8 >> 3 == 1 && v8 == 10)
    {
      *((_DWORD *)this + 4) |= 1u;
      v21 = (siri::dialogengine::PatternSchemaBinary::Usage *)*((_QWORD *)this + 6);
      if (!v21)
      {
        v21 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Usage>(0);
        *((_QWORD *)this + 6) = v21;
        TagFallback = v23;
      }
      v11 = (google::protobuf::internal *)google::protobuf::internal::ParseContext::ParseMessage<siri::dialogengine::PatternSchemaBinary::Usage>(a3, v21, TagFallback);
      goto LABEL_38;
    }
LABEL_12:
    if ((_DWORD)v8)
      v10 = (v8 & 7) == 4;
    else
      v10 = 1;
    if (v10)
    {
      *((_DWORD *)a3 + 20) = (_DWORD)v8 - 1;
      return TagFallback;
    }
    v11 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v8, v6, TagFallback, a3);
LABEL_38:
    v23 = v11;
    if (!v11)
      return 0;
  }
  return v23;
}

unsigned __int8 *siri::dialogengine::PatternSchemaBinary::Override::InternalSerializeWithCachedSizesToArray(siri::dialogengine::PatternSchemaBinary::Override *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  char *v4;
  siri::dialogengine::PatternSchemaBinary::Usage *v6;
  unsigned int v7;
  char *v8;
  unsigned int v9;
  _BYTE *v10;
  _BYTE *v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int i;
  uint64_t v16;
  int64_t v17;
  const void *v18;
  uint64_t v19;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;

  v4 = a2;
  if ((*((_BYTE *)this + 16) & 1) != 0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v6 = (siri::dialogengine::PatternSchemaBinary::Usage *)*((_QWORD *)this + 6);
    *v4 = 10;
    v7 = *((_DWORD *)v6 + 5);
    if (v7 > 0x7F)
    {
      v4[1] = v7 | 0x80;
      v9 = v7 >> 7;
      if (v7 >> 14)
      {
        v10 = v4 + 2;
        do
        {
          v11 = v10;
          *v10++ = v9 | 0x80;
          v12 = v9 >> 7;
          v13 = v9 >> 14;
          v9 >>= 7;
        }
        while (v13);
        v8 = v11 + 2;
        *v10 = v12;
      }
      else
      {
        v4[2] = v9;
        v8 = v4 + 3;
      }
    }
    else
    {
      v4[1] = v7;
      v8 = v4 + 2;
    }
    v4 = (char *)siri::dialogengine::PatternSchemaBinary::Usage::InternalSerializeWithCachedSizesToArray(v6, v8, a3);
  }
  v14 = *((_DWORD *)this + 8);
  if (v14 >= 1)
  {
    for (i = 0; v14 != i; ++i)
    {
      v16 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24, i);
      if (*(char *)(v16 + 23) < 0)
      {
        v17 = *(_QWORD *)(v16 + 8);
        if (v17 > 127)
          goto LABEL_24;
      }
      else
      {
        v17 = *(unsigned __int8 *)(v16 + 23);
      }
      if (*(_QWORD *)a3 - (_QWORD)v4 + 14 >= v17)
      {
        *v4 = 18;
        v4[1] = v17;
        if (*(char *)(v16 + 23) >= 0)
          v18 = (const void *)v16;
        else
          v18 = *(const void **)v16;
        memcpy(v4 + 2, v18, v17);
        v4 += v17 + 2;
        continue;
      }
LABEL_24:
      v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a3, 2, v16, v4);
    }
  }
  v19 = *((_QWORD *)this + 1);
  if ((v19 & 1) == 0)
    return (unsigned __int8 *)v4;
  v21 = v19 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v21 + 23) < 0)
  {
    v23 = *(void **)v21;
    v22 = *(_QWORD *)(v21 + 8);
  }
  else
  {
    LODWORD(v22) = *(unsigned __int8 *)(v21 + 23);
    v23 = (void *)v21;
  }
  if (*(_QWORD *)a3 - (_QWORD)v4 >= (int)v22)
  {
    v24 = (int)v22;
    memcpy(v4, v23, (int)v22);
    v4 += v24;
    return (unsigned __int8 *)v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v23, v22, (unsigned __int8 *)v4);
}

unsigned __int8 *siri::dialogengine::PatternSchemaBinary::Usage::InternalSerializeWithCachedSizesToArray(siri::dialogengine::PatternSchemaBinary::Usage *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  char *v4;
  int v6;
  siri::dialogengine::PatternSchemaBinary::UsageMap *v7;
  unsigned int v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned int v11;
  _BYTE *v12;
  _BYTE *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;

  v4 = a2;
  v6 = *((_DWORD *)this + 8);
  if (v6 == 2)
  {
    v10 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((_QWORD *)this + 3), a2);
  }
  else
  {
    if (v6 != 1)
      goto LABEL_15;
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v7 = (siri::dialogengine::PatternSchemaBinary::UsageMap *)*((_QWORD *)this + 3);
    *v4 = 10;
    v8 = *((_DWORD *)v7 + 5);
    if (v8 > 0x7F)
    {
      v4[1] = v8 | 0x80;
      v11 = v8 >> 7;
      if (v8 >> 14)
      {
        v12 = v4 + 2;
        do
        {
          v13 = v12;
          *v12++ = v11 | 0x80;
          v14 = v11 >> 7;
          v15 = v11 >> 14;
          v11 >>= 7;
        }
        while (v15);
        v9 = v13 + 2;
        *v12 = v14;
      }
      else
      {
        v4[2] = v11;
        v9 = (unsigned __int8 *)(v4 + 3);
      }
    }
    else
    {
      v4[1] = v8;
      v9 = (unsigned __int8 *)(v4 + 2);
    }
    v10 = siri::dialogengine::PatternSchemaBinary::UsageMap::InternalSerializeWithCachedSizesToArray(v7, v9, a3);
  }
  v4 = (char *)v10;
LABEL_15:
  v16 = *((_QWORD *)this + 1);
  if ((v16 & 1) == 0)
    return (unsigned __int8 *)v4;
  v18 = v16 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v18 + 23) < 0)
  {
    v20 = *(void **)v18;
    v19 = *(_QWORD *)(v18 + 8);
  }
  else
  {
    LODWORD(v19) = *(unsigned __int8 *)(v18 + 23);
    v20 = (void *)v18;
  }
  if (*(_QWORD *)a3 - (_QWORD)v4 >= (int)v19)
  {
    v21 = (int)v19;
    memcpy(v4, v20, (int)v19);
    v4 += v21;
    return (unsigned __int8 *)v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v20, v19, (unsigned __int8 *)v4);
}

unsigned __int8 *siri::dialogengine::PatternSchemaBinary::UsageMap::InternalSerializeWithCachedSizesToArray(siri::dialogengine::PatternSchemaBinary::UsageMap *this, unsigned __int8 *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  _QWORD *v6;
  uint64_t i;
  uint64_t v9;
  unint64_t v10;
  uint64_t j;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v6 = (_QWORD *)*((_QWORD *)this + 5);
  if (*v6)
  {
    if (*v6 == 1 || *((_BYTE *)a3 + 58) == 0)
    {
      *((_QWORD *)&v23 + 1) = *((_QWORD *)this + 5);
      google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<google::protobuf::Map<std::string,std::string>::KeyValuePair>::SearchFrom(&v23, v6[3]);
      v21 = v23;
      v22 = v24;
      for (i = v23; (_QWORD)v21; i = v21)
      {
        a2 = google::protobuf::internal::MapEntryFuncs<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9>::InternalSerialize(*(_QWORD *)(i + 24), *(_QWORD *)(i + 24) + 24, (char *)a2, a3);
        google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++((unsigned __int8 **)&v21);
      }
    }
    else
    {
      v9 = operator new[]();
      *((_QWORD *)&v23 + 1) = *((_QWORD *)this + 5);
      google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<google::protobuf::Map<std::string,std::string>::KeyValuePair>::SearchFrom(&v23, *(_QWORD *)(*((_QWORD *)&v23 + 1) + 24));
      v21 = v23;
      v22 = v24;
      v10 = 0;
      for (j = v23; (_QWORD)v21; j = v21)
      {
        *(_QWORD *)(v9 + 8 * v10) = *(_QWORD *)(j + 24);
        google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++((unsigned __int8 **)&v21);
        ++v10;
      }
      v12 = 126 - 2 * __clz(v10);
      if (v10)
        v13 = v12;
      else
        v13 = 0;
      std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**,false>(v9, (char *)(v9 + 8 * v10), v13, 1);
      if (v10)
      {
        v14 = (uint64_t *)v9;
        do
        {
          a2 = google::protobuf::internal::MapEntryFuncs<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9>::InternalSerialize(*v14, *v14 + 24, (char *)a2, a3);
          ++v14;
          --v10;
        }
        while (v10);
      }
      MEMORY[0x1C3B8D878](v9, 0x60C8044C4A2DFLL);
    }
  }
  v15 = *((_QWORD *)this + 1);
  if ((v15 & 1) != 0)
  {
    v17 = v15 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v17 + 23) < 0)
    {
      v19 = *(char **)v17;
      v18 = *(_QWORD *)(v17 + 8);
    }
    else
    {
      LODWORD(v18) = *(unsigned __int8 *)(v17 + 23);
      v19 = (char *)v17;
    }
    if (*(_QWORD *)a3 - (_QWORD)a2 < (int)v18)
    {
      return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, v19, v18, a2);
    }
    else
    {
      v20 = (int)v18;
      memcpy(a2, v19, (int)v18);
      a2 += v20;
    }
  }
  return a2;
}

void sub_1BFC288D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D878](v1, 0x60C8044C4A2DFLL);
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**,false>(uint64_t result, char *a2, uint64_t a3, char a4)
{
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  _QWORD *v14;
  char *v15;
  char *v16;
  _QWORD *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  char *v25;
  _QWORD *v26;
  _QWORD *v27;
  BOOL v28;
  BOOL v29;
  _QWORD *v30;
  char *v31;
  char *v32;
  _QWORD *v33;
  char *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  char *v39;
  _QWORD *v40;
  _QWORD *v41;
  char *v42;
  BOOL v44;
  uint64_t v45;
  char *v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  char *v50;
  int64_t v51;
  int64_t v52;
  int64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  _BOOL4 v59;
  char *v60;
  _QWORD *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  _QWORD *v81;
  _QWORD *v82;
  char *v83;
  BOOL v84;
  _QWORD *v85;
  _QWORD *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  _QWORD *v93;
  char *v94;
  int64_t v95;
  uint64_t v96;
  char *v97;

  v6 = (char *)result;
LABEL_2:
  v94 = a2 - 8;
  v90 = a2 - 24;
  v91 = a2 - 16;
  v7 = v6;
  while (2)
  {
    v8 = v7;
    v9 = a2 - v7;
    v10 = (a2 - v7) >> 3;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v40 = *(_QWORD **)v94;
        v41 = *(_QWORD **)v7;
        result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(*(_QWORD **)v94, *(_QWORD **)v7);
        if ((_DWORD)result)
        {
          *(_QWORD *)v7 = v40;
          *(_QWORD *)v94 = v41;
        }
        return result;
      case 3:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7, (_QWORD **)v7 + 1, (_QWORD **)v94);
      case 4:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7, (_QWORD **)v7 + 1, (_QWORD **)v7 + 2, (_QWORD **)v94);
      case 5:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7, (_QWORD **)v7 + 1, (_QWORD **)v7 + 2, (_QWORD **)v7 + 3, (_QWORD **)v94);
      default:
        if (v9 <= 191)
        {
          v42 = v7 + 8;
          v44 = v7 == a2 || v42 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v44)
            {
              v45 = 0;
              v46 = v7;
              do
              {
                v48 = *(_QWORD **)v46;
                v47 = (_QWORD *)*((_QWORD *)v46 + 1);
                v46 = v42;
                result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v47, v48);
                if ((_DWORD)result)
                {
                  v49 = v45;
                  while (1)
                  {
                    *(_QWORD *)&v7[v49 + 8] = v48;
                    if (!v49)
                      break;
                    v48 = *(_QWORD **)&v7[v49 - 8];
                    result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v47, v48);
                    v49 -= 8;
                    if ((result & 1) == 0)
                    {
                      v50 = &v7[v49 + 8];
                      goto LABEL_73;
                    }
                  }
                  v50 = v7;
LABEL_73:
                  *(_QWORD *)v50 = v47;
                }
                v42 = v46 + 8;
                v45 += 8;
              }
              while (v46 + 8 != a2);
            }
          }
          else if (!v44)
          {
            do
            {
              v86 = *(_QWORD **)v8;
              v85 = (_QWORD *)*((_QWORD *)v8 + 1);
              v8 = v42;
              result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v85, v86);
              if ((_DWORD)result)
              {
                v87 = v8;
                do
                {
                  *(_QWORD *)v87 = v86;
                  v86 = (_QWORD *)*((_QWORD *)v87 - 2);
                  result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v85, v86);
                  v87 -= 8;
                }
                while ((result & 1) != 0);
                *(_QWORD *)v87 = v85;
              }
              v42 = v8 + 8;
            }
            while (v8 + 8 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v7 != a2)
          {
            v97 = v7;
            v51 = (unint64_t)(v10 - 2) >> 1;
            v52 = v51;
            v88 = a2;
            v89 = a2 - v7;
            do
            {
              v53 = v52;
              if (v9 >= 16 && v51 >= v52)
              {
                v54 = (2 * v52) | 1;
                v55 = &v97[8 * v54];
                v56 = 2 * v52 + 2;
                v95 = v52;
                if (v56 >= v10)
                {
                  v58 = *(_QWORD **)v55;
                }
                else
                {
                  v57 = *(_QWORD **)v55;
                  v58 = (_QWORD *)*((_QWORD *)v55 + 1);
                  v59 = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(*(_QWORD **)v55, v58);
                  if (v59)
                    v55 += 8;
                  else
                    v58 = v57;
                  if (v59)
                    v54 = v56;
                }
                v60 = &v97[8 * v53];
                v61 = *(_QWORD **)v60;
                result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v58, *(_QWORD **)v60);
                v9 = v89;
                if ((result & 1) == 0)
                {
                  do
                  {
                    v62 = v55;
                    *(_QWORD *)v60 = v58;
                    if (v51 < v54)
                      break;
                    v63 = (2 * v54) | 1;
                    v55 = &v97[8 * v63];
                    v64 = 2 * v54 + 2;
                    if (v64 >= v10)
                    {
                      v58 = *(_QWORD **)v55;
                      v54 = (2 * v54) | 1;
                    }
                    else
                    {
                      v58 = *(_QWORD **)v55;
                      v65 = (_QWORD *)*((_QWORD *)v55 + 1);
                      if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(*(_QWORD **)v55, v65))
                      {
                        v58 = v65;
                        v55 += 8;
                        v54 = v64;
                      }
                      else
                      {
                        v54 = v63;
                      }
                    }
                    result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v58, v61);
                    v60 = v62;
                  }
                  while (!(_DWORD)result);
                  *(_QWORD *)v62 = v61;
                  a2 = v88;
                  v9 = v89;
                  v53 = v95;
                }
              }
              v52 = v53 - 1;
            }
            while (v53);
            v66 = (unint64_t)v9 >> 3;
            v67 = v97;
            do
            {
              v68 = a2;
              v69 = 0;
              v70 = v66 - 2;
              v93 = *(_QWORD **)v67;
              if (v66 < 2)
                v70 = v66 - 1;
              v71 = v70 >> 1;
              do
              {
                v72 = &v67[8 * v69 + 8];
                v73 = (2 * v69) | 1;
                v74 = 2 * v69 + 2;
                if (v74 >= v66)
                {
                  v77 = *(_QWORD **)v72;
                  v69 = (2 * v69) | 1;
                }
                else
                {
                  v75 = *(_QWORD **)v72;
                  v76 = *(_QWORD **)&v67[8 * v69 + 16];
                  result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(*(_QWORD **)v72, v76);
                  if ((_DWORD)result)
                    v77 = v76;
                  else
                    v77 = v75;
                  if ((_DWORD)result)
                  {
                    v72 += 8;
                    v69 = v74;
                  }
                  else
                  {
                    v69 = v73;
                  }
                }
                *(_QWORD *)v67 = v77;
                v67 = v72;
              }
              while (v69 <= v71);
              a2 = v68 - 8;
              if (v72 == v68 - 8)
              {
                *(_QWORD *)v72 = v93;
              }
              else
              {
                *(_QWORD *)v72 = *(_QWORD *)a2;
                *(_QWORD *)a2 = v93;
                v78 = v72 - v97 + 8;
                if (v78 >= 9)
                {
                  v79 = (unint64_t)((v78 >> 3) - 2) >> 1;
                  v80 = &v97[8 * v79];
                  v81 = *(_QWORD **)v80;
                  v82 = *(_QWORD **)v72;
                  result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(*(_QWORD **)v80, *(_QWORD **)v72);
                  if ((_DWORD)result)
                  {
                    do
                    {
                      v83 = v80;
                      *(_QWORD *)v72 = v81;
                      if (!v79)
                        break;
                      v79 = (v79 - 1) >> 1;
                      v80 = &v97[8 * v79];
                      v81 = *(_QWORD **)v80;
                      result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(*(_QWORD **)v80, v82);
                      v72 = v83;
                    }
                    while ((result & 1) != 0);
                    *(_QWORD *)v83 = v82;
                  }
                }
              }
              v84 = v66-- <= 2;
              v67 = v97;
            }
            while (!v84);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v7[8 * ((unint64_t)v10 >> 1)];
        if ((unint64_t)v9 < 0x401)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v12, (_QWORD **)v7, (_QWORD **)v94);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7, (_QWORD **)v12, (_QWORD **)v94);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7 + 1, (_QWORD **)v12 - 1, (_QWORD **)v91);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7 + 2, (_QWORD **)&v7[8 * v11 + 8], (_QWORD **)v90);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v12 - 1, (_QWORD **)v12, (_QWORD **)&v7[8 * v11 + 8]);
          v13 = *(_QWORD **)v7;
          *(_QWORD *)v7 = *(_QWORD *)v12;
          *(_QWORD *)v12 = v13;
        }
        --a3;
        v14 = *(_QWORD **)v7;
        v15 = v7;
        if ((a4 & 1) == 0)
        {
          v15 = v7;
          if (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(*((_QWORD **)v7 - 1), *(_QWORD **)v7))
          {
            result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v14, *(_QWORD **)v94);
            if ((result & 1) != 0)
            {
              do
              {
                v30 = (_QWORD *)*((_QWORD *)v7 + 1);
                v7 += 8;
                result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v14, v30);
              }
              while ((result & 1) == 0);
            }
            else
            {
              v31 = v7 + 8;
              do
              {
                v7 = v31;
                if (v31 >= a2)
                  break;
                v31 += 8;
                result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v14, *(_QWORD **)v7);
              }
              while (!(_DWORD)result);
            }
            v32 = a2;
            if (v7 < a2)
            {
              v32 = a2;
              do
              {
                v33 = (_QWORD *)*((_QWORD *)v32 - 1);
                v32 -= 8;
                result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v14, v33);
              }
              while ((result & 1) != 0);
            }
            v34 = a2;
            if (v7 < v32)
            {
              v35 = *(_QWORD **)v7;
              v36 = *(_QWORD **)v32;
              do
              {
                *(_QWORD *)v7 = v36;
                *(_QWORD *)v32 = v35;
                do
                {
                  v37 = (_QWORD *)*((_QWORD *)v7 + 1);
                  v7 += 8;
                  v35 = v37;
                }
                while (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v14, v37));
                do
                {
                  v38 = (_QWORD *)*((_QWORD *)v32 - 1);
                  v32 -= 8;
                  v36 = v38;
                  result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v14, v38);
                }
                while ((result & 1) != 0);
              }
              while (v7 < v32);
            }
            v39 = v7 - 8;
            a2 = v34;
            if (v7 - 8 != v8)
              *(_QWORD *)v8 = *(_QWORD *)v39;
            a4 = 0;
            *(_QWORD *)v39 = v14;
            continue;
          }
        }
        do
        {
          v16 = v15;
          v18 = (_QWORD *)*((_QWORD *)v15 + 1);
          v15 += 8;
          v17 = v18;
        }
        while (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v18, v14));
        v96 = a3;
        v19 = a2;
        if (v16 == v8)
        {
          v19 = a2;
          do
          {
            if (v15 >= v19)
              break;
            v21 = (_QWORD *)*((_QWORD *)v19 - 1);
            v19 -= 8;
          }
          while (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v21, v14));
        }
        else
        {
          do
          {
            v20 = (_QWORD *)*((_QWORD *)v19 - 1);
            v19 -= 8;
          }
          while (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v20, v14));
        }
        v6 = v8;
        v22 = a2;
        if (v15 < v19)
        {
          v23 = *(_QWORD **)v19;
          v24 = v15;
          v25 = v19;
          do
          {
            *(_QWORD *)v24 = v23;
            *(_QWORD *)v25 = v17;
            do
            {
              v16 = v24;
              v26 = (_QWORD *)*((_QWORD *)v24 + 1);
              v24 += 8;
              v17 = v26;
            }
            while (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v26, v14));
            do
            {
              v27 = (_QWORD *)*((_QWORD *)v25 - 1);
              v25 -= 8;
              v23 = v27;
            }
            while (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v27, v14));
          }
          while (v24 < v25);
        }
        if (v16 != v6)
          *(_QWORD *)v6 = *(_QWORD *)v16;
        *(_QWORD *)v16 = v14;
        v28 = v15 >= v19;
        a2 = v22;
        a3 = v96;
        if (!v28)
        {
LABEL_30:
          result = std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**,false>(v6, v16, v96, a4 & 1);
          a4 = 0;
          v7 = v16 + 8;
          continue;
        }
        v29 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v6, (_QWORD **)v16);
        v7 = v16 + 8;
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v16 + 1, (_QWORD **)v22);
        if (!(_DWORD)result)
        {
          if (v29)
            continue;
          goto LABEL_30;
        }
        a2 = v16;
        if (!v29)
          goto LABEL_2;
        return result;
    }
  }
}

unsigned __int8 *google::protobuf::internal::MapEntryFuncs<std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9>::InternalSerialize(uint64_t a1, uint64_t a2, char *a3, google::protobuf::io::EpsCopyOutputStream *this)
{
  int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  char *v11;
  unsigned int v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned int v15;
  unsigned int v16;
  int64_t v17;
  char *v18;
  const void *v19;
  char *v20;
  int64_t v21;
  char *v22;
  const void *v23;

  if (*(_QWORD *)this <= (unint64_t)a3)
    a3 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(this, a3);
  *a3 = 10;
  v7 = *(unsigned __int8 *)(a1 + 23);
  if ((v7 & 0x80u) != 0)
    v7 = *(_DWORD *)(a1 + 8);
  v8 = 9 * (__clz(v7 | 1) ^ 0x1F) + 73;
  v9 = *(unsigned __int8 *)(a2 + 23);
  if ((v9 & 0x80u) != 0)
    v9 = *(_DWORD *)(a2 + 8);
  v10 = v7 + v9 + (v8 >> 6) + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if (v10 > 0x7F)
  {
    a3[1] = v10 | 0x80;
    v12 = v10 >> 7;
    if (v10 >> 14)
    {
      v13 = (unsigned __int8 *)(a3 + 2);
      do
      {
        v14 = v13;
        *v13++ = v12 | 0x80;
        v15 = v12 >> 7;
        v16 = v12 >> 14;
        v12 >>= 7;
      }
      while (v16);
      v11 = (char *)(v14 + 2);
      *v13 = v15;
    }
    else
    {
      a3[2] = v12;
      v11 = a3 + 3;
    }
  }
  else
  {
    a3[1] = v10;
    v11 = a3 + 2;
  }
  if (*(_QWORD *)this <= (unint64_t)v11)
    v11 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(this, v11);
  if (*(char *)(a1 + 23) < 0)
  {
    v17 = *(_QWORD *)(a1 + 8);
    if (v17 > 127)
    {
LABEL_34:
      v20 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(this, 1, a1, v11);
      goto LABEL_24;
    }
  }
  else
  {
    v17 = *(unsigned __int8 *)(a1 + 23);
  }
  if (*(_QWORD *)this - (_QWORD)v11 + 14 < v17)
    goto LABEL_34;
  *v11 = 10;
  v18 = v11 + 2;
  v11[1] = v17;
  if (*(char *)(a1 + 23) >= 0)
    v19 = (const void *)a1;
  else
    v19 = *(const void **)a1;
  memcpy(v11 + 2, v19, v17);
  v20 = &v18[v17];
LABEL_24:
  if (*(_QWORD *)this <= (unint64_t)v20)
    v20 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(this, v20);
  if (*(char *)(a2 + 23) < 0)
  {
    v21 = *(_QWORD *)(a2 + 8);
    if (v21 > 127)
      return google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(this, 2, a2, v20);
  }
  else
  {
    v21 = *(unsigned __int8 *)(a2 + 23);
  }
  if (*(_QWORD *)this - (_QWORD)v20 + 14 < v21)
    return google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(this, 2, a2, v20);
  *v20 = 18;
  v22 = v20 + 2;
  v20[1] = v21;
  if (*(char *)(a2 + 23) >= 0)
    v23 = (const void *)a2;
  else
    v23 = *(const void **)a2;
  memcpy(v20 + 2, v23, v21);
  return (unsigned __int8 *)&v22[v21];
}

BOOL std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(_QWORD **a1, _QWORD **a2, _QWORD **a3)
{
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  _QWORD *v9;
  _BOOL8 result;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;

  v6 = *a2;
  v7 = *a1;
  v8 = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(*a2, *a1);
  v9 = *a3;
  result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(*a3, v6);
  if (v8)
  {
    if (result)
    {
      *a1 = v9;
    }
    else
    {
      *a1 = v6;
      *a2 = v7;
      v13 = *a3;
      result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(*a3, v7);
      if (!result)
        return result;
      *a2 = v13;
    }
    *a3 = v7;
  }
  else if (result)
  {
    *a2 = v9;
    *a3 = v6;
    v11 = *a2;
    v12 = *a1;
    result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(*a2, *a1);
    if (result)
    {
      *a1 = v11;
      *a2 = v12;
    }
  }
  return result;
}

BOOL std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(_QWORD **a1, _QWORD **a2, _QWORD **a3, _QWORD **a4)
{
  _QWORD *v8;
  _QWORD *v9;
  _BOOL8 result;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a2, a3);
  v8 = *a4;
  v9 = *a3;
  result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(*a4, *a3);
  if (result)
  {
    *a3 = v8;
    *a4 = v9;
    v11 = *a3;
    v12 = *a2;
    result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(*a3, *a2);
    if (result)
    {
      *a2 = v11;
      *a3 = v12;
      v13 = *a2;
      v14 = *a1;
      result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(*a2, *a1);
      if (result)
      {
        *a1 = v13;
        *a2 = v14;
      }
    }
  }
  return result;
}

BOOL std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(_QWORD **a1, _QWORD **a2, _QWORD **a3, _QWORD **a4, _QWORD **a5)
{
  _QWORD *v10;
  _QWORD *v11;
  _BOOL8 result;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a2, a3, a4);
  v10 = *a5;
  v11 = *a4;
  result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(*a5, *a4);
  if (result)
  {
    *a4 = v10;
    *a5 = v11;
    v13 = *a4;
    v14 = *a3;
    result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(*a4, *a3);
    if (result)
    {
      *a3 = v13;
      *a4 = v14;
      v15 = *a3;
      v16 = *a2;
      result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(*a3, *a2);
      if (result)
      {
        *a2 = v15;
        *a3 = v16;
        v17 = *a2;
        v18 = *a1;
        result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(*a2, *a1);
        if (result)
        {
          *a1 = v17;
          *a2 = v18;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(_QWORD **a1, _QWORD **a2)
{
  uint64_t v4;
  _BOOL8 result;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD **v8;
  _QWORD **v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  _QWORD *v17;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v6, *a1))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(*v9, v13))
    {
      v14 = v11;
      while (1)
      {
        *(_QWORD **)((char *)a1 + v14) = v13;
        v15 = v14 - 8;
        if (v14 == 8)
          break;
        v13 = *(_QWORD **)((char *)a1 + v14 - 16);
        v16 = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v12, v13);
        v14 = v15;
        if (!v16)
        {
          v17 = (_QWORD **)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      v17 = a1;
LABEL_12:
      *v17 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

siri::dialogengine::PatternSchemaBinary::Usage *google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Usage>(google::protobuf::internal::ArenaImpl *this)
{
  siri::dialogengine::PatternSchemaBinary::Usage *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (siri::dialogengine::PatternSchemaBinary::Usage *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x28uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<siri::dialogengine::PatternSchemaBinary::Usage>);
    siri::dialogengine::PatternSchemaBinary::Usage::Usage(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (siri::dialogengine::PatternSchemaBinary::Usage *)operator new();
    siri::dialogengine::PatternSchemaBinary::Usage::Usage(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFC296F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C40C05B56FCLL);
  _Unwind_Resume(a1);
}

char *google::protobuf::internal::ParseContext::ParseMessage<siri::dialogengine::PatternSchemaBinary::Usage>(google::protobuf::internal::EpsCopyInputStream *this, siri::dialogengine::PatternSchemaBinary::Usage *a2, google::protobuf::internal *a3)
{
  int v6;
  const char *v7;
  char *v8;
  char *result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = *(char *)a3;
  v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result)
      return result;
    v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    v8 = (char *)a3 + 1;
  }
  v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  v12 = *((_DWORD *)this + 22);
  v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = (char *)siri::dialogengine::PatternSchemaBinary::Usage::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result)
    return result;
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20))
    return 0;
  v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(_QWORD *)this = *((_QWORD *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

google::protobuf::internal *siri::dialogengine::PatternSchemaBinary::Usage::_InternalParse(siri::dialogengine::PatternSchemaBinary::Usage *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  uint64_t *v6;
  google::protobuf::internal *TagFallback;
  const char *v8;
  google::protobuf::internal *v11;
  std::string *v12;
  siri::dialogengine::PatternSchemaBinary::UsageMap *v13;
  unsigned int v14;
  char *v15;
  char *SizeFallback;
  unsigned int v17;
  int v18;
  int v19;
  BOOL v20;
  int v21;
  google::protobuf::internal *v22;
  int v23;
  google::protobuf::internal *v25;

  v25 = a2;
  v5 = (std::string **)((char *)this + 24);
  v6 = (uint64_t *)((char *)this + 8);
  while (1)
  {
    while (1)
    {
      if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v25, *((_DWORD *)a3 + 23)) & 1) != 0)
        return v25;
      TagFallback = (google::protobuf::internal *)((char *)v25 + 1);
      LODWORD(v8) = *(unsigned __int8 *)v25;
      if ((*(char *)v25 & 0x80000000) == 0)
        goto LABEL_6;
      v8 = (const char *)(v8 + (*(unsigned __int8 *)TagFallback << 7) - 128);
      if ((*(char *)TagFallback & 0x80000000) == 0)
      {
        TagFallback = (google::protobuf::internal *)((char *)v25 + 2);
LABEL_6:
        v25 = TagFallback;
        goto LABEL_7;
      }
      TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v25, v8);
      v25 = TagFallback;
      if (!TagFallback)
        return TagFallback;
LABEL_7:
      if (v8 >> 3 == 2)
      {
        if (v8 != 18)
          break;
        if (*((_DWORD *)this + 8) == 2)
        {
          v12 = *v5;
          if (*v5 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          {
LABEL_25:
            v11 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v12, (std::string::value_type *)TagFallback, (uint64_t)a3);
            goto LABEL_26;
          }
        }
        else
        {
          siri::dialogengine::PatternSchemaBinary::Usage::clear_usage_value((uint64_t)this);
          *((_DWORD *)this + 8) = 2;
          *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
        }
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v12 = *v5;
        TagFallback = v25;
        goto LABEL_25;
      }
      if (v8 >> 3 != 1 || v8 != 10)
        break;
      if (*((_DWORD *)this + 8) == 1)
      {
        v13 = (siri::dialogengine::PatternSchemaBinary::UsageMap *)*v5;
      }
      else
      {
        siri::dialogengine::PatternSchemaBinary::Usage::clear_usage_value((uint64_t)this);
        *((_DWORD *)this + 8) = 1;
        v13 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::UsageMap>(0);
        *((_QWORD *)this + 3) = v13;
        TagFallback = v25;
      }
      v14 = *(unsigned __int8 *)TagFallback;
      if (*(char *)TagFallback < 0)
      {
        SizeFallback = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
        if (!SizeFallback)
          return 0;
        v15 = SizeFallback;
        v14 = v17;
      }
      else
      {
        v15 = (char *)TagFallback + 1;
      }
      v18 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v15, v14);
      v19 = *((_DWORD *)a3 + 22);
      v20 = __OFSUB__(v19--, 1);
      *((_DWORD *)a3 + 22) = v19;
      if (v19 < 0 != v20)
        return 0;
      v21 = v18;
      v22 = siri::dialogengine::PatternSchemaBinary::UsageMap::_InternalParse(v13, (google::protobuf::internal *)v15, a3);
      if (!v22)
        return 0;
      ++*((_DWORD *)a3 + 22);
      if (*((_DWORD *)a3 + 20))
        return 0;
      v23 = *((_DWORD *)a3 + 7) + v21;
      *((_DWORD *)a3 + 7) = v23;
      *(_QWORD *)a3 = *((_QWORD *)a3 + 1) + (v23 & (v23 >> 31));
      v25 = v22;
    }
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      break;
    v11 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v8, v6, TagFallback, a3);
LABEL_26:
    v25 = v11;
    if (!v11)
      return 0;
  }
  *((_DWORD *)a3 + 20) = (_DWORD)v8 - 1;
  return TagFallback;
}

uint64_t siri::dialogengine::PatternSchemaBinary::Usage::clear_usage_value(uint64_t this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  v1 = this;
  v2 = *(_DWORD *)(this + 32);
  if (v2 == 2)
  {
    v3 = *(_QWORD *)(this + 24);
    if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string && v3 != 0)
    {
      if (*(char *)(v3 + 23) < 0)
        operator delete(*(void **)v3);
      this = MEMORY[0x1C3B8D890](v3, 0x1012C40EC159624);
    }
  }
  else if (v2 == 1)
  {
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_DWORD *)(v1 + 32) = 0;
  return this;
}

siri::dialogengine::PatternSchemaBinary::UsageMap *google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::UsageMap>(google::protobuf::internal::ArenaImpl *this)
{
  siri::dialogengine::PatternSchemaBinary::UsageMap *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (siri::dialogengine::PatternSchemaBinary::UsageMap *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x30uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<siri::dialogengine::PatternSchemaBinary::UsageMap>);
    siri::dialogengine::PatternSchemaBinary::UsageMap::UsageMap(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (siri::dialogengine::PatternSchemaBinary::UsageMap *)operator new();
    siri::dialogengine::PatternSchemaBinary::UsageMap::UsageMap(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFC29B3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C401A3DEA33);
  _Unwind_Resume(a1);
}

google::protobuf::internal *siri::dialogengine::PatternSchemaBinary::UsageMap::_InternalParse(siri::dialogengine::PatternSchemaBinary::UsageMap *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  uint64_t *v4;
  uint64_t *v5;
  google::protobuf::internal *TagFallback;
  const char *v7;
  BOOL v8;
  char *v9;
  unsigned int v10;
  char *v11;
  char *SizeFallback;
  unsigned int v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  int v18;
  char *v19;
  int v20;
  uint64_t v21;
  std::string *v22;
  int v23;
  char *v24;
  int v25;
  char v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  std::string *v32;
  uint64_t *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t *v36;
  uint64_t v37;
  __int128 v38;
  const std::string *v39;
  std::string *v40;
  uint64_t v41;
  uint64_t **v42;
  uint64_t *v43;
  __int128 v44;
  google::protobuf::internal *v46;
  google::protobuf::internal::ArenaImpl **v47;
  uint64_t *v48;
  std::string v49;
  std::string *v50;
  int v51[2];
  char *String;

  v46 = a2;
  v4 = (uint64_t *)((char *)this + 8);
  v5 = (uint64_t *)((char *)this + 24);
  do
  {
LABEL_2:
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v46, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v46;
    TagFallback = (google::protobuf::internal *)((char *)v46 + 1);
    LODWORD(v7) = *(unsigned __int8 *)v46;
    if ((*(char *)v46 & 0x80000000) == 0)
      goto LABEL_6;
    v7 = (const char *)(v7 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v46 + 2);
LABEL_6:
      v46 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v46, v7);
    v46 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    if ((_DWORD)v7 == 10)
    {
      v9 = (char *)TagFallback - 1;
      while (1)
      {
        v46 = (google::protobuf::internal *)(v9 + 1);
        v10 = v9[1];
        if (v9[1] < 0)
        {
          SizeFallback = google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)(v9 + 1), (const char *)v9[1]);
          if (!SizeFallback)
            return 0;
          v11 = SizeFallback;
          v10 = v13;
        }
        else
        {
          v11 = v9 + 2;
        }
        v14 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v11, v10);
        v15 = *((_DWORD *)a3 + 22);
        v16 = __OFSUB__(v15--, 1);
        *((_DWORD *)a3 + 22) = v15;
        if (v15 < 0 != v16)
          return 0;
        v17 = v14;
        v47 = (google::protobuf::internal::ArenaImpl **)v5;
        v48 = v5;
        memset(&v49, 0, sizeof(v49));
        *(_QWORD *)v51 = 0;
        String = v11;
        if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&String, *((_DWORD *)a3 + 23)) & 1) != 0)break;
        if (*String != 10)
          goto LABEL_42;
        v18 = String[1];
        if (String[1] < 0)
        {
          v19 = google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)(String + 1), (const char *)String[1]);
          if (!v19)
            goto LABEL_66;
          v18 = v20;
        }
        else
        {
          v19 = String + 2;
        }
        String = (char *)google::protobuf::internal::EpsCopyInputStream::ReadString((uint64_t)a3, v19, v18, &v49);
        if (!String)
          goto LABEL_66;
        if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&String, *((_DWORD *)a3 + 23)) & 1) != 0)
        {
          if (!String)
            goto LABEL_66;
LABEL_44:
          v30 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse>(*v47);
          *(_QWORD *)v51 = v30;
LABEL_51:
          v36 = (uint64_t *)(v30 + 8);
          v37 = *(_QWORD *)(v30 + 8);
          *(_DWORD *)(v30 + 32) |= 1u;
          if ((uint64_t *)v37 == &google::protobuf::internal::fixed_address_empty_string)
          {
            google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)(v30 + 8), *(google::protobuf::Arena **)(v30 + 24), (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
            v37 = *v36;
          }
          if (*(char *)(v37 + 23) < 0)
            operator delete(*(void **)v37);
          v38 = *(_OWORD *)&v49.__r_.__value_.__l.__data_;
          *(_QWORD *)(v37 + 16) = *((_QWORD *)&v49.__r_.__value_.__l + 2);
          *(_OWORD *)v37 = v38;
          *((_BYTE *)&v49.__r_.__value_.__s + 23) = 0;
          v49.__r_.__value_.__s.__data_[0] = 0;
          v29 = *(_QWORD *)v51;
LABEL_56:
          String = (char *)google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::_InternalParse(v29, (google::protobuf::internal *)String, a3);
          if (!String)
            goto LABEL_66;
          v39 = (const std::string *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)v51 + 128))(*(_QWORD *)v51);
          std::string::operator=(&v49, v39);
          v40 = google::protobuf::Map<std::string,std::string>::operator[](v48, (uint64_t)&v49);
          v50 = v40;
          v41 = *(_QWORD *)v51;
          *(_DWORD *)(*(_QWORD *)v51 + 32) |= 2u;
          v42 = (uint64_t **)(v41 + 16);
          v43 = *(uint64_t **)(v41 + 16);
          if (v43 == &google::protobuf::internal::fixed_address_empty_string)
          {
            google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)(v41 + 16), *(google::protobuf::Arena **)(v41 + 24), (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
            v43 = *v42;
            v40 = v50;
          }
          if (SHIBYTE(v40->__r_.__value_.__r.__words[2]) < 0)
            operator delete(v40->__r_.__value_.__l.__data_);
          v44 = *(_OWORD *)v43;
          v40->__r_.__value_.__r.__words[2] = v43[2];
          *(_OWORD *)&v40->__r_.__value_.__l.__data_ = v44;
          *((_BYTE *)v43 + 23) = 0;
          *(_BYTE *)v43 = 0;
          v9 = String;
          goto LABEL_36;
        }
        if (*String != 18)
          goto LABEL_44;
        v21 = *(_QWORD *)v48[2];
        v22 = google::protobuf::Map<std::string,std::string>::operator[](v48, (uint64_t)&v49);
        v50 = v22;
        if (v21 == *(_QWORD *)v48[2])
          goto LABEL_44;
        v23 = String[1];
        if (String[1] < 0)
        {
          v24 = google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)(String + 1), (const char *)String[1]);
          if (!v24)
          {
            String = 0;
LABEL_65:
            google::protobuf::Map<std::string,std::string>::erase(v48, (unsigned __int8 *)&v49);
LABEL_66:
            google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::Parser<google::protobuf::internal::MapFieldLite<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::Map<std::string,std::string>>::~Parser((uint64_t)&v47);
            return 0;
          }
          v23 = v25;
        }
        else
        {
          v24 = String + 2;
        }
        String = (char *)google::protobuf::internal::EpsCopyInputStream::ReadString((uint64_t)a3, v24, v23, v22);
        if (!String)
          goto LABEL_65;
        v26 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&String, *((_DWORD *)a3 + 23));
        v9 = String;
        if ((v26 & 1) == 0)
        {
          if (!String)
            goto LABEL_66;
          v31 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse>(*v47);
          *(_QWORD *)v51 = v31;
          v32 = v50;
          *(_DWORD *)(v31 + 32) |= 2u;
          v33 = (uint64_t *)(v31 + 16);
          v34 = *(_QWORD *)(v31 + 16);
          if ((uint64_t *)v34 == &google::protobuf::internal::fixed_address_empty_string)
          {
            google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)(v31 + 16), *(google::protobuf::Arena **)(v31 + 24), (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
            v34 = *v33;
          }
          if (*(char *)(v34 + 23) < 0)
            operator delete(*(void **)v34);
          v35 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
          *(_QWORD *)(v34 + 16) = *((_QWORD *)&v32->__r_.__value_.__l + 2);
          *(_OWORD *)v34 = v35;
          *((_BYTE *)&v32->__r_.__value_.__s + 23) = 0;
          v32->__r_.__value_.__s.__data_[0] = 0;
          google::protobuf::Map<std::string,std::string>::erase(v48, (unsigned __int8 *)&v49);
          v30 = *(_QWORD *)v51;
          goto LABEL_51;
        }
LABEL_36:
        google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::Parser<google::protobuf::internal::MapFieldLite<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::Map<std::string,std::string>>::~Parser((uint64_t)&v47);
        if (!v9)
          return 0;
        ++*((_DWORD *)a3 + 22);
        if (*((_DWORD *)a3 + 20))
          return 0;
        v27 = *((_DWORD *)a3 + 7) + v17;
        *((_DWORD *)a3 + 7) = v27;
        v28 = *((_QWORD *)a3 + 1) + (v27 & (v27 >> 31));
        *(_QWORD *)a3 = v28;
        v46 = (google::protobuf::internal *)v9;
        if (v28 <= (unint64_t)v9 || *v9 != 10)
          goto LABEL_2;
      }
      if (!String)
        goto LABEL_66;
LABEL_42:
      v29 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse>(*v47);
      *(_QWORD *)v51 = v29;
      goto LABEL_56;
    }
    if ((_DWORD)v7)
      v8 = (v7 & 7) == 4;
    else
      v8 = 1;
    if (v8)
    {
      *((_DWORD *)a3 + 20) = (_DWORD)v7 - 1;
      return TagFallback;
    }
    v46 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v7, v4, TagFallback, a3);
  }
  while (v46);
  return 0;
}

void sub_1BFC2A014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::Parser<google::protobuf::internal::MapFieldLite<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::Map<std::string,std::string>>::~Parser((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::Parser<google::protobuf::internal::MapFieldLite<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>,google::protobuf::Map<std::string,std::string>>::~Parser(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
  {
    if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2))
    {
      v3 = *(_QWORD *)(a1 + 48);
      if (v3)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

double google::protobuf::Map<std::string,std::string>::erase(_QWORD *a1, unsigned __int8 *a2)
{
  double result;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(&v6, a1[2], a2, 0);
  result = *(double *)&v6;
  if ((_QWORD)v6)
  {
    v4 = v6;
    v5 = v7;
    *(_QWORD *)&result = google::protobuf::Map<std::string,std::string>::erase((uint64_t)&v6, a1, (uint64_t *)&v4).n128_u64[0];
  }
  return result;
}

uint64_t google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse>(google::protobuf::internal::ArenaImpl *this)
{
  uint64_t result;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    result = (uint64_t)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x28uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse>);
  }
  else
  {
    result = operator new();
  }
  *(_QWORD *)(result + 16) = &google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  *(_QWORD *)result = &off_1E7938918;
  *(_QWORD *)(result + 8) = &google::protobuf::internal::fixed_address_empty_string;
  return result;
}

google::protobuf::internal *google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::_InternalParse(uint64_t a1, google::protobuf::internal *a2, google::protobuf::internal::EpsCopyInputStream *this)
{
  std::string **v5;
  std::string **v6;
  google::protobuf::internal *TagFallback;
  const char *v8;
  int v9;
  google::protobuf::internal *SizeFallback;
  std::string *v12;
  int v13;
  std::string::value_type *v14;
  int v15;
  google::protobuf::internal *v17;

  v17 = a2;
  v5 = (std::string **)(a1 + 16);
  v6 = (std::string **)(a1 + 8);
  while (1)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v17, *((_DWORD *)this + 23)) & 1) != 0)return v17;
    TagFallback = (google::protobuf::internal *)((char *)v17 + 1);
    LODWORD(v8) = *(unsigned __int8 *)v17;
    if ((*(char *)v17 & 0x80000000) == 0)
      goto LABEL_6;
    v9 = *(char *)TagFallback;
    v8 = (const char *)(v8 + (v9 << 7) - 128);
    if ((v9 & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v17 + 2);
LABEL_6:
      v17 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v17, v8);
    v17 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    if ((_DWORD)v8 == 10)
    {
      *(_DWORD *)(a1 + 32) |= 1u;
      v12 = *(std::string **)(a1 + 8);
      if (v12 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        goto LABEL_19;
      google::protobuf::internal::ArenaStringPtr::CreateInstance(v6, *(google::protobuf::Arena **)(a1 + 24), (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
      v12 = *(std::string **)(a1 + 8);
      goto LABEL_18;
    }
    if ((_DWORD)v8 == 18)
    {
      *(_DWORD *)(a1 + 32) |= 2u;
      v12 = *(std::string **)(a1 + 16);
      if (v12 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        goto LABEL_19;
      google::protobuf::internal::ArenaStringPtr::CreateInstance(v5, *(google::protobuf::Arena **)(a1 + 24), (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
      v12 = *(std::string **)(a1 + 16);
LABEL_18:
      TagFallback = v17;
LABEL_19:
      v13 = *(unsigned __int8 *)TagFallback;
      if (*(char *)TagFallback < 0)
      {
        SizeFallback = (google::protobuf::internal *)google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
        if (!SizeFallback)
          goto LABEL_24;
        v14 = (std::string::value_type *)SizeFallback;
        v13 = v15;
      }
      else
      {
        v14 = (char *)TagFallback + 1;
      }
      SizeFallback = (google::protobuf::internal *)google::protobuf::internal::EpsCopyInputStream::ReadString((uint64_t)this, v14, v13, v12);
      goto LABEL_24;
    }
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      break;
    SizeFallback = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v8, 0, TagFallback, this);
LABEL_24:
    v17 = SizeFallback;
    if (!SizeFallback)
      return 0;
  }
  *((_DWORD *)this + 20) = (_DWORD)v8 - 1;
  return TagFallback;
}

uint64_t google::protobuf::internal::arena_destruct_object<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse::~UsageMap_ValueEntry_DoNotUse(siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse *this)
{
  google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::~MapEntryImpl(this);
  JUMPOUT(0x1C3B8D890);
}

_QWORD *google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

uint64_t google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::New()
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 16) = &google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  *(_QWORD *)result = &off_1E7938918;
  *(_QWORD *)(result + 8) = &google::protobuf::internal::fixed_address_empty_string;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::New(int a1, google::protobuf::internal::ArenaImpl *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse>(this);
}

uint64_t google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::GetArena(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::Clear(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(result + 8);
  if ((uint64_t *)v1 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v1 + 23) < 0)
    {
      **(_BYTE **)v1 = 0;
      *(_QWORD *)(v1 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v1 = 0;
      *(_BYTE *)(v1 + 23) = 0;
    }
  }
  v2 = *(_QWORD *)(result + 16);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  *(_DWORD *)(result + 32) &= 0xFFFFFFFC;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::IsInitialized()
{
  return 1;
}

void google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::CheckTypeAndMergeFrom(uint64_t a1, _DWORD *lpsrc)
{
  google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::MergeFromInternal(a1, lpsrc);
}

uint64_t google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::ByteSizeLong(_DWORD *a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v2 = a1[8];
  if ((v2 & 1) != 0)
  {
    v7 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 128))(a1);
    v8 = *(unsigned __int8 *)(v7 + 23);
    if ((v8 & 0x80u) != 0)
      v8 = *(_DWORD *)(v7 + 8);
    v3 = (int)(v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6)) + 1;
    if ((a1[8] & 2) != 0)
      goto LABEL_3;
LABEL_9:
    v6 = 0;
    return v6 + v3;
  }
  v3 = 0;
  if ((v2 & 2) == 0)
    goto LABEL_9;
LABEL_3:
  v4 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 136))(a1);
  v5 = *(unsigned __int8 *)(v4 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = *(_DWORD *)(v4 + 8);
  v6 = (int)(v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6)) + 1;
  return v6 + v3;
}

uint64_t google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::GetCachedSize(_DWORD *a1)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;

  v2 = a1[8];
  if ((v2 & 1) != 0)
  {
    v7 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 128))(a1);
    v8 = *(unsigned __int8 *)(v7 + 23);
    if ((v8 & 0x80u) != 0)
      v8 = *(_DWORD *)(v7 + 8);
    v3 = v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((a1[8] & 2) != 0)
      goto LABEL_3;
LABEL_9:
    v6 = 0;
    return v6 + v3;
  }
  v3 = 0;
  if ((v2 & 2) == 0)
    goto LABEL_9;
LABEL_3:
  v4 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 136))(a1);
  v5 = *(unsigned __int8 *)(v4 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = *(_DWORD *)(v4 + 8);
  v6 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  return v6 + v3;
}

unsigned __int8 *google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::InternalSerializeWithCachedSizesToArray(uint64_t a1, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  uint64_t v6;
  int64_t v7;
  const void *v8;
  char *v9;
  uint64_t v10;
  int64_t v11;
  const void *v12;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  if (*(char *)(v6 + 23) < 0)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7 > 127)
    {
LABEL_21:
      v9 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a3, 1, v6, a2);
      goto LABEL_11;
    }
  }
  else
  {
    v7 = *(unsigned __int8 *)(v6 + 23);
  }
  if (*(_QWORD *)a3 - (_QWORD)a2 + 14 < v7)
    goto LABEL_21;
  *a2 = 10;
  a2[1] = v7;
  if (*(char *)(v6 + 23) >= 0)
    v8 = (const void *)v6;
  else
    v8 = *(const void **)v6;
  memcpy(a2 + 2, v8, v7);
  v9 = &a2[v7 + 2];
LABEL_11:
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  if (*(_QWORD *)a3 <= (unint64_t)v9)
    v9 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v9);
  if (*(char *)(v10 + 23) < 0)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v11 > 127)
      return google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a3, 2, v10, v9);
  }
  else
  {
    v11 = *(unsigned __int8 *)(v10 + 23);
  }
  if (*(_QWORD *)a3 - (_QWORD)v9 + 14 < v11)
    return google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a3, 2, v10, v9);
  *v9 = 18;
  v9[1] = v11;
  if (*(char *)(v10 + 23) >= 0)
    v12 = (const void *)v10;
  else
    v12 = *(const void **)v10;
  memcpy(v9 + 2, v12, v11);
  return (unsigned __int8 *)&v9[v11 + 2];
}

uint64_t google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::key(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::value(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::MergeFromInternal(uint64_t a1, _DWORD *a2)
{
  int v2;
  std::string **v5;
  __int128 *v6;
  std::string **v7;
  __int128 *v8;

  v2 = a2[8];
  if (v2)
  {
    if ((v2 & 1) != 0)
    {
      v5 = (std::string **)(a1 + 8);
      if (*(uint64_t **)(a1 + 8) == &google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)(a1 + 8), *(google::protobuf::Arena **)(a1 + 24), (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
      v6 = (__int128 *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 128))(a2);
      if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)(a1 + 8), *(google::protobuf::Arena **)(a1 + 24), v6);
      else
        std::string::operator=(*v5, (const std::string *)v6);
      *(_DWORD *)(a1 + 32) |= 1u;
      v2 = a2[8];
    }
    if ((v2 & 2) != 0)
    {
      v7 = (std::string **)(a1 + 16);
      if (*(uint64_t **)(a1 + 16) == &google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)(a1 + 16), *(google::protobuf::Arena **)(a1 + 24), (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
      v8 = (__int128 *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 136))(a2);
      if (*v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)(a1 + 16), *(google::protobuf::Arena **)(a1 + 24), v8);
      else
        std::string::operator=(*v7, (const std::string *)v8);
      *(_DWORD *)(a1 + 32) |= 2u;
    }
  }
}

_QWORD *google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::~MapEntryImpl(_QWORD *a1)
{
  *a1 = &off_1E7938E98;
  if (!a1[3])
  {
    google::protobuf::internal::ArenaStringPtr::DestroyNoArena(a1[1]);
    google::protobuf::internal::ArenaStringPtr::DestroyNoArena(a1[2]);
  }
  return a1;
}

void google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::~MapEntryImpl(_QWORD *a1)
{
  google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::~MapEntryImpl(a1);
  JUMPOUT(0x1C3B8D890);
}

__n128 google::protobuf::Map<std::string,std::string>::erase(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  uint64_t v10;
  unint64_t v11;
  std::string *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD *v18;
  std::string *v19;
  _BOOL4 v20;
  unint64_t v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  std::string *v25;
  uint64_t v26;
  std::string *v27;
  uint64_t *v28;
  __n128 result;
  unint64_t v30;
  uint64_t v31;
  __n128 v32;
  unint64_t v33;
  char v34;
  _QWORD *v35;
  std::string v36[2];

  v6 = *a3;
  if (!*a2)
  {
    v7 = *(_QWORD *)(v6 + 24);
    if (v7)
    {
      if (*(char *)(v7 + 47) < 0)
        operator delete(*(void **)(v7 + 24));
      if (*(char *)(v7 + 23) < 0)
        operator delete(*(void **)v7);
      MEMORY[0x1C3B8D890](v7, 0x1012C403467C318);
      v6 = *a3;
    }
  }
  v32 = *(__n128 *)a3;
  v33 = a3[2];
  v8 = *(_QWORD *)(v6 + 32);
  if (v8)
    goto LABEL_9;
  v35 = 0;
  v9 = google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<google::protobuf::Map<std::string,std::string>::KeyValuePair>::revalidate_if_necessary((uint64_t)a3, (uint64_t *)&v35);
  v10 = a3[2];
  if (v9)
  {
    v11 = v10 + 1;
  }
  else
  {
    if ((v10 & 1) != 0)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v36, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 456);
      v12 = google::protobuf::internal::LogMessage::operator<<(v36, "CHECK failed: (bucket_index_ & 1) == (0u): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v34, (const char **)&v12->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v36[0].__r_.__value_.__l.__data_);
      v10 = a3[2];
    }
    v13 = *(_QWORD *)(*(_QWORD *)(a3[1] + 32) + 8 * v10);
    v14 = (uint64_t)v35;
    v15 = (_QWORD *)v35[1];
    if (v15)
    {
      do
      {
        v16 = v15;
        v15 = (_QWORD *)*v15;
      }
      while (v15);
    }
    else
    {
      do
      {
        v16 = *(_QWORD **)(v14 + 16);
        v17 = *v16 == v14;
        v14 = (uint64_t)v16;
      }
      while (!v17);
    }
    v35 = v16;
    if (v16 != (_QWORD *)(v13 + 8))
    {
      v8 = v16[4];
LABEL_9:
      *a3 = v8;
      goto LABEL_23;
    }
    v11 = v10 + 2;
  }
  google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<google::protobuf::Map<std::string,std::string>::KeyValuePair>::SearchFrom(a3, v11);
LABEL_23:
  v18 = (_QWORD *)a2[2];
  if ((_QWORD *)v32.n128_u64[1] != v18)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v36, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 606);
    v19 = google::protobuf::internal::LogMessage::operator<<(v36, "CHECK failed: (it.m_) == (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v35, (const char **)&v19->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v36[0].__r_.__value_.__l.__data_);
  }
  v35 = 0;
  v20 = google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<google::protobuf::Map<std::string,std::string>::KeyValuePair>::revalidate_if_necessary((uint64_t)&v32, (uint64_t *)&v35);
  v21 = v33;
  v22 = (void **)v32.n128_u64[0];
  v23 = v18[4];
  v24 = *(_QWORD *)(v23 + 8 * v33);
  if (v20)
  {
    if (!v24 || v24 == *(_QWORD *)(v23 + 8 * (v33 ^ 1)))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v36, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 612);
      v25 = google::protobuf::internal::LogMessage::operator<<(v36, "CHECK failed: TableEntryIsNonEmptyList(b): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v34, (const char **)&v25->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v36[0].__r_.__value_.__l.__data_);
      v24 = *(_QWORD *)(v18[4] + 8 * v21);
    }
    v26 = google::protobuf::Map<std::string,std::string>::InnerMap::EraseFromLinkedList((uint64_t)v22, v24);
    goto LABEL_37;
  }
  if (!v24 || v24 != *(_QWORD *)(v23 + 8 * (v33 ^ 1)))
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v36, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 617);
    v27 = google::protobuf::internal::LogMessage::operator<<(v36, "CHECK failed: TableEntryIsTree(b): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v34, (const char **)&v27->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v36[0].__r_.__value_.__l.__data_);
    v24 = *(_QWORD *)(v18[4] + 8 * v21);
  }
  v28 = (uint64_t *)std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::find<std::string *>(v24, (_QWORD *)v35[4]);
  if ((uint64_t *)(v24 + 8) != v28)
    std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::erase(v24, v28);
  if (!*(_QWORD *)(v24 + 24))
  {
    google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::DestroyTree(v18[5], (_QWORD **)v24);
    v26 = 0;
    *(_QWORD *)(v18[4] + ((8 * v21) | 8)) = 0;
    v21 &= ~1uLL;
LABEL_37:
    *(_QWORD *)(v18[4] + 8 * v21) = v26;
  }
  google::protobuf::Map<std::string,std::string>::InnerMap::DestroyNode((uint64_t)v18, v22);
  --*v18;
  if (v21 == v18[3])
  {
    v30 = v18[1];
    if (v21 < v30)
    {
      v31 = v18[4];
      do
      {
        if (*(_QWORD *)(v31 + 8 * v21))
          break;
        v18[3] = ++v21;
      }
      while (v30 != v21);
    }
  }
  result = *(__n128 *)a3;
  *(_OWORD *)a1 = *(_OWORD *)a3;
  *(_QWORD *)(a1 + 16) = a3[2];
  return result;
}

void sub_1BFC2ACAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

BOOL google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<google::protobuf::Map<std::string,std::string>::KeyValuePair>::revalidate_if_necessary(uint64_t a1, uint64_t *a2)
{
  unsigned __int8 *v4;
  uint64_t v5;
  std::string *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string::size_type v10;
  uint64_t v11;
  uint64_t v12;
  char v14;
  std::string v15[2];

  v4 = *(unsigned __int8 **)a1;
  if (!*(_QWORD *)a1 || (v5 = *(_QWORD *)(a1 + 8)) == 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 481);
    v6 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: node_ != NULL && m_ != NULL: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v14, (const char **)&v6->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
    v4 = *(unsigned __int8 **)a1;
    v5 = *(_QWORD *)(a1 + 8);
  }
  v7 = *(_QWORD *)(a1 + 16) & (*(_QWORD *)(v5 + 8) - 1);
  *(_QWORD *)(a1 + 16) = v7;
  v8 = *(_QWORD *)(v5 + 32);
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if ((unsigned __int8 *)v9 == v4)
    return 1;
  if (v9 && v9 != *(_QWORD *)(v8 + 8 * (v7 ^ 1)))
  {
    while (1)
    {
      v9 = *(_QWORD *)(v9 + 32);
      if (!v9)
        break;
      if ((unsigned __int8 *)v9 == v4)
        return 1;
    }
  }
  google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(v15, v5, v4, a2);
  v10 = v15[0].__r_.__value_.__r.__words[2];
  *(_QWORD *)(a1 + 16) = *((_QWORD *)&v15[0].__r_.__value_.__l + 2);
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
  v12 = *(_QWORD *)(v11 + 8 * v10);
  return !v12 || v12 != *(_QWORD *)(v11 + 8 * (v10 ^ 1));
}

void sub_1BFC2ADDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::Map<std::string,std::string>::InnerMap::EraseFromLinkedList(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a2;
  v3 = *(_QWORD *)(a2 + 32);
  if (v2 == a1)
    return v3;
  *(_QWORD *)(v2 + 32) = google::protobuf::Map<std::string,std::string>::InnerMap::EraseFromLinkedList();
  return v2;
}

void google::protobuf::Map<std::string,std::string>::InnerMap::DestroyNode(uint64_t a1, void **__p)
{
  if (*((char *)__p + 23) < 0)
    operator delete(*__p);
  if (!*(_QWORD *)(a1 + 40))
    operator delete(__p);
}

void std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::erase(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  BOOL v7;

  v4 = (uint64_t *)a2[1];
  if (v4)
  {
    do
    {
      v5 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  else
  {
    v6 = a2;
    do
    {
      v5 = (uint64_t *)v6[2];
      v7 = *v5 == (_QWORD)v6;
      v6 = v5;
    }
    while (!v7);
  }
  if (*(uint64_t **)a1 == a2)
    *(_QWORD *)a1 = v5;
  --*(_QWORD *)(a1 + 24);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), a2);
  if (!*(_QWORD *)(a1 + 16))
    operator delete(a2);
}

siri::dialogengine::PatternSchemaBinary::UsageMap *siri::dialogengine::PatternSchemaBinary::UsageMap::UsageMap(siri::dialogengine::PatternSchemaBinary::UsageMap *this)
{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = &off_1E79389B8;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 8) = 0;
  google::protobuf::Map<std::string,std::string>::Init((uint64_t *)this + 3);
  *((_DWORD *)this + 8) = 0;
  if (atomic_load(scc_info_UsageMap_PatternSchemaBinary_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_UsageMap_PatternSchemaBinary_2eproto);
  return this;
}

void sub_1BFC2AF80(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  google::protobuf::Map<std::string,std::string>::~Map(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<siri::dialogengine::PatternSchemaBinary::UsageMap>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void *google::protobuf::Map<std::string,std::string>::Init(uint64_t *a1)
{
  google::protobuf::internal::ArenaImpl *v2;
  _QWORD *AlignedAndAddCleanup;
  void *result;

  v2 = (google::protobuf::internal::ArenaImpl *)*a1;
  if (*a1)
  {
    if (*((_QWORD *)v2 + 14))
    AlignedAndAddCleanup = google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v2, 0x30uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::Map<std::string,std::string>::InnerMap>);
    *AlignedAndAddCleanup = 0;
    AlignedAndAddCleanup[2] = AlignedAndAddCleanup;
    AlignedAndAddCleanup[4] = 0;
    AlignedAndAddCleanup[5] = v2;
    result = google::protobuf::Map<std::string,std::string>::InnerMap::CreateEmptyTable((uint64_t)AlignedAndAddCleanup, 8uLL);
    AlignedAndAddCleanup[4] = result;
  }
  else
  {
    AlignedAndAddCleanup = (_QWORD *)operator new();
    *AlignedAndAddCleanup = 0;
    AlignedAndAddCleanup[2] = AlignedAndAddCleanup;
    AlignedAndAddCleanup[4] = 0;
    AlignedAndAddCleanup[5] = 0;
    result = google::protobuf::Map<std::string,std::string>::InnerMap::CreateEmptyTable((uint64_t)AlignedAndAddCleanup, 8uLL);
    AlignedAndAddCleanup[4] = result;
  }
  AlignedAndAddCleanup[3] = 8;
  AlignedAndAddCleanup[1] = 8;
  a1[2] = (uint64_t)AlignedAndAddCleanup;
  return result;
}

void sub_1BFC2B07C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10E0C40D5F42F35);
  _Unwind_Resume(a1);
}

_QWORD *google::protobuf::Map<std::string,std::string>::~Map(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  google::protobuf::Map<std::string,std::string>::clear(a1);
  if (!*a1)
  {
    v2 = a1[2];
    if (v2)
    {
      v3 = google::protobuf::Map<std::string,std::string>::InnerMap::~InnerMap(v2);
      MEMORY[0x1C3B8D890](v3, 0x10E0C40D5F42F35);
    }
  }
  return a1;
}

__n128 google::protobuf::Map<std::string,std::string>::clear(_QWORD *a1)
{
  uint64_t v2;
  __n128 result;
  __n128 i;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  __n128 v8;

  v8.n128_u64[0] = a1[2];
  google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<google::protobuf::Map<std::string,std::string>::KeyValuePair>::SearchFrom(&v7, *(_QWORD *)(v8.n128_u64[0] + 24));
  v2 = v7;
  result.n128_u64[0] = v8.n128_u64[0];
  for (i = v8; v7; i = v8)
  {
    v5 = v2;
    v6 = i;
    google::protobuf::Map<std::string,std::string>::erase((uint64_t)&v7, a1, &v5);
    v2 = v7;
    result = v8;
  }
  return result;
}

uint64_t google::protobuf::Map<std::string,std::string>::InnerMap::~InnerMap(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::string *v8;
  uint64_t *v9;
  void **v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  char v16;
  std::string v17[2];

  if (*(_QWORD *)(a1 + 32))
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      v3 = 0;
      do
      {
        v4 = *(_QWORD *)(a1 + 32);
        v5 = *(_QWORD *)(v4 + 8 * v3);
        if (v5)
        {
          if (v5 == *(_QWORD *)(v4 + 8 * (v3 ^ 1)))
          {
            v7 = v3 + 1;
            if ((v3 & 1) != 0 || v5 != *(_QWORD *)(v4 + 8 * v7))
            {
              google::protobuf::internal::LogMessage::LogMessage((uint64_t)v17, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 531);
              v8 = google::protobuf::internal::LogMessage::operator<<(v17, "CHECK failed: table_[b] == table_[b + 1] && (b & 1) == 0: ");
              google::protobuf::internal::LogFinisher::operator=((int)&v16, (const char **)&v8->__r_.__value_.__l.__data_);
              google::protobuf::internal::LogMessage::~LogMessage((void **)&v17[0].__r_.__value_.__l.__data_);
              v4 = *(_QWORD *)(a1 + 32);
            }
            *(_QWORD *)(v4 + 8 * v7) = 0;
            *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v3) = 0;
            v9 = *(uint64_t **)v5;
            do
            {
              v10 = (void **)v9[4];
              v11 = (uint64_t *)v9[1];
              v12 = v9;
              if (v11)
              {
                do
                {
                  v13 = v11;
                  v11 = (uint64_t *)*v11;
                }
                while (v11);
              }
              else
              {
                do
                {
                  v13 = (uint64_t *)v12[2];
                  v14 = *v13 == (_QWORD)v12;
                  v12 = v13;
                }
                while (!v14);
              }
              std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::erase(v5, v9);
              google::protobuf::Map<std::string,std::string>::InnerMap::DestroyNode(a1, v10);
              v9 = v13;
            }
            while (v13 != (uint64_t *)(v5 + 8));
            google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::DestroyTree(*(_QWORD *)(a1 + 40), (_QWORD **)v5);
            goto LABEL_20;
          }
          *(_QWORD *)(v4 + 8 * v3) = 0;
          do
          {
            v6 = *(_QWORD *)(v5 + 32);
            google::protobuf::Map<std::string,std::string>::InnerMap::DestroyNode(a1, (void **)v5);
            v5 = v6;
          }
          while (v6);
        }
        v7 = v3;
LABEL_20:
        v3 = v7 + 1;
        v2 = *(_QWORD *)(a1 + 8);
      }
      while (v7 + 1 < v2);
    }
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 24) = v2;
    if (!*(_QWORD *)(a1 + 40))
      operator delete(*(void **)(a1 + 32));
  }
  return a1;
}

void sub_1BFC2B308(void *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  __clang_call_terminate(a1);
}

void InitDefaultsscc_info_UsageMap_PatternSchemaBinary_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.cc", a4);
  siri::dialogengine::PatternSchemaBinary::UsageMap::UsageMap((siri::dialogengine::PatternSchemaBinary::UsageMap *)&siri::dialogengine::PatternSchemaBinary::_UsageMap_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&siri::dialogengine::PatternSchemaBinary::_UsageMap_default_instance_, v4);
}

void InitDefaultsscc_info_UsageMap_ValueEntry_DoNotUse_PatternSchemaBinary_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.cc", a4);
  qword_1EF584900 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  unk_1EF584908 = 0;
  dword_1EF584910 = 0;
  siri::dialogengine::PatternSchemaBinary::_UsageMap_ValueEntry_DoNotUse_default_instance_ = (uint64_t)&off_1E7938918;
  *(_QWORD *)algn_1EF5848F8 = &google::protobuf::internal::fixed_address_empty_string;
}

void siri::dialogengine::PatternSchemaBinary::UsageMap::~UsageMap(siri::dialogengine::PatternSchemaBinary::UsageMap *this)
{
  uint64_t *v1;

  *(_QWORD *)this = &off_1E79389B8;
  v1 = (uint64_t *)((char *)this + 8);
  google::protobuf::Map<std::string,std::string>::~Map((_QWORD *)this + 3);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
}

{
  uint64_t *v1;

  *(_QWORD *)this = &off_1E79389B8;
  v1 = (uint64_t *)((char *)this + 8);
  google::protobuf::Map<std::string,std::string>::~Map((_QWORD *)this + 3);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t *v1;

  *(_QWORD *)this = &off_1E79389B8;
  v1 = (uint64_t *)((char *)this + 8);
  google::protobuf::Map<std::string,std::string>::~Map((_QWORD *)this + 3);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
}

_QWORD *siri::dialogengine::PatternSchemaBinary::UsageMap::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "siri.dialogengine.PatternSchemaBinary.UsageMap");
}

siri::dialogengine::PatternSchemaBinary::UsageMap *siri::dialogengine::PatternSchemaBinary::UsageMap::New(siri::dialogengine::PatternSchemaBinary::UsageMap *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::UsageMap>(0);
}

siri::dialogengine::PatternSchemaBinary::UsageMap *siri::dialogengine::PatternSchemaBinary::UsageMap::New(siri::dialogengine::PatternSchemaBinary::UsageMap *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::UsageMap>(a2);
}

void siri::dialogengine::PatternSchemaBinary::UsageMap::Clear(siri::dialogengine::PatternSchemaBinary::UsageMap *this)
{
  google::protobuf::internal::InternalMetadataWithArenaLite *v2;
  char v3;

  google::protobuf::Map<std::string,std::string>::clear((_QWORD *)this + 3);
  v3 = *((_BYTE *)this + 8);
  v2 = (siri::dialogengine::PatternSchemaBinary::UsageMap *)((char *)this + 8);
  *((_DWORD *)v2 + 2) = 0;
  if ((v3 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v2);
}

uint64_t siri::dialogengine::PatternSchemaBinary::UsageMap::IsInitialized(siri::dialogengine::PatternSchemaBinary::UsageMap *this)
{
  return 1;
}

void siri::dialogengine::PatternSchemaBinary::UsageMap::CheckTypeAndMergeFrom(siri::dialogengine::PatternSchemaBinary::UsageMap *this, const google::protobuf::MessageLite *lpsrc)
{
  siri::dialogengine::PatternSchemaBinary::UsageMap::MergeFrom(this, lpsrc);
}

uint64_t siri::dialogengine::PatternSchemaBinary::UsageMap::ByteSizeLong(siri::dialogengine::PatternSchemaBinary::UsageMap *this)
{
  unsigned int *v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  int v6;
  unsigned int v7;
  int v8;
  int v9;
  signed int v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;

  v2 = (unsigned int *)*((_QWORD *)this + 5);
  v3 = *v2;
  *((_QWORD *)&v17 + 1) = v2;
  google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<google::protobuf::Map<std::string,std::string>::KeyValuePair>::SearchFrom(&v17, *((_QWORD *)v2 + 3));
  v15 = v17;
  v16 = v18;
  for (i = v17; (_QWORD)v15; i = v15)
  {
    v5 = *(_QWORD *)(i + 24);
    v6 = *(unsigned __int8 *)(v5 + 23);
    if ((v6 & 0x80u) != 0)
      v6 = *(_DWORD *)(v5 + 8);
    v7 = 9 * (__clz(v6 | 1) ^ 0x1F) + 73;
    v8 = *(unsigned __int8 *)(v5 + 47);
    v9 = *(_DWORD *)(v5 + 32);
    if ((v8 & 0x80u) == 0)
      v9 = v8;
    v10 = v6 + v9 + (v7 >> 6) + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 2;
    v3 += ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + (uint64_t)v10;
    google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++((unsigned __int8 **)&v15);
  }
  v11 = *((_QWORD *)this + 1);
  if ((v11 & 1) != 0)
  {
    v13 = v11 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v13 + 23) < 0)
      v14 = *(_QWORD *)(v13 + 8);
    else
      v14 = *(unsigned __int8 *)(v13 + 23);
    v3 += v14;
  }
  *((_DWORD *)this + 5) = v3;
  return v3;
}

uint64_t siri::dialogengine::PatternSchemaBinary::UsageMap::GetCachedSize(siri::dialogengine::PatternSchemaBinary::UsageMap *this)
{
  return *((unsigned int *)this + 5);
}

void siri::dialogengine::PatternSchemaBinary::UsageMap::MergeFrom(siri::dialogengine::PatternSchemaBinary::UsageMap *this, const siri::dialogengine::PatternSchemaBinary::UsageMap *a2)
{
  std::string *v4;
  uint64_t v5;
  char v6;
  std::string v7[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.cc", 3681);
    v4 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  google::protobuf::internal::MapFieldLite<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::MergeFrom((uint64_t *)this + 3, *((_QWORD *)a2 + 5));
}

void sub_1BFC2B6D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::MapFieldLite<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::MergeFrom(uint64_t *a1, uint64_t a2)
{
  uint64_t i;
  uint64_t v4;
  const std::string *v5;
  std::string *v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  *((_QWORD *)&v9 + 1) = a2;
  google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<google::protobuf::Map<std::string,std::string>::KeyValuePair>::SearchFrom(&v9, *(_QWORD *)(a2 + 24));
  v7 = v9;
  v8 = v10;
  for (i = v9; (_QWORD)v7; i = v7)
  {
    v4 = *(_QWORD *)(i + 24);
    v5 = (const std::string *)(v4 + 24);
    v6 = google::protobuf::Map<std::string,std::string>::operator[](a1, v4);
    std::string::operator=(v6, v5);
    google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++((unsigned __int8 **)&v7);
  }
}

siri::dialogengine::PatternSchemaBinary::Usage *siri::dialogengine::PatternSchemaBinary::Usage::Usage(siri::dialogengine::PatternSchemaBinary::Usage *this)
{
  *(_QWORD *)this = &off_1E7938A48;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  if (atomic_load(scc_info_Usage_PatternSchemaBinary_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Usage_PatternSchemaBinary_2eproto);
  *((_DWORD *)this + 8) = 0;
  return this;
}

void sub_1BFC2B7C0(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<siri::dialogengine::PatternSchemaBinary::Usage>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void siri::dialogengine::PatternSchemaBinary::Usage::~Usage(siri::dialogengine::PatternSchemaBinary::Usage *this)
{
  siri::dialogengine::PatternSchemaBinary::Usage::~Usage(this);
  JUMPOUT(0x1C3B8D890);
}

{
  *(_QWORD *)this = &off_1E7938A48;
  if (*((_DWORD *)this + 8))
    siri::dialogengine::PatternSchemaBinary::Usage::clear_usage_value((uint64_t)this);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *siri::dialogengine::PatternSchemaBinary::Usage::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "siri.dialogengine.PatternSchemaBinary.Usage");
}

siri::dialogengine::PatternSchemaBinary::Usage *siri::dialogengine::PatternSchemaBinary::Usage::New(siri::dialogengine::PatternSchemaBinary::Usage *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Usage>(0);
}

siri::dialogengine::PatternSchemaBinary::Usage *siri::dialogengine::PatternSchemaBinary::Usage::New(siri::dialogengine::PatternSchemaBinary::Usage *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Usage>(a2);
}

void siri::dialogengine::PatternSchemaBinary::Usage::Clear(siri::dialogengine::PatternSchemaBinary::Usage *this)
{
  google::protobuf::internal::InternalMetadataWithArenaLite *v2;
  char v3;

  siri::dialogengine::PatternSchemaBinary::Usage::clear_usage_value((uint64_t)this);
  v3 = *((_BYTE *)this + 8);
  v2 = (siri::dialogengine::PatternSchemaBinary::Usage *)((char *)this + 8);
  *((_DWORD *)v2 + 2) = 0;
  if ((v3 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v2);
}

uint64_t siri::dialogengine::PatternSchemaBinary::Usage::IsInitialized(siri::dialogengine::PatternSchemaBinary::Usage *this)
{
  return 1;
}

void siri::dialogengine::PatternSchemaBinary::Usage::CheckTypeAndMergeFrom(siri::dialogengine::PatternSchemaBinary::Usage *this, const google::protobuf::MessageLite *lpsrc)
{
  siri::dialogengine::PatternSchemaBinary::Usage::MergeFrom(this, lpsrc);
}

uint64_t siri::dialogengine::PatternSchemaBinary::Usage::ByteSizeLong(siri::dialogengine::PatternSchemaBinary::Usage *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v2 = *((_DWORD *)this + 8);
  if (v2 == 2)
  {
    v5 = *((_QWORD *)this + 3);
    v6 = *(unsigned __int8 *)(v5 + 23);
    v7 = *(_QWORD *)(v5 + 8);
    if ((v6 & 0x80u) == 0)
      v7 = v6;
    v4 = v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
    goto LABEL_7;
  }
  if (v2 == 1)
  {
    v3 = siri::dialogengine::PatternSchemaBinary::UsageMap::ByteSizeLong(*((siri::dialogengine::PatternSchemaBinary::UsageMap **)this
                                                                         + 3));
    v4 = v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6);
LABEL_7:
    result = v4 + 1;
    goto LABEL_9;
  }
  result = 0;
LABEL_9:
  v9 = *((_QWORD *)this + 1);
  if ((v9 & 1) != 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v10 + 23) < 0)
      v11 = *(_QWORD *)(v10 + 8);
    else
      v11 = *(unsigned __int8 *)(v10 + 23);
    result += v11;
  }
  *((_DWORD *)this + 5) = result;
  return result;
}

uint64_t siri::dialogengine::PatternSchemaBinary::Usage::GetCachedSize(siri::dialogengine::PatternSchemaBinary::Usage *this)
{
  return *((unsigned int *)this + 5);
}

void siri::dialogengine::PatternSchemaBinary::Usage::MergeFrom(siri::dialogengine::PatternSchemaBinary::Usage *this, const siri::dialogengine::PatternSchemaBinary::Usage *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  const std::string *v7;
  std::string *v8;
  siri::dialogengine::PatternSchemaBinary::UsageMap *v9;
  const siri::dialogengine::PatternSchemaBinary::UsageMap *v10;
  char v11;
  std::string v12[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.cc", 3935);
    v4 = google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v11, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v12[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  v6 = *((_DWORD *)a2 + 8);
  if (v6 == 1)
  {
    if (*((_DWORD *)this + 8) == 1)
    {
      v9 = (siri::dialogengine::PatternSchemaBinary::UsageMap *)*((_QWORD *)this + 3);
    }
    else
    {
      siri::dialogengine::PatternSchemaBinary::Usage::clear_usage_value((uint64_t)this);
      *((_DWORD *)this + 8) = 1;
      v9 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::UsageMap>(0);
      *((_QWORD *)this + 3) = v9;
      if (*((_DWORD *)a2 + 8) != 1)
      {
        v10 = (const siri::dialogengine::PatternSchemaBinary::UsageMap *)&siri::dialogengine::PatternSchemaBinary::_UsageMap_default_instance_;
        goto LABEL_17;
      }
    }
    v10 = (const siri::dialogengine::PatternSchemaBinary::UsageMap *)*((_QWORD *)a2 + 3);
LABEL_17:
    siri::dialogengine::PatternSchemaBinary::UsageMap::MergeFrom(v9, v10);
    return;
  }
  if (v6 != 2)
    return;
  v7 = (const std::string *)*((_QWORD *)a2 + 3);
  if (*((_DWORD *)this + 8) == 2)
  {
    v8 = (std::string *)*((_QWORD *)this + 3);
    if (v8 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
    {
      std::string::operator=(v8, v7);
      return;
    }
  }
  else
  {
    siri::dialogengine::PatternSchemaBinary::Usage::clear_usage_value((uint64_t)this);
    *((_DWORD *)this + 8) = 2;
    *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  }
  google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, (uint64_t)v7);
}

void sub_1BFC2BAE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void siri::dialogengine::PatternSchemaBinary::Override::MergeFrom(siri::dialogengine::PatternSchemaBinary::Override *this, const siri::dialogengine::PatternSchemaBinary::Override *a2)
{
  std::string *v4;
  uint64_t v5;
  const siri::dialogengine::PatternSchemaBinary::Usage *v6;
  std::string *v7;
  siri::dialogengine::PatternSchemaBinary::Usage *v8;
  const siri::dialogengine::PatternSchemaBinary::Usage *v9;
  char v10;
  std::string v11[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.cc", 4433);
    v4 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((int **)this + 3, (uint64_t)a2 + 24);
  if ((*((_DWORD *)a2 + 4) & 1) != 0)
  {
    v6 = (const siri::dialogengine::PatternSchemaBinary::Usage *)*((_QWORD *)a2 + 6);
    if (!v6)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.h", 6121);
      v7 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: !value || usage_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v7->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
      v6 = (const siri::dialogengine::PatternSchemaBinary::Usage *)*((_QWORD *)a2 + 6);
    }
    *((_DWORD *)this + 4) |= 1u;
    v8 = (siri::dialogengine::PatternSchemaBinary::Usage *)*((_QWORD *)this + 6);
    if (!v8)
    {
      v8 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Usage>(0);
      *((_QWORD *)this + 6) = v8;
      v6 = (const siri::dialogengine::PatternSchemaBinary::Usage *)*((_QWORD *)a2 + 6);
    }
    if (v6)
      v9 = v6;
    else
      v9 = (const siri::dialogengine::PatternSchemaBinary::Usage *)&siri::dialogengine::PatternSchemaBinary::_Usage_default_instance_;
    siri::dialogengine::PatternSchemaBinary::Usage::MergeFrom(v8, v9);
  }
}

void sub_1BFC2BC50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

siri::dialogengine::PatternSchemaBinary::Override *google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Override>(google::protobuf::internal::ArenaImpl *this)
{
  siri::dialogengine::PatternSchemaBinary::Override *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (siri::dialogengine::PatternSchemaBinary::Override *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x38uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<siri::dialogengine::PatternSchemaBinary::Override>);
    siri::dialogengine::PatternSchemaBinary::Override::Override(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (siri::dialogengine::PatternSchemaBinary::Override *)operator new();
    siri::dialogengine::PatternSchemaBinary::Override::Override(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFC2BCF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C40D196C376);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<siri::dialogengine::PatternSchemaBinary::Override>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

siri::dialogengine::PatternSchemaBinary::ModeConfiguration *siri::dialogengine::PatternSchemaBinary::ModeConfiguration::ModeConfiguration(siri::dialogengine::PatternSchemaBinary::ModeConfiguration *this)
{
  *(_QWORD *)this = &off_1E7938AD8;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  if (atomic_load(scc_info_ModeConfiguration_PatternSchemaBinary_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_ModeConfiguration_PatternSchemaBinary_2eproto);
  *((_QWORD *)this + 9) = 0;
  return this;
}

void sub_1BFC2BDF4(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v2 + 48);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v2 + 24));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void siri::dialogengine::PatternSchemaBinary::ModeConfiguration::~ModeConfiguration(siri::dialogengine::PatternSchemaBinary::ModeConfiguration *this)
{
  siri::dialogengine::PatternSchemaBinary::ModeConfiguration::~ModeConfiguration(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E7938AD8;
  if (this != (siri::dialogengine::PatternSchemaBinary::ModeConfiguration *)&siri::dialogengine::PatternSchemaBinary::_ModeConfiguration_default_instance_)
  {
    v2 = *((_QWORD *)this + 9);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField((char *)this + 48);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((siri::dialogengine::PatternSchemaBinary::ModeConfiguration *)((char *)this + 24));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *siri::dialogengine::PatternSchemaBinary::ModeConfiguration::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "siri.dialogengine.PatternSchemaBinary.ModeConfiguration");
}

siri::dialogengine::PatternSchemaBinary::ModeConfiguration *siri::dialogengine::PatternSchemaBinary::ModeConfiguration::New(siri::dialogengine::PatternSchemaBinary::ModeConfiguration *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::ModeConfiguration>(0);
}

siri::dialogengine::PatternSchemaBinary::ModeConfiguration *siri::dialogengine::PatternSchemaBinary::ModeConfiguration::New(siri::dialogengine::PatternSchemaBinary::ModeConfiguration *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::ModeConfiguration>(a2);
}

void siri::dialogengine::PatternSchemaBinary::ModeConfiguration::Clear(siri::dialogengine::PatternSchemaBinary::ModeConfiguration *this)
{
  uint64_t v2;
  siri::dialogengine::PatternSchemaBinary::Override **v3;
  siri::dialogengine::PatternSchemaBinary::Override *v4;
  std::string *v5;
  siri::dialogengine::PatternSchemaBinary::Usage *v6;
  std::string *v7;
  google::protobuf::internal::InternalMetadataWithArenaLite *v8;
  char v9;
  char v10;
  std::string v11[2];

  v2 = *((unsigned int *)this + 8);
  if ((v2 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v5 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v2)
  {
    v3 = (siri::dialogengine::PatternSchemaBinary::Override **)(*((_QWORD *)this + 5) + 8);
    do
    {
      v4 = *v3++;
      siri::dialogengine::PatternSchemaBinary::Override::Clear(v4);
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 8) = 0;
  }
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 48);
  if ((*((_BYTE *)this + 16) & 1) != 0)
  {
    v6 = (siri::dialogengine::PatternSchemaBinary::Usage *)*((_QWORD *)this + 9);
    if (!v6)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.cc", 4051);
      v7 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: usage_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v7->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
      v6 = (siri::dialogengine::PatternSchemaBinary::Usage *)*((_QWORD *)this + 9);
    }
    siri::dialogengine::PatternSchemaBinary::Usage::Clear(v6);
  }
  v9 = *((_BYTE *)this + 8);
  v8 = (siri::dialogengine::PatternSchemaBinary::ModeConfiguration *)((char *)this + 8);
  *((_DWORD *)v8 + 2) = 0;
  if ((v9 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v8);
}

void sub_1BFC2BF68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::PatternSchemaBinary::ModeConfiguration::IsInitialized(siri::dialogengine::PatternSchemaBinary::ModeConfiguration *this)
{
  return 1;
}

void siri::dialogengine::PatternSchemaBinary::ModeConfiguration::CheckTypeAndMergeFrom(siri::dialogengine::PatternSchemaBinary::ModeConfiguration *this, const google::protobuf::MessageLite *lpsrc)
{
  siri::dialogengine::PatternSchemaBinary::ModeConfiguration::MergeFrom(this, lpsrc);
}

uint64_t siri::dialogengine::PatternSchemaBinary::ModeConfiguration::ByteSizeLong(siri::dialogengine::PatternSchemaBinary::ModeConfiguration *this)
{
  uint64_t v2;
  uint64_t v3;
  siri::dialogengine::PatternSchemaBinary::Override **v4;
  uint64_t v5;
  siri::dialogengine::PatternSchemaBinary::Override *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;
  uint64_t v17;

  v2 = *((int *)this + 8);
  v3 = *((_QWORD *)this + 5);
  if (v3)
    v4 = (siri::dialogengine::PatternSchemaBinary::Override **)(v3 + 8);
  else
    v4 = 0;
  if ((_DWORD)v2)
  {
    v5 = 8 * v2;
    do
    {
      v6 = *v4++;
      v7 = siri::dialogengine::PatternSchemaBinary::Override::ByteSizeLong(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    v2 = 0;
  }
  v8 = *((unsigned int *)this + 14);
  v9 = v2 + v8;
  if ((int)v8 >= 1)
  {
    v10 = 0;
    do
    {
      v11 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 48, v10);
      v12 = *(unsigned __int8 *)(v11 + 23);
      if ((v12 & 0x80u) != 0)
        v12 = *(_QWORD *)(v11 + 8);
      v9 += v12 + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6);
      ++v10;
    }
    while ((_DWORD)v8 != v10);
  }
  if ((*((_BYTE *)this + 16) & 1) != 0)
  {
    v13 = siri::dialogengine::PatternSchemaBinary::Usage::ByteSizeLong(*((siri::dialogengine::PatternSchemaBinary::Usage **)this
                                                                       + 9));
    v9 += v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  v14 = *((_QWORD *)this + 1);
  if ((v14 & 1) != 0)
  {
    v16 = v14 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v16 + 23) < 0)
      v17 = *(_QWORD *)(v16 + 8);
    else
      v17 = *(unsigned __int8 *)(v16 + 23);
    v9 += v17;
  }
  *((_DWORD *)this + 5) = v9;
  return v9;
}

uint64_t siri::dialogengine::PatternSchemaBinary::ModeConfiguration::GetCachedSize(siri::dialogengine::PatternSchemaBinary::ModeConfiguration *this)
{
  return *((unsigned int *)this + 5);
}

google::protobuf::internal *siri::dialogengine::PatternSchemaBinary::ModeConfiguration::_InternalParse(siri::dialogengine::PatternSchemaBinary::ModeConfiguration *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  unsigned int *v5;
  unsigned int *v6;
  uint64_t *v7;
  google::protobuf::internal *TagFallback;
  const char *v9;
  unsigned int v10;
  BOOL v12;
  google::protobuf::internal *v13;
  char *v14;
  std::string::value_type *v15;
  int *v16;
  uint64_t v17;
  int v18;
  std::string *AlignedAndAddCleanup;
  google::protobuf::internal::ArenaImpl *v20;
  uint64_t v21;
  uint64_t v22;
  google::protobuf::internal *v23;
  google::protobuf::internal *v24;
  int *v25;
  uint64_t v26;
  int v27;
  siri::dialogengine::PatternSchemaBinary::Override *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  char *v32;
  char *SizeFallback;
  unsigned int v34;
  int v35;
  int v36;
  BOOL v37;
  int v38;
  int v39;
  unint64_t v40;
  siri::dialogengine::PatternSchemaBinary::Usage *v41;
  google::protobuf::internal *v43;

  v43 = a2;
  v5 = (unsigned int *)((char *)this + 48);
  v6 = (unsigned int *)((char *)this + 24);
  v7 = (uint64_t *)((char *)this + 8);
  do
  {
LABEL_2:
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v43, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v43;
    TagFallback = (google::protobuf::internal *)((char *)v43 + 1);
    LODWORD(v9) = *(unsigned __int8 *)v43;
    if ((*(char *)v43 & 0x80000000) == 0)
      goto LABEL_6;
    v9 = (const char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v43 + 2);
LABEL_6:
      v43 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v43, v9);
    v43 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    v10 = v9 >> 3;
    if (v9 >> 3 == 3)
    {
      if (v9 != 26)
        goto LABEL_13;
      v14 = (char *)TagFallback - 1;
      while (1)
      {
        v15 = v14 + 1;
        v43 = (google::protobuf::internal *)(v14 + 1);
        v16 = (int *)*((_QWORD *)this + 8);
        if (!v16)
          break;
        v17 = *((int *)this + 14);
        v18 = *v16;
        if ((int)v17 >= *v16)
        {
          if (v18 == *((_DWORD *)this + 15))
          {
LABEL_25:
            google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v18 + 1);
            v16 = (int *)*((_QWORD *)this + 8);
            v18 = *v16;
          }
          *v16 = v18 + 1;
          v20 = *(google::protobuf::internal::ArenaImpl **)v5;
          if (*(_QWORD *)v5)
          {
            if (*((_QWORD *)v20 + 14))
            AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v20, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
          }
          else
          {
            AlignedAndAddCleanup = (std::string *)operator new();
          }
          AlignedAndAddCleanup->__r_.__value_.__r.__words[0] = 0;
          AlignedAndAddCleanup->__r_.__value_.__l.__size_ = 0;
          AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = 0;
          v21 = *((_QWORD *)this + 8);
          v22 = *((int *)this + 14);
          *((_DWORD *)this + 14) = v22 + 1;
          *(_QWORD *)(v21 + 8 * v22 + 8) = AlignedAndAddCleanup;
          v15 = (std::string::value_type *)v43;
          goto LABEL_32;
        }
        *((_DWORD *)this + 14) = v17 + 1;
        AlignedAndAddCleanup = *(std::string **)&v16[2 * v17 + 2];
LABEL_32:
        v14 = google::protobuf::internal::InlineGreedyStringParser(AlignedAndAddCleanup, v15, (uint64_t)a3);
        v43 = (google::protobuf::internal *)v14;
        if (!v14)
          return 0;
        if (*(_QWORD *)a3 <= (unint64_t)v14 || *v14 != 26)
          goto LABEL_2;
      }
      v18 = *((_DWORD *)this + 15);
      goto LABEL_25;
    }
    if (v10 == 2)
    {
      if (v9 != 18)
        goto LABEL_13;
      v23 = (google::protobuf::internal *)((char *)TagFallback - 1);
      while (1)
      {
        v24 = (google::protobuf::internal *)((char *)v23 + 1);
        v43 = v24;
        v25 = (int *)*((_QWORD *)this + 5);
        if (!v25)
          break;
        v26 = *((int *)this + 8);
        v27 = *v25;
        if ((int)v26 < *v25)
        {
          *((_DWORD *)this + 8) = v26 + 1;
          v28 = *(siri::dialogengine::PatternSchemaBinary::Override **)&v25[2 * v26 + 2];
          goto LABEL_45;
        }
        if (v27 == *((_DWORD *)this + 9))
          goto LABEL_43;
LABEL_44:
        *v25 = v27 + 1;
        v28 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Override>(*((google::protobuf::internal::ArenaImpl **)this + 3));
        v29 = *((_QWORD *)this + 5);
        v30 = *((int *)this + 8);
        *((_DWORD *)this + 8) = v30 + 1;
        *(_QWORD *)(v29 + 8 * v30 + 8) = v28;
        v24 = v43;
LABEL_45:
        v31 = *(unsigned __int8 *)v24;
        if (*(char *)v24 < 0)
        {
          SizeFallback = google::protobuf::internal::ReadSizeFallback(v24, (const char *)*(unsigned __int8 *)v24);
          if (!SizeFallback)
            return 0;
          v32 = SizeFallback;
          v31 = v34;
        }
        else
        {
          v32 = (char *)v24 + 1;
        }
        v35 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v32, v31);
        v36 = *((_DWORD *)a3 + 22);
        v37 = __OFSUB__(v36--, 1);
        *((_DWORD *)a3 + 22) = v36;
        if (v36 < 0 != v37)
          return 0;
        v38 = v35;
        v23 = siri::dialogengine::PatternSchemaBinary::Override::_InternalParse(v28, (google::protobuf::internal *)v32, a3);
        if (!v23)
          return 0;
        ++*((_DWORD *)a3 + 22);
        if (*((_DWORD *)a3 + 20))
          return 0;
        v39 = *((_DWORD *)a3 + 7) + v38;
        *((_DWORD *)a3 + 7) = v39;
        v40 = *((_QWORD *)a3 + 1) + (v39 & (v39 >> 31));
        *(_QWORD *)a3 = v40;
        v43 = v23;
        if (v40 <= (unint64_t)v23 || *(_BYTE *)v23 != 18)
          goto LABEL_2;
      }
      v27 = *((_DWORD *)this + 9);
LABEL_43:
      google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v27 + 1);
      v25 = (int *)*((_QWORD *)this + 5);
      v27 = *v25;
      goto LABEL_44;
    }
    if (v10 == 1 && v9 == 10)
    {
      *((_DWORD *)this + 4) |= 1u;
      v41 = (siri::dialogengine::PatternSchemaBinary::Usage *)*((_QWORD *)this + 9);
      if (!v41)
      {
        v41 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Usage>(0);
        *((_QWORD *)this + 9) = v41;
        TagFallback = v43;
      }
      v13 = (google::protobuf::internal *)google::protobuf::internal::ParseContext::ParseMessage<siri::dialogengine::PatternSchemaBinary::Usage>(a3, v41, TagFallback);
      goto LABEL_58;
    }
LABEL_13:
    if ((_DWORD)v9)
      v12 = (v9 & 7) == 4;
    else
      v12 = 1;
    if (v12)
    {
      *((_DWORD *)a3 + 20) = (_DWORD)v9 - 1;
      return TagFallback;
    }
    v13 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v9, v7, TagFallback, a3);
LABEL_58:
    v43 = v13;
  }
  while (v13);
  return 0;
}

unsigned __int8 *siri::dialogengine::PatternSchemaBinary::ModeConfiguration::InternalSerializeWithCachedSizesToArray(siri::dialogengine::PatternSchemaBinary::ModeConfiguration *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  char *v4;
  siri::dialogengine::PatternSchemaBinary::Usage *v6;
  unsigned int v7;
  char *v8;
  unsigned int v9;
  _BYTE *v10;
  _BYTE *v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int v15;
  std::string *v16;
  std::string *v17;
  siri::dialogengine::PatternSchemaBinary::Override *v18;
  unsigned int v19;
  char *v20;
  unsigned int v21;
  _BYTE *v22;
  _BYTE *v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  int i;
  uint64_t v28;
  int64_t v29;
  const void *v30;
  uint64_t v31;
  unint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  char v37;
  std::string v38[2];

  v4 = a2;
  if ((*((_BYTE *)this + 16) & 1) != 0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v6 = (siri::dialogengine::PatternSchemaBinary::Usage *)*((_QWORD *)this + 9);
    *v4 = 10;
    v7 = *((_DWORD *)v6 + 5);
    if (v7 > 0x7F)
    {
      v4[1] = v7 | 0x80;
      v9 = v7 >> 7;
      if (v7 >> 14)
      {
        v10 = v4 + 2;
        do
        {
          v11 = v10;
          *v10++ = v9 | 0x80;
          v12 = v9 >> 7;
          v13 = v9 >> 14;
          v9 >>= 7;
        }
        while (v13);
        v8 = v11 + 2;
        *v10 = v12;
      }
      else
      {
        v4[2] = v9;
        v8 = v4 + 3;
      }
    }
    else
    {
      v4[1] = v7;
      v8 = v4 + 2;
    }
    v4 = (char *)siri::dialogengine::PatternSchemaBinary::Usage::InternalSerializeWithCachedSizesToArray(v6, v8, a3);
  }
  v14 = *((_DWORD *)this + 8);
  if (v14)
  {
    v15 = 0;
    while ((unint64_t)v4 < *(_QWORD *)a3)
    {
      if (v15 < 0)
        goto LABEL_16;
LABEL_17:
      if (*((_DWORD *)this + 8) <= v15)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v38, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1539);
        v17 = google::protobuf::internal::LogMessage::operator<<(v38, "CHECK failed: (index) < (current_size_): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v37, (const char **)&v17->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v38[0].__r_.__value_.__l.__data_);
      }
      v18 = *(siri::dialogengine::PatternSchemaBinary::Override **)(*((_QWORD *)this + 5) + 8 * v15 + 8);
      *v4 = 18;
      v19 = *((_DWORD *)v18 + 5);
      if (v19 > 0x7F)
      {
        v4[1] = v19 | 0x80;
        v21 = v19 >> 7;
        if (v19 >> 14)
        {
          v22 = v4 + 2;
          do
          {
            v23 = v22;
            *v22++ = v21 | 0x80;
            v24 = v21 >> 7;
            v25 = v21 >> 14;
            v21 >>= 7;
          }
          while (v25);
          v20 = v23 + 2;
          *v22 = v24;
        }
        else
        {
          v4[2] = v21;
          v20 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v19;
        v20 = v4 + 2;
      }
      v4 = (char *)siri::dialogengine::PatternSchemaBinary::Override::InternalSerializeWithCachedSizesToArray(v18, v20, a3);
      if (++v15 == v14)
        goto LABEL_30;
    }
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    if ((v15 & 0x80000000) == 0)
      goto LABEL_17;
LABEL_16:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v38, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v16 = google::protobuf::internal::LogMessage::operator<<(v38, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v37, (const char **)&v16->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v38[0].__r_.__value_.__l.__data_);
    goto LABEL_17;
  }
LABEL_30:
  v26 = *((_DWORD *)this + 14);
  if (v26 >= 1)
  {
    for (i = 0; v26 != i; ++i)
    {
      v28 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 48, i);
      if (*(char *)(v28 + 23) < 0)
      {
        v29 = *(_QWORD *)(v28 + 8);
        if (v29 > 127)
          goto LABEL_42;
      }
      else
      {
        v29 = *(unsigned __int8 *)(v28 + 23);
      }
      if (*(_QWORD *)a3 - (_QWORD)v4 + 14 >= v29)
      {
        *v4 = 26;
        v4[1] = v29;
        if (*(char *)(v28 + 23) >= 0)
          v30 = (const void *)v28;
        else
          v30 = *(const void **)v28;
        memcpy(v4 + 2, v30, v29);
        v4 += v29 + 2;
        continue;
      }
LABEL_42:
      v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a3, 3, v28, v4);
    }
  }
  v31 = *((_QWORD *)this + 1);
  if ((v31 & 1) == 0)
    return (unsigned __int8 *)v4;
  v33 = v31 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v33 + 23) < 0)
  {
    v35 = *(void **)v33;
    v34 = *(_QWORD *)(v33 + 8);
  }
  else
  {
    LODWORD(v34) = *(unsigned __int8 *)(v33 + 23);
    v35 = (void *)v33;
  }
  if (*(_QWORD *)a3 - (_QWORD)v4 >= (int)v34)
  {
    v36 = (int)v34;
    memcpy(v4, v35, (int)v34);
    v4 += v36;
    return (unsigned __int8 *)v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v35, v34, (unsigned __int8 *)v4);
}

void sub_1BFC2C864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void siri::dialogengine::PatternSchemaBinary::ModeConfiguration::MergeFrom(siri::dialogengine::PatternSchemaBinary::ModeConfiguration *this, const siri::dialogengine::PatternSchemaBinary::ModeConfiguration *a2)
{
  std::string *v4;
  uint64_t v5;
  const siri::dialogengine::PatternSchemaBinary::Usage *v6;
  std::string *v7;
  siri::dialogengine::PatternSchemaBinary::Usage *v8;
  const siri::dialogengine::PatternSchemaBinary::Usage *v9;
  char v10;
  std::string v11[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.cc", 4202);
    v4 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::Override>::TypeHandler>((int **)this + 3, (uint64_t)a2 + 24);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((int **)this + 6, (uint64_t)a2 + 48);
  if ((*((_DWORD *)a2 + 4) & 1) != 0)
  {
    v6 = (const siri::dialogengine::PatternSchemaBinary::Usage *)*((_QWORD *)a2 + 9);
    if (!v6)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.h", 5944);
      v7 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: !value || usage_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v7->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
      v6 = (const siri::dialogengine::PatternSchemaBinary::Usage *)*((_QWORD *)a2 + 9);
    }
    *((_DWORD *)this + 4) |= 1u;
    v8 = (siri::dialogengine::PatternSchemaBinary::Usage *)*((_QWORD *)this + 9);
    if (!v8)
    {
      v8 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Usage>(0);
      *((_QWORD *)this + 9) = v8;
      v6 = (const siri::dialogengine::PatternSchemaBinary::Usage *)*((_QWORD *)a2 + 9);
    }
    if (v6)
      v9 = v6;
    else
      v9 = (const siri::dialogengine::PatternSchemaBinary::Usage *)&siri::dialogengine::PatternSchemaBinary::_Usage_default_instance_;
    siri::dialogengine::PatternSchemaBinary::Usage::MergeFrom(v8, v9);
  }
}

void sub_1BFC2C9A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::Override>::TypeHandler>(int **this, uint64_t a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  siri::dialogengine::PatternSchemaBinary::Override **v13;
  siri::dialogengine::PatternSchemaBinary::Override **v14;
  siri::dialogengine::PatternSchemaBinary::Override *v15;
  siri::dialogengine::PatternSchemaBinary::Override *v16;
  siri::dialogengine::PatternSchemaBinary::Override *v17;
  google::protobuf::internal::ArenaImpl *v18;
  int v19;
  uint64_t v20;
  siri::dialogengine::PatternSchemaBinary::Override **v21;
  siri::dialogengine::PatternSchemaBinary::Override **v22;
  siri::dialogengine::PatternSchemaBinary::Override *v23;
  siri::dialogengine::PatternSchemaBinary::Override *v24;
  int v25;
  int *v26;
  char v27;
  std::string v28[2];

  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    v9 = *this[2];
    v10 = *((int *)this + 2);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (siri::dialogengine::PatternSchemaBinary::Override **)(v6 + 8);
      v14 = (siri::dialogengine::PatternSchemaBinary::Override **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<siri::dialogengine::PatternSchemaBinary::Override>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (siri::dialogengine::PatternSchemaBinary::Override **)((char *)v8 + v20);
      v22 = (siri::dialogengine::PatternSchemaBinary::Override **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Override>(v18);
        google::protobuf::internal::GenericTypeHandler<siri::dialogengine::PatternSchemaBinary::Override>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25)
      *v26 = v25;
  }
}

void sub_1BFC2CB14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<siri::dialogengine::PatternSchemaBinary::Override>::Merge(siri::dialogengine::PatternSchemaBinary::Override *a1, siri::dialogengine::PatternSchemaBinary::Override *this)
{
  siri::dialogengine::PatternSchemaBinary::Override::MergeFrom(this, a1);
}

siri::dialogengine::PatternSchemaBinary::ModeConfiguration *google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::ModeConfiguration>(google::protobuf::internal::ArenaImpl *this)
{
  siri::dialogengine::PatternSchemaBinary::ModeConfiguration *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (siri::dialogengine::PatternSchemaBinary::ModeConfiguration *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x50uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<siri::dialogengine::PatternSchemaBinary::ModeConfiguration>);
    siri::dialogengine::PatternSchemaBinary::ModeConfiguration::ModeConfiguration(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (siri::dialogengine::PatternSchemaBinary::ModeConfiguration *)operator new();
    siri::dialogengine::PatternSchemaBinary::ModeConfiguration::ModeConfiguration(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFC2CBC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C4030D5F432);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<siri::dialogengine::PatternSchemaBinary::ModeConfiguration>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

siri::dialogengine::PatternSchemaBinary::PatternComponent *siri::dialogengine::PatternSchemaBinary::PatternComponent::PatternComponent(siri::dialogengine::PatternSchemaBinary::PatternComponent *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)this = &off_1E79385A8;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  if (atomic_load(scc_info_PatternComponent_PatternSchemaBinary_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_PatternComponent_PatternSchemaBinary_2eproto);
  *((_QWORD *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 7) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 8) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 9) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 10) = 0;
  return this;
}

void sub_1BFC2CCD8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v1 + 24);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

void siri::dialogengine::PatternSchemaBinary::PatternComponent::~PatternComponent(siri::dialogengine::PatternSchemaBinary::PatternComponent *this)
{
  siri::dialogengine::PatternSchemaBinary::PatternComponent::~PatternComponent(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)this = &off_1E79385A8;
  v2 = *((_QWORD *)this + 6);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 7);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1C3B8D890](v4, 0x1012C40EC159624);
  }
  v6 = *((_QWORD *)this + 8);
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
  {
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    MEMORY[0x1C3B8D890](v6, 0x1012C40EC159624);
  }
  v8 = *((_QWORD *)this + 9);
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v8 != 0)
  {
    if (*(char *)(v8 + 23) < 0)
      operator delete(*(void **)v8);
    MEMORY[0x1C3B8D890](v8, 0x1012C40EC159624);
  }
  if (this != (siri::dialogengine::PatternSchemaBinary::PatternComponent *)&siri::dialogengine::PatternSchemaBinary::_PatternComponent_default_instance_)
  {
    v10 = *((_QWORD *)this + 10);
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v11 = *((_QWORD *)this + 11);
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = *((_QWORD *)this + 12);
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField((char *)this + 24);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *siri::dialogengine::PatternSchemaBinary::PatternComponent::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "siri.dialogengine.PatternSchemaBinary.PatternComponent");
}

siri::dialogengine::PatternSchemaBinary::PatternComponent *siri::dialogengine::PatternSchemaBinary::PatternComponent::New(siri::dialogengine::PatternSchemaBinary::PatternComponent *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::PatternComponent>(0);
}

siri::dialogengine::PatternSchemaBinary::PatternComponent *siri::dialogengine::PatternSchemaBinary::PatternComponent::New(siri::dialogengine::PatternSchemaBinary::PatternComponent *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::PatternComponent>(a2);
}

void siri::dialogengine::PatternSchemaBinary::PatternComponent::Clear(siri::dialogengine::PatternSchemaBinary::PatternComponent *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  siri::dialogengine::PatternSchemaBinary::ModeConfiguration *v7;
  std::string *v8;
  siri::dialogengine::PatternSchemaBinary::ModeConfiguration *v9;
  std::string *v10;
  siri::dialogengine::PatternSchemaBinary::Usage *v11;
  std::string *v12;
  google::protobuf::internal::InternalMetadataWithArenaLite *v13;
  char v14;
  char v15;
  std::string v16[2];

  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24);
  v2 = *((_DWORD *)this + 4);
  if ((v2 & 0x7F) == 0)
    goto LABEL_35;
  if ((v2 & 1) == 0)
  {
    if ((v2 & 2) == 0)
      goto LABEL_4;
LABEL_14:
    v4 = *((_QWORD *)this + 7);
    if (*(char *)(v4 + 23) < 0)
    {
      **(_BYTE **)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      if ((v2 & 4) != 0)
        goto LABEL_18;
    }
    else
    {
      *(_BYTE *)v4 = 0;
      *(_BYTE *)(v4 + 23) = 0;
      if ((v2 & 4) != 0)
        goto LABEL_18;
    }
LABEL_5:
    if ((v2 & 8) == 0)
      goto LABEL_6;
LABEL_22:
    v6 = *((_QWORD *)this + 9);
    if (*(char *)(v6 + 23) < 0)
    {
      **(_BYTE **)v6 = 0;
      *(_QWORD *)(v6 + 8) = 0;
      if ((v2 & 0x10) != 0)
        goto LABEL_26;
    }
    else
    {
      *(_BYTE *)v6 = 0;
      *(_BYTE *)(v6 + 23) = 0;
      if ((v2 & 0x10) != 0)
        goto LABEL_26;
    }
LABEL_7:
    if ((v2 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_29;
  }
  v3 = *((_QWORD *)this + 6);
  if (*(char *)(v3 + 23) < 0)
  {
    **(_BYTE **)v3 = 0;
    *(_QWORD *)(v3 + 8) = 0;
    if ((v2 & 2) != 0)
      goto LABEL_14;
  }
  else
  {
    *(_BYTE *)v3 = 0;
    *(_BYTE *)(v3 + 23) = 0;
    if ((v2 & 2) != 0)
      goto LABEL_14;
  }
LABEL_4:
  if ((v2 & 4) == 0)
    goto LABEL_5;
LABEL_18:
  v5 = *((_QWORD *)this + 8);
  if (*(char *)(v5 + 23) < 0)
  {
    **(_BYTE **)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    if ((v2 & 8) != 0)
      goto LABEL_22;
  }
  else
  {
    *(_BYTE *)v5 = 0;
    *(_BYTE *)(v5 + 23) = 0;
    if ((v2 & 8) != 0)
      goto LABEL_22;
  }
LABEL_6:
  if ((v2 & 0x10) == 0)
    goto LABEL_7;
LABEL_26:
  v7 = (siri::dialogengine::PatternSchemaBinary::ModeConfiguration *)*((_QWORD *)this + 10);
  if (!v7)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.cc", 2235);
    v8 = google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: full_ != nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v15, (const char **)&v8->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
    v7 = (siri::dialogengine::PatternSchemaBinary::ModeConfiguration *)*((_QWORD *)this + 10);
  }
  siri::dialogengine::PatternSchemaBinary::ModeConfiguration::Clear(v7);
  if ((v2 & 0x20) == 0)
  {
LABEL_8:
    if ((v2 & 0x40) == 0)
      goto LABEL_35;
    goto LABEL_32;
  }
LABEL_29:
  v9 = (siri::dialogengine::PatternSchemaBinary::ModeConfiguration *)*((_QWORD *)this + 11);
  if (!v9)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.cc", 2239);
    v10 = google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: supporting_ != nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v15, (const char **)&v10->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
    v9 = (siri::dialogengine::PatternSchemaBinary::ModeConfiguration *)*((_QWORD *)this + 11);
  }
  siri::dialogengine::PatternSchemaBinary::ModeConfiguration::Clear(v9);
  if ((v2 & 0x40) != 0)
  {
LABEL_32:
    v11 = (siri::dialogengine::PatternSchemaBinary::Usage *)*((_QWORD *)this + 12);
    if (!v11)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.cc", 2243);
      v12 = google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: usage_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v15, (const char **)&v12->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
      v11 = (siri::dialogengine::PatternSchemaBinary::Usage *)*((_QWORD *)this + 12);
    }
    siri::dialogengine::PatternSchemaBinary::Usage::Clear(v11);
  }
LABEL_35:
  v14 = *((_BYTE *)this + 8);
  v13 = (siri::dialogengine::PatternSchemaBinary::PatternComponent *)((char *)this + 8);
  *((_DWORD *)v13 + 2) = 0;
  if ((v14 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v13);
}

void sub_1BFC2CF44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::PatternSchemaBinary::PatternComponent::IsInitialized(siri::dialogengine::PatternSchemaBinary::PatternComponent *this)
{
  return 1;
}

void siri::dialogengine::PatternSchemaBinary::PatternComponent::CheckTypeAndMergeFrom(siri::dialogengine::PatternSchemaBinary::PatternComponent *this, const google::protobuf::MessageLite *lpsrc)
{
  siri::dialogengine::PatternSchemaBinary::PatternComponent::MergeFrom(this, lpsrc);
}

uint64_t siri::dialogengine::PatternSchemaBinary::PatternComponent::ByteSizeLong(siri::dialogengine::PatternSchemaBinary::PatternComponent *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;

  v2 = *((_DWORD *)this + 8);
  if (v2 < 1)
  {
    v4 = *((unsigned int *)this + 8);
  }
  else
  {
    v3 = 0;
    v4 = *((unsigned int *)this + 8);
    do
    {
      v5 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24, v3);
      v6 = *(unsigned __int8 *)(v5 + 23);
      if ((v6 & 0x80u) != 0)
        v6 = *(_QWORD *)(v5 + 8);
      v4 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  v7 = *((_DWORD *)this + 4);
  if ((v7 & 0x7F) == 0)
    goto LABEL_17;
  if ((v7 & 1) != 0)
  {
    v11 = *((_QWORD *)this + 6);
    v12 = *(unsigned __int8 *)(v11 + 23);
    v13 = *(_QWORD *)(v11 + 8);
    if ((v12 & 0x80u) == 0)
      v13 = v12;
    v4 += v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v7 & 2) == 0)
    {
LABEL_11:
      if ((v7 & 4) == 0)
        goto LABEL_12;
      goto LABEL_25;
    }
  }
  else if ((v7 & 2) == 0)
  {
    goto LABEL_11;
  }
  v14 = *((_QWORD *)this + 7);
  v15 = *(unsigned __int8 *)(v14 + 23);
  v16 = *(_QWORD *)(v14 + 8);
  if ((v15 & 0x80u) == 0)
    v16 = v15;
  v4 += v16 + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v7 & 4) == 0)
  {
LABEL_12:
    if ((v7 & 8) == 0)
      goto LABEL_13;
    goto LABEL_28;
  }
LABEL_25:
  v17 = *((_QWORD *)this + 8);
  v18 = *(unsigned __int8 *)(v17 + 23);
  v19 = *(_QWORD *)(v17 + 8);
  if ((v18 & 0x80u) == 0)
    v19 = v18;
  v4 += v19 + ((9 * (__clz(v19 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v7 & 8) == 0)
  {
LABEL_13:
    if ((v7 & 0x10) == 0)
      goto LABEL_14;
LABEL_31:
    v23 = siri::dialogengine::PatternSchemaBinary::ModeConfiguration::ByteSizeLong(*((siri::dialogengine::PatternSchemaBinary::ModeConfiguration **)this
                                                                                   + 10));
    v4 += v23 + ((9 * (__clz(v23 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v7 & 0x20) == 0)
    {
LABEL_15:
      if ((v7 & 0x40) == 0)
        goto LABEL_17;
      goto LABEL_16;
    }
    goto LABEL_32;
  }
LABEL_28:
  v20 = *((_QWORD *)this + 9);
  v21 = *(unsigned __int8 *)(v20 + 23);
  v22 = *(_QWORD *)(v20 + 8);
  if ((v21 & 0x80u) == 0)
    v22 = v21;
  v4 += v22 + ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v7 & 0x10) != 0)
    goto LABEL_31;
LABEL_14:
  if ((v7 & 0x20) == 0)
    goto LABEL_15;
LABEL_32:
  v24 = siri::dialogengine::PatternSchemaBinary::ModeConfiguration::ByteSizeLong(*((siri::dialogengine::PatternSchemaBinary::ModeConfiguration **)this
                                                                                 + 11));
  v4 += v24 + ((9 * (__clz(v24 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v7 & 0x40) != 0)
  {
LABEL_16:
    v8 = siri::dialogengine::PatternSchemaBinary::Usage::ByteSizeLong(*((siri::dialogengine::PatternSchemaBinary::Usage **)this
                                                                      + 12));
    v4 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_17:
  v9 = *((_QWORD *)this + 1);
  if ((v9 & 1) != 0)
  {
    v25 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v25 + 23) < 0)
      v26 = *(_QWORD *)(v25 + 8);
    else
      v26 = *(unsigned __int8 *)(v25 + 23);
    v4 += v26;
  }
  *((_DWORD *)this + 5) = v4;
  return v4;
}

uint64_t siri::dialogengine::PatternSchemaBinary::PatternComponent::GetCachedSize(siri::dialogengine::PatternSchemaBinary::PatternComponent *this)
{
  return *((unsigned int *)this + 5);
}

google::protobuf::internal *siri::dialogengine::PatternSchemaBinary::PatternComponent::_InternalParse(siri::dialogengine::PatternSchemaBinary::PatternComponent *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  unsigned int *v5;
  std::string **v6;
  std::string **v7;
  uint64_t *v8;
  google::protobuf::internal *TagFallback;
  const char *v10;
  std::string *v11;
  std::string **v12;
  google::protobuf::internal *v13;
  siri::dialogengine::PatternSchemaBinary::ModeConfiguration *v14;
  char *v15;
  std::string::value_type *v16;
  int *v17;
  uint64_t v18;
  int v19;
  std::string *AlignedAndAddCleanup;
  google::protobuf::internal::ArenaImpl *v21;
  uint64_t v22;
  uint64_t v23;
  siri::dialogengine::PatternSchemaBinary::Usage *v24;
  BOOL v25;
  std::string **v27;
  std::string **v28;
  google::protobuf::internal *v29;

  v5 = (unsigned int *)((char *)this + 24);
  v28 = (std::string **)((char *)this + 72);
  v29 = a2;
  v27 = (std::string **)((char *)this + 64);
  v6 = (std::string **)((char *)this + 56);
  v7 = (std::string **)((char *)this + 48);
  v8 = (uint64_t *)((char *)this + 8);
LABEL_2:
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v29, *((_DWORD *)a3 + 23)) & 1) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v29 + 1);
      LODWORD(v10) = *(unsigned __int8 *)v29;
      if (*(char *)v29 < 0)
      {
        v10 = (const char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
        if (*(char *)TagFallback < 0)
        {
          TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v29, v10);
          v29 = TagFallback;
          if (!TagFallback)
            return TagFallback;
LABEL_7:
          switch(v10 >> 3)
          {
            case 1u:
              if (v10 != 10)
                goto LABEL_55;
              *((_DWORD *)this + 4) |= 1u;
              v11 = (std::string *)*((_QWORD *)this + 6);
              if (v11 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_24;
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v7, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              v11 = *v7;
              goto LABEL_23;
            case 2u:
              if (v10 != 18)
                goto LABEL_55;
              *((_DWORD *)this + 4) |= 2u;
              v11 = (std::string *)*((_QWORD *)this + 7);
              if (v11 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_24;
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              v11 = *v6;
              goto LABEL_23;
            case 3u:
              if (v10 != 26)
                goto LABEL_55;
              *((_DWORD *)this + 4) |= 4u;
              v11 = (std::string *)*((_QWORD *)this + 8);
              if (v11 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_24;
              v12 = v27;
              goto LABEL_22;
            case 4u:
              if (v10 != 34)
                goto LABEL_55;
              *((_DWORD *)this + 4) |= 8u;
              v11 = (std::string *)*((_QWORD *)this + 9);
              if (v11 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                goto LABEL_24;
              v12 = v28;
LABEL_22:
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v12, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              v11 = *v12;
LABEL_23:
              TagFallback = v29;
LABEL_24:
              v13 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v11, (std::string::value_type *)TagFallback, (uint64_t)a3);
              goto LABEL_60;
            case 5u:
              if (v10 != 42)
                goto LABEL_55;
              *((_DWORD *)this + 4) |= 0x10u;
              v14 = (siri::dialogengine::PatternSchemaBinary::ModeConfiguration *)*((_QWORD *)this + 10);
              if (v14)
                goto LABEL_32;
              v14 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::ModeConfiguration>(0);
              *((_QWORD *)this + 10) = v14;
              goto LABEL_31;
            case 6u:
              if (v10 != 50)
                goto LABEL_55;
              *((_DWORD *)this + 4) |= 0x20u;
              v14 = (siri::dialogengine::PatternSchemaBinary::ModeConfiguration *)*((_QWORD *)this + 11);
              if (v14)
                goto LABEL_32;
              v14 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::ModeConfiguration>(0);
              *((_QWORD *)this + 11) = v14;
LABEL_31:
              TagFallback = v29;
LABEL_32:
              v13 = (google::protobuf::internal *)google::protobuf::internal::ParseContext::ParseMessage<siri::dialogengine::PatternSchemaBinary::ModeConfiguration>(a3, v14, TagFallback);
              goto LABEL_60;
            case 7u:
              if (v10 != 58)
                goto LABEL_55;
              v15 = (char *)TagFallback - 1;
              break;
            case 8u:
              if (v10 != 66)
                goto LABEL_55;
              *((_DWORD *)this + 4) |= 0x40u;
              v24 = (siri::dialogengine::PatternSchemaBinary::Usage *)*((_QWORD *)this + 12);
              if (!v24)
              {
                v24 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Usage>(0);
                *((_QWORD *)this + 12) = v24;
                TagFallback = v29;
              }
              v13 = (google::protobuf::internal *)google::protobuf::internal::ParseContext::ParseMessage<siri::dialogengine::PatternSchemaBinary::Usage>(a3, v24, TagFallback);
              goto LABEL_60;
            default:
LABEL_55:
              if ((_DWORD)v10)
                v25 = (v10 & 7) == 4;
              else
                v25 = 1;
              if (v25)
              {
                *((_DWORD *)a3 + 20) = (_DWORD)v10 - 1;
                return TagFallback;
              }
              v13 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v10, v8, TagFallback, a3);
LABEL_60:
              v29 = v13;
              if (v13)
                continue;
              return 0;
          }
          while (1)
          {
            v16 = v15 + 1;
            v29 = (google::protobuf::internal *)(v15 + 1);
            v17 = (int *)*((_QWORD *)this + 5);
            if (!v17)
              break;
            v18 = *((int *)this + 8);
            v19 = *v17;
            if ((int)v18 >= *v17)
            {
              if (v19 == *((_DWORD *)this + 9))
              {
LABEL_40:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v19 + 1);
                v17 = (int *)*((_QWORD *)this + 5);
                v19 = *v17;
              }
              *v17 = v19 + 1;
              v21 = *(google::protobuf::internal::ArenaImpl **)v5;
              if (*(_QWORD *)v5)
              {
                if (*((_QWORD *)v21 + 14))
                AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v21, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
              }
              else
              {
                AlignedAndAddCleanup = (std::string *)operator new();
              }
              AlignedAndAddCleanup->__r_.__value_.__r.__words[0] = 0;
              AlignedAndAddCleanup->__r_.__value_.__l.__size_ = 0;
              AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = 0;
              v22 = *((_QWORD *)this + 5);
              v23 = *((int *)this + 8);
              *((_DWORD *)this + 8) = v23 + 1;
              *(_QWORD *)(v22 + 8 * v23 + 8) = AlignedAndAddCleanup;
              v16 = (std::string::value_type *)v29;
              goto LABEL_47;
            }
            *((_DWORD *)this + 8) = v18 + 1;
            AlignedAndAddCleanup = *(std::string **)&v17[2 * v18 + 2];
LABEL_47:
            v15 = google::protobuf::internal::InlineGreedyStringParser(AlignedAndAddCleanup, v16, (uint64_t)a3);
            v29 = (google::protobuf::internal *)v15;
            if (!v15)
              return 0;
            if (*(_QWORD *)a3 <= (unint64_t)v15 || *v15 != 58)
              goto LABEL_2;
          }
          v19 = *((_DWORD *)this + 9);
          goto LABEL_40;
        }
        TagFallback = (google::protobuf::internal *)((char *)v29 + 2);
      }
      v29 = TagFallback;
      goto LABEL_7;
    }
    return v29;
  }
}

unsigned __int8 *siri::dialogengine::PatternSchemaBinary::PatternComponent::InternalSerializeWithCachedSizesToArray(siri::dialogengine::PatternSchemaBinary::PatternComponent *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  char *v4;
  int v6;
  siri::dialogengine::PatternSchemaBinary::ModeConfiguration *v7;
  unsigned int v8;
  char *v9;
  unsigned int v10;
  _BYTE *v11;
  _BYTE *v12;
  unsigned int v13;
  unsigned int v14;
  siri::dialogengine::PatternSchemaBinary::ModeConfiguration *v15;
  unsigned int v16;
  char *v17;
  unsigned int v18;
  _BYTE *v19;
  _BYTE *v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int i;
  uint64_t v25;
  int64_t v26;
  const void *v27;
  siri::dialogengine::PatternSchemaBinary::Usage *v28;
  unsigned int v29;
  char *v30;
  unsigned int v31;
  _BYTE *v32;
  _BYTE *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;

  v4 = a2;
  v6 = *((_DWORD *)this + 4);
  if ((v6 & 1) != 0)
  {
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 6), a2);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((_QWORD *)this + 7), v4);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, *((_QWORD *)this + 8), v4);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 4, *((_QWORD *)this + 9), v4);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_32;
    goto LABEL_22;
  }
LABEL_12:
  if ((unint64_t)v4 >= *(_QWORD *)a3)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v7 = (siri::dialogengine::PatternSchemaBinary::ModeConfiguration *)*((_QWORD *)this + 10);
  *v4 = 42;
  v8 = *((_DWORD *)v7 + 5);
  if (v8 > 0x7F)
  {
    v4[1] = v8 | 0x80;
    v10 = v8 >> 7;
    if (v8 >> 14)
    {
      v11 = v4 + 2;
      do
      {
        v12 = v11;
        *v11++ = v10 | 0x80;
        v13 = v10 >> 7;
        v14 = v10 >> 14;
        v10 >>= 7;
      }
      while (v14);
      v9 = v12 + 2;
      *v11 = v13;
    }
    else
    {
      v4[2] = v10;
      v9 = v4 + 3;
    }
  }
  else
  {
    v4[1] = v8;
    v9 = v4 + 2;
  }
  v4 = (char *)siri::dialogengine::PatternSchemaBinary::ModeConfiguration::InternalSerializeWithCachedSizesToArray(v7, v9, a3);
  if ((v6 & 0x20) != 0)
  {
LABEL_22:
    if ((unint64_t)v4 >= *(_QWORD *)a3)
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    v15 = (siri::dialogengine::PatternSchemaBinary::ModeConfiguration *)*((_QWORD *)this + 11);
    *v4 = 50;
    v16 = *((_DWORD *)v15 + 5);
    if (v16 > 0x7F)
    {
      v4[1] = v16 | 0x80;
      v18 = v16 >> 7;
      if (v16 >> 14)
      {
        v19 = v4 + 2;
        do
        {
          v20 = v19;
          *v19++ = v18 | 0x80;
          v21 = v18 >> 7;
          v22 = v18 >> 14;
          v18 >>= 7;
        }
        while (v22);
        v17 = v20 + 2;
        *v19 = v21;
      }
      else
      {
        v4[2] = v18;
        v17 = v4 + 3;
      }
    }
    else
    {
      v4[1] = v16;
      v17 = v4 + 2;
    }
    v4 = (char *)siri::dialogengine::PatternSchemaBinary::ModeConfiguration::InternalSerializeWithCachedSizesToArray(v15, v17, a3);
  }
LABEL_32:
  v23 = *((_DWORD *)this + 8);
  if (v23 >= 1)
  {
    for (i = 0; v23 != i; ++i)
    {
      v25 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24, i);
      if (*(char *)(v25 + 23) < 0)
      {
        v26 = *(_QWORD *)(v25 + 8);
        if (v26 > 127)
          goto LABEL_44;
      }
      else
      {
        v26 = *(unsigned __int8 *)(v25 + 23);
      }
      if (*(_QWORD *)a3 - (_QWORD)v4 + 14 >= v26)
      {
        *v4 = 58;
        v4[1] = v26;
        if (*(char *)(v25 + 23) >= 0)
          v27 = (const void *)v25;
        else
          v27 = *(const void **)v25;
        memcpy(v4 + 2, v27, v26);
        v4 += v26 + 2;
        continue;
      }
LABEL_44:
      v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a3, 7, v25, v4);
    }
  }
  if ((v6 & 0x40) != 0)
  {
    if ((unint64_t)v4 >= *(_QWORD *)a3)
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    v28 = (siri::dialogengine::PatternSchemaBinary::Usage *)*((_QWORD *)this + 12);
    *v4 = 66;
    v29 = *((_DWORD *)v28 + 5);
    if (v29 > 0x7F)
    {
      v4[1] = v29 | 0x80;
      v31 = v29 >> 7;
      if (v29 >> 14)
      {
        v32 = v4 + 2;
        do
        {
          v33 = v32;
          *v32++ = v31 | 0x80;
          v34 = v31 >> 7;
          v35 = v31 >> 14;
          v31 >>= 7;
        }
        while (v35);
        v30 = v33 + 2;
        *v32 = v34;
      }
      else
      {
        v4[2] = v31;
        v30 = v4 + 3;
      }
    }
    else
    {
      v4[1] = v29;
      v30 = v4 + 2;
    }
    v4 = (char *)siri::dialogengine::PatternSchemaBinary::Usage::InternalSerializeWithCachedSizesToArray(v28, v30, a3);
  }
  v36 = *((_QWORD *)this + 1);
  if ((v36 & 1) == 0)
    return (unsigned __int8 *)v4;
  v38 = v36 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v38 + 23) < 0)
  {
    v40 = *(void **)v38;
    v39 = *(_QWORD *)(v38 + 8);
  }
  else
  {
    LODWORD(v39) = *(unsigned __int8 *)(v38 + 23);
    v40 = (void *)v38;
  }
  if (*(_QWORD *)a3 - (_QWORD)v4 >= (int)v39)
  {
    v41 = (int)v39;
    memcpy(v4, v40, (int)v39);
    v4 += v41;
    return (unsigned __int8 *)v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v40, v39, (unsigned __int8 *)v4);
}

char *google::protobuf::internal::ParseContext::ParseMessage<siri::dialogengine::PatternSchemaBinary::ModeConfiguration>(google::protobuf::internal::EpsCopyInputStream *this, siri::dialogengine::PatternSchemaBinary::ModeConfiguration *a2, google::protobuf::internal *a3)
{
  int v6;
  const char *v7;
  char *v8;
  char *result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = *(char *)a3;
  v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result)
      return result;
    v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    v8 = (char *)a3 + 1;
  }
  v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  v12 = *((_DWORD *)this + 22);
  v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = (char *)siri::dialogengine::PatternSchemaBinary::ModeConfiguration::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result)
    return result;
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20))
    return 0;
  v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(_QWORD *)this = *((_QWORD *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

void siri::dialogengine::PatternSchemaBinary::PatternComponent::MergeFrom(siri::dialogengine::PatternSchemaBinary::PatternComponent *this, const siri::dialogengine::PatternSchemaBinary::PatternComponent *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  std::string *v7;
  const std::string *v8;
  std::string *v9;
  const std::string *v10;
  std::string *v11;
  const std::string *v12;
  std::string *v13;
  const std::string *v14;
  siri::dialogengine::PatternSchemaBinary::ModeConfiguration *v15;
  const siri::dialogengine::PatternSchemaBinary::ModeConfiguration *v16;
  siri::dialogengine::PatternSchemaBinary::ModeConfiguration *v17;
  const siri::dialogengine::PatternSchemaBinary::ModeConfiguration *v18;
  siri::dialogengine::PatternSchemaBinary::Usage *v19;
  const siri::dialogengine::PatternSchemaBinary::Usage *v20;
  char v21;
  std::string v22[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v22, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.cc", 2494);
    v4 = google::protobuf::internal::LogMessage::operator<<(v22, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v21, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v22[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((int **)this + 3, (uint64_t)a2 + 24);
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 0x7F) == 0)
    return;
  if ((v6 & 1) == 0
    || (v7 = (std::string *)*((_QWORD *)this + 6),
        *((_DWORD *)this + 4) |= 1u,
        v8 = (const std::string *)*((_QWORD *)a2 + 6),
        v7 == v8))
  {
LABEL_10:
    if ((v6 & 2) == 0)
      goto LABEL_17;
    goto LABEL_11;
  }
  if (v7 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
  {
    std::string::operator=(v7, v8);
    goto LABEL_10;
  }
  google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, (uint64_t)v8);
  if ((v6 & 2) == 0)
    goto LABEL_17;
LABEL_11:
  v9 = (std::string *)*((_QWORD *)this + 7);
  *((_DWORD *)this + 4) |= 2u;
  v10 = (const std::string *)*((_QWORD *)a2 + 7);
  if (v9 != v10)
  {
    if (v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 7, (uint64_t)v10);
    else
      std::string::operator=(v9, v10);
  }
LABEL_17:
  if ((v6 & 4) == 0
    || (v11 = (std::string *)*((_QWORD *)this + 8),
        *((_DWORD *)this + 4) |= 4u,
        v12 = (const std::string *)*((_QWORD *)a2 + 8),
        v11 == v12))
  {
LABEL_21:
    if ((v6 & 8) != 0)
      goto LABEL_22;
    goto LABEL_28;
  }
  if (v11 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
  {
    std::string::operator=(v11, v12);
    goto LABEL_21;
  }
  google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 8, (uint64_t)v12);
  if ((v6 & 8) != 0)
  {
LABEL_22:
    v13 = (std::string *)*((_QWORD *)this + 9);
    *((_DWORD *)this + 4) |= 8u;
    v14 = (const std::string *)*((_QWORD *)a2 + 9);
    if (v13 != v14)
    {
      if (v13 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 9, (uint64_t)v14);
      else
        std::string::operator=(v13, v14);
    }
  }
LABEL_28:
  if ((v6 & 0x10) != 0)
  {
    *((_DWORD *)this + 4) |= 0x10u;
    v15 = (siri::dialogengine::PatternSchemaBinary::ModeConfiguration *)*((_QWORD *)this + 10);
    if (!v15)
    {
      v15 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::ModeConfiguration>(0);
      *((_QWORD *)this + 10) = v15;
    }
    if (*((_QWORD *)a2 + 10))
      v16 = (const siri::dialogengine::PatternSchemaBinary::ModeConfiguration *)*((_QWORD *)a2 + 10);
    else
      v16 = (const siri::dialogengine::PatternSchemaBinary::ModeConfiguration *)&siri::dialogengine::PatternSchemaBinary::_ModeConfiguration_default_instance_;
    siri::dialogengine::PatternSchemaBinary::ModeConfiguration::MergeFrom(v15, v16);
    if ((v6 & 0x20) == 0)
    {
LABEL_30:
      if ((v6 & 0x40) == 0)
        return;
      goto LABEL_44;
    }
  }
  else if ((v6 & 0x20) == 0)
  {
    goto LABEL_30;
  }
  *((_DWORD *)this + 4) |= 0x20u;
  v17 = (siri::dialogengine::PatternSchemaBinary::ModeConfiguration *)*((_QWORD *)this + 11);
  if (!v17)
  {
    v17 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::ModeConfiguration>(0);
    *((_QWORD *)this + 11) = v17;
  }
  if (*((_QWORD *)a2 + 11))
    v18 = (const siri::dialogengine::PatternSchemaBinary::ModeConfiguration *)*((_QWORD *)a2 + 11);
  else
    v18 = (const siri::dialogengine::PatternSchemaBinary::ModeConfiguration *)&siri::dialogengine::PatternSchemaBinary::_ModeConfiguration_default_instance_;
  siri::dialogengine::PatternSchemaBinary::ModeConfiguration::MergeFrom(v17, v18);
  if ((v6 & 0x40) != 0)
  {
LABEL_44:
    *((_DWORD *)this + 4) |= 0x40u;
    v19 = (siri::dialogengine::PatternSchemaBinary::Usage *)*((_QWORD *)this + 12);
    if (!v19)
    {
      v19 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Usage>(0);
      *((_QWORD *)this + 12) = v19;
    }
    if (*((_QWORD *)a2 + 12))
      v20 = (const siri::dialogengine::PatternSchemaBinary::Usage *)*((_QWORD *)a2 + 12);
    else
      v20 = (const siri::dialogengine::PatternSchemaBinary::Usage *)&siri::dialogengine::PatternSchemaBinary::_Usage_default_instance_;
    siri::dialogengine::PatternSchemaBinary::Usage::MergeFrom(v19, v20);
  }
}

void sub_1BFC2DD44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

siri::dialogengine::PatternSchemaBinary::PatternComponent *google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::PatternComponent>(google::protobuf::internal::ArenaImpl *this)
{
  siri::dialogengine::PatternSchemaBinary::PatternComponent *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (siri::dialogengine::PatternSchemaBinary::PatternComponent *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x68uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<siri::dialogengine::PatternSchemaBinary::PatternComponent>);
    siri::dialogengine::PatternSchemaBinary::PatternComponent::PatternComponent(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (siri::dialogengine::PatternSchemaBinary::PatternComponent *)operator new();
    siri::dialogengine::PatternSchemaBinary::PatternComponent::PatternComponent(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFC2DDE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C403CCC3067);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<siri::dialogengine::PatternSchemaBinary::PatternComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void InitDefaultsscc_info_VisualComponentsCombination_PatternSchemaBinary_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.cc", a4);
  siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::VisualComponentsCombination((siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *)&siri::dialogengine::PatternSchemaBinary::_VisualComponentsCombination_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&siri::dialogengine::PatternSchemaBinary::_VisualComponentsCombination_default_instance_, v4);
}

void InitDefaultsscc_info_ListValue_PatternSchemaBinary_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;
  const void *v5;
  const void *v6;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.cc", a4);
  qword_1EF584808 = 0;
  unk_1EF584810 = 0;
  dword_1EF584818 = 0;
  siri::dialogengine::PatternSchemaBinary::_MapValue_ValueEntry_DoNotUse_default_instance_ = (uint64_t)&off_1E7938638;
  unk_1EF584800 = &google::protobuf::internal::fixed_address_empty_string;
  siri::dialogengine::PatternSchemaBinary::MapValue::MapValue((siri::dialogengine::PatternSchemaBinary::MapValue *)&siri::dialogengine::PatternSchemaBinary::_MapValue_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&siri::dialogengine::PatternSchemaBinary::_MapValue_default_instance_, v4);
  siri::dialogengine::PatternSchemaBinary::ListValue::ListValue((siri::dialogengine::PatternSchemaBinary::ListValue *)&siri::dialogengine::PatternSchemaBinary::_ListValue_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&siri::dialogengine::PatternSchemaBinary::_ListValue_default_instance_, v5);
  siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::VisualComponentsCombinationList((siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)&siri::dialogengine::PatternSchemaBinary::_VisualComponentsCombinationList_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&siri::dialogengine::PatternSchemaBinary::_VisualComponentsCombinationList_default_instance_, v6);
  qword_1EF584808 = (uint64_t)&siri::dialogengine::PatternSchemaBinary::_VisualComponentsCombinationList_default_instance_;
}

siri::dialogengine::PatternSchemaBinary::MapValue *siri::dialogengine::PatternSchemaBinary::MapValue::MapValue(siri::dialogengine::PatternSchemaBinary::MapValue *this)
{
  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = &off_1E79386D8;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 8) = 0;
  google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::Init((uint64_t *)this + 3);
  *((_DWORD *)this + 8) = 0;
  if (atomic_load(scc_info_ListValue_PatternSchemaBinary_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_ListValue_PatternSchemaBinary_2eproto);
  return this;
}

void sub_1BFC2E110(_Unwind_Exception *a1)
{
  uint64_t *v1;
  _QWORD *v2;

  google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::~Map(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

siri::dialogengine::PatternSchemaBinary::ListValue *siri::dialogengine::PatternSchemaBinary::ListValue::ListValue(siri::dialogengine::PatternSchemaBinary::ListValue *this)
{
  *(_QWORD *)this = &off_1E7938768;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  if (atomic_load(scc_info_ListValue_PatternSchemaBinary_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_ListValue_PatternSchemaBinary_2eproto);
  *((_DWORD *)this + 8) = 0;
  return this;
}

void sub_1BFC2E190(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::VisualComponentsCombinationList(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)this = &off_1E79387F8;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  if (atomic_load(scc_info_ListValue_PatternSchemaBinary_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_ListValue_PatternSchemaBinary_2eproto);
  return this;
}

void sub_1BFC2E20C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v2 + 24));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::~VisualComponentsCombinationList(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *this)
{
  uint64_t *v1;

  *(_QWORD *)this = &off_1E79387F8;
  v1 = (uint64_t *)((char *)this + 8);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)((char *)this + 24));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
}

{
  uint64_t *v1;

  *(_QWORD *)this = &off_1E79387F8;
  v1 = (uint64_t *)((char *)this + 8);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)((char *)this + 24));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t *v1;

  *(_QWORD *)this = &off_1E79387F8;
  v1 = (uint64_t *)((char *)this + 8);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)((char *)this + 24));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
}

_QWORD *siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "siri.dialogengine.PatternSchemaBinary.VisualComponentsCombinationList");
}

siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::New(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>(0);
}

siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::New(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>(a2);
}

void siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::Clear(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *this)
{
  uint64_t v2;
  siri::dialogengine::PatternSchemaBinary::ListValue **v3;
  siri::dialogengine::PatternSchemaBinary::ListValue *v4;
  std::string *v5;
  google::protobuf::internal::InternalMetadataWithArenaLite *v6;
  char v7;
  char v8;
  std::string v9[2];

  v2 = *((unsigned int *)this + 8);
  if ((v2 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v5 = google::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v8, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v9[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v2)
  {
    v3 = (siri::dialogengine::PatternSchemaBinary::ListValue **)(*((_QWORD *)this + 5) + 8);
    do
    {
      v4 = *v3++;
      siri::dialogengine::PatternSchemaBinary::ListValue::Clear(v4);
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 8) = 0;
  }
  v7 = *((_BYTE *)this + 8);
  v6 = (siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)((char *)this + 8);
  *((_DWORD *)v6 + 2) = 0;
  if ((v7 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v6);
}

void sub_1BFC2E390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::IsInitialized(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *this)
{
  return 1;
}

void siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::CheckTypeAndMergeFrom(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *this, const google::protobuf::MessageLite *lpsrc)
{
  siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::MergeFrom(this, lpsrc);
}

uint64_t siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::ByteSizeLong(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *this)
{
  uint64_t v2;
  uint64_t v3;
  siri::dialogengine::PatternSchemaBinary::ListValue **v4;
  uint64_t v5;
  siri::dialogengine::PatternSchemaBinary::ListValue *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;

  v2 = *((int *)this + 8);
  v3 = *((_QWORD *)this + 5);
  if (v3)
    v4 = (siri::dialogengine::PatternSchemaBinary::ListValue **)(v3 + 8);
  else
    v4 = 0;
  if ((_DWORD)v2)
  {
    v5 = 8 * v2;
    do
    {
      v6 = *v4++;
      v7 = siri::dialogengine::PatternSchemaBinary::ListValue::ByteSizeLong(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    v2 = 0;
  }
  v8 = *((_QWORD *)this + 1);
  if ((v8 & 1) != 0)
  {
    v10 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v10 + 23) < 0)
      v11 = *(_QWORD *)(v10 + 8);
    else
      v11 = *(unsigned __int8 *)(v10 + 23);
    v2 += v11;
  }
  *((_DWORD *)this + 5) = v2;
  return v2;
}

uint64_t siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::GetCachedSize(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *this)
{
  return *((unsigned int *)this + 5);
}

google::protobuf::internal *siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::_InternalParse(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  uint64_t *v5;
  unsigned int *v6;
  google::protobuf::internal *TagFallback;
  const char *v8;
  BOOL v9;
  google::protobuf::internal *v10;
  google::protobuf::internal *v11;
  int *v12;
  uint64_t v13;
  int v14;
  siri::dialogengine::PatternSchemaBinary::ListValue *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  char *v19;
  char *SizeFallback;
  unsigned int v21;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  int v26;
  unint64_t v27;
  google::protobuf::internal *v29;

  v29 = a2;
  v5 = (uint64_t *)((char *)this + 8);
  v6 = (unsigned int *)((char *)this + 24);
  do
  {
LABEL_2:
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v29, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v29;
    TagFallback = (google::protobuf::internal *)((char *)v29 + 1);
    LODWORD(v8) = *(unsigned __int8 *)v29;
    if ((*(char *)v29 & 0x80000000) == 0)
      goto LABEL_6;
    v8 = (const char *)(v8 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v29 + 2);
LABEL_6:
      v29 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v29, v8);
    v29 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    if ((_DWORD)v8 == 10)
    {
      v10 = (google::protobuf::internal *)((char *)TagFallback - 1);
      while (1)
      {
        v11 = (google::protobuf::internal *)((char *)v10 + 1);
        v29 = v11;
        v12 = (int *)*((_QWORD *)this + 5);
        if (!v12)
          break;
        v13 = *((int *)this + 8);
        v14 = *v12;
        if ((int)v13 < *v12)
        {
          *((_DWORD *)this + 8) = v13 + 1;
          v15 = *(siri::dialogengine::PatternSchemaBinary::ListValue **)&v12[2 * v13 + 2];
          goto LABEL_22;
        }
        if (v14 == *((_DWORD *)this + 9))
          goto LABEL_20;
LABEL_21:
        *v12 = v14 + 1;
        v15 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::ListValue>(*((google::protobuf::internal::ArenaImpl **)this + 3));
        v16 = *((_QWORD *)this + 5);
        v17 = *((int *)this + 8);
        *((_DWORD *)this + 8) = v17 + 1;
        *(_QWORD *)(v16 + 8 * v17 + 8) = v15;
        v11 = v29;
LABEL_22:
        v18 = *(unsigned __int8 *)v11;
        if (*(char *)v11 < 0)
        {
          SizeFallback = google::protobuf::internal::ReadSizeFallback(v11, (const char *)*(unsigned __int8 *)v11);
          if (!SizeFallback)
            return 0;
          v19 = SizeFallback;
          v18 = v21;
        }
        else
        {
          v19 = (char *)v11 + 1;
        }
        v22 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v19, v18);
        v23 = *((_DWORD *)a3 + 22);
        v24 = __OFSUB__(v23--, 1);
        *((_DWORD *)a3 + 22) = v23;
        if (v23 < 0 != v24)
          return 0;
        v25 = v22;
        v10 = siri::dialogengine::PatternSchemaBinary::ListValue::_InternalParse(v15, (google::protobuf::internal *)v19, a3);
        if (!v10)
          return 0;
        ++*((_DWORD *)a3 + 22);
        if (*((_DWORD *)a3 + 20))
          return 0;
        v26 = *((_DWORD *)a3 + 7) + v25;
        *((_DWORD *)a3 + 7) = v26;
        v27 = *((_QWORD *)a3 + 1) + (v26 & (v26 >> 31));
        *(_QWORD *)a3 = v27;
        v29 = v10;
        if (v27 <= (unint64_t)v10 || *(_BYTE *)v10 != 10)
          goto LABEL_2;
      }
      v14 = *((_DWORD *)this + 9);
LABEL_20:
      google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v14 + 1);
      v12 = (int *)*((_QWORD *)this + 5);
      v14 = *v12;
      goto LABEL_21;
    }
    if ((_DWORD)v8)
      v9 = (v8 & 7) == 4;
    else
      v9 = 1;
    if (v9)
    {
      *((_DWORD *)a3 + 20) = (_DWORD)v8 - 1;
      return TagFallback;
    }
    v29 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v8, v5, TagFallback, a3);
  }
  while (v29);
  return 0;
}

unsigned __int8 *siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::InternalSerializeWithCachedSizesToArray(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  int v6;
  int v7;
  std::string *v8;
  std::string *v9;
  siri::dialogengine::PatternSchemaBinary::ListValue *v10;
  unsigned int v11;
  unsigned __int8 *v12;
  unsigned int v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  char v24;
  std::string v25[2];

  v6 = *((_DWORD *)this + 8);
  if (v6)
  {
    v7 = 0;
    while ((unint64_t)a2 < *(_QWORD *)a3)
    {
      if (v7 < 0)
        goto LABEL_5;
LABEL_6:
      if (*((_DWORD *)this + 8) <= v7)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v25, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1539);
        v9 = google::protobuf::internal::LogMessage::operator<<(v25, "CHECK failed: (index) < (current_size_): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v24, (const char **)&v9->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v25[0].__r_.__value_.__l.__data_);
      }
      v10 = *(siri::dialogengine::PatternSchemaBinary::ListValue **)(*((_QWORD *)this + 5) + 8 * v7 + 8);
      *a2 = 10;
      v11 = *((_DWORD *)v10 + 5);
      if (v11 > 0x7F)
      {
        a2[1] = v11 | 0x80;
        v13 = v11 >> 7;
        if (v11 >> 14)
        {
          v14 = (unsigned __int8 *)(a2 + 2);
          do
          {
            v15 = v14;
            *v14++ = v13 | 0x80;
            v16 = v13 >> 7;
            v17 = v13 >> 14;
            v13 >>= 7;
          }
          while (v17);
          v12 = v15 + 2;
          *v14 = v16;
        }
        else
        {
          a2[2] = v13;
          v12 = (unsigned __int8 *)(a2 + 3);
        }
      }
      else
      {
        a2[1] = v11;
        v12 = (unsigned __int8 *)(a2 + 2);
      }
      a2 = (char *)siri::dialogengine::PatternSchemaBinary::ListValue::InternalSerializeWithCachedSizesToArray(v10, (char *)v12, a3);
      if (++v7 == v6)
        goto LABEL_19;
    }
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    if ((v7 & 0x80000000) == 0)
      goto LABEL_6;
LABEL_5:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v25, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v8 = google::protobuf::internal::LogMessage::operator<<(v25, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v24, (const char **)&v8->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v25[0].__r_.__value_.__l.__data_);
    goto LABEL_6;
  }
LABEL_19:
  v18 = *((_QWORD *)this + 1);
  if ((v18 & 1) == 0)
    return (unsigned __int8 *)a2;
  v20 = v18 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v20 + 23) < 0)
  {
    v22 = *(void **)v20;
    v21 = *(_QWORD *)(v20 + 8);
  }
  else
  {
    LODWORD(v21) = *(unsigned __int8 *)(v20 + 23);
    v22 = (void *)v20;
  }
  if (*(_QWORD *)a3 - (_QWORD)a2 >= (int)v21)
  {
    v23 = (int)v21;
    memcpy(a2, v22, (int)v21);
    a2 += v23;
    return (unsigned __int8 *)a2;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v22, v21, (unsigned __int8 *)a2);
}

void sub_1BFC2E90C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *siri::dialogengine::PatternSchemaBinary::ListValue::InternalSerializeWithCachedSizesToArray(siri::dialogengine::PatternSchemaBinary::ListValue *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  char *v4;
  int v6;
  unsigned __int8 *v7;
  siri::dialogengine::PatternSchemaBinary::MapValue *v8;
  unsigned int v9;
  char *v10;
  unsigned int v11;
  _BYTE *v12;
  _BYTE *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;

  v4 = a2;
  v6 = *((_DWORD *)this + 8);
  if (v6 == 2)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v8 = (siri::dialogengine::PatternSchemaBinary::MapValue *)*((_QWORD *)this + 3);
    *v4 = 18;
    v9 = *((_DWORD *)v8 + 5);
    if (v9 > 0x7F)
    {
      v4[1] = v9 | 0x80;
      v11 = v9 >> 7;
      if (v9 >> 14)
      {
        v12 = v4 + 2;
        do
        {
          v13 = v12;
          *v12++ = v11 | 0x80;
          v14 = v11 >> 7;
          v15 = v11 >> 14;
          v11 >>= 7;
        }
        while (v15);
        v10 = v13 + 2;
        *v12 = v14;
      }
      else
      {
        v4[2] = v11;
        v10 = v4 + 3;
      }
    }
    else
    {
      v4[1] = v9;
      v10 = v4 + 2;
    }
    v7 = siri::dialogengine::PatternSchemaBinary::MapValue::InternalSerializeWithCachedSizesToArray(v8, v10, a3);
  }
  else
  {
    if (v6 != 1)
      goto LABEL_15;
    v7 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 3), a2);
  }
  v4 = (char *)v7;
LABEL_15:
  v16 = *((_QWORD *)this + 1);
  if ((v16 & 1) == 0)
    return (unsigned __int8 *)v4;
  v18 = v16 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v18 + 23) < 0)
  {
    v20 = *(void **)v18;
    v19 = *(_QWORD *)(v18 + 8);
  }
  else
  {
    LODWORD(v19) = *(unsigned __int8 *)(v18 + 23);
    v20 = (void *)v18;
  }
  if (*(_QWORD *)a3 - (_QWORD)v4 >= (int)v19)
  {
    v21 = (int)v19;
    memcpy(v4, v20, (int)v19);
    v4 += v21;
    return (unsigned __int8 *)v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v20, v19, (unsigned __int8 *)v4);
}

unsigned __int8 *siri::dialogengine::PatternSchemaBinary::MapValue::InternalSerializeWithCachedSizesToArray(siri::dialogengine::PatternSchemaBinary::MapValue *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  _QWORD *v6;
  uint64_t i;
  uint64_t v9;
  unint64_t v10;
  uint64_t j;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v6 = (_QWORD *)*((_QWORD *)this + 5);
  if (*v6)
  {
    if (*v6 == 1 || *((_BYTE *)a3 + 58) == 0)
    {
      *((_QWORD *)&v23 + 1) = *((_QWORD *)this + 5);
      google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::iterator_base<google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::KeyValuePair>::SearchFrom(&v23, v6[3]);
      v21 = v23;
      v22 = v24;
      for (i = v23; (_QWORD)v21; i = v21)
      {
        a2 = (char *)google::protobuf::internal::MapEntryFuncs<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11>::InternalSerialize(*(_QWORD *)(i + 24), (siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)(*(_QWORD *)(i + 24)+ 24), a2, a3);
        google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::iterator_base<google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::KeyValuePair const>::operator++((unsigned __int8 **)&v21);
      }
    }
    else
    {
      v9 = operator new[]();
      *((_QWORD *)&v23 + 1) = *((_QWORD *)this + 5);
      google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::iterator_base<google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::KeyValuePair>::SearchFrom(&v23, *(_QWORD *)(*((_QWORD *)&v23 + 1) + 24));
      v21 = v23;
      v22 = v24;
      v10 = 0;
      for (j = v23; (_QWORD)v21; j = v21)
      {
        *(_QWORD *)(v9 + 8 * v10) = *(_QWORD *)(j + 24);
        google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::iterator_base<google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::KeyValuePair const>::operator++((unsigned __int8 **)&v21);
        ++v10;
      }
      v12 = 126 - 2 * __clz(v10);
      if (v10)
        v13 = v12;
      else
        v13 = 0;
      std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList> const*> &,google::protobuf::MapPair<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList> const**,false>(v9, (char *)(v9 + 8 * v10), v13, 1);
      if (v10)
      {
        v14 = (uint64_t *)v9;
        do
        {
          a2 = (char *)google::protobuf::internal::MapEntryFuncs<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11>::InternalSerialize(*v14, (siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)(*v14 + 24), a2, a3);
          ++v14;
          --v10;
        }
        while (v10);
      }
      MEMORY[0x1C3B8D878](v9, 0x60C8044C4A2DFLL);
    }
  }
  v15 = *((_QWORD *)this + 1);
  if ((v15 & 1) != 0)
  {
    v17 = v15 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v17 + 23) < 0)
    {
      v19 = *(char **)v17;
      v18 = *(_QWORD *)(v17 + 8);
    }
    else
    {
      LODWORD(v18) = *(unsigned __int8 *)(v17 + 23);
      v19 = (char *)v17;
    }
    if (*(_QWORD *)a3 - (_QWORD)a2 < (int)v18)
    {
      return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, v19, v18, (unsigned __int8 *)a2);
    }
    else
    {
      v20 = (int)v18;
      memcpy(a2, v19, (int)v18);
      a2 += v20;
    }
  }
  return (unsigned __int8 *)a2;
}

void sub_1BFC2EC70(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D878](v1, 0x60C8044C4A2DFLL);
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList> const*> &,google::protobuf::MapPair<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList> const**,false>(uint64_t result, char *a2, uint64_t a3, char a4)
{
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  _QWORD *v14;
  char *v15;
  char *v16;
  _QWORD *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  char *v25;
  _QWORD *v26;
  _QWORD *v27;
  BOOL v28;
  BOOL v29;
  _QWORD *v30;
  char *v31;
  char *v32;
  _QWORD *v33;
  char *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  char *v39;
  _QWORD *v40;
  _QWORD *v41;
  char *v42;
  BOOL v44;
  uint64_t v45;
  char *v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  char *v50;
  int64_t v51;
  int64_t v52;
  int64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  _BOOL4 v59;
  char *v60;
  _QWORD *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  _QWORD *v81;
  _QWORD *v82;
  char *v83;
  BOOL v84;
  _QWORD *v85;
  _QWORD *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  _QWORD *v93;
  char *v94;
  int64_t v95;
  uint64_t v96;
  char *v97;

  v6 = (char *)result;
LABEL_2:
  v94 = a2 - 8;
  v90 = a2 - 24;
  v91 = a2 - 16;
  v7 = v6;
  while (2)
  {
    v8 = v7;
    v9 = a2 - v7;
    v10 = (a2 - v7) >> 3;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v40 = *(_QWORD **)v94;
        v41 = *(_QWORD **)v7;
        result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(*(_QWORD **)v94, *(_QWORD **)v7);
        if ((_DWORD)result)
        {
          *(_QWORD *)v7 = v40;
          *(_QWORD *)v94 = v41;
        }
        return result;
      case 3:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7, (_QWORD **)v7 + 1, (_QWORD **)v94);
      case 4:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7, (_QWORD **)v7 + 1, (_QWORD **)v7 + 2, (_QWORD **)v94);
      case 5:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7, (_QWORD **)v7 + 1, (_QWORD **)v7 + 2, (_QWORD **)v7 + 3, (_QWORD **)v94);
      default:
        if (v9 <= 191)
        {
          v42 = v7 + 8;
          v44 = v7 == a2 || v42 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v44)
            {
              v45 = 0;
              v46 = v7;
              do
              {
                v48 = *(_QWORD **)v46;
                v47 = (_QWORD *)*((_QWORD *)v46 + 1);
                v46 = v42;
                result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v47, v48);
                if ((_DWORD)result)
                {
                  v49 = v45;
                  while (1)
                  {
                    *(_QWORD *)&v7[v49 + 8] = v48;
                    if (!v49)
                      break;
                    v48 = *(_QWORD **)&v7[v49 - 8];
                    result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v47, v48);
                    v49 -= 8;
                    if ((result & 1) == 0)
                    {
                      v50 = &v7[v49 + 8];
                      goto LABEL_73;
                    }
                  }
                  v50 = v7;
LABEL_73:
                  *(_QWORD *)v50 = v47;
                }
                v42 = v46 + 8;
                v45 += 8;
              }
              while (v46 + 8 != a2);
            }
          }
          else if (!v44)
          {
            do
            {
              v86 = *(_QWORD **)v8;
              v85 = (_QWORD *)*((_QWORD *)v8 + 1);
              v8 = v42;
              result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v85, v86);
              if ((_DWORD)result)
              {
                v87 = v8;
                do
                {
                  *(_QWORD *)v87 = v86;
                  v86 = (_QWORD *)*((_QWORD *)v87 - 2);
                  result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v85, v86);
                  v87 -= 8;
                }
                while ((result & 1) != 0);
                *(_QWORD *)v87 = v85;
              }
              v42 = v8 + 8;
            }
            while (v8 + 8 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v7 != a2)
          {
            v97 = v7;
            v51 = (unint64_t)(v10 - 2) >> 1;
            v52 = v51;
            v88 = a2;
            v89 = a2 - v7;
            do
            {
              v53 = v52;
              if (v9 >= 16 && v51 >= v52)
              {
                v54 = (2 * v52) | 1;
                v55 = &v97[8 * v54];
                v56 = 2 * v52 + 2;
                v95 = v52;
                if (v56 >= v10)
                {
                  v58 = *(_QWORD **)v55;
                }
                else
                {
                  v57 = *(_QWORD **)v55;
                  v58 = (_QWORD *)*((_QWORD *)v55 + 1);
                  v59 = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(*(_QWORD **)v55, v58);
                  if (v59)
                    v55 += 8;
                  else
                    v58 = v57;
                  if (v59)
                    v54 = v56;
                }
                v60 = &v97[8 * v53];
                v61 = *(_QWORD **)v60;
                result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v58, *(_QWORD **)v60);
                v9 = v89;
                if ((result & 1) == 0)
                {
                  do
                  {
                    v62 = v55;
                    *(_QWORD *)v60 = v58;
                    if (v51 < v54)
                      break;
                    v63 = (2 * v54) | 1;
                    v55 = &v97[8 * v63];
                    v64 = 2 * v54 + 2;
                    if (v64 >= v10)
                    {
                      v58 = *(_QWORD **)v55;
                      v54 = (2 * v54) | 1;
                    }
                    else
                    {
                      v58 = *(_QWORD **)v55;
                      v65 = (_QWORD *)*((_QWORD *)v55 + 1);
                      if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(*(_QWORD **)v55, v65))
                      {
                        v58 = v65;
                        v55 += 8;
                        v54 = v64;
                      }
                      else
                      {
                        v54 = v63;
                      }
                    }
                    result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v58, v61);
                    v60 = v62;
                  }
                  while (!(_DWORD)result);
                  *(_QWORD *)v62 = v61;
                  a2 = v88;
                  v9 = v89;
                  v53 = v95;
                }
              }
              v52 = v53 - 1;
            }
            while (v53);
            v66 = (unint64_t)v9 >> 3;
            v67 = v97;
            do
            {
              v68 = a2;
              v69 = 0;
              v70 = v66 - 2;
              v93 = *(_QWORD **)v67;
              if (v66 < 2)
                v70 = v66 - 1;
              v71 = v70 >> 1;
              do
              {
                v72 = &v67[8 * v69 + 8];
                v73 = (2 * v69) | 1;
                v74 = 2 * v69 + 2;
                if (v74 >= v66)
                {
                  v77 = *(_QWORD **)v72;
                  v69 = (2 * v69) | 1;
                }
                else
                {
                  v75 = *(_QWORD **)v72;
                  v76 = *(_QWORD **)&v67[8 * v69 + 16];
                  result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(*(_QWORD **)v72, v76);
                  if ((_DWORD)result)
                    v77 = v76;
                  else
                    v77 = v75;
                  if ((_DWORD)result)
                  {
                    v72 += 8;
                    v69 = v74;
                  }
                  else
                  {
                    v69 = v73;
                  }
                }
                *(_QWORD *)v67 = v77;
                v67 = v72;
              }
              while (v69 <= v71);
              a2 = v68 - 8;
              if (v72 == v68 - 8)
              {
                *(_QWORD *)v72 = v93;
              }
              else
              {
                *(_QWORD *)v72 = *(_QWORD *)a2;
                *(_QWORD *)a2 = v93;
                v78 = v72 - v97 + 8;
                if (v78 >= 9)
                {
                  v79 = (unint64_t)((v78 >> 3) - 2) >> 1;
                  v80 = &v97[8 * v79];
                  v81 = *(_QWORD **)v80;
                  v82 = *(_QWORD **)v72;
                  result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(*(_QWORD **)v80, *(_QWORD **)v72);
                  if ((_DWORD)result)
                  {
                    do
                    {
                      v83 = v80;
                      *(_QWORD *)v72 = v81;
                      if (!v79)
                        break;
                      v79 = (v79 - 1) >> 1;
                      v80 = &v97[8 * v79];
                      v81 = *(_QWORD **)v80;
                      result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(*(_QWORD **)v80, v82);
                      v72 = v83;
                    }
                    while ((result & 1) != 0);
                    *(_QWORD *)v83 = v82;
                  }
                }
              }
              v84 = v66-- <= 2;
              v67 = v97;
            }
            while (!v84);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v7[8 * ((unint64_t)v10 >> 1)];
        if ((unint64_t)v9 < 0x401)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v12, (_QWORD **)v7, (_QWORD **)v94);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7, (_QWORD **)v12, (_QWORD **)v94);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7 + 1, (_QWORD **)v12 - 1, (_QWORD **)v91);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v7 + 2, (_QWORD **)&v7[8 * v11 + 8], (_QWORD **)v90);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>((_QWORD **)v12 - 1, (_QWORD **)v12, (_QWORD **)&v7[8 * v11 + 8]);
          v13 = *(_QWORD **)v7;
          *(_QWORD *)v7 = *(_QWORD *)v12;
          *(_QWORD *)v12 = v13;
        }
        --a3;
        v14 = *(_QWORD **)v7;
        v15 = v7;
        if ((a4 & 1) == 0)
        {
          v15 = v7;
          if (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(*((_QWORD **)v7 - 1), *(_QWORD **)v7))
          {
            result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v14, *(_QWORD **)v94);
            if ((result & 1) != 0)
            {
              do
              {
                v30 = (_QWORD *)*((_QWORD *)v7 + 1);
                v7 += 8;
                result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v14, v30);
              }
              while ((result & 1) == 0);
            }
            else
            {
              v31 = v7 + 8;
              do
              {
                v7 = v31;
                if (v31 >= a2)
                  break;
                v31 += 8;
                result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v14, *(_QWORD **)v7);
              }
              while (!(_DWORD)result);
            }
            v32 = a2;
            if (v7 < a2)
            {
              v32 = a2;
              do
              {
                v33 = (_QWORD *)*((_QWORD *)v32 - 1);
                v32 -= 8;
                result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v14, v33);
              }
              while ((result & 1) != 0);
            }
            v34 = a2;
            if (v7 < v32)
            {
              v35 = *(_QWORD **)v7;
              v36 = *(_QWORD **)v32;
              do
              {
                *(_QWORD *)v7 = v36;
                *(_QWORD *)v32 = v35;
                do
                {
                  v37 = (_QWORD *)*((_QWORD *)v7 + 1);
                  v7 += 8;
                  v35 = v37;
                }
                while (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v14, v37));
                do
                {
                  v38 = (_QWORD *)*((_QWORD *)v32 - 1);
                  v32 -= 8;
                  v36 = v38;
                  result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v14, v38);
                }
                while ((result & 1) != 0);
              }
              while (v7 < v32);
            }
            v39 = v7 - 8;
            a2 = v34;
            if (v7 - 8 != v8)
              *(_QWORD *)v8 = *(_QWORD *)v39;
            a4 = 0;
            *(_QWORD *)v39 = v14;
            continue;
          }
        }
        do
        {
          v16 = v15;
          v18 = (_QWORD *)*((_QWORD *)v15 + 1);
          v15 += 8;
          v17 = v18;
        }
        while (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v18, v14));
        v96 = a3;
        v19 = a2;
        if (v16 == v8)
        {
          v19 = a2;
          do
          {
            if (v15 >= v19)
              break;
            v21 = (_QWORD *)*((_QWORD *)v19 - 1);
            v19 -= 8;
          }
          while (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v21, v14));
        }
        else
        {
          do
          {
            v20 = (_QWORD *)*((_QWORD *)v19 - 1);
            v19 -= 8;
          }
          while (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v20, v14));
        }
        v6 = v8;
        v22 = a2;
        if (v15 < v19)
        {
          v23 = *(_QWORD **)v19;
          v24 = v15;
          v25 = v19;
          do
          {
            *(_QWORD *)v24 = v23;
            *(_QWORD *)v25 = v17;
            do
            {
              v16 = v24;
              v26 = (_QWORD *)*((_QWORD *)v24 + 1);
              v24 += 8;
              v17 = v26;
            }
            while (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v26, v14));
            do
            {
              v27 = (_QWORD *)*((_QWORD *)v25 - 1);
              v25 -= 8;
              v23 = v27;
            }
            while (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v27, v14));
          }
          while (v24 < v25);
        }
        if (v16 != v6)
          *(_QWORD *)v6 = *(_QWORD *)v16;
        *(_QWORD *)v16 = v14;
        v28 = v15 >= v19;
        a2 = v22;
        a3 = v96;
        if (!v28)
        {
LABEL_30:
          result = std::__introsort<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList> const*> &,google::protobuf::MapPair<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList> const**,false>(v6, v16, v96, a4 & 1);
          a4 = 0;
          v7 = v16 + 8;
          continue;
        }
        v29 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList> const*> &,google::protobuf::MapPair<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList> const**>((_QWORD **)v6, (_QWORD **)v16);
        v7 = v16 + 8;
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList> const*> &,google::protobuf::MapPair<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList> const**>((_QWORD **)v16 + 1, (_QWORD **)v22);
        if (!(_DWORD)result)
        {
          if (v29)
            continue;
          goto LABEL_30;
        }
        a2 = v16;
        if (!v29)
          goto LABEL_2;
        return result;
    }
  }
}

unsigned __int8 **google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::iterator_base<google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::KeyValuePair const>::operator++(unsigned __int8 **a1)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  uint64_t v4;
  std::string *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  std::string *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD *v18;
  char v19;
  std::string v20[2];

  v2 = *a1;
  v3 = (unsigned __int8 *)*((_QWORD *)*a1 + 4);
  if (v3)
    goto LABEL_2;
  v18 = 0;
  v4 = (uint64_t)a1[1];
  if (!v4)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 481);
    v5 = google::protobuf::internal::LogMessage::operator<<(v20, "CHECK failed: node_ != NULL && m_ != NULL: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v19, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v20[0].__r_.__value_.__l.__data_);
    v2 = *a1;
    v4 = (uint64_t)a1[1];
  }
  v6 = (unint64_t)a1[2] & (*(_QWORD *)(v4 + 8) - 1);
  a1[2] = (unsigned __int8 *)v6;
  v7 = *(_QWORD *)(v4 + 32);
  v8 = *(_QWORD *)(v7 + 8 * v6);
  if ((unsigned __int8 *)v8 == v2)
    goto LABEL_13;
  if (v8 && v8 != *(_QWORD *)(v7 + 8 * (v6 ^ 1)))
  {
    while (1)
    {
      v8 = *(_QWORD *)(v8 + 32);
      if (!v8)
        break;
      if ((unsigned __int8 *)v8 == v2)
        goto LABEL_13;
    }
  }
  google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(v20, v4, v2, (uint64_t *)&v18);
  v6 = v20[0].__r_.__value_.__r.__words[2];
  a1[2] = (unsigned __int8 *)v20[0].__r_.__value_.__r.__words[2];
  v9 = *((_QWORD *)a1[1] + 4);
  v10 = *(_QWORD *)(v9 + 8 * v6);
  if (!v10 || v10 != *(_QWORD *)(v9 + 8 * (v6 ^ 1)))
  {
LABEL_13:
    v11 = v6 + 1;
LABEL_14:
    google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::iterator_base<google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::KeyValuePair const>::SearchFrom(a1, v11);
    return a1;
  }
  if ((v6 & 1) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 456);
    v13 = google::protobuf::internal::LogMessage::operator<<(v20, "CHECK failed: (bucket_index_ & 1) == (0u): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v19, (const char **)&v13->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v20[0].__r_.__value_.__l.__data_);
    v6 = (uint64_t)a1[2];
    v10 = *(_QWORD *)(*((_QWORD *)a1[1] + 4) + 8 * v6);
  }
  v14 = (uint64_t)v18;
  v15 = (_QWORD *)v18[1];
  if (v15)
  {
    do
    {
      v16 = v15;
      v15 = (_QWORD *)*v15;
    }
    while (v15);
  }
  else
  {
    do
    {
      v16 = *(_QWORD **)(v14 + 16);
      v17 = *v16 == v14;
      v14 = (uint64_t)v16;
    }
    while (!v17);
  }
  v18 = v16;
  if (v16 == (_QWORD *)(v10 + 8))
  {
    v11 = v6 + 2;
    goto LABEL_14;
  }
  v3 = (unsigned __int8 *)v16[4];
LABEL_2:
  *a1 = v3;
  return a1;
}

void sub_1BFC2F5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::MapEntryFuncs<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11>::InternalSerialize(uint64_t a1, siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *a2, char *a3, google::protobuf::io::EpsCopyOutputStream *this)
{
  int v7;
  unsigned int v8;
  char *v9;
  unsigned int v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned int v13;
  unsigned int v14;
  int64_t v15;
  char *v16;
  const void *v17;
  char *v18;
  unsigned int v19;
  unsigned __int8 *v20;
  unsigned int v21;
  _BYTE *v22;
  _BYTE *v23;
  unsigned int v24;
  unsigned int v25;

  if (*(_QWORD *)this <= (unint64_t)a3)
    a3 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(this, a3);
  *a3 = 10;
  v7 = *(unsigned __int8 *)(a1 + 23);
  if ((v7 & 0x80u) != 0)
    v7 = *(_DWORD *)(a1 + 8);
  v8 = *((_DWORD *)a2 + 5)
     + v7
     + ((9 * (__clz(*((_DWORD *)a2 + 5) | 1) ^ 0x1F) + 73) >> 6)
     + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6)
     + 2;
  if (v8 > 0x7F)
  {
    a3[1] = v8 | 0x80;
    v10 = v8 >> 7;
    if (v8 >> 14)
    {
      v11 = (unsigned __int8 *)(a3 + 2);
      do
      {
        v12 = v11;
        *v11++ = v10 | 0x80;
        v13 = v10 >> 7;
        v14 = v10 >> 14;
        v10 >>= 7;
      }
      while (v14);
      v9 = (char *)(v12 + 2);
      *v11 = v13;
    }
    else
    {
      a3[2] = v10;
      v9 = a3 + 3;
    }
  }
  else
  {
    a3[1] = v8;
    v9 = a3 + 2;
  }
  if (*(_QWORD *)this <= (unint64_t)v9)
    v9 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(this, v9);
  if (*(char *)(a1 + 23) < 0)
  {
    v15 = *(_QWORD *)(a1 + 8);
    if (v15 > 127)
    {
LABEL_32:
      v18 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(this, 1, a1, v9);
      goto LABEL_22;
    }
  }
  else
  {
    v15 = *(unsigned __int8 *)(a1 + 23);
  }
  if (*(_QWORD *)this - (_QWORD)v9 + 14 < v15)
    goto LABEL_32;
  *v9 = 10;
  v16 = v9 + 2;
  v9[1] = v15;
  if (*(char *)(a1 + 23) >= 0)
    v17 = (const void *)a1;
  else
    v17 = *(const void **)a1;
  memcpy(v9 + 2, v17, v15);
  v18 = &v16[v15];
LABEL_22:
  if ((unint64_t)v18 >= *(_QWORD *)this)
    v18 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(this, v18);
  *v18 = 18;
  v19 = *((_DWORD *)a2 + 5);
  if (v19 > 0x7F)
  {
    v18[1] = v19 | 0x80;
    v21 = v19 >> 7;
    if (v19 >> 14)
    {
      v22 = v18 + 2;
      do
      {
        v23 = v22;
        *v22++ = v21 | 0x80;
        v24 = v21 >> 7;
        v25 = v21 >> 14;
        v21 >>= 7;
      }
      while (v25);
      v20 = v23 + 2;
      *v22 = v24;
    }
    else
    {
      v18[2] = v21;
      v20 = (unsigned __int8 *)(v18 + 3);
    }
  }
  else
  {
    v18[1] = v19;
    v20 = (unsigned __int8 *)(v18 + 2);
  }
  return siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::InternalSerializeWithCachedSizesToArray(a2, v20, this);
}

void google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::iterator_base<google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::KeyValuePair const>::SearchFrom(_QWORD *a1, unint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  std::string *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  std::string *v11;
  char v12;
  std::string v13[2];

  v4 = (_QWORD *)a1[1];
  v5 = v4[3];
  v6 = v4[1];
  if (v5 != v6 && !*(_QWORD *)(v4[4] + 8 * v5))
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 423);
    v7 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: m_->index_of_first_non_null_ == m_->num_buckets_ || m_->table_[m_->index_of_first_non_null_] != NULL: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v7->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
    v4 = (_QWORD *)a1[1];
    v6 = v4[1];
  }
  *a1 = 0;
  if (v6 <= a2)
  {
LABEL_9:
    a1[2] = a2;
  }
  else
  {
    v8 = v4[4];
    while (1)
    {
      v9 = *(_QWORD **)(v8 + 8 * a2);
      if (v9)
        break;
      if (v6 == ++a2)
      {
        a2 = v6;
        goto LABEL_9;
      }
    }
    v10 = *(_QWORD **)(v8 + 8 * (a2 ^ 1));
    a1[2] = a2;
    if (v9 == v10)
    {
      if (!v9[3])
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 432);
        v11 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: !tree->empty(): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v11->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
      }
      *a1 = *(_QWORD *)(*v9 + 32);
    }
    else
    {
      *a1 = v9;
    }
  }
}

void sub_1BFC2F938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList> const*> &,google::protobuf::MapPair<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList> const**>(_QWORD **a1, _QWORD **a2)
{
  uint64_t v4;
  _BOOL8 result;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD **v8;
  _QWORD **v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  _QWORD *v17;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v6, *a1))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,google::protobuf::internal::CompareByDerefFirst<google::protobuf::MapPair<std::string,std::string> const*> &,google::protobuf::MapPair<std::string,std::string> const**>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(*v9, v13))
    {
      v14 = v11;
      while (1)
      {
        *(_QWORD **)((char *)a1 + v14) = v13;
        v15 = v14 - 8;
        if (v14 == 8)
          break;
        v13 = *(_QWORD **)((char *)a1 + v14 - 16);
        v16 = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(v12, v13);
        v14 = v15;
        if (!v16)
        {
          v17 = (_QWORD **)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      v17 = a1;
LABEL_12:
      *v17 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

siri::dialogengine::PatternSchemaBinary::ListValue *google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::ListValue>(google::protobuf::internal::ArenaImpl *this)
{
  siri::dialogengine::PatternSchemaBinary::ListValue *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (siri::dialogengine::PatternSchemaBinary::ListValue *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x28uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<siri::dialogengine::PatternSchemaBinary::ListValue>);
    siri::dialogengine::PatternSchemaBinary::ListValue::ListValue(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (siri::dialogengine::PatternSchemaBinary::ListValue *)operator new();
    siri::dialogengine::PatternSchemaBinary::ListValue::ListValue(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFC2FB60(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C40C05B56FCLL);
  _Unwind_Resume(a1);
}

google::protobuf::internal *siri::dialogengine::PatternSchemaBinary::ListValue::_InternalParse(siri::dialogengine::PatternSchemaBinary::ListValue *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  uint64_t *v6;
  google::protobuf::internal *TagFallback;
  const char *v8;
  google::protobuf::internal *v11;
  std::string *v12;
  std::string *v13;
  unsigned int v14;
  char *v15;
  char *SizeFallback;
  unsigned int v17;
  int v18;
  int v19;
  BOOL v20;
  int v21;
  google::protobuf::internal *v22;
  int v23;
  google::protobuf::internal *v25;

  v25 = a2;
  v5 = (std::string **)((char *)this + 24);
  v6 = (uint64_t *)((char *)this + 8);
  while (1)
  {
    while (1)
    {
      if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v25, *((_DWORD *)a3 + 23)) & 1) != 0)
        return v25;
      TagFallback = (google::protobuf::internal *)((char *)v25 + 1);
      LODWORD(v8) = *(unsigned __int8 *)v25;
      if ((*(char *)v25 & 0x80000000) == 0)
        goto LABEL_6;
      v8 = (const char *)(v8 + (*(unsigned __int8 *)TagFallback << 7) - 128);
      if ((*(char *)TagFallback & 0x80000000) == 0)
      {
        TagFallback = (google::protobuf::internal *)((char *)v25 + 2);
LABEL_6:
        v25 = TagFallback;
        goto LABEL_7;
      }
      TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v25, v8);
      v25 = TagFallback;
      if (!TagFallback)
        return TagFallback;
LABEL_7:
      if (v8 >> 3 != 2)
        break;
      if (v8 != 18)
        goto LABEL_12;
      if (*((_DWORD *)this + 8) == 2)
      {
        v12 = *v5;
      }
      else
      {
        siri::dialogengine::PatternSchemaBinary::ListValue::clear_list_value((uint64_t)this);
        *((_DWORD *)this + 8) = 2;
        v12 = (std::string *)google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::MapValue>(0);
        *((_QWORD *)this + 3) = v12;
        TagFallback = v25;
      }
      v14 = *(unsigned __int8 *)TagFallback;
      if (*(char *)TagFallback < 0)
      {
        SizeFallback = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
        if (!SizeFallback)
          return 0;
        v15 = SizeFallback;
        v14 = v17;
      }
      else
      {
        v15 = (char *)TagFallback + 1;
      }
      v18 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v15, v14);
      v19 = *((_DWORD *)a3 + 22);
      v20 = __OFSUB__(v19--, 1);
      *((_DWORD *)a3 + 22) = v19;
      if (v19 < 0 != v20)
        return 0;
      v21 = v18;
      v22 = siri::dialogengine::PatternSchemaBinary::MapValue::_InternalParse((siri::dialogengine::PatternSchemaBinary::MapValue *)v12, (google::protobuf::internal *)v15, a3);
      if (!v22)
        return 0;
      ++*((_DWORD *)a3 + 22);
      if (*((_DWORD *)a3 + 20))
        return 0;
      v23 = *((_DWORD *)a3 + 7) + v21;
      *((_DWORD *)a3 + 7) = v23;
      *(_QWORD *)a3 = *((_QWORD *)a3 + 1) + (v23 & (v23 >> 31));
      v25 = v22;
    }
    if (v8 >> 3 == 1 && v8 == 10)
    {
      if (*((_DWORD *)this + 8) == 1)
      {
        v13 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
LABEL_27:
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v13 = *v5;
          TagFallback = v25;
        }
        v11 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v13, (std::string::value_type *)TagFallback, (uint64_t)a3);
        goto LABEL_29;
      }
      siri::dialogengine::PatternSchemaBinary::ListValue::clear_list_value((uint64_t)this);
      *((_DWORD *)this + 8) = 1;
      *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
      goto LABEL_27;
    }
LABEL_12:
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      break;
    v11 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v8, v6, TagFallback, a3);
LABEL_29:
    v25 = v11;
    if (!v11)
      return 0;
  }
  *((_DWORD *)a3 + 20) = (_DWORD)v8 - 1;
  return TagFallback;
}

uint64_t siri::dialogengine::PatternSchemaBinary::ListValue::clear_list_value(uint64_t this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  v1 = this;
  v2 = *(_DWORD *)(this + 32);
  if (v2 == 2)
  {
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  else if (v2 == 1)
  {
    v3 = *(_QWORD *)(this + 24);
    if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string && v3 != 0)
    {
      if (*(char *)(v3 + 23) < 0)
        operator delete(*(void **)v3);
      this = MEMORY[0x1C3B8D890](v3, 0x1012C40EC159624);
    }
  }
  *(_DWORD *)(v1 + 32) = 0;
  return this;
}

siri::dialogengine::PatternSchemaBinary::MapValue *google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::MapValue>(google::protobuf::internal::ArenaImpl *this)
{
  siri::dialogengine::PatternSchemaBinary::MapValue *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (siri::dialogengine::PatternSchemaBinary::MapValue *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x30uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<siri::dialogengine::PatternSchemaBinary::MapValue>);
    siri::dialogengine::PatternSchemaBinary::MapValue::MapValue(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (siri::dialogengine::PatternSchemaBinary::MapValue *)operator new();
    siri::dialogengine::PatternSchemaBinary::MapValue::MapValue(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFC2FEE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C401A3DEA33);
  _Unwind_Resume(a1);
}

google::protobuf::internal *siri::dialogengine::PatternSchemaBinary::MapValue::_InternalParse(siri::dialogengine::PatternSchemaBinary::MapValue *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  uint64_t *v4;
  uint64_t *v5;
  google::protobuf::internal *TagFallback;
  const char *v7;
  BOOL v8;
  char *v9;
  unsigned int v10;
  char *v11;
  char *SizeFallback;
  unsigned int v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  int v18;
  char *v19;
  int v20;
  uint64_t v21;
  std::string *v22;
  char v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *v29;
  siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *v30;
  uint64_t *v31;
  uint64_t v32;
  __int128 v33;
  const std::string *v34;
  siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *v35;
  uint64_t v36;
  siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *v37;
  google::protobuf::internal *v39;
  google::protobuf::internal::ArenaImpl **v40;
  uint64_t *v41;
  std::string v42;
  siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *v43;
  int v44[2];
  char *v45;

  v39 = a2;
  v4 = (uint64_t *)((char *)this + 8);
  v5 = (uint64_t *)((char *)this + 24);
LABEL_2:
  while ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v39, *((_DWORD *)a3 + 23)) & 1) == 0)
  {
    TagFallback = (google::protobuf::internal *)((char *)v39 + 1);
    LODWORD(v7) = *(unsigned __int8 *)v39;
    if ((*(char *)v39 & 0x80000000) == 0)
      goto LABEL_6;
    v7 = (const char *)(v7 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v39 + 2);
LABEL_6:
      v39 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v39, v7);
    v39 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    if ((_DWORD)v7 == 10)
    {
      v9 = (char *)TagFallback - 1;
      while (1)
      {
        v39 = (google::protobuf::internal *)(v9 + 1);
        v10 = v9[1];
        if (v9[1] < 0)
        {
          SizeFallback = google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)(v9 + 1), (const char *)v9[1]);
          if (!SizeFallback)
            return 0;
          v11 = SizeFallback;
          v10 = v13;
        }
        else
        {
          v11 = v9 + 2;
        }
        v14 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v11, v10);
        v15 = *((_DWORD *)a3 + 22);
        v16 = __OFSUB__(v15--, 1);
        *((_DWORD *)a3 + 22) = v15;
        if (v15 < 0 != v16)
          return 0;
        v17 = v14;
        v40 = (google::protobuf::internal::ArenaImpl **)v5;
        v41 = v5;
        memset(&v42, 0, sizeof(v42));
        *(_QWORD *)v44 = 0;
        v45 = v11;
        if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v45, *((_DWORD *)a3 + 23)) & 1) != 0)break;
        if (*v45 != 10)
          goto LABEL_38;
        v18 = v45[1];
        if (v45[1] < 0)
        {
          v19 = google::protobuf::internal::ReadSizeFallback((google::protobuf::internal *)(v45 + 1), (const char *)v45[1]);
          if (!v19)
            goto LABEL_63;
          v18 = v20;
        }
        else
        {
          v19 = v45 + 2;
        }
        v45 = (char *)google::protobuf::internal::EpsCopyInputStream::ReadString((uint64_t)a3, v19, v18, &v42);
        if (!v45)
          goto LABEL_63;
        if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v45, *((_DWORD *)a3 + 23)) & 1) != 0)
        {
          if (!v45)
            goto LABEL_63;
LABEL_40:
          v27 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse>(*v40);
          *(_QWORD *)v44 = v27;
LABEL_47:
          v31 = (uint64_t *)(v27 + 8);
          v32 = *(_QWORD *)(v27 + 8);
          *(_DWORD *)(v27 + 32) |= 1u;
          if ((uint64_t *)v32 == &google::protobuf::internal::fixed_address_empty_string)
          {
            google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)(v27 + 8), *(google::protobuf::Arena **)(v27 + 24), (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
            v32 = *v31;
          }
          if (*(char *)(v32 + 23) < 0)
            operator delete(*(void **)v32);
          v33 = *(_OWORD *)&v42.__r_.__value_.__l.__data_;
          *(_QWORD *)(v32 + 16) = *((_QWORD *)&v42.__r_.__value_.__l + 2);
          *(_OWORD *)v32 = v33;
          *((_BYTE *)&v42.__r_.__value_.__s + 23) = 0;
          v42.__r_.__value_.__s.__data_[0] = 0;
          v26 = *(_QWORD *)v44;
LABEL_52:
          v45 = (char *)google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::_InternalParse(v26, (google::protobuf::internal *)v45, a3);
          if (!v45)
            goto LABEL_63;
          v34 = (const std::string *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)v44 + 128))(*(_QWORD *)v44);
          std::string::operator=(&v42, v34);
          v35 = (siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::operator[](v41, (uint64_t)&v42);
          v43 = v35;
          v36 = *(_QWORD *)v44;
          *(_DWORD *)(*(_QWORD *)v44 + 32) |= 2u;
          v37 = *(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList **)(v36 + 16);
          if (!v37)
          {
            v37 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>(*(google::protobuf::internal::ArenaImpl **)(v36 + 24));
            *(_QWORD *)(v36 + 16) = v37;
            v35 = v43;
          }
          if (v37 != v35)
            siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::InternalSwap(v35, v37);
          v9 = v45;
          goto LABEL_32;
        }
        if (*v45 != 18)
          goto LABEL_40;
        v21 = *(_QWORD *)v41[2];
        v22 = google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::operator[](v41, (uint64_t)&v42);
        v43 = (siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)v22;
        if (v21 == *(_QWORD *)v41[2])
          goto LABEL_40;
        v45 = (char *)google::protobuf::internal::ParseContext::ParseMessage<siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>(a3, (int)v22, (google::protobuf::internal *)(v45 + 1));
        if (!v45)
        {
          google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::erase(v41, (unsigned __int8 *)&v42);
LABEL_63:
          google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse,std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>>::~Parser((uint64_t)&v40);
          return 0;
        }
        v23 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v45, *((_DWORD *)a3 + 23));
        v9 = v45;
        if ((v23 & 1) == 0)
        {
          if (!v45)
            goto LABEL_63;
          v28 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse>(*v40);
          *(_QWORD *)v44 = v28;
          v29 = v43;
          *(_DWORD *)(v28 + 32) |= 2u;
          v30 = *(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList **)(v28 + 16);
          if (!v30)
          {
            v30 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>(*(google::protobuf::internal::ArenaImpl **)(v28 + 24));
            *(_QWORD *)(v28 + 16) = v30;
          }
          if (v29 != v30)
            siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::InternalSwap(v30, v29);
          google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::erase(v41, (unsigned __int8 *)&v42);
          v27 = *(_QWORD *)v44;
          goto LABEL_47;
        }
LABEL_32:
        google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse,std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>>::~Parser((uint64_t)&v40);
        if (!v9)
          return 0;
        ++*((_DWORD *)a3 + 22);
        if (*((_DWORD *)a3 + 20))
          return 0;
        v24 = *((_DWORD *)a3 + 7) + v17;
        *((_DWORD *)a3 + 7) = v24;
        v25 = *((_QWORD *)a3 + 1) + (v24 & (v24 >> 31));
        *(_QWORD *)a3 = v25;
        v39 = (google::protobuf::internal *)v9;
        if (v25 <= (unint64_t)v9 || *v9 != 10)
          goto LABEL_2;
      }
      if (!v45)
        goto LABEL_63;
LABEL_38:
      v26 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse>(*v40);
      *(_QWORD *)v44 = v26;
      goto LABEL_52;
    }
    if ((_DWORD)v7)
      v8 = (v7 & 7) == 4;
    else
      v8 = 1;
    if (v8)
    {
      *((_DWORD *)a3 + 20) = (_DWORD)v7 - 1;
      return TagFallback;
    }
    v39 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v7, v4, TagFallback, a3);
    if (!v39)
      return 0;
  }
  return v39;
}

void sub_1BFC30330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse,std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>>::~Parser((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Parser<google::protobuf::internal::MapFieldLite<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse,std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>,google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>>::~Parser(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
  {
    if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2))
    {
      v3 = *(_QWORD *)(a1 + 48);
      if (v3)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

char *google::protobuf::internal::ParseContext::ParseMessage<siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>(google::protobuf::internal::EpsCopyInputStream *this, siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *a2, google::protobuf::internal *a3)
{
  int v6;
  const char *v7;
  char *v8;
  char *result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = *(char *)a3;
  v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result)
      return result;
    v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    v8 = (char *)a3 + 1;
  }
  v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  v12 = *((_DWORD *)this + 22);
  v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = (char *)siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result)
    return result;
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20))
    return 0;
  v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(_QWORD *)this = *((_QWORD *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

double google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::erase(_QWORD *a1, unsigned __int8 *a2)
{
  double result;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(&v6, a1[2], a2, 0);
  result = *(double *)&v6;
  if ((_QWORD)v6)
  {
    v4 = v6;
    v5 = v7;
    *(_QWORD *)&result = google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::erase((uint64_t)&v6, a1, (uint64_t *)&v4).n128_u64[0];
  }
  return result;
}

uint64_t google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse>(google::protobuf::internal::ArenaImpl *this)
{
  uint64_t result;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    result = (uint64_t)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x28uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse>);
  }
  else
  {
    result = operator new();
  }
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  *(_QWORD *)result = &off_1E7938638;
  *(_QWORD *)(result + 8) = &google::protobuf::internal::fixed_address_empty_string;
  return result;
}

siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>(google::protobuf::internal::ArenaImpl *this)
{
  siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x30uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>);
    siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::VisualComponentsCombinationList(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)operator new();
    siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::VisualComponentsCombinationList(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFC305DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C4050885234);
  _Unwind_Resume(a1);
}

void siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::InternalSwap(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *this, siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  unint64_t v13;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v13;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
LABEL_10:
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
      goto LABEL_7;
    }
  }
  else if ((v6 & 1) == 0)
  {
    goto LABEL_8;
  }
  v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
  if ((v4 & 1) == 0)
    goto LABEL_10;
LABEL_6:
  v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
  v9 = *(_QWORD *)(v8 + 16);
  v10 = *(_OWORD *)v8;
  v11 = *(_QWORD *)(v7 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v7;
  *(_QWORD *)(v8 + 16) = v11;
  *(_OWORD *)v7 = v10;
  *(_QWORD *)(v7 + 16) = v9;
LABEL_8:
  v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)((char *)this + 24), (siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)((char *)a2 + 24));
}

google::protobuf::internal *google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::_InternalParse(uint64_t a1, google::protobuf::internal *a2, google::protobuf::internal::EpsCopyInputStream *this)
{
  std::string **v5;
  google::protobuf::internal *TagFallback;
  const char *v7;
  google::protobuf::internal *SizeFallback;
  std::string *v10;
  int v11;
  std::string::value_type *v12;
  uint64_t v13;
  siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *v14;
  int v15;
  google::protobuf::internal *v17;

  v17 = a2;
  v5 = (std::string **)(a1 + 8);
  while (1)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v17, *((_DWORD *)this + 23)) & 1) != 0)return v17;
    TagFallback = (google::protobuf::internal *)((char *)v17 + 1);
    LODWORD(v7) = *(unsigned __int8 *)v17;
    if ((*(char *)v17 & 0x80000000) == 0)
      goto LABEL_6;
    v7 = (const char *)(v7 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v17 + 2);
LABEL_6:
      v17 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v17, v7);
    v17 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    if ((_DWORD)v7 == 10)
    {
      *(_DWORD *)(a1 + 32) |= 1u;
      v10 = *(std::string **)(a1 + 8);
      if (v10 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
        google::protobuf::internal::ArenaStringPtr::CreateInstance(v5, *(google::protobuf::Arena **)(a1 + 24), (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
        v10 = *(std::string **)(a1 + 8);
        TagFallback = v17;
      }
      v11 = *(unsigned __int8 *)TagFallback;
      if (*(char *)TagFallback < 0)
      {
        SizeFallback = (google::protobuf::internal *)google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
        if (!SizeFallback)
          goto LABEL_26;
        v12 = (std::string::value_type *)SizeFallback;
        v11 = v15;
      }
      else
      {
        v12 = (char *)TagFallback + 1;
      }
      SizeFallback = (google::protobuf::internal *)google::protobuf::internal::EpsCopyInputStream::ReadString((uint64_t)this, v12, v11, v10);
      goto LABEL_26;
    }
    if ((_DWORD)v7 == 18)
    {
      *(_DWORD *)(a1 + 32) |= 2u;
      v13 = *(_QWORD *)(a1 + 16);
      if (!v13)
      {
        v14 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>(*(google::protobuf::internal::ArenaImpl **)(a1 + 24));
        LODWORD(v13) = (_DWORD)v14;
        *(_QWORD *)(a1 + 16) = v14;
        TagFallback = v17;
      }
      SizeFallback = (google::protobuf::internal *)google::protobuf::internal::ParseContext::ParseMessage<siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>(this, v13, TagFallback);
      goto LABEL_26;
    }
    if (!(_DWORD)v7 || (v7 & 7) == 4)
      break;
    SizeFallback = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v7, 0, TagFallback, this);
LABEL_26:
    v17 = SizeFallback;
    if (!SizeFallback)
      return 0;
  }
  *((_DWORD *)this + 20) = (_DWORD)v7 - 1;
  return TagFallback;
}

uint64_t google::protobuf::internal::arena_destruct_object<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

__n128 google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::erase(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  uint64_t v10;
  unint64_t v11;
  std::string *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD *v18;
  std::string *v19;
  _BOOL4 v20;
  unint64_t v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  std::string *v25;
  uint64_t v26;
  std::string *v27;
  uint64_t *v28;
  __n128 result;
  unint64_t v30;
  uint64_t v31;
  __n128 v32;
  unint64_t v33;
  char v34;
  _QWORD *v35;
  std::string v36[2];

  v6 = *a3;
  if (!*a2)
  {
    v7 = *(_QWORD *)(v6 + 24);
    if (v7)
    {
      *(_QWORD *)(v7 + 24) = &off_1E79387F8;
      google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v7 + 48));
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)(v7 + 32));
      if (*(char *)(v7 + 23) < 0)
        operator delete(*(void **)v7);
      MEMORY[0x1C3B8D890](v7, 0x10B2C40D629C202);
      v6 = *a3;
    }
  }
  v32 = *(__n128 *)a3;
  v33 = a3[2];
  v8 = *(_QWORD *)(v6 + 32);
  if (v8)
    goto LABEL_7;
  v35 = 0;
  v9 = google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::iterator_base<google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::KeyValuePair>::revalidate_if_necessary((uint64_t)a3, (uint64_t *)&v35);
  v10 = a3[2];
  if (v9)
  {
    v11 = v10 + 1;
  }
  else
  {
    if ((v10 & 1) != 0)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v36, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 456);
      v12 = google::protobuf::internal::LogMessage::operator<<(v36, "CHECK failed: (bucket_index_ & 1) == (0u): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v34, (const char **)&v12->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v36[0].__r_.__value_.__l.__data_);
      v10 = a3[2];
    }
    v13 = *(_QWORD *)(*(_QWORD *)(a3[1] + 32) + 8 * v10);
    v14 = (uint64_t)v35;
    v15 = (_QWORD *)v35[1];
    if (v15)
    {
      do
      {
        v16 = v15;
        v15 = (_QWORD *)*v15;
      }
      while (v15);
    }
    else
    {
      do
      {
        v16 = *(_QWORD **)(v14 + 16);
        v17 = *v16 == v14;
        v14 = (uint64_t)v16;
      }
      while (!v17);
    }
    v35 = v16;
    if (v16 != (_QWORD *)(v13 + 8))
    {
      v8 = v16[4];
LABEL_7:
      *a3 = v8;
      goto LABEL_21;
    }
    v11 = v10 + 2;
  }
  google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::iterator_base<google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::KeyValuePair>::SearchFrom(a3, v11);
LABEL_21:
  v18 = (_QWORD *)a2[2];
  if ((_QWORD *)v32.n128_u64[1] != v18)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v36, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 606);
    v19 = google::protobuf::internal::LogMessage::operator<<(v36, "CHECK failed: (it.m_) == (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v35, (const char **)&v19->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v36[0].__r_.__value_.__l.__data_);
  }
  v35 = 0;
  v20 = google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::iterator_base<google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::KeyValuePair>::revalidate_if_necessary((uint64_t)&v32, (uint64_t *)&v35);
  v21 = v33;
  v22 = (void **)v32.n128_u64[0];
  v23 = v18[4];
  v24 = *(_QWORD *)(v23 + 8 * v33);
  if (v20)
  {
    if (!v24 || v24 == *(_QWORD *)(v23 + 8 * (v33 ^ 1)))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v36, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 612);
      v25 = google::protobuf::internal::LogMessage::operator<<(v36, "CHECK failed: TableEntryIsNonEmptyList(b): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v34, (const char **)&v25->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v36[0].__r_.__value_.__l.__data_);
      v24 = *(_QWORD *)(v18[4] + 8 * v21);
    }
    v26 = google::protobuf::Map<std::string,std::string>::InnerMap::EraseFromLinkedList((uint64_t)v22, v24);
    goto LABEL_35;
  }
  if (!v24 || v24 != *(_QWORD *)(v23 + 8 * (v33 ^ 1)))
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v36, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 617);
    v27 = google::protobuf::internal::LogMessage::operator<<(v36, "CHECK failed: TableEntryIsTree(b): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v34, (const char **)&v27->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v36[0].__r_.__value_.__l.__data_);
    v24 = *(_QWORD *)(v18[4] + 8 * v21);
  }
  v28 = (uint64_t *)std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::find<std::string *>(v24, (_QWORD *)v35[4]);
  if ((uint64_t *)(v24 + 8) != v28)
    std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::erase(v24, v28);
  if (!*(_QWORD *)(v24 + 24))
  {
    google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::DestroyTree(v18[5], (_QWORD **)v24);
    v26 = 0;
    *(_QWORD *)(v18[4] + ((8 * v21) | 8)) = 0;
    v21 &= ~1uLL;
LABEL_35:
    *(_QWORD *)(v18[4] + 8 * v21) = v26;
  }
  google::protobuf::Map<std::string,std::string>::InnerMap::DestroyNode((uint64_t)v18, v22);
  --*v18;
  if (v21 == v18[3])
  {
    v30 = v18[1];
    if (v21 < v30)
    {
      v31 = v18[4];
      do
      {
        if (*(_QWORD *)(v31 + 8 * v21))
          break;
        v18[3] = ++v21;
      }
      while (v30 != v21);
    }
  }
  result = *(__n128 *)a3;
  *(_OWORD *)a1 = *(_OWORD *)a3;
  *(_QWORD *)(a1 + 16) = a3[2];
  return result;
}

void sub_1BFC30BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

BOOL google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::iterator_base<google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::KeyValuePair>::revalidate_if_necessary(uint64_t a1, uint64_t *a2)
{
  unsigned __int8 *v4;
  uint64_t v5;
  std::string *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string::size_type v10;
  uint64_t v11;
  uint64_t v12;
  char v14;
  std::string v15[2];

  v4 = *(unsigned __int8 **)a1;
  if (!*(_QWORD *)a1 || (v5 = *(_QWORD *)(a1 + 8)) == 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 481);
    v6 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: node_ != NULL && m_ != NULL: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v14, (const char **)&v6->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
    v4 = *(unsigned __int8 **)a1;
    v5 = *(_QWORD *)(a1 + 8);
  }
  v7 = *(_QWORD *)(a1 + 16) & (*(_QWORD *)(v5 + 8) - 1);
  *(_QWORD *)(a1 + 16) = v7;
  v8 = *(_QWORD *)(v5 + 32);
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if ((unsigned __int8 *)v9 == v4)
    return 1;
  if (v9 && v9 != *(_QWORD *)(v8 + 8 * (v7 ^ 1)))
  {
    while (1)
    {
      v9 = *(_QWORD *)(v9 + 32);
      if (!v9)
        break;
      if ((unsigned __int8 *)v9 == v4)
        return 1;
    }
  }
  google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(v15, v5, v4, a2);
  v10 = v15[0].__r_.__value_.__r.__words[2];
  *(_QWORD *)(a1 + 16) = *((_QWORD *)&v15[0].__r_.__value_.__l + 2);
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
  v12 = *(_QWORD *)(v11 + 8 * v10);
  return !v12 || v12 != *(_QWORD *)(v11 + 8 * (v10 ^ 1));
}

void sub_1BFC30D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<siri::dialogengine::PatternSchemaBinary::MapValue>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<siri::dialogengine::PatternSchemaBinary::ListValue>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t siri::dialogengine::PatternSchemaBinary::ListValue::ByteSizeLong(siri::dialogengine::PatternSchemaBinary::ListValue *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v2 = *((_DWORD *)this + 8);
  if (v2 == 2)
  {
    v7 = siri::dialogengine::PatternSchemaBinary::MapValue::ByteSizeLong(*((siri::dialogengine::PatternSchemaBinary::MapValue **)this
                                                                         + 3));
    v6 = v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
LABEL_7:
    result = v6 + 1;
    goto LABEL_9;
  }
  if (v2 == 1)
  {
    v3 = *((_QWORD *)this + 3);
    v4 = *(unsigned __int8 *)(v3 + 23);
    v5 = *(_QWORD *)(v3 + 8);
    if ((v4 & 0x80u) == 0)
      v5 = v4;
    v6 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6);
    goto LABEL_7;
  }
  result = 0;
LABEL_9:
  v9 = *((_QWORD *)this + 1);
  if ((v9 & 1) != 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v10 + 23) < 0)
      v11 = *(_QWORD *)(v10 + 8);
    else
      v11 = *(unsigned __int8 *)(v10 + 23);
    result += v11;
  }
  *((_DWORD *)this + 5) = result;
  return result;
}

uint64_t siri::dialogengine::PatternSchemaBinary::MapValue::ByteSizeLong(siri::dialogengine::PatternSchemaBinary::MapValue *this)
{
  unsigned int *v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *v6;
  int v7;
  int v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v2 = (unsigned int *)*((_QWORD *)this + 5);
  v3 = *v2;
  *((_QWORD *)&v18 + 1) = v2;
  google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::iterator_base<google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::KeyValuePair>::SearchFrom(&v18, *((_QWORD *)v2 + 3));
  v16 = v18;
  v17 = v19;
  for (i = v18; (_QWORD)v16; i = v16)
  {
    v5 = *(_QWORD *)(i + 24);
    v6 = (siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)(v5 + 24);
    v7 = *(unsigned __int8 *)(v5 + 23);
    v8 = *(_DWORD *)(v5 + 8);
    if ((v7 & 0x80u) == 0)
      v8 = v7;
    v9 = v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 2;
    v10 = siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::ByteSizeLong(v6);
    v11 = v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + v9;
    v3 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6);
    google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::iterator_base<google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::KeyValuePair const>::operator++((unsigned __int8 **)&v16);
  }
  v12 = *((_QWORD *)this + 1);
  if ((v12 & 1) != 0)
  {
    v14 = v12 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v14 + 23) < 0)
      v15 = *(_QWORD *)(v14 + 8);
    else
      v15 = *(unsigned __int8 *)(v14 + 23);
    v3 += v15;
  }
  *((_DWORD *)this + 5) = v3;
  return v3;
}

void siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::MergeFrom(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *this, const siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *a2)
{
  std::string *v4;
  uint64_t v5;
  char v6;
  std::string v7[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.cc", 3196);
    v4 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::ListValue>::TypeHandler>((int **)this + 3, (uint64_t)a2 + 24);
}

void sub_1BFC30F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::ListValue>::TypeHandler>(int **this, uint64_t a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  const siri::dialogengine::PatternSchemaBinary::ListValue **v13;
  siri::dialogengine::PatternSchemaBinary::ListValue **v14;
  const siri::dialogengine::PatternSchemaBinary::ListValue *v15;
  const siri::dialogengine::PatternSchemaBinary::ListValue *v16;
  siri::dialogengine::PatternSchemaBinary::ListValue *v17;
  google::protobuf::internal::ArenaImpl *v18;
  int v19;
  uint64_t v20;
  siri::dialogengine::PatternSchemaBinary::ListValue **v21;
  const siri::dialogengine::PatternSchemaBinary::ListValue **v22;
  const siri::dialogengine::PatternSchemaBinary::ListValue *v23;
  siri::dialogengine::PatternSchemaBinary::ListValue *v24;
  int v25;
  int *v26;
  char v27;
  std::string v28[2];

  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    v9 = *this[2];
    v10 = *((int *)this + 2);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (const siri::dialogengine::PatternSchemaBinary::ListValue **)(v6 + 8);
      v14 = (siri::dialogengine::PatternSchemaBinary::ListValue **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<siri::dialogengine::PatternSchemaBinary::ListValue>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (siri::dialogengine::PatternSchemaBinary::ListValue **)((char *)v8 + v20);
      v22 = (const siri::dialogengine::PatternSchemaBinary::ListValue **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::ListValue>(v18);
        google::protobuf::internal::GenericTypeHandler<siri::dialogengine::PatternSchemaBinary::ListValue>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25)
      *v26 = v25;
  }
}

void sub_1BFC31104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<siri::dialogengine::PatternSchemaBinary::ListValue>::Merge(const siri::dialogengine::PatternSchemaBinary::ListValue *a1, siri::dialogengine::PatternSchemaBinary::ListValue *a2)
{
  siri::dialogengine::PatternSchemaBinary::ListValue::MergeFrom(a2, a1);
}

void siri::dialogengine::PatternSchemaBinary::ListValue::MergeFrom(siri::dialogengine::PatternSchemaBinary::ListValue *this, const siri::dialogengine::PatternSchemaBinary::ListValue *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  siri::dialogengine::PatternSchemaBinary::MapValue *v7;
  const std::string *v8;
  std::string *v9;
  const siri::dialogengine::PatternSchemaBinary::MapValue *v10;
  char v11;
  std::string v12[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.cc", 3005);
    v4 = google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v11, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v12[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  v6 = *((_DWORD *)a2 + 8);
  if (v6 != 1)
  {
    if (v6 != 2)
      return;
    if (*((_DWORD *)this + 8) == 2)
    {
      v7 = (siri::dialogengine::PatternSchemaBinary::MapValue *)*((_QWORD *)this + 3);
    }
    else
    {
      siri::dialogengine::PatternSchemaBinary::ListValue::clear_list_value((uint64_t)this);
      *((_DWORD *)this + 8) = 2;
      v7 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::MapValue>(0);
      *((_QWORD *)this + 3) = v7;
      if (*((_DWORD *)a2 + 8) != 2)
      {
        v10 = (const siri::dialogengine::PatternSchemaBinary::MapValue *)&siri::dialogengine::PatternSchemaBinary::_MapValue_default_instance_;
        goto LABEL_17;
      }
    }
    v10 = (const siri::dialogengine::PatternSchemaBinary::MapValue *)*((_QWORD *)a2 + 3);
LABEL_17:
    siri::dialogengine::PatternSchemaBinary::MapValue::MergeFrom(v7, v10);
    return;
  }
  v8 = (const std::string *)*((_QWORD *)a2 + 3);
  if (*((_DWORD *)this + 8) == 1)
  {
    v9 = (std::string *)*((_QWORD *)this + 3);
    if (v9 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
    {
      std::string::operator=(v9, v8);
      return;
    }
  }
  else
  {
    siri::dialogengine::PatternSchemaBinary::ListValue::clear_list_value((uint64_t)this);
    *((_DWORD *)this + 8) = 1;
    *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  }
  google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, (uint64_t)v8);
}

void sub_1BFC3126C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void siri::dialogengine::PatternSchemaBinary::MapValue::MergeFrom(siri::dialogengine::PatternSchemaBinary::MapValue *this, const siri::dialogengine::PatternSchemaBinary::MapValue *a2)
{
  std::string *v4;
  uint64_t v5;
  char v6;
  std::string v7[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.cc", 2751);
    v4 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  google::protobuf::internal::MapFieldLite<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse,std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergeFrom((uint64_t *)this + 3, (uint64_t)a2 + 24);
}

void sub_1BFC31310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::MapFieldLite<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse,std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergeFrom(uint64_t *a1, uint64_t a2)
{
  uint64_t i;
  uint64_t v4;
  const siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *v5;
  std::string *v6;
  siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  *((_QWORD *)&v10 + 1) = *(_QWORD *)(a2 + 16);
  google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::iterator_base<google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::KeyValuePair>::SearchFrom(&v10, *(_QWORD *)(*((_QWORD *)&v10 + 1) + 24));
  v8 = v10;
  v9 = v11;
  for (i = v10; (_QWORD)v8; i = v8)
  {
    v4 = *(_QWORD *)(i + 24);
    v5 = (const siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)(v4 + 24);
    v6 = google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::operator[](a1, v4);
    if (v5 != (const siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)v6)
    {
      v7 = (siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)v6;
      siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::Clear((siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)v6);
      siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::MergeFrom(v7, v5);
    }
    google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::iterator_base<google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::KeyValuePair const>::operator++((unsigned __int8 **)&v8);
  }
}

void siri::dialogengine::PatternSchemaBinary::ListValue::Clear(siri::dialogengine::PatternSchemaBinary::ListValue *this)
{
  google::protobuf::internal::InternalMetadataWithArenaLite *v2;
  char v3;

  siri::dialogengine::PatternSchemaBinary::ListValue::clear_list_value((uint64_t)this);
  v3 = *((_BYTE *)this + 8);
  v2 = (siri::dialogengine::PatternSchemaBinary::ListValue *)((char *)this + 8);
  *((_DWORD *)v2 + 2) = 0;
  if ((v3 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v2);
}

void siri::dialogengine::PatternSchemaBinary::ListValue::~ListValue(siri::dialogengine::PatternSchemaBinary::ListValue *this)
{
  siri::dialogengine::PatternSchemaBinary::ListValue::~ListValue(this);
  JUMPOUT(0x1C3B8D890);
}

{
  *(_QWORD *)this = &off_1E7938768;
  if (*((_DWORD *)this + 8))
    siri::dialogengine::PatternSchemaBinary::ListValue::clear_list_value((uint64_t)this);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *siri::dialogengine::PatternSchemaBinary::ListValue::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "siri.dialogengine.PatternSchemaBinary.ListValue");
}

siri::dialogengine::PatternSchemaBinary::ListValue *siri::dialogengine::PatternSchemaBinary::ListValue::New(siri::dialogengine::PatternSchemaBinary::ListValue *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::ListValue>(0);
}

siri::dialogengine::PatternSchemaBinary::ListValue *siri::dialogengine::PatternSchemaBinary::ListValue::New(siri::dialogengine::PatternSchemaBinary::ListValue *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::ListValue>(a2);
}

uint64_t siri::dialogengine::PatternSchemaBinary::ListValue::IsInitialized(siri::dialogengine::PatternSchemaBinary::ListValue *this)
{
  return 1;
}

void siri::dialogengine::PatternSchemaBinary::ListValue::CheckTypeAndMergeFrom(siri::dialogengine::PatternSchemaBinary::ListValue *this, const google::protobuf::MessageLite *lpsrc)
{
  siri::dialogengine::PatternSchemaBinary::ListValue::MergeFrom(this, lpsrc);
}

uint64_t siri::dialogengine::PatternSchemaBinary::ListValue::GetCachedSize(siri::dialogengine::PatternSchemaBinary::ListValue *this)
{
  return *((unsigned int *)this + 5);
}

void *google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::Init(uint64_t *a1)
{
  google::protobuf::internal::ArenaImpl *v2;
  _QWORD *AlignedAndAddCleanup;
  void *result;

  v2 = (google::protobuf::internal::ArenaImpl *)*a1;
  if (*a1)
  {
    if (*((_QWORD *)v2 + 14))
    AlignedAndAddCleanup = google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v2, 0x30uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap>);
    *AlignedAndAddCleanup = 0;
    AlignedAndAddCleanup[2] = AlignedAndAddCleanup;
    AlignedAndAddCleanup[4] = 0;
    AlignedAndAddCleanup[5] = v2;
    result = google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::CreateEmptyTable((uint64_t)AlignedAndAddCleanup, 8uLL);
    AlignedAndAddCleanup[4] = result;
  }
  else
  {
    AlignedAndAddCleanup = (_QWORD *)operator new();
    *AlignedAndAddCleanup = 0;
    AlignedAndAddCleanup[2] = AlignedAndAddCleanup;
    AlignedAndAddCleanup[4] = 0;
    AlignedAndAddCleanup[5] = 0;
    result = google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::CreateEmptyTable((uint64_t)AlignedAndAddCleanup, 8uLL);
    AlignedAndAddCleanup[4] = result;
  }
  AlignedAndAddCleanup[3] = 8;
  AlignedAndAddCleanup[1] = 8;
  a1[2] = (uint64_t)AlignedAndAddCleanup;
  return result;
}

void sub_1BFC315CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10E0C40D5F42F35);
  _Unwind_Resume(a1);
}

_QWORD *google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::~Map(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::clear(a1);
  if (!*a1)
  {
    v2 = a1[2];
    if (v2)
    {
      v3 = google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::~InnerMap(v2);
      MEMORY[0x1C3B8D890](v3, 0x10E0C40D5F42F35);
    }
  }
  return a1;
}

__n128 google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::clear(_QWORD *a1)
{
  uint64_t v2;
  __n128 result;
  __n128 i;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  __n128 v8;

  v8.n128_u64[0] = a1[2];
  google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::iterator_base<google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::KeyValuePair>::SearchFrom(&v7, *(_QWORD *)(v8.n128_u64[0] + 24));
  v2 = v7;
  result.n128_u64[0] = v8.n128_u64[0];
  for (i = v8; v7; i = v8)
  {
    v5 = v2;
    v6 = i;
    google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::erase((uint64_t)&v7, a1, &v5);
    v2 = v7;
    result = v8;
  }
  return result;
}

uint64_t google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::~InnerMap(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::string *v8;
  uint64_t *v9;
  void **v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  char v16;
  std::string v17[2];

  if (*(_QWORD *)(a1 + 32))
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      v3 = 0;
      do
      {
        v4 = *(_QWORD *)(a1 + 32);
        v5 = *(_QWORD *)(v4 + 8 * v3);
        if (v5)
        {
          if (v5 == *(_QWORD *)(v4 + 8 * (v3 ^ 1)))
          {
            v7 = v3 + 1;
            if ((v3 & 1) != 0 || v5 != *(_QWORD *)(v4 + 8 * v7))
            {
              google::protobuf::internal::LogMessage::LogMessage((uint64_t)v17, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/map.h", 531);
              v8 = google::protobuf::internal::LogMessage::operator<<(v17, "CHECK failed: table_[b] == table_[b + 1] && (b & 1) == 0: ");
              google::protobuf::internal::LogFinisher::operator=((int)&v16, (const char **)&v8->__r_.__value_.__l.__data_);
              google::protobuf::internal::LogMessage::~LogMessage((void **)&v17[0].__r_.__value_.__l.__data_);
              v4 = *(_QWORD *)(a1 + 32);
            }
            *(_QWORD *)(v4 + 8 * v7) = 0;
            *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v3) = 0;
            v9 = *(uint64_t **)v5;
            do
            {
              v10 = (void **)v9[4];
              v11 = (uint64_t *)v9[1];
              v12 = v9;
              if (v11)
              {
                do
                {
                  v13 = v11;
                  v11 = (uint64_t *)*v11;
                }
                while (v11);
              }
              else
              {
                do
                {
                  v13 = (uint64_t *)v12[2];
                  v14 = *v13 == (_QWORD)v12;
                  v12 = v13;
                }
                while (!v14);
              }
              std::__tree<std::string *,google::protobuf::Map<std::string,std::string>::InnerMap::KeyCompare,google::protobuf::Map<std::string,std::string>::MapAllocator<std::string *>>::erase(v5, v9);
              google::protobuf::Map<std::string,std::string>::InnerMap::DestroyNode(a1, v10);
              v9 = v13;
            }
            while (v13 != (uint64_t *)(v5 + 8));
            google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::DestroyTree(*(_QWORD *)(a1 + 40), (_QWORD **)v5);
            goto LABEL_20;
          }
          *(_QWORD *)(v4 + 8 * v3) = 0;
          do
          {
            v6 = *(_QWORD *)(v5 + 32);
            google::protobuf::Map<std::string,std::string>::InnerMap::DestroyNode(a1, (void **)v5);
            v5 = v6;
          }
          while (v6);
        }
        v7 = v3;
LABEL_20:
        v3 = v7 + 1;
        v2 = *(_QWORD *)(a1 + 8);
      }
      while (v7 + 1 < v2);
    }
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 24) = v2;
    if (!*(_QWORD *)(a1 + 40))
      operator delete(*(void **)(a1 + 32));
  }
  return a1;
}

void sub_1BFC31858(void *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  __clang_call_terminate(a1);
}

void siri::dialogengine::PatternSchemaBinary::MapValue::~MapValue(siri::dialogengine::PatternSchemaBinary::MapValue *this)
{
  uint64_t *v1;

  *(_QWORD *)this = &off_1E79386D8;
  v1 = (uint64_t *)((char *)this + 8);
  google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::~Map((_QWORD *)this + 3);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
}

{
  uint64_t *v1;

  *(_QWORD *)this = &off_1E79386D8;
  v1 = (uint64_t *)((char *)this + 8);
  google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::~Map((_QWORD *)this + 3);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t *v1;

  *(_QWORD *)this = &off_1E79386D8;
  v1 = (uint64_t *)((char *)this + 8);
  google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::~Map((_QWORD *)this + 3);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
}

_QWORD *siri::dialogengine::PatternSchemaBinary::MapValue::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "siri.dialogengine.PatternSchemaBinary.MapValue");
}

siri::dialogengine::PatternSchemaBinary::MapValue *siri::dialogengine::PatternSchemaBinary::MapValue::New(siri::dialogengine::PatternSchemaBinary::MapValue *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::MapValue>(0);
}

siri::dialogengine::PatternSchemaBinary::MapValue *siri::dialogengine::PatternSchemaBinary::MapValue::New(siri::dialogengine::PatternSchemaBinary::MapValue *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::MapValue>(a2);
}

void siri::dialogengine::PatternSchemaBinary::MapValue::Clear(siri::dialogengine::PatternSchemaBinary::MapValue *this)
{
  google::protobuf::internal::InternalMetadataWithArenaLite *v2;
  char v3;

  google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::clear((_QWORD *)this + 3);
  v3 = *((_BYTE *)this + 8);
  v2 = (siri::dialogengine::PatternSchemaBinary::MapValue *)((char *)this + 8);
  *((_DWORD *)v2 + 2) = 0;
  if ((v3 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v2);
}

uint64_t siri::dialogengine::PatternSchemaBinary::MapValue::IsInitialized(siri::dialogengine::PatternSchemaBinary::MapValue *this)
{
  return 1;
}

void siri::dialogengine::PatternSchemaBinary::MapValue::CheckTypeAndMergeFrom(siri::dialogengine::PatternSchemaBinary::MapValue *this, const google::protobuf::MessageLite *lpsrc)
{
  siri::dialogengine::PatternSchemaBinary::MapValue::MergeFrom(this, lpsrc);
}

uint64_t siri::dialogengine::PatternSchemaBinary::MapValue::GetCachedSize(siri::dialogengine::PatternSchemaBinary::MapValue *this)
{
  return *((unsigned int *)this + 5);
}

void siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse::~MapValue_ValueEntry_DoNotUse(siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse *this)
{
  google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(this);
  JUMPOUT(0x1C3B8D890);
}

_QWORD *google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

uint64_t google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::New()
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  *(_QWORD *)result = &off_1E7938638;
  *(_QWORD *)(result + 8) = &google::protobuf::internal::fixed_address_empty_string;
  return result;
}

uint64_t google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::New(int a1, google::protobuf::internal::ArenaImpl *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse>(this);
}

uint64_t google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::GetArena(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

void google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::Clear(uint64_t a1)
{
  uint64_t v2;
  siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *v3;

  v2 = *(_QWORD *)(a1 + 8);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList **)(a1 + 16);
  if (v3)
    siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::Clear(v3);
  *(_DWORD *)(a1 + 32) &= 0xFFFFFFFC;
}

BOOL google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::IsInitialized(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::CheckTypeAndMergeFrom(uint64_t a1, _DWORD *lpsrc)
{
  google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergeFromInternal(a1, lpsrc);
}

uint64_t google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::ByteSizeLong(_DWORD *a1)
{
  int v2;
  uint64_t v3;
  siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v2 = a1[8];
  if ((v2 & 1) != 0)
  {
    v7 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 128))(a1);
    v8 = *(unsigned __int8 *)(v7 + 23);
    if ((v8 & 0x80u) != 0)
      v8 = *(_DWORD *)(v7 + 8);
    v3 = (int)(v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6)) + 1;
    if ((a1[8] & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v6 = 0;
    return v6 + v3;
  }
  v3 = 0;
  if ((v2 & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v4 = (siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 136))(a1);
  v5 = siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::ByteSizeLong(v4);
  v6 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  return v6 + v3;
}

uint64_t google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::GetCachedSize(_DWORD *a1)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int v7;

  v2 = a1[8];
  if ((v2 & 1) != 0)
  {
    v6 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 128))(a1);
    v7 = *(unsigned __int8 *)(v6 + 23);
    if ((v7 & 0x80u) != 0)
      v7 = *(_DWORD *)(v6 + 8);
    v3 = v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((a1[8] & 2) != 0)
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    return v5 + v3;
  }
  v3 = 0;
  if ((v2 & 2) == 0)
    goto LABEL_7;
LABEL_3:
  v4 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 136))(a1);
  v5 = *(_DWORD *)(v4 + 20) + ((9 * (__clz(*(_DWORD *)(v4 + 20) | 1) ^ 0x1F) + 73) >> 6) + 1;
  return v5 + v3;
}

unsigned __int8 *google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::InternalSerializeWithCachedSizesToArray(uint64_t a1, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  uint64_t v6;
  int64_t v7;
  const void *v8;
  char *v9;
  siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *v10;
  unsigned int v11;
  char *v12;
  unsigned int v13;
  _BYTE *v14;
  _BYTE *v15;
  unsigned int v16;
  unsigned int v17;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  if (*(char *)(v6 + 23) < 0)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7 > 127)
    {
LABEL_21:
      v9 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a3, 1, v6, a2);
      goto LABEL_11;
    }
  }
  else
  {
    v7 = *(unsigned __int8 *)(v6 + 23);
  }
  if (*(_QWORD *)a3 - (_QWORD)a2 + 14 < v7)
    goto LABEL_21;
  *a2 = 10;
  a2[1] = v7;
  if (*(char *)(v6 + 23) >= 0)
    v8 = (const void *)v6;
  else
    v8 = *(const void **)v6;
  memcpy(a2 + 2, v8, v7);
  v9 = &a2[v7 + 2];
LABEL_11:
  v10 = (siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  if (*(_QWORD *)a3 <= (unint64_t)v9)
    v9 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v9);
  *v9 = 18;
  v11 = *((_DWORD *)v10 + 5);
  if (v11 > 0x7F)
  {
    v9[1] = v11 | 0x80;
    v13 = v11 >> 7;
    if (v11 >> 14)
    {
      v14 = v9 + 2;
      do
      {
        v15 = v14;
        *v14++ = v13 | 0x80;
        v16 = v13 >> 7;
        v17 = v13 >> 14;
        v13 >>= 7;
      }
      while (v17);
      v12 = v15 + 2;
      *v14 = v16;
    }
    else
    {
      v9[2] = v13;
      v12 = v9 + 3;
    }
  }
  else
  {
    v9[1] = v11;
    v12 = v9 + 2;
  }
  return siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::InternalSerializeWithCachedSizesToArray(v10, v12, a3);
}

uint64_t google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::key(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::value(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 16))
    return *(_QWORD *)(a1 + 16);
  else
    return qword_1EF584808;
}

void google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergeFromInternal(uint64_t a1, _DWORD *a2)
{
  int v2;
  std::string **v5;
  __int128 *v6;
  const siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *v7;

  v2 = a2[8];
  if (v2)
  {
    if ((v2 & 1) != 0)
    {
      v5 = (std::string **)(a1 + 8);
      if (*(uint64_t **)(a1 + 8) == &google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)(a1 + 8), *(google::protobuf::Arena **)(a1 + 24), (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
      v6 = (__int128 *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 128))(a2);
      if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)(a1 + 8), *(google::protobuf::Arena **)(a1 + 24), v6);
      else
        std::string::operator=(*v5, (const std::string *)v6);
      *(_DWORD *)(a1 + 32) |= 1u;
      v2 = a2[8];
    }
    if ((v2 & 2) != 0)
    {
      if (!*(_QWORD *)(a1 + 16))
        *(_QWORD *)(a1 + 16) = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>(*(google::protobuf::internal::ArenaImpl **)(a1 + 24));
      v7 = (const siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a2 + 136))(a2);
      siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::MergeFrom(*(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList **)(a1 + 16), v7);
      *(_DWORD *)(a1 + 32) |= 2u;
    }
  }
}

_QWORD *google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E7938DC0;
  if (!a1[3])
  {
    google::protobuf::internal::ArenaStringPtr::DestroyNoArena(a1[1]);
    v2 = a1[2];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(_QWORD *a1)
{
  google::protobuf::internal::MapEntryImpl<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse,google::protobuf::MessageLite,std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::~MapEntryImpl(a1);
  JUMPOUT(0x1C3B8D890);
}

siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::VisualComponentsCombination(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *this)
{
  *(_QWORD *)this = &off_1E7938888;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  if (atomic_load(scc_info_VisualComponentsCombination_PatternSchemaBinary_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_VisualComponentsCombination_PatternSchemaBinary_2eproto);
  *((_DWORD *)this + 8) = 0;
  return this;
}

void sub_1BFC32018(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::~VisualComponentsCombination(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *this)
{
  siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::~VisualComponentsCombination(this);
  JUMPOUT(0x1C3B8D890);
}

{
  *(_QWORD *)this = &off_1E7938888;
  if (*((_DWORD *)this + 8))
    siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::clear_components_combination_value((uint64_t)this);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "siri.dialogengine.PatternSchemaBinary.VisualComponentsCombination");
}

siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::New(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination>(0);
}

siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::New(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination>(a2);
}

void siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::Clear(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *this)
{
  google::protobuf::internal::InternalMetadataWithArenaLite *v2;
  char v3;

  siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::clear_components_combination_value((uint64_t)this);
  v3 = *((_BYTE *)this + 8);
  v2 = (siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *)((char *)this + 8);
  *((_DWORD *)v2 + 2) = 0;
  if ((v3 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v2);
}

uint64_t siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::IsInitialized(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *this)
{
  return 1;
}

void siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::CheckTypeAndMergeFrom(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *this, const google::protobuf::MessageLite *lpsrc)
{
  siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::MergeFrom(this, lpsrc);
}

uint64_t siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::ByteSizeLong(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v2 = *((_DWORD *)this + 8);
  if (v2 == 2)
  {
    v5 = *((_QWORD *)this + 3);
    v6 = *(unsigned __int8 *)(v5 + 23);
    v7 = *(_QWORD *)(v5 + 8);
    if ((v6 & 0x80u) == 0)
      v7 = v6;
    v4 = v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
    goto LABEL_7;
  }
  if (v2 == 1)
  {
    v3 = siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::ByteSizeLong(*((siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList **)this
                                                                                                + 3));
    v4 = v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6);
LABEL_7:
    result = v4 + 1;
    goto LABEL_9;
  }
  result = 0;
LABEL_9:
  v9 = *((_QWORD *)this + 1);
  if ((v9 & 1) != 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v10 + 23) < 0)
      v11 = *(_QWORD *)(v10 + 8);
    else
      v11 = *(unsigned __int8 *)(v10 + 23);
    result += v11;
  }
  *((_DWORD *)this + 5) = result;
  return result;
}

uint64_t siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::GetCachedSize(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *this)
{
  return *((unsigned int *)this + 5);
}

google::protobuf::internal *siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::_InternalParse(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  uint64_t *v6;
  google::protobuf::internal *TagFallback;
  const char *v8;
  google::protobuf::internal *v11;
  std::string *v12;
  siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *v13;
  google::protobuf::internal *v15;

  v15 = a2;
  v5 = (std::string **)((char *)this + 24);
  v6 = (uint64_t *)((char *)this + 8);
  while (1)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v15, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v15;
    TagFallback = (google::protobuf::internal *)((char *)v15 + 1);
    LODWORD(v8) = *(unsigned __int8 *)v15;
    if ((*(char *)v15 & 0x80000000) == 0)
      goto LABEL_6;
    v8 = (const char *)(v8 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v15 + 2);
LABEL_6:
      v15 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v15, v8);
    v15 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    if (v8 >> 3 == 2)
    {
      if (v8 != 18)
        goto LABEL_12;
      if (*((_DWORD *)this + 8) == 2)
      {
        v12 = *v5;
        if (*v5 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
LABEL_25:
          v11 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v12, (std::string::value_type *)TagFallback, (uint64_t)a3);
          goto LABEL_28;
        }
      }
      else
      {
        siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::clear_components_combination_value((uint64_t)this);
        *((_DWORD *)this + 8) = 2;
        *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
      }
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
      v12 = *v5;
      TagFallback = v15;
      goto LABEL_25;
    }
    if (v8 >> 3 == 1 && v8 == 10)
    {
      if (*((_DWORD *)this + 8) == 1)
      {
        v13 = (siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)*v5;
      }
      else
      {
        siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::clear_components_combination_value((uint64_t)this);
        *((_DWORD *)this + 8) = 1;
        v13 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>(0);
        *((_QWORD *)this + 3) = v13;
        TagFallback = v15;
      }
      v11 = (google::protobuf::internal *)google::protobuf::internal::ParseContext::ParseMessage<siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>(a3, v13, TagFallback);
      goto LABEL_28;
    }
LABEL_12:
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      break;
    v11 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v8, v6, TagFallback, a3);
LABEL_28:
    v15 = v11;
    if (!v11)
      return 0;
  }
  *((_DWORD *)a3 + 20) = (_DWORD)v8 - 1;
  return TagFallback;
}

unsigned __int8 *siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::InternalSerializeWithCachedSizesToArray(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  char *v4;
  int v6;
  siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *v7;
  unsigned int v8;
  char *v9;
  unsigned __int8 *v10;
  unsigned int v11;
  _BYTE *v12;
  _BYTE *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;

  v4 = a2;
  v6 = *((_DWORD *)this + 8);
  if (v6 == 2)
  {
    v10 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((_QWORD *)this + 3), a2);
  }
  else
  {
    if (v6 != 1)
      goto LABEL_15;
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v7 = (siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)*((_QWORD *)this + 3);
    *v4 = 10;
    v8 = *((_DWORD *)v7 + 5);
    if (v8 > 0x7F)
    {
      v4[1] = v8 | 0x80;
      v11 = v8 >> 7;
      if (v8 >> 14)
      {
        v12 = v4 + 2;
        do
        {
          v13 = v12;
          *v12++ = v11 | 0x80;
          v14 = v11 >> 7;
          v15 = v11 >> 14;
          v11 >>= 7;
        }
        while (v15);
        v9 = v13 + 2;
        *v12 = v14;
      }
      else
      {
        v4[2] = v11;
        v9 = v4 + 3;
      }
    }
    else
    {
      v4[1] = v8;
      v9 = v4 + 2;
    }
    v10 = siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::InternalSerializeWithCachedSizesToArray(v7, v9, a3);
  }
  v4 = (char *)v10;
LABEL_15:
  v16 = *((_QWORD *)this + 1);
  if ((v16 & 1) == 0)
    return (unsigned __int8 *)v4;
  v18 = v16 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v18 + 23) < 0)
  {
    v20 = *(void **)v18;
    v19 = *(_QWORD *)(v18 + 8);
  }
  else
  {
    LODWORD(v19) = *(unsigned __int8 *)(v18 + 23);
    v20 = (void *)v18;
  }
  if (*(_QWORD *)a3 - (_QWORD)v4 >= (int)v19)
  {
    v21 = (int)v19;
    memcpy(v4, v20, (int)v19);
    v4 += v21;
    return (unsigned __int8 *)v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v20, v19, (unsigned __int8 *)v4);
}

uint64_t siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::clear_components_combination_value(uint64_t this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  v1 = this;
  v2 = *(_DWORD *)(this + 32);
  if (v2 == 2)
  {
    v3 = *(_QWORD *)(this + 24);
    if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string && v3 != 0)
    {
      if (*(char *)(v3 + 23) < 0)
        operator delete(*(void **)v3);
      this = MEMORY[0x1C3B8D890](v3, 0x1012C40EC159624);
    }
  }
  else if (v2 == 1)
  {
    this = *(_QWORD *)(this + 24);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_DWORD *)(v1 + 32) = 0;
  return this;
}

void siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::MergeFrom(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *this, const siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  const std::string *v7;
  std::string *v8;
  siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *v9;
  const siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *v10;
  char v11;
  std::string v12[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.cc", 3450);
    v4 = google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v11, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v12[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  v6 = *((_DWORD *)a2 + 8);
  if (v6 == 1)
  {
    if (*((_DWORD *)this + 8) == 1)
    {
      v9 = (siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)*((_QWORD *)this + 3);
    }
    else
    {
      siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::clear_components_combination_value((uint64_t)this);
      *((_DWORD *)this + 8) = 1;
      v9 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>(0);
      *((_QWORD *)this + 3) = v9;
      if (*((_DWORD *)a2 + 8) != 1)
      {
        v10 = (const siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)&siri::dialogengine::PatternSchemaBinary::_VisualComponentsCombinationList_default_instance_;
        goto LABEL_17;
      }
    }
    v10 = (const siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)*((_QWORD *)a2 + 3);
LABEL_17:
    siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::MergeFrom(v9, v10);
    return;
  }
  if (v6 != 2)
    return;
  v7 = (const std::string *)*((_QWORD *)a2 + 3);
  if (*((_DWORD *)this + 8) == 2)
  {
    v8 = (std::string *)*((_QWORD *)this + 3);
    if (v8 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
    {
      std::string::operator=(v8, v7);
      return;
    }
  }
  else
  {
    siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::clear_components_combination_value((uint64_t)this);
    *((_DWORD *)this + 8) = 2;
    *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  }
  google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, (uint64_t)v7);
}

void sub_1BFC326C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination>(google::protobuf::internal::ArenaImpl *this)
{
  siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x28uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination>);
    siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::VisualComponentsCombination(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *)operator new();
    siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::VisualComponentsCombination(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFC32764(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C40C05B56FCLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void InitDefaultsscc_info_Usage_PatternSchemaBinary_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.cc", a4);
  siri::dialogengine::PatternSchemaBinary::Usage::Usage((siri::dialogengine::PatternSchemaBinary::Usage *)&siri::dialogengine::PatternSchemaBinary::_Usage_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&siri::dialogengine::PatternSchemaBinary::_Usage_default_instance_, v4);
}

siri::dialogengine::PatternSchemaBinary::Group *siri::dialogengine::PatternSchemaBinary::Group::Group(siri::dialogengine::PatternSchemaBinary::Group *this)
{
  *(_QWORD *)this = &off_1E7938518;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_QWORD *)this + 11) = 0;
  if (atomic_load(scc_info_Group_PatternSchemaBinary_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Group_PatternSchemaBinary_2eproto);
  *((_QWORD *)this + 12) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 13) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 14) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 15) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 16) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

void sub_1BFC328B8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v1 + 72));
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v1 + 48));
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v1 + 24);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

void siri::dialogengine::PatternSchemaBinary::Group::~Group(siri::dialogengine::PatternSchemaBinary::Group *this)
{
  siri::dialogengine::PatternSchemaBinary::Group::~Group(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)this = &off_1E7938518;
  v2 = *((_QWORD *)this + 12);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 13);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1C3B8D890](v4, 0x1012C40EC159624);
  }
  v6 = *((_QWORD *)this + 14);
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
  {
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    MEMORY[0x1C3B8D890](v6, 0x1012C40EC159624);
  }
  v8 = *((_QWORD *)this + 15);
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v8 != 0)
  {
    if (*(char *)(v8 + 23) < 0)
      operator delete(*(void **)v8);
    MEMORY[0x1C3B8D890](v8, 0x1012C40EC159624);
  }
  v10 = *((_QWORD *)this + 16);
  if ((uint64_t *)v10 != &google::protobuf::internal::fixed_address_empty_string && v10)
  {
    if (*(char *)(v10 + 23) < 0)
      operator delete(*(void **)v10);
    MEMORY[0x1C3B8D890](v10, 0x1012C40EC159624);
  }
  if (this != (siri::dialogengine::PatternSchemaBinary::Group *)&siri::dialogengine::PatternSchemaBinary::_Group_default_instance_)
  {
    v11 = *((_QWORD *)this + 17);
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = *((_QWORD *)this + 18);
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((siri::dialogengine::PatternSchemaBinary::Group *)((char *)this + 72));
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((siri::dialogengine::PatternSchemaBinary::Group *)((char *)this + 48));
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField((char *)this + 24);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *siri::dialogengine::PatternSchemaBinary::Group::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "siri.dialogengine.PatternSchemaBinary.Group");
}

siri::dialogengine::PatternSchemaBinary::Group *siri::dialogengine::PatternSchemaBinary::Group::New(siri::dialogengine::PatternSchemaBinary::Group *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Group>(0);
}

siri::dialogengine::PatternSchemaBinary::Group *siri::dialogengine::PatternSchemaBinary::Group::New(siri::dialogengine::PatternSchemaBinary::Group *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Group>(a2);
}

void siri::dialogengine::PatternSchemaBinary::Group::Clear(siri::dialogengine::PatternSchemaBinary::Group *this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  siri::dialogengine::PatternSchemaBinary::Usage *v8;
  std::string *v9;
  siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *v10;
  std::string *v11;
  google::protobuf::internal::InternalMetadataWithArenaLite *v12;
  char v13;
  char v14;
  std::string v15[2];

  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24);
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::PatternComponent>::TypeHandler>((uint64_t)this + 48);
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::PatternComponent>::TypeHandler>((uint64_t)this + 72);
  v2 = *((_DWORD *)this + 4);
  if ((v2 & 0x7F) == 0)
    goto LABEL_36;
  if ((v2 & 1) != 0)
  {
    v3 = *((_QWORD *)this + 12);
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
      if ((v2 & 2) != 0)
        goto LABEL_14;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
      if ((v2 & 2) != 0)
        goto LABEL_14;
    }
LABEL_4:
    if ((v2 & 4) == 0)
      goto LABEL_5;
LABEL_18:
    v5 = *((_QWORD *)this + 14);
    if (*(char *)(v5 + 23) < 0)
    {
      **(_BYTE **)v5 = 0;
      *(_QWORD *)(v5 + 8) = 0;
      if ((v2 & 8) != 0)
        goto LABEL_22;
    }
    else
    {
      *(_BYTE *)v5 = 0;
      *(_BYTE *)(v5 + 23) = 0;
      if ((v2 & 8) != 0)
        goto LABEL_22;
    }
LABEL_6:
    if ((v2 & 0x10) == 0)
      goto LABEL_7;
LABEL_26:
    v7 = *((_QWORD *)this + 16);
    if (*(char *)(v7 + 23) < 0)
    {
      **(_BYTE **)v7 = 0;
      *(_QWORD *)(v7 + 8) = 0;
      if ((v2 & 0x20) != 0)
        goto LABEL_30;
    }
    else
    {
      *(_BYTE *)v7 = 0;
      *(_BYTE *)(v7 + 23) = 0;
      if ((v2 & 0x20) != 0)
        goto LABEL_30;
    }
LABEL_8:
    if ((v2 & 0x40) == 0)
      goto LABEL_36;
    goto LABEL_33;
  }
  if ((v2 & 2) == 0)
    goto LABEL_4;
LABEL_14:
  v4 = *((_QWORD *)this + 13);
  if (*(char *)(v4 + 23) < 0)
  {
    **(_BYTE **)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    if ((v2 & 4) != 0)
      goto LABEL_18;
  }
  else
  {
    *(_BYTE *)v4 = 0;
    *(_BYTE *)(v4 + 23) = 0;
    if ((v2 & 4) != 0)
      goto LABEL_18;
  }
LABEL_5:
  if ((v2 & 8) == 0)
    goto LABEL_6;
LABEL_22:
  v6 = *((_QWORD *)this + 15);
  if (*(char *)(v6 + 23) < 0)
  {
    **(_BYTE **)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;
    if ((v2 & 0x10) != 0)
      goto LABEL_26;
  }
  else
  {
    *(_BYTE *)v6 = 0;
    *(_BYTE *)(v6 + 23) = 0;
    if ((v2 & 0x10) != 0)
      goto LABEL_26;
  }
LABEL_7:
  if ((v2 & 0x20) == 0)
    goto LABEL_8;
LABEL_30:
  v8 = (siri::dialogengine::PatternSchemaBinary::Usage *)*((_QWORD *)this + 17);
  if (!v8)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.cc", 1699);
    v9 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: usage_ != nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v14, (const char **)&v9->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
    v8 = (siri::dialogengine::PatternSchemaBinary::Usage *)*((_QWORD *)this + 17);
  }
  siri::dialogengine::PatternSchemaBinary::Usage::Clear(v8);
  if ((v2 & 0x40) != 0)
  {
LABEL_33:
    v10 = (siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *)*((_QWORD *)this + 18);
    if (!v10)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.cc", 1703);
      v11 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: visual_components_combination_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v14, (const char **)&v11->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
      v10 = (siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *)*((_QWORD *)this + 18);
    }
    siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::Clear(v10);
  }
LABEL_36:
  v13 = *((_BYTE *)this + 8);
  v12 = (siri::dialogengine::PatternSchemaBinary::Group *)((char *)this + 8);
  *((_DWORD *)v12 + 2) = 0;
  if ((v13 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v12);
}

void sub_1BFC32B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::PatternSchemaBinary::Group::IsInitialized(siri::dialogengine::PatternSchemaBinary::Group *this)
{
  return 1;
}

void siri::dialogengine::PatternSchemaBinary::Group::CheckTypeAndMergeFrom(siri::dialogengine::PatternSchemaBinary::Group *this, const google::protobuf::MessageLite *lpsrc)
{
  siri::dialogengine::PatternSchemaBinary::Group::MergeFrom(this, lpsrc);
}

uint64_t siri::dialogengine::PatternSchemaBinary::Group::ByteSizeLong(siri::dialogengine::PatternSchemaBinary::Group *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  siri::dialogengine::PatternSchemaBinary::PatternComponent **v10;
  uint64_t v11;
  siri::dialogengine::PatternSchemaBinary::PatternComponent *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  siri::dialogengine::PatternSchemaBinary::PatternComponent **v17;
  uint64_t v18;
  siri::dialogengine::PatternSchemaBinary::PatternComponent *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;

  v2 = *((_DWORD *)this + 8);
  if (v2 < 1)
  {
    v4 = *((unsigned int *)this + 8);
  }
  else
  {
    v3 = 0;
    v4 = *((unsigned int *)this + 8);
    do
    {
      v5 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24, v3);
      v6 = *(unsigned __int8 *)(v5 + 23);
      if ((v6 & 0x80u) != 0)
        v6 = *(_QWORD *)(v5 + 8);
      v4 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  v7 = *((int *)this + 14);
  v8 = v4 + v7;
  v9 = *((_QWORD *)this + 8);
  if (v9)
    v10 = (siri::dialogengine::PatternSchemaBinary::PatternComponent **)(v9 + 8);
  else
    v10 = 0;
  if ((_DWORD)v7)
  {
    v11 = 8 * v7;
    do
    {
      v12 = *v10++;
      v13 = siri::dialogengine::PatternSchemaBinary::PatternComponent::ByteSizeLong(v12);
      v8 += v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6);
      v11 -= 8;
    }
    while (v11);
  }
  v14 = *((int *)this + 20);
  v15 = v8 + v14;
  v16 = *((_QWORD *)this + 11);
  if (v16)
    v17 = (siri::dialogengine::PatternSchemaBinary::PatternComponent **)(v16 + 8);
  else
    v17 = 0;
  if ((_DWORD)v14)
  {
    v18 = 8 * v14;
    do
    {
      v19 = *v17++;
      v20 = siri::dialogengine::PatternSchemaBinary::PatternComponent::ByteSizeLong(v19);
      v15 += v20 + ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6);
      v18 -= 8;
    }
    while (v18);
  }
  v21 = *((_DWORD *)this + 4);
  if ((v21 & 0x7F) == 0)
    goto LABEL_29;
  if ((v21 & 1) != 0)
  {
    v25 = *((_QWORD *)this + 12);
    v26 = *(unsigned __int8 *)(v25 + 23);
    v27 = *(_QWORD *)(v25 + 8);
    if ((v26 & 0x80u) == 0)
      v27 = v26;
    v15 += v27 + ((9 * (__clz(v27 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v21 & 2) == 0)
    {
LABEL_23:
      if ((v21 & 4) == 0)
        goto LABEL_24;
      goto LABEL_37;
    }
  }
  else if ((v21 & 2) == 0)
  {
    goto LABEL_23;
  }
  v28 = *((_QWORD *)this + 13);
  v29 = *(unsigned __int8 *)(v28 + 23);
  v30 = *(_QWORD *)(v28 + 8);
  if ((v29 & 0x80u) == 0)
    v30 = v29;
  v15 += v30 + ((9 * (__clz(v30 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v21 & 4) == 0)
  {
LABEL_24:
    if ((v21 & 8) == 0)
      goto LABEL_25;
    goto LABEL_40;
  }
LABEL_37:
  v31 = *((_QWORD *)this + 14);
  v32 = *(unsigned __int8 *)(v31 + 23);
  v33 = *(_QWORD *)(v31 + 8);
  if ((v32 & 0x80u) == 0)
    v33 = v32;
  v15 += v33 + ((9 * (__clz(v33 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v21 & 8) == 0)
  {
LABEL_25:
    if ((v21 & 0x10) == 0)
      goto LABEL_26;
LABEL_43:
    v37 = *((_QWORD *)this + 16);
    v38 = *(unsigned __int8 *)(v37 + 23);
    v39 = *(_QWORD *)(v37 + 8);
    if ((v38 & 0x80u) == 0)
      v39 = v38;
    v15 += v39 + ((9 * (__clz(v39 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v21 & 0x20) == 0)
    {
LABEL_27:
      if ((v21 & 0x40) == 0)
        goto LABEL_29;
      goto LABEL_28;
    }
    goto LABEL_46;
  }
LABEL_40:
  v34 = *((_QWORD *)this + 15);
  v35 = *(unsigned __int8 *)(v34 + 23);
  v36 = *(_QWORD *)(v34 + 8);
  if ((v35 & 0x80u) == 0)
    v36 = v35;
  v15 += v36 + ((9 * (__clz(v36 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v21 & 0x10) != 0)
    goto LABEL_43;
LABEL_26:
  if ((v21 & 0x20) == 0)
    goto LABEL_27;
LABEL_46:
  v40 = siri::dialogengine::PatternSchemaBinary::Usage::ByteSizeLong(*((siri::dialogengine::PatternSchemaBinary::Usage **)this
                                                                     + 17));
  v15 += v40 + ((9 * (__clz(v40 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v21 & 0x40) != 0)
  {
LABEL_28:
    v22 = siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::ByteSizeLong(*((siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination **)this
                                                                                             + 18));
    v15 += v22 + ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_29:
  v23 = *((_QWORD *)this + 1);
  if ((v23 & 1) != 0)
  {
    v41 = v23 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v41 + 23) < 0)
      v42 = *(_QWORD *)(v41 + 8);
    else
      v42 = *(unsigned __int8 *)(v41 + 23);
    v15 += v42;
  }
  *((_DWORD *)this + 5) = v15;
  return v15;
}

uint64_t siri::dialogengine::PatternSchemaBinary::Group::GetCachedSize(siri::dialogengine::PatternSchemaBinary::Group *this)
{
  return *((unsigned int *)this + 5);
}

google::protobuf::internal *siri::dialogengine::PatternSchemaBinary::Group::_InternalParse(siri::dialogengine::PatternSchemaBinary::Group *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  uint64_t v3;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t *v9;
  void (*v10)(uint64_t);
  google::protobuf::internal *TagFallback;
  const char *v12;
  std::string *v13;
  std::string **v14;
  siri::dialogengine::PatternSchemaBinary::Usage *v15;
  google::protobuf::internal *v16;
  unsigned int *v17;
  uint64_t v18;
  void (*v19)(uint64_t);
  uint64_t *v20;
  siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *v21;
  unsigned int v22;
  char *v23;
  char *v24;
  std::string::value_type *v25;
  int *v26;
  uint64_t v27;
  int v28;
  std::string *AlignedAndAddCleanup;
  google::protobuf::internal::ArenaImpl *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  google::protobuf::internal *v34;
  int *v35;
  uint64_t v36;
  int v37;
  siri::dialogengine::PatternSchemaBinary::PatternComponent *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  google::protobuf::internal *v42;
  int *v43;
  uint64_t v44;
  int v45;
  siri::dialogengine::PatternSchemaBinary::PatternComponent *v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  char *SizeFallback;
  unsigned int v51;
  int v52;
  int v53;
  BOOL v54;
  int v55;
  google::protobuf::internal *v56;
  int v57;
  std::string **v59;
  std::string **v60;
  std::string **v61;
  std::string **v62;
  std::string **v63;
  unsigned int *v64;
  uint64_t *v65;
  google::protobuf::internal *v66;

  v6 = (unsigned int *)((char *)this + 72);
  v7 = (unsigned int *)((char *)this + 48);
  v8 = (unsigned int *)((char *)this + 24);
  v62 = (std::string **)((char *)this + 120);
  v63 = (std::string **)((char *)this + 128);
  v60 = (std::string **)((char *)this + 104);
  v61 = (std::string **)((char *)this + 112);
  v59 = (std::string **)((char *)this + 96);
  v65 = (uint64_t *)((char *)this + 8);
  v66 = a2;
  v9 = &google::protobuf::internal::fixed_address_empty_string;
  v10 = google::protobuf::internal::arena_destruct_object<std::string>;
  v64 = (unsigned int *)((char *)this + 48);
LABEL_2:
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v66, *((_DWORD *)a3 + 23)) & 1) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v66 + 1);
      LODWORD(v12) = *(unsigned __int8 *)v66;
      if (*(char *)v66 < 0)
      {
        v12 = (const char *)(v12 + (*(unsigned __int8 *)TagFallback << 7) - 128);
        if (*(char *)TagFallback < 0)
        {
          TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v66, v12);
          v66 = TagFallback;
          if (!TagFallback)
            return TagFallback;
LABEL_7:
          switch(v12 >> 3)
          {
            case 1u:
              if (v12 != 10)
                goto LABEL_82;
              *((_DWORD *)this + 4) |= 1u;
              v13 = (std::string *)*((_QWORD *)this + 12);
              if (v13 != (std::string *)v9)
                goto LABEL_79;
              v14 = v59;
              goto LABEL_78;
            case 2u:
              if (v12 != 18)
                goto LABEL_82;
              *((_DWORD *)this + 4) |= 0x20u;
              v15 = (siri::dialogengine::PatternSchemaBinary::Usage *)*((_QWORD *)this + 17);
              if (!v15)
              {
                v15 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Usage>(0);
                *((_QWORD *)this + 17) = v15;
                TagFallback = v66;
              }
              v16 = (google::protobuf::internal *)google::protobuf::internal::ParseContext::ParseMessage<siri::dialogengine::PatternSchemaBinary::Usage>(a3, v15, TagFallback);
              goto LABEL_80;
            case 3u:
              if (v12 != 26)
                goto LABEL_82;
              *((_DWORD *)this + 4) |= 2u;
              v13 = (std::string *)*((_QWORD *)this + 13);
              if (v13 != (std::string *)v9)
                goto LABEL_79;
              v14 = v60;
              goto LABEL_78;
            case 4u:
              if (v12 != 34)
                goto LABEL_82;
              *((_DWORD *)this + 4) |= 4u;
              v13 = (std::string *)*((_QWORD *)this + 14);
              if (v13 != (std::string *)v9)
                goto LABEL_79;
              v14 = v61;
              goto LABEL_78;
            case 5u:
              if (v12 != 42)
                goto LABEL_82;
              *((_DWORD *)this + 4) |= 8u;
              v13 = (std::string *)*((_QWORD *)this + 15);
              if (v13 != (std::string *)v9)
                goto LABEL_79;
              v14 = v62;
              goto LABEL_78;
            case 6u:
              if (v12 != 50)
                goto LABEL_82;
              v17 = v6;
              v18 = v3;
              v19 = v10;
              v20 = v9;
              *((_DWORD *)this + 4) |= 0x40u;
              v21 = (siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *)*((_QWORD *)this + 18);
              if (!v21)
              {
                v21 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination>(0);
                *((_QWORD *)this + 18) = v21;
                TagFallback = v66;
              }
              v22 = *(unsigned __int8 *)TagFallback;
              if (*(char *)TagFallback < 0)
              {
                SizeFallback = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
                if (!SizeFallback)
                  return 0;
                v23 = SizeFallback;
                v22 = v51;
              }
              else
              {
                v23 = (char *)TagFallback + 1;
              }
              v52 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v23, v22);
              v53 = *((_DWORD *)a3 + 22);
              v54 = __OFSUB__(v53--, 1);
              *((_DWORD *)a3 + 22) = v53;
              if (v53 < 0 != v54)
                return 0;
              v55 = v52;
              v56 = siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::_InternalParse(v21, (google::protobuf::internal *)v23, a3);
              if (!v56)
                return 0;
              ++*((_DWORD *)a3 + 22);
              if (*((_DWORD *)a3 + 20))
                return 0;
              v57 = *((_DWORD *)a3 + 7) + v55;
              *((_DWORD *)a3 + 7) = v57;
              *(_QWORD *)a3 = *((_QWORD *)a3 + 1) + (v57 & (v57 >> 31));
              v66 = v56;
              v9 = v20;
              v10 = v19;
              v3 = v18;
              v6 = v17;
              v7 = v64;
              continue;
            case 7u:
              if (v12 != 58)
                goto LABEL_82;
              v24 = (char *)TagFallback - 1;
              while (1)
              {
                v25 = v24 + 1;
                v66 = (google::protobuf::internal *)(v24 + 1);
                v26 = (int *)*((_QWORD *)this + 5);
                if (!v26)
                  break;
                v27 = *((int *)this + 8);
                v28 = *v26;
                if ((int)v27 >= *v26)
                {
                  if (v28 == *((_DWORD *)this + 9))
                  {
LABEL_38:
                    google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v8, v28 + 1);
                    v26 = (int *)*((_QWORD *)this + 5);
                    v28 = *v26;
                  }
                  *v26 = v28 + 1;
                  v30 = *(google::protobuf::internal::ArenaImpl **)v8;
                  if (*(_QWORD *)v8)
                  {
                    if (*((_QWORD *)v30 + 14))
                    AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v30, 0x18uLL, (void (*)(void *))v10);
                  }
                  else
                  {
                    AlignedAndAddCleanup = (std::string *)operator new();
                  }
                  AlignedAndAddCleanup->__r_.__value_.__r.__words[0] = 0;
                  AlignedAndAddCleanup->__r_.__value_.__l.__size_ = 0;
                  AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = 0;
                  v31 = *((_QWORD *)this + 5);
                  v32 = *((int *)this + 8);
                  *((_DWORD *)this + 8) = v32 + 1;
                  *(_QWORD *)(v31 + 8 * v32 + 8) = AlignedAndAddCleanup;
                  v25 = (std::string::value_type *)v66;
                  goto LABEL_45;
                }
                *((_DWORD *)this + 8) = v27 + 1;
                AlignedAndAddCleanup = *(std::string **)&v26[2 * v27 + 2];
LABEL_45:
                v24 = google::protobuf::internal::InlineGreedyStringParser(AlignedAndAddCleanup, v25, (uint64_t)a3);
                v66 = (google::protobuf::internal *)v24;
                if (!v24)
                  return 0;
                if (*(_QWORD *)a3 <= (unint64_t)v24 || *v24 != 58)
                  goto LABEL_2;
              }
              v28 = *((_DWORD *)this + 9);
              goto LABEL_38;
            case 8u:
              if (v12 != 66)
                goto LABEL_82;
              v33 = (char *)TagFallback - 1;
              while (1)
              {
                v34 = (google::protobuf::internal *)(v33 + 1);
                v66 = (google::protobuf::internal *)(v33 + 1);
                v35 = (int *)*((_QWORD *)this + 8);
                if (!v35)
                  break;
                v36 = *((int *)this + 14);
                v37 = *v35;
                if ((int)v36 >= *v35)
                {
                  if (v37 == *((_DWORD *)this + 15))
                  {
LABEL_56:
                    google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v7, v37 + 1);
                    v35 = (int *)*((_QWORD *)this + 8);
                    v37 = *v35;
                  }
                  *v35 = v37 + 1;
                  v38 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::PatternComponent>(*((google::protobuf::internal::ArenaImpl **)this + 6));
                  v39 = *((_QWORD *)this + 8);
                  v40 = *((int *)this + 14);
                  *((_DWORD *)this + 14) = v40 + 1;
                  *(_QWORD *)(v39 + 8 * v40 + 8) = v38;
                  v34 = v66;
                  goto LABEL_58;
                }
                *((_DWORD *)this + 14) = v36 + 1;
                v38 = *(siri::dialogengine::PatternSchemaBinary::PatternComponent **)&v35[2 * v36 + 2];
LABEL_58:
                v33 = google::protobuf::internal::ParseContext::ParseMessage<siri::dialogengine::PatternSchemaBinary::PatternComponent>(a3, v38, v34);
                v66 = (google::protobuf::internal *)v33;
                if (!v33)
                  return 0;
                if (*(_QWORD *)a3 <= (unint64_t)v33 || *v33 != 66)
                  goto LABEL_2;
              }
              v37 = *((_DWORD *)this + 15);
              goto LABEL_56;
            case 9u:
              if (v12 != 74)
                goto LABEL_82;
              v41 = (char *)TagFallback - 1;
              break;
            case 0xAu:
              if (v12 != 82)
                goto LABEL_82;
              *((_DWORD *)this + 4) |= 0x10u;
              v13 = (std::string *)*((_QWORD *)this + 16);
              if (v13 != (std::string *)v9)
                goto LABEL_79;
              v14 = v63;
LABEL_78:
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v14, (uint64_t)v9);
              v13 = *v14;
              TagFallback = v66;
LABEL_79:
              v16 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v13, (std::string::value_type *)TagFallback, (uint64_t)a3);
              goto LABEL_80;
            default:
LABEL_82:
              if ((_DWORD)v12)
                v49 = (v12 & 7) == 4;
              else
                v49 = 1;
              if (v49)
              {
                *((_DWORD *)a3 + 20) = (_DWORD)v12 - 1;
                return TagFallback;
              }
              v16 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v12, v65, TagFallback, a3);
LABEL_80:
              v66 = v16;
              if (v16)
                continue;
              return 0;
          }
          while (1)
          {
            v42 = (google::protobuf::internal *)(v41 + 1);
            v66 = (google::protobuf::internal *)(v41 + 1);
            v43 = (int *)*((_QWORD *)this + 11);
            if (!v43)
              break;
            v44 = *((int *)this + 20);
            v45 = *v43;
            if ((int)v44 >= *v43)
            {
              if (v45 == *((_DWORD *)this + 21))
              {
LABEL_69:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v45 + 1);
                v43 = (int *)*((_QWORD *)this + 11);
                v45 = *v43;
              }
              *v43 = v45 + 1;
              v46 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::PatternComponent>(*((google::protobuf::internal::ArenaImpl **)this + 9));
              v47 = *((_QWORD *)this + 11);
              v48 = *((int *)this + 20);
              *((_DWORD *)this + 20) = v48 + 1;
              *(_QWORD *)(v47 + 8 * v48 + 8) = v46;
              v42 = v66;
              goto LABEL_71;
            }
            *((_DWORD *)this + 20) = v44 + 1;
            v46 = *(siri::dialogengine::PatternSchemaBinary::PatternComponent **)&v43[2 * v44 + 2];
LABEL_71:
            v41 = google::protobuf::internal::ParseContext::ParseMessage<siri::dialogengine::PatternSchemaBinary::PatternComponent>(a3, v46, v42);
            v66 = (google::protobuf::internal *)v41;
            if (!v41)
              return 0;
            if (*(_QWORD *)a3 <= (unint64_t)v41 || *v41 != 74)
              goto LABEL_2;
          }
          v45 = *((_DWORD *)this + 21);
          goto LABEL_69;
        }
        TagFallback = (google::protobuf::internal *)((char *)v66 + 2);
      }
      v66 = TagFallback;
      goto LABEL_7;
    }
    return v66;
  }
}

unsigned __int8 *siri::dialogengine::PatternSchemaBinary::Group::InternalSerializeWithCachedSizesToArray(siri::dialogengine::PatternSchemaBinary::Group *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  char *v4;
  int v6;
  siri::dialogengine::PatternSchemaBinary::Usage *v7;
  unsigned int v8;
  char *v9;
  unsigned int v10;
  _BYTE *v11;
  _BYTE *v12;
  unsigned int v13;
  unsigned int v14;
  siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *v15;
  unsigned int v16;
  char *v17;
  unsigned int v18;
  _BYTE *v19;
  _BYTE *v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int i;
  uint64_t v25;
  int64_t v26;
  const void *v27;
  int v28;
  int j;
  siri::dialogengine::PatternSchemaBinary::PatternComponent *v30;
  unsigned int v31;
  char *v32;
  unsigned int v33;
  _BYTE *v34;
  _BYTE *v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  int k;
  siri::dialogengine::PatternSchemaBinary::PatternComponent *v40;
  unsigned int v41;
  char *v42;
  unsigned int v43;
  _BYTE *v44;
  _BYTE *v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;

  v4 = a2;
  v6 = *((_DWORD *)this + 4);
  if ((v6 & 1) != 0)
  {
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 12), a2);
    if ((v6 & 0x20) == 0)
    {
LABEL_3:
      if ((v6 & 2) == 0)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  else if ((v6 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  if ((unint64_t)v4 >= *(_QWORD *)a3)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v7 = (siri::dialogengine::PatternSchemaBinary::Usage *)*((_QWORD *)this + 17);
  *v4 = 18;
  v8 = *((_DWORD *)v7 + 5);
  if (v8 > 0x7F)
  {
    v4[1] = v8 | 0x80;
    v10 = v8 >> 7;
    if (v8 >> 14)
    {
      v11 = v4 + 2;
      do
      {
        v12 = v11;
        *v11++ = v10 | 0x80;
        v13 = v10 >> 7;
        v14 = v10 >> 14;
        v10 >>= 7;
      }
      while (v14);
      v9 = v12 + 2;
      *v11 = v13;
    }
    else
    {
      v4[2] = v10;
      v9 = v4 + 3;
    }
  }
  else
  {
    v4[1] = v8;
    v9 = v4 + 2;
  }
  v4 = (char *)siri::dialogengine::PatternSchemaBinary::Usage::InternalSerializeWithCachedSizesToArray(v7, v9, a3);
  if ((v6 & 2) == 0)
  {
LABEL_4:
    if ((v6 & 4) == 0)
      goto LABEL_5;
    goto LABEL_20;
  }
LABEL_19:
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, *((_QWORD *)this + 13), v4);
  if ((v6 & 4) == 0)
  {
LABEL_5:
    if ((v6 & 8) == 0)
      goto LABEL_6;
    goto LABEL_21;
  }
LABEL_20:
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 4, *((_QWORD *)this + 14), v4);
  if ((v6 & 8) == 0)
  {
LABEL_6:
    if ((v6 & 0x40) == 0)
      goto LABEL_32;
    goto LABEL_22;
  }
LABEL_21:
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 5, *((_QWORD *)this + 15), v4);
  if ((v6 & 0x40) == 0)
    goto LABEL_32;
LABEL_22:
  if ((unint64_t)v4 >= *(_QWORD *)a3)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v15 = (siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *)*((_QWORD *)this + 18);
  *v4 = 50;
  v16 = *((_DWORD *)v15 + 5);
  if (v16 > 0x7F)
  {
    v4[1] = v16 | 0x80;
    v18 = v16 >> 7;
    if (v16 >> 14)
    {
      v19 = v4 + 2;
      do
      {
        v20 = v19;
        *v19++ = v18 | 0x80;
        v21 = v18 >> 7;
        v22 = v18 >> 14;
        v18 >>= 7;
      }
      while (v22);
      v17 = v20 + 2;
      *v19 = v21;
    }
    else
    {
      v4[2] = v18;
      v17 = v4 + 3;
    }
  }
  else
  {
    v4[1] = v16;
    v17 = v4 + 2;
  }
  v4 = (char *)siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::InternalSerializeWithCachedSizesToArray(v15, v17, a3);
LABEL_32:
  v23 = *((_DWORD *)this + 8);
  if (v23 >= 1)
  {
    for (i = 0; v23 != i; ++i)
    {
      v25 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24, i);
      if (*(char *)(v25 + 23) < 0)
      {
        v26 = *(_QWORD *)(v25 + 8);
        if (v26 > 127)
          goto LABEL_44;
      }
      else
      {
        v26 = *(unsigned __int8 *)(v25 + 23);
      }
      if (*(_QWORD *)a3 - (_QWORD)v4 + 14 >= v26)
      {
        *v4 = 58;
        v4[1] = v26;
        if (*(char *)(v25 + 23) >= 0)
          v27 = (const void *)v25;
        else
          v27 = *(const void **)v25;
        memcpy(v4 + 2, v27, v26);
        v4 += v26 + 2;
        continue;
      }
LABEL_44:
      v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a3, 7, v25, v4);
    }
  }
  v28 = *((_DWORD *)this + 14);
  if (v28)
  {
    for (j = 0; j != v28; ++j)
    {
      if ((unint64_t)v4 >= *(_QWORD *)a3)
        v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v30 = (siri::dialogengine::PatternSchemaBinary::PatternComponent *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::PatternComponent>::TypeHandler>((uint64_t)this + 48, j);
      *v4 = 66;
      v31 = *((_DWORD *)v30 + 5);
      if (v31 > 0x7F)
      {
        v4[1] = v31 | 0x80;
        v33 = v31 >> 7;
        if (v31 >> 14)
        {
          v34 = v4 + 2;
          do
          {
            v35 = v34;
            *v34++ = v33 | 0x80;
            v36 = v33 >> 7;
            v37 = v33 >> 14;
            v33 >>= 7;
          }
          while (v37);
          v32 = v35 + 2;
          *v34 = v36;
        }
        else
        {
          v4[2] = v33;
          v32 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v31;
        v32 = v4 + 2;
      }
      v4 = (char *)siri::dialogengine::PatternSchemaBinary::PatternComponent::InternalSerializeWithCachedSizesToArray(v30, v32, a3);
    }
  }
  v38 = *((_DWORD *)this + 20);
  if (v38)
  {
    for (k = 0; k != v38; ++k)
    {
      if ((unint64_t)v4 >= *(_QWORD *)a3)
        v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v40 = (siri::dialogengine::PatternSchemaBinary::PatternComponent *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::PatternComponent>::TypeHandler>((uint64_t)this + 72, k);
      *v4 = 74;
      v41 = *((_DWORD *)v40 + 5);
      if (v41 > 0x7F)
      {
        v4[1] = v41 | 0x80;
        v43 = v41 >> 7;
        if (v41 >> 14)
        {
          v44 = v4 + 2;
          do
          {
            v45 = v44;
            *v44++ = v43 | 0x80;
            v46 = v43 >> 7;
            v47 = v43 >> 14;
            v43 >>= 7;
          }
          while (v47);
          v42 = v45 + 2;
          *v44 = v46;
        }
        else
        {
          v4[2] = v43;
          v42 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v41;
        v42 = v4 + 2;
      }
      v4 = (char *)siri::dialogengine::PatternSchemaBinary::PatternComponent::InternalSerializeWithCachedSizesToArray(v40, v42, a3);
    }
  }
  if ((v6 & 0x10) != 0)
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 10, *((_QWORD *)this + 16), v4);
  v48 = *((_QWORD *)this + 1);
  if ((v48 & 1) == 0)
    return (unsigned __int8 *)v4;
  v50 = v48 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v50 + 23) < 0)
  {
    v52 = *(void **)v50;
    v51 = *(_QWORD *)(v50 + 8);
  }
  else
  {
    LODWORD(v51) = *(unsigned __int8 *)(v50 + 23);
    v52 = (void *)v50;
  }
  if (*(_QWORD *)a3 - (_QWORD)v4 >= (int)v51)
  {
    v53 = (int)v51;
    memcpy(v4, v52, (int)v51);
    v4 += v53;
    return (unsigned __int8 *)v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v52, v51, (unsigned __int8 *)v4);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::PatternComponent>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1539);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_1BFC33AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

char *google::protobuf::internal::ParseContext::ParseMessage<siri::dialogengine::PatternSchemaBinary::PatternComponent>(google::protobuf::internal::EpsCopyInputStream *this, siri::dialogengine::PatternSchemaBinary::PatternComponent *a2, google::protobuf::internal *a3)
{
  int v6;
  const char *v7;
  char *v8;
  char *result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = *(char *)a3;
  v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result)
      return result;
    v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    v8 = (char *)a3 + 1;
  }
  v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  v12 = *((_DWORD *)this + 22);
  v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = (char *)siri::dialogengine::PatternSchemaBinary::PatternComponent::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result)
    return result;
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20))
    return 0;
  v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(_QWORD *)this = *((_QWORD *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

void siri::dialogengine::PatternSchemaBinary::Group::MergeFrom(siri::dialogengine::PatternSchemaBinary::Group *this, const siri::dialogengine::PatternSchemaBinary::Group *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  std::string *v7;
  const std::string *v8;
  std::string *v9;
  const std::string *v10;
  std::string *v11;
  const std::string *v12;
  std::string *v13;
  const std::string *v14;
  std::string *v15;
  const std::string *v16;
  siri::dialogengine::PatternSchemaBinary::Usage *v17;
  const siri::dialogengine::PatternSchemaBinary::Usage *v18;
  siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *v19;
  const siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *v20;
  char v21;
  std::string v22[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v22, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.cc", 2006);
    v4 = google::protobuf::internal::LogMessage::operator<<(v22, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v21, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v22[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((int **)this + 3, (uint64_t)a2 + 24);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::PatternComponent>::TypeHandler>((int **)this + 6, (uint64_t)a2 + 48);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::PatternComponent>::TypeHandler>((int **)this + 9, (uint64_t)a2 + 72);
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 0x7F) != 0)
  {
    if ((v6 & 1) != 0)
    {
      v7 = (std::string *)*((_QWORD *)this + 12);
      *((_DWORD *)this + 4) |= 1u;
      v8 = (const std::string *)*((_QWORD *)a2 + 12);
      if (v7 != v8)
      {
        if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 12, (uint64_t)v8);
          if ((v6 & 2) == 0)
            goto LABEL_17;
LABEL_11:
          v9 = (std::string *)*((_QWORD *)this + 13);
          *((_DWORD *)this + 4) |= 2u;
          v10 = (const std::string *)*((_QWORD *)a2 + 13);
          if (v9 != v10)
          {
            if (v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 13, (uint64_t)v10);
            else
              std::string::operator=(v9, v10);
          }
LABEL_17:
          if ((v6 & 4) != 0)
          {
            v11 = (std::string *)*((_QWORD *)this + 14);
            *((_DWORD *)this + 4) |= 4u;
            v12 = (const std::string *)*((_QWORD *)a2 + 14);
            if (v11 != v12)
            {
              if (v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              {
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 14, (uint64_t)v12);
                if ((v6 & 8) == 0)
                  goto LABEL_28;
LABEL_22:
                v13 = (std::string *)*((_QWORD *)this + 15);
                *((_DWORD *)this + 4) |= 8u;
                v14 = (const std::string *)*((_QWORD *)a2 + 15);
                if (v13 != v14)
                {
                  if (v13 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 15, (uint64_t)v14);
                  else
                    std::string::operator=(v13, v14);
                }
LABEL_28:
                if ((v6 & 0x10) != 0)
                {
                  v15 = (std::string *)*((_QWORD *)this + 16);
                  *((_DWORD *)this + 4) |= 0x10u;
                  v16 = (const std::string *)*((_QWORD *)a2 + 16);
                  if (v15 != v16)
                  {
                    if (v15 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                    {
                      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 16, (uint64_t)v16);
                      if ((v6 & 0x20) != 0)
                        goto LABEL_33;
                      goto LABEL_39;
                    }
                    std::string::operator=(v15, v16);
                  }
                }
                if ((v6 & 0x20) != 0)
                {
LABEL_33:
                  *((_DWORD *)this + 4) |= 0x20u;
                  v17 = (siri::dialogengine::PatternSchemaBinary::Usage *)*((_QWORD *)this + 17);
                  if (!v17)
                  {
                    v17 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Usage>(0);
                    *((_QWORD *)this + 17) = v17;
                  }
                  if (*((_QWORD *)a2 + 17))
                    v18 = (const siri::dialogengine::PatternSchemaBinary::Usage *)*((_QWORD *)a2 + 17);
                  else
                    v18 = (const siri::dialogengine::PatternSchemaBinary::Usage *)&siri::dialogengine::PatternSchemaBinary::_Usage_default_instance_;
                  siri::dialogengine::PatternSchemaBinary::Usage::MergeFrom(v17, v18);
                }
LABEL_39:
                if ((v6 & 0x40) != 0)
                {
                  *((_DWORD *)this + 4) |= 0x40u;
                  v19 = (siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *)*((_QWORD *)this + 18);
                  if (!v19)
                  {
                    v19 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination>(0);
                    *((_QWORD *)this + 18) = v19;
                  }
                  if (*((_QWORD *)a2 + 18))
                    v20 = (const siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *)*((_QWORD *)a2 + 18);
                  else
                    v20 = (const siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *)&siri::dialogengine::PatternSchemaBinary::_VisualComponentsCombination_default_instance_;
                  siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::MergeFrom(v19, v20);
                }
                return;
              }
              std::string::operator=(v11, v12);
            }
          }
          if ((v6 & 8) == 0)
            goto LABEL_28;
          goto LABEL_22;
        }
        std::string::operator=(v7, v8);
      }
    }
    if ((v6 & 2) == 0)
      goto LABEL_17;
    goto LABEL_11;
  }
}

void sub_1BFC33E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::PatternComponent>::TypeHandler>(int **this, uint64_t a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  siri::dialogengine::PatternSchemaBinary::PatternComponent **v13;
  siri::dialogengine::PatternSchemaBinary::PatternComponent **v14;
  siri::dialogengine::PatternSchemaBinary::PatternComponent *v15;
  siri::dialogengine::PatternSchemaBinary::PatternComponent *v16;
  siri::dialogengine::PatternSchemaBinary::PatternComponent *v17;
  google::protobuf::internal::ArenaImpl *v18;
  int v19;
  uint64_t v20;
  siri::dialogengine::PatternSchemaBinary::PatternComponent **v21;
  siri::dialogengine::PatternSchemaBinary::PatternComponent **v22;
  siri::dialogengine::PatternSchemaBinary::PatternComponent *v23;
  siri::dialogengine::PatternSchemaBinary::PatternComponent *v24;
  int v25;
  int *v26;
  char v27;
  std::string v28[2];

  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    v9 = *this[2];
    v10 = *((int *)this + 2);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (siri::dialogengine::PatternSchemaBinary::PatternComponent **)(v6 + 8);
      v14 = (siri::dialogengine::PatternSchemaBinary::PatternComponent **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<siri::dialogengine::PatternSchemaBinary::PatternComponent>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (siri::dialogengine::PatternSchemaBinary::PatternComponent **)((char *)v8 + v20);
      v22 = (siri::dialogengine::PatternSchemaBinary::PatternComponent **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::PatternComponent>(v18);
        google::protobuf::internal::GenericTypeHandler<siri::dialogengine::PatternSchemaBinary::PatternComponent>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25)
      *v26 = v25;
  }
}

void sub_1BFC33F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<siri::dialogengine::PatternSchemaBinary::PatternComponent>::Merge(siri::dialogengine::PatternSchemaBinary::PatternComponent *a1, siri::dialogengine::PatternSchemaBinary::PatternComponent *this)
{
  siri::dialogengine::PatternSchemaBinary::PatternComponent::MergeFrom(this, a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::PatternComponent>::TypeHandler>(uint64_t a1)
{
  uint64_t v1;
  siri::dialogengine::PatternSchemaBinary::PatternComponent **v3;
  siri::dialogengine::PatternSchemaBinary::PatternComponent *v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v1)
  {
    v3 = (siri::dialogengine::PatternSchemaBinary::PatternComponent **)(*(_QWORD *)(a1 + 16) + 8);
    do
    {
      v4 = *v3++;
      siri::dialogengine::PatternSchemaBinary::PatternComponent::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_1BFC34038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

siri::dialogengine::PatternSchemaBinary::Group *google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Group>(google::protobuf::internal::ArenaImpl *this)
{
  siri::dialogengine::PatternSchemaBinary::Group *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (siri::dialogengine::PatternSchemaBinary::Group *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x98uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<siri::dialogengine::PatternSchemaBinary::Group>);
    siri::dialogengine::PatternSchemaBinary::Group::Group(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (siri::dialogengine::PatternSchemaBinary::Group *)operator new();
    siri::dialogengine::PatternSchemaBinary::Group::Group(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFC340D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C40D17434CCLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<siri::dialogengine::PatternSchemaBinary::Group>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void InitDefaultsscc_info_Parameter_PatternSchemaBinary_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.cc", a4);
  siri::dialogengine::PatternSchemaBinary::Parameter::Parameter((siri::dialogengine::PatternSchemaBinary::Parameter *)&siri::dialogengine::PatternSchemaBinary::_Parameter_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&siri::dialogengine::PatternSchemaBinary::_Parameter_default_instance_, v4);
}

siri::dialogengine::PatternSchemaBinary::Parameter *siri::dialogengine::PatternSchemaBinary::Parameter::Parameter(siri::dialogengine::PatternSchemaBinary::Parameter *this)
{
  *(_QWORD *)this = &off_1E7938488;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  if (atomic_load(scc_info_Parameter_PatternSchemaBinary_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Parameter_PatternSchemaBinary_2eproto);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 4) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 7) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

void sub_1BFC3436C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void siri::dialogengine::PatternSchemaBinary::Parameter::~Parameter(siri::dialogengine::PatternSchemaBinary::Parameter *this)
{
  siri::dialogengine::PatternSchemaBinary::Parameter::~Parameter(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v10;

  *(_QWORD *)this = &off_1E7938488;
  v2 = *((_QWORD *)this + 3);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 4);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1C3B8D890](v4, 0x1012C40EC159624);
  }
  v6 = *((_QWORD *)this + 5);
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
  {
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    MEMORY[0x1C3B8D890](v6, 0x1012C40EC159624);
  }
  v8 = *((_QWORD *)this + 6);
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v8 != 0)
  {
    if (*(char *)(v8 + 23) < 0)
      operator delete(*(void **)v8);
    MEMORY[0x1C3B8D890](v8, 0x1012C40EC159624);
  }
  v10 = *((_QWORD *)this + 7);
  if ((uint64_t *)v10 != &google::protobuf::internal::fixed_address_empty_string && v10)
  {
    if (*(char *)(v10 + 23) < 0)
      operator delete(*(void **)v10);
    MEMORY[0x1C3B8D890](v10, 0x1012C40EC159624);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *siri::dialogengine::PatternSchemaBinary::Parameter::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "siri.dialogengine.PatternSchemaBinary.Parameter");
}

siri::dialogengine::PatternSchemaBinary::Parameter *siri::dialogengine::PatternSchemaBinary::Parameter::New(siri::dialogengine::PatternSchemaBinary::Parameter *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Parameter>(0);
}

siri::dialogengine::PatternSchemaBinary::Parameter *siri::dialogengine::PatternSchemaBinary::Parameter::New(siri::dialogengine::PatternSchemaBinary::Parameter *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Parameter>(a2);
}

void siri::dialogengine::PatternSchemaBinary::Parameter::Clear(siri::dialogengine::PatternSchemaBinary::Parameter *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  google::protobuf::internal::InternalMetadataWithArenaLite *v7;
  char v8;

  v1 = *((_DWORD *)this + 4);
  if ((v1 & 0x1F) == 0)
    goto LABEL_27;
  if ((v1 & 1) != 0)
  {
    v2 = *((_QWORD *)this + 3);
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
      if ((v1 & 2) != 0)
        goto LABEL_12;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
      if ((v1 & 2) != 0)
        goto LABEL_12;
    }
LABEL_4:
    if ((v1 & 4) == 0)
      goto LABEL_5;
LABEL_16:
    v4 = *((_QWORD *)this + 5);
    if (*(char *)(v4 + 23) < 0)
    {
      **(_BYTE **)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      if ((v1 & 8) != 0)
        goto LABEL_20;
    }
    else
    {
      *(_BYTE *)v4 = 0;
      *(_BYTE *)(v4 + 23) = 0;
      if ((v1 & 8) != 0)
        goto LABEL_20;
    }
LABEL_6:
    if ((v1 & 0x10) == 0)
      goto LABEL_27;
LABEL_24:
    v6 = *((_QWORD *)this + 7);
    if (*(char *)(v6 + 23) < 0)
    {
      **(_BYTE **)v6 = 0;
      *(_QWORD *)(v6 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v6 = 0;
      *(_BYTE *)(v6 + 23) = 0;
    }
    goto LABEL_27;
  }
  if ((v1 & 2) == 0)
    goto LABEL_4;
LABEL_12:
  v3 = *((_QWORD *)this + 4);
  if (*(char *)(v3 + 23) < 0)
  {
    **(_BYTE **)v3 = 0;
    *(_QWORD *)(v3 + 8) = 0;
    if ((v1 & 4) != 0)
      goto LABEL_16;
  }
  else
  {
    *(_BYTE *)v3 = 0;
    *(_BYTE *)(v3 + 23) = 0;
    if ((v1 & 4) != 0)
      goto LABEL_16;
  }
LABEL_5:
  if ((v1 & 8) == 0)
    goto LABEL_6;
LABEL_20:
  v5 = *((_QWORD *)this + 6);
  if (*(char *)(v5 + 23) < 0)
  {
    **(_BYTE **)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    if ((v1 & 0x10) == 0)
      goto LABEL_27;
    goto LABEL_24;
  }
  *(_BYTE *)v5 = 0;
  *(_BYTE *)(v5 + 23) = 0;
  if ((v1 & 0x10) != 0)
    goto LABEL_24;
LABEL_27:
  v8 = *((_BYTE *)this + 8);
  v7 = (siri::dialogengine::PatternSchemaBinary::Parameter *)((char *)this + 8);
  *((_DWORD *)v7 + 2) = 0;
  if ((v8 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v7);
}

uint64_t siri::dialogengine::PatternSchemaBinary::Parameter::IsInitialized(siri::dialogengine::PatternSchemaBinary::Parameter *this)
{
  return 1;
}

void siri::dialogengine::PatternSchemaBinary::Parameter::CheckTypeAndMergeFrom(siri::dialogengine::PatternSchemaBinary::Parameter *this, const google::protobuf::MessageLite *lpsrc)
{
  siri::dialogengine::PatternSchemaBinary::Parameter::MergeFrom(this, lpsrc);
}

uint64_t siri::dialogengine::PatternSchemaBinary::Parameter::ByteSizeLong(siri::dialogengine::PatternSchemaBinary::Parameter *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v1 = *((_DWORD *)this + 4);
  if ((v1 & 0x1F) == 0)
  {
    v2 = 0;
    goto LABEL_18;
  }
  if ((v1 & 1) == 0)
  {
    v2 = 0;
    if ((v1 & 2) == 0)
      goto LABEL_12;
    goto LABEL_9;
  }
  v3 = *((_QWORD *)this + 3);
  v4 = *(unsigned __int8 *)(v3 + 23);
  v5 = *(_QWORD *)(v3 + 8);
  if ((v4 & 0x80u) == 0)
    v5 = v4;
  v2 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v1 & 2) != 0)
  {
LABEL_9:
    v6 = *((_QWORD *)this + 4);
    v7 = *(unsigned __int8 *)(v6 + 23);
    v8 = *(_QWORD *)(v6 + 8);
    if ((v7 & 0x80u) == 0)
      v8 = v7;
    v2 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_12:
  if ((v1 & 4) != 0)
  {
    v14 = *((_QWORD *)this + 5);
    v15 = *(unsigned __int8 *)(v14 + 23);
    v16 = *(_QWORD *)(v14 + 8);
    if ((v15 & 0x80u) == 0)
      v16 = v15;
    v2 += v16 + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v1 & 8) == 0)
    {
LABEL_14:
      if ((v1 & 0x10) == 0)
        goto LABEL_18;
      goto LABEL_15;
    }
  }
  else if ((v1 & 8) == 0)
  {
    goto LABEL_14;
  }
  v17 = *((_QWORD *)this + 6);
  v18 = *(unsigned __int8 *)(v17 + 23);
  v19 = *(_QWORD *)(v17 + 8);
  if ((v18 & 0x80u) == 0)
    v19 = v18;
  v2 += v19 + ((9 * (__clz(v19 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v1 & 0x10) != 0)
  {
LABEL_15:
    v9 = *((_QWORD *)this + 7);
    v10 = *(unsigned __int8 *)(v9 + 23);
    v11 = *(_QWORD *)(v9 + 8);
    if ((v10 & 0x80u) == 0)
      v11 = v10;
    v2 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_18:
  v12 = *((_QWORD *)this + 1);
  if ((v12 & 1) != 0)
  {
    v20 = v12 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v20 + 23) < 0)
      v21 = *(_QWORD *)(v20 + 8);
    else
      v21 = *(unsigned __int8 *)(v20 + 23);
    v2 += v21;
  }
  *((_DWORD *)this + 5) = v2;
  return v2;
}

uint64_t siri::dialogengine::PatternSchemaBinary::Parameter::GetCachedSize(siri::dialogengine::PatternSchemaBinary::Parameter *this)
{
  return *((unsigned int *)this + 5);
}

google::protobuf::internal *siri::dialogengine::PatternSchemaBinary::Parameter::_InternalParse(siri::dialogengine::PatternSchemaBinary::Parameter *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  std::string **v6;
  std::string **v7;
  std::string **v8;
  std::string **v9;
  uint64_t *v10;
  google::protobuf::internal *TagFallback;
  const char *v12;
  std::string *v13;
  google::protobuf::internal *v14;
  BOOL v15;
  google::protobuf::internal *v17;

  v17 = a2;
  v5 = (std::string **)((char *)this + 56);
  v6 = (std::string **)((char *)this + 48);
  v7 = (std::string **)((char *)this + 40);
  v8 = (std::string **)((char *)this + 32);
  v9 = (std::string **)((char *)this + 24);
  v10 = (uint64_t *)((char *)this + 8);
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v17, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v17;
    TagFallback = (google::protobuf::internal *)((char *)v17 + 1);
    LODWORD(v12) = *(unsigned __int8 *)v17;
    if ((*(char *)v17 & 0x80000000) == 0)
      goto LABEL_6;
    v12 = (const char *)(v12 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v17 + 2);
LABEL_6:
      v17 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v17, v12);
    v17 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    switch(v12 >> 3)
    {
      case 1u:
        if (v12 != 10)
          goto LABEL_27;
        *((_DWORD *)this + 4) |= 1u;
        v13 = (std::string *)*((_QWORD *)this + 3);
        if (v13 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_24;
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v9, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v13 = *v9;
        goto LABEL_23;
      case 2u:
        if (v12 != 18)
          goto LABEL_27;
        *((_DWORD *)this + 4) |= 2u;
        v13 = (std::string *)*((_QWORD *)this + 4);
        if (v13 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_24;
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v8, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v13 = *v8;
        goto LABEL_23;
      case 3u:
        if (v12 != 26)
          goto LABEL_27;
        *((_DWORD *)this + 4) |= 4u;
        v13 = (std::string *)*((_QWORD *)this + 5);
        if (v13 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_24;
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v7, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v13 = *v7;
        goto LABEL_23;
      case 4u:
        if (v12 != 34)
          goto LABEL_27;
        *((_DWORD *)this + 4) |= 8u;
        v13 = (std::string *)*((_QWORD *)this + 6);
        if (v13 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_24;
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v13 = *v6;
        goto LABEL_23;
      case 5u:
        if (v12 != 42)
          goto LABEL_27;
        *((_DWORD *)this + 4) |= 0x10u;
        v13 = (std::string *)*((_QWORD *)this + 7);
        if (v13 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_24;
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v13 = *v5;
LABEL_23:
        TagFallback = v17;
LABEL_24:
        v14 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v13, (std::string::value_type *)TagFallback, (uint64_t)a3);
        goto LABEL_25;
      default:
LABEL_27:
        if ((_DWORD)v12)
          v15 = (v12 & 7) == 4;
        else
          v15 = 1;
        if (v15)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v12 - 1;
          return TagFallback;
        }
        v14 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v12, v10, TagFallback, a3);
LABEL_25:
        v17 = v14;
        if (v14)
          continue;
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

unsigned __int8 *siri::dialogengine::PatternSchemaBinary::Parameter::InternalSerializeWithCachedSizesToArray(siri::dialogengine::PatternSchemaBinary::Parameter *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  unsigned __int8 *v4;
  int v6;
  uint64_t v7;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;

  v4 = (unsigned __int8 *)a2;
  v6 = *((_DWORD *)this + 4);
  if ((v6 & 1) != 0)
  {
    v4 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 3), a2);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v4 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((_QWORD *)this + 4), (char *)v4);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  v4 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, *((_QWORD *)this + 5), (char *)v4);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
LABEL_12:
  v4 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 4, *((_QWORD *)this + 6), (char *)v4);
  if ((v6 & 0x10) != 0)
LABEL_6:
    v4 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 5, *((_QWORD *)this + 7), (char *)v4);
LABEL_7:
  v7 = *((_QWORD *)this + 1);
  if ((v7 & 1) == 0)
    return v4;
  v9 = v7 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v9 + 23) < 0)
  {
    v11 = *(void **)v9;
    v10 = *(_QWORD *)(v9 + 8);
  }
  else
  {
    LODWORD(v10) = *(unsigned __int8 *)(v9 + 23);
    v11 = (void *)v9;
  }
  if (*(_QWORD *)a3 - (_QWORD)v4 >= (int)v10)
  {
    v12 = (int)v10;
    memcpy(v4, v11, (int)v10);
    v4 += v12;
    return v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v11, v10, v4);
}

void siri::dialogengine::PatternSchemaBinary::Parameter::MergeFrom(siri::dialogengine::PatternSchemaBinary::Parameter *this, const siri::dialogengine::PatternSchemaBinary::Parameter *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  std::string *v7;
  const std::string *v8;
  std::string *v9;
  const std::string *v10;
  std::string *v11;
  const std::string *v12;
  std::string *v13;
  const std::string *v14;
  std::string *v15;
  std::string **v16;
  std::string *v17;
  const std::string *v18;
  char v19;
  std::string v20[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.cc", 1484);
    v4 = google::protobuf::internal::LogMessage::operator<<(v20, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v19, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v20[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 0x1F) != 0)
  {
    if ((v6 & 1) != 0)
    {
      v7 = (std::string *)*((_QWORD *)this + 3);
      *((_DWORD *)this + 4) |= 1u;
      v8 = (const std::string *)*((_QWORD *)a2 + 3);
      if (v7 != v8)
      {
        if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, (uint64_t)v8);
          if ((v6 & 2) == 0)
            goto LABEL_17;
LABEL_11:
          v9 = (std::string *)*((_QWORD *)this + 4);
          *((_DWORD *)this + 4) |= 2u;
          v10 = (const std::string *)*((_QWORD *)a2 + 4);
          if (v9 != v10)
          {
            if (v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 4, (uint64_t)v10);
            else
              std::string::operator=(v9, v10);
          }
LABEL_17:
          if ((v6 & 4) != 0)
          {
            v11 = (std::string *)*((_QWORD *)this + 5);
            *((_DWORD *)this + 4) |= 4u;
            v12 = (const std::string *)*((_QWORD *)a2 + 5);
            if (v11 != v12)
            {
              if (v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              {
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 5, (uint64_t)v12);
                if ((v6 & 8) != 0)
                {
LABEL_22:
                  v13 = (std::string *)*((_QWORD *)this + 6);
                  *((_DWORD *)this + 4) |= 8u;
                  v14 = (const std::string *)*((_QWORD *)a2 + 6);
                  if (v13 != v14)
                  {
                    if (v13 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, (uint64_t)v14);
                    else
                      std::string::operator=(v13, v14);
                  }
                }
LABEL_28:
                if ((v6 & 0x10) != 0)
                {
                  v17 = (std::string *)*((_QWORD *)this + 7);
                  v16 = (std::string **)((char *)this + 56);
                  v15 = v17;
                  *((_DWORD *)v16 - 10) |= 0x10u;
                  v18 = (const std::string *)*((_QWORD *)a2 + 7);
                  if (v17 != v18)
                  {
                    if (v15 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v16, (uint64_t)v18);
                    else
                      std::string::operator=(v15, v18);
                  }
                }
                return;
              }
              std::string::operator=(v11, v12);
            }
          }
          if ((v6 & 8) != 0)
            goto LABEL_22;
          goto LABEL_28;
        }
        std::string::operator=(v7, v8);
      }
    }
    if ((v6 & 2) == 0)
      goto LABEL_17;
    goto LABEL_11;
  }
}

void sub_1BFC34C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

siri::dialogengine::PatternSchemaBinary::Parameter *google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Parameter>(google::protobuf::internal::ArenaImpl *this)
{
  siri::dialogengine::PatternSchemaBinary::Parameter *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (siri::dialogengine::PatternSchemaBinary::Parameter *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x40uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<siri::dialogengine::PatternSchemaBinary::Parameter>);
    siri::dialogengine::PatternSchemaBinary::Parameter::Parameter(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (siri::dialogengine::PatternSchemaBinary::Parameter *)operator new();
    siri::dialogengine::PatternSchemaBinary::Parameter::Parameter(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFC34D08(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C4030AC051BLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<siri::dialogengine::PatternSchemaBinary::Parameter>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void InitDefaultsscc_info_PatternSchema_PatternSchemaBinary_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.cc", a4);
  siri::dialogengine::PatternSchemaBinary::PatternSchema::PatternSchema((siri::dialogengine::PatternSchemaBinary::PatternSchema *)&siri::dialogengine::PatternSchemaBinary::_PatternSchema_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&siri::dialogengine::PatternSchemaBinary::_PatternSchema_default_instance_, v4);
}

void InitDefaultsscc_info_Setting_PatternSchemaBinary_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.cc", a4);
  siri::dialogengine::PatternSchemaBinary::Setting::Setting((siri::dialogengine::PatternSchemaBinary::Setting *)&siri::dialogengine::PatternSchemaBinary::_Setting_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&siri::dialogengine::PatternSchemaBinary::_Setting_default_instance_, v4);
}

siri::dialogengine::PatternSchemaBinary::Setting *siri::dialogengine::PatternSchemaBinary::Setting::Setting(siri::dialogengine::PatternSchemaBinary::Setting *this)
{
  *(_QWORD *)this = &off_1E79383F8;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  if (atomic_load(scc_info_Setting_PatternSchemaBinary_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Setting_PatternSchemaBinary_2eproto);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 4) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 7) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 8) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 9) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

void sub_1BFC34FA4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void siri::dialogengine::PatternSchemaBinary::Setting::~Setting(siri::dialogengine::PatternSchemaBinary::Setting *this)
{
  siri::dialogengine::PatternSchemaBinary::Setting::~Setting(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)this = &off_1E79383F8;
  v2 = *((_QWORD *)this + 3);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 4);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1C3B8D890](v4, 0x1012C40EC159624);
  }
  v6 = *((_QWORD *)this + 5);
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
  {
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    MEMORY[0x1C3B8D890](v6, 0x1012C40EC159624);
  }
  v8 = *((_QWORD *)this + 6);
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v8 != 0)
  {
    if (*(char *)(v8 + 23) < 0)
      operator delete(*(void **)v8);
    MEMORY[0x1C3B8D890](v8, 0x1012C40EC159624);
  }
  v10 = *((_QWORD *)this + 7);
  if ((uint64_t *)v10 != &google::protobuf::internal::fixed_address_empty_string && v10)
  {
    if (*(char *)(v10 + 23) < 0)
      operator delete(*(void **)v10);
    MEMORY[0x1C3B8D890](v10, 0x1012C40EC159624);
  }
  v11 = *((_QWORD *)this + 8);
  if ((uint64_t *)v11 != &google::protobuf::internal::fixed_address_empty_string && v11)
  {
    if (*(char *)(v11 + 23) < 0)
      operator delete(*(void **)v11);
    MEMORY[0x1C3B8D890](v11, 0x1012C40EC159624);
  }
  v12 = *((_QWORD *)this + 9);
  if ((uint64_t *)v12 != &google::protobuf::internal::fixed_address_empty_string && v12)
  {
    if (*(char *)(v12 + 23) < 0)
      operator delete(*(void **)v12);
    MEMORY[0x1C3B8D890](v12, 0x1012C40EC159624);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *siri::dialogengine::PatternSchemaBinary::Setting::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "siri.dialogengine.PatternSchemaBinary.Setting");
}

siri::dialogengine::PatternSchemaBinary::Setting *siri::dialogengine::PatternSchemaBinary::Setting::New(siri::dialogengine::PatternSchemaBinary::Setting *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Setting>(0);
}

siri::dialogengine::PatternSchemaBinary::Setting *siri::dialogengine::PatternSchemaBinary::Setting::New(siri::dialogengine::PatternSchemaBinary::Setting *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Setting>(a2);
}

void siri::dialogengine::PatternSchemaBinary::Setting::Clear(siri::dialogengine::PatternSchemaBinary::Setting *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  google::protobuf::internal::InternalMetadataWithArenaLite *v9;
  char v10;

  v1 = *((_DWORD *)this + 4);
  if ((v1 & 0x7F) == 0)
    goto LABEL_37;
  if ((v1 & 1) != 0)
  {
    v2 = *((_QWORD *)this + 3);
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
      if ((v1 & 2) != 0)
        goto LABEL_14;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
      if ((v1 & 2) != 0)
        goto LABEL_14;
    }
LABEL_4:
    if ((v1 & 4) == 0)
      goto LABEL_5;
LABEL_18:
    v4 = *((_QWORD *)this + 5);
    if (*(char *)(v4 + 23) < 0)
    {
      **(_BYTE **)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      if ((v1 & 8) != 0)
        goto LABEL_22;
    }
    else
    {
      *(_BYTE *)v4 = 0;
      *(_BYTE *)(v4 + 23) = 0;
      if ((v1 & 8) != 0)
        goto LABEL_22;
    }
LABEL_6:
    if ((v1 & 0x10) == 0)
      goto LABEL_7;
LABEL_26:
    v6 = *((_QWORD *)this + 7);
    if (*(char *)(v6 + 23) < 0)
    {
      **(_BYTE **)v6 = 0;
      *(_QWORD *)(v6 + 8) = 0;
      if ((v1 & 0x20) != 0)
        goto LABEL_30;
    }
    else
    {
      *(_BYTE *)v6 = 0;
      *(_BYTE *)(v6 + 23) = 0;
      if ((v1 & 0x20) != 0)
        goto LABEL_30;
    }
LABEL_8:
    if ((v1 & 0x40) == 0)
      goto LABEL_37;
LABEL_34:
    v8 = *((_QWORD *)this + 9);
    if (*(char *)(v8 + 23) < 0)
    {
      **(_BYTE **)v8 = 0;
      *(_QWORD *)(v8 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v8 = 0;
      *(_BYTE *)(v8 + 23) = 0;
    }
    goto LABEL_37;
  }
  if ((v1 & 2) == 0)
    goto LABEL_4;
LABEL_14:
  v3 = *((_QWORD *)this + 4);
  if (*(char *)(v3 + 23) < 0)
  {
    **(_BYTE **)v3 = 0;
    *(_QWORD *)(v3 + 8) = 0;
    if ((v1 & 4) != 0)
      goto LABEL_18;
  }
  else
  {
    *(_BYTE *)v3 = 0;
    *(_BYTE *)(v3 + 23) = 0;
    if ((v1 & 4) != 0)
      goto LABEL_18;
  }
LABEL_5:
  if ((v1 & 8) == 0)
    goto LABEL_6;
LABEL_22:
  v5 = *((_QWORD *)this + 6);
  if (*(char *)(v5 + 23) < 0)
  {
    **(_BYTE **)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_26;
  }
  else
  {
    *(_BYTE *)v5 = 0;
    *(_BYTE *)(v5 + 23) = 0;
    if ((v1 & 0x10) != 0)
      goto LABEL_26;
  }
LABEL_7:
  if ((v1 & 0x20) == 0)
    goto LABEL_8;
LABEL_30:
  v7 = *((_QWORD *)this + 8);
  if (*(char *)(v7 + 23) < 0)
  {
    **(_BYTE **)v7 = 0;
    *(_QWORD *)(v7 + 8) = 0;
    if ((v1 & 0x40) == 0)
      goto LABEL_37;
    goto LABEL_34;
  }
  *(_BYTE *)v7 = 0;
  *(_BYTE *)(v7 + 23) = 0;
  if ((v1 & 0x40) != 0)
    goto LABEL_34;
LABEL_37:
  v10 = *((_BYTE *)this + 8);
  v9 = (siri::dialogengine::PatternSchemaBinary::Setting *)((char *)this + 8);
  *((_DWORD *)v9 + 2) = 0;
  if ((v10 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v9);
}

uint64_t siri::dialogengine::PatternSchemaBinary::Setting::IsInitialized(siri::dialogengine::PatternSchemaBinary::Setting *this)
{
  return 1;
}

void siri::dialogengine::PatternSchemaBinary::Setting::CheckTypeAndMergeFrom(siri::dialogengine::PatternSchemaBinary::Setting *this, const google::protobuf::MessageLite *lpsrc)
{
  siri::dialogengine::PatternSchemaBinary::Setting::MergeFrom(this, lpsrc);
}

uint64_t siri::dialogengine::PatternSchemaBinary::Setting::ByteSizeLong(siri::dialogengine::PatternSchemaBinary::Setting *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;

  v1 = *((_DWORD *)this + 4);
  if ((v1 & 0x7F) == 0)
  {
    v2 = 0;
    goto LABEL_20;
  }
  if ((v1 & 1) == 0)
  {
    v2 = 0;
    if ((v1 & 2) == 0)
      goto LABEL_12;
    goto LABEL_9;
  }
  v3 = *((_QWORD *)this + 3);
  v4 = *(unsigned __int8 *)(v3 + 23);
  v5 = *(_QWORD *)(v3 + 8);
  if ((v4 & 0x80u) == 0)
    v5 = v4;
  v2 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v1 & 2) != 0)
  {
LABEL_9:
    v6 = *((_QWORD *)this + 4);
    v7 = *(unsigned __int8 *)(v6 + 23);
    v8 = *(_QWORD *)(v6 + 8);
    if ((v7 & 0x80u) == 0)
      v8 = v7;
    v2 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_12:
  if ((v1 & 4) != 0)
  {
    v14 = *((_QWORD *)this + 5);
    v15 = *(unsigned __int8 *)(v14 + 23);
    v16 = *(_QWORD *)(v14 + 8);
    if ((v15 & 0x80u) == 0)
      v16 = v15;
    v2 += v16 + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v1 & 8) == 0)
    {
LABEL_14:
      if ((v1 & 0x10) == 0)
        goto LABEL_15;
      goto LABEL_28;
    }
  }
  else if ((v1 & 8) == 0)
  {
    goto LABEL_14;
  }
  v17 = *((_QWORD *)this + 6);
  v18 = *(unsigned __int8 *)(v17 + 23);
  v19 = *(_QWORD *)(v17 + 8);
  if ((v18 & 0x80u) == 0)
    v19 = v18;
  v2 += v19 + ((9 * (__clz(v19 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v1 & 0x10) == 0)
  {
LABEL_15:
    if ((v1 & 0x20) == 0)
      goto LABEL_16;
    goto LABEL_31;
  }
LABEL_28:
  v20 = *((_QWORD *)this + 7);
  v21 = *(unsigned __int8 *)(v20 + 23);
  v22 = *(_QWORD *)(v20 + 8);
  if ((v21 & 0x80u) == 0)
    v22 = v21;
  v2 += v22 + ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v1 & 0x20) == 0)
  {
LABEL_16:
    if ((v1 & 0x40) == 0)
      goto LABEL_20;
    goto LABEL_17;
  }
LABEL_31:
  v23 = *((_QWORD *)this + 8);
  v24 = *(unsigned __int8 *)(v23 + 23);
  v25 = *(_QWORD *)(v23 + 8);
  if ((v24 & 0x80u) == 0)
    v25 = v24;
  v2 += v25 + ((9 * (__clz(v25 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v1 & 0x40) != 0)
  {
LABEL_17:
    v9 = *((_QWORD *)this + 9);
    v10 = *(unsigned __int8 *)(v9 + 23);
    v11 = *(_QWORD *)(v9 + 8);
    if ((v10 & 0x80u) == 0)
      v11 = v10;
    v2 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_20:
  v12 = *((_QWORD *)this + 1);
  if ((v12 & 1) != 0)
  {
    v26 = v12 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v26 + 23) < 0)
      v27 = *(_QWORD *)(v26 + 8);
    else
      v27 = *(unsigned __int8 *)(v26 + 23);
    v2 += v27;
  }
  *((_DWORD *)this + 5) = v2;
  return v2;
}

uint64_t siri::dialogengine::PatternSchemaBinary::Setting::GetCachedSize(siri::dialogengine::PatternSchemaBinary::Setting *this)
{
  return *((unsigned int *)this + 5);
}

google::protobuf::internal *siri::dialogengine::PatternSchemaBinary::Setting::_InternalParse(siri::dialogengine::PatternSchemaBinary::Setting *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  std::string **v6;
  std::string **v7;
  std::string **v8;
  uint64_t *v9;
  google::protobuf::internal *TagFallback;
  const char *v11;
  std::string *v12;
  std::string **v13;
  google::protobuf::internal *v14;
  BOOL v15;
  std::string **v17;
  std::string **v18;
  std::string **v19;
  google::protobuf::internal *v20;

  v19 = (std::string **)((char *)this + 72);
  v20 = a2;
  v17 = (std::string **)((char *)this + 56);
  v18 = (std::string **)((char *)this + 64);
  v5 = (std::string **)((char *)this + 48);
  v6 = (std::string **)((char *)this + 40);
  v7 = (std::string **)((char *)this + 32);
  v8 = (std::string **)((char *)this + 24);
  v9 = (uint64_t *)((char *)this + 8);
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v20, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v20;
    TagFallback = (google::protobuf::internal *)((char *)v20 + 1);
    LODWORD(v11) = *(unsigned __int8 *)v20;
    if ((*(char *)v20 & 0x80000000) == 0)
      goto LABEL_6;
    v11 = (const char *)(v11 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v20 + 2);
LABEL_6:
      v20 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v20, v11);
    v20 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    switch(v11 >> 3)
    {
      case 1u:
        if (v11 != 10)
          goto LABEL_36;
        *((_DWORD *)this + 4) |= 1u;
        v12 = (std::string *)*((_QWORD *)this + 3);
        if (v12 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_33;
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v8, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v12 = *v8;
        goto LABEL_32;
      case 2u:
        if (v11 != 18)
          goto LABEL_36;
        *((_DWORD *)this + 4) |= 2u;
        v12 = (std::string *)*((_QWORD *)this + 4);
        if (v12 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_33;
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v7, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v12 = *v7;
        goto LABEL_32;
      case 3u:
        if (v11 != 26)
          goto LABEL_36;
        *((_DWORD *)this + 4) |= 4u;
        v12 = (std::string *)*((_QWORD *)this + 5);
        if (v12 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_33;
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v12 = *v6;
        goto LABEL_32;
      case 4u:
        if (v11 != 34)
          goto LABEL_36;
        *((_DWORD *)this + 4) |= 8u;
        v12 = (std::string *)*((_QWORD *)this + 6);
        if (v12 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_33;
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v12 = *v5;
        goto LABEL_32;
      case 5u:
        if (v11 != 42)
          goto LABEL_36;
        *((_DWORD *)this + 4) |= 0x10u;
        v12 = (std::string *)*((_QWORD *)this + 7);
        if (v12 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_33;
        v13 = v17;
        goto LABEL_31;
      case 6u:
        if (v11 != 50)
          goto LABEL_36;
        *((_DWORD *)this + 4) |= 0x20u;
        v12 = (std::string *)*((_QWORD *)this + 8);
        if (v12 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_33;
        v13 = v18;
        goto LABEL_31;
      case 7u:
        if (v11 != 58)
          goto LABEL_36;
        *((_DWORD *)this + 4) |= 0x40u;
        v12 = (std::string *)*((_QWORD *)this + 9);
        if (v12 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_33;
        v13 = v19;
LABEL_31:
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v13, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v12 = *v13;
LABEL_32:
        TagFallback = v20;
LABEL_33:
        v14 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v12, (std::string::value_type *)TagFallback, (uint64_t)a3);
        goto LABEL_34;
      default:
LABEL_36:
        if ((_DWORD)v11)
          v15 = (v11 & 7) == 4;
        else
          v15 = 1;
        if (v15)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v11 - 1;
          return TagFallback;
        }
        v14 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v11, v9, TagFallback, a3);
LABEL_34:
        v20 = v14;
        if (v14)
          continue;
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

unsigned __int8 *siri::dialogengine::PatternSchemaBinary::Setting::InternalSerializeWithCachedSizesToArray(siri::dialogengine::PatternSchemaBinary::Setting *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  unsigned __int8 *v4;
  int v6;
  uint64_t v7;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;

  v4 = (unsigned __int8 *)a2;
  v6 = *((_DWORD *)this + 4);
  if ((v6 & 1) != 0)
  {
    v4 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 3), a2);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v4 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((_QWORD *)this + 4), (char *)v4);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  v4 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, *((_QWORD *)this + 5), (char *)v4);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  v4 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 4, *((_QWORD *)this + 6), (char *)v4);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_16;
  }
LABEL_15:
  v4 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 5, *((_QWORD *)this + 7), (char *)v4);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_8;
  }
LABEL_16:
  v4 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 6, *((_QWORD *)this + 8), (char *)v4);
  if ((v6 & 0x40) != 0)
LABEL_8:
    v4 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 7, *((_QWORD *)this + 9), (char *)v4);
LABEL_9:
  v7 = *((_QWORD *)this + 1);
  if ((v7 & 1) == 0)
    return v4;
  v9 = v7 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v9 + 23) < 0)
  {
    v11 = *(void **)v9;
    v10 = *(_QWORD *)(v9 + 8);
  }
  else
  {
    LODWORD(v10) = *(unsigned __int8 *)(v9 + 23);
    v11 = (void *)v9;
  }
  if (*(_QWORD *)a3 - (_QWORD)v4 >= (int)v10)
  {
    v12 = (int)v10;
    memcpy(v4, v11, (int)v10);
    v4 += v12;
    return v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v11, v10, v4);
}

void siri::dialogengine::PatternSchemaBinary::Setting::MergeFrom(siri::dialogengine::PatternSchemaBinary::Setting *this, const siri::dialogengine::PatternSchemaBinary::Setting *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  std::string *v7;
  const std::string *v8;
  std::string *v9;
  const std::string *v10;
  std::string *v11;
  const std::string *v12;
  std::string *v13;
  const std::string *v14;
  std::string *v15;
  const std::string *v16;
  std::string *v17;
  const std::string *v18;
  std::string *v19;
  std::string **v20;
  std::string *v21;
  const std::string *v22;
  char v23;
  std::string v24[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v24, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.cc", 1123);
    v4 = google::protobuf::internal::LogMessage::operator<<(v24, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v23, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v24[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 0x7F) != 0)
  {
    if ((v6 & 1) != 0)
    {
      v7 = (std::string *)*((_QWORD *)this + 3);
      *((_DWORD *)this + 4) |= 1u;
      v8 = (const std::string *)*((_QWORD *)a2 + 3);
      if (v7 != v8)
      {
        if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, (uint64_t)v8);
          if ((v6 & 2) == 0)
            goto LABEL_17;
LABEL_11:
          v9 = (std::string *)*((_QWORD *)this + 4);
          *((_DWORD *)this + 4) |= 2u;
          v10 = (const std::string *)*((_QWORD *)a2 + 4);
          if (v9 != v10)
          {
            if (v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 4, (uint64_t)v10);
            else
              std::string::operator=(v9, v10);
          }
LABEL_17:
          if ((v6 & 4) != 0)
          {
            v11 = (std::string *)*((_QWORD *)this + 5);
            *((_DWORD *)this + 4) |= 4u;
            v12 = (const std::string *)*((_QWORD *)a2 + 5);
            if (v11 != v12)
            {
              if (v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              {
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 5, (uint64_t)v12);
                if ((v6 & 8) == 0)
                  goto LABEL_28;
LABEL_22:
                v13 = (std::string *)*((_QWORD *)this + 6);
                *((_DWORD *)this + 4) |= 8u;
                v14 = (const std::string *)*((_QWORD *)a2 + 6);
                if (v13 != v14)
                {
                  if (v13 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, (uint64_t)v14);
                  else
                    std::string::operator=(v13, v14);
                }
LABEL_28:
                if ((v6 & 0x10) != 0)
                {
                  v15 = (std::string *)*((_QWORD *)this + 7);
                  *((_DWORD *)this + 4) |= 0x10u;
                  v16 = (const std::string *)*((_QWORD *)a2 + 7);
                  if (v15 != v16)
                  {
                    if (v15 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                    {
                      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 7, (uint64_t)v16);
                      if ((v6 & 0x20) != 0)
                      {
LABEL_33:
                        v17 = (std::string *)*((_QWORD *)this + 8);
                        *((_DWORD *)this + 4) |= 0x20u;
                        v18 = (const std::string *)*((_QWORD *)a2 + 8);
                        if (v17 != v18)
                        {
                          if (v17 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 8, (uint64_t)v18);
                          else
                            std::string::operator=(v17, v18);
                        }
                      }
LABEL_39:
                      if ((v6 & 0x40) != 0)
                      {
                        v21 = (std::string *)*((_QWORD *)this + 9);
                        v20 = (std::string **)((char *)this + 72);
                        v19 = v21;
                        *((_DWORD *)v20 - 14) |= 0x40u;
                        v22 = (const std::string *)*((_QWORD *)a2 + 9);
                        if (v21 != v22)
                        {
                          if (v19 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v20, (uint64_t)v22);
                          else
                            std::string::operator=(v19, v22);
                        }
                      }
                      return;
                    }
                    std::string::operator=(v15, v16);
                  }
                }
                if ((v6 & 0x20) != 0)
                  goto LABEL_33;
                goto LABEL_39;
              }
              std::string::operator=(v11, v12);
            }
          }
          if ((v6 & 8) == 0)
            goto LABEL_28;
          goto LABEL_22;
        }
        std::string::operator=(v7, v8);
      }
    }
    if ((v6 & 2) == 0)
      goto LABEL_17;
    goto LABEL_11;
  }
}

void sub_1BFC35AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

siri::dialogengine::PatternSchemaBinary::Setting *google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Setting>(google::protobuf::internal::ArenaImpl *this)
{
  siri::dialogengine::PatternSchemaBinary::Setting *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (siri::dialogengine::PatternSchemaBinary::Setting *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x50uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<siri::dialogengine::PatternSchemaBinary::Setting>);
    siri::dialogengine::PatternSchemaBinary::Setting::Setting(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (siri::dialogengine::PatternSchemaBinary::Setting *)operator new();
    siri::dialogengine::PatternSchemaBinary::Setting::Setting(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFC35B5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C408DC193B1);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<siri::dialogengine::PatternSchemaBinary::Setting>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

siri::dialogengine::PatternSchemaBinary::PatternSchema *siri::dialogengine::PatternSchemaBinary::PatternSchema::PatternSchema(siri::dialogengine::PatternSchemaBinary::PatternSchema *this)
{
  *(_QWORD *)this = &off_1E7938368;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  if (atomic_load(scc_info_PatternSchema_PatternSchemaBinary_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_PatternSchema_PatternSchemaBinary_2eproto);
  *((_QWORD *)this + 15) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 16) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 17) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 18) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 19) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

void sub_1BFC35DEC(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v2 + 96));
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v2 + 72));
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v2 + 48));
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v2 + 24));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void siri::dialogengine::PatternSchemaBinary::PatternSchema::~PatternSchema(siri::dialogengine::PatternSchemaBinary::PatternSchema *this)
{
  siri::dialogengine::PatternSchemaBinary::PatternSchema::~PatternSchema(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v10;

  *(_QWORD *)this = &off_1E7938368;
  v2 = *((_QWORD *)this + 15);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 16);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1C3B8D890](v4, 0x1012C40EC159624);
  }
  v6 = *((_QWORD *)this + 17);
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
  {
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    MEMORY[0x1C3B8D890](v6, 0x1012C40EC159624);
  }
  v8 = *((_QWORD *)this + 18);
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v8 != 0)
  {
    if (*(char *)(v8 + 23) < 0)
      operator delete(*(void **)v8);
    MEMORY[0x1C3B8D890](v8, 0x1012C40EC159624);
  }
  v10 = *((_QWORD *)this + 19);
  if ((uint64_t *)v10 != &google::protobuf::internal::fixed_address_empty_string && v10)
  {
    if (*(char *)(v10 + 23) < 0)
      operator delete(*(void **)v10);
    MEMORY[0x1C3B8D890](v10, 0x1012C40EC159624);
  }
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((siri::dialogengine::PatternSchemaBinary::PatternSchema *)((char *)this + 96));
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((siri::dialogengine::PatternSchemaBinary::PatternSchema *)((char *)this + 72));
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((siri::dialogengine::PatternSchemaBinary::PatternSchema *)((char *)this + 48));
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((siri::dialogengine::PatternSchemaBinary::PatternSchema *)((char *)this + 24));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

_QWORD *siri::dialogengine::PatternSchemaBinary::PatternSchema::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "siri.dialogengine.PatternSchemaBinary.PatternSchema");
}

siri::dialogengine::PatternSchemaBinary::PatternSchema *siri::dialogengine::PatternSchemaBinary::PatternSchema::New(siri::dialogengine::PatternSchemaBinary::PatternSchema *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::PatternSchema>(0);
}

siri::dialogengine::PatternSchemaBinary::PatternSchema *siri::dialogengine::PatternSchemaBinary::PatternSchema::New(siri::dialogengine::PatternSchemaBinary::PatternSchema *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::PatternSchema>(a2);
}

void siri::dialogengine::PatternSchemaBinary::PatternSchema::Clear(siri::dialogengine::PatternSchemaBinary::PatternSchema *this)
{
  uint64_t v2;
  siri::dialogengine::PatternSchemaBinary::Setting **v3;
  siri::dialogengine::PatternSchemaBinary::Setting *v4;
  std::string *v5;
  uint64_t v6;
  siri::dialogengine::PatternSchemaBinary::Group **v7;
  siri::dialogengine::PatternSchemaBinary::Group *v8;
  std::string *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  google::protobuf::internal::InternalMetadataWithArenaLite *v16;
  char v17;
  char v18;
  std::string v19[2];

  v2 = *((unsigned int *)this + 8);
  if ((v2 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v5 = google::protobuf::internal::LogMessage::operator<<(v19, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v18, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v19[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v2)
  {
    v3 = (siri::dialogengine::PatternSchemaBinary::Setting **)(*((_QWORD *)this + 5) + 8);
    do
    {
      v4 = *v3++;
      siri::dialogengine::PatternSchemaBinary::Setting::Clear(v4);
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 8) = 0;
  }
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::Parameter>::TypeHandler>((uint64_t)this + 48);
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::Parameter>::TypeHandler>((uint64_t)this + 72);
  v6 = *((unsigned int *)this + 26);
  if ((v6 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v9 = google::protobuf::internal::LogMessage::operator<<(v19, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v18, (const char **)&v9->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v19[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v6)
  {
    v7 = (siri::dialogengine::PatternSchemaBinary::Group **)(*((_QWORD *)this + 14) + 8);
    do
    {
      v8 = *v7++;
      siri::dialogengine::PatternSchemaBinary::Group::Clear(v8);
      --v6;
    }
    while (v6);
    *((_DWORD *)this + 26) = 0;
  }
  v10 = *((_DWORD *)this + 4);
  if ((v10 & 0x1F) == 0)
    goto LABEL_39;
  if ((v10 & 1) == 0)
  {
    if ((v10 & 2) == 0)
      goto LABEL_16;
LABEL_24:
    v12 = *((_QWORD *)this + 16);
    if (*(char *)(v12 + 23) < 0)
    {
      **(_BYTE **)v12 = 0;
      *(_QWORD *)(v12 + 8) = 0;
      if ((v10 & 4) != 0)
        goto LABEL_28;
    }
    else
    {
      *(_BYTE *)v12 = 0;
      *(_BYTE *)(v12 + 23) = 0;
      if ((v10 & 4) != 0)
        goto LABEL_28;
    }
LABEL_17:
    if ((v10 & 8) == 0)
      goto LABEL_18;
    goto LABEL_32;
  }
  v11 = *((_QWORD *)this + 15);
  if (*(char *)(v11 + 23) < 0)
  {
    **(_BYTE **)v11 = 0;
    *(_QWORD *)(v11 + 8) = 0;
    if ((v10 & 2) != 0)
      goto LABEL_24;
  }
  else
  {
    *(_BYTE *)v11 = 0;
    *(_BYTE *)(v11 + 23) = 0;
    if ((v10 & 2) != 0)
      goto LABEL_24;
  }
LABEL_16:
  if ((v10 & 4) == 0)
    goto LABEL_17;
LABEL_28:
  v13 = *((_QWORD *)this + 17);
  if ((*(char *)(v13 + 23) & 0x80000000) == 0)
  {
    *(_BYTE *)v13 = 0;
    *(_BYTE *)(v13 + 23) = 0;
    if ((v10 & 8) != 0)
      goto LABEL_32;
LABEL_18:
    if ((v10 & 0x10) == 0)
      goto LABEL_39;
LABEL_36:
    v15 = *((_QWORD *)this + 19);
    if (*(char *)(v15 + 23) < 0)
    {
      **(_BYTE **)v15 = 0;
      *(_QWORD *)(v15 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v15 = 0;
      *(_BYTE *)(v15 + 23) = 0;
    }
    goto LABEL_39;
  }
  **(_BYTE **)v13 = 0;
  *(_QWORD *)(v13 + 8) = 0;
  if ((v10 & 8) == 0)
    goto LABEL_18;
LABEL_32:
  v14 = *((_QWORD *)this + 18);
  if (*(char *)(v14 + 23) < 0)
  {
    **(_BYTE **)v14 = 0;
    *(_QWORD *)(v14 + 8) = 0;
    if ((v10 & 0x10) == 0)
      goto LABEL_39;
    goto LABEL_36;
  }
  *(_BYTE *)v14 = 0;
  *(_BYTE *)(v14 + 23) = 0;
  if ((v10 & 0x10) != 0)
    goto LABEL_36;
LABEL_39:
  v17 = *((_BYTE *)this + 8);
  v16 = (siri::dialogengine::PatternSchemaBinary::PatternSchema *)((char *)this + 8);
  *((_DWORD *)v16 + 2) = 0;
  if ((v17 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v16);
}

void sub_1BFC3609C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::PatternSchemaBinary::PatternSchema::IsInitialized(siri::dialogengine::PatternSchemaBinary::PatternSchema *this)
{
  return 1;
}

void siri::dialogengine::PatternSchemaBinary::PatternSchema::CheckTypeAndMergeFrom(siri::dialogengine::PatternSchemaBinary::PatternSchema *this, const google::protobuf::MessageLite *lpsrc)
{
  siri::dialogengine::PatternSchemaBinary::PatternSchema::MergeFrom(this, lpsrc);
}

uint64_t siri::dialogengine::PatternSchemaBinary::PatternSchema::ByteSizeLong(siri::dialogengine::PatternSchemaBinary::PatternSchema *this)
{
  uint64_t v2;
  uint64_t v3;
  siri::dialogengine::PatternSchemaBinary::Setting **v4;
  uint64_t v5;
  siri::dialogengine::PatternSchemaBinary::Setting *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  siri::dialogengine::PatternSchemaBinary::Parameter **v11;
  uint64_t v12;
  siri::dialogengine::PatternSchemaBinary::Parameter *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  siri::dialogengine::PatternSchemaBinary::Parameter **v18;
  uint64_t v19;
  siri::dialogengine::PatternSchemaBinary::Parameter *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  siri::dialogengine::PatternSchemaBinary::Group **v25;
  uint64_t v26;
  siri::dialogengine::PatternSchemaBinary::Group *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;

  v2 = *((int *)this + 8);
  v3 = *((_QWORD *)this + 5);
  if (v3)
    v4 = (siri::dialogengine::PatternSchemaBinary::Setting **)(v3 + 8);
  else
    v4 = 0;
  if ((_DWORD)v2)
  {
    v5 = 8 * v2;
    do
    {
      v6 = *v4++;
      v7 = siri::dialogengine::PatternSchemaBinary::Setting::ByteSizeLong(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    v2 = 0;
  }
  v8 = *((int *)this + 14);
  v9 = v2 + v8;
  v10 = *((_QWORD *)this + 8);
  if (v10)
    v11 = (siri::dialogengine::PatternSchemaBinary::Parameter **)(v10 + 8);
  else
    v11 = 0;
  if ((_DWORD)v8)
  {
    v12 = 8 * v8;
    do
    {
      v13 = *v11++;
      v14 = siri::dialogengine::PatternSchemaBinary::Parameter::ByteSizeLong(v13);
      v9 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6);
      v12 -= 8;
    }
    while (v12);
  }
  v15 = *((int *)this + 20);
  v16 = v9 + v15;
  v17 = *((_QWORD *)this + 11);
  if (v17)
    v18 = (siri::dialogengine::PatternSchemaBinary::Parameter **)(v17 + 8);
  else
    v18 = 0;
  if ((_DWORD)v15)
  {
    v19 = 8 * v15;
    do
    {
      v20 = *v18++;
      v21 = siri::dialogengine::PatternSchemaBinary::Parameter::ByteSizeLong(v20);
      v16 += v21 + ((9 * (__clz(v21 | 1) ^ 0x1F) + 73) >> 6);
      v19 -= 8;
    }
    while (v19);
  }
  v22 = *((int *)this + 26);
  v23 = v16 + v22;
  v24 = *((_QWORD *)this + 14);
  if (v24)
    v25 = (siri::dialogengine::PatternSchemaBinary::Group **)(v24 + 8);
  else
    v25 = 0;
  if ((_DWORD)v22)
  {
    v26 = 8 * v22;
    do
    {
      v27 = *v25++;
      v28 = siri::dialogengine::PatternSchemaBinary::Group::ByteSizeLong(v27);
      v23 += v28 + ((9 * (__clz(v28 | 1) ^ 0x1F) + 73) >> 6);
      v26 -= 8;
    }
    while (v26);
  }
  v29 = *((_DWORD *)this + 4);
  if ((v29 & 0x1F) == 0)
    goto LABEL_36;
  if ((v29 & 1) != 0)
  {
    v35 = *((_QWORD *)this + 15);
    v36 = *(unsigned __int8 *)(v35 + 23);
    v37 = *(_QWORD *)(v35 + 8);
    if ((v36 & 0x80u) == 0)
      v37 = v36;
    v23 += v37 + ((9 * (__clz(v37 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v29 & 2) == 0)
    {
LABEL_30:
      if ((v29 & 4) == 0)
        goto LABEL_31;
LABEL_44:
      v41 = *((_QWORD *)this + 17);
      v42 = *(unsigned __int8 *)(v41 + 23);
      v43 = *(_QWORD *)(v41 + 8);
      if ((v42 & 0x80u) == 0)
        v43 = v42;
      v23 += v43 + ((9 * (__clz(v43 | 1) ^ 0x1F) + 73) >> 6) + 1;
      if ((v29 & 8) == 0)
      {
LABEL_32:
        if ((v29 & 0x10) == 0)
          goto LABEL_36;
        goto LABEL_33;
      }
      goto LABEL_47;
    }
  }
  else if ((v29 & 2) == 0)
  {
    goto LABEL_30;
  }
  v38 = *((_QWORD *)this + 16);
  v39 = *(unsigned __int8 *)(v38 + 23);
  v40 = *(_QWORD *)(v38 + 8);
  if ((v39 & 0x80u) == 0)
    v40 = v39;
  v23 += v40 + ((9 * (__clz(v40 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v29 & 4) != 0)
    goto LABEL_44;
LABEL_31:
  if ((v29 & 8) == 0)
    goto LABEL_32;
LABEL_47:
  v44 = *((_QWORD *)this + 18);
  v45 = *(unsigned __int8 *)(v44 + 23);
  v46 = *(_QWORD *)(v44 + 8);
  if ((v45 & 0x80u) == 0)
    v46 = v45;
  v23 += v46 + ((9 * (__clz(v46 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v29 & 0x10) != 0)
  {
LABEL_33:
    v30 = *((_QWORD *)this + 19);
    v31 = *(unsigned __int8 *)(v30 + 23);
    v32 = *(_QWORD *)(v30 + 8);
    if ((v31 & 0x80u) == 0)
      v32 = v31;
    v23 += v32 + ((9 * (__clz(v32 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_36:
  v33 = *((_QWORD *)this + 1);
  if ((v33 & 1) != 0)
  {
    v47 = v33 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v47 + 23) < 0)
      v48 = *(_QWORD *)(v47 + 8);
    else
      v48 = *(unsigned __int8 *)(v47 + 23);
    v23 += v48;
  }
  *((_DWORD *)this + 5) = v23;
  return v23;
}

uint64_t siri::dialogengine::PatternSchemaBinary::PatternSchema::GetCachedSize(siri::dialogengine::PatternSchemaBinary::PatternSchema *this)
{
  return *((unsigned int *)this + 5);
}

google::protobuf::internal *siri::dialogengine::PatternSchemaBinary::PatternSchema::_InternalParse(siri::dialogengine::PatternSchemaBinary::PatternSchema *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int *v8;
  google::protobuf::internal *TagFallback;
  const char *v10;
  std::string *v11;
  std::string **v12;
  google::protobuf::internal *v13;
  google::protobuf::internal *v14;
  google::protobuf::internal *v15;
  int *v16;
  uint64_t v17;
  int v18;
  siri::dialogengine::PatternSchemaBinary::Setting *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  char *v23;
  char *SizeFallback;
  unsigned int v25;
  int v26;
  int v27;
  BOOL v28;
  int v29;
  int v30;
  unint64_t v31;
  char *v32;
  google::protobuf::internal *v33;
  int *v34;
  uint64_t v35;
  int v36;
  siri::dialogengine::PatternSchemaBinary::Parameter *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  google::protobuf::internal *v41;
  int *v42;
  uint64_t v43;
  int v44;
  siri::dialogengine::PatternSchemaBinary::Parameter *v45;
  uint64_t v46;
  uint64_t v47;
  google::protobuf::internal *v48;
  google::protobuf::internal *v49;
  int *v50;
  uint64_t v51;
  int v52;
  siri::dialogengine::PatternSchemaBinary::Group *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  char *v57;
  char *v58;
  unsigned int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  unint64_t v64;
  BOOL v65;
  std::string **v67;
  std::string **v68;
  std::string **v69;
  std::string **v70;
  std::string **v71;
  uint64_t *v72;
  google::protobuf::internal *v73;

  v5 = (unsigned int *)((char *)this + 96);
  v6 = (unsigned int *)((char *)this + 72);
  v7 = (unsigned int *)((char *)this + 48);
  v8 = (unsigned int *)((char *)this + 24);
  v70 = (std::string **)((char *)this + 144);
  v71 = (std::string **)((char *)this + 152);
  v68 = (std::string **)((char *)this + 128);
  v69 = (std::string **)((char *)this + 136);
  v67 = (std::string **)((char *)this + 120);
  v72 = (uint64_t *)((char *)this + 8);
  v73 = a2;
LABEL_2:
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v73, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v73;
    TagFallback = (google::protobuf::internal *)((char *)v73 + 1);
    LODWORD(v10) = *(unsigned __int8 *)v73;
    if ((*(char *)v73 & 0x80000000) == 0)
      goto LABEL_6;
    v10 = (const char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v73 + 2);
LABEL_6:
      v73 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v73, v10);
    v73 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    switch(v10 >> 3)
    {
      case 1u:
        if (v10 != 10)
          goto LABEL_93;
        *((_DWORD *)this + 4) |= 1u;
        v11 = (std::string *)*((_QWORD *)this + 15);
        if (v11 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_26;
        v12 = v67;
        goto LABEL_25;
      case 2u:
        if (v10 != 18)
          goto LABEL_93;
        *((_DWORD *)this + 4) |= 2u;
        v11 = (std::string *)*((_QWORD *)this + 16);
        if (v11 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_26;
        v12 = v68;
        goto LABEL_25;
      case 3u:
        if (v10 != 26)
          goto LABEL_93;
        *((_DWORD *)this + 4) |= 4u;
        v11 = (std::string *)*((_QWORD *)this + 17);
        if (v11 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_26;
        v12 = v69;
        goto LABEL_25;
      case 4u:
        if (v10 != 34)
          goto LABEL_93;
        *((_DWORD *)this + 4) |= 8u;
        v11 = (std::string *)*((_QWORD *)this + 18);
        if (v11 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_26;
        v12 = v70;
        goto LABEL_25;
      case 5u:
        if (v10 != 42)
          goto LABEL_93;
        *((_DWORD *)this + 4) |= 0x10u;
        v11 = (std::string *)*((_QWORD *)this + 19);
        if (v11 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
          goto LABEL_26;
        v12 = v71;
LABEL_25:
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v12, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v11 = *v12;
        TagFallback = v73;
LABEL_26:
        v13 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v11, (std::string::value_type *)TagFallback, (uint64_t)a3);
        goto LABEL_27;
      case 6u:
        if (v10 != 50)
          goto LABEL_93;
        v14 = (google::protobuf::internal *)((char *)TagFallback - 1);
LABEL_31:
        v15 = (google::protobuf::internal *)((char *)v14 + 1);
        v73 = v15;
        v16 = (int *)*((_QWORD *)this + 5);
        if (!v16)
        {
          v18 = *((_DWORD *)this + 9);
LABEL_36:
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v8, v18 + 1);
          v16 = (int *)*((_QWORD *)this + 5);
          v18 = *v16;
          goto LABEL_37;
        }
        v17 = *((int *)this + 8);
        v18 = *v16;
        if ((int)v17 < *v16)
        {
          *((_DWORD *)this + 8) = v17 + 1;
          v19 = *(siri::dialogengine::PatternSchemaBinary::Setting **)&v16[2 * v17 + 2];
          goto LABEL_38;
        }
        if (v18 == *((_DWORD *)this + 9))
          goto LABEL_36;
LABEL_37:
        *v16 = v18 + 1;
        v19 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Setting>(*((google::protobuf::internal::ArenaImpl **)this + 3));
        v20 = *((_QWORD *)this + 5);
        v21 = *((int *)this + 8);
        *((_DWORD *)this + 8) = v21 + 1;
        *(_QWORD *)(v20 + 8 * v21 + 8) = v19;
        v15 = v73;
LABEL_38:
        v22 = *(unsigned __int8 *)v15;
        if (*(char *)v15 < 0)
        {
          SizeFallback = google::protobuf::internal::ReadSizeFallback(v15, (const char *)*(unsigned __int8 *)v15);
          if (!SizeFallback)
            goto LABEL_98;
          v23 = SizeFallback;
          v22 = v25;
        }
        else
        {
          v23 = (char *)v15 + 1;
        }
        v26 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v23, v22);
        v27 = *((_DWORD *)a3 + 22);
        v28 = __OFSUB__(v27--, 1);
        *((_DWORD *)a3 + 22) = v27;
        if (v27 < 0 == v28)
        {
          v29 = v26;
          v14 = siri::dialogengine::PatternSchemaBinary::Setting::_InternalParse(v19, (google::protobuf::internal *)v23, a3);
          if (v14)
          {
            ++*((_DWORD *)a3 + 22);
            if (!*((_DWORD *)a3 + 20))
            {
              v30 = *((_DWORD *)a3 + 7) + v29;
              *((_DWORD *)a3 + 7) = v30;
              v31 = *((_QWORD *)a3 + 1) + (v30 & (v30 >> 31));
              *(_QWORD *)a3 = v31;
              v73 = v14;
              if (v31 <= (unint64_t)v14 || *(_BYTE *)v14 != 50)
                continue;
              goto LABEL_31;
            }
          }
        }
        goto LABEL_98;
      case 7u:
        if (v10 != 58)
          goto LABEL_93;
        v32 = (char *)TagFallback - 1;
        while (1)
        {
          v33 = (google::protobuf::internal *)(v32 + 1);
          v73 = (google::protobuf::internal *)(v32 + 1);
          v34 = (int *)*((_QWORD *)this + 8);
          if (!v34)
            break;
          v35 = *((int *)this + 14);
          v36 = *v34;
          if ((int)v35 >= *v34)
          {
            if (v36 == *((_DWORD *)this + 15))
            {
LABEL_55:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v7, v36 + 1);
              v34 = (int *)*((_QWORD *)this + 8);
              v36 = *v34;
            }
            *v34 = v36 + 1;
            v37 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Parameter>(*((google::protobuf::internal::ArenaImpl **)this + 6));
            v38 = *((_QWORD *)this + 8);
            v39 = *((int *)this + 14);
            *((_DWORD *)this + 14) = v39 + 1;
            *(_QWORD *)(v38 + 8 * v39 + 8) = v37;
            v33 = v73;
            goto LABEL_57;
          }
          *((_DWORD *)this + 14) = v35 + 1;
          v37 = *(siri::dialogengine::PatternSchemaBinary::Parameter **)&v34[2 * v35 + 2];
LABEL_57:
          v32 = google::protobuf::internal::ParseContext::ParseMessage<siri::dialogengine::PatternSchemaBinary::Parameter>(a3, v37, v33);
          v73 = (google::protobuf::internal *)v32;
          if (!v32)
            goto LABEL_98;
          if (*(_QWORD *)a3 <= (unint64_t)v32 || *v32 != 58)
            goto LABEL_2;
        }
        v36 = *((_DWORD *)this + 15);
        goto LABEL_55;
      case 8u:
        if (v10 != 66)
          goto LABEL_93;
        v40 = (char *)TagFallback - 1;
        while (1)
        {
          v41 = (google::protobuf::internal *)(v40 + 1);
          v73 = (google::protobuf::internal *)(v40 + 1);
          v42 = (int *)*((_QWORD *)this + 11);
          if (!v42)
            break;
          v43 = *((int *)this + 20);
          v44 = *v42;
          if ((int)v43 >= *v42)
          {
            if (v44 == *((_DWORD *)this + 21))
            {
LABEL_68:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v44 + 1);
              v42 = (int *)*((_QWORD *)this + 11);
              v44 = *v42;
            }
            *v42 = v44 + 1;
            v45 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Parameter>(*((google::protobuf::internal::ArenaImpl **)this + 9));
            v46 = *((_QWORD *)this + 11);
            v47 = *((int *)this + 20);
            *((_DWORD *)this + 20) = v47 + 1;
            *(_QWORD *)(v46 + 8 * v47 + 8) = v45;
            v41 = v73;
            goto LABEL_70;
          }
          *((_DWORD *)this + 20) = v43 + 1;
          v45 = *(siri::dialogengine::PatternSchemaBinary::Parameter **)&v42[2 * v43 + 2];
LABEL_70:
          v40 = google::protobuf::internal::ParseContext::ParseMessage<siri::dialogengine::PatternSchemaBinary::Parameter>(a3, v45, v41);
          v73 = (google::protobuf::internal *)v40;
          if (!v40)
            goto LABEL_98;
          if (*(_QWORD *)a3 <= (unint64_t)v40 || *v40 != 66)
            goto LABEL_2;
        }
        v44 = *((_DWORD *)this + 21);
        goto LABEL_68;
      case 9u:
        if (v10 != 74)
          goto LABEL_93;
        v48 = (google::protobuf::internal *)((char *)TagFallback - 1);
LABEL_76:
        v49 = (google::protobuf::internal *)((char *)v48 + 1);
        v73 = v49;
        v50 = (int *)*((_QWORD *)this + 14);
        if (!v50)
        {
          v52 = *((_DWORD *)this + 27);
LABEL_81:
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5, v52 + 1);
          v50 = (int *)*((_QWORD *)this + 14);
          v52 = *v50;
          goto LABEL_82;
        }
        v51 = *((int *)this + 26);
        v52 = *v50;
        if ((int)v51 < *v50)
        {
          *((_DWORD *)this + 26) = v51 + 1;
          v53 = *(siri::dialogengine::PatternSchemaBinary::Group **)&v50[2 * v51 + 2];
          goto LABEL_83;
        }
        if (v52 == *((_DWORD *)this + 27))
          goto LABEL_81;
LABEL_82:
        *v50 = v52 + 1;
        v53 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Group>(*((google::protobuf::internal::ArenaImpl **)this + 12));
        v54 = *((_QWORD *)this + 14);
        v55 = *((int *)this + 26);
        *((_DWORD *)this + 26) = v55 + 1;
        *(_QWORD *)(v54 + 8 * v55 + 8) = v53;
        v49 = v73;
LABEL_83:
        v56 = *(unsigned __int8 *)v49;
        if (*(char *)v49 < 0)
        {
          v58 = google::protobuf::internal::ReadSizeFallback(v49, (const char *)*(unsigned __int8 *)v49);
          if (!v58)
            goto LABEL_98;
          v57 = v58;
          v56 = v59;
        }
        else
        {
          v57 = (char *)v49 + 1;
        }
        v60 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v57, v56);
        v61 = *((_DWORD *)a3 + 22);
        v28 = __OFSUB__(v61--, 1);
        *((_DWORD *)a3 + 22) = v61;
        if (v61 < 0 == v28)
        {
          v62 = v60;
          v48 = siri::dialogengine::PatternSchemaBinary::Group::_InternalParse(v53, (google::protobuf::internal *)v57, a3);
          if (v48)
          {
            ++*((_DWORD *)a3 + 22);
            if (!*((_DWORD *)a3 + 20))
            {
              v63 = *((_DWORD *)a3 + 7) + v62;
              *((_DWORD *)a3 + 7) = v63;
              v64 = *((_QWORD *)a3 + 1) + (v63 & (v63 >> 31));
              *(_QWORD *)a3 = v64;
              v73 = v48;
              if (v64 <= (unint64_t)v48 || *(_BYTE *)v48 != 74)
                continue;
              goto LABEL_76;
            }
          }
        }
LABEL_98:
        TagFallback = 0;
        break;
      default:
LABEL_93:
        if ((_DWORD)v10)
          v65 = (v10 & 7) == 4;
        else
          v65 = 1;
        if (v65)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v10 - 1;
          return TagFallback;
        }
        v13 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v10, v72, TagFallback, a3);
LABEL_27:
        v73 = v13;
        if (!v13)
          goto LABEL_98;
        continue;
    }
    return TagFallback;
  }
}

unsigned __int8 *siri::dialogengine::PatternSchemaBinary::PatternSchema::InternalSerializeWithCachedSizesToArray(siri::dialogengine::PatternSchemaBinary::PatternSchema *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  char *v4;
  int v6;
  int v7;
  int v8;
  std::string *v9;
  std::string *v10;
  siri::dialogengine::PatternSchemaBinary::Setting *v11;
  unsigned int v12;
  char *v13;
  unsigned int v14;
  _BYTE *v15;
  _BYTE *v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int i;
  siri::dialogengine::PatternSchemaBinary::Parameter *v21;
  unsigned int v22;
  char *v23;
  unsigned int v24;
  _BYTE *v25;
  _BYTE *v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  int j;
  siri::dialogengine::PatternSchemaBinary::Parameter *v31;
  unsigned int v32;
  char *v33;
  unsigned int v34;
  _BYTE *v35;
  _BYTE *v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  int v40;
  std::string *v41;
  std::string *v42;
  siri::dialogengine::PatternSchemaBinary::Group *v43;
  unsigned int v44;
  char *v45;
  unsigned int v46;
  _BYTE *v47;
  _BYTE *v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  char v57;
  std::string v58[2];

  v4 = a2;
  v6 = *((_DWORD *)this + 4);
  if ((v6 & 1) != 0)
  {
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 15), a2);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_71;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((_QWORD *)this + 16), v4);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_72;
  }
LABEL_71:
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, *((_QWORD *)this + 17), v4);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
LABEL_72:
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 4, *((_QWORD *)this + 18), v4);
  if ((v6 & 0x10) != 0)
LABEL_6:
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 5, *((_QWORD *)this + 19), v4);
LABEL_7:
  v7 = *((_DWORD *)this + 8);
  if (v7)
  {
    v8 = 0;
    while ((unint64_t)v4 < *(_QWORD *)a3)
    {
      if (v8 < 0)
        goto LABEL_11;
LABEL_12:
      if (*((_DWORD *)this + 8) <= v8)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v58, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1539);
        v10 = google::protobuf::internal::LogMessage::operator<<(v58, "CHECK failed: (index) < (current_size_): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v57, (const char **)&v10->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v58[0].__r_.__value_.__l.__data_);
      }
      v11 = *(siri::dialogengine::PatternSchemaBinary::Setting **)(*((_QWORD *)this + 5) + 8 * v8 + 8);
      *v4 = 50;
      v12 = *((_DWORD *)v11 + 5);
      if (v12 > 0x7F)
      {
        v4[1] = v12 | 0x80;
        v14 = v12 >> 7;
        if (v12 >> 14)
        {
          v15 = v4 + 2;
          do
          {
            v16 = v15;
            *v15++ = v14 | 0x80;
            v17 = v14 >> 7;
            v18 = v14 >> 14;
            v14 >>= 7;
          }
          while (v18);
          v13 = v16 + 2;
          *v15 = v17;
        }
        else
        {
          v4[2] = v14;
          v13 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v12;
        v13 = v4 + 2;
      }
      v4 = (char *)siri::dialogengine::PatternSchemaBinary::Setting::InternalSerializeWithCachedSizesToArray(v11, v13, a3);
      if (++v8 == v7)
        goto LABEL_25;
    }
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_12;
LABEL_11:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v58, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v9 = google::protobuf::internal::LogMessage::operator<<(v58, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v57, (const char **)&v9->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v58[0].__r_.__value_.__l.__data_);
    goto LABEL_12;
  }
LABEL_25:
  v19 = *((_DWORD *)this + 14);
  if (v19)
  {
    for (i = 0; i != v19; ++i)
    {
      if ((unint64_t)v4 >= *(_QWORD *)a3)
        v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v21 = (siri::dialogengine::PatternSchemaBinary::Parameter *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::Parameter>::TypeHandler>((uint64_t)this + 48, i);
      *v4 = 58;
      v22 = *((_DWORD *)v21 + 5);
      if (v22 > 0x7F)
      {
        v4[1] = v22 | 0x80;
        v24 = v22 >> 7;
        if (v22 >> 14)
        {
          v25 = v4 + 2;
          do
          {
            v26 = v25;
            *v25++ = v24 | 0x80;
            v27 = v24 >> 7;
            v28 = v24 >> 14;
            v24 >>= 7;
          }
          while (v28);
          v23 = v26 + 2;
          *v25 = v27;
        }
        else
        {
          v4[2] = v24;
          v23 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v22;
        v23 = v4 + 2;
      }
      v4 = (char *)siri::dialogengine::PatternSchemaBinary::Parameter::InternalSerializeWithCachedSizesToArray(v21, v23, a3);
    }
  }
  v29 = *((_DWORD *)this + 20);
  if (v29)
  {
    for (j = 0; j != v29; ++j)
    {
      if ((unint64_t)v4 >= *(_QWORD *)a3)
        v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v31 = (siri::dialogengine::PatternSchemaBinary::Parameter *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::Parameter>::TypeHandler>((uint64_t)this + 72, j);
      *v4 = 66;
      v32 = *((_DWORD *)v31 + 5);
      if (v32 > 0x7F)
      {
        v4[1] = v32 | 0x80;
        v34 = v32 >> 7;
        if (v32 >> 14)
        {
          v35 = v4 + 2;
          do
          {
            v36 = v35;
            *v35++ = v34 | 0x80;
            v37 = v34 >> 7;
            v38 = v34 >> 14;
            v34 >>= 7;
          }
          while (v38);
          v33 = v36 + 2;
          *v35 = v37;
        }
        else
        {
          v4[2] = v34;
          v33 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v32;
        v33 = v4 + 2;
      }
      v4 = (char *)siri::dialogengine::PatternSchemaBinary::Parameter::InternalSerializeWithCachedSizesToArray(v31, v33, a3);
    }
  }
  v39 = *((_DWORD *)this + 26);
  if (v39)
  {
    v40 = 0;
    while ((unint64_t)v4 < *(_QWORD *)a3)
    {
      if (v40 < 0)
        goto LABEL_53;
LABEL_54:
      if (*((_DWORD *)this + 26) <= v40)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v58, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1539);
        v42 = google::protobuf::internal::LogMessage::operator<<(v58, "CHECK failed: (index) < (current_size_): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v57, (const char **)&v42->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v58[0].__r_.__value_.__l.__data_);
      }
      v43 = *(siri::dialogengine::PatternSchemaBinary::Group **)(*((_QWORD *)this + 14) + 8 * v40 + 8);
      *v4 = 74;
      v44 = *((_DWORD *)v43 + 5);
      if (v44 > 0x7F)
      {
        v4[1] = v44 | 0x80;
        v46 = v44 >> 7;
        if (v44 >> 14)
        {
          v47 = v4 + 2;
          do
          {
            v48 = v47;
            *v47++ = v46 | 0x80;
            v49 = v46 >> 7;
            v50 = v46 >> 14;
            v46 >>= 7;
          }
          while (v50);
          v45 = v48 + 2;
          *v47 = v49;
        }
        else
        {
          v4[2] = v46;
          v45 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v44;
        v45 = v4 + 2;
      }
      v4 = (char *)siri::dialogengine::PatternSchemaBinary::Group::InternalSerializeWithCachedSizesToArray(v43, v45, a3);
      if (++v40 == v39)
        goto LABEL_67;
    }
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    if ((v40 & 0x80000000) == 0)
      goto LABEL_54;
LABEL_53:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v58, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v41 = google::protobuf::internal::LogMessage::operator<<(v58, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v57, (const char **)&v41->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v58[0].__r_.__value_.__l.__data_);
    goto LABEL_54;
  }
LABEL_67:
  v51 = *((_QWORD *)this + 1);
  if ((v51 & 1) == 0)
    return (unsigned __int8 *)v4;
  v53 = v51 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v53 + 23) < 0)
  {
    v55 = *(void **)v53;
    v54 = *(_QWORD *)(v53 + 8);
  }
  else
  {
    LODWORD(v54) = *(unsigned __int8 *)(v53 + 23);
    v55 = (void *)v53;
  }
  if (*(_QWORD *)a3 - (_QWORD)v4 >= (int)v54)
  {
    v56 = (int)v54;
    memcpy(v4, v55, (int)v54);
    v4 += v56;
    return (unsigned __int8 *)v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v55, v54, (unsigned __int8 *)v4);
}

void sub_1BFC37040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::Parameter>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1539);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_1BFC3712C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

char *google::protobuf::internal::ParseContext::ParseMessage<siri::dialogengine::PatternSchemaBinary::Parameter>(google::protobuf::internal::EpsCopyInputStream *this, siri::dialogengine::PatternSchemaBinary::Parameter *a2, google::protobuf::internal *a3)
{
  int v6;
  const char *v7;
  char *v8;
  char *result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = *(char *)a3;
  v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result)
      return result;
    v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    v8 = (char *)a3 + 1;
  }
  v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  v12 = *((_DWORD *)this + 22);
  v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = (char *)siri::dialogengine::PatternSchemaBinary::Parameter::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result)
    return result;
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20))
    return 0;
  v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(_QWORD *)this = *((_QWORD *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

void siri::dialogengine::PatternSchemaBinary::PatternSchema::MergeFrom(siri::dialogengine::PatternSchemaBinary::PatternSchema *this, const siri::dialogengine::PatternSchemaBinary::PatternSchema *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  std::string *v7;
  const std::string *v8;
  std::string *v9;
  const std::string *v10;
  std::string *v11;
  const std::string *v12;
  std::string *v13;
  const std::string *v14;
  std::string *v15;
  std::string **v16;
  std::string *v17;
  const std::string *v18;
  char v19;
  std::string v20[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.cc", 702);
    v4 = google::protobuf::internal::LogMessage::operator<<(v20, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v19, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v20[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::Setting>::TypeHandler>((int **)this + 3, (uint64_t)a2 + 24);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::Parameter>::TypeHandler>((int **)this + 6, (uint64_t)a2 + 48);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::Parameter>::TypeHandler>((int **)this + 9, (uint64_t)a2 + 72);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::Group>::TypeHandler>((int **)this + 12, (uint64_t)a2 + 96);
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 0x1F) != 0)
  {
    if ((v6 & 1) != 0)
    {
      v7 = (std::string *)*((_QWORD *)this + 15);
      *((_DWORD *)this + 4) |= 1u;
      v8 = (const std::string *)*((_QWORD *)a2 + 15);
      if (v7 != v8)
      {
        if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 15, (uint64_t)v8);
          if ((v6 & 2) == 0)
            goto LABEL_17;
LABEL_11:
          v9 = (std::string *)*((_QWORD *)this + 16);
          *((_DWORD *)this + 4) |= 2u;
          v10 = (const std::string *)*((_QWORD *)a2 + 16);
          if (v9 != v10)
          {
            if (v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 16, (uint64_t)v10);
            else
              std::string::operator=(v9, v10);
          }
LABEL_17:
          if ((v6 & 4) != 0)
          {
            v11 = (std::string *)*((_QWORD *)this + 17);
            *((_DWORD *)this + 4) |= 4u;
            v12 = (const std::string *)*((_QWORD *)a2 + 17);
            if (v11 != v12)
            {
              if (v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
              {
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 17, (uint64_t)v12);
                if ((v6 & 8) != 0)
                {
LABEL_22:
                  v13 = (std::string *)*((_QWORD *)this + 18);
                  *((_DWORD *)this + 4) |= 8u;
                  v14 = (const std::string *)*((_QWORD *)a2 + 18);
                  if (v13 != v14)
                  {
                    if (v13 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 18, (uint64_t)v14);
                    else
                      std::string::operator=(v13, v14);
                  }
                }
LABEL_28:
                if ((v6 & 0x10) != 0)
                {
                  v17 = (std::string *)*((_QWORD *)this + 19);
                  v16 = (std::string **)((char *)this + 152);
                  v15 = v17;
                  *((_DWORD *)v16 - 34) |= 0x10u;
                  v18 = (const std::string *)*((_QWORD *)a2 + 19);
                  if (v17 != v18)
                  {
                    if (v15 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
                      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v16, (uint64_t)v18);
                    else
                      std::string::operator=(v15, v18);
                  }
                }
                return;
              }
              std::string::operator=(v11, v12);
            }
          }
          if ((v6 & 8) != 0)
            goto LABEL_22;
          goto LABEL_28;
        }
        std::string::operator=(v7, v8);
      }
    }
    if ((v6 & 2) == 0)
      goto LABEL_17;
    goto LABEL_11;
  }
}

void sub_1BFC3742C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::Setting>::TypeHandler>(int **this, uint64_t a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  siri::dialogengine::PatternSchemaBinary::Setting **v13;
  siri::dialogengine::PatternSchemaBinary::Setting **v14;
  siri::dialogengine::PatternSchemaBinary::Setting *v15;
  siri::dialogengine::PatternSchemaBinary::Setting *v16;
  siri::dialogengine::PatternSchemaBinary::Setting *v17;
  google::protobuf::internal::ArenaImpl *v18;
  int v19;
  uint64_t v20;
  siri::dialogengine::PatternSchemaBinary::Setting **v21;
  siri::dialogengine::PatternSchemaBinary::Setting **v22;
  siri::dialogengine::PatternSchemaBinary::Setting *v23;
  siri::dialogengine::PatternSchemaBinary::Setting *v24;
  int v25;
  int *v26;
  char v27;
  std::string v28[2];

  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    v9 = *this[2];
    v10 = *((int *)this + 2);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (siri::dialogengine::PatternSchemaBinary::Setting **)(v6 + 8);
      v14 = (siri::dialogengine::PatternSchemaBinary::Setting **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<siri::dialogengine::PatternSchemaBinary::Setting>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (siri::dialogengine::PatternSchemaBinary::Setting **)((char *)v8 + v20);
      v22 = (siri::dialogengine::PatternSchemaBinary::Setting **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Setting>(v18);
        google::protobuf::internal::GenericTypeHandler<siri::dialogengine::PatternSchemaBinary::Setting>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25)
      *v26 = v25;
  }
}

void sub_1BFC37598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::Parameter>::TypeHandler>(int **this, uint64_t a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  siri::dialogengine::PatternSchemaBinary::Parameter **v13;
  siri::dialogengine::PatternSchemaBinary::Parameter **v14;
  siri::dialogengine::PatternSchemaBinary::Parameter *v15;
  siri::dialogengine::PatternSchemaBinary::Parameter *v16;
  siri::dialogengine::PatternSchemaBinary::Parameter *v17;
  google::protobuf::internal::ArenaImpl *v18;
  int v19;
  uint64_t v20;
  siri::dialogengine::PatternSchemaBinary::Parameter **v21;
  siri::dialogengine::PatternSchemaBinary::Parameter **v22;
  siri::dialogengine::PatternSchemaBinary::Parameter *v23;
  siri::dialogengine::PatternSchemaBinary::Parameter *v24;
  int v25;
  int *v26;
  char v27;
  std::string v28[2];

  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    v9 = *this[2];
    v10 = *((int *)this + 2);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (siri::dialogengine::PatternSchemaBinary::Parameter **)(v6 + 8);
      v14 = (siri::dialogengine::PatternSchemaBinary::Parameter **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<siri::dialogengine::PatternSchemaBinary::Parameter>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (siri::dialogengine::PatternSchemaBinary::Parameter **)((char *)v8 + v20);
      v22 = (siri::dialogengine::PatternSchemaBinary::Parameter **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Parameter>(v18);
        google::protobuf::internal::GenericTypeHandler<siri::dialogengine::PatternSchemaBinary::Parameter>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25)
      *v26 = v25;
  }
}

void sub_1BFC37704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::Group>::TypeHandler>(int **this, uint64_t a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  siri::dialogengine::PatternSchemaBinary::Group **v13;
  siri::dialogengine::PatternSchemaBinary::Group **v14;
  siri::dialogengine::PatternSchemaBinary::Group *v15;
  siri::dialogengine::PatternSchemaBinary::Group *v16;
  siri::dialogengine::PatternSchemaBinary::Group *v17;
  google::protobuf::internal::ArenaImpl *v18;
  int v19;
  uint64_t v20;
  siri::dialogengine::PatternSchemaBinary::Group **v21;
  siri::dialogengine::PatternSchemaBinary::Group **v22;
  siri::dialogengine::PatternSchemaBinary::Group *v23;
  siri::dialogengine::PatternSchemaBinary::Group *v24;
  int v25;
  int *v26;
  char v27;
  std::string v28[2];

  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    v9 = *this[2];
    v10 = *((int *)this + 2);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (siri::dialogengine::PatternSchemaBinary::Group **)(v6 + 8);
      v14 = (siri::dialogengine::PatternSchemaBinary::Group **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<siri::dialogengine::PatternSchemaBinary::Group>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (siri::dialogengine::PatternSchemaBinary::Group **)((char *)v8 + v20);
      v22 = (siri::dialogengine::PatternSchemaBinary::Group **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::Group>(v18);
        google::protobuf::internal::GenericTypeHandler<siri::dialogengine::PatternSchemaBinary::Group>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25)
      *v26 = v25;
  }
}

void sub_1BFC37870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<siri::dialogengine::PatternSchemaBinary::Group>::Merge(siri::dialogengine::PatternSchemaBinary::Group *a1, siri::dialogengine::PatternSchemaBinary::Group *this)
{
  siri::dialogengine::PatternSchemaBinary::Group::MergeFrom(this, a1);
}

void google::protobuf::internal::GenericTypeHandler<siri::dialogengine::PatternSchemaBinary::Parameter>::Merge(siri::dialogengine::PatternSchemaBinary::Parameter *a1, siri::dialogengine::PatternSchemaBinary::Parameter *this)
{
  siri::dialogengine::PatternSchemaBinary::Parameter::MergeFrom(this, a1);
}

void google::protobuf::internal::GenericTypeHandler<siri::dialogengine::PatternSchemaBinary::Setting>::Merge(siri::dialogengine::PatternSchemaBinary::Setting *a1, siri::dialogengine::PatternSchemaBinary::Setting *this)
{
  siri::dialogengine::PatternSchemaBinary::Setting::MergeFrom(this, a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::Parameter>::TypeHandler>(uint64_t a1)
{
  uint64_t v1;
  siri::dialogengine::PatternSchemaBinary::Parameter **v3;
  siri::dialogengine::PatternSchemaBinary::Parameter *v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v1)
  {
    v3 = (siri::dialogengine::PatternSchemaBinary::Parameter **)(*(_QWORD *)(a1 + 16) + 8);
    do
    {
      v4 = *v3++;
      siri::dialogengine::PatternSchemaBinary::Parameter::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_1BFC3794C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

siri::dialogengine::PatternSchemaBinary::PatternSchema *google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::PatternSchema>(google::protobuf::internal::ArenaImpl *this)
{
  siri::dialogengine::PatternSchemaBinary::PatternSchema *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (siri::dialogengine::PatternSchemaBinary::PatternSchema *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0xA0uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<siri::dialogengine::PatternSchemaBinary::PatternSchema>);
    siri::dialogengine::PatternSchemaBinary::PatternSchema::PatternSchema(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (siri::dialogengine::PatternSchemaBinary::PatternSchema *)operator new();
    siri::dialogengine::PatternSchemaBinary::PatternSchema::PatternSchema(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFC379E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C400DA44CAFLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<siri::dialogengine::PatternSchemaBinary::PatternSchema>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

siri::dialogengine::PatternSchemaBinary::PatternSchema *siri::dialogengine::PatternSchemaBinary::PatternSchema::PatternSchema(siri::dialogengine::PatternSchemaBinary::PatternSchema *this, const siri::dialogengine::PatternSchemaBinary::PatternSchema *a2)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  *(_QWORD *)this = &off_1E7938368;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 11) = 0;
  *(_QWORD *)((char *)this + 28) = 0;
  *(_QWORD *)((char *)this + 36) = 0;
  *(_QWORD *)((char *)this + 20) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::Setting>::TypeHandler>((int **)this + 3, (uint64_t)a2 + 24);
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::Parameter>::TypeHandler>((int **)this + 6, (uint64_t)a2 + 48);
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::Parameter>::TypeHandler>((int **)this + 9, (uint64_t)a2 + 72);
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::Group>::TypeHandler>((int **)this + 12, (uint64_t)a2 + 96);
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v5 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 15) = &google::protobuf::internal::fixed_address_empty_string;
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 1) != 0)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 15);
    if (v7 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 15, (uint64_t)v7);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 16) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 2) != 0)
  {
    v8 = (uint64_t *)*((_QWORD *)a2 + 16);
    if (v8 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 16, (uint64_t)v8);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 17) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 4) != 0)
  {
    v9 = (uint64_t *)*((_QWORD *)a2 + 17);
    if (v9 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 17, (uint64_t)v9);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 18) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 8) != 0)
  {
    v10 = (uint64_t *)*((_QWORD *)a2 + 18);
    if (v10 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 18, (uint64_t)v10);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 19) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 0x10) != 0)
  {
    v11 = (uint64_t *)*((_QWORD *)a2 + 19);
    if (v11 != &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 19, (uint64_t)v11);
  }
  return this;
}

void sub_1BFC37D18(_Unwind_Exception *a1)
{
  uint64_t *v1;
  google::protobuf::internal::RepeatedPtrFieldBase *v2;
  google::protobuf::internal::RepeatedPtrFieldBase *v3;
  google::protobuf::internal::RepeatedPtrFieldBase *v4;
  google::protobuf::internal::ArenaImpl **v5;

  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(v5);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v4);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v3);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::PatternSchemaBinary::PatternSchema::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *siri::dialogengine::PatternSchemaBinary::PatternSchema::default_instance(siri::dialogengine::PatternSchemaBinary::PatternSchema *this)
{
  if (atomic_load(scc_info_PatternSchema_PatternSchemaBinary_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_PatternSchema_PatternSchemaBinary_2eproto);
  return &siri::dialogengine::PatternSchemaBinary::_PatternSchema_default_instance_;
}

void siri::dialogengine::PatternSchemaBinary::PatternSchema::CopyFrom(siri::dialogengine::PatternSchemaBinary::PatternSchema *this, const siri::dialogengine::PatternSchemaBinary::PatternSchema *a2)
{
  if (a2 != this)
  {
    siri::dialogengine::PatternSchemaBinary::PatternSchema::Clear(this);
    siri::dialogengine::PatternSchemaBinary::PatternSchema::MergeFrom(this, a2);
  }
}

__n128 siri::dialogengine::PatternSchemaBinary::PatternSchema::InternalSwap(siri::dialogengine::PatternSchemaBinary::PatternSchema *this, siri::dialogengine::PatternSchemaBinary::PatternSchema *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  __n128 result;
  uint64_t *v14;
  uint64_t **v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t **v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t **v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  std::string **v34;
  std::string *v35;
  uint64_t *v36;
  std::string **v37;
  std::string *v38;
  std::string::size_type v39;
  std::string::size_type v40;
  unint64_t v41;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v41;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
      goto LABEL_40;
    }
LABEL_5:
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 1) != 0)
    {
LABEL_6:
      v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
      v9 = *(_QWORD *)(v8 + 16);
      v10 = *(_OWORD *)v8;
      v11 = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v8 = *(_OWORD *)v7;
      *(_QWORD *)(v8 + 16) = v11;
      *(_OWORD *)v7 = v10;
      *(_QWORD *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_40:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if ((v6 & 1) != 0)
    goto LABEL_5;
LABEL_8:
  v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((siri::dialogengine::PatternSchemaBinary::PatternSchema *)((char *)this + 24), (siri::dialogengine::PatternSchemaBinary::PatternSchema *)((char *)a2 + 24));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((siri::dialogengine::PatternSchemaBinary::PatternSchema *)((char *)this + 48), (siri::dialogengine::PatternSchemaBinary::PatternSchema *)((char *)a2 + 48));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((siri::dialogengine::PatternSchemaBinary::PatternSchema *)((char *)this + 72), (siri::dialogengine::PatternSchemaBinary::PatternSchema *)((char *)a2 + 72));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((siri::dialogengine::PatternSchemaBinary::PatternSchema *)((char *)this + 96), (siri::dialogengine::PatternSchemaBinary::PatternSchema *)((char *)a2 + 96));
  v14 = (uint64_t *)*((_QWORD *)this + 15);
  v15 = (uint64_t **)((char *)a2 + 120);
  if (v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v15 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_14;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 15, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v14 = (uint64_t *)*((_QWORD *)this + 15);
  }
  v16 = *v15;
  if (*v15 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 15, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v16 = *v15;
  }
  v17 = v14[2];
  result = *(__n128 *)v14;
  v18 = v16[2];
  *(_OWORD *)v14 = *(_OWORD *)v16;
  v14[2] = v18;
  *(__n128 *)v16 = result;
  v16[2] = v17;
LABEL_14:
  v19 = (uint64_t *)*((_QWORD *)this + 16);
  v20 = (uint64_t **)((char *)a2 + 128);
  if (v19 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_20;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 16, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v19 = (uint64_t *)*((_QWORD *)this + 16);
  }
  v21 = *v20;
  if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 16, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v21 = *v20;
  }
  v22 = v19[2];
  result = *(__n128 *)v19;
  v23 = v21[2];
  *(_OWORD *)v19 = *(_OWORD *)v21;
  v19[2] = v23;
  *(__n128 *)v21 = result;
  v21[2] = v22;
LABEL_20:
  v24 = (uint64_t *)*((_QWORD *)this + 17);
  v25 = (uint64_t **)((char *)a2 + 136);
  if (v24 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v25 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_26;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 17, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v24 = (uint64_t *)*((_QWORD *)this + 17);
  }
  v26 = *v25;
  if (*v25 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 17, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v26 = *v25;
  }
  v27 = v24[2];
  result = *(__n128 *)v24;
  v28 = v26[2];
  *(_OWORD *)v24 = *(_OWORD *)v26;
  v24[2] = v28;
  *(__n128 *)v26 = result;
  v26[2] = v27;
LABEL_26:
  v29 = (uint64_t *)*((_QWORD *)this + 18);
  v30 = (uint64_t **)((char *)a2 + 144);
  if (v29 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v30 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_32;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 18, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v29 = (uint64_t *)*((_QWORD *)this + 18);
  }
  v31 = *v30;
  if (*v30 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 18, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v31 = *v30;
  }
  v32 = v29[2];
  result = *(__n128 *)v29;
  v33 = v31[2];
  *(_OWORD *)v29 = *(_OWORD *)v31;
  v29[2] = v33;
  *(__n128 *)v31 = result;
  v31[2] = v32;
LABEL_32:
  v36 = (uint64_t *)*((_QWORD *)this + 19);
  v34 = (std::string **)((char *)this + 152);
  v35 = (std::string *)v36;
  v37 = (std::string **)((char *)a2 + 152);
  if (v36 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v37 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      return result;
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v34, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v35 = *v34;
  }
  v38 = *v37;
  if (*v37 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v37, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v38 = *v37;
  }
  v39 = v35->__r_.__value_.__r.__words[2];
  result = *(__n128 *)&v35->__r_.__value_.__l.__data_;
  v40 = v38->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35->__r_.__value_.__l.__data_ = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  v35->__r_.__value_.__r.__words[2] = v40;
  *(__n128 *)&v38->__r_.__value_.__l.__data_ = result;
  v38->__r_.__value_.__r.__words[2] = v39;
  return result;
}

siri::dialogengine::PatternSchemaBinary::Setting *siri::dialogengine::PatternSchemaBinary::Setting::Setting(siri::dialogengine::PatternSchemaBinary::Setting *this, const siri::dialogengine::PatternSchemaBinary::Setting *a2)
{
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;

  *(_QWORD *)this = &off_1E79383F8;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 5) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_DWORD *)a2 + 4);
  if ((v5 & 1) != 0)
  {
    v6 = (uint64_t *)*((_QWORD *)a2 + 3);
    if (v6 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, (uint64_t)v6);
      v5 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 4) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v5 & 2) != 0)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 4);
    if (v7 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 4, (uint64_t)v7);
      v5 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v5 & 4) != 0)
  {
    v8 = (uint64_t *)*((_QWORD *)a2 + 5);
    if (v8 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 5, (uint64_t)v8);
      v5 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v5 & 8) != 0)
  {
    v9 = (uint64_t *)*((_QWORD *)a2 + 6);
    if (v9 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, (uint64_t)v9);
      v5 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 7) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v5 & 0x10) != 0)
  {
    v10 = (uint64_t *)*((_QWORD *)a2 + 7);
    if (v10 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 7, (uint64_t)v10);
      v5 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 8) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v5 & 0x20) != 0)
  {
    v11 = (uint64_t *)*((_QWORD *)a2 + 8);
    if (v11 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 8, (uint64_t)v11);
      v5 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 9) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v5 & 0x40) != 0)
  {
    v12 = (uint64_t *)*((_QWORD *)a2 + 9);
    if (v12 != &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 9, (uint64_t)v12);
  }
  return this;
}

void sub_1BFC382AC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::PatternSchemaBinary::Setting::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *siri::dialogengine::PatternSchemaBinary::Setting::default_instance(siri::dialogengine::PatternSchemaBinary::Setting *this)
{
  if (atomic_load(scc_info_Setting_PatternSchemaBinary_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Setting_PatternSchemaBinary_2eproto);
  return &siri::dialogengine::PatternSchemaBinary::_Setting_default_instance_;
}

void siri::dialogengine::PatternSchemaBinary::Setting::CopyFrom(siri::dialogengine::PatternSchemaBinary::Setting *this, const siri::dialogengine::PatternSchemaBinary::Setting *a2)
{
  if (a2 != this)
  {
    siri::dialogengine::PatternSchemaBinary::Setting::Clear(this);
    siri::dialogengine::PatternSchemaBinary::Setting::MergeFrom(this, a2);
  }
}

__n128 siri::dialogengine::PatternSchemaBinary::Setting::InternalSwap(siri::dialogengine::PatternSchemaBinary::Setting *this, siri::dialogengine::PatternSchemaBinary::Setting *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  __n128 *v8;
  unint64_t v9;
  __n128 result;
  unint64_t v11;
  uint64_t *v12;
  int v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t **v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t **v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t **v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t **v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  std::string **v43;
  std::string *v44;
  uint64_t *v45;
  std::string **v46;
  std::string *v47;
  std::string::size_type v48;
  std::string::size_type v49;
  unint64_t v50;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v50;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
      goto LABEL_52;
    }
LABEL_5:
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 1) != 0)
    {
LABEL_6:
      v8 = (__n128 *)(v4 & 0xFFFFFFFFFFFFFFFELL);
LABEL_7:
      v9 = v8[1].n128_u64[0];
      result = *v8;
      v11 = *(_QWORD *)(v7 + 16);
      *v8 = *(__n128 *)v7;
      v8[1].n128_u64[0] = v11;
      *(__n128 *)v7 = result;
      *(_QWORD *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_52:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if ((v6 & 1) != 0)
    goto LABEL_5;
LABEL_8:
  v12 = (uint64_t *)*((_QWORD *)this + 3);
  v13 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v13;
  v14 = (uint64_t **)((char *)a2 + 24);
  if (v12 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_14;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v12 = (uint64_t *)*((_QWORD *)this + 3);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v12[2];
  result = *(__n128 *)v12;
  v17 = v15[2];
  *(_OWORD *)v12 = *(_OWORD *)v15;
  v12[2] = v17;
  *(__n128 *)v15 = result;
  v15[2] = v16;
LABEL_14:
  v18 = (uint64_t *)*((_QWORD *)this + 4);
  v19 = (uint64_t **)((char *)a2 + 32);
  if (v18 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v19 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_20;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 4, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v18 = (uint64_t *)*((_QWORD *)this + 4);
  }
  v20 = *v19;
  if (*v19 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 4, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v20 = *v19;
  }
  v21 = v18[2];
  result = *(__n128 *)v18;
  v22 = v20[2];
  *(_OWORD *)v18 = *(_OWORD *)v20;
  v18[2] = v22;
  *(__n128 *)v20 = result;
  v20[2] = v21;
LABEL_20:
  v23 = (uint64_t *)*((_QWORD *)this + 5);
  v24 = (uint64_t **)((char *)a2 + 40);
  if (v23 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v24 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_26;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 5, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v23 = (uint64_t *)*((_QWORD *)this + 5);
  }
  v25 = *v24;
  if (*v24 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 5, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v25 = *v24;
  }
  v26 = v23[2];
  result = *(__n128 *)v23;
  v27 = v25[2];
  *(_OWORD *)v23 = *(_OWORD *)v25;
  v23[2] = v27;
  *(__n128 *)v25 = result;
  v25[2] = v26;
LABEL_26:
  v28 = (uint64_t *)*((_QWORD *)this + 6);
  v29 = (uint64_t **)((char *)a2 + 48);
  if (v28 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v29 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_32;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 6, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v28 = (uint64_t *)*((_QWORD *)this + 6);
  }
  v30 = *v29;
  if (*v29 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 6, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v30 = *v29;
  }
  v31 = v28[2];
  result = *(__n128 *)v28;
  v32 = v30[2];
  *(_OWORD *)v28 = *(_OWORD *)v30;
  v28[2] = v32;
  *(__n128 *)v30 = result;
  v30[2] = v31;
LABEL_32:
  v33 = (uint64_t *)*((_QWORD *)this + 7);
  v34 = (uint64_t **)((char *)a2 + 56);
  if (v33 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v34 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_38;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 7, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v33 = (uint64_t *)*((_QWORD *)this + 7);
  }
  v35 = *v34;
  if (*v34 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 7, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v35 = *v34;
  }
  v36 = v33[2];
  result = *(__n128 *)v33;
  v37 = v35[2];
  *(_OWORD *)v33 = *(_OWORD *)v35;
  v33[2] = v37;
  *(__n128 *)v35 = result;
  v35[2] = v36;
LABEL_38:
  v38 = (uint64_t *)*((_QWORD *)this + 8);
  v39 = (uint64_t **)((char *)a2 + 64);
  if (v38 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v39 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_44;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 8, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v38 = (uint64_t *)*((_QWORD *)this + 8);
  }
  v40 = *v39;
  if (*v39 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 8, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v40 = *v39;
  }
  v41 = v38[2];
  result = *(__n128 *)v38;
  v42 = v40[2];
  *(_OWORD *)v38 = *(_OWORD *)v40;
  v38[2] = v42;
  *(__n128 *)v40 = result;
  v40[2] = v41;
LABEL_44:
  v45 = (uint64_t *)*((_QWORD *)this + 9);
  v43 = (std::string **)((char *)this + 72);
  v44 = (std::string *)v45;
  v46 = (std::string **)((char *)a2 + 72);
  if (v45 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v46 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      return result;
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v43, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v44 = *v43;
  }
  v47 = *v46;
  if (*v46 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v46, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v47 = *v46;
  }
  v48 = v44->__r_.__value_.__r.__words[2];
  result = *(__n128 *)&v44->__r_.__value_.__l.__data_;
  v49 = v47->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44->__r_.__value_.__l.__data_ = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
  v44->__r_.__value_.__r.__words[2] = v49;
  *(__n128 *)&v47->__r_.__value_.__l.__data_ = result;
  v47->__r_.__value_.__r.__words[2] = v48;
  return result;
}

siri::dialogengine::PatternSchemaBinary::Parameter *siri::dialogengine::PatternSchemaBinary::Parameter::Parameter(siri::dialogengine::PatternSchemaBinary::Parameter *this, const siri::dialogengine::PatternSchemaBinary::Parameter *a2)
{
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;

  *(_QWORD *)this = &off_1E7938488;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 5) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_DWORD *)a2 + 4);
  if ((v5 & 1) != 0)
  {
    v6 = (uint64_t *)*((_QWORD *)a2 + 3);
    if (v6 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, (uint64_t)v6);
      v5 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 4) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v5 & 2) != 0)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 4);
    if (v7 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 4, (uint64_t)v7);
      v5 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v5 & 4) != 0)
  {
    v8 = (uint64_t *)*((_QWORD *)a2 + 5);
    if (v8 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 5, (uint64_t)v8);
      v5 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v5 & 8) != 0)
  {
    v9 = (uint64_t *)*((_QWORD *)a2 + 6);
    if (v9 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, (uint64_t)v9);
      v5 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 7) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v5 & 0x10) != 0)
  {
    v10 = (uint64_t *)*((_QWORD *)a2 + 7);
    if (v10 != &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 7, (uint64_t)v10);
  }
  return this;
}

void sub_1BFC38868(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::PatternSchemaBinary::Parameter::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *siri::dialogengine::PatternSchemaBinary::Parameter::default_instance(siri::dialogengine::PatternSchemaBinary::Parameter *this)
{
  if (atomic_load(scc_info_Parameter_PatternSchemaBinary_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Parameter_PatternSchemaBinary_2eproto);
  return &siri::dialogengine::PatternSchemaBinary::_Parameter_default_instance_;
}

void siri::dialogengine::PatternSchemaBinary::Parameter::CopyFrom(siri::dialogengine::PatternSchemaBinary::Parameter *this, const siri::dialogengine::PatternSchemaBinary::Parameter *a2)
{
  if (a2 != this)
  {
    siri::dialogengine::PatternSchemaBinary::Parameter::Clear(this);
    siri::dialogengine::PatternSchemaBinary::Parameter::MergeFrom(this, a2);
  }
}

__n128 siri::dialogengine::PatternSchemaBinary::Parameter::InternalSwap(siri::dialogengine::PatternSchemaBinary::Parameter *this, siri::dialogengine::PatternSchemaBinary::Parameter *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  __n128 *v8;
  unint64_t v9;
  __n128 result;
  unint64_t v11;
  uint64_t *v12;
  int v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t **v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t **v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  std::string **v33;
  std::string *v34;
  uint64_t *v35;
  std::string **v36;
  std::string *v37;
  std::string::size_type v38;
  std::string::size_type v39;
  unint64_t v40;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v40;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
      goto LABEL_40;
    }
LABEL_5:
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 1) != 0)
    {
LABEL_6:
      v8 = (__n128 *)(v4 & 0xFFFFFFFFFFFFFFFELL);
LABEL_7:
      v9 = v8[1].n128_u64[0];
      result = *v8;
      v11 = *(_QWORD *)(v7 + 16);
      *v8 = *(__n128 *)v7;
      v8[1].n128_u64[0] = v11;
      *(__n128 *)v7 = result;
      *(_QWORD *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_40:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if ((v6 & 1) != 0)
    goto LABEL_5;
LABEL_8:
  v12 = (uint64_t *)*((_QWORD *)this + 3);
  v13 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v13;
  v14 = (uint64_t **)((char *)a2 + 24);
  if (v12 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_14;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v12 = (uint64_t *)*((_QWORD *)this + 3);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v12[2];
  result = *(__n128 *)v12;
  v17 = v15[2];
  *(_OWORD *)v12 = *(_OWORD *)v15;
  v12[2] = v17;
  *(__n128 *)v15 = result;
  v15[2] = v16;
LABEL_14:
  v18 = (uint64_t *)*((_QWORD *)this + 4);
  v19 = (uint64_t **)((char *)a2 + 32);
  if (v18 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v19 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_20;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 4, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v18 = (uint64_t *)*((_QWORD *)this + 4);
  }
  v20 = *v19;
  if (*v19 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 4, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v20 = *v19;
  }
  v21 = v18[2];
  result = *(__n128 *)v18;
  v22 = v20[2];
  *(_OWORD *)v18 = *(_OWORD *)v20;
  v18[2] = v22;
  *(__n128 *)v20 = result;
  v20[2] = v21;
LABEL_20:
  v23 = (uint64_t *)*((_QWORD *)this + 5);
  v24 = (uint64_t **)((char *)a2 + 40);
  if (v23 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v24 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_26;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 5, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v23 = (uint64_t *)*((_QWORD *)this + 5);
  }
  v25 = *v24;
  if (*v24 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 5, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v25 = *v24;
  }
  v26 = v23[2];
  result = *(__n128 *)v23;
  v27 = v25[2];
  *(_OWORD *)v23 = *(_OWORD *)v25;
  v23[2] = v27;
  *(__n128 *)v25 = result;
  v25[2] = v26;
LABEL_26:
  v28 = (uint64_t *)*((_QWORD *)this + 6);
  v29 = (uint64_t **)((char *)a2 + 48);
  if (v28 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v29 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_32;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 6, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v28 = (uint64_t *)*((_QWORD *)this + 6);
  }
  v30 = *v29;
  if (*v29 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 6, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v30 = *v29;
  }
  v31 = v28[2];
  result = *(__n128 *)v28;
  v32 = v30[2];
  *(_OWORD *)v28 = *(_OWORD *)v30;
  v28[2] = v32;
  *(__n128 *)v30 = result;
  v30[2] = v31;
LABEL_32:
  v35 = (uint64_t *)*((_QWORD *)this + 7);
  v33 = (std::string **)((char *)this + 56);
  v34 = (std::string *)v35;
  v36 = (std::string **)((char *)a2 + 56);
  if (v35 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v36 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      return result;
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v33, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v34 = *v33;
  }
  v37 = *v36;
  if (*v36 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v36, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v37 = *v36;
  }
  v38 = v34->__r_.__value_.__r.__words[2];
  result = *(__n128 *)&v34->__r_.__value_.__l.__data_;
  v39 = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34->__r_.__value_.__l.__data_ = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v34->__r_.__value_.__r.__words[2] = v39;
  *(__n128 *)&v37->__r_.__value_.__l.__data_ = result;
  v37->__r_.__value_.__r.__words[2] = v38;
  return result;
}

void siri::dialogengine::PatternSchemaBinary::Group::InitAsDefaultInstance(siri::dialogengine::PatternSchemaBinary::Group *this)
{
  qword_1EF584780 = (uint64_t)&siri::dialogengine::PatternSchemaBinary::_Usage_default_instance_;
  unk_1EF584788 = &siri::dialogengine::PatternSchemaBinary::_VisualComponentsCombination_default_instance_;
}

uint64_t siri::dialogengine::PatternSchemaBinary::Group::_Internal::usage(siri::dialogengine::PatternSchemaBinary::Group::_Internal *this, const siri::dialogengine::PatternSchemaBinary::Group *a2)
{
  return *((_QWORD *)this + 17);
}

uint64_t siri::dialogengine::PatternSchemaBinary::Group::_Internal::visual_components_combination(siri::dialogengine::PatternSchemaBinary::Group::_Internal *this, const siri::dialogengine::PatternSchemaBinary::Group *a2)
{
  return *((_QWORD *)this + 18);
}

siri::dialogengine::PatternSchemaBinary::Group *siri::dialogengine::PatternSchemaBinary::Group::Group(siri::dialogengine::PatternSchemaBinary::Group *this, const siri::dialogengine::PatternSchemaBinary::Group *a2)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *v12;
  std::string *v13;
  siri::dialogengine::PatternSchemaBinary::Usage *v14;
  std::string *v15;
  char v17;
  std::string v18[2];

  *(_QWORD *)this = &off_1E7938518;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 11) = 0;
  *(_QWORD *)((char *)this + 28) = 0;
  *(_QWORD *)((char *)this + 36) = 0;
  *(_QWORD *)((char *)this + 20) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((int **)this + 3, (uint64_t)a2 + 24);
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::PatternComponent>::TypeHandler>((int **)this + 6, (uint64_t)a2 + 48);
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::PatternComponent>::TypeHandler>((int **)this + 9, (uint64_t)a2 + 72);
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v5 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 12) = &google::protobuf::internal::fixed_address_empty_string;
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 1) != 0)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 12);
    if (v7 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 12, (uint64_t)v7);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 13) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 2) != 0)
  {
    v8 = (uint64_t *)*((_QWORD *)a2 + 13);
    if (v8 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 13, (uint64_t)v8);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 14) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 4) != 0)
  {
    v9 = (uint64_t *)*((_QWORD *)a2 + 14);
    if (v9 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 14, (uint64_t)v9);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 15) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 8) != 0)
  {
    v10 = (uint64_t *)*((_QWORD *)a2 + 15);
    if (v10 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 15, (uint64_t)v10);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 16) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 0x10) != 0)
  {
    v11 = (uint64_t *)*((_QWORD *)a2 + 16);
    if (v11 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 16, (uint64_t)v11);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  if ((v6 & 0x20) != 0)
  {
    if (!*((_QWORD *)a2 + 17))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.h", 4237);
      v13 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: !value || usage_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    v14 = (siri::dialogengine::PatternSchemaBinary::Usage *)operator new();
    siri::dialogengine::PatternSchemaBinary::Usage::Usage(v14, *((const siri::dialogengine::PatternSchemaBinary::Usage **)a2 + 17));
    *((_QWORD *)this + 17) = v14;
    if ((*((_DWORD *)a2 + 4) & 0x40) == 0)
      goto LABEL_20;
  }
  else
  {
    *((_QWORD *)this + 17) = 0;
    if ((v6 & 0x40) == 0)
    {
LABEL_20:
      v12 = 0;
      goto LABEL_27;
    }
  }
  if (!*((_QWORD *)a2 + 18))
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.h", 4510);
    v15 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: !value || visual_components_combination_ != nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
  }
  v12 = (siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *)operator new();
  siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::VisualComponentsCombination(v12, *((const siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination **)a2 + 18));
LABEL_27:
  *((_QWORD *)this + 18) = v12;
  return this;
}

void sub_1BFC38EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t *v3;
  uint64_t v4;
  google::protobuf::internal::RepeatedPtrFieldBase *v5;
  google::protobuf::internal::RepeatedPtrFieldBase *v6;
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v6);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v5);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v4);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v3);
  _Unwind_Resume(a1);
}

siri::dialogengine::PatternSchemaBinary::Usage *siri::dialogengine::PatternSchemaBinary::Usage::Usage(siri::dialogengine::PatternSchemaBinary::Usage *this, const siri::dialogengine::PatternSchemaBinary::Usage *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  siri::dialogengine::PatternSchemaBinary::UsageMap *v7;
  const siri::dialogengine::PatternSchemaBinary::UsageMap *v8;

  *(_QWORD *)this = &off_1E7938A48;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 5) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  *((_DWORD *)this + 8) = 0;
  v5 = *((_DWORD *)a2 + 8);
  if (v5 == 1)
  {
    siri::dialogengine::PatternSchemaBinary::Usage::clear_usage_value((uint64_t)this);
    *((_DWORD *)this + 8) = 1;
    v7 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::UsageMap>(0);
    *((_QWORD *)this + 3) = v7;
    if (*((_DWORD *)a2 + 8) == 1)
      v8 = (const siri::dialogengine::PatternSchemaBinary::UsageMap *)*((_QWORD *)a2 + 3);
    else
      v8 = (const siri::dialogengine::PatternSchemaBinary::UsageMap *)&siri::dialogengine::PatternSchemaBinary::_UsageMap_default_instance_;
    siri::dialogengine::PatternSchemaBinary::UsageMap::MergeFrom(v7, v8);
  }
  else if (v5 == 2)
  {
    v6 = *((_QWORD *)a2 + 3);
    siri::dialogengine::PatternSchemaBinary::Usage::clear_usage_value((uint64_t)this);
    *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
    *((_DWORD *)this + 8) = 2;
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v6);
  }
  return this;
}

void sub_1BFC39030(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::VisualComponentsCombination(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *this, const siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *v7;
  const siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *v8;

  *(_QWORD *)this = &off_1E7938888;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 5) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  *((_DWORD *)this + 8) = 0;
  v5 = *((_DWORD *)a2 + 8);
  if (v5 == 1)
  {
    siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::clear_components_combination_value((uint64_t)this);
    *((_DWORD *)this + 8) = 1;
    v7 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>(0);
    *((_QWORD *)this + 3) = v7;
    if (*((_DWORD *)a2 + 8) == 1)
      v8 = (const siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)*((_QWORD *)a2 + 3);
    else
      v8 = (const siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)&siri::dialogengine::PatternSchemaBinary::_VisualComponentsCombinationList_default_instance_;
    siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::MergeFrom(v7, v8);
  }
  else if (v5 == 2)
  {
    v6 = *((_QWORD *)a2 + 3);
    siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::clear_components_combination_value((uint64_t)this);
    *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
    *((_DWORD *)this + 8) = 2;
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v6);
  }
  return this;
}

void sub_1BFC39120(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::PatternSchemaBinary::Group::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *siri::dialogengine::PatternSchemaBinary::Group::default_instance(siri::dialogengine::PatternSchemaBinary::Group *this)
{
  if (atomic_load(scc_info_Group_PatternSchemaBinary_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Group_PatternSchemaBinary_2eproto);
  return &siri::dialogengine::PatternSchemaBinary::_Group_default_instance_;
}

void siri::dialogengine::PatternSchemaBinary::Group::CopyFrom(siri::dialogengine::PatternSchemaBinary::Group *this, const siri::dialogengine::PatternSchemaBinary::Group *a2)
{
  if (a2 != this)
  {
    siri::dialogengine::PatternSchemaBinary::Group::Clear(this);
    siri::dialogengine::PatternSchemaBinary::Group::MergeFrom(this, a2);
  }
}

void siri::dialogengine::PatternSchemaBinary::Group::InternalSwap(siri::dialogengine::PatternSchemaBinary::Group *this, siri::dialogengine::PatternSchemaBinary::Group *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t **v26;
  uint64_t *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t **v32;
  uint64_t *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t **v38;
  uint64_t *v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v45;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
      goto LABEL_40;
    }
LABEL_5:
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 1) != 0)
    {
LABEL_6:
      v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
      v9 = *(_QWORD *)(v8 + 16);
      v10 = *(_OWORD *)v8;
      v11 = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v8 = *(_OWORD *)v7;
      *(_QWORD *)(v8 + 16) = v11;
      *(_OWORD *)v7 = v10;
      *(_QWORD *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_40:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if ((v6 & 1) != 0)
    goto LABEL_5;
LABEL_8:
  v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((siri::dialogengine::PatternSchemaBinary::Group *)((char *)this + 24), (siri::dialogengine::PatternSchemaBinary::Group *)((char *)a2 + 24));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((siri::dialogengine::PatternSchemaBinary::Group *)((char *)this + 48), (siri::dialogengine::PatternSchemaBinary::Group *)((char *)a2 + 48));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((siri::dialogengine::PatternSchemaBinary::Group *)((char *)this + 72), (siri::dialogengine::PatternSchemaBinary::Group *)((char *)a2 + 72));
  v13 = (uint64_t *)*((_QWORD *)this + 12);
  v14 = (uint64_t **)((char *)a2 + 96);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_14;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 12, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v13 = (uint64_t *)*((_QWORD *)this + 12);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 12, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v13[2];
  v17 = *(_OWORD *)v13;
  v18 = v15[2];
  *(_OWORD *)v13 = *(_OWORD *)v15;
  v13[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_14:
  v19 = (uint64_t *)*((_QWORD *)this + 13);
  v20 = (uint64_t **)((char *)a2 + 104);
  if (v19 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_20;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 13, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v19 = (uint64_t *)*((_QWORD *)this + 13);
  }
  v21 = *v20;
  if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 13, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v21 = *v20;
  }
  v22 = v19[2];
  v23 = *(_OWORD *)v19;
  v24 = v21[2];
  *(_OWORD *)v19 = *(_OWORD *)v21;
  v19[2] = v24;
  *(_OWORD *)v21 = v23;
  v21[2] = v22;
LABEL_20:
  v25 = (uint64_t *)*((_QWORD *)this + 14);
  v26 = (uint64_t **)((char *)a2 + 112);
  if (v25 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v26 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_26;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 14, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v25 = (uint64_t *)*((_QWORD *)this + 14);
  }
  v27 = *v26;
  if (*v26 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 14, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v27 = *v26;
  }
  v28 = v25[2];
  v29 = *(_OWORD *)v25;
  v30 = v27[2];
  *(_OWORD *)v25 = *(_OWORD *)v27;
  v25[2] = v30;
  *(_OWORD *)v27 = v29;
  v27[2] = v28;
LABEL_26:
  v31 = (uint64_t *)*((_QWORD *)this + 15);
  v32 = (uint64_t **)((char *)a2 + 120);
  if (v31 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v32 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_32;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 15, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v31 = (uint64_t *)*((_QWORD *)this + 15);
  }
  v33 = *v32;
  if (*v32 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 15, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v33 = *v32;
  }
  v34 = v31[2];
  v35 = *(_OWORD *)v31;
  v36 = v33[2];
  *(_OWORD *)v31 = *(_OWORD *)v33;
  v31[2] = v36;
  *(_OWORD *)v33 = v35;
  v33[2] = v34;
LABEL_32:
  v37 = (uint64_t *)*((_QWORD *)this + 16);
  v38 = (uint64_t **)((char *)a2 + 128);
  if (v37 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v38 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_38;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 16, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v37 = (uint64_t *)*((_QWORD *)this + 16);
  }
  v39 = *v38;
  if (*v38 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 16, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v39 = *v38;
  }
  v40 = v37[2];
  v41 = *(_OWORD *)v37;
  v42 = v39[2];
  *(_OWORD *)v37 = *(_OWORD *)v39;
  v37[2] = v42;
  *(_OWORD *)v39 = v41;
  v39[2] = v40;
LABEL_38:
  v43 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = *((_QWORD *)a2 + 17);
  *((_QWORD *)a2 + 17) = v43;
  v44 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = *((_QWORD *)a2 + 18);
  *((_QWORD *)a2 + 18) = v44;
}

void siri::dialogengine::PatternSchemaBinary::PatternComponent::InitAsDefaultInstance(siri::dialogengine::PatternSchemaBinary::PatternComponent *this)
{
  qword_1EF5847E0 = (uint64_t)&siri::dialogengine::PatternSchemaBinary::_ModeConfiguration_default_instance_;
  unk_1EF5847E8 = &siri::dialogengine::PatternSchemaBinary::_ModeConfiguration_default_instance_;
  qword_1EF5847F0 = (uint64_t)&siri::dialogengine::PatternSchemaBinary::_Usage_default_instance_;
}

uint64_t siri::dialogengine::PatternSchemaBinary::PatternComponent::_Internal::full(siri::dialogengine::PatternSchemaBinary::PatternComponent::_Internal *this, const siri::dialogengine::PatternSchemaBinary::PatternComponent *a2)
{
  return *((_QWORD *)this + 10);
}

uint64_t siri::dialogengine::PatternSchemaBinary::PatternComponent::_Internal::supporting(siri::dialogengine::PatternSchemaBinary::PatternComponent::_Internal *this, const siri::dialogengine::PatternSchemaBinary::PatternComponent *a2)
{
  return *((_QWORD *)this + 11);
}

uint64_t siri::dialogengine::PatternSchemaBinary::PatternComponent::_Internal::usage(siri::dialogengine::PatternSchemaBinary::PatternComponent::_Internal *this, const siri::dialogengine::PatternSchemaBinary::PatternComponent *a2)
{
  return *((_QWORD *)this + 12);
}

siri::dialogengine::PatternSchemaBinary::PatternComponent *siri::dialogengine::PatternSchemaBinary::PatternComponent::PatternComponent(siri::dialogengine::PatternSchemaBinary::PatternComponent *this, const siri::dialogengine::PatternSchemaBinary::PatternComponent *a2)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  siri::dialogengine::PatternSchemaBinary::Usage *v11;
  std::string *v12;
  siri::dialogengine::PatternSchemaBinary::ModeConfiguration *v13;
  std::string *v14;
  siri::dialogengine::PatternSchemaBinary::ModeConfiguration *v15;
  std::string *v16;
  char v18;
  std::string v19[2];

  *(_QWORD *)this = &off_1E79385A8;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 11) = 0;
  *(_QWORD *)((char *)this + 28) = 0;
  *(_QWORD *)((char *)this + 36) = 0;
  *(_QWORD *)((char *)this + 20) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((int **)this + 3, (uint64_t)a2 + 24);
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v5 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 1) != 0)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 6);
    if (v7 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, (uint64_t)v7);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 7) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 2) != 0)
  {
    v8 = (uint64_t *)*((_QWORD *)a2 + 7);
    if (v8 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 7, (uint64_t)v8);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 8) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 4) != 0)
  {
    v9 = (uint64_t *)*((_QWORD *)a2 + 8);
    if (v9 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 8, (uint64_t)v9);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 9) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 8) != 0)
  {
    v10 = (uint64_t *)*((_QWORD *)a2 + 9);
    if (v10 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 9, (uint64_t)v10);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  if ((v6 & 0x10) == 0)
  {
    *((_QWORD *)this + 10) = 0;
    if ((v6 & 0x20) == 0)
      goto LABEL_17;
LABEL_22:
    if (!*((_QWORD *)a2 + 11))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.h", 5141);
      v14 = google::protobuf::internal::LogMessage::operator<<(v19, "CHECK failed: !value || supporting_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v18, (const char **)&v14->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v19[0].__r_.__value_.__l.__data_);
    }
    v15 = (siri::dialogengine::PatternSchemaBinary::ModeConfiguration *)operator new();
    siri::dialogengine::PatternSchemaBinary::ModeConfiguration::ModeConfiguration(v15, *((const siri::dialogengine::PatternSchemaBinary::ModeConfiguration **)a2 + 11));
    *((_QWORD *)this + 11) = v15;
    if ((*((_DWORD *)a2 + 4) & 0x40) == 0)
      goto LABEL_18;
    goto LABEL_25;
  }
  if (!*((_QWORD *)a2 + 10))
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.h", 5081);
    v12 = google::protobuf::internal::LogMessage::operator<<(v19, "CHECK failed: !value || full_ != nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v18, (const char **)&v12->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v19[0].__r_.__value_.__l.__data_);
  }
  v13 = (siri::dialogengine::PatternSchemaBinary::ModeConfiguration *)operator new();
  siri::dialogengine::PatternSchemaBinary::ModeConfiguration::ModeConfiguration(v13, *((const siri::dialogengine::PatternSchemaBinary::ModeConfiguration **)a2 + 10));
  *((_QWORD *)this + 10) = v13;
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 0x20) != 0)
    goto LABEL_22;
LABEL_17:
  *((_QWORD *)this + 11) = 0;
  if ((v6 & 0x40) == 0)
  {
LABEL_18:
    v11 = 0;
    goto LABEL_28;
  }
LABEL_25:
  if (!*((_QWORD *)a2 + 12))
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.h", 5275);
    v16 = google::protobuf::internal::LogMessage::operator<<(v19, "CHECK failed: !value || usage_ != nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v18, (const char **)&v16->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v19[0].__r_.__value_.__l.__data_);
  }
  v11 = (siri::dialogengine::PatternSchemaBinary::Usage *)operator new();
  siri::dialogengine::PatternSchemaBinary::Usage::Usage(v11, *((const siri::dialogengine::PatternSchemaBinary::Usage **)a2 + 12));
LABEL_28:
  *((_QWORD *)this + 12) = v11;
  return this;
}

void sub_1BFC397F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t *v3;
  uint64_t v4;
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v4);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v3);
  _Unwind_Resume(a1);
}

siri::dialogengine::PatternSchemaBinary::ModeConfiguration *siri::dialogengine::PatternSchemaBinary::ModeConfiguration::ModeConfiguration(siri::dialogengine::PatternSchemaBinary::ModeConfiguration *this, const siri::dialogengine::PatternSchemaBinary::ModeConfiguration *a2)
{
  uint64_t *v4;
  uint64_t v5;
  siri::dialogengine::PatternSchemaBinary::Usage *v6;
  std::string *v7;
  char v9;
  std::string v10[2];

  *(_QWORD *)this = &off_1E7938AD8;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 11) = 0;
  *(_QWORD *)((char *)this + 28) = 0;
  *(_QWORD *)((char *)this + 36) = 0;
  *(_QWORD *)((char *)this + 20) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::Override>::TypeHandler>((int **)this + 3, (uint64_t)a2 + 24);
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((int **)this + 6, (uint64_t)a2 + 48);
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v5 & 0xFFFFFFFFFFFFFFFELL);
  if ((*((_DWORD *)a2 + 4) & 1) != 0)
  {
    if (!*((_QWORD *)a2 + 9))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.h", 5944);
      v7 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: !value || usage_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
    }
    v6 = (siri::dialogengine::PatternSchemaBinary::Usage *)operator new();
    siri::dialogengine::PatternSchemaBinary::Usage::Usage(v6, *((const siri::dialogengine::PatternSchemaBinary::Usage **)a2 + 9));
  }
  else
  {
    v6 = 0;
  }
  *((_QWORD *)this + 9) = v6;
  return this;
}

void sub_1BFC39998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t *v3;
  google::protobuf::internal::RepeatedPtrFieldBase *v4;
  uint64_t v5;
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v5);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v4);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v3);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::PatternSchemaBinary::PatternComponent::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *siri::dialogengine::PatternSchemaBinary::PatternComponent::default_instance(siri::dialogengine::PatternSchemaBinary::PatternComponent *this)
{
  if (atomic_load(scc_info_PatternComponent_PatternSchemaBinary_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_PatternComponent_PatternSchemaBinary_2eproto);
  return &siri::dialogengine::PatternSchemaBinary::_PatternComponent_default_instance_;
}

void siri::dialogengine::PatternSchemaBinary::PatternComponent::CopyFrom(siri::dialogengine::PatternSchemaBinary::PatternComponent *this, const siri::dialogengine::PatternSchemaBinary::PatternComponent *a2)
{
  if (a2 != this)
  {
    siri::dialogengine::PatternSchemaBinary::PatternComponent::Clear(this);
    siri::dialogengine::PatternSchemaBinary::PatternComponent::MergeFrom(this, a2);
  }
}

void siri::dialogengine::PatternSchemaBinary::PatternComponent::InternalSwap(siri::dialogengine::PatternSchemaBinary::PatternComponent *this, siri::dialogengine::PatternSchemaBinary::PatternComponent *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t **v26;
  uint64_t *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t **v32;
  uint64_t *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v40;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
      goto LABEL_34;
    }
LABEL_5:
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 1) != 0)
    {
LABEL_6:
      v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
      v9 = *(_QWORD *)(v8 + 16);
      v10 = *(_OWORD *)v8;
      v11 = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v8 = *(_OWORD *)v7;
      *(_QWORD *)(v8 + 16) = v11;
      *(_OWORD *)v7 = v10;
      *(_QWORD *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_34:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if ((v6 & 1) != 0)
    goto LABEL_5;
LABEL_8:
  v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((siri::dialogengine::PatternSchemaBinary::PatternComponent *)((char *)this + 24), (siri::dialogengine::PatternSchemaBinary::PatternComponent *)((char *)a2 + 24));
  v13 = (uint64_t *)*((_QWORD *)this + 6);
  v14 = (uint64_t **)((char *)a2 + 48);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_14;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 6, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v13 = (uint64_t *)*((_QWORD *)this + 6);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 6, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v13[2];
  v17 = *(_OWORD *)v13;
  v18 = v15[2];
  *(_OWORD *)v13 = *(_OWORD *)v15;
  v13[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_14:
  v19 = (uint64_t *)*((_QWORD *)this + 7);
  v20 = (uint64_t **)((char *)a2 + 56);
  if (v19 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_20;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 7, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v19 = (uint64_t *)*((_QWORD *)this + 7);
  }
  v21 = *v20;
  if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 7, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v21 = *v20;
  }
  v22 = v19[2];
  v23 = *(_OWORD *)v19;
  v24 = v21[2];
  *(_OWORD *)v19 = *(_OWORD *)v21;
  v19[2] = v24;
  *(_OWORD *)v21 = v23;
  v21[2] = v22;
LABEL_20:
  v25 = (uint64_t *)*((_QWORD *)this + 8);
  v26 = (uint64_t **)((char *)a2 + 64);
  if (v25 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v26 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_26;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 8, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v25 = (uint64_t *)*((_QWORD *)this + 8);
  }
  v27 = *v26;
  if (*v26 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 8, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v27 = *v26;
  }
  v28 = v25[2];
  v29 = *(_OWORD *)v25;
  v30 = v27[2];
  *(_OWORD *)v25 = *(_OWORD *)v27;
  v25[2] = v30;
  *(_OWORD *)v27 = v29;
  v27[2] = v28;
LABEL_26:
  v31 = (uint64_t *)*((_QWORD *)this + 9);
  v32 = (uint64_t **)((char *)a2 + 72);
  if (v31 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v32 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_32;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 9, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v31 = (uint64_t *)*((_QWORD *)this + 9);
  }
  v33 = *v32;
  if (*v32 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 9, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v33 = *v32;
  }
  v34 = v31[2];
  v35 = *(_OWORD *)v31;
  v36 = v33[2];
  *(_OWORD *)v31 = *(_OWORD *)v33;
  v31[2] = v36;
  *(_OWORD *)v33 = v35;
  v33[2] = v34;
LABEL_32:
  v37 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v37;
  v38 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v38;
  v39 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v39;
}

uint64_t siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse::MapValue_ValueEntry_DoNotUse(uint64_t this)
{
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  *(_QWORD *)this = &off_1E7938638;
  *(_QWORD *)(this + 8) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

{
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  *(_QWORD *)this = &off_1E7938638;
  *(_QWORD *)(this + 8) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

siri::dialogengine::PatternSchemaBinary::MapValue *siri::dialogengine::PatternSchemaBinary::MapValue::MapValue(siri::dialogengine::PatternSchemaBinary::MapValue *this, const siri::dialogengine::PatternSchemaBinary::MapValue *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;

  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *(_QWORD *)this = &off_1E79386D8;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  v5 = (uint64_t *)((char *)this + 24);
  *(_QWORD *)((char *)this + 20) = 0;
  *(_QWORD *)((char *)this + 28) = 0;
  google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::Init((uint64_t *)this + 3);
  *((_DWORD *)this + 8) = 0;
  v6 = *((_QWORD *)a2 + 1);
  if ((v6 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v6 & 0xFFFFFFFFFFFFFFFELL);
  google::protobuf::internal::MapFieldLite<siri::dialogengine::PatternSchemaBinary::MapValue_ValueEntry_DoNotUse,std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)11,0>::MergeFrom(v5, (uint64_t)a2 + 24);
  return this;
}

void sub_1BFC39E40(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::PatternSchemaBinary::MapValue::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *siri::dialogengine::PatternSchemaBinary::MapValue::default_instance(siri::dialogengine::PatternSchemaBinary::MapValue *this)
{
  if (atomic_load(scc_info_ListValue_PatternSchemaBinary_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_ListValue_PatternSchemaBinary_2eproto);
  return &siri::dialogengine::PatternSchemaBinary::_MapValue_default_instance_;
}

void siri::dialogengine::PatternSchemaBinary::MapValue::CopyFrom(siri::dialogengine::PatternSchemaBinary::MapValue *this, const siri::dialogengine::PatternSchemaBinary::MapValue *a2)
{
  if (a2 != this)
  {
    siri::dialogengine::PatternSchemaBinary::MapValue::Clear(this);
    siri::dialogengine::PatternSchemaBinary::MapValue::MergeFrom(this, a2);
  }
}

void siri::dialogengine::PatternSchemaBinary::MapValue::InternalSwap(siri::dialogengine::PatternSchemaBinary::MapValue *this, siri::dialogengine::PatternSchemaBinary::MapValue *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unsigned __int8 *v18;
  int v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v17;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
      goto LABEL_13;
    }
LABEL_5:
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 1) != 0)
    {
LABEL_6:
      v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
      v9 = *(_QWORD *)(v8 + 16);
      v10 = *(_OWORD *)v8;
      v11 = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v8 = *(_OWORD *)v7;
      *(_QWORD *)(v8 + 16) = v11;
      *(_OWORD *)v7 = v10;
      *(_QWORD *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_13:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if ((v6 & 1) != 0)
    goto LABEL_5;
LABEL_8:
  v12 = *((_QWORD *)this + 3);
  v13 = *((_DWORD *)this + 4);
  v14 = *((_QWORD *)a2 + 3);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v13;
  if (v12 == v14)
  {
    v15 = *((_DWORD *)this + 8);
    *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = v15;
    v16 = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
    *((_QWORD *)a2 + 5) = v16;
  }
  else
  {
    v18 = 0;
    v19 = *((_DWORD *)this + 8);
    google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::Init((uint64_t *)&v18);
    *((_QWORD *)&v22 + 1) = *((_QWORD *)this + 5);
    google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::iterator_base<google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::KeyValuePair>::SearchFrom(&v22, *(_QWORD *)(*((_QWORD *)&v22 + 1) + 24));
    v20 = v22;
    v21 = v23;
    v23 = 0;
    v22 = 0uLL;
    google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::insert<google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::const_iterator>(&v18, &v20, &v22);
    google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::operator=((unsigned __int8 **)this + 3, (unsigned __int8 **)a2 + 3);
    google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::operator=((unsigned __int8 **)a2 + 3, &v18);
    google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::~Map(&v18);
  }
}

void sub_1BFC3A074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::~Map((uint64_t *)va);
  _Unwind_Resume(a1);
}

unsigned __int8 **google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::operator=(unsigned __int8 **a1, unsigned __int8 **a2)
{
  _QWORD v5[3];
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  if (a1 != a2)
  {
    google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::clear(a1);
    *((_QWORD *)&v8 + 1) = a2[2];
    google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::iterator_base<google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::KeyValuePair>::SearchFrom(&v8, *(_QWORD *)(*((_QWORD *)&v8 + 1) + 24));
    v6 = v8;
    v7 = v9;
    memset(v5, 0, sizeof(v5));
    google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::insert<google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::const_iterator>(a1, &v6, v5);
  }
  return a1;
}

unsigned __int8 **google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::insert<google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::const_iterator>(unsigned __int8 **result, __int128 *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  const siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *v7;
  std::string *v8;
  siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v12[4];

  v10 = *a2;
  v11 = *((_QWORD *)a2 + 2);
  v3 = v10;
  if ((_QWORD)v10 != *a3)
  {
    v5 = (uint64_t *)result;
    do
    {
      google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(v12, v5[2], *(unsigned __int8 **)(v3 + 24), 0);
      if (!v12[0])
      {
        v6 = *(_QWORD *)(v10 + 24);
        v7 = (const siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)(v6 + 24);
        v8 = google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::operator[](v5, v6);
        if (v7 != (const siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)v8)
        {
          v9 = (siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)v8;
          siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::Clear((siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *)v8);
          siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::MergeFrom(v9, v7);
        }
      }
      result = google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::InnerMap::iterator_base<google::protobuf::Map<std::string,siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList>::KeyValuePair const>::operator++((unsigned __int8 **)&v10);
      v3 = v10;
    }
    while ((_QWORD)v10 != *a3);
  }
  return result;
}

uint64_t siri::dialogengine::PatternSchemaBinary::ListValue::_Internal::map_value(siri::dialogengine::PatternSchemaBinary::ListValue::_Internal *this, const siri::dialogengine::PatternSchemaBinary::ListValue *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t siri::dialogengine::PatternSchemaBinary::ListValue::set_allocated_map_value(siri::dialogengine::PatternSchemaBinary::ListValue *this, siri::dialogengine::PatternSchemaBinary::MapValue *a2)
{
  uint64_t result;

  result = siri::dialogengine::PatternSchemaBinary::ListValue::clear_list_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 8) = 2;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

siri::dialogengine::PatternSchemaBinary::ListValue *siri::dialogengine::PatternSchemaBinary::ListValue::ListValue(siri::dialogengine::PatternSchemaBinary::ListValue *this, const siri::dialogengine::PatternSchemaBinary::ListValue *a2)
{
  uint64_t v4;
  int v5;
  siri::dialogengine::PatternSchemaBinary::MapValue *v6;
  const siri::dialogengine::PatternSchemaBinary::MapValue *v7;
  uint64_t v8;

  *(_QWORD *)this = &off_1E7938768;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 5) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((uint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  *((_DWORD *)this + 8) = 0;
  v5 = *((_DWORD *)a2 + 8);
  if (v5 == 1)
  {
    v8 = *((_QWORD *)a2 + 3);
    siri::dialogengine::PatternSchemaBinary::ListValue::clear_list_value((uint64_t)this);
    *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
    *((_DWORD *)this + 8) = 1;
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
  }
  else if (v5 == 2)
  {
    siri::dialogengine::PatternSchemaBinary::ListValue::clear_list_value((uint64_t)this);
    *((_DWORD *)this + 8) = 2;
    v6 = google::protobuf::Arena::CreateMaybeMessage<siri::dialogengine::PatternSchemaBinary::MapValue>(0);
    *((_QWORD *)this + 3) = v6;
    if (*((_DWORD *)a2 + 8) == 2)
      v7 = (const siri::dialogengine::PatternSchemaBinary::MapValue *)*((_QWORD *)a2 + 3);
    else
      v7 = (const siri::dialogengine::PatternSchemaBinary::MapValue *)&siri::dialogengine::PatternSchemaBinary::_MapValue_default_instance_;
    siri::dialogengine::PatternSchemaBinary::MapValue::MergeFrom(v6, v7);
  }
  return this;
}

void sub_1BFC3A2D4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::PatternSchemaBinary::ListValue::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *siri::dialogengine::PatternSchemaBinary::ListValue::default_instance(siri::dialogengine::PatternSchemaBinary::ListValue *this)
{
  if (atomic_load(scc_info_ListValue_PatternSchemaBinary_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_ListValue_PatternSchemaBinary_2eproto);
  return &siri::dialogengine::PatternSchemaBinary::_ListValue_default_instance_;
}

void siri::dialogengine::PatternSchemaBinary::ListValue::CopyFrom(siri::dialogengine::PatternSchemaBinary::ListValue *this, const siri::dialogengine::PatternSchemaBinary::ListValue *a2)
{
  if (a2 != this)
  {
    siri::dialogengine::PatternSchemaBinary::ListValue::Clear(this);
    siri::dialogengine::PatternSchemaBinary::ListValue::MergeFrom(this, a2);
  }
}

void siri::dialogengine::PatternSchemaBinary::ListValue::InternalSwap(siri::dialogengine::PatternSchemaBinary::ListValue *this, siri::dialogengine::PatternSchemaBinary::ListValue *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v14;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
LABEL_10:
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
      goto LABEL_7;
    }
  }
  else if ((v6 & 1) == 0)
  {
    goto LABEL_8;
  }
  v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
  if ((v4 & 1) == 0)
    goto LABEL_10;
LABEL_6:
  v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
  v9 = *(_QWORD *)(v8 + 16);
  v10 = *(_OWORD *)v8;
  v11 = *(_QWORD *)(v7 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v7;
  *(_QWORD *)(v8 + 16) = v11;
  *(_OWORD *)v7 = v10;
  *(_QWORD *)(v7 + 16) = v9;
LABEL_8:
  v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  v13 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v13;
  LODWORD(v13) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v13;
}

siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::VisualComponentsCombinationList(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *this, const siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *a2)
{
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E79387F8;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 11) = 0;
  *(_QWORD *)((char *)this + 28) = 0;
  *(_QWORD *)((char *)this + 36) = 0;
  *(_QWORD *)((char *)this + 20) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::PatternSchemaBinary::ListValue>::TypeHandler>((int **)this + 3, (uint64_t)a2 + 24);
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v5 & 0xFFFFFFFFFFFFFFFELL);
  return this;
}

void sub_1BFC3A4B0(_Unwind_Exception *a1)
{
  uint64_t *v1;
  google::protobuf::internal::RepeatedPtrFieldBase *v2;

  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::default_instance(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *this)
{
  if (atomic_load(scc_info_ListValue_PatternSchemaBinary_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_ListValue_PatternSchemaBinary_2eproto);
  return &siri::dialogengine::PatternSchemaBinary::_VisualComponentsCombinationList_default_instance_;
}

void siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::CopyFrom(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *this, const siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *a2)
{
  if (a2 != this)
  {
    siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::Clear(this);
    siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList::MergeFrom(this, a2);
  }
}

uint64_t siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::_Internal::list(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::_Internal *this, const siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::set_allocated_list(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *this, siri::dialogengine::PatternSchemaBinary::VisualComponentsCombinationList *a2)
{
  uint64_t result;

  result = siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::clear_components_combination_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 8) = 1;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

uint64_t siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::default_instance(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *this)
{
  if (atomic_load(scc_info_VisualComponentsCombination_PatternSchemaBinary_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_VisualComponentsCombination_PatternSchemaBinary_2eproto);
  return &siri::dialogengine::PatternSchemaBinary::_VisualComponentsCombination_default_instance_;
}

void siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::CopyFrom(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *this, const siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *a2)
{
  if (a2 != this)
  {
    siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::Clear(this);
    siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::MergeFrom(this, a2);
  }
}

void siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination::InternalSwap(siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *this, siri::dialogengine::PatternSchemaBinary::VisualComponentsCombination *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v14;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
LABEL_10:
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
      goto LABEL_7;
    }
  }
  else if ((v6 & 1) == 0)
  {
    goto LABEL_8;
  }
  v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
  if ((v4 & 1) == 0)
    goto LABEL_10;
LABEL_6:
  v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
  v9 = *(_QWORD *)(v8 + 16);
  v10 = *(_OWORD *)v8;
  v11 = *(_QWORD *)(v7 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v7;
  *(_QWORD *)(v8 + 16) = v11;
  *(_OWORD *)v7 = v10;
  *(_QWORD *)(v7 + 16) = v9;
LABEL_8:
  v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  v13 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v13;
  LODWORD(v13) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v13;
}

uint64_t siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse::UsageMap_ValueEntry_DoNotUse(uint64_t this)
{
  *(_QWORD *)(this + 16) = &google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  *(_QWORD *)this = &off_1E7938918;
  *(_QWORD *)(this + 8) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

{
  *(_QWORD *)(this + 16) = &google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  *(_QWORD *)this = &off_1E7938918;
  *(_QWORD *)(this + 8) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

siri::dialogengine::PatternSchemaBinary::UsageMap *siri::dialogengine::PatternSchemaBinary::UsageMap::UsageMap(siri::dialogengine::PatternSchemaBinary::UsageMap *this, const siri::dialogengine::PatternSchemaBinary::UsageMap *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;

  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *(_QWORD *)this = &off_1E79389B8;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  v5 = (uint64_t *)((char *)this + 24);
  *(_QWORD *)((char *)this + 20) = 0;
  *(_QWORD *)((char *)this + 28) = 0;
  google::protobuf::Map<std::string,std::string>::Init((uint64_t *)this + 3);
  *((_DWORD *)this + 8) = 0;
  v6 = *((_QWORD *)a2 + 1);
  if ((v6 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v6 & 0xFFFFFFFFFFFFFFFELL);
  google::protobuf::internal::MapFieldLite<siri::dialogengine::PatternSchemaBinary::UsageMap_ValueEntry_DoNotUse,std::string,std::string,(google::protobuf::internal::WireFormatLite::FieldType)9,(google::protobuf::internal::WireFormatLite::FieldType)9,0>::MergeFrom(v5, *((_QWORD *)a2 + 5));
  return this;
}

void sub_1BFC3A7E8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::PatternSchemaBinary::UsageMap::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *siri::dialogengine::PatternSchemaBinary::UsageMap::default_instance(siri::dialogengine::PatternSchemaBinary::UsageMap *this)
{
  if (atomic_load(scc_info_UsageMap_PatternSchemaBinary_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_UsageMap_PatternSchemaBinary_2eproto);
  return &siri::dialogengine::PatternSchemaBinary::_UsageMap_default_instance_;
}

void siri::dialogengine::PatternSchemaBinary::UsageMap::CopyFrom(siri::dialogengine::PatternSchemaBinary::UsageMap *this, const siri::dialogengine::PatternSchemaBinary::UsageMap *a2)
{
  if (a2 != this)
  {
    siri::dialogengine::PatternSchemaBinary::UsageMap::Clear(this);
    siri::dialogengine::PatternSchemaBinary::UsageMap::MergeFrom(this, a2);
  }
}

void siri::dialogengine::PatternSchemaBinary::UsageMap::InternalSwap(siri::dialogengine::PatternSchemaBinary::UsageMap *this, siri::dialogengine::PatternSchemaBinary::UsageMap *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unsigned __int8 *v18;
  int v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v17;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
      goto LABEL_13;
    }
LABEL_5:
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 1) != 0)
    {
LABEL_6:
      v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
      v9 = *(_QWORD *)(v8 + 16);
      v10 = *(_OWORD *)v8;
      v11 = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v8 = *(_OWORD *)v7;
      *(_QWORD *)(v8 + 16) = v11;
      *(_OWORD *)v7 = v10;
      *(_QWORD *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_13:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if ((v6 & 1) != 0)
    goto LABEL_5;
LABEL_8:
  v12 = *((_QWORD *)this + 3);
  v13 = *((_DWORD *)this + 4);
  v14 = *((_QWORD *)a2 + 3);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v13;
  if (v12 == v14)
  {
    v15 = *((_DWORD *)this + 8);
    *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = v15;
    v16 = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
    *((_QWORD *)a2 + 5) = v16;
  }
  else
  {
    v18 = 0;
    v19 = *((_DWORD *)this + 8);
    google::protobuf::Map<std::string,std::string>::Init((uint64_t *)&v18);
    *((_QWORD *)&v22 + 1) = *((_QWORD *)this + 5);
    google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<google::protobuf::Map<std::string,std::string>::KeyValuePair>::SearchFrom(&v22, *(_QWORD *)(*((_QWORD *)&v22 + 1) + 24));
    v20 = v22;
    v21 = v23;
    v23 = 0;
    v22 = 0uLL;
    google::protobuf::Map<std::string,std::string>::insert<google::protobuf::Map<std::string,std::string>::const_iterator>(&v18, &v20, &v22);
    google::protobuf::Map<std::string,std::string>::operator=((unsigned __int8 **)this + 3, (unsigned __int8 **)a2 + 3);
    google::protobuf::Map<std::string,std::string>::operator=((unsigned __int8 **)a2 + 3, &v18);
    google::protobuf::Map<std::string,std::string>::~Map(&v18);
  }
}

void sub_1BFC3AA1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  google::protobuf::Map<std::string,std::string>::~Map((uint64_t *)va);
  _Unwind_Resume(a1);
}

unsigned __int8 **google::protobuf::Map<std::string,std::string>::operator=(unsigned __int8 **a1, unsigned __int8 **a2)
{
  _QWORD v5[3];
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  if (a1 != a2)
  {
    google::protobuf::Map<std::string,std::string>::clear(a1);
    *((_QWORD *)&v8 + 1) = a2[2];
    google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<google::protobuf::Map<std::string,std::string>::KeyValuePair>::SearchFrom(&v8, *(_QWORD *)(*((_QWORD *)&v8 + 1) + 24));
    v6 = v8;
    v7 = v9;
    memset(v5, 0, sizeof(v5));
    google::protobuf::Map<std::string,std::string>::insert<google::protobuf::Map<std::string,std::string>::const_iterator>(a1, &v6, v5);
  }
  return a1;
}

unsigned __int8 **google::protobuf::Map<std::string,std::string>::insert<google::protobuf::Map<std::string,std::string>::const_iterator>(unsigned __int8 **result, __int128 *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  const std::string *v7;
  std::string *v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v11[4];

  v9 = *a2;
  v10 = *((_QWORD *)a2 + 2);
  v3 = v9;
  if ((_QWORD)v9 != *a3)
  {
    v5 = (uint64_t *)result;
    do
    {
      google::protobuf::Map<std::string,std::string>::InnerMap::FindHelper(v11, v5[2], *(unsigned __int8 **)(v3 + 24), 0);
      if (!v11[0])
      {
        v6 = *(_QWORD *)(v9 + 24);
        v7 = (const std::string *)(v6 + 24);
        v8 = google::protobuf::Map<std::string,std::string>::operator[](v5, v6);
        std::string::operator=(v8, v7);
      }
      result = google::protobuf::Map<std::string,std::string>::InnerMap::iterator_base<google::protobuf::Map<std::string,std::string>::KeyValuePair const>::operator++((unsigned __int8 **)&v9);
      v3 = v9;
    }
    while ((_QWORD)v9 != *a3);
  }
  return result;
}

uint64_t siri::dialogengine::PatternSchemaBinary::Usage::_Internal::usage_map(siri::dialogengine::PatternSchemaBinary::Usage::_Internal *this, const siri::dialogengine::PatternSchemaBinary::Usage *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t siri::dialogengine::PatternSchemaBinary::Usage::set_allocated_usage_map(siri::dialogengine::PatternSchemaBinary::Usage *this, siri::dialogengine::PatternSchemaBinary::UsageMap *a2)
{
  uint64_t result;

  result = siri::dialogengine::PatternSchemaBinary::Usage::clear_usage_value((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 8) = 1;
    *((_QWORD *)this + 3) = a2;
  }
  return result;
}

uint64_t siri::dialogengine::PatternSchemaBinary::Usage::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *siri::dialogengine::PatternSchemaBinary::Usage::default_instance(siri::dialogengine::PatternSchemaBinary::Usage *this)
{
  if (atomic_load(scc_info_Usage_PatternSchemaBinary_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Usage_PatternSchemaBinary_2eproto);
  return &siri::dialogengine::PatternSchemaBinary::_Usage_default_instance_;
}

void siri::dialogengine::PatternSchemaBinary::Usage::CopyFrom(siri::dialogengine::PatternSchemaBinary::Usage *this, const siri::dialogengine::PatternSchemaBinary::Usage *a2)
{
  if (a2 != this)
  {
    siri::dialogengine::PatternSchemaBinary::Usage::Clear(this);
    siri::dialogengine::PatternSchemaBinary::Usage::MergeFrom(this, a2);
  }
}

void siri::dialogengine::PatternSchemaBinary::Usage::InternalSwap(siri::dialogengine::PatternSchemaBinary::Usage *this, siri::dialogengine::PatternSchemaBinary::Usage *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v14;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
LABEL_10:
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
      goto LABEL_7;
    }
  }
  else if ((v6 & 1) == 0)
  {
    goto LABEL_8;
  }
  v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
  if ((v4 & 1) == 0)
    goto LABEL_10;
LABEL_6:
  v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
  v9 = *(_QWORD *)(v8 + 16);
  v10 = *(_OWORD *)v8;
  v11 = *(_QWORD *)(v7 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v7;
  *(_QWORD *)(v8 + 16) = v11;
  *(_OWORD *)v7 = v10;
  *(_QWORD *)(v7 + 16) = v9;
LABEL_8:
  v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  v13 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v13;
  LODWORD(v13) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v13;
}

void siri::dialogengine::PatternSchemaBinary::ModeConfiguration::InitAsDefaultInstance(siri::dialogengine::PatternSchemaBinary::ModeConfiguration *this)
{
  qword_1EF5849C8 = (uint64_t)&siri::dialogengine::PatternSchemaBinary::_Usage_default_instance_;
}

uint64_t siri::dialogengine::PatternSchemaBinary::ModeConfiguration::_Internal::usage(siri::dialogengine::PatternSchemaBinary::ModeConfiguration::_Internal *this, const siri::dialogengine::PatternSchemaBinary::ModeConfiguration *a2)
{
  return *((_QWORD *)this + 9);
}

uint64_t siri::dialogengine::PatternSchemaBinary::ModeConfiguration::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *siri::dialogengine::PatternSchemaBinary::ModeConfiguration::default_instance(siri::dialogengine::PatternSchemaBinary::ModeConfiguration *this)
{
  if (atomic_load(scc_info_ModeConfiguration_PatternSchemaBinary_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_ModeConfiguration_PatternSchemaBinary_2eproto);
  return &siri::dialogengine::PatternSchemaBinary::_ModeConfiguration_default_instance_;
}

void siri::dialogengine::PatternSchemaBinary::ModeConfiguration::CopyFrom(siri::dialogengine::PatternSchemaBinary::ModeConfiguration *this, const siri::dialogengine::PatternSchemaBinary::ModeConfiguration *a2)
{
  if (a2 != this)
  {
    siri::dialogengine::PatternSchemaBinary::ModeConfiguration::Clear(this);
    siri::dialogengine::PatternSchemaBinary::ModeConfiguration::MergeFrom(this, a2);
  }
}

void siri::dialogengine::PatternSchemaBinary::ModeConfiguration::InternalSwap(siri::dialogengine::PatternSchemaBinary::ModeConfiguration *this, siri::dialogengine::PatternSchemaBinary::ModeConfiguration *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v14;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
LABEL_10:
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
      goto LABEL_7;
    }
  }
  else if ((v6 & 1) == 0)
  {
    goto LABEL_8;
  }
  v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
  if ((v4 & 1) == 0)
    goto LABEL_10;
LABEL_6:
  v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
  v9 = *(_QWORD *)(v8 + 16);
  v10 = *(_OWORD *)v8;
  v11 = *(_QWORD *)(v7 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v7;
  *(_QWORD *)(v8 + 16) = v11;
  *(_OWORD *)v7 = v10;
  *(_QWORD *)(v7 + 16) = v9;
LABEL_8:
  v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((siri::dialogengine::PatternSchemaBinary::ModeConfiguration *)((char *)this + 24), (siri::dialogengine::PatternSchemaBinary::ModeConfiguration *)((char *)a2 + 24));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((siri::dialogengine::PatternSchemaBinary::ModeConfiguration *)((char *)this + 48), (siri::dialogengine::PatternSchemaBinary::ModeConfiguration *)((char *)a2 + 48));
  v13 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v13;
}

void siri::dialogengine::PatternSchemaBinary::Override::InitAsDefaultInstance(siri::dialogengine::PatternSchemaBinary::Override *this)
{
  qword_1EF584A00 = (uint64_t)&siri::dialogengine::PatternSchemaBinary::_Usage_default_instance_;
}

uint64_t siri::dialogengine::PatternSchemaBinary::Override::_Internal::usage(siri::dialogengine::PatternSchemaBinary::Override::_Internal *this, const siri::dialogengine::PatternSchemaBinary::Override *a2)
{
  return *((_QWORD *)this + 6);
}

siri::dialogengine::PatternSchemaBinary::Override *siri::dialogengine::PatternSchemaBinary::Override::Override(siri::dialogengine::PatternSchemaBinary::Override *this, const siri::dialogengine::PatternSchemaBinary::Override *a2)
{
  uint64_t *v4;
  uint64_t v5;
  siri::dialogengine::PatternSchemaBinary::Usage *v6;
  std::string *v7;
  char v9;
  std::string v10[2];

  *(_QWORD *)this = &off_1E7938B68;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 11) = 0;
  *(_QWORD *)((char *)this + 28) = 0;
  *(_QWORD *)((char *)this + 36) = 0;
  *(_QWORD *)((char *)this + 20) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((int **)this + 3, (uint64_t)a2 + 24);
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v5 & 0xFFFFFFFFFFFFFFFELL);
  if ((*((_DWORD *)a2 + 4) & 1) != 0)
  {
    if (!*((_QWORD *)a2 + 6))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/patterns/PatternSchemaBinary.pb.h", 6121);
      v7 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: !value || usage_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
    }
    v6 = (siri::dialogengine::PatternSchemaBinary::Usage *)operator new();
    siri::dialogengine::PatternSchemaBinary::Usage::Usage(v6, *((const siri::dialogengine::PatternSchemaBinary::Usage **)a2 + 6));
  }
  else
  {
    v6 = 0;
  }
  *((_QWORD *)this + 6) = v6;
  return this;
}

void sub_1BFC3AF5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t *v3;
  uint64_t v4;
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v4);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v3);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::PatternSchemaBinary::Override::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *siri::dialogengine::PatternSchemaBinary::Override::default_instance(siri::dialogengine::PatternSchemaBinary::Override *this)
{
  if (atomic_load(scc_info_Override_PatternSchemaBinary_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Override_PatternSchemaBinary_2eproto);
  return &siri::dialogengine::PatternSchemaBinary::_Override_default_instance_;
}

void siri::dialogengine::PatternSchemaBinary::Override::CopyFrom(siri::dialogengine::PatternSchemaBinary::Override *this, const siri::dialogengine::PatternSchemaBinary::Override *a2)
{
  if (a2 != this)
  {
    siri::dialogengine::PatternSchemaBinary::Override::Clear(this);
    siri::dialogengine::PatternSchemaBinary::Override::MergeFrom(this, a2);
  }
}

void siri::dialogengine::PatternSchemaBinary::Override::InternalSwap(siri::dialogengine::PatternSchemaBinary::Override *this, siri::dialogengine::PatternSchemaBinary::Override *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v14;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
LABEL_10:
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
      goto LABEL_7;
    }
  }
  else if ((v6 & 1) == 0)
  {
    goto LABEL_8;
  }
  v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
  if ((v4 & 1) == 0)
    goto LABEL_10;
LABEL_6:
  v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
  v9 = *(_QWORD *)(v8 + 16);
  v10 = *(_OWORD *)v8;
  v11 = *(_QWORD *)(v7 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v7;
  *(_QWORD *)(v8 + 16) = v11;
  *(_OWORD *)v7 = v10;
  *(_QWORD *)(v7 + 16) = v9;
LABEL_8:
  v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((siri::dialogengine::PatternSchemaBinary::Override *)((char *)this + 24), (siri::dialogengine::PatternSchemaBinary::Override *)((char *)a2 + 24));
  v13 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v13;
}

void siri::dialogengine::LineNumberBase::~LineNumberBase(void **this)
{
  siri::dialogengine::LineNumberBase::~LineNumberBase(this);
  JUMPOUT(0x1C3B8D890);
}

{
  *this = &off_1E793AEA8;
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

uint64_t siri::dialogengine::LineNumberBase::LineNumberBase(uint64_t a1, uint64_t a2, const std::string *a3)
{
  *(_QWORD *)a1 = &off_1E793AEA8;
  *(_QWORD *)(a1 + 8) = a2;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  siri::dialogengine::LineNumberBase::SetFullPath(a1, a3);
  return a1;
}

void sub_1BFC3B1BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 63) < 0)
    operator delete(*(void **)(v1 + 40));
  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

double siri::dialogengine::LineNumberBase::SetFullPath(uint64_t a1, const std::string *a2)
{
  uint64_t v3;
  void **v4;
  double result;
  std::string v6;

  v3 = a1 + 16;
  std::string::operator=((std::string *)(a1 + 16), a2);
  siri::dialogengine::BaseName(v3, &v6);
  v4 = (void **)(a1 + 40);
  if (*(char *)(a1 + 63) < 0)
    operator delete(*v4);
  result = *(double *)&v6.__r_.__value_.__l.__data_;
  *(_OWORD *)v4 = *(_OWORD *)&v6.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 56) = *((_QWORD *)&v6.__r_.__value_.__l + 2);
  return result;
}

siri::dialogengine::LineNumberBase *siri::dialogengine::LineNumberBase::LineNumberBase(siri::dialogengine::LineNumberBase *this, uint64_t a2, char *__s)
{
  std::string __p;

  *(_QWORD *)this = &off_1E793AEA8;
  *((_QWORD *)this + 1) = a2;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  if (__s)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, __s);
    siri::dialogengine::LineNumberBase::SetFullPath((uint64_t)this, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  return this;
}

void sub_1BFC3B2C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  void **v16;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 63) < 0)
    operator delete(*(void **)(v15 + 40));
  if (*(char *)(v15 + 39) < 0)
    operator delete(*v16);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::LineNumberBase::GetLineNumber(siri::dialogengine::LineNumberBase *this)
{
  return *((_QWORD *)this + 1);
}

BOOL siri::dialogengine::LineNumberBase::HasLineNumber(siri::dialogengine::LineNumberBase *this)
{
  return *((_QWORD *)this + 1) != 0;
}

uint64_t siri::dialogengine::LineNumberBase::SetLineNumber(uint64_t this, uint64_t a2)
{
  *(_QWORD *)(this + 8) = a2;
  return this;
}

void siri::dialogengine::LineNumberBase::GetFullPath(siri::dialogengine::LineNumberBase *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 39) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 2), *((_QWORD *)this + 3));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 1);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 4);
  }
}

void siri::dialogengine::LineNumberBase::GetFilename(siri::dialogengine::LineNumberBase *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 63) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 5), *((_QWORD *)this + 6));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 40);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 7);
  }
}

void siri::dialogengine::CreateJSONObjectFromOutputNode(unsigned int **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t i;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  const void *v13[3];
  __int128 v14;
  _QWORD v15[3];
  __int128 v16;
  _QWORD v17[3];
  __int128 v18;
  _QWORD v19[3];
  __int128 v20;
  _QWORD v21[3];
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  siri::dialogengine::CreateJSONIntVal((siri::dialogengine *)**a1, (uint64_t *)&v12);
  std::string::basic_string[abi:ne180100]<0>(v13, "id");
  v14 = v12;
  v12 = 0uLL;
  siri::dialogengine::CreateJSONIntVal((siri::dialogengine *)(*a1)[1], (uint64_t *)&v11);
  std::string::basic_string[abi:ne180100]<0>(v15, "type");
  v16 = v11;
  v11 = 0uLL;
  siri::dialogengine::CreateJSONStringVal((uint64_t)(*a1 + 2), (uint64_t *)&v10);
  std::string::basic_string[abi:ne180100]<0>(v17, "dialog");
  v18 = v10;
  v10 = 0uLL;
  siri::dialogengine::CreateJSONStringVal((uint64_t)(*a1 + 20), (uint64_t *)&v9);
  std::string::basic_string[abi:ne180100]<0>(v19, "varId");
  v20 = v9;
  v9 = 0uLL;
  siri::dialogengine::CreateJSONStringVal((uint64_t)(*a1 + 8), (uint64_t *)&v8);
  std::string::basic_string[abi:ne180100]<0>(v21, "phraseId");
  v22 = v8;
  v8 = 0uLL;
  std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100](a2, v13, 5);
  for (i = 0; i != -25; i -= 5)
  {
    std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v22 + i * 8);
    if (SHIBYTE(v21[i + 2]) < 0)
      operator delete((void *)v21[i]);
  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1BFC3B560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  uint64_t v17;
  uint64_t i;

  for (i = 160; i != -40; i -= 40)
    std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>::~pair(v17 + i);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_1BFC3B618()
{
  JUMPOUT(0x1BFC3B5DCLL);
}

void sub_1BFC3B624(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  JUMPOUT(0x1BFC3B610);
}

void sub_1BFC3B634()
{
  JUMPOUT(0x1BFC3B610);
}

void siri::dialogengine::CreateJSONObjectFromOutputNodeMap(unsigned int ***a1@<X0>, _QWORD *a2@<X8>)
{
  unsigned int **v3;
  unsigned int **v4;
  unsigned int *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  _QWORD *v19;
  char *v20;
  __int128 v21;
  int64x2_t v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  unsigned int *v26[2];
  const void **v27[3];
  int64x2_t v28;
  char *v29;
  int64x2_t *v30;
  int64x2_t v31;
  char *v32;
  char **v33;

  v28 = 0uLL;
  v29 = 0;
  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      v5 = v3[1];
      v26[0] = *v3;
      v26[1] = v5;
      if (v5)
      {
        v6 = (unint64_t *)(v5 + 2);
        do
          v7 = __ldxr(v6);
        while (__stxr(v7 + 1, v6));
      }
      siri::dialogengine::CreateJSONObjectFromOutputNode(v26, (uint64_t)v27);
      if (v5)
      {
        v8 = (unint64_t *)(v5 + 2);
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          (*(void (**)(unsigned int *))(*(_QWORD *)v5 + 16))(v5);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v5);
        }
      }
      siri::dialogengine::CreateJSONObjectVal(v27, (uint64_t *)&v25);
      v10 = v28.i64[1];
      if (v28.i64[1] >= (unint64_t)v29)
      {
        v12 = (v28.i64[1] - v28.i64[0]) >> 4;
        if ((unint64_t)(v12 + 1) >> 60)
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        v13 = (uint64_t)&v29[-v28.i64[0]] >> 3;
        if (v13 <= v12 + 1)
          v13 = v12 + 1;
        if ((unint64_t)&v29[-v28.i64[0]] >= 0x7FFFFFFFFFFFFFF0)
          v14 = 0xFFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        v33 = &v29;
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v14);
        v17 = &v15[16 * v12];
        *(_OWORD *)v17 = v25;
        v25 = 0uLL;
        v18 = (_QWORD *)v28.i64[1];
        v19 = (_QWORD *)v28.i64[0];
        if (v28.i64[1] == v28.i64[0])
        {
          v22 = vdupq_n_s64(v28.u64[1]);
          v20 = &v15[16 * v12];
        }
        else
        {
          v20 = &v15[16 * v12];
          do
          {
            v21 = *((_OWORD *)v18 - 1);
            v18 -= 2;
            *((_OWORD *)v20 - 1) = v21;
            v20 -= 16;
            *v18 = 0;
            v18[1] = 0;
          }
          while (v18 != v19);
          v22 = v28;
        }
        v11 = v17 + 16;
        v28.i64[0] = (uint64_t)v20;
        v28.i64[1] = (uint64_t)(v17 + 16);
        v31 = v22;
        v23 = v29;
        v29 = &v15[16 * v16];
        v32 = v23;
        v30 = (int64x2_t *)v22.i64[0];
        std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)&v30);
      }
      else
      {
        *(_OWORD *)v28.i64[1] = v25;
        v11 = (_OWORD *)(v10 + 16);
      }
      v28.i64[1] = (uint64_t)v11;
      std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(v27[1]);
      v3 += 2;
    }
    while (v3 != v4);
  }
  v24 = operator new();
  *(_DWORD *)(v24 + 8) = 7;
  *(_QWORD *)v24 = &off_1E7933F18;
  *(_QWORD *)(v24 + 24) = 0;
  *(_QWORD *)(v24 + 32) = 0;
  *(_QWORD *)(v24 + 16) = 0;
  std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::JSONValue>*,std::shared_ptr<siri::dialogengine::JSONValue>*>((char *)(v24 + 16), v28.i64[0], (_QWORD *)v28.i64[1], (v28.i64[1] - v28.i64[0]) >> 4);
  std::shared_ptr<siri::dialogengine::JSONValue>::shared_ptr[abi:ne180100]<siri::dialogengine::ArrayValue,void>(a2, v24);
  v30 = &v28;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
}

void sub_1BFC3B848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;

  MEMORY[0x1C3B8D890](v17, 0x10A1C4037ACD87BLL);
  a14 = (void **)&a17;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void siri::dialogengine::CreateJSONObjectFromAdjacencyList(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  __int128 v18;
  int64x2_t v19;
  char *v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  _QWORD *v30;
  char *v31;
  __int128 v32;
  int64x2_t v33;
  char *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  __int128 v43;
  std::string v44;
  const void **v45[3];
  __int128 v46;
  int64x2_t v47;
  char *v48;
  void *__p;
  unsigned int *v50;
  uint64_t v51;
  int64x2_t v52;
  char *v53;
  int64x2_t *v54;
  int64x2_t v55;
  char *v56;
  char **v57;
  std::string v58;
  __int128 v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v52 = 0uLL;
  v53 = 0;
  v2 = *a1;
  if (a1[1] != *a1)
  {
    v4 = 0;
    do
    {
      __p = 0;
      v50 = 0;
      v51 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(v2 + 24 * v4), *(_QWORD *)(v2 + 24 * v4 + 8), (uint64_t)(*(_QWORD *)(v2 + 24 * v4 + 8) - *(_QWORD *)(v2 + 24 * v4)) >> 2);
      v47 = 0uLL;
      v48 = 0;
      v5 = (unsigned int *)__p;
      v6 = v50;
      while (v5 != v6)
      {
        siri::dialogengine::CreateJSONIntVal((siri::dialogengine *)*v5, (uint64_t *)&v58);
        v7 = v47.i64[1];
        if (v47.i64[1] >= (unint64_t)v48)
        {
          v9 = (v47.i64[1] - v47.i64[0]) >> 4;
          if ((unint64_t)(v9 + 1) >> 60)
            std::vector<BOOL>::__throw_length_error[abi:ne180100]();
          v10 = (uint64_t)&v48[-v47.i64[0]] >> 3;
          if (v10 <= v9 + 1)
            v10 = v9 + 1;
          if ((unint64_t)&v48[-v47.i64[0]] >= 0x7FFFFFFFFFFFFFF0)
            v11 = 0xFFFFFFFFFFFFFFFLL;
          else
            v11 = v10;
          v57 = &v48;
          v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v11);
          v14 = &v12[16 * v9];
          *(_OWORD *)v14 = *(_OWORD *)&v58.__r_.__value_.__l.__data_;
          *(_OWORD *)&v58.__r_.__value_.__l.__data_ = 0uLL;
          v15 = (_QWORD *)v47.i64[1];
          v16 = (_QWORD *)v47.i64[0];
          if (v47.i64[1] == v47.i64[0])
          {
            v19 = vdupq_n_s64(v47.u64[1]);
            v17 = &v12[16 * v9];
          }
          else
          {
            v17 = &v12[16 * v9];
            do
            {
              v18 = *((_OWORD *)v15 - 1);
              v15 -= 2;
              *((_OWORD *)v17 - 1) = v18;
              v17 -= 16;
              *v15 = 0;
              v15[1] = 0;
            }
            while (v15 != v16);
            v19 = v47;
          }
          v8 = v14 + 16;
          v47.i64[0] = (uint64_t)v17;
          v47.i64[1] = (uint64_t)(v14 + 16);
          v55 = v19;
          v20 = v48;
          v48 = &v12[16 * v13];
          v56 = v20;
          v54 = (int64x2_t *)v19.i64[0];
          std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)&v54);
        }
        else
        {
          *(_OWORD *)v47.i64[1] = *(_OWORD *)&v58.__r_.__value_.__l.__data_;
          v8 = (_OWORD *)(v7 + 16);
        }
        v47.i64[1] = (uint64_t)v8;
        ++v5;
      }
      std::to_string(&v44, v4);
      siri::dialogengine::CreateJSONArrayVal(&v47, &v43);
      v58 = v44;
      v59 = v43;
      v43 = 0uLL;
      memset(&v44, 0, sizeof(v44));
      std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100]((uint64_t)v45, (const void **)&v58.__r_.__value_.__l.__data_, 1);
      siri::dialogengine::CreateJSONObjectVal(v45, (uint64_t *)&v46);
      v21 = v52.i64[1];
      if (v52.i64[1] >= (unint64_t)v53)
      {
        v23 = (v52.i64[1] - v52.i64[0]) >> 4;
        if ((unint64_t)(v23 + 1) >> 60)
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        v24 = (uint64_t)&v53[-v52.i64[0]] >> 3;
        if (v24 <= v23 + 1)
          v24 = v23 + 1;
        if ((unint64_t)&v53[-v52.i64[0]] >= 0x7FFFFFFFFFFFFFF0)
          v25 = 0xFFFFFFFFFFFFFFFLL;
        else
          v25 = v24;
        v57 = &v53;
        v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v25);
        v28 = &v26[16 * v23];
        *(_OWORD *)v28 = v46;
        v46 = 0uLL;
        v29 = (_QWORD *)v52.i64[1];
        v30 = (_QWORD *)v52.i64[0];
        if (v52.i64[1] == v52.i64[0])
        {
          v33 = vdupq_n_s64(v52.u64[1]);
          v31 = &v26[16 * v23];
        }
        else
        {
          v31 = &v26[16 * v23];
          do
          {
            v32 = *((_OWORD *)v29 - 1);
            v29 -= 2;
            *((_OWORD *)v31 - 1) = v32;
            v31 -= 16;
            *v29 = 0;
            v29[1] = 0;
          }
          while (v29 != v30);
          v33 = v52;
        }
        v22 = v28 + 16;
        v52.i64[0] = (uint64_t)v31;
        v52.i64[1] = (uint64_t)(v28 + 16);
        v55 = v33;
        v34 = v53;
        v53 = &v26[16 * v27];
        v56 = v34;
        v54 = (int64x2_t *)v33.i64[0];
        std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)&v54);
      }
      else
      {
        *(_OWORD *)v52.i64[1] = v46;
        v22 = (_OWORD *)(v21 + 16);
        v46 = 0uLL;
      }
      v52.i64[1] = (uint64_t)v22;
      std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(v45[1]);
      v35 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
      if (*((_QWORD *)&v59 + 1))
      {
        v36 = (unint64_t *)(*((_QWORD *)&v59 + 1) + 8);
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v58.__r_.__value_.__l.__data_);
      v38 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
      if (*((_QWORD *)&v43 + 1))
      {
        v39 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v44.__r_.__value_.__l.__data_);
      v54 = &v47;
      std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v54);
      if (__p)
      {
        v50 = (unsigned int *)__p;
        operator delete(__p);
      }
      ++v4;
      v2 = *a1;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) > v4);
  }
  v41 = operator new();
  *(_DWORD *)(v41 + 8) = 7;
  *(_QWORD *)v41 = &off_1E7933F18;
  *(_QWORD *)(v41 + 24) = 0;
  *(_QWORD *)(v41 + 32) = 0;
  *(_QWORD *)(v41 + 16) = 0;
  std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::JSONValue>*,std::shared_ptr<siri::dialogengine::JSONValue>*>((char *)(v41 + 16), v52.i64[0], (_QWORD *)v52.i64[1], (v52.i64[1] - v52.i64[0]) >> 4);
  std::shared_ptr<siri::dialogengine::JSONValue>::shared_ptr[abi:ne180100]<siri::dialogengine::ArrayValue,void>(a2, v41);
  v54 = &v52;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v54);
}

void sub_1BFC3BCD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  MEMORY[0x1C3B8D890](v30, 0x10A1C4037ACD87BLL);
  *(_QWORD *)(v31 - 144) = &a30;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v31 - 144));
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogString::uppercase(siri::dialogengine::DialogString *this, siri::dialogengine::Context *lpsrc, const siri::dialogengine::Variable *a3)
{
  char *v3;
  std::string v4[7];
  std::string v5;
  _BYTE v6[168];

  if (lpsrc)
  else
    v3 = 0;
  if (v3[95] < 0)
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)v3 + 9), *((_QWORD *)v3 + 10));
  else
    v4[0] = *(std::string *)(v3 + 3);
  std::string::basic_string[abi:ne180100]<0>(&v5, "");
  siri::dialogengine::SpeakableString::SpeakableString((uint64_t)v6, v4, &v5);
}

uint64_t sub_1BFC3BE3C()
{
  siri::dialogengine *v0;
  uint64_t v1;
  std::string v3;
  std::string v4;
  std::string v5;
  std::string v6;
  std::string v7;
  std::string v8;
  std::string v9;
  std::string v10;
  std::string v11;
  std::string v12;
  std::string v13;
  std::string v14;
  std::string v15;
  std::string v16;
  std::string v17;

  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v10, "uppercase");
  siri::dialogengine::TransformText((siri::dialogengine::SpeakableString *)&v11, v0, (uint64_t)&v10, &v3);
  std::string::operator=(&v11, &v3);
  std::string::operator=(&v12, &v4);
  std::string::operator=(&v13, &v5);
  std::string::operator=(&v14, &v6);
  std::string::operator=(&v15, &v7);
  std::string::operator=(&v16, &v8);
  std::string::operator=(&v17, &v9);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  v1 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&v3, "");
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v10, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
  else
    v10 = v11;
  siri::dialogengine::VariableString::VariableString(v1, &v3, (uint64_t)&v10);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return v1;
}

void sub_1BFC3C080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40)
{
  uint64_t v40;

  if (a14 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8D890](v40, 0x10B3C40D3060B95);
  siri::dialogengine::SpeakableString::~SpeakableString(&a40);
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogString::lowercase(siri::dialogengine::DialogString *this, siri::dialogengine::Context *lpsrc, const siri::dialogengine::Variable *a3)
{
  char *v3;
  std::string v4[7];
  std::string v5;
  _BYTE v6[168];

  if (lpsrc)
  else
    v3 = 0;
  if (v3[95] < 0)
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)v3 + 9), *((_QWORD *)v3 + 10));
  else
    v4[0] = *(std::string *)(v3 + 3);
  std::string::basic_string[abi:ne180100]<0>(&v5, "");
  siri::dialogengine::SpeakableString::SpeakableString((uint64_t)v6, v4, &v5);
}

uint64_t sub_1BFC3C1D0()
{
  siri::dialogengine *v0;
  uint64_t v1;
  std::string v3;
  std::string v4;
  std::string v5;
  std::string v6;
  std::string v7;
  std::string v8;
  std::string v9;
  std::string v10;
  std::string v11;
  std::string v12;
  std::string v13;
  std::string v14;
  std::string v15;
  std::string v16;
  std::string v17;

  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v10, "lowercase");
  siri::dialogengine::TransformText((siri::dialogengine::SpeakableString *)&v11, v0, (uint64_t)&v10, &v3);
  std::string::operator=(&v11, &v3);
  std::string::operator=(&v12, &v4);
  std::string::operator=(&v13, &v5);
  std::string::operator=(&v14, &v6);
  std::string::operator=(&v15, &v7);
  std::string::operator=(&v16, &v8);
  std::string::operator=(&v17, &v9);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  v1 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&v3, "");
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v10, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
  else
    v10 = v11;
  siri::dialogengine::VariableString::VariableString(v1, &v3, (uint64_t)&v10);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return v1;
}

void sub_1BFC3C414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40)
{
  uint64_t v40;

  if (a14 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8D890](v40, 0x10B3C40D3060B95);
  siri::dialogengine::SpeakableString::~SpeakableString(&a40);
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogString::capitalize(siri::dialogengine::DialogString *this, siri::dialogengine::Context *lpsrc, const siri::dialogengine::Variable *a3)
{
  char *v3;
  std::string v4[7];
  std::string v5;
  _BYTE v6[168];

  if (lpsrc)
  else
    v3 = 0;
  if (v3[95] < 0)
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)v3 + 9), *((_QWORD *)v3 + 10));
  else
    v4[0] = *(std::string *)(v3 + 3);
  std::string::basic_string[abi:ne180100]<0>(&v5, "");
  siri::dialogengine::SpeakableString::SpeakableString((uint64_t)v6, v4, &v5);
}

uint64_t sub_1BFC3C564()
{
  siri::dialogengine *v0;
  uint64_t v1;
  std::string v3;
  std::string v4;
  std::string v5;
  std::string v6;
  std::string v7;
  std::string v8;
  std::string v9;
  std::string v10;
  std::string v11;
  std::string v12;
  std::string v13;
  std::string v14;
  std::string v15;
  std::string v16;
  std::string v17;

  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v10, "capitalize");
  siri::dialogengine::TransformText((siri::dialogengine::SpeakableString *)&v11, v0, (uint64_t)&v10, &v3);
  std::string::operator=(&v11, &v3);
  std::string::operator=(&v12, &v4);
  std::string::operator=(&v13, &v5);
  std::string::operator=(&v14, &v6);
  std::string::operator=(&v15, &v7);
  std::string::operator=(&v16, &v8);
  std::string::operator=(&v17, &v9);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  v1 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&v3, "");
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v10, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
  else
    v10 = v11;
  siri::dialogengine::VariableString::VariableString(v1, &v3, (uint64_t)&v10);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return v1;
}

void sub_1BFC3C7A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40)
{
  uint64_t v40;

  if (a14 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8D890](v40, 0x10B3C40D3060B95);
  siri::dialogengine::SpeakableString::~SpeakableString(&a40);
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogString::upperFirst(siri::dialogengine::DialogString *this, siri::dialogengine::Context *lpsrc, const siri::dialogengine::Variable *a3)
{
  char *v3;
  std::string v4[7];
  std::string v5;
  _BYTE v6[168];

  if (lpsrc)
  else
    v3 = 0;
  if (v3[95] < 0)
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)v3 + 9), *((_QWORD *)v3 + 10));
  else
    v4[0] = *(std::string *)(v3 + 3);
  std::string::basic_string[abi:ne180100]<0>(&v5, "");
  siri::dialogengine::SpeakableString::SpeakableString((uint64_t)v6, v4, &v5);
}

uint64_t sub_1BFC3C8F8()
{
  siri::dialogengine *v0;
  uint64_t v1;
  std::string v3;
  std::string v4;
  std::string v5;
  std::string v6;
  std::string v7;
  std::string v8;
  std::string v9;
  std::string v10;
  std::string v11;
  std::string v12;
  std::string v13;
  std::string v14;
  std::string v15;
  std::string v16;
  std::string v17;

  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v10, "upperfirst");
  siri::dialogengine::TransformText((siri::dialogengine::SpeakableString *)&v11, v0, (uint64_t)&v10, &v3);
  std::string::operator=(&v11, &v3);
  std::string::operator=(&v12, &v4);
  std::string::operator=(&v13, &v5);
  std::string::operator=(&v14, &v6);
  std::string::operator=(&v15, &v7);
  std::string::operator=(&v16, &v8);
  std::string::operator=(&v17, &v9);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  v1 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&v3, "");
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v10, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
  else
    v10 = v11;
  siri::dialogengine::VariableString::VariableString(v1, &v3, (uint64_t)&v10);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return v1;
}

void sub_1BFC3CB3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40)
{
  uint64_t v40;

  if (a14 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8D890](v40, 0x10B3C40D3060B95);
  siri::dialogengine::SpeakableString::~SpeakableString(&a40);
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogString::lowerFirst(siri::dialogengine::DialogString *this, siri::dialogengine::Context *lpsrc, const siri::dialogengine::Variable *a3)
{
  char *v3;
  std::string v4[7];
  std::string v5;
  _BYTE v6[168];

  if (lpsrc)
  else
    v3 = 0;
  if (v3[95] < 0)
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)v3 + 9), *((_QWORD *)v3 + 10));
  else
    v4[0] = *(std::string *)(v3 + 3);
  std::string::basic_string[abi:ne180100]<0>(&v5, "");
  siri::dialogengine::SpeakableString::SpeakableString((uint64_t)v6, v4, &v5);
}

uint64_t sub_1BFC3CC8C()
{
  siri::dialogengine *v0;
  uint64_t v1;
  std::string v3;
  std::string v4;
  std::string v5;
  std::string v6;
  std::string v7;
  std::string v8;
  std::string v9;
  std::string v10;
  std::string v11;
  std::string v12;
  std::string v13;
  std::string v14;
  std::string v15;
  std::string v16;
  std::string v17;

  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v10, "lowerfirst");
  siri::dialogengine::TransformText((siri::dialogengine::SpeakableString *)&v11, v0, (uint64_t)&v10, &v3);
  std::string::operator=(&v11, &v3);
  std::string::operator=(&v12, &v4);
  std::string::operator=(&v13, &v5);
  std::string::operator=(&v14, &v6);
  std::string::operator=(&v15, &v7);
  std::string::operator=(&v16, &v8);
  std::string::operator=(&v17, &v9);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  v1 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&v3, "");
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v10, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
  else
    v10 = v11;
  siri::dialogengine::VariableString::VariableString(v1, &v3, (uint64_t)&v10);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return v1;
}

void sub_1BFC3CED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40)
{
  uint64_t v40;

  if (a14 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8D890](v40, 0x10B3C40D3060B95);
  siri::dialogengine::SpeakableString::~SpeakableString(&a40);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogString::startsWithCapital(siri::dialogengine::DialogString *this, siri::dialogengine::Context *lpsrc, const siri::dialogengine::Variable *a3)
{
  char *v4;
  char v5;
  uint64_t v6;
  std::string __p;

  if (lpsrc)
  else
    v4 = 0;
  if (v4[95] < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v4 + 9), *((_QWORD *)v4 + 10));
  else
    __p = *(std::string *)(v4 + 3);
  v5 = siri::dialogengine::StartsWithCapital(this, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v6 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::dialogengine::VariableBoolean::VariableBoolean(v6, &__p, v5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v6;
}

void sub_1BFC3D07C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (a14 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8D890](v14, 0x10B3C408E4F17DDLL);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogString::length(siri::dialogengine::DialogString *this, siri::dialogengine::Context *lpsrc, const siri::dialogengine::Variable *a3)
{
  char *v3;
  uint64_t v4;
  std::basic_string<char32_t>::size_type UnicodeLength;
  std::string __p;
  std::string v8;

  if (lpsrc)
  else
    v3 = 0;
  v4 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&v8, "");
  if (v3[95] < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v3 + 9), *((_QWORD *)v3 + 10));
  else
    __p = *(std::string *)(v3 + 3);
  UnicodeLength = siri::dialogengine::GetUnicodeLength((uint64_t)&__p);
  siri::dialogengine::VariableNumber::VariableNumber(v4, &v8, (double)UnicodeLength);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  return v4;
}

void sub_1BFC3D1B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a20 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8D890](v20, 0x10B3C4030AE2ACELL);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogString::byteLength(siri::dialogengine::DialogString *this, siri::dialogengine::Context *lpsrc, const siri::dialogengine::Variable *a3)
{
  char *v3;
  uint64_t v4;
  std::string::size_type size;
  std::string __p;
  std::string v8;

  if (lpsrc)
  else
    v3 = 0;
  v4 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&v8, "");
  if (v3[95] < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v3 + 9), *((_QWORD *)v3 + 10));
  else
    __p = *(std::string *)(v3 + 3);
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  siri::dialogengine::VariableNumber::VariableNumber(v4, &v8, (double)size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  return v4;
}

void sub_1BFC3D2F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a20 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8D890](v20, 0x10B3C4030AE2ACELL);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogString::print(siri::dialogengine::DialogString *this, siri::dialogengine::Context *lpsrc, const siri::dialogengine::Variable *a3)
{
  char *v3;
  uint64_t v4;
  std::string __p;
  std::string v7;

  if (lpsrc)
  else
    v3 = 0;
  v4 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&v7, "");
  if (v3[95] < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v3 + 9), *((_QWORD *)v3 + 10));
  else
    __p = *(std::string *)(v3 + 3);
  siri::dialogengine::VariableString::VariableString(v4, &v7, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return v4;
}

void sub_1BFC3D428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a20 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8D890](v20, 0x10B3C40D3060B95);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogString::speak(siri::dialogengine::DialogString *this, siri::dialogengine::Context *lpsrc, const siri::dialogengine::Variable *a3)
{
  char *v3;
  uint64_t v4;
  std::string __p;
  std::string v7;

  if (lpsrc)
  else
    v3 = 0;
  v4 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&v7, "");
  if (v3[119] < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v3 + 12), *((_QWORD *)v3 + 13));
  else
    __p = *(std::string *)(v3 + 4);
  siri::dialogengine::VariableString::VariableString(v4, &v7, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return v4;
}

void sub_1BFC3D558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a20 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8D890](v20, 0x10B3C40D3060B95);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogString::count(siri::dialogengine::DialogString *this, siri::dialogengine::Context *a2, const siri::dialogengine::Variable *a3)
{
  uint64_t v5;
  void *v7[2];
  char v8;
  void *__p[2];
  char v10;
  std::string v11;

  v5 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&v11, "");
  std::string::basic_string[abi:ne180100]<0>(v7, "count");
  siri::dialogengine::GetGrammarFeature(__p, this, a2, (uint64_t)v7);
  siri::dialogengine::VariableString::VariableString(v5, &v11, (uint64_t)__p);
  if (v10 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return v5;
}

void sub_1BFC3D670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (a27 < 0)
    operator delete(a22);
  MEMORY[0x1C3B8D890](v27, 0x10B3C40D3060B95);
  _Unwind_Resume(a1);
}

void siri::dialogengine::GetGrammarFeature(_QWORD *a1, siri::dialogengine *a2, void *lpsrc, uint64_t a4)
{
  void *v7;
  void *v8[2];
  void *v9[2];
  __int128 v10;
  void *v11[2];
  void *v12[2];
  __int128 v13;
  void *v14[2];
  void *v15[2];
  __int128 v16;
  void *__p[2];
  uint64_t v18;

  if (lpsrc
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v7 + 48))(v8);
  }
  else
  {
    v18 = 0;
    v16 = 0u;
    *(_OWORD *)__p = 0u;
    *(_OWORD *)v14 = 0u;
    *(_OWORD *)v15 = 0u;
    *(_OWORD *)v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    *(_OWORD *)v11 = 0u;
    *(_OWORD *)v8 = 0u;
    *(_OWORD *)v9 = 0u;
  }
  siri::dialogengine::GetFeatureValue(a2, (uint64_t)v8, a4, a1);
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v16) < 0)
    operator delete(v15[1]);
  if (SHIBYTE(v15[0]) < 0)
    operator delete(v14[0]);
  if (SHIBYTE(v13) < 0)
    operator delete(v12[1]);
  if (SHIBYTE(v12[0]) < 0)
    operator delete(v11[0]);
  if (SHIBYTE(v10) < 0)
    operator delete(v9[1]);
  if (SHIBYTE(v9[0]) < 0)
    operator delete(v8[0]);
}

void sub_1BFC3D7EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  siri::dialogengine::SpeakableString::~SpeakableString(&a9);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogString::gender(siri::dialogengine::DialogString *this, siri::dialogengine::Context *a2, const siri::dialogengine::Variable *a3)
{
  uint64_t v5;
  void *v7[2];
  char v8;
  void *__p[2];
  char v10;
  std::string v11;

  v5 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&v11, "");
  std::string::basic_string[abi:ne180100]<0>(v7, "gender");
  siri::dialogengine::GetGrammarFeature(__p, this, a2, (uint64_t)v7);
  siri::dialogengine::VariableString::VariableString(v5, &v11, (uint64_t)__p);
  if (v10 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return v5;
}

void sub_1BFC3D8C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (a27 < 0)
    operator delete(a22);
  MEMORY[0x1C3B8D890](v27, 0x10B3C40D3060B95);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogString::animacy(siri::dialogengine::DialogString *this, siri::dialogengine::Context *a2, const siri::dialogengine::Variable *a3)
{
  uint64_t v5;
  void *v7[2];
  char v8;
  void *__p[2];
  char v10;
  std::string v11;

  v5 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&v11, "");
  std::string::basic_string[abi:ne180100]<0>(v7, "animacy");
  siri::dialogengine::GetGrammarFeature(__p, this, a2, (uint64_t)v7);
  siri::dialogengine::VariableString::VariableString(v5, &v11, (uint64_t)__p);
  if (v10 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return v5;
}

void sub_1BFC3D9F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (a27 < 0)
    operator delete(a22);
  MEMORY[0x1C3B8D890](v27, 0x10B3C40D3060B95);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogString::case_(siri::dialogengine::DialogString *this, siri::dialogengine::Context *a2, const siri::dialogengine::Variable *a3)
{
  uint64_t v5;
  void *v7[2];
  char v8;
  void *__p[2];
  char v10;
  std::string v11;

  v5 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&v11, "");
  std::string::basic_string[abi:ne180100]<0>(v7, "case");
  siri::dialogengine::GetGrammarFeature(__p, this, a2, (uint64_t)v7);
  siri::dialogengine::VariableString::VariableString(v5, &v11, (uint64_t)__p);
  if (v10 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return v5;
}

void sub_1BFC3DB24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (a27 < 0)
    operator delete(a22);
  MEMORY[0x1C3B8D890](v27, 0x10B3C40D3060B95);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogString::definiteness(siri::dialogengine::DialogString *this, siri::dialogengine::Context *a2, const siri::dialogengine::Variable *a3)
{
  uint64_t v5;
  void *v7[2];
  char v8;
  void *__p[2];
  char v10;
  std::string v11;

  v5 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&v11, "");
  std::string::basic_string[abi:ne180100]<0>(v7, "definiteness");
  siri::dialogengine::GetGrammarFeature(__p, this, a2, (uint64_t)v7);
  siri::dialogengine::VariableString::VariableString(v5, &v11, (uint64_t)__p);
  if (v10 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return v5;
}

void sub_1BFC3DC54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (a27 < 0)
    operator delete(a22);
  MEMORY[0x1C3B8D890](v27, 0x10B3C40D3060B95);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogString::pos(siri::dialogengine::DialogString *this, siri::dialogengine::Context *a2, const siri::dialogengine::Variable *a3)
{
  uint64_t v5;
  void *v7[2];
  char v8;
  void *__p[2];
  char v10;
  std::string v11;

  v5 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&v11, "");
  std::string::basic_string[abi:ne180100]<0>(v7, "pos");
  siri::dialogengine::GetGrammarFeature(__p, this, a2, (uint64_t)v7);
  siri::dialogengine::VariableString::VariableString(v5, &v11, (uint64_t)__p);
  if (v10 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return v5;
}

void sub_1BFC3DD84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (a27 < 0)
    operator delete(a22);
  MEMORY[0x1C3B8D890](v27, 0x10B3C40D3060B95);
  _Unwind_Resume(a1);
}

std::string *siri::dialogengine::DialogString::defArticle(siri::dialogengine::DialogString *this, siri::dialogengine::Context *a2, const siri::dialogengine::Variable *a3)
{
  std::string *v5;
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *v11;
  char v12;
  void *v13;
  char v14;
  void *v15;
  char v16;
  void *v17;
  char v18;
  void *v19;
  char v20;
  void *__p;
  char v22;
  std::string v23;

  v5 = (std::string *)operator new();
  std::string::basic_string[abi:ne180100]<0>(&v23, "");
  std::string::basic_string[abi:ne180100]<0>(v7, "defArticle");
  siri::dialogengine::GetInflection((uint64_t)v9, this, a2, (__int128 *)v7);
  siri::dialogengine::VariableString::VariableString(v5, &v23, (const siri::dialogengine::SpeakableString *)v9);
  if (v22 < 0)
    operator delete(__p);
  if (v20 < 0)
    operator delete(v19);
  if (v18 < 0)
    operator delete(v17);
  if (v16 < 0)
    operator delete(v15);
  if (v14 < 0)
    operator delete(v13);
  if (v12 < 0)
    operator delete(v11);
  if (v10 < 0)
    operator delete(v9[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  return v5;
}

void sub_1BFC3DF14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  uint64_t v16;
  uint64_t v17;

  siri::dialogengine::SpeakableString::~SpeakableString(&a16);
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v17 - 33) < 0)
    operator delete(*(void **)(v17 - 56));
  MEMORY[0x1C3B8D890](v16, 0x10B3C40D3060B95);
  _Unwind_Resume(a1);
}

void siri::dialogengine::GetInflection(uint64_t a1, siri::dialogengine *a2, void *lpsrc, __int128 *a4)
{
  void *v7;
  __int128 *v8;
  std::string *v9;
  __int128 *v10;
  std::string *v11;
  void *__p[2];
  char v13;
  __int128 *v14;
  __int128 *v15;
  char *v16;
  void *v17[2];
  void *v18[2];
  __int128 v19;
  void *v20[2];
  void *v21[2];
  __int128 v22;
  void *v23[2];
  void *v24[2];
  __int128 v25;
  void *v26[2];
  uint64_t v27;
  __int128 **v28;
  char v29;
  std::string v30;
  __int128 v31;
  std::string::size_type v32;
  std::string::value_type v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (lpsrc
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v7 + 48))(v17);
  }
  else
  {
    v27 = 0;
    v25 = 0u;
    *(_OWORD *)v26 = 0u;
    *(_OWORD *)v23 = 0u;
    *(_OWORD *)v24 = 0u;
    *(_OWORD *)v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    *(_OWORD *)v20 = 0u;
    *(_OWORD *)v17 = 0u;
    *(_OWORD *)v18 = 0u;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  siri::dialogengine::SemanticFeatureConstraint::SemanticFeatureConstraint(&v30, a4, (__int128 *)__p);
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v28 = &v14;
  v29 = 0;
  v8 = (__int128 *)operator new(0x38uLL);
  v9 = (std::string *)v8;
  v14 = v8;
  v15 = v8;
  v10 = (__int128 *)((char *)v8 + 56);
  v16 = (char *)v8 + 56;
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)v8, v30.__r_.__value_.__l.__data_, v30.__r_.__value_.__l.__size_);
  else
    *(std::string *)v8 = v30;
  v11 = v9 + 1;
  if (SHIBYTE(v32) < 0)
  {
    std::string::__init_copy_ctor_external(v11, (const std::string::value_type *)v31, *((std::string::size_type *)&v31 + 1));
  }
  else
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v31;
    v9[1].__r_.__value_.__r.__words[2] = v32;
  }
  v9[2].__r_.__value_.__s.__data_[0] = v33;
  v15 = v10;
  siri::dialogengine::InflectString((std::string *)v17, a2, &v14, 1, a1);
  v28 = &v14;
  std::vector<siri::dialogengine::SemanticFeatureConstraint>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
  if (SHIBYTE(v32) < 0)
    operator delete((void *)v31);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (v13 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v27) < 0)
    operator delete(v26[0]);
  if (SHIBYTE(v25) < 0)
    operator delete(v24[1]);
  if (SHIBYTE(v24[0]) < 0)
    operator delete(v23[0]);
  if (SHIBYTE(v22) < 0)
    operator delete(v21[1]);
  if (SHIBYTE(v21[0]) < 0)
    operator delete(v20[0]);
  if (SHIBYTE(v19) < 0)
    operator delete(v18[1]);
  if (SHIBYTE(v18[0]) < 0)
    operator delete(v17[0]);
}

void sub_1BFC3E1AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  uint64_t v18;
  uint64_t v19;

  if (*(char *)(v18 + 23) < 0)
    operator delete(*(void **)v18);
  std::vector<siri::dialogengine::SemanticFeatureConstraint>::__destroy_vector::operator()[abi:ne180100]((void ***)(v19 - 128));
  std::pair<std::string const,std::string>::~pair(v19 - 112);
  if (a14 < 0)
    operator delete(__p);
  siri::dialogengine::SpeakableString::~SpeakableString(&a18);
  _Unwind_Resume(a1);
}

std::string *siri::dialogengine::DialogString::indefArticle(siri::dialogengine::DialogString *this, siri::dialogengine::Context *a2, const siri::dialogengine::Variable *a3)
{
  std::string *v5;
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;
  void *v11;
  char v12;
  void *v13;
  char v14;
  void *v15;
  char v16;
  void *v17;
  char v18;
  void *v19;
  char v20;
  void *__p;
  char v22;
  std::string v23;

  v5 = (std::string *)operator new();
  std::string::basic_string[abi:ne180100]<0>(&v23, "");
  std::string::basic_string[abi:ne180100]<0>(v7, "indefArticle");
  siri::dialogengine::GetInflection((uint64_t)v9, this, a2, (__int128 *)v7);
  siri::dialogengine::VariableString::VariableString(v5, &v23, (const siri::dialogengine::SpeakableString *)v9);
  if (v22 < 0)
    operator delete(__p);
  if (v20 < 0)
    operator delete(v19);
  if (v18 < 0)
    operator delete(v17);
  if (v16 < 0)
    operator delete(v15);
  if (v14 < 0)
    operator delete(v13);
  if (v12 < 0)
    operator delete(v11);
  if (v10 < 0)
    operator delete(v9[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  return v5;
}

void sub_1BFC3E34C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  uint64_t v16;
  uint64_t v17;

  siri::dialogengine::SpeakableString::~SpeakableString(&a16);
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v17 - 33) < 0)
    operator delete(*(void **)(v17 - 56));
  MEMORY[0x1C3B8D890](v16, 0x10B3C40D3060B95);
  _Unwind_Resume(a1);
}

void YAML::detail::memory_holder::merge(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v3 = *a1;
  if (v3 != *(_QWORD *)a2)
  {
    std::set<std::shared_ptr<YAML::detail::node>>::insert[abi:ne180100]<std::__tree_const_iterator<std::shared_ptr<YAML::detail::node>,std::__tree_node<std::shared_ptr<YAML::detail::node>,void *> *,long>>(v3, **(_QWORD ***)a2, (_QWORD *)(*(_QWORD *)a2 + 8));
    v6 = *a1;
    v5 = a1[1];
    if (v5)
    {
      v7 = (unint64_t *)(v5 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = *(std::__shared_weak_count **)(a2 + 8);
    *(_QWORD *)a2 = v6;
    *(_QWORD *)(a2 + 8) = v5;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
}

void std::set<std::shared_ptr<YAML::detail::node>>::insert[abi:ne180100]<std::__tree_const_iterator<std::shared_ptr<YAML::detail::node>,std::__tree_node<std::shared_ptr<YAML::detail::node>,void *> *,long>>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  _QWORD *v8;
  uint64_t *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  unint64_t v14;
  uint64_t **v15;
  uint64_t **v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v24[2];
  char v25;
  uint64_t v26;
  uint64_t v27;

  if (a2 != a3)
  {
    v26 = v3;
    v27 = v4;
    v6 = a2;
    v8 = (_QWORD *)(a1 + 8);
    do
    {
      v9 = *(uint64_t **)(a1 + 8);
      v10 = v8;
      if (*(_QWORD **)a1 == v8)
        goto LABEL_9;
      v11 = *(_QWORD **)(a1 + 8);
      v12 = v8;
      if (v9)
      {
        do
        {
          v10 = v11;
          v11 = (_QWORD *)v11[1];
        }
        while (v11);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v12[2];
          v13 = *v10 == (_QWORD)v12;
          v12 = v10;
        }
        while (v13);
      }
      v14 = v6[4];
      if (v10[4] < v14)
      {
LABEL_9:
        if (v9)
          v15 = (uint64_t **)v10;
        else
          v15 = (uint64_t **)v8;
        if (v9)
          v16 = (uint64_t **)(v10 + 1);
        else
          v16 = (uint64_t **)v8;
      }
      else
      {
        v15 = (uint64_t **)v8;
        v16 = (uint64_t **)v8;
        if (v9)
        {
          v16 = (uint64_t **)v8;
          while (1)
          {
            while (1)
            {
              v15 = (uint64_t **)v9;
              v23 = v9[4];
              if (v14 >= v23)
                break;
              v9 = *v15;
              v16 = v15;
              if (!*v15)
                goto LABEL_16;
            }
            if (v23 >= v14)
              break;
            v16 = v15 + 1;
            v9 = v15[1];
            if (!v9)
              goto LABEL_16;
          }
        }
      }
      if (!*v16)
      {
LABEL_16:
        v17 = (uint64_t *)operator new(0x30uLL);
        v24[1] = v8;
        v17[4] = v6[4];
        v18 = v6[5];
        v17[5] = v18;
        if (v18)
        {
          v19 = (unint64_t *)(v18 + 8);
          do
            v20 = __ldxr(v19);
          while (__stxr(v20 + 1, v19));
        }
        v25 = 1;
        std::__tree<std::string>::__insert_node_at((uint64_t **)a1, (uint64_t)v15, v16, v17);
        v24[0] = 0;
        std::unique_ptr<std::__tree_node<std::shared_ptr<YAML::detail::node>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<YAML::detail::node>,void *>>>>::reset[abi:ne180100]((uint64_t)v24);
      }
      v21 = (_QWORD *)v6[1];
      if (v21)
      {
        do
        {
          v22 = v21;
          v21 = (_QWORD *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = (_QWORD *)v6[2];
          v13 = *v22 == (_QWORD)v6;
          v6 = v22;
        }
        while (!v13);
      }
      v6 = v22;
    }
    while (v22 != a3);
  }
}

void std::unique_ptr<std::__tree_node<std::shared_ptr<YAML::detail::node>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<YAML::detail::node>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

void YAML::detail::memory::merge(uint64_t a1, uint64_t a2)
{
  std::set<std::shared_ptr<YAML::detail::node>>::insert[abi:ne180100]<std::__tree_const_iterator<std::shared_ptr<YAML::detail::node>,std::__tree_node<std::shared_ptr<YAML::detail::node>,void *> *,long>>(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
}

std::__shared_weak_count_vtbl *YAML::detail::memory::create_node(YAML::detail::memory *this)
{
  std::__shared_weak_count_vtbl *v2;
  void (__cdecl *v3)(std::__shared_weak_count *__hidden);
  uint64_t v4;
  _QWORD *v5;
  void (__cdecl *v6)(std::__shared_weak_count *__hidden);
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  uint64_t *v9;
  uint64_t **v10;
  uint64_t **v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD v17[2];
  char v18;

  v2 = (std::__shared_weak_count_vtbl *)operator new();
  v3 = (void (__cdecl *)(std::__shared_weak_count *__hidden))operator new();
  v4 = operator new();
  *(_BYTE *)v4 = 0;
  *(_QWORD *)(v4 + 4) = -1;
  *(_QWORD *)(v4 + 12) = 0x1FFFFFFFFLL;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_DWORD *)(v4 + 48) = 0;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_QWORD *)(v4 + 136) = v4 + 136;
  *(_QWORD *)(v4 + 144) = v4 + 136;
  *(_QWORD *)(v4 + 152) = 0;
  *(_QWORD *)v3 = v4;
  v5 = (_QWORD *)operator new();
  *v5 = &off_1E7938FD8;
  v5[1] = 0;
  v5[2] = 0;
  v5[3] = v4;
  *((_QWORD *)v3 + 1) = v5;
  v2->~__shared_weak_count = v3;
  v17[0] = v3;
  v6 = (void (__cdecl *)(std::__shared_weak_count *__hidden))operator new();
  *(_QWORD *)v6 = &off_1E7939050;
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *((_QWORD *)v6 + 3) = v3;
  v2->__on_zero_shared_weak = 0;
  v2->__get_deleter = 0;
  v2->~__shared_weak_count_0 = v6;
  v2->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))&v2->__get_deleter;
  v7 = (std::__shared_weak_count *)operator new();
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_1E79390C8;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = v2;
  v9 = (uint64_t *)*((_QWORD *)this + 1);
  v10 = (uint64_t **)((char *)this + 8);
  v11 = (uint64_t **)((char *)this + 8);
  if (v9)
  {
    while (1)
    {
      while (1)
      {
        v11 = (uint64_t **)v9;
        v12 = v9[4];
        if ((unint64_t)v2 >= v12)
          break;
        v9 = *v11;
        v10 = v11;
        if (!*v11)
          goto LABEL_8;
      }
      if (v12 >= (unint64_t)v2)
        break;
      v9 = v11[1];
      if (!v9)
      {
        v10 = v11 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    v13 = (uint64_t *)operator new(0x30uLL);
    v17[1] = (char *)this + 8;
    v13[4] = (uint64_t)v2;
    v13[5] = (uint64_t)v7;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    v18 = 1;
    std::__tree<std::string>::__insert_node_at((uint64_t **)this, (uint64_t)v11, v10, v13);
    v17[0] = 0;
    std::unique_ptr<std::__tree_node<std::shared_ptr<YAML::detail::node>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<YAML::detail::node>,void *>>>>::reset[abi:ne180100]((uint64_t)v17);
  }
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  return v2;
}

void sub_1BFC3E874(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::default_delete<YAML::detail::node>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (result)
  {
    v1 = result;
    std::__tree<std::__value_type<YAML::detail::node_ref const*,int>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,int>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,int>>>::destroy(*(_QWORD **)(result + 24));
    v2 = *(std::__shared_weak_count **)(v1 + 8);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    JUMPOUT(0x1C3B8D890);
  }
  return result;
}

void std::__shared_ptr_pointer<YAML::detail::node *,std::shared_ptr<YAML::detail::node>::__shared_ptr_default_delete<YAML::detail::node,YAML::detail::node>,std::allocator<YAML::detail::node>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_pointer<YAML::detail::node *,std::shared_ptr<YAML::detail::node>::__shared_ptr_default_delete<YAML::detail::node,YAML::detail::node>,std::allocator<YAML::detail::node>>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<YAML::detail::node>::operator()[abi:ne180100](*(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<YAML::detail::node *,std::shared_ptr<YAML::detail::node>::__shared_ptr_default_delete<YAML::detail::node,YAML::detail::node>,std::allocator<YAML::detail::node>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<YAML::detail::node_ref *,std::shared_ptr<YAML::detail::node_ref>::__shared_ptr_default_delete<YAML::detail::node_ref,YAML::detail::node_ref>,std::allocator<YAML::detail::node_ref>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_pointer<YAML::detail::node_ref *,std::shared_ptr<YAML::detail::node_ref>::__shared_ptr_default_delete<YAML::detail::node_ref,YAML::detail::node_ref>,std::allocator<YAML::detail::node_ref>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](result);
    JUMPOUT(0x1C3B8D890);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<YAML::detail::node_ref *,std::shared_ptr<YAML::detail::node_ref>::__shared_ptr_default_delete<YAML::detail::node_ref,YAML::detail::node_ref>,std::allocator<YAML::detail::node_ref>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::default_delete<YAML::detail::node_data>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  void *v2;
  void *v3;

  if (result)
  {
    v1 = result;
    std::__list_imp<std::pair<YAML::detail::node *,YAML::detail::node *>>::clear((_QWORD *)(result + 136));
    v2 = *(void **)(v1 + 112);
    if (v2)
    {
      *(_QWORD *)(v1 + 120) = v2;
      operator delete(v2);
    }
    v3 = *(void **)(v1 + 80);
    if (v3)
    {
      *(_QWORD *)(v1 + 88) = v3;
      operator delete(v3);
    }
    if (*(char *)(v1 + 79) < 0)
      operator delete(*(void **)(v1 + 56));
    if (*(char *)(v1 + 47) < 0)
      operator delete(*(void **)(v1 + 24));
    JUMPOUT(0x1C3B8D890);
  }
  return result;
}

void std::__shared_ptr_pointer<YAML::detail::node_data *,std::shared_ptr<YAML::detail::node_data>::__shared_ptr_default_delete<YAML::detail::node_data,YAML::detail::node_data>,std::allocator<YAML::detail::node_data>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_pointer<YAML::detail::node_data *,std::shared_ptr<YAML::detail::node_data>::__shared_ptr_default_delete<YAML::detail::node_data,YAML::detail::node_data>,std::allocator<YAML::detail::node_data>>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<YAML::detail::node_data>::operator()[abi:ne180100](*(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<YAML::detail::node_data *,std::shared_ptr<YAML::detail::node_data>::__shared_ptr_default_delete<YAML::detail::node_data,YAML::detail::node_data>,std::allocator<YAML::detail::node_data>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void siri::dialogengine::ParseCATSchemaBinary(char *a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t *a4@<X8>)
{
  unint64_t v8;
  unsigned __int8 v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  __int128 v15;
  uint64_t v16;
  std::string::size_type size;
  std::string::size_type v18;
  uint64_t v19;
  int v20;
  unsigned __int8 *v21;
  std::string *v22;
  std::string *v23;
  __int128 v24;
  int v25;
  const std::string::value_type *v26;
  std::string::size_type v27;
  std::string *v28;
  __int128 v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t *v33;
  uint64_t i;
  uint64_t v35;
  int v36;
  int v37;
  std::string *v38;
  __int128 v39;
  std::string *v40;
  __int128 v41;
  int v42;
  const std::string::value_type *v43;
  std::string::size_type v44;
  std::string *v45;
  __int128 v46;
  std::string *v47;
  __int128 v48;
  uint64_t *v49;
  uint64_t j;
  uint64_t v51;
  int v52;
  std::string *v53;
  __int128 v54;
  std::string *v55;
  __int128 v56;
  int v57;
  const std::string::value_type *v58;
  std::string::size_type v59;
  std::string *v60;
  __int128 v61;
  std::string *v62;
  __int128 v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  __int128 *v68;
  __int128 v69;
  int v70;
  std::string *v71;
  __int128 v72;
  int v73;
  const std::string::value_type *v74;
  std::string::size_type v75;
  std::string *v76;
  __int128 v77;
  std::string *v78;
  __int128 v79;
  int v80;
  const std::string::value_type *v81;
  std::string::size_type v82;
  std::string *v83;
  __int128 v84;
  int v85;
  int v86;
  std::string *v87;
  __int128 v88;
  std::string *v89;
  __int128 v90;
  int v91;
  const std::string::value_type *v92;
  std::string::size_type v93;
  std::string *v94;
  __int128 v95;
  std::string *v96;
  __int128 v97;
  uint64_t v98;
  uint64_t *v99;
  std::string v100;
  std::string v101;
  void *__p[2];
  std::string::size_type v103;
  unsigned __int8 v104;
  char v105;
  unsigned __int8 v106;
  unsigned __int8 v107;
  _BYTE v108[40];
  _BYTE v109[64];
  __int128 v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  _BYTE v114[80];
  std::string v115;
  std::string v116;
  std::string v117;
  std::string v118;
  std::string v119;
  _BYTE v120[32];
  unsigned int v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  __int128 *v128;
  std::string *__str;
  std::string *v130;
  std::string *v131;
  int v132;
  int v133;
  void *v134[2];
  unsigned __int8 v135;

  siri::dialogengine::ParseGzippedFile();
  v8 = v135;
  v9 = v135;
  if ((v135 & 0x80u) != 0)
    v8 = (unint64_t)v134[1];
  if (v8)
  {
    siri::dialogengine::SchemaBinary::Schema::Schema((siri::dialogengine::SchemaBinary::Schema *)v120);
    if ((google::protobuf::MessageLite::ParseFromString(v120, v134) & 1) == 0)
      goto LABEL_14;
    v10 = (_QWORD *)v127;
    v11 = *(char *)(v127 + 23);
    if (v11 < 0)
    {
      if (*(_QWORD *)(v127 + 8) != 8)
      {
LABEL_14:
        std::operator+<char>();
        siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 3u);
        if (SHIBYTE(v103) < 0)
          operator delete(__p[0]);
        *a4 = 0;
        a4[1] = 0;
        goto LABEL_17;
      }
      v10 = *(_QWORD **)v127;
    }
    else if (v11 != 8)
    {
      goto LABEL_14;
    }
    if (*v10 != 0x4250414D45484353)
      goto LABEL_14;
    v12 = operator new();
    *(_QWORD *)(v12 + 112) = 0;
    *(_OWORD *)(v12 + 80) = 0u;
    *(_OWORD *)(v12 + 96) = 0u;
    *(_OWORD *)(v12 + 48) = 0u;
    *(_OWORD *)(v12 + 64) = 0u;
    *(_OWORD *)(v12 + 16) = 0u;
    *(_OWORD *)(v12 + 32) = 0u;
    *(_OWORD *)v12 = 0u;
    *(_QWORD *)(v12 + 120) = 0x100000001;
    *(_QWORD *)(v12 + 136) = 0;
    *(_QWORD *)(v12 + 128) = v12 + 136;
    *(_QWORD *)(v12 + 160) = 0;
    *(_QWORD *)(v12 + 144) = 0;
    *(_QWORD *)(v12 + 152) = v12 + 160;
    *(_QWORD *)(v12 + 192) = 0;
    *(_QWORD *)(v12 + 184) = 0;
    *(_QWORD *)(v12 + 168) = 0;
    *(_QWORD *)(v12 + 176) = v12 + 184;
    *a4 = v12;
    __p[0] = (void *)v12;
    v13 = (_QWORD *)operator new();
    *v13 = &off_1E79392B0;
    v13[1] = 0;
    v13[2] = 0;
    v13[3] = v12;
    a4[1] = (uint64_t)v13;
    v99 = a4;
    std::string::operator=((std::string *)(v12 + 24), (const std::string *)a2);
    std::string::operator=((std::string *)(v12 + 48), __str);
    if (v132 == 1)
      v14 = 1;
    else
      v14 = 2;
    *(_DWORD *)(v12 + 120) = v14;
    std::string::operator=((std::string *)(v12 + 72), v130);
    if ((v120[16] & 0x20) != 0)
      std::string::operator=((std::string *)(v12 + 96), v131);
    if (*((char *)v128 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v119, *(const std::string::value_type **)v128, *((_QWORD *)v128 + 1));
    }
    else
    {
      v15 = *v128;
      v119.__r_.__value_.__r.__words[2] = *((_QWORD *)v128 + 2);
      *(_OWORD *)&v119.__r_.__value_.__l.__data_ = v15;
    }
    v16 = HIBYTE(v119.__r_.__value_.__r.__words[2]);
    size = v119.__r_.__value_.__l.__size_;
    if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = HIBYTE(v119.__r_.__value_.__r.__words[2]);
    else
      v18 = v119.__r_.__value_.__l.__size_;
    v19 = a3[23];
    v20 = (char)v19;
    if ((v19 & 0x80u) != 0)
      v19 = *((_QWORD *)a3 + 1);
    if (v18 == v19)
    {
      if (v20 >= 0)
        v21 = a3;
      else
        v21 = *(unsigned __int8 **)a3;
      if ((*((_BYTE *)&v119.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        if (memcmp(v119.__r_.__value_.__l.__data_, v21, v119.__r_.__value_.__l.__size_) && size)
          goto LABEL_47;
      }
      else if (*((_BYTE *)&v119.__r_.__value_.__s + 23))
      {
        v22 = &v119;
        while (v22->__r_.__value_.__s.__data_[0] == *v21)
        {
          v22 = (std::string *)((char *)v22 + 1);
          ++v21;
          if (!--v16)
            goto LABEL_62;
        }
        goto LABEL_43;
      }
LABEL_62:
      v98 = a2;
      std::string::operator=((std::string *)v12, &v119);
      v30 = v121;
      if (v133 == 1)
        v31 = 2;
      else
        v31 = 1;
      if (v133)
        v32 = v31;
      else
        v32 = 3;
      *(_DWORD *)(v12 + 124) = v32;
      if ((int)v30 >= 1)
      {
        if (v122)
          v33 = (uint64_t *)(v122 + 8);
        else
          v33 = 0;
        for (i = 8 * v30; i; i -= 8)
        {
          v35 = *v33;
          v113 = 65792;
          v111 = 0u;
          v112 = 0u;
          v110 = 0u;
          memset(v109, 0, sizeof(v109));
          memset(&v108[8], 0, 32);
          *(_QWORD *)v108 = &off_1E793ADA8;
          std::string::operator=((std::string *)&v108[8], *(const std::string **)(v35 + 24));
          if (*(_DWORD *)(v35 + 64) == 1)
            v36 = 1;
          else
            v36 = 2;
          HIDWORD(v113) = v36;
          std::string::operator=((std::string *)&v108[32], *(const std::string **)(v35 + 32));
          BYTE1(v113) = siri::dialogengine::StringToBool(*(const std::string **)(v35 + 40));
          std::string::operator=((std::string *)&v109[16], *(const std::string **)(v35 + 48));
          std::string::operator=((std::string *)&v109[40], *(const std::string **)(v35 + 56));
          if ((v108[31] & 0x80000000) != 0)
            std::string::__init_copy_ctor_external(&v118, *(const std::string::value_type **)&v108[8], *(std::string::size_type *)&v108[16]);
          else
            v118 = *(std::string *)&v108[8];
          siri::dialogengine::ObjectSchema::GetInput(v12, a1, (const void **)&v118.__r_.__value_.__l.__data_, 0, (uint64_t)__p);
          v37 = v106;
          if (v106)
            siri::dialogengine::PropertyBase::~PropertyBase(__p);
          if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v118.__r_.__value_.__l.__data_);
            if (v37)
            {
LABEL_85:
              if ((v108[31] & 0x80000000) != 0)
                std::string::__init_copy_ctor_external(&v115, *(const std::string::value_type **)&v108[8], *(std::string::size_type *)&v108[16]);
              else
                v115 = *(std::string *)&v108[8];
              v38 = std::string::insert(&v115, 0, "Duplicate input name '");
              v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
              v116.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v116.__r_.__value_.__l.__data_ = v39;
              v38->__r_.__value_.__l.__size_ = 0;
              v38->__r_.__value_.__r.__words[2] = 0;
              v38->__r_.__value_.__r.__words[0] = 0;
              v40 = std::string::append(&v116, "' in '");
              v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
              v117.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v117.__r_.__value_.__l.__data_ = v41;
              v40->__r_.__value_.__l.__size_ = 0;
              v40->__r_.__value_.__r.__words[2] = 0;
              v40->__r_.__value_.__r.__words[0] = 0;
              v42 = (char)a3[23];
              if (v42 >= 0)
                v43 = (const std::string::value_type *)a3;
              else
                v43 = *(const std::string::value_type **)a3;
              if (v42 >= 0)
                v44 = a3[23];
              else
                v44 = *((_QWORD *)a3 + 1);
              v45 = std::string::append(&v117, v43, v44);
              v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
              v118.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v118.__r_.__value_.__l.__data_ = v46;
              v45->__r_.__value_.__l.__size_ = 0;
              v45->__r_.__value_.__r.__words[2] = 0;
              v45->__r_.__value_.__r.__words[0] = 0;
              v47 = std::string::append(&v118, "'");
              v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
              v103 = v47->__r_.__value_.__r.__words[2];
              *(_OWORD *)__p = v48;
              v47->__r_.__value_.__l.__size_ = 0;
              v47->__r_.__value_.__r.__words[2] = 0;
              v47->__r_.__value_.__r.__words[0] = 0;
              if (a1)
                siri::dialogengine::Context::AddSchemaError((uint64_t *)a1, (__int128 *)__p);
              else
                siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 3u);
              if (SHIBYTE(v103) < 0)
                operator delete(__p[0]);
              if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v118.__r_.__value_.__l.__data_);
              if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v117.__r_.__value_.__l.__data_);
              if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v116.__r_.__value_.__l.__data_);
              if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v115.__r_.__value_.__l.__data_);
            }
          }
          else if (v37)
          {
            goto LABEL_85;
          }
          if ((*(_BYTE *)(v35 + 16) & 0x40) != 0)
            BYTE2(v113) = *(_BYTE *)(v35 + 68);
          siri::dialogengine::ObjectSchema::AddInput((uint64_t **)v12, (const siri::dialogengine::ObjectInput *)v108);
          siri::dialogengine::PropertyBase::~PropertyBase((void **)v108);
          ++v33;
        }
      }
      if (v123 >= 1)
      {
        if (v124)
          v49 = (uint64_t *)(v124 + 8);
        else
          v49 = 0;
        for (j = 8 * v123; j; j -= 8)
        {
          v51 = *v49;
          v112 = 0u;
          v113 = 65792;
          v110 = 0u;
          v111 = 0u;
          memset(v109, 0, sizeof(v109));
          memset(&v108[8], 0, 32);
          *(_QWORD *)v108 = &off_1E793AE08;
          memset(v114, 0, sizeof(v114));
          std::string::operator=((std::string *)&v108[8], *(const std::string **)(v51 + 24));
          std::string::operator=((std::string *)&v108[32], *(const std::string **)(v51 + 32));
          std::string::operator=((std::string *)&v109[16], *(const std::string **)(v51 + 40));
          std::string::operator=((std::string *)v114, *(const std::string **)(v51 + 48));
          std::string::operator=((std::string *)&v110, *(const std::string **)(v51 + 56));
          std::string::operator=((std::string *)((char *)&v111 + 8), *(const std::string **)(v51 + 64));
          BYTE1(v113) = siri::dialogengine::StringToBool(*(const std::string **)(v51 + 72));
          std::string::operator=((std::string *)&v109[40], *(const std::string **)(v51 + 80));
          if ((v108[31] & 0x80000000) != 0)
            std::string::__init_copy_ctor_external(&v118, *(const std::string::value_type **)&v108[8], *(std::string::size_type *)&v108[16]);
          else
            v118 = *(std::string *)&v108[8];
          siri::dialogengine::ObjectSchema::GetProperty(__p, v12, a1, &v118, 1);
          v52 = v107;
          if (v107)
            siri::dialogengine::ObjectProperty::~ObjectProperty(__p);
          if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v118.__r_.__value_.__l.__data_);
            if (v52)
            {
LABEL_124:
              if ((v108[31] & 0x80000000) != 0)
                std::string::__init_copy_ctor_external(&v115, *(const std::string::value_type **)&v108[8], *(std::string::size_type *)&v108[16]);
              else
                v115 = *(std::string *)&v108[8];
              v53 = std::string::insert(&v115, 0, "Duplicate property name '");
              v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
              v116.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v116.__r_.__value_.__l.__data_ = v54;
              v53->__r_.__value_.__l.__size_ = 0;
              v53->__r_.__value_.__r.__words[2] = 0;
              v53->__r_.__value_.__r.__words[0] = 0;
              v55 = std::string::append(&v116, "' in '");
              v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
              v117.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v117.__r_.__value_.__l.__data_ = v56;
              v55->__r_.__value_.__l.__size_ = 0;
              v55->__r_.__value_.__r.__words[2] = 0;
              v55->__r_.__value_.__r.__words[0] = 0;
              v57 = (char)a3[23];
              if (v57 >= 0)
                v58 = (const std::string::value_type *)a3;
              else
                v58 = *(const std::string::value_type **)a3;
              if (v57 >= 0)
                v59 = a3[23];
              else
                v59 = *((_QWORD *)a3 + 1);
              v60 = std::string::append(&v117, v58, v59);
              v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
              v118.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v118.__r_.__value_.__l.__data_ = v61;
              v60->__r_.__value_.__l.__size_ = 0;
              v60->__r_.__value_.__r.__words[2] = 0;
              v60->__r_.__value_.__r.__words[0] = 0;
              v62 = std::string::append(&v118, "'");
              v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
              v103 = v62->__r_.__value_.__r.__words[2];
              *(_OWORD *)__p = v63;
              v62->__r_.__value_.__l.__size_ = 0;
              v62->__r_.__value_.__r.__words[2] = 0;
              v62->__r_.__value_.__r.__words[0] = 0;
              if (a1)
                siri::dialogengine::Context::AddSchemaError((uint64_t *)a1, (__int128 *)__p);
              else
                siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 3u);
              if (SHIBYTE(v103) < 0)
                operator delete(__p[0]);
              if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v118.__r_.__value_.__l.__data_);
              if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v117.__r_.__value_.__l.__data_);
              if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v116.__r_.__value_.__l.__data_);
              if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v115.__r_.__value_.__l.__data_);
            }
          }
          else if (v52)
          {
            goto LABEL_124;
          }
          if ((*(_BYTE *)(v51 + 17) & 1) != 0)
          {
            BYTE2(v113) = *(_BYTE *)(v51 + 88);
          }
          else
          {
            if ((v108[31] & 0x80000000) != 0)
              std::string::__init_copy_ctor_external(&v118, *(const std::string::value_type **)&v108[8], *(std::string::size_type *)&v108[16]);
            else
              v118 = *(std::string *)&v108[8];
            siri::dialogengine::ObjectSchema::GetInput(v12, a1, (const void **)&v118.__r_.__value_.__l.__data_, 0, (uint64_t)__p);
            if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v118.__r_.__value_.__l.__data_);
            if (v106)
            {
              BYTE2(v113) = v105;
              siri::dialogengine::PropertyBase::~PropertyBase(__p);
            }
          }
          siri::dialogengine::ObjectSchema::AddProperty((uint64_t **)v12, (const siri::dialogengine::ObjectProperty *)v108);
          siri::dialogengine::ObjectProperty::~ObjectProperty((void **)v108);
          ++v49;
        }
      }
      if (v125 < 1)
      {
LABEL_233:
        if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v119.__r_.__value_.__l.__data_);
LABEL_17:
        siri::dialogengine::SchemaBinary::Schema::~Schema((siri::dialogengine::SchemaBinary::Schema *)v120);
        if ((v135 & 0x80) == 0)
          return;
        goto LABEL_18;
      }
      if (v126)
        v64 = (uint64_t *)(v126 + 8);
      else
        v64 = 0;
      v65 = 8 * v125;
      while (1)
      {
        v66 = *v64;
        *(_QWORD *)v108 = &off_1E7939438;
        memset(&v108[16], 0, 24);
        *(_DWORD *)v109 = 0;
        memset(&v109[8], 0, 48);
        v67 = *(_DWORD *)(v12 + 124);
        *(_DWORD *)&v108[8] = v67;
        v68 = *(__int128 **)(v66 + 32);
        if (*((char *)v68 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v118, *(const std::string::value_type **)v68, *((_QWORD *)v68 + 1));
          v67 = *(_DWORD *)(v12 + 124);
        }
        else
        {
          v69 = *v68;
          v118.__r_.__value_.__r.__words[2] = *((_QWORD *)v68 + 2);
          *(_OWORD *)&v118.__r_.__value_.__l.__data_ = v69;
        }
        if (v67 == 3)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "Enums with value-type: string may not contain the 'value:' field");
          if (a1)
            siri::dialogengine::Context::AddSchemaError((uint64_t *)a1, (__int128 *)__p);
          else
            siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 3u);
          if (SHIBYTE(v103) < 0)
            operator delete(__p[0]);
        }
        if (siri::dialogengine::IsStringANumber(&v118))
        {
          v115.__r_.__value_.__s.__data_[0] = 0;
          v70 = siri::dialogengine::StringToInt(&v118, &v115, 0);
          if (v115.__r_.__value_.__s.__data_[0])
          {
            *(_DWORD *)v109 = v70;
            goto LABEL_195;
          }
          std::operator+<char>();
          v78 = std::string::append(&v116, "' to integer in schema file: ");
          v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
          v117.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v117.__r_.__value_.__l.__data_ = v79;
          v78->__r_.__value_.__l.__size_ = 0;
          v78->__r_.__value_.__r.__words[2] = 0;
          v78->__r_.__value_.__r.__words[0] = 0;
          v80 = *(char *)(v98 + 23);
          if (v80 >= 0)
            v81 = (const std::string::value_type *)v98;
          else
            v81 = *(const std::string::value_type **)v98;
          if (v80 >= 0)
            v82 = *(unsigned __int8 *)(v98 + 23);
          else
            v82 = *(_QWORD *)(v98 + 8);
          v83 = std::string::append(&v117, v81, v82);
          v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
          v103 = v83->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v84;
          v83->__r_.__value_.__l.__size_ = 0;
          v83->__r_.__value_.__r.__words[2] = 0;
          v83->__r_.__value_.__r.__words[0] = 0;
          if (!a1)
          {
LABEL_188:
            siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 3u);
            goto LABEL_189;
          }
        }
        else
        {
          std::operator+<char>();
          v71 = std::string::append(&v116, "' is not a number in schema file: ");
          v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
          v117.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v117.__r_.__value_.__l.__data_ = v72;
          v71->__r_.__value_.__l.__size_ = 0;
          v71->__r_.__value_.__r.__words[2] = 0;
          v71->__r_.__value_.__r.__words[0] = 0;
          v73 = *(char *)(v98 + 23);
          if (v73 >= 0)
            v74 = (const std::string::value_type *)v98;
          else
            v74 = *(const std::string::value_type **)v98;
          if (v73 >= 0)
            v75 = *(unsigned __int8 *)(v98 + 23);
          else
            v75 = *(_QWORD *)(v98 + 8);
          v76 = std::string::append(&v117, v74, v75);
          v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
          v103 = v76->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v77;
          v76->__r_.__value_.__l.__size_ = 0;
          v76->__r_.__value_.__r.__words[2] = 0;
          v76->__r_.__value_.__r.__words[0] = 0;
          if (!a1)
            goto LABEL_188;
        }
        siri::dialogengine::Context::AddSchemaError((uint64_t *)a1, (__int128 *)__p);
LABEL_189:
        if (SHIBYTE(v103) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v117.__r_.__value_.__l.__data_);
        if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v116.__r_.__value_.__l.__data_);
LABEL_195:
        v85 = *(_DWORD *)(v66 + 16);
        if ((v85 & 4) != 0)
        {
          std::string::operator=((std::string *)&v109[8], *(const std::string **)(v66 + 40));
          v85 = *(_DWORD *)(v66 + 16);
        }
        if ((v85 & 8) != 0)
          std::string::operator=((std::string *)&v109[32], *(const std::string **)(v66 + 48));
        v12 = *v99;
        if ((v108[39] & 0x80000000) != 0)
          std::string::__init_copy_ctor_external(&v101, *(const std::string::value_type **)&v108[16], *(std::string::size_type *)&v108[24]);
        else
          v101 = *(std::string *)&v108[16];
        siri::dialogengine::ObjectSchema::GetEnumerant(v12, (char *)&v101, (siri::dialogengine::ObjectEnumerant *)__p);
        v86 = v104;
        if (v104)
          siri::dialogengine::ObjectEnumerant::~ObjectEnumerant(__p);
        if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v101.__r_.__value_.__l.__data_);
          if (v86)
          {
LABEL_208:
            if ((v108[39] & 0x80000000) != 0)
              std::string::__init_copy_ctor_external(&v100, *(const std::string::value_type **)&v108[16], *(std::string::size_type *)&v108[24]);
            else
              v100 = *(std::string *)&v108[16];
            v87 = std::string::insert(&v100, 0, "Duplicate enumerant name '");
            v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
            v115.__r_.__value_.__r.__words[2] = v87->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v115.__r_.__value_.__l.__data_ = v88;
            v87->__r_.__value_.__l.__size_ = 0;
            v87->__r_.__value_.__r.__words[2] = 0;
            v87->__r_.__value_.__r.__words[0] = 0;
            v89 = std::string::append(&v115, "' in '");
            v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
            v116.__r_.__value_.__r.__words[2] = v89->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v116.__r_.__value_.__l.__data_ = v90;
            v89->__r_.__value_.__l.__size_ = 0;
            v89->__r_.__value_.__r.__words[2] = 0;
            v89->__r_.__value_.__r.__words[0] = 0;
            v91 = (char)a3[23];
            if (v91 >= 0)
              v92 = (const std::string::value_type *)a3;
            else
              v92 = *(const std::string::value_type **)a3;
            if (v91 >= 0)
              v93 = a3[23];
            else
              v93 = *((_QWORD *)a3 + 1);
            v94 = std::string::append(&v116, v92, v93);
            v95 = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
            v117.__r_.__value_.__r.__words[2] = v94->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v117.__r_.__value_.__l.__data_ = v95;
            v94->__r_.__value_.__l.__size_ = 0;
            v94->__r_.__value_.__r.__words[2] = 0;
            v94->__r_.__value_.__r.__words[0] = 0;
            v96 = std::string::append(&v117, "'");
            v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
            v103 = v96->__r_.__value_.__r.__words[2];
            *(_OWORD *)__p = v97;
            v96->__r_.__value_.__l.__size_ = 0;
            v96->__r_.__value_.__r.__words[2] = 0;
            v96->__r_.__value_.__r.__words[0] = 0;
            if (a1)
              siri::dialogengine::Context::AddSchemaError((uint64_t *)a1, (__int128 *)__p);
            else
              siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 3u);
            if (SHIBYTE(v103) < 0)
              operator delete(__p[0]);
            if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v117.__r_.__value_.__l.__data_);
            if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v116.__r_.__value_.__l.__data_);
            if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v115.__r_.__value_.__l.__data_);
            if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v100.__r_.__value_.__l.__data_);
          }
        }
        else if (v86)
        {
          goto LABEL_208;
        }
        if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v118.__r_.__value_.__l.__data_);
        siri::dialogengine::ObjectEnumerant::~ObjectEnumerant((void **)v108);
        ++v64;
        v65 -= 8;
        if (!v65)
          goto LABEL_233;
      }
    }
LABEL_43:
    if (!v19)
      goto LABEL_62;
LABEL_47:
    std::operator+<char>();
    v23 = std::string::append(&v118, "' does not match filename: ");
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    *(_QWORD *)&v108[16] = *((_QWORD *)&v23->__r_.__value_.__l + 2);
    *(_OWORD *)v108 = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    v25 = *(char *)(a2 + 23);
    if (v25 >= 0)
      v26 = (const std::string::value_type *)a2;
    else
      v26 = *(const std::string::value_type **)a2;
    if (v25 >= 0)
      v27 = *(unsigned __int8 *)(a2 + 23);
    else
      v27 = *(_QWORD *)(a2 + 8);
    v28 = std::string::append((std::string *)v108, v26, v27);
    v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v103 = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    if (a1)
      siri::dialogengine::Context::AddSchemaError((uint64_t *)a1, (__int128 *)__p);
    else
      siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 3u);
    if (SHIBYTE(v103) < 0)
      operator delete(__p[0]);
    if ((v108[23] & 0x80000000) != 0)
      operator delete(*(void **)v108);
    if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v118.__r_.__value_.__l.__data_);
    goto LABEL_62;
  }
  *a4 = 0;
  a4[1] = 0;
  if ((v9 & 0x80) == 0)
    return;
LABEL_18:
  operator delete(v134[0]);
}

void sub_1BFC3F9BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](a14);
  siri::dialogengine::SchemaBinary::Schema::~Schema((siri::dialogengine::SchemaBinary::Schema *)&STACK[0x300]);
  if (*(char *)(v14 - 97) < 0)
    operator delete(*(void **)(v14 - 120));
  _Unwind_Resume(a1);
}

siri::dialogengine::ObjectSchema *std::unique_ptr<siri::dialogengine::ObjectSchema>::reset[abi:ne180100](siri::dialogengine::ObjectSchema **a1)
{
  siri::dialogengine::ObjectSchema *result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    siri::dialogengine::ObjectSchema::~ObjectSchema(result);
    JUMPOUT(0x1C3B8D890);
  }
  return result;
}

void siri::dialogengine::ObjectSchema::~ObjectSchema(siri::dialogengine::ObjectSchema *this)
{
  std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectEnumerant>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectEnumerant>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectEnumerant>>>::destroy(*((_QWORD **)this + 23));
  std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectInput>>>::destroy(*((_QWORD **)this + 20));
  std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectProperty>>>::destroy(*((_QWORD **)this + 17));
  if (*((char *)this + 119) < 0)
    operator delete(*((void **)this + 12));
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectEnumerant>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectEnumerant>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectEnumerant>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectEnumerant>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectEnumerant>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectEnumerant>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectEnumerant>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectEnumerant>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectEnumerant>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,siri::dialogengine::ObjectEnumerant>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__shared_ptr_pointer<siri::dialogengine::ObjectSchema *,std::shared_ptr<siri::dialogengine::ObjectSchema>::__shared_ptr_default_delete<siri::dialogengine::ObjectSchema,siri::dialogengine::ObjectSchema>,std::allocator<siri::dialogengine::ObjectSchema>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

siri::dialogengine::ObjectSchema *std::__shared_ptr_pointer<siri::dialogengine::ObjectSchema *,std::shared_ptr<siri::dialogengine::ObjectSchema>::__shared_ptr_default_delete<siri::dialogengine::ObjectSchema,siri::dialogengine::ObjectSchema>,std::allocator<siri::dialogengine::ObjectSchema>>::__on_zero_shared(uint64_t a1)
{
  siri::dialogengine::ObjectSchema *result;

  result = *(siri::dialogengine::ObjectSchema **)(a1 + 24);
  if (result)
  {
    siri::dialogengine::ObjectSchema::~ObjectSchema(result);
    JUMPOUT(0x1C3B8D890);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::ObjectSchema *,std::shared_ptr<siri::dialogengine::ObjectSchema>::__shared_ptr_default_delete<siri::dialogengine::ObjectSchema,siri::dialogengine::ObjectSchema>,std::allocator<siri::dialogengine::ObjectSchema>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void siri::dialogengine::ParseCATSchemaYAML(std::string *__str@<X2>, uint64_t *a2@<X0>, uint64_t a3@<X1>, std::string **a4@<X8>)
{
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::string *v24;
  __int128 v25;
  int v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  BOOL v31;
  std::string *v34;
  YAML::detail::node *v39;
  YAML::detail::memory **v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  YAML::detail::node *v45;
  YAML::detail::memory **v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  _BOOL4 v51;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::string *v57;
  __int128 v58;
  int v59;
  const std::string::value_type *v60;
  std::string::size_type v61;
  std::string *v62;
  __int128 v63;
  int data;
  int v66;
  std::string *v68;
  __int128 v69;
  int v70;
  const std::string::value_type *v71;
  std::string::size_type v72;
  std::string *v73;
  __int128 v74;
  void *v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  YAML::detail::node *v82;
  YAML::detail::memory **v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  std::string::size_type v93;
  int v94;
  std::string *v95;
  unsigned __int8 *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  YAML::detail::node *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  __int128 v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  YAML::detail::node *v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  __int128 v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  YAML::detail::node *v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  __int128 v131;
  unint64_t *v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  unint64_t *v139;
  unint64_t *v140;
  void *v141;
  std::string *v143;
  __int128 v144;
  int v145;
  const std::string::value_type *v146;
  std::string::size_type v147;
  std::string *v148;
  __int128 v149;
  unint64_t *v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  _BYTE *v154;
  uint64_t v155;
  uint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *p_shared_owners;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  std::__shared_weak_count *v164;
  int v165;
  unint64_t *v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  _BYTE *v170;
  uint64_t v171;
  int v172;
  BOOL v173;
  std::string *v174;
  BOOL v175;
  _QWORD *v176;
  BOOL v177;
  BOOL v178;
  BOOL v179;
  BOOL v180;
  _BOOL4 v181;
  BOOL v182;
  BOOL v183;
  BOOL v184;
  BOOL v185;
  std::string *v186;
  __int128 v187;
  int v188;
  const std::string::value_type *v189;
  std::string::size_type v190;
  std::string *v191;
  __int128 v192;
  void *v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  char v203;
  unint64_t *v204;
  unint64_t v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  int v209;
  std::string *v210;
  __int128 v211;
  std::string *v212;
  __int128 v213;
  int v214;
  std::string *v215;
  std::string::size_type size;
  std::string *v217;
  __int128 v218;
  std::string *v219;
  __int128 v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  std::__shared_weak_count *v224;
  unint64_t *v225;
  unint64_t v226;
  std::__shared_weak_count *v227;
  unint64_t *v228;
  unint64_t v229;
  unint64_t *v230;
  unint64_t v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  unint64_t *v247;
  unint64_t v248;
  unint64_t v249;
  unint64_t v250;
  _BYTE *v251;
  uint64_t v252;
  uint64_t v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  unint64_t v257;
  unint64_t v258;
  uint64_t v259;
  uint64_t v260;
  std::__shared_weak_count *v261;
  int v262;
  unint64_t *v263;
  unint64_t v264;
  unint64_t v265;
  unint64_t v266;
  _BYTE *v267;
  uint64_t v268;
  BOOL v269;
  std::string *v270;
  _BYTE *v271;
  uint64_t v273;
  int v274;
  BOOL v275;
  std::string *v277;
  __int128 v278;
  int v279;
  const std::string::value_type *v280;
  std::string::size_type v281;
  std::string *v282;
  __int128 v283;
  std::__shared_weak_count *v284;
  unint64_t *v285;
  unint64_t v286;
  std::__shared_weak_count *v287;
  unint64_t *v288;
  unint64_t v289;
  std::__shared_weak_count *v290;
  unint64_t *v291;
  unint64_t v292;
  int v293;
  std::string *v294;
  __int128 v295;
  int v296;
  const std::string::value_type *v297;
  std::string::size_type v298;
  std::string *v299;
  __int128 v300;
  std::string *v301;
  __int128 v302;
  int v303;
  const std::string::value_type *v304;
  std::string::size_type v305;
  std::string *v306;
  __int128 v307;
  unint64_t *v308;
  unint64_t v309;
  std::__shared_weak_count *v310;
  unint64_t *v311;
  unint64_t v312;
  int v313;
  std::string *v314;
  __int128 v315;
  std::string *v316;
  __int128 v317;
  int v318;
  std::string *v319;
  std::string::size_type v320;
  std::string *v321;
  __int128 v322;
  std::string *v323;
  __int128 v324;
  std::__shared_weak_count *v325;
  unint64_t *v326;
  unint64_t v327;
  std::__shared_weak_count *v328;
  unint64_t *v329;
  unint64_t v330;
  std::__shared_weak_count *v331;
  unint64_t *v332;
  unint64_t v333;
  unint64_t *v334;
  unint64_t v335;
  std::__shared_weak_count *v336;
  unint64_t *v337;
  unint64_t v338;
  unint64_t *v339;
  unint64_t *v340;
  unint64_t v341;
  unint64_t v342;
  unint64_t v343;
  _BYTE *v344;
  uint64_t v345;
  uint64_t v346;
  std::__shared_weak_count *v347;
  unint64_t *v348;
  unint64_t v349;
  unint64_t v350;
  unint64_t v351;
  uint64_t v352;
  uint64_t v353;
  int v354;
  unint64_t *v355;
  unint64_t v356;
  unint64_t v357;
  unint64_t v358;
  _BYTE *v359;
  uint64_t v360;
  uint64_t v361;
  int v362;
  std::string *v363;
  BOOL v365;
  std::string *v366;
  char v370;
  std::string *v372;
  __int128 v373;
  int v374;
  const std::string::value_type *v375;
  std::string::size_type v376;
  std::string *v377;
  __int128 v378;
  void *v379;
  std::__shared_weak_count *v380;
  unint64_t *v381;
  unint64_t v382;
  std::__shared_weak_count *v383;
  unint64_t *v384;
  unint64_t v385;
  std::__shared_weak_count *v386;
  unint64_t *v387;
  unint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  std::__shared_weak_count *v392;
  unint64_t *v393;
  unint64_t v394;
  unint64_t v395;
  unint64_t v396;
  std::string *v397;
  __int128 v398;
  int v400;
  _BYTE *v401;
  int v402;
  int v403;
  std::string *v405;
  __int128 v406;
  int v407;
  const std::string::value_type *v408;
  std::string::size_type v409;
  std::string *v410;
  __int128 v411;
  uint64_t v412;
  std::__shared_weak_count *v413;
  unint64_t *v414;
  unint64_t v415;
  unint64_t v416;
  unint64_t v417;
  std::vector<std::string>::pointer end;
  __int128 v419;
  unint64_t v420;
  unint64_t v421;
  unint64_t v422;
  std::string *v423;
  std::string *v424;
  __int128 v425;
  std::string *v426;
  std::__shared_weak_count *v427;
  unint64_t *v428;
  unint64_t v429;
  std::__shared_weak_count *v430;
  unint64_t *v431;
  unint64_t v432;
  std::__shared_weak_count *v433;
  unint64_t *v434;
  unint64_t v435;
  _BYTE *v436;
  _BYTE *v437;
  std::__shared_weak_count *v438;
  unint64_t *v439;
  unint64_t v440;
  std::__shared_weak_count *v441;
  unint64_t *v442;
  unint64_t v443;
  std::string *v444;
  __int128 v445;
  std::string *v446;
  __int128 v447;
  unint64_t *v448;
  unint64_t v449;
  std::__shared_weak_count *v450;
  unint64_t *v451;
  unint64_t v452;
  int v453;
  std::string *v454;
  __int128 v455;
  std::string *v456;
  __int128 v457;
  int v458;
  std::string *v459;
  std::string::size_type v460;
  std::string *v461;
  __int128 v462;
  std::string *v463;
  __int128 v464;
  std::__shared_weak_count *v465;
  unint64_t *v466;
  unint64_t v467;
  std::__shared_weak_count *v468;
  unint64_t *v469;
  unint64_t v470;
  std::__shared_weak_count *v471;
  unint64_t *v472;
  unint64_t v473;
  unint64_t *v474;
  unint64_t v475;
  std::__shared_weak_count *v476;
  unint64_t *v477;
  unint64_t v478;
  std::__shared_weak_count *v479;
  unint64_t *v480;
  unint64_t v481;
  unint64_t *v482;
  unint64_t v483;
  std::__shared_weak_count *v484;
  unint64_t *v485;
  unint64_t v486;
  uint64_t *v487;
  char *v488;
  char **v489;
  char **v490;
  const void **v491;
  _BOOL4 v492;
  char *v493;
  const void **v494;
  char v495;
  char *v496;
  char **v497;
  uint64_t *v498;
  char *v499;
  char **v500;
  std::string *v501;
  std::string *v502;
  std::string *v503;
  std::string::size_type *v504;
  const void **v505;
  std::string::value_type *v506;
  std::string::value_type *v507;
  std::string::value_type *v508;
  uint64_t **v509;
  char *v510;
  const void **v511;
  const void ***v512;
  std::__shared_weak_count *v513;
  unint64_t *v514;
  unint64_t v515;
  _QWORD *v516;
  _QWORD *v517;
  _QWORD *v518;
  _QWORD *v519;
  _QWORD *v520;
  _QWORD *v521;
  _QWORD *v522;
  _QWORD *v523;
  _QWORD *v524;
  _QWORD *v525;
  _QWORD *v526;
  _QWORD *exception;
  _QWORD *v528;
  _QWORD *v529;
  _QWORD *v530;
  _QWORD *v531;
  _QWORD *v532;
  _QWORD *v533;
  _QWORD *v534;
  _QWORD *v535;
  _QWORD *v536;
  std::string **v537;
  std::__shared_weak_count *v538;
  std::__shared_weak_count *v539;
  uint64_t v540;
  uint64_t v541;
  std::__shared_weak_count *v542;
  std::__shared_weak_count *v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  int v548;
  uint64_t v549;
  uint64_t v550;
  int v551;
  int v553;
  int v554;
  std::__shared_weak_count *v555;
  std::string v556;
  _BYTE __p[32];
  __int128 v558;
  YAML::detail::node *v559;
  char v560;
  __int128 v561;
  uint64_t v562;
  std::__shared_weak_count *v563;
  char v564;
  __int128 v565;
  uint64_t v566;
  uint64_t v567;
  std::__shared_weak_count *v568;
  uint64_t **v569;
  unsigned __int8 v570;
  _BYTE v571[40];
  __int128 v572;
  _QWORD v573[4];
  __int128 v574;
  __int128 v575;
  __int128 v576;
  __int128 v577;
  uint64_t v578;
  _QWORD v579[11];
  std::string v580;
  _BYTE v581[40];
  std::__shared_weak_count *v582;
  __int128 v583;
  __int128 v584;
  __int128 v585;
  std::__shared_weak_count *v586;
  char v587;
  void *v588;
  char v589;
  uint64_t v590;
  std::__shared_weak_count *v591;
  uint64_t **v592;
  _BYTE v593[40];
  std::__shared_weak_count *v594;
  _BYTE v595[32];
  uint64_t v596;
  std::__shared_weak_count *v597;
  std::vector<std::string> v598;
  std::string v599;
  std::string v600;
  _BYTE v601[40];
  std::__shared_weak_count *v602;
  std::string __stra;
  __int128 v604;
  __int128 v605;
  std::string v606[4];
  uint64_t v607;
  _BYTE v608[40];
  std::__shared_weak_count *v609;
  _BYTE v610[40];
  std::__shared_weak_count *v611;
  uint64_t **v612;
  std::string v613;
  char v614[8];
  void *v615;
  char v616;
  std::__shared_weak_count *v617;
  char v618;
  __int128 v619;
  uint64_t v620;
  std::__shared_weak_count *v621;
  void *v622;
  char v623;
  std::__shared_weak_count *v624;
  _BYTE v625[48];
  char **v626;
  char *v627;
  uint64_t v628;
  char **v629;
  char *v630[2];
  char v631[8];
  __int128 v632;
  _QWORD v633[4];
  std::string v634[2];
  std::string::size_type v635[2];
  std::string::value_type *__s[4];
  std::string v637;
  uint64_t v638;
  const void **v639;
  _QWORD *v640[2];
  const void **v641;
  _QWORD *v642[2];
  const void **v643;
  _QWORD *v644[3];
  std::__split_buffer<std::string> v645;

  memset(&v637, 0, sizeof(v637));
  memset(__s, 0, sizeof(__s));
  *(_OWORD *)v635 = 0u;
  memset(v634, 0, sizeof(v634));
  v638 = 0x100000001;
  v640[0] = 0;
  v639 = (const void **)v640;
  v642[1] = 0;
  v642[0] = 0;
  v640[1] = 0;
  v641 = (const void **)v642;
  v644[1] = 0;
  v644[0] = 0;
  v643 = (const void **)v644;
  std::string::operator=(v634, __str);
  std::string::operator=(&v634[1], (const std::string *)a3);
  v631[0] = 1;
  v632 = 0u;
  memset(v633, 0, sizeof(v633));
  YAML::LoadFile((uint64_t)__p);
  YAML::Node::operator=((uint64_t)v631, (YAML::Node *)__p);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v558 + 1);
  if (*((_QWORD *)&v558 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v558 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if ((__p[31] & 0x80000000) != 0)
    operator delete(*(void **)&__p[8]);
  v630[1] = 0;
  v630[0] = 0;
  v629 = v630;
  v628 = 0;
  v627 = 0;
  v626 = &v627;
  if (v631[0] && v633[3])
  {
    YAML::detail::node_data::begin(**(_QWORD **)v633[3], (uint64_t)__p);
    v10 = *(_OWORD *)&v633[1];
    if (v633[2])
    {
      v11 = (unint64_t *)(v633[2] + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      *(_OWORD *)v625 = *(_OWORD *)__p;
      *(_OWORD *)&v625[16] = *(_OWORD *)&__p[16];
      *(_OWORD *)&v625[32] = v10;
      do
        v13 = __ldxr(v11);
      while (__stxr(v13 + 1, v11));
      do
        v14 = __ldaxr(v11);
      while (__stlxr(v14 - 1, v11));
      if (!v14)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v10 + 1) + 16))(*((_QWORD *)&v10 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v10 + 1));
      }
      goto LABEL_20;
    }
    *(_OWORD *)v625 = *(_OWORD *)__p;
    *(_OWORD *)&v625[16] = *(_OWORD *)&__p[16];
    *(_QWORD *)&v625[32] = v633[1];
  }
  else
  {
    *(_DWORD *)v625 = 0;
    memset(&v625[8], 0, 32);
  }
  *(_QWORD *)&v625[40] = 0;
LABEL_20:
  v537 = a4;
  if (v631[0] && v633[3])
  {
    YAML::detail::node_data::end(**(_QWORD **)v633[3], (uint64_t)__p);
    if (v633[2])
    {
      v538 = (std::__shared_weak_count *)v633[2];
      v15 = (unint64_t *)(v633[2] + 8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
      v548 = *(_DWORD *)__p;
      v541 = *(_QWORD *)&__p[8];
      v540 = *(_QWORD *)&__p[16];
      do
        v17 = __ldxr(v15);
      while (__stxr(v17 + 1, v15));
      do
        v18 = __ldaxr(v15);
      while (__stlxr(v18 - 1, v15));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v538->__on_zero_shared)(v538);
        std::__shared_weak_count::__release_weak(v538);
      }
    }
    else
    {
      v538 = 0;
      v548 = *(_DWORD *)__p;
      v541 = *(_QWORD *)&__p[8];
      v540 = *(_QWORD *)&__p[16];
    }
  }
  else
  {
    v541 = 0;
    v540 = 0;
    v538 = 0;
    v548 = 0;
  }
  while (1)
  {
    if (*(_DWORD *)v625 == v548)
    {
      v19 = &v625[8];
      v20 = v541;
      if (v548 != 1)
      {
        if (v548 != 2)
          break;
        v19 = &v625[16];
        v20 = v540;
      }
      if (*(_QWORD *)v19 == v20)
        break;
    }
    YAML::detail::iterator_base<YAML::detail::iterator_value>::operator*((uint64_t)v614, (uint64_t)v625);
    if (!v618)
    {
      exception = __cxa_allocate_exception(0x38uLL);
      if (SHIBYTE(v620) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)v619, *((std::string::size_type *)&v619 + 1));
      }
      else
      {
        *(_OWORD *)__p = v619;
        *(_QWORD *)&__p[16] = v620;
      }
      YAML::InvalidNode::InvalidNode(exception, (uint64_t)__p);
    }
    *(_QWORD *)__p = &v618;
    YAML::as_if<std::string,void>::operator()(&v613, (YAML::Node **)__p);
    if ((*((_BYTE *)&v613.__r_.__value_.__s + 23) & 0x80) == 0)
    {
      switch(*((_BYTE *)&v613.__r_.__value_.__s + 23))
      {
        case 4:
          if (LODWORD(v613.__r_.__value_.__l.__data_) == 1701869940)
            goto LABEL_45;
          if (LODWORD(v613.__r_.__value_.__l.__data_) != 1701667182)
            goto LABEL_159;
          goto LABEL_188;
        case 6:
          if (LODWORD(v613.__r_.__value_.__l.__data_) == 1970302569
            && WORD2(v613.__r_.__value_.__r.__words[0]) == 29556)
          {
            goto LABEL_221;
          }
          v34 = &v613;
          goto LABEL_155;
        case 7:
          v31 = LODWORD(v613.__r_.__value_.__l.__data_) == 1702131813
             && *(_DWORD *)((char *)v613.__r_.__value_.__r.__words + 3) == 1935961701;
          if (!v31)
            goto LABEL_159;
          goto LABEL_110;
        case 0xA:
          if (v613.__r_.__value_.__r.__words[0] == 0x69747265706F7270
            && LOWORD(v613.__r_.__value_.__r.__words[1]) == 29541)
          {
            goto LABEL_173;
          }
          if (v613.__r_.__value_.__r.__words[0] != 0x79742D65756C6176
            || LOWORD(v613.__r_.__value_.__r.__words[1]) != 25968)
          {
            goto LABEL_159;
          }
          goto LABEL_130;
        case 0xB:
          if (v613.__r_.__value_.__r.__words[0] != 0x7470697263736564
            || *(std::string::size_type *)((char *)v613.__r_.__value_.__r.__words + 3) != 0x6E6F697470697263)
          {
            goto LABEL_159;
          }
          goto LABEL_100;
        case 0xD:
          if (v613.__r_.__value_.__r.__words[0] != 0x5F6E6F6973726576
            || *(std::string::size_type *)((char *)v613.__r_.__value_.__r.__words + 5) != 0x64656464615F6E6FLL)
          {
            goto LABEL_159;
          }
          goto LABEL_183;
        default:
          goto LABEL_159;
      }
    }
    switch(v613.__r_.__value_.__l.__size_)
    {
      case 4uLL:
        if (*(_DWORD *)v613.__r_.__value_.__l.__data_ != 1701667182)
        {
          if (*(_DWORD *)v613.__r_.__value_.__l.__data_ == 1701869940)
          {
LABEL_45:
            YAML::Node::operator[]<char [5]>((uint64_t)__p, (YAML::Node *)v631, "type");
            if (!__p[0])
            {
              v532 = __cxa_allocate_exception(0x38uLL);
              if ((__p[31] & 0x80000000) != 0)
              {
                std::string::__init_copy_ctor_external((std::string *)v571, *(const std::string::value_type **)&__p[8], *(std::string::size_type *)&__p[16]);
              }
              else
              {
                *(_OWORD *)v571 = *(_OWORD *)&__p[8];
                *(_QWORD *)&v571[16] = *(_QWORD *)&__p[24];
              }
              YAML::InvalidNode::InvalidNode(v532, (uint64_t)v571);
            }
            *(_QWORD *)v571 = __p;
            YAML::as_if<std::string,void>::operator()((std::string *)v581, (YAML::Node **)v571);
            v21 = (std::__shared_weak_count *)*((_QWORD *)&v558 + 1);
            if (*((_QWORD *)&v558 + 1))
            {
              v22 = (unint64_t *)(*((_QWORD *)&v558 + 1) + 8);
              do
                v23 = __ldaxr(v22);
              while (__stlxr(v23 - 1, v22));
              if (!v23)
              {
                ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
                std::__shared_weak_count::__release_weak(v21);
              }
            }
            if ((__p[31] & 0x80000000) != 0)
              operator delete(*(void **)&__p[8]);
            if ((siri::dialogengine::ObjectSchema::SetType((uint64_t)v634, v581) & 1) != 0)
              goto LABEL_597;
            std::operator+<char>();
            v24 = std::string::append(&__stra, "' in schema file: ");
            v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
            *(_QWORD *)&v571[16] = *((_QWORD *)&v24->__r_.__value_.__l + 2);
            *(_OWORD *)v571 = v25;
            v24->__r_.__value_.__l.__size_ = 0;
            v24->__r_.__value_.__r.__words[2] = 0;
            v24->__r_.__value_.__r.__words[0] = 0;
            v26 = *(char *)(a3 + 23);
            if (v26 >= 0)
              v27 = (const std::string::value_type *)a3;
            else
              v27 = *(const std::string::value_type **)a3;
            if (v26 >= 0)
              v28 = *(unsigned __int8 *)(a3 + 23);
            else
              v28 = *(_QWORD *)(a3 + 8);
            v29 = std::string::append((std::string *)v571, v27, v28);
            v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
            *(_QWORD *)&__p[16] = *((_QWORD *)&v29->__r_.__value_.__l + 2);
            *(_OWORD *)__p = v30;
            v29->__r_.__value_.__l.__size_ = 0;
            v29->__r_.__value_.__r.__words[2] = 0;
            v29->__r_.__value_.__r.__words[0] = 0;
            if (a2)
            {
LABEL_61:
              siri::dialogengine::Context::AddSchemaError(a2, (__int128 *)__p);
LABEL_592:
              if ((__p[23] & 0x80000000) != 0)
                operator delete(*(void **)__p);
              if ((v571[23] & 0x80000000) != 0)
                operator delete(*(void **)v571);
              if ((SHIBYTE(__stra.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_597;
              v75 = (void *)__stra.__r_.__value_.__r.__words[0];
LABEL_172:
              operator delete(v75);
LABEL_597:
              if ((v581[23] & 0x80000000) == 0)
                goto LABEL_600;
              v141 = *(void **)v581;
              goto LABEL_599;
            }
LABEL_591:
            siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 3u);
            goto LABEL_592;
          }
LABEL_119:
          v51 = v613.__r_.__value_.__l.__size_ == 6;
LABEL_120:
          if (v613.__r_.__value_.__l.__size_ == 10)
          {
            if (*(_QWORD *)v613.__r_.__value_.__l.__data_ != 0x69747265706F7270
              || *(_WORD *)(v613.__r_.__value_.__r.__words[0] + 8) != 29541)
            {
              if (*(_QWORD *)v613.__r_.__value_.__l.__data_ != 0x79742D65756C6176
                || *(_WORD *)(v613.__r_.__value_.__r.__words[0] + 8) != 25968)
              {
LABEL_159:
                std::operator+<char>();
                v68 = std::string::append((std::string *)v581, "' in schema file: ");
                v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
                *(_QWORD *)&v571[16] = *((_QWORD *)&v68->__r_.__value_.__l + 2);
                *(_OWORD *)v571 = v69;
                v68->__r_.__value_.__l.__size_ = 0;
                v68->__r_.__value_.__r.__words[2] = 0;
                v68->__r_.__value_.__r.__words[0] = 0;
                v70 = *(char *)(a3 + 23);
                if (v70 >= 0)
                  v71 = (const std::string::value_type *)a3;
                else
                  v71 = *(const std::string::value_type **)a3;
                if (v70 >= 0)
                  v72 = *(unsigned __int8 *)(a3 + 23);
                else
                  v72 = *(_QWORD *)(a3 + 8);
                v73 = std::string::append((std::string *)v571, v71, v72);
                v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
                *(_QWORD *)&__p[16] = *((_QWORD *)&v73->__r_.__value_.__l + 2);
                *(_OWORD *)__p = v74;
                v73->__r_.__value_.__l.__size_ = 0;
                v73->__r_.__value_.__r.__words[2] = 0;
                v73->__r_.__value_.__r.__words[0] = 0;
                if (a2)
                  siri::dialogengine::Context::AddSchemaError(a2, (__int128 *)__p);
                else
                  siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 3u);
                if ((__p[23] & 0x80000000) != 0)
                  operator delete(*(void **)__p);
                if ((v571[23] & 0x80000000) == 0)
                  goto LABEL_597;
                v75 = *(void **)v571;
                goto LABEL_172;
              }
LABEL_130:
              YAML::Node::operator[]<char [11]>((uint64_t)__p, (YAML::Node *)v631, "value-type");
              if (!__p[0])
              {
                v533 = __cxa_allocate_exception(0x38uLL);
                if ((__p[31] & 0x80000000) != 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)v571, *(const std::string::value_type **)&__p[8], *(std::string::size_type *)&__p[16]);
                }
                else
                {
                  *(_OWORD *)v571 = *(_OWORD *)&__p[8];
                  *(_QWORD *)&v571[16] = *(_QWORD *)&__p[24];
                }
                YAML::InvalidNode::InvalidNode(v533, (uint64_t)v571);
              }
              *(_QWORD *)v571 = __p;
              YAML::as_if<std::string,void>::operator()((std::string *)v581, (YAML::Node **)v571);
              v54 = (std::__shared_weak_count *)*((_QWORD *)&v558 + 1);
              if (*((_QWORD *)&v558 + 1))
              {
                v55 = (unint64_t *)(*((_QWORD *)&v558 + 1) + 8);
                do
                  v56 = __ldaxr(v55);
                while (__stlxr(v56 - 1, v55));
                if (!v56)
                {
                  ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
                  std::__shared_weak_count::__release_weak(v54);
                }
              }
              if ((__p[31] & 0x80000000) != 0)
                operator delete(*(void **)&__p[8]);
              if ((siri::dialogengine::ObjectSchema::SetEnumValueType((uint64_t)v634, (uint64_t *)v581) & 1) != 0)
                goto LABEL_597;
              std::operator+<char>();
              v57 = std::string::append(&__stra, "' in schema file: ");
              v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
              *(_QWORD *)&v571[16] = *((_QWORD *)&v57->__r_.__value_.__l + 2);
              *(_OWORD *)v571 = v58;
              v57->__r_.__value_.__l.__size_ = 0;
              v57->__r_.__value_.__r.__words[2] = 0;
              v57->__r_.__value_.__r.__words[0] = 0;
              v59 = *(char *)(a3 + 23);
              if (v59 >= 0)
                v60 = (const std::string::value_type *)a3;
              else
                v60 = *(const std::string::value_type **)a3;
              if (v59 >= 0)
                v61 = *(unsigned __int8 *)(a3 + 23);
              else
                v61 = *(_QWORD *)(a3 + 8);
              v62 = std::string::append((std::string *)v571, v60, v61);
              v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
              *(_QWORD *)&__p[16] = *((_QWORD *)&v62->__r_.__value_.__l + 2);
              *(_OWORD *)__p = v63;
              v62->__r_.__value_.__l.__size_ = 0;
              v62->__r_.__value_.__r.__words[2] = 0;
              v62->__r_.__value_.__r.__words[0] = 0;
              if (a2)
                goto LABEL_61;
              goto LABEL_591;
            }
LABEL_173:
            YAML::Node::operator[]<char [11]>((uint64_t)&__stra, (YAML::Node *)v631, "properties");
            if (__stra.__r_.__value_.__s.__data_[0])
            {
              if (*((_QWORD *)&v605 + 1))
              {
                YAML::detail::node_data::begin(***((_QWORD ***)&v605 + 1), (uint64_t)__p);
                v76 = *((_QWORD *)&v604 + 1);
                v77 = (std::__shared_weak_count *)v605;
                if ((_QWORD)v605)
                {
                  v78 = (unint64_t *)(v605 + 8);
                  do
                    v79 = __ldxr(v78);
                  while (__stxr(v79 + 1, v78));
                  *(_OWORD *)v610 = *(_OWORD *)__p;
                  *(_OWORD *)&v610[16] = *(_OWORD *)&__p[16];
                  *(_QWORD *)&v610[32] = v76;
                  v611 = v77;
                  do
                    v80 = __ldxr(v78);
                  while (__stxr(v80 + 1, v78));
                  do
                    v81 = __ldaxr(v78);
                  while (__stlxr(v81 - 1, v78));
                  if (!v81)
                  {
                    ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                    std::__shared_weak_count::__release_weak(v77);
                  }
                }
                else
                {
                  *(_OWORD *)v610 = *(_OWORD *)__p;
                  *(_OWORD *)&v610[16] = *(_OWORD *)&__p[16];
                  *(_QWORD *)&v610[32] = *((_QWORD *)&v604 + 1);
                  v611 = 0;
                }
              }
              else
              {
                *(_DWORD *)v610 = 0;
                memset(&v610[8], 0, 32);
                v611 = 0;
              }
              if (__stra.__r_.__value_.__s.__data_[0] && *((_QWORD *)&v605 + 1))
              {
                YAML::detail::node_data::end(***((_QWORD ***)&v605 + 1), (uint64_t)__p);
                if ((_QWORD)v605)
                {
                  v542 = (std::__shared_weak_count *)v605;
                  v150 = (unint64_t *)(v605 + 8);
                  do
                    v151 = __ldxr(v150);
                  while (__stxr(v151 + 1, v150));
                  v553 = *(_DWORD *)__p;
                  v549 = *(_QWORD *)&__p[8];
                  v545 = *(_QWORD *)&__p[16];
                  do
                    v152 = __ldxr(v150);
                  while (__stxr(v152 + 1, v150));
                  do
                    v153 = __ldaxr(v150);
                  while (__stlxr(v153 - 1, v150));
                  if (!v153)
                  {
                    ((void (*)(std::__shared_weak_count *))v542->__on_zero_shared)(v542);
                    std::__shared_weak_count::__release_weak(v542);
                  }
                }
                else
                {
                  v542 = 0;
                  v553 = *(_DWORD *)__p;
                  v549 = *(_QWORD *)&__p[8];
                  v545 = *(_QWORD *)&__p[16];
                }
              }
              else
              {
                v549 = 0;
                v545 = 0;
                v542 = 0;
                v553 = 0;
              }
            }
            else
            {
              v549 = 0;
              v545 = 0;
              v542 = 0;
              v553 = 0;
              *(_DWORD *)v610 = 0;
              memset(&v610[8], 0, 32);
              v611 = 0;
            }
LABEL_344:
            if (*(_DWORD *)v610 != v553)
              goto LABEL_349;
            v154 = &v610[8];
            v155 = v549;
            if (v553 != 1)
            {
              if (v553 != 2)
                goto LABEL_569;
              v154 = &v610[16];
              v155 = v545;
            }
            if (*(_QWORD *)v154 != v155)
            {
LABEL_349:
              YAML::detail::iterator_base<YAML::detail::iterator_value>::operator*((uint64_t)v581, (uint64_t)v610);
              v577 = 0u;
              v578 = 65792;
              v575 = 0u;
              v576 = 0u;
              v574 = 0u;
              v572 = 0u;
              memset(v573, 0, sizeof(v573));
              memset(&v571[8], 0, 32);
              *(_QWORD *)v571 = &off_1E793AE08;
              memset(v579, 0, 80);
              if (!BYTE8(v583))
              {
                v524 = __cxa_allocate_exception(0x38uLL);
                if (SBYTE7(v585) < 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)v584, *((std::string::size_type *)&v584 + 1));
                }
                else
                {
                  *(_OWORD *)__p = v584;
                  *(_QWORD *)&__p[16] = v585;
                }
                YAML::InvalidNode::InvalidNode(v524, (uint64_t)__p);
              }
              *(_QWORD *)__p = (char *)&v583 + 8;
              YAML::as_if<std::string,void>::operator()((std::string *)v608, (YAML::Node **)__p);
              std::string::operator=((std::string *)&v571[8], (const std::string *)v608);
              if ((v608[23] & 0x80000000) != 0)
                operator delete(*(void **)v608);
              if (v587)
              {
                if (v592)
                {
                  YAML::detail::node_data::begin(**v592, (uint64_t)__p);
                  v156 = v590;
                  v157 = v591;
                  if (v591)
                  {
                    p_shared_owners = (unint64_t *)&v591->__shared_owners_;
                    do
                      v159 = __ldxr(p_shared_owners);
                    while (__stxr(v159 + 1, p_shared_owners));
                    *(_OWORD *)v608 = *(_OWORD *)__p;
                    *(_OWORD *)&v608[16] = *(_OWORD *)&__p[16];
                    *(_QWORD *)&v608[32] = v156;
                    v609 = v157;
                    do
                      v160 = __ldxr(p_shared_owners);
                    while (__stxr(v160 + 1, p_shared_owners));
                    do
                      v161 = __ldaxr(p_shared_owners);
                    while (__stlxr(v161 - 1, p_shared_owners));
                    if (!v161)
                    {
                      ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
                      std::__shared_weak_count::__release_weak(v157);
                    }
                  }
                  else
                  {
                    *(_OWORD *)v608 = *(_OWORD *)__p;
                    *(_OWORD *)&v608[16] = *(_OWORD *)&__p[16];
                    *(_QWORD *)&v608[32] = v590;
                    v609 = 0;
                  }
                }
                else
                {
                  *(_DWORD *)v608 = 0;
                  memset(&v608[8], 0, 32);
                  v609 = 0;
                }
                if (v587 && v592)
                {
                  YAML::detail::node_data::end(**v592, (uint64_t)__p);
                  if (v591)
                  {
                    v164 = v591;
                    v166 = (unint64_t *)&v591->__shared_owners_;
                    do
                      v167 = __ldxr(v166);
                    while (__stxr(v167 + 1, v166));
                    v165 = *(_DWORD *)__p;
                    v162 = *(_QWORD *)&__p[8];
                    v163 = *(_QWORD *)&__p[16];
                    do
                      v168 = __ldxr(v166);
                    while (__stxr(v168 + 1, v166));
                    do
                      v169 = __ldaxr(v166);
                    while (__stlxr(v169 - 1, v166));
                    if (!v169)
                    {
                      ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
                      std::__shared_weak_count::__release_weak(v164);
                    }
                  }
                  else
                  {
                    v164 = 0;
                    v165 = *(_DWORD *)__p;
                    v162 = *(_QWORD *)&__p[8];
                    v163 = *(_QWORD *)&__p[16];
                  }
                }
                else
                {
                  v162 = 0;
                  v163 = 0;
                  v164 = 0;
                  v165 = 0;
                }
              }
              else
              {
                v162 = 0;
                v163 = 0;
                v164 = 0;
                v165 = 0;
                *(_DWORD *)v608 = 0;
                memset(&v608[8], 0, 32);
                v609 = 0;
              }
              while (1)
              {
                if (*(_DWORD *)v608 == v165)
                {
                  v170 = &v608[8];
                  v171 = v162;
                  if (v165 != 1)
                  {
                    if (v165 != 2)
                      goto LABEL_505;
                    v170 = &v608[16];
                    v171 = v163;
                  }
                  if (*(_QWORD *)v170 == v171)
                  {
LABEL_505:
                    if (v164)
                    {
                      v204 = (unint64_t *)&v164->__shared_owners_;
                      do
                        v205 = __ldaxr(v204);
                      while (__stlxr(v205 - 1, v204));
                      if (!v205)
                      {
                        ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
                        std::__shared_weak_count::__release_weak(v164);
                      }
                    }
                    v206 = v609;
                    if (v609)
                    {
                      v207 = (unint64_t *)&v609->__shared_owners_;
                      do
                        v208 = __ldaxr(v207);
                      while (__stlxr(v208 - 1, v207));
                      if (!v208)
                      {
                        ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
                        std::__shared_weak_count::__release_weak(v206);
                      }
                    }
                    if ((v571[31] & 0x80000000) != 0)
                    {
                      std::string::__init_copy_ctor_external((std::string *)v608, *(const std::string::value_type **)&v571[8], *(std::string::size_type *)&v571[16]);
                    }
                    else
                    {
                      *(_OWORD *)v608 = *(_OWORD *)&v571[8];
                      *(_QWORD *)&v608[16] = *(_QWORD *)&v571[24];
                    }
                    siri::dialogengine::ObjectSchema::GetProperty(__p, v634, a2, v608, 1);
                    v209 = v570;
                    if (v570)
                      siri::dialogengine::ObjectProperty::~ObjectProperty((void **)__p);
                    if ((v608[23] & 0x80000000) != 0)
                    {
                      operator delete(*(void **)v608);
                      if (v209)
                        goto LABEL_524;
                    }
                    else
                    {
                      if (!v209)
                        goto LABEL_546;
LABEL_524:
                      if ((v571[31] & 0x80000000) != 0)
                      {
                        std::string::__init_copy_ctor_external((std::string *)v593, *(const std::string::value_type **)&v571[8], *(std::string::size_type *)&v571[16]);
                      }
                      else
                      {
                        *(_OWORD *)v593 = *(_OWORD *)&v571[8];
                        *(_QWORD *)&v593[16] = *(_QWORD *)&v571[24];
                      }
                      v210 = std::string::insert((std::string *)v593, 0, "Duplicate property name '");
                      v211 = *(_OWORD *)&v210->__r_.__value_.__l.__data_;
                      *(_QWORD *)&v595[16] = *((_QWORD *)&v210->__r_.__value_.__l + 2);
                      *(_OWORD *)v595 = v211;
                      v210->__r_.__value_.__l.__size_ = 0;
                      v210->__r_.__value_.__r.__words[2] = 0;
                      v210->__r_.__value_.__r.__words[0] = 0;
                      v212 = std::string::append((std::string *)v595, "' in '");
                      v213 = *(_OWORD *)&v212->__r_.__value_.__l.__data_;
                      *(_QWORD *)&v601[16] = *((_QWORD *)&v212->__r_.__value_.__l + 2);
                      *(_OWORD *)v601 = v213;
                      v212->__r_.__value_.__l.__size_ = 0;
                      v212->__r_.__value_.__r.__words[2] = 0;
                      v212->__r_.__value_.__r.__words[0] = 0;
                      v214 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
                      if (v214 >= 0)
                        v215 = __str;
                      else
                        v215 = (std::string *)__str->__r_.__value_.__r.__words[0];
                      if (v214 >= 0)
                        size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
                      else
                        size = __str->__r_.__value_.__l.__size_;
                      v217 = std::string::append((std::string *)v601, (const std::string::value_type *)v215, size);
                      v218 = *(_OWORD *)&v217->__r_.__value_.__l.__data_;
                      *(_QWORD *)&v608[16] = *((_QWORD *)&v217->__r_.__value_.__l + 2);
                      *(_OWORD *)v608 = v218;
                      v217->__r_.__value_.__l.__size_ = 0;
                      v217->__r_.__value_.__r.__words[2] = 0;
                      v217->__r_.__value_.__r.__words[0] = 0;
                      v219 = std::string::append((std::string *)v608, "'");
                      v220 = *(_OWORD *)&v219->__r_.__value_.__l.__data_;
                      *(_QWORD *)&__p[16] = *((_QWORD *)&v219->__r_.__value_.__l + 2);
                      *(_OWORD *)__p = v220;
                      v219->__r_.__value_.__l.__size_ = 0;
                      v219->__r_.__value_.__r.__words[2] = 0;
                      v219->__r_.__value_.__r.__words[0] = 0;
                      if (a2)
                        siri::dialogengine::Context::AddSchemaError(a2, (__int128 *)__p);
                      else
                        siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 3u);
                      if ((__p[23] & 0x80000000) != 0)
                        operator delete(*(void **)__p);
                      if ((v608[23] & 0x80000000) != 0)
                        operator delete(*(void **)v608);
                      if ((v601[23] & 0x80000000) != 0)
                        operator delete(*(void **)v601);
                      if ((v595[23] & 0x80000000) != 0)
                        operator delete(*(void **)v595);
                      if ((v593[23] & 0x80000000) != 0)
                        operator delete(*(void **)v593);
                    }
LABEL_546:
                    siri::dialogengine::ObjectSchema::AddProperty((uint64_t **)v634, (const siri::dialogengine::ObjectProperty *)v571);
                    siri::dialogengine::ObjectProperty::~ObjectProperty((void **)v571);
                    v221 = v591;
                    if (v591)
                    {
                      v222 = (unint64_t *)&v591->__shared_owners_;
                      do
                        v223 = __ldaxr(v222);
                      while (__stlxr(v223 - 1, v222));
                      if (!v223)
                      {
                        ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
                        std::__shared_weak_count::__release_weak(v221);
                      }
                    }
                    if (v589 < 0)
                      operator delete(v588);
                    v224 = v586;
                    if (v586)
                    {
                      v225 = (unint64_t *)&v586->__shared_owners_;
                      do
                        v226 = __ldaxr(v225);
                      while (__stlxr(v226 - 1, v225));
                      if (!v226)
                      {
                        ((void (*)(std::__shared_weak_count *))v224->__on_zero_shared)(v224);
                        std::__shared_weak_count::__release_weak(v224);
                      }
                    }
                    if (SBYTE7(v585) < 0)
                      operator delete((void *)v584);
                    v227 = v582;
                    if (v582)
                    {
                      v228 = (unint64_t *)&v582->__shared_owners_;
                      do
                        v229 = __ldaxr(v228);
                      while (__stlxr(v229 - 1, v228));
                      if (!v229)
                      {
                        ((void (*)(std::__shared_weak_count *))v227->__on_zero_shared)(v227);
                        std::__shared_weak_count::__release_weak(v227);
                      }
                    }
                    if ((v581[31] & 0x80000000) != 0)
                      operator delete(*(void **)&v581[8]);
                    YAML::detail::node_iterator_base<YAML::detail::node>::operator++((uint64_t)v610);
                    goto LABEL_344;
                  }
                }
                YAML::detail::iterator_base<YAML::detail::iterator_value const>::operator*((uint64_t)__p, (uint64_t)v608);
                if (!v560)
                {
                  v516 = __cxa_allocate_exception(0x38uLL);
                  if (SHIBYTE(v562) < 0)
                  {
                    std::string::__init_copy_ctor_external((std::string *)v601, (const std::string::value_type *)v561, *((std::string::size_type *)&v561 + 1));
                  }
                  else
                  {
                    *(_OWORD *)v601 = v561;
                    *(_QWORD *)&v601[16] = v562;
                  }
                  YAML::InvalidNode::InvalidNode(v516, (uint64_t)v601);
                }
                *(_QWORD *)v601 = &v560;
                YAML::as_if<std::string,void>::operator()((std::string *)v595, (YAML::Node **)v601);
                if (!v564)
                {
                  v517 = __cxa_allocate_exception(0x38uLL);
                  if (SHIBYTE(v566) < 0)
                  {
                    std::string::__init_copy_ctor_external((std::string *)v601, (const std::string::value_type *)v565, *((std::string::size_type *)&v565 + 1));
                  }
                  else
                  {
                    *(_OWORD *)v601 = v565;
                    *(_QWORD *)&v601[16] = v566;
                  }
                  YAML::InvalidNode::InvalidNode(v517, (uint64_t)v601);
                }
                *(_QWORD *)v601 = &v564;
                YAML::as_if<std::string,void>::operator()((std::string *)v593, (YAML::Node **)v601);
                if ((v595[23] & 0x80) != 0)
                  break;
                switch(v595[23])
                {
                  case 4:
                    v172 = *(_DWORD *)v595;
                    goto LABEL_395;
                  case 8:
                    if (*(_QWORD *)v595 == 0x6C616E6F6974706FLL)
                      goto LABEL_431;
                    v176 = v595;
                    break;
                  case 0xA:
                    v178 = *(_QWORD *)v595 == 0x7461636572706564 && *(unsigned __int16 *)&v595[8] == 25701;
                    v174 = (std::string *)((char *)&v576 + 8);
                    if (!v178)
                      goto LABEL_457;
                    goto LABEL_465;
                  case 0xB:
                    v179 = *(_QWORD *)v595 == 0x7470697263736564 && *(_QWORD *)&v595[3] == 0x6E6F697470697263;
                    v174 = (std::string *)v573;
                    if (!v179)
                      goto LABEL_457;
                    goto LABEL_465;
                  case 0xC:
                    v180 = *(_QWORD *)v595 == 0x765F656C706D6173 && *(unsigned int *)&v595[8] == 1702194273;
                    v174 = (std::string *)&v573[3];
                    if (!v180)
                      goto LABEL_457;
                    goto LABEL_465;
                  case 0xD:
                    v175 = *(_QWORD *)v595 == 0x5F6E6F6973726576 && *(_QWORD *)&v595[5] == 0x64656464615F6E6FLL;
                    v174 = (std::string *)&v575;
                    if (!v175)
                      goto LABEL_457;
                    goto LABEL_465;
                  case 0x10:
                    v177 = *(_QWORD *)v595 == 0x6369746E616D6573 && *(_QWORD *)&v595[8] == 0x747065636E6F635FLL;
                    v174 = (std::string *)v579;
                    if (!v177)
                      goto LABEL_457;
                    goto LABEL_465;
                  default:
                    goto LABEL_457;
                }
LABEL_456:
                if (*v176 != 0x6465746361646572)
                  goto LABEL_457;
                v203 = siri::dialogengine::StringToBool((const std::string *)v593);
                BYTE2(v578) = v203;
                if ((v571[31] & 0x80000000) != 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)v601, *(const std::string::value_type **)&v571[8], *(std::string::size_type *)&v571[16]);
                }
                else
                {
                  *(_OWORD *)v601 = *(_OWORD *)&v571[8];
                  *(_QWORD *)&v601[16] = *(_QWORD *)&v571[24];
                }
                v645.__first_ = (std::__split_buffer<std::string>::pointer)v601;
                *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v626, (const void **)v601, &v645)+ 56) = v203;
                if ((v601[23] & 0x80000000) != 0)
                {
                  v193 = *(void **)v601;
                  goto LABEL_473;
                }
LABEL_474:
                if ((v593[23] & 0x80000000) != 0)
                  operator delete(*(void **)v593);
                if ((v595[23] & 0x80000000) != 0)
                  operator delete(*(void **)v595);
                v194 = v568;
                if (v568)
                {
                  v195 = (unint64_t *)&v568->__shared_owners_;
                  do
                    v196 = __ldaxr(v195);
                  while (__stlxr(v196 - 1, v195));
                  if (!v196)
                  {
                    ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
                    std::__shared_weak_count::__release_weak(v194);
                  }
                }
                if (SHIBYTE(v566) < 0)
                  operator delete((void *)v565);
                v197 = v563;
                if (v563)
                {
                  v198 = (unint64_t *)&v563->__shared_owners_;
                  do
                    v199 = __ldaxr(v198);
                  while (__stlxr(v199 - 1, v198));
                  if (!v199)
                  {
                    ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
                    std::__shared_weak_count::__release_weak(v197);
                  }
                }
                if (SHIBYTE(v562) < 0)
                  operator delete((void *)v561);
                v200 = (std::__shared_weak_count *)*((_QWORD *)&v558 + 1);
                if (*((_QWORD *)&v558 + 1))
                {
                  v201 = (unint64_t *)(*((_QWORD *)&v558 + 1) + 8);
                  do
                    v202 = __ldaxr(v201);
                  while (__stlxr(v202 - 1, v201));
                  if (!v202)
                  {
                    ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
                    std::__shared_weak_count::__release_weak(v200);
                  }
                }
                if ((__p[31] & 0x80000000) != 0)
                  operator delete(*(void **)&__p[8]);
                YAML::detail::node_iterator_base<YAML::detail::node>::operator++((uint64_t)v608);
              }
              switch(*(_QWORD *)&v595[8])
              {
                case 0xALL:
                  v173 = **(_QWORD **)v595 == 0x7461636572706564 && *(_WORD *)(*(_QWORD *)v595 + 8) == 25701;
                  v174 = (std::string *)((char *)&v576 + 8);
                  if (v173)
                    goto LABEL_465;
                  goto LABEL_448;
                case 0xBLL:
                  v184 = **(_QWORD **)v595 == 0x7470697263736564
                      && *(_QWORD *)(*(_QWORD *)v595 + 3) == 0x6E6F697470697263;
                  v174 = (std::string *)v573;
                  if (!v184)
                    goto LABEL_448;
                  goto LABEL_465;
                case 0xCLL:
                case 0xELL:
                case 0xFLL:
                  goto LABEL_429;
                case 0xDLL:
                  v182 = **(_QWORD **)v595 == 0x5F6E6F6973726576
                      && *(_QWORD *)(*(_QWORD *)v595 + 5) == 0x64656464615F6E6FLL;
                  v174 = (std::string *)&v575;
                  if (!v182)
                    goto LABEL_448;
                  goto LABEL_465;
                case 0x10:
                  v183 = **(_QWORD **)v595 == 0x6369746E616D6573
                      && *(_QWORD *)(*(_QWORD *)v595 + 8) == 0x747065636E6F635FLL;
                  v174 = (std::string *)v579;
                  if (v183)
                    goto LABEL_465;
LABEL_448:
                  v181 = *(_QWORD *)&v595[8] == 8;
                  goto LABEL_449;
                default:
                  if (*(_QWORD *)&v595[8] != 4)
                  {
LABEL_429:
                    v181 = *(_QWORD *)&v595[8] == 8;
                    if (*(_QWORD *)&v595[8] == 8)
                    {
                      if (**(_QWORD **)v595 == 0x6C616E6F6974706FLL)
                      {
LABEL_431:
                        BYTE1(v578) = siri::dialogengine::StringToBool((const std::string *)v593);
                        goto LABEL_474;
                      }
LABEL_455:
                      v176 = *(_QWORD **)v595;
                      goto LABEL_456;
                    }
LABEL_449:
                    if (*(_QWORD *)&v595[8] != 12
                      || (**(_QWORD **)v595 == 0x765F656C706D6173
                        ? (v185 = *(unsigned int *)(*(_QWORD *)v595 + 8) == 1702194273)
                        : (v185 = 0),
                          v174 = (std::string *)&v573[3],
                          !v185))
                    {
                      if (!v181)
                        break;
                      goto LABEL_455;
                    }
LABEL_465:
                    std::string::operator=(v174, (const std::string *)v593);
                    goto LABEL_474;
                  }
                  v172 = **(_DWORD **)v595;
LABEL_395:
                  v174 = (std::string *)&v571[32];
                  if (v172 == 1701869940)
                    goto LABEL_465;
                  break;
              }
LABEL_457:
              std::operator+<char>();
              v186 = std::string::append(&v600, "' in schema file: ");
              v187 = *(_OWORD *)&v186->__r_.__value_.__l.__data_;
              v645.__end_ = (std::__split_buffer<std::string>::pointer)v186->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v645.__first_ = v187;
              v186->__r_.__value_.__l.__size_ = 0;
              v186->__r_.__value_.__r.__words[2] = 0;
              v186->__r_.__value_.__r.__words[0] = 0;
              v188 = *(char *)(a3 + 23);
              if (v188 >= 0)
                v189 = (const std::string::value_type *)a3;
              else
                v189 = *(const std::string::value_type **)a3;
              if (v188 >= 0)
                v190 = *(unsigned __int8 *)(a3 + 23);
              else
                v190 = *(_QWORD *)(a3 + 8);
              v191 = std::string::append((std::string *)&v645, v189, v190);
              v192 = *(_OWORD *)&v191->__r_.__value_.__l.__data_;
              *(_QWORD *)&v601[16] = *((_QWORD *)&v191->__r_.__value_.__l + 2);
              *(_OWORD *)v601 = v192;
              v191->__r_.__value_.__l.__size_ = 0;
              v191->__r_.__value_.__r.__words[2] = 0;
              v191->__r_.__value_.__r.__words[0] = 0;
              if (a2)
                siri::dialogengine::Context::AddSchemaError(a2, (__int128 *)v601);
              else
                siri::dialogengine::Log::LogWithLevel((uint64_t)v601, 3u);
              if ((v601[23] & 0x80000000) != 0)
                operator delete(*(void **)v601);
              if (SHIBYTE(v645.__end_) < 0)
                operator delete(v645.__first_);
              if (SHIBYTE(v600.__r_.__value_.__r.__words[2]) < 0)
              {
                v193 = (void *)v600.__r_.__value_.__r.__words[0];
LABEL_473:
                operator delete(v193);
                goto LABEL_474;
              }
              goto LABEL_474;
            }
LABEL_569:
            if (v542)
            {
              v230 = (unint64_t *)&v542->__shared_owners_;
              do
                v231 = __ldaxr(v230);
              while (__stlxr(v231 - 1, v230));
              if (!v231)
              {
                ((void (*)(std::__shared_weak_count *))v542->__on_zero_shared)(v542);
                std::__shared_weak_count::__release_weak(v542);
              }
            }
            v232 = v611;
            if (v611)
            {
              v233 = (unint64_t *)&v611->__shared_owners_;
              do
                v234 = __ldaxr(v233);
              while (__stlxr(v234 - 1, v233));
              if (!v234)
              {
                ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
                std::__shared_weak_count::__release_weak(v232);
              }
            }
            v235 = (std::__shared_weak_count *)v605;
            if (!(_QWORD)v605)
              goto LABEL_856;
            v236 = (unint64_t *)(v605 + 8);
            do
              v237 = __ldaxr(v236);
            while (__stlxr(v237 - 1, v236));
            goto LABEL_854;
          }
          if (!v51)
            goto LABEL_159;
LABEL_154:
          v34 = (std::string *)v613.__r_.__value_.__r.__words[0];
LABEL_155:
          data = (int)v34->__r_.__value_.__l.__data_;
          v66 = WORD2(v34->__r_.__value_.__r.__words[0]);
          if (data != 1970037110 || v66 != 29541)
            goto LABEL_159;
          YAML::Node::operator[]<char [7]>((uint64_t)&__stra, (YAML::Node *)v631, "values");
          if (__stra.__r_.__value_.__s.__data_[0])
          {
            if (*((_QWORD *)&v605 + 1))
            {
              YAML::detail::node_data::begin(***((_QWORD ***)&v605 + 1), (uint64_t)__p);
              v97 = *((_QWORD *)&v604 + 1);
              v98 = (std::__shared_weak_count *)v605;
              if ((_QWORD)v605)
              {
                v99 = (unint64_t *)(v605 + 8);
                do
                  v100 = __ldxr(v99);
                while (__stxr(v100 + 1, v99));
                *(_OWORD *)v610 = *(_OWORD *)__p;
                *(_OWORD *)&v610[16] = *(_OWORD *)&__p[16];
                *(_QWORD *)&v610[32] = v97;
                v611 = v98;
                do
                  v101 = __ldxr(v99);
                while (__stxr(v101 + 1, v99));
                do
                  v102 = __ldaxr(v99);
                while (__stlxr(v102 - 1, v99));
                if (!v102)
                {
                  ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
                  std::__shared_weak_count::__release_weak(v98);
                }
              }
              else
              {
                *(_OWORD *)v610 = *(_OWORD *)__p;
                *(_OWORD *)&v610[16] = *(_OWORD *)&__p[16];
                *(_QWORD *)&v610[32] = *((_QWORD *)&v604 + 1);
                v611 = 0;
              }
            }
            else
            {
              *(_DWORD *)v610 = 0;
              memset(&v610[8], 0, 32);
              v611 = 0;
            }
            if (__stra.__r_.__value_.__s.__data_[0] && *((_QWORD *)&v605 + 1))
            {
              YAML::detail::node_data::end(***((_QWORD ***)&v605 + 1), (uint64_t)__p);
              if ((_QWORD)v605)
              {
                v543 = (std::__shared_weak_count *)v605;
                v247 = (unint64_t *)(v605 + 8);
                do
                  v248 = __ldxr(v247);
                while (__stxr(v248 + 1, v247));
                v554 = *(_DWORD *)__p;
                v550 = *(_QWORD *)&__p[8];
                v546 = *(_QWORD *)&__p[16];
                do
                  v249 = __ldxr(v247);
                while (__stxr(v249 + 1, v247));
                do
                  v250 = __ldaxr(v247);
                while (__stlxr(v250 - 1, v247));
                if (!v250)
                {
                  ((void (*)(std::__shared_weak_count *))v543->__on_zero_shared)(v543);
                  std::__shared_weak_count::__release_weak(v543);
                }
              }
              else
              {
                v543 = 0;
                v554 = *(_DWORD *)__p;
                v550 = *(_QWORD *)&__p[8];
                v546 = *(_QWORD *)&__p[16];
              }
            }
            else
            {
              v550 = 0;
              v546 = 0;
              v543 = 0;
              v554 = 0;
            }
          }
          else
          {
            v550 = 0;
            v546 = 0;
            v543 = 0;
            v554 = 0;
            *(_DWORD *)v610 = 0;
            memset(&v610[8], 0, 32);
            v611 = 0;
          }
LABEL_637:
          if (*(_DWORD *)v610 == v554)
          {
            v251 = &v610[8];
            v252 = v550;
            if (v554 != 1)
            {
              if (v554 != 2)
                goto LABEL_841;
              v251 = &v610[16];
              v252 = v546;
            }
            if (*(_QWORD *)v251 == v252)
            {
LABEL_841:
              if (v543)
              {
                v334 = (unint64_t *)&v543->__shared_owners_;
                do
                  v335 = __ldaxr(v334);
                while (__stlxr(v335 - 1, v334));
                if (!v335)
                {
                  ((void (*)(std::__shared_weak_count *))v543->__on_zero_shared)(v543);
                  std::__shared_weak_count::__release_weak(v543);
                }
              }
              v336 = v611;
              if (v611)
              {
                v337 = (unint64_t *)&v611->__shared_owners_;
                do
                  v338 = __ldaxr(v337);
                while (__stlxr(v338 - 1, v337));
                if (!v338)
                {
                  ((void (*)(std::__shared_weak_count *))v336->__on_zero_shared)(v336);
                  std::__shared_weak_count::__release_weak(v336);
                }
              }
              v235 = (std::__shared_weak_count *)v605;
              if (!(_QWORD)v605)
                goto LABEL_856;
              v339 = (unint64_t *)(v605 + 8);
              do
                v237 = __ldaxr(v339);
              while (__stlxr(v237 - 1, v339));
LABEL_854:
              if (!v237)
              {
                ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
                std::__shared_weak_count::__release_weak(v235);
              }
LABEL_856:
              if ((SBYTE7(v604) & 0x80000000) == 0)
                goto LABEL_600;
              v141 = (void *)__stra.__r_.__value_.__l.__size_;
              goto LABEL_599;
            }
          }
          YAML::detail::iterator_base<YAML::detail::iterator_value>::operator*((uint64_t)__p, (uint64_t)v610);
          *(_QWORD *)v581 = &off_1E7939438;
          memset(&v581[16], 0, 24);
          LODWORD(v582) = 0;
          v583 = 0u;
          v584 = 0u;
          v585 = 0u;
          *(_DWORD *)&v581[8] = HIDWORD(v638);
          if (!v560)
          {
            v525 = __cxa_allocate_exception(0x38uLL);
            if (SHIBYTE(v562) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v571, (const std::string::value_type *)v561, *((std::string::size_type *)&v561 + 1));
            }
            else
            {
              *(_OWORD *)v571 = v561;
              *(_QWORD *)&v571[16] = v562;
            }
            YAML::InvalidNode::InvalidNode(v525, (uint64_t)v571);
          }
          *(_QWORD *)v571 = &v560;
          YAML::as_if<std::string,void>::operator()((std::string *)v595, (YAML::Node **)v571);
          std::string::operator=((std::string *)&v581[16], (const std::string *)v595);
          if (v564)
          {
            if (v569)
            {
              YAML::detail::node_data::begin(**v569, (uint64_t)v571);
              v253 = v567;
              v254 = v568;
              if (v568)
              {
                v255 = (unint64_t *)&v568->__shared_owners_;
                do
                  v256 = __ldxr(v255);
                while (__stxr(v256 + 1, v255));
                *(_OWORD *)v608 = *(_OWORD *)v571;
                *(_OWORD *)&v608[16] = *(_OWORD *)&v571[16];
                *(_QWORD *)&v608[32] = v253;
                v609 = v254;
                do
                  v257 = __ldxr(v255);
                while (__stxr(v257 + 1, v255));
                do
                  v258 = __ldaxr(v255);
                while (__stlxr(v258 - 1, v255));
                if (!v258)
                {
                  ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
                  std::__shared_weak_count::__release_weak(v254);
                }
              }
              else
              {
                *(_OWORD *)v608 = *(_OWORD *)v571;
                *(_OWORD *)&v608[16] = *(_OWORD *)&v571[16];
                *(_QWORD *)&v608[32] = v567;
                v609 = 0;
              }
            }
            else
            {
              *(_DWORD *)v608 = 0;
              memset(&v608[8], 0, 32);
              v609 = 0;
            }
            if (v564 && v569)
            {
              YAML::detail::node_data::end(**v569, (uint64_t)v571);
              v261 = v568;
              if (v568)
              {
                v263 = (unint64_t *)&v568->__shared_owners_;
                do
                  v264 = __ldxr(v263);
                while (__stxr(v264 + 1, v263));
                v262 = *(_DWORD *)v571;
                v260 = *(_QWORD *)&v571[16];
                v259 = *(_QWORD *)&v571[8];
                do
                  v265 = __ldxr(v263);
                while (__stxr(v265 + 1, v263));
                do
                  v266 = __ldaxr(v263);
                while (__stlxr(v266 - 1, v263));
                if (!v266)
                {
                  ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
                  std::__shared_weak_count::__release_weak(v261);
                }
              }
              else
              {
                v262 = *(_DWORD *)v571;
                v260 = *(_QWORD *)&v571[16];
                v259 = *(_QWORD *)&v571[8];
              }
            }
            else
            {
              v259 = 0;
              v260 = 0;
              v261 = 0;
              v262 = 0;
            }
          }
          else
          {
            v259 = 0;
            v260 = 0;
            v261 = 0;
            v262 = 0;
            *(_DWORD *)v608 = 0;
            memset(&v608[8], 0, 32);
            v609 = 0;
          }
          while (1)
          {
            if (*(_DWORD *)v608 == v262)
            {
              v267 = &v608[8];
              v268 = v259;
              if (v262 != 1)
              {
                if (v262 != 2)
                  goto LABEL_775;
                v267 = &v608[16];
                v268 = v260;
              }
              if (*(_QWORD *)v267 == v268)
              {
LABEL_775:
                if (v261)
                {
                  v308 = (unint64_t *)&v261->__shared_owners_;
                  do
                    v309 = __ldaxr(v308);
                  while (__stlxr(v309 - 1, v308));
                  if (!v309)
                  {
                    ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
                    std::__shared_weak_count::__release_weak(v261);
                  }
                }
                v310 = v609;
                if (v609)
                {
                  v311 = (unint64_t *)&v609->__shared_owners_;
                  do
                    v312 = __ldaxr(v311);
                  while (__stlxr(v312 - 1, v311));
                  if (!v312)
                  {
                    ((void (*)(std::__shared_weak_count *))v310->__on_zero_shared)(v310);
                    std::__shared_weak_count::__release_weak(v310);
                  }
                }
                if ((v581[39] & 0x80000000) != 0)
                  std::string::__init_copy_ctor_external(&v556, *(const std::string::value_type **)&v581[16], *(std::string::size_type *)&v581[24]);
                else
                  v556 = *(std::string *)&v581[16];
                siri::dialogengine::ObjectSchema::GetEnumerant((uint64_t)v634, (char *)&v556, (siri::dialogengine::ObjectEnumerant *)v571);
                v313 = BYTE8(v574);
                if (BYTE8(v574))
                  siri::dialogengine::ObjectEnumerant::~ObjectEnumerant((void **)v571);
                if (SHIBYTE(v556.__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(v556.__r_.__value_.__l.__data_);
                  if (!v313)
                    goto LABEL_816;
                }
                else if (!v313)
                {
                  goto LABEL_816;
                }
                if ((v581[39] & 0x80000000) != 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)&v645, *(const std::string::value_type **)&v581[16], *(std::string::size_type *)&v581[24]);
                }
                else
                {
                  *(_OWORD *)&v645.__first_ = *(_OWORD *)&v581[16];
                  v645.__end_ = *(std::__split_buffer<std::string>::pointer *)&v581[32];
                }
                v314 = std::string::insert((std::string *)&v645, 0, "Duplicate enumerant name '");
                v315 = *(_OWORD *)&v314->__r_.__value_.__l.__data_;
                *(_QWORD *)&v593[16] = *((_QWORD *)&v314->__r_.__value_.__l + 2);
                *(_OWORD *)v593 = v315;
                v314->__r_.__value_.__l.__size_ = 0;
                v314->__r_.__value_.__r.__words[2] = 0;
                v314->__r_.__value_.__r.__words[0] = 0;
                v316 = std::string::append((std::string *)v593, "' in '");
                v317 = *(_OWORD *)&v316->__r_.__value_.__l.__data_;
                *(_QWORD *)&v601[16] = *((_QWORD *)&v316->__r_.__value_.__l + 2);
                *(_OWORD *)v601 = v317;
                v316->__r_.__value_.__l.__size_ = 0;
                v316->__r_.__value_.__r.__words[2] = 0;
                v316->__r_.__value_.__r.__words[0] = 0;
                v318 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
                if (v318 >= 0)
                  v319 = __str;
                else
                  v319 = (std::string *)__str->__r_.__value_.__r.__words[0];
                if (v318 >= 0)
                  v320 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
                else
                  v320 = __str->__r_.__value_.__l.__size_;
                v321 = std::string::append((std::string *)v601, (const std::string::value_type *)v319, v320);
                v322 = *(_OWORD *)&v321->__r_.__value_.__l.__data_;
                *(_QWORD *)&v608[16] = *((_QWORD *)&v321->__r_.__value_.__l + 2);
                *(_OWORD *)v608 = v322;
                v321->__r_.__value_.__l.__size_ = 0;
                v321->__r_.__value_.__r.__words[2] = 0;
                v321->__r_.__value_.__r.__words[0] = 0;
                v323 = std::string::append((std::string *)v608, "'");
                v324 = *(_OWORD *)&v323->__r_.__value_.__l.__data_;
                *(_QWORD *)&v571[16] = *((_QWORD *)&v323->__r_.__value_.__l + 2);
                *(_OWORD *)v571 = v324;
                v323->__r_.__value_.__l.__size_ = 0;
                v323->__r_.__value_.__r.__words[2] = 0;
                v323->__r_.__value_.__r.__words[0] = 0;
                if (a2)
                  siri::dialogengine::Context::AddSchemaError(a2, (__int128 *)v571);
                else
                  siri::dialogengine::Log::LogWithLevel((uint64_t)v571, 3u);
                if ((v571[23] & 0x80000000) != 0)
                  operator delete(*(void **)v571);
                if ((v608[23] & 0x80000000) != 0)
                  operator delete(*(void **)v608);
                if ((v601[23] & 0x80000000) != 0)
                  operator delete(*(void **)v601);
                if ((v593[23] & 0x80000000) != 0)
                  operator delete(*(void **)v593);
                if (SHIBYTE(v645.__end_) < 0)
                  operator delete(v645.__first_);
LABEL_816:
                siri::dialogengine::ObjectSchema::AddEnumerant((siri::dialogengine::ObjectSchema *)v634, (const std::string *)v581);
                if ((v595[23] & 0x80000000) != 0)
                  operator delete(*(void **)v595);
                siri::dialogengine::ObjectEnumerant::~ObjectEnumerant((void **)v581);
                v325 = v568;
                if (v568)
                {
                  v326 = (unint64_t *)&v568->__shared_owners_;
                  do
                    v327 = __ldaxr(v326);
                  while (__stlxr(v327 - 1, v326));
                  if (!v327)
                  {
                    ((void (*)(std::__shared_weak_count *))v325->__on_zero_shared)(v325);
                    std::__shared_weak_count::__release_weak(v325);
                  }
                }
                if (SHIBYTE(v566) < 0)
                  operator delete((void *)v565);
                v328 = v563;
                if (v563)
                {
                  v329 = (unint64_t *)&v563->__shared_owners_;
                  do
                    v330 = __ldaxr(v329);
                  while (__stlxr(v330 - 1, v329));
                  if (!v330)
                  {
                    ((void (*)(std::__shared_weak_count *))v328->__on_zero_shared)(v328);
                    std::__shared_weak_count::__release_weak(v328);
                  }
                }
                if (SHIBYTE(v562) < 0)
                  operator delete((void *)v561);
                v331 = (std::__shared_weak_count *)*((_QWORD *)&v558 + 1);
                if (*((_QWORD *)&v558 + 1))
                {
                  v332 = (unint64_t *)(*((_QWORD *)&v558 + 1) + 8);
                  do
                    v333 = __ldaxr(v332);
                  while (__stlxr(v333 - 1, v332));
                  if (!v333)
                  {
                    ((void (*)(std::__shared_weak_count *))v331->__on_zero_shared)(v331);
                    std::__shared_weak_count::__release_weak(v331);
                  }
                }
                if ((__p[31] & 0x80000000) != 0)
                  operator delete(*(void **)&__p[8]);
                YAML::detail::node_iterator_base<YAML::detail::node>::operator++((uint64_t)v610);
                goto LABEL_637;
              }
            }
            YAML::detail::iterator_base<YAML::detail::iterator_value const>::operator*((uint64_t)v571, (uint64_t)v608);
            if (!LOBYTE(v573[0]))
            {
              v518 = __cxa_allocate_exception(0x38uLL);
              if (SHIBYTE(v573[3]) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)v601, (const std::string::value_type *)v573[1], v573[2]);
              }
              else
              {
                *(_OWORD *)v601 = *(_OWORD *)&v573[1];
                *(_QWORD *)&v601[16] = v573[3];
              }
              YAML::InvalidNode::InvalidNode(v518, (uint64_t)v601);
            }
            *(_QWORD *)v601 = v573;
            YAML::as_if<std::string,void>::operator()((std::string *)v593, (YAML::Node **)v601);
            if (!BYTE8(v575))
            {
              v519 = __cxa_allocate_exception(0x38uLL);
              if (SBYTE7(v577) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)v601, (const std::string::value_type *)v576, *((std::string::size_type *)&v576 + 1));
              }
              else
              {
                *(_OWORD *)v601 = v576;
                *(_QWORD *)&v601[16] = v577;
              }
              YAML::InvalidNode::InvalidNode(v519, (uint64_t)v601);
            }
            *(_QWORD *)v601 = (char *)&v575 + 8;
            YAML::as_if<std::string,void>::operator()((std::string *)&v645, (YAML::Node **)v601);
            if ((v593[23] & 0x80) != 0)
            {
              if (*(_QWORD *)&v593[8] != 5)
              {
                if (*(_QWORD *)&v593[8] != 10)
                {
                  if (*(_QWORD *)&v593[8] == 11)
                  {
                    v269 = **(_QWORD **)v593 == 0x7470697263736564
                        && *(_QWORD *)(*(_QWORD *)v593 + 3) == 0x6E6F697470697263;
                    goto LABEL_687;
                  }
LABEL_708:
                  std::operator+<char>();
                  v277 = std::string::append(&v599, "' under 'values:' in schema file: ");
                  v278 = *(_OWORD *)&v277->__r_.__value_.__l.__data_;
                  v600.__r_.__value_.__r.__words[2] = v277->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v600.__r_.__value_.__l.__data_ = v278;
                  v277->__r_.__value_.__l.__size_ = 0;
                  v277->__r_.__value_.__r.__words[2] = 0;
                  v277->__r_.__value_.__r.__words[0] = 0;
                  v279 = *(char *)(a3 + 23);
                  if (v279 >= 0)
                    v280 = (const std::string::value_type *)a3;
                  else
                    v280 = *(const std::string::value_type **)a3;
                  if (v279 >= 0)
                    v281 = *(unsigned __int8 *)(a3 + 23);
                  else
                    v281 = *(_QWORD *)(a3 + 8);
                  v282 = std::string::append(&v600, v280, v281);
                  v283 = *(_OWORD *)&v282->__r_.__value_.__l.__data_;
                  *(_QWORD *)&v601[16] = *((_QWORD *)&v282->__r_.__value_.__l + 2);
                  *(_OWORD *)v601 = v283;
                  v282->__r_.__value_.__l.__size_ = 0;
                  v282->__r_.__value_.__r.__words[2] = 0;
                  v282->__r_.__value_.__r.__words[0] = 0;
                  if (a2)
                    goto LABEL_772;
                  goto LABEL_715;
                }
                v271 = *(_BYTE **)v593;
LABEL_698:
                v273 = *(_QWORD *)v271;
                v274 = *((unsigned __int16 *)v271 + 4);
                v275 = v273 == 0x7461636572706564 && v274 == 25701;
                v270 = (std::string *)((char *)&v584 + 8);
                if (v275)
                {
LABEL_703:
                  std::string::operator=(v270, (const std::string *)&v645);
                  goto LABEL_722;
                }
                goto LABEL_708;
              }
              if (**(_DWORD **)v593 != 1970037110 || *(_BYTE *)(*(_QWORD *)v593 + 4) != 101)
                goto LABEL_708;
            }
            else
            {
              if (v593[23] != 5)
              {
                if (v593[23] != 10)
                {
                  if (v593[23] == 11)
                  {
                    v269 = *(_QWORD *)v593 == 0x7470697263736564 && *(_QWORD *)&v593[3] == 0x6E6F697470697263;
LABEL_687:
                    v270 = (std::string *)&v583;
                    if (v269)
                      goto LABEL_703;
                  }
                  goto LABEL_708;
                }
                v271 = v593;
                goto LABEL_698;
              }
              if (*(_DWORD *)v593 != 1970037110 || v593[4] != 101)
                goto LABEL_708;
            }
            if (HIDWORD(v638) == 3)
            {
              std::string::basic_string[abi:ne180100]<0>(v601, "Enums with value-type: string may not contain the 'value:' field");
              if (a2)
                siri::dialogengine::Context::AddSchemaError(a2, (__int128 *)v601);
              else
                siri::dialogengine::Log::LogWithLevel((uint64_t)v601, 3u);
              if ((v601[23] & 0x80000000) != 0)
                operator delete(*(void **)v601);
            }
            if (siri::dialogengine::IsStringANumber((const std::string *)&v645))
            {
              LOBYTE(v598.__begin_) = 0;
              v293 = siri::dialogengine::StringToInt((const std::string *)&v645, &v598, 0);
              if (LOBYTE(v598.__begin_))
              {
                LODWORD(v582) = v293;
                goto LABEL_722;
              }
              std::operator+<char>();
              v301 = std::string::append(&v599, "' to integer in schema file: ");
              v302 = *(_OWORD *)&v301->__r_.__value_.__l.__data_;
              v600.__r_.__value_.__r.__words[2] = v301->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v600.__r_.__value_.__l.__data_ = v302;
              v301->__r_.__value_.__l.__size_ = 0;
              v301->__r_.__value_.__r.__words[2] = 0;
              v301->__r_.__value_.__r.__words[0] = 0;
              v303 = *(char *)(a3 + 23);
              if (v303 >= 0)
                v304 = (const std::string::value_type *)a3;
              else
                v304 = *(const std::string::value_type **)a3;
              if (v303 >= 0)
                v305 = *(unsigned __int8 *)(a3 + 23);
              else
                v305 = *(_QWORD *)(a3 + 8);
              v306 = std::string::append(&v600, v304, v305);
              v307 = *(_OWORD *)&v306->__r_.__value_.__l.__data_;
              *(_QWORD *)&v601[16] = *((_QWORD *)&v306->__r_.__value_.__l + 2);
              *(_OWORD *)v601 = v307;
              v306->__r_.__value_.__l.__size_ = 0;
              v306->__r_.__value_.__r.__words[2] = 0;
              v306->__r_.__value_.__r.__words[0] = 0;
              if (a2)
              {
LABEL_772:
                siri::dialogengine::Context::AddSchemaError(a2, (__int128 *)v601);
                goto LABEL_716;
              }
            }
            else
            {
              std::operator+<char>();
              v294 = std::string::append(&v599, "' is not a number in schema file: ");
              v295 = *(_OWORD *)&v294->__r_.__value_.__l.__data_;
              v600.__r_.__value_.__r.__words[2] = v294->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v600.__r_.__value_.__l.__data_ = v295;
              v294->__r_.__value_.__l.__size_ = 0;
              v294->__r_.__value_.__r.__words[2] = 0;
              v294->__r_.__value_.__r.__words[0] = 0;
              v296 = *(char *)(a3 + 23);
              if (v296 >= 0)
                v297 = (const std::string::value_type *)a3;
              else
                v297 = *(const std::string::value_type **)a3;
              if (v296 >= 0)
                v298 = *(unsigned __int8 *)(a3 + 23);
              else
                v298 = *(_QWORD *)(a3 + 8);
              v299 = std::string::append(&v600, v297, v298);
              v300 = *(_OWORD *)&v299->__r_.__value_.__l.__data_;
              *(_QWORD *)&v601[16] = *((_QWORD *)&v299->__r_.__value_.__l + 2);
              *(_OWORD *)v601 = v300;
              v299->__r_.__value_.__l.__size_ = 0;
              v299->__r_.__value_.__r.__words[2] = 0;
              v299->__r_.__value_.__r.__words[0] = 0;
              if (a2)
                goto LABEL_772;
            }
LABEL_715:
            siri::dialogengine::Log::LogWithLevel((uint64_t)v601, 3u);
LABEL_716:
            if ((v601[23] & 0x80000000) != 0)
              operator delete(*(void **)v601);
            if (SHIBYTE(v600.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v600.__r_.__value_.__l.__data_);
            if (SHIBYTE(v599.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v599.__r_.__value_.__l.__data_);
LABEL_722:
            if (SHIBYTE(v645.__end_) < 0)
              operator delete(v645.__first_);
            if ((v593[23] & 0x80000000) != 0)
              operator delete(*(void **)v593);
            v284 = (std::__shared_weak_count *)v578;
            if (v578)
            {
              v285 = (unint64_t *)(v578 + 8);
              do
                v286 = __ldaxr(v285);
              while (__stlxr(v286 - 1, v285));
              if (!v286)
              {
                ((void (*)(std::__shared_weak_count *))v284->__on_zero_shared)(v284);
                std::__shared_weak_count::__release_weak(v284);
              }
            }
            if (SBYTE7(v577) < 0)
              operator delete((void *)v576);
            v287 = (std::__shared_weak_count *)*((_QWORD *)&v574 + 1);
            if (*((_QWORD *)&v574 + 1))
            {
              v288 = (unint64_t *)(*((_QWORD *)&v574 + 1) + 8);
              do
                v289 = __ldaxr(v288);
              while (__stlxr(v289 - 1, v288));
              if (!v289)
              {
                ((void (*)(std::__shared_weak_count *))v287->__on_zero_shared)(v287);
                std::__shared_weak_count::__release_weak(v287);
              }
            }
            if (SHIBYTE(v573[3]) < 0)
              operator delete((void *)v573[1]);
            v290 = (std::__shared_weak_count *)v572;
            if ((_QWORD)v572)
            {
              v291 = (unint64_t *)(v572 + 8);
              do
                v292 = __ldaxr(v291);
              while (__stlxr(v292 - 1, v291));
              if (!v292)
              {
                ((void (*)(std::__shared_weak_count *))v290->__on_zero_shared)(v290);
                std::__shared_weak_count::__release_weak(v290);
              }
            }
            if ((v571[31] & 0x80000000) != 0)
              operator delete(*(void **)&v571[8]);
            YAML::detail::node_iterator_base<YAML::detail::node>::operator++((uint64_t)v608);
          }
        }
LABEL_188:
        YAML::Node::operator[]<char [5]>((uint64_t)__p, (YAML::Node *)v631, "name");
        if (!__p[0])
        {
          v531 = __cxa_allocate_exception(0x38uLL);
          if ((__p[31] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v571, *(const std::string::value_type **)&__p[8], *(std::string::size_type *)&__p[16]);
          }
          else
          {
            *(_OWORD *)v571 = *(_OWORD *)&__p[8];
            *(_QWORD *)&v571[16] = *(_QWORD *)&__p[24];
          }
          YAML::InvalidNode::InvalidNode(v531, (uint64_t)v571);
        }
        *(_QWORD *)v571 = __p;
        YAML::as_if<std::string,void>::operator()((std::string *)v581, (YAML::Node **)v571);
        v87 = (std::__shared_weak_count *)*((_QWORD *)&v558 + 1);
        if (*((_QWORD *)&v558 + 1))
        {
          v88 = (unint64_t *)(*((_QWORD *)&v558 + 1) + 8);
          do
            v89 = __ldaxr(v88);
          while (__stlxr(v89 - 1, v88));
          if (!v89)
          {
            ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
            std::__shared_weak_count::__release_weak(v87);
          }
        }
        if ((__p[31] & 0x80000000) != 0)
          operator delete(*(void **)&__p[8]);
        v90 = v581[23];
        v91 = *(_QWORD *)&v581[8];
        if (v581[23] >= 0)
          v92 = v581[23];
        else
          v92 = *(_QWORD *)&v581[8];
        v93 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
        v94 = (char)v93;
        if ((v93 & 0x80u) != 0)
          v93 = __str->__r_.__value_.__l.__size_;
        if (v92 != v93)
          goto LABEL_231;
        if (v94 >= 0)
          v95 = __str;
        else
          v95 = (std::string *)__str->__r_.__value_.__r.__words[0];
        if ((v581[23] & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v581, v95, *(size_t *)&v581[8]) || v91 == 0)
            goto LABEL_590;
        }
        else
        {
          if (!v581[23])
            goto LABEL_590;
          v96 = v581;
          while (*v96 == v95->__r_.__value_.__s.__data_[0])
          {
            ++v96;
            v95 = (std::string *)((char *)v95 + 1);
            if (!--v90)
              goto LABEL_590;
          }
LABEL_231:
          if (!v93)
          {
LABEL_590:
            std::string::operator=(v634, (const std::string *)v581);
            goto LABEL_597;
          }
        }
        std::operator+<char>();
        v143 = std::string::append(&__stra, "' does not match filename: ");
        v144 = *(_OWORD *)&v143->__r_.__value_.__l.__data_;
        *(_QWORD *)&v571[16] = *((_QWORD *)&v143->__r_.__value_.__l + 2);
        *(_OWORD *)v571 = v144;
        v143->__r_.__value_.__l.__size_ = 0;
        v143->__r_.__value_.__r.__words[2] = 0;
        v143->__r_.__value_.__r.__words[0] = 0;
        v145 = *(char *)(a3 + 23);
        if (v145 >= 0)
          v146 = (const std::string::value_type *)a3;
        else
          v146 = *(const std::string::value_type **)a3;
        if (v145 >= 0)
          v147 = *(unsigned __int8 *)(a3 + 23);
        else
          v147 = *(_QWORD *)(a3 + 8);
        v148 = std::string::append((std::string *)v571, v146, v147);
        v149 = *(_OWORD *)&v148->__r_.__value_.__l.__data_;
        *(_QWORD *)&__p[16] = *((_QWORD *)&v148->__r_.__value_.__l + 2);
        *(_OWORD *)__p = v149;
        v148->__r_.__value_.__l.__size_ = 0;
        v148->__r_.__value_.__r.__words[2] = 0;
        v148->__r_.__value_.__r.__words[0] = 0;
        if (a2)
          siri::dialogengine::Context::AddSchemaError(a2, (__int128 *)__p);
        else
          siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 3u);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        if ((v571[23] & 0x80000000) != 0)
          operator delete(*(void **)v571);
        if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__stra.__r_.__value_.__l.__data_);
        goto LABEL_590;
      case 7uLL:
        if (*(_DWORD *)v613.__r_.__value_.__l.__data_ != 1702131813
          || *(_DWORD *)(v613.__r_.__value_.__r.__words[0] + 3) != 1935961701)
        {
          goto LABEL_119;
        }
LABEL_110:
        if (!v631[0])
        {
          v529 = __cxa_allocate_exception(0x38uLL);
          if (SHIBYTE(v633[0]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v571, (const std::string::value_type *)v632, *((std::string::size_type *)&v632 + 1));
          }
          else
          {
            *(_OWORD *)v571 = v632;
            *(_QWORD *)&v571[16] = v633[0];
          }
          YAML::InvalidNode::InvalidNode(v529, (uint64_t)v571);
        }
        YAML::Node::EnsureNodeExists((YAML::Node *)v631);
        v45 = (YAML::detail::node *)v633[3];
        std::string::basic_string[abi:ne180100]<0>(v581, "extends");
        v46 = (YAML::detail::memory **)v633[1];
        *(_OWORD *)v610 = *(_OWORD *)&v633[1];
        if (v633[2])
        {
          v47 = (unint64_t *)(v633[2] + 8);
          do
            v48 = __ldxr(v47);
          while (__stxr(v48 + 1, v47));
          v49 = *(std::__shared_weak_count **)&v610[8];
        }
        else
        {
          v49 = 0;
        }
        v109 = YAML::detail::node::get<std::string>(v45, (uint64_t)v581, v46, v49);
        v110 = *(std::__shared_weak_count **)&v610[8];
        if (*(_QWORD *)&v610[8])
        {
          v111 = (unint64_t *)(*(_QWORD *)&v610[8] + 8);
          do
            v112 = __ldaxr(v111);
          while (__stlxr(v112 - 1, v111));
          if (!v112)
          {
            ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
            std::__shared_weak_count::__release_weak(v110);
          }
        }
        if ((v581[23] & 0x80000000) != 0)
          operator delete(*(void **)v581);
        v113 = *(_OWORD *)&v633[1];
        if (v633[2])
        {
          v114 = (unint64_t *)(v633[2] + 8);
          do
            v115 = __ldxr(v114);
          while (__stxr(v115 + 1, v114));
          __p[0] = 1;
          memset(&__p[8], 0, 24);
          v558 = v113;
          do
            v116 = __ldxr(v114);
          while (__stxr(v116 + 1, v114));
          v559 = v109;
          do
            v117 = __ldaxr(v114);
          while (__stlxr(v117 - 1, v114));
          if (!v117)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v113 + 1) + 16))(*((_QWORD *)&v113 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v113 + 1));
          }
          if (!__p[0])
          {
            v536 = __cxa_allocate_exception(0x38uLL);
            if ((__p[31] & 0x80000000) != 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v571, *(const std::string::value_type **)&__p[8], *(std::string::size_type *)&__p[16]);
            }
            else
            {
              *(_OWORD *)v571 = *(_OWORD *)&__p[8];
              *(_QWORD *)&v571[16] = *(_QWORD *)&__p[24];
            }
            YAML::InvalidNode::InvalidNode(v536, (uint64_t)v571);
          }
        }
        else
        {
          __p[0] = 1;
          memset(&__p[8], 0, 24);
          v558 = v633[1];
          v559 = v109;
        }
        *(_QWORD *)v581 = __p;
        YAML::as_if<std::string,void>::operator()(&__stra, (YAML::Node **)v581);
        std::string::operator=((std::string *)&__s[1], &__stra);
        if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__stra.__r_.__value_.__l.__data_);
        v136 = (std::__shared_weak_count *)*((_QWORD *)&v558 + 1);
        if (!*((_QWORD *)&v558 + 1))
          goto LABEL_313;
        v137 = (unint64_t *)(*((_QWORD *)&v558 + 1) + 8);
        do
          v138 = __ldaxr(v137);
        while (__stlxr(v138 - 1, v137));
        goto LABEL_311;
      case 0xBuLL:
        if (*(_QWORD *)v613.__r_.__value_.__l.__data_ != 0x7470697263736564
          || *(_QWORD *)(v613.__r_.__value_.__r.__words[0] + 3) != 0x6E6F697470697263)
        {
          goto LABEL_119;
        }
LABEL_100:
        if (!v631[0])
        {
          v528 = __cxa_allocate_exception(0x38uLL);
          if (SHIBYTE(v633[0]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v571, (const std::string::value_type *)v632, *((std::string::size_type *)&v632 + 1));
          }
          else
          {
            *(_OWORD *)v571 = v632;
            *(_QWORD *)&v571[16] = v633[0];
          }
          YAML::InvalidNode::InvalidNode(v528, (uint64_t)v571);
        }
        YAML::Node::EnsureNodeExists((YAML::Node *)v631);
        v39 = (YAML::detail::node *)v633[3];
        std::string::basic_string[abi:ne180100]<0>(v581, "description");
        v40 = (YAML::detail::memory **)v633[1];
        *(_OWORD *)v610 = *(_OWORD *)&v633[1];
        if (v633[2])
        {
          v41 = (unint64_t *)(v633[2] + 8);
          do
            v42 = __ldxr(v41);
          while (__stxr(v42 + 1, v41));
          v43 = *(std::__shared_weak_count **)&v610[8];
        }
        else
        {
          v43 = 0;
        }
        v127 = YAML::detail::node::get<std::string>(v39, (uint64_t)v581, v40, v43);
        v128 = *(std::__shared_weak_count **)&v610[8];
        if (*(_QWORD *)&v610[8])
        {
          v129 = (unint64_t *)(*(_QWORD *)&v610[8] + 8);
          do
            v130 = __ldaxr(v129);
          while (__stlxr(v130 - 1, v129));
          if (!v130)
          {
            ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
            std::__shared_weak_count::__release_weak(v128);
          }
        }
        if ((v581[23] & 0x80000000) != 0)
          operator delete(*(void **)v581);
        v131 = *(_OWORD *)&v633[1];
        if (v633[2])
        {
          v132 = (unint64_t *)(v633[2] + 8);
          do
            v133 = __ldxr(v132);
          while (__stxr(v133 + 1, v132));
          __p[0] = 1;
          memset(&__p[8], 0, 24);
          v558 = v131;
          do
            v134 = __ldxr(v132);
          while (__stxr(v134 + 1, v132));
          v559 = v127;
          do
            v135 = __ldaxr(v132);
          while (__stlxr(v135 - 1, v132));
          if (!v135)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v131 + 1) + 16))(*((_QWORD *)&v131 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v131 + 1));
          }
          if (!__p[0])
          {
            v534 = __cxa_allocate_exception(0x38uLL);
            if ((__p[31] & 0x80000000) != 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v571, *(const std::string::value_type **)&__p[8], *(std::string::size_type *)&__p[16]);
            }
            else
            {
              *(_OWORD *)v571 = *(_OWORD *)&__p[8];
              *(_QWORD *)&v571[16] = *(_QWORD *)&__p[24];
            }
            YAML::InvalidNode::InvalidNode(v534, (uint64_t)v571);
          }
        }
        else
        {
          __p[0] = 1;
          memset(&__p[8], 0, 24);
          v558 = v633[1];
          v559 = v127;
        }
        *(_QWORD *)v581 = __p;
        YAML::as_if<std::string,void>::operator()(&__stra, (YAML::Node **)v581);
        std::string::operator=((std::string *)v635, &__stra);
        if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__stra.__r_.__value_.__l.__data_);
        v136 = (std::__shared_weak_count *)*((_QWORD *)&v558 + 1);
        if (!*((_QWORD *)&v558 + 1))
          goto LABEL_313;
        v140 = (unint64_t *)(*((_QWORD *)&v558 + 1) + 8);
        do
          v138 = __ldaxr(v140);
        while (__stlxr(v138 - 1, v140));
        goto LABEL_311;
      case 0xDuLL:
        if (*(_QWORD *)v613.__r_.__value_.__l.__data_ != 0x5F6E6F6973726576
          || *(_QWORD *)(v613.__r_.__value_.__r.__words[0] + 5) != 0x64656464615F6E6FLL)
        {
          goto LABEL_119;
        }
LABEL_183:
        if (!v631[0])
        {
          v530 = __cxa_allocate_exception(0x38uLL);
          if (SHIBYTE(v633[0]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v571, (const std::string::value_type *)v632, *((std::string::size_type *)&v632 + 1));
          }
          else
          {
            *(_OWORD *)v571 = v632;
            *(_QWORD *)&v571[16] = v633[0];
          }
          YAML::InvalidNode::InvalidNode(v530, (uint64_t)v571);
        }
        YAML::Node::EnsureNodeExists((YAML::Node *)v631);
        v82 = (YAML::detail::node *)v633[3];
        std::string::basic_string[abi:ne180100]<0>(v581, "version_added");
        v83 = (YAML::detail::memory **)v633[1];
        *(_OWORD *)v610 = *(_OWORD *)&v633[1];
        if (v633[2])
        {
          v84 = (unint64_t *)(v633[2] + 8);
          do
            v85 = __ldxr(v84);
          while (__stxr(v85 + 1, v84));
          v86 = *(std::__shared_weak_count **)&v610[8];
        }
        else
        {
          v86 = 0;
        }
        v118 = YAML::detail::node::get<std::string>(v82, (uint64_t)v581, v83, v86);
        v119 = *(std::__shared_weak_count **)&v610[8];
        if (*(_QWORD *)&v610[8])
        {
          v120 = (unint64_t *)(*(_QWORD *)&v610[8] + 8);
          do
            v121 = __ldaxr(v120);
          while (__stlxr(v121 - 1, v120));
          if (!v121)
          {
            ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
            std::__shared_weak_count::__release_weak(v119);
          }
        }
        if ((v581[23] & 0x80000000) != 0)
          operator delete(*(void **)v581);
        v122 = *(_OWORD *)&v633[1];
        if (v633[2])
        {
          v123 = (unint64_t *)(v633[2] + 8);
          do
            v124 = __ldxr(v123);
          while (__stxr(v124 + 1, v123));
          __p[0] = 1;
          memset(&__p[8], 0, 24);
          v558 = v122;
          do
            v125 = __ldxr(v123);
          while (__stxr(v125 + 1, v123));
          v559 = v118;
          do
            v126 = __ldaxr(v123);
          while (__stlxr(v126 - 1, v123));
          if (!v126)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v122 + 1) + 16))(*((_QWORD *)&v122 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v122 + 1));
          }
          if (!__p[0])
          {
            v535 = __cxa_allocate_exception(0x38uLL);
            if ((__p[31] & 0x80000000) != 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v571, *(const std::string::value_type **)&__p[8], *(std::string::size_type *)&__p[16]);
            }
            else
            {
              *(_OWORD *)v571 = *(_OWORD *)&__p[8];
              *(_QWORD *)&v571[16] = *(_QWORD *)&__p[24];
            }
            YAML::InvalidNode::InvalidNode(v535, (uint64_t)v571);
          }
        }
        else
        {
          __p[0] = 1;
          memset(&__p[8], 0, 24);
          v558 = v633[1];
          v559 = v118;
        }
        *(_QWORD *)v581 = __p;
        YAML::as_if<std::string,void>::operator()(&__stra, (YAML::Node **)v581);
        std::string::operator=(&v637, &__stra);
        if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__stra.__r_.__value_.__l.__data_);
        v136 = (std::__shared_weak_count *)*((_QWORD *)&v558 + 1);
        if (!*((_QWORD *)&v558 + 1))
          goto LABEL_313;
        v139 = (unint64_t *)(*((_QWORD *)&v558 + 1) + 8);
        do
          v138 = __ldaxr(v139);
        while (__stlxr(v138 - 1, v139));
LABEL_311:
        if (!v138)
        {
          ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
          std::__shared_weak_count::__release_weak(v136);
        }
LABEL_313:
        if ((__p[31] & 0x80000000) == 0)
          goto LABEL_600;
        v141 = *(void **)&__p[8];
        goto LABEL_599;
      default:
        v51 = v613.__r_.__value_.__l.__size_ == 6;
        if (v613.__r_.__value_.__l.__size_ != 6)
          goto LABEL_120;
        if (*(_DWORD *)v613.__r_.__value_.__l.__data_ != 1970302569
          || *(_WORD *)(v613.__r_.__value_.__r.__words[0] + 4) != 29556)
        {
          goto LABEL_154;
        }
LABEL_221:
        YAML::Node::operator[]<char [7]>((uint64_t)v610, (YAML::Node *)v631, "inputs");
        if (v610[0])
        {
          if (v612)
          {
            YAML::detail::node_data::begin(**v612, (uint64_t)__p);
            v103 = *(_QWORD *)&v610[32];
            v104 = v611;
            if (v611)
            {
              v105 = (unint64_t *)&v611->__shared_owners_;
              do
                v106 = __ldxr(v105);
              while (__stxr(v106 + 1, v105));
              *(_OWORD *)v608 = *(_OWORD *)__p;
              *(_OWORD *)&v608[16] = *(_OWORD *)&__p[16];
              *(_QWORD *)&v608[32] = v103;
              v609 = v104;
              do
                v107 = __ldxr(v105);
              while (__stxr(v107 + 1, v105));
              do
                v108 = __ldaxr(v105);
              while (__stlxr(v108 - 1, v105));
              if (!v108)
              {
                ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                std::__shared_weak_count::__release_weak(v104);
              }
            }
            else
            {
              *(_OWORD *)v608 = *(_OWORD *)__p;
              *(_OWORD *)&v608[16] = *(_OWORD *)&__p[16];
              *(_QWORD *)&v608[32] = *(_QWORD *)&v610[32];
              v609 = 0;
            }
          }
          else
          {
            *(_DWORD *)v608 = 0;
            memset(&v608[8], 0, 32);
            v609 = 0;
          }
          if (v610[0] && v612)
          {
            YAML::detail::node_data::end(**v612, (uint64_t)__p);
            if (v611)
            {
              v539 = v611;
              v340 = (unint64_t *)&v611->__shared_owners_;
              do
                v341 = __ldxr(v340);
              while (__stxr(v341 + 1, v340));
              v551 = *(_DWORD *)__p;
              v547 = *(_QWORD *)&__p[8];
              v544 = *(_QWORD *)&__p[16];
              do
                v342 = __ldxr(v340);
              while (__stxr(v342 + 1, v340));
              do
                v343 = __ldaxr(v340);
              while (__stlxr(v343 - 1, v340));
              if (!v343)
              {
                ((void (*)(std::__shared_weak_count *))v539->__on_zero_shared)(v539);
                std::__shared_weak_count::__release_weak(v539);
              }
            }
            else
            {
              v539 = 0;
              v551 = *(_DWORD *)__p;
              v547 = *(_QWORD *)&__p[8];
              v544 = *(_QWORD *)&__p[16];
            }
          }
          else
          {
            v547 = 0;
            v544 = 0;
            v539 = 0;
            v551 = 0;
          }
        }
        else
        {
          v547 = 0;
          v544 = 0;
          v539 = 0;
          v551 = 0;
          *(_DWORD *)v608 = 0;
          memset(&v608[8], 0, 32);
          v609 = 0;
        }
        while (2)
        {
          if (*(_DWORD *)v608 != v551)
            goto LABEL_875;
          v344 = &v608[8];
          v345 = v547;
          if (v551 == 1)
            goto LABEL_874;
          if (v551 == 2)
          {
            v344 = &v608[16];
            v345 = v544;
LABEL_874:
            if (*(_QWORD *)v344 != v345)
            {
LABEL_875:
              YAML::detail::iterator_base<YAML::detail::iterator_value>::operator*((uint64_t)__p, (uint64_t)v608);
              v607 = 65792;
              memset(v606, 0, sizeof(v606));
              v604 = 0u;
              v605 = 0u;
              *(_OWORD *)&__stra.__r_.__value_.__r.__words[1] = 0u;
              __stra.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E793ADA8;
              if (!v560)
              {
                v526 = __cxa_allocate_exception(0x38uLL);
                if (SHIBYTE(v562) < 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)v571, (const std::string::value_type *)v561, *((std::string::size_type *)&v561 + 1));
                }
                else
                {
                  *(_OWORD *)v571 = v561;
                  *(_QWORD *)&v571[16] = v562;
                }
                YAML::InvalidNode::InvalidNode(v526, (uint64_t)v571);
              }
              *(_QWORD *)v571 = &v560;
              YAML::as_if<std::string,void>::operator()((std::string *)v581, (YAML::Node **)v571);
              std::string::operator=((std::string *)&__stra.__r_.__value_.__r.__words[1], (const std::string *)v581);
              if ((v581[23] & 0x80000000) != 0)
                operator delete(*(void **)v581);
              if (v564)
              {
                if (v569)
                {
                  YAML::detail::node_data::begin(**v569, (uint64_t)v571);
                  v346 = v567;
                  v347 = v568;
                  if (v568)
                  {
                    v348 = (unint64_t *)&v568->__shared_owners_;
                    do
                      v349 = __ldxr(v348);
                    while (__stxr(v349 + 1, v348));
                    *(_OWORD *)v601 = *(_OWORD *)v571;
                    *(_OWORD *)&v601[16] = *(_OWORD *)&v571[16];
                    *(_QWORD *)&v601[32] = v346;
                    v602 = v347;
                    do
                      v350 = __ldxr(v348);
                    while (__stxr(v350 + 1, v348));
                    do
                      v351 = __ldaxr(v348);
                    while (__stlxr(v351 - 1, v348));
                    if (!v351)
                    {
                      ((void (*)(std::__shared_weak_count *))v347->__on_zero_shared)(v347);
                      std::__shared_weak_count::__release_weak(v347);
                    }
                  }
                  else
                  {
                    *(_OWORD *)v601 = *(_OWORD *)v571;
                    *(_OWORD *)&v601[16] = *(_OWORD *)&v571[16];
                    *(_QWORD *)&v601[32] = v567;
                    v602 = 0;
                  }
                }
                else
                {
                  *(_DWORD *)v601 = 0;
                  memset(&v601[8], 0, 32);
                  v602 = 0;
                }
                if (v564 && v569)
                {
                  YAML::detail::node_data::end(**v569, (uint64_t)v571);
                  if (v568)
                  {
                    v555 = v568;
                    v355 = (unint64_t *)&v568->__shared_owners_;
                    do
                      v356 = __ldxr(v355);
                    while (__stxr(v356 + 1, v355));
                    v354 = *(_DWORD *)v571;
                    v353 = *(_QWORD *)&v571[16];
                    v352 = *(_QWORD *)&v571[8];
                    do
                      v357 = __ldxr(v355);
                    while (__stxr(v357 + 1, v355));
                    do
                      v358 = __ldaxr(v355);
                    while (__stlxr(v358 - 1, v355));
                    if (!v358)
                    {
                      ((void (*)(std::__shared_weak_count *))v555->__on_zero_shared)(v555);
                      std::__shared_weak_count::__release_weak(v555);
                    }
                  }
                  else
                  {
                    v555 = 0;
                    v354 = *(_DWORD *)v571;
                    v353 = *(_QWORD *)&v571[16];
                    v352 = *(_QWORD *)&v571[8];
                  }
                }
                else
                {
                  v352 = 0;
                  v353 = 0;
                  v555 = 0;
                  v354 = 0;
                }
              }
              else
              {
                v352 = 0;
                v353 = 0;
                v555 = 0;
                v354 = 0;
                *(_DWORD *)v601 = 0;
                memset(&v601[8], 0, 32);
                v602 = 0;
              }
              while (2)
              {
                if (*(_DWORD *)v601 != v354)
                  goto LABEL_907;
                v359 = &v601[8];
                v360 = v352;
                if (v354 != 1)
                {
                  if (v354 != 2)
                    break;
                  v359 = &v601[16];
                  v360 = v353;
                }
                if (*(_QWORD *)v359 != v360)
                {
LABEL_907:
                  YAML::detail::iterator_base<YAML::detail::iterator_value const>::operator*((uint64_t)v571, (uint64_t)v601);
                  if (!LOBYTE(v573[0]))
                  {
                    v520 = __cxa_allocate_exception(0x38uLL);
                    if (SHIBYTE(v573[3]) < 0)
                    {
                      std::string::__init_copy_ctor_external((std::string *)v581, (const std::string::value_type *)v573[1], v573[2]);
                    }
                    else
                    {
                      *(_OWORD *)v581 = *(_OWORD *)&v573[1];
                      *(_QWORD *)&v581[16] = v573[3];
                    }
                    YAML::InvalidNode::InvalidNode(v520, (uint64_t)v581);
                  }
                  *(_QWORD *)v581 = v573;
                  YAML::as_if<std::string,void>::operator()(&v600, (YAML::Node **)v581);
                  if (!BYTE8(v575))
                  {
                    v521 = __cxa_allocate_exception(0x38uLL);
                    if (SBYTE7(v577) < 0)
                    {
                      std::string::__init_copy_ctor_external((std::string *)v581, (const std::string::value_type *)v576, *((std::string::size_type *)&v576 + 1));
                    }
                    else
                    {
                      *(_OWORD *)v581 = v576;
                      *(_QWORD *)&v581[16] = v577;
                    }
                    YAML::InvalidNode::InvalidNode(v521, (uint64_t)v581);
                  }
                  if (v579[0] && (v361 = **(_QWORD **)v579[0], *(_BYTE *)v361) && *(_DWORD *)(v361 + 16) == 2)
                  {
                    *(_QWORD *)v581 = (char *)&v575 + 8;
                    YAML::as_if<std::string,void>::operator()(&v599, (YAML::Node **)v581);
                  }
                  else
                  {
                    std::string::basic_string[abi:ne180100]<0>(&v599, "");
                  }
                  if ((SHIBYTE(v600.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  {
                    switch(*((_BYTE *)&v600.__r_.__value_.__s + 23))
                    {
                      case 4:
                        v362 = (int)v600.__r_.__value_.__l.__data_;
                        goto LABEL_919;
                      case 8:
                        if (v600.__r_.__value_.__r.__words[0] == 0x6C616E6F6974706FLL)
                          goto LABEL_960;
                        v366 = &v600;
                        goto LABEL_957;
                      case 0xB:
                        if (v600.__r_.__value_.__r.__words[0] == 0x6D5F737365636361
                          && *(std::string::size_type *)((char *)v600.__r_.__value_.__r.__words + 3) == 0x65646F6D5F737365)
                        {
                          goto LABEL_946;
                        }
                        v365 = v600.__r_.__value_.__r.__words[0] == 0x7470697263736564
                            && *(std::string::size_type *)((char *)v600.__r_.__value_.__r.__words + 3) == 0x6E6F697470697263;
                        goto LABEL_943;
                      case 0xC:
                        if (v600.__r_.__value_.__r.__words[0] != 0x765F656C706D6173
                          || LODWORD(v600.__r_.__value_.__r.__words[1]) != 1702194273)
                        {
                          goto LABEL_965;
                        }
                        goto LABEL_1007;
                      default:
                        goto LABEL_965;
                    }
                  }
                  switch(v600.__r_.__value_.__l.__size_)
                  {
                    case 4uLL:
                      v362 = *(_DWORD *)v600.__r_.__value_.__l.__data_;
LABEL_919:
                      v363 = (std::string *)((char *)&v604 + 8);
                      if (v362 != 1701869940)
                        goto LABEL_965;
                      goto LABEL_945;
                    case 8uLL:
                      if (*(_QWORD *)v600.__r_.__value_.__l.__data_ == 0x6C616E6F6974706FLL)
                      {
LABEL_960:
                        BYTE1(v607) = siri::dialogengine::StringToBool(&v599);
                        goto LABEL_981;
                      }
                      v366 = (std::string *)v600.__r_.__value_.__r.__words[0];
LABEL_957:
                      if (v366->__r_.__value_.__r.__words[0] != 0x6465746361646572)
                        goto LABEL_965;
                      v370 = siri::dialogengine::StringToBool(&v599);
                      BYTE2(v607) = v370;
                      if (SBYTE7(v604) < 0)
                      {
                        std::string::__init_copy_ctor_external((std::string *)v581, (const std::string::value_type *)__stra.__r_.__value_.__l.__size_, __stra.__r_.__value_.__r.__words[2]);
                      }
                      else
                      {
                        *(_OWORD *)v581 = *(_OWORD *)&__stra.__r_.__value_.__r.__words[1];
                        *(_QWORD *)&v581[16] = v604;
                      }
                      v645.__first_ = (std::__split_buffer<std::string>::pointer)v581;
                      *((_BYTE *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v629, (const void **)v581, &v645)+ 56) = v370;
                      goto LABEL_1040;
                    case 0xBuLL:
                      if (*(_QWORD *)v600.__r_.__value_.__l.__data_ != 0x6D5F737365636361
                        || *(_QWORD *)(v600.__r_.__value_.__r.__words[0] + 3) != 0x65646F6D5F737365)
                      {
                        v365 = *(_QWORD *)v600.__r_.__value_.__l.__data_ == 0x7470697263736564
                            && *(_QWORD *)(v600.__r_.__value_.__r.__words[0] + 3) == 0x6E6F697470697263;
LABEL_943:
                        v363 = v606;
                        if (v365)
                        {
LABEL_945:
                          std::string::operator=(v363, &v599);
                          goto LABEL_981;
                        }
LABEL_965:
                        std::operator+<char>();
                        v372 = std::string::append((std::string *)v593, "' in schema file: ");
                        v373 = *(_OWORD *)&v372->__r_.__value_.__l.__data_;
                        *(_QWORD *)&v595[16] = *((_QWORD *)&v372->__r_.__value_.__l + 2);
                        *(_OWORD *)v595 = v373;
                        v372->__r_.__value_.__l.__size_ = 0;
                        v372->__r_.__value_.__r.__words[2] = 0;
                        v372->__r_.__value_.__r.__words[0] = 0;
                        v374 = *(char *)(a3 + 23);
                        if (v374 >= 0)
                          v375 = (const std::string::value_type *)a3;
                        else
                          v375 = *(const std::string::value_type **)a3;
                        if (v374 >= 0)
                          v376 = *(unsigned __int8 *)(a3 + 23);
                        else
                          v376 = *(_QWORD *)(a3 + 8);
                        v377 = std::string::append((std::string *)v595, v375, v376);
                        v378 = *(_OWORD *)&v377->__r_.__value_.__l.__data_;
                        *(_QWORD *)&v581[16] = *((_QWORD *)&v377->__r_.__value_.__l + 2);
                        *(_OWORD *)v581 = v378;
                        v377->__r_.__value_.__l.__size_ = 0;
                        v377->__r_.__value_.__r.__words[2] = 0;
                        v377->__r_.__value_.__r.__words[0] = 0;
                        if (a2)
                          siri::dialogengine::Context::AddSchemaError(a2, (__int128 *)v581);
                        else
                          siri::dialogengine::Log::LogWithLevel((uint64_t)v581, 3u);
                        if ((v581[23] & 0x80000000) != 0)
                          operator delete(*(void **)v581);
                        if ((v595[23] & 0x80000000) != 0)
                          operator delete(*(void **)v595);
                        if ((v593[23] & 0x80000000) != 0)
                        {
                          v379 = *(void **)v593;
                          goto LABEL_980;
                        }
                        goto LABEL_981;
                      }
LABEL_946:
                      siri::dialogengine::StringToLower((uint64_t)&v599, (uint64_t)v581);
                      if ((v581[23] & 0x80000000) != 0)
                      {
                        if (*(_QWORD *)&v581[8] != 6)
                        {
                          if (*(_QWORD *)&v581[8] == 7
                            && **(_DWORD **)v581 == 1986622064
                            && *(_DWORD *)(*(_QWORD *)v581 + 3) == 1702125942)
                          {
LABEL_1031:
                            v400 = 2;
                            goto LABEL_1065;
                          }
                          goto LABEL_1047;
                        }
                        v401 = *(_BYTE **)v581;
                      }
                      else
                      {
                        if (v581[23] != 6)
                        {
                          if (v581[23] == 7 && *(_DWORD *)v581 == 1986622064 && *(_DWORD *)&v581[3] == 1702125942)
                            goto LABEL_1031;
LABEL_1047:
                          std::operator+<char>();
                          v405 = std::string::append((std::string *)&v645, "' in schema file: ");
                          v406 = *(_OWORD *)&v405->__r_.__value_.__l.__data_;
                          *(_QWORD *)&v593[16] = *((_QWORD *)&v405->__r_.__value_.__l + 2);
                          *(_OWORD *)v593 = v406;
                          v405->__r_.__value_.__l.__size_ = 0;
                          v405->__r_.__value_.__r.__words[2] = 0;
                          v405->__r_.__value_.__r.__words[0] = 0;
                          v407 = *(char *)(a3 + 23);
                          if (v407 >= 0)
                            v408 = (const std::string::value_type *)a3;
                          else
                            v408 = *(const std::string::value_type **)a3;
                          if (v407 >= 0)
                            v409 = *(unsigned __int8 *)(a3 + 23);
                          else
                            v409 = *(_QWORD *)(a3 + 8);
                          v410 = std::string::append((std::string *)v593, v408, v409);
                          v411 = *(_OWORD *)&v410->__r_.__value_.__l.__data_;
                          *(_QWORD *)&v595[16] = *((_QWORD *)&v410->__r_.__value_.__l + 2);
                          *(_OWORD *)v595 = v411;
                          v410->__r_.__value_.__l.__size_ = 0;
                          v410->__r_.__value_.__r.__words[2] = 0;
                          v410->__r_.__value_.__r.__words[0] = 0;
                          if (a2)
                            siri::dialogengine::Context::AddSchemaError(a2, (__int128 *)v595);
                          else
                            siri::dialogengine::Log::LogWithLevel((uint64_t)v595, 3u);
                          if ((v595[23] & 0x80000000) != 0)
                            operator delete(*(void **)v595);
                          if ((v593[23] & 0x80000000) != 0)
                            operator delete(*(void **)v593);
                          if (SHIBYTE(v645.__end_) < 0)
                            operator delete(v645.__first_);
                          if ((v581[23] & 0x80) == 0)
                            goto LABEL_981;
LABEL_1066:
                          v379 = *(void **)v581;
LABEL_980:
                          operator delete(v379);
                          goto LABEL_981;
                        }
                        v401 = v581;
                      }
                      v402 = *(_DWORD *)v401;
                      v403 = *((unsigned __int16 *)v401 + 2);
                      if (v402 == 1818391920 && v403 == 25449)
                      {
                        v400 = 1;
LABEL_1065:
                        HIDWORD(v607) = v400;
                        if ((v581[23] & 0x80) == 0)
                          goto LABEL_981;
                        goto LABEL_1066;
                      }
                      goto LABEL_1047;
                    case 0xCuLL:
                      if (*(_QWORD *)v600.__r_.__value_.__l.__data_ != 0x765F656C706D6173
                        || *(_DWORD *)(v600.__r_.__value_.__r.__words[0] + 8) != 1702194273)
                      {
                        goto LABEL_965;
                      }
LABEL_1007:
                      if (!BYTE8(v575))
                      {
                        v523 = __cxa_allocate_exception(0x38uLL);
                        if (SBYTE7(v577) < 0)
                        {
                          std::string::__init_copy_ctor_external((std::string *)v581, (const std::string::value_type *)v576, *((std::string::size_type *)&v576 + 1));
                        }
                        else
                        {
                          *(_OWORD *)v581 = v576;
                          *(_QWORD *)&v581[16] = v577;
                        }
                        YAML::InvalidNode::InvalidNode(v523, (uint64_t)v581);
                      }
                      if (!v579[0])
                        goto LABEL_1022;
                      v389 = **(_QWORD **)v579[0];
                      if (*(_BYTE *)v389 && *(_DWORD *)(v389 + 16) == 2)
                      {
                        v645.__first_ = (std::__split_buffer<std::string>::pointer)((char *)&v575 + 8);
                        YAML::as_if<std::string,void>::operator()((std::string *)v581, (YAML::Node **)&v645);
                        std::string::operator=(&v606[1], (const std::string *)v581);
LABEL_1040:
                        if ((v581[23] & 0x80000000) == 0)
                          goto LABEL_981;
                        goto LABEL_1066;
                      }
                      v390 = **(_QWORD **)v579[0];
                      if (*(_BYTE *)v390 && *(_DWORD *)(v390 + 16) == 3)
                      {
                        memset(&v598, 0, sizeof(v598));
                        YAML::detail::node_data::begin(**(_QWORD **)v579[0], (uint64_t)v581);
                        v391 = *((_QWORD *)&v577 + 1);
                        v392 = (std::__shared_weak_count *)v578;
                        if (v578)
                        {
                          v393 = (unint64_t *)(v578 + 8);
                          do
                            v394 = __ldxr(v393);
                          while (__stxr(v394 + 1, v393));
                          *(_OWORD *)v595 = *(_OWORD *)v581;
                          *(_OWORD *)&v595[16] = *(_OWORD *)&v581[16];
                          v596 = v391;
                          v597 = v392;
                          do
                            v395 = __ldxr(v393);
                          while (__stxr(v395 + 1, v393));
                          do
                            v396 = __ldaxr(v393);
                          while (__stlxr(v396 - 1, v393));
                          if (!v396)
                          {
                            ((void (*)(std::__shared_weak_count *))v392->__on_zero_shared)(v392);
                            std::__shared_weak_count::__release_weak(v392);
                          }
                        }
                        else
                        {
                          *(_OWORD *)v595 = *(_OWORD *)v581;
                          *(_OWORD *)&v595[16] = *(_OWORD *)&v581[16];
                          v596 = *((_QWORD *)&v577 + 1);
                          v597 = 0;
                        }
                        if (BYTE8(v575) && v579[0])
                        {
                          YAML::detail::node_data::end(**(_QWORD **)v579[0], (uint64_t)v581);
                          v412 = *((_QWORD *)&v577 + 1);
                          v413 = (std::__shared_weak_count *)v578;
                          if (v578)
                          {
                            v414 = (unint64_t *)(v578 + 8);
                            do
                              v415 = __ldxr(v414);
                            while (__stxr(v415 + 1, v414));
                            *(_OWORD *)v593 = *(_OWORD *)v581;
                            *(_OWORD *)&v593[16] = *(_OWORD *)&v581[16];
                            *(_QWORD *)&v593[32] = v412;
                            v594 = v413;
                            do
                              v416 = __ldxr(v414);
                            while (__stxr(v416 + 1, v414));
                            do
                              v417 = __ldaxr(v414);
                            while (__stlxr(v417 - 1, v414));
                            if (!v417)
                            {
                              ((void (*)(std::__shared_weak_count *))v413->__on_zero_shared)(v413);
                              std::__shared_weak_count::__release_weak(v413);
                            }
                          }
                          else
                          {
                            *(_OWORD *)v593 = *(_OWORD *)v581;
                            *(_OWORD *)&v593[16] = *(_OWORD *)&v581[16];
                            *(_QWORD *)&v593[32] = *((_QWORD *)&v577 + 1);
                            v594 = 0;
                          }
                        }
                        else
                        {
                          *(_DWORD *)v593 = 0;
                          memset(&v593[8], 0, 32);
                          v594 = 0;
                        }
                        while (1)
                        {
                          if (*(_DWORD *)v595 == *(_DWORD *)v593)
                          {
                            v436 = &v595[8];
                            v437 = &v593[8];
                            if (*(_DWORD *)v595 != 1)
                            {
                              if (*(_DWORD *)v595 != 2)
                                goto LABEL_1121;
                              v437 = &v593[16];
                              v436 = &v595[16];
                            }
                            if (*(_QWORD *)v436 == *(_QWORD *)v437)
                            {
LABEL_1121:
                              v438 = v594;
                              if (v594)
                              {
                                v439 = (unint64_t *)&v594->__shared_owners_;
                                do
                                  v440 = __ldaxr(v439);
                                while (__stlxr(v440 - 1, v439));
                                if (!v440)
                                {
                                  ((void (*)(std::__shared_weak_count *))v438->__on_zero_shared)(v438);
                                  std::__shared_weak_count::__release_weak(v438);
                                }
                              }
                              v441 = v597;
                              if (v597)
                              {
                                v442 = (unint64_t *)&v597->__shared_owners_;
                                do
                                  v443 = __ldaxr(v442);
                                while (__stlxr(v443 - 1, v442));
                                if (!v443)
                                {
                                  ((void (*)(std::__shared_weak_count *))v441->__on_zero_shared)(v441);
                                  std::__shared_weak_count::__release_weak(v441);
                                }
                              }
                              std::string::basic_string[abi:ne180100]<0>(&v645, ", ");
                              siri::dialogengine::StringJoinInternal<std::vector<std::string>>((uint64_t)v593, (uint64_t)v598.__begin_, (uint64_t)v598.__end_, (uint64_t)&v645);
                              v444 = std::string::insert((std::string *)v593, 0, "[");
                              v445 = *(_OWORD *)&v444->__r_.__value_.__l.__data_;
                              *(_QWORD *)&v595[16] = *((_QWORD *)&v444->__r_.__value_.__l + 2);
                              *(_OWORD *)v595 = v445;
                              v444->__r_.__value_.__l.__size_ = 0;
                              v444->__r_.__value_.__r.__words[2] = 0;
                              v444->__r_.__value_.__r.__words[0] = 0;
                              v446 = std::string::append((std::string *)v595, "]");
                              v447 = *(_OWORD *)&v446->__r_.__value_.__l.__data_;
                              *(_QWORD *)&v581[16] = *((_QWORD *)&v446->__r_.__value_.__l + 2);
                              *(_OWORD *)v581 = v447;
                              v446->__r_.__value_.__l.__size_ = 0;
                              v446->__r_.__value_.__r.__words[2] = 0;
                              v446->__r_.__value_.__r.__words[0] = 0;
                              std::string::operator=(&v606[1], (const std::string *)v581);
                              if ((v581[23] & 0x80000000) != 0)
                                operator delete(*(void **)v581);
                              if ((v595[23] & 0x80000000) != 0)
                                operator delete(*(void **)v595);
                              if ((v593[23] & 0x80000000) != 0)
                                operator delete(*(void **)v593);
                              if (SHIBYTE(v645.__end_) < 0)
                                operator delete(v645.__first_);
                              *(_QWORD *)v581 = &v598;
                              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v581);
                              goto LABEL_981;
                            }
                          }
                          YAML::detail::iterator_base<YAML::detail::iterator_value const>::operator*((uint64_t)v581, (uint64_t)v595);
                          if (!v581[0])
                          {
                            v522 = __cxa_allocate_exception(0x38uLL);
                            if ((v581[31] & 0x80000000) != 0)
                            {
                              std::string::__init_copy_ctor_external((std::string *)&v645, *(const std::string::value_type **)&v581[8], *(std::string::size_type *)&v581[16]);
                            }
                            else
                            {
                              *(_OWORD *)&v645.__first_ = *(_OWORD *)&v581[8];
                              v645.__end_ = *(std::__split_buffer<std::string>::pointer *)&v581[24];
                            }
                            YAML::InvalidNode::InvalidNode(v522, (uint64_t)&v645);
                          }
                          v645.__first_ = (std::__split_buffer<std::string>::pointer)v581;
                          YAML::as_if<std::string,void>::operator()(&v580, (YAML::Node **)&v645);
                          end = v598.__end_;
                          if (v598.__end_ >= v598.__end_cap_.__value_)
                          {
                            v420 = 0xAAAAAAAAAAAAAAABLL * (((char *)v598.__end_ - (char *)v598.__begin_) >> 3);
                            v421 = v420 + 1;
                            if (v420 + 1 > 0xAAAAAAAAAAAAAAALL)
                              std::vector<BOOL>::__throw_length_error[abi:ne180100]();
                            if (0x5555555555555556
                               * (((char *)v598.__end_cap_.__value_ - (char *)v598.__begin_) >> 3) > v421)
                              v421 = 0x5555555555555556
                                   * (((char *)v598.__end_cap_.__value_ - (char *)v598.__begin_) >> 3);
                            if (0xAAAAAAAAAAAAAAABLL
                               * (((char *)v598.__end_cap_.__value_ - (char *)v598.__begin_) >> 3) >= 0x555555555555555)
                              v422 = 0xAAAAAAAAAAAAAAALL;
                            else
                              v422 = v421;
                            v645.__end_cap_.__value_ = (std::allocator<std::string> *)&v598.__end_cap_;
                            if (v422)
                              v423 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v598.__end_cap_, v422);
                            else
                              v423 = 0;
                            v424 = v423 + v420;
                            v645.__first_ = v423;
                            v645.__begin_ = v424;
                            v645.__end_cap_.__value_ = &v423[v422];
                            v425 = *(_OWORD *)&v580.__r_.__value_.__l.__data_;
                            v424->__r_.__value_.__r.__words[2] = v580.__r_.__value_.__r.__words[2];
                            *(_OWORD *)&v424->__r_.__value_.__l.__data_ = v425;
                            memset(&v580, 0, sizeof(v580));
                            v645.__end_ = v424 + 1;
                            std::vector<std::string>::__swap_out_circular_buffer(&v598, &v645);
                            v426 = v598.__end_;
                            std::__split_buffer<std::string>::~__split_buffer(&v645);
                            v598.__end_ = v426;
                            if (SHIBYTE(v580.__r_.__value_.__r.__words[2]) < 0)
                              operator delete(v580.__r_.__value_.__l.__data_);
                          }
                          else
                          {
                            v419 = *(_OWORD *)&v580.__r_.__value_.__l.__data_;
                            v598.__end_->__r_.__value_.__r.__words[2] = v580.__r_.__value_.__r.__words[2];
                            *(_OWORD *)&end->__r_.__value_.__l.__data_ = v419;
                            v598.__end_ = end + 1;
                          }
                          v427 = v591;
                          if (v591)
                          {
                            v428 = (unint64_t *)&v591->__shared_owners_;
                            do
                              v429 = __ldaxr(v428);
                            while (__stlxr(v429 - 1, v428));
                            if (!v429)
                            {
                              ((void (*)(std::__shared_weak_count *))v427->__on_zero_shared)(v427);
                              std::__shared_weak_count::__release_weak(v427);
                            }
                          }
                          if (v589 < 0)
                            operator delete(v588);
                          v430 = v586;
                          if (v586)
                          {
                            v431 = (unint64_t *)&v586->__shared_owners_;
                            do
                              v432 = __ldaxr(v431);
                            while (__stlxr(v432 - 1, v431));
                            if (!v432)
                            {
                              ((void (*)(std::__shared_weak_count *))v430->__on_zero_shared)(v430);
                              std::__shared_weak_count::__release_weak(v430);
                            }
                          }
                          if (SBYTE7(v585) < 0)
                            operator delete((void *)v584);
                          v433 = v582;
                          if (v582)
                          {
                            v434 = (unint64_t *)&v582->__shared_owners_;
                            do
                              v435 = __ldaxr(v434);
                            while (__stlxr(v435 - 1, v434));
                            if (!v435)
                            {
                              ((void (*)(std::__shared_weak_count *))v433->__on_zero_shared)(v433);
                              std::__shared_weak_count::__release_weak(v433);
                            }
                          }
                          if ((v581[31] & 0x80000000) != 0)
                            operator delete(*(void **)&v581[8]);
                          YAML::detail::node_iterator_base<YAML::detail::node>::operator++((uint64_t)v595);
                        }
                      }
LABEL_1022:
                      std::operator+<char>();
                      v397 = std::string::append((std::string *)v595, ". Must be Scalar or Sequence.");
                      v398 = *(_OWORD *)&v397->__r_.__value_.__l.__data_;
                      *(_QWORD *)&v581[16] = *((_QWORD *)&v397->__r_.__value_.__l + 2);
                      *(_OWORD *)v581 = v398;
                      v397->__r_.__value_.__l.__size_ = 0;
                      v397->__r_.__value_.__r.__words[2] = 0;
                      v397->__r_.__value_.__r.__words[0] = 0;
                      if (a2)
                        siri::dialogengine::Context::AddSchemaError(a2, (__int128 *)v581);
                      else
                        siri::dialogengine::Log::LogWithLevel((uint64_t)v581, 3u);
                      if ((v581[23] & 0x80000000) != 0)
                        operator delete(*(void **)v581);
                      if ((v595[23] & 0x80000000) != 0)
                      {
                        v379 = *(void **)v595;
                        goto LABEL_980;
                      }
LABEL_981:
                      if (SHIBYTE(v599.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v599.__r_.__value_.__l.__data_);
                      if (SHIBYTE(v600.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v600.__r_.__value_.__l.__data_);
                      v380 = (std::__shared_weak_count *)v578;
                      if (v578)
                      {
                        v381 = (unint64_t *)(v578 + 8);
                        do
                          v382 = __ldaxr(v381);
                        while (__stlxr(v382 - 1, v381));
                        if (!v382)
                        {
                          ((void (*)(std::__shared_weak_count *))v380->__on_zero_shared)(v380);
                          std::__shared_weak_count::__release_weak(v380);
                        }
                      }
                      if (SBYTE7(v577) < 0)
                        operator delete((void *)v576);
                      v383 = (std::__shared_weak_count *)*((_QWORD *)&v574 + 1);
                      if (*((_QWORD *)&v574 + 1))
                      {
                        v384 = (unint64_t *)(*((_QWORD *)&v574 + 1) + 8);
                        do
                          v385 = __ldaxr(v384);
                        while (__stlxr(v385 - 1, v384));
                        if (!v385)
                        {
                          ((void (*)(std::__shared_weak_count *))v383->__on_zero_shared)(v383);
                          std::__shared_weak_count::__release_weak(v383);
                        }
                      }
                      if (SHIBYTE(v573[3]) < 0)
                        operator delete((void *)v573[1]);
                      v386 = (std::__shared_weak_count *)v572;
                      if ((_QWORD)v572)
                      {
                        v387 = (unint64_t *)(v572 + 8);
                        do
                          v388 = __ldaxr(v387);
                        while (__stlxr(v388 - 1, v387));
                        if (!v388)
                        {
                          ((void (*)(std::__shared_weak_count *))v386->__on_zero_shared)(v386);
                          std::__shared_weak_count::__release_weak(v386);
                        }
                      }
                      if ((v571[31] & 0x80000000) != 0)
                        operator delete(*(void **)&v571[8]);
                      YAML::detail::node_iterator_base<YAML::detail::node>::operator++((uint64_t)v601);
                      continue;
                    default:
                      goto LABEL_965;
                  }
                }
                break;
              }
              if (v555)
              {
                v448 = (unint64_t *)&v555->__shared_owners_;
                do
                  v449 = __ldaxr(v448);
                while (__stlxr(v449 - 1, v448));
                if (!v449)
                {
                  ((void (*)(std::__shared_weak_count *))v555->__on_zero_shared)(v555);
                  std::__shared_weak_count::__release_weak(v555);
                }
              }
              v450 = v602;
              if (v602)
              {
                v451 = (unint64_t *)&v602->__shared_owners_;
                do
                  v452 = __ldaxr(v451);
                while (__stlxr(v452 - 1, v451));
                if (!v452)
                {
                  ((void (*)(std::__shared_weak_count *))v450->__on_zero_shared)(v450);
                  std::__shared_weak_count::__release_weak(v450);
                }
              }
              if (SBYTE7(v604) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)v581, (const std::string::value_type *)__stra.__r_.__value_.__l.__size_, __stra.__r_.__value_.__r.__words[2]);
              }
              else
              {
                *(_OWORD *)v581 = *(_OWORD *)&__stra.__r_.__value_.__r.__words[1];
                *(_QWORD *)&v581[16] = v604;
              }
              siri::dialogengine::ObjectSchema::GetInput((uint64_t)v634, (const char *)a2, (const void **)v581, 0, (uint64_t)v571);
              v453 = LOBYTE(v579[0]);
              if (LOBYTE(v579[0]))
                siri::dialogengine::PropertyBase::~PropertyBase((void **)v571);
              if ((v581[23] & 0x80000000) != 0)
              {
                operator delete(*(void **)v581);
                if (!v453)
                  goto LABEL_1181;
              }
              else if (!v453)
              {
LABEL_1181:
                siri::dialogengine::ObjectSchema::AddInput((uint64_t **)v634, (const siri::dialogengine::ObjectInput *)&__stra);
                siri::dialogengine::PropertyBase::~PropertyBase((void **)&__stra.__r_.__value_.__l.__data_);
                v465 = v568;
                if (v568)
                {
                  v466 = (unint64_t *)&v568->__shared_owners_;
                  do
                    v467 = __ldaxr(v466);
                  while (__stlxr(v467 - 1, v466));
                  if (!v467)
                  {
                    ((void (*)(std::__shared_weak_count *))v465->__on_zero_shared)(v465);
                    std::__shared_weak_count::__release_weak(v465);
                  }
                }
                if (SHIBYTE(v566) < 0)
                  operator delete((void *)v565);
                v468 = v563;
                if (v563)
                {
                  v469 = (unint64_t *)&v563->__shared_owners_;
                  do
                    v470 = __ldaxr(v469);
                  while (__stlxr(v470 - 1, v469));
                  if (!v470)
                  {
                    ((void (*)(std::__shared_weak_count *))v468->__on_zero_shared)(v468);
                    std::__shared_weak_count::__release_weak(v468);
                  }
                }
                if (SHIBYTE(v562) < 0)
                  operator delete((void *)v561);
                v471 = (std::__shared_weak_count *)*((_QWORD *)&v558 + 1);
                if (*((_QWORD *)&v558 + 1))
                {
                  v472 = (unint64_t *)(*((_QWORD *)&v558 + 1) + 8);
                  do
                    v473 = __ldaxr(v472);
                  while (__stlxr(v473 - 1, v472));
                  if (!v473)
                  {
                    ((void (*)(std::__shared_weak_count *))v471->__on_zero_shared)(v471);
                    std::__shared_weak_count::__release_weak(v471);
                  }
                }
                if ((__p[31] & 0x80000000) != 0)
                  operator delete(*(void **)&__p[8]);
                YAML::detail::node_iterator_base<YAML::detail::node>::operator++((uint64_t)v608);
                continue;
              }
              if (SBYTE7(v604) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)v593, (const std::string::value_type *)__stra.__r_.__value_.__l.__size_, __stra.__r_.__value_.__r.__words[2]);
              }
              else
              {
                *(_OWORD *)v593 = *(_OWORD *)&__stra.__r_.__value_.__r.__words[1];
                *(_QWORD *)&v593[16] = v604;
              }
              v454 = std::string::insert((std::string *)v593, 0, "Duplicate input name '");
              v455 = *(_OWORD *)&v454->__r_.__value_.__l.__data_;
              *(_QWORD *)&v595[16] = *((_QWORD *)&v454->__r_.__value_.__l + 2);
              *(_OWORD *)v595 = v455;
              v454->__r_.__value_.__l.__size_ = 0;
              v454->__r_.__value_.__r.__words[2] = 0;
              v454->__r_.__value_.__r.__words[0] = 0;
              v456 = std::string::append((std::string *)v595, "' in '");
              v457 = *(_OWORD *)&v456->__r_.__value_.__l.__data_;
              *(_QWORD *)&v601[16] = *((_QWORD *)&v456->__r_.__value_.__l + 2);
              *(_OWORD *)v601 = v457;
              v456->__r_.__value_.__l.__size_ = 0;
              v456->__r_.__value_.__r.__words[2] = 0;
              v456->__r_.__value_.__r.__words[0] = 0;
              v458 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
              if (v458 >= 0)
                v459 = __str;
              else
                v459 = (std::string *)__str->__r_.__value_.__r.__words[0];
              if (v458 >= 0)
                v460 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
              else
                v460 = __str->__r_.__value_.__l.__size_;
              v461 = std::string::append((std::string *)v601, (const std::string::value_type *)v459, v460);
              v462 = *(_OWORD *)&v461->__r_.__value_.__l.__data_;
              *(_QWORD *)&v581[16] = *((_QWORD *)&v461->__r_.__value_.__l + 2);
              *(_OWORD *)v581 = v462;
              v461->__r_.__value_.__l.__size_ = 0;
              v461->__r_.__value_.__r.__words[2] = 0;
              v461->__r_.__value_.__r.__words[0] = 0;
              v463 = std::string::append((std::string *)v581, "'");
              v464 = *(_OWORD *)&v463->__r_.__value_.__l.__data_;
              *(_QWORD *)&v571[16] = *((_QWORD *)&v463->__r_.__value_.__l + 2);
              *(_OWORD *)v571 = v464;
              v463->__r_.__value_.__l.__size_ = 0;
              v463->__r_.__value_.__r.__words[2] = 0;
              v463->__r_.__value_.__r.__words[0] = 0;
              if (a2)
                siri::dialogengine::Context::AddSchemaError(a2, (__int128 *)v571);
              else
                siri::dialogengine::Log::LogWithLevel((uint64_t)v571, 3u);
              if ((v571[23] & 0x80000000) != 0)
                operator delete(*(void **)v571);
              if ((v581[23] & 0x80000000) != 0)
                operator delete(*(void **)v581);
              if ((v601[23] & 0x80000000) != 0)
                operator delete(*(void **)v601);
              if ((v595[23] & 0x80000000) != 0)
                operator delete(*(void **)v595);
              if ((v593[23] & 0x80000000) != 0)
                operator delete(*(void **)v593);
              goto LABEL_1181;
            }
          }
          break;
        }
        if (v539)
        {
          v474 = (unint64_t *)&v539->__shared_owners_;
          do
            v475 = __ldaxr(v474);
          while (__stlxr(v475 - 1, v474));
          if (!v475)
          {
            ((void (*)(std::__shared_weak_count *))v539->__on_zero_shared)(v539);
            std::__shared_weak_count::__release_weak(v539);
          }
        }
        v476 = v609;
        if (v609)
        {
          v477 = (unint64_t *)&v609->__shared_owners_;
          do
            v478 = __ldaxr(v477);
          while (__stlxr(v478 - 1, v477));
          if (!v478)
          {
            ((void (*)(std::__shared_weak_count *))v476->__on_zero_shared)(v476);
            std::__shared_weak_count::__release_weak(v476);
          }
        }
        v479 = v611;
        if (v611)
        {
          v480 = (unint64_t *)&v611->__shared_owners_;
          do
            v481 = __ldaxr(v480);
          while (__stlxr(v481 - 1, v480));
          if (!v481)
          {
            ((void (*)(std::__shared_weak_count *))v479->__on_zero_shared)(v479);
            std::__shared_weak_count::__release_weak(v479);
          }
        }
        if ((v610[31] & 0x80000000) != 0)
        {
          v141 = *(void **)&v610[8];
LABEL_599:
          operator delete(v141);
        }
LABEL_600:
        if (SHIBYTE(v613.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v613.__r_.__value_.__l.__data_);
        v238 = v624;
        if (v624)
        {
          v239 = (unint64_t *)&v624->__shared_owners_;
          do
            v240 = __ldaxr(v239);
          while (__stlxr(v240 - 1, v239));
          if (!v240)
          {
            ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
            std::__shared_weak_count::__release_weak(v238);
          }
        }
        if (v623 < 0)
          operator delete(v622);
        v241 = v621;
        if (v621)
        {
          v242 = (unint64_t *)&v621->__shared_owners_;
          do
            v243 = __ldaxr(v242);
          while (__stlxr(v243 - 1, v242));
          if (!v243)
          {
            ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
            std::__shared_weak_count::__release_weak(v241);
          }
        }
        if (SHIBYTE(v620) < 0)
          operator delete((void *)v619);
        v244 = v617;
        if (v617)
        {
          v245 = (unint64_t *)&v617->__shared_owners_;
          do
            v246 = __ldaxr(v245);
          while (__stlxr(v246 - 1, v245));
          if (!v246)
          {
            ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
            std::__shared_weak_count::__release_weak(v244);
          }
        }
        if (v616 < 0)
          operator delete(v615);
        YAML::detail::node_iterator_base<YAML::detail::node>::operator++((uint64_t)v625);
        break;
    }
  }
  if (v538)
  {
    v482 = (unint64_t *)&v538->__shared_owners_;
    do
      v483 = __ldaxr(v482);
    while (__stlxr(v483 - 1, v482));
    if (!v483)
    {
      ((void (*)(std::__shared_weak_count *))v538->__on_zero_shared)(v538);
      std::__shared_weak_count::__release_weak(v538);
    }
  }
  v484 = *(std::__shared_weak_count **)&v625[40];
  if (*(_QWORD *)&v625[40])
  {
    v485 = (unint64_t *)(*(_QWORD *)&v625[40] + 8);
    do
      v486 = __ldaxr(v485);
    while (__stlxr(v486 - 1, v485));
    if (!v486)
    {
      ((void (*)(std::__shared_weak_count *))v484->__on_zero_shared)(v484);
      std::__shared_weak_count::__release_weak(v484);
    }
  }
  v487 = (uint64_t *)v629;
  if (v629 != v630)
  {
    do
    {
      v488 = v627;
      if (!v627)
        goto LABEL_1249;
      v489 = &v627;
      do
      {
        v490 = v489;
        v491 = (const void **)(v488 + 32);
        v492 = std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v628, (const void **)v488 + 4, (const void **)v487 + 4);
        if (v492)
          v493 = v488 + 8;
        else
          v493 = v488;
        if (v492)
          v489 = v490;
        else
          v489 = (char **)v488;
        v488 = *(char **)v493;
      }
      while (*(_QWORD *)v493);
      if (v489 == &v627
        || (!v492 ? (v494 = v491) : (v494 = (const void **)(v490 + 4)),
            std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v628, (const void **)v487 + 4, v494)))
      {
LABEL_1249:
        v495 = *((_BYTE *)v487 + 56);
        *(_QWORD *)v625 = v487 + 4;
        std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v626, (const void **)v487 + 4, (__int128 **)v625)[56] = v495;
      }
      v496 = (char *)v487[1];
      if (v496)
      {
        do
        {
          v497 = (char **)v496;
          v496 = *(char **)v496;
        }
        while (v496);
      }
      else
      {
        do
        {
          v497 = (char **)v487[2];
          v31 = *v497 == (char *)v487;
          v487 = (uint64_t *)v497;
        }
        while (!v31);
      }
      v487 = (uint64_t *)v497;
    }
    while (v497 != v630);
  }
  v498 = (uint64_t *)v626;
  if (v626 != &v627)
  {
    do
    {
      siri::dialogengine::ObjectSchema::SetPropertyRedacted((uint64_t)v634, (const void **)v498 + 4, *((_BYTE *)v498 + 56));
      v499 = (char *)v498[1];
      if (v499)
      {
        do
        {
          v500 = (char **)v499;
          v499 = *(char **)v499;
        }
        while (v499);
      }
      else
      {
        do
        {
          v500 = (char **)v498[2];
          v31 = *v500 == (char *)v498;
          v498 = (uint64_t *)v500;
        }
        while (!v31);
      }
      v498 = (uint64_t *)v500;
    }
    while (v500 != &v627);
  }
  v501 = (std::string *)operator new(0xE0uLL);
  v502 = v501;
  v501->__r_.__value_.__l.__size_ = 0;
  v501->__r_.__value_.__r.__words[2] = 0;
  v501->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E79393E8;
  v503 = v501 + 1;
  if (SHIBYTE(v634[0].__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v501 + 1, v634[0].__r_.__value_.__l.__data_, v634[0].__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v503->__r_.__value_.__l.__data_ = *(_OWORD *)&v634[0].__r_.__value_.__l.__data_;
    v501[1].__r_.__value_.__r.__words[2] = v634[0].__r_.__value_.__r.__words[2];
  }
  if (SHIBYTE(v634[1].__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(v502 + 2, v634[1].__r_.__value_.__l.__data_, v634[1].__r_.__value_.__l.__size_);
  else
    v502[2] = v634[1];
  if (SHIBYTE(__s[0]) < 0)
  {
    std::string::__init_copy_ctor_external(v502 + 3, (const std::string::value_type *)v635[0], v635[1]);
  }
  else
  {
    *(_OWORD *)&v502[3].__r_.__value_.__l.__data_ = *(_OWORD *)v635;
    v502[3].__r_.__value_.__r.__words[2] = (std::string::size_type)__s[0];
  }
  if (SHIBYTE(__s[3]) < 0)
  {
    std::string::__init_copy_ctor_external(v502 + 4, __s[1], (std::string::size_type)__s[2]);
  }
  else
  {
    *(_OWORD *)&v502[4].__r_.__value_.__l.__data_ = *(_OWORD *)&__s[1];
    v502[4].__r_.__value_.__r.__words[2] = (std::string::size_type)__s[3];
  }
  if (SHIBYTE(v637.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(v502 + 5, v637.__r_.__value_.__l.__data_, v637.__r_.__value_.__l.__size_);
  else
    v502[5] = v637;
  v502[6].__r_.__value_.__r.__words[0] = v638;
  std::map<std::string,siri::dialogengine::ObjectProperty>::map[abi:ne180100]((uint64_t)&v502[6].__r_.__value_.__l.__size_, &v639);
  std::map<std::string,siri::dialogengine::ObjectInput>::map[abi:ne180100]((uint64_t)&v502[7].__r_.__value_.__l.__size_, &v641);
  v502[8].__r_.__value_.__r.__words[2] = 0;
  v502[9].__r_.__value_.__r.__words[0] = 0;
  v504 = &v502[8].__r_.__value_.__r.__words[2];
  v502[8].__r_.__value_.__l.__size_ = (std::string::size_type)&v502[8].__r_.__value_.__r.__words[2];
  v505 = v643;
  if (v643 != (const void **)v644)
  {
    while (1)
    {
      v506 = (std::string::value_type *)*v504;
      if ((std::string::size_type *)v502[8].__r_.__value_.__l.__size_ == v504)
        break;
      v507 = &v502[8].__r_.__value_.__s.__data_[16];
      if (v506)
      {
        do
        {
          v508 = v506;
          v506 = (std::string::value_type *)*((_QWORD *)v506 + 1);
        }
        while (v506);
      }
      else
      {
        do
        {
          v508 = (std::string::value_type *)*((_QWORD *)v507 + 2);
          v31 = *(_QWORD *)v508 == (_QWORD)v507;
          v507 = v508;
        }
        while (v31);
      }
      if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)&v502[9], (const void **)v508 + 4, v505 + 4))
      {
        if (!*v504)
          goto LABEL_1286;
LABEL_1288:
        *(_QWORD *)v608 = v508;
        v509 = (uint64_t **)(v508 + 8);
        goto LABEL_1290;
      }
      v509 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)&v502[8].__r_.__value_.__l.__size_, v608, v505 + 4);
LABEL_1290:
      if (!*v509)
        goto LABEL_1291;
LABEL_1292:
      v511 = (const void **)v505[1];
      if (v511)
      {
        do
        {
          v512 = (const void ***)v511;
          v511 = (const void **)*v511;
        }
        while (v511);
      }
      else
      {
        do
        {
          v512 = (const void ***)v505[2];
          v31 = *v512 == v505;
          v505 = (const void **)v512;
        }
        while (!v31);
      }
      v505 = (const void **)v512;
      if (v512 == v644)
        goto LABEL_1298;
    }
    v508 = &v502[8].__r_.__value_.__s.__data_[16];
    if (!v506)
    {
LABEL_1286:
      *(_QWORD *)v608 = (char *)v502 + 208;
      v509 = (uint64_t **)&v502[8].__r_.__value_.__r.__words[2];
LABEL_1291:
      v510 = (char *)operator new(0x98uLL);
      *(_QWORD *)v625 = v510;
      *(_QWORD *)&v625[8] = (char *)v502 + 208;
      v625[16] = 0;
      std::pair<std::string const,siri::dialogengine::ObjectEnumerant>::pair[abi:ne180100]((std::string *)(v510 + 32), (__int128 *)v505 + 2);
      v625[16] = 1;
      std::__tree<std::string>::__insert_node_at((uint64_t **)&v502[8].__r_.__value_.__l.__size_, *(uint64_t *)v608, v509, (uint64_t *)v510);
      *(_QWORD *)v625 = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::dialogengine::ObjectEnumerant>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::dialogengine::ObjectEnumerant>,void *>>>>::reset[abi:ne180100]((uint64_t)v625);
      goto LABEL_1292;
    }
    goto LABEL_1288;
  }
LABEL_1298:
  *v537 = v503;
  v537[1] = v502;
  std::__tree<std::string>::destroy(v627);
  std::__tree<std::string>::destroy(v630[0]);
  v513 = (std::__shared_weak_count *)v633[2];
  if (v633[2])
  {
    v514 = (unint64_t *)(v633[2] + 8);
    do
      v515 = __ldaxr(v514);
    while (__stlxr(v515 - 1, v514));
    if (!v515)
    {
      ((void (*)(std::__shared_weak_count *))v513->__on_zero_shared)(v513);
      std::__shared_weak_count::__release_weak(v513);
    }
  }
  if (SHIBYTE(v633[0]) < 0)
    operator delete((void *)v632);
  std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectEnumerant>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectEnumerant>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectEnumerant>>>::destroy(v644[0]);
  std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectInput>>>::destroy(v642[0]);
  std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectProperty>>>::destroy(v640[0]);
  if (SHIBYTE(v637.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v637.__r_.__value_.__l.__data_);
  if (SHIBYTE(__s[3]) < 0)
    operator delete(__s[1]);
  if (SHIBYTE(__s[0]) < 0)
    operator delete((void *)v635[0]);
  if (SHIBYTE(v634[1].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v634[1].__r_.__value_.__l.__data_);
  if (SHIBYTE(v634[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v634[0].__r_.__value_.__l.__data_);
}

void sub_1BFC44FDC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23)
{
  void *v23;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  _QWORD *v43;
  std::string *v44;
  __int128 v45;
  const std::string::value_type *v46;
  char *v47;
  const std::string::value_type *v48;
  int v49;
  const std::string::value_type *v50;
  std::string::size_type v51;
  std::string *v52;
  __int128 v53;
  std::string *v54;
  __int128 v55;
  void *v56;
  std::string *v57;
  __int128 v58;
  const std::string::value_type *v59;
  std::string *v60;
  __int128 v61;
  std::string *v62;
  __int128 v63;

  __cxa_free_exception(v23);
  YAML::Node::~Node((void **)&STACK[0x200]);
  if (SLOBYTE(STACK[0x6C7]) < 0)
    operator delete((void *)STACK[0x6B0]);
  v29 = (std::__shared_weak_count *)STACK[0x760];
  if (STACK[0x760])
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (SLOBYTE(STACK[0x757]) < 0)
    operator delete((void *)STACK[0x740]);
  v32 = (std::__shared_weak_count *)STACK[0x728];
  if (STACK[0x728])
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (SLOBYTE(STACK[0x71F]) < 0)
    operator delete((void *)STACK[0x708]);
  v35 = (std::__shared_weak_count *)STACK[0x6F0];
  if (STACK[0x6F0])
  {
    v36 = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if (SLOBYTE(STACK[0x6E7]) < 0)
    operator delete((void *)STACK[0x6D0]);
  if (a23)
  {
    v38 = (unint64_t *)&a23->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))a23->__on_zero_shared)(a23);
      std::__shared_weak_count::__release_weak(a23);
    }
  }
  v40 = (std::__shared_weak_count *)STACK[0x798];
  if (STACK[0x798])
  {
    v41 = (unint64_t *)&v40->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  if (a2 == 1)
  {
    v43 = __cxa_begin_catch(a1);
    std::operator+<char>();
    v44 = std::string::append((std::string *)&STACK[0x4C0], " \"");
    v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    STACK[0x500] = v44->__r_.__value_.__r.__words[2];
    *(_OWORD *)&STACK[0x4F0] = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    v48 = (const std::string::value_type *)v43[4];
    v47 = (char *)(v43 + 4);
    v46 = v48;
    v49 = v47[23];
    if (v49 >= 0)
      v50 = v47;
    else
      v50 = v46;
    if (v49 >= 0)
      v51 = v47[23];
    else
      v51 = *((_QWORD *)v47 + 1);
    v52 = std::string::append((std::string *)&STACK[0x4F0], v50, v51);
    v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    STACK[0x650] = v52->__r_.__value_.__r.__words[2];
    *(_OWORD *)&STACK[0x640] = v53;
    v52->__r_.__value_.__l.__size_ = 0;
    v52->__r_.__value_.__r.__words[2] = 0;
    v52->__r_.__value_.__r.__words[0] = 0;
    v54 = std::string::append((std::string *)&STACK[0x640], "\"");
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    STACK[0x780] = v54->__r_.__value_.__r.__words[2];
    *(_OWORD *)&STACK[0x770] = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)&STACK[0x770], 3u);
    if (SLOBYTE(STACK[0x787]) < 0)
      operator delete((void *)STACK[0x770]);
    if (SLOBYTE(STACK[0x657]) < 0)
      operator delete((void *)STACK[0x640]);
    if (SLOBYTE(STACK[0x507]) < 0)
      operator delete((void *)STACK[0x4F0]);
    if (SLOBYTE(STACK[0x4D7]) < 0)
      operator delete((void *)STACK[0x4C0]);
  }
  else
  {
    if (a2 != 2)
    {
      std::__tree<std::string>::destroy((char *)STACK[0x7B0]);
      std::__tree<std::string>::destroy((char *)STACK[0x7C8]);
      v26 = (std::__shared_weak_count *)STACK[0x800];
      if (STACK[0x800])
      {
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      if (SLOBYTE(STACK[0x7F7]) < 0)
        operator delete((void *)STACK[0x7E0]);
      std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectEnumerant>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectEnumerant>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectEnumerant>>>::destroy((_QWORD *)STACK[0x8C8]);
      std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectInput>>>::destroy((_QWORD *)STACK[0x8B0]);
      std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectProperty>>>::destroy((_QWORD *)STACK[0x898]);
      if (SLOBYTE(STACK[0x887]) < 0)
        operator delete((void *)STACK[0x870]);
      if (SLOBYTE(STACK[0x86F]) < 0)
        operator delete((void *)STACK[0x858]);
      if (SLOBYTE(STACK[0x857]) < 0)
        operator delete((void *)STACK[0x840]);
      if (SLOBYTE(STACK[0x83F]) < 0)
        operator delete((void *)STACK[0x828]);
      if (SLOBYTE(STACK[0x827]) < 0)
        operator delete((void *)STACK[0x810]);
      _Unwind_Resume(a1);
    }
    v56 = __cxa_begin_catch(a1);
    std::operator+<char>();
    v57 = std::string::append((std::string *)&STACK[0x4C0], " \"");
    v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
    STACK[0x500] = v57->__r_.__value_.__r.__words[2];
    *(_OWORD *)&STACK[0x4F0] = v58;
    v57->__r_.__value_.__l.__size_ = 0;
    v57->__r_.__value_.__r.__words[2] = 0;
    v57->__r_.__value_.__r.__words[0] = 0;
    v59 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v56 + 16))(v56);
    v60 = std::string::append((std::string *)&STACK[0x4F0], v59);
    v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
    STACK[0x650] = v60->__r_.__value_.__r.__words[2];
    *(_OWORD *)&STACK[0x640] = v61;
    v60->__r_.__value_.__l.__size_ = 0;
    v60->__r_.__value_.__r.__words[2] = 0;
    v60->__r_.__value_.__r.__words[0] = 0;
    v62 = std::string::append((std::string *)&STACK[0x640], "\"");
    v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
    STACK[0x780] = v62->__r_.__value_.__r.__words[2];
    *(_OWORD *)&STACK[0x770] = v63;
    v62->__r_.__value_.__l.__size_ = 0;
    v62->__r_.__value_.__r.__words[2] = 0;
    v62->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)&STACK[0x770], 3u);
    if (SLOBYTE(STACK[0x787]) < 0)
      operator delete((void *)STACK[0x770]);
    if (SLOBYTE(STACK[0x657]) < 0)
      operator delete((void *)STACK[0x640]);
    if (SLOBYTE(STACK[0x507]) < 0)
      operator delete((void *)STACK[0x4F0]);
    if (SLOBYTE(STACK[0x4D7]) < 0)
      operator delete((void *)STACK[0x4C0]);
  }
  __cxa_end_catch();
  JUMPOUT(0x1BFC44210);
}

void sub_1BFC46958()
{
  if (SLOBYTE(STACK[0x787]) < 0)
    operator delete((void *)STACK[0x770]);
  if (SLOBYTE(STACK[0x657]) < 0)
    operator delete((void *)STACK[0x640]);
  if (SLOBYTE(STACK[0x507]) < 0)
    operator delete((void *)STACK[0x4F0]);
  if (SLOBYTE(STACK[0x4D7]) < 0)
    operator delete((void *)STACK[0x4C0]);
  __cxa_end_catch();
  JUMPOUT(0x1BFC453D4);
}

void YAML::Node::operator[]<char [5]>(uint64_t a1, YAML::Node *this, char *a3)
{
  YAML::detail::node *v6;
  YAML::detail::memory **v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  YAML::detail::node *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *exception;
  void *__p[2];
  char v22;
  std::string v23;

  if (!*(_BYTE *)this)
  {
    exception = __cxa_allocate_exception(0x38uLL);
    if (*((char *)this + 31) < 0)
      std::string::__init_copy_ctor_external(&v23, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
    else
      v23 = *(std::string *)((char *)this + 8);
    YAML::InvalidNode::InvalidNode(exception, (uint64_t)&v23);
  }
  YAML::Node::EnsureNodeExists(this);
  v6 = (YAML::detail::node *)*((_QWORD *)this + 6);
  std::string::basic_string[abi:ne180100]<0>(__p, a3);
  v7 = (YAML::detail::memory **)*((_QWORD *)this + 4);
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = YAML::detail::node::get<std::string>(v6, (uint64_t)__p, v7, v8);
  if (v8)
  {
    v12 = (unint64_t *)&v8->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v22 < 0)
    operator delete(__p[0]);
  v14 = *((_QWORD *)this + 4);
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    *(_BYTE *)a1 = 1;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = v14;
    *(_QWORD *)(a1 + 40) = v15;
    do
      v18 = __ldxr(v16);
    while (__stxr(v18 + 1, v16));
    *(_QWORD *)(a1 + 48) = v11;
    do
      v19 = __ldaxr(v16);
    while (__stlxr(v19 - 1, v16));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  else
  {
    *(_BYTE *)a1 = 1;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = v14;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = v11;
  }
}

void sub_1BFC46BF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;

  __cxa_free_exception(v23);
  _Unwind_Resume(a1);
}

void YAML::Node::operator[]<char [7]>(uint64_t a1, YAML::Node *this, char *a3)
{
  YAML::detail::node *v6;
  YAML::detail::memory **v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  YAML::detail::node *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *exception;
  void *__p[2];
  char v22;
  std::string v23;

  if (!*(_BYTE *)this)
  {
    exception = __cxa_allocate_exception(0x38uLL);
    if (*((char *)this + 31) < 0)
      std::string::__init_copy_ctor_external(&v23, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
    else
      v23 = *(std::string *)((char *)this + 8);
    YAML::InvalidNode::InvalidNode(exception, (uint64_t)&v23);
  }
  YAML::Node::EnsureNodeExists(this);
  v6 = (YAML::detail::node *)*((_QWORD *)this + 6);
  std::string::basic_string[abi:ne180100]<0>(__p, a3);
  v7 = (YAML::detail::memory **)*((_QWORD *)this + 4);
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = YAML::detail::node::get<std::string>(v6, (uint64_t)__p, v7, v8);
  if (v8)
  {
    v12 = (unint64_t *)&v8->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v22 < 0)
    operator delete(__p[0]);
  v14 = *((_QWORD *)this + 4);
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    *(_BYTE *)a1 = 1;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = v14;
    *(_QWORD *)(a1 + 40) = v15;
    do
      v18 = __ldxr(v16);
    while (__stxr(v18 + 1, v16));
    *(_QWORD *)(a1 + 48) = v11;
    do
      v19 = __ldaxr(v16);
    while (__stlxr(v19 - 1, v16));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  else
  {
    *(_BYTE *)a1 = 1;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = v14;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = v11;
  }
}

void sub_1BFC46E08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;

  __cxa_free_exception(v23);
  _Unwind_Resume(a1);
}

_OWORD *std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, _OWORD **a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;

  v5 = (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x40uLL);
    v8 = *a3;
    v9 = *((_QWORD *)*a3 + 2);
    v6[2] = **a3;
    *((_QWORD *)v6 + 6) = v9;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    *((_BYTE *)v6 + 56) = 0;
    std::__tree<std::string>::__insert_node_at(a1, v11, v7, (uint64_t *)v6);
  }
  return v6;
}

void YAML::Node::operator[]<char [11]>(uint64_t a1, YAML::Node *this, char *a3)
{
  YAML::detail::node *v6;
  YAML::detail::memory **v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  YAML::detail::node *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *exception;
  void *__p[2];
  char v22;
  std::string v23;

  if (!*(_BYTE *)this)
  {
    exception = __cxa_allocate_exception(0x38uLL);
    if (*((char *)this + 31) < 0)
      std::string::__init_copy_ctor_external(&v23, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
    else
      v23 = *(std::string *)((char *)this + 8);
    YAML::InvalidNode::InvalidNode(exception, (uint64_t)&v23);
  }
  YAML::Node::EnsureNodeExists(this);
  v6 = (YAML::detail::node *)*((_QWORD *)this + 6);
  std::string::basic_string[abi:ne180100]<0>(__p, a3);
  v7 = (YAML::detail::memory **)*((_QWORD *)this + 4);
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = YAML::detail::node::get<std::string>(v6, (uint64_t)__p, v7, v8);
  if (v8)
  {
    v12 = (unint64_t *)&v8->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v22 < 0)
    operator delete(__p[0]);
  v14 = *((_QWORD *)this + 4);
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    *(_BYTE *)a1 = 1;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = v14;
    *(_QWORD *)(a1 + 40) = v15;
    do
      v18 = __ldxr(v16);
    while (__stxr(v18 + 1, v16));
    *(_QWORD *)(a1 + 48) = v11;
    do
      v19 = __ldaxr(v16);
    while (__stlxr(v19 - 1, v16));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  else
  {
    *(_BYTE *)a1 = 1;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = v14;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = v11;
  }
}

void sub_1BFC470A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;

  __cxa_free_exception(v23);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<siri::dialogengine::ObjectSchema>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E79393E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::dialogengine::ObjectSchema>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E79393E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

void std::__shared_ptr_emplace<siri::dialogengine::ObjectSchema>::__on_zero_shared(uint64_t a1)
{
  siri::dialogengine::ObjectSchema::~ObjectSchema((siri::dialogengine::ObjectSchema *)(a1 + 24));
}

void siri::dialogengine::CATExecutor::Execute(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, const void ***a4@<X3>, int a5@<W4>, std::string **a6@<X8>)
{
  unsigned __int8 v9;
  NSObject *v10;
  const void ***v11;
  const void **v12;
  const void **v13;
  uint64_t *v14;
  uint64_t **v15;
  uint64_t **v16;
  BOOL v17;
  uint64_t **v18;
  char *v19;
  uint64_t *v20;
  const void **v21;
  const void ***v22;
  const char *v23;
  unsigned int v24;
  const char *v25;
  unsigned int v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t *v31;
  uint64_t v32;
  _QWORD *v33;
  char *String;
  NSObject *v35;
  NSObject *v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  os_signpost_id_t spid;
  unint64_t v42;
  std::string v45;
  std::string v46;
  std::string buf;
  std::string v48;
  std::string v49[6];
  __int128 *v50;
  __int128 *v51;
  std::string v52;
  int v53;
  std::string __p;
  std::string v55;
  std::string __str;
  siri::dialogengine *v57;
  std::__shared_weak_count *v58;
  uint64_t **v59;
  _BYTE v60[32];
  uint64_t v61;
  uint64_t v62;
  int v63;
  __int16 v64;
  uint64_t v65;
  _OWORD v66[2];
  uint64_t v67;
  uint64_t v68;
  uint64_t **v69;
  uint64_t *v70;
  uint64_t v71[3];

  if ((v9 & 1) == 0
  {
    siri::dialogengine::CATExecutor::Execute(std::string const&,std::string const&,std::map<std::string,siri::dialogengine::CATAny> const&,std::map<std::string,siri::dialogengine::CATAny> const&,siri::dialogengine::CATOption)::sSignpostLog = (uint64_t)os_log_create("com.apple.siri.DialogEngine", "CATExecutor");
  }
  spid = os_signpost_id_generate((os_log_t)siri::dialogengine::CATExecutor::Execute(std::string const&,std::string const&,std::map<std::string,siri::dialogengine::CATAny> const&,std::map<std::string,siri::dialogengine::CATAny> const&,siri::dialogengine::CATOption)::sSignpostLog);
  v42 = spid - 1;
  if (spid - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v10 = siri::dialogengine::CATExecutor::Execute(std::string const&,std::string const&,std::map<std::string,siri::dialogengine::CATAny> const&,std::map<std::string,siri::dialogengine::CATAny> const&,siri::dialogengine::CATOption)::sSignpostLog;
    if (os_signpost_enabled((os_log_t)siri::dialogengine::CATExecutor::Execute(std::string const&,std::string const&,std::map<std::string,siri::dialogengine::CATAny> const&,std::map<std::string,siri::dialogengine::CATAny> const&,siri::dialogengine::CATOption)::sSignpostLog))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1BF794000, v10, OS_SIGNPOST_INTERVAL_BEGIN, spid, "Execute", "", (uint8_t *)&buf, 2u);
    }
  }
  v70 = 0;
  v71[0] = 0;
  v69 = &v70;
  v13 = *a4;
  v11 = a4 + 1;
  v12 = v13;
  if (v13 != (const void **)v11)
  {
    while (1)
    {
      v14 = v70;
      if (v69 == &v70)
        break;
      v15 = &v70;
      if (v70)
      {
        do
        {
          v16 = (uint64_t **)v14;
          v14 = (uint64_t *)v14[1];
        }
        while (v14);
      }
      else
      {
        do
        {
          v16 = (uint64_t **)v15[2];
          v17 = *v16 == (uint64_t *)v15;
          v15 = v16;
        }
        while (v17);
      }
      if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)v71, (const void **)v16 + 4, v12 + 4))
      {
        if (!v70)
          goto LABEL_13;
LABEL_15:
        v59 = v16;
        v18 = v16 + 1;
        goto LABEL_17;
      }
      v18 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)&v69, &v59, v12 + 4);
LABEL_17:
      if (!*v18)
        goto LABEL_18;
LABEL_21:
      v21 = (const void **)v12[1];
      if (v21)
      {
        do
        {
          v22 = (const void ***)v21;
          v21 = (const void **)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = (const void ***)v12[2];
          v17 = *v22 == v12;
          v12 = (const void **)v22;
        }
        while (!v17);
      }
      v12 = (const void **)v22;
      if (v22 == v11)
        goto LABEL_27;
    }
    v16 = &v70;
    if (!v70)
    {
LABEL_13:
      v59 = &v70;
      v18 = &v70;
LABEL_18:
      v19 = (char *)operator new(0x40uLL);
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
      buf.__r_.__value_.__l.__size_ = (std::string::size_type)&v70;
      buf.__r_.__value_.__s.__data_[16] = 0;
      std::pair<std::string const,siri::dialogengine::CATAny>::pair[abi:ne180100]((std::string *)(v19 + 32), (__int128 *)v12 + 2);
      buf.__r_.__value_.__s.__data_[16] = 1;
      v20 = (uint64_t *)v59;
      *(_QWORD *)v19 = 0;
      *((_QWORD *)v19 + 1) = 0;
      *((_QWORD *)v19 + 2) = v20;
      *v18 = (uint64_t *)v19;
      if (*v69)
      {
        v69 = (uint64_t **)*v69;
        v19 = (char *)*v18;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v70, (uint64_t *)v19);
      ++v71[0];
      buf.__r_.__value_.__r.__words[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::dialogengine::CATAny>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::dialogengine::CATAny>,void *>>>>::reset[abi:ne180100]((uint64_t)&buf);
      goto LABEL_21;
    }
    goto LABEL_15;
  }
LABEL_27:
  memset(v66, 0, sizeof(v66));
  v67 = 0;
  v68 = 256;
  memset(v60, 0, sizeof(v60));
  v59 = (uint64_t **)v66;
  v61 = 0;
  v62 = 512;
  v63 = 324;
  v64 = 0x2000;
  v65 = 4;
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartObject((uint64_t)&v59);
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v59, 5);
  rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v59, (uint64_t)"templateDir", 0xBu);
  if (*(char *)(a1 + 23) >= 0)
    v23 = (const char *)a1;
  else
    v23 = *(const char **)a1;
  v24 = strlen(v23);
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v59, (uint64_t)v23, v24);
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v59, 5);
  rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v59, (uint64_t)"catId", 5u);
  if (*(char *)(a2 + 23) >= 0)
    v25 = (const char *)a2;
  else
    v25 = *(const char **)a2;
  v26 = strlen(v25);
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v59, (uint64_t)v25, v26);
  std::string::basic_string[abi:ne180100]<0>(&buf, "locale");
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
  v27 = (uint64_t *)std::__tree<std::__value_type<std::string,siri::dialogengine::CATAny>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::CATAny>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::CATAny>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v69, (const void **)&buf.__r_.__value_.__l.__data_, &__str);
  v28 = siri::dialogengine::CATAny::to_ptr<std::string>(v27 + 7);
  v29 = v28;
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    if (!v29)
      goto LABEL_40;
  }
  else if (!v28)
  {
    goto LABEL_40;
  }
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v59, 5);
  rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v59, (uint64_t)"locale", 6u);
  if (*(char *)(v29 + 23) < 0)
    v29 = *(_QWORD *)v29;
  v30 = strlen((const char *)v29);
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)&v59, v29, v30);
LABEL_40:
  std::string::basic_string[abi:ne180100]<0>(&buf, "dialogMetadata");
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
  v31 = (uint64_t *)std::__tree<std::__value_type<std::string,siri::dialogengine::CATAny>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::CATAny>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::CATAny>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v69, (const void **)&buf.__r_.__value_.__l.__data_, &__str);
  v32 = siri::dialogengine::CATAny::to_ptr<std::map<std::string,siri::dialogengine::CATAny>>(v31 + 7);
  v33 = (_QWORD *)v32;
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    if (!v33)
      goto LABEL_45;
    goto LABEL_44;
  }
  if (v32)
  {
LABEL_44:
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v59, 5);
    rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v59, (uint64_t)"dialogMetadata", 0xEu);
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartObject((uint64_t)&v59);
    siri::dialogengine::AddCATDictionaryToJSON(v33, (uint64_t **)&v59);
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndObject((uint64_t)&v59);
  }
LABEL_45:
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)&v59, 5);
  rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString((uint64_t *)&v59, (uint64_t)"parameters", 0xAu);
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartObject((uint64_t)&v59);
  siri::dialogengine::AddCATDictionaryToJSON(a3, (uint64_t **)&v59);
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndObject((uint64_t)&v59);
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndObject((uint64_t)&v59);
  String = (char *)rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>::GetString((uint64_t *)v66);
  std::string::basic_string[abi:ne180100]<0>(&buf, String);
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  std::string::basic_string[abi:ne180100]<0>(&v55, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::dialogengine::ParseRequestFromJson((const char *)&buf, &__str, &v55, &__p, &v57);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  if (v57)
  {
    siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)&buf, (siri::dialogengine *)((char *)v57 + 8));
    memset(&v55, 0, sizeof(v55));
    std::vector<siri::dialogengine::UpdatableDir>::__init_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>(&v55, buf.__r_.__value_.__l.__size_, buf.__r_.__value_.__r.__words[2], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(buf.__r_.__value_.__r.__words[2] - buf.__r_.__value_.__l.__size_) >> 5));
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v48.__r_.__value_.__l.__data_, v48.__r_.__value_.__l.__size_);
    else
      __p = v48;
    siri::dialogengine::FindParamsFile((__int128 **)&v55, (uint64_t)&__p, (uint64_t)&__str);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v55;
    std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    memset(&__p, 0, sizeof(__p));
    std::vector<siri::dialogengine::UpdatableDir>::__init_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>(&__p, buf.__r_.__value_.__l.__size_, buf.__r_.__value_.__r.__words[2], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(buf.__r_.__value_.__r.__words[2] - buf.__r_.__value_.__l.__size_) >> 5));
    memset(&v46, 0, sizeof(v46));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v46, v50, v51, 0xAAAAAAAAAAAAAAABLL * (((char *)v51 - (char *)v50) >> 3));
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v45, v48.__r_.__value_.__l.__data_, v48.__r_.__value_.__l.__size_);
    else
      v45 = v48;
    siri::dialogengine::FindLocaleFile((__int128 **)&__p, (__int128 **)&v46, (uint64_t)&v45, (uint64_t)&v55);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    v45.__r_.__value_.__r.__words[0] = (std::string::size_type)&v46;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
    v46.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
    std::string::operator=(v49, &__str);
    std::string::operator=(&v52, &v55);
    v53 = a5;
    siri::dialogengine::Context::SetRequestInfo((uint64_t)v57, (uint64_t)&buf);
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v55.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    siri::dialogengine::RequestInfo::~RequestInfo((void **)&buf.__r_.__value_.__l.__data_);
    siri::dialogengine::Context::Load(v57);
    siri::dialogengine::GenerateResponse((uint64_t *)&buf, v57);
    siri::dialogengine::CATExecutionResult::FromJSON((std::string::size_type)&buf, (const std::string *)a2, a6);
    if (v42 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v36 = siri::dialogengine::CATExecutor::Execute(std::string const&,std::string const&,std::map<std::string,siri::dialogengine::CATAny> const&,std::map<std::string,siri::dialogengine::CATAny> const&,siri::dialogengine::CATOption)::sSignpostLog;
      if (os_signpost_enabled((os_log_t)siri::dialogengine::CATExecutor::Execute(std::string const&,std::string const&,std::map<std::string,siri::dialogengine::CATAny> const&,std::map<std::string,siri::dialogengine::CATAny> const&,siri::dialogengine::CATOption)::sSignpostLog))
      {
        LOWORD(__str.__r_.__value_.__l.__data_) = 0;
        _os_signpost_emit_with_name_impl(&dword_1BF794000, v36, OS_SIGNPOST_INTERVAL_END, spid, "Execute", "", (uint8_t *)&__str, 2u);
      }
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&buf, "error");
    std::string::basic_string[abi:ne180100]<0>(&__str, "");
    siri::dialogengine::CATExecutionResult::CATExecutionResult(a6, &buf, &__str, (const std::string *)a2);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    if (v42 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v35 = siri::dialogengine::CATExecutor::Execute(std::string const&,std::string const&,std::map<std::string,siri::dialogengine::CATAny> const&,std::map<std::string,siri::dialogengine::CATAny> const&,siri::dialogengine::CATOption)::sSignpostLog;
      if (os_signpost_enabled((os_log_t)siri::dialogengine::CATExecutor::Execute(std::string const&,std::string const&,std::map<std::string,siri::dialogengine::CATAny> const&,std::map<std::string,siri::dialogengine::CATAny> const&,siri::dialogengine::CATOption)::sSignpostLog))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_signpost_emit_with_name_impl(&dword_1BF794000, v35, OS_SIGNPOST_INTERVAL_END, spid, "Execute", "", (uint8_t *)&buf, 2u);
      }
    }
  }
  v37 = v58;
  if (v58)
  {
    p_shared_owners = (unint64_t *)&v58->__shared_owners_;
    do
      v39 = __ldaxr(p_shared_owners);
    while (__stlxr(v39 - 1, p_shared_owners));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy((uint64_t)v60);
  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy((uint64_t)v66);
  std::__tree<std::__value_type<std::string,siri::dialogengine::CATAny>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::CATAny>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::CATAny>>>::destroy(v70);
}

void sub_1BFC479BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v8;
  void *v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  va_list va2;

  va_start(va2, a7);
  va_start(va1, a7);
  va_start(va, a7);
  va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  va_copy((va_list)v10, va1);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  v14 = (uint64_t)&STACK[0x250];
  std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  if (SLOBYTE(STACK[0x297]) < 0)
    operator delete((void *)STACK[0x280]);
  siri::dialogengine::RequestInfo::~RequestInfo((void **)va2);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x298]);
  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy(v7);
  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy(v8 - 176);
  std::__tree<std::__value_type<std::string,siri::dialogengine::CATAny>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::CATAny>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::CATAny>>>::destroy(*(_QWORD **)(v8 - 112));
  _Unwind_Resume(a1);
}

_OWORD *std::__tree<std::__value_type<std::string,siri::dialogengine::CATAny>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::CATAny>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::CATAny>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, _OWORD **a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v11[2];
  char v12;
  uint64_t v13;

  v5 = (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v13, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x40uLL);
    v11[1] = a1 + 1;
    v8 = *a3;
    v9 = *((_QWORD *)*a3 + 2);
    v6[2] = **a3;
    *((_QWORD *)v6 + 6) = v9;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    *((_QWORD *)v6 + 7) = 0;
    v12 = 1;
    std::__tree<std::string>::__insert_node_at(a1, v13, v7, (uint64_t *)v6);
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::dialogengine::CATAny>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::dialogengine::CATAny>,void *>>>>::reset[abi:ne180100]((uint64_t)v11);
  }
  return v6;
}

uint64_t siri::dialogengine::CATAny::to_ptr<std::string>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  if (v2)
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  else
    v3 = MEMORY[0x1E0DE4F20];
    return *a1 + 8;
  else
    return 0;
}

uint64_t siri::dialogengine::CATAny::to_ptr<std::map<std::string,siri::dialogengine::CATAny>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  if (v2)
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  else
    v3 = MEMORY[0x1E0DE4F20];
  {
    return *a1 + 8;
  }
  else
  {
    return 0;
  }
}

void siri::dialogengine::AddCATDictionaryToJSON(_QWORD *a1, uint64_t **a2)
{
  __int128 *v2;
  __int128 *v3;
  __int128 *v5;
  __int128 *v6;
  BOOL v7;
  std::string __p;
  uint64_t v9;

  v2 = (__int128 *)(a1 + 1);
  v3 = (__int128 *)*a1;
  if ((_QWORD *)*a1 != a1 + 1)
  {
    do
    {
      std::pair<std::string const,siri::dialogengine::CATAny>::pair[abi:ne180100](&__p, v3 + 2);
      siri::dialogengine::AddCATAnyToJSON((uint64_t)&__p, &v9, a2);
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v5 = (__int128 *)*((_QWORD *)v3 + 1);
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = *(__int128 **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (__int128 *)*((_QWORD *)v3 + 2);
          v7 = *(_QWORD *)v6 == (_QWORD)v3;
          v3 = v6;
        }
        while (!v7);
      }
      v3 = v6;
    }
    while (v6 != v2);
  }
}

void sub_1BFC47DA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a15)
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 8))(a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<std::string,siri::dialogengine::CATAny>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::CATAny>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::CATAny>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,siri::dialogengine::CATAny>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::CATAny>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::CATAny>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,siri::dialogengine::CATAny>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::CATAny>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::CATAny>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,siri::dialogengine::CATAny>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,siri::dialogengine::CATAny>,0>(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

std::string *std::pair<std::string const,siri::dialogengine::CATAny>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = *((_QWORD *)a2 + 3);
  if (v5)
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  this[1].__r_.__value_.__r.__words[0] = v5;
  return this;
}

void sub_1BFC47EBC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::AddCATAnyToJSON(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  const char *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  const char *v30;
  unsigned int v31;
  uint64_t v32;
  void *__p[2];
  char v34;
  uint64_t v35;

  if (*a2)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 16))(*a2);
  else
    v6 = MEMORY[0x1E0DE4F20];
  if (std::type_info::operator==[abi:ne180100](v6, MEMORY[0x1E0DE4EF0]))
  {
    if (*(char *)(a1 + 23) < 0)
    {
      if (!*(_QWORD *)(a1 + 8))
      {
LABEL_13:
        if (*a2)
          v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 16))(*a2);
        else
          v9 = MEMORY[0x1E0DE4F20];
        std::type_info::operator==[abi:ne180100](v9, MEMORY[0x1E0DE4EF0]);
        rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Int(a3, (rapidjson::internal *)*(unsigned int *)(*a2 + 8));
        return;
      }
      a1 = *(_QWORD *)a1;
    }
    else if (!*(_BYTE *)(a1 + 23))
    {
      goto LABEL_13;
    }
    v8 = strlen((const char *)a1);
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)a3, a1, v8);
    goto LABEL_13;
  }
  if (*a2)
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 16))(*a2);
  else
    v7 = MEMORY[0x1E0DE4F20];
  if (std::type_info::operator==[abi:ne180100](v7, MEMORY[0x1E0DE4EC0]))
  {
    if (*(char *)(a1 + 23) < 0)
    {
      if (!*(_QWORD *)(a1 + 8))
      {
LABEL_27:
        if (*a2)
          v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 16))(*a2);
        else
          v12 = MEMORY[0x1E0DE4F20];
        std::type_info::operator==[abi:ne180100](v12, MEMORY[0x1E0DE4EC0]);
        v14 = *(unsigned __int8 *)(*a2 + 8);
        if (v14)
          v15 = 2;
        else
          v15 = 1;
        rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)a3, v15);
        rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteBool((uint64_t *)a3, v14);
        return;
      }
      a1 = *(_QWORD *)a1;
    }
    else if (!*(_BYTE *)(a1 + 23))
    {
      goto LABEL_27;
    }
    v11 = strlen((const char *)a1);
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)a3, a1, v11);
    goto LABEL_27;
  }
  if (*a2)
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 16))(*a2);
  else
    v10 = MEMORY[0x1E0DE4F20];
  if (std::type_info::operator==[abi:ne180100](v10, MEMORY[0x1E0DE4E58])
    || (!*a2 ? (v13 = MEMORY[0x1E0DE4F20]) : (v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 16))(*a2)),
        std::type_info::operator==[abi:ne180100](v13, MEMORY[0x1E0DE4E50])))
  {
    if (*(char *)(a1 + 23) < 0)
    {
      if (!*(_QWORD *)(a1 + 8))
      {
LABEL_46:
        if (*a2)
          v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 16))(*a2);
        else
          v17 = MEMORY[0x1E0DE4F20];
        std::type_info::operator==[abi:ne180100](v17, MEMORY[0x1E0DE4E58]);
        v18 = *(const char **)(*a2 + 8);
LABEL_50:
        v19 = strlen(v18);
        rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)a3, (uint64_t)v18, v19);
        return;
      }
      a1 = *(_QWORD *)a1;
    }
    else if (!*(_BYTE *)(a1 + 23))
    {
      goto LABEL_46;
    }
    v16 = strlen((const char *)a1);
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)a3, a1, v16);
    goto LABEL_46;
  }
  if (*a2)
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 16))(*a2);
  else
    v20 = MEMORY[0x1E0DE4F20];
  {
    if (*(char *)(a1 + 23) < 0)
    {
      if (!*(_QWORD *)(a1 + 8))
        goto LABEL_63;
      a1 = *(_QWORD *)a1;
    }
    else if (!*(_BYTE *)(a1 + 23))
    {
LABEL_63:
      v23 = siri::dialogengine::CATAny::to_ptr<std::string>(a2);
      v18 = (const char *)v23;
      if (*(char *)(v23 + 23) < 0)
        v18 = *(const char **)v23;
      goto LABEL_50;
    }
    v22 = strlen((const char *)a1);
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)a3, a1, v22);
    goto LABEL_63;
  }
  if (*a2)
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 16))(*a2);
  else
    v21 = MEMORY[0x1E0DE4F20];
  {
    if (*a2)
      v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 16))(*a2);
    else
      v24 = MEMORY[0x1E0DE4F20];
    {
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Unsupported value type found in CATDictionary.", v30);
      return;
    }
    if (*(char *)(a1 + 23) < 0)
    {
      if (!*(_QWORD *)(a1 + 8))
      {
LABEL_94:
        rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartObject((uint64_t)a3);
        v32 = siri::dialogengine::CATAny::to_ptr<std::map<std::string,siri::dialogengine::CATAny>>(a2);
        siri::dialogengine::AddCATDictionaryToJSON(v32, a3);
        rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndObject((uint64_t)a3);
        return;
      }
      a1 = *(_QWORD *)a1;
    }
    else if (!*(_BYTE *)(a1 + 23))
    {
      goto LABEL_94;
    }
    v31 = strlen((const char *)a1);
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)a3, a1, v31);
    goto LABEL_94;
  }
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a1 + 23))
      goto LABEL_75;
    goto LABEL_74;
  }
  if (*(_QWORD *)(a1 + 8))
  {
    a1 = *(_QWORD *)a1;
LABEL_74:
    v25 = strlen((const char *)a1);
    rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)a3, a1, v25);
  }
LABEL_75:
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartArray((uint64_t)a3);
  v26 = siri::dialogengine::CATAny::to_ptr<std::vector<siri::dialogengine::CATAny>>(a2);
  v27 = *(_QWORD **)v26;
  v28 = *(_QWORD **)(v26 + 8);
  if (*(_QWORD **)v26 != v28)
  {
    do
    {
      if (*v27)
        v29 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v27 + 24))(*v27);
      else
        v29 = 0;
      v35 = v29;
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      siri::dialogengine::AddCATAnyToJSON(__p, &v35, a3);
      if (v34 < 0)
        operator delete(__p[0]);
      if (v29)
        (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
      ++v27;
    }
    while (v27 != v28);
  }
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndArray((uint64_t)a3);
}

void sub_1BFC483C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::CATAny::to_ptr<std::vector<siri::dialogengine::CATAny>>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  if (v2)
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  else
    v3 = MEMORY[0x1E0DE4F20];
    return *a1 + 8;
  else
    return 0;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::dialogengine::CATAny>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::dialogengine::CATAny>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,siri::dialogengine::CATAny>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

void siri::dialogengine::CATExecutor::ExecuteWithJson(char *a1@<X0>, _QWORD *a2@<X8>)
{
  char *v3;
  char *v4;
  char *v5;

  if (a1[23] < 0)
    a1 = *(char **)a1;
  v3 = CATExecuteWithStrings(a1, 0, 0);
  v4 = v3;
  if (v3)
    v5 = v3;
  else
    v5 = "";
  std::string::basic_string[abi:ne180100]<0>(a2, v5);
  free(v4);
}

double siri::dialogengine::SemanticFeatureConstraint::SemanticFeatureConstraint(siri::dialogengine::SemanticFeatureConstraint *this)
{
  double result;

  *((_BYTE *)this + 48) = 0;
  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return result;
}

{
  double result;

  *((_BYTE *)this + 48) = 0;
  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return result;
}

std::string *siri::dialogengine::SemanticFeatureConstraint::SemanticFeatureConstraint(std::string *this, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  std::string *v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  v6 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  this[2].__r_.__value_.__s.__data_[0] = 0;
  return this;
}

void sub_1BFC48594(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *siri::dialogengine::SemanticFeatureConstraint::SemanticFeatureConstraint(std::string *this, __int128 *a2, __int128 *a3, std::string::value_type a4)
{
  __int128 v7;
  std::string *v8;
  __int128 v9;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v7 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v7;
  }
  v8 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v9 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  this[2].__r_.__value_.__s.__data_[0] = a4;
  return this;
}

void sub_1BFC4863C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::SemanticFeatureConstraint::GetName(siri::dialogengine::SemanticFeatureConstraint *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((_QWORD *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 2);
  }
}

void siri::dialogengine::SemanticFeatureConstraint::GetValue(siri::dialogengine::SemanticFeatureConstraint *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 47) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 3), *((_QWORD *)this + 4));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 24);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 5);
  }
}

uint64_t siri::dialogengine::SemanticFeatureConstraint::GetValue16(siri::dialogengine::SemanticFeatureConstraint *this)
{
  return morphun::util::StringUtils::to_u16string();
}

std::string *siri::dialogengine::SemanticFeatureConstraint::SetValue(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 1, a2);
}

uint64_t siri::dialogengine::SemanticFeatureConstraint::GetGrammarFeature(std::string *a1, uint64_t a2)
{
  uint64_t v2;
  int **Features;
  int *v5;
  int *v6;
  __int128 v7;
  uint64_t v8;
  std::string::size_type size;
  std::string::size_type v10;
  int v11;
  std::string *v12;
  uint64_t v13;
  std::string *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  BOOL v19;
  char v20;
  BOOL v21;
  uint64_t v22;
  std::string::size_type v23;
  std::string::size_type v24;
  int v25;
  std::string *p_p;
  uint64_t v27;
  std::string *v28;
  int v29;
  int v30;
  int v31;
  int v32;
  char v33;
  _BOOL4 v34;
  char v35;
  std::string __p;
  std::string v38;
  int v39;
  std::string v40;
  const void **v41[3];
  char v42;

  Features = (int **)siri::dialogengine::GrammarFeature::GetFeatures(a2);
  v5 = *Features;
  v6 = Features[1];
  if (*Features != v6)
  {
    while (1)
    {
      v39 = *v5;
      if (*((char *)v5 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v40, *((const std::string::value_type **)v5 + 1), *((_QWORD *)v5 + 2));
      }
      else
      {
        v7 = *(_OWORD *)(v5 + 2);
        v40.__r_.__value_.__r.__words[2] = *((_QWORD *)v5 + 3);
        *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v7;
      }
      std::set<std::string>::set[abi:ne180100]((uint64_t *)v41, (const void ***)v5 + 4);
      v42 = *((_BYTE *)v5 + 56);
      if (v39 == 1)
        break;
      if (v39 == 2)
      {
        if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v38, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
        else
          v38 = v40;
        v8 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
        if ((v8 & 0x80u) == 0)
          size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
        else
          size = a1->__r_.__value_.__l.__size_;
        v10 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
        v11 = SHIBYTE(v38.__r_.__value_.__r.__words[2]);
        if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v10 = v38.__r_.__value_.__l.__size_;
        if (size == v10)
        {
          if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v12 = &v38;
          else
            v12 = (std::string *)v38.__r_.__value_.__r.__words[0];
          if ((v8 & 0x80) != 0)
          {
            v21 = memcmp(a1->__r_.__value_.__l.__data_, v12, a1->__r_.__value_.__l.__size_) == 0;
LABEL_60:
            if (v11 < 0)
              goto LABEL_64;
          }
          else
          {
            if (*((_BYTE *)&a1->__r_.__value_.__s + 23))
            {
              v13 = v8 - 1;
              v14 = a1;
              do
              {
                v16 = v14->__r_.__value_.__s.__data_[0];
                v14 = (std::string *)((char *)v14 + 1);
                v15 = v16;
                v18 = v12->__r_.__value_.__s.__data_[0];
                v12 = (std::string *)((char *)v12 + 1);
                v17 = v18;
                v19 = v13-- != 0;
                v20 = v19;
                v21 = v15 == v17;
              }
              while (v15 == v17 && (v20 & 1) != 0);
              goto LABEL_60;
            }
            v21 = 1;
            if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
            {
LABEL_64:
              operator delete(v38.__r_.__value_.__l.__data_);
              if (v21)
              {
LABEL_65:
                v35 = 0;
                v2 = 2;
                goto LABEL_81;
              }
              goto LABEL_80;
            }
          }
        }
        else
        {
          v21 = 0;
          if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_64;
        }
        if (v21)
          goto LABEL_65;
      }
LABEL_80:
      v35 = 1;
LABEL_81:
      std::__tree<std::string>::destroy((uint64_t)v41, (char *)v41[1]);
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v40.__r_.__value_.__l.__data_);
      if ((v35 & 1) == 0)
        return v2;
      v5 += 16;
      if (v5 == v6)
        return 0;
    }
    std::set<std::string>::set[abi:ne180100]((uint64_t *)&v38, v41);
    if (SHIBYTE(a1[1].__r_.__value_.__r.__words[2]) < 0)
    {
      if (a1[1].__r_.__value_.__l.__size_)
      {
LABEL_11:
        if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&__p, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
        else
          __p = v40;
        v22 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
        if ((v22 & 0x80u) == 0)
          v23 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
        else
          v23 = a1->__r_.__value_.__l.__size_;
        v24 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        v25 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v24 = __p.__r_.__value_.__l.__size_;
        if (v23 != v24)
        {
          v34 = 0;
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_68;
          goto LABEL_75;
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((v22 & 0x80) != 0)
        {
          v34 = memcmp(a1->__r_.__value_.__l.__data_, p_p, a1->__r_.__value_.__l.__size_) == 0;
        }
        else
        {
          if (!*((_BYTE *)&a1->__r_.__value_.__s + 23))
          {
            v34 = 1;
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_68:
              if (!v34)
                goto LABEL_79;
              goto LABEL_76;
            }
LABEL_75:
            operator delete(__p.__r_.__value_.__l.__data_);
            if (!v34)
            {
LABEL_79:
              std::__tree<std::string>::destroy((uint64_t)&v38, (char *)v38.__r_.__value_.__l.__size_);
              goto LABEL_80;
            }
LABEL_76:
            if (a1[2].__r_.__value_.__s.__data_[0]
              || &v38.__r_.__value_.__r.__words[1] != (std::string::size_type *)std::__tree<std::string>::find<std::string>((uint64_t)&v38, (const void **)&a1[1].__r_.__value_.__l.__data_))
            {
              goto LABEL_78;
            }
            goto LABEL_79;
          }
          v27 = v22 - 1;
          v28 = a1;
          do
          {
            v30 = v28->__r_.__value_.__s.__data_[0];
            v28 = (std::string *)((char *)v28 + 1);
            v29 = v30;
            v32 = p_p->__r_.__value_.__s.__data_[0];
            p_p = (std::string *)((char *)p_p + 1);
            v31 = v32;
            v19 = v27-- != 0;
            v33 = v19;
            v34 = v29 == v31;
          }
          while (v29 == v31 && (v33 & 1) != 0);
        }
        if ((v25 & 0x80000000) == 0)
          goto LABEL_68;
        goto LABEL_75;
      }
    }
    else if (*((_BYTE *)&a1[1].__r_.__value_.__s + 23))
    {
      goto LABEL_11;
    }
    if (&v38.__r_.__value_.__r.__words[1] != (std::string::size_type *)std::__tree<std::string>::find<std::string>((uint64_t)&v38, (const void **)&a1->__r_.__value_.__l.__data_))
    {
      std::string::operator=(a1 + 1, a1);
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&__p, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
      else
        __p = v40;
      if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
        operator delete(a1->__r_.__value_.__l.__data_);
      *a1 = __p;
LABEL_78:
      std::__tree<std::string>::destroy((uint64_t)&v38, (char *)v38.__r_.__value_.__l.__size_);
      v35 = 0;
      v2 = 1;
      goto LABEL_81;
    }
    goto LABEL_79;
  }
  return 0;
}

void sub_1BFC48A58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, char *a14, uint64_t a15, uint64_t a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::__tree<std::string>::destroy((uint64_t)&a13, a14);
  siri::dialogengine::GrammarFeature::~GrammarFeature((siri::dialogengine::GrammarFeature *)&a17);
  _Unwind_Resume(a1);
}

void siri::dialogengine::SemanticFeatureConstraint::ValidateString(siri::dialogengine::Context *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  signed __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned int v13;
  std::string *v14;
  std::string::size_type v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  std::string *v24;
  std::string *v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  int v31;
  uint64_t v32;
  int v33;
  std::string *v34;
  std::string::size_type v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  std::string *v44;
  std::string *v45;
  char v46;
  uint64_t v47;
  unsigned __int8 *v48;
  int v49;
  char v50;
  int v51;
  std::string *v52;
  std::string::size_type v53;
  char v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  std::string *v62;
  std::string *v63;
  __int128 *v64;
  __int128 *v65;
  __int128 v66;
  std::__compressed_pair<std::string *> v67;
  std::string *v68;
  std::__split_buffer<std::string>::pointer first;
  int v70;
  std::string *v71;
  std::string::size_type v72;
  char v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  std::__split_buffer<std::string>::pointer v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  std::string *v83;
  std::string *v84;
  std::string::size_type v85;
  std::__split_buffer<std::string>::pointer v86;
  std::__split_buffer<std::string>::pointer begin;
  __int128 v88;
  unint64_t v89;
  __int128 v90;
  uint64_t v91;
  std::string v92;
  std::__split_buffer<std::string> __v;
  uint64_t v94;
  std::__split_buffer<std::string> __s1;
  _QWORD v97[2];
  __int128 v98;
  uint64_t v99;

  v99 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v4 = a2[23];
  v5 = v4;
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 0x80u) == 0)
    v7 = a2[23];
  else
    v7 = *((_QWORD *)a2 + 1);
  if (v7)
  {
    v10 = *(unsigned __int8 **)a2;
    if ((v4 & 0x80u) == 0)
      v11 = a2;
    else
      v11 = *(unsigned __int8 **)a2;
    v12 = &v11[v7];
    while (1)
    {
      v13 = *v11;
      if (v13 - 97 >= 0x1A
        && (vmaxv_u16((uint16x4_t)vceq_s16(vdup_n_s16(v13), (int16x4_t)0x2D005D005B0009)) & 1) == 0
        && v13 != 95
        && (v13 & 0xFD) != 0x2C
        && (v13 & 0xFE) != 0x28
        && v13 != 39
        && (v13 & 0xFD) != 0x20
        && (v13 - 48) >= 0xAu
        && (v13 - 65) > 0x19u)
      {
        break;
      }
      ++v11;
      if (!--v7)
        goto LABEL_36;
    }
    if (v12 != v11)
    {
      std::operator+<char>();
      v14 = std::string::append((std::string *)&__s1, "'");
      v15 = v14->__r_.__value_.__r.__words[0];
      *(_QWORD *)&v98 = v14->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)&v98 + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
      v16 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      v17 = *(_QWORD *)(a3 + 16);
      v18 = *(_QWORD *)(a3 + 8);
      if (v18 >= v17)
      {
        v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - *(_QWORD *)a3) >> 3);
        v21 = v20 + 1;
        if (v20 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - *(_QWORD *)a3) >> 3);
        if (2 * v22 > v21)
          v21 = 2 * v22;
        if (v22 >= 0x555555555555555)
          v23 = 0xAAAAAAAAAAAAAAALL;
        else
          v23 = v21;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 16);
        if (v23)
          v24 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a3 + 16, v23);
        else
          v24 = 0;
        v25 = v24 + v20;
        __v.__first_ = v24;
        __v.__begin_ = v25;
        __v.__end_cap_.__value_ = &v24[v23];
        v25->__r_.__value_.__r.__words[0] = v15;
        v25->__r_.__value_.__l.__size_ = v98;
        *(std::string::size_type *)((char *)&v25->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)&v98 + 7);
        *((_BYTE *)&v25->__r_.__value_.__s + 23) = v16;
        __v.__end_ = v25 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a3, &__v);
        v19 = *(_QWORD *)(a3 + 8);
        std::__split_buffer<std::string>::~__split_buffer(&__v);
      }
      else
      {
        *(_QWORD *)v18 = v15;
        *(_QWORD *)(v18 + 8) = v98;
        *(_QWORD *)(v18 + 15) = *(_QWORD *)((char *)&v98 + 7);
        *(_BYTE *)(v18 + 23) = v16;
        v19 = v18 + 24;
        *(_QWORD *)(a3 + 8) = v18 + 24;
      }
      *(_QWORD *)(a3 + 8) = v19;
      if (SHIBYTE(__s1.__end_) < 0)
        operator delete(__s1.__first_);
      v4 = a2[23];
      v10 = *(unsigned __int8 **)a2;
      v6 = *((_QWORD *)a2 + 1);
      v5 = a2[23];
    }
LABEL_36:
    if (v5 >= 0)
      v26 = a2;
    else
      v26 = v10;
    if (v5 >= 0)
      v27 = v4;
    else
      v27 = v6;
    if (v27)
    {
      v28 = 0;
      v29 = v27;
      v30 = v26;
      do
      {
        v31 = *v30++;
        if (v31 == 40)
          ++v28;
        --v29;
      }
      while (v29);
      v32 = 0;
      do
      {
        v33 = *v26++;
        if (v33 == 41)
          ++v32;
        --v27;
      }
      while (v27);
      if (v28 != v32)
      {
        std::operator+<char>();
        v34 = std::string::append((std::string *)&__s1, "'");
        v35 = v34->__r_.__value_.__r.__words[0];
        *(_QWORD *)&v98 = v34->__r_.__value_.__l.__size_;
        *(_QWORD *)((char *)&v98 + 7) = *(std::string::size_type *)((char *)&v34->__r_.__value_.__r.__words[1] + 7);
        v36 = HIBYTE(v34->__r_.__value_.__r.__words[2]);
        v34->__r_.__value_.__l.__size_ = 0;
        v34->__r_.__value_.__r.__words[2] = 0;
        v34->__r_.__value_.__r.__words[0] = 0;
        v37 = *(_QWORD *)(a3 + 16);
        v38 = *(_QWORD *)(a3 + 8);
        if (v38 >= v37)
        {
          v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38 - *(_QWORD *)a3) >> 3);
          v41 = v40 + 1;
          if (v40 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<BOOL>::__throw_length_error[abi:ne180100]();
          v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - *(_QWORD *)a3) >> 3);
          if (2 * v42 > v41)
            v41 = 2 * v42;
          if (v42 >= 0x555555555555555)
            v43 = 0xAAAAAAAAAAAAAAALL;
          else
            v43 = v41;
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 16);
          if (v43)
            v44 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a3 + 16, v43);
          else
            v44 = 0;
          v45 = v44 + v40;
          __v.__first_ = v44;
          __v.__begin_ = v45;
          __v.__end_cap_.__value_ = &v44[v43];
          v45->__r_.__value_.__r.__words[0] = v35;
          v45->__r_.__value_.__l.__size_ = v98;
          *(std::string::size_type *)((char *)&v45->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)&v98 + 7);
          *((_BYTE *)&v45->__r_.__value_.__s + 23) = v36;
          __v.__end_ = v45 + 1;
          std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a3, &__v);
          v39 = *(_QWORD *)(a3 + 8);
          std::__split_buffer<std::string>::~__split_buffer(&__v);
        }
        else
        {
          *(_QWORD *)v38 = v35;
          *(_QWORD *)(v38 + 8) = v98;
          *(_QWORD *)(v38 + 15) = *(_QWORD *)((char *)&v98 + 7);
          *(_BYTE *)(v38 + 23) = v36;
          v39 = v38 + 24;
          *(_QWORD *)(a3 + 8) = v38 + 24;
        }
        *(_QWORD *)(a3 + 8) = v39;
        if (SHIBYTE(__s1.__end_) < 0)
          operator delete(__s1.__first_);
        v4 = a2[23];
        v10 = *(unsigned __int8 **)a2;
        v6 = *((_QWORD *)a2 + 1);
        v5 = a2[23];
      }
    }
    if (v5 < 0)
      v4 = v6;
    else
      v10 = a2;
    if (v4)
    {
      v46 = 0;
      v47 = v4;
      v48 = v10;
      do
      {
        v49 = *v48++;
        if (v49 == 34)
          ++v46;
        --v47;
      }
      while (v47);
      if ((v46 & 1) != 0)
        goto LABEL_81;
      v50 = 0;
      do
      {
        v51 = *v10++;
        if (v51 == 39)
          ++v50;
        --v4;
      }
      while (v4);
      if ((v50 & 1) != 0)
      {
LABEL_81:
        std::operator+<char>();
        v52 = std::string::append((std::string *)&__s1, "'");
        v53 = v52->__r_.__value_.__r.__words[0];
        *(_QWORD *)&v98 = v52->__r_.__value_.__l.__size_;
        *(_QWORD *)((char *)&v98 + 7) = *(std::string::size_type *)((char *)&v52->__r_.__value_.__r.__words[1] + 7);
        v54 = HIBYTE(v52->__r_.__value_.__r.__words[2]);
        v52->__r_.__value_.__l.__size_ = 0;
        v52->__r_.__value_.__r.__words[2] = 0;
        v52->__r_.__value_.__r.__words[0] = 0;
        v55 = *(_QWORD *)(a3 + 16);
        v56 = *(_QWORD *)(a3 + 8);
        if (v56 >= v55)
        {
          v58 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v56 - *(_QWORD *)a3) >> 3);
          v59 = v58 + 1;
          if (v58 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<BOOL>::__throw_length_error[abi:ne180100]();
          v60 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v55 - *(_QWORD *)a3) >> 3);
          if (2 * v60 > v59)
            v59 = 2 * v60;
          if (v60 >= 0x555555555555555)
            v61 = 0xAAAAAAAAAAAAAAALL;
          else
            v61 = v59;
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 16);
          if (v61)
            v62 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a3 + 16, v61);
          else
            v62 = 0;
          v63 = v62 + v58;
          __v.__first_ = v62;
          __v.__begin_ = v63;
          __v.__end_cap_.__value_ = &v62[v61];
          v63->__r_.__value_.__r.__words[0] = v53;
          v63->__r_.__value_.__l.__size_ = v98;
          *(std::string::size_type *)((char *)&v63->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)&v98 + 7);
          *((_BYTE *)&v63->__r_.__value_.__s + 23) = v54;
          __v.__end_ = v63 + 1;
          std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a3, &__v);
          v57 = *(_QWORD *)(a3 + 8);
          std::__split_buffer<std::string>::~__split_buffer(&__v);
        }
        else
        {
          *(_QWORD *)v56 = v53;
          *(_QWORD *)(v56 + 8) = v98;
          *(_QWORD *)(v56 + 15) = *(_QWORD *)((char *)&v98 + 7);
          *(_BYTE *)(v56 + 23) = v54;
          v57 = v56 + 24;
          *(_QWORD *)(a3 + 8) = v56 + 24;
        }
        *(_QWORD *)(a3 + 8) = v57;
        if (SHIBYTE(__s1.__end_) < 0)
          operator delete(__s1.__first_);
      }
    }
    siri::dialogengine::SemanticFeatureConstraint::ParseString(a2, (uint64_t)&v98);
    v64 = (__int128 *)*((_QWORD *)&v98 + 1);
    v65 = (__int128 *)v98;
    if ((_QWORD)v98 != *((_QWORD *)&v98 + 1))
    {
      while (1)
      {
        if (*((char *)v65 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__v, *(const std::string::value_type **)v65, *((_QWORD *)v65 + 1));
        }
        else
        {
          v66 = *v65;
          __v.__end_ = (std::__split_buffer<std::string>::pointer)*((_QWORD *)v65 + 2);
          *(_OWORD *)&__v.__first_ = v66;
        }
        if (*((char *)v65 + 47) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__v.__end_cap_, *((const std::string::value_type **)v65 + 3), *((_QWORD *)v65 + 4));
        }
        else
        {
          v67 = *(std::__compressed_pair<std::string *> *)((char *)v65 + 24);
          v94 = *((_QWORD *)v65 + 5);
          __v.__end_cap_ = v67;
        }
        if (!*((_BYTE *)v65 + 48))
          goto LABEL_126;
        siri::dialogengine::ResolveType(0, (uint64_t)a1, (uint64_t)&__v.__end_cap_, 1, (uint64_t)&__s1);
        v68 = (std::string *)strlen(siri::dialogengine::TYPE_UNKNOWN);
        if ((SHIBYTE(__s1.__end_) & 0x80000000) == 0)
          break;
        if (v68 == __s1.__begin_)
        {
          if (v68 == (std::string *)-1)
            std::string::__throw_out_of_range[abi:ne180100]();
          first = __s1.__first_;
          v70 = memcmp(__s1.__first_, siri::dialogengine::TYPE_UNKNOWN, (size_t)v68);
          operator delete(first);
          if (v70)
            goto LABEL_126;
LABEL_110:
          std::operator+<char>();
          v71 = std::string::append(&v92, "'");
          v72 = v71->__r_.__value_.__r.__words[0];
          v97[0] = v71->__r_.__value_.__l.__size_;
          *(_QWORD *)((char *)v97 + 7) = *(std::string::size_type *)((char *)&v71->__r_.__value_.__r.__words[1] + 7);
          v73 = HIBYTE(v71->__r_.__value_.__r.__words[2]);
          v71->__r_.__value_.__l.__size_ = 0;
          v71->__r_.__value_.__r.__words[2] = 0;
          v71->__r_.__value_.__r.__words[0] = 0;
          v74 = *(_QWORD *)(a3 + 8);
          v75 = *(_QWORD *)(a3 + 16);
          if (v74 >= v75)
          {
            v79 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v74 - *(_QWORD *)a3) >> 3);
            v80 = v79 + 1;
            if (v79 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<BOOL>::__throw_length_error[abi:ne180100]();
            v81 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v75 - *(_QWORD *)a3) >> 3);
            if (2 * v81 > v80)
              v80 = 2 * v81;
            if (v81 >= 0x555555555555555)
              v82 = 0xAAAAAAAAAAAAAAALL;
            else
              v82 = v80;
            __s1.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 16);
            if (v82)
              v83 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a3 + 16, v82);
            else
              v83 = 0;
            v84 = v83 + v79;
            __s1.__first_ = v83;
            __s1.__begin_ = v84;
            __s1.__end_cap_.__value_ = &v83[v82];
            v85 = v97[0];
            v84->__r_.__value_.__r.__words[0] = v72;
            v84->__r_.__value_.__l.__size_ = v85;
            *(std::string::size_type *)((char *)&v84->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v97 + 7);
            *((_BYTE *)&v84->__r_.__value_.__s + 23) = v73;
            __s1.__end_ = v84 + 1;
            std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a3, &__s1);
            v77 = *(_QWORD *)(a3 + 8);
            std::__split_buffer<std::string>::~__split_buffer(&__s1);
          }
          else
          {
            v76 = v97[0];
            *(_QWORD *)v74 = v72;
            *(_QWORD *)(v74 + 8) = v76;
            *(_QWORD *)(v74 + 15) = *(_QWORD *)((char *)v97 + 7);
            *(_BYTE *)(v74 + 23) = v73;
            v77 = v74 + 24;
            *(_QWORD *)(a3 + 8) = v74 + 24;
          }
          *(_QWORD *)(a3 + 8) = v77;
          if ((SHIBYTE(v92.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_126;
          v78 = (std::__split_buffer<std::string>::pointer)v92.__r_.__value_.__r.__words[0];
          goto LABEL_125;
        }
        v78 = __s1.__first_;
LABEL_125:
        operator delete(v78);
LABEL_126:
        if (SHIBYTE(v94) < 0)
          operator delete(__v.__end_cap_.__value_);
        if (SHIBYTE(__v.__end_) < 0)
          operator delete(__v.__first_);
        v65 = (__int128 *)((char *)v65 + 56);
        if (v65 == v64)
        {
          if ((_QWORD)v98 != *((_QWORD *)&v98 + 1))
          {
            siri::dialogengine::ValidateInflection(a1, (const char *)&v98, (uint64_t)&__v);
            v86 = __v.__first_;
            begin = __v.__begin_;
            while (v86 != begin)
            {
              if (SHIBYTE(v86->__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)&__s1, v86->__r_.__value_.__l.__data_, v86->__r_.__value_.__l.__size_);
              }
              else
              {
                v88 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
                __s1.__end_ = (std::__split_buffer<std::string>::pointer)v86->__r_.__value_.__r.__words[2];
                *(_OWORD *)&__s1.__first_ = v88;
              }
              v89 = *(_QWORD *)(a3 + 8);
              if (v89 >= *(_QWORD *)(a3 + 16))
              {
                v91 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a3, (__int128 *)&__s1);
              }
              else
              {
                if (SHIBYTE(__s1.__end_) < 0)
                {
                  std::string::__init_copy_ctor_external(*(std::string **)(a3 + 8), (const std::string::value_type *)__s1.__first_, (std::string::size_type)__s1.__begin_);
                }
                else
                {
                  v90 = *(_OWORD *)&__s1.__first_;
                  *(_QWORD *)(v89 + 16) = __s1.__end_;
                  *(_OWORD *)v89 = v90;
                }
                v91 = v89 + 24;
                *(_QWORD *)(a3 + 8) = v89 + 24;
              }
              *(_QWORD *)(a3 + 8) = v91;
              if (SHIBYTE(__s1.__end_) < 0)
                operator delete(__s1.__first_);
              ++v86;
            }
            __s1.__first_ = (std::__split_buffer<std::string>::pointer)&__v;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s1);
          }
          goto LABEL_147;
        }
      }
      if (v68 != (std::string *)HIBYTE(__s1.__end_) || memcmp(&__s1, siri::dialogengine::TYPE_UNKNOWN, (size_t)v68))
        goto LABEL_126;
      goto LABEL_110;
    }
LABEL_147:
    __v.__first_ = (std::__split_buffer<std::string>::pointer)&v98;
    std::vector<siri::dialogengine::SemanticFeatureConstraint>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  }
}

void sub_1BFC49400(_Unwind_Exception *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, std::__split_buffer<std::string> *a8, uint64_t a9, void *a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__pa,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;
  uint64_t v30;

  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a13);
  if (a29 < 0)
    operator delete(__pa);
  *(_QWORD *)(v30 - 128) = v29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 128));
  _Unwind_Resume(a1);
}

void siri::dialogengine::SemanticFeatureConstraint::ParseString(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v3;
  __int128 *v4;
  __int128 v5;
  int64_t v6;
  std::string *v7;
  _BYTE *v8;
  std::string *v9;
  _BYTE *v10;
  std::string::size_type v11;
  _BOOL4 v12;
  void *v13;
  std::string v14;
  std::string v15;
  std::string v16;
  std::string v17;
  void *__p;
  char v19;
  std::string __str;
  __int128 *v21;
  __int128 *v22;
  char v23[17];

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  siri::dialogengine::StringSplit(a1, ",", &v21);
  v3 = v21;
  v4 = v22;
  if (v21 != v22)
  {
    while (1)
    {
      if (*((char *)v3 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v3, *((_QWORD *)v3 + 1));
      }
      else
      {
        v5 = *v3;
        __str.__r_.__value_.__r.__words[2] = *((_QWORD *)v3 + 2);
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v5;
      }
      siri::dialogengine::StringTrim(" \t\n\r", &__str, &v17);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      __str = v17;
      v6 = (v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? HIBYTE(v17.__r_.__value_.__r.__words[2])
         : __str.__r_.__value_.__l.__size_;
      v7 = (v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &__str
         : (std::string *)__str.__r_.__value_.__r.__words[0];
      if (v6 >= 1)
        break;
LABEL_29:
      std::string::basic_string[abi:ne180100]<0>(&v16, "");
      siri::dialogengine::SemanticFeatureConstraint::SemanticFeatureConstraint(&v17, (__int128 *)&__str, (__int128 *)&v16);
      std::vector<siri::dialogengine::SemanticFeatureConstraint>::push_back[abi:ne180100]((void **)a2, (__int128 *)&v17);
      if (v19 < 0)
        operator delete(__p);
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      {
        v13 = (void *)v17.__r_.__value_.__r.__words[0];
LABEL_33:
        operator delete(v13);
      }
LABEL_34:
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v16.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v3 = (__int128 *)((char *)v3 + 24);
      if (v3 == v4)
        goto LABEL_58;
    }
    v8 = (char *)v7 + v6;
    v9 = v7;
    while (1)
    {
      v10 = memchr(v9, 40, v6);
      if (!v10)
        goto LABEL_29;
      if (*v10 == 40)
        break;
      v9 = (std::string *)(v10 + 1);
      v6 = v8 - (_BYTE *)v9;
      if (v8 - (_BYTE *)v9 < 1)
        goto LABEL_29;
    }
    if (v10 == v8)
      goto LABEL_29;
    v11 = v10 - (_BYTE *)v7;
    if (v11 == -1)
      goto LABEL_29;
    std::string::basic_string(&v17, &__str, 0, v11, (std::allocator<char> *)&v15);
    siri::dialogengine::StringTrim(" \t\n\r", &v17, &v16);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
    std::string::basic_string(&v14, &__str, v11, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v23);
    siri::dialogengine::StringTrim("()", &v14, &v17);
    siri::dialogengine::StringTrim(" \t\n\r", &v17, &v15);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v17, "\"");
    if (siri::dialogengine::StringStartsWith(&v15, (unsigned __int8 *)&v17))
    {
      v12 = 1;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v14, "'");
      v12 = siri::dialogengine::StringStartsWith(&v15, (unsigned __int8 *)&v14);
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v14.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v17.__r_.__value_.__l.__data_);
      if (!v12)
        goto LABEL_50;
    }
    else if (!v12)
    {
      goto LABEL_50;
    }
    siri::dialogengine::StringTrim("\"", &v15, &v14);
    siri::dialogengine::StringTrim("'", &v14, &v17);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
    v15 = v17;
    *((_BYTE *)&v17.__r_.__value_.__s + 23) = 0;
    v17.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
LABEL_50:
    siri::dialogengine::GrammarFeature::GetCanonicalGrammarName((uint64_t)&v16, &v17);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
    v16 = v17;
    siri::dialogengine::SemanticFeatureConstraint::SemanticFeatureConstraint(&v17, (__int128 *)&v16, (__int128 *)&v15, !v12);
    std::vector<siri::dialogengine::SemanticFeatureConstraint>::push_back[abi:ne180100]((void **)a2, (__int128 *)&v17);
    if (v19 < 0)
      operator delete(__p);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    {
      v13 = (void *)v15.__r_.__value_.__r.__words[0];
      goto LABEL_33;
    }
    goto LABEL_34;
  }
LABEL_58:
  v17.__r_.__value_.__r.__words[0] = (std::string::size_type)&v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v17);
}

void sub_1BFC498F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  std::vector<siri::dialogengine::SemanticFeatureConstraint>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  _Unwind_Resume(a1);
}

void std::vector<siri::dialogengine::SemanticFeatureConstraint>::push_back[abi:ne180100](void **a1, __int128 *a2)
{
  char *v4;
  char *v5;
  __int128 v6;
  __int128 v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  char *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v4 = (char *)a1[1];
  v5 = (char *)a1[2];
  if (v4 >= v5)
  {
    v9 = 0x6DB6DB6DB6DB6DB7 * ((v4 - (_BYTE *)*a1) >> 3);
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) > 0x492492492492492)
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    v11 = 0x6DB6DB6DB6DB6DB7 * ((v5 - (_BYTE *)*a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x249249249249249)
      v12 = 0x492492492492492;
    else
      v12 = v10;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<siri::dialogengine::SemanticFeatureConstraint>>(v12);
    v14 = &v13[56 * v9];
    v16 = &v13[56 * v15];
    v17 = *a2;
    *((_QWORD *)v14 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v14 = v17;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v18 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)v14 + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v14 + 24) = v18;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v14[48] = *((_BYTE *)a2 + 48);
    v8 = v14 + 56;
    v19 = (char *)*a1;
    v20 = (char *)a1[1];
    if (v20 == *a1)
    {
      *a1 = v14;
      a1[1] = v8;
      a1[2] = v16;
    }
    else
    {
      do
      {
        v21 = *(_OWORD *)(v20 - 56);
        *((_QWORD *)v14 - 5) = *((_QWORD *)v20 - 5);
        *(_OWORD *)(v14 - 56) = v21;
        *((_QWORD *)v20 - 6) = 0;
        *((_QWORD *)v20 - 5) = 0;
        *((_QWORD *)v20 - 7) = 0;
        v22 = *((_OWORD *)v20 - 2);
        *((_QWORD *)v14 - 2) = *((_QWORD *)v20 - 2);
        *((_OWORD *)v14 - 2) = v22;
        *((_QWORD *)v20 - 3) = 0;
        *((_QWORD *)v20 - 2) = 0;
        *((_QWORD *)v20 - 4) = 0;
        *(v14 - 8) = *(v20 - 8);
        v14 -= 56;
        v20 -= 56;
      }
      while (v20 != v19);
      v20 = (char *)*a1;
      v23 = (uint64_t)a1[1];
      *a1 = v14;
      a1[1] = v8;
      a1[2] = v16;
      while ((char *)v23 != v20)
      {
        v23 -= 56;
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(v23);
      }
    }
    if (v20)
      operator delete(v20);
  }
  else
  {
    v6 = *a2;
    *((_QWORD *)v4 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v4 = v6;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v7 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)v4 + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v4 + 24) = v7;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v4[48] = *((_BYTE *)a2 + 48);
    v8 = v4 + 56;
  }
  a1[1] = v8;
}

void siri::dialogengine::SemanticFeatureConstraint::FromString(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::string v12;
  void *v13;
  char v14;
  void *v15;
  char v16;
  void *v17;
  char v18;
  void *v19;
  char v20;
  void *v21;
  char v22;
  void *__p;
  char v24;
  void *v25[2];
  char v26;
  std::string v27;
  uint64_t v28;
  std::__shared_weak_count *v29;

  siri::dialogengine::SemanticFeatureConstraint::ParseString(a2, (uint64_t)a3);
  v5 = *a3;
  v6 = a3[1];
  if (*a3 != v6)
  {
    do
    {
      if (*(_BYTE *)(v5 + 48))
      {
        std::string::basic_string[abi:ne180100]<0>(&v27, "");
        std::string::basic_string[abi:ne180100]<0>(v25, "");
        v7 = (void **)(v5 + 24);
        siri::dialogengine::ResolveValue(a1, v5 + 24, 1, (uint64_t)&v27, (uint64_t)v25, &v28);
        if (v26 < 0)
          operator delete(v25[0]);
        if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v27.__r_.__value_.__l.__data_);
        v8 = v28;
        if (v28)
        {
          (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v28 + 48))(&v12, v28);
          if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v27, v12.__r_.__value_.__l.__data_, v12.__r_.__value_.__l.__size_);
          else
            v27 = v12;
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(&v27, "");
        }
        if (*(char *)(v5 + 47) < 0)
          operator delete(*v7);
        *(_OWORD *)v7 = *(_OWORD *)&v27.__r_.__value_.__l.__data_;
        *(_QWORD *)(v5 + 40) = *((_QWORD *)&v27.__r_.__value_.__l + 2);
        *((_BYTE *)&v27.__r_.__value_.__s + 23) = 0;
        v27.__r_.__value_.__s.__data_[0] = 0;
        if (v8)
        {
          if (v24 < 0)
            operator delete(__p);
          if (v22 < 0)
            operator delete(v21);
          if (v20 < 0)
            operator delete(v19);
          if (v18 < 0)
            operator delete(v17);
          if (v16 < 0)
            operator delete(v15);
          if (v14 < 0)
            operator delete(v13);
          if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v12.__r_.__value_.__l.__data_);
        }
        *(_BYTE *)(v5 + 48) = 0;
        v9 = v29;
        if (v29)
        {
          p_shared_owners = (unint64_t *)&v29->__shared_owners_;
          do
            v11 = __ldaxr(p_shared_owners);
          while (__stlxr(v11 - 1, p_shared_owners));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
      }
      v5 += 56;
    }
    while (v5 != v6);
  }
}

void sub_1BFC49DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v9;
  uint64_t v10;

  siri::dialogengine::SpeakableString::~SpeakableString(&a9);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v10 - 80);
  *(_QWORD *)(v10 - 112) = v9;
  std::vector<siri::dialogengine::SemanticFeatureConstraint>::__destroy_vector::operator()[abi:ne180100]((void ***)(v10 - 112));
  _Unwind_Resume(a1);
}

void siri::dialogengine::SemanticFeatureConstraint::ToString(__int128 **a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v3;
  __int128 *v4;
  __int128 v5;
  __int128 v6;
  std::string::size_type size;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  std::string __p;
  std::string v16;
  std::string v17;
  std::string v18;
  std::string v19;
  char v20;
  uint64_t v21;
  std::string *v22;
  unint64_t v23;

  v21 = 0;
  v22 = 0;
  v23 = 0;
  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      if (*((char *)v3 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)v3, *((_QWORD *)v3 + 1));
      }
      else
      {
        v5 = *v3;
        v18.__r_.__value_.__r.__words[2] = *((_QWORD *)v3 + 2);
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v5;
      }
      if (*((char *)v3 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&v19, *((const std::string::value_type **)v3 + 3), *((_QWORD *)v3 + 4));
      }
      else
      {
        v6 = *(__int128 *)((char *)v3 + 24);
        v19.__r_.__value_.__r.__words[2] = *((_QWORD *)v3 + 5);
        *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v6;
      }
      v20 = *((_BYTE *)v3 + 48);
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v17, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
      else
        v17 = v18;
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v16, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
      else
        v16 = v19;
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      {
        size = v16.__r_.__value_.__l.__size_;
        operator delete(v16.__r_.__value_.__l.__data_);
        if (size)
        {
LABEL_18:
          if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&__p, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
          else
            __p = v19;
          v8 = std::string::insert(&__p, 0, "=");
          v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
          v16.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v9;
          v8->__r_.__value_.__l.__size_ = 0;
          v8->__r_.__value_.__r.__words[2] = 0;
          v8->__r_.__value_.__r.__words[0] = 0;
          if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v10 = &v16;
          else
            v10 = (std::string *)v16.__r_.__value_.__r.__words[0];
          if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v11 = HIBYTE(v16.__r_.__value_.__r.__words[2]);
          else
            v11 = v16.__r_.__value_.__l.__size_;
          std::string::append(&v17, (const std::string::value_type *)v10, v11);
          if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v16.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      else if (*((_BYTE *)&v16.__r_.__value_.__s + 23))
      {
        goto LABEL_18;
      }
      v12 = v22;
      if ((unint64_t)v22 >= v23)
      {
        v14 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v21, (__int128 *)&v17);
      }
      else
      {
        if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v22, v17.__r_.__value_.__l.__data_, v17.__r_.__value_.__l.__size_);
        }
        else
        {
          v13 = *(_OWORD *)&v17.__r_.__value_.__l.__data_;
          v22->__r_.__value_.__r.__words[2] = v17.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
        }
        v14 = v12 + 1;
      }
      v22 = v14;
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v17.__r_.__value_.__l.__data_);
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v19.__r_.__value_.__l.__data_);
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v18.__r_.__value_.__l.__data_);
      v3 = (__int128 *)((char *)v3 + 56);
    }
    while (v3 != v4);
  }
  std::string::basic_string[abi:ne180100]<0>(&v18, ", ");
  siri::dialogengine::StringJoinInternal<std::vector<std::string>>(a2, v21, (uint64_t)v22, (uint64_t)&v18);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  v18.__r_.__value_.__r.__words[0] = (std::string::size_type)&v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
}

void sub_1BFC4A0D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (a35 < 0)
    operator delete(__p);
  __p = (void *)(v35 - 88);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void siri::dialogengine::GroupSwitch::~GroupSwitch(siri::dialogengine::GroupSwitch *this)
{
  *(_QWORD *)this = off_1E7939488;
  *((_QWORD *)this + 8) = &unk_1E79394E0;
  if (*((char *)this + 279) < 0)
    operator delete(*((void **)this + 32));
  siri::dialogengine::Group::~Group(this);
}

{
  *(_QWORD *)this = off_1E7939488;
  *((_QWORD *)this + 8) = &unk_1E79394E0;
  if (*((char *)this + 279) < 0)
    operator delete(*((void **)this + 32));
  siri::dialogengine::Group::~Group(this);
  JUMPOUT(0x1C3B8D890);
}

uint64_t siri::dialogengine::GroupSwitch::Validate(siri::dialogengine::GroupSwitch *this, siri::dialogengine::Context *a2)
{
  char v4;
  _OWORD *v5;
  size_t v6;
  size_t v7;
  void **v8;
  std::string::size_type size;
  void *v10;
  std::string::size_type v11;
  int v12;
  siri::dialogengine::Node *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  __int128 *v17;
  __int128 *v18;
  _BOOL4 v19;
  __int128 v20;
  void *v21;
  size_t v22;
  unint64_t v23;
  void **v24;
  void *v25;
  unint64_t v26;
  void **v27;
  void **v28;
  std::string *v29;
  __int128 v30;
  std::string *p_p;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  void *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  std::string::size_type v39;
  unint64_t v40;
  unsigned __int8 v41;
  std::string *v42;
  std::string *v43;
  BOOL v44;
  std::string *v45;
  __int128 v46;
  std::string::size_type v48;
  int v49;
  std::__shared_weak_count *v50;
  std::string v51;
  void *v52;
  char v53;
  std::string v54;
  std::string v55;
  void *v56[2];
  std::string::size_type v57;
  void *__s1[2];
  unsigned __int8 v59;
  std::string __p;
  __int128 v61;
  unsigned __int8 v62;
  siri::dialogengine::Node *v63;
  std::__shared_weak_count *v64;
  std::string v65;
  void **v66;
  void *v67;
  unsigned __int8 v68;

  v4 = siri::dialogengine::Group::Validate((uint64_t **)this, a2);
  v5 = (_OWORD *)((char *)this + 256);
  siri::dialogengine::ResolveType(0, (uint64_t)a2, (uint64_t)this + 256, 1, (uint64_t)&v66);
  if (*((char *)this + 279) < 0)
  {
    std::string::__init_copy_ctor_external(&v51, *((const std::string::value_type **)this + 32), *((_QWORD *)this + 33));
  }
  else
  {
    *(_OWORD *)&v51.__r_.__value_.__l.__data_ = *v5;
    v51.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 34);
  }
  if ((SHIBYTE(v51.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((_BYTE *)&v51.__r_.__value_.__s + 23))
      goto LABEL_6;
LABEL_10:
    std::string::basic_string[abi:ne180100]<0>(&v51, "Switch elements cannot have an empty 'value' attribute");
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, (__int128 *)&v51, (uint64_t)this);
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    {
      v10 = (void *)v51.__r_.__value_.__r.__words[0];
LABEL_121:
      operator delete(v10);
    }
LABEL_122:
    v4 = 0;
    goto LABEL_123;
  }
  size = v51.__r_.__value_.__l.__size_;
  operator delete(v51.__r_.__value_.__l.__data_);
  if (!size)
    goto LABEL_10;
LABEL_6:
  v6 = strlen(siri::dialogengine::TYPE_UNKNOWN);
  v7 = v6;
  if ((char)v68 < 0)
  {
    if ((void *)v6 == v67)
    {
      if (v6 == -1)
        std::string::__throw_out_of_range[abi:ne180100]();
      v8 = v66;
LABEL_15:
      if (memcmp(v8, siri::dialogengine::TYPE_UNKNOWN, v7))
        goto LABEL_16;
      if (*((char *)this + 279) < 0)
      {
        std::string::__init_copy_ctor_external(&v65, *((const std::string::value_type **)this + 32), *((_QWORD *)this + 33));
      }
      else
      {
        *(_OWORD *)&v65.__r_.__value_.__l.__data_ = *v5;
        v65.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 34);
      }
      v45 = std::string::insert(&v65, 0, "Switch element has a 'value' with unknown type: ");
      v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v46;
      v45->__r_.__value_.__l.__size_ = 0;
      v45->__r_.__value_.__r.__words[2] = 0;
      v45->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Context::AddValidationError((uint64_t)a2, (__int128 *)&v51, (uint64_t)this);
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v51.__r_.__value_.__l.__data_);
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
      {
        v10 = (void *)v65.__r_.__value_.__r.__words[0];
        goto LABEL_121;
      }
      goto LABEL_122;
    }
  }
  else if (v6 == v68)
  {
    v8 = (void **)&v66;
    goto LABEL_15;
  }
LABEL_16:
  *(_OWORD *)&v65.__r_.__value_.__r.__words[1] = 0uLL;
  v65.__r_.__value_.__r.__words[0] = (std::string::size_type)&v65.__r_.__value_.__l.__size_;
  memset(&v51, 0, sizeof(v51));
  std::vector<std::shared_ptr<siri::dialogengine::Node>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Node>*,std::shared_ptr<siri::dialogengine::Node>*>((char *)&v51, *((_QWORD **)this + 26), *((_QWORD **)this + 27), (uint64_t)(*((_QWORD *)this + 27) - *((_QWORD *)this + 26)) >> 4);
  v48 = v51.__r_.__value_.__l.__size_;
  v11 = v51.__r_.__value_.__r.__words[0];
  if (v51.__r_.__value_.__r.__words[0] == v51.__r_.__value_.__l.__size_)
    goto LABEL_88;
  v12 = 0;
  do
  {
    v13 = *(siri::dialogengine::Node **)v11;
    v14 = *(std::__shared_weak_count **)(v11 + 8);
    v63 = *(siri::dialogengine::Node **)v11;
    v64 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }
    v50 = v14;
    siri::dialogengine::GetCases((siri::dialogengine *)&v61, v13);
    v17 = (__int128 *)*((_QWORD *)&v61 + 1);
    v18 = (__int128 *)v61;
    v19 = (_QWORD)v61 == *((_QWORD *)&v61 + 1);
    if ((v19 & v12) == 1)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "Switch elements can only have a single default (no case value)");
      siri::dialogengine::Context::AddValidationError((uint64_t)a2, (__int128 *)&__p, (uint64_t)this);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v4 = 0;
      v49 = 1;
      v17 = (__int128 *)*((_QWORD *)&v61 + 1);
      v18 = (__int128 *)v61;
    }
    else
    {
      v49 = v19 | v12;
    }
    while (v18 != v17)
    {
      if (*((char *)v18 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v18, *((_QWORD *)v18 + 1));
      }
      else
      {
        v20 = *v18;
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v18 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v20;
      }
      siri::dialogengine::ResolveType(0, (uint64_t)a2, (uint64_t)&__p, 1, (uint64_t)__s1);
      v21 = (void *)strlen(siri::dialogengine::TYPE_UNKNOWN);
      v22 = (size_t)v21;
      v23 = v59;
      if ((char)v59 < 0)
      {
        if (v21 == __s1[1])
        {
          if (v21 == (void *)-1)
            std::string::__throw_out_of_range[abi:ne180100]();
          v24 = (void **)__s1[0];
LABEL_35:
          if (!memcmp(v24, siri::dialogengine::TYPE_UNKNOWN, v22))
            goto LABEL_66;
        }
      }
      else if (v21 == (void *)v59)
      {
        v24 = __s1;
        goto LABEL_35;
      }
      if ((v23 & 0x80u) == 0)
        v25 = (void *)v23;
      else
        v25 = __s1[1];
      v26 = v68;
      if ((v68 & 0x80u) != 0)
        v26 = (unint64_t)v67;
      if (v25 != (void *)v26)
        goto LABEL_53;
      if ((v68 & 0x80u) == 0)
        v27 = (void **)&v66;
      else
        v27 = v66;
      if ((v23 & 0x80) != 0)
      {
        if (memcmp(__s1[0], v27, (size_t)__s1[1]))
          goto LABEL_53;
      }
      else if ((_DWORD)v23)
      {
        v28 = __s1;
        while (*(unsigned __int8 *)v28 == *(unsigned __int8 *)v27)
        {
          v28 = (void **)((char *)v28 + 1);
          v27 = (void **)((char *)v27 + 1);
          if (!--v23)
            goto LABEL_65;
        }
LABEL_53:
        std::operator+<char>();
        v29 = std::string::append(&v54, ") from switch value: ");
        v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        v55.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v30;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v32 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v32 = __p.__r_.__value_.__l.__size_;
        v33 = std::string::append(&v55, (const std::string::value_type *)p_p, v32);
        v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
        v57 = v33->__r_.__value_.__r.__words[2];
        *(_OWORD *)v56 = v34;
        v33->__r_.__value_.__l.__size_ = 0;
        v33->__r_.__value_.__r.__words[2] = 0;
        v33->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::Context::AddValidationError((uint64_t)a2, (__int128 *)v56, (uint64_t)this);
        if (SHIBYTE(v57) < 0)
          operator delete(v56[0]);
        if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v55.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_69;
        v35 = (void *)v54.__r_.__value_.__r.__words[0];
LABEL_68:
        operator delete(v35);
        goto LABEL_69;
      }
LABEL_65:
      if (siri::dialogengine::IsPrimitiveType((const void **)__s1))
        goto LABEL_70;
LABEL_66:
      std::operator+<char>();
      siri::dialogengine::Context::AddValidationError((uint64_t)a2, (__int128 *)v56, (uint64_t)this);
      if (SHIBYTE(v57) < 0)
      {
        v35 = v56[0];
        goto LABEL_68;
      }
LABEL_69:
      v4 = 0;
LABEL_70:
      siri::dialogengine::StringToLower((uint64_t)&__p, (uint64_t)v56);
      if (&v65.__r_.__value_.__r.__words[1] != (std::string::size_type *)std::__tree<std::string>::find<std::string>((uint64_t)&v65, (const void **)v56))
      {
        std::operator+<char>();
        siri::dialogengine::Context::AddValidationError((uint64_t)a2, (__int128 *)&v55, (uint64_t)this);
        if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v55.__r_.__value_.__l.__data_);
        v4 = 0;
      }
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v65, (const void **)v56, (uint64_t)v56);
      if (SHIBYTE(v57) < 0)
        operator delete(v56[0]);
      if ((char)v59 < 0)
        operator delete(__s1[0]);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v18 = (__int128 *)((char *)v18 + 24);
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v61;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    v12 = v49;
    if (v50)
    {
      v36 = (unint64_t *)&v50->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    v11 += 16;
  }
  while (v11 != v48);
LABEL_88:
  *(_QWORD *)&v61 = &v51;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
  siri::dialogengine::ValidateVariableVersion((uint64_t)a2, (uint64_t)this + 256, &v61);
  v38 = v62;
  if ((v62 & 0x80u) != 0)
    v38 = *((_QWORD *)&v61 + 1);
  if (v38)
  {
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, &v61, (uint64_t)this);
    v4 = 0;
  }
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&__p, (const void ***)this + 9);
  v39 = __p.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)__p.__r_.__value_.__l.__data_ != &__p.__r_.__value_.__r.__words[1])
  {
    do
    {
      std::pair<std::string const,std::string>::pair[abi:ne180100](&v51, (__int128 *)(v39 + 32));
      std::string::basic_string[abi:ne180100]<0>(v56, "switch");
      siri::dialogengine::ValidateXmlAttributeVersion(a2, (const void **)v56, (uint64_t)&v51, __s1);
      if (SHIBYTE(v57) < 0)
        operator delete(v56[0]);
      v40 = v59;
      v41 = v59;
      if ((v59 & 0x80u) != 0)
        v40 = (unint64_t)__s1[1];
      if (v40)
      {
        siri::dialogengine::Context::AddValidationError((uint64_t)a2, (__int128 *)__s1, 0);
        v4 = 0;
        v41 = v59;
      }
      if ((v41 & 0x80) != 0)
        operator delete(__s1[0]);
      if (v53 < 0)
        operator delete(v52);
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v51.__r_.__value_.__l.__data_);
      v42 = *(std::string **)(v39 + 8);
      if (v42)
      {
        do
        {
          v43 = v42;
          v42 = (std::string *)v42->__r_.__value_.__r.__words[0];
        }
        while (v42);
      }
      else
      {
        do
        {
          v43 = *(std::string **)(v39 + 16);
          v44 = v43->__r_.__value_.__r.__words[0] == v39;
          v39 = (std::string::size_type)v43;
        }
        while (!v44);
      }
      v39 = (std::string::size_type)v43;
    }
    while (v43 != (std::string *)&__p.__r_.__value_.__r.__words[1]);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((_QWORD *)__p.__r_.__value_.__l.__size_);
  if ((char)v62 < 0)
    operator delete((void *)v61);
  std::__tree<std::string>::destroy((uint64_t)&v65, (char *)v65.__r_.__value_.__l.__size_);
LABEL_123:
  if ((char)v68 < 0)
    operator delete(v66);
  return v4 & 1;
}

void sub_1BFC4A970(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  uint64_t v53;

  if (*(char *)(v53 - 89) < 0)
    operator delete(*(void **)(v53 - 112));
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GroupSwitch::Execute(siri::dialogengine::GroupSwitch *this@<X0>, siri::dialogengine::Context *a2@<X1>, _QWORD *a3@<X8>)
{
  std::string *v6;
  __int128 v7;
  __int16 v8;
  std::string *v9;
  __int128 v10;
  unsigned __int8 v11;
  os_signpost_id_t v12;
  os_signpost_id_t v13;
  NSObject *v14;
  NSObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  siri::dialogengine::Node *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::string::size_type v23;
  std::string::size_type size;
  __int128 v25;
  _BOOL4 v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  int v30;
  siri::dialogengine::Node *v31;
  std::string *v32;
  __int128 v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  const char *v40;
  std::string *v41;
  __int128 v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  NSObject *v52;
  std::string v53;
  std::string v54;
  void *v55;
  char v56;
  void *v57;
  char v58;
  void *v59;
  char v60;
  void *v61;
  char v62;
  void *v63;
  char v64;
  void *v65;
  char v66;
  std::string v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  std::string v70;
  siri::dialogengine::Node *v71;
  std::__shared_weak_count *v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  siri::dialogengine::Node *v75;
  std::__shared_weak_count *v76;
  std::string v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  void *__p[2];
  void *v81[2];
  __int128 v82;
  void *v83[2];
  void *v84[2];
  __int128 v85;
  void *v86[2];
  void *v87[2];
  __int128 v88;
  void *v89[2];
  uint64_t v90;
  int v91;

  siri::dialogengine::Node::GetIdForDebug(this, a2, 0, &v54);
  v6 = std::string::insert(&v54, 0, "Executing 'Switch' group");
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v81[0] = (void *)v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::Log::Debug((siri::dialogengine *)__p);
  if (SHIBYTE(v81[0]) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
  if (((*(uint64_t (**)(siri::dialogengine::GroupSwitch *, siri::dialogengine::Context *))(*(_QWORD *)this + 48))(this, a2) & 1) == 0)
  {
    siri::dialogengine::Node::GetIdForDebug(this, a2, 0, &v54);
    v9 = std::string::insert(&v54, 0, "Condition for <switch> group failed - skipping: ");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v81[0] = (void *)v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::Debug((siri::dialogengine *)__p);
    if (SHIBYTE(v81[0]) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v54.__r_.__value_.__l.__data_);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return;
  }
  siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)__p, (siri::dialogengine::Context *)((char *)a2 + 8));
  v8 = v91;
  siri::dialogengine::RequestInfo::~RequestInfo(__p);
  if ((v8 & 0x400) != 0)
  {
    if ((v11 & 1) == 0
    {
      siri::dialogengine::GroupSwitch::Execute(siri::dialogengine::Context *)const::sSignpostLog = (uint64_t)os_log_create("com.apple.siri.DialogEngine", "GroupSwitch");
    }
    v12 = os_signpost_id_generate((os_log_t)siri::dialogengine::GroupSwitch::Execute(siri::dialogengine::Context *)const::sSignpostLog);
    if (v12 - 1 > 0xFFFFFFFFFFFFFFFDLL)
    {
      if (!siri::dialogengine::GroupSwitch::IsPhrase(this))
      {
        siri::dialogengine::GroupSwitch::ExecuteFallthrough(this, a2, (uint64_t)a3);
        return;
      }
    }
    else
    {
      v13 = v12;
      v14 = siri::dialogengine::GroupSwitch::Execute(siri::dialogengine::Context *)const::sSignpostLog;
      if (os_signpost_enabled((os_log_t)siri::dialogengine::GroupSwitch::Execute(siri::dialogengine::Context *)const::sSignpostLog))
      {
        LOWORD(__p[0]) = 0;
        _os_signpost_emit_with_name_impl(&dword_1BF794000, v14, OS_SIGNPOST_INTERVAL_BEGIN, v13, "SwitchFallthrough", "", (uint8_t *)__p, 2u);
      }
      if (!siri::dialogengine::GroupSwitch::IsPhrase(this))
      {
        siri::dialogengine::GroupSwitch::ExecuteFallthrough(this, a2, (uint64_t)a3);
        v52 = siri::dialogengine::GroupSwitch::Execute(siri::dialogengine::Context *)const::sSignpostLog;
        if (os_signpost_enabled((os_log_t)siri::dialogengine::GroupSwitch::Execute(siri::dialogengine::Context *)const::sSignpostLog))
        {
          LOWORD(__p[0]) = 0;
          _os_signpost_emit_with_name_impl(&dword_1BF794000, v52, OS_SIGNPOST_INTERVAL_END, v13, "SwitchFallthrough", "", (uint8_t *)__p, 2u);
        }
        return;
      }
      v15 = siri::dialogengine::GroupSwitch::Execute(siri::dialogengine::Context *)const::sSignpostLog;
      if (os_signpost_enabled((os_log_t)siri::dialogengine::GroupSwitch::Execute(siri::dialogengine::Context *)const::sSignpostLog))
      {
        LOWORD(__p[0]) = 0;
        _os_signpost_emit_with_name_impl(&dword_1BF794000, v15, OS_SIGNPOST_INTERVAL_END, v13, "SwitchFallthrough", "", (uint8_t *)__p, 2u);
      }
    }
  }
  if (*((char *)this + 279) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)__p, *((const std::string::value_type **)this + 32), *((_QWORD *)this + 33));
  }
  else
  {
    *(_OWORD *)__p = *((_OWORD *)this + 16);
    v81[0] = *((void **)this + 34);
  }
  std::string::basic_string[abi:ne180100]<0>(&v54, "");
  std::string::basic_string[abi:ne180100]<0>(&v77, "");
  siri::dialogengine::ResolveValue((uint64_t)a2, (uint64_t)__p, 1, (uint64_t)&v54, (uint64_t)&v77, &v78);
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v77.__r_.__value_.__l.__data_);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
  if (SHIBYTE(v81[0]) < 0)
    operator delete(__p[0]);
  if (v78)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v78 + 48))(__p);
  }
  else
  {
    v90 = 0;
    v88 = 0u;
    *(_OWORD *)v89 = 0u;
    *(_OWORD *)v86 = 0u;
    *(_OWORD *)v87 = 0u;
    *(_OWORD *)v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    *(_OWORD *)v83 = 0u;
    *(_OWORD *)__p = 0u;
    *(_OWORD *)v81 = 0u;
  }
  v75 = 0;
  v76 = 0;
  v73 = 0;
  v74 = 0;
  v17 = *((_QWORD *)this + 26);
  v18 = *((_QWORD *)this + 27);
  if (v17 == v18)
  {
LABEL_115:
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"  No match found for <switch> group", v16, *(_OWORD *)&v53.__r_.__value_.__l.__data_, v53.__r_.__value_.__r.__words[2]);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    goto LABEL_116;
  }
  do
  {
    v20 = *(siri::dialogengine::Node **)v17;
    v19 = *(std::__shared_weak_count **)(v17 + 8);
    v71 = *(siri::dialogengine::Node **)v17;
    v72 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v22 = __ldxr(p_shared_owners);
      while (__stxr(v22 + 1, p_shared_owners));
    }
    if (!v20)
    {
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"  Programming error: NULL node in <switch> group", v16);
LABEL_81:
      v30 = 3;
      if (!v19)
        goto LABEL_101;
LABEL_97:
      v37 = (unint64_t *)&v19->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
      goto LABEL_101;
    }
    if (!(*(unsigned int (**)(siri::dialogengine::Node *, siri::dialogengine::Context *))(*(_QWORD *)v20 + 48))(v20, a2))goto LABEL_81;
    siri::dialogengine::GetCases((siri::dialogengine *)&v77, v20);
    size = v77.__r_.__value_.__l.__size_;
    v23 = v77.__r_.__value_.__r.__words[0];
    if (v77.__r_.__value_.__r.__words[0] == v77.__r_.__value_.__l.__size_)
    {
      std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100](&v75, (uint64_t)v20, (uint64_t)v19);
      v30 = 3;
    }
    else
    {
      while (1)
      {
        if (*(char *)(v23 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v70, *(const std::string::value_type **)v23, *(_QWORD *)(v23 + 8));
        }
        else
        {
          v25 = *(_OWORD *)v23;
          v70.__r_.__value_.__r.__words[2] = *(_QWORD *)(v23 + 16);
          *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v25;
        }
        std::string::basic_string[abi:ne180100]<0>(&v54, "");
        std::string::basic_string[abi:ne180100]<0>(&v67, "");
        siri::dialogengine::ResolveValue((uint64_t)a2, (uint64_t)&v70, 1, (uint64_t)&v54, (uint64_t)&v67, &v68);
        if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v67.__r_.__value_.__l.__data_);
        if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v54.__r_.__value_.__l.__data_);
        if (v68)
        {
          (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v68 + 48))(&v54);
          if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v67, v54.__r_.__value_.__l.__data_, v54.__r_.__value_.__l.__size_);
          else
            v67 = v54;
          if (SHIBYTE(v81[0]) < 0)
          {
            std::string::__init_copy_ctor_external(&v53, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
          }
          else
          {
            *(_OWORD *)&v53.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
            v53.__r_.__value_.__r.__words[2] = (std::string::size_type)v81[0];
          }
          v26 = siri::dialogengine::StringsEqual((uint64_t)&v67, (uint64_t)&v53);
          if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v53.__r_.__value_.__l.__data_);
          if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v67.__r_.__value_.__l.__data_);
          if (v66 < 0)
            operator delete(v65);
          if (v64 < 0)
            operator delete(v63);
          if (v62 < 0)
            operator delete(v61);
          if (v60 < 0)
            operator delete(v59);
          if (v58 < 0)
            operator delete(v57);
          if (v56 < 0)
            operator delete(v55);
          if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v54.__r_.__value_.__l.__data_);
          if (v26)
            break;
        }
        v27 = v69;
        if (v69)
        {
          v28 = (unint64_t *)&v69->__shared_owners_;
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v70.__r_.__value_.__l.__data_);
        v23 += 24;
        if (v23 == size)
          goto LABEL_95;
      }
      v31 = v71;
      siri::dialogengine::Node::GetIdForDebug(v71, a2, 0, &v67);
      v32 = std::string::insert(&v67, 0, "  Match found for <switch> group - returning: ");
      v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v54.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Log::Debug((siri::dialogengine *)&v54);
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v54.__r_.__value_.__l.__data_);
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v67.__r_.__value_.__l.__data_);
      std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100](&v73, (uint64_t)v31, (uint64_t)v72);
      v34 = v69;
      if (v69)
      {
        v35 = (unint64_t *)&v69->__shared_owners_;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v70.__r_.__value_.__l.__data_);
LABEL_95:
      v19 = v72;
      v30 = 2 * (v73 != 0);
    }
    v54.__r_.__value_.__r.__words[0] = (std::string::size_type)&v77;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v54);
    if (v19)
      goto LABEL_97;
LABEL_101:
    if (v30 != 3 && v30)
      break;
    v17 += 16;
  }
  while (v17 != v18);
  v39 = v73;
  if (!v73)
  {
    if (!v75)
      goto LABEL_115;
    siri::dialogengine::Node::GetIdForDebug(v75, a2, 0, &v77);
    v41 = std::string::insert(&v77, 0, "  No matching case found for <switch> group - returning default: ");
    v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
    v54.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v42;
    v41->__r_.__value_.__l.__size_ = 0;
    v41->__r_.__value_.__r.__words[2] = 0;
    v41->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::Debug((siri::dialogengine *)&v54);
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v54.__r_.__value_.__l.__data_);
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v77.__r_.__value_.__l.__data_);
    std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100](&v73, (uint64_t)v75, (uint64_t)v76);
    v39 = v73;
    if (!v73)
      goto LABEL_115;
  }
  (*(void (**)(uint64_t, siri::dialogengine::Context *))(*(_QWORD *)v39 + 40))(v39, a2);
  if (*a3 == a3[1])
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"  Match for <switch> group returned an empty result", v40);
LABEL_116:
  v43 = v74;
  if (v74)
  {
    v44 = (unint64_t *)&v74->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = v76;
  if (v76)
  {
    v47 = (unint64_t *)&v76->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  if (SHIBYTE(v90) < 0)
    operator delete(v89[0]);
  if (SHIBYTE(v88) < 0)
    operator delete(v87[1]);
  if (SHIBYTE(v87[0]) < 0)
    operator delete(v86[0]);
  if (SHIBYTE(v85) < 0)
    operator delete(v84[1]);
  if (SHIBYTE(v84[0]) < 0)
    operator delete(v83[0]);
  if (SHIBYTE(v82) < 0)
    operator delete(v81[1]);
  if (SHIBYTE(v81[0]) < 0)
    operator delete(__p[0]);
  v49 = v79;
  if (v79)
  {
    v50 = (unint64_t *)&v79->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
}

void sub_1BFC4B494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,char a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,char a59,uint64_t a60,void *a61)
{
  if (a18 < 0)
    operator delete(__p);
  if (a58 < 0)
    operator delete(a53);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a49);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a51);
  siri::dialogengine::SpeakableString::~SpeakableString(&a61);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a59);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'siri::dialogengine::GroupSwitch::~GroupSwitch(siri::dialogengine::GroupSwitch *this)
{
  siri::dialogengine::Group *v1;

  *((_QWORD *)this - 8) = off_1E7939488;
  v1 = (siri::dialogengine::GroupSwitch *)((char *)this - 64);
  *(_QWORD *)this = &unk_1E79394E0;
  if (*((char *)this + 215) < 0)
    operator delete(*((void **)this + 24));
  siri::dialogengine::Group::~Group(v1);
}

{
  siri::dialogengine::Group *v1;

  *((_QWORD *)this - 8) = off_1E7939488;
  v1 = (siri::dialogengine::GroupSwitch *)((char *)this - 64);
  *(_QWORD *)this = &unk_1E79394E0;
  if (*((char *)this + 215) < 0)
    operator delete(*((void **)this + 24));
  siri::dialogengine::Group::~Group(v1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t `non-virtual thunk to'siri::dialogengine::GroupSwitch::Validate(siri::dialogengine::GroupSwitch *this, siri::dialogengine::Context *a2)
{
  return siri::dialogengine::GroupSwitch::Validate((siri::dialogengine::GroupSwitch *)((char *)this - 64), a2);
}

BOOL siri::dialogengine::GroupSwitch::IsPhrase(siri::dialogengine::GroupSwitch *this)
{
  _QWORD *v1;
  void *v2;
  _BOOL8 result;

  v1 = (_QWORD *)*((_QWORD *)this + 25);
  if (!v1)
    return 0;
  while (1)
  {
    result = v2 != 0;
    if (v2)
      break;
    v1 = (_QWORD *)v1[25];
    if (!v1)
      return 0;
  }
  return result;
}

void siri::dialogengine::GroupSwitch::ExecuteFallthrough(siri::dialogengine::GroupSwitch *this@<X0>, siri::dialogengine::Context *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t i;
  std::__shared_weak_count *v7;
  siri::dialogengine::Node *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::string *v11;
  __int128 v12;
  unint64_t *v13;
  unint64_t v14;
  std::string v15;
  void *__p[2];
  std::string::size_type v17;
  uint64_t *v18;
  uint64_t *v19;
  siri::dialogengine::Node *v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v3 = *((_QWORD *)this + 26);
  for (i = *((_QWORD *)this + 27); v3 != i; v3 += 16)
  {
    v8 = *(siri::dialogengine::Node **)v3;
    v7 = *(std::__shared_weak_count **)(v3 + 8);
    v20 = *(siri::dialogengine::Node **)v3;
    v21 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    if (v8)
    {
      if ((*(unsigned int (**)(siri::dialogengine::Node *, siri::dialogengine::Context *))(*(_QWORD *)v8 + 48))(v8, a2))
      {
        (*(void (**)(uint64_t **__return_ptr, siri::dialogengine::Node *, siri::dialogengine::Context *))(*(_QWORD *)v8 + 40))(&v18, v8, a2);
        if (v18 == v19)
        {
          siri::dialogengine::Node::GetIdForDebug(v8, a2, 0, &v15);
          v11 = std::string::insert(&v15, 0, "  Child of <switch> returned an empty result - skipping: ");
          v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
          v17 = v11->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v12;
          v11->__r_.__value_.__l.__size_ = 0;
          v11->__r_.__value_.__r.__words[2] = 0;
          v11->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Log::Debug((siri::dialogengine *)__p);
          if (SHIBYTE(v17) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v15.__r_.__value_.__l.__data_);
        }
        else
        {
          std::vector<std::shared_ptr<siri::dialogengine::Node>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<siri::dialogengine::Node>*>,std::__wrap_iter<std::shared_ptr<siri::dialogengine::Node>*>>((char *)a3, *(_QWORD *)(a3 + 8), v18, v19, ((char *)v19 - (char *)v18) >> 4);
        }
        __p[0] = &v18;
        std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        if (!v7)
          continue;
LABEL_17:
        v13 = (unint64_t *)&v7->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        continue;
      }
    }
    else
    {
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"  Programming error: NULL node in <switch> group", (const char *)a2);
    }
    if (v7)
      goto LABEL_17;
  }
}

void sub_1BFC4B938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  __p = &a22;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  _Unwind_Resume(a1);
}

void siri::dialogengine::GetCases(siri::dialogengine *this, siri::dialogengine::Node *a2)
{
  std::string::size_type size;
  char v4;
  std::string __p;

  if (*((char *)a2 + 167) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 18), *((_QWORD *)a2 + 19));
  else
    __p = *(std::string *)((_BYTE *)a2 + 6);
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  v4 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size)
  {
    siri::dialogengine::ParseStringList((uint64_t *)&__p, 0, (uint64_t *)this);
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
      return;
    goto LABEL_8;
  }
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  if (v4 < 0)
LABEL_8:
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BFC4BA44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double siri::dialogengine::GroupSwitch::GroupSwitch(siri::dialogengine::GroupSwitch *this)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 9) = (char *)this + 80;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_DWORD *)this + 48) = 1065353216;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_QWORD *)this = off_1E7939488;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = &unk_1E79394E0;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 34) = 0;
  return result;
}

{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 9) = (char *)this + 80;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_DWORD *)this + 48) = 1065353216;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_QWORD *)this = off_1E7939488;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = &unk_1E79394E0;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 34) = 0;
  return result;
}

std::string *siri::dialogengine::GroupSwitch::SetValue(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 256), a2);
}

void siri::dialogengine::GroupSwitch::GetValue(siri::dialogengine::GroupSwitch *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 279) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 32), *((_QWORD *)this + 33));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 16);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 34);
  }
}

siri::dialogengine::VariableString *siri::dialogengine::DialogArray::gender(siri::dialogengine::DialogArray *this, siri::dialogengine::Context *lpsrc, const siri::dialogengine::Variable *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  void *first;
  std::__split_buffer<std::string>::pointer v14;
  std::vector<std::string>::pointer end;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  std::string *v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  std::__shared_weak_count *size;
  unint64_t *v25;
  unint64_t v26;
  siri::dialogengine::VariableString *v27;
  siri::dialogengine *v29;
  std::__split_buffer<std::string> v30;
  char v31;
  void *v32;
  char v33;
  void *v34;
  char v35;
  void *v36;
  char v37;
  void *v38;
  char v39;
  void *__p;
  char v41;
  std::string v42;
  std::string v43;
  std::vector<std::string> v44;

  if (!lpsrc
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Received a variable that's not an array", (const char *)lpsrc, a3);
    v27 = (siri::dialogengine::VariableString *)operator new();
    siri::dialogengine::VariableString::VariableString(v27);
    return v27;
  }
  v5 = v4;
  v29 = this;
  v6 = 0;
  memset(&v44, 0, sizeof(v44));
  while (1)
  {
    v7 = v5[9];
    if (v6 >= (v5[10] - v7) >> 4)
      break;
    v8 = *(_OWORD *)(v7 + 16 * v6);
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v8;
    if (*((_QWORD *)&v8 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = v8;
    if (!(_QWORD)v8
    {
      if (*(char *)(v11 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v30, *(const std::string::value_type **)(v11 + 32), *(_QWORD *)(v11 + 40));
      }
      else
      {
        *(_OWORD *)&v30.__first_ = *(_OWORD *)(v11 + 32);
        v30.__end_ = *(std::__split_buffer<std::string>::pointer *)(v11 + 48);
      }
      if (SHIBYTE(v30.__end_) >= 0)
        first = &v30;
      else
        first = v30.__first_;
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Received an array item that is not a VariableString (type: %s)", (const char *)lpsrc, first, v29);
      if ((SHIBYTE(v30.__end_) & 0x80000000) == 0)
        goto LABEL_35;
      v14 = v30.__first_;
      goto LABEL_34;
    }
    if (v12[95] < 0)
      std::string::__init_copy_ctor_external(&v43, *((const std::string::value_type **)v12 + 9), *((_QWORD *)v12 + 10));
    else
      v43 = *(std::string *)(v12 + 3);
    end = v44.__end_;
    if (v44.__end_ < v44.__end_cap_.__value_)
    {
      v16 = *(_OWORD *)&v43.__r_.__value_.__l.__data_;
      v44.__end_->__r_.__value_.__r.__words[2] = v43.__r_.__value_.__r.__words[2];
      *(_OWORD *)&end->__r_.__value_.__l.__data_ = v16;
      v44.__end_ = end + 1;
      goto LABEL_35;
    }
    v17 = 0xAAAAAAAAAAAAAAABLL * (((char *)v44.__end_ - (char *)v44.__begin_) >> 3);
    v18 = v17 + 1;
    if (v17 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    if (0x5555555555555556 * (((char *)v44.__end_cap_.__value_ - (char *)v44.__begin_) >> 3) > v18)
      v18 = 0x5555555555555556 * (((char *)v44.__end_cap_.__value_ - (char *)v44.__begin_) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v44.__end_cap_.__value_ - (char *)v44.__begin_) >> 3) >= 0x555555555555555)
      v19 = 0xAAAAAAAAAAAAAAALL;
    else
      v19 = v18;
    v30.__end_cap_.__value_ = (std::allocator<std::string> *)&v44.__end_cap_;
    if (v19)
      v20 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v44.__end_cap_, v19);
    else
      v20 = 0;
    v21 = v20 + v17;
    v30.__first_ = v20;
    v30.__begin_ = v21;
    v30.__end_cap_.__value_ = &v20[v19];
    v22 = *(_OWORD *)&v43.__r_.__value_.__l.__data_;
    v21->__r_.__value_.__r.__words[2] = v43.__r_.__value_.__r.__words[2];
    *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
    memset(&v43, 0, sizeof(v43));
    v30.__end_ = v21 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(&v44, &v30);
    v23 = v44.__end_;
    std::__split_buffer<std::string>::~__split_buffer(&v30);
    v44.__end_ = v23;
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    {
      v14 = (std::__split_buffer<std::string>::pointer)v43.__r_.__value_.__r.__words[0];
LABEL_34:
      operator delete(v14);
    }
LABEL_35:
    size = (std::__shared_weak_count *)v42.__r_.__value_.__l.__size_;
    if (v42.__r_.__value_.__l.__size_)
    {
      v25 = (unint64_t *)(v42.__r_.__value_.__l.__size_ + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    ++v6;
  }
  std::string::basic_string[abi:ne180100]<0>(&v30, "gender");
  siri::dialogengine::GetFeatureValue(v29, (siri::dialogengine::Context *)&v44, (uint64_t)&v30, (uint64_t)&v43);
  if (SHIBYTE(v30.__end_) < 0)
    operator delete(v30.__first_);
  v27 = (siri::dialogengine::VariableString *)operator new();
  std::string::basic_string[abi:ne180100]<0>(&v42, "");
  siri::dialogengine::SpeakableString::SpeakableString((uint64_t)&v30, (uint64_t)&v43);
  siri::dialogengine::VariableString::VariableString((std::string *)v27, &v42, (const siri::dialogengine::SpeakableString *)&v30);
  if (v41 < 0)
    operator delete(__p);
  if (v39 < 0)
    operator delete(v38);
  if (v37 < 0)
    operator delete(v36);
  if (v35 < 0)
    operator delete(v34);
  if (v33 < 0)
    operator delete(v32);
  if (v31 < 0)
    operator delete(v30.__end_cap_.__value_);
  if (SHIBYTE(v30.__end_) < 0)
    operator delete(v30.__first_);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  v30.__first_ = (std::__split_buffer<std::string>::pointer)&v44;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
  return v27;
}

void sub_1BFC4BF5C(_Unwind_Exception *a1, uint64_t a2, std::__split_buffer<std::string> *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;

  siri::dialogengine::SpeakableString::~SpeakableString((void **)&a11);
  if (*(char *)(v12 - 153) < 0)
    operator delete(*(void **)(v12 - 176));
  MEMORY[0x1C3B8D890](v11, 0x10B3C40D3060B95);
  if (*(char *)(v12 - 121) < 0)
    operator delete(*(void **)(v12 - 144));
  *(_QWORD *)(v12 - 144) = v12 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v12 - 144));
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogArray::length(siri::dialogengine::DialogArray *this, siri::dialogengine::Context *lpsrc, const siri::dialogengine::Variable *a3)
{
  _QWORD *v3;
  double v4;
  uint64_t v5;
  std::string __p;

  if (lpsrc
  {
    v4 = (double)(unint64_t)((uint64_t)(v3[10] - v3[9]) >> 4);
  }
  else
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"DialogArray::length received a variable that's not an array", (const char *)lpsrc, a3);
    v4 = 0.0;
  }
  v5 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::dialogengine::VariableNumber::VariableNumber(v5, &__p, v4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v5;
}

void sub_1BFC4C124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8D890](v15, 0x10B3C4030AE2ACELL);
  _Unwind_Resume(a1);
}

void InitDefaultsscc_info_Player_Player_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Player.pb.cc", a4);
  SnippetUI::Player::Player((SnippetUI::Player *)&SnippetUI::_Player_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Player_default_instance_, v4);
  qword_1ED1D3B78 = (uint64_t)&SnippetUI::_PlayerButton_default_instance_;
  unk_1ED1D3B80 = &SnippetUI::_CustomCanvas_default_instance_;
  qword_1ED1D3B88 = (uint64_t)&SnippetUI::_StandardPlayerButton_default_instance_;
}

SnippetUI::Player *SnippetUI::Player::Player(SnippetUI::Player *this)
{
  *(_QWORD *)this = &off_1E79395D8;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (atomic_load(scc_info_Player_Player_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Player_Player_2eproto);
  *((_QWORD *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  *((_DWORD *)this + 15) = 0;
  return this;
}

void sub_1BFC4C248(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  google::protobuf::RepeatedField<int>::~RepeatedField(v1 + 16);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

void SnippetUI::Player::~Player(SnippetUI::Player *this)
{
  SnippetUI::Player::~Player(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E79395D8;
  v2 = *((_QWORD *)this + 5);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  if (*((_DWORD *)this + 15))
    SnippetUI::Player::clear_control((uint64_t)this);
  google::protobuf::RepeatedField<int>::~RepeatedField((char *)this + 16);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::Player *SnippetUI::Player::New(SnippetUI::Player *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Player>(0);
}

SnippetUI::Player *SnippetUI::Player::New(SnippetUI::Player *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Player>(a2);
}

void SnippetUI::Player::Clear(SnippetUI::Player *this)
{
  uint64_t v2;
  google::protobuf::internal::InternalMetadataWithArena *v3;
  char v4;

  *((_DWORD *)this + 4) = 0;
  v2 = *((_QWORD *)this + 5);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  SnippetUI::Player::clear_control((uint64_t)this);
  v4 = *((_BYTE *)this + 8);
  v3 = (SnippetUI::Player *)((char *)this + 8);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v3);
}

uint64_t SnippetUI::Player::IsInitialized(SnippetUI::Player *this)
{
  return 1;
}

char *SnippetUI::Player::ByteSizeLong(SnippetUI::Player *this)
{
  _DWORD *v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const google::protobuf::UnknownFieldSet *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char *v18;

  v2 = (_DWORD *)((char *)this + 16);
  v3 = *((_DWORD *)this + 4);
  if (!v3)
  {
    v5 = 0;
LABEL_12:
    v10 = 0;
    v8 = 0;
    goto LABEL_13;
  }
  v4 = 0;
  v5 = 0;
  do
  {
    v6 = *(_DWORD *)google::protobuf::RepeatedField<int>::Get(v2, v4);
    if (v6 < 0)
      v7 = 10;
    else
      v7 = (9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6;
    v5 += v7;
    ++v4;
  }
  while (v3 != v4);
  if (!v5)
    goto LABEL_12;
  v8 = 11;
  v9 = ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((int)v5 >= 0)
    v8 = v9;
  v10 = v5;
LABEL_13:
  *((_DWORD *)this + 8) = v10;
  v11 = *((_QWORD *)this + 5);
  v12 = *(unsigned __int8 *)(v11 + 23);
  if (*(char *)(v11 + 23) < 0)
    v13 = *(_QWORD *)(v11 + 8);
  else
    v13 = *(unsigned __int8 *)(v11 + 23);
  v14 = (const google::protobuf::UnknownFieldSet *)(v8 + v5);
  if (v13)
  {
    v15 = *(_QWORD *)(v11 + 8);
    if ((v12 & 0x80u) == 0)
      v16 = v12;
    else
      v16 = v15;
    v14 = (const google::protobuf::UnknownFieldSet *)((char *)v14 + v16 + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6) + 1);
  }
  v17 = *((_DWORD *)this + 15);
  switch(v17)
  {
    case 5:
      v18 = SnippetUI::StandardPlayerButton::ByteSizeLong(*((SnippetUI::StandardPlayerButton **)this + 6));
      break;
    case 2:
      v18 = SnippetUI::CustomCanvas::ByteSizeLong(*((SnippetUI::CustomCanvas **)this + 6));
      break;
    case 1:
      v18 = SnippetUI::PlayerButton::ByteSizeLong(*((SnippetUI::PlayerButton **)this + 6));
      break;
    default:
      goto LABEL_28;
  }
  v14 = (const google::protobuf::UnknownFieldSet *)&v18[(_QWORD)v14
                                                      + 1
                                                      + ((9 * (__clz(v18 | 1) ^ 0x1F) + 73) >> 6)];
LABEL_28:
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::Player *)((char *)this + 8), v14, (_DWORD *)this + 14);
  *((_DWORD *)this + 14) = (_DWORD)v14;
  return (char *)v14;
}

uint64_t SnippetUI::Player::GetCachedSize(SnippetUI::Player *this)
{
  return *((unsigned int *)this + 14);
}

google::protobuf::internal *SnippetUI::Player::_InternalParse(SnippetUI::Player *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  google::protobuf::internal *v6;
  uint64_t *v7;
  google::protobuf::internal::ParseContext *v8;
  google::protobuf::internal::ParseContext *v9;
  google::protobuf::internal *TagFallback;
  char *v11;
  SnippetUI::PlayerButton *v12;
  SnippetUI::CustomCanvas *v13;
  char *v14;
  std::string *v15;
  SnippetUI::StandardPlayerButton *v16;
  unsigned int v17;
  char *v18;
  char *SizeFallback;
  unsigned int v20;
  int v21;
  int v22;
  BOOL v23;
  int v24;
  google::protobuf::internal *v25;
  int v26;
  int v27;
  BOOL v28;
  google::protobuf::internal *v30;

  v30 = a2;
  v5 = (std::string **)((char *)this + 40);
  v6 = (SnippetUI::Player *)((char *)this + 16);
  v7 = (uint64_t *)((char *)this + 8);
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v30, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v30;
    TagFallback = (google::protobuf::internal *)((char *)v30 + 1);
    v11 = (char *)*(unsigned __int8 *)v30;
    if ((*(char *)v30 & 0x80000000) == 0)
      goto LABEL_6;
    v11 = (char *)(v11 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v30 + 2);
LABEL_6:
      v30 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v30, v11);
    v30 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    switch(v11 >> 3)
    {
      case 1u:
        if (v11 != 10)
          goto LABEL_41;
        if (*((_DWORD *)this + 15) == 1)
        {
          v12 = (SnippetUI::PlayerButton *)*((_QWORD *)this + 6);
        }
        else
        {
          SnippetUI::Player::clear_control((uint64_t)this);
          *((_DWORD *)this + 15) = 1;
          v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::PlayerButton>(0);
          *((_QWORD *)this + 6) = v12;
          TagFallback = v30;
        }
        v14 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::PlayerButton>(a3, v12, TagFallback);
        goto LABEL_46;
      case 2u:
        if (v11 != 18)
          goto LABEL_41;
        if (*((_DWORD *)this + 15) == 2)
        {
          v13 = (SnippetUI::CustomCanvas *)*((_QWORD *)this + 6);
        }
        else
        {
          SnippetUI::Player::clear_control((uint64_t)this);
          *((_DWORD *)this + 15) = 2;
          v13 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::CustomCanvas>(0);
          *((_QWORD *)this + 6) = v13;
          TagFallback = v30;
        }
        v14 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::CustomCanvas>(a3, v13, TagFallback);
        goto LABEL_46;
      case 3u:
        if (v11 == 26)
        {
          v14 = google::protobuf::internal::PackedInt32Parser(v6, TagFallback, a3, v8);
          goto LABEL_46;
        }
        if (v11 == 24)
        {
          v27 = google::protobuf::internal::ReadVarint(&v30, (const char **)v11);
          if (!v30)
            return 0;
          SnippetUI::ColorElement::_internal_add_idioms((uint64_t)this, v27);
          continue;
        }
LABEL_41:
        if ((_DWORD)v11)
          v28 = (v11 & 7) == 4;
        else
          v28 = 1;
        if (v28)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v11 - 1;
          return TagFallback;
        }
        v14 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v11, v7, TagFallback, a3, v9);
LABEL_46:
        v30 = (google::protobuf::internal *)v14;
        if (v14)
          continue;
        return 0;
      case 4u:
        if (v11 != 34)
          goto LABEL_41;
        v15 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v15 = *v5;
          TagFallback = v30;
        }
        v14 = google::protobuf::internal::InlineGreedyStringParserUTF8(v15, (std::string::value_type *)TagFallback, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.Player.identifier");
        goto LABEL_46;
      case 5u:
        if (v11 != 42)
          goto LABEL_41;
        if (*((_DWORD *)this + 15) == 5)
        {
          v16 = (SnippetUI::StandardPlayerButton *)*((_QWORD *)this + 6);
        }
        else
        {
          SnippetUI::Player::clear_control((uint64_t)this);
          *((_DWORD *)this + 15) = 5;
          v16 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::StandardPlayerButton>(0);
          *((_QWORD *)this + 6) = v16;
          TagFallback = v30;
        }
        v17 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          SizeFallback = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!SizeFallback)
            return 0;
          v18 = SizeFallback;
          v17 = v20;
        }
        else
        {
          v18 = (char *)TagFallback + 1;
        }
        v21 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v18, v17);
        v22 = *((_DWORD *)a3 + 22);
        v23 = __OFSUB__(v22--, 1);
        *((_DWORD *)a3 + 22) = v22;
        if (v22 < 0 != v23)
          return 0;
        v24 = v21;
        v25 = SnippetUI::StandardPlayerButton::_InternalParse(v16, (google::protobuf::internal *)v18, a3);
        if (!v25)
          return 0;
        ++*((_DWORD *)a3 + 22);
        if (*((_DWORD *)a3 + 20))
          return 0;
        v26 = *((_DWORD *)a3 + 7) + v24;
        *((_DWORD *)a3 + 7) = v26;
        *(_QWORD *)a3 = *((_QWORD *)a3 + 1) + (v26 & (v26 >> 31));
        v30 = v25;
        continue;
      default:
        goto LABEL_41;
    }
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::Player::InternalSerializeWithCachedSizesToArray(SnippetUI::Player *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  int v7;
  SnippetUI::PlayerButton *v8;
  unsigned int v9;
  char *v10;
  unsigned int v11;
  _BYTE *v12;
  _BYTE *v13;
  unsigned int v14;
  unsigned int v15;
  SnippetUI::CustomCanvas *v16;
  unsigned int v17;
  char *v18;
  unsigned int v19;
  _BYTE *v20;
  _BYTE *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t v25;
  std::string *v26;
  _BYTE *v27;
  int *v28;
  int *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _BYTE *v33;
  _BYTE *v34;
  unint64_t v35;
  unint64_t v36;
  google::protobuf::internal *v37;
  const char *v38;
  SnippetUI::StandardPlayerButton *v39;
  unsigned int v40;
  google::protobuf::UnknownFieldSet *v41;
  unsigned int v42;
  _BYTE *v43;
  _BYTE *v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v49;
  char v50;
  std::string v51[2];

  v5 = (char *)a2;
  v7 = *((_DWORD *)this + 15);
  if (v7 == 1)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v8 = (SnippetUI::PlayerButton *)*((_QWORD *)this + 6);
    *v5 = 10;
    v9 = *((_DWORD *)v8 + 8);
    if (v9 > 0x7F)
    {
      v5[1] = v9 | 0x80;
      v11 = v9 >> 7;
      if (v9 >> 14)
      {
        v12 = v5 + 2;
        do
        {
          v13 = v12;
          *v12++ = v11 | 0x80;
          v14 = v11 >> 7;
          v15 = v11 >> 14;
          v11 >>= 7;
        }
        while (v15);
        v10 = v13 + 2;
        *v12 = v14;
      }
      else
      {
        v5[2] = v11;
        v10 = v5 + 3;
      }
    }
    else
    {
      v5[1] = v9;
      v10 = v5 + 2;
    }
    v5 = (char *)SnippetUI::PlayerButton::InternalSerializeWithCachedSizesToArray(v8, v10, a3, a4);
    v7 = *((_DWORD *)this + 15);
  }
  if (v7 == 2)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v16 = (SnippetUI::CustomCanvas *)*((_QWORD *)this + 6);
    *v5 = 18;
    v17 = *((_DWORD *)v16 + 13);
    if (v17 > 0x7F)
    {
      v5[1] = v17 | 0x80;
      v19 = v17 >> 7;
      if (v17 >> 14)
      {
        v20 = v5 + 2;
        do
        {
          v21 = v20;
          *v20++ = v19 | 0x80;
          v22 = v19 >> 7;
          v23 = v19 >> 14;
          v19 >>= 7;
        }
        while (v23);
        v18 = v21 + 2;
        *v20 = v22;
      }
      else
      {
        v5[2] = v19;
        v18 = v5 + 3;
      }
    }
    else
    {
      v5[1] = v17;
      v18 = v5 + 2;
    }
    v5 = (char *)SnippetUI::CustomCanvas::InternalSerializeWithCachedSizesToArray(v16, v18, a3, a4);
  }
  v24 = *((_DWORD *)this + 8);
  if ((int)v24 >= 1)
  {
    v25 = *(_QWORD *)a3;
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v25 = *(_QWORD *)a3;
    }
    if (v25 <= (unint64_t)v5)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v51, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/io/coded_stream.h", 856);
      v26 = google::protobuf::internal::LogMessage::operator<<(v51, "CHECK failed: ptr < end_: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v50, (const char **)&v26->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v51[0].__r_.__value_.__l.__data_);
    }
    *v5 = 26;
    v27 = v5 + 1;
    if (v24 >= 0x80)
    {
      do
      {
        *v27++ = v24 | 0x80;
        v49 = v24 >> 14;
        v24 >>= 7;
      }
      while (v49);
      v5 = v27 - 1;
    }
    v5 += 2;
    *v27 = v24;
    v28 = (int *)*((_QWORD *)this + 3);
    v29 = &v28[*((int *)this + 4)];
    do
    {
      if ((unint64_t)v5 >= *(_QWORD *)a3)
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v31 = *v28++;
      v30 = v31;
      if (v31 > 0x7F)
      {
        *v5 = v30 | 0x80;
        v32 = v30 >> 7;
        if (v30 >> 14)
        {
          v33 = v5 + 1;
          do
          {
            v34 = v33;
            *v33++ = v32 | 0x80;
            v35 = v32 >> 7;
            v36 = v32 >> 14;
            v32 >>= 7;
          }
          while (v36);
          v5 = v34 + 2;
          *v33 = v35;
        }
        else
        {
          v5[1] = v32;
          v5 += 2;
        }
      }
      else
      {
        *v5++ = v30;
      }
    }
    while (v28 < v29);
  }
  v37 = (google::protobuf::internal *)*((_QWORD *)this + 5);
  if (*((char *)v37 + 23) < 0)
  {
    v38 = (const char *)*((_QWORD *)v37 + 1);
    if (!v38)
      goto LABEL_46;
    v37 = *(google::protobuf::internal **)v37;
    goto LABEL_45;
  }
  v38 = (const char *)*((unsigned __int8 *)v37 + 23);
  if (*((_BYTE *)v37 + 23))
  {
LABEL_45:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v37, v38, 1, (google::protobuf::internal *)"SnippetUI.Player.identifier");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 4, *((_QWORD *)this + 5), v5);
  }
LABEL_46:
  if (*((_DWORD *)this + 15) == 5)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v39 = (SnippetUI::StandardPlayerButton *)*((_QWORD *)this + 6);
    *v5 = 42;
    v40 = *((_DWORD *)v39 + 12);
    if (v40 > 0x7F)
    {
      v5[1] = v40 | 0x80;
      v42 = v40 >> 7;
      if (v40 >> 14)
      {
        v43 = v5 + 2;
        do
        {
          v44 = v43;
          *v43++ = v42 | 0x80;
          v45 = v42 >> 7;
          v46 = v42 >> 14;
          v42 >>= 7;
        }
        while (v46);
        v41 = (google::protobuf::UnknownFieldSet *)(v44 + 2);
        *v43 = v45;
      }
      else
      {
        v5[2] = v42;
        v41 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v40;
      v41 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::StandardPlayerButton::InternalSerializeWithCachedSizesToArray(v39, v41, a3, a4);
  }
  v47 = *((_QWORD *)this + 1);
  if ((v47 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v47 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  return (const google::protobuf::UnknownFieldSet *)v5;
}

void sub_1BFC4CBDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::Player::CopyFrom(SnippetUI::Player *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::Player::Clear(this);
    SnippetUI::Player::MergeFrom(this, a2);
  }
}

void SnippetUI::Player::MergeFrom(SnippetUI::Player *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::Player *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Player.pb.cc", 482);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::Player::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BFC4CCD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Player::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 56) = a2;
  return this;
}

uint64_t SnippetUI::Player::GetMetadata(SnippetUI::Player *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_Player_2eproto);
  return file_level_metadata_Player_2eproto;
}

void *SnippetUI::Player::default_instance(SnippetUI::Player *this)
{
  if (atomic_load(scc_info_Player_Player_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Player_Player_2eproto);
  return &SnippetUI::_Player_default_instance_;
}

void SnippetUI::Player::MergeFrom(SnippetUI::Player *this, const SnippetUI::Player *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  SnippetUI::PlayerButton *v9;
  SnippetUI::StandardPlayerButton *v10;
  SnippetUI::CustomCanvas *v11;
  const SnippetUI::PlayerButton *v12;
  const SnippetUI::StandardPlayerButton *v13;
  const SnippetUI::CustomCanvas *v14;
  char v15;
  std::string v16[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Player.pb.cc", 497);
    v4 = google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v15, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Player *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  google::protobuf::RepeatedField<int>::MergeFrom((int *)this + 4, (int *)a2 + 4);
  v6 = *((_QWORD *)a2 + 5);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 5);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 5, v6);
    else
      std::string::operator=(*((std::string **)this + 5), (const std::string *)v6);
  }
LABEL_13:
  v8 = *((_DWORD *)a2 + 15);
  if (v8 == 5)
  {
    if (*((_DWORD *)this + 15) == 5)
    {
      v10 = (SnippetUI::StandardPlayerButton *)*((_QWORD *)this + 6);
    }
    else
    {
      SnippetUI::Player::clear_control((uint64_t)this);
      *((_DWORD *)this + 15) = 5;
      v10 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::StandardPlayerButton>(0);
      *((_QWORD *)this + 6) = v10;
      if (*((_DWORD *)a2 + 15) != 5)
      {
        v13 = (const SnippetUI::StandardPlayerButton *)&SnippetUI::_StandardPlayerButton_default_instance_;
        goto LABEL_31;
      }
    }
    v13 = (const SnippetUI::StandardPlayerButton *)*((_QWORD *)a2 + 6);
LABEL_31:
    SnippetUI::StandardPlayerButton::MergeFrom(v10, v13);
    return;
  }
  if (v8 != 2)
  {
    if (v8 != 1)
      return;
    if (*((_DWORD *)this + 15) == 1)
    {
      v9 = (SnippetUI::PlayerButton *)*((_QWORD *)this + 6);
    }
    else
    {
      SnippetUI::Player::clear_control((uint64_t)this);
      *((_DWORD *)this + 15) = 1;
      v9 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::PlayerButton>(0);
      *((_QWORD *)this + 6) = v9;
      if (*((_DWORD *)a2 + 15) != 1)
      {
        v12 = (const SnippetUI::PlayerButton *)&SnippetUI::_PlayerButton_default_instance_;
        goto LABEL_29;
      }
    }
    v12 = (const SnippetUI::PlayerButton *)*((_QWORD *)a2 + 6);
LABEL_29:
    SnippetUI::PlayerButton::MergeFrom(v9, v12);
    return;
  }
  if (*((_DWORD *)this + 15) == 2)
  {
    v11 = (SnippetUI::CustomCanvas *)*((_QWORD *)this + 6);
  }
  else
  {
    SnippetUI::Player::clear_control((uint64_t)this);
    *((_DWORD *)this + 15) = 2;
    v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::CustomCanvas>(0);
    *((_QWORD *)this + 6) = v11;
    if (*((_DWORD *)a2 + 15) != 2)
    {
      v14 = (const SnippetUI::CustomCanvas *)&SnippetUI::_CustomCanvas_default_instance_;
      goto LABEL_33;
    }
  }
  v14 = (const SnippetUI::CustomCanvas *)*((_QWORD *)a2 + 6);
LABEL_33:
  SnippetUI::CustomCanvas::MergeFrom(v11, v14);
}

void sub_1BFC4CF44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Player::clear_control(uint64_t this)
{
  uint64_t v1;
  int v2;

  v1 = this;
  v2 = *(_DWORD *)(this + 60);
  if (v2 == 5 || v2 == 2 || v2 == 1)
  {
    this = *(_QWORD *)(this + 48);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_DWORD *)(v1 + 60) = 0;
  return this;
}

SnippetUI::Player *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Player>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::Player *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::Player *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x40uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Player>);
    SnippetUI::Player::Player(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::Player *)operator new();
    SnippetUI::Player::Player(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFC4D030(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C409813F0CCLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Player>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void SnippetUI::Player::InitAsDefaultInstance(SnippetUI::Player *this)
{
  qword_1ED1D3B78 = (uint64_t)&SnippetUI::_PlayerButton_default_instance_;
  unk_1ED1D3B80 = &SnippetUI::_CustomCanvas_default_instance_;
  qword_1ED1D3B88 = (uint64_t)&SnippetUI::_StandardPlayerButton_default_instance_;
}

uint64_t SnippetUI::Player::_Internal::player_button(SnippetUI::Player::_Internal *this, const SnippetUI::Player *a2)
{
  return *((_QWORD *)this + 6);
}

uint64_t SnippetUI::Player::_Internal::custom_canvas(SnippetUI::Player::_Internal *this, const SnippetUI::Player *a2)
{
  return *((_QWORD *)this + 6);
}

uint64_t SnippetUI::Player::_Internal::standard_player_button(SnippetUI::Player::_Internal *this, const SnippetUI::Player *a2)
{
  return *((_QWORD *)this + 6);
}

uint64_t SnippetUI::Player::set_allocated_player_button(SnippetUI::Player *this, SnippetUI::PlayerButton *a2)
{
  uint64_t result;

  result = SnippetUI::Player::clear_control((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 15) = 1;
    *((_QWORD *)this + 6) = a2;
  }
  return result;
}

uint64_t SnippetUI::Player::clear_player_button(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 60) == 1)
  {
    v1 = this;
    this = *(_QWORD *)(this + 48);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 60) = 0;
  }
  return this;
}

uint64_t SnippetUI::Player::set_allocated_custom_canvas(SnippetUI::Player *this, SnippetUI::CustomCanvas *a2)
{
  uint64_t result;

  result = SnippetUI::Player::clear_control((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 15) = 2;
    *((_QWORD *)this + 6) = a2;
  }
  return result;
}

uint64_t SnippetUI::Player::clear_custom_canvas(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 60) == 2)
  {
    v1 = this;
    this = *(_QWORD *)(this + 48);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 60) = 0;
  }
  return this;
}

uint64_t SnippetUI::Player::set_allocated_standard_player_button(SnippetUI::Player *this, SnippetUI::StandardPlayerButton *a2)
{
  uint64_t result;

  result = SnippetUI::Player::clear_control((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 15) = 5;
    *((_QWORD *)this + 6) = a2;
  }
  return result;
}

uint64_t SnippetUI::Player::clear_standard_player_button(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 60) == 5)
  {
    v1 = this;
    this = *(_QWORD *)(this + 48);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 60) = 0;
  }
  return this;
}

SnippetUI::Player *SnippetUI::Player::Player(SnippetUI::Player *this, const SnippetUI::Player *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  SnippetUI::PlayerButton *v10;
  const SnippetUI::PlayerButton *v11;
  SnippetUI::StandardPlayerButton *v12;
  const SnippetUI::StandardPlayerButton *v13;
  SnippetUI::CustomCanvas *v14;
  const SnippetUI::CustomCanvas *v15;

  *(_QWORD *)this = &off_1E79395D8;
  *((_QWORD *)this + 1) = 0;
  v4 = (SnippetUI::Player *)((char *)this + 8);
  google::protobuf::RepeatedField<int>::RepeatedField((uint64_t)this + 16, (int *)a2 + 4);
  *((_DWORD *)this + 14) = 0;
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom(v4, (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  v6 = *((_QWORD *)a2 + 5);
  if (*(char *)(v6 + 23) < 0)
    v7 = *(_QWORD *)(v6 + 8);
  else
    v7 = *(unsigned __int8 *)(v6 + 23);
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string && v7 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 5, v6);
  *((_DWORD *)this + 15) = 0;
  v9 = *((_DWORD *)a2 + 15);
  switch(v9)
  {
    case 5:
      SnippetUI::Player::clear_control((uint64_t)this);
      *((_DWORD *)this + 15) = 5;
      v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::StandardPlayerButton>(0);
      *((_QWORD *)this + 6) = v12;
      if (*((_DWORD *)a2 + 15) == 5)
        v13 = (const SnippetUI::StandardPlayerButton *)*((_QWORD *)a2 + 6);
      else
        v13 = (const SnippetUI::StandardPlayerButton *)&SnippetUI::_StandardPlayerButton_default_instance_;
      SnippetUI::StandardPlayerButton::MergeFrom(v12, v13);
      break;
    case 2:
      SnippetUI::Player::clear_control((uint64_t)this);
      *((_DWORD *)this + 15) = 2;
      v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::CustomCanvas>(0);
      *((_QWORD *)this + 6) = v14;
      if (*((_DWORD *)a2 + 15) == 2)
        v15 = (const SnippetUI::CustomCanvas *)*((_QWORD *)a2 + 6);
      else
        v15 = (const SnippetUI::CustomCanvas *)&SnippetUI::_CustomCanvas_default_instance_;
      SnippetUI::CustomCanvas::MergeFrom(v14, v15);
      break;
    case 1:
      SnippetUI::Player::clear_control((uint64_t)this);
      *((_DWORD *)this + 15) = 1;
      v10 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::PlayerButton>(0);
      *((_QWORD *)this + 6) = v10;
      if (*((_DWORD *)a2 + 15) == 1)
        v11 = (const SnippetUI::PlayerButton *)*((_QWORD *)a2 + 6);
      else
        v11 = (const SnippetUI::PlayerButton *)&SnippetUI::_PlayerButton_default_instance_;
      SnippetUI::PlayerButton::MergeFrom(v10, v11);
      break;
  }
  return this;
}

void sub_1BFC4D404(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Player::CopyFrom(SnippetUI::Player *this, const SnippetUI::Player *a2)
{
  if (a2 != this)
  {
    SnippetUI::Player::Clear(this);
    SnippetUI::Player::MergeFrom(this, a2);
  }
}

void SnippetUI::Player::InternalSwap(SnippetUI::Player *this, SnippetUI::Player *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  google::protobuf::UnknownFieldSet *v14;

  v4 = (SnippetUI::Player *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v14;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  google::protobuf::RepeatedField<int>::InternalSwap((uint64_t)this + 16, (uint64_t)a2 + 16);
  v7 = (uint64_t *)*((_QWORD *)this + 5);
  v8 = (uint64_t **)((char *)a2 + 40);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 5, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 5);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 5, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v13;
  LODWORD(v13) = *((_DWORD *)this + 15);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v13;
}

void InitDefaultsscc_info_HorizontalList_Standard_HorizontalList_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/HorizontalList.pb.cc", a4);
  SnippetUI::HorizontalList_Standard::HorizontalList_Standard((SnippetUI::HorizontalList_Standard *)&SnippetUI::_HorizontalList_Standard_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_HorizontalList_Standard_default_instance_, v4);
  qword_1EF584AB0 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
}

void InitDefaultsscc_info_HorizontalList_Standard_Item_HorizontalList_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/HorizontalList.pb.cc", a4);
  SnippetUI::HorizontalList_Standard_Item::HorizontalList_Standard_Item((SnippetUI::HorizontalList_Standard_Item *)&SnippetUI::_HorizontalList_Standard_Item_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_HorizontalList_Standard_Item_default_instance_, v4);
  qword_1EF584A58 = (uint64_t)&SnippetUI::_VisualProperty_default_instance_;
  unk_1EF584A60 = &SnippetUI::_TextProperty_default_instance_;
  qword_1EF584A68 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EF584A70 = &SnippetUI::_ActionProperty_default_instance_;
}

SnippetUI::HorizontalList_Standard_Item *SnippetUI::HorizontalList_Standard_Item::HorizontalList_Standard_Item(SnippetUI::HorizontalList_Standard_Item *this)
{
  *(_QWORD *)this = &off_1E7939850;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 15) = 0;
  if (atomic_load(scc_info_HorizontalList_Standard_Item_HorizontalList_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_HorizontalList_Standard_Item_HorizontalList_2eproto);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  return this;
}

void sub_1BFC4D6CC(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::HorizontalList_Standard_Item::~HorizontalList_Standard_Item(SnippetUI::HorizontalList_Standard_Item *this)
{
  SnippetUI::HorizontalList_Standard_Item::~HorizontalList_Standard_Item(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E7939850;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::HorizontalList_Standard_Item *)&SnippetUI::_HorizontalList_Standard_Item_default_instance_)
  {
    v4 = *((_QWORD *)this + 3);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = *((_QWORD *)this + 4);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = *((_QWORD *)this + 5);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = *((_QWORD *)this + 6);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::HorizontalList_Standard_Item *SnippetUI::HorizontalList_Standard_Item::New(SnippetUI::HorizontalList_Standard_Item *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::HorizontalList_Standard_Item>(0);
}

SnippetUI::HorizontalList_Standard_Item *SnippetUI::HorizontalList_Standard_Item::New(SnippetUI::HorizontalList_Standard_Item *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::HorizontalList_Standard_Item>(a2);
}

void SnippetUI::HorizontalList_Standard_Item::Clear(SnippetUI::HorizontalList_Standard_Item *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;

  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 3);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 3) = 0;
  v4 = *((_QWORD *)this + 4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 4) = 0;
  v5 = *((_QWORD *)this + 5);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *((_QWORD *)this + 5) = 0;
  v6 = *((_QWORD *)this + 6);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v8 = *((_BYTE *)this + 8);
  v7 = (char *)this + 8;
  *((_QWORD *)v7 + 5) = 0;
  *((_DWORD *)v7 + 12) = 0;
  if ((v8 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear((google::protobuf::internal::InternalMetadataWithArena *)v7);
}

uint64_t SnippetUI::HorizontalList_Standard_Item::IsInitialized(SnippetUI::HorizontalList_Standard_Item *this)
{
  return 1;
}

char *SnippetUI::HorizontalList_Standard_Item::ByteSizeLong(SnippetUI::HorizontalList_Standard_Item *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const google::protobuf::UnknownFieldSet *v5;
  SnippetUI::VisualProperty *v6;
  char *v7;
  SnippetUI::TextProperty *v8;
  char *v9;
  SnippetUI::TextProperty *v10;
  char *v11;
  SnippetUI::ActionProperty *v12;
  char *v13;
  int v14;
  uint64_t v15;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  if (this != (SnippetUI::HorizontalList_Standard_Item *)&SnippetUI::_HorizontalList_Standard_Item_default_instance_)
  {
    v6 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 3);
    if (v6)
    {
      v7 = SnippetUI::VisualProperty::ByteSizeLong(v6);
      v5 = (const google::protobuf::UnknownFieldSet *)&v7[(_QWORD)v5
                                                        + 1
                                                        + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v8 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
    if (v8)
    {
      v9 = SnippetUI::TextProperty::ByteSizeLong(v8);
      v5 = (const google::protobuf::UnknownFieldSet *)&v9[(_QWORD)v5
                                                        + 1
                                                        + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v10 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
    if (v10)
    {
      v11 = SnippetUI::TextProperty::ByteSizeLong(v10);
      v5 = (const google::protobuf::UnknownFieldSet *)&v11[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v12 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 6);
    if (v12)
    {
      v13 = SnippetUI::ActionProperty::ByteSizeLong(v12);
      v5 = (const google::protobuf::UnknownFieldSet *)&v13[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  v14 = *((_DWORD *)this + 14);
  if (v14)
  {
    if (v14 < 0)
      v15 = 11;
    else
      v15 = ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1;
    v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v15);
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::HorizontalList_Standard_Item *)((char *)this + 8), v5, (_DWORD *)this + 15);
  *((_DWORD *)this + 15) = (_DWORD)v5;
  return (char *)v5;
}

uint64_t SnippetUI::HorizontalList_Standard_Item::GetCachedSize(SnippetUI::HorizontalList_Standard_Item *this)
{
  return *((unsigned int *)this + 15);
}

google::protobuf::internal *SnippetUI::HorizontalList_Standard_Item::_InternalParse(SnippetUI::HorizontalList_Standard_Item *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  uint64_t *v6;
  google::protobuf::internal::ParseContext *v7;
  google::protobuf::internal *TagFallback;
  char *v9;
  google::protobuf::internal *v10;
  unint64_t v11;
  int v12;
  SnippetUI::VisualProperty *v13;
  char *v14;
  SnippetUI::TextProperty *v15;
  SnippetUI::ActionProperty *v16;
  std::string *v17;
  BOOL v18;
  google::protobuf::internal *v20;

  v20 = a2;
  v5 = (std::string **)((char *)this + 16);
  v6 = (uint64_t *)((char *)this + 8);
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v20, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v20;
    TagFallback = (google::protobuf::internal *)((char *)v20 + 1);
    v9 = (char *)*(unsigned __int8 *)v20;
    if ((*(char *)v20 & 0x80000000) == 0)
      goto LABEL_6;
    v9 = (char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v20 + 2);
LABEL_6:
      v20 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v20, v9);
    v20 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    switch(v9 >> 3)
    {
      case 1u:
        if (v9 != 8)
          goto LABEL_34;
        v10 = (google::protobuf::internal *)((char *)TagFallback + 1);
        LODWORD(v11) = *(unsigned __int8 *)TagFallback;
        if ((*(char *)TagFallback & 0x80000000) == 0)
          goto LABEL_12;
        v12 = *(char *)v10;
        v11 = v11 + (v12 << 7) - 128;
        if ((v12 & 0x80000000) == 0)
        {
          v10 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_12:
          v20 = v10;
LABEL_13:
          *((_DWORD *)this + 14) = v11;
          continue;
        }
        v20 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v11);
        if (v20)
          goto LABEL_13;
LABEL_44:
        TagFallback = 0;
        break;
      case 2u:
        if (v9 != 18)
          goto LABEL_34;
        v13 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 3);
        if (!v13)
        {
          v13 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
          *((_QWORD *)this + 3) = v13;
          TagFallback = v20;
        }
        v14 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::VisualProperty>(a3, v13, TagFallback);
        goto LABEL_39;
      case 3u:
        if (v9 != 26)
          goto LABEL_34;
        v15 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
        if (v15)
          goto LABEL_25;
        v15 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 4) = v15;
        goto LABEL_24;
      case 4u:
        if (v9 != 34)
          goto LABEL_34;
        v15 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
        if (v15)
          goto LABEL_25;
        v15 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 5) = v15;
LABEL_24:
        TagFallback = v20;
LABEL_25:
        v14 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v15, TagFallback);
        goto LABEL_39;
      case 5u:
        if (v9 != 42)
          goto LABEL_34;
        v16 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 6);
        if (!v16)
        {
          v16 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((_QWORD *)this + 6) = v16;
          TagFallback = v20;
        }
        v14 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v16, TagFallback);
        goto LABEL_39;
      case 6u:
        if (v9 != 50)
          goto LABEL_34;
        v17 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v17 = *v5;
          TagFallback = v20;
        }
        v14 = google::protobuf::internal::InlineGreedyStringParserUTF8(v17, (std::string::value_type *)TagFallback, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.HorizontalList_Standard.Item.component_name");
        goto LABEL_39;
      default:
LABEL_34:
        if ((_DWORD)v9)
          v18 = (v9 & 7) == 4;
        else
          v18 = 1;
        if (v18)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v9 - 1;
          return TagFallback;
        }
        v14 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v9, v6, TagFallback, a3, v7);
LABEL_39:
        v20 = (google::protobuf::internal *)v14;
        if (!v14)
          goto LABEL_44;
        continue;
    }
    return TagFallback;
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::HorizontalList_Standard_Item::InternalSerializeWithCachedSizesToArray(SnippetUI::HorizontalList_Standard_Item *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  unsigned int v7;
  unint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  unint64_t v11;
  unint64_t v12;
  SnippetUI::VisualProperty *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  google::protobuf::UnknownFieldSet *v17;
  _BYTE *v18;
  _BYTE *v19;
  unsigned int v20;
  unsigned int v21;
  SnippetUI::TextProperty *v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  google::protobuf::UnknownFieldSet *v26;
  _BYTE *v27;
  _BYTE *v28;
  unsigned int v29;
  unsigned int v30;
  SnippetUI::TextProperty *v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  google::protobuf::UnknownFieldSet *v35;
  _BYTE *v36;
  _BYTE *v37;
  unsigned int v38;
  unsigned int v39;
  SnippetUI::ActionProperty *v40;
  unsigned int v41;
  google::protobuf::UnknownFieldSet *v42;
  unsigned int v43;
  _BYTE *v44;
  _BYTE *v45;
  unsigned int v46;
  unsigned int v47;
  google::protobuf::internal *v48;
  const char *v49;
  uint64_t v50;

  v5 = (char *)a2;
  v7 = *((_DWORD *)this + 14);
  if (v7)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v7 = *((_DWORD *)this + 14);
    }
    *v5 = 8;
    if (v7 > 0x7F)
    {
      v5[1] = v7 | 0x80;
      v8 = (unint64_t)(int)v7 >> 7;
      if (v7 >> 14)
      {
        v9 = v5 + 2;
        do
        {
          v10 = v9;
          *v9++ = v8 | 0x80;
          v11 = v8 >> 7;
          v12 = v8 >> 14;
          v8 >>= 7;
        }
        while (v12);
        v5 = v10 + 2;
        *v9 = v11;
      }
      else
      {
        v5[2] = v8;
        v5 += 3;
      }
    }
    else
    {
      v5[1] = v7;
      v5 += 2;
    }
  }
  if (this != (SnippetUI::HorizontalList_Standard_Item *)&SnippetUI::_HorizontalList_Standard_Item_default_instance_)
  {
    v13 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 3);
    if (!v13)
      goto LABEL_24;
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v13 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 3);
    }
    *v5 = 18;
    v14 = *((_DWORD *)v13 + 15);
    if (v14 > 0x7F)
    {
      v5[1] = v14 | 0x80;
      v16 = v14 >> 7;
      if (v14 >> 14)
      {
        v18 = v5 + 2;
        do
        {
          v19 = v18;
          *v18++ = v16 | 0x80;
          v20 = v16 >> 7;
          v21 = v16 >> 14;
          v16 >>= 7;
        }
        while (v21);
        v17 = (google::protobuf::UnknownFieldSet *)(v19 + 2);
        *v18 = v20;
        goto LABEL_23;
      }
      v5[2] = v16;
      v15 = 3;
    }
    else
    {
      v5[1] = v14;
      v15 = 2;
    }
    v17 = (google::protobuf::UnknownFieldSet *)&v5[v15];
LABEL_23:
    v5 = (char *)SnippetUI::VisualProperty::InternalSerializeWithCachedSizesToArray(v13, v17, a3, a4);
LABEL_24:
    v22 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
    if (!v22)
      goto LABEL_36;
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v22 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
    }
    *v5 = 26;
    v23 = *((_DWORD *)v22 + 15);
    if (v23 > 0x7F)
    {
      v5[1] = v23 | 0x80;
      v25 = v23 >> 7;
      if (v23 >> 14)
      {
        v27 = v5 + 2;
        do
        {
          v28 = v27;
          *v27++ = v25 | 0x80;
          v29 = v25 >> 7;
          v30 = v25 >> 14;
          v25 >>= 7;
        }
        while (v30);
        v26 = (google::protobuf::UnknownFieldSet *)(v28 + 2);
        *v27 = v29;
        goto LABEL_35;
      }
      v5[2] = v25;
      v24 = 3;
    }
    else
    {
      v5[1] = v23;
      v24 = 2;
    }
    v26 = (google::protobuf::UnknownFieldSet *)&v5[v24];
LABEL_35:
    v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v22, v26, a3, a4);
LABEL_36:
    v31 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
    if (!v31)
      goto LABEL_48;
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v31 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
    }
    *v5 = 34;
    v32 = *((_DWORD *)v31 + 15);
    if (v32 > 0x7F)
    {
      v5[1] = v32 | 0x80;
      v34 = v32 >> 7;
      if (v32 >> 14)
      {
        v36 = v5 + 2;
        do
        {
          v37 = v36;
          *v36++ = v34 | 0x80;
          v38 = v34 >> 7;
          v39 = v34 >> 14;
          v34 >>= 7;
        }
        while (v39);
        v35 = (google::protobuf::UnknownFieldSet *)(v37 + 2);
        *v36 = v38;
        goto LABEL_47;
      }
      v5[2] = v34;
      v33 = 3;
    }
    else
    {
      v5[1] = v32;
      v33 = 2;
    }
    v35 = (google::protobuf::UnknownFieldSet *)&v5[v33];
LABEL_47:
    v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v31, v35, a3, a4);
LABEL_48:
    v40 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 6);
    if (v40)
    {
      if ((unint64_t)v5 >= *(_QWORD *)a3)
      {
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
        v40 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 6);
      }
      *v5 = 42;
      v41 = *((_DWORD *)v40 + 12);
      if (v41 > 0x7F)
      {
        v5[1] = v41 | 0x80;
        v43 = v41 >> 7;
        if (v41 >> 14)
        {
          v44 = v5 + 2;
          do
          {
            v45 = v44;
            *v44++ = v43 | 0x80;
            v46 = v43 >> 7;
            v47 = v43 >> 14;
            v43 >>= 7;
          }
          while (v47);
          v42 = (google::protobuf::UnknownFieldSet *)(v45 + 2);
          *v44 = v46;
        }
        else
        {
          v5[2] = v43;
          v42 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
        }
      }
      else
      {
        v5[1] = v41;
        v42 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
      }
      v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v40, v42, a3, a4);
    }
  }
  v48 = (google::protobuf::internal *)*((_QWORD *)this + 2);
  if (*((char *)v48 + 23) < 0)
  {
    v49 = (const char *)*((_QWORD *)v48 + 1);
    if (!v49)
      goto LABEL_65;
    v48 = *(google::protobuf::internal **)v48;
    goto LABEL_64;
  }
  v49 = (const char *)*((unsigned __int8 *)v48 + 23);
  if (*((_BYTE *)v48 + 23))
  {
LABEL_64:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v48, v49, 1, (google::protobuf::internal *)"SnippetUI.HorizontalList_Standard.Item.component_name");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 6, *((_QWORD *)this + 2), v5);
  }
LABEL_65:
  v50 = *((_QWORD *)this + 1);
  if ((v50 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v50 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)v5;
}

void SnippetUI::HorizontalList_Standard_Item::CopyFrom(SnippetUI::HorizontalList_Standard_Item *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::HorizontalList_Standard_Item::Clear(this);
    SnippetUI::HorizontalList_Standard_Item::MergeFrom(this, a2);
  }
}

void SnippetUI::HorizontalList_Standard_Item::MergeFrom(SnippetUI::HorizontalList_Standard_Item *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::HorizontalList_Standard_Item *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/HorizontalList.pb.cc", 508);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::HorizontalList_Standard_Item::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BFC4E0C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::HorizontalList_Standard_Item::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 60) = a2;
  return this;
}

uint64_t SnippetUI::HorizontalList_Standard_Item::GetMetadata(SnippetUI::HorizontalList_Standard_Item *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_HorizontalList_2eproto);
  return file_level_metadata_HorizontalList_2eproto;
}

void *SnippetUI::HorizontalList_Standard_Item::default_instance(SnippetUI::HorizontalList_Standard_Item *this)
{
  if (atomic_load(scc_info_HorizontalList_Standard_Item_HorizontalList_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_HorizontalList_Standard_Item_HorizontalList_2eproto);
  return &SnippetUI::_HorizontalList_Standard_Item_default_instance_;
}

void SnippetUI::HorizontalList_Standard_Item::MergeFrom(SnippetUI::HorizontalList_Standard_Item *this, const SnippetUI::HorizontalList_Standard_Item *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  int **v8;
  int **v9;
  int **v10;
  int **v11;
  int **v12;
  int **v13;
  int **v14;
  int **v15;
  int **v16;
  int **v17;
  int **v18;
  int **v19;
  int v20;
  char v21;
  std::string v22[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v22, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/HorizontalList.pb.cc", 523);
    v4 = google::protobuf::internal::LogMessage::operator<<(v22, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v21, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v22[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::HorizontalList_Standard_Item *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_QWORD *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v6);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  if (a2 != (const SnippetUI::HorizontalList_Standard_Item *)&SnippetUI::_HorizontalList_Standard_Item_default_instance_)
  {
    v8 = (int **)*((_QWORD *)a2 + 3);
    if (v8)
    {
      v9 = (int **)*((_QWORD *)this + 3);
      if (!v9)
      {
        v9 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((_QWORD *)this + 3) = v9;
        v8 = (int **)*((_QWORD *)a2 + 3);
      }
      if (v8)
        v10 = v8;
      else
        v10 = (int **)&SnippetUI::_VisualProperty_default_instance_;
      SnippetUI::VisualProperty::MergeFrom(v9, v10);
    }
    v11 = (int **)*((_QWORD *)a2 + 4);
    if (v11)
    {
      v12 = (int **)*((_QWORD *)this + 4);
      if (!v12)
      {
        v12 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 4) = v12;
        v11 = (int **)*((_QWORD *)a2 + 4);
      }
      if (v11)
        v13 = v11;
      else
        v13 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v12, v13);
    }
    v14 = (int **)*((_QWORD *)a2 + 5);
    if (v14)
    {
      v15 = (int **)*((_QWORD *)this + 5);
      if (!v15)
      {
        v15 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 5) = v15;
        v14 = (int **)*((_QWORD *)a2 + 5);
      }
      if (v14)
        v16 = v14;
      else
        v16 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v15, v16);
    }
    v17 = (int **)*((_QWORD *)a2 + 6);
    if (v17)
    {
      v18 = (int **)*((_QWORD *)this + 6);
      if (!v18)
      {
        v18 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((_QWORD *)this + 6) = v18;
        v17 = (int **)*((_QWORD *)a2 + 6);
      }
      if (v17)
        v19 = v17;
      else
        v19 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      SnippetUI::ActionProperty::MergeFrom(v18, v19);
    }
  }
  v20 = *((_DWORD *)a2 + 14);
  if (v20)
    *((_DWORD *)this + 14) = v20;
}

void sub_1BFC4E2EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::HorizontalList_Standard_Item *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::HorizontalList_Standard_Item>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::HorizontalList_Standard_Item *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::HorizontalList_Standard_Item *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x40uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::HorizontalList_Standard_Item>);
    SnippetUI::HorizontalList_Standard_Item::HorizontalList_Standard_Item(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::HorizontalList_Standard_Item *)operator new();
    SnippetUI::HorizontalList_Standard_Item::HorizontalList_Standard_Item(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFC4E388(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C40AE67B8E4);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::HorizontalList_Standard_Item>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

SnippetUI::HorizontalList_Standard *SnippetUI::HorizontalList_Standard::HorizontalList_Standard(SnippetUI::HorizontalList_Standard *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)this = &off_1E7939910;
  *((_DWORD *)this + 14) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (atomic_load(scc_info_HorizontalList_Standard_HorizontalList_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_HorizontalList_Standard_HorizontalList_2eproto);
  *((_QWORD *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 6) = 0;
  return this;
}

void sub_1BFC4E500(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v1 + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

void SnippetUI::HorizontalList_Standard::~HorizontalList_Standard(SnippetUI::HorizontalList_Standard *this)
{
  SnippetUI::HorizontalList_Standard::~HorizontalList_Standard(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;

  *(_QWORD *)this = &off_1E7939910;
  v2 = *((_QWORD *)this + 5);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::HorizontalList_Standard *)&SnippetUI::_HorizontalList_Standard_default_instance_)
  {
    v4 = *((_QWORD *)this + 6);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((SnippetUI::HorizontalList_Standard *)((char *)this + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::HorizontalList_Standard *SnippetUI::HorizontalList_Standard::New(SnippetUI::HorizontalList_Standard *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::HorizontalList_Standard>(0);
}

SnippetUI::HorizontalList_Standard *SnippetUI::HorizontalList_Standard::New(SnippetUI::HorizontalList_Standard *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::HorizontalList_Standard>(a2);
}

void SnippetUI::HorizontalList_Standard::Clear(SnippetUI::HorizontalList_Standard *this)
{
  uint64_t v2;
  SnippetUI::HorizontalList_Standard_Item **v3;
  SnippetUI::HorizontalList_Standard_Item *v4;
  std::string *v5;
  uint64_t v6;
  uint64_t v7;
  google::protobuf::internal::InternalMetadataWithArena *v8;
  char v9;
  char v10;
  std::string v11[2];

  v2 = *((unsigned int *)this + 6);
  if ((v2 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v5 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v2)
  {
    v3 = (SnippetUI::HorizontalList_Standard_Item **)(*((_QWORD *)this + 4) + 8);
    do
    {
      v4 = *v3++;
      SnippetUI::HorizontalList_Standard_Item::Clear(v4);
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 6) = 0;
  }
  v6 = *((_QWORD *)this + 5);
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v6 + 23) < 0)
    {
      **(_BYTE **)v6 = 0;
      *(_QWORD *)(v6 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v6 = 0;
      *(_BYTE *)(v6 + 23) = 0;
    }
  }
  v7 = *((_QWORD *)this + 6);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v9 = *((_BYTE *)this + 8);
  v8 = (SnippetUI::HorizontalList_Standard *)((char *)this + 8);
  *((_QWORD *)v8 + 5) = 0;
  if ((v9 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v8);
}

void sub_1BFC4E654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::HorizontalList_Standard::IsInitialized(SnippetUI::HorizontalList_Standard *this)
{
  return 1;
}

char *SnippetUI::HorizontalList_Standard::ByteSizeLong(SnippetUI::HorizontalList_Standard *this)
{
  const google::protobuf::UnknownFieldSet *v2;
  uint64_t v3;
  SnippetUI::HorizontalList_Standard_Item **v4;
  uint64_t v5;
  SnippetUI::HorizontalList_Standard_Item *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  SnippetUI::TextProperty *v11;
  char *v12;

  v2 = (const google::protobuf::UnknownFieldSet *)*((int *)this + 6);
  v3 = *((_QWORD *)this + 4);
  if (v3)
    v4 = (SnippetUI::HorizontalList_Standard_Item **)(v3 + 8);
  else
    v4 = 0;
  if ((_DWORD)v2)
  {
    v5 = 8 * (_QWORD)v2;
    do
    {
      v6 = *v4++;
      v7 = SnippetUI::HorizontalList_Standard_Item::ByteSizeLong(v6);
      v2 = (const google::protobuf::UnknownFieldSet *)((char *)v2
                                                     + (_QWORD)v7
                                                     + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6));
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    v2 = 0;
  }
  v8 = *((_QWORD *)this + 5);
  v9 = *(unsigned __int8 *)(v8 + 23);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(_QWORD *)(v8 + 8))
      goto LABEL_14;
  }
  else if (!*(_BYTE *)(v8 + 23))
  {
    goto LABEL_14;
  }
  v10 = *(_QWORD *)(v8 + 8);
  if ((v9 & 0x80u) == 0)
    v10 = v9;
  v2 = (const google::protobuf::UnknownFieldSet *)((char *)v2 + v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_14:
  if (this != (SnippetUI::HorizontalList_Standard *)&SnippetUI::_HorizontalList_Standard_default_instance_)
  {
    v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 6);
    if (v11)
    {
      v12 = SnippetUI::TextProperty::ByteSizeLong(v11);
      v2 = (const google::protobuf::UnknownFieldSet *)&v12[(_QWORD)v2
                                                         + 1
                                                         + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::HorizontalList_Standard *)((char *)this + 8), v2, (_DWORD *)this + 14);
  *((_DWORD *)this + 14) = (_DWORD)v2;
  return (char *)v2;
}

uint64_t SnippetUI::HorizontalList_Standard::GetCachedSize(SnippetUI::HorizontalList_Standard *this)
{
  return *((unsigned int *)this + 14);
}

google::protobuf::internal *SnippetUI::HorizontalList_Standard::_InternalParse(SnippetUI::HorizontalList_Standard *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  unsigned int *v6;
  uint64_t *v7;
  google::protobuf::internal::ParseContext *v8;
  google::protobuf::internal *TagFallback;
  char *v10;
  unsigned int v11;
  BOOL v13;
  char *v14;
  std::string *v15;
  SnippetUI::TextProperty *v16;
  google::protobuf::internal *v17;
  google::protobuf::internal *v18;
  int *v19;
  uint64_t v20;
  int v21;
  SnippetUI::HorizontalList_Standard_Item *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  char *v26;
  char *SizeFallback;
  unsigned int v28;
  int v29;
  int v30;
  BOOL v31;
  int v32;
  int v33;
  unint64_t v34;
  google::protobuf::internal *v36;

  v36 = a2;
  v5 = (std::string **)((char *)this + 40);
  v6 = (unsigned int *)((char *)this + 16);
  v7 = (uint64_t *)((char *)this + 8);
  do
  {
LABEL_2:
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v36, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v36;
    TagFallback = (google::protobuf::internal *)((char *)v36 + 1);
    v10 = (char *)*(unsigned __int8 *)v36;
    if ((*(char *)v36 & 0x80000000) == 0)
      goto LABEL_6;
    v10 = (char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v36 + 2);
LABEL_6:
      v36 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v36, v10);
    v36 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    v11 = v10 >> 3;
    if (v10 >> 3 == 3)
    {
      if (v10 == 26)
      {
        v15 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v15 = *v5;
          TagFallback = v36;
        }
        v14 = google::protobuf::internal::InlineGreedyStringParserUTF8(v15, (std::string::value_type *)TagFallback, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.HorizontalList_Standard.component_name");
        goto LABEL_26;
      }
      goto LABEL_13;
    }
    if (v11 == 2)
    {
      if (v10 == 18)
      {
        v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 6);
        if (!v16)
        {
          v16 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
          *((_QWORD *)this + 6) = v16;
          TagFallback = v36;
        }
        v14 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v16, TagFallback);
        goto LABEL_26;
      }
      goto LABEL_13;
    }
    if (v11 == 1 && v10 == 10)
    {
      v17 = (google::protobuf::internal *)((char *)TagFallback - 1);
      while (1)
      {
        v18 = (google::protobuf::internal *)((char *)v17 + 1);
        v36 = v18;
        v19 = (int *)*((_QWORD *)this + 4);
        if (!v19)
          break;
        v20 = *((int *)this + 6);
        v21 = *v19;
        if ((int)v20 < *v19)
        {
          *((_DWORD *)this + 6) = v20 + 1;
          v22 = *(SnippetUI::HorizontalList_Standard_Item **)&v19[2 * v20 + 2];
          goto LABEL_36;
        }
        if (v21 == *((_DWORD *)this + 7))
          goto LABEL_34;
LABEL_35:
        *v19 = v21 + 1;
        v22 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::HorizontalList_Standard_Item>(*((google::protobuf::internal::ArenaImpl **)this + 2));
        v23 = *((_QWORD *)this + 4);
        v24 = *((int *)this + 6);
        *((_DWORD *)this + 6) = v24 + 1;
        *(_QWORD *)(v23 + 8 * v24 + 8) = v22;
        v18 = v36;
LABEL_36:
        v25 = *(unsigned __int8 *)v18;
        if (*(char *)v18 < 0)
        {
          SizeFallback = google::protobuf::internal::ReadSizeFallback(v18, (const char *)*(unsigned __int8 *)v18);
          if (!SizeFallback)
            return 0;
          v26 = SizeFallback;
          v25 = v28;
        }
        else
        {
          v26 = (char *)v18 + 1;
        }
        v29 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v26, v25);
        v30 = *((_DWORD *)a3 + 22);
        v31 = __OFSUB__(v30--, 1);
        *((_DWORD *)a3 + 22) = v30;
        if (v30 < 0 != v31)
          return 0;
        v32 = v29;
        v17 = SnippetUI::HorizontalList_Standard_Item::_InternalParse(v22, (google::protobuf::internal *)v26, a3);
        if (!v17)
          return 0;
        ++*((_DWORD *)a3 + 22);
        if (*((_DWORD *)a3 + 20))
          return 0;
        v33 = *((_DWORD *)a3 + 7) + v32;
        *((_DWORD *)a3 + 7) = v33;
        v34 = *((_QWORD *)a3 + 1) + (v33 & (v33 >> 31));
        *(_QWORD *)a3 = v34;
        v36 = v17;
        if (v34 <= (unint64_t)v17 || *(_BYTE *)v17 != 10)
          goto LABEL_2;
      }
      v21 = *((_DWORD *)this + 7);
LABEL_34:
      google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v21 + 1);
      v19 = (int *)*((_QWORD *)this + 4);
      v21 = *v19;
      goto LABEL_35;
    }
LABEL_13:
    if ((_DWORD)v10)
      v13 = (v10 & 7) == 4;
    else
      v13 = 1;
    if (v13)
    {
      *((_DWORD *)a3 + 20) = (_DWORD)v10 - 1;
      return TagFallback;
    }
    v14 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v7, TagFallback, a3, v8);
LABEL_26:
    v36 = (google::protobuf::internal *)v14;
  }
  while (v14);
  return 0;
}

const google::protobuf::UnknownFieldSet *SnippetUI::HorizontalList_Standard::InternalSerializeWithCachedSizesToArray(SnippetUI::HorizontalList_Standard *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v7;
  int v8;
  std::string *v9;
  std::string *v10;
  SnippetUI::HorizontalList_Standard_Item *v11;
  unsigned int v12;
  google::protobuf::UnknownFieldSet *v13;
  unsigned int v14;
  _BYTE *v15;
  _BYTE *v16;
  unsigned int v17;
  unsigned int v18;
  SnippetUI::TextProperty *v19;
  unsigned int v20;
  google::protobuf::UnknownFieldSet *v21;
  unsigned int v22;
  _BYTE *v23;
  _BYTE *v24;
  unsigned int v25;
  unsigned int v26;
  google::protobuf::internal *v27;
  const char *v28;
  uint64_t v29;
  char v31;
  std::string v32[2];

  v7 = *((_DWORD *)this + 6);
  if (v7)
  {
    v8 = 0;
    while ((unint64_t)a2 < *(_QWORD *)a3)
    {
      if (v8 < 0)
        goto LABEL_5;
LABEL_6:
      if (*((_DWORD *)this + 6) <= v8)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v32, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1539);
        v10 = google::protobuf::internal::LogMessage::operator<<(v32, "CHECK failed: (index) < (current_size_): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v31, (const char **)&v10->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v32[0].__r_.__value_.__l.__data_);
      }
      v11 = *(SnippetUI::HorizontalList_Standard_Item **)(*((_QWORD *)this + 4) + 8 * v8 + 8);
      *(_BYTE *)a2 = 10;
      v12 = *((_DWORD *)v11 + 15);
      if (v12 > 0x7F)
      {
        *((_BYTE *)a2 + 1) = v12 | 0x80;
        v14 = v12 >> 7;
        if (v12 >> 14)
        {
          v15 = (char *)a2 + 2;
          do
          {
            v16 = v15;
            *v15++ = v14 | 0x80;
            v17 = v14 >> 7;
            v18 = v14 >> 14;
            v14 >>= 7;
          }
          while (v18);
          v13 = (google::protobuf::UnknownFieldSet *)(v16 + 2);
          *v15 = v17;
        }
        else
        {
          *((_BYTE *)a2 + 2) = v14;
          v13 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
        }
      }
      else
      {
        *((_BYTE *)a2 + 1) = v12;
        v13 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
      }
      a2 = SnippetUI::HorizontalList_Standard_Item::InternalSerializeWithCachedSizesToArray(v11, v13, a3, a4);
      if (++v8 == v7)
        goto LABEL_19;
    }
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_6;
LABEL_5:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v32, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v9 = google::protobuf::internal::LogMessage::operator<<(v32, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v31, (const char **)&v9->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v32[0].__r_.__value_.__l.__data_);
    goto LABEL_6;
  }
LABEL_19:
  if (this != (SnippetUI::HorizontalList_Standard *)&SnippetUI::_HorizontalList_Standard_default_instance_)
  {
    v19 = (SnippetUI::TextProperty *)*((_QWORD *)this + 6);
    if (v19)
    {
      if ((unint64_t)a2 >= *(_QWORD *)a3)
      {
        a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
        v19 = (SnippetUI::TextProperty *)*((_QWORD *)this + 6);
      }
      *(_BYTE *)a2 = 18;
      v20 = *((_DWORD *)v19 + 15);
      if (v20 > 0x7F)
      {
        *((_BYTE *)a2 + 1) = v20 | 0x80;
        v22 = v20 >> 7;
        if (v20 >> 14)
        {
          v23 = (char *)a2 + 2;
          do
          {
            v24 = v23;
            *v23++ = v22 | 0x80;
            v25 = v22 >> 7;
            v26 = v22 >> 14;
            v22 >>= 7;
          }
          while (v26);
          v21 = (google::protobuf::UnknownFieldSet *)(v24 + 2);
          *v23 = v25;
        }
        else
        {
          *((_BYTE *)a2 + 2) = v22;
          v21 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
        }
      }
      else
      {
        *((_BYTE *)a2 + 1) = v20;
        v21 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
      }
      a2 = SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v19, v21, a3, a4);
    }
  }
  v27 = (google::protobuf::internal *)*((_QWORD *)this + 5);
  if (*((char *)v27 + 23) < 0)
  {
    v28 = (const char *)*((_QWORD *)v27 + 1);
    if (!v28)
      goto LABEL_37;
    v27 = *(google::protobuf::internal **)v27;
    goto LABEL_36;
  }
  v28 = (const char *)*((unsigned __int8 *)v27 + 23);
  if (*((_BYTE *)v27 + 23))
  {
LABEL_36:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v27, v28, 1, (google::protobuf::internal *)"SnippetUI.HorizontalList_Standard.component_name");
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, *((_QWORD *)this + 5), (char *)a2);
  }
LABEL_37:
  v29 = *((_QWORD *)this + 1);
  if ((v29 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v29 & 0xFFFFFFFFFFFFFFFELL), a2, a3, a4);
  else
    return a2;
}

void sub_1BFC4ED64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::HorizontalList_Standard::CopyFrom(SnippetUI::HorizontalList_Standard *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::HorizontalList_Standard::Clear(this);
    SnippetUI::HorizontalList_Standard::MergeFrom(this, a2);
  }
}

void SnippetUI::HorizontalList_Standard::MergeFrom(SnippetUI::HorizontalList_Standard *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::HorizontalList_Standard *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/HorizontalList.pb.cc", 800);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::HorizontalList_Standard::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BFC4EE64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::HorizontalList_Standard::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 56) = a2;
  return this;
}

uint64_t SnippetUI::HorizontalList_Standard::GetMetadata(SnippetUI::HorizontalList_Standard *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_HorizontalList_2eproto);
  return qword_1EF583770;
}

void *SnippetUI::HorizontalList_Standard::default_instance(SnippetUI::HorizontalList_Standard *this)
{
  if (atomic_load(scc_info_HorizontalList_Standard_HorizontalList_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_HorizontalList_Standard_HorizontalList_2eproto);
  return &SnippetUI::_HorizontalList_Standard_default_instance_;
}

void SnippetUI::HorizontalList_Standard::MergeFrom(SnippetUI::HorizontalList_Standard *this, const SnippetUI::HorizontalList_Standard *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  int **v8;
  int **v9;
  int **v10;
  char v11;
  std::string v12[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/HorizontalList.pb.cc", 815);
    v4 = google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v11, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v12[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::HorizontalList_Standard *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::HorizontalList_Standard_Item>::TypeHandler>((int **)this + 2, (uint64_t)a2 + 16);
  v6 = *((_QWORD *)a2 + 5);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 5);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 5, v6);
    else
      std::string::operator=(*((std::string **)this + 5), (const std::string *)v6);
  }
LABEL_13:
  if (a2 != (const SnippetUI::HorizontalList_Standard *)&SnippetUI::_HorizontalList_Standard_default_instance_)
  {
    v8 = (int **)*((_QWORD *)a2 + 6);
    if (v8)
    {
      v9 = (int **)*((_QWORD *)this + 6);
      if (!v9)
      {
        v9 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 6) = v9;
        v8 = (int **)*((_QWORD *)a2 + 6);
      }
      if (v8)
        v10 = v8;
      else
        v10 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v9, v10);
    }
  }
}

void sub_1BFC4F000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::HorizontalList_Standard_Item>::TypeHandler>(int **this, uint64_t a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  SnippetUI::HorizontalList_Standard_Item **v13;
  SnippetUI::HorizontalList_Standard_Item **v14;
  SnippetUI::HorizontalList_Standard_Item *v15;
  SnippetUI::HorizontalList_Standard_Item *v16;
  SnippetUI::HorizontalList_Standard_Item *v17;
  google::protobuf::internal::ArenaImpl *v18;
  int v19;
  uint64_t v20;
  SnippetUI::HorizontalList_Standard_Item **v21;
  SnippetUI::HorizontalList_Standard_Item **v22;
  SnippetUI::HorizontalList_Standard_Item *v23;
  SnippetUI::HorizontalList_Standard_Item *v24;
  int v25;
  int *v26;
  char v27;
  std::string v28[2];

  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    v9 = *this[2];
    v10 = *((int *)this + 2);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (SnippetUI::HorizontalList_Standard_Item **)(v6 + 8);
      v14 = (SnippetUI::HorizontalList_Standard_Item **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<SnippetUI::HorizontalList_Standard_Item>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (SnippetUI::HorizontalList_Standard_Item **)((char *)v8 + v20);
      v22 = (SnippetUI::HorizontalList_Standard_Item **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::HorizontalList_Standard_Item>(v18);
        google::protobuf::internal::GenericTypeHandler<SnippetUI::HorizontalList_Standard_Item>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25)
      *v26 = v25;
  }
}

void sub_1BFC4F16C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<SnippetUI::HorizontalList_Standard_Item>::Merge(SnippetUI::HorizontalList_Standard_Item *a1, SnippetUI::HorizontalList_Standard_Item *this)
{
  SnippetUI::HorizontalList_Standard_Item::MergeFrom(this, a1);
}

SnippetUI::HorizontalList_Standard *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::HorizontalList_Standard>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::HorizontalList_Standard *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::HorizontalList_Standard *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x40uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::HorizontalList_Standard>);
    SnippetUI::HorizontalList_Standard::HorizontalList_Standard(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::HorizontalList_Standard *)operator new();
    SnippetUI::HorizontalList_Standard::HorizontalList_Standard(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFC4F218(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C404C48FE96);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::HorizontalList_Standard>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t SnippetUI::HorizontalList_Standard_Item_Style_descriptor(SnippetUI *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_HorizontalList_2eproto);
  return file_level_enum_descriptors_HorizontalList_2eproto;
}

BOOL SnippetUI::HorizontalList_Standard_Item_Style_IsValid(SnippetUI *this)
{
  return this < 3;
}

void SnippetUI::HorizontalList_Standard_Item::InitAsDefaultInstance(SnippetUI::HorizontalList_Standard_Item *this)
{
  qword_1EF584A58 = (uint64_t)&SnippetUI::_VisualProperty_default_instance_;
  unk_1EF584A60 = &SnippetUI::_TextProperty_default_instance_;
  qword_1EF584A68 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1EF584A70 = &SnippetUI::_ActionProperty_default_instance_;
}

uint64_t SnippetUI::HorizontalList_Standard_Item::_Internal::thumbnail(SnippetUI::HorizontalList_Standard_Item::_Internal *this, const SnippetUI::HorizontalList_Standard_Item *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::HorizontalList_Standard_Item::_Internal::text_1(SnippetUI::HorizontalList_Standard_Item::_Internal *this, const SnippetUI::HorizontalList_Standard_Item *a2)
{
  return *((_QWORD *)this + 4);
}

uint64_t SnippetUI::HorizontalList_Standard_Item::_Internal::text_2(SnippetUI::HorizontalList_Standard_Item::_Internal *this, const SnippetUI::HorizontalList_Standard_Item *a2)
{
  return *((_QWORD *)this + 5);
}

uint64_t SnippetUI::HorizontalList_Standard_Item::_Internal::action(SnippetUI::HorizontalList_Standard_Item::_Internal *this, const SnippetUI::HorizontalList_Standard_Item *a2)
{
  return *((_QWORD *)this + 6);
}

uint64_t SnippetUI::HorizontalList_Standard_Item::clear_thumbnail(SnippetUI::HorizontalList_Standard_Item *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 3);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 3) = 0;
  return result;
}

uint64_t SnippetUI::HorizontalList_Standard_Item::clear_text_1(SnippetUI::HorizontalList_Standard_Item *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 4) = 0;
  return result;
}

uint64_t SnippetUI::HorizontalList_Standard_Item::clear_text_2(SnippetUI::HorizontalList_Standard_Item *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 5);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 5) = 0;
  return result;
}

uint64_t SnippetUI::HorizontalList_Standard_Item::clear_action(SnippetUI::HorizontalList_Standard_Item *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 6);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 6) = 0;
  return result;
}

SnippetUI::HorizontalList_Standard_Item *SnippetUI::HorizontalList_Standard_Item::HorizontalList_Standard_Item(SnippetUI::HorizontalList_Standard_Item *this, const SnippetUI::HorizontalList_Standard_Item *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  SnippetUI::VisualProperty *v8;
  SnippetUI::ActionProperty *v9;
  SnippetUI::TextProperty *v10;
  SnippetUI::TextProperty *v11;

  *(_QWORD *)this = &off_1E7939850;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 15) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::HorizontalList_Standard_Item *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  if (a2 == (const SnippetUI::HorizontalList_Standard_Item *)&SnippetUI::_HorizontalList_Standard_Item_default_instance_)
  {
    v9 = 0;
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 4) = 0;
    *((_QWORD *)this + 5) = 0;
  }
  else
  {
    if (*((_QWORD *)a2 + 3))
    {
      v8 = (SnippetUI::VisualProperty *)operator new();
      SnippetUI::VisualProperty::VisualProperty(v8, *((const SnippetUI::VisualProperty **)a2 + 3));
    }
    else
    {
      v8 = 0;
    }
    *((_QWORD *)this + 3) = v8;
    if (*((_QWORD *)a2 + 4))
    {
      v10 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v10, *((const SnippetUI::TextProperty **)a2 + 4));
    }
    else
    {
      v10 = 0;
    }
    *((_QWORD *)this + 4) = v10;
    if (*((_QWORD *)a2 + 5))
    {
      v11 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v11, *((const SnippetUI::TextProperty **)a2 + 5));
    }
    else
    {
      v11 = 0;
    }
    *((_QWORD *)this + 5) = v11;
    if (*((_QWORD *)a2 + 6))
    {
      v9 = (SnippetUI::ActionProperty *)operator new();
      SnippetUI::ActionProperty::ActionProperty(v9, *((const SnippetUI::ActionProperty **)a2 + 6));
    }
    else
    {
      v9 = 0;
    }
  }
  *((_QWORD *)this + 6) = v9;
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  return this;
}

void sub_1BFC4F5D0(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x1C3B8D890](v2, 0x10A1C40B18DE219);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::HorizontalList_Standard_Item::CopyFrom(SnippetUI::HorizontalList_Standard_Item *this, const SnippetUI::HorizontalList_Standard_Item *a2)
{
  if (a2 != this)
  {
    SnippetUI::HorizontalList_Standard_Item::Clear(this);
    SnippetUI::HorizontalList_Standard_Item::MergeFrom(this, a2);
  }
}

void SnippetUI::HorizontalList_Standard_Item::InternalSwap(SnippetUI::HorizontalList_Standard_Item *this, SnippetUI::HorizontalList_Standard_Item *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  google::protobuf::UnknownFieldSet *v17;

  v4 = (SnippetUI::HorizontalList_Standard_Item *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v17;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 2);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v13;
  v14 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v14;
  v15 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v15;
  v16 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v16;
  LODWORD(v16) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = v16;
}

void SnippetUI::HorizontalList_Standard::InitAsDefaultInstance(SnippetUI::HorizontalList_Standard *this)
{
  qword_1EF584AB0 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
}

uint64_t SnippetUI::HorizontalList_Standard::_Internal::text_1(SnippetUI::HorizontalList_Standard::_Internal *this, const SnippetUI::HorizontalList_Standard *a2)
{
  return *((_QWORD *)this + 6);
}

uint64_t SnippetUI::HorizontalList_Standard::clear_text_1(SnippetUI::HorizontalList_Standard *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 6);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 6) = 0;
  return result;
}

SnippetUI::HorizontalList_Standard *SnippetUI::HorizontalList_Standard::HorizontalList_Standard(SnippetUI::HorizontalList_Standard *this, const SnippetUI::HorizontalList_Standard *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  SnippetUI::TextProperty *v9;

  *(_QWORD *)this = &off_1E7939910;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (SnippetUI::HorizontalList_Standard *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::HorizontalList_Standard_Item>::TypeHandler>((int **)this + 2, (uint64_t)a2 + 16);
  *((_DWORD *)this + 14) = 0;
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom(v4, (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  v6 = *((_QWORD *)a2 + 5);
  if (*(char *)(v6 + 23) < 0)
    v7 = *(_QWORD *)(v6 + 8);
  else
    v7 = *(unsigned __int8 *)(v6 + 23);
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string && v7 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 5, v6);
  v9 = 0;
  if (a2 != (const SnippetUI::HorizontalList_Standard *)&SnippetUI::_HorizontalList_Standard_default_instance_
    && *((_QWORD *)a2 + 6))
  {
    v9 = (SnippetUI::TextProperty *)operator new();
    SnippetUI::TextProperty::TextProperty(v9, *((const SnippetUI::TextProperty **)a2 + 6));
  }
  *((_QWORD *)this + 6) = v9;
  return this;
}

void sub_1BFC4F8E8(_Unwind_Exception *a1)
{
  uint64_t *v1;
  google::protobuf::internal::RepeatedPtrFieldBase *v2;
  uint64_t v3;

  MEMORY[0x1C3B8D890](v3, 0x10A1C40BEC01B52);
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::HorizontalList_Standard::CopyFrom(SnippetUI::HorizontalList_Standard *this, const SnippetUI::HorizontalList_Standard *a2)
{
  if (a2 != this)
  {
    SnippetUI::HorizontalList_Standard::Clear(this);
    SnippetUI::HorizontalList_Standard::MergeFrom(this, a2);
  }
}

void SnippetUI::HorizontalList_Standard::InternalSwap(SnippetUI::HorizontalList_Standard *this, SnippetUI::HorizontalList_Standard *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  google::protobuf::UnknownFieldSet *v14;

  v4 = (SnippetUI::HorizontalList_Standard *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v14;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((SnippetUI::HorizontalList_Standard *)((char *)this + 16), (SnippetUI::HorizontalList_Standard *)((char *)a2 + 16));
  v7 = (uint64_t *)*((_QWORD *)this + 5);
  v8 = (uint64_t **)((char *)a2 + 40);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 5, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 5);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 5, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v13;
}

void InitDefaultsscc_info_CoreChart_CoreChart_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/CoreChart.pb.cc", a4);
  SnippetUI::CoreChart::CoreChart((SnippetUI::CoreChart *)&SnippetUI::_CoreChart_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_CoreChart_default_instance_, v4);
}

SnippetUI::CoreChart *SnippetUI::CoreChart::CoreChart(SnippetUI::CoreChart *this)
{
  *(_QWORD *)this = &off_1E7939A88;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  if (atomic_load(scc_info_CoreChart_CoreChart_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_CoreChart_CoreChart_2eproto);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

void sub_1BFC4FB34(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::CoreChart::~CoreChart(SnippetUI::CoreChart *this)
{
  SnippetUI::CoreChart::~CoreChart(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E7939A88;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::CoreChart *SnippetUI::CoreChart::New(SnippetUI::CoreChart *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::CoreChart>(0);
}

SnippetUI::CoreChart *SnippetUI::CoreChart::New(SnippetUI::CoreChart *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::CoreChart>(a2);
}

void SnippetUI::CoreChart::Clear(SnippetUI::CoreChart *this)
{
  uint64_t v1;
  google::protobuf::internal::InternalMetadataWithArena *v2;
  char v3;

  v1 = *((_QWORD *)this + 2);
  if ((uint64_t *)v1 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v1 + 23) < 0)
    {
      **(_BYTE **)v1 = 0;
      *(_QWORD *)(v1 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v1 = 0;
      *(_BYTE *)(v1 + 23) = 0;
    }
  }
  v3 = *((_BYTE *)this + 8);
  v2 = (SnippetUI::CoreChart *)((char *)this + 8);
  if ((v3 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v2);
}

uint64_t SnippetUI::CoreChart::IsInitialized(SnippetUI::CoreChart *this)
{
  return 1;
}

char *SnippetUI::CoreChart::ByteSizeLong(SnippetUI::CoreChart *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const google::protobuf::UnknownFieldSet *v4;

  v1 = *((_QWORD *)this + 2);
  v2 = *(unsigned __int8 *)(v1 + 23);
  if (*(char *)(v1 + 23) < 0)
  {
    if (*(_QWORD *)(v1 + 8))
      goto LABEL_3;
LABEL_7:
    v4 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v1 + 23))
    goto LABEL_7;
LABEL_3:
  v3 = *(_QWORD *)(v1 + 8);
  if ((v2 & 0x80u) == 0)
    v3 = v2;
  v4 = (const google::protobuf::UnknownFieldSet *)(v3 + ((9 * (__clz(v3 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::CoreChart *)((char *)this + 8), v4, (_DWORD *)this + 6);
  *((_DWORD *)this + 6) = (_DWORD)v4;
  return (char *)v4;
}

uint64_t SnippetUI::CoreChart::GetCachedSize(SnippetUI::CoreChart *this)
{
  return *((unsigned int *)this + 6);
}

google::protobuf::internal *SnippetUI::CoreChart::_InternalParse(SnippetUI::CoreChart *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  uint64_t *v4;
  std::string **v5;
  google::protobuf::internal::ParseContext *v6;
  google::protobuf::internal *TagFallback;
  char *v8;
  char *v10;
  std::string *v11;
  google::protobuf::internal *v13;

  v13 = a2;
  v4 = (uint64_t *)((char *)this + 8);
  v5 = (std::string **)((char *)this + 16);
  while (1)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v13, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v13;
    TagFallback = (google::protobuf::internal *)((char *)v13 + 1);
    v8 = (char *)*(unsigned __int8 *)v13;
    if ((*(char *)v13 & 0x80000000) == 0)
      goto LABEL_6;
    v8 = (char *)(v8 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v13 + 2);
LABEL_6:
      v13 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v13, v8);
    v13 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    if ((_DWORD)v8 == 10)
    {
      v11 = *v5;
      if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v11 = *v5;
        TagFallback = v13;
      }
      v10 = google::protobuf::internal::InlineGreedyStringParser(v11, (std::string::value_type *)TagFallback, (uint64_t)a3);
      goto LABEL_16;
    }
    if (!(_DWORD)v8 || (v8 & 7) == 4)
      break;
    v10 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v8, v4, TagFallback, a3, v6);
LABEL_16:
    v13 = (google::protobuf::internal *)v10;
    if (!v10)
      return 0;
  }
  *((_DWORD *)a3 + 20) = (_DWORD)v8 - 1;
  return TagFallback;
}

const google::protobuf::UnknownFieldSet *SnippetUI::CoreChart::InternalSerializeWithCachedSizesToArray(SnippetUI::CoreChart *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;

  v4 = (unsigned __int8 *)a2;
  v6 = *((_QWORD *)this + 2);
  if ((*(char *)(v6 + 23) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(v6 + 23))
      goto LABEL_4;
    goto LABEL_3;
  }
  if (*(_QWORD *)(v6 + 8))
LABEL_3:
    v4 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, v6, a2);
LABEL_4:
  v7 = *((_QWORD *)this + 1);
  if ((v7 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v7 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v4, a3, (google::protobuf::io::EpsCopyOutputStream *)v4);
  else
    return (const google::protobuf::UnknownFieldSet *)v4;
}

void SnippetUI::CoreChart::CopyFrom(SnippetUI::CoreChart *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::CoreChart::Clear(this);
    SnippetUI::CoreChart::MergeFrom(this, a2);
  }
}

void SnippetUI::CoreChart::MergeFrom(SnippetUI::CoreChart *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::CoreChart *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/CoreChart.pb.cc", 216);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::CoreChart::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BFC4FEC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::CoreChart::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 24) = a2;
  return this;
}

uint64_t SnippetUI::CoreChart::GetMetadata(SnippetUI::CoreChart *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_CoreChart_2eproto);
  return file_level_metadata_CoreChart_2eproto;
}

void *SnippetUI::CoreChart::default_instance(SnippetUI::CoreChart *this)
{
  if (atomic_load(scc_info_CoreChart_CoreChart_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_CoreChart_CoreChart_2eproto);
  return &SnippetUI::_CoreChart_default_instance_;
}

void SnippetUI::CoreChart::MergeFrom(SnippetUI::CoreChart *this, const SnippetUI::CoreChart *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  std::string *v7;
  std::string **v8;
  std::string *v9;
  char v10;
  std::string v11[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/CoreChart.pb.cc", 231);
    v4 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::CoreChart *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_QWORD *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      return;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    return;
  }
  v9 = (std::string *)*((_QWORD *)this + 2);
  v8 = (std::string **)((char *)this + 16);
  v7 = v9;
  if (v9 != (std::string *)v6)
  {
    if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v8, v6);
    else
      std::string::operator=(v7, (const std::string *)v6);
  }
}

void sub_1BFC50010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::CoreChart *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::CoreChart>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::CoreChart *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::CoreChart *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x20uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::CoreChart>);
    SnippetUI::CoreChart::CoreChart(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::CoreChart *)operator new();
    SnippetUI::CoreChart::CoreChart(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFC500AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C4084265165);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::CoreChart>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

SnippetUI::CoreChart *SnippetUI::CoreChart::CoreChart(SnippetUI::CoreChart *this, const SnippetUI::CoreChart *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E7939A88;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::CoreChart *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  return this;
}

void sub_1BFC501E8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::CoreChart::CopyFrom(SnippetUI::CoreChart *this, const SnippetUI::CoreChart *a2)
{
  if (a2 != this)
  {
    SnippetUI::CoreChart::Clear(this);
    SnippetUI::CoreChart::MergeFrom(this, a2);
  }
}

__n128 SnippetUI::CoreChart::InternalSwap(SnippetUI::CoreChart *this, SnippetUI::CoreChart *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  __n128 result;
  std::string **v8;
  std::string *v9;
  uint64_t *v10;
  std::string **v11;
  std::string *v12;
  std::string::size_type v13;
  std::string::size_type v14;
  google::protobuf::UnknownFieldSet *v15;

  v4 = (SnippetUI::CoreChart *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v15;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  v10 = (uint64_t *)*((_QWORD *)this + 2);
  v8 = (std::string **)((char *)this + 16);
  v9 = (std::string *)v10;
  v11 = (std::string **)((char *)a2 + 16);
  if (v10 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      return result;
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v8, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v12 = *v11;
  if (*v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v11, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v12 = *v11;
  }
  v13 = v9->__r_.__value_.__r.__words[2];
  result = *(__n128 *)&v9->__r_.__value_.__l.__data_;
  v14 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v9->__r_.__value_.__r.__words[2] = v14;
  *(__n128 *)&v12->__r_.__value_.__l.__data_ = result;
  v12->__r_.__value_.__r.__words[2] = v13;
  return result;
}

void siri::dialogengine::Condition::~Condition(siri::dialogengine::Condition *this)
{
  void **v2;

  *(_QWORD *)this = off_1E7939B60;
  *((_QWORD *)this + 8) = &unk_1E7939B88;
  v2 = (void **)((char *)this + 144);
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 143) < 0)
    operator delete(*((void **)this + 15));
  if (*((char *)this + 119) < 0)
    operator delete(*((void **)this + 12));
  *((_QWORD *)this + 8) = off_1E793AED8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((_QWORD **)this + 10));
  siri::dialogengine::LineNumberBase::~LineNumberBase((void **)this);
}

{
  void **v2;

  *(_QWORD *)this = off_1E7939B60;
  *((_QWORD *)this + 8) = &unk_1E7939B88;
  v2 = (void **)((char *)this + 144);
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 143) < 0)
    operator delete(*((void **)this + 15));
  if (*((char *)this + 119) < 0)
    operator delete(*((void **)this + 12));
  *((_QWORD *)this + 8) = off_1E793AED8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((_QWORD **)this + 10));
  siri::dialogengine::LineNumberBase::~LineNumberBase((void **)this);
  JUMPOUT(0x1C3B8D890);
}

uint64_t siri::dialogengine::Condition::Validate(siri::dialogengine::Condition *this, siri::dialogengine::Context *a2)
{
  uint64_t *v4;
  unint64_t v5;
  std::string *v6;
  __int128 v7;
  void *v8;
  std::string *v9;
  __int128 v10;
  std::string v12;
  void *__p[2];
  std::string::size_type v14;

  if (*((char *)this + 119) < 0)
  {
    if (*((_QWORD *)this + 13))
      goto LABEL_3;
LABEL_9:
    std::string::basic_string[abi:ne180100]<0>(__p, "Condition has no name attribute");
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, (__int128 *)__p, (uint64_t)this);
    if (SHIBYTE(v14) < 0)
    {
      v8 = __p[0];
LABEL_16:
      operator delete(v8);
      return 0;
    }
    return 0;
  }
  if (!*((_BYTE *)this + 119))
    goto LABEL_9;
LABEL_3:
  if (!siri::dialogengine::IsValidCompoundVariableName((uint64_t)this + 96))
  {
    std::operator+<char>();
    v9 = std::string::append(&v12, "' (Name must match regex \"[a-zA-Z_][a-zA-Z0-9_\\-]*\")");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v14 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, (__int128 *)__p, (uint64_t)this);
LABEL_12:
    if (SHIBYTE(v14) < 0)
      operator delete(__p[0]);
    if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return 0;
    v8 = (void *)v12.__r_.__value_.__r.__words[0];
    goto LABEL_16;
  }
  if (a2)
  {
    v4 = (uint64_t *)*((_QWORD *)this + 18);
    v5 = *((_QWORD *)this + 19) - (_QWORD)v4;
    if (!v5)
      return 1;
    if (v5 < 0x11)
      return siri::dialogengine::Condition::ValidateConditionEntry((uint64_t)this, (uint64_t)a2, *v4);
    std::operator+<char>();
    v6 = std::string::append(&v12, "'");
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v14 = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, (__int128 *)__p, (uint64_t)this);
    goto LABEL_12;
  }
  return 0;
}

void sub_1BFC505C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'siri::dialogengine::Condition::~Condition(siri::dialogengine::Condition *this)
{
  void **v2;
  void **v3;

  *((_QWORD *)this - 8) = off_1E7939B60;
  v2 = (void **)((char *)this - 64);
  *(_QWORD *)this = &unk_1E7939B88;
  v3 = (void **)((char *)this + 80);
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  *(_QWORD *)this = off_1E793AED8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((_QWORD **)this + 2));
  siri::dialogengine::LineNumberBase::~LineNumberBase(v2);
}

{
  void **v2;
  void **v3;

  *((_QWORD *)this - 8) = off_1E7939B60;
  v2 = (void **)((char *)this - 64);
  *(_QWORD *)this = &unk_1E7939B88;
  v3 = (void **)((char *)this + 80);
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  *(_QWORD *)this = off_1E793AED8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((_QWORD **)this + 2));
  siri::dialogengine::LineNumberBase::~LineNumberBase(v2);
  JUMPOUT(0x1C3B8D890);
}

uint64_t `non-virtual thunk to'siri::dialogengine::Condition::Validate(siri::dialogengine::Condition *this, siri::dialogengine::Context *a2)
{
  return siri::dialogengine::Condition::Validate((siri::dialogengine::Condition *)((char *)this - 64), a2);
}

uint64_t siri::dialogengine::Condition::ValidateConditionEntry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v6;
  int v7;
  std::string *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  int v15;
  unint64_t *v16;
  unint64_t v17;
  std::string v19;
  void *__p[2];
  std::string::size_type v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v3 = a3;
  if (!a3)
    return v3;
  v6 = *(_DWORD *)(a3 + 32);
  v22 = 0;
  v23 = 0;
  v24 = 0;
  std::vector<std::shared_ptr<siri::dialogengine::ConditionEntry>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::ConditionEntry>*,std::shared_ptr<siri::dialogengine::ConditionEntry>*>((char *)&v22, *(_QWORD **)(a3 + 64), *(_QWORD **)(a3 + 72), (uint64_t)(*(_QWORD *)(a3 + 72) - *(_QWORD *)(a3 + 64)) >> 4);
  if (v6 == 2)
  {
    if (v23 - v22 != 16)
      goto LABEL_14;
  }
  else if (v6 == 1)
  {
    if ((unint64_t)(v23 - v22) <= 0x1F)
      goto LABEL_14;
  }
  else if (v6)
  {
    if ((v6 - 3) > 1 || v23 != v22)
      goto LABEL_14;
  }
  else if ((unint64_t)(v23 - v22) <= 0x1F)
  {
LABEL_14:
    std::operator+<char>();
    v8 = std::string::append(&v19, "'");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v21 = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationError(a2, (__int128 *)__p, a1);
    if (SHIBYTE(v21) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
    v7 = 0;
    goto LABEL_19;
  }
  v7 = 1;
LABEL_19:
  v3 = (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 16))(v3, a2) & v7;
  v10 = v22;
  v11 = v23;
  while (v10 != v11)
  {
    v12 = *(std::__shared_weak_count **)(v10 + 8);
    __p[0] = *(void **)v10;
    __p[1] = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v15 = siri::dialogengine::Condition::ValidateConditionEntry(a1, a2);
    if (v12)
    {
      v16 = (unint64_t *)&v12->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v3 = v15 & v3;
    v10 += 16;
  }
  __p[0] = &v22;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  return v3;
}

void sub_1BFC50A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  __p = &a22;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

double siri::dialogengine::Condition::Condition(siri::dialogengine::Condition *this)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 9) = (char *)this + 80;
  *(_QWORD *)this = off_1E7939B60;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = &unk_1E7939B88;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_QWORD *)this + 20) = 0;
  return result;
}

{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 9) = (char *)this + 80;
  *(_QWORD *)this = off_1E7939B60;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = &unk_1E7939B88;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_QWORD *)this + 20) = 0;
  return result;
}

uint64_t siri::dialogengine::Condition::Condition(uint64_t a1, __int128 *a2, _QWORD **a3)
{
  __int128 v5;

  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 72) = a1 + 80;
  *(_QWORD *)a1 = off_1E7939B60;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = &unk_1E7939B88;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 96), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 96) = v5;
  }
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  std::vector<std::shared_ptr<siri::dialogengine::ConditionEntry>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::ConditionEntry>*,std::shared_ptr<siri::dialogengine::ConditionEntry>*>((char *)(a1 + 144), *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 4);
  return a1;
}

void sub_1BFC50C2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 64) = off_1E793AED8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(_QWORD **)(v1 + 80));
  siri::dialogengine::LineNumberBase::~LineNumberBase((void **)v1);
  _Unwind_Resume(a1);
}

void siri::dialogengine::Condition::GetName(siri::dialogengine::Condition *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 119) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 12), *((_QWORD *)this + 13));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 6);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 14);
  }
}

std::string *siri::dialogengine::Condition::SetName(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 4, a2);
}

uint64_t siri::dialogengine::Condition::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  const void **v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;

  v2 = *(unsigned __int8 *)(a1 + 143);
  if ((v2 & 0x80u) == 0)
    v3 = *(unsigned __int8 *)(a1 + 143);
  else
    v3 = *(_QWORD *)(a1 + 128);
  v4 = *(unsigned __int8 *)(a2 + 143);
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 128);
  if (v3 != v4)
    return 0;
  v8 = (const void **)(a1 + 120);
  if (v5 >= 0)
    v9 = (unsigned __int8 *)(a2 + 120);
  else
    v9 = *(unsigned __int8 **)(a2 + 120);
  if ((v2 & 0x80) != 0)
  {
    if (!memcmp(*v8, v9, *(_QWORD *)(a1 + 128)))
      goto LABEL_17;
    return 0;
  }
  if (*(_BYTE *)(a1 + 143))
  {
    while (*(unsigned __int8 *)v8 == *v9)
    {
      v8 = (const void **)((char *)v8 + 1);
      ++v9;
      if (!--v2)
        goto LABEL_17;
    }
    return 0;
  }
LABEL_17:
  v17 = 0;
  v18 = 0;
  v19 = 0;
  std::vector<std::shared_ptr<siri::dialogengine::ConditionEntry>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::ConditionEntry>*,std::shared_ptr<siri::dialogengine::ConditionEntry>*>((char *)&v17, *(_QWORD **)(a2 + 144), *(_QWORD **)(a2 + 152), (uint64_t)(*(_QWORD *)(a2 + 152) - *(_QWORD *)(a2 + 144)) >> 4);
  v11 = *(_QWORD *)(a1 + 144);
  v12 = *(_QWORD *)(a1 + 152);
  if (v12 - v11 == v18 - v17)
  {
    if (v12 == v11)
    {
      v10 = 1;
    }
    else
    {
      v13 = 0;
      v14 = 0;
      do
      {
        v15 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v11 + v13) + 32))(*(_QWORD *)(v11 + v13), *(_QWORD *)(v17 + v13));
        if ((v15 & 1) != 0)
          break;
        ++v14;
        v11 = *(_QWORD *)(a1 + 144);
        v13 += 16;
      }
      while (v14 < (*(_QWORD *)(a1 + 152) - v11) >> 4);
      v10 = v15 ^ 1u;
    }
  }
  else
  {
    v10 = 0;
  }
  v20 = (void **)&v17;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v20);
  return v10;
}

void sub_1BFC50E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

char *siri::dialogengine::Condition::GetEntries@<X0>(siri::dialogengine::Condition *this@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  return std::vector<std::shared_ptr<siri::dialogengine::ConditionEntry>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::ConditionEntry>*,std::shared_ptr<siri::dialogengine::ConditionEntry>*>((char *)a2, *((_QWORD **)this + 18), *((_QWORD **)this + 19), (uint64_t)(*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 4);
}

uint64_t siri::dialogengine::Condition::operator!=(uint64_t a1, uint64_t a2)
{
  return siri::dialogengine::Condition::operator==(a1, a2) ^ 1;
}

uint64_t **siri::dialogengine::Condition::SetEntries(uint64_t a1, uint64_t **a2)
{
  uint64_t **result;

  result = (uint64_t **)(a1 + 144);
  if (result != a2)
    return (uint64_t **)std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__assign_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>(result, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  return result;
}

void siri::dialogengine::Condition::AddEntry(uint64_t a1, __int128 *a2)
{
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::emplace_back<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry> const&>((char **)(a1 + 144), a2);
}

void siri::dialogengine::Condition::GetNote(siri::dialogengine::Condition *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 143) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 15), *((_QWORD *)this + 16));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 120);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 17);
  }
}

std::string *siri::dialogengine::Condition::SetNote(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 5, a2);
}

uint64_t siri::dialogengine::Condition::HasInfiniteLoop(siri::dialogengine::Condition *this, siri::dialogengine::Context *a2)
{
  uint64_t HasInfiniteLoop;
  char **v4;
  char *v5[2];

  if (!a2)
    return 0;
  v5[0] = 0;
  v5[1] = 0;
  v4 = v5;
  HasInfiniteLoop = siri::dialogengine::ConditionHasInfiniteLoop((uint64_t)a2, (uint64_t)this, (uint64_t)&v4);
  std::__tree<std::string>::destroy((uint64_t)&v4, v5[0]);
  return HasInfiniteLoop;
}

void sub_1BFC50F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  std::__tree<std::string>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::ConditionHasInfiniteLoop(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t HasInfiniteLoop;
  unint64_t *v11;
  unint64_t v12;
  char v13;
  uint64_t v15[2];
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  void **v19;

  v16 = 0;
  v17 = 0;
  v18 = 0;
  std::vector<std::shared_ptr<siri::dialogengine::ConditionEntry>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::ConditionEntry>*,std::shared_ptr<siri::dialogengine::ConditionEntry>*>((char *)&v16, *(_QWORD **)(a2 + 144), *(_QWORD **)(a2 + 152), (uint64_t)(*(_QWORD *)(a2 + 152) - *(_QWORD *)(a2 + 144)) >> 4);
  v5 = v16;
  v6 = v17;
  if (v16 == v17)
  {
    HasInfiniteLoop = 0;
  }
  else
  {
    do
    {
      v7 = (std::__shared_weak_count *)v5[1];
      v15[0] = *v5;
      v15[1] = (uint64_t)v7;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }
      HasInfiniteLoop = siri::dialogengine::ConditionEntryHasInfiniteLoop(a1, v15, a3);
      if (v7)
      {
        v11 = (unint64_t *)&v7->__shared_owners_;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v5 += 2;
      if (v5 == v6)
        v13 = 1;
      else
        v13 = HasInfiniteLoop;
    }
    while ((v13 & 1) == 0);
  }
  v19 = (void **)&v16;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v19);
  return HasInfiniteLoop;
}

void sub_1BFC51034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  a14 = (void **)&a11;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::ConditionEntryHasInfiniteLoop(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  char *v7;
  uint64_t HasInfiniteLoop;
  uint64_t **v9;
  int v10;
  std::__shared_weak_count *v11;
  void **v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  std::string::size_type size;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  char v27;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  BOOL v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  _QWORD v39[2];
  uint64_t v40;
  std::__shared_weak_count *v41;
  std::string *v42;
  std::__shared_weak_count *v43;
  std::string v44;

  v3 = *a2;
  if (!*a2)
    return 0;
  if (*(_DWORD *)(v3 + 32) == 4)
  {
    if (v7)
    {
      if (v7[175] < 0)
        std::string::__init_copy_ctor_external(&v44, *((const std::string::value_type **)v7 + 19), *((_QWORD *)v7 + 20));
      else
        v44 = *(std::string *)(v7 + 152);
      v9 = (uint64_t **)std::__tree<std::string>::find<std::string>(a3, (const void **)&v44.__r_.__value_.__l.__data_);
      if ((uint64_t **)(a3 + 8) != v9)
      {
        v10 = 1;
LABEL_10:
        if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v44.__r_.__value_.__l.__data_);
          if (v10)
            return 1;
        }
        else if (v10)
        {
          return 1;
        }
        v3 = *a2;
        goto LABEL_26;
      }
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)a3, (const void **)&v44.__r_.__value_.__l.__data_, (uint64_t)&v44);
      v12 = *(void ***)(a1 + 504);
      v11 = *(std::__shared_weak_count **)(a1 + 512);
      v42 = (std::string *)v12;
      v43 = v11;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v14 = __ldxr(p_shared_owners);
        while (__stxr(v14 + 1, p_shared_owners));
      }
      if (!v12
        || (v15 = std::__tree<std::string>::find<std::string>((uint64_t)(v12 + 34), (const void **)&v44.__r_.__value_.__l.__data_), v12 + 35 == (void **)v15))
      {
        v17 = 0;
        v40 = 0;
        v41 = 0;
      }
      else
      {
        v16 = *(_QWORD *)(v15 + 56);
        v17 = *(std::__shared_weak_count **)(v15 + 64);
        v40 = v16;
        v41 = v17;
        if (v17)
        {
          v18 = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
        }
        if (v16 && (siri::dialogengine::ConditionHasInfiniteLoop(a1, v16, a3) & 1) != 0)
        {
          v10 = 1;
LABEL_57:
          if (v17)
          {
            v35 = (unint64_t *)&v17->__shared_owners_;
            do
              v36 = __ldaxr(v35);
            while (__stlxr(v36 - 1, v35));
            if (!v36)
            {
              ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
              std::__shared_weak_count::__release_weak(v17);
            }
          }
          if (v43)
          {
            v37 = &v43->__shared_owners_;
            do
              v38 = __ldaxr((unint64_t *)v37);
            while (__stlxr(v38 - 1, (unint64_t *)v37));
            if (!v38)
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v43);
            }
          }
          goto LABEL_10;
        }
      }
      v29 = (uint64_t *)std::__tree<std::string>::find<std::string>(a3, (const void **)&v44.__r_.__value_.__l.__data_);
      v30 = v29;
      if (v9 != (uint64_t **)v29)
      {
        v31 = (uint64_t *)v29[1];
        if (v31)
        {
          do
          {
            v32 = v31;
            v31 = (uint64_t *)*v31;
          }
          while (v31);
        }
        else
        {
          v33 = v29;
          do
          {
            v32 = (uint64_t *)v33[2];
            v34 = *v32 == (_QWORD)v33;
            v33 = v32;
          }
          while (!v34);
        }
        if (*(uint64_t **)a3 == v29)
          *(_QWORD *)a3 = v32;
        --*(_QWORD *)(a3 + 16);
        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(*v9, v29);
        if (*((char *)v30 + 55) < 0)
          operator delete((void *)v30[4]);
        operator delete(v30);
      }
      v10 = 0;
      goto LABEL_57;
    }
  }
LABEL_26:
  memset(&v44, 0, sizeof(v44));
  std::vector<std::shared_ptr<siri::dialogengine::ConditionEntry>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::ConditionEntry>*,std::shared_ptr<siri::dialogengine::ConditionEntry>*>((char *)&v44, *(_QWORD **)(v3 + 64), *(_QWORD **)(v3 + 72), (uint64_t)(*(_QWORD *)(v3 + 72) - *(_QWORD *)(v3 + 64)) >> 4);
  size = v44.__r_.__value_.__l.__size_;
  v20 = (_QWORD *)v44.__r_.__value_.__r.__words[0];
  if (v44.__r_.__value_.__r.__words[0] == v44.__r_.__value_.__l.__size_)
  {
    HasInfiniteLoop = 0;
  }
  else
  {
    do
    {
      v22 = (std::__shared_weak_count *)v20[1];
      v39[0] = *v20;
      v39[1] = v22;
      if (v22)
      {
        v23 = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      HasInfiniteLoop = siri::dialogengine::ConditionEntryHasInfiniteLoop(a1, v39, a3);
      if (v22)
      {
        v25 = (unint64_t *)&v22->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      v20 += 2;
      if (v20 == (_QWORD *)size)
        v27 = 1;
      else
        v27 = HasInfiniteLoop;
    }
    while ((v27 & 1) == 0);
  }
  v42 = &v44;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
  return HasInfiniteLoop;
}

void sub_1BFC51390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::Condition::Evaluate(siri::dialogengine::Condition *this, siri::dialogengine::Context *a2, siri::dialogengine::ExecutionState *a3, siri::dialogengine::ExecutionState *a4)
{
  siri::dialogengine::Context **v4;

  if (!a2)
    return 0;
  v4 = (siri::dialogengine::Context **)*((_QWORD *)this + 18);
  if (v4 == *((siri::dialogengine::Context ***)this + 19))
    return 0;
  else
    return siri::dialogengine::EvaluateConditionEntry(a2, *v4, a3, a4);
}

uint64_t siri::dialogengine::EvaluateConditionEntry(siri::dialogengine *this, siri::dialogengine::Context *a2, siri::dialogengine::ConditionEntry *a3, siri::dialogengine::ExecutionState *a4)
{
  uint64_t v4;
  int v7;
  siri::dialogengine::ExecutionState *v8;
  siri::dialogengine::Context **v9;
  siri::dialogengine::Context **v10;
  void **v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  char v17;
  siri::dialogengine::Context **v18;
  siri::dialogengine::Context **v19;
  void **v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  char v26;
  void *v27;
  siri::dialogengine::Context ***v29;
  std::__shared_weak_count *v30;
  siri::dialogengine::Context **v31;
  siri::dialogengine::Context **v32;
  uint64_t v33;

  v4 = (uint64_t)a2;
  if (a2)
  {
    v7 = *((_DWORD *)a2 + 8);
    v31 = 0;
    v32 = 0;
    v33 = 0;
    std::vector<std::shared_ptr<siri::dialogengine::ConditionEntry>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::ConditionEntry>*,std::shared_ptr<siri::dialogengine::ConditionEntry>*>((char *)&v31, *((_QWORD **)a2 + 8), *((_QWORD **)a2 + 9), (uint64_t)(*((_QWORD *)a2 + 9) - *((_QWORD *)a2 + 8)) >> 4);
    switch(v7)
    {
      case 0:
        v9 = v31;
        v10 = v32;
        if (v31 == v32)
        {
          v4 = 1;
        }
        else
        {
          do
          {
            v11 = (void **)*v9;
            v12 = (std::__shared_weak_count *)v9[1];
            v29 = (siri::dialogengine::Context ***)*v9;
            v30 = v12;
            if (v12)
            {
              p_shared_owners = (unint64_t *)&v12->__shared_owners_;
              do
                v14 = __ldxr(p_shared_owners);
              while (__stxr(v14 + 1, p_shared_owners));
            }
            v4 = siri::dialogengine::EvaluateConditionEntry(this, (siri::dialogengine::Context *)v11, a3, v8);
            if (v12)
            {
              v15 = (unint64_t *)&v12->__shared_owners_;
              do
                v16 = __ldaxr(v15);
              while (__stlxr(v16 - 1, v15));
              if (!v16)
              {
                ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
                std::__shared_weak_count::__release_weak(v12);
              }
            }
            v9 += 2;
            if (v9 == v10)
              v17 = 0;
            else
              v17 = v4;
          }
          while ((v17 & 1) != 0);
        }
        break;
      case 1:
        v18 = v31;
        v19 = v32;
        if (v31 == v32)
          goto LABEL_37;
        do
        {
          v20 = (void **)*v18;
          v21 = (std::__shared_weak_count *)v18[1];
          v29 = (siri::dialogengine::Context ***)*v18;
          v30 = v21;
          if (v21)
          {
            v22 = (unint64_t *)&v21->__shared_owners_;
            do
              v23 = __ldxr(v22);
            while (__stxr(v23 + 1, v22));
          }
          v4 = siri::dialogengine::EvaluateConditionEntry(this, (siri::dialogengine::Context *)v20, a3, v8);
          if (v21)
          {
            v24 = (unint64_t *)&v21->__shared_owners_;
            do
              v25 = __ldaxr(v24);
            while (__stlxr(v25 - 1, v24));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
              std::__shared_weak_count::__release_weak(v21);
            }
          }
          v18 += 2;
          if (v18 == v19)
            v26 = 1;
          else
            v26 = v4;
        }
        while ((v26 & 1) == 0);
        break;
      case 2:
        if (v32 == v31)
          goto LABEL_37;
        v4 = siri::dialogengine::EvaluateConditionEntry(this, *v31, a3, v8) ^ 1;
        break;
      case 3:
        if (!v27)
          goto LABEL_37;
        goto LABEL_36;
      case 4:
        if (!v27)
          goto LABEL_37;
LABEL_36:
        v4 = (*(uint64_t (**)(void *, siri::dialogengine *, siri::dialogengine::ConditionEntry *))(*(_QWORD *)v27 + 40))(v27, this, a3);
        break;
      default:
LABEL_37:
        v4 = 0;
        break;
    }
    v29 = &v31;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  }
  return v4;
}

void sub_1BFC51658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  a10 = (void **)&a12;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::ChunkList::ChunkList(_QWORD *this)
{
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  return this;
}

{
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  return this;
}

uint64_t **siri::dialogengine::ChunkList::ChunkList(uint64_t **a1, uint64_t **a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a1 != a2)
    std::vector<std::shared_ptr<siri::dialogengine::Node>>::__assign_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Node>*,std::shared_ptr<siri::dialogengine::Node>*>((uint64_t)a1, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  return a1;
}

void sub_1BFC516F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::ChunkList::SetChunks(uint64_t result, uint64_t **a2)
{
  if ((uint64_t **)result != a2)
    return std::vector<std::shared_ptr<siri::dialogengine::Node>>::__assign_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Node>*,std::shared_ptr<siri::dialogengine::Node>*>(result, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  return result;
}

char *siri::dialogengine::ChunkList::GetChunks@<X0>(siri::dialogengine::ChunkList *this@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  return std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::ChunkText>*,std::shared_ptr<siri::dialogengine::ChunkText>*>((char *)a2, *(_QWORD **)this, *((_QWORD **)this + 1), (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 4);
}

char *std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::ChunkText>*,std::shared_ptr<siri::dialogengine::ChunkText>*>(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1BFC517DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::ChunkList::AddChunk(_QWORD *result, __int128 *a2)
{
  char **v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  unint64_t *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  uint64_t v27;
  int64x2_t v28;
  char *v29;
  _QWORD *v30;

  v3 = (char **)result;
  v4 = result + 2;
  v5 = result[2];
  v6 = (_QWORD *)result[1];
  if ((unint64_t)v6 >= v5)
  {
    v11 = ((uint64_t)v6 - *result) >> 4;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60)
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    v13 = v5 - *result;
    if (v13 >> 3 > v12)
      v12 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    v30 = v4;
    v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v14);
    v17 = &v15[16 * v11];
    v18 = *a2;
    *(_OWORD *)v17 = *a2;
    if (*((_QWORD *)&v18 + 1))
    {
      v19 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
    v22 = *v3;
    v21 = v3[1];
    if (v21 == *v3)
    {
      v25 = vdupq_n_s64((unint64_t)v21);
      v23 = &v15[16 * v11];
    }
    else
    {
      v23 = &v15[16 * v11];
      do
      {
        v24 = *((_OWORD *)v21 - 1);
        v21 -= 16;
        *((_OWORD *)v23 - 1) = v24;
        v23 -= 16;
        *(_QWORD *)v21 = 0;
        *((_QWORD *)v21 + 1) = 0;
      }
      while (v21 != v22);
      v25 = *(int64x2_t *)v3;
    }
    v10 = v17 + 16;
    *v3 = v23;
    v3[1] = v17 + 16;
    v28 = v25;
    v26 = v3[2];
    v3[2] = &v15[16 * v16];
    v29 = v26;
    v27 = v25.i64[0];
    result = (_QWORD *)std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)&v27);
  }
  else
  {
    *v6 = *(_QWORD *)a2;
    v7 = *((_QWORD *)a2 + 1);
    v6[1] = v7;
    if (v7)
    {
      v8 = (unint64_t *)(v7 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    v10 = (char *)(v6 + 2);
  }
  v3[1] = v10;
  return result;
}

BOOL siri::dialogengine::ChunkList::IsEmpty(siri::dialogengine::ChunkList *this)
{
  return *(_QWORD *)this == *((_QWORD *)this + 1);
}

BOOL siri::dialogengine::ChunkList::HasChildren(siri::dialogengine::ChunkList *this)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  const void *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _BOOL4 v7;
  void *v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)this;
  v2 = *((_QWORD *)this + 1);
  if (*(_QWORD *)this != v2)
  {
    while (1)
    {
      v4 = *(const void **)v1;
      v3 = *(std::__shared_weak_count **)(v1 + 8);
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v6 = __ldxr(p_shared_owners);
        while (__stxr(v6 + 1, p_shared_owners));
      }
      if (v4)
      {
        {
          v7 = 0;
          if (v3)
            goto LABEL_12;
          goto LABEL_16;
        }
      }
      else
      {
        v8 = 0;
      }
      v7 = v8 == 0;
      if (v3)
      {
LABEL_12:
        v9 = (unint64_t *)&v3->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
LABEL_16:
      v1 += 16;
      if (v1 == v2 || !v7)
        return !v7;
    }
  }
  return 0;
}

uint64_t siri::dialogengine::ChunkList::HasRequiredVariablesOrPhrases(siri::dialogengine::ChunkList *this)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  const void *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  int v12;

  v1 = *(_QWORD *)this;
  v2 = *((_QWORD *)this + 1);
  if (*(_QWORD *)this != v2)
  {
    while (1)
    {
      v4 = *(const void **)v1;
      v3 = *(std::__shared_weak_count **)(v1 + 8);
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v6 = __ldxr(p_shared_owners);
        while (__stxr(v6 + 1, p_shared_owners));
      }
      if (v4
      {
        v9 = 1;
        if (v3)
        {
LABEL_13:
          v10 = (unint64_t *)&v3->__shared_owners_;
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 - 1, v10));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
            std::__shared_weak_count::__release_weak(v3);
          }
        }
      }
      else
      {
        v9 = 0;
        if (v3)
          goto LABEL_13;
      }
      v1 += 16;
      if (v1 == v2)
        v12 = 1;
      else
        v12 = v9;
      if (v12 == 1)
        return v9;
    }
  }
  return 0;
}

void siri::dialogengine::ChunkList::GetOuterChunks(siri::dialogengine::ChunkList *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  const void *v8;
  char *v9;
  unint64_t v10;
  char *v11;
  int v12;
  const void *v13;
  char *v14;
  char *v15;
  char v16;
  std::string::size_type size;
  std::string::size_type v18;
  int v19;
  std::string *v20;
  uint64_t v21;
  std::string *v22;
  int v23;
  int v24;
  int v25;
  int v26;
  BOOL v28;
  BOOL v29;
  std::string *v30;
  std::string v31;
  std::string v32;

  v4 = *(_QWORD *)this;
  v5 = (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 4;
  if (v5 > a2)
  {
    v8 = *(const void **)(v4 + 16 * a2);
    if (v8)
    {
      if (v9)
      {
        v10 = a2 + 1;
        if (a2 + 1 < v5)
        {
          v11 = v9;
          v12 = 0;
          v30 = (std::string *)(v9 + 200);
          while (1)
          {
            v13 = *(const void **)(v4 + 16 * v10);
            if (!v13)
              goto LABEL_44;
            if (!v14)
              goto LABEL_44;
            v15 = v14;
            if (v14[223] < 0)
              std::string::__init_copy_ctor_external(&v32, *((const std::string::value_type **)v14 + 25), *((_QWORD *)v14 + 26));
            else
              v32 = *(std::string *)(v14 + 200);
            if (v11[223] < 0)
              std::string::__init_copy_ctor_external(&v31, *((const std::string::value_type **)v11 + 25), *((_QWORD *)v11 + 26));
            else
              v31 = *v30;
            v16 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
            if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
            else
              size = v32.__r_.__value_.__l.__size_;
            v18 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
            v19 = SHIBYTE(v31.__r_.__value_.__r.__words[2]);
            if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v18 = v31.__r_.__value_.__l.__size_;
            if (size != v18)
            {
              v29 = 0;
              if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_36;
              goto LABEL_41;
            }
            v20 = (v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? &v31
                : (std::string *)v31.__r_.__value_.__r.__words[0];
            if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
              break;
            if (*((_BYTE *)&v32.__r_.__value_.__s + 23))
            {
              v21 = HIBYTE(v32.__r_.__value_.__r.__words[2]) - 1;
              v22 = &v32;
              do
              {
                v24 = v22->__r_.__value_.__s.__data_[0];
                v22 = (std::string *)((char *)v22 + 1);
                v23 = v24;
                v26 = v20->__r_.__value_.__s.__data_[0];
                v20 = (std::string *)((char *)v20 + 1);
                v25 = v26;
                v28 = v21-- != 0;
                v29 = v23 == v25;
              }
              while (v23 == v25 && v28);
LABEL_35:
              if ((v19 & 0x80000000) == 0)
                goto LABEL_36;
              goto LABEL_41;
            }
            v29 = 1;
            if ((SHIBYTE(v31.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_36:
              if ((v16 & 0x80) == 0)
                goto LABEL_37;
              goto LABEL_42;
            }
LABEL_41:
            operator delete(v31.__r_.__value_.__l.__data_);
            if ((*((_BYTE *)&v32.__r_.__value_.__s + 23) & 0x80) == 0)
            {
LABEL_37:
              if (!v29)
                goto LABEL_43;
              goto LABEL_38;
            }
LABEL_42:
            operator delete(v32.__r_.__value_.__l.__data_);
            if (!v29)
            {
LABEL_43:
              v4 = *(_QWORD *)this;
              goto LABEL_44;
            }
LABEL_38:
            v4 = *(_QWORD *)this;
            v12 = v12 + v15[224] - v15[225];
            if (v12 < 0)
            {
              *(_QWORD *)a3 = 0;
              *(_QWORD *)(a3 + 8) = 0;
              *(_QWORD *)(a3 + 16) = 0;
              std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<siri::dialogengine::ChunkText> const*>,std::__wrap_iter<std::shared_ptr<siri::dialogengine::ChunkText> const*>>((char *)a3, (_QWORD *)(v4 + 16 * a2), (_QWORD *)(v4 + 16 * v10 + 16), (uint64_t)(16 * v10 + 16 - 16 * a2) >> 4);
              return;
            }
LABEL_44:
            if (++v10 >= (*((_QWORD *)this + 1) - v4) >> 4)
              goto LABEL_45;
          }
          v29 = memcmp(v32.__r_.__value_.__l.__data_, v20, v32.__r_.__value_.__l.__size_) == 0;
          goto LABEL_35;
        }
      }
    }
  }
LABEL_45:
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
}

void sub_1BFC51DD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<siri::dialogengine::ChunkText> const*>,std::__wrap_iter<std::shared_ptr<siri::dialogengine::ChunkText> const*>>(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1BFC51E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ChunkList::GetInnerChunks(siri::dialogengine::ChunkList *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  char v17;

  siri::dialogengine::ChunkList::GetOuterChunks(this, a2, (uint64_t)&v13);
  v5 = v13;
  v4 = v14;
  v6 = v14 - v13;
  if ((unint64_t)(v14 - v13) < 0x11)
  {
    *(_QWORD *)a3 = v13;
    *(_QWORD *)(a3 + 8) = v4;
    *(_QWORD *)(a3 + 16) = v15;
    v14 = 0;
    v15 = 0;
    v13 = 0;
  }
  else
  {
    v7 = (v6 >> 4) - 1;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    v16 = (void **)a3;
    v17 = 0;
    if (v6 >> 4 != 2)
    {
      std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__vallocate[abi:ne180100]((_QWORD *)a3, (16 * v7 - 16) >> 4);
      v8 = (_QWORD *)(v5 + 16);
      v9 = *(_QWORD **)(a3 + 8);
      do
      {
        *v9 = *v8;
        v10 = v8[1];
        v9[1] = v10;
        if (v10)
        {
          v11 = (unint64_t *)(v10 + 8);
          do
            v12 = __ldxr(v11);
          while (__stxr(v12 + 1, v11));
        }
        v8 += 2;
        v9 += 2;
      }
      while (v8 != (_QWORD *)(v5 + 16 * v7));
      *(_QWORD *)(a3 + 8) = v9;
    }
  }
  v16 = (void **)&v13;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v16);
}

void sub_1BFC51F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13)
{
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&a13);
  a13 = (void **)&a10;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::ChunkList::Validate(siri::dialogengine::ChunkList *this, siri::dialogengine::Context *a2, const siri::dialogengine::LineNumberBase *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __n128 v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  int v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __n128 v17;
  void **v18[3];
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void ***v23;

  v20 = 0;
  v21 = 0;
  v22 = 0;
  std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::ChunkText>*,std::shared_ptr<siri::dialogengine::ChunkText>*>((char *)&v20, *(_QWORD **)this, *((_QWORD **)this + 1), (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 4);
  v6 = v20;
  if (v21 == v20)
  {
    v8 = 1;
  }
  else
  {
    v7 = 0;
    LODWORD(v8) = 1;
    do
    {
      v9 = *(__n128 *)(v6 + 16 * v7);
      v19 = v9;
      v17 = v9;
      v10 = (std::__shared_weak_count *)v9.n128_u64[1];
      if (v9.n128_u64[1])
      {
        v11 = (unint64_t *)(v9.n128_u64[1] + 8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      siri::dialogengine::ChunkList::GetInnerChunks(this, v7, (uint64_t)v18);
      v13 = (*(uint64_t (**)(unint64_t, siri::dialogengine::Context *, const siri::dialogengine::LineNumberBase *, void ***, __n128))(*(_QWORD *)v17.n128_u64[0] + 16))(v17.n128_u64[0], a2, a3, v18, v17);
      v23 = v18;
      std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v8 = v13 & v8;
      ++v7;
      v6 = v20;
    }
    while (v7 < (v21 - v20) >> 4);
  }
  v18[0] = (void **)&v20;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](v18);
  return v8;
}

void sub_1BFC520EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void ***a20)
{
  a20 = &a12;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  a12 = (void **)&a17;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ChunkList::ToString(uint64_t **this@<X0>, uint64_t a2@<X8>)
{
  siri::dialogengine::ExpandToText(a2, *this, this[1]);
}

void siri::dialogengine::ExpandToText(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v3;
  std::string *v5;
  std::string *v6;
  std::string *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::string *v14;
  std::string *v15;
  std::string *v16;
  std::string v18;
  void *v19;
  char v20;
  void *v21;
  char v22;
  void *v23;
  char v24;
  void *v25;
  char v26;
  void *v27;
  char v28;
  void *v29;
  char v30;
  std::string __str;
  std::string v32;
  std::string v33;
  std::string v34;
  std::string v35;
  std::string v36;
  std::string __p;
  uint64_t v38;
  std::__shared_weak_count *v39;

  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if (a2 != a3)
  {
    v3 = a2;
    v16 = (std::string *)(a1 + 24);
    v15 = (std::string *)(a1 + 48);
    v14 = (std::string *)(a1 + 72);
    v5 = (std::string *)(a1 + 96);
    v6 = (std::string *)(a1 + 120);
    v7 = (std::string *)(a1 + 144);
    do
    {
      v8 = *v3;
      v9 = (std::__shared_weak_count *)v3[1];
      v38 = *v3;
      v39 = v9;
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      siri::dialogengine::SpeakableString::SpeakableString(&v18, (const siri::dialogengine::SpeakableString *)(v8 + 8));
      siri::dialogengine::SpeakableString::Append((siri::dialogengine::SpeakableString *)a1, (const siri::dialogengine::SpeakableString *)&v18, &__str);
      std::string::operator=((std::string *)a1, &__str);
      std::string::operator=(v16, &v32);
      std::string::operator=(v15, &v33);
      std::string::operator=(v14, &v34);
      std::string::operator=(v5, &v35);
      std::string::operator=(v6, &v36);
      std::string::operator=(v7, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v36.__r_.__value_.__l.__data_);
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v35.__r_.__value_.__l.__data_);
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v34.__r_.__value_.__l.__data_);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v32.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (v30 < 0)
        operator delete(v29);
      if (v28 < 0)
        operator delete(v27);
      if (v26 < 0)
        operator delete(v25);
      if (v24 < 0)
        operator delete(v23);
      if (v22 < 0)
        operator delete(v21);
      if (v20 < 0)
        operator delete(v19);
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v18.__r_.__value_.__l.__data_);
        if (v9)
        {
LABEL_36:
          v12 = (unint64_t *)&v9->__shared_owners_;
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 - 1, v12));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
      }
      else if (v9)
      {
        goto LABEL_36;
      }
      v3 += 2;
    }
    while (v3 != a3);
  }
}

void sub_1BFC52398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void **v8;
  uint64_t v9;
  va_list va;

  va_start(va, a8);
  siri::dialogengine::SpeakableString::~SpeakableString((void **)va);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v9 - 104);
  siri::dialogengine::SpeakableString::~SpeakableString(v8);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ChunkList::Expand(uint64_t **__return_ptr a1@<X8>, siri::dialogengine::ChunkList *this@<X0>, siri::dialogengine::Context *a3@<X1>)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  __int128 v18;
  int64x2_t v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  __int128 v24;
  void *__p[2];
  uint64_t v26;
  _QWORD **v27;
  std::__shared_weak_count *v28;
  int64x2_t v29;
  char *v30;
  _BYTE v31[24];
  char *v32;
  char **v33;

  v29 = 0uLL;
  v30 = 0;
  std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::ChunkText>*,std::shared_ptr<siri::dialogengine::ChunkText>*>(v29.i8, *(_QWORD **)this, *((_QWORD **)this + 1), (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 4);
  if (v29.i64[0] == v29.i64[1])
  {
    siri::dialogengine::ChunkList::ChunkList(a1, (uint64_t **)&v29);
  }
  else
  {
    siri::dialogengine::ExpandVarsAndPhrasesRecursive(&v27, a3, (uint64_t)&v29, 0);
    if (v27)
    {
      memset(v31, 0, sizeof(v31));
      std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::ChunkText>*,std::shared_ptr<siri::dialogengine::ChunkText>*>(v31, *v27, v27[1], ((char *)v27[1] - (char *)*v27) >> 4);
      std::vector<std::shared_ptr<siri::dialogengine::Node>>::__vdeallocate((void **)&v29);
      v29 = *(int64x2_t *)v31;
      v30 = *(char **)&v31[16];
      memset(v31, 0, sizeof(v31));
      __p[0] = v31;
      std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      __p[0] = 0;
      __p[1] = 0;
      v26 = 0;
      siri::dialogengine::ExpandTagsRecursive((char **)v31, a3, (uint64_t)&v29, (_QWORD **)__p);
      std::vector<std::shared_ptr<siri::dialogengine::Node>>::__vdeallocate((void **)&v29);
      v29 = *(int64x2_t *)v31;
      v30 = *(char **)&v31[16];
      memset(v31, 0, sizeof(v31));
      *(_QWORD *)&v24 = v31;
      std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
      *(_QWORD *)&v24 = __p;
      std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
      if (v29.i64[0] == v29.i64[1])
      {
        v5 = operator new();
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        siri::dialogengine::ChunkText::ChunkText(v5, (uint64_t)__p);
        *(_QWORD *)&v24 = v5;
        v6 = (_QWORD *)operator new();
        *v6 = &off_1E7939CE8;
        v6[1] = 0;
        v6[2] = 0;
        v6[3] = v5;
        *((_QWORD *)&v24 + 1) = v6;
        v7 = v29.i64[1];
        if (v29.i64[1] >= (unint64_t)v30)
        {
          v9 = (v29.i64[1] - v29.i64[0]) >> 4;
          if ((unint64_t)(v9 + 1) >> 60)
            std::vector<BOOL>::__throw_length_error[abi:ne180100]();
          v10 = (uint64_t)&v30[-v29.i64[0]] >> 3;
          if (v10 <= v9 + 1)
            v10 = v9 + 1;
          if ((unint64_t)&v30[-v29.i64[0]] >= 0x7FFFFFFFFFFFFFF0)
            v11 = 0xFFFFFFFFFFFFFFFLL;
          else
            v11 = v10;
          v33 = &v30;
          v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v11);
          v14 = &v12[16 * v9];
          *(_OWORD *)v14 = v24;
          v24 = 0uLL;
          v15 = (_QWORD *)v29.i64[1];
          v16 = (_QWORD *)v29.i64[0];
          if (v29.i64[1] == v29.i64[0])
          {
            v19 = vdupq_n_s64(v29.u64[1]);
            v17 = &v12[16 * v9];
          }
          else
          {
            v17 = &v12[16 * v9];
            do
            {
              v18 = *((_OWORD *)v15 - 1);
              v15 -= 2;
              *((_OWORD *)v17 - 1) = v18;
              v17 -= 16;
              *v15 = 0;
              v15[1] = 0;
            }
            while (v15 != v16);
            v19 = v29;
          }
          v8 = v14 + 16;
          v29.i64[0] = (uint64_t)v17;
          v29.i64[1] = (uint64_t)(v14 + 16);
          *(int64x2_t *)&v31[8] = v19;
          v20 = v30;
          v30 = &v12[16 * v13];
          v32 = v20;
          *(_QWORD *)v31 = v19.i64[0];
          std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)v31);
        }
        else
        {
          *(_OWORD *)v29.i64[1] = v24;
          v8 = (_OWORD *)(v7 + 16);
        }
        v29.i64[1] = (uint64_t)v8;
        if (SHIBYTE(v26) < 0)
          operator delete(__p[0]);
      }
      siri::dialogengine::ChunkList::ChunkList(a1, (uint64_t **)&v29);
    }
    else
    {
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    v21 = v28;
    if (v28)
    {
      p_shared_owners = (unint64_t *)&v28->__shared_owners_;
      do
        v23 = __ldaxr(p_shared_owners);
      while (__stlxr(v23 - 1, p_shared_owners));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
  *(_QWORD *)v31 = &v29;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)v31);
}

void sub_1BFC526C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, char a20)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a17 < 0)
    operator delete(__p);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  __p = &a20;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ExpandVarsAndPhrasesRecursive(_QWORD *a1, siri::dialogengine::Context *a2, uint64_t a3, unsigned int a4)
{
  uint64_t *v4;
  unint64_t v7;
  const void *v8;
  unint64_t v9;
  siri::dialogengine *v10;
  siri::dialogengine::ChunkPhrase *v11;
  _BOOL4 v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  _BOOL4 v21;
  int v22;
  _BYTE *v24;
  _BOOL4 v26;
  std::__shared_weak_count *v27;
  siri::dialogengine::SpeakableString *v28;
  unint64_t *v29;
  unint64_t v30;
  siri::dialogengine::ChunkText *v31;
  siri::dialogengine::SpeakableString *v32;
  uint64_t v33;
  _OWORD *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  _QWORD *v41;
  _QWORD *v42;
  char *v43;
  __int128 v44;
  int64x2_t v45;
  uint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  siri::dialogengine::SpeakableString *v52;
  const void **v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  BOOL v58;
  const void ***v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  __int128 v64;
  unint64_t *v65;
  unint64_t v66;
  _OWORD *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  __int128 v75;
  unint64_t *v76;
  unint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  char *v80;
  __int128 v81;
  int64x2_t v82;
  uint64_t v83;
  siri::dialogengine::SpeakableString *v84;
  siri::dialogengine::SpeakableString *v85;
  std::__shared_weak_count *size;
  unint64_t *v87;
  unint64_t v88;
  uint64_t **v89;
  char v90;
  __int128 *v93;
  __int128 v94;
  std::string v95;
  siri::dialogengine::SpeakableString *v96[2];
  _BYTE __str[32];
  __int128 v98;
  void *v99[2];
  __int128 v100;
  __int128 v101;
  void *v102[2];
  __int128 v103;
  __int128 v104;
  std::string __p;
  _BYTE v106[32];
  __int128 v107;
  void *v108[2];
  void *v109[2];
  __int128 v110;
  void *v111[2];
  void *v112[2];
  __int128 v113;
  std::string v114;
  int64x2_t v115;
  _QWORD v116[2];

  v115 = 0uLL;
  v116[0] = 0;
  v4 = *(uint64_t **)a3;
  if (*(_QWORD *)(a3 + 8) == *(_QWORD *)a3)
    goto LABEL_217;
  v7 = 0;
  while (1)
  {
    v8 = (const void *)v4[2 * v7];
    if (!v8)
      goto LABEL_185;
    if (v9 | (unint64_t)v10)
    {
      v11 = v10;
      v113 = 0u;
      memset(&v114, 0, sizeof(v114));
      *(_OWORD *)v111 = 0u;
      *(_OWORD *)v112 = 0u;
      *(_OWORD *)v109 = 0u;
      v110 = 0u;
      v107 = 0u;
      *(_OWORD *)v108 = 0u;
      memset(v106, 0, sizeof(v106));
      v12 = !siri::dialogengine::AllowEmptyPhrases(v10);
      if (v9)
        v13 = 0;
      else
        v13 = !v12;
      if (!v13)
      {
        (*(void (**)(_BYTE *__return_ptr, const void *, siri::dialogengine::Context *))(*(_QWORD *)v8 + 24))(__str, v8, a2);
        std::string::operator=((std::string *)v106, (const std::string *)__str);
        std::string::operator=((std::string *)&v106[24], (const std::string *)&__str[24]);
        std::string::operator=((std::string *)v108, (const std::string *)v99);
        std::string::operator=((std::string *)&v109[1], (const std::string *)((char *)&v100 + 8));
        std::string::operator=((std::string *)v111, (const std::string *)v102);
        std::string::operator=((std::string *)&v112[1], (const std::string *)((char *)&v103 + 8));
        std::string::operator=(&v114, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v104) < 0)
          operator delete(*((void **)&v103 + 1));
        if (SBYTE7(v103) < 0)
          operator delete(v102[0]);
        if (SHIBYTE(v101) < 0)
          operator delete(*((void **)&v100 + 1));
        if (SBYTE7(v100) < 0)
          operator delete(v99[0]);
        if (SHIBYTE(v98) < 0)
          operator delete(*(void **)&__str[24]);
        if ((__str[23] & 0x80000000) != 0)
          operator delete(*(void **)__str);
        v14 = HIBYTE(v107);
        if (v107 < 0)
          v14 = v107;
        if (!v14)
        {
          v15 = v106[23];
          if (v106[23] < 0)
            v15 = *(_QWORD *)&v106[8];
          if (!v15)
            goto LABEL_116;
        }
LABEL_100:
        v31 = (siri::dialogengine::ChunkText *)operator new();
        siri::dialogengine::ChunkText::ChunkText(v31, (const std::string *)v106);
        v96[0] = v31;
        v32 = (siri::dialogengine::SpeakableString *)operator new();
        *(_QWORD *)v32 = &off_1E7939CE8;
        *((_QWORD *)v32 + 1) = 0;
        *((_QWORD *)v32 + 2) = 0;
        *((_QWORD *)v32 + 3) = v31;
        v96[1] = v32;
        v33 = v115.i64[1];
        if (v115.i64[1] >= v116[0])
        {
          v35 = (v115.i64[1] - v115.i64[0]) >> 4;
          if ((unint64_t)(v35 + 1) >> 60)
            std::vector<BOOL>::__throw_length_error[abi:ne180100]();
          v36 = (v116[0] - v115.i64[0]) >> 3;
          if (v36 <= v35 + 1)
            v36 = v35 + 1;
          if (v116[0] - v115.i64[0] >= 0x7FFFFFFFFFFFFFF0uLL)
            v37 = 0xFFFFFFFFFFFFFFFLL;
          else
            v37 = v36;
          *(_QWORD *)&v98 = v116;
          v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v37);
          v40 = &v38[16 * v35];
          *(_OWORD *)v40 = *(_OWORD *)v96;
          v96[0] = 0;
          v96[1] = 0;
          v41 = (_QWORD *)v115.i64[1];
          v42 = (_QWORD *)v115.i64[0];
          if (v115.i64[1] == v115.i64[0])
          {
            v45 = vdupq_n_s64(v115.u64[1]);
            v43 = &v38[16 * v35];
          }
          else
          {
            v43 = &v38[16 * v35];
            do
            {
              v44 = *((_OWORD *)v41 - 1);
              v41 -= 2;
              *((_OWORD *)v43 - 1) = v44;
              v43 -= 16;
              *v41 = 0;
              v41[1] = 0;
            }
            while (v41 != v42);
            v45 = v115;
          }
          v34 = v40 + 16;
          v115.i64[0] = (uint64_t)v43;
          v115.i64[1] = (uint64_t)(v40 + 16);
          *(int64x2_t *)&__str[8] = v45;
          v46 = v116[0];
          v116[0] = &v38[16 * v39];
          *(_QWORD *)&__str[24] = v46;
          *(_QWORD *)__str = v45.i64[0];
          std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)__str);
        }
        else
        {
          *(_OWORD *)v115.i64[1] = *(_OWORD *)v96;
          v34 = (_OWORD *)(v33 + 16);
        }
        v115.i64[1] = (uint64_t)v34;
        v22 = 4;
        goto LABEL_120;
      }
      if (v11)
      {
        siri::dialogengine::ChunkPhrase::ExpandPtr(v11, a2, v96);
        if (v96[0])
        {
          siri::dialogengine::SpeakableString::SpeakableString((std::string *)__str, v96[0]);
        }
        else
        {
          v104 = 0u;
          memset(&__p, 0, sizeof(__p));
          *(_OWORD *)v102 = 0u;
          v103 = 0u;
          v100 = 0u;
          v101 = 0u;
          v98 = 0u;
          *(_OWORD *)v99 = 0u;
          memset(__str, 0, sizeof(__str));
        }
        std::string::operator=((std::string *)v106, (const std::string *)__str);
        std::string::operator=((std::string *)&v106[24], (const std::string *)&__str[24]);
        std::string::operator=((std::string *)v108, (const std::string *)v99);
        std::string::operator=((std::string *)&v109[1], (const std::string *)((char *)&v100 + 8));
        std::string::operator=((std::string *)v111, (const std::string *)v102);
        std::string::operator=((std::string *)&v112[1], (const std::string *)((char *)&v103 + 8));
        std::string::operator=(&v114, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v104) < 0)
          operator delete(*((void **)&v103 + 1));
        if (SBYTE7(v103) < 0)
          operator delete(v102[0]);
        if (SHIBYTE(v101) < 0)
          operator delete(*((void **)&v100 + 1));
        if (SBYTE7(v100) < 0)
          operator delete(v99[0]);
        if (SHIBYTE(v98) < 0)
          operator delete(*(void **)&__str[24]);
        if ((__str[23] & 0x80000000) != 0)
          operator delete(*(void **)__str);
        v28 = v96[0];
        v27 = (std::__shared_weak_count *)v96[1];
        if (!v96[1])
          goto LABEL_99;
        v29 = (unint64_t *)((char *)v96[1] + 8);
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
          if (v28)
            goto LABEL_100;
        }
        else
        {
LABEL_99:
          if (v28)
            goto LABEL_100;
        }
      }
LABEL_116:
      if (a4)
      {
        v47 = (_QWORD *)operator new();
        *v47 = 0;
        v47[1] = 0;
        v47[2] = 0;
        std::shared_ptr<siri::dialogengine::ChunkList>::shared_ptr[abi:ne180100]<siri::dialogengine::ChunkList,void>(a1, (uint64_t)v47);
      }
      else
      {
        *a1 = 0;
        a1[1] = 0;
      }
      v22 = 1;
LABEL_120:
      if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v114.__r_.__value_.__l.__data_);
      if (SHIBYTE(v113) < 0)
        operator delete(v112[1]);
      if (SHIBYTE(v112[0]) < 0)
        operator delete(v111[0]);
      if (SHIBYTE(v110) < 0)
        operator delete(v109[1]);
      if (SHIBYTE(v109[0]) < 0)
        operator delete(v108[0]);
      if (SHIBYTE(v107) < 0)
        operator delete(*(void **)&v106[24]);
      if ((v106[23] & 0x80000000) != 0)
        operator delete(*(void **)v106);
      goto LABEL_141;
    }
    if (!v16)
      goto LABEL_185;
    v17 = (uint64_t)v16;
    v18 = v16 + 200;
    if (v16[223] < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v106, *((const std::string::value_type **)v16 + 25), *((_QWORD *)v16 + 26));
    }
    else
    {
      *(_OWORD *)v106 = *(_OWORD *)v18;
      *(_QWORD *)&v106[16] = *((_QWORD *)v16 + 27);
    }
    if ((v106[23] & 0x80000000) == 0)
    {
      if (v106[23] == 3 && *(unsigned __int16 *)v106 == 28783 && v106[2] == 116)
        goto LABEL_53;
      goto LABEL_56;
    }
    if (*(_QWORD *)&v106[8] == 3)
      break;
    operator delete(*(void **)v106);
LABEL_56:
    if (*(char *)(v17 + 223) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v106, *(const std::string::value_type **)(v17 + 200), *(_QWORD *)(v17 + 208));
    }
    else
    {
      *(_OWORD *)v106 = *(_OWORD *)v18;
      *(_QWORD *)&v106[16] = *((_QWORD *)v18 + 2);
    }
    if ((v106[23] & 0x80000000) != 0)
    {
      v24 = *(_BYTE **)v106;
      if (*(_QWORD *)&v106[8] != 6)
        goto LABEL_184;
      v26 = **(_DWORD **)v106 != 762929523 || *(_WORD *)(*(_QWORD *)v106 + 4) != 29537;
      operator delete(*(void **)v106);
      if (v26)
        goto LABEL_185;
    }
    else
    {
      if (v106[23] != 6)
        goto LABEL_185;
      if (*(_DWORD *)v106 != 762929523 || *(unsigned __int16 *)&v106[4] != 29537)
        goto LABEL_185;
    }
    std::string::basic_string[abi:ne180100]<0>(v106, "interpret-as");
    siri::dialogengine::ChunkText::GetAttribute(v17, (uint64_t)v106, (std::string *)__str);
    if ((v106[23] & 0x80000000) != 0)
      operator delete(*(void **)v106);
    if ((__str[23] & 0x80000000) != 0)
    {
      v24 = *(_BYTE **)__str;
      if (*(_QWORD *)&__str[8] != 5)
        goto LABEL_184;
    }
    else
    {
      if (__str[23] != 5)
        goto LABEL_185;
      v24 = __str;
    }
    if (*(_DWORD *)v24 != 1852794992 || v24[4] != 101)
    {
      if ((__str[23] & 0x80) != 0)
        goto LABEL_183;
      goto LABEL_185;
    }
    siri::dialogengine::ChunkList::ChunkList((uint64_t **)v106, (uint64_t **)a3);
    siri::dialogengine::ChunkList::GetInnerChunks((siri::dialogengine::ChunkList *)v106, v7, (uint64_t)v96);
    v95.__r_.__value_.__r.__words[0] = (std::string::size_type)v106;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);
    v53 = (const void **)v96[0];
    v52 = v96[1];
    if (v96[0] == v96[1])
      goto LABEL_182;
    v90 = 0;
    do
    {
      if (!*v53)
        goto LABEL_178;
      if (!v54)
        goto LABEL_178;
      v55 = (uint64_t)v54;
      std::string::basic_string[abi:ne180100]<0>(&v95, "list");
      siri::dialogengine::ChunkText::GetAttribute(v55, (uint64_t)&v95, (std::string *)v106);
      if (v106[23] >= 0)
        v56 = v106[23];
      else
        v56 = *(_QWORD *)&v106[8];
      if ((v106[23] & 0x80000000) != 0)
        operator delete(*(void **)v106);
      if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v95.__r_.__value_.__l.__data_);
        if (!v56)
          goto LABEL_178;
      }
      else if (!v56)
      {
        goto LABEL_178;
      }
      std::string::basic_string[abi:ne180100]<0>(v106, "itemformat");
      siri::dialogengine::ChunkText::GetAttribute(v55, (uint64_t)v106, &v95);
      if ((v106[23] & 0x80000000) != 0)
        operator delete(*(void **)v106);
      std::string::basic_string[abi:ne180100]<0>(v106, "[say-as interpret-as=phone]");
      v57 = siri::dialogengine::StringStartsWith(&v95, v106);
      v58 = v57;
      if ((v106[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)v106);
        if (!v58)
        {
LABEL_169:
          v59 = (const void ***)(v55 + 176);
          std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&v93, v59);
          std::string::basic_string[abi:ne180100]<0>(v106, "itemformat");
          std::string::basic_string[abi:ne180100]<0>(&v106[24], "[say-as interpret-as=phone]{}[/say-as]");
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string>>((uint64_t **)&v93, (const void **)v106, (uint64_t)v106);
          if (SHIBYTE(v107) < 0)
            operator delete(*(void **)&v106[24]);
          if ((v106[23] & 0x80000000) != 0)
            operator delete(*(void **)v106);
          if (v59 != (const void ***)&v93)
            std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t)v59, v93, &v94);
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((_QWORD *)v94);
          v90 = 1;
        }
      }
      else if (!v57)
      {
        goto LABEL_169;
      }
      if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v95.__r_.__value_.__l.__data_);
LABEL_178:
      v53 += 2;
    }
    while (v53 != (const void **)v52);
    if ((v90 & 1) == 0)
    {
LABEL_182:
      *(_QWORD *)v106 = v96;
      std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)v106);
      if ((__str[23] & 0x80) != 0)
      {
LABEL_183:
        v24 = *(_BYTE **)__str;
LABEL_184:
        operator delete(v24);
      }
LABEL_185:
      v62 = *(uint64_t **)a3;
      v63 = v115.i64[1];
      if (v115.i64[1] >= v116[0])
      {
        v68 = (v115.i64[1] - v115.i64[0]) >> 4;
        v69 = v68 + 1;
        if ((unint64_t)(v68 + 1) >> 60)
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        v70 = v116[0] - v115.i64[0];
        if ((v116[0] - v115.i64[0]) >> 3 > v69)
          v69 = v70 >> 3;
        if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF0)
          v71 = 0xFFFFFFFFFFFFFFFLL;
        else
          v71 = v69;
        *(_QWORD *)&v107 = v116;
        v72 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v71);
        v74 = &v72[16 * v68];
        v75 = *(_OWORD *)&v62[2 * v7];
        *(_OWORD *)v74 = v75;
        if (*((_QWORD *)&v75 + 1))
        {
          v76 = (unint64_t *)(*((_QWORD *)&v75 + 1) + 8);
          do
            v77 = __ldxr(v76);
          while (__stxr(v77 + 1, v76));
        }
        v78 = (_QWORD *)v115.i64[1];
        v79 = (_QWORD *)v115.i64[0];
        if (v115.i64[1] == v115.i64[0])
        {
          v82 = vdupq_n_s64(v115.u64[1]);
          v80 = &v72[16 * v68];
        }
        else
        {
          v80 = &v72[16 * v68];
          do
          {
            v81 = *((_OWORD *)v78 - 1);
            v78 -= 2;
            *((_OWORD *)v80 - 1) = v81;
            v80 -= 16;
            *v78 = 0;
            v78[1] = 0;
          }
          while (v78 != v79);
          v82 = v115;
        }
        v67 = v74 + 16;
        v115.i64[0] = (uint64_t)v80;
        v115.i64[1] = (uint64_t)(v74 + 16);
        *(int64x2_t *)&v106[8] = v82;
        v83 = v116[0];
        v116[0] = &v72[16 * v73];
        *(_QWORD *)&v106[24] = v83;
        *(_QWORD *)v106 = v82.i64[0];
        std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)v106);
      }
      else
      {
        v64 = *(_OWORD *)&v62[2 * v7];
        *(_OWORD *)v115.i64[1] = v64;
        if (*((_QWORD *)&v64 + 1))
        {
          v65 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
          do
            v66 = __ldxr(v65);
          while (__stxr(v66 + 1, v65));
        }
        v67 = (_OWORD *)(v63 + 16);
      }
      v115.i64[1] = (uint64_t)v67;
      goto LABEL_206;
    }
    siri::dialogengine::ExpandVarsAndPhrasesRecursive(&v95, a2, v96, a4);
    if (v95.__r_.__value_.__r.__words[0])
    {
      memset(v106, 0, 24);
      std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::ChunkText>*,std::shared_ptr<siri::dialogengine::ChunkText>*>(v106, *(_QWORD **)v95.__r_.__value_.__l.__data_, *(_QWORD **)(v95.__r_.__value_.__r.__words[0] + 8), (uint64_t)(*(_QWORD *)(v95.__r_.__value_.__r.__words[0] + 8) - *(_QWORD *)v95.__r_.__value_.__l.__data_) >> 4);
      v61 = *(uint64_t **)&v106[8];
      v60 = *(uint64_t **)v106;
    }
    else
    {
      v61 = 0;
      v60 = 0;
      memset(v106, 0, 24);
    }
    std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<siri::dialogengine::ChunkText>*>,std::__wrap_iter<std::shared_ptr<siri::dialogengine::ChunkText>*>>(&v115, v115.i64[1], v60, v61, ((char *)v61 - (char *)v60) >> 4);
    v85 = v96[0];
    v84 = v96[1];
    v93 = (__int128 *)v106;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v93);
    size = (std::__shared_weak_count *)v95.__r_.__value_.__l.__size_;
    if (v95.__r_.__value_.__l.__size_)
    {
      v87 = (unint64_t *)(v95.__r_.__value_.__l.__size_ + 8);
      do
        v88 = __ldaxr(v87);
      while (__stlxr(v88 - 1, v87));
      if (!v88)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v7 += ((v84 - v85) >> 4) + 1;
    *(_QWORD *)v106 = v96;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)v106);
    if ((__str[23] & 0x80000000) != 0)
      operator delete(*(void **)__str);
LABEL_206:
    ++v7;
    v4 = *(uint64_t **)a3;
    if (v7 >= (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 4)
    {
LABEL_217:
      v89 = (uint64_t **)operator new();
      siri::dialogengine::ChunkList::ChunkList(v89, (uint64_t **)&v115);
      std::shared_ptr<siri::dialogengine::ChunkList>::shared_ptr[abi:ne180100]<siri::dialogengine::ChunkList,void>(a1, (uint64_t)v89);
      goto LABEL_218;
    }
  }
  v21 = **(_WORD **)v106 != 28783 || *(_BYTE *)(*(_QWORD *)v106 + 2) != 116;
  operator delete(*(void **)v106);
  if (v21)
    goto LABEL_56;
LABEL_53:
  siri::dialogengine::ChunkList::ChunkList((uint64_t **)__str, (uint64_t **)a3);
  siri::dialogengine::ChunkList::GetInnerChunks((siri::dialogengine::ChunkList *)__str, v7, (uint64_t)v106);
  v96[0] = (siri::dialogengine::SpeakableString *)__str;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)v96);
  siri::dialogengine::ExpandVarsAndPhrasesRecursive(v96, a2, v106, 1);
  if (v96[0])
  {
    memset(__str, 0, 24);
    std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::ChunkText>*,std::shared_ptr<siri::dialogengine::ChunkText>*>(__str, *(_QWORD **)v96[0], *((_QWORD **)v96[0] + 1), (uint64_t)(*((_QWORD *)v96[0] + 1) - *(_QWORD *)v96[0]) >> 4);
    std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<siri::dialogengine::ChunkText>*>,std::__wrap_iter<std::shared_ptr<siri::dialogengine::ChunkText>*>>(&v115, v115.i64[1], *(uint64_t **)__str, *(uint64_t **)&__str[8], (uint64_t)(*(_QWORD *)&__str[8] - *(_QWORD *)__str) >> 4);
    v7 += ((uint64_t)(*(_QWORD *)&v106[8] - *(_QWORD *)v106) >> 4) + 1;
    v95.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);
    v22 = 4;
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
    v22 = 1;
  }
  v48 = (std::__shared_weak_count *)v96[1];
  if (v96[1])
  {
    v49 = (unint64_t *)((char *)v96[1] + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  *(_QWORD *)__str = v106;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
LABEL_141:
  if (v22 == 4)
    goto LABEL_206;
LABEL_218:
  *(_QWORD *)v106 = &v115;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)v106);
}

void sub_1BFC533FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60)
{
  uint64_t v60;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  a60 = &a31;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a60);
  if (a40 < 0)
    operator delete(__p);
  a31 = v60 - 112;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ExpandTagsRecursive(char **a1, siri::dialogengine *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v6;
  unint64_t v7;
  std::string::size_type v8;
  const char *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  unint64_t *v14;
  unint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  __int128 v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  char *v29;
  __int128 v30;
  int64x2_t v31;
  std::string::size_type v32;
  uint64_t *v33;
  const void **v34;
  const void *v35;
  void *v36;
  uint64_t v37;
  const siri::dialogengine::ChunkTag *v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  __int128 v52;
  unint64_t *v53;
  unint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  __int128 v58;
  int64x2_t v59;
  std::string::size_type *i;
  std::string::size_type *v63;
  std::string::size_type v64;
  std::__shared_weak_count *v65;
  unint64_t *p_shared_owners;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  std::string::size_type v70;
  std::string *v71;
  int data;
  int v73;
  std::string *v74;
  int data_low;
  int v76;
  std::string::size_type v78;
  int v79;
  __int128 v80;
  int v82;
  uint64_t v83;
  uint64_t v84;
  siri::dialogengine::ChunkText *v85;
  _QWORD *v86;
  uint64_t v87;
  _OWORD *v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  char *v92;
  uint64_t v93;
  char *v94;
  _QWORD *v95;
  _QWORD *v96;
  char *v97;
  __int128 v98;
  int64x2_t v99;
  std::string::size_type v101;
  int v102;
  uint64_t *v103;
  uint64_t *v104;
  uint64_t v105;
  unint64_t v106;
  const void *v107;
  char *v108;
  uint64_t v109;
  std::string *v110;
  BOOL v111;
  BOOL v113;
  void *v115;
  std::string::size_type size;
  double v125;
  double v126;
  unsigned __int8 *v127;
  int v128;
  int v129;
  char v131;
  double v132;
  double v133;
  unsigned __int8 *v134;
  int v135;
  int v136;
  char v138;
  std::string *v139;
  __int128 v140;
  std::string *v141;
  std::string::size_type v142;
  char v143;
  void *v144;
  std::string::size_type v145;
  void *v146;
  siri::dialogengine::ChunkText *v147;
  _QWORD *v148;
  _QWORD *v149;
  _QWORD *v150;
  uint64_t v151;
  _QWORD *v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  std::string::size_type v156;
  unint64_t *v157;
  unint64_t v158;
  std::string::size_type v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  unsigned __int8 v165;
  unint64_t v166;
  uint64_t v167;
  std::string::size_type v168;
  uint64_t v169;
  _QWORD *v170;
  siri::dialogengine::RequestInfo *v171;
  std::string __p[2];
  void *v174[2];
  void *v175[2];
  __int128 v176;
  void *v177[2];
  void *v178[2];
  __int128 v179;
  std::string v180[6];
  int v181;
  std::string v182;
  std::string v183;
  std::string v184;
  std::string v185;
  std::string v186;
  std::string v187;
  std::string v188;
  std::string v189;
  std::string v190;
  std::string v191;
  std::string v192;
  std::string v193;
  std::string v194;
  std::string v195;
  std::string v196;
  std::string v197;
  std::string v198[2];
  void *v199[2];
  void *v200[2];
  __int128 v201;
  void *v202[2];
  void *v203[2];
  __int128 v204;
  std::string v205;
  std::string v206;
  std::string v207[2];
  void *v208[2];
  void *v209[2];
  __int128 v210;
  void *v211[2];
  void *v212[2];
  __int128 v213;
  std::string v214;
  std::string v215[2];
  void *v216[2];
  void *v217[2];
  __int128 v218;
  void *v219[2];
  void *v220[2];
  __int128 v221;
  std::string v222;
  std::string v223[2];
  void *v224[2];
  void *v225[2];
  __int128 v226;
  void *v227[2];
  void *v228[2];
  __int128 v229;
  std::string v230;
  std::string v231[2];
  void *v232[2];
  void *v233[2];
  __int128 v234;
  void *v235[2];
  void *v236[2];
  __int128 v237;
  std::string v238;
  std::string v239;
  void *v240;
  uint64_t v241;
  char v242;
  uint64_t v243;
  std::string v244;
  std::string v245;
  int64x2_t v246;
  char *v247;
  uint64_t *v248;
  uint64_t *v249;
  int64x2_t v250;
  char *v251;
  std::string v252;
  std::string v253[2];
  void *v254[2];
  void *v255[2];
  __int128 v256;
  void *v257[2];
  void *v258[2];
  __int128 v259;
  std::string v260;
  std::string __str[2];
  void *v262[2];
  __int128 v263;
  __int128 v264;
  void *v265[2];
  __int128 v266;
  __int128 v267;
  std::string v268;
  uint64_t v269;

  v269 = *MEMORY[0x1E0C80C00];
  v250 = 0uLL;
  v251 = 0;
  std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::ChunkText>*,std::shared_ptr<siri::dialogengine::ChunkText>*>(v250.i8, *a4, a4[1], ((char *)a4[1] - (char *)*a4) >> 4);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v6 = *(uint64_t **)a3;
  if (*(_QWORD *)(a3 + 8) == *(_QWORD *)a3)
    goto LABEL_572;
  v7 = 0;
  v8 = (std::string::size_type)(a1 + 2);
  v171 = (siri::dialogengine *)((char *)a2 + 8);
  v9 = "";
  do
  {
    v10 = (char *)v9;
    if (v7)
    {
      v11 = v7 - 1;
      v12 = v250.i64[1];
      if (v250.i64[1] >= (unint64_t)v251)
      {
        v17 = (v250.i64[1] - v250.i64[0]) >> 4;
        v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 60)
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        v19 = (uint64_t)&v251[-v250.i64[0]];
        if ((uint64_t)&v251[-v250.i64[0]] >> 3 > v18)
          v18 = v19 >> 3;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0)
          v20 = 0xFFFFFFFFFFFFFFFLL;
        else
          v20 = v18;
        __p[1].__r_.__value_.__l.__size_ = (std::string::size_type)&v251;
        v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v20);
        v23 = &v21[16 * v17];
        v24 = *(_OWORD *)&v6[2 * v11];
        *(_OWORD *)v23 = v24;
        if (*((_QWORD *)&v24 + 1))
        {
          v25 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v26 = __ldxr(v25);
          while (__stxr(v26 + 1, v25));
        }
        v27 = (_QWORD *)v250.i64[1];
        v28 = (_QWORD *)v250.i64[0];
        if (v250.i64[1] == v250.i64[0])
        {
          v31 = vdupq_n_s64(v250.u64[1]);
          v29 = &v21[16 * v17];
        }
        else
        {
          v29 = &v21[16 * v17];
          do
          {
            v30 = *((_OWORD *)v27 - 1);
            v27 -= 2;
            *((_OWORD *)v29 - 1) = v30;
            v29 -= 16;
            *v27 = 0;
            v27[1] = 0;
          }
          while (v27 != v28);
          v31 = v250;
        }
        v16 = v23 + 16;
        v250.i64[0] = (uint64_t)v29;
        v250.i64[1] = (uint64_t)(v23 + 16);
        *(int64x2_t *)&__p[0].__r_.__value_.__r.__words[1] = v31;
        v32 = (std::string::size_type)v251;
        v251 = &v21[16 * v22];
        __p[1].__r_.__value_.__r.__words[0] = v32;
        __p[0].__r_.__value_.__r.__words[0] = v31.i64[0];
        std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)__p);
      }
      else
      {
        v13 = *(_OWORD *)&v6[2 * v11];
        *(_OWORD *)v250.i64[1] = v13;
        if (*((_QWORD *)&v13 + 1))
        {
          v14 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
        }
        v16 = (_OWORD *)(v12 + 16);
      }
      v250.i64[1] = (uint64_t)v16;
    }
    v33 = *(uint64_t **)a3;
    v34 = (const void **)(*(_QWORD *)a3 + 16 * v7);
    v35 = *v34;
    if (!*v34
    {
      v39 = a1[1];
      v40 = (unint64_t)a1[2];
      if ((unint64_t)v39 >= v40)
      {
        v45 = (v39 - *a1) >> 4;
        v46 = v45 + 1;
        if ((unint64_t)(v45 + 1) >> 60)
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        v47 = v40 - (_QWORD)*a1;
        if (v47 >> 3 > v46)
          v46 = v47 >> 3;
        if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF0)
          v48 = 0xFFFFFFFFFFFFFFFLL;
        else
          v48 = v46;
        __p[1].__r_.__value_.__l.__size_ = v8;
        v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v48);
        v51 = &v49[16 * v45];
        v52 = *(_OWORD *)v34;
        *(_OWORD *)v51 = *(_OWORD *)v34;
        if (*((_QWORD *)&v52 + 1))
        {
          v53 = (unint64_t *)(*((_QWORD *)&v52 + 1) + 8);
          do
            v54 = __ldxr(v53);
          while (__stxr(v54 + 1, v53));
        }
        v56 = *a1;
        v55 = a1[1];
        v9 = v10;
        if (v55 == *a1)
        {
          v59 = vdupq_n_s64((unint64_t)v55);
          v57 = &v49[16 * v45];
        }
        else
        {
          v57 = &v49[16 * v45];
          do
          {
            v58 = *((_OWORD *)v55 - 1);
            v55 -= 16;
            *((_OWORD *)v57 - 1) = v58;
            v57 -= 16;
            *(_QWORD *)v55 = 0;
            *((_QWORD *)v55 + 1) = 0;
          }
          while (v55 != v56);
          v59 = *(int64x2_t *)a1;
        }
        v44 = v51 + 16;
        *a1 = v57;
        a1[1] = v51 + 16;
        *(int64x2_t *)&__p[0].__r_.__value_.__r.__words[1] = v59;
        v70 = (std::string::size_type)a1[2];
        a1[2] = &v49[16 * v50];
        __p[1].__r_.__value_.__r.__words[0] = v70;
        __p[0].__r_.__value_.__r.__words[0] = v59.i64[0];
        std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)__p);
      }
      else
      {
        *(_QWORD *)v39 = v35;
        v41 = v33[2 * v7 + 1];
        *((_QWORD *)v39 + 1) = v41;
        if (v41)
        {
          v42 = (unint64_t *)(v41 + 8);
          do
            v43 = __ldxr(v42);
          while (__stxr(v43 + 1, v42));
        }
        v44 = v39 + 16;
        v9 = v10;
      }
      a1[1] = v44;
      ++v7;
      goto LABEL_568;
    }
    v37 = (uint64_t)v36;
    siri::dialogengine::ChunkList::ChunkList((uint64_t **)__p, (uint64_t **)a3);
    siri::dialogengine::ChunkList::GetInnerChunks((siri::dialogengine::ChunkList *)__p, v7, (uint64_t)&v248);
    v9 = v10;
    __str[0].__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)__str);
    siri::dialogengine::ExpandTagsRecursive(&v246, a2, &v248, &v250);
    if (*(char *)(v37 + 223) < 0)
      std::string::__init_copy_ctor_external(&v245, *(const std::string::value_type **)(v37 + 200), *(_QWORD *)(v37 + 208));
    else
      v245 = *(std::string *)(v37 + 200);
    if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v245.__r_.__value_.__l.__size_ != 4)
      {
        if (v245.__r_.__value_.__l.__size_ != 8)
        {
          if (v245.__r_.__value_.__l.__size_ != 9)
            goto LABEL_116;
          if (*(_QWORD *)v245.__r_.__value_.__l.__data_ != 0x726F66736E617274
            || *(_BYTE *)(v245.__r_.__value_.__r.__words[0] + 8) != 109)
          {
            goto LABEL_116;
          }
          goto LABEL_66;
        }
        v71 = (std::string *)v245.__r_.__value_.__r.__words[0];
LABEL_100:
        if (v71->__r_.__value_.__r.__words[0] == 0x797469746E617571)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "value");
          siri::dialogengine::ChunkText::GetAttribute(v37, (uint64_t)__p, &v244);
          if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p[0].__r_.__value_.__l.__data_);
          std::string::basic_string[abi:ne180100]<0>(__str, "value");
          siri::dialogengine::ChunkText::GetAttribute(v37, (uint64_t)__str, __p);
          std::string::basic_string[abi:ne180100]<0>(v253, v10);
          std::string::basic_string[abi:ne180100]<0>(v231, v10);
          siri::dialogengine::ResolveValue((uint64_t)a2, (uint64_t)__p, 1, (uint64_t)v253, (uint64_t)v231, &v243);
          if (SHIBYTE(v231[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v231[0].__r_.__value_.__l.__data_);
          if (SHIBYTE(v253[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v253[0].__r_.__value_.__l.__data_);
          if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p[0].__r_.__value_.__l.__data_);
          if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str[0].__r_.__value_.__l.__data_);
          if (v243)
          {
            (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v243 + 48))(__p);
            if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(__str, __p[0].__r_.__value_.__l.__data_, __p[0].__r_.__value_.__l.__size_);
            else
              __str[0] = __p[0];
            if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v244.__r_.__value_.__l.__data_);
            v244 = __str[0];
            *((_BYTE *)&__str[0].__r_.__value_.__s + 23) = 0;
            __str[0].__r_.__value_.__s.__data_[0] = 0;
            if (SHIBYTE(v180[0].__r_.__value_.__r.__words[2]) < 0)
              operator delete(v180[0].__r_.__value_.__l.__data_);
            if (SHIBYTE(v179) < 0)
              operator delete(v178[1]);
            if (SHIBYTE(v178[0]) < 0)
              operator delete(v177[0]);
            if (SHIBYTE(v176) < 0)
              operator delete(v175[1]);
            if (SHIBYTE(v175[0]) < 0)
              operator delete(v174[0]);
            if (SHIBYTE(__p[1].__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p[1].__r_.__value_.__l.__data_);
            if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p[0].__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(__str, "includeValue");
          siri::dialogengine::ChunkText::GetAttribute(v37, (uint64_t)__str, __p);
          siri::dialogengine::StringToLower((uint64_t)__p, (uint64_t)&v240);
          if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p[0].__r_.__value_.__l.__data_);
          if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str[0].__r_.__value_.__l.__data_);
          std::string::basic_string[abi:ne180100]<0>(__p, "format");
          siri::dialogengine::ChunkText::GetAttribute(v37, (uint64_t)__p, &v239);
          if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p[0].__r_.__value_.__l.__data_);
          v179 = 0u;
          memset(v180, 0, 24);
          *(_OWORD *)v177 = 0u;
          *(_OWORD *)v178 = 0u;
          *(_OWORD *)v175 = 0u;
          v176 = 0u;
          *(_OWORD *)v174 = 0u;
          memset(__p, 0, sizeof(__p));
          memset(&v268, 0, sizeof(v268));
          v267 = 0u;
          v266 = 0u;
          *(_OWORD *)v265 = 0u;
          v264 = 0u;
          v263 = 0u;
          *(_OWORD *)v262 = 0u;
          memset(__str, 0, sizeof(__str));
          memset(&v260, 0, sizeof(v260));
          v259 = 0u;
          *(_OWORD *)v258 = 0u;
          *(_OWORD *)v257 = 0u;
          v256 = 0u;
          *(_OWORD *)v255 = 0u;
          *(_OWORD *)v254 = 0u;
          memset(v253, 0, sizeof(v253));
          memset(&v238, 0, sizeof(v238));
          v237 = 0u;
          *(_OWORD *)v236 = 0u;
          *(_OWORD *)v235 = 0u;
          v234 = 0u;
          *(_OWORD *)v233 = 0u;
          *(_OWORD *)v232 = 0u;
          memset(v231, 0, sizeof(v231));
          memset(&v230, 0, sizeof(v230));
          v229 = 0u;
          *(_OWORD *)v228 = 0u;
          *(_OWORD *)v227 = 0u;
          v226 = 0u;
          *(_OWORD *)v225 = 0u;
          *(_OWORD *)v224 = 0u;
          memset(v223, 0, sizeof(v223));
          memset(&v222, 0, sizeof(v222));
          v221 = 0u;
          *(_OWORD *)v220 = 0u;
          *(_OWORD *)v219 = 0u;
          v218 = 0u;
          *(_OWORD *)v217 = 0u;
          *(_OWORD *)v216 = 0u;
          memset(v215, 0, sizeof(v215));
          memset(&v214, 0, sizeof(v214));
          v213 = 0u;
          *(_OWORD *)v212 = 0u;
          *(_OWORD *)v211 = 0u;
          v210 = 0u;
          *(_OWORD *)v209 = 0u;
          *(_OWORD *)v208 = 0u;
          memset(v207, 0, sizeof(v207));
          memset(&v206, 0, sizeof(v206));
          memset(&v205, 0, sizeof(v205));
          v204 = 0u;
          *(_OWORD *)v203 = 0u;
          *(_OWORD *)v202 = 0u;
          v201 = 0u;
          *(_OWORD *)v200 = 0u;
          *(_OWORD *)v199 = 0u;
          memset(v198, 0, sizeof(v198));
          v103 = v249;
          v104 = v248;
          if (v249 != v248)
          {
            v105 = 0;
            v106 = 0;
            while (1)
            {
              v107 = (const void *)v104[v105];
              if (v107)
              {
                if (v108)
                {
                  v109 = (uint64_t)v108;
                  if (v108[224])
                    break;
                }
              }
LABEL_349:
              ++v106;
              v105 += 2;
              if (v106 >= ((char *)v103 - (char *)v104) >> 4)
                goto LABEL_350;
            }
            if (v108[223] < 0)
              std::string::__init_copy_ctor_external(&v252, *((const std::string::value_type **)v108 + 25), *((_QWORD *)v108 + 26));
            else
              v252 = *(std::string *)(v108 + 200);
            siri::dialogengine::ChunkList::ChunkList((uint64_t **)&v189, &v248);
            siri::dialogengine::ChunkList::GetInnerChunks((siri::dialogengine::ChunkList *)&v189, v106, (uint64_t)&v197);
            v196.__r_.__value_.__r.__words[0] = (std::string::size_type)&v189;
            std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v196);
            siri::dialogengine::ExpandTagsRecursive(&v196, a2, &v197, &v250);
            if (SHIBYTE(v252.__r_.__value_.__r.__words[2]) < 0)
            {
              if ((uint64_t)v252.__r_.__value_.__l.__size_ <= 4)
              {
                if (v252.__r_.__value_.__l.__size_ != 3)
                {
                  if (v252.__r_.__value_.__l.__size_ != 4)
                    goto LABEL_346;
                  if (*(_DWORD *)v252.__r_.__value_.__l.__data_ == 1869768058)
                    goto LABEL_328;
                  if (*(_DWORD *)v252.__r_.__value_.__l.__data_ != 2037277037)
                  {
                    v110 = (std::string *)v252.__r_.__value_.__r.__words[0];
LABEL_246:
                    if (LODWORD(v110->__r_.__value_.__l.__data_) == 1851879539)
                    {
                      siri::dialogengine::ExpandToText((uint64_t)&v189, (uint64_t *)v196.__r_.__value_.__l.__data_, (uint64_t *)v196.__r_.__value_.__l.__size_);
                      std::string::operator=(v198, &v189);
                      std::string::operator=(&v198[1], &v190);
                      std::string::operator=((std::string *)v199, &v191);
                      std::string::operator=((std::string *)&v200[1], &v192);
                      std::string::operator=((std::string *)v202, &v193);
                      std::string::operator=((std::string *)&v203[1], &v194);
                      std::string::operator=(&v205, &v195);
LABEL_331:
                      if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v195.__r_.__value_.__l.__data_);
                      if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v194.__r_.__value_.__l.__data_);
                      if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v193.__r_.__value_.__l.__data_);
                      if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v192.__r_.__value_.__l.__data_);
                      if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v191.__r_.__value_.__l.__data_);
                      if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v190.__r_.__value_.__l.__data_);
                      if ((SHIBYTE(v189.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                        goto LABEL_346;
                      v115 = (void *)v189.__r_.__value_.__r.__words[0];
                      goto LABEL_345;
                    }
LABEL_346:
                    v189.__r_.__value_.__r.__words[0] = (std::string::size_type)&v196;
                    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v189);
                    v189.__r_.__value_.__r.__words[0] = (std::string::size_type)&v197;
                    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v189);
                    if (SHIBYTE(v252.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v252.__r_.__value_.__l.__data_);
                    v103 = v249;
                    v104 = v248;
                    goto LABEL_349;
                  }
                  goto LABEL_329;
                }
                if (*(_WORD *)v252.__r_.__value_.__l.__data_ != 28271
                  || *(_BYTE *)(v252.__r_.__value_.__r.__words[0] + 2) != 101)
                {
                  if (*(_WORD *)v252.__r_.__value_.__l.__data_ != 30580
                    || *(_BYTE *)(v252.__r_.__value_.__r.__words[0] + 2) != 111)
                  {
                    if (*(_WORD *)v252.__r_.__value_.__l.__data_ != 25958
                      || *(_BYTE *)(v252.__r_.__value_.__r.__words[0] + 2) != 119)
                    {
                      goto LABEL_346;
                    }
LABEL_320:
                    siri::dialogengine::ExpandToText((uint64_t)&v189, (uint64_t *)v196.__r_.__value_.__l.__data_, (uint64_t *)v196.__r_.__value_.__l.__size_);
                    std::string::operator=(v231, &v189);
                    std::string::operator=(&v231[1], &v190);
                    std::string::operator=((std::string *)v232, &v191);
                    std::string::operator=((std::string *)&v233[1], &v192);
                    std::string::operator=((std::string *)v235, &v193);
                    std::string::operator=((std::string *)&v236[1], &v194);
                    std::string::operator=(&v238, &v195);
                    goto LABEL_331;
                  }
LABEL_330:
                  siri::dialogengine::ExpandToText((uint64_t)&v189, (uint64_t *)v196.__r_.__value_.__l.__data_, (uint64_t *)v196.__r_.__value_.__l.__size_);
                  std::string::operator=(v253, &v189);
                  std::string::operator=(&v253[1], &v190);
                  std::string::operator=((std::string *)v254, &v191);
                  std::string::operator=((std::string *)&v255[1], &v192);
                  std::string::operator=((std::string *)v257, &v193);
                  std::string::operator=((std::string *)&v258[1], &v194);
                  std::string::operator=(&v260, &v195);
                  goto LABEL_331;
                }
LABEL_327:
                siri::dialogengine::ExpandToText((uint64_t)&v189, (uint64_t *)v196.__r_.__value_.__l.__data_, (uint64_t *)v196.__r_.__value_.__l.__size_);
                std::string::operator=(__str, &v189);
                std::string::operator=(&__str[1], &v190);
                std::string::operator=((std::string *)v262, &v191);
                std::string::operator=((std::string *)((char *)&v263 + 8), &v192);
                std::string::operator=((std::string *)v265, &v193);
                std::string::operator=((std::string *)((char *)&v266 + 8), &v194);
                std::string::operator=(&v268, &v195);
                goto LABEL_331;
              }
              if (v252.__r_.__value_.__l.__size_ != 5)
              {
                if (v252.__r_.__value_.__l.__size_ != 17)
                  goto LABEL_346;
                v113 = *(_QWORD *)v252.__r_.__value_.__l.__data_ == 0x6E6168747373656CLL
                    && *(_QWORD *)(v252.__r_.__value_.__r.__words[0] + 8) == 0x746C61757165726FLL;
                if (!v113 || *(_BYTE *)(v252.__r_.__value_.__r.__words[0] + 16) != 111)
                  goto LABEL_346;
LABEL_269:
                siri::dialogengine::ExpandToText((uint64_t)&v189, (uint64_t *)v196.__r_.__value_.__l.__data_, (uint64_t *)v196.__r_.__value_.__l.__size_);
                std::string::operator=(v207, &v189);
                std::string::operator=(&v207[1], &v190);
                std::string::operator=((std::string *)v208, &v191);
                std::string::operator=((std::string *)&v209[1], &v192);
                std::string::operator=((std::string *)v211, &v193);
                std::string::operator=((std::string *)&v212[1], &v194);
                std::string::operator=(&v214, &v195);
                if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v195.__r_.__value_.__l.__data_);
                if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v194.__r_.__value_.__l.__data_);
                if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v193.__r_.__value_.__l.__data_);
                if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v192.__r_.__value_.__l.__data_);
                if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v191.__r_.__value_.__l.__data_);
                if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v190.__r_.__value_.__l.__data_);
                if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v189.__r_.__value_.__l.__data_);
                std::string::basic_string[abi:ne180100]<0>(&v188, "value");
                siri::dialogengine::ChunkText::GetAttribute(v109, (uint64_t)&v188, &v189);
                if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v206.__r_.__value_.__l.__data_);
                v206 = v189;
                *((_BYTE *)&v189.__r_.__value_.__s + 23) = 0;
                v189.__r_.__value_.__s.__data_[0] = 0;
                if ((SHIBYTE(v188.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_346;
                v115 = (void *)v188.__r_.__value_.__r.__words[0];
LABEL_345:
                operator delete(v115);
                goto LABEL_346;
              }
              if (*(_DWORD *)v252.__r_.__value_.__l.__data_ != 1701344367
                || *(_BYTE *)(v252.__r_.__value_.__r.__words[0] + 4) != 114)
              {
                goto LABEL_346;
              }
            }
            else
            {
              if (HIBYTE(v252.__r_.__value_.__r.__words[2]) <= 4u)
              {
                if (HIBYTE(v252.__r_.__value_.__r.__words[2]) != 3)
                {
                  if (HIBYTE(v252.__r_.__value_.__r.__words[2]) != 4)
                    goto LABEL_346;
                  if (LODWORD(v252.__r_.__value_.__l.__data_) != 2037277037)
                  {
                    if (LODWORD(v252.__r_.__value_.__l.__data_) != 1869768058)
                    {
                      v110 = &v252;
                      goto LABEL_246;
                    }
LABEL_328:
                    siri::dialogengine::ExpandToText((uint64_t)&v189, (uint64_t *)v196.__r_.__value_.__l.__data_, (uint64_t *)v196.__r_.__value_.__l.__size_);
                    std::string::operator=(__p, &v189);
                    std::string::operator=(&__p[1], &v190);
                    std::string::operator=((std::string *)v174, &v191);
                    std::string::operator=((std::string *)&v175[1], &v192);
                    std::string::operator=((std::string *)v177, &v193);
                    std::string::operator=((std::string *)&v178[1], &v194);
                    std::string::operator=(v180, &v195);
                    goto LABEL_331;
                  }
LABEL_329:
                  siri::dialogengine::ExpandToText((uint64_t)&v189, (uint64_t *)v196.__r_.__value_.__l.__data_, (uint64_t *)v196.__r_.__value_.__l.__size_);
                  std::string::operator=(v223, &v189);
                  std::string::operator=(&v223[1], &v190);
                  std::string::operator=((std::string *)v224, &v191);
                  std::string::operator=((std::string *)&v225[1], &v192);
                  std::string::operator=((std::string *)v227, &v193);
                  std::string::operator=((std::string *)&v228[1], &v194);
                  std::string::operator=(&v230, &v195);
                  goto LABEL_331;
                }
                if (LOWORD(v252.__r_.__value_.__l.__data_) != 28271 || v252.__r_.__value_.__s.__data_[2] != 101)
                {
                  if (LOWORD(v252.__r_.__value_.__l.__data_) != 30580 || v252.__r_.__value_.__s.__data_[2] != 111)
                  {
                    if (LOWORD(v252.__r_.__value_.__l.__data_) != 25958 || v252.__r_.__value_.__s.__data_[2] != 119)
                      goto LABEL_346;
                    goto LABEL_320;
                  }
                  goto LABEL_330;
                }
                goto LABEL_327;
              }
              if (HIBYTE(v252.__r_.__value_.__r.__words[2]) != 5)
              {
                if (HIBYTE(v252.__r_.__value_.__r.__words[2]) != 17)
                  goto LABEL_346;
                v111 = v252.__r_.__value_.__r.__words[0] == 0x6E6168747373656CLL
                    && v252.__r_.__value_.__l.__size_ == 0x746C61757165726FLL;
                if (!v111 || v252.__r_.__value_.__s.__data_[16] != 111)
                  goto LABEL_346;
                goto LABEL_269;
              }
              if (LODWORD(v252.__r_.__value_.__l.__data_) != 1701344367 || v252.__r_.__value_.__s.__data_[4] != 114)
                goto LABEL_346;
            }
            siri::dialogengine::ExpandToText((uint64_t)&v189, (uint64_t *)v196.__r_.__value_.__l.__data_, (uint64_t *)v196.__r_.__value_.__l.__size_);
            std::string::operator=(v215, &v189);
            std::string::operator=(&v215[1], &v190);
            std::string::operator=((std::string *)v216, &v191);
            std::string::operator=((std::string *)&v217[1], &v192);
            std::string::operator=((std::string *)v219, &v193);
            std::string::operator=((std::string *)&v220[1], &v194);
            std::string::operator=(&v222, &v195);
            goto LABEL_331;
          }
LABEL_350:
          memset(&v197, 0, sizeof(v197));
          std::string::basic_string[abi:ne180100]<0>(&v189, "inflect");
          siri::dialogengine::ChunkText::GetAttribute(v37, (uint64_t)&v189, &v196);
          if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v189.__r_.__value_.__l.__data_);
          size = HIBYTE(v196.__r_.__value_.__r.__words[2]);
          if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = v196.__r_.__value_.__l.__size_;
          if (size)
          {
            siri::dialogengine::SemanticFeatureConstraint::FromString((uint64_t)a2, (unsigned __int8 *)&v196, (uint64_t *)&v189);
            std::vector<siri::dialogengine::SemanticFeatureConstraint>::__vdeallocate((void **)&v197.__r_.__value_.__l.__data_);
            v197 = v189;
            memset(&v189, 0, sizeof(v189));
            v252.__r_.__value_.__r.__words[0] = (std::string::size_type)&v189;
            std::vector<siri::dialogengine::SemanticFeatureConstraint>::__destroy_vector::operator()[abi:ne180100]((void ***)&v252);
          }
          v125 = siri::dialogengine::StringToDouble(&v244, 0);
          if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v189, __p[0].__r_.__value_.__l.__data_, __p[0].__r_.__value_.__l.__size_);
          else
            v189 = __p[0];
          if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v252, __str[0].__r_.__value_.__l.__data_, __str[0].__r_.__value_.__l.__size_);
          else
            v252 = __str[0];
          if (SHIBYTE(v253[0].__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v187, v253[0].__r_.__value_.__l.__data_, v253[0].__r_.__value_.__l.__size_);
          else
            v187 = v253[0];
          if (SHIBYTE(v231[0].__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v186, v231[0].__r_.__value_.__l.__data_, v231[0].__r_.__value_.__l.__size_);
          else
            v186 = v231[0];
          if (SHIBYTE(v223[0].__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v185, v223[0].__r_.__value_.__l.__data_, v223[0].__r_.__value_.__l.__size_);
          else
            v185 = v223[0];
          if (SHIBYTE(v215[0].__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v184, v215[0].__r_.__value_.__l.__data_, v215[0].__r_.__value_.__l.__size_);
          else
            v184 = v215[0];
          if (SHIBYTE(v207[0].__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v183, v207[0].__r_.__value_.__l.__data_, v207[0].__r_.__value_.__l.__size_);
          else
            v183 = v207[0];
          v126 = siri::dialogengine::StringToDouble(&v206, 0);
          if (v242 < 0)
          {
            if (v241 == 5)
            {
              v127 = (unsigned __int8 *)v240;
              goto LABEL_382;
            }
          }
          else if (v242 == 5)
          {
            v127 = (unsigned __int8 *)&v240;
LABEL_382:
            v128 = *(_DWORD *)v127;
            v129 = v127[4];
            v131 = v128 != 1936482662 || v129 != 101;
LABEL_389:
            siri::dialogengine::FormatQuantity(a2, (uint64_t)&v189, (uint64_t)&v252, (uint64_t)&v187, (uint64_t)&v186, (uint64_t)&v185, (uint64_t)&v184, (uint64_t)&v183, v125, v126, v131, (siri::dialogengine::SpeakableString *)v198, (uint64_t)&v239, 1, (uint64_t *)&v197);
            if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v183.__r_.__value_.__l.__data_);
            if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v184.__r_.__value_.__l.__data_);
            if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v185.__r_.__value_.__l.__data_);
            if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v186.__r_.__value_.__l.__data_);
            if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v187.__r_.__value_.__l.__data_);
            if (SHIBYTE(v252.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v252.__r_.__value_.__l.__data_);
            if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v189.__r_.__value_.__l.__data_);
            v132 = siri::dialogengine::StringToDouble(&v244, 0);
            if (SHIBYTE(__p[1].__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v189, __p[1].__r_.__value_.__l.__data_, __p[1].__r_.__value_.__l.__size_);
            else
              v189 = __p[1];
            if (SHIBYTE(__str[1].__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v252, __str[1].__r_.__value_.__l.__data_, __str[1].__r_.__value_.__l.__size_);
            else
              v252 = __str[1];
            if (SHIBYTE(v253[1].__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v186, v253[1].__r_.__value_.__l.__data_, v253[1].__r_.__value_.__l.__size_);
            else
              v186 = v253[1];
            if (SHIBYTE(v231[1].__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v185, v231[1].__r_.__value_.__l.__data_, v231[1].__r_.__value_.__l.__size_);
            else
              v185 = v231[1];
            if (SHIBYTE(v223[1].__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v184, v223[1].__r_.__value_.__l.__data_, v223[1].__r_.__value_.__l.__size_);
            else
              v184 = v223[1];
            if (SHIBYTE(v215[1].__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v183, v215[1].__r_.__value_.__l.__data_, v215[1].__r_.__value_.__l.__size_);
            else
              v183 = v215[1];
            if (SHIBYTE(v207[1].__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v182, v207[1].__r_.__value_.__l.__data_, v207[1].__r_.__value_.__l.__size_);
            else
              v182 = v207[1];
            v133 = siri::dialogengine::StringToDouble(&v206, 0);
            if (v242 < 0)
            {
              if (v241 == 5)
              {
                v134 = (unsigned __int8 *)v240;
                goto LABEL_429;
              }
            }
            else if (v242 == 5)
            {
              v134 = (unsigned __int8 *)&v240;
LABEL_429:
              v135 = *(_DWORD *)v134;
              v136 = v134[4];
              v138 = v135 != 1936482662 || v136 != 101;
LABEL_436:
              siri::dialogengine::FormatQuantity(a2, (uint64_t)&v189, (uint64_t)&v252, (uint64_t)&v186, (uint64_t)&v185, (uint64_t)&v184, (uint64_t)&v183, (uint64_t)&v182, v132, v133, v138, (siri::dialogengine::SpeakableString *)v198, (uint64_t)&v239, 0, (uint64_t *)&v197);
              if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v182.__r_.__value_.__l.__data_);
              if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v183.__r_.__value_.__l.__data_);
              if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v184.__r_.__value_.__l.__data_);
              if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v185.__r_.__value_.__l.__data_);
              if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v186.__r_.__value_.__l.__data_);
              if (SHIBYTE(v252.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v252.__r_.__value_.__l.__data_);
              if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v189.__r_.__value_.__l.__data_);
              siri::dialogengine::SpeakableString::SpeakableString((uint64_t)&v189, &v188, &v187);
            }
            v138 = 1;
            goto LABEL_436;
          }
          v131 = 1;
          goto LABEL_389;
        }
LABEL_116:
        if (siri::dialogengine::IsSSMLTag((siri::dialogengine *)v37, v38))
        {
          siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)__p, v171);
          v73 = v181;
          siri::dialogengine::RequestInfo::~RequestInfo((void **)&__p[0].__r_.__value_.__l.__data_);
          switch(v73)
          {
            case 2:
              if (siri::dialogengine::ConvertSSMLToTTSCode(a2, v37, (uint64_t)&v246))
                goto LABEL_561;
              break;
            case 1:
              goto LABEL_561;
            case 0:
              std::string::basic_string[abi:ne180100]<0>(v253, v10);
              siri::dialogengine::SpeakableString::SpeakableString(__str, (const siri::dialogengine::SpeakableString *)(*(_QWORD *)(*(_QWORD *)a3 + 16 * v7) + 8));
              if (SHIBYTE(__str[1].__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(v231, __str[1].__r_.__value_.__l.__data_, __str[1].__r_.__value_.__l.__size_);
              else
                v231[0] = __str[1];
              siri::dialogengine::SpeakableString::SpeakableString((uint64_t)__p, v253, v231);
          }
          goto LABEL_534;
        }
        if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0)
        {
          if (v245.__r_.__value_.__l.__size_ == 3)
          {
            v74 = (std::string *)v245.__r_.__value_.__r.__words[0];
LABEL_127:
            data_low = LOWORD(v74->__r_.__value_.__l.__data_);
            v76 = v74->__r_.__value_.__s.__data_[2];
            if (data_low != 29812 || v76 != 115)
              goto LABEL_534;
            std::string::basic_string[abi:ne180100]<0>(__p, "play");
            siri::dialogengine::ChunkText::GetAttribute(v37, (uint64_t)__p, v231);
            if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p[0].__r_.__value_.__l.__data_);
            v78 = HIBYTE(v231[0].__r_.__value_.__r.__words[2]);
            if ((v231[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v78 = v231[0].__r_.__value_.__l.__size_;
            if (v78)
            {
              v79 = 1;
            }
            else
            {
              std::string::basic_string[abi:ne180100]<0>(__str, "sirifamily");
              siri::dialogengine::ChunkText::GetAttribute(v37, (uint64_t)__str, __p);
              if (SHIBYTE(v231[0].__r_.__value_.__r.__words[2]) < 0)
                operator delete(v231[0].__r_.__value_.__l.__data_);
              v231[0] = __p[0];
              *((_BYTE *)&__p[0].__r_.__value_.__s + 23) = 0;
              __p[0].__r_.__value_.__s.__data_[0] = 0;
              if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str[0].__r_.__value_.__l.__data_);
              v101 = HIBYTE(v231[0].__r_.__value_.__r.__words[2]);
              if ((v231[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v101 = v231[0].__r_.__value_.__l.__size_;
              v79 = 2 * (v101 != 0);
            }
            memset(v223, 0, 24);
            siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)__p, v171);
            v102 = v181;
            siri::dialogengine::RequestInfo::~RequestInfo((void **)&__p[0].__r_.__value_.__l.__data_);
            if (v79 == 1)
            {
              if (v102)
              {
                if (v102 == 2)
                {
LABEL_453:
                  std::operator+<char>();
                  v139 = std::string::insert(__str, 0, "\x1B\\");
                  v140 = *(_OWORD *)&v139->__r_.__value_.__l.__data_;
                  __p[0].__r_.__value_.__r.__words[2] = v139->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v140;
                  v139->__r_.__value_.__l.__size_ = 0;
                  v139->__r_.__value_.__r.__words[2] = 0;
                  v139->__r_.__value_.__r.__words[0] = 0;
                  v141 = std::string::append(__p, "\\");
                  v142 = v141->__r_.__value_.__r.__words[0];
                  v253[0].__r_.__value_.__r.__words[0] = v141->__r_.__value_.__l.__size_;
                  *(std::string::size_type *)((char *)v253[0].__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v141->__r_.__value_.__r.__words[1] + 7);
                  v143 = HIBYTE(v141->__r_.__value_.__r.__words[2]);
                  v141->__r_.__value_.__l.__size_ = 0;
                  v141->__r_.__value_.__r.__words[2] = 0;
                  v141->__r_.__value_.__r.__words[0] = 0;
                  if (SHIBYTE(v223[0].__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v223[0].__r_.__value_.__l.__data_);
                  v223[0].__r_.__value_.__r.__words[0] = v142;
                  v223[0].__r_.__value_.__l.__size_ = v253[0].__r_.__value_.__r.__words[0];
                  *(std::string::size_type *)((char *)&v223[0].__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v253[0].__r_.__value_.__r.__words + 7);
                  *((_BYTE *)&v223[0].__r_.__value_.__s + 23) = v143;
                  if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_550;
                  v144 = (void *)__p[0].__r_.__value_.__r.__words[0];
                  goto LABEL_549;
                }
LABEL_552:
                v168 = HIBYTE(v223[0].__r_.__value_.__r.__words[2]);
                if ((v223[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v168 = v223[0].__r_.__value_.__l.__size_;
                if (v168)
                {
                  std::string::basic_string[abi:ne180100]<0>(v215, v10);
                  siri::dialogengine::SpeakableString::SpeakableString((uint64_t)__p, v215, v223);
                }
                v9 = v10;
                if ((*((_BYTE *)&v223[0].__r_.__value_.__s + 23) & 0x80) != 0)
                  operator delete(v223[0].__r_.__value_.__l.__data_);
                if ((SHIBYTE(v231[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_561;
                v146 = (void *)v231[0].__r_.__value_.__r.__words[0];
LABEL_560:
                operator delete(v146);
                goto LABEL_561;
              }
              std::string::basic_string[abi:ne180100]<0>(__str, "audio");
              std::string::basic_string[abi:ne180100]<0>(v253, "src");
              siri::dialogengine::FormatXMLElement((uint64_t)__p, (uint64_t)__str, (uint64_t)v253, (uint64_t)v231);
              if (SHIBYTE(v223[0].__r_.__value_.__r.__words[2]) < 0)
                operator delete(v223[0].__r_.__value_.__l.__data_);
              v223[0] = __p[0];
              *((_BYTE *)&__p[0].__r_.__value_.__s + 23) = 0;
              __p[0].__r_.__value_.__s.__data_[0] = 0;
            }
            else
            {
              if (v79 != 2)
                goto LABEL_552;
              if (v102)
              {
                if (v102 == 2)
                  goto LABEL_453;
                goto LABEL_552;
              }
              std::string::basic_string[abi:ne180100]<0>(__str, "mark");
              std::string::basic_string[abi:ne180100]<0>(v253, "name");
              std::operator+<char>();
              siri::dialogengine::FormatXMLElement((uint64_t)__p, (uint64_t)__str, (uint64_t)v253, (uint64_t)v215);
              if (SHIBYTE(v223[0].__r_.__value_.__r.__words[2]) < 0)
                operator delete(v223[0].__r_.__value_.__l.__data_);
              v223[0] = __p[0];
              *((_BYTE *)&__p[0].__r_.__value_.__s + 23) = 0;
              __p[0].__r_.__value_.__s.__data_[0] = 0;
              if (SHIBYTE(v215[0].__r_.__value_.__r.__words[2]) < 0)
                operator delete(v215[0].__r_.__value_.__l.__data_);
            }
            if ((SHIBYTE(v253[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_550;
            v144 = (void *)v253[0].__r_.__value_.__r.__words[0];
LABEL_549:
            operator delete(v144);
LABEL_550:
            if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str[0].__r_.__value_.__l.__data_);
            goto LABEL_552;
          }
        }
        else if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) == 3)
        {
          v74 = &v245;
          goto LABEL_127;
        }
LABEL_534:
        if ((v165 & 1) == 0
        {
          v170 = (_QWORD *)operator new();
          *v170 = 0;
          siri::dialogengine::ExpandTagsRecursive(siri::dialogengine::Context *,std::vector<std::shared_ptr<siri::dialogengine::ChunkText>> const&,std::vector<std::shared_ptr<siri::dialogengine::ChunkText>> const&)::flag = (uint64_t)v170;
          v8 = (std::string::size_type)(a1 + 2);
          v9 = v10;
        }
        v166 = atomic_load((unint64_t *)siri::dialogengine::ExpandTagsRecursive(siri::dialogengine::Context *,std::vector<std::shared_ptr<siri::dialogengine::ChunkText>> const&,std::vector<std::shared_ptr<siri::dialogengine::ChunkText>> const&)::flag);
        if (v166 != -1)
        {
          __str[0].__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          v253[0].__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
          std::__call_once((std::once_flag::_State_type *)siri::dialogengine::ExpandTagsRecursive(siri::dialogengine::Context *,std::vector<std::shared_ptr<siri::dialogengine::ChunkText>> const&,std::vector<std::shared_ptr<siri::dialogengine::ChunkText>> const&)::flag, v253, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::ExpandTagsRecursive(siri::dialogengine::Context *,std::vector<std::shared_ptr<siri::dialogengine::ChunkText>> const&,std::vector<std::shared_ptr<siri::dialogengine::ChunkText>> const&)::$_0 &&>>);
        }
        v167 = *(_QWORD *)(siri::dialogengine::ExpandTagsRecursive(siri::dialogengine::Context *,std::vector<std::shared_ptr<siri::dialogengine::ChunkText>> const&,std::vector<std::shared_ptr<siri::dialogengine::ChunkText>> const&)::sValidChildTags
                         + 8);
        if (std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(*(_QWORD *)siri::dialogengine::ExpandTagsRecursive(siri::dialogengine::Context *,std::vector<std::shared_ptr<siri::dialogengine::ChunkText>> const&,std::vector<std::shared_ptr<siri::dialogengine::ChunkText>> const&)::sValidChildTags, v167, (unsigned __int8 **)&v245) != v167)goto LABEL_561;
        std::operator+<char>();
        siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 1u);
        if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_561;
        v146 = (void *)__p[0].__r_.__value_.__r.__words[0];
        goto LABEL_560;
      }
      data = *(_DWORD *)v245.__r_.__value_.__l.__data_;
LABEL_115:
      if (data != 1851879539)
        goto LABEL_116;
      std::string::basic_string[abi:ne180100]<0>(__p, "inflect");
      siri::dialogengine::ChunkText::GetAttribute(v37, (uint64_t)__p, v253);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      siri::dialogengine::SemanticFeatureConstraint::FromString((uint64_t)a2, (unsigned __int8 *)v253, (uint64_t *)v231);
      v80 = *(_OWORD *)&v231[0].__r_.__value_.__l.__data_;
      if (v231[0].__r_.__value_.__r.__words[0] == v231[0].__r_.__value_.__l.__size_)
      {
LABEL_531:
        __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v231;
        std::vector<siri::dialogengine::SemanticFeatureConstraint>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        if (SHIBYTE(v253[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v253[0].__r_.__value_.__l.__data_);
        v8 = (std::string::size_type)(a1 + 2);
        v9 = v10;
        if ((_QWORD)v80 != *((_QWORD *)&v80 + 1))
          goto LABEL_561;
        goto LABEL_534;
      }
      std::string::basic_string[abi:ne180100]<0>(__str, "transform");
      siri::dialogengine::ChunkText::GetAttribute(v37, (uint64_t)__str, __p);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      {
        v82 = __p[0].__r_.__value_.__l.__size_ == 7
           && *(_DWORD *)__p[0].__r_.__value_.__l.__data_ == 1852797552
           && *(_DWORD *)(__p[0].__r_.__value_.__r.__words[0] + 3) == 1853189998;
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
      else
      {
        v82 = SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) == 7
           && LODWORD(__p[0].__r_.__value_.__l.__data_) == 1852797552
           && *(_DWORD *)((char *)__p[0].__r_.__value_.__r.__words + 3) == 1853189998;
      }
      if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str[0].__r_.__value_.__l.__data_);
      siri::dialogengine::ChunkList::ChunkList((uint64_t **)v223, (uint64_t **)&v246);
      siri::dialogengine::ChunkList::Expand((uint64_t *)__str, (siri::dialogengine::ChunkList *)v223, a2);
      siri::dialogengine::ExpandToText((uint64_t)__p, (uint64_t *)__str[0].__r_.__value_.__l.__data_, (uint64_t *)__str[0].__r_.__value_.__l.__size_);
      v215[0].__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
      std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)v215);
      v215[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v223;
      std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)v215);
      siri::dialogengine::InflectDialog(a2, (siri::dialogengine::Context *)v231, (uint64_t)__p, v82, __str);
      std::string::operator=(__p, __str);
      std::string::operator=(&__p[1], &__str[1]);
      std::string::operator=((std::string *)v174, (const std::string *)v262);
      std::string::operator=((std::string *)&v175[1], (const std::string *)((char *)&v263 + 8));
      std::string::operator=((std::string *)v177, (const std::string *)v265);
      std::string::operator=((std::string *)&v178[1], (const std::string *)((char *)&v266 + 8));
      std::string::operator=(v180, &v268);
      if (SHIBYTE(v268.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v268.__r_.__value_.__l.__data_);
      if (SHIBYTE(v267) < 0)
        operator delete(*((void **)&v266 + 1));
      if (SBYTE7(v266) < 0)
        operator delete(v265[0]);
      if (SHIBYTE(v264) < 0)
        operator delete(*((void **)&v263 + 1));
      if (SBYTE7(v263) < 0)
        operator delete(v262[0]);
      if (SHIBYTE(__str[1].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str[1].__r_.__value_.__l.__data_);
      if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str[0].__r_.__value_.__l.__data_);
      v147 = (siri::dialogengine::ChunkText *)operator new();
      siri::dialogengine::ChunkText::ChunkText(v147, __p);
      __str[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v147;
      v148 = (_QWORD *)operator new();
      *v148 = &off_1E7939CE8;
      v148[1] = 0;
      v148[2] = 0;
      v148[3] = v147;
      __str[0].__r_.__value_.__l.__size_ = (std::string::size_type)v148;
      v149 = (_QWORD *)v246.i64[0];
      if (v247 == (char *)v246.i64[0])
      {
        std::vector<std::shared_ptr<siri::dialogengine::Node>>::__vdeallocate((void **)&v246);
        v153 = (uint64_t)&v247[-v246.i64[0]] >> 3;
        if (v153 <= 1)
          v153 = 1;
        if ((unint64_t)&v247[-v246.i64[0]] >= 0x7FFFFFFFFFFFFFF0)
          v154 = 0xFFFFFFFFFFFFFFFLL;
        else
          v154 = v153;
        if (v154 >> 60)
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        v149 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v154);
        v246.i64[0] = (uint64_t)v149;
        v246.i64[1] = (uint64_t)v149;
        v247 = (char *)&v149[2 * v155];
        *v149 = __str[0].__r_.__value_.__r.__words[0];
        v156 = __str[0].__r_.__value_.__l.__size_;
        v149[1] = __str[0].__r_.__value_.__l.__size_;
        if (v156)
        {
          v157 = (unint64_t *)(v156 + 8);
          do
            v158 = __ldxr(v157);
          while (__stxr(v158 + 1, v157));
        }
      }
      else
      {
        if (v246.i64[1] != v246.i64[0])
        {
          v150 = std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100](v246.i64[0], (uint64_t)__str[0].__r_.__value_.__l.__data_, __str[0].__r_.__value_.__l.__size_);
          v151 = v246.i64[1];
          v152 = v150 + 2;
          while ((_QWORD *)v151 != v152)
          {
            v151 -= 16;
            std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v151);
          }
          goto LABEL_512;
        }
        *(_QWORD *)v246.i64[0] = __str[0].__r_.__value_.__r.__words[0];
        v159 = __str[0].__r_.__value_.__l.__size_;
        v149[1] = __str[0].__r_.__value_.__l.__size_;
        if (v159)
        {
          v160 = (unint64_t *)(v159 + 8);
          do
            v161 = __ldxr(v160);
          while (__stxr(v161 + 1, v160));
        }
      }
      v152 = v149 + 2;
LABEL_512:
      v246.i64[1] = (uint64_t)v152;
      v162 = (std::__shared_weak_count *)__str[0].__r_.__value_.__l.__size_;
      if (__str[0].__r_.__value_.__l.__size_)
      {
        v163 = (unint64_t *)(__str[0].__r_.__value_.__l.__size_ + 8);
        do
          v164 = __ldaxr(v163);
        while (__stlxr(v164 - 1, v163));
        if (!v164)
        {
          ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
          std::__shared_weak_count::__release_weak(v162);
        }
      }
      if (SHIBYTE(v180[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v180[0].__r_.__value_.__l.__data_);
      if (SHIBYTE(v179) < 0)
        operator delete(v178[1]);
      if (SHIBYTE(v178[0]) < 0)
        operator delete(v177[0]);
      if (SHIBYTE(v176) < 0)
        operator delete(v175[1]);
      if (SHIBYTE(v175[0]) < 0)
        operator delete(v174[0]);
      if (SHIBYTE(__p[1].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[1].__r_.__value_.__l.__data_);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      goto LABEL_531;
    }
    if (HIBYTE(v245.__r_.__value_.__r.__words[2]) == 4)
    {
      data = (int)v245.__r_.__value_.__l.__data_;
      goto LABEL_115;
    }
    if (HIBYTE(v245.__r_.__value_.__r.__words[2]) == 8)
    {
      v71 = &v245;
      goto LABEL_100;
    }
    if (HIBYTE(v245.__r_.__value_.__r.__words[2]) != 9)
      goto LABEL_116;
    if (v245.__r_.__value_.__r.__words[0] != 0x726F66736E617274 || v245.__r_.__value_.__s.__data_[8] != 109)
      goto LABEL_116;
LABEL_66:
    std::string::basic_string[abi:ne180100]<0>(__p, "mode");
    siri::dialogengine::ChunkText::GetAttribute(v37, (uint64_t)__p, v253);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    v179 = 0u;
    memset(v180, 0, 24);
    *(_OWORD *)v177 = 0u;
    *(_OWORD *)v178 = 0u;
    *(_OWORD *)v175 = 0u;
    v176 = 0u;
    *(_OWORD *)v174 = 0u;
    memset(__p, 0, sizeof(__p));
    v63 = (std::string::size_type *)v246.i64[1];
    for (i = (std::string::size_type *)v246.i64[0]; i != v63; i += 2)
    {
      v64 = *i;
      v65 = (std::__shared_weak_count *)i[1];
      v231[0].__r_.__value_.__r.__words[0] = *i;
      v231[0].__r_.__value_.__l.__size_ = (std::string::size_type)v65;
      if (v65)
      {
        p_shared_owners = (unint64_t *)&v65->__shared_owners_;
        do
          v67 = __ldxr(p_shared_owners);
        while (__stxr(v67 + 1, p_shared_owners));
      }
      siri::dialogengine::SpeakableString::SpeakableString(__str, (const siri::dialogengine::SpeakableString *)(v64 + 8));
      siri::dialogengine::SpeakableString::Append((siri::dialogengine::SpeakableString *)__p, (const siri::dialogengine::SpeakableString *)__str);
      if (SHIBYTE(v268.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v268.__r_.__value_.__l.__data_);
      if (SHIBYTE(v267) < 0)
        operator delete(*((void **)&v266 + 1));
      if (SBYTE7(v266) < 0)
        operator delete(v265[0]);
      if (SHIBYTE(v264) < 0)
        operator delete(*((void **)&v263 + 1));
      if (SBYTE7(v263) < 0)
        operator delete(v262[0]);
      if (SHIBYTE(__str[1].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str[1].__r_.__value_.__l.__data_);
      if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__str[0].__r_.__value_.__l.__data_);
        if (!v65)
          continue;
      }
      else if (!v65)
      {
        continue;
      }
      v68 = (unint64_t *)&v65->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
    }
    siri::dialogengine::TransformText((siri::dialogengine::SpeakableString *)__p, a2, (uint64_t)v253, __str);
    std::string::operator=(__p, __str);
    v8 = (std::string::size_type)(a1 + 2);
    v9 = v10;
    std::string::operator=(&__p[1], &__str[1]);
    std::string::operator=((std::string *)v174, (const std::string *)v262);
    std::string::operator=((std::string *)&v175[1], (const std::string *)((char *)&v263 + 8));
    std::string::operator=((std::string *)v177, (const std::string *)v265);
    std::string::operator=((std::string *)&v178[1], (const std::string *)((char *)&v266 + 8));
    std::string::operator=(v180, &v268);
    if (SHIBYTE(v268.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v268.__r_.__value_.__l.__data_);
    if (SHIBYTE(v267) < 0)
      operator delete(*((void **)&v266 + 1));
    if (SBYTE7(v266) < 0)
      operator delete(v265[0]);
    if (SHIBYTE(v264) < 0)
      operator delete(*((void **)&v263 + 1));
    if (SBYTE7(v263) < 0)
      operator delete(v262[0]);
    if (SHIBYTE(__str[1].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str[1].__r_.__value_.__l.__data_);
    if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str[0].__r_.__value_.__l.__data_);
    v83 = v246.i64[1];
    v84 = v246.i64[0];
    while (v83 != v84)
      v83 = std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v83 - 16);
    v246.i64[1] = v84;
    v85 = (siri::dialogengine::ChunkText *)operator new();
    siri::dialogengine::ChunkText::ChunkText(v85, __p);
    v231[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v85;
    v86 = (_QWORD *)operator new();
    *v86 = &off_1E7939CE8;
    v86[1] = 0;
    v86[2] = 0;
    v86[3] = v85;
    v231[0].__r_.__value_.__l.__size_ = (std::string::size_type)v86;
    v87 = v246.i64[1];
    if (v246.i64[1] >= (unint64_t)v247)
    {
      v89 = (v246.i64[1] - v246.i64[0]) >> 4;
      if ((unint64_t)(v89 + 1) >> 60)
        std::vector<BOOL>::__throw_length_error[abi:ne180100]();
      v90 = (uint64_t)&v247[-v246.i64[0]] >> 3;
      if (v90 <= v89 + 1)
        v90 = v89 + 1;
      if ((unint64_t)&v247[-v246.i64[0]] >= 0x7FFFFFFFFFFFFFF0)
        v91 = 0xFFFFFFFFFFFFFFFLL;
      else
        v91 = v90;
      __str[1].__r_.__value_.__l.__size_ = (std::string::size_type)&v247;
      v92 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v91);
      v94 = &v92[16 * v89];
      *(_OWORD *)v94 = *(_OWORD *)&v231[0].__r_.__value_.__l.__data_;
      *(_OWORD *)&v231[0].__r_.__value_.__l.__data_ = 0uLL;
      v95 = (_QWORD *)v246.i64[1];
      v96 = (_QWORD *)v246.i64[0];
      if (v246.i64[1] == v246.i64[0])
      {
        v99 = vdupq_n_s64(v246.u64[1]);
        v97 = &v92[16 * v89];
      }
      else
      {
        v97 = &v92[16 * v89];
        do
        {
          v98 = *((_OWORD *)v95 - 1);
          v95 -= 2;
          *((_OWORD *)v97 - 1) = v98;
          v97 -= 16;
          *v95 = 0;
          v95[1] = 0;
        }
        while (v95 != v96);
        v99 = v246;
      }
      v88 = v94 + 16;
      v246.i64[0] = (uint64_t)v97;
      v246.i64[1] = (uint64_t)(v94 + 16);
      *(int64x2_t *)&__str[0].__r_.__value_.__r.__words[1] = v99;
      v145 = (std::string::size_type)v247;
      v247 = &v92[16 * v93];
      __str[1].__r_.__value_.__r.__words[0] = v145;
      __str[0].__r_.__value_.__r.__words[0] = v99.i64[0];
      std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)__str);
    }
    else
    {
      *(_OWORD *)v246.i64[1] = *(_OWORD *)&v231[0].__r_.__value_.__l.__data_;
      v88 = (_OWORD *)(v87 + 16);
    }
    v246.i64[1] = (uint64_t)v88;
    if (SHIBYTE(v180[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v180[0].__r_.__value_.__l.__data_);
    if (SHIBYTE(v179) < 0)
      operator delete(v178[1]);
    if (SHIBYTE(v178[0]) < 0)
      operator delete(v177[0]);
    if (SHIBYTE(v176) < 0)
      operator delete(v175[1]);
    if (SHIBYTE(v175[0]) < 0)
      operator delete(v174[0]);
    if (SHIBYTE(__p[1].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[1].__r_.__value_.__l.__data_);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    if (SHIBYTE(v253[0].__r_.__value_.__r.__words[2]) < 0)
    {
      v146 = (void *)v253[0].__r_.__value_.__r.__words[0];
      goto LABEL_560;
    }
LABEL_561:
    std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<siri::dialogengine::ChunkText>*>,std::__wrap_iter<std::shared_ptr<siri::dialogengine::ChunkText>*>>(a1, (uint64_t)a1[1], (uint64_t *)v246.i64[0], (uint64_t *)v246.i64[1], (v246.i64[1] - v246.i64[0]) >> 4);
    if (*(_BYTE *)(v37 + 224) && *(_BYTE *)(v37 + 225))
      v169 = 1;
    else
      v169 = 2;
    v7 += v169 + (((char *)v249 - (char *)v248) >> 4);
    if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v245.__r_.__value_.__l.__data_);
    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v246;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v248;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_568:
    v6 = *(uint64_t **)a3;
  }
  while (v7 < (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 4);
LABEL_572:
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v250;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1BFC56720(_Unwind_Exception *a1)
{
  unint64_t v1;

  if (SLOBYTE(STACK[0x9B7]) < 0)
    operator delete((void *)STACK[0x9A0]);
  STACK[0x210] = (unint64_t)&STACK[0x9C0];
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x210]);
  STACK[0x210] = (unint64_t)&STACK[0x9D8];
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x210]);
  STACK[0x890] = v1;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x890]);
  STACK[0x890] = (unint64_t)&STACK[0x9F0];
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x890]);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::FormatXMLElement(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD v24[2];
  _QWORD v25[11];
  char v26;
  uint64_t v27;
  char v28;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v24);
  v28 = 60;
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)&v28, 1);
  v8 = *(char *)(a2 + 23);
  if (v8 >= 0)
    v9 = a2;
  else
    v9 = *(_QWORD *)a2;
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(a2 + 23);
  else
    v10 = *(_QWORD *)(a2 + 8);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
  v28 = 32;
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)&v28, 1);
  v13 = *(char *)(a3 + 23);
  if (v13 >= 0)
    v14 = a3;
  else
    v14 = *(_QWORD *)a3;
  if (v13 >= 0)
    v15 = *(unsigned __int8 *)(a3 + 23);
  else
    v15 = *(_QWORD *)(a3 + 8);
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"=\"", 2);
  v18 = *(char *)(a4 + 23);
  if (v18 >= 0)
    v19 = a4;
  else
    v19 = *(_QWORD *)a4;
  if (v18 >= 0)
    v20 = *(unsigned __int8 *)(a4 + 23);
  else
    v20 = *(_QWORD *)(a4 + 8);
  v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"\"/>", 3);
  std::stringbuf::str();
  v24[0] = *MEMORY[0x1E0DE4F50];
  v22 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v24 + *(_QWORD *)(v24[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v25[0] = v22;
  v25[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v26 < 0)
    operator delete((void *)v25[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C3B8D80C](&v27);
}

void sub_1BFC570B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::ExpandTagsRecursive(siri::dialogengine::Context *,std::vector<std::shared_ptr<siri::dialogengine::ChunkText>> const&,std::vector<std::shared_ptr<siri::dialogengine::ChunkText>> const&)::$_0 &&>>()
{
  _QWORD *v0;
  std::string *v1;
  uint64_t v2;
  __int128 v3;
  _QWORD v4[3];
  _QWORD v5[3];
  _QWORD v6[3];
  _QWORD v7[3];
  _QWORD v8[3];
  _QWORD v9[3];
  _QWORD v10[3];
  __int128 v11;

  *(_QWORD *)&v11 = *MEMORY[0x1E0C80C00];
  v0 = (_QWORD *)operator new();
  std::string::basic_string[abi:ne180100]<0>(&v3, "zero");
  std::string::basic_string[abi:ne180100]<0>(v4, "one");
  std::string::basic_string[abi:ne180100]<0>(v5, "two");
  std::string::basic_string[abi:ne180100]<0>(v6, "few");
  std::string::basic_string[abi:ne180100]<0>(v7, "many");
  std::string::basic_string[abi:ne180100]<0>(v8, "other");
  std::string::basic_string[abi:ne180100]<0>(v9, "lessthanorequalto");
  std::string::basic_string[abi:ne180100]<0>(v10, "span");
  *v0 = 0;
  v0[1] = 0;
  v0[2] = 0;
  v1 = (std::string *)operator new(0xC0uLL);
  *v0 = v1;
  v0[1] = v1;
  v0[2] = v1 + 8;
  v2 = 0;
  v0[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)(v0 + 2), &v3, &v11, v1);
  siri::dialogengine::ExpandTagsRecursive(siri::dialogengine::Context *,std::vector<std::shared_ptr<siri::dialogengine::ChunkText>> const&,std::vector<std::shared_ptr<siri::dialogengine::ChunkText>> const&)::sValidChildTags = (uint64_t)v0;
  do
  {
    if (SHIBYTE(v10[v2 + 2]) < 0)
      operator delete((void *)v10[v2]);
    v2 -= 3;
  }
  while (v2 != -24);
}

void sub_1BFC5725C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  *(_QWORD *)(v12 + 8) = v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  v15 = 0;
  while (1)
  {
    if (*(&a12 + v15 + 191) < 0)
      operator delete(*(void **)(&a12 + v15 + 168));
    v15 -= 24;
    if (v15 == -192)
    {
      MEMORY[0x1C3B8D890](v12, 0x20C40960023A9);
      _Unwind_Resume(a1);
    }
  }
}

_QWORD *std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<siri::dialogengine::ChunkText>*>,std::__wrap_iter<std::shared_ptr<siri::dialogengine::ChunkText>*>>(_QWORD *result, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[5];

  if (a5 < 1)
    return result;
  v7 = (_QWORD *)a2;
  v8 = result;
  v9 = result + 2;
  v10 = result[2];
  v11 = result[1];
  if (a5 > (uint64_t)(v10 - v11) >> 4)
  {
    v12 = *result;
    v13 = a5 + ((uint64_t)(v11 - *result) >> 4);
    if (v13 >> 60)
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    v14 = (a2 - v12) >> 4;
    v15 = v10 - v12;
    if (v15 >> 3 > v13)
      v13 = v15 >> 3;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0)
      v16 = 0xFFFFFFFFFFFFFFFLL;
    else
      v16 = v13;
    v32[4] = v9;
    if (v16)
      v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v16);
    else
      v17 = 0;
    v25 = (uint64_t *)(v16 + 16 * v14);
    v32[0] = v16;
    v32[1] = v25;
    v32[3] = v16 + 16 * v17;
    v26 = &v25[2 * a5];
    do
    {
      *v25 = *a3;
      v27 = a3[1];
      v25[1] = v27;
      if (v27)
      {
        v28 = (unint64_t *)(v27 + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      v25 += 2;
      a3 += 2;
    }
    while (v25 != v26);
    v32[2] = v26;
    std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::__swap_out_circular_buffer(v8, v32, v7);
    return (_QWORD *)std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)v32);
  }
  v18 = (uint64_t)(v11 - a2) >> 4;
  if (v18 >= a5)
  {
    v19 = &a3[2 * a5];
LABEL_29:
    for (result = (_QWORD *)std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::__move_range((uint64_t)result, a2, v11, (char *)(a2 + 16 * a5)); a3 != v19; v7 += 2)
    {
      v30 = *a3;
      v31 = a3[1];
      a3 += 2;
      result = std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100](v7, v30, v31);
    }
    return result;
  }
  v19 = &a3[2 * v18];
  if (v19 == a4)
  {
    v21 = (uint64_t *)result[1];
  }
  else
  {
    v20 = &a3[2 * v18];
    v21 = (uint64_t *)result[1];
    do
    {
      *v21 = *v20;
      v22 = v20[1];
      v21[1] = v22;
      if (v22)
      {
        v23 = (unint64_t *)(v22 + 8);
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      v20 += 2;
      v21 += 2;
    }
    while (v20 != a4);
  }
  result[1] = v21;
  if ((uint64_t)(v11 - a2) >= 1)
    goto LABEL_29;
  return result;
}

_QWORD *std::shared_ptr<siri::dialogengine::ChunkList>::shared_ptr[abi:ne180100]<siri::dialogengine::ChunkList,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  void **v6;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E7939C20;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  v6 = 0;
  std::unique_ptr<siri::dialogengine::ChunkList>::reset[abi:ne180100](&v6);
  return a1;
}

void sub_1BFC57520(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<siri::dialogengine::ChunkList>::reset[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void ***std::unique_ptr<siri::dialogengine::ChunkList>::reset[abi:ne180100](void ***result)
{
  void **v1;
  void **v2;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    v2 = v1;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v2);
    JUMPOUT(0x1C3B8D890);
  }
  return result;
}

void std::__shared_ptr_pointer<siri::dialogengine::ChunkList *,std::shared_ptr<siri::dialogengine::ChunkList>::__shared_ptr_default_delete<siri::dialogengine::ChunkList,siri::dialogengine::ChunkList>,std::allocator<siri::dialogengine::ChunkList>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::ChunkList *,std::shared_ptr<siri::dialogengine::ChunkList>::__shared_ptr_default_delete<siri::dialogengine::ChunkList,siri::dialogengine::ChunkList>,std::allocator<siri::dialogengine::ChunkList>>::__on_zero_shared(uint64_t result)
{
  void **v1;

  if (*(_QWORD *)(result + 24))
  {
    v1 = *(void ***)(result + 24);
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v1);
    JUMPOUT(0x1C3B8D890);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::ChunkList *,std::shared_ptr<siri::dialogengine::ChunkList>::__shared_ptr_default_delete<siri::dialogengine::ChunkList,siri::dialogengine::ChunkList>,std::allocator<siri::dialogengine::ChunkList>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void InitDefaultsscc_info_VisualElement_VisualElement_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/VisualElement.pb.cc", a4);
  SnippetUI::VisualElement::VisualElement((SnippetUI::VisualElement *)&SnippetUI::_VisualElement_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_VisualElement_default_instance_, v4);
  qword_1ED1D5100 = (uint64_t)&SnippetUI::_ImageElement_default_instance_;
  unk_1ED1D5108 = &SnippetUI::_ColorElement_default_instance_;
  qword_1ED1D5110 = (uint64_t)&SnippetUI::_CustomElement_default_instance_;
  unk_1ED1D5118 = &SnippetUI::_CoreChartElement_default_instance_;
}

SnippetUI::VisualElement *SnippetUI::VisualElement::VisualElement(SnippetUI::VisualElement *this)
{
  *(_QWORD *)this = &off_1E7939D90;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  if (atomic_load(scc_info_VisualElement_VisualElement_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_VisualElement_VisualElement_2eproto);
  *((_DWORD *)this + 7) = 0;
  return this;
}

void sub_1BFC57728(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::VisualElement::~VisualElement(SnippetUI::VisualElement *this)
{
  SnippetUI::VisualElement::~VisualElement(this);
  JUMPOUT(0x1C3B8D890);
}

{
  *(_QWORD *)this = &off_1E7939D90;
  if (*((_DWORD *)this + 7))
    SnippetUI::VisualElement::clear_element((uint64_t)this);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::VisualElement *SnippetUI::VisualElement::New(SnippetUI::VisualElement *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualElement>(0);
}

SnippetUI::VisualElement *SnippetUI::VisualElement::New(SnippetUI::VisualElement *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualElement>(a2);
}

void SnippetUI::VisualElement::Clear(SnippetUI::VisualElement *this)
{
  google::protobuf::internal::InternalMetadataWithArena *v2;
  char v3;

  SnippetUI::VisualElement::clear_element((uint64_t)this);
  v3 = *((_BYTE *)this + 8);
  v2 = (SnippetUI::VisualElement *)((char *)this + 8);
  if ((v3 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v2);
}

uint64_t SnippetUI::VisualElement::IsInitialized(SnippetUI::VisualElement *this)
{
  return 1;
}

char *SnippetUI::VisualElement::ByteSizeLong(SnippetUI::ImageElement **this)
{
  char *v2;
  const google::protobuf::UnknownFieldSet *v3;

  switch(*((_DWORD *)this + 7))
  {
    case 1:
      v2 = SnippetUI::ImageElement::ByteSizeLong(this[2]);
      goto LABEL_7;
    case 2:
      v2 = SnippetUI::ColorElement::ByteSizeLong(this[2]);
      goto LABEL_7;
    case 3:
      v2 = SnippetUI::CustomElement::ByteSizeLong(this[2]);
      goto LABEL_7;
    case 4:
      v2 = SnippetUI::CoreChartElement::ByteSizeLong(this[2]);
LABEL_7:
      v3 = (const google::protobuf::UnknownFieldSet *)&v2[((9 * (__clz(v2 | 1) ^ 0x1F) + 73) >> 6) + 1];
      break;
    default:
      v3 = 0;
      break;
  }
  if (((_BYTE)this[1] & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((google::protobuf::UnknownFieldSet *)(this + 1), v3, (_DWORD *)this + 6);
  *((_DWORD *)this + 6) = (_DWORD)v3;
  return (char *)v3;
}

uint64_t SnippetUI::VisualElement::GetCachedSize(SnippetUI::VisualElement *this)
{
  return *((unsigned int *)this + 6);
}

google::protobuf::internal *SnippetUI::VisualElement::_InternalParse(SnippetUI::VisualElement *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  uint64_t *v5;
  google::protobuf::internal::ParseContext *v6;
  google::protobuf::internal *TagFallback;
  char *v8;
  SnippetUI::ImageElement *v9;
  SnippetUI::ColorElement *v10;
  SnippetUI::CustomElement *v11;
  SnippetUI::CoreChartElement *v12;
  BOOL v13;
  unsigned int v14;
  char *v15;
  unsigned int v16;
  char *v17;
  unsigned int v18;
  char *v19;
  unsigned int v20;
  char *v21;
  char *SizeFallback;
  unsigned int v23;
  int v24;
  int v25;
  BOOL v26;
  int v27;
  google::protobuf::internal *v28;
  char *v29;
  unsigned int v30;
  int v31;
  int v32;
  char *v33;
  unsigned int v34;
  int v35;
  int v36;
  char *v37;
  unsigned int v38;
  int v39;
  int v40;
  int v41;
  google::protobuf::internal *v43;

  v43 = a2;
  v5 = (uint64_t *)((char *)this + 8);
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v43, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v43;
    TagFallback = (google::protobuf::internal *)((char *)v43 + 1);
    v8 = (char *)*(unsigned __int8 *)v43;
    if ((*(char *)v43 & 0x80000000) == 0)
      goto LABEL_6;
    v8 = (char *)(v8 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v43 + 2);
LABEL_6:
      v43 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v43, v8);
    v43 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    switch(v8 >> 3)
    {
      case 1u:
        if (v8 != 10)
          goto LABEL_20;
        if (*((_DWORD *)this + 7) == 1)
        {
          v9 = (SnippetUI::ImageElement *)*((_QWORD *)this + 2);
        }
        else
        {
          SnippetUI::VisualElement::clear_element((uint64_t)this);
          *((_DWORD *)this + 7) = 1;
          v9 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement>(0);
          *((_QWORD *)this + 2) = v9;
          TagFallback = v43;
        }
        v14 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          SizeFallback = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!SizeFallback)
            return 0;
          v15 = SizeFallback;
          v14 = v23;
        }
        else
        {
          v15 = (char *)TagFallback + 1;
        }
        v24 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v15, v14);
        v25 = *((_DWORD *)a3 + 22);
        v26 = __OFSUB__(v25--, 1);
        *((_DWORD *)a3 + 22) = v25;
        if (v25 < 0 == v26)
        {
          v27 = v24;
          v28 = SnippetUI::ImageElement::_InternalParse(v9, (google::protobuf::internal *)v15, a3);
          if (v28)
            goto LABEL_59;
        }
        return 0;
      case 2u:
        if (v8 != 18)
          goto LABEL_20;
        if (*((_DWORD *)this + 7) == 2)
        {
          v10 = (SnippetUI::ColorElement *)*((_QWORD *)this + 2);
        }
        else
        {
          SnippetUI::VisualElement::clear_element((uint64_t)this);
          *((_DWORD *)this + 7) = 2;
          v10 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ColorElement>(0);
          *((_QWORD *)this + 2) = v10;
          TagFallback = v43;
        }
        v16 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v29 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v29)
            return 0;
          v17 = v29;
          v16 = v30;
        }
        else
        {
          v17 = (char *)TagFallback + 1;
        }
        v31 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v17, v16);
        v32 = *((_DWORD *)a3 + 22);
        v26 = __OFSUB__(v32--, 1);
        *((_DWORD *)a3 + 22) = v32;
        if (v32 < 0 != v26)
          return 0;
        v27 = v31;
        v28 = SnippetUI::ColorElement::_InternalParse(v10, (google::protobuf::internal *)v17, a3);
        if (!v28)
          return 0;
        goto LABEL_59;
      case 3u:
        if (v8 != 26)
          goto LABEL_20;
        if (*((_DWORD *)this + 7) == 3)
        {
          v11 = (SnippetUI::CustomElement *)*((_QWORD *)this + 2);
        }
        else
        {
          SnippetUI::VisualElement::clear_element((uint64_t)this);
          *((_DWORD *)this + 7) = 3;
          v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::CustomElement>(0);
          *((_QWORD *)this + 2) = v11;
          TagFallback = v43;
        }
        v18 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v33 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v33)
            return 0;
          v19 = v33;
          v18 = v34;
        }
        else
        {
          v19 = (char *)TagFallback + 1;
        }
        v35 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v19, v18);
        v36 = *((_DWORD *)a3 + 22);
        v26 = __OFSUB__(v36--, 1);
        *((_DWORD *)a3 + 22) = v36;
        if (v36 < 0 != v26)
          return 0;
        v27 = v35;
        v28 = SnippetUI::CustomElement::_InternalParse(v11, (google::protobuf::internal *)v19, a3);
        if (!v28)
          return 0;
        goto LABEL_59;
      case 4u:
        if (v8 != 34)
          goto LABEL_20;
        if (*((_DWORD *)this + 7) == 4)
        {
          v12 = (SnippetUI::CoreChartElement *)*((_QWORD *)this + 2);
        }
        else
        {
          SnippetUI::VisualElement::clear_element((uint64_t)this);
          *((_DWORD *)this + 7) = 4;
          v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::CoreChartElement>(0);
          *((_QWORD *)this + 2) = v12;
          TagFallback = v43;
        }
        v20 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v37 = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!v37)
            return 0;
          v21 = v37;
          v20 = v38;
        }
        else
        {
          v21 = (char *)TagFallback + 1;
        }
        v39 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v21, v20);
        v40 = *((_DWORD *)a3 + 22);
        v26 = __OFSUB__(v40--, 1);
        *((_DWORD *)a3 + 22) = v40;
        if (v40 < 0 != v26)
          return 0;
        v27 = v39;
        v28 = SnippetUI::CoreChartElement::_InternalParse(v12, (google::protobuf::internal *)v21, a3);
        if (!v28)
          return 0;
LABEL_59:
        ++*((_DWORD *)a3 + 22);
        if (!*((_DWORD *)a3 + 20))
        {
          v41 = *((_DWORD *)a3 + 7) + v27;
          *((_DWORD *)a3 + 7) = v41;
          *(_QWORD *)a3 = *((_QWORD *)a3 + 1) + (v41 & (v41 >> 31));
          v43 = v28;
          continue;
        }
        return 0;
      default:
LABEL_20:
        if ((_DWORD)v8)
          v13 = (v8 & 7) == 4;
        else
          v13 = 1;
        if (v13)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v8 - 1;
          return TagFallback;
        }
        v43 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v8, v5, TagFallback, a3, v6);
        if (!v43)
          return 0;
        continue;
    }
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::VisualElement::InternalSerializeWithCachedSizesToArray(SnippetUI::VisualElement *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v6;
  SnippetUI::ImageElement *v7;
  unsigned int v8;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned int v13;
  unsigned int v14;
  SnippetUI::ColorElement *v15;
  unsigned int v16;
  unsigned __int8 *v17;
  unsigned int v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned int v21;
  unsigned int v22;
  SnippetUI::CustomElement *v23;
  unsigned int v24;
  unsigned __int8 *v25;
  unsigned int v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  unsigned int v29;
  unsigned int v30;
  SnippetUI::CoreChartElement *v31;
  unsigned int v32;
  unsigned __int8 *v33;
  unsigned int v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;

  v6 = *((_DWORD *)this + 7);
  if (v6 == 1)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v7 = (SnippetUI::ImageElement *)*((_QWORD *)this + 2);
    *a2 = 10;
    v8 = *((_DWORD *)v7 + 15);
    if (v8 > 0x7F)
    {
      a2[1] = v8 | 0x80;
      v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v11 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v12 = v11;
          *v11++ = v10 | 0x80;
          v13 = v10 >> 7;
          v14 = v10 >> 14;
          v10 >>= 7;
        }
        while (v14);
        v9 = v12 + 2;
        *v11 = v13;
      }
      else
      {
        a2[2] = v10;
        v9 = (unsigned __int8 *)(a2 + 3);
      }
    }
    else
    {
      a2[1] = v8;
      v9 = (unsigned __int8 *)(a2 + 2);
    }
    a2 = (char *)SnippetUI::ImageElement::InternalSerializeWithCachedSizesToArray(v7, (google::protobuf::UnknownFieldSet *)v9, a3, a4);
    v6 = *((_DWORD *)this + 7);
  }
  if (v6 == 2)
  {
    if ((unint64_t)a2 >= *(_QWORD *)a3)
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v15 = (SnippetUI::ColorElement *)*((_QWORD *)this + 2);
    *a2 = 18;
    v16 = *((_DWORD *)v15 + 12);
    if (v16 > 0x7F)
    {
      a2[1] = v16 | 0x80;
      v18 = v16 >> 7;
      if (v16 >> 14)
      {
        v19 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v20 = v19;
          *v19++ = v18 | 0x80;
          v21 = v18 >> 7;
          v22 = v18 >> 14;
          v18 >>= 7;
        }
        while (v22);
        v17 = v20 + 2;
        *v19 = v21;
      }
      else
      {
        a2[2] = v18;
        v17 = (unsigned __int8 *)(a2 + 3);
      }
    }
    else
    {
      a2[1] = v16;
      v17 = (unsigned __int8 *)(a2 + 2);
    }
    a2 = (char *)SnippetUI::ColorElement::InternalSerializeWithCachedSizesToArray(v15, (google::protobuf::UnknownFieldSet *)v17, a3, a4);
    v6 = *((_DWORD *)this + 7);
  }
  if (v6 == 3)
  {
    if ((unint64_t)a2 >= *(_QWORD *)a3)
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v23 = (SnippetUI::CustomElement *)*((_QWORD *)this + 2);
    *a2 = 26;
    v24 = *((_DWORD *)v23 + 12);
    if (v24 > 0x7F)
    {
      a2[1] = v24 | 0x80;
      v26 = v24 >> 7;
      if (v24 >> 14)
      {
        v27 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v28 = v27;
          *v27++ = v26 | 0x80;
          v29 = v26 >> 7;
          v30 = v26 >> 14;
          v26 >>= 7;
        }
        while (v30);
        v25 = v28 + 2;
        *v27 = v29;
      }
      else
      {
        a2[2] = v26;
        v25 = (unsigned __int8 *)(a2 + 3);
      }
    }
    else
    {
      a2[1] = v24;
      v25 = (unsigned __int8 *)(a2 + 2);
    }
    a2 = (char *)SnippetUI::CustomElement::InternalSerializeWithCachedSizesToArray(v23, (google::protobuf::UnknownFieldSet *)v25, a3, a4);
    v6 = *((_DWORD *)this + 7);
  }
  if (v6 == 4)
  {
    if ((unint64_t)a2 >= *(_QWORD *)a3)
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v31 = (SnippetUI::CoreChartElement *)*((_QWORD *)this + 2);
    *a2 = 34;
    v32 = *((_DWORD *)v31 + 12);
    if (v32 > 0x7F)
    {
      a2[1] = v32 | 0x80;
      v34 = v32 >> 7;
      if (v32 >> 14)
      {
        v35 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v36 = v35;
          *v35++ = v34 | 0x80;
          v37 = v34 >> 7;
          v38 = v34 >> 14;
          v34 >>= 7;
        }
        while (v38);
        v33 = v36 + 2;
        *v35 = v37;
      }
      else
      {
        a2[2] = v34;
        v33 = (unsigned __int8 *)(a2 + 3);
      }
    }
    else
    {
      a2[1] = v32;
      v33 = (unsigned __int8 *)(a2 + 2);
    }
    a2 = (char *)SnippetUI::CoreChartElement::InternalSerializeWithCachedSizesToArray(v31, (google::protobuf::UnknownFieldSet *)v33, a3, a4);
  }
  v39 = *((_QWORD *)this + 1);
  if ((v39 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v39 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)a2;
}

void SnippetUI::VisualElement::CopyFrom(SnippetUI::VisualElement *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::VisualElement::Clear(this);
    SnippetUI::VisualElement::MergeFrom(this, a2);
  }
}

void SnippetUI::VisualElement::MergeFrom(SnippetUI::VisualElement *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::VisualElement *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/VisualElement.pb.cc", 472);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::VisualElement::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BFC58018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::VisualElement::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 24) = a2;
  return this;
}

uint64_t SnippetUI::VisualElement::GetMetadata(SnippetUI::VisualElement *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_VisualElement_2eproto);
  return file_level_metadata_VisualElement_2eproto;
}

void *SnippetUI::VisualElement::default_instance(SnippetUI::VisualElement *this)
{
  if (atomic_load(scc_info_VisualElement_VisualElement_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_VisualElement_VisualElement_2eproto);
  return &SnippetUI::_VisualElement_default_instance_;
}

void SnippetUI::VisualElement::MergeFrom(SnippetUI::VisualElement *this, const SnippetUI::VisualElement *a2)
{
  std::string *v4;
  uint64_t v5;
  SnippetUI::ImageElement *v6;
  SnippetUI::ColorElement *v7;
  SnippetUI::CustomElement *v8;
  SnippetUI::CoreChartElement *v9;
  const SnippetUI::ImageElement *v10;
  const SnippetUI::ColorElement *v11;
  const SnippetUI::CustomElement *v12;
  const SnippetUI::CoreChartElement *v13;
  char v14;
  std::string v15[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/VisualElement.pb.cc", 487);
    v4 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v14, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::VisualElement *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  switch(*((_DWORD *)a2 + 7))
  {
    case 1:
      if (*((_DWORD *)this + 7) == 1)
      {
        v6 = (SnippetUI::ImageElement *)*((_QWORD *)this + 2);
      }
      else
      {
        SnippetUI::VisualElement::clear_element((uint64_t)this);
        *((_DWORD *)this + 7) = 1;
        v6 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement>(0);
        *((_QWORD *)this + 2) = v6;
        if (*((_DWORD *)a2 + 7) != 1)
        {
          v10 = (const SnippetUI::ImageElement *)&SnippetUI::_ImageElement_default_instance_;
          goto LABEL_23;
        }
      }
      v10 = (const SnippetUI::ImageElement *)*((_QWORD *)a2 + 2);
LABEL_23:
      SnippetUI::ImageElement::MergeFrom(v6, v10);
      return;
    case 2:
      if (*((_DWORD *)this + 7) == 2)
      {
        v7 = (SnippetUI::ColorElement *)*((_QWORD *)this + 2);
LABEL_17:
        v11 = (const SnippetUI::ColorElement *)*((_QWORD *)a2 + 2);
        goto LABEL_25;
      }
      SnippetUI::VisualElement::clear_element((uint64_t)this);
      *((_DWORD *)this + 7) = 2;
      v7 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ColorElement>(0);
      *((_QWORD *)this + 2) = v7;
      if (*((_DWORD *)a2 + 7) == 2)
        goto LABEL_17;
      v11 = (const SnippetUI::ColorElement *)&SnippetUI::_ColorElement_default_instance_;
LABEL_25:
      SnippetUI::ColorElement::MergeFrom(v7, v11);
      return;
    case 3:
      if (*((_DWORD *)this + 7) == 3)
      {
        v8 = (SnippetUI::CustomElement *)*((_QWORD *)this + 2);
LABEL_19:
        v12 = (const SnippetUI::CustomElement *)*((_QWORD *)a2 + 2);
        goto LABEL_27;
      }
      SnippetUI::VisualElement::clear_element((uint64_t)this);
      *((_DWORD *)this + 7) = 3;
      v8 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::CustomElement>(0);
      *((_QWORD *)this + 2) = v8;
      if (*((_DWORD *)a2 + 7) == 3)
        goto LABEL_19;
      v12 = (const SnippetUI::CustomElement *)&SnippetUI::_CustomElement_default_instance_;
LABEL_27:
      SnippetUI::CustomElement::MergeFrom(v8, v12);
      return;
    case 4:
      if (*((_DWORD *)this + 7) == 4)
      {
        v9 = (SnippetUI::CoreChartElement *)*((_QWORD *)this + 2);
LABEL_21:
        v13 = (const SnippetUI::CoreChartElement *)*((_QWORD *)a2 + 2);
        goto LABEL_29;
      }
      SnippetUI::VisualElement::clear_element((uint64_t)this);
      *((_DWORD *)this + 7) = 4;
      v9 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::CoreChartElement>(0);
      *((_QWORD *)this + 2) = v9;
      if (*((_DWORD *)a2 + 7) == 4)
        goto LABEL_21;
      v13 = (const SnippetUI::CoreChartElement *)&SnippetUI::_CoreChartElement_default_instance_;
LABEL_29:
      SnippetUI::CoreChartElement::MergeFrom(v9, v13);
      return;
    default:
      return;
  }
}

void sub_1BFC5828C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::VisualElement::clear_element(uint64_t this)
{
  uint64_t v1;

  v1 = this;
  switch(*(_DWORD *)(this + 28))
  {
    case 1:
    case 2:
    case 3:
    case 4:
      this = *(_QWORD *)(this + 16);
      if (this)
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
      break;
    default:
      break;
  }
  *(_DWORD *)(v1 + 28) = 0;
  return this;
}

SnippetUI::VisualElement *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualElement>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::VisualElement *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::VisualElement *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x20uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::VisualElement>);
    SnippetUI::VisualElement::VisualElement(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::VisualElement *)operator new();
    SnippetUI::VisualElement::VisualElement(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFC58384(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::VisualElement>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void SnippetUI::VisualElement::InitAsDefaultInstance(SnippetUI::VisualElement *this)
{
  qword_1ED1D5100 = (uint64_t)&SnippetUI::_ImageElement_default_instance_;
  unk_1ED1D5108 = &SnippetUI::_ColorElement_default_instance_;
  qword_1ED1D5110 = (uint64_t)&SnippetUI::_CustomElement_default_instance_;
  unk_1ED1D5118 = &SnippetUI::_CoreChartElement_default_instance_;
}

uint64_t SnippetUI::VisualElement::_Internal::image_element(SnippetUI::VisualElement::_Internal *this, const SnippetUI::VisualElement *a2)
{
  return *((_QWORD *)this + 2);
}

uint64_t SnippetUI::VisualElement::_Internal::color_element(SnippetUI::VisualElement::_Internal *this, const SnippetUI::VisualElement *a2)
{
  return *((_QWORD *)this + 2);
}

uint64_t SnippetUI::VisualElement::_Internal::custom_element(SnippetUI::VisualElement::_Internal *this, const SnippetUI::VisualElement *a2)
{
  return *((_QWORD *)this + 2);
}

uint64_t SnippetUI::VisualElement::_Internal::chart_element(SnippetUI::VisualElement::_Internal *this, const SnippetUI::VisualElement *a2)
{
  return *((_QWORD *)this + 2);
}

uint64_t SnippetUI::VisualElement::set_allocated_image_element(SnippetUI::VisualElement *this, SnippetUI::ImageElement *a2)
{
  uint64_t result;

  result = SnippetUI::VisualElement::clear_element((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 7) = 1;
    *((_QWORD *)this + 2) = a2;
  }
  return result;
}

uint64_t SnippetUI::VisualElement::clear_image_element(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 28) == 1)
  {
    v1 = this;
    this = *(_QWORD *)(this + 16);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 28) = 0;
  }
  return this;
}

uint64_t SnippetUI::VisualElement::set_allocated_color_element(SnippetUI::VisualElement *this, SnippetUI::ColorElement *a2)
{
  uint64_t result;

  result = SnippetUI::VisualElement::clear_element((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 7) = 2;
    *((_QWORD *)this + 2) = a2;
  }
  return result;
}

uint64_t SnippetUI::VisualElement::clear_color_element(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 28) == 2)
  {
    v1 = this;
    this = *(_QWORD *)(this + 16);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 28) = 0;
  }
  return this;
}

uint64_t SnippetUI::VisualElement::set_allocated_custom_element(SnippetUI::VisualElement *this, SnippetUI::CustomElement *a2)
{
  uint64_t result;

  result = SnippetUI::VisualElement::clear_element((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 7) = 3;
    *((_QWORD *)this + 2) = a2;
  }
  return result;
}

uint64_t SnippetUI::VisualElement::clear_custom_element(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 28) == 3)
  {
    v1 = this;
    this = *(_QWORD *)(this + 16);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 28) = 0;
  }
  return this;
}

uint64_t SnippetUI::VisualElement::set_allocated_chart_element(SnippetUI::VisualElement *this, SnippetUI::CoreChartElement *a2)
{
  uint64_t result;

  result = SnippetUI::VisualElement::clear_element((uint64_t)this);
  if (a2)
  {
    *((_DWORD *)this + 7) = 4;
    *((_QWORD *)this + 2) = a2;
  }
  return result;
}

uint64_t SnippetUI::VisualElement::clear_chart_element(uint64_t this)
{
  uint64_t v1;

  if (*(_DWORD *)(this + 28) == 4)
  {
    v1 = this;
    this = *(_QWORD *)(this + 16);
    if (this)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    *(_DWORD *)(v1 + 28) = 0;
  }
  return this;
}

SnippetUI::VisualElement *SnippetUI::VisualElement::VisualElement(SnippetUI::VisualElement *this, const SnippetUI::VisualElement *a2)
{
  uint64_t v4;
  SnippetUI::ImageElement *v5;
  const SnippetUI::ImageElement *v6;
  SnippetUI::ColorElement *v7;
  const SnippetUI::ColorElement *v8;
  SnippetUI::CustomElement *v9;
  const SnippetUI::CustomElement *v10;
  SnippetUI::CoreChartElement *v11;
  const SnippetUI::CoreChartElement *v12;

  *(_QWORD *)this = &off_1E7939D90;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::VisualElement *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_DWORD *)this + 7) = 0;
  switch(*((_DWORD *)a2 + 7))
  {
    case 1:
      SnippetUI::VisualElement::clear_element((uint64_t)this);
      *((_DWORD *)this + 7) = 1;
      v5 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ImageElement>(0);
      *((_QWORD *)this + 2) = v5;
      if (*((_DWORD *)a2 + 7) == 1)
        v6 = (const SnippetUI::ImageElement *)*((_QWORD *)a2 + 2);
      else
        v6 = (const SnippetUI::ImageElement *)&SnippetUI::_ImageElement_default_instance_;
      SnippetUI::ImageElement::MergeFrom(v5, v6);
      break;
    case 2:
      SnippetUI::VisualElement::clear_element((uint64_t)this);
      *((_DWORD *)this + 7) = 2;
      v7 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ColorElement>(0);
      *((_QWORD *)this + 2) = v7;
      if (*((_DWORD *)a2 + 7) == 2)
        v8 = (const SnippetUI::ColorElement *)*((_QWORD *)a2 + 2);
      else
        v8 = (const SnippetUI::ColorElement *)&SnippetUI::_ColorElement_default_instance_;
      SnippetUI::ColorElement::MergeFrom(v7, v8);
      break;
    case 3:
      SnippetUI::VisualElement::clear_element((uint64_t)this);
      *((_DWORD *)this + 7) = 3;
      v9 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::CustomElement>(0);
      *((_QWORD *)this + 2) = v9;
      if (*((_DWORD *)a2 + 7) == 3)
        v10 = (const SnippetUI::CustomElement *)*((_QWORD *)a2 + 2);
      else
        v10 = (const SnippetUI::CustomElement *)&SnippetUI::_CustomElement_default_instance_;
      SnippetUI::CustomElement::MergeFrom(v9, v10);
      break;
    case 4:
      SnippetUI::VisualElement::clear_element((uint64_t)this);
      *((_DWORD *)this + 7) = 4;
      v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::CoreChartElement>(0);
      *((_QWORD *)this + 2) = v11;
      if (*((_DWORD *)a2 + 7) == 4)
        v12 = (const SnippetUI::CoreChartElement *)*((_QWORD *)a2 + 2);
      else
        v12 = (const SnippetUI::CoreChartElement *)&SnippetUI::_CoreChartElement_default_instance_;
      SnippetUI::CoreChartElement::MergeFrom(v11, v12);
      break;
    default:
      return this;
  }
  return this;
}

void sub_1BFC58794(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::VisualElement::CopyFrom(SnippetUI::VisualElement *this, const SnippetUI::VisualElement *a2)
{
  if (a2 != this)
  {
    SnippetUI::VisualElement::Clear(this);
    SnippetUI::VisualElement::MergeFrom(this, a2);
  }
}

void SnippetUI::VisualElement::InternalSwap(SnippetUI::VisualElement *this, SnippetUI::VisualElement *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t v7;
  google::protobuf::UnknownFieldSet *v8;

  v4 = (SnippetUI::VisualElement *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v8;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v7;
  LODWORD(v7) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v7;
}

void InitDefaultsscc_info_OrnamentElement_OrnamentElement_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/OrnamentElement.pb.cc", a4);
  SnippetUI::OrnamentElement::OrnamentElement((SnippetUI::OrnamentElement *)&SnippetUI::_OrnamentElement_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_OrnamentElement_default_instance_, v4);
  qword_1ED1D4A18 = (uint64_t)&SnippetUI::_VisualElement_default_instance_;
}

SnippetUI::OrnamentElement *SnippetUI::OrnamentElement::OrnamentElement(SnippetUI::OrnamentElement *this)
{
  *(_QWORD *)this = &off_1E793A0E0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 13) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (atomic_load(scc_info_OrnamentElement_OrnamentElement_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_OrnamentElement_OrnamentElement_2eproto);
  *((_BYTE *)this + 48) = 0;
  *((_QWORD *)this + 5) = 0;
  return this;
}

void sub_1BFC58930(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  google::protobuf::RepeatedField<int>::~RepeatedField(v1 + 16);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

void SnippetUI::OrnamentElement::~OrnamentElement(SnippetUI::OrnamentElement *this)
{
  SnippetUI::OrnamentElement::~OrnamentElement(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E793A0E0;
  if (this != (SnippetUI::OrnamentElement *)&SnippetUI::_OrnamentElement_default_instance_)
  {
    v2 = *((_QWORD *)this + 5);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  google::protobuf::RepeatedField<int>::~RepeatedField((char *)this + 16);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::OrnamentElement *SnippetUI::OrnamentElement::New(SnippetUI::OrnamentElement *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OrnamentElement>(0);
}

SnippetUI::OrnamentElement *SnippetUI::OrnamentElement::New(SnippetUI::OrnamentElement *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OrnamentElement>(a2);
}

void SnippetUI::OrnamentElement::Clear(SnippetUI::OrnamentElement *this)
{
  uint64_t v2;
  char *v3;
  char v4;

  *((_DWORD *)this + 4) = 0;
  v2 = *((_QWORD *)this + 5);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v4 = *((_BYTE *)this + 8);
  v3 = (char *)this + 8;
  *((_QWORD *)v3 + 4) = 0;
  v3[40] = 0;
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear((google::protobuf::internal::InternalMetadataWithArena *)v3);
}

uint64_t SnippetUI::OrnamentElement::IsInitialized(SnippetUI::OrnamentElement *this)
{
  return 1;
}

char *SnippetUI::OrnamentElement::ByteSizeLong(SnippetUI::OrnamentElement *this)
{
  _DWORD *v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  SnippetUI::ImageElement **v11;
  char *v12;
  const google::protobuf::UnknownFieldSet *v13;

  v2 = (_DWORD *)((char *)this + 16);
  v3 = *((_DWORD *)this + 4);
  if (!v3)
  {
    v5 = 0;
LABEL_11:
    v9 = 0;
    v8 = 0;
    goto LABEL_14;
  }
  v4 = 0;
  v5 = 0;
  do
  {
    v6 = *(_DWORD *)google::protobuf::RepeatedField<int>::Get(v2, v4);
    if (v6 < 0)
      v7 = 10;
    else
      v7 = (9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6;
    v5 += v7;
    ++v4;
  }
  while (v3 != v4);
  if (!v5)
    goto LABEL_11;
  if ((v5 & 0x80000000) != 0)
    v8 = 11;
  else
    v8 = ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  v9 = v5;
LABEL_14:
  *((_DWORD *)this + 8) = v9;
  v10 = v8 + v5;
  if (this != (SnippetUI::OrnamentElement *)&SnippetUI::_OrnamentElement_default_instance_)
  {
    v11 = (SnippetUI::ImageElement **)*((_QWORD *)this + 5);
    if (v11)
    {
      v12 = SnippetUI::VisualElement::ByteSizeLong(v11);
      v10 += (uint64_t)&v12[((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6) + 1];
    }
  }
  if (*((_BYTE *)this + 48))
    v13 = (const google::protobuf::UnknownFieldSet *)(v10 + 2);
  else
    v13 = (const google::protobuf::UnknownFieldSet *)v10;
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::OrnamentElement *)((char *)this + 8), v13, (_DWORD *)this + 13);
  *((_DWORD *)this + 13) = (_DWORD)v13;
  return (char *)v13;
}

uint64_t SnippetUI::OrnamentElement::GetCachedSize(SnippetUI::OrnamentElement *this)
{
  return *((unsigned int *)this + 13);
}

google::protobuf::internal *SnippetUI::OrnamentElement::_InternalParse(SnippetUI::OrnamentElement *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  google::protobuf::internal *v5;
  uint64_t *v6;
  google::protobuf::internal::ParseContext *v7;
  google::protobuf::internal::ParseContext *v8;
  google::protobuf::internal *TagFallback;
  char *v10;
  unsigned int v11;
  BOOL v13;
  char *v14;
  google::protobuf::internal *v15;
  unint64_t v16;
  int v17;
  SnippetUI::VisualElement *v18;
  google::protobuf::internal *v19;
  uint64_t v20;
  int v21;
  google::protobuf::internal *v23;

  v23 = a2;
  v5 = (SnippetUI::OrnamentElement *)((char *)this + 16);
  v6 = (uint64_t *)((char *)this + 8);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v23, *((_DWORD *)a3 + 23)) & 1) != 0)return v23;
        TagFallback = (google::protobuf::internal *)((char *)v23 + 1);
        v10 = (char *)*(unsigned __int8 *)v23;
        if ((*(char *)v23 & 0x80000000) == 0)
          goto LABEL_6;
        v10 = (char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
        if ((*(char *)TagFallback & 0x80000000) == 0)
        {
          TagFallback = (google::protobuf::internal *)((char *)v23 + 2);
LABEL_6:
          v23 = TagFallback;
          goto LABEL_7;
        }
        TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v23, v10);
        v23 = TagFallback;
        if (!TagFallback)
          return TagFallback;
LABEL_7:
        v11 = v10 >> 3;
        if (v10 >> 3 != 3)
          break;
        if (v10 != 24)
          goto LABEL_13;
        v15 = (google::protobuf::internal *)((char *)TagFallback + 1);
        v16 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          v17 = *(char *)v15;
          v16 = v16 + (v17 << 7) - 128;
          if ((v17 & 0x80000000) == 0)
          {
            v15 = (google::protobuf::internal *)((char *)TagFallback + 2);
            goto LABEL_22;
          }
          v19 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v16);
          v23 = v19;
          *((_BYTE *)this + 48) = v20 != 0;
          if (!v19)
            return 0;
        }
        else
        {
LABEL_22:
          v23 = v15;
          *((_BYTE *)this + 48) = v16 != 0;
        }
      }
      if (v11 == 2)
        break;
      if (v11 != 1 || v10 != 10)
      {
LABEL_13:
        if ((_DWORD)v10)
          v13 = (v10 & 7) == 4;
        else
          v13 = 1;
        if (v13)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v10 - 1;
          return TagFallback;
        }
        v14 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v6, TagFallback, a3, v8);
        goto LABEL_28;
      }
      v18 = (SnippetUI::VisualElement *)*((_QWORD *)this + 5);
      if (!v18)
      {
        v18 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualElement>(0);
        *((_QWORD *)this + 5) = v18;
        TagFallback = v23;
      }
      v14 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::VisualElement>(a3, v18, TagFallback);
LABEL_28:
      v23 = (google::protobuf::internal *)v14;
      if (!v14)
        return 0;
    }
    if (v10 == 18)
    {
      v14 = google::protobuf::internal::PackedInt32Parser(v5, TagFallback, a3, v7);
      goto LABEL_28;
    }
    if (v10 != 16)
      goto LABEL_13;
    v21 = google::protobuf::internal::ReadVarint(&v23, (const char **)v10);
    if (!v23)
      return 0;
    SnippetUI::ColorElement::_internal_add_idioms((uint64_t)this, v21);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::OrnamentElement::InternalSerializeWithCachedSizesToArray(SnippetUI::OrnamentElement *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  SnippetUI::VisualElement *v7;
  unsigned int v8;
  char *v9;
  unsigned int v10;
  _BYTE *v11;
  _BYTE *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  std::string *v17;
  _BYTE *v18;
  int *v19;
  int *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  unsigned int v31;
  char v32;
  std::string v33[2];

  v5 = (char *)a2;
  if (this != (SnippetUI::OrnamentElement *)&SnippetUI::_OrnamentElement_default_instance_)
  {
    v7 = (SnippetUI::VisualElement *)*((_QWORD *)this + 5);
    if (v7)
    {
      if (*(_QWORD *)a3 <= (unint64_t)a2)
      {
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
        v7 = (SnippetUI::VisualElement *)*((_QWORD *)this + 5);
      }
      *v5 = 10;
      v8 = *((_DWORD *)v7 + 6);
      if (v8 > 0x7F)
      {
        v5[1] = v8 | 0x80;
        v10 = v8 >> 7;
        if (v8 >> 14)
        {
          v11 = v5 + 2;
          do
          {
            v12 = v11;
            *v11++ = v10 | 0x80;
            v13 = v10 >> 7;
            v14 = v10 >> 14;
            v10 >>= 7;
          }
          while (v14);
          v9 = v12 + 2;
          *v11 = v13;
        }
        else
        {
          v5[2] = v10;
          v9 = v5 + 3;
        }
      }
      else
      {
        v5[1] = v8;
        v9 = v5 + 2;
      }
      v5 = (char *)SnippetUI::VisualElement::InternalSerializeWithCachedSizesToArray(v7, v9, a3, a4);
    }
  }
  v15 = *((_DWORD *)this + 8);
  if ((int)v15 >= 1)
  {
    v16 = *(_QWORD *)a3;
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v16 = *(_QWORD *)a3;
    }
    if (v16 <= (unint64_t)v5)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v33, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/io/coded_stream.h", 856);
      v17 = google::protobuf::internal::LogMessage::operator<<(v33, "CHECK failed: ptr < end_: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v32, (const char **)&v17->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v33[0].__r_.__value_.__l.__data_);
    }
    *v5 = 18;
    v18 = v5 + 1;
    if (v15 >= 0x80)
    {
      do
      {
        *v18++ = v15 | 0x80;
        v31 = v15 >> 14;
        v15 >>= 7;
      }
      while (v31);
      v5 = v18 - 1;
    }
    v5 += 2;
    *v18 = v15;
    v19 = (int *)*((_QWORD *)this + 3);
    v20 = &v19[*((int *)this + 4)];
    do
    {
      if ((unint64_t)v5 >= *(_QWORD *)a3)
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v22 = *v19++;
      v21 = v22;
      if (v22 > 0x7F)
      {
        *v5 = v21 | 0x80;
        v23 = v21 >> 7;
        if (v21 >> 14)
        {
          v24 = v5 + 1;
          do
          {
            v25 = v24;
            *v24++ = v23 | 0x80;
            v26 = v23 >> 7;
            v27 = v23 >> 14;
            v23 >>= 7;
          }
          while (v27);
          v5 = v25 + 2;
          *v24 = v26;
        }
        else
        {
          v5[1] = v23;
          v5 += 2;
        }
      }
      else
      {
        *v5++ = v21;
      }
    }
    while (v19 < v20);
  }
  if (*((_BYTE *)this + 48))
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v28 = *((_BYTE *)this + 48);
    }
    else
    {
      v28 = 1;
    }
    *v5 = 24;
    v5[1] = v28;
    v5 += 2;
  }
  v29 = *((_QWORD *)this + 1);
  if ((v29 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v29 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  return (const google::protobuf::UnknownFieldSet *)v5;
}

void sub_1BFC58F9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::OrnamentElement::CopyFrom(SnippetUI::OrnamentElement *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::OrnamentElement::Clear(this);
    SnippetUI::OrnamentElement::MergeFrom(this, a2);
  }
}

void SnippetUI::OrnamentElement::MergeFrom(SnippetUI::OrnamentElement *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::OrnamentElement *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/OrnamentElement.pb.cc", 307);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::OrnamentElement::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BFC59094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::OrnamentElement::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 52) = a2;
  return this;
}

uint64_t SnippetUI::OrnamentElement::GetMetadata(SnippetUI::OrnamentElement *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_OrnamentElement_2eproto);
  return file_level_metadata_OrnamentElement_2eproto;
}

void *SnippetUI::OrnamentElement::default_instance(SnippetUI::OrnamentElement *this)
{
  if (atomic_load(scc_info_OrnamentElement_OrnamentElement_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_OrnamentElement_OrnamentElement_2eproto);
  return &SnippetUI::_OrnamentElement_default_instance_;
}

void SnippetUI::OrnamentElement::MergeFrom(SnippetUI::OrnamentElement *this, const SnippetUI::OrnamentElement *a2)
{
  std::string *v4;
  uint64_t v5;
  const SnippetUI::VisualElement *v6;
  SnippetUI::VisualElement *v7;
  const SnippetUI::VisualElement *v8;
  char v9;
  std::string v10[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/OrnamentElement.pb.cc", 322);
    v4 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::OrnamentElement *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  google::protobuf::RepeatedField<int>::MergeFrom((int *)this + 4, (int *)a2 + 4);
  if (a2 != (const SnippetUI::OrnamentElement *)&SnippetUI::_OrnamentElement_default_instance_)
  {
    v6 = (const SnippetUI::VisualElement *)*((_QWORD *)a2 + 5);
    if (v6)
    {
      v7 = (SnippetUI::VisualElement *)*((_QWORD *)this + 5);
      if (!v7)
      {
        v7 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualElement>(0);
        *((_QWORD *)this + 5) = v7;
        v6 = (const SnippetUI::VisualElement *)*((_QWORD *)a2 + 5);
      }
      if (v6)
        v8 = v6;
      else
        v8 = (const SnippetUI::VisualElement *)&SnippetUI::_VisualElement_default_instance_;
      SnippetUI::VisualElement::MergeFrom(v7, v8);
    }
  }
  if (*((_BYTE *)a2 + 48))
    *((_BYTE *)this + 48) = 1;
}

void sub_1BFC591F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::OrnamentElement *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::OrnamentElement>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::OrnamentElement *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::OrnamentElement *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x38uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::OrnamentElement>);
    SnippetUI::OrnamentElement::OrnamentElement(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::OrnamentElement *)operator new();
    SnippetUI::OrnamentElement::OrnamentElement(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFC5928C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C4023CD61A6);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::OrnamentElement>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void SnippetUI::OrnamentElement::InitAsDefaultInstance(SnippetUI::OrnamentElement *this)
{
  qword_1ED1D4A18 = (uint64_t)&SnippetUI::_VisualElement_default_instance_;
}

uint64_t SnippetUI::OrnamentElement::_Internal::visual(SnippetUI::OrnamentElement::_Internal *this, const SnippetUI::OrnamentElement *a2)
{
  return *((_QWORD *)this + 5);
}

uint64_t SnippetUI::OrnamentElement::clear_visual(SnippetUI::OrnamentElement *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 5);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 5) = 0;
  return result;
}

SnippetUI::OrnamentElement *SnippetUI::OrnamentElement::OrnamentElement(SnippetUI::OrnamentElement *this, const SnippetUI::OrnamentElement *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  SnippetUI::VisualElement *v6;

  *(_QWORD *)this = &off_1E793A0E0;
  *((_QWORD *)this + 1) = 0;
  v4 = (SnippetUI::OrnamentElement *)((char *)this + 8);
  google::protobuf::RepeatedField<int>::RepeatedField((uint64_t)this + 16, (int *)a2 + 4);
  *((_DWORD *)this + 13) = 0;
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom(v4, (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = 0;
  if (a2 != (const SnippetUI::OrnamentElement *)&SnippetUI::_OrnamentElement_default_instance_ && *((_QWORD *)a2 + 5))
  {
    v6 = (SnippetUI::VisualElement *)operator new();
    SnippetUI::VisualElement::VisualElement(v6, *((const SnippetUI::VisualElement **)a2 + 5));
  }
  *((_QWORD *)this + 5) = v6;
  *((_BYTE *)this + 48) = *((_BYTE *)a2 + 48);
  return this;
}

void sub_1BFC5942C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x1C3B8D890](v3, 0x10A1C406A65A86DLL);
  google::protobuf::RepeatedField<int>::~RepeatedField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::OrnamentElement::CopyFrom(SnippetUI::OrnamentElement *this, const SnippetUI::OrnamentElement *a2)
{
  if (a2 != this)
  {
    SnippetUI::OrnamentElement::Clear(this);
    SnippetUI::OrnamentElement::MergeFrom(this, a2);
  }
}

void SnippetUI::OrnamentElement::InternalSwap(SnippetUI::OrnamentElement *this, SnippetUI::OrnamentElement *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t v7;
  google::protobuf::UnknownFieldSet *v8;

  v4 = (SnippetUI::OrnamentElement *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v8;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  google::protobuf::RepeatedField<int>::InternalSwap((uint64_t)this + 16, (uint64_t)a2 + 16);
  v7 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v7;
  LOBYTE(v7) = *((_BYTE *)this + 48);
  *((_BYTE *)this + 48) = *((_BYTE *)a2 + 48);
  *((_BYTE *)a2 + 48) = v7;
}

siri::dialogengine::VariableArray *DE_NSObjectToVariable(const char *a1, void *a2, uint64_t a3, const void **a4, uint64_t a5, int a6)
{
  id v8;
  siri::dialogengine::VariableArray *v9;
  std::string *v10;
  __int128 v11;
  int v12;
  int v13;
  int v14;
  std::string *v15;
  __int128 v16;
  int v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  size_t v27;
  size_t v28;
  size_t v29;
  std::string *v30;
  size_t size;
  char *v32;
  size_t v33;
  std::string *v34;
  char *v35;
  size_t v36;
  std::string *v37;
  uint64_t v38;
  double v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t i;
  uint64_t v44;
  std::__shared_weak_count_vtbl *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::string *v49;
  __int128 v50;
  int v51;
  const std::string::value_type *v52;
  std::string::size_type v53;
  std::string *v54;
  __int128 v55;
  void *v56;
  siri::dialogengine::VariableObject *v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t j;
  void *v62;
  const char *v63;
  id v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  id v72;
  BOOL v73;
  id v74;
  id v76;
  uint64_t v79[2];
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  _QWORD v84[2];
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  std::string v89;
  std::string v90;
  std::string v91;
  std::string v92;
  std::string v93;
  std::string v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  std::string __p;
  std::string __s;
  unsigned __int8 v99;
  char v100;
  uint64_t v101;
  std::__shared_weak_count *v102;
  std::string v103;
  _BYTE v104[128];
  _BYTE v105[128];
  uint64_t v106;

  v106 = *MEMORY[0x1E0C80C00];
  v8 = a2;
  if (!v8)
  {
    v9 = 0;
    goto LABEL_152;
  }
  memset(&v103, 0, sizeof(v103));
  v74 = v8;
  if (siri::dialogengine::IsPrimitiveType((const void **)a3))
  {
    std::string::operator=(&v103, (const std::string *)a3);
    v73 = 1;
    goto LABEL_59;
  }
  siri::dialogengine::ObjectRegistry::GetObject((uint64_t)a1, (const std::string::value_type **)a3, &v101);
  if (v101)
  {
    siri::dialogengine::ObjectSchema::GetProperty(v101, a1, a4, 0, (siri::dialogengine::ObjectProperty *)&__p);
    if (v100)
    {
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v93, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
      else
        v93 = __s;
      if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v103.__r_.__value_.__l.__data_);
      v103 = v93;
      v14 = v99;
    }
    else
    {
      siri::dialogengine::ObjectSchema::GetInput(v101, a1, a4, 0, (uint64_t)&v93);
      v13 = v96;
      if (v96)
      {
        if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v92, v94.__r_.__value_.__l.__data_, v94.__r_.__value_.__l.__size_);
        else
          v92 = v94;
        if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v103.__r_.__value_.__l.__data_);
        v103 = v92;
        v14 = v95;
      }
      else
      {
        std::operator+<char>();
        v15 = std::string::append(&v89, "' on type '");
        v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
        v90.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v16;
        v15->__r_.__value_.__l.__size_ = 0;
        v15->__r_.__value_.__r.__words[2] = 0;
        v15->__r_.__value_.__r.__words[0] = 0;
        v17 = *(char *)(a3 + 23);
        if (v17 >= 0)
          v18 = (const std::string::value_type *)a3;
        else
          v18 = *(const std::string::value_type **)a3;
        if (v17 >= 0)
          v19 = *(unsigned __int8 *)(a3 + 23);
        else
          v19 = *(_QWORD *)(a3 + 8);
        v20 = std::string::append(&v90, v18, v19);
        v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
        v91.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v21;
        v20->__r_.__value_.__l.__size_ = 0;
        v20->__r_.__value_.__r.__words[2] = 0;
        v20->__r_.__value_.__r.__words[0] = 0;
        v22 = std::string::append(&v91, "' for computed property callback!");
        v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        v92.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::Log::LogWithLevel((uint64_t)&v92, 3u);
        if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v92.__r_.__value_.__l.__data_);
        if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v91.__r_.__value_.__l.__data_);
        if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v90.__r_.__value_.__l.__data_);
        if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v89.__r_.__value_.__l.__data_);
        v14 = 1;
      }
      if (v96)
        siri::dialogengine::PropertyBase::~PropertyBase((void **)&v93.__r_.__value_.__l.__data_);
      if (!v13)
      {
        v12 = 1;
LABEL_49:
        if (v100)
          siri::dialogengine::ObjectProperty::~ObjectProperty((void **)&__p.__r_.__value_.__l.__data_);
        v73 = v14 != 0;
        goto LABEL_52;
      }
    }
    if (a6)
    {
      siri::dialogengine::GetArrayElementType((uint64_t)&v103, &v93);
      if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v103.__r_.__value_.__l.__data_);
      v12 = 0;
      v103 = v93;
    }
    else
    {
      v12 = 0;
    }
    goto LABEL_49;
  }
  std::operator+<char>();
  v10 = std::string::append(&v93, "' for computed property callback!");
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::Log::LogWithLevel((uint64_t)&__p, 3u);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v93.__r_.__value_.__l.__data_);
  v73 = 1;
  v12 = 1;
LABEL_52:
  v24 = v102;
  if (!v102)
    goto LABEL_56;
  p_shared_owners = (unint64_t *)&v102->__shared_owners_;
  do
    v26 = __ldaxr(p_shared_owners);
  while (__stlxr(v26 - 1, p_shared_owners));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
    if (v12)
      goto LABEL_57;
  }
  else
  {
LABEL_56:
    if (v12)
    {
LABEL_57:
      v9 = 0;
      goto LABEL_150;
    }
  }
LABEL_59:
  v27 = strlen(siri::dialogengine::TYPE_STRING[0]);
  v28 = v27;
  v29 = HIBYTE(v103.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
  {
    size = v103.__r_.__value_.__l.__size_;
    if (v27 != v103.__r_.__value_.__l.__size_)
    {
      v32 = siri::dialogengine::TYPE_NUMBER[0];
      v33 = strlen(siri::dialogengine::TYPE_NUMBER[0]);
      goto LABEL_73;
    }
    if (v27 == -1)
      std::string::__throw_out_of_range[abi:ne180100]();
    v30 = (std::string *)v103.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (v27 != HIBYTE(v103.__r_.__value_.__r.__words[2]))
    {
      v32 = siri::dialogengine::TYPE_NUMBER[0];
      v33 = strlen(siri::dialogengine::TYPE_NUMBER[0]);
LABEL_69:
      if (v33 != v29)
      {
        v35 = siri::dialogengine::TYPE_BOOLEAN;
        v36 = strlen(siri::dialogengine::TYPE_BOOLEAN);
LABEL_78:
        if (v36 != v29)
          goto LABEL_91;
        v37 = &v103;
        goto LABEL_90;
      }
      v34 = &v103;
      size = v29;
      goto LABEL_76;
    }
    v30 = &v103;
  }
  if (!memcmp(v30, siri::dialogengine::TYPE_STRING[0], v28))
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
      goto LABEL_146;
    v38 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    std::string::basic_string[abi:ne180100]<0>(&v93, (char *)objc_msgSend(objc_retainAutorelease(v8), "UTF8String"));
    v9 = (siri::dialogengine::VariableArray *)v38;
    siri::dialogengine::VariableString::VariableString(v38, &__p, (uint64_t)&v93);
    if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v93.__r_.__value_.__l.__data_);
    goto LABEL_124;
  }
  v32 = siri::dialogengine::TYPE_NUMBER[0];
  v33 = strlen(siri::dialogengine::TYPE_NUMBER[0]);
  if ((v29 & 0x80) == 0)
    goto LABEL_69;
  size = v103.__r_.__value_.__l.__size_;
LABEL_73:
  if (v33 != size)
  {
    v35 = siri::dialogengine::TYPE_BOOLEAN;
    v36 = strlen(siri::dialogengine::TYPE_BOOLEAN);
    goto LABEL_87;
  }
  if (size == -1)
    std::string::__throw_out_of_range[abi:ne180100]();
  v34 = (std::string *)v103.__r_.__value_.__r.__words[0];
LABEL_76:
  if (!memcmp(v34, v32, size))
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
      goto LABEL_146;
    v9 = (siri::dialogengine::VariableArray *)operator new();
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    objc_msgSend(v8, "doubleValue");
    siri::dialogengine::VariableNumber::VariableNumber((uint64_t)v9, &__p, v39);
LABEL_124:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    *((_BYTE *)v9 + 65) = v73;
    goto LABEL_150;
  }
  v35 = siri::dialogengine::TYPE_BOOLEAN;
  v36 = strlen(siri::dialogengine::TYPE_BOOLEAN);
  if ((v29 & 0x80) == 0)
    goto LABEL_78;
  size = v103.__r_.__value_.__l.__size_;
LABEL_87:
  if (v36 != size)
    goto LABEL_91;
  if (size == -1)
    std::string::__throw_out_of_range[abi:ne180100]();
  v37 = (std::string *)v103.__r_.__value_.__r.__words[0];
  v29 = size;
LABEL_90:
  if (!memcmp(v37, v35, v29))
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
      goto LABEL_146;
    v9 = (siri::dialogengine::VariableArray *)operator new();
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    siri::dialogengine::VariableBoolean::VariableBoolean((uint64_t)v9, &__p, objc_msgSend(v8, "BOOLValue"));
    goto LABEL_124;
  }
LABEL_91:
  if (siri::dialogengine::IsArrayType(&v103))
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      siri::dialogengine::GetArrayElementType((uint64_t)&v103, &__p);
      v72 = v8;
      v9 = (siri::dialogengine::VariableArray *)operator new();
      siri::dialogengine::VariableArray::VariableArray(v9);
      v87 = 0u;
      v88 = 0u;
      v85 = 0u;
      v86 = 0u;
      v40 = v72;
      v41 = objc_msgSend(v40, "countByEnumeratingWithState:objects:count:", &v85, v105, 16, v72);
      if (v41)
      {
        v42 = *(_QWORD *)v86;
        do
        {
          for (i = 0; i != v41; ++i)
          {
            if (*(_QWORD *)v86 != v42)
              objc_enumerationMutation(v40);
            v44 = DE_NSObjectToVariable(a1, *(_QWORD *)(*((_QWORD *)&v85 + 1) + 8 * i), a3, a4, a5, 1);
            v45 = (std::__shared_weak_count_vtbl *)v44;
            if (v44)
            {
              v84[0] = v44;
              v46 = (std::__shared_weak_count *)operator new();
              v46->__shared_owners_ = 0;
              v47 = (unint64_t *)&v46->__shared_owners_;
              v46->__vftable = (std::__shared_weak_count_vtbl *)&off_1E793A2D8;
              v46->__shared_weak_owners_ = 0;
              v46[1].__vftable = v45;
              v84[1] = v46;
              siri::dialogengine::VariableArray::AddItem(v9, v84);
              do
                v48 = __ldaxr(v47);
              while (__stlxr(v48 - 1, v47));
              if (!v48)
              {
                ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                std::__shared_weak_count::__release_weak(v46);
              }
            }
          }
          v41 = objc_msgSend(v40, "countByEnumeratingWithState:objects:count:", &v85, v105, 16);
        }
        while (v41);
      }

      v8 = v74;
      *((_BYTE *)v9 + 65) = v73;

      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_150;
    }
  }
  else
  {
    if (siri::dialogengine::IsPrimitiveType((const void **)&v103.__r_.__value_.__l.__data_)
      || siri::dialogengine::IsArrayType(&v103))
    {
      std::operator+<char>();
      v49 = std::string::append(&v92, "' for computed property at: ");
      v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
      v93.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v50;
      v49->__r_.__value_.__l.__size_ = 0;
      v49->__r_.__value_.__r.__words[2] = 0;
      v49->__r_.__value_.__r.__words[0] = 0;
      v51 = *(char *)(a5 + 23);
      if (v51 >= 0)
        v52 = (const std::string::value_type *)a5;
      else
        v52 = *(const std::string::value_type **)a5;
      if (v51 >= 0)
        v53 = *(unsigned __int8 *)(a5 + 23);
      else
        v53 = *(_QWORD *)(a5 + 8);
      v54 = std::string::append(&v93, v52, v53);
      v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v55;
      v54->__r_.__value_.__l.__size_ = 0;
      v54->__r_.__value_.__r.__words[2] = 0;
      v54->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Log::LogWithLevel((uint64_t)&__p, 3u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v93.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v92.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_149;
      v56 = (void *)v92.__r_.__value_.__r.__words[0];
      goto LABEL_148;
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v76 = v8;
      v57 = (siri::dialogengine::VariableObject *)operator new();
      siri::dialogengine::VariableObject::VariableObject(v57);
      v82 = 0u;
      v83 = 0u;
      v80 = 0u;
      v81 = 0u;
      v58 = v76;
      v59 = objc_msgSend(v58, "countByEnumeratingWithState:objects:count:", &v80, v104, 16);
      if (v59)
      {
        v60 = *(_QWORD *)v81;
        do
        {
          for (j = 0; j != v59; ++j)
          {
            if (*(_QWORD *)v81 != v60)
              objc_enumerationMutation(v58);
            v62 = *(void **)(*((_QWORD *)&v80 + 1) + 8 * j);
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
            {
              v64 = objc_retainAutorelease(v62);
              std::string::basic_string[abi:ne180100]<0>(&__p, (char *)objc_msgSend(v64, "UTF8String"));
              objc_msgSend(v58, "objectForKey:", v64);
              v65 = (void *)objc_claimAutoreleasedReturnValue();
              v66 = DE_NSObjectToVariable(a1, v65, &v103, &__p, a5, 0);
              v67 = v66;
              if (v66)
              {
                std::string::operator=((std::string *)(v66 + 8), &__p);
                v79[0] = v67;
                v68 = (std::__shared_weak_count *)operator new();
                v68->__shared_owners_ = 0;
                v69 = (unint64_t *)&v68->__shared_owners_;
                v68->__vftable = (std::__shared_weak_count_vtbl *)&off_1E793A2D8;
                v68->__shared_weak_owners_ = 0;
                v68[1].__vftable = (std::__shared_weak_count_vtbl *)v67;
                v79[1] = (uint64_t)v68;
                siri::dialogengine::VariableObject::AddProperty((uint64_t)v57, v79);
                do
                  v70 = __ldaxr(v69);
                while (__stlxr(v70 - 1, v69));
                if (!v70)
                {
                  ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                  std::__shared_weak_count::__release_weak(v68);
                }
              }

              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
            }
            else
            {
              siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Custom concept callback returned a dictionary with a non-string key.", v63);
            }
          }
          v59 = objc_msgSend(v58, "countByEnumeratingWithState:objects:count:", &v80, v104, 16);
        }
        while (v59);
      }

      *((_BYTE *)v57 + 65) = v73;
      v9 = v57;
      goto LABEL_150;
    }
  }
LABEL_146:
  std::operator+<char>();
  siri::dialogengine::Log::LogWithLevel((uint64_t)&__p, 3u);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    v56 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_148:
    operator delete(v56);
  }
LABEL_149:
  v9 = 0;
LABEL_150:
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v103.__r_.__value_.__l.__data_);
LABEL_152:

  return v9;
}

void sub_1BFC5A12C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;

  if (SLOBYTE(STACK[0x327]) < 0)
    operator delete((void *)STACK[0x310]);

  _Unwind_Resume(a1);
}

id DE_VariableToNSObject(void *a1, uint64_t a2)
{
  void *v2;
  char *v4;
  void *v5;
  double *v6;
  uint64_t v7;
  std::string *v8;
  std::string *v9;
  unsigned __int8 *v10;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  unint64_t *v24;
  unint64_t v25;
  const void ***v26;
  const void ***v27;
  std::string::size_type v28;
  void *v29;
  std::string *v30;
  void *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  std::string *v35;
  std::string *v36;
  BOOL v37;
  std::string v38;
  void *v39;
  std::__shared_weak_count *v40;
  char v41;
  void *v42;
  char v43;
  void *v44;
  char v45;
  void *v46;
  char v47;
  void *v48;
  char v49;
  void *__p;
  char v51;
  std::string v52;

  v2 = a1;
  if (!a1)
    return v2;
  if (v4)
  {
    v5 = (void *)MEMORY[0x1E0CB3940];
    if ((_DWORD)a2)
    {
      if (v4[95] < 0)
        std::string::__init_copy_ctor_external(&v38, *((const std::string::value_type **)v4 + 9), *((_QWORD *)v4 + 10));
      else
        v38 = *(std::string *)(v4 + 3);
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v9 = &v38;
      else
        v9 = (std::string *)v38.__r_.__value_.__r.__words[0];
      objc_msgSend(v5, "stringWithUTF8String:", v9, *(_OWORD *)&v38.__r_.__value_.__l.__data_, v38.__r_.__value_.__r.__words[2]);
      v2 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v4 + 48))(&v38);
      siri::dialogengine::SpeakableString::ToMultiplexedString((siri::dialogengine::SpeakableString *)&v38, &v52);
      if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v8 = &v52;
      else
        v8 = (std::string *)v52.__r_.__value_.__r.__words[0];
      objc_msgSend(v5, "stringWithUTF8String:", v8);
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v52.__r_.__value_.__l.__data_);
      if (v51 < 0)
        operator delete(__p);
      if (v49 < 0)
        operator delete(v48);
      if (v47 < 0)
        operator delete(v46);
      if (v45 < 0)
        operator delete(v44);
      if (v43 < 0)
        operator delete(v42);
      if (v41 < 0)
        operator delete(v39);
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
    return v2;
  }
  if (v6)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v6[9]);
    v7 = objc_claimAutoreleasedReturnValue();
LABEL_34:
    v2 = (void *)v7;
    return v2;
  }
  if (v10)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", v10[66]);
    v7 = objc_claimAutoreleasedReturnValue();
    goto LABEL_34;
  }
  if (v12)
  {
    v13 = v12;
    v2 = (void *)objc_opt_new();
    v14 = v13[10] - v13[9];
    if (!v14)
      return v2;
    v15 = 0;
    v16 = v14 >> 4;
    while (1)
    {
      v17 = v13[9];
      if (v15 >= (v13[10] - v17) >> 4)
      {
        v19 = 0;
        *(_OWORD *)&v38.__r_.__value_.__l.__data_ = 0uLL;
      }
      else
      {
        v18 = *(_OWORD *)(v17 + 16 * v15);
        *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v18;
        v19 = v18;
        if (*((_QWORD *)&v18 + 1))
        {
          v20 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
        }
      }
      DE_VariableToNSObject(v19, a2);
      v22 = objc_claimAutoreleasedReturnValue();
      v23 = (void *)v22;
      if (v38.__r_.__value_.__l.__size_)
      {
        v24 = (unint64_t *)(v38.__r_.__value_.__l.__size_ + 8);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
          break;
      }
      if (v22)
        goto LABEL_50;
LABEL_51:

      if (++v15 == v16)
        return v2;
    }
    (*(void (**)(std::string::size_type))(*(_QWORD *)v38.__r_.__value_.__l.__size_ + 16))(v38.__r_.__value_.__l.__size_);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v38.__r_.__value_.__l.__size_);
    if (!v23)
      goto LABEL_51;
LABEL_50:
    objc_msgSend(v2, "addObject:", v23, v38.__r_.__value_.__r.__words[0]);
    goto LABEL_51;
  }
  if (v26)
  {
    v27 = v26;
    v2 = (void *)objc_opt_new();
    std::map<std::string,std::shared_ptr<siri::dialogengine::Variable>>::map[abi:ne180100]((uint64_t)&v52, v27 + 9);
    v28 = v52.__r_.__value_.__r.__words[0];
    if ((std::string::size_type *)v52.__r_.__value_.__l.__data_ != &v52.__r_.__value_.__r.__words[1])
    {
      do
      {
        std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>::pair[abi:ne180100](&v38, (__int128 *)(v28 + 32));
        DE_VariableToNSObject(v39, a2);
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        if (v29)
        {
          if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v30 = &v38;
          else
            v30 = (std::string *)v38.__r_.__value_.__r.__words[0];
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v30);
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v2, "setObject:forKey:", v29, v31);

        }
        v32 = v40;
        if (v40)
        {
          p_shared_owners = (unint64_t *)&v40->__shared_owners_;
          do
            v34 = __ldaxr(p_shared_owners);
          while (__stlxr(v34 - 1, p_shared_owners));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v38.__r_.__value_.__l.__data_);
        v35 = *(std::string **)(v28 + 8);
        if (v35)
        {
          do
          {
            v36 = v35;
            v35 = (std::string *)v35->__r_.__value_.__r.__words[0];
          }
          while (v35);
        }
        else
        {
          do
          {
            v36 = *(std::string **)(v28 + 16);
            v37 = v36->__r_.__value_.__r.__words[0] == v28;
            v28 = (std::string::size_type)v36;
          }
          while (!v37);
        }
        v28 = (std::string::size_type)v36;
      }
      while (v36 != (std::string *)&v52.__r_.__value_.__r.__words[1]);
    }
    std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)v52.__r_.__value_.__l.__size_);
    return v2;
  }
  return 0;
}

void sub_1BFC5A904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::TestRunner::RunTestSuite(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  std::string *v3;
  uint64_t *v4;
  siri::dialogengine::TestCase *v5;
  siri::dialogengine::TestCase *v6;
  std::string::size_type i;
  std::string::size_type size;
  uint64_t v9;
  std::string *v10;
  char *v11;
  std::string::size_type v12;
  std::string *v13;
  const char *v14;
  _QWORD *v15;
  _QWORD *v16;
  size_t v17;
  _QWORD *v18;
  _QWORD *v19;
  const std::locale::facet *v20;
  __int128 v21;
  _BOOL4 v24;
  __int128 v25;
  uint64_t *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  uint64_t v31;
  std::string::size_type j;
  std::string::size_type v33;
  const void *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  const siri::dialogengine::ConditionExpression *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  siri::dialogengine::ExecutionState *v51;
  uint64_t v52;
  siri::dialogengine::Context **v53;
  int v54;
  unint64_t *v55;
  unint64_t v56;
  const char *v57;
  uint64_t *v58;
  uint64_t v59;
  const char *v60;
  std::string::size_type v61;
  std::string::size_type k;
  const void *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  char *v67;
  char *v68;
  unint64_t *v69;
  unint64_t v70;
  std::string *v71;
  __int128 v72;
  std::string *v73;
  __int128 v74;
  _OWORD *v75;
  std::string::size_type v76;
  std::string *v77;
  __int128 v78;
  std::string *v79;
  __int128 v80;
  std::string *v81;
  std::string::size_type v82;
  _OWORD *v83;
  std::string::size_type v84;
  std::string *v85;
  __int128 v86;
  std::string *v87;
  __int128 v88;
  std::string *v89;
  std::string::size_type v90;
  _OWORD *v91;
  __int128 v92;
  std::string::size_type v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  char *v99;
  std::string *v100;
  __int128 v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  __int128 v108;
  std::string *v109;
  __int128 v110;
  std::string *v111;
  __int128 v112;
  std::string *v113;
  std::string::size_type v114;
  std::string *v115;
  __int128 v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  _BOOL8 v121;
  uint64_t v123;
  uint64_t *v124;
  uint64_t *v125;
  siri::dialogengine::TestCase *v126;
  std::string *v127;
  std::string v128[10];
  int v129;
  uint64_t v130;
  std::string *v131;
  std::string v132;
  std::string v133;
  std::string v134;
  char v135;
  std::string __s;
  char *v137;
  char *v138;
  __int128 *v139;
  __int128 *v140;
  siri::dialogengine::TestCase *v141;
  siri::dialogengine::TestCase *v142;
  std::string *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  std::string v149;
  void *v150[2];
  std::string::size_type v151;
  std::string __p[146];
  const siri::dialogengine::ConditionExpression *v153;
  std::__shared_weak_count *v154;
  uint64_t *v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  std::__shared_weak_count *v159;
  uint64_t *v160;
  uint64_t *v161;
  uint64_t v162;
  std::string v163;
  std::string v164;
  std::string v165;
  std::string v166;
  char *v167;
  std::__shared_weak_count *v168;
  const void *v169;
  std::__shared_weak_count *v170;
  std::string v171;
  std::string v172;
  std::string v173;

  MEMORY[0x1E0C80A78](a1);
  v2 = v1;
  v143 = v3;
  v144 = 0;
  v4 = &v144;
  v146 = 0;
  v145 = 0;
  siri::dialogengine::TestSuite::GetTests(v3, &v141);
  v5 = v141;
  v6 = v142;
  if (v141 == v142)
    goto LABEL_250;
  v126 = v142;
  do
  {
    siri::dialogengine::TestCase::TestCase(&v132, v5);
    siri::dialogengine::TestResult::TestResult(v128, (const siri::dialogengine::TestCase *)&v132);
    if (v139 != v140)
    {
      v129 = 2;
      memset(__p, 0, 24);
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(__p, v139, v140, 0xAAAAAAAAAAAAAAABLL * (((char *)v140 - (char *)v139) >> 3));
      size = __p[0].__r_.__value_.__l.__size_;
      for (i = __p[0].__r_.__value_.__r.__words[0]; i != size; i += 24)
      {
        std::operator+<char>();
        siri::dialogengine::TestResult::AddNote((uint64_t)v128, (uint64_t)&v173);
        if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v173.__r_.__value_.__l.__data_);
      }
      v173.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v173);
      goto LABEL_249;
    }
    if (siri::dialogengine::TestCase::ShouldSkip(&v132))
    {
      v129 = 3;
      siri::dialogengine::TestCase::GetSkipReason(&v132, __p);
      siri::dialogengine::TestResult::AddNote((uint64_t)v128, (uint64_t)__p);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      goto LABEL_249;
    }
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(__p, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
    else
      __p[0] = __s;
    v9 = operator new();
    *(_QWORD *)(v9 + 104) = 0;
    *(_OWORD *)v9 = 0u;
    *(_OWORD *)(v9 + 16) = 0u;
    *(_OWORD *)(v9 + 32) = 0u;
    *(_OWORD *)(v9 + 48) = 0u;
    *(_OWORD *)(v9 + 64) = 0u;
    *(_OWORD *)(v9 + 80) = 0u;
    *(_QWORD *)(v9 + 96) = v9 + 104;
    *(_QWORD *)(v9 + 112) = 0;
    *(_QWORD *)(v9 + 120) = 0;
    *(_QWORD *)(v9 + 128) = 0;
    *(_QWORD *)(v9 + 136) = 0;
    v127 = (std::string *)v9;
    if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v173, v134.__r_.__value_.__l.__data_, v134.__r_.__value_.__l.__size_);
    else
      v173 = v134;
    if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
    {
      v12 = v173.__r_.__value_.__l.__size_;
      operator delete(v173.__r_.__value_.__l.__data_);
      if (!v12)
      {
LABEL_27:
        if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v13 = __p;
        else
          v13 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
        v11 = CATExecuteWithStrings((char *)v13, 0, 0);
        std::string::basic_string[abi:ne180100]<0>(&v173, v11);
        if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v172, v133.__r_.__value_.__l.__data_, v133.__r_.__value_.__l.__size_);
        else
          v172 = v133;
        goto LABEL_34;
      }
    }
    else if (!*((_BYTE *)&v173.__r_.__value_.__s + 23))
    {
      goto LABEL_27;
    }
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = __p;
    else
      v10 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
    v11 = CATPatternExecute((std::string::size_type)v10);
    std::string::basic_string[abi:ne180100]<0>(&v173, v11);
    if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v172, v134.__r_.__value_.__l.__data_, v134.__r_.__value_.__l.__size_);
    else
      v172 = v134;
LABEL_34:
    siri::dialogengine::CATExecutionResult::FromJSON((std::string::size_type)&v173, &v172, (std::string **)&v171);
    siri::dialogengine::CATExecutionResult::operator=(&v127, (const std::string **)&v171);
    siri::dialogengine::CATExecutionResult::~CATExecutionResult((siri::dialogengine::CATExecutionResult *)&v171);
    if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v172.__r_.__value_.__l.__data_);
    if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v173.__r_.__value_.__l.__data_);
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"CAT Test JSON response = %s\n", v14, v11);
    if (v135)
    {
      v173.__r_.__value_.__s.__data_[0] = 10;
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)&v173, 1);
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"CAT Test JSON response:\n", 24);
      v17 = strlen(v11);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v11, v17);
      v173.__r_.__value_.__s.__data_[0] = 10;
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)&v173, 1);
      std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(_QWORD *)(*v19 - 24)));
      v20 = std::locale::use_facet((const std::locale *)&v173, MEMORY[0x1E0DE4A90]);
      ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
      std::locale::~locale((std::locale *)&v173);
      std::ostream::put();
      std::ostream::flush();
    }
    free(v11);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    siri::dialogengine::CATExecutionResult::operator=(&v131, (const std::string **)&v127);
    if (SHIBYTE(v127->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(__p, v127->__r_.__value_.__l.__data_, v127->__r_.__value_.__l.__size_);
    }
    else
    {
      v21 = *(_OWORD *)&v127->__r_.__value_.__l.__data_;
      __p[0].__r_.__value_.__r.__words[2] = v127->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v21;
    }
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    {
      if (__p[0].__r_.__value_.__l.__size_ != 7)
      {
        operator delete(__p[0].__r_.__value_.__l.__data_);
LABEL_219:
        v129 = 2;
        if (SHIBYTE(v127->__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(&v171, v127->__r_.__value_.__l.__data_, v127->__r_.__value_.__l.__size_);
        }
        else
        {
          v108 = *(_OWORD *)&v127->__r_.__value_.__l.__data_;
          v171.__r_.__value_.__r.__words[2] = v127->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v171.__r_.__value_.__l.__data_ = v108;
        }
        v109 = std::string::insert(&v171, 0, "Failed with '");
        v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
        v172.__r_.__value_.__r.__words[2] = v109->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v172.__r_.__value_.__l.__data_ = v110;
        v109->__r_.__value_.__l.__size_ = 0;
        v109->__r_.__value_.__r.__words[2] = 0;
        v109->__r_.__value_.__r.__words[0] = 0;
        v111 = std::string::append(&v172, "': ");
        v112 = *(_OWORD *)&v111->__r_.__value_.__l.__data_;
        v173.__r_.__value_.__r.__words[2] = v111->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v173.__r_.__value_.__l.__data_ = v112;
        v111->__r_.__value_.__l.__size_ = 0;
        v111->__r_.__value_.__r.__words[2] = 0;
        v111->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v127[1].__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v166, v127[1].__r_.__value_.__l.__data_, v127[1].__r_.__value_.__l.__size_);
        else
          v166 = v127[1];
        if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v113 = &v166;
        else
          v113 = (std::string *)v166.__r_.__value_.__r.__words[0];
        if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v114 = HIBYTE(v166.__r_.__value_.__r.__words[2]);
        else
          v114 = v166.__r_.__value_.__l.__size_;
        v115 = std::string::append(&v173, (const std::string::value_type *)v113, v114);
        v116 = *(_OWORD *)&v115->__r_.__value_.__l.__data_;
        __p[0].__r_.__value_.__r.__words[2] = v115->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v116;
        v115->__r_.__value_.__l.__size_ = 0;
        v115->__r_.__value_.__r.__words[2] = 0;
        v115->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::TestResult::AddNote((uint64_t)v128, (uint64_t)__p);
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p[0].__r_.__value_.__l.__data_);
        if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v166.__r_.__value_.__l.__data_);
        if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v173.__r_.__value_.__l.__data_);
        if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v172.__r_.__value_.__l.__data_);
        if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v171.__r_.__value_.__l.__data_);
        goto LABEL_248;
      }
      v24 = *(_DWORD *)__p[0].__r_.__value_.__l.__data_ != 1667462515
         || *(_DWORD *)(__p[0].__r_.__value_.__r.__words[0] + 3) != 1936942435;
      operator delete(__p[0].__r_.__value_.__l.__data_);
      if (v24)
        goto LABEL_219;
    }
    else
    {
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) != 7)
        goto LABEL_219;
      if (LODWORD(__p[0].__r_.__value_.__l.__data_) != 1667462515
        || *(_DWORD *)((char *)__p[0].__r_.__value_.__r.__words + 3) != 1936942435)
      {
        goto LABEL_219;
      }
    }
    memset(__p, 0, 24);
    std::vector<std::shared_ptr<siri::dialogengine::Condition>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Condition>*,std::shared_ptr<siri::dialogengine::Condition>*>(__p, v137, v138, (v138 - v137) >> 4);
    v25 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
    v173.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v173);
    if ((_QWORD)v25 == *((_QWORD *)&v25 + 1))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "no expected conditions defined!");
      siri::dialogengine::TestResult::AddNote((uint64_t)v128, (uint64_t)__p);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      v117 = 1;
      goto LABEL_247;
    }
    v161 = 0;
    v160 = 0;
    v162 = 0;
    std::vector<std::shared_ptr<siri::dialogengine::Condition>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Condition>*,std::shared_ptr<siri::dialogengine::Condition>*>(&v160, v137, v138, (v138 - v137) >> 4);
    v123 = v2;
    v124 = v4;
    v26 = v160;
    v125 = v161;
    if (v160 == v161)
      goto LABEL_241;
    while (2)
    {
      v27 = *v26;
      v28 = (std::__shared_weak_count *)v26[1];
      v158 = *v26;
      v159 = v28;
      if (v28)
      {
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v30 = __ldxr(p_shared_owners);
        while (__stxr(v30 + 1, p_shared_owners));
      }
      v156 = 0;
      v155 = 0;
      v157 = 0;
      std::vector<std::shared_ptr<siri::dialogengine::ConditionEntry>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::ConditionEntry>*,std::shared_ptr<siri::dialogengine::ConditionEntry>*>((char *)&v155, *(_QWORD **)(v27 + 144), *(_QWORD **)(v27 + 152), (uint64_t)(*(_QWORD *)(v27 + 152) - *(_QWORD *)(v27 + 144)) >> 4);
      if (v155 != v156)
      {
        v31 = *v155;
        memset(__p, 0, 24);
        std::vector<std::shared_ptr<siri::dialogengine::ConditionEntry>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::ConditionEntry>*,std::shared_ptr<siri::dialogengine::ConditionEntry>*>((char *)__p, *(_QWORD **)(v31 + 64), *(_QWORD **)(v31 + 72), (uint64_t)(*(_QWORD *)(v31 + 72) - *(_QWORD *)(v31 + 64)) >> 4);
        v33 = __p[0].__r_.__value_.__l.__size_;
        for (j = __p[0].__r_.__value_.__r.__words[0]; j != v33; j += 16)
        {
          v34 = *(const void **)j;
          v35 = *(std::__shared_weak_count **)(j + 8);
          v173.__r_.__value_.__r.__words[0] = *(_QWORD *)j;
          v173.__r_.__value_.__l.__size_ = (std::string::size_type)v35;
          if (v35)
          {
            v36 = (unint64_t *)&v35->__shared_owners_;
            do
              v37 = __ldxr(v36);
            while (__stxr(v37 + 1, v36));
          }
          if (v34
          {
            v172.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
            v172.__r_.__value_.__l.__size_ = (std::string::size_type)v35;
            if (v35)
            {
              v39 = (unint64_t *)&v35->__shared_owners_;
              do
                v40 = __ldxr(v39);
              while (__stxr(v40 + 1, v39));
              v154 = v35;
              do
                v41 = __ldxr(v39);
              while (__stxr(v41 + 1, v39));
            }
            else
            {
              v154 = 0;
            }
            v153 = v38;
            v42 = siri::dialogengine::ExpandCondition(&v153, &v127, (uint64_t)v128) ^ 1;
            if (v35)
            {
              v43 = (unint64_t *)&v35->__shared_owners_;
              do
                v44 = __ldaxr(v43);
              while (__stlxr(v44 - 1, v43));
              if (!v44)
              {
                ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
                std::__shared_weak_count::__release_weak(v35);
              }
            }
          }
          else
          {
            v42 = 0;
            *(_OWORD *)&v172.__r_.__value_.__l.__data_ = 0uLL;
          }
          v45 = (std::__shared_weak_count *)v172.__r_.__value_.__l.__size_;
          if (v172.__r_.__value_.__l.__size_)
          {
            v46 = (unint64_t *)(v172.__r_.__value_.__l.__size_ + 8);
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v45);
            }
          }
          v48 = (std::__shared_weak_count *)v173.__r_.__value_.__l.__size_;
          if (v173.__r_.__value_.__l.__size_)
          {
            v49 = (unint64_t *)(v173.__r_.__value_.__l.__size_ + 8);
            do
              v50 = __ldaxr(v49);
            while (__stlxr(v50 - 1, v49));
            if (!v50)
            {
              ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
              std::__shared_weak_count::__release_weak(v48);
            }
          }
          if (v42)
          {
            v173.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
            std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v173);
            v54 = 1;
            v6 = v126;
            goto LABEL_209;
          }
        }
        v173.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v173);
        v6 = v126;
      }
      siri::dialogengine::Context::Context((siri::dialogengine::Context *)__p);
      v52 = v158;
      v53 = *(siri::dialogengine::Context ***)(v158 + 144);
      if (v53 != *(siri::dialogengine::Context ***)(v158 + 152)
        && (siri::dialogengine::EvaluateConditionEntry((siri::dialogengine *)__p, *v53, 0, v51) & 1) != 0)
      {
        v54 = 0;
        goto LABEL_208;
      }
      v147 = v52;
      v148 = v159;
      if (v159)
      {
        v55 = (unint64_t *)&v159->__shared_owners_;
        do
          v56 = __ldxr(v55);
        while (__stxr(v56 + 1, v55));
      }
      memset(&v173, 0, sizeof(v173));
      std::vector<std::shared_ptr<siri::dialogengine::ConditionEntry>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::ConditionEntry>*,std::shared_ptr<siri::dialogengine::ConditionEntry>*>((char *)&v173, *(_QWORD **)(v52 + 144), *(_QWORD **)(v52 + 152), (uint64_t)(*(_QWORD *)(v52 + 152) - *(_QWORD *)(v52 + 144)) >> 4);
      v58 = (uint64_t *)v173.__r_.__value_.__r.__words[0];
      if (v173.__r_.__value_.__r.__words[0] == v173.__r_.__value_.__l.__size_)
      {
        std::string::basic_string[abi:ne180100]<0>(&v149, "empty condition");
        goto LABEL_198;
      }
      if (v173.__r_.__value_.__l.__size_ - v173.__r_.__value_.__r.__words[0] >= 0x11)
      {
        siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Condition does not start with a single root AND/OR entry", v57);
        v58 = (uint64_t *)v173.__r_.__value_.__r.__words[0];
      }
      memset(&v172, 0, sizeof(v172));
      v59 = *v58;
      memset(&v171, 0, sizeof(v171));
      std::vector<std::shared_ptr<siri::dialogengine::ConditionEntry>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::ConditionEntry>*,std::shared_ptr<siri::dialogengine::ConditionEntry>*>((char *)&v171, *(_QWORD **)(v59 + 64), *(_QWORD **)(v59 + 72), (uint64_t)(*(_QWORD *)(v59 + 72) - *(_QWORD *)(v59 + 64)) >> 4);
      v61 = v171.__r_.__value_.__l.__size_;
      for (k = v171.__r_.__value_.__r.__words[0]; k != v61; k += 16)
      {
        v63 = *(const void **)k;
        v64 = *(std::__shared_weak_count **)(k + 8);
        v169 = *(const void **)k;
        v170 = v64;
        if (v64)
        {
          v65 = (unint64_t *)&v64->__shared_owners_;
          do
            v66 = __ldxr(v65);
          while (__stxr(v66 + 1, v65));
        }
        if (!v63
        {
          v167 = 0;
          v168 = 0;
          siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"There is a non-expression entry below the root condition", v60);
          goto LABEL_185;
        }
        v68 = v67;
        v167 = v67;
        v168 = v64;
        if (v64)
        {
          v69 = (unint64_t *)&v64->__shared_owners_;
          do
            v70 = __ldxr(v69);
          while (__stxr(v70 + 1, v69));
        }
        if (((*(uint64_t (**)(const void *, std::string *, _QWORD))(*(_QWORD *)v63 + 40))(v63, __p, 0) & 1) != 0)
        {
LABEL_179:
          if (!v64)
            goto LABEL_185;
          goto LABEL_180;
        }
        if (v68[175] < 0)
          std::string::__init_copy_ctor_external(&v164, *((const std::string::value_type **)v68 + 19), *((_QWORD *)v68 + 20));
        else
          v164 = *(std::string *)(v68 + 152);
        v71 = std::string::insert(&v164, 0, "[ \"");
        v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
        v165.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v165.__r_.__value_.__l.__data_ = v72;
        v71->__r_.__value_.__l.__size_ = 0;
        v71->__r_.__value_.__r.__words[2] = 0;
        v71->__r_.__value_.__r.__words[0] = 0;
        v73 = std::string::append(&v165, "\" ");
        v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
        v166.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v166.__r_.__value_.__l.__data_ = v74;
        v73->__r_.__value_.__l.__size_ = 0;
        v73->__r_.__value_.__r.__words[2] = 0;
        v73->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v165.__r_.__value_.__l.__data_);
        if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v164.__r_.__value_.__l.__data_);
        v75 = v68 + 176;
        if (v68[199] < 0)
        {
          std::string::__init_copy_ctor_external(&v165, *((const std::string::value_type **)v68 + 22), *((_QWORD *)v68 + 23));
        }
        else
        {
          *(_OWORD *)&v165.__r_.__value_.__l.__data_ = *v75;
          v165.__r_.__value_.__r.__words[2] = *((_QWORD *)v68 + 24);
        }
        if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
        {
          v76 = v165.__r_.__value_.__l.__size_;
          operator delete(v165.__r_.__value_.__l.__data_);
          if (!v76)
            goto LABEL_172;
        }
        else if (!*((_BYTE *)&v165.__r_.__value_.__s + 23))
        {
          goto LABEL_172;
        }
        if (v68[199] < 0)
        {
          std::string::__init_copy_ctor_external(&v163, *((const std::string::value_type **)v68 + 22), *((_QWORD *)v68 + 23));
        }
        else
        {
          *(_OWORD *)&v163.__r_.__value_.__l.__data_ = *v75;
          v163.__r_.__value_.__r.__words[2] = *((_QWORD *)v68 + 24);
        }
        v77 = std::string::insert(&v163, 0, "\"");
        v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
        v164.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v164.__r_.__value_.__l.__data_ = v78;
        v77->__r_.__value_.__l.__size_ = 0;
        v77->__r_.__value_.__r.__words[2] = 0;
        v77->__r_.__value_.__r.__words[0] = 0;
        v79 = std::string::append(&v164, "\" ");
        v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
        v165.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v165.__r_.__value_.__l.__data_ = v80;
        v79->__r_.__value_.__l.__size_ = 0;
        v79->__r_.__value_.__r.__words[2] = 0;
        v79->__r_.__value_.__r.__words[0] = 0;
        if ((v165.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v81 = &v165;
        else
          v81 = (std::string *)v165.__r_.__value_.__r.__words[0];
        if ((v165.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v82 = HIBYTE(v165.__r_.__value_.__r.__words[2]);
        else
          v82 = v165.__r_.__value_.__l.__size_;
        std::string::append(&v166, (const std::string::value_type *)v81, v82);
        if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v165.__r_.__value_.__l.__data_);
        if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v164.__r_.__value_.__l.__data_);
        if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v163.__r_.__value_.__l.__data_);
        v83 = v68 + 200;
        if (v68[223] < 0)
        {
          std::string::__init_copy_ctor_external(&v165, *((const std::string::value_type **)v68 + 25), *((_QWORD *)v68 + 26));
        }
        else
        {
          *(_OWORD *)&v165.__r_.__value_.__l.__data_ = *v83;
          v165.__r_.__value_.__r.__words[2] = *((_QWORD *)v68 + 27);
        }
        if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
        {
          v84 = v165.__r_.__value_.__l.__size_;
          operator delete(v165.__r_.__value_.__l.__data_);
          if (!v84)
            goto LABEL_172;
        }
        else if (!*((_BYTE *)&v165.__r_.__value_.__s + 23))
        {
          goto LABEL_172;
        }
        if (v68[223] < 0)
        {
          std::string::__init_copy_ctor_external(&v163, *((const std::string::value_type **)v68 + 25), *((_QWORD *)v68 + 26));
        }
        else
        {
          *(_OWORD *)&v163.__r_.__value_.__l.__data_ = *v83;
          v163.__r_.__value_.__r.__words[2] = *((_QWORD *)v68 + 27);
        }
        v85 = std::string::insert(&v163, 0, "\"");
        v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
        v164.__r_.__value_.__r.__words[2] = v85->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v164.__r_.__value_.__l.__data_ = v86;
        v85->__r_.__value_.__l.__size_ = 0;
        v85->__r_.__value_.__r.__words[2] = 0;
        v85->__r_.__value_.__r.__words[0] = 0;
        v87 = std::string::append(&v164, "\" ");
        v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
        v165.__r_.__value_.__r.__words[2] = v87->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v165.__r_.__value_.__l.__data_ = v88;
        v87->__r_.__value_.__l.__size_ = 0;
        v87->__r_.__value_.__r.__words[2] = 0;
        v87->__r_.__value_.__r.__words[0] = 0;
        if ((v165.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v89 = &v165;
        else
          v89 = (std::string *)v165.__r_.__value_.__r.__words[0];
        if ((v165.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v90 = HIBYTE(v165.__r_.__value_.__r.__words[2]);
        else
          v90 = v165.__r_.__value_.__l.__size_;
        std::string::append(&v166, (const std::string::value_type *)v89, v90);
        if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v165.__r_.__value_.__l.__data_);
        if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v164.__r_.__value_.__l.__data_);
        if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v163.__r_.__value_.__l.__data_);
LABEL_172:
        std::string::append(&v166, "]");
        v91 = (_OWORD *)v172.__r_.__value_.__l.__size_;
        if (v172.__r_.__value_.__l.__size_ >= v172.__r_.__value_.__r.__words[2])
        {
          v93 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v172, (__int128 *)&v166);
        }
        else
        {
          if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v172.__r_.__value_.__l.__size_, v166.__r_.__value_.__l.__data_, v166.__r_.__value_.__l.__size_);
          }
          else
          {
            v92 = *(_OWORD *)&v166.__r_.__value_.__l.__data_;
            *(_QWORD *)(v172.__r_.__value_.__l.__size_ + 16) = *((_QWORD *)&v166.__r_.__value_.__l + 2);
            *v91 = v92;
          }
          v93 = (std::string::size_type)v91 + 24;
        }
        v172.__r_.__value_.__l.__size_ = v93;
        if ((SHIBYTE(v166.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_179;
        operator delete(v166.__r_.__value_.__l.__data_);
        if (!v64)
          goto LABEL_185;
LABEL_180:
        v94 = (unint64_t *)&v64->__shared_owners_;
        do
          v95 = __ldaxr(v94);
        while (__stlxr(v95 - 1, v94));
        if (!v95)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
LABEL_185:
        v96 = v170;
        if (v170)
        {
          v97 = (unint64_t *)&v170->__shared_owners_;
          do
            v98 = __ldaxr(v97);
          while (__stlxr(v98 - 1, v97));
          if (!v98)
          {
            ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
            std::__shared_weak_count::__release_weak(v96);
          }
        }
      }
      v166.__r_.__value_.__r.__words[0] = (std::string::size_type)&v171;
      std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v166);
      if (*(_DWORD *)(*(_QWORD *)v173.__r_.__value_.__l.__data_ + 32))
        v99 = " or ";
      else
        v99 = " and ";
      std::string::basic_string[abi:ne180100]<0>(&v171, v99);
      siri::dialogengine::StringJoinInternal<std::vector<std::string>>((uint64_t)&v149, (uint64_t)v172.__r_.__value_.__l.__data_, v172.__r_.__value_.__l.__size_, (uint64_t)&v171);
      v6 = v126;
      if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v171.__r_.__value_.__l.__data_);
      v171.__r_.__value_.__r.__words[0] = (std::string::size_type)&v172;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v171);
LABEL_198:
      v172.__r_.__value_.__r.__words[0] = (std::string::size_type)&v173;
      std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v172);
      v100 = std::string::insert(&v149, 0, "Condition failed (actual vs expected): ");
      v101 = *(_OWORD *)&v100->__r_.__value_.__l.__data_;
      v151 = v100->__r_.__value_.__r.__words[2];
      *(_OWORD *)v150 = v101;
      v100->__r_.__value_.__l.__size_ = 0;
      v100->__r_.__value_.__r.__words[2] = 0;
      v100->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::TestResult::AddNote((uint64_t)v128, (uint64_t)v150);
      if (SHIBYTE(v151) < 0)
        operator delete(v150[0]);
      if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v149.__r_.__value_.__l.__data_);
      v102 = v148;
      if (v148)
      {
        v103 = (unint64_t *)&v148->__shared_owners_;
        do
          v104 = __ldaxr(v103);
        while (__stlxr(v104 - 1, v103));
        if (!v104)
        {
          ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
          std::__shared_weak_count::__release_weak(v102);
        }
      }
      v54 = 1;
LABEL_208:
      siri::dialogengine::Context::~Context((siri::dialogengine::Context *)__p);
LABEL_209:
      __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v155;
      std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      v105 = v159;
      if (v159)
      {
        v106 = (unint64_t *)&v159->__shared_owners_;
        do
          v107 = __ldaxr(v106);
        while (__stlxr(v107 - 1, v106));
        if (!v107)
        {
          ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
          std::__shared_weak_count::__release_weak(v105);
        }
      }
      if (!v54)
      {
        v26 += 2;
        if (v26 == v125)
        {
LABEL_241:
          __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v160;
          std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          v117 = 1;
          goto LABEL_246;
        }
        continue;
      }
      break;
    }
    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v160;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    v117 = 2;
LABEL_246:
    v2 = v123;
    v4 = v124;
LABEL_247:
    v129 = v117;
LABEL_248:
    siri::dialogengine::CATExecutionResult::~CATExecutionResult((siri::dialogengine::CATExecutionResult *)&v127);
LABEL_249:
    siri::dialogengine::TestResults::AddResult((siri::dialogengine::TestResults *)&v143, (const siri::dialogengine::TestResult *)v128);
    siri::dialogengine::CATExecutionResult::~CATExecutionResult((siri::dialogengine::CATExecutionResult *)&v131);
    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v130;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    siri::dialogengine::TestCase::~TestCase((void **)&v128[0].__r_.__value_.__l.__data_);
    siri::dialogengine::TestCase::~TestCase((void **)&v132.__r_.__value_.__l.__data_);
    v5 = (siri::dialogengine::TestCase *)((char *)v5 + 256);
  }
  while (v5 != v6);
LABEL_250:
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v141;
  std::vector<siri::dialogengine::TestCase>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  v118 = *(unsigned __int8 *)(v2 + 23);
  if ((v118 & 0x80u) != 0)
    v118 = *(_QWORD *)(v2 + 8);
  if (v118)
    siri::dialogengine::TestResults::SaveAsJson((uint64_t)&v143, (std::string *)v2);
  else
    siri::dialogengine::TestResults::SummarizeToStdout((siri::dialogengine::TestResults *)&v143);
  v119 = v144;
  if (v144 == v145)
  {
    v121 = 1;
  }
  else
  {
    v120 = 0;
    do
    {
      if (*(_DWORD *)(v119 + 256) == 2)
        ++v120;
      v119 += 296;
    }
    while (v119 != v145);
    v121 = v120 == 0;
  }
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v4;
  std::vector<siri::dialogengine::TestResult>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  return v121;
}

void sub_1BFC5BADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, unint64_t *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57)
{
  if (SLOBYTE(STACK[0x317]) < 0)
    operator delete((void *)STACK[0x300]);
  siri::dialogengine::CATExecutionResult::~CATExecutionResult((siri::dialogengine::CATExecutionResult *)&a19);
  std::allocator<siri::dialogengine::TestResult>::destroy[abi:ne180100]((void **)&a20);
  siri::dialogengine::TestCase::~TestCase(&a57);
  a20 = &STACK[0x280];
  std::vector<siri::dialogengine::TestCase>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  std::vector<siri::dialogengine::TestResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::ExpandCondition(const siri::dialogengine::ConditionExpression **a1, std::string **a2, uint64_t a3)
{
  std::string *v6;
  __int128 v7;
  const siri::dialogengine::ConditionExpression *v8;
  std::string *v11;
  __int128 v12;
  std::string *p_str;
  int data;
  int v17;
  _BOOL4 v19;
  _BOOL4 v20;
  const siri::dialogengine::ConditionExpression *v21;
  std::string *v22;
  std::string::size_type v23;
  int v24;
  std::string *v25;
  std::string *v26;
  std::string *v27;
  int v28;
  int v29;
  int v30;
  char *v32;
  std::string::size_type size;
  _BOOL4 v34;
  std::string::size_type v35;
  unint64_t v36;
  __int128 v37;
  void *v38;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  std::string::size_type v42;
  char v43;
  std::string *v44;
  int v45;
  std::string *v46;
  std::string *v47;
  std::string::size_type v48;
  std::string *v49;
  std::string::size_type v50;
  std::string *v51;
  std::string *v52;
  std::string::size_type v53;
  int v54;
  std::string *v56;
  std::string::size_type v57;
  int v58;
  std::string *v60;
  __int128 v61;
  std::string *v62;
  __int128 v63;
  std::string *v64;
  const char *v65;
  uint64_t v66;
  std::string::size_type v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  std::string::size_type v72;
  uint64_t v73;
  __int128 v74;
  unsigned int v75;
  std::string *v76;
  std::string *v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  __int128 v81;
  int v82;
  std::string::size_type v83;
  uint64_t v84;
  int v86;
  int v87;
  std::string *v89;
  int v90;
  int v91;
  std::string *v93;
  _BOOL4 v94;
  _BYTE *v95;
  _BOOL4 v96;
  char *v97;
  std::string::size_type v98;
  std::__shared_weak_count_vtbl *v99;
  std::__shared_weak_count *v100;
  unint64_t *p_shared_owners;
  unint64_t v102;
  __n128 v103;
  const siri::dialogengine::ConditionExpression *v104;
  const siri::dialogengine::ConditionExpression *v105;
  std::string *v106;
  __int128 v107;
  std::string *v108;
  __int128 v109;
  uint64_t v110;
  BOOL IsUnaryOperator;
  const siri::dialogengine::ConditionExpression *v112;
  std::string::size_type v113;
  BOOL v114;
  BOOL v115;
  const siri::dialogengine::ConditionExpression *v116;
  std::string *v117;
  __int128 v118;
  std::string *v119;
  __int128 v120;
  void *v121;
  const siri::dialogengine::ConditionExpression *v122;
  std::string *v123;
  __int128 v124;
  std::string *v125;
  __int128 v126;
  const siri::dialogengine::ConditionExpression *v127;
  std::string *v128;
  std::string::size_type v129;
  std::string *v130;
  __int128 v131;
  std::string *v132;
  __int128 v133;
  const siri::dialogengine::ConditionExpression *v134;
  std::string *v135;
  std::string *v136;
  __int128 v137;
  std::string *v138;
  __int128 v139;
  __int128 v141;
  std::string *v142;
  __int128 v143;
  std::string *v144;
  __int128 v145;
  int v146;
  int v147;
  int v149;
  int v150;
  char *String;
  std::string *v153;
  __int128 v154;
  std::string *v155;
  __int128 v156;
  std::string v157;
  std::string v158;
  std::string v159;
  std::string __str;
  std::string v161;
  std::string v162;
  std::string v163;
  std::string v164;
  std::string v165;
  std::string __p[3];
  int v167;
  _QWORD v168[377];
  std::string v169;
  uint64_t v170;

  v170 = *MEMORY[0x1E0C80C00];
  siri::dialogengine::ExpressionToString((siri::dialogengine *)&v165, *a1);
  v6 = std::string::insert(&v165, 0, "Original: ");
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  __p[0].__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 0);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v165.__r_.__value_.__l.__data_);
  v8 = *a1;
  if (*((char *)*a1 + 175) < 0)
    std::string::__init_copy_ctor_external(__p, *((const std::string::value_type **)v8 + 19), *((_QWORD *)v8 + 20));
  else
    __p[0] = *(std::string *)((char *)v8 + 152);
  siri::dialogengine::StringToLower((uint64_t)__p, (uint64_t)&__str);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  if ((*((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x80) == 0)
  {
    if (HIBYTE(__str.__r_.__value_.__r.__words[2]) != 5)
    {
      if (HIBYTE(__str.__r_.__value_.__r.__words[2]) != 6)
        goto LABEL_41;
      if (LODWORD(__str.__r_.__value_.__l.__data_) != 1952543859 || WORD2(__str.__r_.__value_.__r.__words[0]) != 29557)
        goto LABEL_41;
      goto LABEL_26;
    }
    if (LODWORD(__str.__r_.__value_.__l.__data_) != 1869771365 || __str.__r_.__value_.__s.__data_[4] != 114)
    {
      p_str = &__str;
      goto LABEL_37;
    }
    goto LABEL_55;
  }
  if (__str.__r_.__value_.__l.__size_ == 5)
  {
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    if (*(_DWORD *)__str.__r_.__value_.__l.__data_ != 1869771365
      || *(_BYTE *)(__str.__r_.__value_.__r.__words[0] + 4) != 114)
    {
LABEL_37:
      data = (int)p_str->__r_.__value_.__l.__data_;
      v17 = p_str->__r_.__value_.__s.__data_[4];
      if (data == 1701734764 && v17 == 115)
      {
        v27 = *a2;
        memset(&v165, 0, sizeof(v165));
        std::vector<siri::dialogengine::CATExecutionDialogResult>::__init_with_size[abi:ne180100]<siri::dialogengine::CATExecutionDialogResult*,siri::dialogengine::CATExecutionDialogResult*>(&v165, (uint64_t)v27[3].__r_.__value_.__l.__data_, v27[3].__r_.__value_.__l.__size_, (uint64_t)(v27[3].__r_.__value_.__l.__size_ - v27[3].__r_.__value_.__r.__words[0]) >> 3);
        std::to_string(__p, (uint64_t)(v165.__r_.__value_.__l.__size_ - v165.__r_.__value_.__r.__words[0]) >> 3);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        __str = __p[0];
        *((_BYTE *)&__p[0].__r_.__value_.__s + 23) = 0;
        __p[0].__r_.__value_.__s.__data_[0] = 0;
        v169.__r_.__value_.__r.__words[0] = (std::string::size_type)&v165;
        std::vector<siri::dialogengine::CATExecutionDialogResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&v169);
        v28 = 0;
        goto LABEL_283;
      }
      goto LABEL_41;
    }
LABEL_55:
    v26 = *a2;
    if (SHIBYTE((*a2)[1].__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v165, v26[1].__r_.__value_.__l.__data_, v26[1].__r_.__value_.__l.__size_);
    else
      v165 = v26[1];
    goto LABEL_104;
  }
  if (__str.__r_.__value_.__l.__size_ == 6
    && *(_DWORD *)__str.__r_.__value_.__l.__data_ == 1952543859
    && *(_WORD *)(__str.__r_.__value_.__r.__words[0] + 4) == 29557)
  {
LABEL_26:
    v11 = *a2;
    if (SHIBYTE((*a2)->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v165, v11->__r_.__value_.__l.__data_, v11->__r_.__value_.__l.__size_);
    }
    else
    {
      v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      v165.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v165.__r_.__value_.__l.__data_ = v12;
    }
LABEL_104:
    v39 = std::string::insert(&v165, 0, "'");
    v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    __p[0].__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    v41 = std::string::append(__p, "'");
    v42 = v41->__r_.__value_.__r.__words[0];
    v169.__r_.__value_.__r.__words[0] = v41->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v169.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v41->__r_.__value_.__r.__words[1] + 7);
    v43 = HIBYTE(v41->__r_.__value_.__r.__words[2]);
    v41->__r_.__value_.__l.__size_ = 0;
    v41->__r_.__value_.__r.__words[2] = 0;
    v41->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    __str.__r_.__value_.__r.__words[0] = v42;
    __str.__r_.__value_.__l.__size_ = v169.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v169.__r_.__value_.__r.__words + 7);
    *((_BYTE *)&__str.__r_.__value_.__s + 23) = v43;
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v165.__r_.__value_.__l.__data_);
    v28 = 1;
    goto LABEL_283;
  }
LABEL_41:
  std::string::basic_string[abi:ne180100]<0>(__p, "visual");
  v19 = siri::dialogengine::StringStartsWith(&__str, (unsigned __int8 *)__p);
  v20 = v19;
  if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v19)
      goto LABEL_43;
LABEL_46:
    v22 = *a2;
    memset(__p, 0, 24);
    std::vector<siri::dialogengine::CATExecutionDialogResult>::__init_with_size[abi:ne180100]<siri::dialogengine::CATExecutionDialogResult*,siri::dialogengine::CATExecutionDialogResult*>(__p, (uint64_t)v22[3].__r_.__value_.__l.__data_, v22[3].__r_.__value_.__l.__size_, (uint64_t)(v22[3].__r_.__value_.__l.__size_ - v22[3].__r_.__value_.__r.__words[0]) >> 3);
    if (__p[0].__r_.__value_.__r.__words[0] == __p[0].__r_.__value_.__l.__size_)
    {
      v25 = *a2;
      if (SHIBYTE((*a2)[5].__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v165, v25[5].__r_.__value_.__l.__data_, v25[5].__r_.__value_.__l.__size_);
      else
        v165 = v25[5];
      if ((v165.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v165.__r_.__value_.__r.__words[2]);
      else
        size = v165.__r_.__value_.__l.__size_;
      if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v165.__r_.__value_.__l.__data_);
      v165.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<siri::dialogengine::CATExecutionDialogResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&v165);
      if (!size)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "CAT produced no output!");
        siri::dialogengine::TestResult::AddNote(a3, (uint64_t)__p);
        if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_303:
          v110 = 0;
          goto LABEL_370;
        }
        v38 = (void *)__p[0].__r_.__value_.__r.__words[0];
LABEL_302:
        operator delete(v38);
        goto LABEL_303;
      }
    }
    else
    {
      v165.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<siri::dialogengine::CATExecutionDialogResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&v165);
    }
    std::string::basic_string[abi:ne180100]<0>(&v165, "printOnly");
    siri::dialogengine::StringToLower((uint64_t)&v165, (uint64_t)__p);
    if (siri::dialogengine::StringStartsWith(&__str, (unsigned __int8 *)__p))
    {
      v34 = 1;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v164, "spokenOnly");
      siri::dialogengine::StringToLower((uint64_t)&v164, (uint64_t)&v169);
      v34 = siri::dialogengine::StringStartsWith(&__str, (unsigned __int8 *)&v169);
      if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v169.__r_.__value_.__l.__data_);
      if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v164.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v165.__r_.__value_.__l.__data_);
    siri::dialogengine::StringSplit((unsigned __int8 *)&__str, ".", __p);
    v35 = __p[0].__r_.__value_.__r.__words[0];
    if (__p[0].__r_.__value_.__l.__size_ == __p[0].__r_.__value_.__r.__words[0]
      || (v36 = 0xAAAAAAAAAAAAAAABLL
              * ((uint64_t)(__p[0].__r_.__value_.__l.__size_ - __p[0].__r_.__value_.__r.__words[0]) >> 3),
          v36 >= 3))
    {
      std::string::basic_string[abi:ne180100]<0>(&v159, "");
LABEL_280:
      v165.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v165);
      v28 = !v34;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      __str = v159;
      goto LABEL_283;
    }
    if (*(char *)(__p[0].__r_.__value_.__r.__words[0] + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v165, *(const std::string::value_type **)__p[0].__r_.__value_.__l.__data_, *(_QWORD *)(__p[0].__r_.__value_.__r.__words[0] + 8));
      v35 = __p[0].__r_.__value_.__r.__words[0];
      v36 = 0xAAAAAAAAAAAAAAABLL
          * ((uint64_t)(__p[0].__r_.__value_.__l.__size_ - __p[0].__r_.__value_.__r.__words[0]) >> 3);
    }
    else
    {
      v37 = *(_OWORD *)__p[0].__r_.__value_.__l.__data_;
      v165.__r_.__value_.__r.__words[2] = *(_QWORD *)(__p[0].__r_.__value_.__r.__words[0] + 16);
      *(_OWORD *)&v165.__r_.__value_.__l.__data_ = v37;
    }
    if (v36 < 2)
    {
      std::string::basic_string[abi:ne180100]<0>(&v169, "print");
    }
    else if (*(char *)(v35 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(&v169, *(const std::string::value_type **)(v35 + 24), *(_QWORD *)(v35 + 32));
    }
    else
    {
      v169 = *(std::string *)(v35 + 24);
    }
    std::string::basic_string[abi:ne180100]<0>(&v163, "content");
    std::string::basic_string[abi:ne180100]<0>(&v162, "full");
    siri::dialogengine::StringReplace((uint64_t)&v165, (char *)&v163, (uint64_t)&v162, 0, &v164);
    if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v165.__r_.__value_.__l.__data_);
    v165 = v164;
    *((_BYTE *)&v164.__r_.__value_.__s + 23) = 0;
    v164.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v162.__r_.__value_.__l.__data_);
    if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v163.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v163, "caption");
    std::string::basic_string[abi:ne180100]<0>(&v162, "supporting");
    siri::dialogengine::StringReplace((uint64_t)&v165, (char *)&v163, (uint64_t)&v162, 0, &v164);
    if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v165.__r_.__value_.__l.__data_);
    v165 = v164;
    *((_BYTE *)&v164.__r_.__value_.__s + 23) = 0;
    v164.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v162.__r_.__value_.__l.__data_);
    if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v163.__r_.__value_.__l.__data_);
    siri::dialogengine::StringSplit((unsigned __int8 *)&v165, "[", &v164);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v164.__r_.__value_.__l.__size_ - v164.__r_.__value_.__r.__words[0]) >> 3) < 2)
    {
      v45 = 0;
    }
    else
    {
      std::string::operator=(&v165, (const std::string *)v164.__r_.__value_.__l.__data_);
      siri::dialogengine::StringTrim("] \t", (const std::string *)(v164.__r_.__value_.__r.__words[0] + 24), &v163);
      v45 = siri::dialogengine::StringToInt(&v163, 0, 0);
      if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v163.__r_.__value_.__l.__data_);
    }
    v46 = *a2;
    memset(&v163, 0, sizeof(v163));
    std::vector<siri::dialogengine::CATExecutionDialogResult>::__init_with_size[abi:ne180100]<siri::dialogengine::CATExecutionDialogResult*,siri::dialogengine::CATExecutionDialogResult*>(&v163, (uint64_t)v46[3].__r_.__value_.__l.__data_, v46[3].__r_.__value_.__l.__size_, (uint64_t)(v46[3].__r_.__value_.__l.__size_ - v46[3].__r_.__value_.__r.__words[0]) >> 3);
    if (v45 >= (unint64_t)((uint64_t)(v163.__r_.__value_.__l.__size_ - v163.__r_.__value_.__r.__words[0]) >> 3))
    {
      std::string::basic_string[abi:ne180100]<0>(&v159, "");
LABEL_276:
      v162.__r_.__value_.__r.__words[0] = (std::string::size_type)&v163;
      std::vector<siri::dialogengine::CATExecutionDialogResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&v162);
      v163.__r_.__value_.__r.__words[0] = (std::string::size_type)&v164;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v163);
      if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v169.__r_.__value_.__l.__data_);
      if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v165.__r_.__value_.__l.__data_);
      goto LABEL_280;
    }
    siri::dialogengine::CATExecutionDialogResult::CATExecutionDialogResult((siri::dialogengine::CATExecutionDialogResult *)&v158, (const siri::dialogengine::CATExecutionDialogResult *)(v163.__r_.__value_.__r.__words[0] + 8 * v45));
    if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
    {
      v48 = v165.__r_.__value_.__l.__size_;
      if (v165.__r_.__value_.__l.__size_ != 4)
        goto LABEL_161;
      v47 = (std::string *)v165.__r_.__value_.__r.__words[0];
    }
    else
    {
      v47 = &v165;
      if (HIBYTE(v165.__r_.__value_.__r.__words[2]) == 2)
        goto LABEL_261;
      if (HIBYTE(v165.__r_.__value_.__r.__words[2]) != 4)
      {
        if (HIBYTE(v165.__r_.__value_.__r.__words[2]) != 10)
          goto LABEL_262;
        goto LABEL_163;
      }
    }
    if (LODWORD(v47->__r_.__value_.__l.__data_) != 1819047270)
    {
LABEL_140:
      if ((*((_BYTE *)&v165.__r_.__value_.__s + 23) & 0x80) == 0)
      {
        v47 = &v165;
        if (HIBYTE(v165.__r_.__value_.__r.__words[2]) == 2)
          goto LABEL_261;
        if (HIBYTE(v165.__r_.__value_.__r.__words[2]) != 4)
          goto LABEL_262;
LABEL_158:
        if (LODWORD(v47->__r_.__value_.__l.__data_) != 1819047270)
        {
LABEL_159:
          if ((*((_BYTE *)&v165.__r_.__value_.__s + 23) & 0x80) == 0)
          {
LABEL_181:
            if (HIBYTE(v165.__r_.__value_.__r.__words[2]) != 2)
              goto LABEL_262;
            v47 = &v165;
            goto LABEL_261;
          }
          v48 = v165.__r_.__value_.__l.__size_;
          goto LABEL_161;
        }
        if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
        {
          if (v169.__r_.__value_.__l.__size_ != 5)
            goto LABEL_159;
          v89 = (std::string *)v169.__r_.__value_.__r.__words[0];
        }
        else
        {
          if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) != 5)
            goto LABEL_159;
          v89 = &v169;
        }
        v146 = (int)v89->__r_.__value_.__l.__data_;
        v147 = v89->__r_.__value_.__s.__data_[4];
        if (v146 == 1634037875 && v147 == 107)
        {
          if (*(char *)(v158.__r_.__value_.__r.__words[0] + 95) < 0)
            std::string::__init_copy_ctor_external(&v161, *(const std::string::value_type **)(v158.__r_.__value_.__r.__words[0] + 72), *(_QWORD *)(v158.__r_.__value_.__r.__words[0] + 80));
          else
            v161 = *(std::string *)(v158.__r_.__value_.__r.__words[0] + 72);
          goto LABEL_376;
        }
        goto LABEL_159;
      }
      v48 = v165.__r_.__value_.__l.__size_;
      if (v165.__r_.__value_.__l.__size_ == 4)
      {
        v47 = (std::string *)v165.__r_.__value_.__r.__words[0];
        goto LABEL_158;
      }
LABEL_161:
      if (v48 != 10)
        goto LABEL_259;
      v47 = (std::string *)v165.__r_.__value_.__r.__words[0];
LABEL_163:
      v53 = v47->__r_.__value_.__r.__words[0];
      v54 = LOWORD(v47->__r_.__value_.__r.__words[1]);
      if (v53 != 0x6974726F70707573 || v54 != 26478)
        goto LABEL_167;
      if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v169.__r_.__value_.__l.__size_ == 5)
        {
          v56 = (std::string *)v169.__r_.__value_.__r.__words[0];
LABEL_248:
          v90 = (int)v56->__r_.__value_.__l.__data_;
          v91 = v56->__r_.__value_.__s.__data_[4];
          if (v90 == 1852404336 && v91 == 116)
          {
            if (*(char *)(v158.__r_.__value_.__r.__words[0] + 119) < 0)
              std::string::__init_copy_ctor_external(&v161, *(const std::string::value_type **)(v158.__r_.__value_.__r.__words[0] + 96), *(_QWORD *)(v158.__r_.__value_.__r.__words[0] + 104));
            else
              v161 = *(std::string *)(v158.__r_.__value_.__r.__words[0] + 96);
            goto LABEL_376;
          }
        }
      }
      else if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) == 5)
      {
        v56 = &v169;
        goto LABEL_248;
      }
LABEL_167:
      if ((*((_BYTE *)&v165.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        v48 = v165.__r_.__value_.__l.__size_;
        if (v165.__r_.__value_.__l.__size_ != 10)
          goto LABEL_259;
        v47 = (std::string *)v165.__r_.__value_.__r.__words[0];
LABEL_176:
        v57 = v47->__r_.__value_.__r.__words[0];
        v58 = LOWORD(v47->__r_.__value_.__r.__words[1]);
        if (v57 != 0x6974726F70707573 || v58 != 26478)
          goto LABEL_180;
        if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
        {
          if (v169.__r_.__value_.__l.__size_ == 5)
          {
            v93 = (std::string *)v169.__r_.__value_.__r.__words[0];
LABEL_396:
            v149 = (int)v93->__r_.__value_.__l.__data_;
            v150 = v93->__r_.__value_.__s.__data_[4];
            if (v149 == 1634037875 && v150 == 107)
            {
              if (*(char *)(v158.__r_.__value_.__r.__words[0] + 143) < 0)
                std::string::__init_copy_ctor_external(&v161, *(const std::string::value_type **)(v158.__r_.__value_.__r.__words[0] + 120), *(_QWORD *)(v158.__r_.__value_.__r.__words[0] + 128));
              else
                v161 = *(std::string *)(v158.__r_.__value_.__r.__words[0] + 120);
              goto LABEL_376;
            }
          }
        }
        else if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) == 5)
        {
          v93 = &v169;
          goto LABEL_396;
        }
LABEL_180:
        if ((*((_BYTE *)&v165.__r_.__value_.__s + 23) & 0x80) == 0)
          goto LABEL_181;
        v48 = v165.__r_.__value_.__l.__size_;
LABEL_259:
        if (v48 != 2)
          goto LABEL_262;
        v47 = (std::string *)v165.__r_.__value_.__r.__words[0];
        goto LABEL_261;
      }
      v47 = &v165;
      if (HIBYTE(v165.__r_.__value_.__r.__words[2]) != 2)
      {
        if (HIBYTE(v165.__r_.__value_.__r.__words[2]) != 10)
        {
LABEL_262:
          std::string::basic_string[abi:ne180100]<0>(&v162, "spokenOnly");
          v94 = siri::dialogengine::StringsEqual((uint64_t)&v165, (uint64_t)&v162);
          if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v162.__r_.__value_.__l.__data_);
          if (v94)
          {
            v95 = (_BYTE *)(v158.__r_.__value_.__r.__words[0] + 336);
          }
          else
          {
            std::string::basic_string[abi:ne180100]<0>(&v162, "printOnly");
            v96 = siri::dialogengine::StringsEqual((uint64_t)&v165, (uint64_t)&v162);
            if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v162.__r_.__value_.__l.__data_);
            if (!v96)
            {
              v97 = "";
LABEL_274:
              std::string::basic_string[abi:ne180100]<0>(&v159, v97);
LABEL_275:
              siri::dialogengine::CATExecutionDialogResult::~CATExecutionDialogResult((siri::dialogengine::CATExecutionDialogResult *)&v158);
              goto LABEL_276;
            }
            v95 = (_BYTE *)(v158.__r_.__value_.__r.__words[0] + 337);
          }
          if (*v95)
            v97 = "true";
          else
            v97 = "false";
          goto LABEL_274;
        }
        goto LABEL_176;
      }
LABEL_261:
      if (LOWORD(v47->__r_.__value_.__l.__data_) != 25705)
        goto LABEL_262;
      if (*(char *)(v158.__r_.__value_.__r.__words[0] + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v161, *(const std::string::value_type **)v158.__r_.__value_.__l.__data_, *(_QWORD *)(v158.__r_.__value_.__r.__words[0] + 8));
      }
      else
      {
        v141 = *(_OWORD *)v158.__r_.__value_.__l.__data_;
        v161.__r_.__value_.__r.__words[2] = *(_QWORD *)(v158.__r_.__value_.__r.__words[0] + 16);
        *(_OWORD *)&v161.__r_.__value_.__l.__data_ = v141;
      }
LABEL_376:
      v142 = std::string::insert(&v161, 0, "'");
      v143 = *(_OWORD *)&v142->__r_.__value_.__l.__data_;
      v162.__r_.__value_.__r.__words[2] = v142->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v162.__r_.__value_.__l.__data_ = v143;
      v142->__r_.__value_.__l.__size_ = 0;
      v142->__r_.__value_.__r.__words[2] = 0;
      v142->__r_.__value_.__r.__words[0] = 0;
      v144 = std::string::append(&v162, "'");
      v145 = *(_OWORD *)&v144->__r_.__value_.__l.__data_;
      v159.__r_.__value_.__r.__words[2] = v144->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v159.__r_.__value_.__l.__data_ = v145;
      v144->__r_.__value_.__l.__size_ = 0;
      v144->__r_.__value_.__r.__words[2] = 0;
      v144->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v162.__r_.__value_.__l.__data_);
      if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v161.__r_.__value_.__l.__data_);
      goto LABEL_275;
    }
    if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v169.__r_.__value_.__l.__size_ != 5)
        goto LABEL_140;
      v52 = (std::string *)v169.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) != 5)
        goto LABEL_140;
      v52 = &v169;
    }
    v86 = (int)v52->__r_.__value_.__l.__data_;
    v87 = v52->__r_.__value_.__s.__data_[4];
    if (v86 == 1852404336 && v87 == 116)
    {
      if (*(char *)(v158.__r_.__value_.__r.__words[0] + 71) < 0)
        std::string::__init_copy_ctor_external(&v161, *(const std::string::value_type **)(v158.__r_.__value_.__r.__words[0] + 48), *(_QWORD *)(v158.__r_.__value_.__r.__words[0] + 56));
      else
        v161 = *(std::string *)(v158.__r_.__value_.__r.__words[0] + 48);
      goto LABEL_376;
    }
    goto LABEL_140;
  }
  operator delete(__p[0].__r_.__value_.__l.__data_);
  if (!v20)
    goto LABEL_46;
LABEL_43:
  v21 = *a1;
  if (*((char *)*a1 + 175) < 0)
    std::string::__init_copy_ctor_external(&v158, *((const std::string::value_type **)v21 + 19), *((_QWORD *)v21 + 20));
  else
    v158 = *(std::string *)((char *)v21 + 152);
  siri::dialogengine::StringSplit((unsigned __int8 *)&v158, ".", &v165);
  v23 = v165.__r_.__value_.__r.__words[0];
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v165.__r_.__value_.__l.__size_ - v165.__r_.__value_.__r.__words[0]) >> 3) < 2)
    goto LABEL_66;
  v24 = *(char *)(v165.__r_.__value_.__r.__words[0] + 23);
  if (v24 < 0)
  {
    if (*(_QWORD *)(v165.__r_.__value_.__r.__words[0] + 8) != 6)
      goto LABEL_66;
    v23 = *(_QWORD *)v165.__r_.__value_.__l.__data_;
  }
  else if (v24 != 6)
  {
    goto LABEL_66;
  }
  v29 = *(_DWORD *)v23;
  v30 = *(unsigned __int16 *)(v23 + 4);
  if (v29 != 1970497910 || v30 != 27745)
    goto LABEL_66;
  v44 = *a2;
  if (SHIBYTE((*a2)[5].__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(__p, v44[5].__r_.__value_.__l.__data_, v44[5].__r_.__value_.__l.__size_);
  else
    __p[0] = v44[5];
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    v50 = __p[0].__r_.__value_.__l.__size_;
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if (v50)
      goto LABEL_147;
    goto LABEL_150;
  }
  if (!*((_BYTE *)&__p[0].__r_.__value_.__s + 23))
  {
LABEL_150:
    if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v158.__r_.__value_.__l.__size_ != 15)
        goto LABEL_66;
      v51 = (std::string *)v158.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) != 15)
        goto LABEL_66;
      v51 = &v158;
    }
    v83 = v51->__r_.__value_.__r.__words[0];
    v84 = *(std::string::size_type *)((char *)v51->__r_.__value_.__r.__words + 7);
    if (v83 == 0x732E6C6175736976 && v84 == 0x736E6F6974636573)
    {
      v32 = "0";
      goto LABEL_67;
    }
LABEL_66:
    v32 = "";
LABEL_67:
    std::string::basic_string[abi:ne180100]<0>(&v159, v32);
    goto LABEL_68;
  }
LABEL_147:
  v49 = *a2;
  if (SHIBYTE((*a2)[5].__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v163, v49[5].__r_.__value_.__l.__data_, v49[5].__r_.__value_.__l.__size_);
  else
    v163 = v49[5];
  siri::dialogengine::JsonFromResponseMessage((std::string::size_type)&v163, &v164);
  v60 = std::string::insert(&v164, 0, "{\"result\":");
  v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
  __p[0].__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v61;
  v60->__r_.__value_.__l.__size_ = 0;
  v60->__r_.__value_.__r.__words[2] = 0;
  v60->__r_.__value_.__r.__words[0] = 0;
  v62 = std::string::append(__p, "}");
  v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
  v169.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v169.__r_.__value_.__l.__data_ = v63;
  v62->__r_.__value_.__l.__size_ = 0;
  v62->__r_.__value_.__r.__words[2] = 0;
  v62->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v164.__r_.__value_.__l.__data_);
  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v163.__r_.__value_.__l.__data_);
  rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::GenericDocument((uint64_t)__p);
  v64 = &v169;
  if ((v169.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v64 = (std::string *)v169.__r_.__value_.__r.__words[0];
  v164.__r_.__value_.__r.__words[0] = (std::string::size_type)v64;
  v164.__r_.__value_.__l.__size_ = (std::string::size_type)v64;
  rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::ParseStream<0u,rapidjson::UTF8<char>,rapidjson::GenericStringStream<rapidjson::UTF8<char>>>((uint64_t)__p, (uint64_t)&v164);
  if (v167)
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Unable to parse JSON result from CATExecutor", v65);
    std::string::basic_string[abi:ne180100]<0>(&v159, "");
    goto LABEL_383;
  }
  v66 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>((unsigned int *)__p, "result");
  v67 = v165.__r_.__value_.__r.__words[0];
  v68 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v165.__r_.__value_.__l.__size_ - v165.__r_.__value_.__r.__words[0]) >> 3);
  if (v68 < 2)
  {
LABEL_225:
    std::string::basic_string[abi:ne180100]<0>(&v159, "");
    goto LABEL_383;
  }
  v69 = v66;
  v70 = 0;
  v71 = 1;
  while (1)
  {
    v72 = v67 + v70;
    v73 = v67 + v70 + 24;
    if (*(char *)(v72 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(&v164, *(const std::string::value_type **)v73, *(_QWORD *)(v72 + 32));
    }
    else
    {
      v74 = *(_OWORD *)v73;
      v164.__r_.__value_.__r.__words[2] = *(_QWORD *)(v73 + 16);
      *(_OWORD *)&v164.__r_.__value_.__l.__data_ = v74;
    }
    siri::dialogengine::StringSplit((unsigned __int8 *)&v164, "[", &v163);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v163.__r_.__value_.__l.__size_ - v163.__r_.__value_.__r.__words[0]) >> 3) < 2)
    {
      v75 = -1;
    }
    else
    {
      std::string::operator=(&v164, (const std::string *)v163.__r_.__value_.__l.__data_);
      siri::dialogengine::StringTrim("] \t", (const std::string *)(v163.__r_.__value_.__r.__words[0] + 24), &v162);
      v75 = siri::dialogengine::StringToInt(&v162, 0, 0);
      if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v162.__r_.__value_.__l.__data_);
    }
    if (*(_WORD *)(v69 + 22) != 3
      || ((v164.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? (v76 = &v164)
        : (v76 = (std::string *)v164.__r_.__value_.__r.__words[0]),
          !rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember((unsigned int *)v69, (const char *)v76)))
    {
LABEL_380:
      std::string::basic_string[abi:ne180100]<0>(&v159, "");
      goto LABEL_381;
    }
    if ((v164.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v77 = &v164;
    else
      v77 = (std::string *)v164.__r_.__value_.__r.__words[0];
    v78 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>((unsigned int *)v69, (const char *)v77);
    if (v69 != v78)
    {
      v79 = *(_OWORD *)v78;
      *(_QWORD *)(v69 + 16) = *(_QWORD *)(v78 + 16);
      *(_OWORD *)v69 = v79;
      *(_WORD *)(v78 + 22) = 0;
    }
    if ((v75 & 0x80000000) == 0)
    {
      if (*(_WORD *)(v69 + 22) != 4 || v75 >= *(_DWORD *)v69)
        goto LABEL_380;
      v80 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[](v69, v75);
      if (v69 != v80)
      {
        v81 = *(_OWORD *)v80;
        *(_QWORD *)(v69 + 16) = *(_QWORD *)(v80 + 16);
        *(_OWORD *)v69 = v81;
        *(_WORD *)(v80 + 22) = 0;
      }
    }
    if (v71 != v68 - 1)
      goto LABEL_222;
    v82 = *(unsigned __int16 *)(v69 + 22);
    if (v82 == 4)
    {
      std::to_string(&v159, *(_DWORD *)v69);
      goto LABEL_381;
    }
    if ((v82 & 0x400) != 0)
      break;
    if ((v82 & 0x20) != 0)
    {
      std::to_string(&v159, *(_DWORD *)v69);
      goto LABEL_381;
    }
LABEL_222:
    v162.__r_.__value_.__r.__words[0] = (std::string::size_type)&v163;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v162);
    if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v164.__r_.__value_.__l.__data_);
    ++v71;
    v67 = v165.__r_.__value_.__r.__words[0];
    v68 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v165.__r_.__value_.__l.__size_ - v165.__r_.__value_.__r.__words[0]) >> 3);
    v70 += 24;
    if (v68 <= v71)
      goto LABEL_225;
  }
  String = (char *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetString(v69);
  std::string::basic_string[abi:ne180100]<0>(&v161, String);
  v153 = std::string::insert(&v161, 0, "'");
  v154 = *(_OWORD *)&v153->__r_.__value_.__l.__data_;
  v162.__r_.__value_.__r.__words[2] = v153->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v162.__r_.__value_.__l.__data_ = v154;
  v153->__r_.__value_.__l.__size_ = 0;
  v153->__r_.__value_.__r.__words[2] = 0;
  v153->__r_.__value_.__r.__words[0] = 0;
  v155 = std::string::append(&v162, "'");
  v156 = *(_OWORD *)&v155->__r_.__value_.__l.__data_;
  v159.__r_.__value_.__r.__words[2] = v155->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v159.__r_.__value_.__l.__data_ = v156;
  v155->__r_.__value_.__l.__size_ = 0;
  v155->__r_.__value_.__r.__words[2] = 0;
  v155->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v162.__r_.__value_.__l.__data_);
  if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v161.__r_.__value_.__l.__data_);
LABEL_381:
  v162.__r_.__value_.__r.__words[0] = (std::string::size_type)&v163;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v162);
  if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v164.__r_.__value_.__l.__data_);
LABEL_383:
  rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::~GenericDocument((uint64_t)__p);
  if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v169.__r_.__value_.__l.__data_);
LABEL_68:
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v165;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  __str = v159;
  *((_BYTE *)&v159.__r_.__value_.__s + 23) = 0;
  v159.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v158.__r_.__value_.__l.__data_);
  v28 = !siri::dialogengine::IsStringANumber(&__str);
LABEL_283:
  v98 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v98 = __str.__r_.__value_.__l.__size_;
  if (!v98)
  {
    v105 = *a1;
    if (*((char *)*a1 + 175) < 0)
      std::string::__init_copy_ctor_external(&v169, *((const std::string::value_type **)v105 + 19), *((_QWORD *)v105 + 20));
    else
      v169 = *(std::string *)((char *)v105 + 152);
    v106 = std::string::insert(&v169, 0, "Invalid name in test condition: '");
    v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
    v165.__r_.__value_.__r.__words[2] = v106->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v165.__r_.__value_.__l.__data_ = v107;
    v106->__r_.__value_.__l.__size_ = 0;
    v106->__r_.__value_.__r.__words[2] = 0;
    v106->__r_.__value_.__r.__words[0] = 0;
    v108 = std::string::append(&v165, "'");
    v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
    __p[0].__r_.__value_.__r.__words[2] = v108->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v109;
    v108->__r_.__value_.__l.__size_ = 0;
    v108->__r_.__value_.__r.__words[2] = 0;
    v108->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::TestResult::AddNote(a3, (uint64_t)__p);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v165.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v169.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_303;
    v38 = (void *)v169.__r_.__value_.__r.__words[0];
    goto LABEL_302;
  }
  siri::dialogengine::Context::Context((siri::dialogengine::Context *)__p);
  v99 = (std::__shared_weak_count_vtbl *)operator new();
  bzero(v99, 0x2F0uLL);
  siri::dialogengine::File::File((siri::dialogengine::File *)v99);
  v100 = (std::__shared_weak_count *)operator new();
  v100->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v100->__shared_owners_;
  v100->__vftable = (std::__shared_weak_count_vtbl *)&off_1E793A3D8;
  v100->__shared_weak_owners_ = 0;
  v100[1].__vftable = v99;
  std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100](v168, (uint64_t)v99, (uint64_t)v100);
  do
    v102 = __ldaxr(p_shared_owners);
  while (__stlxr(v102 - 1, p_shared_owners));
  if (!v102)
  {
    ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
    std::__shared_weak_count::__release_weak(v100);
  }
  v103.n128_f64[0] = siri::dialogengine::ConditionExpression::SetName((uint64_t)*a1, &__str);
  if (v28)
  {
    std::string::basic_string[abi:ne180100]<0>(&v165, "dialog.String");
    v104 = *a1;
    if (*((char *)*a1 + 199) < 0)
      std::string::__init_copy_ctor_external(&v169, *((const std::string::value_type **)v104 + 22), *((_QWORD *)v104 + 23));
    else
      v169 = *(std::string *)((char *)v104 + 176);
    IsUnaryOperator = siri::dialogengine::IsUnaryOperator((unsigned __int8 *)&v165, (unsigned __int8 *)&v169);
    if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v169.__r_.__value_.__l.__data_);
    if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v165.__r_.__value_.__l.__data_);
      if (IsUnaryOperator)
        goto LABEL_327;
    }
    else if (IsUnaryOperator)
    {
      goto LABEL_327;
    }
    v112 = *a1;
    if (*((char *)*a1 + 223) < 0)
      std::string::__init_copy_ctor_external(&v165, *((const std::string::value_type **)v112 + 25), *((_QWORD *)v112 + 26));
    else
      v165 = *(std::string *)((char *)v112 + 200);
    v113 = HIBYTE(v165.__r_.__value_.__r.__words[2]);
    if ((v165.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v113 = v165.__r_.__value_.__l.__size_;
    if (!v113)
      goto LABEL_321;
    std::string::basic_string[abi:ne180100]<0>(&v169, "'");
    v114 = siri::dialogengine::StringStartsWith(&v165, (unsigned __int8 *)&v169);
    v115 = v114;
    if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v169.__r_.__value_.__l.__data_);
      if (!v115)
        goto LABEL_321;
    }
    else
    {
      if (v114)
        goto LABEL_325;
LABEL_321:
      v116 = *a1;
      std::operator+<char>();
      v117 = std::string::append(&v164, "'");
      v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
      v169.__r_.__value_.__r.__words[2] = v117->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v169.__r_.__value_.__l.__data_ = v118;
      v117->__r_.__value_.__l.__size_ = 0;
      v117->__r_.__value_.__r.__words[2] = 0;
      v117->__r_.__value_.__r.__words[0] = 0;
      v103.n128_f64[0] = siri::dialogengine::ConditionExpression::SetValue((uint64_t)v116, &v169);
      if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v169.__r_.__value_.__l.__data_);
      if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v164.__r_.__value_.__l.__data_);
    }
LABEL_325:
    if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v165.__r_.__value_.__l.__data_);
  }
LABEL_327:
  v110 = (*(uint64_t (**)(const siri::dialogengine::ConditionExpression *, std::string *, __n128))(*(_QWORD *)*a1 + 16))(*a1, __p, v103);
  if ((v110 & 1) != 0)
  {
    siri::dialogengine::ExpressionToString((siri::dialogengine *)&v169, *a1);
    v119 = std::string::insert(&v169, 0, "Expanded: ");
    v120 = *(_OWORD *)&v119->__r_.__value_.__l.__data_;
    v165.__r_.__value_.__r.__words[2] = v119->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v165.__r_.__value_.__l.__data_ = v120;
    v119->__r_.__value_.__l.__size_ = 0;
    v119->__r_.__value_.__r.__words[2] = 0;
    v119->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)&v165, 0);
    if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v165.__r_.__value_.__l.__data_);
    if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
    {
      v121 = (void *)v169.__r_.__value_.__r.__words[0];
      goto LABEL_368;
    }
  }
  else
  {
    v122 = *a1;
    if (*((char *)*a1 + 175) < 0)
      std::string::__init_copy_ctor_external(&v159, *((const std::string::value_type **)v122 + 19), *((_QWORD *)v122 + 20));
    else
      v159 = *(std::string *)((char *)v122 + 152);
    v123 = std::string::insert(&v159, 0, "Invalid condition created: \"");
    v124 = *(_OWORD *)&v123->__r_.__value_.__l.__data_;
    v161.__r_.__value_.__r.__words[2] = v123->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v161.__r_.__value_.__l.__data_ = v124;
    v123->__r_.__value_.__l.__size_ = 0;
    v123->__r_.__value_.__r.__words[2] = 0;
    v123->__r_.__value_.__r.__words[0] = 0;
    v125 = std::string::append(&v161, "\", \"");
    v126 = *(_OWORD *)&v125->__r_.__value_.__l.__data_;
    v162.__r_.__value_.__r.__words[2] = v125->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v162.__r_.__value_.__l.__data_ = v126;
    v125->__r_.__value_.__l.__size_ = 0;
    v125->__r_.__value_.__r.__words[2] = 0;
    v125->__r_.__value_.__r.__words[0] = 0;
    v127 = *a1;
    if (*((char *)*a1 + 199) < 0)
      std::string::__init_copy_ctor_external(&v158, *((const std::string::value_type **)v127 + 22), *((_QWORD *)v127 + 23));
    else
      v158 = *(std::string *)((char *)v127 + 176);
    if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v128 = &v158;
    else
      v128 = (std::string *)v158.__r_.__value_.__r.__words[0];
    if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v129 = HIBYTE(v158.__r_.__value_.__r.__words[2]);
    else
      v129 = v158.__r_.__value_.__l.__size_;
    v130 = std::string::append(&v162, (const std::string::value_type *)v128, v129);
    v131 = *(_OWORD *)&v130->__r_.__value_.__l.__data_;
    v163.__r_.__value_.__r.__words[2] = v130->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v163.__r_.__value_.__l.__data_ = v131;
    v130->__r_.__value_.__l.__size_ = 0;
    v130->__r_.__value_.__r.__words[2] = 0;
    v130->__r_.__value_.__r.__words[0] = 0;
    v132 = std::string::append(&v163, "\", \"");
    v133 = *(_OWORD *)&v132->__r_.__value_.__l.__data_;
    v164.__r_.__value_.__r.__words[2] = v132->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v164.__r_.__value_.__l.__data_ = v133;
    v132->__r_.__value_.__l.__size_ = 0;
    v132->__r_.__value_.__r.__words[2] = 0;
    v132->__r_.__value_.__r.__words[0] = 0;
    v134 = *a1;
    if (*((char *)*a1 + 223) < 0)
      std::string::__init_copy_ctor_external(&v157, *((const std::string::value_type **)v134 + 25), *((_QWORD *)v134 + 26));
    else
      v157 = *(std::string *)((char *)v134 + 200);
    if ((v157.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v135 = &v157;
    else
      v135 = (std::string *)v157.__r_.__value_.__r.__words[0];
    v136 = std::string::append(&v164, (const std::string::value_type *)v135);
    v137 = *(_OWORD *)&v136->__r_.__value_.__l.__data_;
    v169.__r_.__value_.__r.__words[2] = v136->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v169.__r_.__value_.__l.__data_ = v137;
    v136->__r_.__value_.__l.__size_ = 0;
    v136->__r_.__value_.__r.__words[2] = 0;
    v136->__r_.__value_.__r.__words[0] = 0;
    v138 = std::string::append(&v169, "\"");
    v139 = *(_OWORD *)&v138->__r_.__value_.__l.__data_;
    v165.__r_.__value_.__r.__words[2] = v138->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v165.__r_.__value_.__l.__data_ = v139;
    v138->__r_.__value_.__l.__size_ = 0;
    v138->__r_.__value_.__r.__words[2] = 0;
    v138->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::TestResult::AddNote(a3, (uint64_t)&v165);
    if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v165.__r_.__value_.__l.__data_);
    if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v169.__r_.__value_.__l.__data_);
    if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v157.__r_.__value_.__l.__data_);
    if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v164.__r_.__value_.__l.__data_);
    if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v163.__r_.__value_.__l.__data_);
    if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v158.__r_.__value_.__l.__data_);
    if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v162.__r_.__value_.__l.__data_);
    if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v161.__r_.__value_.__l.__data_);
    if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0)
    {
      v121 = (void *)v159.__r_.__value_.__r.__words[0];
LABEL_368:
      operator delete(v121);
    }
  }
  siri::dialogengine::Context::~Context((siri::dialogengine::Context *)__p);
LABEL_370:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return v110;
}

void sub_1BFC5D810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,void *a51)
{
  uint64_t v51;

  siri::dialogengine::CATExecutionDialogResult::~CATExecutionDialogResult((siri::dialogengine::CATExecutionDialogResult *)&a13);
  a32 = &a36;
  std::vector<siri::dialogengine::CATExecutionDialogResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&a32);
  a36 = &a40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a36);
  if (*(char *)(v51 - 105) < 0)
    operator delete(*(void **)(v51 - 128));
  if (a49 < 0)
    operator delete(__p);
  __p = &a51;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::ExpressionToString(siri::dialogengine *this, const siri::dialogengine::ConditionExpression *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  std::string *v5;
  std::string::size_type size;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  std::string *v10;
  std::string::size_type v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  std::string *p_p;
  std::string::size_type v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  std::string __p;
  std::string v22;
  std::string v23;
  _QWORD v24[2];
  _QWORD v25[11];
  char v26;
  uint64_t v27;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v24);
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"[", 1);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" \"", 2);
  if (*((char *)a2 + 175) < 0)
    std::string::__init_copy_ctor_external(&v23, *((const std::string::value_type **)a2 + 19), *((_QWORD *)a2 + 20));
  else
    v23 = *(std::string *)((char *)a2 + 152);
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = &v23;
  else
    v5 = (std::string *)v23.__r_.__value_.__r.__words[0];
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
  else
    size = v23.__r_.__value_.__l.__size_;
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v5, size);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"\"", 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" \"", 2);
  if (*((char *)a2 + 199) < 0)
    std::string::__init_copy_ctor_external(&v22, *((const std::string::value_type **)a2 + 22), *((_QWORD *)a2 + 23));
  else
    v22 = *(std::string *)((char *)a2 + 176);
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = &v22;
  else
    v10 = (std::string *)v22.__r_.__value_.__r.__words[0];
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  else
    v11 = v22.__r_.__value_.__l.__size_;
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"\"", 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" \"", 2);
  if (*((char *)a2 + 223) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 25), *((_QWORD *)a2 + 26));
  else
    __p = *(std::string *)((char *)a2 + 200);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v16 = __p.__r_.__value_.__l.__size_;
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)p_p, v16);
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"\"", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" ]", 2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  std::stringbuf::str();
  v24[0] = *MEMORY[0x1E0DE4F50];
  v19 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v24 + *(_QWORD *)(v24[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v25[0] = v19;
  v25[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v26 < 0)
    operator delete((void *)v25[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C3B8D80C](&v27);
}

void sub_1BFC5E054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a21 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_1BFC5E1A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

_QWORD *__assign_helper_atomic_property__49729(_QWORD *a1, uint64_t *a2)
{
  return std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100](a1, *a2, a2[1]);
}

_QWORD *__copy_helper_atomic_property__49730(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = a2[1];
  *result = *a2;
  result[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

const char *siri::dialogengine::VariableInfo<BOOL>::SchemaName()
{
  return "dialog.Boolean";
}

const char *siri::dialogengine::VariableInfo<BOOL>::PrimitiveName()
{
  return "BOOL";
}

const char *siri::dialogengine::VariableInfo<double>::SchemaName()
{
  return "dialog.Number";
}

const char *siri::dialogengine::VariableInfo<double>::PrimitiveName()
{
  return "double";
}

const char *siri::dialogengine::VariableInfo<std::string>::SchemaName()
{
  return "dialog.String";
}

const char *siri::dialogengine::VariableInfo<std::string>::PrimitiveName()
{
  return "string";
}

void siri::dialogengine::FindVariableBool(uint64_t a1@<X0>, const void **a2@<X1>, char *a3@<X2>, int *a4@<X3>, uint64_t a5@<X8>)
{
  unsigned __int8 v10;
  os_signpost_id_t v11;
  NSObject *v12;
  void *v13;
  _QWORD *v14;
  uint64_t v15;
  const char *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  int v21;
  const void *v22;
  _BOOL4 v25;
  void *v26;
  unint64_t *v27;
  unint64_t v28;
  const void *v29;
  const void *v30;
  const void *v31;
  const void *v32;
  unint64_t *v33;
  unint64_t v34;
  BOOL v35;
  _QWORD *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  NSObject *v40;
  std::__shared_weak_count *size;
  unint64_t *v42;
  unint64_t v43;
  std::string buf;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if ((v10 & 1) == 0
  {
    siri::dialogengine::FindVariable<BOOL>(siri::dialogengine::VariableObject &,std::string const&,std::optional<BOOL> const&,std::optional<siri::dialogengine::LogLevel> const&)::sSignpostLog = (uint64_t)os_log_create("com.apple.siri.DialogEngine", "FindVariable");
  }
  v11 = os_signpost_id_generate((os_log_t)siri::dialogengine::FindVariable<BOOL>(siri::dialogengine::VariableObject &,std::string const&,std::optional<BOOL> const&,std::optional<siri::dialogengine::LogLevel> const&)::sSignpostLog);
  if (v11 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v12 = siri::dialogengine::FindVariable<BOOL>(siri::dialogengine::VariableObject &,std::string const&,std::optional<BOOL> const&,std::optional<siri::dialogengine::LogLevel> const&)::sSignpostLog;
    if (os_signpost_enabled((os_log_t)siri::dialogengine::FindVariable<BOOL>(siri::dialogengine::VariableObject &,std::string const&,std::optional<BOOL> const&,std::optional<siri::dialogengine::LogLevel> const&)::sSignpostLog))
    {
      if (*((char *)a2 + 23) >= 0)
        v13 = a2;
      else
        v13 = (void *)*a2;
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v13;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"BOOL";
      _os_signpost_emit_with_name_impl(&dword_1BF794000, v12, OS_SIGNPOST_INTERVAL_BEGIN, v11, "FindVariable", "name = %s, type = %s", (uint8_t *)&buf, 0x16u);
    }
  }
  *(_WORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  v14 = (_QWORD *)(a5 + 8);
  *(_QWORD *)(a5 + 16) = 0;
  v15 = std::__tree<std::string>::find<std::string>(a1 + 72, a2);
  if (a1 + 80 == v15)
  {
    v17 = 0;
LABEL_16:
    if (*((_BYTE *)a4 + 4))
    {
      v21 = *a4;
      if (*a4 == 1)
      {
        if (*((char *)a2 + 23) >= 0)
          v29 = a2;
        else
          v29 = *a2;
        siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Variable '%s' not found", v16, v29);
      }
      else if (v21 == 3)
      {
        if (*((char *)a2 + 23) >= 0)
          v30 = a2;
        else
          v30 = *a2;
        siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Variable '%s' not found", v16, v30);
      }
      else if (v21 == 2)
      {
        if (*((char *)a2 + 23) >= 0)
          v22 = a2;
        else
          v22 = *a2;
        siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Variable '%s' not found", v16, v22);
      }
      else
      {
        if (*((char *)a2 + 23) >= 0)
          v31 = a2;
        else
          v31 = *a2;
        siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Variable '%s' not found", v16, v31);
      }
    }
    goto LABEL_63;
  }
  v18 = *(_QWORD *)(v15 + 56);
  v17 = *(std::__shared_weak_count **)(v15 + 64);
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
  }
  if (!v18)
    goto LABEL_16;
  *(_BYTE *)a5 = 1;
  if (*(char *)(v18 + 55) < 0)
    std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)(v18 + 32), *(_QWORD *)(v18 + 40));
  else
    buf = *(std::string *)(v18 + 32);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    if (buf.__r_.__value_.__l.__size_ != 14)
    {
      operator delete(buf.__r_.__value_.__l.__data_);
LABEL_59:
      if (*((char *)a2 + 23) >= 0)
        v32 = a2;
      else
        v32 = *a2;
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Variable '%s' exists, but does not have type [%s]", v16, v32, "BOOL");
      goto LABEL_63;
    }
    v25 = *(_QWORD *)buf.__r_.__value_.__l.__data_ != 0x422E676F6C616964
       || *(_QWORD *)(buf.__r_.__value_.__r.__words[0] + 6) != 0x6E61656C6F6F422ELL;
    operator delete(buf.__r_.__value_.__l.__data_);
    if (v25)
      goto LABEL_59;
  }
  else
  {
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) != 14)
      goto LABEL_59;
    if (buf.__r_.__value_.__r.__words[0] != 0x422E676F6C616964
      || *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 6) != 0x6E61656C6F6F422ELL)
    {
      goto LABEL_59;
    }
  }
  *(_BYTE *)(a5 + 1) = 1;
  if (v26)
  {
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
    buf.__r_.__value_.__l.__size_ = (std::string::size_type)v17;
    if (v17)
    {
      v27 = (unint64_t *)&v17->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
  }
  else
  {
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = 0uLL;
  }
  std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100](a5 + 8, (__int128 *)&buf);
  size = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
  if (buf.__r_.__value_.__l.__size_)
  {
    v42 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
LABEL_63:
  if (v17)
  {
    v33 = (unint64_t *)&v17->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (*v14)
    v35 = 1;
  else
    v35 = a3[1] == 0;
  if (!v35)
  {
    v36 = operator new(0x60uLL);
    v36[1] = 0;
    v36[2] = 0;
    *v36 = &off_1E793A478;
    buf.__r_.__value_.__r.__words[0] = siri::dialogengine::VariableBoolean::VariableBoolean((uint64_t)(v36 + 3), (const std::string *)a2, *a3);
    buf.__r_.__value_.__l.__size_ = (std::string::size_type)v36;
    std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)v14, (__int128 *)&buf);
    v37 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
    if (buf.__r_.__value_.__l.__size_)
    {
      v38 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
  }
  if (v11 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v40 = siri::dialogengine::FindVariable<BOOL>(siri::dialogengine::VariableObject &,std::string const&,std::optional<BOOL> const&,std::optional<siri::dialogengine::LogLevel> const&)::sSignpostLog;
    if (os_signpost_enabled((os_log_t)siri::dialogengine::FindVariable<BOOL>(siri::dialogengine::VariableObject &,std::string const&,std::optional<BOOL> const&,std::optional<siri::dialogengine::LogLevel> const&)::sSignpostLog))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1BF794000, v40, OS_SIGNPOST_INTERVAL_END, v11, "FindVariable", "", (uint8_t *)&buf, 2u);
    }
  }
}

void sub_1BFC5E76C(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v5;

  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void siri::dialogengine::FindVariableDouble(uint64_t a1@<X0>, const void **a2@<X1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t a5@<X8>)
{
  unsigned __int8 v10;
  os_signpost_id_t v11;
  NSObject *v12;
  void *v13;
  _QWORD *v14;
  uint64_t v15;
  const char *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  int v21;
  const void *v22;
  _BOOL4 v25;
  void *v26;
  unint64_t *v27;
  unint64_t v28;
  const void *v29;
  const void *v30;
  const void *v31;
  const void *v32;
  unint64_t *v33;
  unint64_t v34;
  BOOL v35;
  _QWORD *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  NSObject *v40;
  std::__shared_weak_count *size;
  unint64_t *v42;
  unint64_t v43;
  std::string buf;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if ((v10 & 1) == 0
  {
    siri::dialogengine::FindVariable<double>(siri::dialogengine::VariableObject &,std::string const&,std::optional<double> const&,std::optional<siri::dialogengine::LogLevel> const&)::sSignpostLog = (uint64_t)os_log_create("com.apple.siri.DialogEngine", "FindVariable");
  }
  v11 = os_signpost_id_generate((os_log_t)siri::dialogengine::FindVariable<double>(siri::dialogengine::VariableObject &,std::string const&,std::optional<double> const&,std::optional<siri::dialogengine::LogLevel> const&)::sSignpostLog);
  if (v11 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v12 = siri::dialogengine::FindVariable<double>(siri::dialogengine::VariableObject &,std::string const&,std::optional<double> const&,std::optional<siri::dialogengine::LogLevel> const&)::sSignpostLog;
    if (os_signpost_enabled((os_log_t)siri::dialogengine::FindVariable<double>(siri::dialogengine::VariableObject &,std::string const&,std::optional<double> const&,std::optional<siri::dialogengine::LogLevel> const&)::sSignpostLog))
    {
      if (*((char *)a2 + 23) >= 0)
        v13 = a2;
      else
        v13 = (void *)*a2;
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v13;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"double";
      _os_signpost_emit_with_name_impl(&dword_1BF794000, v12, OS_SIGNPOST_INTERVAL_BEGIN, v11, "FindVariable", "name = %s, type = %s", (uint8_t *)&buf, 0x16u);
    }
  }
  *(_WORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  v14 = (_QWORD *)(a5 + 8);
  *(_QWORD *)(a5 + 16) = 0;
  v15 = std::__tree<std::string>::find<std::string>(a1 + 72, a2);
  if (a1 + 80 == v15)
  {
    v17 = 0;
LABEL_16:
    if (*((_BYTE *)a4 + 4))
    {
      v21 = *a4;
      if (*a4 == 1)
      {
        if (*((char *)a2 + 23) >= 0)
          v29 = a2;
        else
          v29 = *a2;
        siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Variable '%s' not found", v16, v29);
      }
      else if (v21 == 3)
      {
        if (*((char *)a2 + 23) >= 0)
          v30 = a2;
        else
          v30 = *a2;
        siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Variable '%s' not found", v16, v30);
      }
      else if (v21 == 2)
      {
        if (*((char *)a2 + 23) >= 0)
          v22 = a2;
        else
          v22 = *a2;
        siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Variable '%s' not found", v16, v22);
      }
      else
      {
        if (*((char *)a2 + 23) >= 0)
          v31 = a2;
        else
          v31 = *a2;
        siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Variable '%s' not found", v16, v31);
      }
    }
    goto LABEL_63;
  }
  v18 = *(_QWORD *)(v15 + 56);
  v17 = *(std::__shared_weak_count **)(v15 + 64);
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
  }
  if (!v18)
    goto LABEL_16;
  *(_BYTE *)a5 = 1;
  if (*(char *)(v18 + 55) < 0)
    std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)(v18 + 32), *(_QWORD *)(v18 + 40));
  else
    buf = *(std::string *)(v18 + 32);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    if (buf.__r_.__value_.__l.__size_ != 13)
    {
      operator delete(buf.__r_.__value_.__l.__data_);
LABEL_59:
      if (*((char *)a2 + 23) >= 0)
        v32 = a2;
      else
        v32 = *a2;
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Variable '%s' exists, but does not have type [%s]", v16, v32, "double");
      goto LABEL_63;
    }
    v25 = *(_QWORD *)buf.__r_.__value_.__l.__data_ != 0x4E2E676F6C616964
       || *(_QWORD *)(buf.__r_.__value_.__r.__words[0] + 5) != 0x7265626D754E2E67;
    operator delete(buf.__r_.__value_.__l.__data_);
    if (v25)
      goto LABEL_59;
  }
  else
  {
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) != 13)
      goto LABEL_59;
    if (buf.__r_.__value_.__r.__words[0] != 0x4E2E676F6C616964
      || *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 5) != 0x7265626D754E2E67)
    {
      goto LABEL_59;
    }
  }
  *(_BYTE *)(a5 + 1) = 1;
  if (v26)
  {
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
    buf.__r_.__value_.__l.__size_ = (std::string::size_type)v17;
    if (v17)
    {
      v27 = (unint64_t *)&v17->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
  }
  else
  {
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = 0uLL;
  }
  std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100](a5 + 8, (__int128 *)&buf);
  size = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
  if (buf.__r_.__value_.__l.__size_)
  {
    v42 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
LABEL_63:
  if (v17)
  {
    v33 = (unint64_t *)&v17->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (*v14)
    v35 = 1;
  else
    v35 = *(_BYTE *)(a3 + 8) == 0;
  if (!v35)
  {
    v36 = operator new(0x68uLL);
    v36[1] = 0;
    v36[2] = 0;
    *v36 = &off_1E793A4E0;
    buf.__r_.__value_.__r.__words[0] = siri::dialogengine::VariableNumber::VariableNumber((uint64_t)(v36 + 3), (const std::string *)a2, *(double *)a3);
    buf.__r_.__value_.__l.__size_ = (std::string::size_type)v36;
    std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)v14, (__int128 *)&buf);
    v37 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
    if (buf.__r_.__value_.__l.__size_)
    {
      v38 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
  }
  if (v11 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v40 = siri::dialogengine::FindVariable<double>(siri::dialogengine::VariableObject &,std::string const&,std::optional<double> const&,std::optional<siri::dialogengine::LogLevel> const&)::sSignpostLog;
    if (os_signpost_enabled((os_log_t)siri::dialogengine::FindVariable<double>(siri::dialogengine::VariableObject &,std::string const&,std::optional<double> const&,std::optional<siri::dialogengine::LogLevel> const&)::sSignpostLog))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1BF794000, v40, OS_SIGNPOST_INTERVAL_END, v11, "FindVariable", "", (uint8_t *)&buf, 2u);
    }
  }
}

void sub_1BFC5ECB4(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v5;

  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void siri::dialogengine::FindVariableString(uint64_t a1@<X0>, const void **a2@<X1>, uint64_t a3@<X2>, int *a4@<X3>, uint64_t a5@<X8>)
{
  unsigned __int8 v10;
  os_signpost_id_t v11;
  NSObject *v12;
  void *v13;
  _QWORD *v14;
  uint64_t v15;
  const char *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  int v21;
  const void *v22;
  _BOOL4 v25;
  void *v26;
  unint64_t *v27;
  unint64_t v28;
  const void *v29;
  const void *v30;
  const void *v31;
  const void *v32;
  unint64_t *v33;
  unint64_t v34;
  BOOL v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  NSObject *v39;
  std::__shared_weak_count *size;
  unint64_t *v41;
  unint64_t v42;
  std::string buf;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if ((v10 & 1) == 0
  {
    siri::dialogengine::FindVariable<std::string>(siri::dialogengine::VariableObject &,std::string const&,std::optional<std::string> const&,std::optional<siri::dialogengine::LogLevel> const&)::sSignpostLog = (uint64_t)os_log_create("com.apple.siri.DialogEngine", "FindVariable");
  }
  v11 = os_signpost_id_generate((os_log_t)siri::dialogengine::FindVariable<std::string>(siri::dialogengine::VariableObject &,std::string const&,std::optional<std::string> const&,std::optional<siri::dialogengine::LogLevel> const&)::sSignpostLog);
  if (v11 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v12 = siri::dialogengine::FindVariable<std::string>(siri::dialogengine::VariableObject &,std::string const&,std::optional<std::string> const&,std::optional<siri::dialogengine::LogLevel> const&)::sSignpostLog;
    if (os_signpost_enabled((os_log_t)siri::dialogengine::FindVariable<std::string>(siri::dialogengine::VariableObject &,std::string const&,std::optional<std::string> const&,std::optional<siri::dialogengine::LogLevel> const&)::sSignpostLog))
    {
      if (*((char *)a2 + 23) >= 0)
        v13 = a2;
      else
        v13 = (void *)*a2;
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v13;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"string";
      _os_signpost_emit_with_name_impl(&dword_1BF794000, v12, OS_SIGNPOST_INTERVAL_BEGIN, v11, "FindVariable", "name = %s, type = %s", (uint8_t *)&buf, 0x16u);
    }
  }
  *(_WORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  v14 = (_QWORD *)(a5 + 8);
  *(_QWORD *)(a5 + 16) = 0;
  v15 = std::__tree<std::string>::find<std::string>(a1 + 72, a2);
  if (a1 + 80 == v15)
  {
    v17 = 0;
LABEL_16:
    if (*((_BYTE *)a4 + 4))
    {
      v21 = *a4;
      if (*a4 == 1)
      {
        if (*((char *)a2 + 23) >= 0)
          v29 = a2;
        else
          v29 = *a2;
        siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Variable '%s' not found", v16, v29);
      }
      else if (v21 == 3)
      {
        if (*((char *)a2 + 23) >= 0)
          v30 = a2;
        else
          v30 = *a2;
        siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Variable '%s' not found", v16, v30);
      }
      else if (v21 == 2)
      {
        if (*((char *)a2 + 23) >= 0)
          v22 = a2;
        else
          v22 = *a2;
        siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Variable '%s' not found", v16, v22);
      }
      else
      {
        if (*((char *)a2 + 23) >= 0)
          v31 = a2;
        else
          v31 = *a2;
        siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Variable '%s' not found", v16, v31);
      }
    }
    goto LABEL_63;
  }
  v18 = *(_QWORD *)(v15 + 56);
  v17 = *(std::__shared_weak_count **)(v15 + 64);
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
  }
  if (!v18)
    goto LABEL_16;
  *(_BYTE *)a5 = 1;
  if (*(char *)(v18 + 55) < 0)
    std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)(v18 + 32), *(_QWORD *)(v18 + 40));
  else
    buf = *(std::string *)(v18 + 32);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    if (buf.__r_.__value_.__l.__size_ != 13)
    {
      operator delete(buf.__r_.__value_.__l.__data_);
LABEL_59:
      if (*((char *)a2 + 23) >= 0)
        v32 = a2;
      else
        v32 = *a2;
      siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Variable '%s' exists, but does not have type [%s]", v16, v32, "string");
      goto LABEL_63;
    }
    v25 = *(_QWORD *)buf.__r_.__value_.__l.__data_ != 0x532E676F6C616964
       || *(_QWORD *)(buf.__r_.__value_.__r.__words[0] + 5) != 0x676E697274532E67;
    operator delete(buf.__r_.__value_.__l.__data_);
    if (v25)
      goto LABEL_59;
  }
  else
  {
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) != 13)
      goto LABEL_59;
    if (buf.__r_.__value_.__r.__words[0] != 0x532E676F6C616964
      || *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 5) != 0x676E697274532E67)
    {
      goto LABEL_59;
    }
  }
  *(_BYTE *)(a5 + 1) = 1;
  if (v26)
  {
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
    buf.__r_.__value_.__l.__size_ = (std::string::size_type)v17;
    if (v17)
    {
      v27 = (unint64_t *)&v17->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
  }
  else
  {
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = 0uLL;
  }
  std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100](a5 + 8, (__int128 *)&buf);
  size = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
  if (buf.__r_.__value_.__l.__size_)
  {
    v41 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
LABEL_63:
  if (v17)
  {
    v33 = (unint64_t *)&v17->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (*v14)
    v35 = 1;
  else
    v35 = *(_BYTE *)(a3 + 24) == 0;
  if (!v35)
  {
    std::allocate_shared[abi:ne180100]<siri::dialogengine::VariableString,std::allocator<siri::dialogengine::VariableString>,std::string const&,std::string const&,void>((uint64_t *)&buf, (const std::string *)a2, a3);
    std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)v14, (__int128 *)&buf);
    v36 = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
    if (buf.__r_.__value_.__l.__size_)
    {
      v37 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
  }
  if (v11 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v39 = siri::dialogengine::FindVariable<std::string>(siri::dialogengine::VariableObject &,std::string const&,std::optional<std::string> const&,std::optional<siri::dialogengine::LogLevel> const&)::sSignpostLog;
    if (os_signpost_enabled((os_log_t)siri::dialogengine::FindVariable<std::string>(siri::dialogengine::VariableObject &,std::string const&,std::optional<std::string> const&,std::optional<siri::dialogengine::LogLevel> const&)::sSignpostLog))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1BF794000, v39, OS_SIGNPOST_INTERVAL_END, v11, "FindVariable", "", (uint8_t *)&buf, 2u);
    }
  }
}

void sub_1BFC5F1E0(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v5;

  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void YAML::Clone(YAML *this@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _BYTE v7[112];
  _BYTE v8[8];
  std::__shared_weak_count *v9;
  _QWORD *v10;

  YAML::NodeEvents::NodeEvents((YAML::NodeEvents *)v8, this);
  YAML::NodeBuilder::NodeBuilder((YAML::NodeBuilder *)v7);
  YAML::NodeEvents::Emit((YAML::NodeEvents *)v8, (uint64_t)v7);
  YAML::NodeBuilder::Root((YAML::NodeBuilder *)v7, a2);
  YAML::NodeBuilder::~NodeBuilder((YAML::NodeBuilder *)v7);
  std::__tree<std::__value_type<YAML::detail::node_ref const*,int>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,int>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,int>>>::destroy(v10);
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1BFC5F2CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<YAML::detail::node_ref const*,int>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,int>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,int>>>::destroy(*(_QWORD **)(v1 - 32));
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v1 - 64);
  _Unwind_Resume(a1);
}

void siri::dialogengine::GroupRandom::~GroupRandom(siri::dialogengine::GroupRandom *this)
{
  siri::dialogengine::Group::~Group(this);
  JUMPOUT(0x1C3B8D890);
}

uint64_t siri::dialogengine::GroupRandom::Validate(siri::dialogengine::GroupRandom *this, siri::dialogengine::Context *a2)
{
  char v4;
  _QWORD **v5;
  unint64_t v6;
  unsigned __int8 v7;
  _QWORD *v8;
  _QWORD **v9;
  BOOL v10;
  void *__p[2];
  char v13;
  void *v14[2];
  unsigned __int8 v15;
  _QWORD **v16;
  _QWORD *v17[2];

  v4 = siri::dialogengine::Group::Validate((uint64_t **)this, a2);
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&v16, (const void ***)this + 9);
  v5 = v16;
  if (v16 != v17)
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "random");
      siri::dialogengine::ValidateXmlAttributeVersion(a2, (const void **)__p, (uint64_t)(v5 + 4), v14);
      if (v13 < 0)
        operator delete(__p[0]);
      v6 = v15;
      v7 = v15;
      if ((v15 & 0x80u) != 0)
        v6 = (unint64_t)v14[1];
      if (v6)
      {
        siri::dialogengine::Context::AddValidationError((uint64_t)a2, (__int128 *)v14, 0);
        v4 = 0;
        v7 = v15;
      }
      if ((v7 & 0x80) != 0)
        operator delete(v14[0]);
      v8 = v5[1];
      if (v8)
      {
        do
        {
          v9 = (_QWORD **)v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD **)v5[2];
          v10 = *v9 == v5;
          v5 = v9;
        }
        while (!v10);
      }
      v5 = v9;
    }
    while (v9 != v17);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v17[0]);
  return v4 & 1;
}

void sub_1BFC5F438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,_QWORD *a23)
{
  if (a21 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a23);
  _Unwind_Resume(a1);
}

void siri::dialogengine::GroupRandom::Execute(siri::dialogengine::Node ***this@<X0>, siri::dialogengine::Context *a2@<X1>, uint64_t a3@<X8>)
{
  std::string *v6;
  __int128 v7;
  int v8;
  const char *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::string *v16;
  __int128 v17;
  _QWORD *v18;
  const char *v19;
  char v20;
  const char *v21;
  siri::dialogengine::Node **v22;
  siri::dialogengine::Node **i;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  siri::dialogengine::Node **v28;
  siri::dialogengine::Node **v29;
  siri::dialogengine::Node **v30;
  float v31;
  _BOOL4 v32;
  BOOL v33;
  std::string *v34;
  __int128 *v35;
  float *v36;
  float *v37;
  float *v38;
  float v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  float *v44;
  float *v45;
  int v46;
  unint64_t v47;
  const char *v48;
  unint64_t RandomNumber;
  unint64_t v50;
  siri::dialogengine::Node **v51;
  std::string *v52;
  __int128 v53;
  std::string *v54;
  __int128 v55;
  std::string *v56;
  __int128 v57;
  char v58;
  siri::dialogengine::Node **v59;
  siri::dialogengine::Node **v60;
  char **v61;
  std::string *v62;
  __int128 v63;
  std::string *v64;
  __int128 v65;
  void **v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  char v70;
  _BOOL4 v71;
  siri::dialogengine::RandomNumberGenerator *v72;
  std::string v73;
  std::string v74;
  std::string v75;
  void *v76[2];
  std::string::size_type v77;
  std::string *v78;
  void **v79;
  uint64_t v80;
  std::string v81;
  std::string __p;
  char *v83;
  uint64_t v84;
  char **v85;
  char *v86;
  uint64_t v87;
  _QWORD **v88;
  _QWORD *v89;
  uint64_t v90;
  int v91;
  int v92;
  std::string v93;
  char *v94;
  uint64_t v95;
  char **v96;
  char *v97;
  uint64_t v98;
  _QWORD **v99;
  _QWORD *v100;
  uint64_t v101;

  siri::dialogengine::Node::GetIdForDebug((siri::dialogengine::Node *)this, a2, 0, &v93);
  v6 = std::string::insert(&v93, 0, "Executing 'Random' group: ");
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::Log::Debug((siri::dialogengine *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v93.__r_.__value_.__l.__data_);
  if ((((uint64_t (*)(siri::dialogengine::Node ***, siri::dialogengine::Context *))(*this)[6])(this, a2) & 1) == 0)
  {
    siri::dialogengine::Node::GetIdForDebug((siri::dialogengine::Node *)this, a2, 0, &v93);
    v16 = std::string::insert(&v93, 0, "Condition for <random> group failed - skipping: ");
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::Debug((siri::dialogengine *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v93.__r_.__value_.__l.__data_);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    return;
  }
  *(_OWORD *)&v93.__r_.__value_.__l.__data_ = 0uLL;
  v93.__r_.__value_.__r.__words[2] = (std::string::size_type)&v94;
  v94 = 0;
  v97 = 0;
  v98 = 0;
  v95 = 0;
  v96 = &v97;
  v100 = 0;
  v101 = 0;
  v99 = &v100;
  siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)&__p, (siri::dialogengine::Context *)((char *)a2 + 8));
  v8 = v91;
  siri::dialogengine::RequestInfo::~RequestInfo((void **)&__p.__r_.__value_.__l.__data_);
  if (!v8)
  {
    v10 = *((_QWORD *)a2 + 63);
    v11 = (std::__shared_weak_count *)*((_QWORD *)a2 + 64);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      v14 = (unint64_t *)&v11->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v10)
    {
      siri::dialogengine::Context::GetUseCaseState(a2, v9, (uint64_t)&__p);
      *(_OWORD *)&v93.__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      std::__tree<std::string>::destroy((uint64_t)&v93.__r_.__value_.__r.__words[2], v94);
      v93.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
      v94 = v83;
      v95 = v84;
      if (v84)
      {
        *((_QWORD *)v83 + 2) = &v94;
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v83;
        v83 = 0;
        v84 = 0;
      }
      else
      {
        v93.__r_.__value_.__r.__words[2] = (std::string::size_type)&v94;
      }
      std::__tree<std::string>::destroy((uint64_t)&v96, v97);
      v96 = v85;
      v97 = v86;
      v98 = v87;
      if (v87)
      {
        *((_QWORD *)v86 + 2) = &v97;
        v85 = &v86;
        v86 = 0;
        v87 = 0;
      }
      else
      {
        v96 = &v97;
      }
      std::__tree<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>>>::destroy(v100);
      v18 = v89;
      v99 = v88;
      v100 = v89;
      v101 = v90;
      if (v90)
      {
        v89[2] = &v100;
        v88 = &v89;
        v89 = 0;
        v90 = 0;
        v18 = 0;
      }
      else
      {
        v99 = &v100;
      }
      std::__tree<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>>>::destroy(v18);
      std::__tree<std::string>::destroy((uint64_t)&v85, v86);
      std::__tree<std::string>::destroy((uint64_t)&__p.__r_.__value_.__r.__words[2], v83);
    }
  }
  if ((unint64_t)((char *)this[27] - (char *)this[26]) <= 0x1F)
  {
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"<random> group has zero or one child; execute as if it were a <first> group",
      v9);
LABEL_36:
    v22 = this[26];
    for (i = this[27]; v22 != i; v22 += 2)
    {
      if (*v22)
      {
        if (((*(uint64_t (**)(siri::dialogengine::Node *, siri::dialogengine::Context *))(*(_QWORD *)*v22 + 48))(*v22, a2) & 1) != 0)
        {
          (*(void (**)(siri::dialogengine::Node *, siri::dialogengine::Context *))(*(_QWORD *)*v22 + 40))(*v22, a2);
          if (*(_QWORD *)a3 != *(_QWORD *)(a3 + 8))
            goto LABEL_52;
          siri::dialogengine::Node::GetIdForDebug(*v22, a2, 0, &v81);
          v24 = std::string::insert(&v81, 0, "  Child of <random> returned an empty result - skipping: ");
          v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v25;
          v24->__r_.__value_.__l.__size_ = 0;
          v24->__r_.__value_.__r.__words[2] = 0;
          v24->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Log::Debug((siri::dialogengine *)&__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v81.__r_.__value_.__l.__data_);
          __p.__r_.__value_.__r.__words[0] = a3;
          std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        }
        else
        {
          siri::dialogengine::Node::GetIdForDebug(*v22, a2, 0, &v81);
          v26 = std::string::insert(&v81, 0, "  Condition for child of <random> failed - skipping: ");
          v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v27;
          v26->__r_.__value_.__l.__size_ = 0;
          v26->__r_.__value_.__r.__words[2] = 0;
          v26->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Log::Debug((siri::dialogengine *)&__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v81.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"  Programming error: NULL node in <random> group", v19);
      }
    }
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    goto LABEL_52;
  }
  siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)&__p, (siri::dialogengine::Context *)((char *)a2 + 8));
  v20 = v92;
  siri::dialogengine::RequestInfo::~RequestInfo((void **)&__p.__r_.__value_.__l.__data_);
  if ((v20 & 0x40) != 0)
  {
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"<random> group in deterministic mode; execute as if it were a <first> group",
      v21);
    goto LABEL_36;
  }
  siri::dialogengine::Node::GetGlobalId((siri::dialogengine::Node *)this, a2, &__p);
  siri::dialogengine::Context::GetRandomMatch((char *)a2, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&v81);
  if (v81.__r_.__value_.__r.__words[0] != v81.__r_.__value_.__l.__size_)
  {
    *(std::string *)a3 = v81;
    memset(&v81, 0, sizeof(v81));
    goto LABEL_160;
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v78 = 0;
  v79 = 0;
  v80 = 0;
  std::vector<std::shared_ptr<siri::dialogengine::Node>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Node>*,std::shared_ptr<siri::dialogengine::Node>*>((char *)&v78, this[26], this[27], ((char *)this[27] - (char *)this[26]) >> 4);
  v29 = this[26];
  v28 = this[27];
  if (v29 == v28)
  {
    v32 = 0;
  }
  else
  {
    v30 = v29 + 2;
    do
    {
      v31 = *((float *)*(v30 - 2) + 48);
      v32 = v31 != 1.0;
      v33 = v31 != 1.0 || v30 == v28;
      v30 += 2;
    }
    while (!v33);
  }
  v34 = v78;
  v35 = (__int128 *)v79;
  if (v78 == (std::string *)v79)
    goto LABEL_159;
  v69 = 0;
  v70 = 0;
  v72 = (siri::dialogengine::Context *)((char *)a2 + 936);
  v71 = v32;
  while (1)
  {
    if (!v32)
    {
      RandomNumber = siri::dialogengine::RandomNumberGenerator::GenerateRandomNumber(v72, (((char *)v35 - (char *)v34) >> 4) - 1);
      goto LABEL_95;
    }
    v36 = 0;
    v37 = 0;
    v38 = 0;
    v39 = 0.0;
    do
    {
      v39 = *(float *)(v34->__r_.__value_.__r.__words[0] + 192) + v39;
      if (v37 >= v36)
      {
        v40 = v37 - v38;
        v41 = v40 + 1;
        if ((unint64_t)(v40 + 1) >> 62)
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        if (((char *)v36 - (char *)v38) >> 1 > v41)
          v41 = ((char *)v36 - (char *)v38) >> 1;
        if ((unint64_t)((char *)v36 - (char *)v38) >= 0x7FFFFFFFFFFFFFFCLL)
          v42 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v42 = v41;
        if (v42)
        {
          if (v42 >> 62)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v43 = (char *)operator new(4 * v42);
        }
        else
        {
          v43 = 0;
        }
        v44 = (float *)&v43[4 * v40];
        *v44 = v39;
        v45 = v44 + 1;
        while (v37 != v38)
        {
          v46 = *((_DWORD *)v37-- - 1);
          *((_DWORD *)v44-- - 1) = v46;
        }
        v36 = (float *)&v43[4 * v42];
        if (v38)
          operator delete(v38);
        v38 = v44;
        v37 = v45;
      }
      else
      {
        *v37++ = v39;
      }
      v34 = (std::string *)((char *)v34 + 16);
    }
    while (v34 != (std::string *)v35);
    v47 = siri::dialogengine::RandomNumberGenerator::GenerateRandomNumber(v72, (unint64_t)(float)(v39 * 1000.0));
    if (v37 == v38)
    {
      RandomNumber = (((char *)v79 - (char *)v78) >> 4) - 1;
      v32 = v71;
      if (!v38)
        goto LABEL_95;
    }
    else
    {
      RandomNumber = 0;
      v50 = v37 - v38;
      if (v50 <= 1)
        v50 = 1;
      v32 = v71;
      while ((float)((float)v47 / 1000.0) >= v38[RandomNumber])
      {
        if (v50 == ++RandomNumber)
        {
          RandomNumber = (((char *)v79 - (char *)v78) >> 4) - 1;
          break;
        }
      }
    }
    operator delete(v38);
LABEL_95:
    v51 = (siri::dialogengine::Node **)((char *)v78 + 16 * RandomNumber);
    if (*v51)
      break;
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"  Programming error: NULL node in <random> group", v48);
LABEL_147:
    v66 = v79;
    v35 = (__int128 *)((char *)v78 + 16 * RandomNumber);
    v67 = (uint64_t)(v35 + 1);
    if (v35 + 1 != (__int128 *)v79)
    {
      do
        v68 = (uint64_t)v35++;
      while ((void **)(std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100](v68, v35) + 32) != v66);
      v67 = (uint64_t)v79;
    }
    while ((__int128 *)v67 != v35)
      v67 = std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v67 - 16);
    v79 = (void **)v35;
    v34 = v78;
    if (v78 == (std::string *)v35)
      goto LABEL_159;
  }
  if (((*(uint64_t (**)(siri::dialogengine::Node *, siri::dialogengine::Context *))(*(_QWORD *)*v51 + 48))(*v51, a2) & 1) == 0)
  {
    siri::dialogengine::Node::GetIdForDebug(*v51, a2, 0, &v75);
    v52 = std::string::insert(&v75, 0, "  Condition for child of <first> failed - skipping: ");
    v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    v77 = v52->__r_.__value_.__r.__words[2];
    *(_OWORD *)v76 = v53;
    v52->__r_.__value_.__l.__size_ = 0;
    v52->__r_.__value_.__r.__words[2] = 0;
    v52->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::Debug((siri::dialogengine *)v76);
    if (SHIBYTE(v77) < 0)
      operator delete(v76[0]);
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v75.__r_.__value_.__l.__data_);
    goto LABEL_147;
  }
  (*(void (**)(void **__return_ptr, siri::dialogengine::Node *, siri::dialogengine::Context *))(*(_QWORD *)*v51 + 40))(v76, *v51, a2);
  if (v76[0] == v76[1])
  {
    siri::dialogengine::Node::GetIdForDebug(*v51, a2, 0, &v74);
    v54 = std::string::insert(&v74, 0, "  Child of <random> returned an empty result - skipping: ");
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    v75.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::Debug((siri::dialogengine *)&v75);
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v75.__r_.__value_.__l.__data_);
    if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v74.__r_.__value_.__l.__data_);
    goto LABEL_146;
  }
  if (!v32)
  {
    siri::dialogengine::Node::GetGlobalId(*v51, a2, &v75);
    if (&v97 == (char **)std::__tree<std::string>::find<std::string>((uint64_t)&v96, (const void **)&v75.__r_.__value_.__l.__data_))
    {
      siri::dialogengine::Node::GetIdForDebug(*v51, a2, 0, &v73);
      v56 = std::string::insert(&v73, 0, "  Match found for <random> group - returning: ");
      v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
      v74.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v57;
      v56->__r_.__value_.__l.__size_ = 0;
      v56->__r_.__value_.__r.__words[2] = 0;
      v56->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Log::Debug((siri::dialogengine *)&v74);
      if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v74.__r_.__value_.__l.__data_);
      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v73.__r_.__value_.__l.__data_);
      if (v76 != (void **)a3)
        std::vector<std::shared_ptr<siri::dialogengine::Node>>::__assign_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Node>*,std::shared_ptr<siri::dialogengine::Node>*>(a3, (uint64_t *)v76[0], (uint64_t *)v76[1], ((char *)v76[1] - (char *)v76[0]) >> 4);
      v58 = 0;
    }
    else if ((v70 & 1) != 0)
    {
      if ((v69 & 1) != 0)
        goto LABEL_102;
LABEL_126:
      v69 = 0;
      v32 = v71;
LABEL_127:
      if (*(_QWORD *)a3 == *(_QWORD *)(a3 + 8)
        || &v94 == (char **)std::__tree<std::string>::find<std::string>((uint64_t)&v93.__r_.__value_.__r.__words[2], (const void **)&v75.__r_.__value_.__l.__data_))
      {
        siri::dialogengine::Node::GetIdForDebug(*v51, a2, 0, &v73);
        v62 = std::string::insert(&v73, 0, "  Upating best match so far for <random> group: ");
        v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
        v74.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v63;
        v62->__r_.__value_.__l.__size_ = 0;
        v62->__r_.__value_.__r.__words[2] = 0;
        v62->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::Log::Debug((siri::dialogengine *)&v74);
        if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v74.__r_.__value_.__l.__data_);
        if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v73.__r_.__value_.__l.__data_);
        if (v76 != (void **)a3)
          std::vector<std::shared_ptr<siri::dialogengine::Node>>::__assign_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Node>*,std::shared_ptr<siri::dialogengine::Node>*>(a3, (uint64_t *)v76[0], (uint64_t *)v76[1], ((char *)v76[1] - (char *)v76[0]) >> 4);
      }
      v70 = 1;
      v58 = 1;
    }
    else
    {
      v59 = this[26];
      v60 = this[27];
      while (v59 != v60)
      {
        siri::dialogengine::Node::GetGlobalId(*v59, a2, &v74);
        v61 = (char **)std::__tree<std::string>::find<std::string>((uint64_t)&v96, (const void **)&v74.__r_.__value_.__l.__data_);
        if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v74.__r_.__value_.__l.__data_);
        if (&v97 == v61)
          goto LABEL_126;
        v59 += 2;
      }
LABEL_102:
      v32 = v71;
      if (&v94 != (char **)std::__tree<std::string>::find<std::string>((uint64_t)&v93.__r_.__value_.__r.__words[2], (const void **)&v75.__r_.__value_.__l.__data_))
      {
        v69 = 1;
        goto LABEL_127;
      }
      siri::dialogengine::Node::GetIdForDebug(*v51, a2, 0, &v73);
      v64 = std::string::insert(&v73, 0, "  Unused matches are available. Using the non-repeated match: ");
      v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
      v74.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v65;
      v64->__r_.__value_.__l.__size_ = 0;
      v64->__r_.__value_.__r.__words[2] = 0;
      v64->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Log::Debug((siri::dialogengine *)&v74);
      if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v74.__r_.__value_.__l.__data_);
      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v73.__r_.__value_.__l.__data_);
      if (v76 != (void **)a3)
        std::vector<std::shared_ptr<siri::dialogengine::Node>>::__assign_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Node>*,std::shared_ptr<siri::dialogengine::Node>*>(a3, (uint64_t *)v76[0], (uint64_t *)v76[1], ((char *)v76[1] - (char *)v76[0]) >> 4);
      v58 = 0;
      v69 = 1;
      v70 = 1;
    }
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v75.__r_.__value_.__l.__data_);
    if ((v58 & 1) == 0)
    {
      v75.__r_.__value_.__r.__words[0] = (std::string::size_type)v76;
      goto LABEL_158;
    }
LABEL_146:
    v75.__r_.__value_.__r.__words[0] = (std::string::size_type)v76;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);
    goto LABEL_147;
  }
  if (v76 != (void **)a3)
    std::vector<std::shared_ptr<siri::dialogengine::Node>>::__assign_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Node>*,std::shared_ptr<siri::dialogengine::Node>*>(a3, (uint64_t *)v76[0], (uint64_t *)v76[1], ((char *)v76[1] - (char *)v76[0]) >> 4);
  v75.__r_.__value_.__r.__words[0] = (std::string::size_type)v76;
LABEL_158:
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);
LABEL_159:
  siri::dialogengine::Context::AddRandomMatch((uint64_t)a2, (uint64_t)&__p, (uint64_t **)a3);
  v76[0] = &v78;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)v76);
LABEL_160:
  v78 = &v81;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v78);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_52:
  std::__tree<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>>>::destroy(v100);
  std::__tree<std::string>::destroy((uint64_t)&v96, v97);
  std::__tree<std::string>::destroy((uint64_t)&v93.__r_.__value_.__r.__words[2], v94);
}

void sub_1BFC60020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void ****a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void ***a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void **a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  uint64_t v57;

  a29 = &a36;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  a36 = &a43;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a36);
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&a43);
  a43 = &a46;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&a43);
  if (a57 < 0)
    operator delete(__p);
  siri::dialogengine::DialogStateUseCase::~DialogStateUseCase((siri::dialogengine::DialogStateUseCase *)(v57 - 208));
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'siri::dialogengine::GroupRandom::~GroupRandom(siri::dialogengine::GroupRandom *this)
{
  siri::dialogengine::Group::~Group((siri::dialogengine::GroupRandom *)((char *)this - 64));
}

{
  siri::dialogengine::Group::~Group((siri::dialogengine::GroupRandom *)((char *)this - 64));
  JUMPOUT(0x1C3B8D890);
}

uint64_t `non-virtual thunk to'siri::dialogengine::GroupRandom::Validate(siri::dialogengine::GroupRandom *this, siri::dialogengine::Context *a2)
{
  return siri::dialogengine::GroupRandom::Validate((siri::dialogengine::GroupRandom *)((char *)this - 64), a2);
}

double siri::dialogengine::GroupRandom::GroupRandom(siri::dialogengine::GroupRandom *this)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 9) = (char *)this + 80;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_DWORD *)this + 48) = 1065353216;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *((_QWORD *)this + 31) = 0;
  *(_QWORD *)this = &off_1E793A598;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = &unk_1E793A5F0;
  return result;
}

{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 9) = (char *)this + 80;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_DWORD *)this + 48) = 1065353216;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *((_QWORD *)this + 31) = 0;
  *(_QWORD *)this = &off_1E793A598;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = &unk_1E793A5F0;
  return result;
}

uint64_t siri::dialogengine::Group::Accept(siri::dialogengine::Group *this, siri::dialogengine::NodeVisitor *a2)
{
  return (*(uint64_t (**)(siri::dialogengine::NodeVisitor *, siri::dialogengine::Group *))(*(_QWORD *)a2 + 24))(a2, this);
}

uint64_t siri::dialogengine::Group::Accept(siri::dialogengine::Group *this, siri::dialogengine::ConstNodeVisitor *a2)
{
  return (*(uint64_t (**)(siri::dialogengine::ConstNodeVisitor *, siri::dialogengine::Group *))(*(_QWORD *)a2 + 24))(a2, this);
}

uint64_t siri::dialogengine::Group::Validate(uint64_t **this, siri::dialogengine::Context *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  v4 = siri::dialogengine::Node::Validate((siri::dialogengine::Node *)this, a2);
  v6 = this[26];
  v5 = this[27];
  while (v6 != v5)
  {
    v7 = *v6;
    v6 += 2;
    v4 = (*(unsigned int (**)(uint64_t, siri::dialogengine::Context *))(*(_QWORD *)v7 + 32))(v7, a2) & v4;
  }
  return v4;
}

void `non-virtual thunk to'siri::dialogengine::Group::~Group(siri::dialogengine::Group *this)
{
  siri::dialogengine::Group::~Group((siri::dialogengine::Group *)((char *)this - 64));
}

{
  siri::dialogengine::Group::~Group((siri::dialogengine::Group *)((char *)this - 64));
  JUMPOUT(0x1C3B8D890);
}

uint64_t `non-virtual thunk to'siri::dialogengine::Group::Validate(uint64_t **this, siri::dialogengine::Context *a2)
{
  return siri::dialogengine::Group::Validate(this - 8, a2);
}

char *siri::dialogengine::Group::GetNodes@<X0>(siri::dialogengine::Group *this@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  return std::vector<std::shared_ptr<siri::dialogengine::Node>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Node>*,std::shared_ptr<siri::dialogengine::Node>*>((char *)a2, *((_QWORD **)this + 26), *((_QWORD **)this + 27), (uint64_t)(*((_QWORD *)this + 27) - *((_QWORD *)this + 26)) >> 4);
}

uint64_t siri::dialogengine::Group::SetNodes(int64x2_t *a1, uint64_t **a2)
{
  uint64_t result;
  uint64_t *v5;
  __int128 *v6;
  uint64_t *v7;
  int64x2_t *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  __int128 v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  char *v25;
  __int128 v26;
  int64x2_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64x2_t v31;
  uint64_t v32;
  int64x2_t *v33;

  result = a1[13].i64[1];
  v5 = (uint64_t *)a1[13].i64[0];
  while ((uint64_t *)result != v5)
    result = std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](result - 16);
  a1[13].i64[1] = (uint64_t)v5;
  v7 = *a2;
  v6 = (__int128 *)a2[1];
  if (v7 != (uint64_t *)v6)
  {
    v8 = a1 + 14;
    do
    {
      if ((unint64_t)v5 >= v8->i64[0])
      {
        v12 = a1[13].i64[0];
        v13 = ((uint64_t)v5 - v12) >> 4;
        if ((unint64_t)(v13 + 1) >> 60)
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        v14 = v8->i64[0] - v12;
        v15 = v14 >> 3;
        if (v14 >> 3 <= (unint64_t)(v13 + 1))
          v15 = v13 + 1;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
          v16 = 0xFFFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        v33 = a1 + 14;
        v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v16);
        v19 = &v17[16 * v13];
        v20 = *(_OWORD *)v7;
        *(_OWORD *)v19 = *(_OWORD *)v7;
        if (*((_QWORD *)&v20 + 1))
        {
          v21 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        v24 = (_QWORD *)a1[13].i64[0];
        v23 = (_QWORD *)a1[13].i64[1];
        if (v23 == v24)
        {
          v27 = vdupq_n_s64((unint64_t)v23);
          v25 = &v17[16 * v13];
        }
        else
        {
          v25 = &v17[16 * v13];
          do
          {
            v26 = *((_OWORD *)v23 - 1);
            v23 -= 2;
            *((_OWORD *)v25 - 1) = v26;
            v25 -= 16;
            *v23 = 0;
            v23[1] = 0;
          }
          while (v23 != v24);
          v27 = a1[13];
        }
        v5 = (uint64_t *)(v19 + 16);
        a1[13].i64[0] = (uint64_t)v25;
        a1[13].i64[1] = (uint64_t)(v19 + 16);
        v31 = v27;
        v28 = a1[14].i64[0];
        a1[14].i64[0] = (uint64_t)&v17[16 * v18];
        v32 = v28;
        v30 = v27.i64[0];
        result = std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)&v30);
      }
      else
      {
        *v5 = *v7;
        v9 = v7[1];
        v5[1] = v9;
        if (v9)
        {
          v10 = (unint64_t *)(v9 + 8);
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 1, v10));
        }
        v5 += 2;
      }
      a1[13].i64[1] = (uint64_t)v5;
      v29 = *v7;
      v7 += 2;
      *(_QWORD *)(v29 + 200) = a1;
    }
    while (v7 != (uint64_t *)v6);
  }
  return result;
}

int64x2_t *siri::dialogengine::Group::AddNode(int64x2_t *result, _QWORD *a2)
{
  int64x2_t *v3;
  int64x2_t *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  char *v24;
  __int128 v25;
  int64x2_t v26;
  uint64_t v27;
  uint64_t v28;
  int64x2_t v29;
  uint64_t v30;
  uint64_t *v31;

  v3 = result;
  v4 = result + 14;
  v5 = result[14].u64[0];
  v6 = (_QWORD *)result[13].i64[1];
  if ((unint64_t)v6 >= v5)
  {
    v11 = result[13].i64[0];
    v12 = ((uint64_t)v6 - v11) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    v14 = v5 - v11;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v31 = (uint64_t *)v4;
    v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v15);
    v18 = &v16[16 * v12];
    v19 = *(_OWORD *)a2;
    *(_OWORD *)v18 = *(_OWORD *)a2;
    if (*((_QWORD *)&v19 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v23 = (_QWORD *)v3[13].i64[0];
    v22 = (_QWORD *)v3[13].i64[1];
    if (v22 == v23)
    {
      v26 = vdupq_n_s64((unint64_t)v22);
      v24 = &v16[16 * v12];
    }
    else
    {
      v24 = &v16[16 * v12];
      do
      {
        v25 = *((_OWORD *)v22 - 1);
        v22 -= 2;
        *((_OWORD *)v24 - 1) = v25;
        v24 -= 16;
        *v22 = 0;
        v22[1] = 0;
      }
      while (v22 != v23);
      v26 = v3[13];
    }
    v10 = v18 + 16;
    v3[13].i64[0] = (uint64_t)v24;
    v3[13].i64[1] = (uint64_t)(v18 + 16);
    v29 = v26;
    v27 = v3[14].i64[0];
    v3[14].i64[0] = (uint64_t)&v16[16 * v17];
    v30 = v27;
    v28 = v26.i64[0];
    result = (int64x2_t *)std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)&v28);
  }
  else
  {
    *v6 = *a2;
    v7 = a2[1];
    v6[1] = v7;
    if (v7)
    {
      v8 = (unint64_t *)(v7 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    v10 = v6 + 2;
  }
  v3[13].i64[1] = (uint64_t)v10;
  *(_QWORD *)(*a2 + 200) = v3;
  return result;
}

void siri::dialogengine::Group::GetPhraseName(siri::dialogengine::Group *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 255) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 29), *((_QWORD *)this + 30));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 232);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 31);
  }
}

std::string *siri::dialogengine::Group::SetPhraseName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 232), a2);
}

void siri::dialogengine::Group::Expand(uint64_t a1, siri::dialogengine::Context *a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  __n128 v13;
  unint64_t *v14;
  unint64_t v15;
  const void **v16[3];
  _QWORD v17[2];
  const void ***v18;

  v10 = (std::__shared_weak_count *)a3[1];
  v17[0] = *a3;
  v17[1] = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  memset(v16, 0, sizeof(v16));
  std::vector<std::shared_ptr<siri::dialogengine::Node>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Node>*,std::shared_ptr<siri::dialogengine::Node>*>((char *)v16, *(_QWORD **)(a1 + 208), *(_QWORD **)(a1 + 216), (uint64_t)(*(_QWORD *)(a1 + 216) - *(_QWORD *)(a1 + 208)) >> 4);
  siri::dialogengine::ExpandNodes(a2, v17, v16, a4, a5, a6, v13);
  v18 = v16;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  if (v10)
  {
    v14 = (unint64_t *)&v10->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_1BFC6083C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void siri::dialogengine::Group::ExpandAsDAG(uint64_t a1@<X0>, siri::dialogengine::Context *a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, unsigned int a5@<W4>, uint64_t a6@<X8>)
{
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t i;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  __int128 v39;
  uint64_t v40[3];
  void ***v41;
  _QWORD *v42[2];
  uint64_t v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  int v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  uint64_t v50[3];
  unsigned int **v51[3];
  uint64_t *v52;
  _QWORD *v53[2];
  uint64_t *v54;
  _QWORD *v55[2];
  void **v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  _QWORD v60[3];
  __int128 v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v55[0] = 0;
  v55[1] = 0;
  v54 = (uint64_t *)v55;
  v53[0] = 0;
  v53[1] = 0;
  v52 = (uint64_t *)v53;
  memset(v51, 0, sizeof(v51));
  memset(v50, 0, sizeof(v50));
  v48 = 0;
  v49 = 0;
  v47 = 0;
  v56 = 0;
  v57 = 0;
  v58 = 0;
  std::vector<std::shared_ptr<siri::dialogengine::Node>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Node>*,std::shared_ptr<siri::dialogengine::Node>*>((char *)&v56, *(_QWORD **)(a1 + 208), *(_QWORD **)(a1 + 216), (uint64_t)(*(_QWORD *)(a1 + 216) - *(_QWORD *)(a1 + 208)) >> 4);
  v45 = 0;
  v46 = 0;
  siri::dialogengine::CreateDAG(a2, &v54, (const void ***)&v56, (uint64_t)v51, (uint64_t)v50, a3, a4, (uint64_t)&v45, &v47, 1u, a5);
  v12 = v46;
  if (v46)
  {
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v41 = &v56;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v41);
  v56 = 0;
  v57 = 0;
  v58 = 0;
  std::vector<std::shared_ptr<siri::dialogengine::Node>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Node>*,std::shared_ptr<siri::dialogengine::Node>*>((char *)&v56, *(_QWORD **)(a1 + 208), *(_QWORD **)(a1 + 216), (uint64_t)(*(_QWORD *)(a1 + 216) - *(_QWORD *)(a1 + 208)) >> 4);
  v43 = v48;
  v44 = v49;
  if (v49)
  {
    v15 = (unint64_t *)&v49->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  siri::dialogengine::CreateDAG(a2, &v52, (const void ***)&v56, (uint64_t)v51, (uint64_t)v50, a3, a4, (uint64_t)&v43, &v47, 0, a5);
  v17 = v44;
  if (v44)
  {
    v18 = (unint64_t *)&v44->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v41 = &v56;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v41);
  v42[0] = 0;
  v42[1] = 0;
  v41 = (void ***)v42;
  siri::dialogengine::CreateJSONObjectFromAdjacencyList(v50, v40);
  std::string::basic_string[abi:ne180100]<0>(&v56, "adjacency");
  v59 = *(_OWORD *)v40;
  *(_OWORD *)v40 = 0uLL;
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>>((uint64_t **)&v41, (const void **)&v56, (uint64_t)&v56);
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
  if (*((_QWORD *)&v59 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v59 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (SHIBYTE(v58) < 0)
    operator delete(v56);
  v23 = (std::__shared_weak_count *)v40[1];
  if (v40[1])
  {
    v24 = (unint64_t *)(v40[1] + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  siri::dialogengine::CreateJSONObjectFromOutputNodeMap(v51, v40);
  std::string::basic_string[abi:ne180100]<0>(&v56, "nodes");
  v59 = *(_OWORD *)v40;
  *(_OWORD *)v40 = 0uLL;
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>>((uint64_t **)&v41, (const void **)&v56, (uint64_t)&v56);
  v26 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
  if (*((_QWORD *)&v59 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v59 + 1) + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (SHIBYTE(v58) < 0)
    operator delete(v56);
  v29 = (std::__shared_weak_count *)v40[1];
  if (v40[1])
  {
    v30 = (unint64_t *)(v40[1] + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  siri::dialogengine::CreateJSONObjectVal((const void ***)&v54, v40);
  std::string::basic_string[abi:ne180100]<0>(&v56, "speak");
  v59 = *(_OWORD *)v40;
  *(_OWORD *)v40 = 0uLL;
  siri::dialogengine::CreateJSONObjectVal((const void ***)&v52, (uint64_t *)&v39);
  std::string::basic_string[abi:ne180100]<0>(v60, "print");
  v61 = v39;
  v39 = 0uLL;
  std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100](a6, (const void **)&v56, 2);
  for (i = 0; i != -10; i -= 5)
  {
    std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v61 + i * 8);
    if (SHIBYTE(v60[i + 2]) < 0)
      operator delete((void *)v60[i]);
  }
  v33 = (std::__shared_weak_count *)v40[1];
  if (v40[1])
  {
    v34 = (unint64_t *)(v40[1] + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(v42[0]);
  v36 = v49;
  if (v49)
  {
    v37 = (unint64_t *)&v49->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v56 = (void **)v50;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v56);
  v56 = (void **)v51;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v56);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(v53[0]);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(v55[0]);
}

void sub_1BFC60D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,_QWORD *a33)
{
  uint64_t v33;
  uint64_t v34;
  uint64_t i;

  for (i = 40; i != -40; i -= 40)
    std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>::~pair(v33 + i);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(a17);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  *(_QWORD *)(v34 - 152) = &a26;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 152));
  *(_QWORD *)(v34 - 152) = &a29;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 152));
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(a33);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*(_QWORD **)(v34 - 168));
  _Unwind_Resume(a1);
}

void sub_1BFC60E10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void **v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v7 = va_arg(va1, void **);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  JUMPOUT(0x1BFC60DD0);
}

void std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<int>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::vector<int>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

BOOL siri::dialogengine::Group::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  const void **v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  const void *v15;
  const void *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  result = siri::dialogengine::Node::operator==(a1, a2);
  if (result)
  {
    v5 = *(unsigned __int8 *)(a1 + 255);
    if ((v5 & 0x80u) == 0)
      v6 = *(unsigned __int8 *)(a1 + 255);
    else
      v6 = *(_QWORD *)(a1 + 240);
    v7 = *(unsigned __int8 *)(a2 + 255);
    v8 = (char)v7;
    if ((v7 & 0x80u) != 0)
      v7 = *(_QWORD *)(a2 + 240);
    if (v6 != v7)
      return 0;
    v9 = (const void **)(a1 + 232);
    if (v8 >= 0)
      v10 = (unsigned __int8 *)(a2 + 232);
    else
      v10 = *(unsigned __int8 **)(a2 + 232);
    if ((v5 & 0x80) != 0)
    {
      if (memcmp(*v9, v10, *(_QWORD *)(a1 + 240)))
        return 0;
    }
    else if (*(_BYTE *)(a1 + 255))
    {
      while (*(unsigned __int8 *)v9 == *v10)
      {
        v9 = (const void **)((char *)v9 + 1);
        ++v10;
        if (!--v5)
          goto LABEL_17;
      }
      return 0;
    }
LABEL_17:
    v11 = *(_QWORD *)(a1 + 208);
    v12 = *(_QWORD *)(a1 + 216);
    if (v12 - v11 == *(_QWORD *)(a2 + 216) - *(_QWORD *)(a2 + 208))
    {
      if (v12 == v11)
        return 1;
      v13 = 0;
      v14 = 0;
      while (1)
      {
        v15 = *(const void **)(v11 + v13);
        v16 = *(const void **)(*(_QWORD *)(a2 + 208) + v13);
        if (v15)
        {
          if (v16)
            goto LABEL_22;
        }
        else
        {
          v17 = 0;
          if (v16)
          {
LABEL_22:
            goto LABEL_25;
          }
        }
        v18 = 0;
LABEL_25:
        if (v17 | v18)
        {
          result = 0;
          if (!v17 || !v18)
            return result;
          if ((siri::dialogengine::Group::operator==(v17) & 1) == 0)
            return 0;
          goto LABEL_53;
        }
        if (v15)
        {
          if (v16)
            goto LABEL_32;
        }
        else
        {
          v19 = 0;
          if (v16)
          {
LABEL_32:
            goto LABEL_35;
          }
        }
        v20 = 0;
LABEL_35:
        if (v19 | v20)
        {
          result = 0;
          if (!v19 || !v20)
            return result;
          if (!siri::dialogengine::Dialog::operator==(v19, v20))
            return 0;
          goto LABEL_53;
        }
        if (v15)
        {
          if (v16)
            goto LABEL_42;
        }
        else
        {
          v21 = 0;
          if (v16)
          {
LABEL_42:
            goto LABEL_45;
          }
        }
        v22 = 0;
LABEL_45:
        if (v21 | v22)
        {
          result = 0;
          if (!v21 || !v22)
            return result;
          if ((siri::dialogengine::Text::operator!=(v21, v22) & 1) != 0)
            return 0;
        }
        else if (v15
               && v16
               && ((*(uint64_t (**)(const void *, const void *))(*(_QWORD *)v15 + 64))(v15, v16) & 1) != 0)
        {
          return 0;
        }
LABEL_53:
        ++v14;
        v11 = *(_QWORD *)(a1 + 208);
        v13 += 16;
        result = 1;
        if (v14 >= (*(_QWORD *)(a1 + 216) - v11) >> 4)
          return result;
      }
    }
    return 0;
  }
  return result;
}

BOOL siri::dialogengine::Group::operator!=(uint64_t a1, uint64_t a2)
{
  return !siri::dialogengine::Group::operator==(a1, a2);
}

void InitDefaultsscc_info_TextInput_TextInput_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/TextInput.pb.cc", a4);
  SnippetUI::TextInput::TextInput((SnippetUI::TextInput *)&SnippetUI::_TextInput_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_TextInput_default_instance_, v4);
  qword_1ED1D3CD0 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
}

SnippetUI::TextInput *SnippetUI::TextInput::TextInput(SnippetUI::TextInput *this)
{
  *(_QWORD *)this = &off_1E793A7C0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 18) = 0;
  if (atomic_load(scc_info_TextInput_TextInput_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_TextInput_TextInput_2eproto);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 4) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 7) = 0;
  *(_QWORD *)((char *)this + 61) = 0;
  return this;
}

void sub_1BFC61270(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::TextInput::~TextInput(SnippetUI::TextInput *this)
{
  SnippetUI::TextInput::~TextInput(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)this = &off_1E793A7C0;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 3);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1C3B8D890](v4, 0x1012C40EC159624);
  }
  v6 = *((_QWORD *)this + 4);
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
  {
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    MEMORY[0x1C3B8D890](v6, 0x1012C40EC159624);
  }
  v8 = *((_QWORD *)this + 5);
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v8 != 0)
  {
    if (*(char *)(v8 + 23) < 0)
      operator delete(*(void **)v8);
    MEMORY[0x1C3B8D890](v8, 0x1012C40EC159624);
  }
  v10 = *((_QWORD *)this + 6);
  if ((uint64_t *)v10 != &google::protobuf::internal::fixed_address_empty_string && v10)
  {
    if (*(char *)(v10 + 23) < 0)
      operator delete(*(void **)v10);
    MEMORY[0x1C3B8D890](v10, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::TextInput *)&SnippetUI::_TextInput_default_instance_)
  {
    v11 = *((_QWORD *)this + 7);
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::TextInput *SnippetUI::TextInput::New(SnippetUI::TextInput *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextInput>(0);
}

SnippetUI::TextInput *SnippetUI::TextInput::New(SnippetUI::TextInput *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextInput>(a2);
}

void SnippetUI::TextInput::Clear(SnippetUI::TextInput *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  google::protobuf::internal::InternalMetadataWithArena *v9;
  char v10;

  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 3);
  if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
  v4 = *((_QWORD *)this + 4);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v4 + 23) < 0)
    {
      **(_BYTE **)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v4 = 0;
      *(_BYTE *)(v4 + 23) = 0;
    }
  }
  v5 = *((_QWORD *)this + 5);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v5 + 23) < 0)
    {
      **(_BYTE **)v5 = 0;
      *(_QWORD *)(v5 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v5 = 0;
      *(_BYTE *)(v5 + 23) = 0;
    }
  }
  v6 = *((_QWORD *)this + 6);
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v6 + 23) < 0)
    {
      **(_BYTE **)v6 = 0;
      *(_QWORD *)(v6 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v6 = 0;
      *(_BYTE *)(v6 + 23) = 0;
    }
  }
  v8 = (_QWORD *)((char *)this + 56);
  v7 = *((_QWORD *)this + 7);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v10 = *((_BYTE *)this + 8);
  v9 = (SnippetUI::TextInput *)((char *)this + 8);
  *(_QWORD *)((char *)v8 + 5) = 0;
  *v8 = 0;
  if ((v10 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v9);
}

uint64_t SnippetUI::TextInput::IsInitialized(SnippetUI::TextInput *this)
{
  return 1;
}

char *SnippetUI::TextInput::ByteSizeLong(SnippetUI::TextInput *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  SnippetUI::TextProperty *v18;
  char *v19;
  int v20;
  uint64_t v21;
  const google::protobuf::UnknownFieldSet *v22;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  v6 = *((_QWORD *)this + 3);
  v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v8 = *(_QWORD *)(v6 + 8);
  if ((v7 & 0x80u) == 0)
    v8 = v7;
  v5 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_13:
  v9 = *((_QWORD *)this + 4);
  v10 = *(unsigned __int8 *)(v9 + 23);
  if (*(char *)(v9 + 23) < 0)
  {
    if (!*(_QWORD *)(v9 + 8))
      goto LABEL_18;
  }
  else if (!*(_BYTE *)(v9 + 23))
  {
    goto LABEL_18;
  }
  v11 = *(_QWORD *)(v9 + 8);
  if ((v10 & 0x80u) == 0)
    v11 = v10;
  v5 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_18:
  v12 = *((_QWORD *)this + 5);
  v13 = *(unsigned __int8 *)(v12 + 23);
  if (*(char *)(v12 + 23) < 0)
  {
    if (!*(_QWORD *)(v12 + 8))
      goto LABEL_23;
  }
  else if (!*(_BYTE *)(v12 + 23))
  {
    goto LABEL_23;
  }
  v14 = *(_QWORD *)(v12 + 8);
  if ((v13 & 0x80u) == 0)
    v14 = v13;
  v5 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_23:
  v15 = *((_QWORD *)this + 6);
  v16 = *(unsigned __int8 *)(v15 + 23);
  if (*(char *)(v15 + 23) < 0)
  {
    if (!*(_QWORD *)(v15 + 8))
      goto LABEL_28;
  }
  else if (!*(_BYTE *)(v15 + 23))
  {
    goto LABEL_28;
  }
  v17 = *(_QWORD *)(v15 + 8);
  if ((v16 & 0x80u) == 0)
    v17 = v16;
  v5 += v17 + ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_28:
  if (this != (SnippetUI::TextInput *)&SnippetUI::_TextInput_default_instance_)
  {
    v18 = (SnippetUI::TextProperty *)*((_QWORD *)this + 7);
    if (v18)
    {
      v19 = SnippetUI::TextProperty::ByteSizeLong(v18);
      v5 += (uint64_t)&v19[((9 * (__clz(v19 | 1) ^ 0x1F) + 73) >> 6) + 1];
    }
  }
  v20 = *((_DWORD *)this + 16);
  if (v20)
  {
    if (v20 < 0)
      v21 = 11;
    else
      v21 = ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6) + 1;
    v5 += v21;
  }
  if (*((_BYTE *)this + 68))
    v22 = (const google::protobuf::UnknownFieldSet *)(v5 + 2);
  else
    v22 = (const google::protobuf::UnknownFieldSet *)v5;
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::TextInput *)((char *)this + 8), v22, (_DWORD *)this + 18);
  *((_DWORD *)this + 18) = (_DWORD)v22;
  return (char *)v22;
}

uint64_t SnippetUI::TextInput::GetCachedSize(SnippetUI::TextInput *this)
{
  return *((unsigned int *)this + 18);
}

google::protobuf::internal *SnippetUI::TextInput::_InternalParse(SnippetUI::TextInput *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  std::string **v6;
  std::string **v7;
  std::string **v8;
  std::string **v9;
  uint64_t *v10;
  google::protobuf::internal::ParseContext *v11;
  google::protobuf::internal *TagFallback;
  char *v13;
  std::string *v14;
  std::string::value_type *v15;
  google::protobuf::internal::ParseContext *v16;
  char *v17;
  google::protobuf::internal *v18;
  unint64_t v19;
  int v20;
  std::string *v21;
  char *v22;
  SnippetUI::TextProperty *v23;
  google::protobuf::internal *v24;
  unint64_t v25;
  int v26;
  BOOL v27;
  google::protobuf::internal *v28;
  uint64_t v29;
  google::protobuf::internal *v31;

  v31 = a2;
  v5 = (std::string **)((char *)this + 48);
  v6 = (std::string **)((char *)this + 40);
  v7 = (std::string **)((char *)this + 32);
  v8 = (std::string **)((char *)this + 24);
  v9 = (std::string **)((char *)this + 16);
  v10 = (uint64_t *)((char *)this + 8);
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v31, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v31;
    TagFallback = (google::protobuf::internal *)((char *)v31 + 1);
    v13 = (char *)*(unsigned __int8 *)v31;
    if ((*(char *)v31 & 0x80000000) == 0)
      goto LABEL_6;
    v13 = (char *)(v13 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v31 + 2);
LABEL_6:
      v31 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v31, v13);
    v31 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    switch(v13 >> 3)
    {
      case 1u:
        if (v13 != 10)
          goto LABEL_48;
        v14 = *v9;
        if (*v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v9, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v14 = *v9;
          TagFallback = v31;
        }
        v15 = (std::string::value_type *)TagFallback;
        v16 = a3;
        v17 = "SnippetUI.TextInput.identifier";
        goto LABEL_40;
      case 2u:
        if (v13 != 18)
          goto LABEL_48;
        v14 = *v8;
        if (*v8 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v8, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v14 = *v8;
          TagFallback = v31;
        }
        v15 = (std::string::value_type *)TagFallback;
        v16 = a3;
        v17 = "SnippetUI.TextInput.initial_value";
        goto LABEL_40;
      case 3u:
        if (v13 != 26)
          goto LABEL_48;
        v14 = *v7;
        if (*v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v7, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v14 = *v7;
          TagFallback = v31;
        }
        v15 = (std::string::value_type *)TagFallback;
        v16 = a3;
        v17 = "SnippetUI.TextInput.placeholder_text";
        goto LABEL_40;
      case 4u:
        if (v13 != 32)
          goto LABEL_48;
        v18 = (google::protobuf::internal *)((char *)TagFallback + 1);
        LODWORD(v19) = *(unsigned __int8 *)TagFallback;
        if ((*(char *)TagFallback & 0x80000000) == 0)
          goto LABEL_26;
        v20 = *(char *)v18;
        v19 = v19 + (v20 << 7) - 128;
        if (v20 < 0)
        {
          v31 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v19);
          if (!v31)
            goto LABEL_56;
        }
        else
        {
          v18 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_26:
          v31 = v18;
        }
        *((_DWORD *)this + 16) = v19;
        continue;
      case 5u:
        if (v13 != 42)
          goto LABEL_48;
        v21 = *v6;
        if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v21 = *v6;
          TagFallback = v31;
        }
        v22 = google::protobuf::internal::InlineGreedyStringParser(v21, (std::string::value_type *)TagFallback, (uint64_t)a3);
        goto LABEL_41;
      case 6u:
        if (v13 != 50)
          goto LABEL_48;
        v23 = (SnippetUI::TextProperty *)*((_QWORD *)this + 7);
        if (!v23)
        {
          v23 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
          *((_QWORD *)this + 7) = v23;
          TagFallback = v31;
        }
        v22 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v23, TagFallback);
        goto LABEL_41;
      case 7u:
        if (v13 != 58)
          goto LABEL_48;
        v14 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v14 = *v5;
          TagFallback = v31;
        }
        v15 = (std::string::value_type *)TagFallback;
        v16 = a3;
        v17 = "SnippetUI.TextInput.component_name";
LABEL_40:
        v22 = google::protobuf::internal::InlineGreedyStringParserUTF8(v14, v15, (uint64_t)v16, (google::protobuf::internal *)v17);
        goto LABEL_41;
      case 8u:
        if (v13 != 64)
          goto LABEL_48;
        v24 = (google::protobuf::internal *)((char *)TagFallback + 1);
        v25 = *(unsigned __int8 *)TagFallback;
        if ((*(char *)TagFallback & 0x80000000) == 0)
          goto LABEL_47;
        v26 = *(char *)v24;
        v25 = v25 + (v26 << 7) - 128;
        if (v26 < 0)
        {
          v28 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v25);
          v31 = v28;
          *((_BYTE *)this + 68) = v29 != 0;
          if (!v28)
            goto LABEL_56;
        }
        else
        {
          v24 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_47:
          v31 = v24;
          *((_BYTE *)this + 68) = v25 != 0;
        }
        continue;
      default:
LABEL_48:
        if ((_DWORD)v13)
          v27 = (v13 & 7) == 4;
        else
          v27 = 1;
        if (v27)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v13 - 1;
          return TagFallback;
        }
        v22 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v13, v10, TagFallback, a3, v11);
LABEL_41:
        v31 = (google::protobuf::internal *)v22;
        if (v22)
          continue;
LABEL_56:
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::TextInput::InternalSerializeWithCachedSizesToArray(SnippetUI::TextInput *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  google::protobuf::internal *v7;
  const char *v8;
  google::protobuf::internal *v9;
  const char *v10;
  google::protobuf::internal *v11;
  const char *v12;
  unsigned int v13;
  unint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  SnippetUI::TextProperty *v20;
  unsigned int v21;
  unsigned __int8 *v22;
  unsigned int v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  unsigned int v26;
  unsigned int v27;
  google::protobuf::internal *v28;
  const char *v29;
  unsigned __int8 v30;
  uint64_t v31;

  v7 = (google::protobuf::internal *)*((_QWORD *)this + 2);
  if (*((char *)v7 + 23) < 0)
  {
    v8 = (const char *)*((_QWORD *)v7 + 1);
    if (!v8)
      goto LABEL_7;
    v7 = *(google::protobuf::internal **)v7;
    goto LABEL_6;
  }
  v8 = (const char *)*((unsigned __int8 *)v7 + 23);
  if (*((_BYTE *)v7 + 23))
  {
LABEL_6:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v7, v8, 1, (google::protobuf::internal *)"SnippetUI.TextInput.identifier");
    a2 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 2), a2);
  }
LABEL_7:
  v9 = (google::protobuf::internal *)*((_QWORD *)this + 3);
  if (*((char *)v9 + 23) < 0)
  {
    v10 = (const char *)*((_QWORD *)v9 + 1);
    if (!v10)
      goto LABEL_13;
    v9 = *(google::protobuf::internal **)v9;
    goto LABEL_12;
  }
  v10 = (const char *)*((unsigned __int8 *)v9 + 23);
  if (*((_BYTE *)v9 + 23))
  {
LABEL_12:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v9, v10, 1, (google::protobuf::internal *)"SnippetUI.TextInput.initial_value");
    a2 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((_QWORD *)this + 3), a2);
  }
LABEL_13:
  v11 = (google::protobuf::internal *)*((_QWORD *)this + 4);
  if (*((char *)v11 + 23) < 0)
  {
    v12 = (const char *)*((_QWORD *)v11 + 1);
    if (!v12)
      goto LABEL_19;
    v11 = *(google::protobuf::internal **)v11;
    goto LABEL_18;
  }
  v12 = (const char *)*((unsigned __int8 *)v11 + 23);
  if (*((_BYTE *)v11 + 23))
  {
LABEL_18:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v11, v12, 1, (google::protobuf::internal *)"SnippetUI.TextInput.placeholder_text");
    a2 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, *((_QWORD *)this + 4), a2);
  }
LABEL_19:
  v13 = *((_DWORD *)this + 16);
  if (v13)
  {
    if ((unint64_t)a2 >= *(_QWORD *)a3)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v13 = *((_DWORD *)this + 16);
    }
    *a2 = 32;
    if (v13 > 0x7F)
    {
      a2[1] = v13 | 0x80;
      v14 = (unint64_t)(int)v13 >> 7;
      if (v13 >> 14)
      {
        v15 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v16 = v15;
          *v15++ = v14 | 0x80;
          v17 = v14 >> 7;
          v18 = v14 >> 14;
          v14 >>= 7;
        }
        while (v18);
        a2 = (char *)(v16 + 2);
        *v15 = v17;
      }
      else
      {
        a2[2] = v14;
        a2 += 3;
      }
    }
    else
    {
      a2[1] = v13;
      a2 += 2;
    }
  }
  v19 = *((_QWORD *)this + 5);
  if (*(char *)(v19 + 23) < 0)
  {
    if (!*(_QWORD *)(v19 + 8))
      goto LABEL_32;
    goto LABEL_31;
  }
  if (*(_BYTE *)(v19 + 23))
LABEL_31:
    a2 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 5, v19, a2);
LABEL_32:
  if (this != (SnippetUI::TextInput *)&SnippetUI::_TextInput_default_instance_)
  {
    v20 = (SnippetUI::TextProperty *)*((_QWORD *)this + 7);
    if (v20)
    {
      if ((unint64_t)a2 >= *(_QWORD *)a3)
      {
        a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
        v20 = (SnippetUI::TextProperty *)*((_QWORD *)this + 7);
      }
      *a2 = 50;
      v21 = *((_DWORD *)v20 + 15);
      if (v21 > 0x7F)
      {
        a2[1] = v21 | 0x80;
        v23 = v21 >> 7;
        if (v21 >> 14)
        {
          v24 = (unsigned __int8 *)(a2 + 2);
          do
          {
            v25 = v24;
            *v24++ = v23 | 0x80;
            v26 = v23 >> 7;
            v27 = v23 >> 14;
            v23 >>= 7;
          }
          while (v27);
          v22 = v25 + 2;
          *v24 = v26;
        }
        else
        {
          a2[2] = v23;
          v22 = (unsigned __int8 *)(a2 + 3);
        }
      }
      else
      {
        a2[1] = v21;
        v22 = (unsigned __int8 *)(a2 + 2);
      }
      a2 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v20, (google::protobuf::UnknownFieldSet *)v22, a3, a4);
    }
  }
  v28 = (google::protobuf::internal *)*((_QWORD *)this + 6);
  if (*((char *)v28 + 23) < 0)
  {
    v29 = (const char *)*((_QWORD *)v28 + 1);
    if (!v29)
      goto LABEL_52;
    v28 = *(google::protobuf::internal **)v28;
    goto LABEL_51;
  }
  v29 = (const char *)*((unsigned __int8 *)v28 + 23);
  if (*((_BYTE *)v28 + 23))
  {
LABEL_51:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v28, v29, 1, (google::protobuf::internal *)"SnippetUI.TextInput.component_name");
    a2 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 7, *((_QWORD *)this + 6), a2);
  }
LABEL_52:
  if (*((_BYTE *)this + 68))
  {
    if ((unint64_t)a2 >= *(_QWORD *)a3)
    {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v30 = *((_BYTE *)this + 68);
    }
    else
    {
      v30 = 1;
    }
    *a2 = 64;
    a2[1] = v30;
    a2 += 2;
  }
  v31 = *((_QWORD *)this + 1);
  if ((v31 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v31 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)a2, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)a2;
}

void SnippetUI::TextInput::CopyFrom(SnippetUI::TextInput *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::TextInput::Clear(this);
    SnippetUI::TextInput::MergeFrom(this, a2);
  }
}

void SnippetUI::TextInput::MergeFrom(SnippetUI::TextInput *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::TextInput *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/TextInput.pb.cc", 472);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::TextInput::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BFC61E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::TextInput::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 72) = a2;
  return this;
}

uint64_t SnippetUI::TextInput::GetMetadata(SnippetUI::TextInput *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_TextInput_2eproto);
  return file_level_metadata_TextInput_2eproto;
}

void *SnippetUI::TextInput::default_instance(SnippetUI::TextInput *this)
{
  if (atomic_load(scc_info_TextInput_TextInput_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_TextInput_TextInput_2eproto);
  return &SnippetUI::_TextInput_default_instance_;
}

void SnippetUI::TextInput::MergeFrom(SnippetUI::TextInput *this, const SnippetUI::TextInput *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  int **v16;
  int **v17;
  int **v18;
  int v19;
  char v20;
  std::string v21[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/TextInput.pb.cc", 487);
    v4 = google::protobuf::internal::LogMessage::operator<<(v21, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v20, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v21[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::TextInput *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_QWORD *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v6);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(_QWORD *)(v8 + 8))
      goto LABEL_21;
  }
  else if (!*(_BYTE *)(v8 + 23))
  {
    goto LABEL_21;
  }
  v9 = (uint64_t *)*((_QWORD *)this + 3);
  if (v9 != (uint64_t *)v8)
  {
    if (v9 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
    else
      std::string::operator=(*((std::string **)this + 3), (const std::string *)v8);
  }
LABEL_21:
  v10 = *((_QWORD *)a2 + 4);
  if (*(char *)(v10 + 23) < 0)
  {
    if (!*(_QWORD *)(v10 + 8))
      goto LABEL_29;
  }
  else if (!*(_BYTE *)(v10 + 23))
  {
    goto LABEL_29;
  }
  v11 = (uint64_t *)*((_QWORD *)this + 4);
  if (v11 != (uint64_t *)v10)
  {
    if (v11 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 4, v10);
    else
      std::string::operator=(*((std::string **)this + 4), (const std::string *)v10);
  }
LABEL_29:
  v12 = *((_QWORD *)a2 + 5);
  if (*(char *)(v12 + 23) < 0)
  {
    if (!*(_QWORD *)(v12 + 8))
      goto LABEL_37;
  }
  else if (!*(_BYTE *)(v12 + 23))
  {
    goto LABEL_37;
  }
  v13 = (uint64_t *)*((_QWORD *)this + 5);
  if (v13 != (uint64_t *)v12)
  {
    if (v13 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 5, v12);
    else
      std::string::operator=(*((std::string **)this + 5), (const std::string *)v12);
  }
LABEL_37:
  v14 = *((_QWORD *)a2 + 6);
  if (*(char *)(v14 + 23) < 0)
  {
    if (!*(_QWORD *)(v14 + 8))
      goto LABEL_45;
  }
  else if (!*(_BYTE *)(v14 + 23))
  {
    goto LABEL_45;
  }
  v15 = (uint64_t *)*((_QWORD *)this + 6);
  if (v15 != (uint64_t *)v14)
  {
    if (v15 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, v14);
    else
      std::string::operator=(*((std::string **)this + 6), (const std::string *)v14);
  }
LABEL_45:
  if (a2 != (const SnippetUI::TextInput *)&SnippetUI::_TextInput_default_instance_)
  {
    v16 = (int **)*((_QWORD *)a2 + 7);
    if (v16)
    {
      v17 = (int **)*((_QWORD *)this + 7);
      if (!v17)
      {
        v17 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 7) = v17;
        v16 = (int **)*((_QWORD *)a2 + 7);
      }
      if (v16)
        v18 = v16;
      else
        v18 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v17, v18);
    }
  }
  v19 = *((_DWORD *)a2 + 16);
  if (v19)
    *((_DWORD *)this + 16) = v19;
  if (*((_BYTE *)a2 + 68))
    *((_BYTE *)this + 68) = 1;
}

void sub_1BFC620EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::TextInput *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextInput>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::TextInput *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::TextInput *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x50uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::TextInput>);
    SnippetUI::TextInput::TextInput(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::TextInput *)operator new();
    SnippetUI::TextInput::TextInput(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFC62188(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C40ECD807AALL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::TextInput>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t SnippetUI::TextInput_ValidationMode_descriptor(SnippetUI *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_TextInput_2eproto);
  return file_level_enum_descriptors_TextInput_2eproto;
}

BOOL SnippetUI::TextInput_ValidationMode_IsValid(SnippetUI *this)
{
  return this < 2;
}

void SnippetUI::TextInput::InitAsDefaultInstance(SnippetUI::TextInput *this)
{
  qword_1ED1D3CD0 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
}

uint64_t SnippetUI::TextInput::_Internal::label_text(SnippetUI::TextInput::_Internal *this, const SnippetUI::TextInput *a2)
{
  return *((_QWORD *)this + 7);
}

uint64_t SnippetUI::TextInput::clear_label_text(SnippetUI::TextInput *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 7);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 7) = 0;
  return result;
}

SnippetUI::TextInput *SnippetUI::TextInput::TextInput(SnippetUI::TextInput *this, const SnippetUI::TextInput *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  SnippetUI::TextProperty *v16;
  int v17;

  *(_QWORD *)this = &off_1E793A7C0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 18) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::TextInput *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
    v9 = *(_QWORD *)(v8 + 8);
  else
    v9 = *(unsigned __int8 *)(v8 + 23);
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v9)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
  *((_QWORD *)this + 4) = &google::protobuf::internal::fixed_address_empty_string;
  v10 = *((_QWORD *)a2 + 4);
  if (*(char *)(v10 + 23) < 0)
    v11 = *(_QWORD *)(v10 + 8);
  else
    v11 = *(unsigned __int8 *)(v10 + 23);
  if ((uint64_t *)v10 != &google::protobuf::internal::fixed_address_empty_string && v11)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 4, v10);
  *((_QWORD *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  v12 = *((_QWORD *)a2 + 5);
  if (*(char *)(v12 + 23) < 0)
    v13 = *(_QWORD *)(v12 + 8);
  else
    v13 = *(unsigned __int8 *)(v12 + 23);
  if ((uint64_t *)v12 != &google::protobuf::internal::fixed_address_empty_string && v13)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 5, v12);
  *((_QWORD *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  v14 = *((_QWORD *)a2 + 6);
  if (*(char *)(v14 + 23) < 0)
    v15 = *(_QWORD *)(v14 + 8);
  else
    v15 = *(unsigned __int8 *)(v14 + 23);
  if ((uint64_t *)v14 != &google::protobuf::internal::fixed_address_empty_string && v15)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, v14);
  v16 = 0;
  if (a2 != (const SnippetUI::TextInput *)&SnippetUI::_TextInput_default_instance_ && *((_QWORD *)a2 + 7))
  {
    v16 = (SnippetUI::TextProperty *)operator new();
    SnippetUI::TextProperty::TextProperty(v16, *((const SnippetUI::TextProperty **)a2 + 7));
  }
  *((_QWORD *)this + 7) = v16;
  v17 = *((_DWORD *)a2 + 16);
  *((_BYTE *)this + 68) = *((_BYTE *)a2 + 68);
  *((_DWORD *)this + 16) = v17;
  return this;
}

void sub_1BFC62560(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x1C3B8D890](v2, 0x10A1C40BEC01B52);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::TextInput::CopyFrom(SnippetUI::TextInput *this, const SnippetUI::TextInput *a2)
{
  if (a2 != this)
  {
    SnippetUI::TextInput::Clear(this);
    SnippetUI::TextInput::MergeFrom(this, a2);
  }
}

void SnippetUI::TextInput::InternalSwap(SnippetUI::TextInput *this, SnippetUI::TextInput *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t **v26;
  uint64_t *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t **v32;
  uint64_t *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  google::protobuf::UnknownFieldSet *v38;

  v4 = (SnippetUI::TextInput *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v38;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 2);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = (uint64_t *)*((_QWORD *)this + 3);
  v14 = (uint64_t **)((char *)a2 + 24);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_19;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v13 = (uint64_t *)*((_QWORD *)this + 3);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v13[2];
  v17 = *(_OWORD *)v13;
  v18 = v15[2];
  *(_OWORD *)v13 = *(_OWORD *)v15;
  v13[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_19:
  v19 = (uint64_t *)*((_QWORD *)this + 4);
  v20 = (uint64_t **)((char *)a2 + 32);
  if (v19 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_25;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 4, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v19 = (uint64_t *)*((_QWORD *)this + 4);
  }
  v21 = *v20;
  if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 4, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v21 = *v20;
  }
  v22 = v19[2];
  v23 = *(_OWORD *)v19;
  v24 = v21[2];
  *(_OWORD *)v19 = *(_OWORD *)v21;
  v19[2] = v24;
  *(_OWORD *)v21 = v23;
  v21[2] = v22;
LABEL_25:
  v25 = (uint64_t *)*((_QWORD *)this + 5);
  v26 = (uint64_t **)((char *)a2 + 40);
  if (v25 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v26 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_31;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 5, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v25 = (uint64_t *)*((_QWORD *)this + 5);
  }
  v27 = *v26;
  if (*v26 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 5, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v27 = *v26;
  }
  v28 = v25[2];
  v29 = *(_OWORD *)v25;
  v30 = v27[2];
  *(_OWORD *)v25 = *(_OWORD *)v27;
  v25[2] = v30;
  *(_OWORD *)v27 = v29;
  v27[2] = v28;
LABEL_31:
  v31 = (uint64_t *)*((_QWORD *)this + 6);
  v32 = (uint64_t **)((char *)a2 + 48);
  if (v31 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v32 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_37;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 6, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v31 = (uint64_t *)*((_QWORD *)this + 6);
  }
  v33 = *v32;
  if (*v32 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 6, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v33 = *v32;
  }
  v34 = v31[2];
  v35 = *(_OWORD *)v31;
  v36 = v33[2];
  *(_OWORD *)v31 = *(_OWORD *)v33;
  v31[2] = v36;
  *(_OWORD *)v33 = v35;
  v33[2] = v34;
LABEL_37:
  v37 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v37;
  LODWORD(v37) = *((_DWORD *)this + 16);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v37;
  LOBYTE(v37) = *((_BYTE *)this + 68);
  *((_BYTE *)this + 68) = *((_BYTE *)a2 + 68);
  *((_BYTE *)a2 + 68) = v37;
}

uint64_t siri::dialogengine::XmlCharDeleter::operator()(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(uint64_t))*MEMORY[0x1E0DE8D30])(a2);
}

_QWORD *siri::dialogengine::XmlCharToString@<X0>(siri::dialogengine *this@<X0>, _QWORD *a2@<X8>)
{
  char *v3;

  if (this)
    v3 = (char *)this;
  else
    v3 = "";
  return std::string::basic_string[abi:ne180100]<0>(a2, v3);
}

_QWORD *siri::dialogengine::EncodeXmlString@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const xmlChar *v3;
  char *v4;
  char *v5;
  xmlDoc v7;

  if (*(char *)(a1 + 23) >= 0)
    v3 = (const xmlChar *)a1;
  else
    v3 = *(const xmlChar **)a1;
  v4 = (char *)xmlEncodeSpecialChars(&v7, v3);
  if (!v4)
    return std::string::basic_string[abi:ne180100]<0>(a2, "");
  v5 = v4;
  std::string::basic_string[abi:ne180100]<0>(a2, v4);
  return (_QWORD *)((uint64_t (*)(char *))*MEMORY[0x1E0DE8D30])(v5);
}

void sub_1BFC62988(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::ReadNextNode@<X0>(siri::dialogengine *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5;
  const xmlChar *v6;
  char *v7;
  int v8;
  uint64_t result;
  BOOL v10;
  __int128 v11;
  uint64_t v12;
  void *__p[2];
  char v14;

  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v5 = a2 + 8;
  *(_QWORD *)(a2 + 24) = 0;
  *(_DWORD *)a2 = xmlTextReaderRead(this);
  v6 = xmlTextReaderConstName(this);
  if (v6)
    v7 = (char *)v6;
  else
    v7 = "";
  std::string::basic_string[abi:ne180100]<0>(__p, v7);
  siri::dialogengine::StringToLower((uint64_t)__p, (uint64_t)&v11);
  if (v14 < 0)
    operator delete(__p[0]);
  *(_OWORD *)v5 = v11;
  *(_QWORD *)(v5 + 16) = v12;
  v8 = xmlTextReaderNodeType(this);
  *(_DWORD *)(a2 + 32) = v8;
  result = (uint64_t)xmlTextReaderCurrentNode(this);
  if (result)
    result = xmlGetLineNo((const xmlNode *)result);
  *(_QWORD *)(a2 + 40) = result;
  *(_BYTE *)(a2 + 48) = v8 == 1;
  if (v8 == 15)
  {
    v10 = 1;
  }
  else
  {
    result = xmlTextReaderIsEmptyElement(this);
    v10 = (_DWORD)result != 0;
  }
  *(_BYTE *)(a2 + 49) = v10;
  return result;
}

void sub_1BFC62A88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;
  void **v18;

  if (a17 < 0)
    operator delete(__p);
  if (*(char *)(v17 + 31) < 0)
    operator delete(*v18);
  _Unwind_Resume(exception_object);
}

_QWORD *siri::dialogengine::GetXmlAttr@<X0>(xmlTextReader *a1@<X0>, const xmlChar *a2@<X1>, _QWORD *a3@<X8>)
{
  xmlChar *Attribute;
  xmlChar *v5;
  char *v6;
  _QWORD *result;

  if ((char)a2[23] < 0)
    a2 = *(const xmlChar **)a2;
  Attribute = xmlTextReaderGetAttribute(a1, a2);
  v5 = Attribute;
  if (Attribute)
    v6 = (char *)Attribute;
  else
    v6 = "";
  result = std::string::basic_string[abi:ne180100]<0>(a3, v6);
  if (v5)
    return (_QWORD *)((uint64_t (*)(xmlChar *))*MEMORY[0x1E0DE8D30])(v5);
  return result;
}

void sub_1BFC62B28(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    ((void (*)(uint64_t))*MEMORY[0x1E0DE8D30])(v1);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::GetXmlAttrs@<X0>(siri::dialogengine *this@<X0>, uint64_t a2@<X8>)
{
  const xmlChar *v5;
  char *v6;
  const xmlChar *v7;
  char *v8;
  _OWORD *v9;
  int Attribute;
  void *__p[2];
  char v13;
  std::string __str;
  void *v15[2];
  char v16;
  void **v17;

  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = a2 + 8;
  if (xmlTextReaderMoveToFirstAttribute(this) == 1)
  {
    do
    {
      v5 = xmlTextReaderConstName(this);
      if (v5)
        v6 = (char *)v5;
      else
        v6 = "";
      std::string::basic_string[abi:ne180100]<0>(v15, v6);
      v7 = xmlTextReaderConstValue(this);
      if (v7)
        v8 = (char *)v7;
      else
        v8 = "";
      std::string::basic_string[abi:ne180100]<0>(&__str, v8);
      siri::dialogengine::StringToLower((uint64_t)v15, (uint64_t)__p);
      v17 = __p;
      v9 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, (const void **)__p, (_OWORD **)&v17);
      std::string::operator=((std::string *)((char *)v9 + 56), &__str);
      if (v13 < 0)
        operator delete(__p[0]);
      Attribute = xmlTextReaderMoveToNextAttribute(this);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (v16 < 0)
        operator delete(v15[0]);
    }
    while (Attribute == 1);
  }
  return xmlTextReaderMoveToAttributeNo(this, 1);
}

void sub_1BFC62C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  _QWORD **v26;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*v26);
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::GetOuterXml@<X0>(siri::dialogengine *this@<X0>, _QWORD *a2@<X8>)
{
  xmlChar *OuterXml;
  xmlChar *v5;
  char *v6;
  _QWORD *result;

  OuterXml = xmlTextReaderReadOuterXml(this);
  v5 = OuterXml;
  if (OuterXml)
    v6 = (char *)OuterXml;
  else
    v6 = "";
  result = std::string::basic_string[abi:ne180100]<0>(a2, v6);
  if (v5)
    return (_QWORD *)((uint64_t (*)(xmlChar *))*MEMORY[0x1E0DE8D30])(v5);
  return result;
}

void sub_1BFC62D18(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    ((void (*)(uint64_t))*MEMORY[0x1E0DE8D30])(v1);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetXmlLineString(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v3;
  __int128 v4;
  std::string *v5;
  std::string v6;
  std::string v7;

  std::to_string(&v6, *(_QWORD *)(a1 + 40));
  v3 = std::string::insert(&v6, 0, "(Line ");
  v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  v7.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v7.__r_.__value_.__l.__data_ = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  v5 = std::string::append(&v7, ")");
  *a2 = *v5;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
}

void sub_1BFC62DE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::StartXmlDocument(siri::dialogengine *this, _xmlTextWriter *a2)
{
  const char *v2;
  int started;

  started = xmlTextWriterStartDocument(this, "1.0", "UTF-8", "no");
  if (started == -1)
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Error while Starting Document", v2);
  return started != -1;
}

BOOL siri::dialogengine::EndXmlDocument(siri::dialogengine *this, _xmlTextWriter *a2)
{
  const char *v2;
  int v3;

  v3 = xmlTextWriterEndDocument(this);
  if (v3 == -1)
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Error while Ending Document.", v2);
  return v3 != -1;
}

BOOL siri::dialogengine::StartXmlElement(siri::dialogengine *this, const xmlChar *a2, const char *a3)
{
  int started;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  std::string v10;
  std::string v11;
  __int128 v12;
  std::string::size_type v13;

  started = xmlTextWriterStartElement(this, a2);
  if (started == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v10, "Error starting '");
    v5 = std::string::append(&v10, (const std::string::value_type *)a2);
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v11.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    v7 = std::string::append(&v11, "' element.");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v13 = v7->__r_.__value_.__r.__words[2];
    v12 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)&v12, 3u);
    if (SHIBYTE(v13) < 0)
      operator delete((void *)v12);
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v11.__r_.__value_.__l.__data_);
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v10.__r_.__value_.__l.__data_);
  }
  return started != -1;
}

void sub_1BFC62F7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 - 25) < 0)
    operator delete(*(void **)(v21 - 48));
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::EndXmlElement(siri::dialogengine *this, _xmlTextWriter *a2)
{
  int v2;
  const char *v3;
  int v4;

  if ((_DWORD)a2)
    v2 = xmlTextWriterFullEndElement(this);
  else
    v2 = xmlTextWriterEndElement(this);
  v4 = v2;
  if (v2 == -1)
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Error ending element.", v3);
  return v4 != -1;
}

BOOL siri::dialogengine::WriteXmlAttribute(siri::dialogengine *this, const xmlChar *a2, const xmlChar *a3, const char *a4)
{
  int v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  std::string v11;
  std::string v12;
  __int128 v13;
  std::string::size_type v14;

  v5 = xmlTextWriterWriteAttribute(this, a2, a3);
  if (v5 == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v11, "Error writing '");
    v6 = std::string::append(&v11, (const std::string::value_type *)a2);
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v12.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    v8 = std::string::append(&v12, "' attribute.");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v14 = v8->__r_.__value_.__r.__words[2];
    v13 = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)&v13, 3u);
    if (SHIBYTE(v14) < 0)
      operator delete((void *)v13);
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v11.__r_.__value_.__l.__data_);
  }
  return v5 != -1;
}

void sub_1BFC630E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 - 25) < 0)
    operator delete(*(void **)(v21 - 48));
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::WriteXmlImpliedAttribute(siri::dialogengine *this, const xmlChar *a2, const xmlChar *a3, const char *a4)
{
  return !*a3 || siri::dialogengine::WriteXmlAttribute(this, a2, a3, a4);
}

BOOL siri::dialogengine::WriteXmlRawString(siri::dialogengine *this, const xmlChar *a2, const char *a3)
{
  return xmlTextWriterWriteRaw(this, a2) != -1;
}

void InitDefaultsscc_info_Sash_Standard_Sash_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Sash.pb.cc", a4);
  SnippetUI::Sash_Standard::Sash_Standard((SnippetUI::Sash_Standard *)&SnippetUI::_Sash_Standard_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Sash_Standard_default_instance_, v4);
  qword_1ED1D3E50 = (uint64_t)&SnippetUI::_Sash_Standard_SashTitle_default_instance_;
  unk_1ED1D3E58 = &SnippetUI::_VisualProperty_default_instance_;
  qword_1ED1D3E60 = (uint64_t)&SnippetUI::_VisualProperty_default_instance_;
  unk_1ED1D3E68 = &SnippetUI::_VisualProperty_default_instance_;
  qword_1ED1D3E70 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
}

void InitDefaultsscc_info_Sash_Standard_SashTitle_Sash_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Sash.pb.cc", a4);
  SnippetUI::Sash_Standard_SashTitle::Sash_Standard_SashTitle((SnippetUI::Sash_Standard_SashTitle *)&SnippetUI::_Sash_Standard_SashTitle_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_Sash_Standard_SashTitle_default_instance_, v4);
  qword_1ED1D4890 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  unk_1ED1D4898 = &google::protobuf::internal::fixed_address_empty_string;
}

SnippetUI::Sash_Standard_SashTitle *SnippetUI::Sash_Standard_SashTitle::Sash_Standard_SashTitle(SnippetUI::Sash_Standard_SashTitle *this)
{
  *(_QWORD *)this = &off_1E793A9B8;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  if (atomic_load(scc_info_Sash_Standard_SashTitle_Sash_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Sash_Standard_SashTitle_Sash_2eproto);
  *((_DWORD *)this + 7) = 0;
  return this;
}

void sub_1BFC63294(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Sash_Standard_SashTitle::~Sash_Standard_SashTitle(SnippetUI::Sash_Standard_SashTitle *this)
{
  SnippetUI::Sash_Standard_SashTitle::~Sash_Standard_SashTitle(this);
  JUMPOUT(0x1C3B8D890);
}

{
  *(_QWORD *)this = &off_1E793A9B8;
  if (*((_DWORD *)this + 7))
    SnippetUI::Sash_Standard_SashTitle::clear_value((uint64_t)this);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::Sash_Standard_SashTitle *SnippetUI::Sash_Standard_SashTitle::New(SnippetUI::Sash_Standard_SashTitle *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Sash_Standard_SashTitle>(0);
}

SnippetUI::Sash_Standard_SashTitle *SnippetUI::Sash_Standard_SashTitle::New(SnippetUI::Sash_Standard_SashTitle *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Sash_Standard_SashTitle>(a2);
}

void SnippetUI::Sash_Standard_SashTitle::Clear(SnippetUI::Sash_Standard_SashTitle *this)
{
  google::protobuf::internal::InternalMetadataWithArena *v2;
  char v3;

  SnippetUI::Sash_Standard_SashTitle::clear_value((uint64_t)this);
  v3 = *((_BYTE *)this + 8);
  v2 = (SnippetUI::Sash_Standard_SashTitle *)((char *)this + 8);
  if ((v3 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v2);
}

uint64_t SnippetUI::Sash_Standard_SashTitle::IsInitialized(SnippetUI::Sash_Standard_SashTitle *this)
{
  return 1;
}

char *SnippetUI::Sash_Standard_SashTitle::ByteSizeLong(SnippetUI::Sash_Standard_SashTitle *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const google::protobuf::UnknownFieldSet *v5;

  v1 = *((_DWORD *)this + 7);
  if (v1 == 2 || v1 == 1)
  {
    v2 = *((_QWORD *)this + 2);
    v3 = *(unsigned __int8 *)(v2 + 23);
    v4 = *(_QWORD *)(v2 + 8);
    if ((v3 & 0x80u) == 0)
      v4 = v3;
    v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
  }
  else
  {
    v5 = 0;
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::Sash_Standard_SashTitle *)((char *)this + 8), v5, (_DWORD *)this + 6);
  *((_DWORD *)this + 6) = (_DWORD)v5;
  return (char *)v5;
}

uint64_t SnippetUI::Sash_Standard_SashTitle::GetCachedSize(SnippetUI::Sash_Standard_SashTitle *this)
{
  return *((unsigned int *)this + 6);
}

google::protobuf::internal *SnippetUI::Sash_Standard_SashTitle::_InternalParse(SnippetUI::Sash_Standard_SashTitle *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  uint64_t *v6;
  google::protobuf::internal::ParseContext *v7;
  google::protobuf::internal *TagFallback;
  char *v9;
  char *v12;
  std::string *v13;
  std::string::value_type *v14;
  google::protobuf::internal::ParseContext *v15;
  char *v16;
  google::protobuf::internal *v18;

  v18 = a2;
  v5 = (std::string **)((char *)this + 16);
  v6 = (uint64_t *)((char *)this + 8);
  while (1)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v18, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v18;
    TagFallback = (google::protobuf::internal *)((char *)v18 + 1);
    v9 = (char *)*(unsigned __int8 *)v18;
    if ((*(char *)v18 & 0x80000000) == 0)
      goto LABEL_6;
    v9 = (char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v18 + 2);
LABEL_6:
      v18 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v18, v9);
    v18 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    if (v9 >> 3 == 2)
    {
      if (v9 != 18)
        goto LABEL_12;
      if (*((_DWORD *)this + 7) == 2)
      {
        v13 = *v5;
        if (*v5 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
LABEL_26:
          v14 = (std::string::value_type *)TagFallback;
          v15 = a3;
          v16 = "SnippetUI.Sash_Standard.SashTitle.text";
          goto LABEL_30;
        }
      }
      else
      {
        SnippetUI::Sash_Standard_SashTitle::clear_value((uint64_t)this);
        *((_DWORD *)this + 7) = 2;
        *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
      }
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
      v13 = *v5;
      TagFallback = v18;
      goto LABEL_26;
    }
    if (v9 >> 3 == 1 && v9 == 10)
    {
      if (*((_DWORD *)this + 7) != 1)
      {
        SnippetUI::Sash_Standard_SashTitle::clear_value((uint64_t)this);
        *((_DWORD *)this + 7) = 1;
        *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
        goto LABEL_28;
      }
      v13 = *v5;
      if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
LABEL_28:
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v13 = *v5;
        TagFallback = v18;
      }
      v14 = (std::string::value_type *)TagFallback;
      v15 = a3;
      v16 = "SnippetUI.Sash_Standard.SashTitle.application_bundle_identifier";
LABEL_30:
      v12 = google::protobuf::internal::InlineGreedyStringParserUTF8(v13, v14, (uint64_t)v15, (google::protobuf::internal *)v16);
      goto LABEL_31;
    }
LABEL_12:
    if (!(_DWORD)v9 || (v9 & 7) == 4)
      break;
    v12 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v9, v6, TagFallback, a3, v7);
LABEL_31:
    v18 = (google::protobuf::internal *)v12;
    if (!v12)
      return 0;
  }
  *((_DWORD *)a3 + 20) = (_DWORD)v9 - 1;
  return TagFallback;
}

const google::protobuf::UnknownFieldSet *SnippetUI::Sash_Standard_SashTitle::InternalSerializeWithCachedSizesToArray(SnippetUI::Sash_Standard_SashTitle *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v7;
  unsigned __int8 *v8;
  const char *v9;
  uint64_t *v10;
  unsigned __int8 *v11;
  const char *v12;
  uint64_t *v13;
  uint64_t v14;

  v7 = *((_DWORD *)this + 7);
  if (v7 == 1)
  {
    v8 = (unsigned __int8 *)*((_QWORD *)this + 2);
    if ((char)v8[23] < 0)
    {
      v8 = *(unsigned __int8 **)v8;
      v9 = *(const char **)(*((_QWORD *)this + 2) + 8);
    }
    else
    {
      v9 = (const char *)v8[23];
    }
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((google::protobuf::internal *)v8, v9, 1, (google::protobuf::internal *)"SnippetUI.Sash_Standard.SashTitle.application_bundle_identifier");
    if (*((_DWORD *)this + 7) == 1)
      v10 = (uint64_t *)*((_QWORD *)this + 2);
    else
      v10 = &google::protobuf::internal::fixed_address_empty_string;
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, (uint64_t)v10, (char *)a2);
    v7 = *((_DWORD *)this + 7);
  }
  if (v7 == 2)
  {
    v11 = (unsigned __int8 *)*((_QWORD *)this + 2);
    if ((char)v11[23] < 0)
    {
      v11 = *(unsigned __int8 **)v11;
      v12 = *(const char **)(*((_QWORD *)this + 2) + 8);
    }
    else
    {
      v12 = (const char *)v11[23];
    }
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((google::protobuf::internal *)v11, v12, 1, (google::protobuf::internal *)"SnippetUI.Sash_Standard.SashTitle.text");
    if (*((_DWORD *)this + 7) == 2)
      v13 = (uint64_t *)*((_QWORD *)this + 2);
    else
      v13 = &google::protobuf::internal::fixed_address_empty_string;
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, (uint64_t)v13, (char *)a2);
  }
  v14 = *((_QWORD *)this + 1);
  if ((v14 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v14 & 0xFFFFFFFFFFFFFFFELL), a2, a3, a4);
  else
    return a2;
}

void SnippetUI::Sash_Standard_SashTitle::CopyFrom(SnippetUI::Sash_Standard_SashTitle *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::Sash_Standard_SashTitle::Clear(this);
    SnippetUI::Sash_Standard_SashTitle::MergeFrom(this, a2);
  }
}

void SnippetUI::Sash_Standard_SashTitle::MergeFrom(SnippetUI::Sash_Standard_SashTitle *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::Sash_Standard_SashTitle *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Sash.pb.cc", 339);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::Sash_Standard_SashTitle::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BFC63780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Sash_Standard_SashTitle::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 24) = a2;
  return this;
}

uint64_t SnippetUI::Sash_Standard_SashTitle::GetMetadata(SnippetUI::Sash_Standard_SashTitle *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_Sash_2eproto);
  return file_level_metadata_Sash_2eproto;
}

void *SnippetUI::Sash_Standard_SashTitle::default_instance(SnippetUI::Sash_Standard_SashTitle *this)
{
  if (atomic_load(scc_info_Sash_Standard_SashTitle_Sash_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Sash_Standard_SashTitle_Sash_2eproto);
  return &SnippetUI::_Sash_Standard_SashTitle_default_instance_;
}

void SnippetUI::Sash_Standard_SashTitle::MergeFrom(SnippetUI::Sash_Standard_SashTitle *this, const SnippetUI::Sash_Standard_SashTitle *a2)
{
  std::string *v4;
  uint64_t v5;
  int v6;
  const std::string *v7;
  int v8;
  std::string *v9;
  char v10;
  std::string v11[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Sash.pb.cc", 354);
    v4 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Sash_Standard_SashTitle *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_DWORD *)a2 + 7);
  if (v6 == 1)
  {
    v7 = (const std::string *)*((_QWORD *)a2 + 2);
    if (*((_DWORD *)this + 7) != 1)
    {
      SnippetUI::Sash_Standard_SashTitle::clear_value((uint64_t)this);
      v8 = 1;
      goto LABEL_13;
    }
  }
  else
  {
    if (v6 != 2)
      return;
    v7 = (const std::string *)*((_QWORD *)a2 + 2);
    if (*((_DWORD *)this + 7) != 2)
    {
      SnippetUI::Sash_Standard_SashTitle::clear_value((uint64_t)this);
      v8 = 2;
LABEL_13:
      *((_DWORD *)this + 7) = v8;
      *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
      goto LABEL_14;
    }
  }
  v9 = (std::string *)*((_QWORD *)this + 2);
  if (v9 != (std::string *)&google::protobuf::internal::fixed_address_empty_string)
  {
    std::string::operator=(v9, v7);
    return;
  }
LABEL_14:
  google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, (uint64_t)v7);
}

void sub_1BFC6390C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Sash_Standard_SashTitle::clear_value(uint64_t this)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  v1 = this;
  v2 = *(_DWORD *)(this + 28);
  if (v2 == 2 || v2 == 1)
  {
    v3 = *(_QWORD *)(this + 16);
    if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string && v3 != 0)
    {
      if (*(char *)(v3 + 23) < 0)
        operator delete(*(void **)v3);
      this = MEMORY[0x1C3B8D890](v3, 0x1012C40EC159624);
    }
  }
  *(_DWORD *)(v1 + 28) = 0;
  return this;
}

SnippetUI::Sash_Standard_SashTitle *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Sash_Standard_SashTitle>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::Sash_Standard_SashTitle *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::Sash_Standard_SashTitle *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x20uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Sash_Standard_SashTitle>);
    SnippetUI::Sash_Standard_SashTitle::Sash_Standard_SashTitle(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::Sash_Standard_SashTitle *)operator new();
    SnippetUI::Sash_Standard_SashTitle::Sash_Standard_SashTitle(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFC63A1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Sash_Standard_SashTitle>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

SnippetUI::Sash_Standard *SnippetUI::Sash_Standard::Sash_Standard(SnippetUI::Sash_Standard *this)
{
  *(_QWORD *)this = &off_1E793AA78;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 17) = 0;
  if (atomic_load(scc_info_Sash_Standard_Sash_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Sash_Standard_Sash_2eproto);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 49) = 0u;
  return this;
}

void sub_1BFC63B04(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Sash_Standard::~Sash_Standard(SnippetUI::Sash_Standard *this)
{
  SnippetUI::Sash_Standard::~Sash_Standard(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)this = &off_1E793AA78;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::Sash_Standard *)&SnippetUI::_Sash_Standard_default_instance_)
  {
    v4 = *((_QWORD *)this + 3);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = *((_QWORD *)this + 4);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = *((_QWORD *)this + 5);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = *((_QWORD *)this + 6);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = *((_QWORD *)this + 7);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::Sash_Standard *SnippetUI::Sash_Standard::New(SnippetUI::Sash_Standard *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Sash_Standard>(0);
}

SnippetUI::Sash_Standard *SnippetUI::Sash_Standard::New(SnippetUI::Sash_Standard *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Sash_Standard>(a2);
}

void SnippetUI::Sash_Standard::Clear(SnippetUI::Sash_Standard *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;

  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 3);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 3) = 0;
  v4 = *((_QWORD *)this + 4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 4) = 0;
  v5 = *((_QWORD *)this + 5);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *((_QWORD *)this + 5) = 0;
  v6 = *((_QWORD *)this + 6);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *((_QWORD *)this + 6) = 0;
  v7 = *((_QWORD *)this + 7);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v9 = *((_BYTE *)this + 8);
  v8 = (char *)this + 8;
  *((_QWORD *)v8 + 6) = 0;
  v8[56] = 0;
  if ((v9 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear((google::protobuf::internal::InternalMetadataWithArena *)v8);
}

uint64_t SnippetUI::Sash_Standard::IsInitialized(SnippetUI::Sash_Standard *this)
{
  return 1;
}

char *SnippetUI::Sash_Standard::ByteSizeLong(SnippetUI::Sash_Standard *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  SnippetUI::Sash_Standard_SashTitle *v6;
  char *v7;
  SnippetUI::VisualProperty *v8;
  char *v9;
  SnippetUI::VisualProperty *v10;
  char *v11;
  SnippetUI::VisualProperty *v12;
  char *v13;
  SnippetUI::ActionProperty *v14;
  char *v15;
  const google::protobuf::UnknownFieldSet *v16;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  if (this != (SnippetUI::Sash_Standard *)&SnippetUI::_Sash_Standard_default_instance_)
  {
    v6 = (SnippetUI::Sash_Standard_SashTitle *)*((_QWORD *)this + 3);
    if (v6)
    {
      v7 = SnippetUI::Sash_Standard_SashTitle::ByteSizeLong(v6);
      v5 += (uint64_t)&v7[((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1];
    }
    v8 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 4);
    if (v8)
    {
      v9 = SnippetUI::VisualProperty::ByteSizeLong(v8);
      v5 += (uint64_t)&v9[((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1];
    }
    v10 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 5);
    if (v10)
    {
      v11 = SnippetUI::VisualProperty::ByteSizeLong(v10);
      v5 += (uint64_t)&v11[((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1];
    }
    v12 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 6);
    if (v12)
    {
      v13 = SnippetUI::VisualProperty::ByteSizeLong(v12);
      v5 += (uint64_t)&v13[((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1];
    }
    v14 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 7);
    if (v14)
    {
      v15 = SnippetUI::ActionProperty::ByteSizeLong(v14);
      v5 += (uint64_t)&v15[((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6) + 1];
    }
  }
  if (*((_BYTE *)this + 64))
    v16 = (const google::protobuf::UnknownFieldSet *)(v5 + 2);
  else
    v16 = (const google::protobuf::UnknownFieldSet *)v5;
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::Sash_Standard *)((char *)this + 8), v16, (_DWORD *)this + 17);
  *((_DWORD *)this + 17) = (_DWORD)v16;
  return (char *)v16;
}

uint64_t SnippetUI::Sash_Standard::GetCachedSize(SnippetUI::Sash_Standard *this)
{
  return *((unsigned int *)this + 17);
}

google::protobuf::internal *SnippetUI::Sash_Standard::_InternalParse(SnippetUI::Sash_Standard *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  uint64_t *v6;
  google::protobuf::internal::ParseContext *v7;
  google::protobuf::internal *TagFallback;
  char *v9;
  SnippetUI::Sash_Standard_SashTitle *v10;
  unsigned int v11;
  char *v12;
  SnippetUI::VisualProperty *v13;
  char *v14;
  SnippetUI::ActionProperty *v15;
  std::string *v16;
  google::protobuf::internal *v17;
  unint64_t v18;
  int v19;
  BOOL v20;
  char *SizeFallback;
  unsigned int v22;
  int v23;
  int v24;
  BOOL v25;
  int v26;
  google::protobuf::internal *v27;
  int v28;
  google::protobuf::internal *v29;
  uint64_t v30;
  google::protobuf::internal *v32;

  v32 = a2;
  v5 = (std::string **)((char *)this + 16);
  v6 = (uint64_t *)((char *)this + 8);
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v32, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v32;
    TagFallback = (google::protobuf::internal *)((char *)v32 + 1);
    v9 = (char *)*(unsigned __int8 *)v32;
    if ((*(char *)v32 & 0x80000000) == 0)
      goto LABEL_6;
    v9 = (char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v32 + 2);
LABEL_6:
      v32 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v32, v9);
    v32 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    switch(v9 >> 3)
    {
      case 1u:
        if (v9 != 10)
          goto LABEL_39;
        v10 = (SnippetUI::Sash_Standard_SashTitle *)*((_QWORD *)this + 3);
        if (!v10)
        {
          v10 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Sash_Standard_SashTitle>(0);
          *((_QWORD *)this + 3) = v10;
          TagFallback = v32;
        }
        v11 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          SizeFallback = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!SizeFallback)
            goto LABEL_53;
          v12 = SizeFallback;
          v11 = v22;
        }
        else
        {
          v12 = (char *)TagFallback + 1;
        }
        v23 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v12, v11);
        v24 = *((_DWORD *)a3 + 22);
        v25 = __OFSUB__(v24--, 1);
        *((_DWORD *)a3 + 22) = v24;
        if (v24 < 0 != v25)
          goto LABEL_53;
        v26 = v23;
        v27 = SnippetUI::Sash_Standard_SashTitle::_InternalParse(v10, (google::protobuf::internal *)v12, a3);
        if (!v27)
          goto LABEL_53;
        ++*((_DWORD *)a3 + 22);
        if (*((_DWORD *)a3 + 20))
          goto LABEL_53;
        v28 = *((_DWORD *)a3 + 7) + v26;
        *((_DWORD *)a3 + 7) = v28;
        *(_QWORD *)a3 = *((_QWORD *)a3 + 1) + (v28 & (v28 >> 31));
        v32 = v27;
        continue;
      case 2u:
        if (v9 != 18)
          goto LABEL_39;
        v13 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 4);
        if (v13)
          goto LABEL_25;
        v13 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((_QWORD *)this + 4) = v13;
        goto LABEL_24;
      case 3u:
        if (v9 != 26)
          goto LABEL_39;
        v13 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 5);
        if (v13)
          goto LABEL_25;
        v13 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((_QWORD *)this + 5) = v13;
        goto LABEL_24;
      case 4u:
        if (v9 != 34)
          goto LABEL_39;
        v13 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 6);
        if (v13)
          goto LABEL_25;
        v13 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((_QWORD *)this + 6) = v13;
LABEL_24:
        TagFallback = v32;
LABEL_25:
        v14 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::VisualProperty>(a3, v13, TagFallback);
        goto LABEL_44;
      case 5u:
        if (v9 != 42)
          goto LABEL_39;
        v15 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 7);
        if (!v15)
        {
          v15 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((_QWORD *)this + 7) = v15;
          TagFallback = v32;
        }
        v14 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v15, TagFallback);
        goto LABEL_44;
      case 6u:
        if (v9 != 50)
          goto LABEL_39;
        v16 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v16 = *v5;
          TagFallback = v32;
        }
        v14 = google::protobuf::internal::InlineGreedyStringParserUTF8(v16, (std::string::value_type *)TagFallback, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.Sash_Standard.component_name");
        goto LABEL_44;
      case 7u:
        if (v9 != 56)
          goto LABEL_39;
        v17 = (google::protobuf::internal *)((char *)TagFallback + 1);
        v18 = *(unsigned __int8 *)TagFallback;
        if ((*(char *)TagFallback & 0x80000000) == 0)
          goto LABEL_38;
        v19 = *(char *)v17;
        v18 = v18 + (v19 << 7) - 128;
        if (v19 < 0)
        {
          v29 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v18);
          v32 = v29;
          *((_BYTE *)this + 64) = v30 != 0;
          if (!v29)
            goto LABEL_53;
        }
        else
        {
          v17 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_38:
          v32 = v17;
          *((_BYTE *)this + 64) = v18 != 0;
        }
        continue;
      default:
LABEL_39:
        if ((_DWORD)v9)
          v20 = (v9 & 7) == 4;
        else
          v20 = 1;
        if (v20)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v9 - 1;
          return TagFallback;
        }
        v14 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v9, v6, TagFallback, a3, v7);
LABEL_44:
        v32 = (google::protobuf::internal *)v14;
        if (v14)
          continue;
LABEL_53:
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::Sash_Standard::InternalSerializeWithCachedSizesToArray(SnippetUI::Sash_Standard *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  SnippetUI::Sash_Standard_SashTitle *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  google::protobuf::UnknownFieldSet *v11;
  _BYTE *v12;
  _BYTE *v13;
  unsigned int v14;
  unsigned int v15;
  SnippetUI::VisualProperty *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  google::protobuf::UnknownFieldSet *v20;
  _BYTE *v21;
  _BYTE *v22;
  unsigned int v23;
  unsigned int v24;
  SnippetUI::VisualProperty *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  google::protobuf::UnknownFieldSet *v29;
  _BYTE *v30;
  _BYTE *v31;
  unsigned int v32;
  unsigned int v33;
  SnippetUI::VisualProperty *v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  google::protobuf::UnknownFieldSet *v38;
  _BYTE *v39;
  _BYTE *v40;
  unsigned int v41;
  unsigned int v42;
  SnippetUI::ActionProperty *v43;
  unsigned int v44;
  google::protobuf::UnknownFieldSet *v45;
  unsigned int v46;
  _BYTE *v47;
  _BYTE *v48;
  unsigned int v49;
  unsigned int v50;
  google::protobuf::internal *v51;
  const char *v52;
  char v53;
  uint64_t v54;

  v5 = (char *)a2;
  if (this == (SnippetUI::Sash_Standard *)&SnippetUI::_Sash_Standard_default_instance_)
    goto LABEL_61;
  v7 = (SnippetUI::Sash_Standard_SashTitle *)*((_QWORD *)this + 3);
  if (v7)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v7 = (SnippetUI::Sash_Standard_SashTitle *)*((_QWORD *)this + 3);
    }
    *v5 = 10;
    v8 = *((_DWORD *)v7 + 6);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v12 = v5 + 2;
        do
        {
          v13 = v12;
          *v12++ = v10 | 0x80;
          v14 = v10 >> 7;
          v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        v11 = (google::protobuf::UnknownFieldSet *)(v13 + 2);
        *v12 = v14;
        goto LABEL_13;
      }
      v5[2] = v10;
      v9 = 3;
    }
    else
    {
      v5[1] = v8;
      v9 = 2;
    }
    v11 = (google::protobuf::UnknownFieldSet *)&v5[v9];
LABEL_13:
    v5 = (char *)SnippetUI::Sash_Standard_SashTitle::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  v16 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 4);
  if (!v16)
    goto LABEL_26;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v16 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 4);
  }
  *v5 = 18;
  v17 = *((_DWORD *)v16 + 15);
  if (v17 > 0x7F)
  {
    v5[1] = v17 | 0x80;
    v19 = v17 >> 7;
    if (v17 >> 14)
    {
      v21 = v5 + 2;
      do
      {
        v22 = v21;
        *v21++ = v19 | 0x80;
        v23 = v19 >> 7;
        v24 = v19 >> 14;
        v19 >>= 7;
      }
      while (v24);
      v20 = (google::protobuf::UnknownFieldSet *)(v22 + 2);
      *v21 = v23;
      goto LABEL_25;
    }
    v5[2] = v19;
    v18 = 3;
  }
  else
  {
    v5[1] = v17;
    v18 = 2;
  }
  v20 = (google::protobuf::UnknownFieldSet *)&v5[v18];
LABEL_25:
  v5 = (char *)SnippetUI::VisualProperty::InternalSerializeWithCachedSizesToArray(v16, v20, a3, a4);
LABEL_26:
  v25 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 5);
  if (!v25)
    goto LABEL_38;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v25 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 5);
  }
  *v5 = 26;
  v26 = *((_DWORD *)v25 + 15);
  if (v26 > 0x7F)
  {
    v5[1] = v26 | 0x80;
    v28 = v26 >> 7;
    if (v26 >> 14)
    {
      v30 = v5 + 2;
      do
      {
        v31 = v30;
        *v30++ = v28 | 0x80;
        v32 = v28 >> 7;
        v33 = v28 >> 14;
        v28 >>= 7;
      }
      while (v33);
      v29 = (google::protobuf::UnknownFieldSet *)(v31 + 2);
      *v30 = v32;
      goto LABEL_37;
    }
    v5[2] = v28;
    v27 = 3;
  }
  else
  {
    v5[1] = v26;
    v27 = 2;
  }
  v29 = (google::protobuf::UnknownFieldSet *)&v5[v27];
LABEL_37:
  v5 = (char *)SnippetUI::VisualProperty::InternalSerializeWithCachedSizesToArray(v25, v29, a3, a4);
LABEL_38:
  v34 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 6);
  if (!v34)
    goto LABEL_50;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v34 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 6);
  }
  *v5 = 34;
  v35 = *((_DWORD *)v34 + 15);
  if (v35 > 0x7F)
  {
    v5[1] = v35 | 0x80;
    v37 = v35 >> 7;
    if (v35 >> 14)
    {
      v39 = v5 + 2;
      do
      {
        v40 = v39;
        *v39++ = v37 | 0x80;
        v41 = v37 >> 7;
        v42 = v37 >> 14;
        v37 >>= 7;
      }
      while (v42);
      v38 = (google::protobuf::UnknownFieldSet *)(v40 + 2);
      *v39 = v41;
      goto LABEL_49;
    }
    v5[2] = v37;
    v36 = 3;
  }
  else
  {
    v5[1] = v35;
    v36 = 2;
  }
  v38 = (google::protobuf::UnknownFieldSet *)&v5[v36];
LABEL_49:
  v5 = (char *)SnippetUI::VisualProperty::InternalSerializeWithCachedSizesToArray(v34, v38, a3, a4);
LABEL_50:
  v43 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 7);
  if (v43)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v43 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 7);
    }
    *v5 = 42;
    v44 = *((_DWORD *)v43 + 12);
    if (v44 > 0x7F)
    {
      v5[1] = v44 | 0x80;
      v46 = v44 >> 7;
      if (v44 >> 14)
      {
        v47 = v5 + 2;
        do
        {
          v48 = v47;
          *v47++ = v46 | 0x80;
          v49 = v46 >> 7;
          v50 = v46 >> 14;
          v46 >>= 7;
        }
        while (v50);
        v45 = (google::protobuf::UnknownFieldSet *)(v48 + 2);
        *v47 = v49;
      }
      else
      {
        v5[2] = v46;
        v45 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v44;
      v45 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v43, v45, a3, a4);
  }
LABEL_61:
  v51 = (google::protobuf::internal *)*((_QWORD *)this + 2);
  if (*((char *)v51 + 23) < 0)
  {
    v52 = (const char *)*((_QWORD *)v51 + 1);
    if (!v52)
      goto LABEL_67;
    v51 = *(google::protobuf::internal **)v51;
    goto LABEL_66;
  }
  v52 = (const char *)*((unsigned __int8 *)v51 + 23);
  if (*((_BYTE *)v51 + 23))
  {
LABEL_66:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v51, v52, 1, (google::protobuf::internal *)"SnippetUI.Sash_Standard.component_name");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 6, *((_QWORD *)this + 2), v5);
  }
LABEL_67:
  if (*((_BYTE *)this + 64))
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v53 = *((_BYTE *)this + 64);
    }
    else
    {
      v53 = 1;
    }
    *v5 = 56;
    v5[1] = v53;
    v5 += 2;
  }
  v54 = *((_QWORD *)this + 1);
  if ((v54 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v54 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)v5;
}

void SnippetUI::Sash_Standard::CopyFrom(SnippetUI::Sash_Standard *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::Sash_Standard::Clear(this);
    SnippetUI::Sash_Standard::MergeFrom(this, a2);
  }
}

void SnippetUI::Sash_Standard::MergeFrom(SnippetUI::Sash_Standard *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::Sash_Standard *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Sash.pb.cc", 787);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::Sash_Standard::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BFC6463C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Sash_Standard::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 68) = a2;
  return this;
}

uint64_t SnippetUI::Sash_Standard::GetMetadata(SnippetUI::Sash_Standard *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_Sash_2eproto);
  return qword_1EF583808;
}

void *SnippetUI::Sash_Standard::default_instance(SnippetUI::Sash_Standard *this)
{
  if (atomic_load(scc_info_Sash_Standard_Sash_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_Sash_Standard_Sash_2eproto);
  return &SnippetUI::_Sash_Standard_default_instance_;
}

void SnippetUI::Sash_Standard::MergeFrom(SnippetUI::Sash_Standard *this, const SnippetUI::Sash_Standard *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  const SnippetUI::Sash_Standard_SashTitle *v8;
  SnippetUI::Sash_Standard_SashTitle *v9;
  const SnippetUI::Sash_Standard_SashTitle *v10;
  int **v11;
  int **v12;
  int **v13;
  int **v14;
  int **v15;
  int **v16;
  int **v17;
  int **v18;
  int **v19;
  int **v20;
  int **v21;
  int **v22;
  char v23;
  std::string v24[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v24, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/Sash.pb.cc", 802);
    v4 = google::protobuf::internal::LogMessage::operator<<(v24, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v23, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v24[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Sash_Standard *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_QWORD *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v6);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  if (a2 != (const SnippetUI::Sash_Standard *)&SnippetUI::_Sash_Standard_default_instance_)
  {
    v8 = (const SnippetUI::Sash_Standard_SashTitle *)*((_QWORD *)a2 + 3);
    if (v8)
    {
      v9 = (SnippetUI::Sash_Standard_SashTitle *)*((_QWORD *)this + 3);
      if (!v9)
      {
        v9 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Sash_Standard_SashTitle>(0);
        *((_QWORD *)this + 3) = v9;
        v8 = (const SnippetUI::Sash_Standard_SashTitle *)*((_QWORD *)a2 + 3);
      }
      if (v8)
        v10 = v8;
      else
        v10 = (const SnippetUI::Sash_Standard_SashTitle *)&SnippetUI::_Sash_Standard_SashTitle_default_instance_;
      SnippetUI::Sash_Standard_SashTitle::MergeFrom(v9, v10);
    }
    v11 = (int **)*((_QWORD *)a2 + 4);
    if (v11)
    {
      v12 = (int **)*((_QWORD *)this + 4);
      if (!v12)
      {
        v12 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((_QWORD *)this + 4) = v12;
        v11 = (int **)*((_QWORD *)a2 + 4);
      }
      if (v11)
        v13 = v11;
      else
        v13 = (int **)&SnippetUI::_VisualProperty_default_instance_;
      SnippetUI::VisualProperty::MergeFrom(v12, v13);
    }
    v14 = (int **)*((_QWORD *)a2 + 5);
    if (v14)
    {
      v15 = (int **)*((_QWORD *)this + 5);
      if (!v15)
      {
        v15 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((_QWORD *)this + 5) = v15;
        v14 = (int **)*((_QWORD *)a2 + 5);
      }
      if (v14)
        v16 = v14;
      else
        v16 = (int **)&SnippetUI::_VisualProperty_default_instance_;
      SnippetUI::VisualProperty::MergeFrom(v15, v16);
    }
    v17 = (int **)*((_QWORD *)a2 + 6);
    if (v17)
    {
      v18 = (int **)*((_QWORD *)this + 6);
      if (!v18)
      {
        v18 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((_QWORD *)this + 6) = v18;
        v17 = (int **)*((_QWORD *)a2 + 6);
      }
      if (v17)
        v19 = v17;
      else
        v19 = (int **)&SnippetUI::_VisualProperty_default_instance_;
      SnippetUI::VisualProperty::MergeFrom(v18, v19);
    }
    v20 = (int **)*((_QWORD *)a2 + 7);
    if (v20)
    {
      v21 = (int **)*((_QWORD *)this + 7);
      if (!v21)
      {
        v21 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((_QWORD *)this + 7) = v21;
        v20 = (int **)*((_QWORD *)a2 + 7);
      }
      if (v20)
        v22 = v20;
      else
        v22 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      SnippetUI::ActionProperty::MergeFrom(v21, v22);
    }
  }
  if (*((_BYTE *)a2 + 64))
    *((_BYTE *)this + 64) = 1;
}

void sub_1BFC64894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::Sash_Standard *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Sash_Standard>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::Sash_Standard *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::Sash_Standard *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x48uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::Sash_Standard>);
    SnippetUI::Sash_Standard::Sash_Standard(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::Sash_Standard *)operator new();
    SnippetUI::Sash_Standard::Sash_Standard(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BFC64930(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C4002C72E65);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::Sash_Standard>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void SnippetUI::Sash_Standard_SashTitle::InitAsDefaultInstance(SnippetUI::Sash_Standard_SashTitle *this)
{
  qword_1ED1D4890 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  unk_1ED1D4898 = &google::protobuf::internal::fixed_address_empty_string;
}

SnippetUI::Sash_Standard_SashTitle *SnippetUI::Sash_Standard_SashTitle::Sash_Standard_SashTitle(SnippetUI::Sash_Standard_SashTitle *this, const SnippetUI::Sash_Standard_SashTitle *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E793A9B8;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Sash_Standard_SashTitle *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_DWORD *)this + 7) = 0;
  v5 = *((_DWORD *)a2 + 7);
  if ((v5 - 1) < 2)
  {
    v6 = *((_QWORD *)a2 + 2);
    SnippetUI::Sash_Standard_SashTitle::clear_value((uint64_t)this);
    *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
    *((_DWORD *)this + 7) = v5;
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v6);
  }
  return this;
}

void sub_1BFC64AF8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Sash_Standard_SashTitle::CopyFrom(SnippetUI::Sash_Standard_SashTitle *this, const SnippetUI::Sash_Standard_SashTitle *a2)
{
  if (a2 != this)
  {
    SnippetUI::Sash_Standard_SashTitle::Clear(this);
    SnippetUI::Sash_Standard_SashTitle::MergeFrom(this, a2);
  }
}

void SnippetUI::Sash_Standard_SashTitle::InternalSwap(SnippetUI::Sash_Standard_SashTitle *this, SnippetUI::Sash_Standard_SashTitle *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t v7;
  google::protobuf::UnknownFieldSet *v8;

  v4 = (SnippetUI::Sash_Standard_SashTitle *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v8;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v7;
  LODWORD(v7) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v7;
}

void SnippetUI::Sash_Standard::InitAsDefaultInstance(SnippetUI::Sash_Standard *this)
{
  qword_1ED1D3E50 = (uint64_t)&SnippetUI::_Sash_Standard_SashTitle_default_instance_;
  unk_1ED1D3E58 = &SnippetUI::_VisualProperty_default_instance_;
  qword_1ED1D3E60 = (uint64_t)&SnippetUI::_VisualProperty_default_instance_;
  unk_1ED1D3E68 = &SnippetUI::_VisualProperty_default_instance_;
  qword_1ED1D3E70 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
}

uint64_t SnippetUI::Sash_Standard::_Internal::title(SnippetUI::Sash_Standard::_Internal *this, const SnippetUI::Sash_Standard *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::Sash_Standard::_Internal::thumbnail(SnippetUI::Sash_Standard::_Internal *this, const SnippetUI::Sash_Standard *a2)
{
  return *((_QWORD *)this + 4);
}

uint64_t SnippetUI::Sash_Standard::_Internal::title_color(SnippetUI::Sash_Standard::_Internal *this, const SnippetUI::Sash_Standard *a2)
{
  return *((_QWORD *)this + 5);
}

uint64_t SnippetUI::Sash_Standard::_Internal::background_color(SnippetUI::Sash_Standard::_Internal *this, const SnippetUI::Sash_Standard *a2)
{
  return *((_QWORD *)this + 6);
}

uint64_t SnippetUI::Sash_Standard::_Internal::action(SnippetUI::Sash_Standard::_Internal *this, const SnippetUI::Sash_Standard *a2)
{
  return *((_QWORD *)this + 7);
}

uint64_t SnippetUI::Sash_Standard::clear_thumbnail(SnippetUI::Sash_Standard *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 4) = 0;
  return result;
}

uint64_t SnippetUI::Sash_Standard::clear_title_color(SnippetUI::Sash_Standard *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 5);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 5) = 0;
  return result;
}

uint64_t SnippetUI::Sash_Standard::clear_background_color(SnippetUI::Sash_Standard *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 6);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 6) = 0;
  return result;
}

uint64_t SnippetUI::Sash_Standard::clear_action(SnippetUI::Sash_Standard *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 7);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 7) = 0;
  return result;
}

SnippetUI::Sash_Standard *SnippetUI::Sash_Standard::Sash_Standard(SnippetUI::Sash_Standard *this, const SnippetUI::Sash_Standard *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  SnippetUI::Sash_Standard_SashTitle *v8;
  SnippetUI::ActionProperty *v9;
  SnippetUI::VisualProperty *v10;
  SnippetUI::VisualProperty *v11;
  SnippetUI::VisualProperty *v12;

  *(_QWORD *)this = &off_1E793AA78;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 17) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::Sash_Standard *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  if (a2 == (const SnippetUI::Sash_Standard *)&SnippetUI::_Sash_Standard_default_instance_)
  {
    v9 = 0;
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 24) = 0u;
  }
  else
  {
    if (*((_QWORD *)a2 + 3))
    {
      v8 = (SnippetUI::Sash_Standard_SashTitle *)operator new();
      SnippetUI::Sash_Standard_SashTitle::Sash_Standard_SashTitle(v8, *((const SnippetUI::Sash_Standard_SashTitle **)a2 + 3));
    }
    else
    {
      v8 = 0;
    }
    *((_QWORD *)this + 3) = v8;
    if (*((_QWORD *)a2 + 4))
    {
      v10 = (SnippetUI::VisualProperty *)operator new();
      SnippetUI::VisualProperty::VisualProperty(v10, *((const SnippetUI::VisualProperty **)a2 + 4));
    }
    else
    {
      v10 = 0;
    }
    *((_QWORD *)this + 4) = v10;
    if (*((_QWORD *)a2 + 5))
    {
      v11 = (SnippetUI::VisualProperty *)operator new();
      SnippetUI::VisualProperty::VisualProperty(v11, *((const SnippetUI::VisualProperty **)a2 + 5));
    }
    else
    {
      v11 = 0;
    }
    *((_QWORD *)this + 5) = v11;
    if (*((_QWORD *)a2 + 6))
    {
      v12 = (SnippetUI::VisualProperty *)operator new();
      SnippetUI::VisualProperty::VisualProperty(v12, *((const SnippetUI::VisualProperty **)a2 + 6));
    }
    else
    {
      v12 = 0;
    }
    *((_QWORD *)this + 6) = v12;
    if (*((_QWORD *)a2 + 7))
    {
      v9 = (SnippetUI::ActionProperty *)operator new();
      SnippetUI::ActionProperty::ActionProperty(v9, *((const SnippetUI::ActionProperty **)a2 + 7));
    }
    else
    {
      v9 = 0;
    }
  }
  *((_QWORD *)this + 7) = v9;
  *((_BYTE *)this + 64) = *((_BYTE *)a2 + 64);
  return this;
}

void sub_1BFC64EC8(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x1C3B8D890](v2, 0x10A1C40B18DE219);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::Sash_Standard::CopyFrom(SnippetUI::Sash_Standard *this, const SnippetUI::Sash_Standard *a2)
{
  if (a2 != this)
  {
    SnippetUI::Sash_Standard::Clear(this);
    SnippetUI::Sash_Standard::MergeFrom(this, a2);
  }
}

void SnippetUI::Sash_Standard::InternalSwap(SnippetUI::Sash_Standard *this, SnippetUI::Sash_Standard *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  google::protobuf::UnknownFieldSet *v18;

  v4 = (SnippetUI::Sash_Standard *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v18;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 2);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v13;
  v14 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v14;
  v15 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v15;
  v16 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v16;
  v17 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v17;
  LOBYTE(v17) = *((_BYTE *)this + 64);
  *((_BYTE *)this + 64) = *((_BYTE *)a2 + 64);
  *((_BYTE *)a2 + 64) = v17;
}

uint64_t siri::dialogengine::DialogHoliday::name(siri::dialogengine::DialogHoliday *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t HolidayName;
  void *__p[2];
  __int128 v6;

  *(_OWORD *)__p = 0u;
  v6 = 0u;
  HolidayName = siri::dialogengine::GetHolidayName(this, (uint64_t)a2, (unsigned int *)__p);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[1]);
  return HolidayName;
}

void sub_1BFC65104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::GetHolidayName(siri::dialogengine::Context *a1, uint64_t a2, unsigned int *a3)
{
  const void **v6;
  char *RequiredStringParameter;
  const void **v8;
  char *OptionalStringParameter;
  uint64_t v10;
  void *v11;
  const char *v12;
  void *v14[2];
  char v15;
  std::string v16;
  std::string __p;
  std::string v18;

  v6 = (const void **)std::string::basic_string[abi:ne180100]<0>(&v18, "holiday");
  RequiredStringParameter = (char *)siri::dialogengine::GetRequiredStringParameter(v6, a2);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  v8 = (const void **)std::string::basic_string[abi:ne180100]<0>(&v18, "calendarType");
  OptionalStringParameter = (char *)siri::dialogengine::GetOptionalStringParameter(v8, a2);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  *a3 = 0;
  if (!RequiredStringParameter)
  {
    v10 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&v18, "");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    siri::dialogengine::VariableString::VariableString(v10, &v18, (uint64_t)&__p);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_24;
    v11 = (void *)__p.__r_.__value_.__r.__words[0];
    goto LABEL_23;
  }
  if (OptionalStringParameter)
  {
    if (OptionalStringParameter[95] < 0)
      std::string::__init_copy_ctor_external(&v18, *((const std::string::value_type **)OptionalStringParameter + 9), *((_QWORD *)OptionalStringParameter + 10));
    else
      v18 = *(std::string *)(OptionalStringParameter + 3);
    *a3 = siri::dialogengine::GetCalendarType((uint64_t)&v18);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
  }
  v10 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&v18, "");
  if (RequiredStringParameter[95] < 0)
    std::string::__init_copy_ctor_external(&v16, *((const std::string::value_type **)RequiredStringParameter + 9), *((_QWORD *)RequiredStringParameter + 10));
  else
    v16 = *(std::string *)(RequiredStringParameter + 3);
  siri::dialogengine::Context::GetLocale(a1, v12, (uint64_t)v14);
  siri::dialogengine::GetLocalizedHolidayName((uint64_t)&v16, (uint64_t)v14, a3, &__p);
  siri::dialogengine::VariableString::VariableString(v10, &v18, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v15 < 0)
    operator delete(v14[0]);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
  {
    v11 = (void *)v16.__r_.__value_.__r.__words[0];
LABEL_23:
    operator delete(v11);
  }
LABEL_24:
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  return v10;
}

void sub_1BFC65328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;
  uint64_t v28;

  if (*(char *)(v28 - 41) < 0)
    operator delete(*(void **)(v28 - 64));
  MEMORY[0x1C3B8D890](v27, 0x10B3C40D3060B95);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogHoliday::nameWithPrefix(siri::dialogengine::DialogHoliday *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t HolidayName;
  void *__p[2];
  __int128 v6;

  *(_OWORD *)__p = 0u;
  v6 = 0u;
  HIDWORD(__p[0]) = 1;
  HolidayName = siri::dialogengine::GetHolidayName(this, (uint64_t)a2, (unsigned int *)__p);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[1]);
  return HolidayName;
}

void sub_1BFC65438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::DialogHoliday::nameWithDefiniteArticle(siri::dialogengine::DialogHoliday *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t HolidayName;
  void *__p[2];
  __int128 v6;

  *(_OWORD *)__p = 0u;
  v6 = 0u;
  HIDWORD(__p[0]) = 2;
  HolidayName = siri::dialogengine::GetHolidayName(this, (uint64_t)a2, (unsigned int *)__p);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[1]);
  return HolidayName;
}

void sub_1BFC654A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::DialogHoliday::date(siri::dialogengine::DialogHoliday *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  char *RequiredStringParameter;
  char *OptionalStringParameter;
  char *v7;
  double *OptionalNumberParameter;
  uint64_t v9;
  void *v10;
  const siri::dialogengine::TimeStamp *v11;
  const siri::dialogengine::VariableObject *v12;
  std::__shared_weak_count *size;
  unint64_t *v14;
  unint64_t v15;
  _BYTE __p[32];
  std::string v18;
  void *v19[4];
  int ICUYear;

  memset(v19, 0, sizeof(v19));
  std::string::basic_string[abi:ne180100]<0>(__p, "holiday");
  RequiredStringParameter = (char *)siri::dialogengine::GetRequiredStringParameter((const void **)__p, (uint64_t)a2);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "calendarType");
  OptionalStringParameter = (char *)siri::dialogengine::GetOptionalStringParameter((const void **)__p, (uint64_t)a2);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "holidayLocale");
  v7 = (char *)siri::dialogengine::GetOptionalStringParameter((const void **)__p, (uint64_t)a2);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "holidayYear");
  OptionalNumberParameter = (double *)siri::dialogengine::GetOptionalNumberParameter((const void **)__p, (uint64_t)a2);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  LODWORD(v19[0]) = 0;
  if (RequiredStringParameter)
  {
    if (!OptionalStringParameter)
      goto LABEL_19;
    if (OptionalStringParameter[95] < 0)
      std::string::__init_copy_ctor_external((std::string *)__p, *((const std::string::value_type **)OptionalStringParameter + 9), *((_QWORD *)OptionalStringParameter + 10));
    else
      *(std::string *)__p = *(std::string *)(OptionalStringParameter + 3);
    LODWORD(v19[0]) = siri::dialogengine::GetCalendarType((uint64_t)__p);
    if ((__p[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)__p);
      if (v7)
      {
LABEL_20:
        if (v7[95] < 0)
          std::string::__init_copy_ctor_external((std::string *)__p, *((const std::string::value_type **)v7 + 9), *((_QWORD *)v7 + 10));
        else
          *(std::string *)__p = *(std::string *)(v7 + 3);
LABEL_25:
        *(std::string *)&v19[1] = *(std::string *)__p;
        if (OptionalNumberParameter)
        {
          ICUYear = (int)OptionalNumberParameter[9];
        }
        else
        {
          memset(&__p[8], 0, 24);
          *(_QWORD *)__p = (uint64_t)siri::dialogengine::Context::GetCurrentTime(this);
          siri::dialogengine::Context::GetCurrentTimeZone(this, &v18);
          *(std::string *)&__p[8] = v18;
          ICUYear = siri::dialogengine::GetICUYear((siri::dialogengine *)__p, v11);
          if ((__p[31] & 0x80000000) != 0)
            operator delete(*(void **)&__p[8]);
        }
        if (RequiredStringParameter[95] < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__p, *((const std::string::value_type **)RequiredStringParameter + 9), *((_QWORD *)RequiredStringParameter + 10));
        }
        else
        {
          *(_OWORD *)__p = *(_OWORD *)(RequiredStringParameter + 72);
          *(_QWORD *)&__p[16] = *((_QWORD *)RequiredStringParameter + 11);
        }
        siri::dialogengine::GetHolidayDate((uint64_t)__p, (uint64_t)v19, (uint64_t *)&v18);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        v9 = (uint64_t)siri::dialogengine::DialogDateTime::asCalendar(this, (siri::dialogengine::Context *)v18.__r_.__value_.__l.__data_, v12);
        size = (std::__shared_weak_count *)v18.__r_.__value_.__l.__size_;
        if (v18.__r_.__value_.__l.__size_)
        {
          v14 = (unint64_t *)(v18.__r_.__value_.__l.__size_ + 8);
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }
        if (SHIBYTE(v19[3]) < 0)
        {
          v10 = v19[1];
          goto LABEL_41;
        }
        return v9;
      }
    }
    else
    {
LABEL_19:
      if (v7)
        goto LABEL_20;
    }
    siri::dialogengine::Context::GetDeviceLocale(this, (std::string *)__p);
    goto LABEL_25;
  }
  v9 = operator new();
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  std::string::basic_string[abi:ne180100]<0>(&v18, "");
  siri::dialogengine::VariableString::VariableString(v9, (const std::string *)__p, (uint64_t)&v18);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  if ((__p[23] & 0x80000000) != 0)
  {
    v10 = *(void **)__p;
LABEL_41:
    operator delete(v10);
  }
  return v9;
}

void sub_1BFC657E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::DialogHoliday::emotion(siri::dialogengine::DialogHoliday *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  const void **v4;
  char *RequiredStringParameter;
  uint64_t v6;
  void *v7;
  std::string v9;
  std::string __p;
  std::string v11;

  v4 = (const void **)std::string::basic_string[abi:ne180100]<0>(&v11, "holiday");
  RequiredStringParameter = (char *)siri::dialogengine::GetRequiredStringParameter(v4, (uint64_t)a2);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  v6 = operator new();
  if (!RequiredStringParameter)
  {
    std::string::basic_string[abi:ne180100]<0>(&v11, "");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    siri::dialogengine::VariableString::VariableString(v6, &v11, (uint64_t)&__p);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_14;
    v7 = (void *)__p.__r_.__value_.__r.__words[0];
    goto LABEL_13;
  }
  std::string::basic_string[abi:ne180100]<0>(&v11, "");
  if (RequiredStringParameter[95] < 0)
    std::string::__init_copy_ctor_external(&v9, *((const std::string::value_type **)RequiredStringParameter + 9), *((_QWORD *)RequiredStringParameter + 10));
  else
    v9 = *(std::string *)(RequiredStringParameter + 3);
  siri::dialogengine::GetHolidayEmotion((uint64_t)&v9, &__p);
  siri::dialogengine::VariableString::VariableString(v6, &v11, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
  {
    v7 = (void *)v9.__r_.__value_.__r.__words[0];
LABEL_13:
    operator delete(v7);
  }
LABEL_14:
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return v6;
}

void sub_1BFC65A04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  uint64_t v22;

  if (*(char *)(v22 - 17) < 0)
    operator delete(*(void **)(v22 - 40));
  MEMORY[0x1C3B8D890](v21, 0x10B3C40D3060B95);
  _Unwind_Resume(a1);
}

void sub_1BFC65A8C()
{
  uint64_t v0;

  if (*(char *)(v0 - 17) < 0)
    operator delete(*(void **)(v0 - 40));
  JUMPOUT(0x1BFC65A84);
}

void siri::dialogengine::ExpandNodes(siri::dialogengine::Context *a1, _QWORD *a2, const void ***a3, uint64_t a4, uint64_t a5, unsigned int a6, __n128 a7)
{
  const void **v7;
  const void **v8;
  void *v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  siri::dialogengine::ExecutionState *v16;
  siri::dialogengine::Context **v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *size;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  const siri::dialogengine::SpeakableString *v27;
  const char *v28;
  const char *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  __n128 v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v74;
  std::__shared_weak_count *v75;
  _QWORD *v76;
  std::__shared_weak_count *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  void *__p[2];
  char v81;
  const void *v82;
  std::__shared_weak_count *v83;
  uint64_t *v84;
  _QWORD *v85[4];
  const void *v86;
  std::__shared_weak_count *v87;
  _QWORD *v88;
  std::__shared_weak_count *v89;
  const void *v90;
  std::__shared_weak_count *v91;
  _QWORD *v92[3];
  _QWORD *v93[3];
  std::string v94;
  void *v95;
  char v96;
  void *v97;
  char v98;
  void *v99;
  char v100;
  void *v101;
  char v102;
  void *v103;
  char v104;
  void *v105;
  char v106;
  _QWORD v107[3];

  v8 = *a3;
  v7 = a3[1];
  if (*a3 != v7)
  {
    while (1)
    {
      v12 = (void *)*v8;
      if (*v8)
      {
        if (!(_DWORD)a5)
          goto LABEL_14;
      }
      else
      {
        v14 = 0;
        v13 = 0;
        v15 = 0;
        if (!(_DWORD)a5)
          goto LABEL_14;
      }
      a7.n128_f64[0] = siri::dialogengine::Node::GetCondition((siri::dialogengine::Node *)v12, a1, &v94);
      if (!v94.__r_.__value_.__r.__words[0])
        break;
      if (a1)
      {
        v17 = *(siri::dialogengine::Context ***)(v94.__r_.__value_.__r.__words[0] + 144);
        if (v17 != *(siri::dialogengine::Context ***)(v94.__r_.__value_.__r.__words[0] + 152)
          && (siri::dialogengine::EvaluateConditionEntry(a1, *v17, 0, v16) & 1) != 0)
        {
          break;
        }
      }
      size = (std::__shared_weak_count *)v94.__r_.__value_.__l.__size_;
      if (v94.__r_.__value_.__l.__size_)
      {
        v26 = (unint64_t *)(v94.__r_.__value_.__l.__size_ + 8);
        do
          v25 = __ldaxr(v26);
        while (__stlxr(v25 - 1, v26));
        goto LABEL_25;
      }
LABEL_117:
      v8 += 2;
      if (v8 == v7)
        return;
    }
    v18 = (std::__shared_weak_count *)v94.__r_.__value_.__l.__size_;
    if (!v94.__r_.__value_.__l.__size_)
      goto LABEL_14;
    v19 = (unint64_t *)(v94.__r_.__value_.__l.__size_ + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v18->__on_zero_shared)(v18, a7);
      std::__shared_weak_count::__release_weak(v18);
      if (!v13)
      {
LABEL_28:
        if (v14 | v15)
        {
          if (v14)
            v27 = (const siri::dialogengine::SpeakableString *)(v14 + 208);
          else
            v27 = (const siri::dialogengine::SpeakableString *)(v15 + 208);
          siri::dialogengine::SpeakableString::SpeakableString(&v94, v27);
          siri::dialogengine::SpeakableString::GetPrintChunks((siri::dialogengine::SpeakableString *)&v94, v28, v93);
          siri::dialogengine::SpeakableString::GetSpeakChunks((siri::dialogengine::SpeakableString *)&v94, v29, v92);
          v30 = (std::__shared_weak_count *)a2[1];
          v88 = (_QWORD *)*a2;
          v89 = v30;
          if (v30)
          {
            p_shared_owners = (unint64_t *)&v30->__shared_owners_;
            do
              v32 = __ldxr(p_shared_owners);
            while (__stxr(v32 + 1, p_shared_owners));
          }
          siri::dialogengine::EvaluateChunkList(&v90, (uint64_t)a1, v93, 0, a5, a6);
          if (v30)
          {
            v33 = (unint64_t *)&v30->__shared_owners_;
            do
              v34 = __ldaxr(v33);
            while (__stlxr(v34 - 1, v33));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
              std::__shared_weak_count::__release_weak(v30);
            }
          }
          v35 = (std::__shared_weak_count *)a2[1];
          v85[2] = *(_QWORD **)a2;
          v85[3] = &v35->__vftable;
          if (v35)
          {
            v36 = (unint64_t *)&v35->__shared_owners_;
            do
              v37 = __ldxr(v36);
            while (__stxr(v37 + 1, v36));
          }
          siri::dialogengine::EvaluateChunkList(&v86, (uint64_t)a1, v92, 1, a5, a6);
          if (v35)
          {
            v38 = (unint64_t *)&v35->__shared_owners_;
            do
              v39 = __ldaxr(v38);
            while (__stlxr(v39 - 1, v38));
            if (!v39)
            {
              ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
              std::__shared_weak_count::__release_weak(v35);
            }
          }
          v85[0] = 0;
          v85[1] = 0;
          v84 = (uint64_t *)v85;
          if (v90)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "print");
            v82 = v90;
            v83 = v91;
            if (v91)
            {
              v40 = (unint64_t *)&v91->__shared_owners_;
              do
                v41 = __ldxr(v40);
              while (__stxr(v41 + 1, v40));
            }
            std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>>(&v84, (const void **)__p, (uint64_t)__p);
            v42 = v83;
            if (v83)
            {
              v43 = (unint64_t *)&v83->__shared_owners_;
              do
                v44 = __ldaxr(v43);
              while (__stlxr(v44 - 1, v43));
              if (!v44)
              {
                ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                std::__shared_weak_count::__release_weak(v42);
              }
            }
            if (v81 < 0)
              operator delete(__p[0]);
          }
          if (v86)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "speak");
            v82 = v86;
            v83 = v87;
            if (v87)
            {
              v45 = (unint64_t *)&v87->__shared_owners_;
              do
                v46 = __ldxr(v45);
              while (__stxr(v46 + 1, v45));
            }
            std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>>(&v84, (const void **)__p, (uint64_t)__p);
            v47 = v83;
            if (v83)
            {
              v48 = (unint64_t *)&v83->__shared_owners_;
              do
                v49 = __ldaxr(v48);
              while (__stlxr(v49 - 1, v48));
              if (!v49)
              {
                ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                std::__shared_weak_count::__release_weak(v47);
              }
            }
            if (v81 < 0)
              operator delete(__p[0]);
          }
          v50 = *((_QWORD *)a1 + 63);
          v51 = (std::__shared_weak_count *)*((_QWORD *)a1 + 64);
          v78 = v50;
          v79 = v51;
          if (v51)
          {
            v52 = (unint64_t *)&v51->__shared_owners_;
            do
              v53 = __ldxr(v52);
            while (__stxr(v53 + 1, v52));
          }
          v54.n128_f64[0] = siri::dialogengine::File::GetOrCreateId(v50, (uint64_t)*v8, 1, 0, (uint64_t)__p);
          if (v51)
          {
            v55 = (unint64_t *)&v51->__shared_owners_;
            do
              v56 = __ldaxr(v55);
            while (__stlxr(v56 - 1, v55));
            if (!v56)
            {
              ((void (*)(std::__shared_weak_count *, __n128))v51->__on_zero_shared)(v51, v54);
              std::__shared_weak_count::__release_weak(v51);
            }
          }
          v57 = (std::__shared_weak_count *)a2[1];
          v76 = (_QWORD *)*a2;
          v77 = v57;
          if (v57)
          {
            v58 = (unint64_t *)&v57->__shared_owners_;
            do
              v59 = __ldxr(v58);
            while (__stxr(v59 + 1, v58));
          }
          siri::dialogengine::CreateJSONObjectVal((const void ***)&v84, &v74);
          siri::dialogengine::InsertJSONObjectVal((const void **)&v76, (uint64_t)__p, &v74);
          v60 = v75;
          if (v75)
          {
            v61 = (unint64_t *)&v75->__shared_owners_;
            do
              v62 = __ldaxr(v61);
            while (__stlxr(v62 - 1, v61));
            if (!v62)
            {
              ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
              std::__shared_weak_count::__release_weak(v60);
            }
          }
          v63 = v77;
          if (v77)
          {
            v64 = (unint64_t *)&v77->__shared_owners_;
            do
              v65 = __ldaxr(v64);
            while (__stlxr(v65 - 1, v64));
            if (!v65)
            {
              ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
              std::__shared_weak_count::__release_weak(v63);
            }
          }
          if (v81 < 0)
            operator delete(__p[0]);
          std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(v85[0]);
          v66 = v87;
          if (v87)
          {
            v67 = (unint64_t *)&v87->__shared_owners_;
            do
              v68 = __ldaxr(v67);
            while (__stlxr(v68 - 1, v67));
            if (!v68)
            {
              ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
              std::__shared_weak_count::__release_weak(v66);
            }
          }
          v69 = v91;
          if (v91)
          {
            v70 = (unint64_t *)&v91->__shared_owners_;
            do
              v71 = __ldaxr(v70);
            while (__stlxr(v71 - 1, v70));
            if (!v71)
            {
              ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
              std::__shared_weak_count::__release_weak(v69);
            }
          }
          __p[0] = v92;
          std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          __p[0] = v93;
          std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          if (v106 < 0)
            operator delete(v105);
          if (v104 < 0)
            operator delete(v103);
          if (v102 < 0)
            operator delete(v101);
          if (v100 < 0)
            operator delete(v99);
          if (v98 < 0)
            operator delete(v97);
          if (v96 < 0)
            operator delete(v95);
          if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v94.__r_.__value_.__l.__data_);
        }
        goto LABEL_117;
      }
    }
    else
    {
LABEL_14:
      if (!v13)
        goto LABEL_28;
    }
    size = (std::__shared_weak_count *)a2[1];
    v107[0] = *a2;
    v107[1] = size;
    if (size)
    {
      v22 = (unint64_t *)&size->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    siri::dialogengine::Group::Expand(v13, a1, v107, a4, a5, a6, a7);
    if (!size)
      goto LABEL_117;
    v24 = (unint64_t *)&size->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
LABEL_25:
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
    goto LABEL_117;
  }
}

void sub_1BFC66118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,_QWORD *a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33,char a34,uint64_t a35,char a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,void *a44)
{
  std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>::~pair((uint64_t)&__p);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(a28);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a36);
  __p = &a38;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = &a41;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  siri::dialogengine::SpeakableString::~SpeakableString(&a44);
  _Unwind_Resume(a1);
}

void siri::dialogengine::EvaluateChunkList(const void **a1, uint64_t a2, _QWORD **a3, int a4, unsigned int a5, uint64_t a6)
{
  const void **v7;
  int v8;
  const void *v9;
  char *v10;
  char *v11;
  void *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::string::size_type v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _OWORD *v18;
  std::string::size_type v19;
  char *Phrase;
  unint64_t *v21;
  unint64_t v22;
  std::string::size_type v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  void *v29;
  _OWORD *v30;
  uint64_t i;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  _OWORD *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  char *v61;
  __int128 v62;
  int64x2_t v63;
  char *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  __n128 v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::string::size_type v93;
  __int128 v94;
  _OWORD *v95;
  int v96;
  _OWORD *v97;
  int v98;
  uint64_t j;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  _OWORD *v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  char *v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  _QWORD *v126;
  _QWORD *v127;
  char *v128;
  __int128 v129;
  int64x2_t v130;
  char *v131;
  unint64_t *v132;
  void *v133;
  uint64_t k;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  char **v138;
  BOOL v139;
  BOOL v140;
  _BOOL4 v141;
  _BOOL4 v142;
  _DWORD *v143;
  _DWORD *v144;
  _DWORD *v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  char *v150;
  std::string *v151;
  char *v152;
  int v153;
  char *v154;
  char *v155;
  std::string::size_type v156;
  unint64_t *v157;
  unint64_t v158;
  char *v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  char *v164;
  uint64_t v165;
  char *v166;
  std::string::size_type v167;
  unint64_t *v168;
  unint64_t v169;
  char *v170;
  char *v171;
  char *v172;
  __int128 v173;
  int64x2_t v174;
  char *v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  unsigned int v179;
  unsigned int v180;
  int v181;
  BOOL v182;
  _QWORD *v184;
  _DWORD *v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  unint64_t v189;
  char *v190;
  std::string::size_type v191;
  uint64_t v192;
  const void **v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  char *v215;
  unint64_t *v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  _QWORD *v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  _QWORD *v234;
  std::string::size_type v235;
  uint64_t v236;
  unint64_t v237;
  int64_t v238;
  unint64_t v239;
  char *v240;
  std::string::size_type v241;
  uint64_t v242;
  std::string::size_type v243;
  std::string::size_type v244;
  unint64_t v245;
  unint64_t v246;
  unint64_t v247;
  char *v248;
  char *v249;
  std::string::size_type v250;
  _QWORD *v251;
  std::string::size_type v252;
  __int128 v253;
  int64x2_t v254;
  std::string::size_type v255;
  std::string::size_type v256;
  std::string::size_type v257;
  std::string::size_type v258;
  void *v259;
  unsigned int v260;
  uint64_t *v262;
  uint64_t v263;
  uint64_t *v264;
  unsigned int v265;
  uint64_t v267;
  uint64_t v268;
  uint64_t *v269;
  int v270;
  BOOL v271;
  uint64_t *v272;
  int v273;
  uint64_t v274;
  BOOL v275;
  uint64_t *v276;
  std::string::size_type v277;
  int v278;
  char *v279;
  uint64_t v280;
  char *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  std::__shared_weak_count *v285;
  unint64_t *v286;
  unint64_t v287;
  char *v288;
  uint64_t v289;
  unint64_t v290;
  int *m;
  std::string::size_type v292;
  uint64_t *v293;
  uint64_t *v294;
  unint64_t v295;
  uint64_t v296;
  _QWORD *v297;
  std::string::size_type v298;
  uint64_t v299;
  std::__shared_weak_count *v300;
  unint64_t *v301;
  unint64_t v302;
  unint64_t v303;
  _QWORD *v304;
  _QWORD *v305;
  uint64_t v306;
  std::__shared_weak_count *v307;
  unint64_t *v308;
  unint64_t v309;
  unint64_t v310;
  std::string::size_type v311;
  unint64_t *v312;
  unint64_t v313;
  std::string *v314;
  std::__shared_weak_count *v315;
  unint64_t *v316;
  unint64_t v317;
  std::__shared_weak_count *v318;
  unint64_t *v319;
  unint64_t v320;
  std::__shared_weak_count *v321;
  unint64_t *v322;
  unint64_t v323;
  std::__shared_weak_count *v324;
  unint64_t *v325;
  unint64_t v326;
  std::__shared_weak_count *v327;
  unint64_t *v328;
  unint64_t v329;
  std::__shared_weak_count *v330;
  unint64_t *v331;
  unint64_t v332;
  char v336;
  unint64_t v337;
  __int128 v339;
  std::string::size_type size;
  std::string::size_type v342;
  uint64_t v343;
  std::__shared_weak_count *v344;
  const void *v345;
  std::__shared_weak_count *v346;
  void *v347;
  void *v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  __int128 v353;
  uint64_t v354;
  std::__shared_weak_count *v355;
  const void *v356;
  std::__shared_weak_count *v357;
  uint64_t v358;
  std::__shared_weak_count *v359;
  const void *v360;
  std::__shared_weak_count *v361;
  __int128 v362;
  __int128 v363;
  __int128 v364;
  __int128 v365;
  void *v366[2];
  char v367;
  __int128 v368;
  std::string v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  std::string v373;
  std::string v374;
  std::string v375;
  void *v376;
  _DWORD *v377;
  unint64_t v378;
  int64x2_t v379;
  char *v380;
  int64x2_t v381;
  char *v382;
  uint64_t v383;
  _DWORD *v384;
  unint64_t v385;
  char *v386;
  char *v387;
  uint64_t v388;
  std::string v389;
  std::string v390;
  uint64_t v391;
  std::string v392;
  std::string v393;
  std::string v394;
  __int128 __s;
  std::string::size_type v396;
  void *v397;
  __int128 v398;
  uint64_t v399;
  char v400;
  void *v401;
  __int128 v402;
  void *v403[2];
  char v404;
  void *__p[2];
  char v406;
  uint64_t v407;

  v407 = *MEMORY[0x1E0C80C00];
  *a1 = 0;
  a1[1] = 0;
  v387 = 0;
  v386 = 0;
  v388 = 0;
  v384 = 0;
  v383 = 0;
  v385 = 0;
  v381 = 0uLL;
  v382 = 0;
  v379 = 0uLL;
  v380 = 0;
  v377 = 0;
  v376 = 0;
  v378 = 0;
  memset(&v393, 0, sizeof(v393));
  std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::ChunkText>*,std::shared_ptr<siri::dialogengine::ChunkText>*>((char *)&v393, *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 4);
  size = v393.__r_.__value_.__l.__size_;
  v7 = (const void **)v393.__r_.__value_.__r.__words[0];
  if (v393.__r_.__value_.__r.__words[0] != v393.__r_.__value_.__l.__size_)
  {
    v336 = 0;
    v8 = 0;
    while (1)
    {
      v9 = *v7;
      if (*v7)
      {
      }
      else
      {
        v11 = 0;
        v10 = 0;
        v12 = 0;
      }
      memset(&v392, 0, sizeof(v392));
      memset(&v389, 0, sizeof(v389));
      memset(&v375, 0, sizeof(v375));
      if (v10)
      {
        v13 = a6;
        v15 = *(_QWORD *)(a2 + 504);
        v14 = *(std::__shared_weak_count **)(a2 + 512);
        v390.__r_.__value_.__r.__words[0] = v15;
        v390.__r_.__value_.__l.__size_ = (std::string::size_type)v14;
        if (v14)
        {
          p_shared_owners = (unint64_t *)&v14->__shared_owners_;
          do
            v17 = __ldxr(p_shared_owners);
          while (__stxr(v17 + 1, p_shared_owners));
        }
        v18 = v10 + 200;
        if (v10[223] < 0)
        {
          std::string::__init_copy_ctor_external(&v394, *((const std::string::value_type **)v10 + 25), *((_QWORD *)v10 + 26));
        }
        else
        {
          *(_OWORD *)&v394.__r_.__value_.__l.__data_ = *v18;
          v394.__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 27);
        }
        Phrase = siri::dialogengine::GroupPhrases::GetPhrase(v15 + 312, (unsigned __int8 *)&v394);
        if (SHIBYTE(v394.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v394.__r_.__value_.__l.__data_);
          if (!v14)
            goto LABEL_25;
        }
        else if (!v14)
        {
          goto LABEL_25;
        }
        v21 = (unint64_t *)&v14->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
LABEL_25:
        memset(&v390, 0, sizeof(v390));
        if (Phrase)
        {
          if (a4)
          {
            (*(void (**)(std::string *__return_ptr, char *, uint64_t))(*(_QWORD *)v10 + 24))(&v394, v10, a2);
            if ((SHIBYTE(v396) & 0x80000000) == 0)
            {
              v23 = v396;
              v374.__r_.__value_.__r.__words[2] = v396;
              v24 = __s;
              goto LABEL_33;
            }
            std::string::__init_copy_ctor_external(&v374, (const std::string::value_type *)__s, *((std::string::size_type *)&__s + 1));
LABEL_49:
            *(_OWORD *)&v390.__r_.__value_.__l.__data_ = *(_OWORD *)&v374.__r_.__value_.__l.__data_;
            v23 = v374.__r_.__value_.__r.__words[2];
          }
          else
          {
            (*(void (**)(std::string *__return_ptr, char *, uint64_t))(*(_QWORD *)v10 + 24))(&v394, v10, a2);
            if (SHIBYTE(v394.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(&v374, v394.__r_.__value_.__l.__data_, v394.__r_.__value_.__l.__size_);
              goto LABEL_49;
            }
            v23 = v394.__r_.__value_.__r.__words[2];
            v374.__r_.__value_.__r.__words[2] = v394.__r_.__value_.__r.__words[2];
            v24 = *(_OWORD *)&v394.__r_.__value_.__l.__data_;
LABEL_33:
            *(_OWORD *)&v374.__r_.__value_.__l.__data_ = v24;
            *(_OWORD *)&v390.__r_.__value_.__l.__data_ = v24;
          }
          v390.__r_.__value_.__r.__words[2] = v23;
          *((_BYTE *)&v374.__r_.__value_.__s + 23) = 0;
          v374.__r_.__value_.__s.__data_[0] = 0;
          if (v406 < 0)
            operator delete(__p[0]);
          if (v404 < 0)
            operator delete(v403[0]);
          if (SHIBYTE(v402) < 0)
            operator delete(v401);
          if (v400 < 0)
            operator delete(*((void **)&v398 + 1));
          if (SBYTE7(v398) < 0)
            operator delete(v397);
          if (SHIBYTE(v396) < 0)
            operator delete((void *)__s);
          if (SHIBYTE(v394.__r_.__value_.__r.__words[2]) < 0)
          {
            v29 = (void *)v394.__r_.__value_.__r.__words[0];
LABEL_64:
            operator delete(v29);
          }
        }
        else
        {
          if (v10[223] < 0)
          {
            std::string::__init_copy_ctor_external(&v373, *((const std::string::value_type **)v10 + 25), *((_QWORD *)v10 + 26));
          }
          else
          {
            *(_OWORD *)&v373.__r_.__value_.__l.__data_ = *v18;
            v373.__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 27);
          }
          v25 = std::string::insert(&v373, 0, "Phrase '");
          v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
          v374.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v374.__r_.__value_.__l.__data_ = v26;
          v25->__r_.__value_.__l.__size_ = 0;
          v25->__r_.__value_.__r.__words[2] = 0;
          v25->__r_.__value_.__r.__words[0] = 0;
          v27 = std::string::append(&v374, "' not found!");
          v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
          v394.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v394.__r_.__value_.__l.__data_ = v28;
          v27->__r_.__value_.__l.__size_ = 0;
          v27->__r_.__value_.__r.__words[2] = 0;
          v27->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Log::LogWithLevel((uint64_t)&v394, 3u);
          if (SHIBYTE(v394.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v394.__r_.__value_.__l.__data_);
          if (SHIBYTE(v374.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v374.__r_.__value_.__l.__data_);
          if (SHIBYTE(v373.__r_.__value_.__r.__words[2]) < 0)
          {
            v29 = (void *)v373.__r_.__value_.__r.__words[0];
            goto LABEL_64;
          }
        }
        MEMORY[0x1C3B8D53C](&v392, "phrase");
        if (v10[223] < 0)
        {
          std::string::__init_copy_ctor_external(&v394, *((const std::string::value_type **)v10 + 25), *((_QWORD *)v10 + 26));
        }
        else
        {
          *(_OWORD *)&v394.__r_.__value_.__l.__data_ = *v18;
          v394.__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 27);
        }
        if (SHIBYTE(v389.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v389.__r_.__value_.__l.__data_);
        v389 = v394;
        v30 = v10 + 224;
        if (v10[247] < 0)
        {
          std::string::__init_copy_ctor_external(&v394, *((const std::string::value_type **)v10 + 28), *((_QWORD *)v10 + 29));
        }
        else
        {
          *(_OWORD *)&v394.__r_.__value_.__l.__data_ = *v30;
          v394.__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 30);
        }
        if (SHIBYTE(v375.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v375.__r_.__value_.__l.__data_);
        v375 = v394;
        if (v10[223] < 0)
        {
          std::string::__init_copy_ctor_external(&v373, *((const std::string::value_type **)v10 + 25), *((_QWORD *)v10 + 26));
        }
        else
        {
          *(_OWORD *)&v373.__r_.__value_.__l.__data_ = *v18;
          v373.__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 27);
        }
        a6 = v13;
        siri::dialogengine::CreateJSONStringVal((uint64_t)&v373, (uint64_t *)&v371);
        std::string::basic_string[abi:ne180100]<0>(&v394, "name");
        __s = v371;
        v371 = 0uLL;
        if (v10[247] < 0)
        {
          std::string::__init_copy_ctor_external(&v369, *((const std::string::value_type **)v10 + 28), *((_QWORD *)v10 + 29));
        }
        else
        {
          *(_OWORD *)&v369.__r_.__value_.__l.__data_ = *v30;
          v369.__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 30);
        }
        siri::dialogengine::CreateJSONStringVal((uint64_t)&v369, (uint64_t *)&v370);
        std::string::basic_string[abi:ne180100]<0>(&v396, "id");
        v398 = v370;
        v370 = 0uLL;
        std::string::basic_string[abi:ne180100]<0>(v366, "phrase");
        siri::dialogengine::CreateJSONStringVal((uint64_t)v366, (uint64_t *)&v368);
        std::string::basic_string[abi:ne180100]<0>(&v399, "type");
        v402 = v368;
        v368 = 0uLL;
        siri::dialogengine::CreateJSONStringVal((uint64_t)&v390, (uint64_t *)&v365);
        std::string::basic_string[abi:ne180100]<0>(v403, "expandedValue");
        *(_OWORD *)__p = v365;
        v365 = 0uLL;
        std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100]((uint64_t)&v374, (const void **)&v394.__r_.__value_.__l.__data_, 4);
        siri::dialogengine::CreateJSONObjectVal((const void ***)&v374, (uint64_t *)&v372);
        std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)v374.__r_.__value_.__l.__size_);
        for (i = 0; i != -20; i -= 5)
        {
          std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&__p[i]);
          if (*(&v404 + i * 8) < 0)
            operator delete(v403[i]);
        }
        v32 = (std::__shared_weak_count *)*((_QWORD *)&v365 + 1);
        if (*((_QWORD *)&v365 + 1))
        {
          v33 = (unint64_t *)(*((_QWORD *)&v365 + 1) + 8);
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        v35 = (std::__shared_weak_count *)*((_QWORD *)&v368 + 1);
        if (*((_QWORD *)&v368 + 1))
        {
          v36 = (unint64_t *)(*((_QWORD *)&v368 + 1) + 8);
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        if (v367 < 0)
          operator delete(v366[0]);
        v38 = (std::__shared_weak_count *)*((_QWORD *)&v370 + 1);
        if (*((_QWORD *)&v370 + 1))
        {
          v39 = (unint64_t *)(*((_QWORD *)&v370 + 1) + 8);
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 - 1, v39));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
        if (SHIBYTE(v369.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v369.__r_.__value_.__l.__data_);
        v41 = (std::__shared_weak_count *)*((_QWORD *)&v371 + 1);
        if (*((_QWORD *)&v371 + 1))
        {
          v42 = (unint64_t *)(*((_QWORD *)&v371 + 1) + 8);
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 - 1, v42));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
        if (SHIBYTE(v373.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v373.__r_.__value_.__l.__data_);
        v44 = v381.i64[1];
        if (v381.i64[1] >= (unint64_t)v382)
        {
          v49 = (v381.i64[1] - v381.i64[0]) >> 4;
          v50 = v49 + 1;
          if ((unint64_t)(v49 + 1) >> 60)
            std::vector<BOOL>::__throw_length_error[abi:ne180100]();
          v51 = (uint64_t)&v382[-v381.i64[0]];
          if ((uint64_t)&v382[-v381.i64[0]] >> 3 > v50)
            v50 = v51 >> 3;
          if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF0)
            v52 = 0xFFFFFFFFFFFFFFFLL;
          else
            v52 = v50;
          *((_QWORD *)&__s + 1) = &v382;
          v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v52);
          v55 = &v53[16 * v49];
          v56 = *((_QWORD *)&v372 + 1);
          *(_OWORD *)v55 = v372;
          if (v56)
          {
            v57 = (unint64_t *)(v56 + 8);
            do
              v58 = __ldxr(v57);
            while (__stxr(v58 + 1, v57));
          }
          v59 = (_QWORD *)v381.i64[1];
          v60 = (_QWORD *)v381.i64[0];
          if (v381.i64[1] == v381.i64[0])
          {
            v63 = vdupq_n_s64(v381.u64[1]);
            v61 = &v53[16 * v49];
          }
          else
          {
            v61 = &v53[16 * v49];
            do
            {
              v62 = *((_OWORD *)v59 - 1);
              v59 -= 2;
              *((_OWORD *)v61 - 1) = v62;
              v61 -= 16;
              *v59 = 0;
              v59[1] = 0;
            }
            while (v59 != v60);
            v63 = v381;
          }
          v48 = v55 + 16;
          v381.i64[0] = (uint64_t)v61;
          v381.i64[1] = (uint64_t)(v55 + 16);
          *(int64x2_t *)&v394.__r_.__value_.__r.__words[1] = v63;
          v64 = v382;
          v382 = &v53[16 * v54];
          *(_QWORD *)&__s = v64;
          v394.__r_.__value_.__r.__words[0] = v63.i64[0];
          std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)&v394);
        }
        else
        {
          *(_QWORD *)v381.i64[1] = v372;
          v45 = *((_QWORD *)&v372 + 1);
          *(_QWORD *)(v44 + 8) = *((_QWORD *)&v372 + 1);
          if (v45)
          {
            v46 = (unint64_t *)(v45 + 8);
            do
              v47 = __ldxr(v46);
            while (__stxr(v47 + 1, v46));
          }
          v48 = (_OWORD *)(v44 + 16);
        }
        v381.i64[1] = (uint64_t)v48;
        if (Phrase)
        {
          *(_OWORD *)&v394.__r_.__value_.__r.__words[1] = 0uLL;
          v394.__r_.__value_.__r.__words[0] = (std::string::size_type)&v394.__r_.__value_.__l.__size_;
          siri::dialogengine::CreateJSONObjectVal((const void ***)&v394, (uint64_t *)&v374);
          std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)v394.__r_.__value_.__l.__size_);
          v65 = *(_QWORD *)(a2 + 504);
          v66 = *(std::__shared_weak_count **)(a2 + 512);
          v373.__r_.__value_.__r.__words[0] = v65;
          v373.__r_.__value_.__l.__size_ = (std::string::size_type)v66;
          if (v66)
          {
            v67 = (unint64_t *)&v66->__shared_owners_;
            do
              v68 = __ldxr(v67);
            while (__stxr(v68 + 1, v67));
          }
          v69.n128_f64[0] = siri::dialogengine::File::GetOrCreateId(v65, (uint64_t)Phrase, 1, 0, (uint64_t)&v394);
          if (v66)
          {
            v70 = (unint64_t *)&v66->__shared_owners_;
            do
              v71 = __ldaxr(v70);
            while (__stlxr(v71 - 1, v70));
            if (!v71)
            {
              ((void (*)(std::__shared_weak_count *, __n128))v66->__on_zero_shared)(v66, v69);
              std::__shared_weak_count::__release_weak(v66);
            }
          }
          v72 = (std::__shared_weak_count *)v374.__r_.__value_.__l.__size_;
          v364 = *(_OWORD *)&v374.__r_.__value_.__l.__data_;
          if (v374.__r_.__value_.__l.__size_)
          {
            v73 = (unint64_t *)(v374.__r_.__value_.__l.__size_ + 8);
            do
              v74 = __ldxr(v73);
            while (__stxr(v74 + 1, v73));
          }
          siri::dialogengine::Group::Expand(Phrase, a2, &v364, &v394, a5, v13, v69);
          if (v72)
          {
            v75 = (unint64_t *)&v72->__shared_owners_;
            do
              v76 = __ldaxr(v75);
            while (__stlxr(v76 - 1, v75));
            if (!v76)
            {
              ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
              std::__shared_weak_count::__release_weak(v72);
            }
          }
          v363 = v372;
          if (*((_QWORD *)&v372 + 1))
          {
            v77 = (unint64_t *)(*((_QWORD *)&v372 + 1) + 8);
            do
              v78 = __ldxr(v77);
            while (__stxr(v78 + 1, v77));
          }
          v79 = (std::__shared_weak_count *)v374.__r_.__value_.__l.__size_;
          v362 = *(_OWORD *)&v374.__r_.__value_.__l.__data_;
          if (v374.__r_.__value_.__l.__size_)
          {
            v80 = (unint64_t *)(v374.__r_.__value_.__l.__size_ + 8);
            do
              v81 = __ldxr(v80);
            while (__stxr(v81 + 1, v80));
          }
          siri::dialogengine::InsertJSONObjectVal((const void **)&v363, (uint64_t)&v394, (uint64_t *)&v362);
          if (v79)
          {
            v82 = (unint64_t *)&v79->__shared_owners_;
            do
              v83 = __ldaxr(v82);
            while (__stlxr(v83 - 1, v82));
            if (!v83)
            {
              ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
              std::__shared_weak_count::__release_weak(v79);
            }
          }
          v84 = (std::__shared_weak_count *)*((_QWORD *)&v363 + 1);
          if (*((_QWORD *)&v363 + 1))
          {
            v85 = (unint64_t *)(*((_QWORD *)&v363 + 1) + 8);
            do
              v86 = __ldaxr(v85);
            while (__stlxr(v86 - 1, v85));
            if (!v86)
            {
              ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
              std::__shared_weak_count::__release_weak(v84);
            }
          }
          if (SHIBYTE(v394.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v394.__r_.__value_.__l.__data_);
          v87 = (std::__shared_weak_count *)v374.__r_.__value_.__l.__size_;
          if (v374.__r_.__value_.__l.__size_)
          {
            v88 = (unint64_t *)(v374.__r_.__value_.__l.__size_ + 8);
            do
              v89 = __ldaxr(v88);
            while (__stlxr(v89 - 1, v88));
            if (!v89)
            {
              ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
              std::__shared_weak_count::__release_weak(v87);
            }
          }
        }
        v90 = (std::__shared_weak_count *)*((_QWORD *)&v372 + 1);
        if (*((_QWORD *)&v372 + 1))
        {
          v91 = (unint64_t *)(*((_QWORD *)&v372 + 1) + 8);
          do
            v92 = __ldaxr(v91);
          while (__stlxr(v92 - 1, v91));
LABEL_259:
          if (!v92)
          {
            ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
            std::__shared_weak_count::__release_weak(v90);
          }
        }
        goto LABEL_261;
      }
      if (v11)
      {
        if (a4)
        {
          (*(void (**)(std::string *__return_ptr, char *, uint64_t))(*(_QWORD *)v11 + 24))(&v394, v11, a2);
          if ((SHIBYTE(v396) & 0x80000000) == 0)
          {
            *(_OWORD *)&v390.__r_.__value_.__l.__data_ = __s;
            v19 = v396;
            goto LABEL_39;
          }
          std::string::__init_copy_ctor_external(&v390, (const std::string::value_type *)__s, *((std::string::size_type *)&__s + 1));
        }
        else
        {
          (*(void (**)(std::string *__return_ptr, char *, uint64_t))(*(_QWORD *)v11 + 24))(&v394, v11, a2);
          if (SHIBYTE(v394.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(&v390, v394.__r_.__value_.__l.__data_, v394.__r_.__value_.__l.__size_);
          }
          else
          {
            *(_OWORD *)&v390.__r_.__value_.__l.__data_ = *(_OWORD *)&v394.__r_.__value_.__l.__data_;
            v19 = v394.__r_.__value_.__r.__words[2];
LABEL_39:
            v390.__r_.__value_.__r.__words[2] = v19;
          }
        }
        if (v406 < 0)
          operator delete(__p[0]);
        if (v404 < 0)
          operator delete(v403[0]);
        if (SHIBYTE(v402) < 0)
          operator delete(v401);
        if (v400 < 0)
          operator delete(*((void **)&v398 + 1));
        if (SBYTE7(v398) < 0)
          operator delete(v397);
        if (SHIBYTE(v396) < 0)
          operator delete((void *)__s);
        if (SHIBYTE(v394.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v394.__r_.__value_.__l.__data_);
        MEMORY[0x1C3B8D53C](&v392, "var");
        v95 = v11 + 200;
        if (v11[223] < 0)
        {
          std::string::__init_copy_ctor_external(&v394, *((const std::string::value_type **)v11 + 25), *((_QWORD *)v11 + 26));
        }
        else
        {
          *(_OWORD *)&v394.__r_.__value_.__l.__data_ = *v95;
          v394.__r_.__value_.__r.__words[2] = *((_QWORD *)v11 + 27);
        }
        v96 = v11[247];
        v389 = v394;
        v97 = v11 + 224;
        if (v96 < 0)
        {
          std::string::__init_copy_ctor_external(&v394, *((const std::string::value_type **)v11 + 28), *((_QWORD *)v11 + 29));
        }
        else
        {
          *(_OWORD *)&v394.__r_.__value_.__l.__data_ = *v97;
          v394.__r_.__value_.__r.__words[2] = *((_QWORD *)v11 + 30);
        }
        v98 = v11[223];
        v375 = v394;
        if (v98 < 0)
        {
          std::string::__init_copy_ctor_external(&v373, *((const std::string::value_type **)v11 + 25), *((_QWORD *)v11 + 26));
        }
        else
        {
          *(_OWORD *)&v373.__r_.__value_.__l.__data_ = *v95;
          v373.__r_.__value_.__r.__words[2] = *((_QWORD *)v11 + 27);
        }
        siri::dialogengine::CreateJSONStringVal((uint64_t)&v373, (uint64_t *)&v371);
        std::string::basic_string[abi:ne180100]<0>(&v394, "name");
        __s = v371;
        v371 = 0uLL;
        if (v11[247] < 0)
        {
          std::string::__init_copy_ctor_external(&v369, *((const std::string::value_type **)v11 + 28), *((_QWORD *)v11 + 29));
        }
        else
        {
          *(_OWORD *)&v369.__r_.__value_.__l.__data_ = *v97;
          v369.__r_.__value_.__r.__words[2] = *((_QWORD *)v11 + 30);
        }
        siri::dialogengine::CreateJSONStringVal((uint64_t)&v369, (uint64_t *)&v370);
        std::string::basic_string[abi:ne180100]<0>(&v396, "id");
        v398 = v370;
        v370 = 0uLL;
        std::string::basic_string[abi:ne180100]<0>(v366, "var");
        siri::dialogengine::CreateJSONStringVal((uint64_t)v366, (uint64_t *)&v368);
        std::string::basic_string[abi:ne180100]<0>(&v399, "type");
        v402 = v368;
        v368 = 0uLL;
        siri::dialogengine::CreateJSONStringVal((uint64_t)&v390, (uint64_t *)&v365);
        std::string::basic_string[abi:ne180100]<0>(v403, "expandedValue");
        *(_OWORD *)__p = v365;
        v365 = 0uLL;
        std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100]((uint64_t)&v374, (const void **)&v394.__r_.__value_.__l.__data_, 4);
        siri::dialogengine::CreateJSONObjectVal((const void ***)&v374, (uint64_t *)&v372);
        std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)v374.__r_.__value_.__l.__size_);
        for (j = 0; j != -20; j -= 5)
        {
          std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&__p[j]);
          if (*(&v404 + j * 8) < 0)
            operator delete(v403[j]);
        }
        v100 = (std::__shared_weak_count *)*((_QWORD *)&v365 + 1);
        if (*((_QWORD *)&v365 + 1))
        {
          v101 = (unint64_t *)(*((_QWORD *)&v365 + 1) + 8);
          do
            v102 = __ldaxr(v101);
          while (__stlxr(v102 - 1, v101));
          if (!v102)
          {
            ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
            std::__shared_weak_count::__release_weak(v100);
          }
        }
        v103 = (std::__shared_weak_count *)*((_QWORD *)&v368 + 1);
        if (*((_QWORD *)&v368 + 1))
        {
          v104 = (unint64_t *)(*((_QWORD *)&v368 + 1) + 8);
          do
            v105 = __ldaxr(v104);
          while (__stlxr(v105 - 1, v104));
          if (!v105)
          {
            ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
            std::__shared_weak_count::__release_weak(v103);
          }
        }
        if (v367 < 0)
          operator delete(v366[0]);
        v106 = (std::__shared_weak_count *)*((_QWORD *)&v370 + 1);
        if (*((_QWORD *)&v370 + 1))
        {
          v107 = (unint64_t *)(*((_QWORD *)&v370 + 1) + 8);
          do
            v108 = __ldaxr(v107);
          while (__stlxr(v108 - 1, v107));
          if (!v108)
          {
            ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
            std::__shared_weak_count::__release_weak(v106);
          }
        }
        if (SHIBYTE(v369.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v369.__r_.__value_.__l.__data_);
        v109 = (std::__shared_weak_count *)*((_QWORD *)&v371 + 1);
        if (*((_QWORD *)&v371 + 1))
        {
          v110 = (unint64_t *)(*((_QWORD *)&v371 + 1) + 8);
          do
            v111 = __ldaxr(v110);
          while (__stlxr(v111 - 1, v110));
          if (!v111)
          {
            ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
            std::__shared_weak_count::__release_weak(v109);
          }
        }
        if (SHIBYTE(v373.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v373.__r_.__value_.__l.__data_);
        v112 = v379.i64[1];
        if (v379.i64[1] >= (unint64_t)v380)
        {
          v116 = (v379.i64[1] - v379.i64[0]) >> 4;
          v117 = v116 + 1;
          if ((unint64_t)(v116 + 1) >> 60)
            std::vector<BOOL>::__throw_length_error[abi:ne180100]();
          v118 = (uint64_t)&v380[-v379.i64[0]];
          if ((uint64_t)&v380[-v379.i64[0]] >> 3 > v117)
            v117 = v118 >> 3;
          if ((unint64_t)v118 >= 0x7FFFFFFFFFFFFFF0)
            v119 = 0xFFFFFFFFFFFFFFFLL;
          else
            v119 = v117;
          *((_QWORD *)&__s + 1) = &v380;
          v120 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v119);
          v122 = &v120[16 * v116];
          v123 = *((_QWORD *)&v372 + 1);
          *(_OWORD *)v122 = v372;
          if (v123)
          {
            v124 = (unint64_t *)(v123 + 8);
            do
              v125 = __ldxr(v124);
            while (__stxr(v125 + 1, v124));
          }
          v126 = (_QWORD *)v379.i64[1];
          v127 = (_QWORD *)v379.i64[0];
          if (v379.i64[1] == v379.i64[0])
          {
            v130 = vdupq_n_s64(v379.u64[1]);
            v128 = &v120[16 * v116];
          }
          else
          {
            v128 = &v120[16 * v116];
            do
            {
              v129 = *((_OWORD *)v126 - 1);
              v126 -= 2;
              *((_OWORD *)v128 - 1) = v129;
              v128 -= 16;
              *v126 = 0;
              v126[1] = 0;
            }
            while (v126 != v127);
            v130 = v379;
          }
          v115 = v122 + 16;
          v379.i64[0] = (uint64_t)v128;
          v379.i64[1] = (uint64_t)(v122 + 16);
          *(int64x2_t *)&v394.__r_.__value_.__r.__words[1] = v130;
          v131 = v380;
          v380 = &v120[16 * v121];
          *(_QWORD *)&__s = v131;
          v394.__r_.__value_.__r.__words[0] = v130.i64[0];
          std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)&v394);
          v90 = (std::__shared_weak_count *)*((_QWORD *)&v372 + 1);
        }
        else
        {
          *(_QWORD *)v379.i64[1] = v372;
          v90 = (std::__shared_weak_count *)*((_QWORD *)&v372 + 1);
          *(_QWORD *)(v112 + 8) = *((_QWORD *)&v372 + 1);
          if (v90)
          {
            v113 = (unint64_t *)&v90->__shared_owners_;
            do
              v114 = __ldxr(v113);
            while (__stxr(v114 + 1, v113));
          }
          v115 = (_OWORD *)(v112 + 16);
        }
        v379.i64[1] = (uint64_t)v115;
        if (v90)
        {
          v132 = (unint64_t *)&v90->__shared_owners_;
          do
            v92 = __ldaxr(v132);
          while (__stlxr(v92 - 1, v132));
          goto LABEL_259;
        }
LABEL_261:
        if (SHIBYTE(v390.__r_.__value_.__r.__words[2]) < 0)
        {
          v133 = (void *)v390.__r_.__value_.__r.__words[0];
LABEL_263:
          operator delete(v133);
          goto LABEL_264;
        }
        goto LABEL_264;
      }
      if (!v12)
        break;
      MEMORY[0x1C3B8D53C](&v392, "tag");
      siri::dialogengine::SpeakableString::SpeakableString(&v394, (const siri::dialogengine::SpeakableString *)((char *)*v7 + 8));
      if (SHIBYTE(v394.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v390, v394.__r_.__value_.__l.__data_, v394.__r_.__value_.__l.__size_);
      else
        v390 = v394;
      v389 = v390;
      *((_BYTE *)&v390.__r_.__value_.__s + 23) = 0;
      v390.__r_.__value_.__s.__data_[0] = 0;
      if (v406 < 0)
        operator delete(__p[0]);
      if (v404 < 0)
        operator delete(v403[0]);
      if (SHIBYTE(v402) < 0)
        operator delete(v401);
      if (v400 < 0)
        operator delete(*((void **)&v398 + 1));
      if (SBYTE7(v398) < 0)
        operator delete(v397);
      if (SHIBYTE(v396) < 0)
        operator delete((void *)__s);
      if (SHIBYTE(v394.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v394.__r_.__value_.__l.__data_);
        if (!(_DWORD)a6)
          goto LABEL_264;
      }
      else if (!(_DWORD)a6)
      {
        goto LABEL_264;
      }
      if (SHIBYTE(v389.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v389.__r_.__value_.__l.__size_ == 5)
        {
          if (*(_DWORD *)v389.__r_.__value_.__l.__data_ != 1953525564
            || *(_BYTE *)(v389.__r_.__value_.__r.__words[0] + 4) != 62)
          {
            goto LABEL_264;
          }
LABEL_399:
          memset(&v374, 0, sizeof(v374));
          LODWORD(v390.__r_.__value_.__l.__data_) = v8;
          v391 = 0;
          *(_OWORD *)&v390.__r_.__value_.__r.__words[1] = 0uLL;
          v184 = v384;
          if ((unint64_t)v384 >= v385)
          {
            v186 = ((uint64_t)v384 - v383) >> 5;
            v187 = v186 + 1;
            if ((unint64_t)(v186 + 1) >> 59)
              std::vector<BOOL>::__throw_length_error[abi:ne180100]();
            v188 = v385 - v383;
            if ((uint64_t)(v385 - v383) >> 4 > v187)
              v187 = v188 >> 4;
            if ((unint64_t)v188 >= 0x7FFFFFFFFFFFFFE0)
              v189 = 0x7FFFFFFFFFFFFFFLL;
            else
              v189 = v187;
            *((_QWORD *)&__s + 1) = &v385;
            v190 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::RegEx>>(v189);
            v191 = (std::string::size_type)&v190[32 * v186];
            v394.__r_.__value_.__r.__words[0] = (std::string::size_type)v190;
            v394.__r_.__value_.__l.__size_ = v191;
            *(_QWORD *)&__s = &v190[32 * v192];
            *(_DWORD *)v191 = v390.__r_.__value_.__l.__data_;
            *(_QWORD *)(v191 + 16) = 0;
            *(_QWORD *)(v191 + 24) = 0;
            *(_QWORD *)(v191 + 8) = 0;
            *(_OWORD *)(v191 + 8) = *(_OWORD *)&v390.__r_.__value_.__r.__words[1];
            *(_QWORD *)(v191 + 24) = v391;
            *(_OWORD *)&v390.__r_.__value_.__r.__words[1] = 0uLL;
            v391 = 0;
            v394.__r_.__value_.__r.__words[2] = v191 + 32;
            std::vector<std::pair<int,std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>>>::__swap_out_circular_buffer(&v383, &v394);
            v185 = v384;
            std::__split_buffer<std::pair<int,std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>>>::~__split_buffer((uint64_t)&v394);
          }
          else
          {
            *v384 = v8;
            v184[2] = 0;
            v184[3] = 0;
            v184[1] = 0;
            *(_OWORD *)(v184 + 1) = *(_OWORD *)&v390.__r_.__value_.__r.__words[1];
            v184[3] = v391;
            *(_OWORD *)&v390.__r_.__value_.__r.__words[1] = 0uLL;
            v391 = 0;
            v185 = v184 + 4;
          }
          v384 = v185;
          v394.__r_.__value_.__r.__words[0] = (std::string::size_type)&v390.__r_.__value_.__l.__size_;
          std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v394);
          v394.__r_.__value_.__r.__words[0] = (std::string::size_type)&v374;
          std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v394);
          v336 = 1;
          goto LABEL_264;
        }
        if (v389.__r_.__value_.__l.__size_ == 6)
        {
          v151 = (std::string *)v389.__r_.__value_.__r.__words[0];
LABEL_364:
          v179 = 1009741680;
          v180 = bswap32(v151->__r_.__value_.__l.__data_);
          if (v180 == 1009741680
            && (v180 = bswap32(WORD2(v151->__r_.__value_.__r.__words[0])) >> 16, v179 = 29758, v180 == 29758))
          {
            v181 = 0;
          }
          else if (v180 < v179)
          {
            v181 = -1;
          }
          else
          {
            v181 = 1;
          }
          v336 &= v181 != 0;
        }
      }
      else
      {
        if (HIBYTE(v389.__r_.__value_.__r.__words[2]) == 5)
        {
          v182 = LODWORD(v389.__r_.__value_.__l.__data_) == 1953525564 && v389.__r_.__value_.__s.__data_[4] == 62;
          if (!v182)
            goto LABEL_264;
          goto LABEL_399;
        }
        if (HIBYTE(v389.__r_.__value_.__r.__words[2]) == 6)
        {
          v151 = &v389;
          goto LABEL_364;
        }
      }
LABEL_264:
      siri::dialogengine::CreateJSONStringVal((uint64_t)&v375, (uint64_t *)&v373);
      std::string::basic_string[abi:ne180100]<0>(&v394, "id");
      __s = *(_OWORD *)&v373.__r_.__value_.__l.__data_;
      *(_OWORD *)&v373.__r_.__value_.__l.__data_ = 0uLL;
      siri::dialogengine::CreateJSONStringVal((uint64_t)&v392, (uint64_t *)&v369);
      std::string::basic_string[abi:ne180100]<0>(&v396, "type");
      v398 = *(_OWORD *)&v369.__r_.__value_.__l.__data_;
      *(_OWORD *)&v369.__r_.__value_.__l.__data_ = 0uLL;
      siri::dialogengine::CreateJSONStringVal((uint64_t)&v389, (uint64_t *)v366);
      std::string::basic_string[abi:ne180100]<0>(&v399, "value");
      v402 = *(_OWORD *)v366;
      v366[0] = 0;
      v366[1] = 0;
      std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100]((uint64_t)&v390, (const void **)&v394.__r_.__value_.__l.__data_, 3);
      siri::dialogengine::CreateJSONObjectVal((const void ***)&v390, (uint64_t *)&v374);
      std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)v390.__r_.__value_.__l.__size_);
      for (k = 0; k != -15; k -= 5)
      {
        std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v403[k - 2]);
        if (*((char *)&v401 + k * 8 + 7) < 0)
          operator delete(*(void **)((char *)&v399 + k * 8));
      }
      v135 = (std::__shared_weak_count *)v373.__r_.__value_.__l.__size_;
      if (!v373.__r_.__value_.__l.__size_)
        goto LABEL_272;
      v136 = (unint64_t *)(v373.__r_.__value_.__l.__size_ + 8);
      do
        v137 = __ldaxr(v136);
      while (__stlxr(v137 - 1, v136));
      if (!v137)
      {
        ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
        std::__shared_weak_count::__release_weak(v135);
        if ((a6 & 1) == 0)
          goto LABEL_326;
      }
      else
      {
LABEL_272:
        if ((a6 & 1) == 0)
          goto LABEL_326;
      }
      if ((v336 & 1) != 0)
        goto LABEL_274;
      std::string::basic_string[abi:ne180100]<0>(&v394, "</opt>");
      v139 = siri::dialogengine::StringsEqual((uint64_t)&v389, (uint64_t)&v394);
      v140 = v139;
      if (SHIBYTE(v394.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v394.__r_.__value_.__l.__data_);
        if (!v140)
        {
LABEL_283:
          v143 = v377;
          if ((unint64_t)v377 >= v378)
          {
            v145 = v376;
            v146 = ((char *)v377 - (_BYTE *)v376) >> 2;
            v147 = v146 + 1;
            if ((unint64_t)(v146 + 1) >> 62)
              std::vector<BOOL>::__throw_length_error[abi:ne180100]();
            v148 = v378 - (_QWORD)v376;
            if ((uint64_t)(v378 - (_QWORD)v376) >> 1 > v147)
              v147 = v148 >> 1;
            if ((unint64_t)v148 >= 0x7FFFFFFFFFFFFFFCLL)
              v149 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v149 = v147;
            if (v149)
            {
              v150 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v378, v149);
              v143 = v377;
              v145 = v376;
            }
            else
            {
              v150 = 0;
            }
            v152 = &v150[4 * v146];
            *(_DWORD *)v152 = v8;
            v144 = v152 + 4;
            while (v143 != v145)
            {
              v153 = *--v143;
              *((_DWORD *)v152 - 1) = v153;
              v152 -= 4;
            }
            v376 = v152;
            v377 = v144;
            v378 = (unint64_t)&v150[4 * v149];
            if (v145)
              operator delete(v145);
          }
          else
          {
            *v377 = v8;
            v144 = v143 + 1;
          }
          v377 = v144;
LABEL_326:
          v138 = &v386;
LABEL_327:
          v154 = v138[2];
          v155 = v138[1];
          if (v155 >= v154)
          {
            v160 = (v155 - *v138) >> 4;
            v161 = v160 + 1;
            if ((unint64_t)(v160 + 1) >> 60)
              std::vector<BOOL>::__throw_length_error[abi:ne180100]();
            v162 = v154 - *v138;
            if (v162 >> 3 > v161)
              v161 = v162 >> 3;
            if ((unint64_t)v162 >= 0x7FFFFFFFFFFFFFF0)
              v163 = 0xFFFFFFFFFFFFFFFLL;
            else
              v163 = v161;
            *((_QWORD *)&__s + 1) = v138 + 2;
            v164 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v163);
            v166 = &v164[16 * v160];
            v167 = v374.__r_.__value_.__l.__size_;
            *(_OWORD *)v166 = *(_OWORD *)&v374.__r_.__value_.__l.__data_;
            if (v167)
            {
              v168 = (unint64_t *)(v167 + 8);
              do
                v169 = __ldxr(v168);
              while (__stxr(v169 + 1, v168));
            }
            v171 = *v138;
            v170 = v138[1];
            if (v170 == *v138)
            {
              v174 = vdupq_n_s64((unint64_t)v170);
              v172 = &v164[16 * v160];
            }
            else
            {
              v172 = &v164[16 * v160];
              do
              {
                v173 = *((_OWORD *)v170 - 1);
                v170 -= 16;
                *((_OWORD *)v172 - 1) = v173;
                v172 -= 16;
                *(_QWORD *)v170 = 0;
                *((_QWORD *)v170 + 1) = 0;
              }
              while (v170 != v171);
              v174 = *(int64x2_t *)v138;
            }
            v159 = v166 + 16;
            *v138 = v172;
            v138[1] = v166 + 16;
            *(int64x2_t *)&v394.__r_.__value_.__r.__words[1] = v174;
            v175 = v138[2];
            v138[2] = &v164[16 * v165];
            *(_QWORD *)&__s = v175;
            v394.__r_.__value_.__r.__words[0] = v174.i64[0];
            std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)&v394);
          }
          else
          {
            *(_QWORD *)v155 = v374.__r_.__value_.__r.__words[0];
            v156 = v374.__r_.__value_.__l.__size_;
            *((_QWORD *)v155 + 1) = v374.__r_.__value_.__l.__size_;
            if (v156)
            {
              v157 = (unint64_t *)(v156 + 8);
              do
                v158 = __ldxr(v157);
              while (__stxr(v158 + 1, v157));
            }
            v159 = v155 + 16;
          }
          v138[1] = v159;
          goto LABEL_348;
        }
      }
      else if (!v139)
      {
        goto LABEL_283;
      }
      std::string::basic_string[abi:ne180100]<0>(&v394, "</opt>");
      v141 = siri::dialogengine::StringsEqual((uint64_t)&v389, (uint64_t)&v394);
      v142 = v141;
      if (SHIBYTE(v394.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v394.__r_.__value_.__l.__data_);
        if (v142)
        {
LABEL_274:
          v138 = (char **)(v384 - 6);
          goto LABEL_327;
        }
      }
      else if (v141)
      {
        goto LABEL_274;
      }
LABEL_348:
      v176 = (std::__shared_weak_count *)v374.__r_.__value_.__l.__size_;
      if (v374.__r_.__value_.__l.__size_)
      {
        v177 = (unint64_t *)(v374.__r_.__value_.__l.__size_ + 8);
        do
          v178 = __ldaxr(v177);
        while (__stlxr(v178 - 1, v177));
        if (!v178)
        {
          ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
          std::__shared_weak_count::__release_weak(v176);
        }
      }
      if (SHIBYTE(v375.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v375.__r_.__value_.__l.__data_);
      if (SHIBYTE(v389.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v389.__r_.__value_.__l.__data_);
      if (SHIBYTE(v392.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v392.__r_.__value_.__l.__data_);
      ++v8;
      v7 += 2;
      if (v7 == (const void **)size)
        goto LABEL_409;
    }
    MEMORY[0x1C3B8D53C](&v392, "text");
    if (a4)
    {
      siri::dialogengine::SpeakableString::SpeakableString(&v394, (const siri::dialogengine::SpeakableString *)((char *)*v7 + 8));
      if ((SHIBYTE(v396) & 0x80000000) == 0)
      {
        v93 = v396;
        v390.__r_.__value_.__r.__words[2] = v396;
        v94 = __s;
LABEL_318:
        *(_OWORD *)&v390.__r_.__value_.__l.__data_ = v94;
        *(_OWORD *)&v389.__r_.__value_.__l.__data_ = v94;
        goto LABEL_374;
      }
      std::string::__init_copy_ctor_external(&v390, (const std::string::value_type *)__s, *((std::string::size_type *)&__s + 1));
    }
    else
    {
      siri::dialogengine::SpeakableString::SpeakableString(&v394, (const siri::dialogengine::SpeakableString *)((char *)*v7 + 8));
      if ((SHIBYTE(v394.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        v93 = v394.__r_.__value_.__r.__words[2];
        v390.__r_.__value_.__r.__words[2] = v394.__r_.__value_.__r.__words[2];
        v94 = *(_OWORD *)&v394.__r_.__value_.__l.__data_;
        goto LABEL_318;
      }
      std::string::__init_copy_ctor_external(&v390, v394.__r_.__value_.__l.__data_, v394.__r_.__value_.__l.__size_);
    }
    *(_OWORD *)&v389.__r_.__value_.__l.__data_ = *(_OWORD *)&v390.__r_.__value_.__l.__data_;
    v93 = v390.__r_.__value_.__r.__words[2];
LABEL_374:
    v389.__r_.__value_.__r.__words[2] = v93;
    *((_BYTE *)&v390.__r_.__value_.__s + 23) = 0;
    v390.__r_.__value_.__s.__data_[0] = 0;
    if (v406 < 0)
      operator delete(__p[0]);
    if (v404 < 0)
      operator delete(v403[0]);
    if (SHIBYTE(v402) < 0)
      operator delete(v401);
    if (v400 < 0)
      operator delete(*((void **)&v398 + 1));
    if (SBYTE7(v398) < 0)
      operator delete(v397);
    if (SHIBYTE(v396) < 0)
      operator delete((void *)__s);
    if (SHIBYTE(v394.__r_.__value_.__r.__words[2]) < 0)
    {
      v133 = (void *)v394.__r_.__value_.__r.__words[0];
      goto LABEL_263;
    }
    goto LABEL_264;
  }
LABEL_409:
  v394.__r_.__value_.__r.__words[0] = (std::string::size_type)&v393;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v394);
  *(_OWORD *)&v394.__r_.__value_.__r.__words[1] = 0uLL;
  v394.__r_.__value_.__r.__words[0] = (std::string::size_type)&v394.__r_.__value_.__l.__size_;
  siri::dialogengine::CreateJSONObjectVal((const void ***)&v394, (uint64_t *)&v390);
  v193 = a1;
  std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)a1, (__int128 *)&v390);
  v194 = (std::__shared_weak_count *)v390.__r_.__value_.__l.__size_;
  if (v390.__r_.__value_.__l.__size_)
  {
    v195 = (unint64_t *)(v390.__r_.__value_.__l.__size_ + 8);
    do
      v196 = __ldaxr(v195);
    while (__stlxr(v196 - 1, v195));
    if (!v196)
    {
      ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
      std::__shared_weak_count::__release_weak(v194);
    }
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)v394.__r_.__value_.__l.__size_);
  if (v381.i64[0] != v381.i64[1])
  {
    v197 = (std::__shared_weak_count *)a1[1];
    v360 = *a1;
    v361 = v197;
    if (v197)
    {
      v198 = (unint64_t *)&v197->__shared_owners_;
      do
        v199 = __ldxr(v198);
      while (__stxr(v199 + 1, v198));
    }
    std::string::basic_string[abi:ne180100]<0>(&v394, "phrases");
    siri::dialogengine::CreateJSONArrayVal(&v381, &v358);
    siri::dialogengine::InsertJSONObjectVal(&v360, (uint64_t)&v394, &v358);
    v200 = v359;
    if (v359)
    {
      v201 = (unint64_t *)&v359->__shared_owners_;
      do
        v202 = __ldaxr(v201);
      while (__stlxr(v202 - 1, v201));
      if (!v202)
      {
        ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
        std::__shared_weak_count::__release_weak(v200);
      }
    }
    if (SHIBYTE(v394.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v394.__r_.__value_.__l.__data_);
    v203 = v361;
    if (v361)
    {
      v204 = (unint64_t *)&v361->__shared_owners_;
      do
        v205 = __ldaxr(v204);
      while (__stlxr(v205 - 1, v204));
      if (!v205)
      {
        ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
        std::__shared_weak_count::__release_weak(v203);
      }
    }
  }
  if (v379.i64[0] == v379.i64[1])
    goto LABEL_445;
  v206 = (std::__shared_weak_count *)a1[1];
  v356 = *a1;
  v357 = v206;
  if (v206)
  {
    v207 = (unint64_t *)&v206->__shared_owners_;
    do
      v208 = __ldxr(v207);
    while (__stxr(v208 + 1, v207));
  }
  std::string::basic_string[abi:ne180100]<0>(&v394, "variables");
  siri::dialogengine::CreateJSONArrayVal(&v379, &v354);
  siri::dialogengine::InsertJSONObjectVal(&v356, (uint64_t)&v394, &v354);
  v209 = v355;
  if (v355)
  {
    v210 = (unint64_t *)&v355->__shared_owners_;
    do
      v211 = __ldaxr(v210);
    while (__stlxr(v211 - 1, v210));
    if (!v211)
    {
      ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
      std::__shared_weak_count::__release_weak(v209);
    }
  }
  if (SHIBYTE(v394.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v394.__r_.__value_.__l.__data_);
  v212 = v357;
  if (!v357)
    goto LABEL_445;
  v213 = (unint64_t *)&v357->__shared_owners_;
  do
    v214 = __ldaxr(v213);
  while (__stlxr(v214 - 1, v213));
  if (v214)
  {
LABEL_445:
    if (!(_DWORD)a6)
      goto LABEL_619;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
    std::__shared_weak_count::__release_weak(v212);
    if (!(_DWORD)a6)
      goto LABEL_619;
  }
  v215 = (char *)a1[1];
  *(_QWORD *)&v353 = *a1;
  *((_QWORD *)&v353 + 1) = v215;
  if (v215)
  {
    v216 = (unint64_t *)(v215 + 8);
    do
      v217 = __ldxr(v216);
    while (__stxr(v217 + 1, v216));
  }
  v350 = 0;
  v351 = 0;
  v352 = 0;
  std::vector<std::pair<int,std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>>>::__init_with_size[abi:ne180100]<std::pair<int,std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>>*,std::pair<int,std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>>*>((uint64_t)&v350, v383, (uint64_t)v384, ((uint64_t)v384 - v383) >> 5);
  v347 = 0;
  v348 = 0;
  v349 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v347, v376, (uint64_t)v377, ((char *)v377 - (_BYTE *)v376) >> 2);
  memset(&v375, 0, sizeof(v375));
  std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::ChunkText>*,std::shared_ptr<siri::dialogengine::ChunkText>*>((char *)&v375, *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 4);
  v339 = *(_OWORD *)&v375.__r_.__value_.__l.__data_;
  memset(&v389, 0, sizeof(v389));
  v219 = v350;
  v218 = v351;
  if (v351 != v350)
  {
    v342 = v375.__r_.__value_.__l.__size_ - v375.__r_.__value_.__r.__words[0];
    v220 = (v351 - v350) >> 5;
    v337 = (uint64_t)(v375.__r_.__value_.__l.__size_ - v375.__r_.__value_.__r.__words[0]) >> 4;
    v221 = 1;
    do
    {
      v182 = v218 == v219;
      v218 = v219;
      if (!v182)
      {
        memset(&v393, 0, sizeof(v393));
        std::vector<BOOL>::vector(&v392, v220);
        v222 = (v392.__r_.__value_.__s.__data_[8] & 0x3F) - v221;
        if (v222 - 63 >= 0)
          v222 -= 63;
        v223 = v222 >> 6;
        v224 = (_QWORD *)(v392.__r_.__value_.__r.__words[0] + 8 * (v392.__r_.__value_.__l.__size_ >> 6) + 8 * v223);
        v225 = (v392.__r_.__value_.__s.__data_[8] - (_BYTE)v221) & 0x3F;
        v226 = (v392.__r_.__value_.__s.__data_[8] & 0x3F) - (v223 << 6);
        v227 = v226 - v225;
        if (v226 != v225)
        {
          if (((v392.__r_.__value_.__s.__data_[8] - (_BYTE)v221) & 0x3F) != 0)
          {
            if ((64 - v225) >= v227)
              v228 = v226 - v225;
            else
              v228 = (64 - v225);
            *v224++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v225 - v228)) & (-1 << v225);
            v227 -= v228;
          }
          v229 = v227 >> 6;
          if (v227 >= 0x40)
            memset(v224, 255, 8 * v229);
          if ((v227 & 0x3F) != 0)
            v224[v229] |= 0xFFFFFFFFFFFFFFFFLL >> -(v227 & 0x3F);
        }
        while (1)
        {
          v230 = 0;
          v231 = -1;
          v232 = v350;
          do
          {
            ++v231;
            if (((*(_QWORD *)(v392.__r_.__value_.__r.__words[0] + ((v231 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v231) & 1) != 0)
            {
              v233 = v232 + v230;
              LODWORD(v390.__r_.__value_.__l.__data_) = *(_DWORD *)v233;
              v391 = 0;
              *(_OWORD *)&v390.__r_.__value_.__r.__words[1] = 0uLL;
              std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::JSONValue>*,std::shared_ptr<siri::dialogengine::JSONValue>*>(&v390.__r_.__value_.__s.__data_[8], *(_QWORD **)(v233 + 8), *(_QWORD **)(v233 + 16), (uint64_t)(*(_QWORD *)(v233 + 16) - *(_QWORD *)(v233 + 8)) >> 4);
              v234 = (_QWORD *)v393.__r_.__value_.__l.__size_;
              if (v393.__r_.__value_.__l.__size_ >= v393.__r_.__value_.__r.__words[2])
              {
                v236 = (uint64_t)(v393.__r_.__value_.__l.__size_ - v393.__r_.__value_.__r.__words[0]) >> 5;
                v237 = v236 + 1;
                if ((unint64_t)(v236 + 1) >> 59)
                  std::vector<BOOL>::__throw_length_error[abi:ne180100]();
                v238 = v393.__r_.__value_.__r.__words[2] - v393.__r_.__value_.__r.__words[0];
                if ((uint64_t)(v393.__r_.__value_.__r.__words[2] - v393.__r_.__value_.__r.__words[0]) >> 4 > v237)
                  v237 = v238 >> 4;
                if ((unint64_t)v238 >= 0x7FFFFFFFFFFFFFE0)
                  v239 = 0x7FFFFFFFFFFFFFFLL;
                else
                  v239 = v237;
                *((_QWORD *)&__s + 1) = (char *)&v393.__r_.__value_.__l + 16;
                v240 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::RegEx>>(v239);
                v241 = (std::string::size_type)&v240[32 * v236];
                v394.__r_.__value_.__r.__words[0] = (std::string::size_type)v240;
                v394.__r_.__value_.__l.__size_ = v241;
                *(_QWORD *)&__s = &v240[32 * v242];
                *(_DWORD *)v241 = v390.__r_.__value_.__l.__data_;
                *(_QWORD *)(v241 + 16) = 0;
                *(_QWORD *)(v241 + 24) = 0;
                *(_QWORD *)(v241 + 8) = 0;
                *(_OWORD *)(v241 + 8) = *(_OWORD *)&v390.__r_.__value_.__r.__words[1];
                *(_QWORD *)(v241 + 24) = v391;
                *(_OWORD *)&v390.__r_.__value_.__r.__words[1] = 0uLL;
                v391 = 0;
                v394.__r_.__value_.__r.__words[2] = v241 + 32;
                std::vector<std::pair<int,std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>>>::__swap_out_circular_buffer((uint64_t *)&v393, &v394);
                v235 = v393.__r_.__value_.__l.__size_;
                std::__split_buffer<std::pair<int,std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>>>::~__split_buffer((uint64_t)&v394);
              }
              else
              {
                *(_DWORD *)v393.__r_.__value_.__l.__size_ = v390.__r_.__value_.__l.__data_;
                v234[2] = 0;
                v234[3] = 0;
                v234[1] = 0;
                *(_OWORD *)(v234 + 1) = *(_OWORD *)&v390.__r_.__value_.__r.__words[1];
                v234[3] = v391;
                *(_OWORD *)&v390.__r_.__value_.__r.__words[1] = 0uLL;
                v391 = 0;
                v235 = (std::string::size_type)(v234 + 4);
              }
              v393.__r_.__value_.__l.__size_ = v235;
              v394.__r_.__value_.__r.__words[0] = (std::string::size_type)&v390.__r_.__value_.__l.__size_;
              std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v394);
              v232 = v350;
            }
            v230 += 32;
          }
          while (v231 < (v351 - v232) >> 5);
          v243 = v389.__r_.__value_.__l.__size_;
          if (v389.__r_.__value_.__l.__size_ >= v389.__r_.__value_.__r.__words[2])
          {
            v245 = 0xAAAAAAAAAAAAAAABLL
                 * ((uint64_t)(v389.__r_.__value_.__l.__size_ - v389.__r_.__value_.__r.__words[0]) >> 3);
            v246 = v245 + 1;
            if (v245 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<BOOL>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556
               * ((uint64_t)(v389.__r_.__value_.__r.__words[2] - v389.__r_.__value_.__r.__words[0]) >> 3) > v246)
              v246 = 0x5555555555555556
                   * ((uint64_t)(v389.__r_.__value_.__r.__words[2] - v389.__r_.__value_.__r.__words[0]) >> 3);
            v247 = 0xAAAAAAAAAAAAAAABLL
                 * ((uint64_t)(v389.__r_.__value_.__r.__words[2] - v389.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555
                 ? 0xAAAAAAAAAAAAAAALL
                 : v246;
            *((_QWORD *)&__s + 1) = (char *)&v389.__r_.__value_.__l + 16;
            if (v247)
            {
              if (v247 > 0xAAAAAAAAAAAAAAALL)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v248 = (char *)operator new(24 * v247);
            }
            else
            {
              v248 = 0;
            }
            v249 = &v248[24 * v245];
            v394.__r_.__value_.__r.__words[0] = (std::string::size_type)v248;
            v394.__r_.__value_.__l.__size_ = (std::string::size_type)v249;
            v394.__r_.__value_.__r.__words[2] = (std::string::size_type)v249;
            *(_QWORD *)&__s = &v248[24 * v247];
            *((_QWORD *)v249 + 1) = 0;
            *((_QWORD *)v249 + 2) = 0;
            *(_QWORD *)v249 = 0;
            std::vector<std::pair<int,std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>>>::__init_with_size[abi:ne180100]<std::pair<int,std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>>*,std::pair<int,std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>>*>((uint64_t)v249, (uint64_t)v393.__r_.__value_.__l.__data_, v393.__r_.__value_.__l.__size_, (uint64_t)(v393.__r_.__value_.__l.__size_ - v393.__r_.__value_.__r.__words[0]) >> 5);
            v250 = v394.__r_.__value_.__l.__size_;
            v244 = v394.__r_.__value_.__r.__words[2] + 24;
            v394.__r_.__value_.__r.__words[2] += 24;
            v251 = (_QWORD *)v389.__r_.__value_.__l.__size_;
            v252 = v389.__r_.__value_.__r.__words[0];
            if (v389.__r_.__value_.__l.__size_ == v389.__r_.__value_.__r.__words[0])
            {
              v254 = vdupq_n_s64(v389.__r_.__value_.__l.__size_);
            }
            else
            {
              do
              {
                *(_QWORD *)(v250 - 24) = 0;
                *(_QWORD *)(v250 - 16) = 0;
                v250 -= 24;
                *(_QWORD *)(v250 + 16) = 0;
                v253 = *(_OWORD *)(v251 - 3);
                v251 -= 3;
                *(_OWORD *)v250 = v253;
                *(_QWORD *)(v250 + 16) = v251[2];
                *v251 = 0;
                v251[1] = 0;
                v251[2] = 0;
              }
              while (v251 != (_QWORD *)v252);
              v254 = *(int64x2_t *)&v389.__r_.__value_.__l.__data_;
              v244 = v394.__r_.__value_.__r.__words[2];
            }
            v389.__r_.__value_.__r.__words[0] = v250;
            v389.__r_.__value_.__l.__size_ = v244;
            *(int64x2_t *)&v394.__r_.__value_.__r.__words[1] = v254;
            v255 = v389.__r_.__value_.__r.__words[2];
            v389.__r_.__value_.__r.__words[2] = __s;
            *(_QWORD *)&__s = v255;
            v394.__r_.__value_.__r.__words[0] = v254.i64[0];
            std::__split_buffer<std::vector<std::pair<int,std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>>>>::~__split_buffer((uint64_t)&v394);
          }
          else
          {
            *(_QWORD *)v389.__r_.__value_.__l.__size_ = 0;
            *(_QWORD *)(v243 + 8) = 0;
            *(_QWORD *)(v243 + 16) = 0;
            std::vector<std::pair<int,std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>>>::__init_with_size[abi:ne180100]<std::pair<int,std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>>*,std::pair<int,std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>>*>(v243, (uint64_t)v393.__r_.__value_.__l.__data_, v393.__r_.__value_.__l.__size_, (uint64_t)(v393.__r_.__value_.__l.__size_ - v393.__r_.__value_.__r.__words[0]) >> 5);
            v244 = v243 + 24;
          }
          v389.__r_.__value_.__l.__size_ = v244;
          v256 = v393.__r_.__value_.__l.__size_;
          v257 = v393.__r_.__value_.__r.__words[0];
          if (v393.__r_.__value_.__l.__size_ != v393.__r_.__value_.__r.__words[0])
          {
            do
            {
              v258 = v256 - 32;
              v394.__r_.__value_.__r.__words[0] = v256 - 24;
              std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v394);
              v256 = v258;
            }
            while (v258 != v257);
          }
          v393.__r_.__value_.__l.__size_ = v257;
          v259 = (void *)v392.__r_.__value_.__r.__words[0];
          v260 = v392.__r_.__value_.__s.__data_[8] & 0x3F;
          if (v392.__r_.__value_.__l.__size_ <= 0x3F && v260 == 0)
            break;
          v262 = (uint64_t *)(v392.__r_.__value_.__r.__words[0] + 8 * (v392.__r_.__value_.__l.__size_ >> 6));
          v263 = (v392.__r_.__value_.__s.__data_[8] & 0x3F) != 0 ? 0 : -1;
          v264 = &v262[v263];
          v265 = (v392.__r_.__value_.__s.__data_[8] & 0x3F) != 0 ? v260 - 1 : 63;
          if ((uint64_t *)v392.__r_.__value_.__l.__data_ == v264 && v265 == 0)
            break;
          v267 = *v264;
          while (1)
          {
            v268 = v265 ? 0 : -1;
            v269 = &v264[v268];
            v270 = v265 ? v265 - 1 : 63;
            if ((((unint64_t)*v269 >> v270) & 1) == 0 && (v267 & (1 << v265)) != 0)
              break;
            v271 = v269 == (uint64_t *)v392.__r_.__value_.__l.__data_ && v270 == 0;
            v267 = *v269;
            v264 = v269;
            v265 = v270;
            if (v271)
            {
              std::__reverse[abi:ne180100]<std::_ClassicAlgPolicy,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>((uint64_t *)v392.__r_.__value_.__l.__data_, 0, (uint64_t *)(v392.__r_.__value_.__r.__words[0] + 8 * (v392.__r_.__value_.__l.__size_ >> 6)), v392.__r_.__value_.__s.__data_[8] & 0x3F);
              v259 = (void *)v392.__r_.__value_.__r.__words[0];
              goto LABEL_534;
            }
          }
          v272 = (uint64_t *)(v392.__r_.__value_.__r.__words[0] + 8 * (v392.__r_.__value_.__l.__size_ >> 6));
          v273 = v392.__r_.__value_.__s.__data_[8] & 0x3F;
          do
          {
            if (v273)
              v274 = 0;
            else
              v274 = -1;
            v272 += v274;
            if (v273)
              --v273;
            else
              v273 = 63;
          }
          while ((((unint64_t)*v272 >> v273) & 1) == 0);
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul> &,std::__bit_iterator<std::vector<BOOL>,false,0ul> &>(v269, v270, v272, v273);
          std::__reverse[abi:ne180100]<std::_ClassicAlgPolicy,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(v264, v265, v262, v260);
        }
LABEL_534:
        if (v259)
          operator delete(v259);
        v394.__r_.__value_.__r.__words[0] = (std::string::size_type)&v393;
        std::vector<std::pair<int,std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v394);
        v219 = v350;
        v218 = v351;
      }
      v220 = (v218 - v219) >> 5;
      v275 = v220 > v221++;
    }
    while (v275);
    v277 = v389.__r_.__value_.__l.__size_;
    v276 = (uint64_t *)v389.__r_.__value_.__r.__words[0];
    if (v389.__r_.__value_.__r.__words[0] != v389.__r_.__value_.__l.__size_)
    {
      v278 = 1;
      while (1)
      {
        memset(&v394, 0, sizeof(v394));
        v390.__r_.__value_.__r.__words[0] = (std::string::size_type)&v394;
        v390.__r_.__value_.__s.__data_[8] = 0;
        if (*((_QWORD *)&v339 + 1) == (_QWORD)v339)
        {
          v281 = 0;
          v282 = 0;
        }
        else
        {
          if ((v342 & 0x8000000000000000) != 0)
            std::vector<BOOL>::__throw_length_error[abi:ne180100]();
          v279 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v337);
          v394.__r_.__value_.__r.__words[0] = (std::string::size_type)v279;
          v394.__r_.__value_.__r.__words[2] = (std::string::size_type)&v279[16 * v280];
          bzero(v279, v342);
          v281 = &v279[v342];
          v394.__r_.__value_.__l.__size_ = (std::string::size_type)&v279[v342];
          v282 = v394.__r_.__value_.__r.__words[0];
        }
        v283 = (uint64_t)&v281[-v282];
        if (v283 >= 1)
        {
          v284 = (unint64_t)v283 >> 4;
          do
          {
            *(_OWORD *)&v390.__r_.__value_.__l.__data_ = 0uLL;
            std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100](v282, (__int128 *)&v390);
            v285 = (std::__shared_weak_count *)v390.__r_.__value_.__l.__size_;
            if (v390.__r_.__value_.__l.__size_)
            {
              v286 = (unint64_t *)(v390.__r_.__value_.__l.__size_ + 8);
              do
                v287 = __ldaxr(v286);
              while (__stlxr(v287 - 1, v286));
              if (!v287)
              {
                ((void (*)(std::__shared_weak_count *))v285->__on_zero_shared)(v285);
                std::__shared_weak_count::__release_weak(v285);
              }
            }
            v282 += 16;
            v275 = v284-- <= 1;
          }
          while (!v275);
        }
        memset(&v390, 0, sizeof(v390));
        std::vector<std::pair<int,std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>>>::__init_with_size[abi:ne180100]<std::pair<int,std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>>*,std::pair<int,std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>>*>((uint64_t)&v390, *v276, v276[1], (v276[1] - *v276) >> 5);
        v288 = v386;
        if (v387 != v386)
        {
          v289 = 0;
          v290 = 0;
          do
          {
            std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100]((_QWORD *)(v394.__r_.__value_.__r.__words[0] + 16 * *((int *)v347 + v290++)), *(_QWORD *)&v288[v289], *(_QWORD *)&v288[v289 + 8]);
            v288 = v386;
            v289 += 16;
          }
          while (v290 < (v387 - v386) >> 4);
        }
        v292 = v390.__r_.__value_.__l.__size_;
        for (m = (int *)v390.__r_.__value_.__r.__words[0]; m != (int *)v292; m += 8)
        {
          v293 = (uint64_t *)*((_QWORD *)m + 1);
          v294 = (uint64_t *)*((_QWORD *)m + 2);
          if (v293 != v294)
          {
            v295 = *m;
            v296 = 16 * v295;
            do
            {
              if (v295 < (uint64_t)(v394.__r_.__value_.__l.__size_ - v394.__r_.__value_.__r.__words[0]) >> 4)
                std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100]((_QWORD *)(v394.__r_.__value_.__r.__words[0] + v296), *v293, v293[1]);
              ++v295;
              v293 += 2;
              v296 += 16;
            }
            while (v293 != v294);
          }
        }
        v298 = v394.__r_.__value_.__l.__size_;
        v297 = (_QWORD *)v394.__r_.__value_.__r.__words[0];
        if (v394.__r_.__value_.__r.__words[0] != v394.__r_.__value_.__l.__size_)
        {
          while (1)
          {
            v299 = *v297;
            v300 = (std::__shared_weak_count *)v297[1];
            if (v300)
            {
              v301 = (unint64_t *)&v300->__shared_owners_;
              do
                v302 = __ldxr(v301);
              while (__stxr(v302 + 1, v301));
              do
                v303 = __ldaxr(v301);
              while (__stlxr(v303 - 1, v301));
              if (!v303)
              {
                ((void (*)(std::__shared_weak_count *))v300->__on_zero_shared)(v300);
                std::__shared_weak_count::__release_weak(v300);
              }
            }
            if (!v299)
              break;
            v297 += 2;
            if (v297 == (_QWORD *)v298)
            {
              v297 = (_QWORD *)v298;
              goto LABEL_588;
            }
          }
          if (v297 != (_QWORD *)v298)
          {
            v304 = v297 + 2;
            if (v297 + 2 != (_QWORD *)v298)
              break;
          }
        }
LABEL_588:
        v311 = v394.__r_.__value_.__l.__size_;
        if (v297 != (_QWORD *)v394.__r_.__value_.__l.__size_)
        {
          while ((_QWORD *)v311 != v297)
          {
            v311 -= 16;
            std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v311);
          }
          v394.__r_.__value_.__l.__size_ = (std::string::size_type)v297;
        }
        *(_OWORD *)&v374.__r_.__value_.__l.__data_ = v353;
        if (*((_QWORD *)&v353 + 1))
        {
          v312 = (unint64_t *)(*((_QWORD *)&v353 + 1) + 8);
          do
            v313 = __ldxr(v312);
          while (__stxr(v313 + 1, v312));
        }
        std::to_string(&v392, v278);
        v314 = std::string::insert(&v392, 0, "unexpandedDialogOutput");
        v393 = *v314;
        v314->__r_.__value_.__l.__size_ = 0;
        v314->__r_.__value_.__r.__words[2] = 0;
        v314->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::CreateJSONArrayVal(&v394, &v373);
        siri::dialogengine::InsertJSONObjectVal((const void **)&v374.__r_.__value_.__l.__data_, (uint64_t)&v393, (uint64_t *)&v373);
        v315 = (std::__shared_weak_count *)v373.__r_.__value_.__l.__size_;
        if (v373.__r_.__value_.__l.__size_)
        {
          v316 = (unint64_t *)(v373.__r_.__value_.__l.__size_ + 8);
          do
            v317 = __ldaxr(v316);
          while (__stlxr(v317 - 1, v316));
          if (!v317)
          {
            ((void (*)(std::__shared_weak_count *))v315->__on_zero_shared)(v315);
            std::__shared_weak_count::__release_weak(v315);
          }
        }
        if (SHIBYTE(v393.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v393.__r_.__value_.__l.__data_);
        if (SHIBYTE(v392.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v392.__r_.__value_.__l.__data_);
        v318 = (std::__shared_weak_count *)v374.__r_.__value_.__l.__size_;
        if (v374.__r_.__value_.__l.__size_)
        {
          v319 = (unint64_t *)(v374.__r_.__value_.__l.__size_ + 8);
          do
            v320 = __ldaxr(v319);
          while (__stlxr(v320 - 1, v319));
          if (!v320)
          {
            ((void (*)(std::__shared_weak_count *))v318->__on_zero_shared)(v318);
            std::__shared_weak_count::__release_weak(v318);
          }
        }
        ++v278;
        v393.__r_.__value_.__r.__words[0] = (std::string::size_type)&v390;
        std::vector<std::pair<int,std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v393);
        v390.__r_.__value_.__r.__words[0] = (std::string::size_type)&v394;
        std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v390);
        v276 += 3;
        if (v276 == (uint64_t *)v277)
          goto LABEL_611;
      }
      v305 = v297;
      while (1)
      {
        v306 = v305[2];
        v307 = (std::__shared_weak_count *)v305[3];
        v305 = v304;
        if (v307)
        {
          v308 = (unint64_t *)&v307->__shared_owners_;
          do
            v309 = __ldxr(v308);
          while (__stxr(v309 + 1, v308));
          do
            v310 = __ldaxr(v308);
          while (__stlxr(v310 - 1, v308));
          if (!v310)
            break;
        }
        if (v306)
          goto LABEL_583;
LABEL_584:
        v304 = v305 + 2;
        if (v305 + 2 == (_QWORD *)v298)
          goto LABEL_588;
      }
      ((void (*)(std::__shared_weak_count *))v307->__on_zero_shared)(v307);
      std::__shared_weak_count::__release_weak(v307);
      if (!v306)
        goto LABEL_584;
LABEL_583:
      std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)v297, (__int128 *)v305);
      v297 += 2;
      goto LABEL_584;
    }
  }
LABEL_611:
  v394.__r_.__value_.__r.__words[0] = (std::string::size_type)&v389;
  std::vector<std::vector<std::pair<int,std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v394);
  v394.__r_.__value_.__r.__words[0] = (std::string::size_type)&v375;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v394);
  if (v347)
  {
    v348 = v347;
    operator delete(v347);
  }
  v394.__r_.__value_.__r.__words[0] = (std::string::size_type)&v350;
  std::vector<std::pair<int,std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v394);
  v321 = (std::__shared_weak_count *)*((_QWORD *)&v353 + 1);
  v193 = a1;
  if (*((_QWORD *)&v353 + 1))
  {
    v322 = (unint64_t *)(*((_QWORD *)&v353 + 1) + 8);
    do
      v323 = __ldaxr(v322);
    while (__stlxr(v323 - 1, v322));
    if (!v323)
    {
      ((void (*)(std::__shared_weak_count *))v321->__on_zero_shared)(v321);
      std::__shared_weak_count::__release_weak(v321);
    }
  }
LABEL_619:
  v324 = (std::__shared_weak_count *)v193[1];
  v345 = *v193;
  v346 = v324;
  if (v324)
  {
    v325 = (unint64_t *)&v324->__shared_owners_;
    do
      v326 = __ldxr(v325);
    while (__stxr(v326 + 1, v325));
  }
  std::string::basic_string[abi:ne180100]<0>(&v394, "unexpandedDialogOutput");
  siri::dialogengine::CreateJSONArrayVal((_QWORD **)&v386, &v343);
  siri::dialogengine::InsertJSONObjectVal(&v345, (uint64_t)&v394, &v343);
  v327 = v344;
  if (v344)
  {
    v328 = (unint64_t *)&v344->__shared_owners_;
    do
      v329 = __ldaxr(v328);
    while (__stlxr(v329 - 1, v328));
    if (!v329)
    {
      ((void (*)(std::__shared_weak_count *))v327->__on_zero_shared)(v327);
      std::__shared_weak_count::__release_weak(v327);
    }
  }
  if (SHIBYTE(v394.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v394.__r_.__value_.__l.__data_);
  v330 = v346;
  if (v346)
  {
    v331 = (unint64_t *)&v346->__shared_owners_;
    do
      v332 = __ldaxr(v331);
    while (__stlxr(v332 - 1, v331));
    if (!v332)
    {
      ((void (*)(std::__shared_weak_count *))v330->__on_zero_shared)(v330);
      std::__shared_weak_count::__release_weak(v330);
    }
  }
  if (v376)
  {
    v377 = v376;
    operator delete(v376);
  }
  v394.__r_.__value_.__r.__words[0] = (std::string::size_type)&v379;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v394);
  v394.__r_.__value_.__r.__words[0] = (std::string::size_type)&v381;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v394);
  v394.__r_.__value_.__r.__words[0] = (std::string::size_type)&v383;
  std::vector<std::pair<int,std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v394);
  v394.__r_.__value_.__r.__words[0] = (std::string::size_type)&v386;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v394);
}

void sub_1BFC68894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a69;
  void *v70;

  a69 = a13;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a69);
  STACK[0x2E0] = (unint64_t)&STACK[0x200];
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2E0]);
  if (SLOBYTE(STACK[0x237]) < 0)
    operator delete((void *)STACK[0x220]);
  if (SLOBYTE(STACK[0x2D7]) < 0)
    operator delete((void *)STACK[0x2C0]);
  if (SLOBYTE(STACK[0x31F]) < 0)
    operator delete((void *)STACK[0x308]);
  STACK[0x2E0] = (unint64_t)&STACK[0x320];
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2E0]);
  v70 = (void *)STACK[0x238];
  if (STACK[0x238])
  {
    STACK[0x240] = (unint64_t)v70;
    operator delete(v70);
  }
  STACK[0x2E0] = (unint64_t)&STACK[0x250];
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2E0]);
  STACK[0x2E0] = (unint64_t)&STACK[0x270];
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2E0]);
  STACK[0x2E0] = (unint64_t)&STACK[0x290];
  std::vector<std::pair<int,std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2E0]);
  STACK[0x2E0] = (unint64_t)&STACK[0x2A8];
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2E0]);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](a14);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<std::pair<int,std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      *(_DWORD *)(v6 - 32) = *(_DWORD *)(v2 + v5 - 32);
      *(_QWORD *)(v6 - 16) = 0;
      *(_QWORD *)(v6 - 8) = 0;
      *(_QWORD *)(v6 - 24) = 0;
      *(_OWORD *)(v6 - 24) = *(_OWORD *)(v2 + v5 - 24);
      *(_QWORD *)(v6 - 8) = *(_QWORD *)(v2 + v5 - 8);
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v5 -= 32;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v8 = *result;
  *result = v4;
  a2[1] = v8;
  v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::pair<int,std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void **v5;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 32;
    v5 = (void **)(i - 24);
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::vector<std::pair<int,std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>>>::__init_with_size[abi:ne180100]<std::pair<int,std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>>*,std::pair<int,std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>>*>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _QWORD v10[3];
  char v11;
  char *v12;
  char *v13;

  if (a4)
  {
    if (a4 >> 59)
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    v6 = (_QWORD *)result;
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::RegEx>>(a4);
    v8 = v7;
    *v6 = v7;
    v6[1] = v7;
    v6[2] = &v7[32 * v9];
    v13 = v7;
    v12 = v7;
    v10[0] = v6 + 2;
    v10[1] = &v12;
    v10[2] = &v13;
    v11 = 0;
    if (a2 != a3)
    {
      do
      {
        *(_DWORD *)v7 = *(_DWORD *)a2;
        *((_QWORD *)v7 + 2) = 0;
        *((_QWORD *)v7 + 3) = 0;
        *((_QWORD *)v7 + 1) = 0;
        std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::JSONValue>*,std::shared_ptr<siri::dialogengine::JSONValue>*>(v7 + 8, *(_QWORD **)(a2 + 8), *(_QWORD **)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 4);
        v7 = v13 + 32;
        v13 += 32;
        a2 += 32;
      }
      while (a2 != a3);
      v8 = v7;
    }
    v11 = 1;
    result = std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>>>,std::pair<int,std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
    v6[1] = v8;
  }
  return result;
}

void sub_1BFC69258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::pair<int,std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<int,std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  void **v7;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 32;
        v7 = (void **)(v4 - 24);
        std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v7);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::vector<std::pair<int,std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::pair<int,std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul> &,std::__bit_iterator<std::vector<BOOL>,false,0ul> &>(uint64_t *result, char a2, uint64_t *a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 1 << a4;
  v5 = *result;
  if ((*a3 & (1 << a4)) != 0)
    v6 = *result | (1 << a2);
  else
    v6 = *result & ~(1 << a2);
  *result = v6;
  if ((v5 & (1 << a2)) != 0)
    v7 = *a3 | v4;
  else
    v7 = *a3 & ~v4;
  *a3 = v7;
  return result;
}

uint64_t *std::__reverse[abi:ne180100]<std::_ClassicAlgPolicy,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(uint64_t *result, unsigned int a2, uint64_t *a3, unsigned int a4)
{
  unsigned int v4;
  uint64_t *v5;
  unsigned int v6;
  uint64_t *v7;
  uint64_t v8;

  v4 = a4;
  v5 = a3;
  v6 = a2;
  v7 = result;
  if (result != a3 || a2 != a4)
  {
    while (1)
    {
      v8 = v4 ? 0 : -1;
      v5 += v8;
      if (v4)
        --v4;
      else
        v4 = 63;
      if (v7 >= v5 && (v7 != v5 || v6 >= v4))
        break;
      result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul> &,std::__bit_iterator<std::vector<BOOL>,false,0ul> &>(v7, v6, v5, v4);
      v7 += v6 == 63;
      if (v6 == 63)
        v6 = 0;
      else
        ++v6;
    }
  }
  return result;
}

uint64_t std::__split_buffer<std::vector<std::pair<int,std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>>>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void **v4;
  void **v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v6 = v4;
    std::vector<std::pair<int,std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>>>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>>>,std::pair<int,std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v6;

  if (!*(_BYTE *)(a1 + 24))
  {
    v2 = **(_QWORD **)(a1 + 16);
    v3 = **(_QWORD **)(a1 + 8);
    if (v2 != v3)
    {
      do
      {
        v4 = v2 - 32;
        v6 = (void **)(v2 - 24);
        std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v6);
        v2 = v4;
      }
      while (v4 != v3);
    }
  }
  return a1;
}

void siri::dialogengine::CreateDAG(siri::dialogengine::Context *a1, uint64_t **a2, const void ***a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8, int *a9, unsigned __int8 a10, unsigned int a11)
{
  const void **v11;
  void *v17;
  _QWORD **v18;
  uint64_t v19;
  unint64_t v20;
  siri::dialogengine::ExecutionState *v21;
  __n128 v22;
  siri::dialogengine::Context **v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *size;
  unint64_t *v34;
  unint64_t v35;
  const siri::dialogengine::SpeakableString *v36;
  const char *v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t i;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  unint64_t v54;
  _DWORD *v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _DWORD *v59;
  char *v60;
  char *v61;
  _DWORD *v62;
  int v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t j;
  char *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  const void **v86;
  __int128 v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  void *__p[2];
  char *v91;
  __int128 v92;
  uint64_t v93;
  char v94[8];
  _QWORD *v95;
  int *v96;
  std::__shared_weak_count *v97;
  _QWORD *v98[3];
  std::string v99;
  void *v100;
  char v101;
  void *v102;
  char v103;
  void *v104;
  char v105;
  void *v106;
  char v107;
  void *v108;
  char v109;
  void *v110;
  char v111;
  int *v112;
  std::__shared_weak_count *v113;
  __int128 v114;
  char *v115;
  __int128 v116;
  _QWORD v117[3];
  __int128 v118;
  uint64_t v119;

  v119 = *MEMORY[0x1E0C80C00];
  v11 = *a3;
  v86 = a3[1];
  if (*a3 != v86)
  {
    v83 = (uint64_t)(a2 + 1);
    do
    {
      v17 = (void *)*v11;
      if (*v11)
      {
        if (!(_DWORD)a6)
          goto LABEL_15;
      }
      else
      {
        v19 = 0;
        v18 = 0;
        v20 = 0;
        if (!(_DWORD)a6)
          goto LABEL_15;
      }
      v22.n128_f64[0] = siri::dialogengine::Node::GetCondition((siri::dialogengine::Node *)v17, a1, &v99);
      if (v99.__r_.__value_.__r.__words[0])
      {
        if (!a1
          || (v23 = *(siri::dialogengine::Context ***)(v99.__r_.__value_.__r.__words[0] + 144),
              v23 == *(siri::dialogengine::Context ***)(v99.__r_.__value_.__r.__words[0] + 152))
          || (siri::dialogengine::EvaluateConditionEntry(a1, *v23, 0, v21) & 1) == 0)
        {
          size = (std::__shared_weak_count *)v99.__r_.__value_.__l.__size_;
          if (v99.__r_.__value_.__l.__size_)
          {
            v34 = (unint64_t *)(v99.__r_.__value_.__l.__size_ + 8);
            do
              v35 = __ldaxr(v34);
            while (__stlxr(v35 - 1, v34));
            if (!v35)
            {
              ((void (*)(std::__shared_weak_count *, __n128))size->__on_zero_shared)(size, v22);
              std::__shared_weak_count::__release_weak(size);
            }
          }
          goto LABEL_126;
        }
      }
      v24 = (std::__shared_weak_count *)v99.__r_.__value_.__l.__size_;
      if (!v99.__r_.__value_.__l.__size_)
        goto LABEL_15;
      v25 = (unint64_t *)(v99.__r_.__value_.__l.__size_ + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (v26)
      {
LABEL_15:
        if (!v18)
          goto LABEL_31;
        goto LABEL_16;
      }
      ((void (*)(std::__shared_weak_count *, __n128))v24->__on_zero_shared)(v24, v22);
      std::__shared_weak_count::__release_weak(v24);
      if (!v18)
      {
LABEL_31:
        if (v19 | v20)
        {
          if (v19)
            v36 = (const siri::dialogengine::SpeakableString *)(v19 + 208);
          else
            v36 = (const siri::dialogengine::SpeakableString *)(v20 + 208);
          siri::dialogengine::SpeakableString::SpeakableString(&v99, v36);
          if (a10)
            siri::dialogengine::SpeakableString::GetSpeakChunks((siri::dialogengine::SpeakableString *)&v99, v37, v98);
          else
            siri::dialogengine::SpeakableString::GetPrintChunks((siri::dialogengine::SpeakableString *)&v99, v37, v98);
          v38 = *(std::__shared_weak_count **)(a8 + 8);
          v96 = *(int **)a8;
          v97 = v38;
          if (v38)
          {
            p_shared_owners = (unint64_t *)&v38->__shared_owners_;
            do
              v40 = __ldxr(p_shared_owners);
            while (__stxr(v40 + 1, p_shared_owners));
          }
          siri::dialogengine::CreateOutputNodes((uint64_t)a1, v98, a10, (char **)a4, (char **)a5, a6, a7, &v96, a9, a11);
          v41 = v97;
          if (v97)
          {
            v42 = (unint64_t *)&v97->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          if (a2 && v19)
          {
            siri::dialogengine::CreateJSONObjectFromAdjacencyList((uint64_t *)a5, &v92);
            std::string::basic_string[abi:ne180100]<0>(&v114, "adjacency");
            v116 = v92;
            v92 = 0uLL;
            siri::dialogengine::CreateJSONObjectFromOutputNodeMap((unsigned int ***)a4, __p);
            std::string::basic_string[abi:ne180100]<0>(v117, "nodes");
            v118 = *(_OWORD *)__p;
            __p[0] = 0;
            __p[1] = 0;
            std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100]((uint64_t)v94, (const void **)&v114, 2);
            for (i = 0; i != -10; i -= 5)
            {
              std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v118 + i * 8);
              if (SHIBYTE(v117[i + 2]) < 0)
                operator delete((void *)v117[i]);
            }
            v45 = (std::__shared_weak_count *)__p[1];
            if (__p[1])
            {
              v46 = (unint64_t *)((char *)__p[1] + 8);
              do
                v47 = __ldaxr(v46);
              while (__stlxr(v47 - 1, v46));
              if (!v47)
              {
                ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                std::__shared_weak_count::__release_weak(v45);
              }
            }
            v48 = (std::__shared_weak_count *)*((_QWORD *)&v92 + 1);
            if (*((_QWORD *)&v92 + 1))
            {
              v49 = (unint64_t *)(*((_QWORD *)&v92 + 1) + 8);
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
            v92 = 0uLL;
            v93 = 0;
            v114 = 0uLL;
            v115 = 0;
            LODWORD(__p[0]) = 1;
            LODWORD(v88) = 0;
            v52 = *(char **)a5;
            v51 = *(_QWORD *)(a5 + 8);
            if (v51 != *(_QWORD *)a5)
            {
              v53 = 0;
              v54 = 0;
              do
              {
                if (*(_QWORD *)&v52[24 * v54] == *(_QWORD *)&v52[24 * v54 + 8])
                {
                  if (v53 >= v115)
                  {
                    v56 = (v115 - v53) >> 1;
                    if (v56 <= 1)
                      v56 = 1;
                    if ((unint64_t)(v115 - v53) >= 0x7FFFFFFFFFFFFFFCLL)
                      v57 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v57 = v56;
                    v59 = std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v115, v57);
                    v61 = (char *)*((_QWORD *)&v114 + 1);
                    v60 = (char *)v114;
                    *v59 = 0;
                    v55 = v59 + 1;
                    v62 = v59;
                    while (v61 != v60)
                    {
                      v63 = *((_DWORD *)v61 - 1);
                      v61 -= 4;
                      *--v62 = v63;
                    }
                    *(_QWORD *)&v114 = v62;
                    *((_QWORD *)&v114 + 1) = v59 + 1;
                    v115 = (char *)&v59[v58];
                    if (v60)
                      operator delete(v60);
                  }
                  else
                  {
                    *(_DWORD *)v53 = 0;
                    v55 = v53 + 4;
                  }
                  *((_QWORD *)&v114 + 1) = v55;
                  siri::dialogengine::GetAllPaths(a1, 0, v54, (int **)&v114, (_QWORD *)a5, (_QWORD *)a4, (char **)&v92, a11, (int *)__p, (int *)&v88);
                  v53 = (char *)v114;
                  *((_QWORD *)&v114 + 1) = v114;
                  v52 = *(char **)a5;
                  v51 = *(_QWORD *)(a5 + 8);
                }
                ++v54;
              }
              while (0xAAAAAAAAAAAAAAABLL * ((v51 - (uint64_t)v52) >> 3) > v54);
              if (v53)
              {
                *((_QWORD *)&v114 + 1) = v53;
                operator delete(v53);
              }
            }
            v64 = *((_QWORD *)a1 + 63);
            v65 = (std::__shared_weak_count *)*((_QWORD *)a1 + 64);
            v88 = v64;
            v89 = v65;
            if (v65)
            {
              v66 = (unint64_t *)&v65->__shared_owners_;
              do
                v67 = __ldxr(v66);
              while (__stxr(v67 + 1, v66));
            }
            siri::dialogengine::File::GetOrCreateId(v64, v19, 1, 0, (uint64_t)__p);
            siri::dialogengine::CreateJSONArrayVal((_QWORD **)&v92, &v87);
            v114 = *(_OWORD *)__p;
            v115 = v91;
            __p[1] = 0;
            v91 = 0;
            __p[0] = 0;
            v116 = v87;
            v87 = 0uLL;
            std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>> const&>(a2, v83, (const void **)&v114, &v114);
            v68 = (std::__shared_weak_count *)*((_QWORD *)&v116 + 1);
            if (*((_QWORD *)&v116 + 1))
            {
              v69 = (unint64_t *)(*((_QWORD *)&v116 + 1) + 8);
              do
                v70 = __ldaxr(v69);
              while (__stlxr(v70 - 1, v69));
              if (!v70)
              {
                ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                std::__shared_weak_count::__release_weak(v68);
              }
            }
            if (SHIBYTE(v115) < 0)
              operator delete((void *)v114);
            v71 = (std::__shared_weak_count *)*((_QWORD *)&v87 + 1);
            if (*((_QWORD *)&v87 + 1))
            {
              v72 = (unint64_t *)(*((_QWORD *)&v87 + 1) + 8);
              do
                v73 = __ldaxr(v72);
              while (__stlxr(v73 - 1, v72));
              if (!v73)
              {
                ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                std::__shared_weak_count::__release_weak(v71);
              }
            }
            if (SHIBYTE(v91) < 0)
              operator delete(__p[0]);
            v74 = v89;
            if (v89)
            {
              v75 = (unint64_t *)&v89->__shared_owners_;
              do
                v76 = __ldaxr(v75);
              while (__stlxr(v76 - 1, v75));
              if (!v76)
              {
                ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                std::__shared_weak_count::__release_weak(v74);
              }
            }
            v78 = *(char **)a4;
            for (j = *(_QWORD *)(a4 + 8);
                  (char *)j != v78;
            *(_QWORD *)(a4 + 8) = v78;
            std::vector<std::vector<int>>::__clear[abi:ne180100]((uint64_t *)a5);
            v114 = 0uLL;
            std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100](a8, &v114);
            v79 = (std::__shared_weak_count *)*((_QWORD *)&v114 + 1);
            if (*((_QWORD *)&v114 + 1))
            {
              v80 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
              do
                v81 = __ldaxr(v80);
              while (__stlxr(v81 - 1, v80));
              if (!v81)
              {
                ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                std::__shared_weak_count::__release_weak(v79);
              }
            }
            *a9 = 0;
            *(_QWORD *)&v114 = &v92;
            std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v114);
            std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(v95);
          }
          *(_QWORD *)&v114 = v98;
          std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v114);
          if (v111 < 0)
            operator delete(v110);
          if (v109 < 0)
            operator delete(v108);
          if (v107 < 0)
            operator delete(v106);
          if (v105 < 0)
            operator delete(v104);
          if (v103 < 0)
            operator delete(v102);
          if (v101 < 0)
            operator delete(v100);
          if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v99.__r_.__value_.__l.__data_);
        }
        goto LABEL_126;
      }
LABEL_16:
      memset(&v99, 0, sizeof(v99));
      std::vector<std::shared_ptr<siri::dialogengine::Node>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Node>*,std::shared_ptr<siri::dialogengine::Node>*>((char *)&v99, v18[26], v18[27], ((char *)v18[27] - (char *)v18[26]) >> 4);
      v27 = *(std::__shared_weak_count **)(a8 + 8);
      v112 = *(int **)a8;
      v113 = v27;
      if (v27)
      {
        v28 = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      HIDWORD(v82) = a11;
      LOBYTE(v82) = a10;
      siri::dialogengine::CreateDAG(a1, a2, &v99, a4, a5, a6, a7, &v112, a9, v82);
      v30 = v113;
      if (v113)
      {
        v31 = (unint64_t *)&v113->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      *(_QWORD *)&v114 = &v99;
      std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v114);
LABEL_126:
      v11 += 2;
    }
    while (v11 != v86);
  }
}

void sub_1BFC69D68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,_QWORD *a36,uint64_t a37,char a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,void *a43)
{
  uint64_t v43;

  std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>::~pair(v43 - 192);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  if (a30 < 0)
    operator delete(__p);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  *(_QWORD *)(v43 - 192) = &a32;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v43 - 192));
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(a36);
  *(_QWORD *)(v43 - 192) = &a40;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v43 - 192));
  siri::dialogengine::SpeakableString::~SpeakableString(&a43);
  _Unwind_Resume(a1);
}

void siri::dialogengine::CreateOutputNodes(uint64_t a1, _QWORD **a2, int a3, char **a4, char **a5, unsigned int a6, unsigned int a7, int **a8, int *a9, int a10)
{
  uint64_t v13;
  unint64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  const std::string::value_type **v22;
  void *v23;
  __int128 v24;
  std::string::size_type size;
  unint64_t *v26;
  unint64_t v27;
  int *v28;
  unint64_t *v29;
  unint64_t v30;
  std::string::size_type v31;
  unint64_t *v32;
  unint64_t v33;
  int *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  int v69;
  int v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *p_shared_owners;
  unint64_t v75;
  int v76;
  _OWORD *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  int v89;
  uint64_t v90;
  int *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  std::string::size_type v98;
  unint64_t *v99;
  unint64_t v100;
  char *Phrase;
  unint64_t *v102;
  unint64_t v103;
  int *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  void *v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  int v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  unint64_t *v129;
  unint64_t v130;
  std::string *v131;
  __int128 v132;
  std::string *v133;
  __int128 v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  const siri::dialogengine::SpeakableString *v138;
  std::string *v139;
  __int128 v140;
  std::string *v141;
  std::string::size_type v142;
  std::string::size_type v143;
  std::string *v144;
  std::string::size_type v145;
  char v146;
  void *v147;
  unint64_t *v148;
  unint64_t v149;
  int *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  uint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  unint64_t *v166;
  unint64_t v167;
  int v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  int data;
  int v173;
  std::string::size_type v175;
  unint64_t *v176;
  unint64_t v177;
  int *v178;
  unint64_t *v179;
  unint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  uint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  unint64_t *v194;
  unint64_t v195;
  void *v196;
  BOOL v197;
  char v198;
  std::string::size_type v199;
  std::string *v200;
  std::string::size_type v201;
  const void *v204;
  char *v205;
  unint64_t *v206;
  unint64_t v207;
  int *v208;
  unint64_t *v209;
  unint64_t v210;
  int v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  void *v221;
  unint64_t *v222;
  unint64_t v223;
  int *v224;
  unint64_t *v225;
  unint64_t v226;
  int v227;
  std::__shared_weak_count *v228;
  unint64_t *v229;
  unint64_t v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  __int128 v237;
  _BOOL4 v239;
  unint64_t *v241;
  unint64_t v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  int v246;
  unint64_t *v247;
  unint64_t v248;
  std::__shared_weak_count *v249;
  unint64_t *v250;
  unint64_t v251;
  uint64_t v252;
  std::__shared_weak_count *v253;
  unint64_t *v254;
  unint64_t v255;
  unint64_t *v256;
  unint64_t v257;
  int v258;
  std::__shared_weak_count *v259;
  unint64_t *v260;
  unint64_t v261;
  std::string::size_type v262;
  void *v263;
  unint64_t *v264;
  unint64_t v265;
  int *v266;
  unint64_t *v267;
  unint64_t v268;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  unint64_t v271;
  std::__shared_weak_count *v272;
  unint64_t *v273;
  unint64_t v274;
  std::__shared_weak_count *v275;
  unint64_t *v276;
  unint64_t v277;
  int v278;
  int v279;
  uint64_t v280;
  std::__shared_weak_count *v281;
  unint64_t *v282;
  unint64_t v283;
  unint64_t *v284;
  unint64_t v285;
  std::string::size_type v286;
  char v287;
  std::string *v288;
  int *v289;
  unint64_t *v290;
  unint64_t v291;
  int *v292;
  unint64_t *v293;
  unint64_t v294;
  std::__shared_weak_count *v295;
  unint64_t *v296;
  unint64_t v297;
  std::__shared_weak_count *v298;
  unint64_t *v299;
  unint64_t v300;
  unint64_t *v301;
  std::__shared_weak_count *v302;
  unint64_t *v303;
  unint64_t v304;
  int v305;
  int v306;
  uint64_t v307;
  int *v308;
  std::__shared_weak_count *v309;
  unint64_t *v310;
  unint64_t v311;
  unint64_t *v312;
  unint64_t v313;
  int v314;
  std::__shared_weak_count *v315;
  unint64_t *v316;
  unint64_t v317;
  std::__shared_weak_count *v318;
  unint64_t *v319;
  unint64_t v320;
  unint64_t *v321;
  unint64_t *v322;
  unint64_t v323;
  uint64_t v324;
  int v325;
  char v329;
  char v331;
  __int128 v332;
  uint64_t v333;
  unint64_t v334;
  _QWORD v335[2];
  int *v336;
  std::__shared_weak_count *v337;
  uint64_t v338;
  std::__shared_weak_count *v339;
  uint64_t v340;
  std::__shared_weak_count *v341;
  int *v342;
  std::__shared_weak_count *v343;
  uint64_t v344;
  std::__shared_weak_count *v345;
  uint64_t v346;
  std::__shared_weak_count *v347;
  std::string v348;
  void *v349;
  char v350;
  void *v351;
  char v352;
  void *v353;
  char v354;
  void *v355;
  char v356;
  void *v357;
  char v358;
  void *v359;
  char v360;
  std::string v361;
  void *v362[2];
  char v363;
  void *v364;
  char v365;
  void *v366;
  char v367;
  void *v368;
  char v369;
  void *v370;
  char v371;
  void *v372;
  char v373;
  int *v374;
  std::__shared_weak_count *v375;
  __int128 v376;
  uint64_t v377;
  std::__shared_weak_count *v378;
  _QWORD v379[2];
  int *v380;
  std::__shared_weak_count *v381;
  __int128 v382;
  uint64_t v383;
  std::__shared_weak_count *v384;
  _QWORD v385[2];
  int *v386;
  std::__shared_weak_count *v387;
  __int128 v388;
  uint64_t v389;
  std::__shared_weak_count *v390;
  int *v391;
  std::__shared_weak_count *v392;
  __int128 v393;
  uint64_t v394;
  std::__shared_weak_count *v395;
  _QWORD v396[2];
  _QWORD v397[2];
  __int128 v398;
  _QWORD v399[2];
  int *v400;
  std::__shared_weak_count *v401;
  __int128 v402;
  uint64_t v403;
  std::__shared_weak_count *v404;
  std::string v405;
  __int128 __s;
  std::string::size_type v407;
  void *v408;
  char v409;
  void *v410;
  char v411;
  void *v412;
  char v413;
  void *v414;
  char v415;
  void *v416;
  char v417;
  _QWORD v418[2];
  int *v419;
  std::__shared_weak_count *v420;
  __int128 v421;
  uint64_t v422;
  std::__shared_weak_count *v423;
  _QWORD v424[2];
  uint64_t v425;
  std::__shared_weak_count *v426;
  __int128 v427;
  uint64_t v428;
  std::__shared_weak_count *v429;
  int *v430;
  std::__shared_weak_count *v431;
  std::string __p;
  _QWORD v433[2];
  _QWORD v434[2];
  __int128 v435;
  uint64_t v436;
  std::__shared_weak_count *v437;
  _QWORD v438[2];
  int *v439;
  std::__shared_weak_count *v440;
  __int128 v441;
  uint64_t v442;
  std::__shared_weak_count *v443;
  std::string v444;
  __int128 v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  std::string v449;
  std::string v450;
  uint64_t v451;

  v451 = *MEMORY[0x1E0C80C00];
  memset(&v449, 0, sizeof(v449));
  v446 = 0;
  v447 = 0;
  v448 = 0;
  std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::ChunkText>*,std::shared_ptr<siri::dialogengine::ChunkText>*>((char *)&v446, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  v13 = v446;
  if (v447 == v446)
    goto LABEL_685;
  v14 = 0;
  v331 = 0;
  v329 = 0;
  v15 = 0;
  v325 = -1;
  do
  {
    v334 = v14;
    v16 = *(_OWORD *)(v13 + 16 * v14);
    v445 = v16;
    v17 = *((_QWORD *)&v16 + 1);
    if (*((_QWORD *)&v16 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    v332 = v16;
    v20 = v16;
    if ((_QWORD)v16)
    {
    }
    else
    {
      v22 = 0;
      v21 = 0;
      v23 = 0;
    }
    memset(&v444, 0, sizeof(v444));
    if (!v334)
      v331 |= *a8 != 0;
    v24 = v332;
    if (v21)
    {
      size = HIBYTE(v449.__r_.__value_.__r.__words[2]);
      if ((v449.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v449.__r_.__value_.__l.__size_;
      if (!size)
      {
LABEL_104:
        v435 = v24;
        if (v17)
        {
          v71 = (unint64_t *)(v17 + 8);
          do
            v72 = __ldxr(v71);
          while (__stxr(v72 + 1, v71));
        }
        v73 = (std::__shared_weak_count *)a8[1];
        v434[0] = *a8;
        v434[1] = v73;
        if (v73)
        {
          p_shared_owners = (unint64_t *)&v73->__shared_owners_;
          do
            v75 = __ldxr(p_shared_owners);
          while (__stxr(v75 + 1, p_shared_owners));
        }
        v76 = *a9;
        v77 = v21 + 200;
        if (v21[223] < 0)
        {
          v333 = v24;
          std::string::__init_copy_ctor_external(&v405, *((const std::string::value_type **)v21 + 25), *((_QWORD *)v21 + 26));
          *(_QWORD *)&v24 = v333;
        }
        else
        {
          *(_OWORD *)&v405.__r_.__value_.__l.__data_ = *v77;
          v405.__r_.__value_.__r.__words[2] = *((_QWORD *)v21 + 27);
        }
        siri::dialogengine::CreateNewNode(&v436, a5, a4, (void *)v24, (uint64_t)v434, v76, 0, (uint64_t)&v405);
        if (SHIBYTE(v405.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v405.__r_.__value_.__l.__data_);
          if (!v73)
            goto LABEL_121;
        }
        else if (!v73)
        {
          goto LABEL_121;
        }
        v78 = (unint64_t *)&v73->__shared_owners_;
        do
          v79 = __ldaxr(v78);
        while (__stlxr(v79 - 1, v78));
        if (!v79)
        {
          ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
          std::__shared_weak_count::__release_weak(v73);
        }
LABEL_121:
        v80 = (std::__shared_weak_count *)*((_QWORD *)&v435 + 1);
        if (*((_QWORD *)&v435 + 1))
        {
          v81 = (unint64_t *)(*((_QWORD *)&v435 + 1) + 8);
          do
            v82 = __ldaxr(v81);
          while (__stlxr(v82 - 1, v81));
          if (!v82)
          {
            ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
            std::__shared_weak_count::__release_weak(v80);
          }
        }
        v83 = *a9;
        if ((v15 & 1) != 0)
        {
          v84 = (std::__shared_weak_count *)a8[1];
          v433[0] = *a8;
          v433[1] = v84;
          if (v84)
          {
            v85 = (unint64_t *)&v84->__shared_owners_;
            do
              v86 = __ldxr(v85);
            while (__stxr(v86 + 1, v85));
          }
          siri::dialogengine::ConnectNodeWithPhraseChildren(v83, v433, (uint64_t *)a4, (uint64_t *)a5);
          if (v84)
          {
            v87 = (unint64_t *)&v84->__shared_owners_;
            do
              v88 = __ldaxr(v87);
            while (__stlxr(v88 - 1, v87));
            if (!v88)
            {
              ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
              std::__shared_weak_count::__release_weak(v84);
            }
          }
        }
        else if ((_DWORD)v83)
        {
          if (v334 || !*a8)
            v89 = v83 - 1;
          else
            v89 = **a8;
          siri::dialogengine::AddNodeToAdjList((uint64_t)*a5, v89, v83);
        }
        ++*a9;
        if (SHIBYTE(v449.__r_.__value_.__r.__words[2]) < 0)
        {
          *v449.__r_.__value_.__l.__data_ = 0;
          v449.__r_.__value_.__l.__size_ = 0;
        }
        else
        {
          v449.__r_.__value_.__s.__data_[0] = 0;
          *((_BYTE *)&v449.__r_.__value_.__s + 23) = 0;
        }
        v90 = v436;
        v91 = (int *)v437;
        if (v437)
        {
          v92 = (unint64_t *)&v437->__shared_owners_;
          do
            v93 = __ldxr(v92);
          while (__stxr(v93 + 1, v92));
        }
        v94 = (std::__shared_weak_count *)a8[1];
        *a8 = (int *)v90;
        a8[1] = v91;
        if (v94)
        {
          v95 = (unint64_t *)&v94->__shared_owners_;
          do
            v96 = __ldaxr(v95);
          while (__stlxr(v96 - 1, v95));
          if (!v96)
          {
            ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
            std::__shared_weak_count::__release_weak(v94);
          }
        }
        v98 = *(_QWORD *)(a1 + 504);
        v97 = *(std::__shared_weak_count **)(a1 + 512);
        __p.__r_.__value_.__r.__words[0] = v98;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v97;
        if (v97)
        {
          v99 = (unint64_t *)&v97->__shared_owners_;
          do
            v100 = __ldxr(v99);
          while (__stxr(v100 + 1, v99));
        }
        if (v21[223] < 0)
        {
          std::string::__init_copy_ctor_external(&v405, *((const std::string::value_type **)v21 + 25), *((_QWORD *)v21 + 26));
        }
        else
        {
          *(_OWORD *)&v405.__r_.__value_.__l.__data_ = *v77;
          v405.__r_.__value_.__r.__words[2] = *((_QWORD *)v21 + 27);
        }
        Phrase = siri::dialogengine::GroupPhrases::GetPhrase(v98 + 312, (unsigned __int8 *)&v405);
        if (SHIBYTE(v405.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v405.__r_.__value_.__l.__data_);
          if (!v97)
            goto LABEL_165;
        }
        else if (!v97)
        {
          goto LABEL_165;
        }
        v102 = (unint64_t *)&v97->__shared_owners_;
        do
          v103 = __ldaxr(v102);
        while (__stlxr(v103 - 1, v102));
        if (!v103)
        {
          ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
          std::__shared_weak_count::__release_weak(v97);
          if (Phrase)
            goto LABEL_166;
          goto LABEL_209;
        }
LABEL_165:
        if (Phrase)
        {
LABEL_166:
          *(_OWORD *)&v405.__r_.__value_.__r.__words[1] = 0uLL;
          v405.__r_.__value_.__r.__words[0] = (std::string::size_type)&v405.__r_.__value_.__l.__size_;
          memset(&__p, 0, sizeof(__p));
          std::vector<std::shared_ptr<siri::dialogengine::Node>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Node>*,std::shared_ptr<siri::dialogengine::Node>*>((char *)&__p, *((_QWORD **)Phrase + 26), *((_QWORD **)Phrase + 27), (uint64_t)(*((_QWORD *)Phrase + 27) - *((_QWORD *)Phrase + 26)) >> 4);
          v104 = a8[1];
          v430 = *a8;
          v431 = (std::__shared_weak_count *)v104;
          v37 = v334;
          if (v104)
          {
            v105 = (unint64_t *)(v104 + 2);
            do
              v106 = __ldxr(v105);
            while (__stxr(v106 + 1, v105));
          }
          HIDWORD(v324) = a10;
          LOBYTE(v324) = a3;
          siri::dialogengine::CreateDAG(a1, 0, &__p, a4, a5, a6, a7, &v430, a9, v324);
          v107 = v431;
          if (v431)
          {
            v108 = (unint64_t *)&v431->__shared_owners_;
            do
              v109 = __ldaxr(v108);
            while (__stlxr(v109 - 1, v108));
            if (!v109)
            {
              ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
              std::__shared_weak_count::__release_weak(v107);
            }
          }
          v450.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
          std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v450);
          if (((v447 - v446) >> 4) - 1 == v334)
          {
            v110 = (void *)v445;
            v427 = v445;
            if (*((_QWORD *)&v445 + 1))
            {
              v111 = (unint64_t *)(*((_QWORD *)&v445 + 1) + 8);
              do
                v112 = __ldxr(v111);
              while (__stxr(v112 + 1, v111));
            }
            v425 = v436;
            v426 = v437;
            if (v437)
            {
              v113 = (unint64_t *)&v437->__shared_owners_;
              do
                v114 = __ldxr(v113);
              while (__stxr(v114 + 1, v113));
            }
            v115 = *a9;
            std::string::basic_string[abi:ne180100]<0>(&__p, "");
            siri::dialogengine::CreateNewNode(&v428, a5, a4, v110, (uint64_t)&v425, v115, 1, (uint64_t)&__p);
            v116 = v429;
            if (v429)
            {
              v117 = (unint64_t *)&v429->__shared_owners_;
              do
                v118 = __ldaxr(v117);
              while (__stlxr(v118 - 1, v117));
              if (!v118)
              {
                ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
                std::__shared_weak_count::__release_weak(v116);
              }
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            v119 = v426;
            if (v426)
            {
              v120 = (unint64_t *)&v426->__shared_owners_;
              do
                v121 = __ldaxr(v120);
              while (__stlxr(v121 - 1, v120));
              if (!v121)
              {
                ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                std::__shared_weak_count::__release_weak(v119);
              }
            }
            v122 = (std::__shared_weak_count *)*((_QWORD *)&v427 + 1);
            if (*((_QWORD *)&v427 + 1))
            {
              v123 = (unint64_t *)(*((_QWORD *)&v427 + 1) + 8);
              do
                v124 = __ldaxr(v123);
              while (__stlxr(v124 - 1, v123));
              if (!v124)
              {
                ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
                std::__shared_weak_count::__release_weak(v122);
              }
            }
            v125 = *a9;
            v126 = v437;
            v424[0] = v436;
            v424[1] = v437;
            if (v437)
            {
              v127 = (unint64_t *)&v437->__shared_owners_;
              do
                v128 = __ldxr(v127);
              while (__stxr(v128 + 1, v127));
            }
            siri::dialogengine::ConnectNodeWithPhraseChildren(v125, v424, (uint64_t *)a4, (uint64_t *)a5);
            if (v126)
            {
              v129 = (unint64_t *)&v126->__shared_owners_;
              do
                v130 = __ldaxr(v129);
              while (__stlxr(v130 - 1, v129));
              if (!v130)
              {
                ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
                std::__shared_weak_count::__release_weak(v126);
              }
            }
            ++*a9;
          }
          std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)v405.__r_.__value_.__l.__size_);
          v15 = 1;
LABEL_218:
          v135 = v437;
          if (v437)
          {
            v136 = (unint64_t *)&v437->__shared_owners_;
            do
              v137 = __ldaxr(v136);
            while (__stlxr(v137 - 1, v136));
            if (!v137)
            {
              ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
              std::__shared_weak_count::__release_weak(v135);
            }
          }
LABEL_330:
          v329 = 0;
          goto LABEL_331;
        }
LABEL_209:
        if (v21[223] < 0)
        {
          std::string::__init_copy_ctor_external(&v450, *((const std::string::value_type **)v21 + 25), *((_QWORD *)v21 + 26));
        }
        else
        {
          *(_OWORD *)&v450.__r_.__value_.__l.__data_ = *v77;
          v450.__r_.__value_.__r.__words[2] = *((_QWORD *)v21 + 27);
        }
        v131 = std::string::insert(&v450, 0, "Phrase '");
        v37 = v334;
        v132 = *(_OWORD *)&v131->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v131->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v132;
        v131->__r_.__value_.__l.__size_ = 0;
        v131->__r_.__value_.__r.__words[2] = 0;
        v131->__r_.__value_.__r.__words[0] = 0;
        v133 = std::string::append(&__p, "' not found!");
        v134 = *(_OWORD *)&v133->__r_.__value_.__l.__data_;
        v405.__r_.__value_.__r.__words[2] = v133->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v405.__r_.__value_.__l.__data_ = v134;
        v133->__r_.__value_.__l.__size_ = 0;
        v133->__r_.__value_.__r.__words[2] = 0;
        v133->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::Log::Debug((siri::dialogengine *)&v405);
        if (SHIBYTE(v405.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v405.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v450.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v450.__r_.__value_.__l.__data_);
        goto LABEL_218;
      }
      v441 = v332;
      if (v17)
      {
        v26 = (unint64_t *)(v17 + 8);
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      if ((v331 & 1) != 0)
      {
        v28 = a8[1];
        v439 = *a8;
        v440 = (std::__shared_weak_count *)v28;
        if (v28)
        {
          v29 = (unint64_t *)(v28 + 2);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
        }
      }
      else
      {
        v440 = 0;
        v439 = 0;
      }
      siri::dialogengine::CreateNewNode(&v442, a5, a4, (void *)v20, (uint64_t)&v439, *a9, 1, (uint64_t)&v449);
      v53 = v443;
      if (v443)
      {
        v54 = (unint64_t *)&v443->__shared_owners_;
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
      v56 = v440;
      if ((v331 & 1) != 0)
      {
        if (v440)
        {
          v57 = (unint64_t *)&v440->__shared_owners_;
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          goto LABEL_72;
        }
      }
      else if (v440)
      {
        v59 = (unint64_t *)&v440->__shared_owners_;
        do
          v58 = __ldaxr(v59);
        while (__stlxr(v58 - 1, v59));
LABEL_72:
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
      }
      v60 = (std::__shared_weak_count *)*((_QWORD *)&v441 + 1);
      if (*((_QWORD *)&v441 + 1))
      {
        v61 = (unint64_t *)(*((_QWORD *)&v441 + 1) + 8);
        do
          v62 = __ldaxr(v61);
        while (__stlxr(v62 - 1, v61));
        if (!v62)
        {
          ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
          std::__shared_weak_count::__release_weak(v60);
        }
      }
      v63 = *a9;
      if ((v15 & 1) != 0)
      {
        v64 = (std::__shared_weak_count *)a8[1];
        v438[0] = *a8;
        v438[1] = v64;
        if (v64)
        {
          v65 = (unint64_t *)&v64->__shared_owners_;
          do
            v66 = __ldxr(v65);
          while (__stxr(v66 + 1, v65));
        }
        siri::dialogengine::ConnectNodeWithPhraseChildren(v63, v438, (uint64_t *)a4, (uint64_t *)a5);
        if (v64)
        {
          v67 = (unint64_t *)&v64->__shared_owners_;
          do
            v68 = __ldaxr(v67);
          while (__stlxr(v68 - 1, v67));
          if (!v68)
          {
            ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
            std::__shared_weak_count::__release_weak(v64);
          }
        }
      }
      else if ((_DWORD)v63)
      {
        if ((v329 & 1) != 0)
          v69 = **a8;
        else
          v69 = v63 - 1;
        siri::dialogengine::AddNodeToAdjList((uint64_t)*a5, v69, v63);
      }
      siri::dialogengine::AddNodeToAdjList((uint64_t)*a5, *a9, *a9 + 1);
      if (SHIBYTE(v449.__r_.__value_.__r.__words[2]) < 0)
      {
        *v449.__r_.__value_.__l.__data_ = 0;
        v449.__r_.__value_.__l.__size_ = 0;
      }
      else
      {
        v449.__r_.__value_.__s.__data_[0] = 0;
        *((_BYTE *)&v449.__r_.__value_.__s + 23) = 0;
      }
      v15 = 0;
      ++*a9;
      v24 = v445;
      v17 = *((_QWORD *)&v445 + 1);
      goto LABEL_104;
    }
    if (v22)
    {
      v31 = HIBYTE(v449.__r_.__value_.__r.__words[2]);
      if ((v449.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v31 = v449.__r_.__value_.__l.__size_;
      if (v31)
      {
        v421 = v332;
        if (v17)
        {
          v32 = (unint64_t *)(v17 + 8);
          do
            v33 = __ldxr(v32);
          while (__stxr(v33 + 1, v32));
        }
        v34 = a8[1];
        v419 = *a8;
        v420 = (std::__shared_weak_count *)v34;
        if (v34)
        {
          v35 = (unint64_t *)(v34 + 2);
          do
            v36 = __ldxr(v35);
          while (__stxr(v36 + 1, v35));
        }
        siri::dialogengine::CreateNewNode(&v422, a5, a4, (void *)v20, (uint64_t)&v419, *a9, 1, (uint64_t)&v449);
        v37 = v334;
        v38 = v423;
        if (v423)
        {
          v39 = (unint64_t *)&v423->__shared_owners_;
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 - 1, v39));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
        v41 = v420;
        if (v420)
        {
          v42 = (unint64_t *)&v420->__shared_owners_;
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 - 1, v42));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
        v44 = (std::__shared_weak_count *)*((_QWORD *)&v421 + 1);
        if (*((_QWORD *)&v421 + 1))
        {
          v45 = (unint64_t *)(*((_QWORD *)&v421 + 1) + 8);
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 - 1, v45));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
        v47 = *a9;
        if ((v15 & 1) != 0)
        {
          v48 = (std::__shared_weak_count *)a8[1];
          v418[0] = *a8;
          v418[1] = v48;
          if (v48)
          {
            v49 = (unint64_t *)&v48->__shared_owners_;
            do
              v50 = __ldxr(v49);
            while (__stxr(v50 + 1, v49));
          }
          siri::dialogengine::ConnectNodeWithPhraseChildren(v47, v418, (uint64_t *)a4, (uint64_t *)a5);
          if (v48)
          {
            v51 = (unint64_t *)&v48->__shared_owners_;
            do
              v52 = __ldaxr(v51);
            while (__stlxr(v52 - 1, v51));
            if (!v52)
            {
              ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
              std::__shared_weak_count::__release_weak(v48);
            }
          }
        }
        else if ((_DWORD)v47)
        {
          if ((v329 & 1) != 0)
            v70 = **a8;
          else
            v70 = v47 - 1;
          siri::dialogengine::AddNodeToAdjList((uint64_t)*a5, v70, v47);
        }
        if (SHIBYTE(v449.__r_.__value_.__r.__words[2]) < 0)
        {
          *v449.__r_.__value_.__l.__data_ = 0;
          v449.__r_.__value_.__l.__size_ = 0;
        }
        else
        {
          v449.__r_.__value_.__s.__data_[0] = 0;
          *((_BYTE *)&v449.__r_.__value_.__s + 23) = 0;
        }
        v15 = 0;
        ++*a9;
      }
      else
      {
        v37 = v334;
      }
      if (a3)
      {
        (*((void (**)(std::string *__return_ptr, const std::string::value_type **, uint64_t))*v22 + 3))(&v405, v22, a1);
        if (SHIBYTE(v407) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)__s, *((std::string::size_type *)&__s + 1));
          goto LABEL_266;
        }
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = __s;
        v142 = v407;
      }
      else
      {
        (*((void (**)(std::string *__return_ptr, const std::string::value_type **, uint64_t))*v22 + 3))(&v405, v22, a1);
        if (SHIBYTE(v405.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, v405.__r_.__value_.__l.__data_, v405.__r_.__value_.__l.__size_);
          goto LABEL_266;
        }
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v405.__r_.__value_.__l.__data_;
        v142 = v405.__r_.__value_.__r.__words[2];
      }
      __p.__r_.__value_.__r.__words[2] = v142;
LABEL_266:
      if (v417 < 0)
        operator delete(v416);
      if (v415 < 0)
        operator delete(v414);
      if (v413 < 0)
        operator delete(v412);
      if (v411 < 0)
        operator delete(v410);
      if (v409 < 0)
        operator delete(v408);
      if (SHIBYTE(v407) < 0)
        operator delete((void *)__s);
      if (SHIBYTE(v405.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v405.__r_.__value_.__l.__data_);
      v143 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v143 = __p.__r_.__value_.__l.__size_;
      if (!v143)
      {
        if (*((char *)v22 + 223) < 0)
          std::string::__init_copy_ctor_external(&v405, v22[25], (std::string::size_type)v22[26]);
        else
          v405 = *(std::string *)(v22 + 25);
        v144 = std::string::insert(&v405, 0, "$");
        v145 = v144->__r_.__value_.__r.__words[0];
        v450.__r_.__value_.__r.__words[0] = v144->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v450.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v144->__r_.__value_.__r.__words[1] + 7);
        v146 = HIBYTE(v144->__r_.__value_.__r.__words[2]);
        v144->__r_.__value_.__l.__size_ = 0;
        v144->__r_.__value_.__r.__words[2] = 0;
        v144->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __p.__r_.__value_.__r.__words[0] = v145;
        __p.__r_.__value_.__l.__size_ = v450.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v450.__r_.__value_.__r.__words + 7);
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = v146;
        if (SHIBYTE(v405.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v405.__r_.__value_.__l.__data_);
        v37 = v334;
      }
      v147 = (void *)v445;
      v402 = v445;
      if (*((_QWORD *)&v445 + 1))
      {
        v148 = (unint64_t *)(*((_QWORD *)&v445 + 1) + 8);
        do
          v149 = __ldxr(v148);
        while (__stxr(v149 + 1, v148));
      }
      v150 = a8[1];
      v400 = *a8;
      v401 = (std::__shared_weak_count *)v150;
      if (v150)
      {
        v151 = (unint64_t *)(v150 + 2);
        do
          v152 = __ldxr(v151);
        while (__stxr(v152 + 1, v151));
      }
      siri::dialogengine::CreateNewNode(&v403, a5, a4, v147, (uint64_t)&v400, *a9, 2, (uint64_t)&__p);
      v153 = v404;
      if (v404)
      {
        v154 = (unint64_t *)&v404->__shared_owners_;
        do
          v155 = __ldaxr(v154);
        while (__stlxr(v155 - 1, v154));
        if (!v155)
        {
          ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
          std::__shared_weak_count::__release_weak(v153);
        }
      }
      v156 = v401;
      if (v401)
      {
        v157 = (unint64_t *)&v401->__shared_owners_;
        do
          v158 = __ldaxr(v157);
        while (__stlxr(v158 - 1, v157));
        if (!v158)
        {
          ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
          std::__shared_weak_count::__release_weak(v156);
        }
      }
      v159 = (std::__shared_weak_count *)*((_QWORD *)&v402 + 1);
      if (*((_QWORD *)&v402 + 1))
      {
        v160 = (unint64_t *)(*((_QWORD *)&v402 + 1) + 8);
        do
          v161 = __ldaxr(v160);
        while (__stlxr(v161 - 1, v160));
        if (!v161)
        {
          ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
          std::__shared_weak_count::__release_weak(v159);
        }
      }
      v162 = *a9;
      if ((v15 & 1) != 0)
      {
        v163 = (std::__shared_weak_count *)a8[1];
        v399[0] = *a8;
        v399[1] = v163;
        if (v163)
        {
          v164 = (unint64_t *)&v163->__shared_owners_;
          do
            v165 = __ldxr(v164);
          while (__stxr(v165 + 1, v164));
        }
        siri::dialogengine::ConnectNodeWithPhraseChildren(v162, v399, (uint64_t *)a4, (uint64_t *)a5);
        if (v163)
        {
          v166 = (unint64_t *)&v163->__shared_owners_;
          do
            v167 = __ldaxr(v166);
          while (__stlxr(v167 - 1, v166));
          if (!v167)
          {
            ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
            std::__shared_weak_count::__release_weak(v163);
          }
        }
      }
      else if ((_DWORD)v162)
      {
        if (v37 || !*a8)
          v168 = v162 - 1;
        else
          v168 = **a8;
        siri::dialogengine::AddNodeToAdjList((uint64_t)*a5, v168, v162);
      }
      ++*a9;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v15 = 0;
      goto LABEL_330;
    }
    if (!v23)
    {
      v138 = (const siri::dialogengine::SpeakableString *)(v20 + 8);
      if (a3)
      {
        siri::dialogengine::SpeakableString::SpeakableString(&v361, v138);
        v37 = v334;
        v139 = (std::string *)v362;
        if (v363 < 0)
        {
          std::string::__init_copy_ctor_external(&v405, (const std::string::value_type *)v362[0], (std::string::size_type)v362[1]);
          goto LABEL_386;
        }
      }
      else
      {
        siri::dialogengine::SpeakableString::SpeakableString(&v348, v138);
        v37 = v334;
        if (SHIBYTE(v348.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(&v405, v348.__r_.__value_.__l.__data_, v348.__r_.__value_.__l.__size_);
LABEL_386:
          if (SHIBYTE(v444.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v444.__r_.__value_.__l.__data_);
          v444 = v405;
          *((_BYTE *)&v405.__r_.__value_.__s + 23) = 0;
          v405.__r_.__value_.__s.__data_[0] = 0;
          if ((a3 & 1) != 0)
          {
            if (v373 < 0)
              operator delete(v372);
            if (v371 < 0)
              operator delete(v370);
            if (v369 < 0)
              operator delete(v368);
            if (v367 < 0)
              operator delete(v366);
            if (v365 < 0)
              operator delete(v364);
            if (v363 < 0)
              operator delete(v362[0]);
            if ((SHIBYTE(v361.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_418;
            v196 = (void *)v361.__r_.__value_.__r.__words[0];
          }
          else
          {
            if (v360 < 0)
              operator delete(v359);
            if (v358 < 0)
              operator delete(v357);
            if (v356 < 0)
              operator delete(v355);
            if (v354 < 0)
              operator delete(v353);
            if (v352 < 0)
              operator delete(v351);
            if (v350 < 0)
              operator delete(v349);
            if ((SHIBYTE(v348.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_418;
            v196 = (void *)v348.__r_.__value_.__r.__words[0];
          }
          operator delete(v196);
LABEL_418:
          if (v37)
            v197 = 1;
          else
            v197 = *a8 == 0;
          v198 = !v197;
          v329 |= v198;
          if ((v329 & 1) == 0
            || ((v444.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? (v199 = HIBYTE(v444.__r_.__value_.__r.__words[2]))
              : (v199 = v444.__r_.__value_.__l.__size_),
                v199))
          {
            if ((v444.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v200 = &v444;
            else
              v200 = (std::string *)v444.__r_.__value_.__r.__words[0];
            if ((v444.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v201 = HIBYTE(v444.__r_.__value_.__r.__words[2]);
            else
              v201 = v444.__r_.__value_.__l.__size_;
LABEL_435:
            std::string::append(&v449, (const std::string::value_type *)v200, v201);
            goto LABEL_331;
          }
          std::string::append(&v449, " ");
          v329 = 1;
          goto LABEL_331;
        }
        v139 = &v348;
      }
      v405 = *v139;
      goto LABEL_386;
    }
    siri::dialogengine::SpeakableString::SpeakableString(&v405, (const siri::dialogengine::SpeakableString *)(v20 + 8));
    if (SHIBYTE(v405.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v405.__r_.__value_.__l.__data_, v405.__r_.__value_.__l.__size_);
    else
      __p = v405;
    v140 = v332;
    if (SHIBYTE(v444.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v444.__r_.__value_.__l.__data_);
      v140 = v332;
    }
    v444 = __p;
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
    __p.__r_.__value_.__s.__data_[0] = 0;
    if (v417 < 0)
    {
      operator delete(v416);
      v140 = v332;
    }
    if (v415 < 0)
    {
      operator delete(v414);
      v140 = v332;
    }
    if (v413 < 0)
    {
      operator delete(v412);
      v140 = v332;
    }
    if (v411 < 0)
    {
      operator delete(v410);
      v140 = v332;
    }
    if (v409 < 0)
    {
      operator delete(v408);
      v140 = v332;
    }
    if (SHIBYTE(v407) < 0)
    {
      operator delete((void *)__s);
      v140 = v332;
    }
    if (SHIBYTE(v405.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v405.__r_.__value_.__l.__data_);
      v140 = v332;
    }
    if (!a7)
    {
LABEL_441:
      std::string::basic_string[abi:ne180100]<0>(&__p, "\"");
      std::string::basic_string[abi:ne180100]<0>(&v450, "");
      v37 = v334;
      siri::dialogengine::StringReplace((uint64_t)&v444, (char *)&__p, (uint64_t)&v450, 0, &v405);
      if (SHIBYTE(v444.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v444.__r_.__value_.__l.__data_);
      v444 = v405;
      *((_BYTE *)&v405.__r_.__value_.__s + 23) = 0;
      v405.__r_.__value_.__s.__data_[0] = 0;
      if (SHIBYTE(v450.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v450.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if ((v444.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v200 = &v444;
      else
        v200 = (std::string *)v444.__r_.__value_.__r.__words[0];
      if ((v444.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v201 = HIBYTE(v444.__r_.__value_.__r.__words[2]);
      else
        v201 = v444.__r_.__value_.__l.__size_;
      goto LABEL_435;
    }
    if (SHIBYTE(v444.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v444.__r_.__value_.__l.__size_ != 5)
      {
        if (v444.__r_.__value_.__l.__size_ != 6)
          goto LABEL_441;
        v141 = (std::string *)v444.__r_.__value_.__r.__words[0];
        goto LABEL_343;
      }
      if (*(_DWORD *)v444.__r_.__value_.__l.__data_ != 1953525564
        || *(_BYTE *)(v444.__r_.__value_.__r.__words[0] + 4) != 62)
      {
        goto LABEL_441;
      }
    }
    else
    {
      if (HIBYTE(v444.__r_.__value_.__r.__words[2]) != 5)
      {
        if (HIBYTE(v444.__r_.__value_.__r.__words[2]) != 6)
          goto LABEL_441;
        v141 = &v444;
LABEL_343:
        data = (int)v141->__r_.__value_.__l.__data_;
        v173 = WORD2(v141->__r_.__value_.__r.__words[0]);
        if (data != 1886334780 || v173 != 15988)
          goto LABEL_441;
        v175 = HIBYTE(v449.__r_.__value_.__r.__words[2]);
        if ((v449.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v175 = v449.__r_.__value_.__l.__size_;
        if (v175)
        {
          v382 = v140;
          if (v17)
          {
            v176 = (unint64_t *)(v17 + 8);
            do
              v177 = __ldxr(v176);
            while (__stxr(v177 + 1, v176));
          }
          v178 = a8[1];
          v380 = *a8;
          v381 = (std::__shared_weak_count *)v178;
          if (v178)
          {
            v179 = (unint64_t *)(v178 + 2);
            do
              v180 = __ldxr(v179);
            while (__stxr(v180 + 1, v179));
          }
          siri::dialogengine::CreateNewNode(&v383, a5, a4, (void *)v20, (uint64_t)&v380, *a9, 1, (uint64_t)&v449);
          v37 = v334;
          v181 = v384;
          if (v384)
          {
            v182 = (unint64_t *)&v384->__shared_owners_;
            do
              v183 = __ldaxr(v182);
            while (__stlxr(v183 - 1, v182));
            if (!v183)
            {
              ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
              std::__shared_weak_count::__release_weak(v181);
            }
          }
          v184 = v381;
          if (v381)
          {
            v185 = (unint64_t *)&v381->__shared_owners_;
            do
              v186 = __ldaxr(v185);
            while (__stlxr(v186 - 1, v185));
            if (!v186)
            {
              ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
              std::__shared_weak_count::__release_weak(v184);
            }
          }
          v187 = (std::__shared_weak_count *)*((_QWORD *)&v382 + 1);
          if (*((_QWORD *)&v382 + 1))
          {
            v188 = (unint64_t *)(*((_QWORD *)&v382 + 1) + 8);
            do
              v189 = __ldaxr(v188);
            while (__stlxr(v189 - 1, v188));
            if (!v189)
            {
              ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
              std::__shared_weak_count::__release_weak(v187);
            }
          }
          if (!((*a9 == 0) | v15 & 1))
            siri::dialogengine::AddNodeToAdjList((uint64_t)*a5, *a9 - 1, *a9);
          if ((v15 & 1) != 0)
          {
            v190 = *a9;
            v191 = (std::__shared_weak_count *)a8[1];
            v379[0] = *a8;
            v379[1] = v191;
            if (v191)
            {
              v192 = (unint64_t *)&v191->__shared_owners_;
              do
                v193 = __ldxr(v192);
              while (__stxr(v193 + 1, v192));
            }
            siri::dialogengine::ConnectNodeWithPhraseChildren(v190, v379, (uint64_t *)a4, (uint64_t *)a5);
            if (v191)
            {
              v194 = (unint64_t *)&v191->__shared_owners_;
              do
                v195 = __ldaxr(v194);
              while (__stlxr(v195 - 1, v194));
              if (!v195)
              {
                ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
                std::__shared_weak_count::__release_weak(v191);
              }
            }
          }
          if (SHIBYTE(v449.__r_.__value_.__r.__words[2]) < 0)
          {
            *v449.__r_.__value_.__l.__data_ = 0;
            v449.__r_.__value_.__l.__size_ = 0;
          }
          else
          {
            v449.__r_.__value_.__s.__data_[0] = 0;
            *((_BYTE *)&v449.__r_.__value_.__s + 23) = 0;
          }
          v15 = 0;
          ++*a9;
        }
        else
        {
          v37 = v334;
        }
        if (((v447 - v446) >> 4) - 1 == v37)
        {
          v221 = (void *)v445;
          v376 = v445;
          if (*((_QWORD *)&v445 + 1))
          {
            v222 = (unint64_t *)(*((_QWORD *)&v445 + 1) + 8);
            do
              v223 = __ldxr(v222);
            while (__stxr(v223 + 1, v222));
          }
          v224 = a8[1];
          v374 = *a8;
          v375 = (std::__shared_weak_count *)v224;
          if (v224)
          {
            v225 = (unint64_t *)(v224 + 2);
            do
              v226 = __ldxr(v225);
            while (__stxr(v226 + 1, v225));
          }
          v227 = *a9;
          std::string::basic_string[abi:ne180100]<0>(&v405, "closing_dummy_node");
          siri::dialogengine::CreateNewNode(&v377, a5, a4, v221, (uint64_t)&v374, v227, 0, (uint64_t)&v405);
          v228 = v378;
          if (v378)
          {
            v229 = (unint64_t *)&v378->__shared_owners_;
            do
              v230 = __ldaxr(v229);
            while (__stlxr(v230 - 1, v229));
            if (!v230)
            {
              ((void (*)(std::__shared_weak_count *))v228->__on_zero_shared)(v228);
              std::__shared_weak_count::__release_weak(v228);
            }
          }
          if (SHIBYTE(v405.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v405.__r_.__value_.__l.__data_);
          v231 = v375;
          if (v375)
          {
            v232 = (unint64_t *)&v375->__shared_owners_;
            do
              v233 = __ldaxr(v232);
            while (__stlxr(v233 - 1, v232));
            if (!v233)
            {
              ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
              std::__shared_weak_count::__release_weak(v231);
            }
          }
          v234 = (std::__shared_weak_count *)*((_QWORD *)&v376 + 1);
          if (*((_QWORD *)&v376 + 1))
          {
            v235 = (unint64_t *)(*((_QWORD *)&v376 + 1) + 8);
            do
              v236 = __ldaxr(v235);
            while (__stlxr(v236 - 1, v235));
            if (!v236)
            {
              ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
              std::__shared_weak_count::__release_weak(v234);
            }
          }
          siri::dialogengine::AddNodeToAdjList((uint64_t)*a5, v325, *a9);
LABEL_518:
          ++*a9;
          goto LABEL_331;
        }
        siri::dialogengine::AddNodeToAdjList((uint64_t)*a5, v325, *a9);
        goto LABEL_331;
      }
      if (LODWORD(v444.__r_.__value_.__l.__data_) != 1953525564 || v444.__r_.__value_.__s.__data_[4] != 62)
        goto LABEL_441;
    }
    v325 = *a9;
    if (*a9)
    {
      if (!v334)
        goto LABEL_466;
      v204 = *(const void **)(v446 + 16 * (v334 - 1));
      if (v204)
      {
        if (v205)
        {
          siri::dialogengine::SpeakableString::SpeakableString(&v405, (const siri::dialogengine::SpeakableString *)(v205 + 8));
          if (SHIBYTE(v405.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&__p, v405.__r_.__value_.__l.__data_, v405.__r_.__value_.__l.__size_);
          else
            __p = v405;
          v237 = v332;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            v239 = __p.__r_.__value_.__l.__size_ == 6
                && *(_DWORD *)__p.__r_.__value_.__l.__data_ == 1886334780
                && *(_WORD *)(__p.__r_.__value_.__r.__words[0] + 4) == 15988;
            operator delete(__p.__r_.__value_.__l.__data_);
            v237 = v332;
          }
          else
          {
            v239 = SHIBYTE(__p.__r_.__value_.__r.__words[2]) == 6
                && LODWORD(__p.__r_.__value_.__l.__data_) == 1886334780
                && WORD2(__p.__r_.__value_.__r.__words[0]) == 15988;
          }
          if (v417 < 0)
          {
            operator delete(v416);
            v237 = v332;
          }
          if (v415 < 0)
          {
            operator delete(v414);
            v237 = v332;
          }
          if (v413 < 0)
          {
            operator delete(v412);
            v237 = v332;
          }
          if (v411 < 0)
          {
            operator delete(v410);
            v237 = v332;
          }
          if (v409 < 0)
          {
            operator delete(v408);
            v237 = v332;
          }
          if (SHIBYTE(v407) < 0)
          {
            operator delete((void *)__s);
            v237 = v332;
          }
          if (SHIBYTE(v405.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v405.__r_.__value_.__l.__data_);
            v237 = v332;
          }
          if (v239)
          {
            v398 = v237;
            if (v17)
            {
              v241 = (unint64_t *)(v17 + 8);
              do
                v242 = __ldxr(v241);
              while (__stxr(v242 + 1, v241));
            }
            v243 = (std::__shared_weak_count *)a8[1];
            v397[0] = *a8;
            v397[1] = v243;
            if (v243)
            {
              v244 = (unint64_t *)&v243->__shared_owners_;
              do
                v245 = __ldxr(v244);
              while (__stxr(v245 + 1, v244));
            }
            v246 = *a9;
            std::string::basic_string[abi:ne180100]<0>(&v405, "sequential_opt_dummy_node");
            siri::dialogengine::CreateNewNode((uint64_t *)&__p, a5, a4, (void *)v20, (uint64_t)v397, v246, 0, (uint64_t)&v405);
            if (SHIBYTE(v405.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v405.__r_.__value_.__l.__data_);
            if (v243)
            {
              v247 = (unint64_t *)&v243->__shared_owners_;
              do
                v248 = __ldaxr(v247);
              while (__stlxr(v248 - 1, v247));
              if (!v248)
              {
                ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
                std::__shared_weak_count::__release_weak(v243);
              }
            }
            v249 = (std::__shared_weak_count *)*((_QWORD *)&v398 + 1);
            if (*((_QWORD *)&v398 + 1))
            {
              v250 = (unint64_t *)(*((_QWORD *)&v398 + 1) + 8);
              do
                v251 = __ldaxr(v250);
              while (__stlxr(v251 - 1, v250));
              if (!v251)
              {
                ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
                std::__shared_weak_count::__release_weak(v249);
              }
            }
            v252 = *a9;
            if (!(((_DWORD)v252 == 0) | v15 & 1))
            {
              siri::dialogengine::AddNodeToAdjList((uint64_t)*a5, v252 - 1, v252);
              v252 = *a9;
            }
            v253 = (std::__shared_weak_count *)a8[1];
            v396[0] = *a8;
            v396[1] = v253;
            if (v253)
            {
              v254 = (unint64_t *)&v253->__shared_owners_;
              do
                v255 = __ldxr(v254);
              while (__stxr(v255 + 1, v254));
            }
            siri::dialogengine::ConnectNodeWithPhraseChildren(v252, v396, (uint64_t *)a4, (uint64_t *)a5);
            if (v253)
            {
              v256 = (unint64_t *)&v253->__shared_owners_;
              do
                v257 = __ldaxr(v256);
              while (__stlxr(v257 - 1, v256));
              if (!v257)
              {
                ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
                std::__shared_weak_count::__release_weak(v253);
              }
            }
            v258 = *a9 + 1;
            *a9 = v258;
            siri::dialogengine::AddNodeToAdjList((uint64_t)*a5, *(_DWORD *)__p.__r_.__value_.__l.__data_, v258);
            v259 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
            if (__p.__r_.__value_.__l.__size_)
            {
              v260 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
              do
                v261 = __ldaxr(v260);
              while (__stlxr(v261 - 1, v260));
              if (!v261)
              {
                ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
                std::__shared_weak_count::__release_weak(v259);
              }
            }
          }
        }
      }
    }
    else if (!v334)
    {
LABEL_466:
      v393 = v140;
      if (v17)
      {
        v206 = (unint64_t *)(v17 + 8);
        do
          v207 = __ldxr(v206);
        while (__stxr(v207 + 1, v206));
      }
      v208 = a8[1];
      v391 = *a8;
      v392 = (std::__shared_weak_count *)v208;
      if (v208)
      {
        v209 = (unint64_t *)(v208 + 2);
        do
          v210 = __ldxr(v209);
        while (__stxr(v210 + 1, v209));
      }
      v211 = *a9;
      std::string::basic_string[abi:ne180100]<0>(&v405, "dummy_node");
      v37 = v334;
      siri::dialogengine::CreateNewNode(&v394, a5, a4, (void *)v20, (uint64_t)&v391, v211, 0, (uint64_t)&v405);
      v212 = v395;
      if (v395)
      {
        v213 = (unint64_t *)&v395->__shared_owners_;
        do
          v214 = __ldaxr(v213);
        while (__stlxr(v214 - 1, v213));
        if (!v214)
        {
          ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
          std::__shared_weak_count::__release_weak(v212);
        }
      }
      if (SHIBYTE(v405.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v405.__r_.__value_.__l.__data_);
      v215 = v392;
      if (v392)
      {
        v216 = (unint64_t *)&v392->__shared_owners_;
        do
          v217 = __ldaxr(v216);
        while (__stlxr(v217 - 1, v216));
        if (!v217)
        {
          ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
          std::__shared_weak_count::__release_weak(v215);
        }
      }
      v218 = (std::__shared_weak_count *)*((_QWORD *)&v393 + 1);
      if (*((_QWORD *)&v393 + 1))
      {
        v219 = (unint64_t *)(*((_QWORD *)&v393 + 1) + 8);
        do
          v220 = __ldaxr(v219);
        while (__stlxr(v220 - 1, v219));
        if (!v220)
        {
          ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
          std::__shared_weak_count::__release_weak(v218);
        }
      }
      if (*a8)
        siri::dialogengine::AddNodeToAdjList((uint64_t)*a5, **a8, *a9);
      goto LABEL_518;
    }
    v262 = HIBYTE(v449.__r_.__value_.__r.__words[2]);
    if ((v449.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v262 = v449.__r_.__value_.__l.__size_;
    if (v262)
    {
      v263 = (void *)v445;
      v388 = v445;
      v37 = v334;
      if (*((_QWORD *)&v445 + 1))
      {
        v264 = (unint64_t *)(*((_QWORD *)&v445 + 1) + 8);
        do
          v265 = __ldxr(v264);
        while (__stxr(v265 + 1, v264));
      }
      v266 = a8[1];
      v386 = *a8;
      v387 = (std::__shared_weak_count *)v266;
      if (v266)
      {
        v267 = (unint64_t *)(v266 + 2);
        do
          v268 = __ldxr(v267);
        while (__stxr(v268 + 1, v267));
      }
      siri::dialogengine::CreateNewNode(&v389, a5, a4, v263, (uint64_t)&v386, *a9, 1, (uint64_t)&v449);
      v269 = v390;
      if (v390)
      {
        v270 = (unint64_t *)&v390->__shared_owners_;
        do
          v271 = __ldaxr(v270);
        while (__stlxr(v271 - 1, v270));
        if (!v271)
        {
          ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
          std::__shared_weak_count::__release_weak(v269);
        }
      }
      v272 = v387;
      if (v387)
      {
        v273 = (unint64_t *)&v387->__shared_owners_;
        do
          v274 = __ldaxr(v273);
        while (__stlxr(v274 - 1, v273));
        if (!v274)
        {
          ((void (*)(std::__shared_weak_count *))v272->__on_zero_shared)(v272);
          std::__shared_weak_count::__release_weak(v272);
        }
      }
      v275 = (std::__shared_weak_count *)*((_QWORD *)&v388 + 1);
      if (*((_QWORD *)&v388 + 1))
      {
        v276 = (unint64_t *)(*((_QWORD *)&v388 + 1) + 8);
        do
          v277 = __ldaxr(v276);
        while (__stlxr(v277 - 1, v276));
        if (!v277)
        {
          ((void (*)(std::__shared_weak_count *))v275->__on_zero_shared)(v275);
          std::__shared_weak_count::__release_weak(v275);
        }
      }
      v278 = *a9;
      if (!((*a9 == 0) | v15 & 1))
      {
        if ((v329 & 1) != 0)
          v279 = **a8;
        else
          v279 = v278 - 1;
        siri::dialogengine::AddNodeToAdjList((uint64_t)*a5, v279, v278);
      }
      if ((v15 & 1) != 0)
      {
        v280 = *a9;
        v281 = (std::__shared_weak_count *)a8[1];
        v385[0] = *a8;
        v385[1] = v281;
        if (v281)
        {
          v282 = (unint64_t *)&v281->__shared_owners_;
          do
            v283 = __ldxr(v282);
          while (__stxr(v283 + 1, v282));
        }
        siri::dialogengine::ConnectNodeWithPhraseChildren(v280, v385, (uint64_t *)a4, (uint64_t *)a5);
        if (v281)
        {
          v284 = (unint64_t *)&v281->__shared_owners_;
          do
            v285 = __ldaxr(v284);
          while (__stlxr(v285 - 1, v284));
          if (!v285)
          {
            ((void (*)(std::__shared_weak_count *))v281->__on_zero_shared)(v281);
            std::__shared_weak_count::__release_weak(v281);
          }
        }
      }
      ++*a9;
      v15 = 0;
      v329 = 0;
      if (SHIBYTE(v449.__r_.__value_.__r.__words[2]) < 0)
      {
        *v449.__r_.__value_.__l.__data_ = 0;
        v449.__r_.__value_.__l.__size_ = 0;
      }
      else
      {
        v449.__r_.__value_.__s.__data_[0] = 0;
        *((_BYTE *)&v449.__r_.__value_.__s + 23) = 0;
      }
    }
    else
    {
      v37 = v334;
    }
LABEL_331:
    if (SHIBYTE(v444.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v444.__r_.__value_.__l.__data_);
    v169 = (std::__shared_weak_count *)*((_QWORD *)&v445 + 1);
    if (*((_QWORD *)&v445 + 1))
    {
      v170 = (unint64_t *)(*((_QWORD *)&v445 + 1) + 8);
      do
        v171 = __ldaxr(v170);
      while (__stlxr(v171 - 1, v170));
      if (!v171)
      {
        ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
        std::__shared_weak_count::__release_weak(v169);
      }
    }
    v14 = v37 + 1;
    v13 = v446;
  }
  while (v14 < (v447 - v446) >> 4);
  v286 = HIBYTE(v449.__r_.__value_.__r.__words[2]);
  if ((v449.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v286 = v449.__r_.__value_.__l.__size_;
  if (v286)
  {
    v287 = v329;
    if ((v329 & 1) == 0)
      goto LABEL_644;
    if ((SHIBYTE(v449.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (SHIBYTE(v449.__r_.__value_.__r.__words[2]) == 1)
      {
        v288 = &v449;
        goto LABEL_638;
      }
      goto LABEL_644;
    }
    if (v449.__r_.__value_.__l.__size_ == 1)
    {
      v288 = (std::string *)v449.__r_.__value_.__r.__words[0];
LABEL_638:
      if (v288->__r_.__value_.__s.__data_[0] == 32)
      {
        v344 = 0;
        v345 = 0;
        if ((v331 & 1) != 0)
        {
          v289 = a8[1];
          v342 = *a8;
          v343 = (std::__shared_weak_count *)v289;
          if (v289)
          {
            v290 = (unint64_t *)(v289 + 2);
            do
              v291 = __ldxr(v290);
            while (__stxr(v291 + 1, v290));
          }
        }
        else
        {
          v342 = 0;
          v343 = 0;
        }
        v314 = *a9;
        std::string::basic_string[abi:ne180100]<0>(&v405, "");
        siri::dialogengine::CreateNewNode(&v346, a5, a4, 0, (uint64_t)&v342, v314, 1, (uint64_t)&v405);
        v315 = v347;
        if (v347)
        {
          v316 = (unint64_t *)&v347->__shared_owners_;
          do
            v317 = __ldaxr(v316);
          while (__stlxr(v317 - 1, v316));
          if (!v317)
          {
            ((void (*)(std::__shared_weak_count *))v315->__on_zero_shared)(v315);
            std::__shared_weak_count::__release_weak(v315);
          }
        }
        if (SHIBYTE(v405.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v405.__r_.__value_.__l.__data_);
        v318 = v343;
        if ((v331 & 1) != 0)
        {
          if (v343)
          {
            v319 = (unint64_t *)&v343->__shared_owners_;
            do
              v320 = __ldaxr(v319);
            while (__stlxr(v320 - 1, v319));
LABEL_704:
            if (!v320)
            {
              ((void (*)(std::__shared_weak_count *))v318->__on_zero_shared)(v318);
              std::__shared_weak_count::__release_weak(v318);
            }
          }
        }
        else if (v343)
        {
          v321 = (unint64_t *)&v343->__shared_owners_;
          do
            v320 = __ldaxr(v321);
          while (__stlxr(v320 - 1, v321));
          goto LABEL_704;
        }
        v302 = v345;
        if (v345)
        {
          v322 = (unint64_t *)&v345->__shared_owners_;
          do
            v323 = __ldaxr(v322);
          while (__stlxr(v323 - 1, v322));
          v287 = 1;
          if (!v323)
            goto LABEL_669;
        }
        else
        {
          v287 = 1;
        }
        goto LABEL_670;
      }
    }
LABEL_644:
    v338 = 0;
    v339 = 0;
    if ((v331 & 1) != 0)
    {
      v292 = a8[1];
      v336 = *a8;
      v337 = (std::__shared_weak_count *)v292;
      if (v292)
      {
        v293 = (unint64_t *)(v292 + 2);
        do
          v294 = __ldxr(v293);
        while (__stxr(v294 + 1, v293));
      }
    }
    else
    {
      v336 = 0;
      v337 = 0;
    }
    siri::dialogengine::CreateNewNode(&v340, a5, a4, 0, (uint64_t)&v336, *a9, 1, (uint64_t)&v449);
    v295 = v341;
    if (v341)
    {
      v296 = (unint64_t *)&v341->__shared_owners_;
      do
        v297 = __ldaxr(v296);
      while (__stlxr(v297 - 1, v296));
      if (!v297)
      {
        ((void (*)(std::__shared_weak_count *))v295->__on_zero_shared)(v295);
        std::__shared_weak_count::__release_weak(v295);
      }
    }
    v298 = v337;
    if ((v331 & 1) != 0)
    {
      if (v337)
      {
        v299 = (unint64_t *)&v337->__shared_owners_;
        do
          v300 = __ldaxr(v299);
        while (__stlxr(v300 - 1, v299));
LABEL_663:
        if (!v300)
        {
          ((void (*)(std::__shared_weak_count *))v298->__on_zero_shared)(v298);
          std::__shared_weak_count::__release_weak(v298);
        }
      }
    }
    else if (v337)
    {
      v301 = (unint64_t *)&v337->__shared_owners_;
      do
        v300 = __ldaxr(v301);
      while (__stlxr(v300 - 1, v301));
      goto LABEL_663;
    }
    v302 = v339;
    if (v339)
    {
      v303 = (unint64_t *)&v339->__shared_owners_;
      do
        v304 = __ldaxr(v303);
      while (__stlxr(v304 - 1, v303));
      if (!v304)
      {
LABEL_669:
        ((void (*)(std::__shared_weak_count *))v302->__on_zero_shared)(v302);
        std::__shared_weak_count::__release_weak(v302);
      }
    }
LABEL_670:
    v305 = *a9;
    if (!((*a9 == 0) | v15 & 1))
    {
      if ((v287 & 1) != 0)
        v306 = **a8;
      else
        v306 = v305 - 1;
      siri::dialogengine::AddNodeToAdjList((uint64_t)*a5, v306, v305);
    }
    if ((v15 & 1) != 0)
    {
      v307 = *a9;
      v308 = *a8;
      v309 = (std::__shared_weak_count *)a8[1];
      v335[0] = v308;
      v335[1] = v309;
      if (v309)
      {
        v310 = (unint64_t *)&v309->__shared_owners_;
        do
          v311 = __ldxr(v310);
        while (__stxr(v311 + 1, v310));
      }
      siri::dialogengine::ConnectNodeWithPhraseChildren(v307, v335, (uint64_t *)a4, (uint64_t *)a5);
      if (v309)
      {
        v312 = (unint64_t *)&v309->__shared_owners_;
        do
          v313 = __ldaxr(v312);
        while (__stlxr(v313 - 1, v312));
        if (!v313)
        {
          ((void (*)(std::__shared_weak_count *))v309->__on_zero_shared)(v309);
          std::__shared_weak_count::__release_weak(v309);
        }
      }
    }
    ++*a9;
  }
LABEL_685:
  v405.__r_.__value_.__r.__words[0] = (std::string::size_type)&v446;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v405);
  if (SHIBYTE(v449.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v449.__r_.__value_.__l.__data_);
}

void sub_1BFC6C1F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  siri::dialogengine::SpeakableString::~SpeakableString((void **)&STACK[0x390]);
  if (*(char *)(v1 - 201) < 0)
    operator delete(*(void **)(v1 - 224));
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v1 - 192);
  STACK[0x390] = v1 - 176;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x390]);
  if (*(char *)(v1 - 129) < 0)
    operator delete(*(void **)(v1 - 152));
  _Unwind_Resume(a1);
}

void siri::dialogengine::GetAllPaths(siri::dialogengine::Dialog *a1, int a2, unsigned int a3, int **a4, _QWORD *a5, _QWORD *a6, char **a7, unsigned int a8, int *a9, int *a10)
{
  int *v13;
  int *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const std::string::value_type *v19;
  const std::string::value_type *v20;
  int v21;
  const std::string::value_type *v22;
  std::string::size_type v23;
  int v24;
  const char *v25;
  std::string::size_type size;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  void *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  _OWORD *v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  _QWORD *v80;
  _QWORD *v81;
  char *v82;
  __int128 v83;
  int64x2_t v84;
  char *v85;
  std::string::size_type v86;
  uint64_t v88;
  unsigned int *v89;
  _QWORD *v90;
  int *v91;
  char **v92;
  uint64_t v93;
  int *v94;
  int *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  char *v101;
  int v102;
  unint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  uint64_t v111;
  char *v112;
  char *v113;
  char *v114;
  char *v115;
  __int128 v116;
  int64x2_t v117;
  uint64_t i;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  char *v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  __int128 v138;
  int64x2_t v139;
  char *v140;
  char *v141;
  unsigned int *v142;
  __int128 v146;
  std::string __p;
  void *v148[2];
  char v149;
  void *v150;
  char v151;
  void *v152;
  char v153;
  void *v154;
  char v155;
  void *v156;
  char v157;
  void *v158;
  char v159;
  std::string v160;
  int64x2_t v161;
  char *v162;
  std::string v163;
  __int128 v164;
  std::string v165;
  void *v166[3];
  __int128 v167;
  void *v168[3];
  __int128 v169;
  char v170;
  void *v171;
  char v172;
  void *v173;
  char v174;
  void *v175;
  char v176;
  uint64_t v177;

  v177 = *MEMORY[0x1E0C80C00];
  if (a2 != a3)
  {
    v88 = *a5 + 24 * a2;
    v89 = *(unsigned int **)v88;
    v142 = *(unsigned int **)(v88 + 8);
    if (*(unsigned int **)v88 != v142)
    {
      v90 = a4 + 2;
      v91 = a4[1];
      do
      {
        v92 = a7;
        v93 = *v89;
        ++*a9;
        if ((unint64_t)v91 >= *v90)
        {
          v95 = *a4;
          v96 = v91 - *a4;
          v97 = v96 + 1;
          if ((unint64_t)(v96 + 1) >> 62)
            std::vector<BOOL>::__throw_length_error[abi:ne180100]();
          v98 = *v90 - (_QWORD)v95;
          if (v98 >> 1 > v97)
            v97 = v98 >> 1;
          if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFFCLL)
            v99 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v99 = v97;
          if (v99)
          {
            v100 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a4 + 2), v99);
            v95 = *a4;
            v91 = a4[1];
          }
          else
          {
            v100 = 0;
          }
          v101 = &v100[4 * v96];
          *(_DWORD *)v101 = v93;
          v94 = (int *)(v101 + 4);
          while (v91 != v95)
          {
            v102 = *--v91;
            *((_DWORD *)v101 - 1) = v102;
            v101 -= 4;
          }
          *a4 = (int *)v101;
          a4[1] = v94;
          a4[2] = (int *)&v100[4 * v99];
          if (v95)
            operator delete(v95);
        }
        else
        {
          *v91 = v93;
          v94 = v91 + 1;
        }
        a4[1] = v94;
        if (*a9 > 300000000)
          break;
        if (*a10 > 2500)
          break;
        a7 = v92;
        siri::dialogengine::GetAllPaths(a1, v93, a3, a4, a5, a6, v92, a8, a9, a10);
        v91 = a4[1] - 1;
        a4[1] = v91;
        ++v89;
      }
      while (v89 != v142);
    }
    return;
  }
  ++*a10;
  memset(&v163, 0, sizeof(v163));
  v161 = 0uLL;
  v162 = 0;
  v13 = *a4;
  v14 = a4[1];
  if (*a4 == v14)
    goto LABEL_258;
  v15 = a8;
  do
  {
    v16 = 16 * *v13;
    v17 = *(_QWORD *)(*a6 + v16);
    if (*(_DWORD *)(v17 + 4))
    {
      v20 = *(const std::string::value_type **)(v17 + 8);
      v18 = v17 + 8;
      v19 = v20;
      v21 = *(char *)(v18 + 23);
      if (v21 >= 0)
        v22 = (const std::string::value_type *)v18;
      else
        v22 = v19;
      if (v21 >= 0)
        v23 = *(unsigned __int8 *)(v18 + 23);
      else
        v23 = *(_QWORD *)(v18 + 8);
      std::string::append(&v163, v22, v23);
    }
    *(_OWORD *)&v160.__r_.__value_.__r.__words[1] = 0uLL;
    v160.__r_.__value_.__r.__words[0] = (std::string::size_type)&v160.__r_.__value_.__l.__size_;
    if (!v15)
    {
      memset(v166, 0, sizeof(v166));
      memset(&v165, 0, sizeof(v165));
      v24 = *(_DWORD *)(*(_QWORD *)(*a6 + v16) + 4);
      if (v24 == 2)
      {
        v25 = "variable";
      }
      else
      {
        if (v24 != 1)
          goto LABEL_32;
        v25 = "text";
      }
      MEMORY[0x1C3B8D53C](v166, v25);
      std::string::operator=(&v165, (const std::string *)(*(_QWORD *)(*a6 + v16) + 8));
      size = HIBYTE(v165.__r_.__value_.__r.__words[2]);
      if ((v165.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v165.__r_.__value_.__l.__size_;
      if (size)
      {
        siri::dialogengine::CreateJSONStringVal(*(_QWORD *)(*a6 + v16) + 8, (uint64_t *)&v164);
        std::string::basic_string[abi:ne180100]<0>(&__p, "text");
        *(_OWORD *)v148 = v164;
        v164 = 0uLL;
        std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>>((uint64_t **)&v160, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
        v27 = (std::__shared_weak_count *)v148[1];
        if (v148[1])
        {
          v28 = (unint64_t *)((char *)v148[1] + 8);
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v30 = (std::__shared_weak_count *)*((_QWORD *)&v164 + 1);
        if (*((_QWORD *)&v164 + 1))
        {
          v31 = (unint64_t *)(*((_QWORD *)&v164 + 1) + 8);
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
      }
LABEL_32:
      v33 = (void *)HIBYTE(v166[2]);
      if (SHIBYTE(v166[2]) < 0)
        v33 = v166[1];
      if (v33)
      {
        siri::dialogengine::CreateJSONStringVal((uint64_t)v166, (uint64_t *)&v164);
        std::string::basic_string[abi:ne180100]<0>(&__p, "type");
        *(_OWORD *)v148 = v164;
        v164 = 0uLL;
        std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>>((uint64_t **)&v160, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
        v34 = (std::__shared_weak_count *)v148[1];
        if (v148[1])
        {
          v35 = (unint64_t *)((char *)v148[1] + 8);
          do
            v36 = __ldaxr(v35);
          while (__stlxr(v36 - 1, v35));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v37 = (std::__shared_weak_count *)*((_QWORD *)&v164 + 1);
        if (*((_QWORD *)&v164 + 1))
        {
          v38 = (unint64_t *)(*((_QWORD *)&v164 + 1) + 8);
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 - 1, v38));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
        }
      }
      v40 = *(_QWORD *)(*a6 + v16);
      v41 = *(unsigned __int8 *)(v40 + 55);
      if (*(char *)(v40 + 55) < 0)
      {
        if (*(_QWORD *)(v40 + 40))
          goto LABEL_49;
      }
      else if (*(_BYTE *)(v40 + 55))
      {
LABEL_49:
        siri::dialogengine::CreateJSONStringVal(v40 + 32, (uint64_t *)&v164);
        std::string::basic_string[abi:ne180100]<0>(&__p, "phraseId");
        *(_OWORD *)v148 = v164;
        v164 = 0uLL;
        std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>>((uint64_t **)&v160, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
        v42 = (std::__shared_weak_count *)v148[1];
        if (v148[1])
        {
          v43 = (unint64_t *)((char *)v148[1] + 8);
          do
            v44 = __ldaxr(v43);
          while (__stlxr(v44 - 1, v43));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
          }
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v45 = (std::__shared_weak_count *)*((_QWORD *)&v164 + 1);
        if (*((_QWORD *)&v164 + 1))
        {
          v46 = (unint64_t *)(*((_QWORD *)&v164 + 1) + 8);
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
        v40 = *(_QWORD *)(*a6 + v16);
        v41 = *(unsigned __int8 *)(v40 + 55);
        if ((v41 & 0x80) != 0)
        {
LABEL_62:
          if (!*(_QWORD *)(v40 + 40))
            goto LABEL_80;
          goto LABEL_67;
        }
LABEL_66:
        if (!v41)
          goto LABEL_80;
LABEL_67:
        siri::dialogengine::CreateJSONStringVal(v40 + 56, (uint64_t *)&v164);
        std::string::basic_string[abi:ne180100]<0>(&__p, "phraseName");
        *(_OWORD *)v148 = v164;
        v164 = 0uLL;
        std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>>((uint64_t **)&v160, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
        v48 = (std::__shared_weak_count *)v148[1];
        if (v148[1])
        {
          v49 = (unint64_t *)((char *)v148[1] + 8);
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v51 = (std::__shared_weak_count *)*((_QWORD *)&v164 + 1);
        if (*((_QWORD *)&v164 + 1))
        {
          v52 = (unint64_t *)(*((_QWORD *)&v164 + 1) + 8);
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 - 1, v52));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
        }
        v40 = *(_QWORD *)(*a6 + v16);
LABEL_80:
        if (*(char *)(v40 + 103) < 0)
        {
          if (!*(_QWORD *)(v40 + 88))
            goto LABEL_97;
        }
        else if (!*(_BYTE *)(v40 + 103))
        {
          goto LABEL_97;
        }
        siri::dialogengine::CreateJSONStringVal(v40 + 80, (uint64_t *)&v164);
        std::string::basic_string[abi:ne180100]<0>(&__p, "varId");
        *(_OWORD *)v148 = v164;
        v164 = 0uLL;
        std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>>((uint64_t **)&v160, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
        v54 = (std::__shared_weak_count *)v148[1];
        if (v148[1])
        {
          v55 = (unint64_t *)((char *)v148[1] + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v57 = (std::__shared_weak_count *)*((_QWORD *)&v164 + 1);
        if (*((_QWORD *)&v164 + 1))
        {
          v58 = (unint64_t *)(*((_QWORD *)&v164 + 1) + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        v40 = *(_QWORD *)(*a6 + v16);
LABEL_97:
        if (*(char *)(v40 + 127) < 0)
        {
          if (!*(_QWORD *)(v40 + 112))
            goto LABEL_114;
        }
        else if (!*(_BYTE *)(v40 + 127))
        {
          goto LABEL_114;
        }
        siri::dialogengine::CreateJSONStringVal(v40 + 104, (uint64_t *)&v164);
        std::string::basic_string[abi:ne180100]<0>(&__p, "varName");
        *(_OWORD *)v148 = v164;
        v164 = 0uLL;
        std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>>((uint64_t **)&v160, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
        v60 = (std::__shared_weak_count *)v148[1];
        if (v148[1])
        {
          v61 = (unint64_t *)((char *)v148[1] + 8);
          do
            v62 = __ldaxr(v61);
          while (__stlxr(v62 - 1, v61));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v63 = (std::__shared_weak_count *)*((_QWORD *)&v164 + 1);
        if (*((_QWORD *)&v164 + 1))
        {
          v64 = (unint64_t *)(*((_QWORD *)&v164 + 1) + 8);
          do
            v65 = __ldaxr(v64);
          while (__stlxr(v65 - 1, v64));
          if (!v65)
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
          }
        }
        v40 = *(_QWORD *)(*a6 + v16);
LABEL_114:
        if (*(char *)(v40 + 151) < 0)
        {
          if (!*(_QWORD *)(v40 + 136))
          {
LABEL_130:
            if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v165.__r_.__value_.__l.__data_);
            if (SHIBYTE(v166[2]) < 0)
              operator delete(v166[0]);
            if (v160.__r_.__value_.__r.__words[2])
            {
              siri::dialogengine::CreateJSONObjectVal((const void ***)&v160, (uint64_t *)v166);
              v72 = v161.i64[1];
              if (v161.i64[1] >= (unint64_t)v162)
              {
                v74 = (v161.i64[1] - v161.i64[0]) >> 4;
                if ((unint64_t)(v74 + 1) >> 60)
                  std::vector<BOOL>::__throw_length_error[abi:ne180100]();
                v75 = (uint64_t)&v162[-v161.i64[0]] >> 3;
                if (v75 <= v74 + 1)
                  v75 = v74 + 1;
                if ((unint64_t)&v162[-v161.i64[0]] >= 0x7FFFFFFFFFFFFFF0)
                  v76 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v76 = v75;
                v148[1] = &v162;
                v77 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v76);
                v79 = &v77[16 * v74];
                *(_OWORD *)v79 = *(_OWORD *)v166;
                v166[0] = 0;
                v166[1] = 0;
                v80 = (_QWORD *)v161.i64[1];
                v81 = (_QWORD *)v161.i64[0];
                if (v161.i64[1] == v161.i64[0])
                {
                  v84 = vdupq_n_s64(v161.u64[1]);
                  v82 = &v77[16 * v74];
                }
                else
                {
                  v82 = &v77[16 * v74];
                  do
                  {
                    v83 = *((_OWORD *)v80 - 1);
                    v80 -= 2;
                    *((_OWORD *)v82 - 1) = v83;
                    v82 -= 16;
                    *v80 = 0;
                    v80[1] = 0;
                  }
                  while (v80 != v81);
                  v84 = v161;
                }
                v73 = v79 + 16;
                v161.i64[0] = (uint64_t)v82;
                v161.i64[1] = (uint64_t)(v79 + 16);
                *(int64x2_t *)&__p.__r_.__value_.__r.__words[1] = v84;
                v85 = v162;
                v162 = &v77[16 * v78];
                v148[0] = v85;
                __p.__r_.__value_.__r.__words[0] = v84.i64[0];
                std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)&__p);
              }
              else
              {
                *(_OWORD *)v161.i64[1] = *(_OWORD *)v166;
                v73 = (_OWORD *)(v72 + 16);
              }
              v161.i64[1] = (uint64_t)v73;
              v15 = a8;
            }
            goto LABEL_150;
          }
        }
        else if (!*(_BYTE *)(v40 + 151))
        {
          goto LABEL_130;
        }
        siri::dialogengine::CreateJSONStringVal(v40 + 128, (uint64_t *)&v164);
        std::string::basic_string[abi:ne180100]<0>(&__p, "phraseParent");
        *(_OWORD *)v148 = v164;
        v164 = 0uLL;
        std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>>((uint64_t **)&v160, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
        v66 = (std::__shared_weak_count *)v148[1];
        if (v148[1])
        {
          v67 = (unint64_t *)((char *)v148[1] + 8);
          do
            v68 = __ldaxr(v67);
          while (__stlxr(v68 - 1, v67));
          if (!v68)
          {
            ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
            std::__shared_weak_count::__release_weak(v66);
          }
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v69 = (std::__shared_weak_count *)*((_QWORD *)&v164 + 1);
        if (*((_QWORD *)&v164 + 1))
        {
          v70 = (unint64_t *)(*((_QWORD *)&v164 + 1) + 8);
          do
            v71 = __ldaxr(v70);
          while (__stlxr(v71 - 1, v70));
          if (!v71)
          {
            ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
            std::__shared_weak_count::__release_weak(v69);
          }
        }
        goto LABEL_130;
      }
      if ((v41 & 0x80) != 0)
        goto LABEL_62;
      goto LABEL_66;
    }
LABEL_150:
    std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)v160.__r_.__value_.__l.__size_);
    ++v13;
  }
  while (v13 != v14);
  v86 = HIBYTE(v163.__r_.__value_.__r.__words[2]);
  if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v86 = v163.__r_.__value_.__l.__size_;
  if (v86)
  {
    siri::dialogengine::SpeakableString::SpeakableString((uint64_t)v166, (uint64_t)&v163);
    siri::dialogengine::Dialog::ProcessString(a1, (siri::dialogengine::Context *)v166, (uint64_t)&__p);
    if (v176 < 0)
      operator delete(v175);
    if (v174 < 0)
      operator delete(v173);
    if (v172 < 0)
      operator delete(v171);
    if (v170 < 0)
      operator delete(*((void **)&v169 + 1));
    if (SBYTE7(v169) < 0)
      operator delete(v168[1]);
    if (SHIBYTE(v168[0]) < 0)
      operator delete((void *)v167);
    if (SHIBYTE(v166[2]) < 0)
    {
      operator delete(v166[0]);
      if (!v15)
        goto LABEL_193;
LABEL_168:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v165, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      else
        v165 = __p;
      siri::dialogengine::CreateJSONStringVal((uint64_t)&v165, (uint64_t *)&v160);
      v103 = (unint64_t)a7[2];
      v104 = a7[1];
      if ((unint64_t)v104 >= v103)
      {
        v106 = (v104 - *a7) >> 4;
        if ((unint64_t)(v106 + 1) >> 60)
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        v107 = v103 - (_QWORD)*a7;
        v108 = v107 >> 3;
        if (v107 >> 3 <= (unint64_t)(v106 + 1))
          v108 = v106 + 1;
        if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFF0)
          v109 = 0xFFFFFFFFFFFFFFFLL;
        else
          v109 = v108;
        *((_QWORD *)&v167 + 1) = a7 + 2;
        v110 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v109);
        v112 = &v110[16 * v106];
        *(_OWORD *)v112 = *(_OWORD *)&v160.__r_.__value_.__l.__data_;
        *(_OWORD *)&v160.__r_.__value_.__l.__data_ = 0uLL;
        v114 = *a7;
        v113 = a7[1];
        if (v113 == *a7)
        {
          v117 = vdupq_n_s64((unint64_t)v113);
          v115 = &v110[16 * v106];
        }
        else
        {
          v115 = &v110[16 * v106];
          do
          {
            v116 = *((_OWORD *)v113 - 1);
            v113 -= 16;
            *((_OWORD *)v115 - 1) = v116;
            v115 -= 16;
            *(_QWORD *)v113 = 0;
            *((_QWORD *)v113 + 1) = 0;
          }
          while (v113 != v114);
          v117 = *(int64x2_t *)a7;
        }
        v105 = v112 + 16;
        *a7 = v115;
        a7[1] = v112 + 16;
        *(int64x2_t *)&v166[1] = v117;
        v140 = a7[2];
        a7[2] = &v110[16 * v111];
        *(_QWORD *)&v167 = v140;
        v166[0] = (void *)v117.i64[0];
        std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)v166);
      }
      else
      {
        *(_OWORD *)v104 = *(_OWORD *)&v160.__r_.__value_.__l.__data_;
        v105 = v104 + 16;
      }
      a7[1] = v105;
      if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v165.__r_.__value_.__l.__data_);
    }
    else
    {
      if (v15)
        goto LABEL_168;
LABEL_193:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v160, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      else
        v160 = __p;
      siri::dialogengine::CreateJSONStringVal((uint64_t)&v160, (uint64_t *)&v164);
      std::string::basic_string[abi:ne180100]<0>(v166, "dialogOutput");
      v167 = v164;
      v164 = 0uLL;
      siri::dialogengine::CreateJSONArrayVal(&v161, &v146);
      std::string::basic_string[abi:ne180100]<0>(v168, "unexpandedOutput");
      v169 = v146;
      v146 = 0uLL;
      std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100]((uint64_t)&v165, (const void **)v166, 2);
      for (i = 0; i != -10; i -= 5)
      {
        std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v169 + i * 8);
        if (SHIBYTE(v168[i + 2]) < 0)
          operator delete(v168[i]);
      }
      v119 = (std::__shared_weak_count *)*((_QWORD *)&v146 + 1);
      if (*((_QWORD *)&v146 + 1))
      {
        v120 = (unint64_t *)(*((_QWORD *)&v146 + 1) + 8);
        do
          v121 = __ldaxr(v120);
        while (__stlxr(v121 - 1, v120));
        if (!v121)
        {
          ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
          std::__shared_weak_count::__release_weak(v119);
        }
      }
      v122 = (std::__shared_weak_count *)*((_QWORD *)&v164 + 1);
      if (*((_QWORD *)&v164 + 1))
      {
        v123 = (unint64_t *)(*((_QWORD *)&v164 + 1) + 8);
        do
          v124 = __ldaxr(v123);
        while (__stlxr(v124 - 1, v123));
        if (!v124)
        {
          ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
          std::__shared_weak_count::__release_weak(v122);
        }
      }
      if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v160.__r_.__value_.__l.__data_);
      siri::dialogengine::CreateJSONObjectVal((const void ***)&v165, (uint64_t *)&v160);
      v125 = (unint64_t)a7[2];
      v126 = a7[1];
      if ((unint64_t)v126 >= v125)
      {
        v128 = (v126 - *a7) >> 4;
        if ((unint64_t)(v128 + 1) >> 60)
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        v129 = v125 - (_QWORD)*a7;
        v130 = v129 >> 3;
        if (v129 >> 3 <= (unint64_t)(v128 + 1))
          v130 = v128 + 1;
        if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFF0)
          v131 = 0xFFFFFFFFFFFFFFFLL;
        else
          v131 = v130;
        *((_QWORD *)&v167 + 1) = a7 + 2;
        v132 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v131);
        v134 = &v132[16 * v128];
        *(_OWORD *)v134 = *(_OWORD *)&v160.__r_.__value_.__l.__data_;
        *(_OWORD *)&v160.__r_.__value_.__l.__data_ = 0uLL;
        v136 = *a7;
        v135 = a7[1];
        if (v135 == *a7)
        {
          v139 = vdupq_n_s64((unint64_t)v135);
          v137 = &v132[16 * v128];
        }
        else
        {
          v137 = &v132[16 * v128];
          do
          {
            v138 = *((_OWORD *)v135 - 1);
            v135 -= 16;
            *((_OWORD *)v137 - 1) = v138;
            v137 -= 16;
            *(_QWORD *)v135 = 0;
            *((_QWORD *)v135 + 1) = 0;
          }
          while (v135 != v136);
          v139 = *(int64x2_t *)a7;
        }
        v127 = v134 + 16;
        *a7 = v137;
        a7[1] = v134 + 16;
        *(int64x2_t *)&v166[1] = v139;
        v141 = a7[2];
        a7[2] = &v132[16 * v133];
        *(_QWORD *)&v167 = v141;
        v166[0] = (void *)v139.i64[0];
        std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)v166);
      }
      else
      {
        *(_OWORD *)v126 = *(_OWORD *)&v160.__r_.__value_.__l.__data_;
        v127 = v126 + 16;
      }
      a7[1] = v127;
      std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)v165.__r_.__value_.__l.__size_);
    }
    if (v159 < 0)
      operator delete(v158);
    if (v157 < 0)
      operator delete(v156);
    if (v155 < 0)
      operator delete(v154);
    if (v153 < 0)
      operator delete(v152);
    if (v151 < 0)
      operator delete(v150);
    if (v149 < 0)
      operator delete(v148[0]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_258:
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v161;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v163.__r_.__value_.__l.__data_);
}

void sub_1BFC6D438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,uint64_t a53,void *a54)
{
  siri::dialogengine::SpeakableString::~SpeakableString(&a18);
  a54 = &a43;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a54);
  if (a51 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void siri::dialogengine::CreateNewNode(uint64_t *a1, char **a2, char **a3, void *lpsrc, uint64_t a5, int a6, int a7, uint64_t a8)
{
  char *v14;
  char *v15;
  std::string::size_type v16;
  std::string::size_type size;
  std::string::size_type v18;
  std::string::size_type v19;
  uint64_t v20;
  uint64_t v21;
  std::string *v22;
  _QWORD *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  char *v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  __int128 v36;
  unint64_t *v37;
  unint64_t v38;
  char *v39;
  __int128 v40;
  int64x2_t v41;
  uint64_t v42;
  void *v43;
  unint64_t v44;
  char *v45;
  char *v46;
  std::string::value_type *v47;
  char v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  __int128 v57;
  char *v58;
  char *v59;
  void *v60;
  void *v61;
  char v63;
  std::string::value_type *v64;
  std::string::value_type *v65;
  std::string::value_type *__s;
  std::string::value_type *v68;
  char v69;
  char v70;
  char v71;
  std::string v72;
  std::string v73;
  _DWORD v74[10];

  if (lpsrc)
  {
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  memset(&v74[6], 0, 7);
  memset(&v74[4], 0, 7);
  memset(&v74[2], 0, 7);
  memset(v74, 0, 7);
  memset(&v73, 0, sizeof(v73));
  if (a7 || !v14)
  {
    v63 = 0;
    v68 = 0;
    v16 = 0;
    if (a7 == 2)
    {
      v69 = 0;
      v70 = 0;
      v64 = 0;
      v65 = 0;
      size = 0;
      v18 = 0;
      v71 = 0;
      v19 = 0;
      __s = 0;
      if (v15)
      {
        if (v15[247] < 0)
          std::string::__init_copy_ctor_external(&v72, *((const std::string::value_type **)v15 + 28), *((_QWORD *)v15 + 29));
        else
          v72 = *(std::string *)(v15 + 224);
        size = v72.__r_.__value_.__l.__size_;
        v65 = (std::string::value_type *)v72.__r_.__value_.__r.__words[0];
        v74[2] = v72.__r_.__value_.__r.__words[2];
        *(_DWORD *)((char *)&v74[2] + 3) = *(_DWORD *)((char *)&v72.__r_.__value_.__r.__words[2] + 3);
        v69 = HIBYTE(v72.__r_.__value_.__r.__words[2]);
        if (v15[223] < 0)
          std::string::__init_copy_ctor_external(&v72, *((const std::string::value_type **)v15 + 25), *((_QWORD *)v15 + 26));
        else
          v72 = *(std::string *)(v15 + 200);
        v63 = 0;
        v68 = 0;
        v16 = 0;
        v19 = 0;
        __s = 0;
        v18 = v72.__r_.__value_.__l.__size_;
        v64 = (std::string::value_type *)v72.__r_.__value_.__r.__words[0];
        v74[0] = v72.__r_.__value_.__r.__words[2];
        *(_DWORD *)((char *)v74 + 3) = *(_DWORD *)((char *)&v72.__r_.__value_.__r.__words[2] + 3);
        v70 = 0;
        v71 = HIBYTE(v72.__r_.__value_.__r.__words[2]);
      }
    }
    else
    {
      v69 = 0;
      v70 = 0;
      v64 = 0;
      v65 = 0;
      size = 0;
      v18 = 0;
      v71 = 0;
      v19 = 0;
      __s = 0;
    }
  }
  else
  {
    if (v14[247] < 0)
      std::string::__init_copy_ctor_external(&v72, *((const std::string::value_type **)v14 + 28), *((_QWORD *)v14 + 29));
    else
      v72 = *(std::string *)(v14 + 224);
    v19 = v72.__r_.__value_.__l.__size_;
    __s = (std::string::value_type *)v72.__r_.__value_.__r.__words[0];
    v74[6] = v72.__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)&v74[6] + 3) = *(_DWORD *)((char *)&v72.__r_.__value_.__r.__words[2] + 3);
    v63 = HIBYTE(v72.__r_.__value_.__r.__words[2]);
    if (v14[223] < 0)
      std::string::__init_copy_ctor_external(&v72, *((const std::string::value_type **)v14 + 25), *((_QWORD *)v14 + 26));
    else
      v72 = *(std::string *)(v14 + 200);
    v64 = 0;
    v65 = 0;
    size = 0;
    v18 = 0;
    v71 = 0;
    v16 = v72.__r_.__value_.__l.__size_;
    v68 = (std::string::value_type *)v72.__r_.__value_.__r.__words[0];
    v74[4] = v72.__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)&v74[4] + 3) = *(_DWORD *)((char *)&v72.__r_.__value_.__r.__words[2] + 3);
    v69 = 0;
    v70 = HIBYTE(v72.__r_.__value_.__r.__words[2]);
  }
  if (*(_QWORD *)a5)
    std::string::operator=(&v73, (const std::string *)(*(_QWORD *)a5 + 56));
  v20 = operator new();
  v21 = v20;
  *(_DWORD *)v20 = a6;
  *(_DWORD *)(v20 + 4) = a7;
  if (*(char *)(a8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v20 + 8), *(const std::string::value_type **)a8, *(_QWORD *)(a8 + 8));
  }
  else
  {
    *(_OWORD *)(v20 + 8) = *(_OWORD *)a8;
    *(_QWORD *)(v20 + 24) = *(_QWORD *)(a8 + 16);
  }
  if (v63 < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v21 + 32), __s, v19);
  }
  else
  {
    *(_QWORD *)(v21 + 32) = __s;
    *(_QWORD *)(v21 + 40) = v19;
    *(_DWORD *)(v21 + 48) = v74[6];
    *(_DWORD *)(v21 + 51) = *(_DWORD *)((char *)&v74[6] + 3);
    *(_BYTE *)(v21 + 55) = v63;
  }
  if (v70 < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v21 + 56), v68, v16);
  }
  else
  {
    *(_QWORD *)(v21 + 56) = v68;
    *(_QWORD *)(v21 + 64) = v16;
    *(_DWORD *)(v21 + 72) = v74[4];
    *(_DWORD *)(v21 + 75) = *(_DWORD *)((char *)&v74[4] + 3);
    *(_BYTE *)(v21 + 79) = v70;
  }
  if (v69 < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v21 + 80), v65, size);
  }
  else
  {
    *(_QWORD *)(v21 + 80) = v65;
    *(_QWORD *)(v21 + 88) = size;
    *(_DWORD *)(v21 + 96) = v74[2];
    *(_DWORD *)(v21 + 99) = *(_DWORD *)((char *)&v74[2] + 3);
    *(_BYTE *)(v21 + 103) = v69;
  }
  if (v71 < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v21 + 104), v64, v18);
  }
  else
  {
    *(_QWORD *)(v21 + 104) = v64;
    *(_QWORD *)(v21 + 112) = v18;
    *(_DWORD *)(v21 + 120) = v74[0];
    *(_DWORD *)(v21 + 123) = *(_DWORD *)((char *)v74 + 3);
    *(_BYTE *)(v21 + 127) = v71;
  }
  v22 = (std::string *)(v21 + 128);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v22, v73.__r_.__value_.__l.__data_, v73.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v22->__r_.__value_.__l.__data_ = *(_OWORD *)&v73.__r_.__value_.__l.__data_;
    *(_QWORD *)(v21 + 144) = *((_QWORD *)&v73.__r_.__value_.__l + 2);
  }
  *a1 = v21;
  v23 = (_QWORD *)operator new();
  v23[1] = 0;
  v24 = v23 + 1;
  *v23 = &off_1E793AD30;
  v23[2] = 0;
  v23[3] = v21;
  a1[1] = (uint64_t)v23;
  v26 = (uint64_t *)a3[1];
  v25 = (unint64_t)a3[2];
  if ((unint64_t)v26 >= v25)
  {
    v29 = (uint64_t *)*a3;
    v30 = ((char *)v26 - *a3) >> 4;
    v31 = v30 + 1;
    if ((unint64_t)(v30 + 1) >> 60)
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    v32 = v25 - (_QWORD)v29;
    if (v32 >> 3 > v31)
      v31 = v32 >> 3;
    if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0)
      v33 = 0xFFFFFFFFFFFFFFFLL;
    else
      v33 = v31;
    if (v33 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v34 = (char *)operator new(16 * v33);
    v35 = &v34[16 * v30];
    v36 = *(_OWORD *)a1;
    *(_OWORD *)v35 = *(_OWORD *)a1;
    if (*((_QWORD *)&v36 + 1))
    {
      v37 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
      v29 = (uint64_t *)*a3;
      v26 = (uint64_t *)a3[1];
    }
    if (v26 == v29)
    {
      v41 = vdupq_n_s64((unint64_t)v26);
      v39 = &v34[16 * v30];
    }
    else
    {
      v39 = &v34[16 * v30];
      do
      {
        v40 = *((_OWORD *)v26 - 1);
        v26 -= 2;
        *((_OWORD *)v39 - 1) = v40;
        v39 -= 16;
        *v26 = 0;
        v26[1] = 0;
      }
      while (v26 != v29);
      v41 = *(int64x2_t *)a3;
    }
    v28 = v35 + 16;
    *a3 = v39;
    a3[1] = v35 + 16;
    a3[2] = &v34[16 * v33];
    v42 = v41.i64[1];
    v43 = (void *)v41.i64[0];
    while ((void *)v42 != v43)
      v42 = std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v42 - 16);
    if (v43)
      operator delete(v43);
  }
  else
  {
    *v26 = *a1;
    v26[1] = (uint64_t)v23;
    do
      v27 = __ldxr(v24);
    while (__stxr(v27 + 1, v24));
    v28 = (char *)(v26 + 2);
  }
  a3[1] = v28;
  v45 = a2[1];
  v44 = (unint64_t)a2[2];
  if ((unint64_t)v45 >= v44)
  {
    v49 = *a2;
    v50 = 0xAAAAAAAAAAAAAAABLL * ((v45 - *a2) >> 3);
    v51 = v50 + 1;
    v48 = v71;
    if (v50 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    v52 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v44 - (_QWORD)v49) >> 3);
    if (2 * v52 > v51)
      v51 = 2 * v52;
    if (v52 >= 0x555555555555555)
      v53 = 0xAAAAAAAAAAAAAAALL;
    else
      v53 = v51;
    if (v53 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v54 = (char *)operator new(24 * v53);
    v55 = &v54[24 * v50];
    v56 = &v54[24 * v53];
    v46 = v55 + 24;
    *(_QWORD *)v55 = 0;
    *((_QWORD *)v55 + 1) = 0;
    *((_QWORD *)v55 + 2) = 0;
    if (v45 == v49)
    {
      *a2 = v55;
      a2[1] = v46;
      a2[2] = v56;
    }
    else
    {
      do
      {
        *((_QWORD *)v55 - 3) = 0;
        *((_QWORD *)v55 - 2) = 0;
        v55 -= 24;
        *((_QWORD *)v55 + 2) = 0;
        v57 = *(_OWORD *)(v45 - 24);
        v45 -= 24;
        *(_OWORD *)v55 = v57;
        *((_QWORD *)v55 + 2) = *((_QWORD *)v45 + 2);
        *(_QWORD *)v45 = 0;
        *((_QWORD *)v45 + 1) = 0;
        *((_QWORD *)v45 + 2) = 0;
      }
      while (v45 != v49);
      v58 = *a2;
      v45 = a2[1];
      *a2 = v55;
      a2[1] = v46;
      a2[2] = v56;
      if (v45 != v58)
      {
        v59 = v45;
        do
        {
          v61 = (void *)*((_QWORD *)v59 - 3);
          v59 -= 24;
          v60 = v61;
          if (v61)
          {
            *((_QWORD *)v45 - 2) = v60;
            operator delete(v60);
          }
          v45 = v59;
        }
        while (v59 != v58);
        v45 = v58;
      }
    }
    v47 = v68;
    if (v45)
      operator delete(v45);
  }
  else
  {
    v46 = v45 + 24;
    *(_QWORD *)v45 = 0;
    *((_QWORD *)v45 + 1) = 0;
    *((_QWORD *)v45 + 2) = 0;
    a2[1] = v45 + 24;
    v47 = v68;
    v48 = v71;
  }
  a2[1] = v46;
  *(_QWORD *)&(*a2)[24 * a6 + 8] = *(_QWORD *)&(*a2)[24 * a6];
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  if (v48 < 0)
  {
    operator delete(v64);
    if ((v69 & 0x80) == 0)
    {
LABEL_92:
      if ((v70 & 0x80) == 0)
        goto LABEL_93;
      goto LABEL_97;
    }
  }
  else if ((v69 & 0x80) == 0)
  {
    goto LABEL_92;
  }
  operator delete(v65);
  if ((v70 & 0x80) == 0)
  {
LABEL_93:
    if ((v63 & 0x80) == 0)
      return;
LABEL_98:
    operator delete(__s);
    return;
  }
LABEL_97:
  operator delete(v47);
  if (v63 < 0)
    goto LABEL_98;
}

void sub_1BFC6DD48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, void *a13, void *a14, void *a15, uint64_t a16, void *a17, int a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
    operator delete(__p);
  if (a19 < 0)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::AddNodeToAdjList(uint64_t a1, int a2, int a3)
{
  char **v5;
  char *v6;
  char *v7;
  char **v8;
  uint64_t v9;
  char *v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  char **v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  int v24;

  v5 = (char **)(a1 + 24 * a2);
  v6 = *v5;
  v8 = v5 + 1;
  v7 = v5[1];
  if (*v5 == v7)
    goto LABEL_7;
  v9 = 0;
  v10 = *v5;
  do
  {
    v11 = *(_DWORD *)v10;
    v10 += 4;
    if (v11 == a3)
      ++v9;
  }
  while (v10 != v7);
  if (!v9)
  {
LABEL_7:
    v12 = a1 + 24 * a2;
    v15 = *(_QWORD *)(v12 + 16);
    v14 = (char **)(v12 + 16);
    v13 = v15;
    if ((unint64_t)v7 >= v15)
    {
      v17 = (v7 - v6) >> 2;
      v18 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 62)
        std::vector<BOOL>::__throw_length_error[abi:ne180100]();
      v19 = v13 - (_QWORD)v6;
      if (v19 >> 1 > v18)
        v18 = v19 >> 1;
      if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
        v20 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v20 = v18;
      if (v20)
      {
        v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v14, v20);
        v7 = *v8;
        v6 = *v5;
      }
      else
      {
        v21 = 0;
      }
      v22 = &v21[4 * v17];
      v23 = &v21[4 * v20];
      *(_DWORD *)v22 = a3;
      v16 = v22 + 4;
      while (v7 != v6)
      {
        v24 = *((_DWORD *)v7 - 1);
        v7 -= 4;
        *((_DWORD *)v22 - 1) = v24;
        v22 -= 4;
      }
      *v5 = v22;
      *v8 = v16;
      *v14 = v23;
      if (v6)
        operator delete(v6);
    }
    else
    {
      *(_DWORD *)v7 = a3;
      v16 = v7 + 4;
    }
    *v8 = v16;
  }
}

void siri::dialogengine::ConnectNodeWithPhraseChildren(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7;
  int *v8;
  int *v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int *v25;
  std::__shared_weak_count *v26;
  __int128 v27;
  __int128 v28;
  int *v29;
  int *v30;
  uint64_t v31;

  if (*a2 && *a4 != a4[1])
  {
    v7 = *a4 + 24 * *(int *)*a2;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v29, *(const void **)v7, *(_QWORD *)(v7 + 8), (uint64_t)(*(_QWORD *)(v7 + 8) - *(_QWORD *)v7) >> 2);
    v8 = v29;
    v9 = v30;
    if (v29 != v30)
    {
      while (1)
      {
        v10 = *(_OWORD *)(*a3 + 16 * *v8);
        v28 = v10;
        v11 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
        if (*((_QWORD *)&v10 + 1))
        {
          v12 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
          do
            v13 = __ldxr(v12);
          while (__stxr(v13 + 1, v12));
          if (*(_DWORD *)(v10 + 4))
          {
            v24 = v10;
            do
              v14 = __ldxr(v12);
            while (__stxr(v14 + 1, v12));
LABEL_13:
            siri::dialogengine::FindTerminalNode(&v25, (int **)&v24, a4, a3);
            if (v11)
            {
              p_shared_owners = (unint64_t *)&v11->__shared_owners_;
              do
                v16 = __ldaxr(p_shared_owners);
              while (__stlxr(v16 - 1, p_shared_owners));
              if (!v16)
              {
                ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
                std::__shared_weak_count::__release_weak(v11);
              }
            }
            if (v25 && *v25 != (_DWORD)a1)
              siri::dialogengine::AddNodeToAdjList(*a4, *v25, a1);
            v11 = v26;
            if (!v26)
              goto LABEL_34;
            v17 = (unint64_t *)&v26->__shared_owners_;
            do
              v18 = __ldaxr(v17);
            while (__stlxr(v18 - 1, v17));
LABEL_32:
            if (!v18)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
            goto LABEL_34;
          }
          v27 = v10;
          do
            v19 = __ldxr(v12);
          while (__stxr(v19 + 1, v12));
        }
        else
        {
          if (*(_DWORD *)(v10 + 4))
          {
            v24 = v10;
            goto LABEL_13;
          }
          v27 = v10;
        }
        siri::dialogengine::ConnectNodeWithPhraseChildren(a1, &v27, a3, a4);
        if (v11)
        {
          v20 = (unint64_t *)&v11->__shared_owners_;
          do
            v18 = __ldaxr(v20);
          while (__stlxr(v18 - 1, v20));
          goto LABEL_32;
        }
LABEL_34:
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
        if (*((_QWORD *)&v28 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        if (++v8 == v9)
        {
          v8 = v29;
          break;
        }
      }
    }
    if (v8)
    {
      v30 = v8;
      operator delete(v8);
    }
  }
}

void sub_1BFC6E204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void siri::dialogengine::FindTerminalNode(_QWORD *a1, int **a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int *v10;
  __int128 v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;

  v5 = **a2;
  v6 = *a4;
  v7 = *(_QWORD *)(*a4 + 16 * v5);
  v8 = *a3 + 24 * (int)v5;
  v9 = *(int **)v8;
  v10 = *(int **)(v8 + 8);
  if ((*(_DWORD *)(v7 + 4) - 1) <= 1 && v9 == v10)
  {
    *a1 = v7;
    v24 = *(_QWORD *)(v6 + 16 * v5 + 8);
    a1[1] = v24;
    if (v24)
    {
      v25 = (unint64_t *)(v24 + 8);
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
    if (v9 != v10)
    {
      do
      {
        v14 = *(_OWORD *)(*a4 + 16 * *v9);
        v27 = v14;
        if (*((_QWORD *)&v14 + 1))
        {
          v15 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
          do
            v16 = __ldxr(v15);
          while (__stxr(v16 + 1, v15));
        }
        siri::dialogengine::FindTerminalNode(&v28, &v27, a3, a4);
        std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)a1, &v28);
        v17 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
        if (*((_QWORD *)&v28 + 1))
        {
          v18 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        v20 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
        if (*((_QWORD *)&v27 + 1))
        {
          v21 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        ++v9;
        if (*a1)
          v23 = 1;
        else
          v23 = v9 == v10;
      }
      while (!v23);
    }
  }
}

void sub_1BFC6E3C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v9);
  _Unwind_Resume(a1);
}

uint64_t std::default_delete<siri::dialogengine::OutputNode>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    if (*(char *)(result + 151) < 0)
      operator delete(*(void **)(result + 128));
    if (*(char *)(v1 + 127) < 0)
      operator delete(*(void **)(v1 + 104));
    if (*(char *)(v1 + 103) < 0)
      operator delete(*(void **)(v1 + 80));
    if (*(char *)(v1 + 79) < 0)
      operator delete(*(void **)(v1 + 56));
    if (*(char *)(v1 + 55) < 0)
      operator delete(*(void **)(v1 + 32));
    if (*(char *)(v1 + 31) < 0)
      operator delete(*(void **)(v1 + 8));
    JUMPOUT(0x1C3B8D890);
  }
  return result;
}

void std::__shared_ptr_pointer<siri::dialogengine::OutputNode *,std::shared_ptr<siri::dialogengine::OutputNode>::__shared_ptr_default_delete<siri::dialogengine::OutputNode,siri::dialogengine::OutputNode>,std::allocator<siri::dialogengine::OutputNode>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::OutputNode *,std::shared_ptr<siri::dialogengine::OutputNode>::__shared_ptr_default_delete<siri::dialogengine::OutputNode,siri::dialogengine::OutputNode>,std::allocator<siri::dialogengine::OutputNode>>::__on_zero_shared(uint64_t a1)
{
  return std::default_delete<siri::dialogengine::OutputNode>::operator()[abi:ne180100](*(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::OutputNode *,std::shared_ptr<siri::dialogengine::OutputNode>::__shared_ptr_default_delete<siri::dialogengine::OutputNode,siri::dialogengine::OutputNode>,std::allocator<siri::dialogengine::OutputNode>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void siri::dialogengine::GetAllSchemasAndGlobalParams(siri::dialogengine *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  std::string *v5;
  std::string *v6;
  const char *v7;
  std::string::size_type v8;
  std::string::size_type size;
  uint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::string *v14;
  std::string *v15;
  BOOL v16;
  _OWORD *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _OWORD *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  _OWORD *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  _BYTE *v35;
  __int128 v36;
  __int128 v37;
  uint64_t i;
  uint64_t *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t *v47;
  unint64_t *v48;
  uint64_t *v49;
  unint64_t *v50;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  _QWORD *v54;
  uint64_t *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  _QWORD *v59;
  _OWORD *v60;
  uint64_t j;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  _QWORD *v65;
  uint64_t v67;
  std::string *v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  void *v72[2];
  char v73;
  std::string v74;
  __int128 v75;
  std::string v76;
  std::string v77;
  std::string v78;
  _BYTE __str[32];
  std::string v80;
  int v81;
  std::string v82;
  std::string *v83;
  std::__shared_weak_count *v84;
  __int128 v85;
  uint64_t v86;
  std::string __p;
  __int128 v88;
  uint64_t v89;
  void *v90[2];
  char v91;
  uint64_t *v92;
  _QWORD *v93[2];
  uint64_t *v94;
  _QWORD *v95[2];
  uint64_t *v96;
  _QWORD *v97[2];
  uint64_t *v98;
  _QWORD *v99[2];
  void *v100;
  __int128 v101;
  _BYTE v102[32];
  __int128 v103;
  _QWORD v104[3];
  __int128 v105;
  _QWORD v106[3];
  __int128 v107;
  std::string __s;
  _OWORD v109[3];
  void *v110[35];

  v3 = (uint64_t *)this;
  v110[32] = *(void **)MEMORY[0x1E0C80C00];
  v99[1] = 0;
  v99[0] = 0;
  v98 = (uint64_t *)v99;
  v97[1] = 0;
  v97[0] = 0;
  v96 = (uint64_t *)v97;
  v95[1] = 0;
  v95[0] = 0;
  v94 = (uint64_t *)v95;
  v93[0] = 0;
  v92 = (uint64_t *)v93;
  v93[1] = 0;
  siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)&v100, (siri::dialogengine *)((char *)this + 8));
  v88 = 0uLL;
  v89 = 0;
  std::vector<siri::dialogengine::UpdatableDir>::__init_with_size[abi:ne180100]<siri::dialogengine::UpdatableDir*,siri::dialogengine::UpdatableDir*>(&v88, v101, *((uint64_t *)&v101 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v101 + 1) - v101) >> 5));
  siri::dialogengine::GetBaseDir((__int128 **)&v88, (std::string *)__str);
  std::string::basic_string[abi:ne180100]<0>(&__p, "schema");
  siri::dialogengine::JoinPath((uint64_t)__str, (uint64_t)&__p, (uint64_t)v90);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v88;
  std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  siri::dialogengine::RequestInfo::~RequestInfo(&v100);
  siri::dialogengine::ListDir((const char *)v90, (uint64_t)&v88);
  v67 = *((_QWORD *)&v88 + 1);
  v4 = v88;
  if ((_QWORD)v88 != *((_QWORD *)&v88 + 1))
  {
    v65 = a2 + 1;
    do
    {
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
      *((_QWORD *)&v85 + 1) = 0;
      v86 = 0;
      *(_QWORD *)&v85 = (char *)&v85 + 8;
      siri::dialogengine::JoinPath((uint64_t)v90, v4, (uint64_t)&v100);
      std::string::basic_string[abi:ne180100]<0>(__str, "");
      std::string::basic_string[abi:ne180100]<0>(&v82, "");
      siri::dialogengine::ParseCATSchemaYAML((std::string *)__str, v3, (uint64_t)&v100, &v83);
      if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v82.__r_.__value_.__l.__data_);
      if ((__str[23] & 0x80000000) != 0)
        operator delete(*(void **)__str);
      if (SHIBYTE(v101) < 0)
        operator delete(v100);
      v5 = v83;
      v69 = v4;
      if (!v83)
      {
        *v65 = 0;
        a2[2] = 0;
        *a2 = v65;
        goto LABEL_142;
      }
      v6 = v83;
      v7 = (const char *)v3;
      siri::dialogengine::ObjectSchema::GetInputs((uint64_t)v83, (uint64_t)v3, 0, (uint64_t **)&v82);
      v8 = v82.__r_.__value_.__r.__words[0];
      v68 = v6;
      if ((std::string::size_type *)v82.__r_.__value_.__l.__data_ != &v82.__r_.__value_.__r.__words[1])
      {
        do
        {
          siri::dialogengine::PropertyBase::PropertyBase((siri::dialogengine::PropertyBase *)__str, (const siri::dialogengine::PropertyBase *)(v8 + 56));
          *(_QWORD *)__str = &off_1E793ADA8;
          v81 = *(_DWORD *)(v8 + 212);
          if ((__str[31] & 0x80000000) != 0)
            std::string::__init_copy_ctor_external(&v78, *(const std::string::value_type **)&__str[8], *(std::string::size_type *)&__str[16]);
          else
            v78 = *(std::string *)&__str[8];
          if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v77, v80.__r_.__value_.__l.__data_, v80.__r_.__value_.__l.__size_);
          else
            v77 = v80;
          siri::dialogengine::CreateObjectPropertyEntry((siri::dialogengine *)&v76, (siri::dialogengine::PropertyBase *)__str);
          size = HIBYTE(v77.__r_.__value_.__r.__words[2]);
          if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = v77.__r_.__value_.__l.__size_;
          if (!size)
          {
            siri::dialogengine::ObjectSchema::GetProperty((uint64_t)v83, v7, (const void **)&v78.__r_.__value_.__l.__data_, 0, (siri::dialogengine::ObjectProperty *)&v100);
            if (LOBYTE(v110[0]))
            {
              if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(&v74, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
              else
                v74 = __s;
              siri::dialogengine::CreateJSONStringVal((uint64_t)&v74, (uint64_t *)&v75);
              std::string::basic_string[abi:ne180100]<0>(v72, "semanticConcept");
              *(_QWORD *)&v71 = v72;
              v17 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v76, (const void **)v72, (_OWORD **)&v71);
              std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)v17 + 56, &v75);
              if (v73 < 0)
                operator delete(v72[0]);
              v18 = (std::__shared_weak_count *)*((_QWORD *)&v75 + 1);
              if (*((_QWORD *)&v75 + 1))
              {
                v19 = (unint64_t *)(*((_QWORD *)&v75 + 1) + 8);
                do
                  v20 = __ldaxr(v19);
                while (__stlxr(v20 - 1, v19));
                if (!v20)
                {
                  ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
                  std::__shared_weak_count::__release_weak(v18);
                }
              }
              if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v74.__r_.__value_.__l.__data_);
              if ((v102[31] & 0x80000000) != 0)
                std::string::__init_copy_ctor_external(&v74, *(const std::string::value_type **)&v102[8], *(std::string::size_type *)&v102[16]);
              else
                v74 = *(std::string *)&v102[8];
              siri::dialogengine::CreateJSONStringVal((uint64_t)&v74, (uint64_t *)&v75);
              std::string::basic_string[abi:ne180100]<0>(v72, "type");
              *(_QWORD *)&v71 = v72;
              v21 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v76, (const void **)v72, (_OWORD **)&v71);
              std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)v21 + 56, &v75);
              if (v73 < 0)
                operator delete(v72[0]);
              v22 = (std::__shared_weak_count *)*((_QWORD *)&v75 + 1);
              if (*((_QWORD *)&v75 + 1))
              {
                v23 = (unint64_t *)(*((_QWORD *)&v75 + 1) + 8);
                do
                  v24 = __ldaxr(v23);
                while (__stlxr(v24 - 1, v23));
                if (!v24)
                {
                  ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
                  std::__shared_weak_count::__release_weak(v22);
                }
              }
              if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v74.__r_.__value_.__l.__data_);
              if (LOBYTE(v110[0]))
                siri::dialogengine::ObjectProperty::~ObjectProperty(&v100);
            }
          }
          siri::dialogengine::CreateJSONObjectVal((const void ***)&v76, (uint64_t *)&v100);
          v74.__r_.__value_.__r.__words[0] = (std::string::size_type)&v78;
          v10 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&__p, (const void **)&v78.__r_.__value_.__l.__data_, (__int128 **)&v74);
          std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)(v10 + 7), (__int128 *)&v100);
          v11 = (std::__shared_weak_count *)v101;
          if ((_QWORD)v101)
          {
            v12 = (unint64_t *)(v101 + 8);
            do
              v13 = __ldaxr(v12);
            while (__stlxr(v13 - 1, v12));
            if (!v13)
            {
              ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)v76.__r_.__value_.__l.__size_);
          if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v77.__r_.__value_.__l.__data_);
          if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v78.__r_.__value_.__l.__data_);
          siri::dialogengine::PropertyBase::~PropertyBase((void **)__str);
          v14 = *(std::string **)(v8 + 8);
          if (v14)
          {
            do
            {
              v15 = v14;
              v14 = (std::string *)v14->__r_.__value_.__r.__words[0];
            }
            while (v14);
          }
          else
          {
            do
            {
              v15 = *(std::string **)(v8 + 16);
              v16 = v15->__r_.__value_.__r.__words[0] == v8;
              v8 = (std::string::size_type)v15;
            }
            while (!v16);
          }
          v8 = (std::string::size_type)v15;
        }
        while (v15 != (std::string *)&v82.__r_.__value_.__r.__words[1]);
        v6 = v83;
      }
      std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectInput>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectInput>>>::destroy((_QWORD *)v82.__r_.__value_.__l.__size_);
      siri::dialogengine::ObjectSchema::GetProperties((uint64_t)v6, (uint64_t)v7, 0, __str);
      v25 = *(_QWORD **)__str;
      if (*(_BYTE **)__str != &__str[8])
      {
        do
        {
          siri::dialogengine::ObjectProperty::ObjectProperty((siri::dialogengine::ObjectProperty *)&v100, (const siri::dialogengine::ObjectProperty *)(v25 + 7));
          if ((v102[7] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(&v82, (const std::string::value_type *)v101, *((std::string::size_type *)&v101 + 1));
          }
          else
          {
            *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v101;
            v82.__r_.__value_.__r.__words[2] = *(_QWORD *)v102;
          }
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v78, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
          else
            v78 = __s;
          siri::dialogengine::CreateObjectPropertyEntry((siri::dialogengine *)&v77, (siri::dialogengine::PropertyBase *)&v100);
          siri::dialogengine::CreateJSONStringVal((uint64_t)&v78, (uint64_t *)&v74);
          std::string::basic_string[abi:ne180100]<0>(&v76, "semanticConcept");
          v72[0] = &v76;
          v26 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v77, (const void **)&v76.__r_.__value_.__l.__data_, (_OWORD **)v72);
          std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)v26 + 56, (__int128 *)&v74);
          if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v76.__r_.__value_.__l.__data_);
          v27 = (std::__shared_weak_count *)v74.__r_.__value_.__l.__size_;
          if (v74.__r_.__value_.__l.__size_)
          {
            v28 = (unint64_t *)(v74.__r_.__value_.__l.__size_ + 8);
            do
              v29 = __ldaxr(v28);
            while (__stlxr(v29 - 1, v28));
            if (!v29)
            {
              ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
              std::__shared_weak_count::__release_weak(v27);
            }
          }
          siri::dialogengine::CreateJSONObjectVal((const void ***)&v77, (uint64_t *)&v76);
          v74.__r_.__value_.__r.__words[0] = (std::string::size_type)&v82;
          v30 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v85, (const void **)&v82.__r_.__value_.__l.__data_, (__int128 **)&v74);
          std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)(v30 + 7), (__int128 *)&v76);
          v31 = (std::__shared_weak_count *)v76.__r_.__value_.__l.__size_;
          if (v76.__r_.__value_.__l.__size_)
          {
            v32 = (unint64_t *)(v76.__r_.__value_.__l.__size_ + 8);
            do
              v33 = __ldaxr(v32);
            while (__stlxr(v33 - 1, v32));
            if (!v33)
            {
              ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
              std::__shared_weak_count::__release_weak(v31);
            }
          }
          std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)v77.__r_.__value_.__l.__size_);
          if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v78.__r_.__value_.__l.__data_);
          if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v82.__r_.__value_.__l.__data_);
          siri::dialogengine::ObjectProperty::~ObjectProperty(&v100);
          v34 = (_QWORD *)v25[1];
          if (v34)
          {
            do
            {
              v35 = v34;
              v34 = (_QWORD *)*v34;
            }
            while (v34);
          }
          else
          {
            do
            {
              v35 = (_BYTE *)v25[2];
              v16 = *(_QWORD *)v35 == (_QWORD)v25;
              v25 = v35;
            }
            while (!v16);
          }
          v25 = v35;
        }
        while (v35 != &__str[8]);
        v6 = v83;
      }
      std::__tree<std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::ObjectProperty>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::ObjectProperty>>>::destroy(*(_QWORD **)&__str[8]);
      if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__str, v6->__r_.__value_.__l.__data_, v6->__r_.__value_.__l.__size_);
      }
      else
      {
        v36 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
        *(_QWORD *)&__str[16] = *((_QWORD *)&v6->__r_.__value_.__l + 2);
        *(_OWORD *)__str = v36;
      }
      if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v78, v6->__r_.__value_.__l.__data_, v6->__r_.__value_.__l.__size_);
      }
      else
      {
        v37 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
        v78.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v37;
      }
      siri::dialogengine::CreateJSONStringVal((uint64_t)&v78, (uint64_t *)&v74);
      std::string::basic_string[abi:ne180100]<0>(&v100, "name");
      *(_OWORD *)v102 = *(_OWORD *)&v74.__r_.__value_.__l.__data_;
      *(_OWORD *)&v74.__r_.__value_.__l.__data_ = 0uLL;
      if (SHIBYTE(v6[3].__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v77, v6[3].__r_.__value_.__l.__data_, v6[3].__r_.__value_.__l.__size_);
      else
        v77 = v6[3];
      siri::dialogengine::CreateJSONStringVal((uint64_t)&v77, (uint64_t *)v72);
      std::string::basic_string[abi:ne180100]<0>(&v102[16], "baseObject");
      v103 = *(_OWORD *)v72;
      v72[0] = 0;
      v72[1] = 0;
      if (SHIBYTE(v6[2].__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v76, v6[2].__r_.__value_.__l.__data_, v6[2].__r_.__value_.__l.__size_);
      else
        v76 = v6[2];
      siri::dialogengine::CreateJSONStringVal((uint64_t)&v76, (uint64_t *)&v75);
      std::string::basic_string[abi:ne180100]<0>(v104, "description");
      v105 = v75;
      v75 = 0uLL;
      siri::dialogengine::CreateJSONObjectVal((const void ***)&__p, (uint64_t *)&v71);
      std::string::basic_string[abi:ne180100]<0>(v106, "inputs");
      v107 = v71;
      v71 = 0uLL;
      siri::dialogengine::CreateJSONObjectVal((const void ***)&v85, (uint64_t *)&v70);
      std::string::basic_string[abi:ne180100]<0>(&__s, "properties");
      v109[0] = v70;
      v70 = 0uLL;
      std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100]((uint64_t)&v82, (const void **)&v100, 5);
      for (i = 0; i != -25; i -= 5)
      {
        std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)v109 + i * 8);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[i + 2]) < 0)
          operator delete(*(void **)((char *)&__s.__r_.__value_.__l.__data_ + i * 8));
      }
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v76.__r_.__value_.__l.__data_);
      v3 = (uint64_t *)v7;
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v77.__r_.__value_.__l.__data_);
      v5 = v68;
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v78.__r_.__value_.__l.__data_);
      if (siri::dialogengine::IsPrimitiveType((const void **)__str))
      {
        siri::dialogengine::CreateJSONObjectVal((const void ***)&v82, (uint64_t *)&v100);
        v78.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
        v39 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v94, (const void **)__str, (__int128 **)&v78);
        std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)(v39 + 7), (__int128 *)&v100);
        v40 = (std::__shared_weak_count *)v101;
        if ((_QWORD)v101)
        {
          v41 = (unint64_t *)(v101 + 8);
          do
            v42 = __ldaxr(v41);
          while (__stlxr(v42 - 1, v41));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
        }
        siri::dialogengine::CreateJSONObjectVal((const void ***)&v82, (uint64_t *)&v100);
        v78.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
        v43 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v96, (const void **)__str, (__int128 **)&v78);
        std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)(v43 + 7), (__int128 *)&v100);
        v44 = (std::__shared_weak_count *)v101;
        if (!(_QWORD)v101)
          goto LABEL_140;
        v45 = (unint64_t *)(v101 + 8);
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        goto LABEL_138;
      }
      if (siri::dialogengine::IsBuiltinType((std::string *)__str))
      {
        siri::dialogengine::CreateJSONObjectVal((const void ***)&v82, (uint64_t *)&v100);
        v78.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
        v47 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v96, (const void **)__str, (__int128 **)&v78);
        std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)(v47 + 7), (__int128 *)&v100);
        v44 = (std::__shared_weak_count *)v101;
        if ((_QWORD)v101)
        {
          v48 = (unint64_t *)(v101 + 8);
          do
            v46 = __ldaxr(v48);
          while (__stlxr(v46 - 1, v48));
          goto LABEL_138;
        }
      }
      else
      {
        siri::dialogengine::CreateJSONObjectVal((const void ***)&v82, (uint64_t *)&v100);
        v78.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
        v49 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v98, (const void **)__str, (__int128 **)&v78);
        std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)(v49 + 7), (__int128 *)&v100);
        v44 = (std::__shared_weak_count *)v101;
        if ((_QWORD)v101)
        {
          v50 = (unint64_t *)(v101 + 8);
          do
            v46 = __ldaxr(v50);
          while (__stlxr(v46 - 1, v50));
LABEL_138:
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
      }
LABEL_140:
      std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)v82.__r_.__value_.__l.__size_);
      if ((__str[23] & 0x80000000) != 0)
        operator delete(*(void **)__str);
LABEL_142:
      v51 = v84;
      if (v84)
      {
        p_shared_owners = (unint64_t *)&v84->__shared_owners_;
        do
          v53 = __ldaxr(p_shared_owners);
        while (__stlxr(v53 - 1, p_shared_owners));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*((_QWORD **)&v85 + 1));
      std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)__p.__r_.__value_.__l.__size_);
      if (!v5)
      {
        v100 = &v88;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v100);
        goto LABEL_177;
      }
      v4 = v69 + 24;
    }
    while (v69 + 24 != v67);
  }
  v100 = &v88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v100);
  siri::dialogengine::Context::GetGlobalParameters((siri::dialogengine::Context *)v3, (uint64_t)__str);
  siri::dialogengine::Context::GetGlobalParameters((siri::dialogengine::Context *)v3, (uint64_t)&v88);
  v54 = (_QWORD *)v88;
  if ((__int128 *)v88 != (__int128 *)((char *)&v88 + 8))
  {
    do
    {
      siri::dialogengine::Parameter::Parameter((siri::dialogengine::Parameter *)&v100, (const siri::dialogengine::Parameter *)(v54 + 7));
      if ((v102[7] & 0x80000000) != 0)
      {
        std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v101, *((std::string::size_type *)&v101 + 1));
      }
      else
      {
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v101;
        __p.__r_.__value_.__r.__words[2] = *(_QWORD *)v102;
      }
      siri::dialogengine::CreateObjectPropertyEntry((siri::dialogengine *)&v85, (siri::dialogengine::PropertyBase *)&v100);
      siri::dialogengine::CreateJSONObjectVal((const void ***)&v85, (uint64_t *)&v82);
      v78.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      v55 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v92, (const void **)&__p.__r_.__value_.__l.__data_, (__int128 **)&v78);
      std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)(v55 + 7), (__int128 *)&v82);
      v56 = (std::__shared_weak_count *)v82.__r_.__value_.__l.__size_;
      if (v82.__r_.__value_.__l.__size_)
      {
        v57 = (unint64_t *)(v82.__r_.__value_.__l.__size_ + 8);
        do
          v58 = __ldaxr(v57);
        while (__stlxr(v58 - 1, v57));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
      }
      std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*((_QWORD **)&v85 + 1));
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v110[8] = off_1E793AED8;
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((_QWORD *)v110[10]);
      siri::dialogengine::LineNumberBase::~LineNumberBase(v110);
      siri::dialogengine::ObjectProperty::~ObjectProperty(&v100);
      v59 = (_QWORD *)v54[1];
      if (v59)
      {
        do
        {
          v60 = v59;
          v59 = (_QWORD *)*v59;
        }
        while (v59);
      }
      else
      {
        do
        {
          v60 = (_OWORD *)v54[2];
          v16 = *(_QWORD *)v60 == (_QWORD)v54;
          v54 = v60;
        }
        while (!v16);
      }
      v54 = v60;
    }
    while (v60 != (__int128 *)((char *)&v88 + 8));
  }
  std::__tree<std::__value_type<std::string,siri::dialogengine::Parameter>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::Parameter>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::Parameter>>>::destroy(*((_QWORD **)&v88 + 1));
  siri::dialogengine::CreateJSONObjectVal((const void ***)&v98, (uint64_t *)&v88);
  std::string::basic_string[abi:ne180100]<0>(&v100, "schemas");
  *(_OWORD *)v102 = v88;
  v88 = 0uLL;
  siri::dialogengine::CreateJSONObjectVal((const void ***)&v96, (uint64_t *)&__p);
  std::string::basic_string[abi:ne180100]<0>(&v102[16], "builtinSchemas");
  v103 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  siri::dialogengine::CreateJSONObjectVal((const void ***)&v94, (uint64_t *)&v85);
  std::string::basic_string[abi:ne180100]<0>(v104, "primitiveSchemas");
  v105 = v85;
  v85 = 0uLL;
  siri::dialogengine::CreateJSONObjectVal((const void ***)&v92, (uint64_t *)&v82);
  std::string::basic_string[abi:ne180100]<0>(v106, "globalParams");
  v107 = *(_OWORD *)&v82.__r_.__value_.__l.__data_;
  *(_OWORD *)&v82.__r_.__value_.__l.__data_ = 0uLL;
  std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100]((uint64_t)a2, (const void **)&v100, 4);
  for (j = 0; j != -20; j -= 5)
  {
    std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v107 + j * 8);
    if (SHIBYTE(v106[j + 2]) < 0)
      operator delete((void *)v106[j]);
  }
  v62 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
  if (*((_QWORD *)&v88 + 1))
  {
    v63 = (unint64_t *)(*((_QWORD *)&v88 + 1) + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  std::__tree<std::__value_type<std::string,siri::dialogengine::Parameter>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::Parameter>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::Parameter>>>::destroy(*(_QWORD **)&__str[8]);
LABEL_177:
  if (v91 < 0)
    operator delete(v90[0]);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(v93[0]);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(v95[0]);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(v97[0]);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(v99[0]);
}

void sub_1BFC6F3A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,_QWORD *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a65;
  char a71;
  uint64_t v71;
  uint64_t i;

  for (i = 120; i != -40; i -= 40)
    std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>::~pair(v71 + i);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a65);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a71);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x210]);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x230]);
  std::__tree<std::__value_type<std::string,siri::dialogengine::Parameter>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::Parameter>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::Parameter>>>::destroy(a46);
  if (SLOBYTE(STACK[0x267]) < 0)
    operator delete((void *)STACK[0x250]);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)STACK[0x270]);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)STACK[0x288]);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)STACK[0x2A0]);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)STACK[0x2B8]);
  _Unwind_Resume(a1);
}

void sub_1BFC6F8FC()
{
  JUMPOUT(0x1BFC6F894);
}

void siri::dialogengine::CreateObjectPropertyEntry(siri::dialogengine *this, siri::dialogengine::PropertyBase *a2)
{
  uint64_t i;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  std::string v12;
  std::string v13;
  std::string v14;
  std::string v15;
  const void *v16[3];
  __int128 v17;
  _QWORD v18[3];
  __int128 v19;
  _QWORD v20[3];
  __int128 v21;
  _QWORD v22[3];
  __int128 v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (*((char *)a2 + 31) < 0)
    std::string::__init_copy_ctor_external(&v15, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  else
    v15 = *(std::string *)((char *)a2 + 8);
  if (*((char *)a2 + 79) < 0)
    std::string::__init_copy_ctor_external(&v14, *((const std::string::value_type **)a2 + 7), *((_QWORD *)a2 + 8));
  else
    v14 = *(std::string *)((char *)a2 + 56);
  if (*((char *)a2 + 103) < 0)
    std::string::__init_copy_ctor_external(&v13, *((const std::string::value_type **)a2 + 10), *((_QWORD *)a2 + 11));
  else
    v13 = *(std::string *)((char *)a2 + 80);
  if (*((char *)a2 + 55) < 0)
    std::string::__init_copy_ctor_external(&v12, *((const std::string::value_type **)a2 + 4), *((_QWORD *)a2 + 5));
  else
    v12 = *(std::string *)((char *)a2 + 32);
  siri::dialogengine::CreateJSONStringVal((uint64_t)&v15, (uint64_t *)&v11);
  std::string::basic_string[abi:ne180100]<0>(v16, "name");
  v17 = v11;
  v11 = 0uLL;
  siri::dialogengine::CreateJSONStringVal((uint64_t)&v12, (uint64_t *)&v10);
  std::string::basic_string[abi:ne180100]<0>(v18, "type");
  v19 = v10;
  v10 = 0uLL;
  siri::dialogengine::CreateJSONStringVal((uint64_t)&v14, (uint64_t *)&v9);
  std::string::basic_string[abi:ne180100]<0>(v20, "description");
  v21 = v9;
  v9 = 0uLL;
  siri::dialogengine::CreateJSONStringVal((uint64_t)&v13, (uint64_t *)&v8);
  std::string::basic_string[abi:ne180100]<0>(v22, "sampleValue");
  v23 = v8;
  v8 = 0uLL;
  std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100]((uint64_t)this, v16, 4);
  for (i = 0; i != -20; i -= 5)
  {
    std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v23 + i * 8);
    if (SHIBYTE(v22[i + 2]) < 0)
      operator delete((void *)v22[i]);
  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
}

void sub_1BFC6FB8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44)
{
  if (a29 < 0)
    operator delete(__p);
  if (a36 < 0)
    operator delete(a31);
  if (a43 < 0)
    operator delete(a38);
  _Unwind_Resume(exception_object);
}

void YAML::ScanScalar(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  BOOL v6;
  unsigned __int8 v7;
  _BOOL4 v8;
  int v9;
  char v10;
  _BOOL4 v11;
  _BOOL4 v12;
  std::string::size_type size;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  int v17;
  unsigned __int8 v18;
  int v19;
  int v20;
  const std::string::value_type *p_p;
  std::string::size_type v22;
  YAML::Exp *v23;
  YAML::Exp *v24;
  YAML::Exp *v25;
  int v26;
  unsigned __int8 v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  unsigned __int8 v35;
  uint64_t v36;
  uint64_t v37;
  YAML::Exp *v38;
  YAML::Exp *v39;
  int v40;
  unsigned __int8 v41;
  int v42;
  int v43;
  _BOOL4 v44;
  BOOL v45;
  int v46;
  BOOL v47;
  int v48;
  YAML::Exp *v49;
  YAML::Exp *v50;
  YAML::Exp *v51;
  YAML::Exp *v52;
  const std::string::value_type *v53;
  const std::string::value_type *v54;
  std::string::size_type v55;
  unint64_t v56;
  _QWORD *v57;
  int v58;
  unint64_t v59;
  std::string *v60;
  unint64_t v61;
  int v62;
  unint64_t v63;
  unint64_t v65;
  int v66;
  unint64_t v67;
  std::string *v68;
  unint64_t v69;
  int v70;
  unint64_t v71;
  unint64_t v72;
  std::string *v73;
  unint64_t v74;
  int v75;
  unint64_t v76;
  unint64_t v78;
  std::string::size_type v79;
  unint64_t v81;
  std::string::size_type v82;
  _QWORD *v83;
  int v84;
  _QWORD *exception;
  int v86;
  uint64_t v87;
  int v88;
  int v89;
  int v90;
  void **v91;
  int v92;
  __int128 __p;
  uint64_t v94;
  uint64_t v95;

  v6 = *(_DWORD *)(a2 + 20) == 2;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  a3->__r_.__value_.__r.__words[0] = 0;
  *(_BYTE *)(a2 + 40) = 0;
  if (!*(_QWORD *)a2)
  {
    {
      YAML::Exp::Empty(void)::e = 0;
      word_1EF58381C = 0;
      qword_1EF583828 = 0;
      unk_1EF583830 = 0;
      qword_1EF583820 = 0;
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Empty(void)::e, &dword_1BF794000);
    }
    *(_QWORD *)a2 = &YAML::Exp::Empty(void)::e;
  }
  v90 = 0;
  v88 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v87 = -1;
LABEL_5:
  v89 = v9;
  v11 = v8;
  while (1)
  {
    v12 = v11;
    if (*(_DWORD *)(*(_QWORD *)a1 + *(_QWORD *)(**(_QWORD **)a1 - 24) + 32)
      && (!*(_QWORD *)(a1 + 64)
       || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + ((*(_QWORD *)(a1 + 56) >> 9) & 0x7FFFFFFFFFFFF8))
                   + (*(_QWORD *)(a1 + 56) & 0xFFFLL)) == 4))
    {
      goto LABEL_144;
    }
LABEL_9:
    size = (a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? HIBYTE(a3->__r_.__value_.__r.__words[2])
         : a3->__r_.__value_.__l.__size_;
    while (1)
    {
      v14 = *(_QWORD *)a2;
      *(_QWORD *)&__p = 0;
      *((_QWORD *)&__p + 1) = a1;
      v15 = YAML::RegEx::Match<YAML::StreamCharSource>(v14, (unint64_t *)&__p);
      if ((v15 & 0x80000000) == 0
        || (YAML::Exp::Break((YAML::Exp *)v15),
            *(_QWORD *)&__p = 0,
            *((_QWORD *)&__p + 1) = a1,
            (YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)YAML::Exp::Break(void)::e, (unint64_t *)&__p) & 0x80000000) == 0)
        || *(_DWORD *)(*(_QWORD *)a1 + *(_QWORD *)(**(_QWORD **)a1 - 24) + 32)
        && (!*(_QWORD *)(a1 + 64)
         || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + ((*(_QWORD *)(a1 + 56) >> 9) & 0x7FFFFFFFFFFFF8))
                     + (*(_QWORD *)(a1 + 56) & 0xFFFLL)) == 4))
      {
LABEL_48:
        v26 = 0;
        goto LABEL_49;
      }
      if (!*(_DWORD *)(a1 + 16))
      {
        if ((v16 & 1) == 0)
        {
          if ((_DWORD)v24)
          {
            YAML::Exp::DocStart(v24);
            YAML::Exp::DocEnd(v25);
            YAML::operator|(YAML::Exp::DocStart(void)::e, YAML::Exp::DocEnd(void)::e, (uint64_t)&YAML::Exp::DocIndicator(void)::e);
            __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::DocIndicator(void)::e, &dword_1BF794000);
          }
        }
        *(_QWORD *)&__p = 0;
        *((_QWORD *)&__p + 1) = a1;
        if ((YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)&YAML::Exp::DocIndicator(void)::e, (unint64_t *)&__p) & 0x80000000) == 0)
        {
          v17 = *(_DWORD *)(a2 + 32);
          if (v17 == 1)
            goto LABEL_48;
          if (v17 == 2)
          {
            exception = __cxa_allocate_exception(0x38uLL);
            v86 = *(_DWORD *)(a1 + 16);
            v91 = *(void ***)(a1 + 8);
            v92 = v86;
            std::string::basic_string[abi:ne180100]<0>(&__p, "illegal document indicator in scalar");
            YAML::Exception::Exception((uint64_t)exception, &v91, &__p);
            *exception = &off_1E793AF28;
          }
        }
      }
      if (*(_BYTE *)(a2 + 18) == 92)
      {
        if ((v18 & 1) == 0)
        {
          if ((_DWORD)v23)
          {
            LODWORD(__p) = 1;
            WORD2(__p) = 92;
            v94 = 0;
            v95 = 0;
            *((_QWORD *)&__p + 1) = 0;
            YAML::Exp::Break(v23);
            YAML::operator+((int *)&__p, YAML::Exp::Break(void)::e, (uint64_t)&YAML::Exp::EscBreak(void)::e);
            v91 = (void **)&__p + 1;
            std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v91);
            __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::EscBreak(void)::e, &dword_1BF794000);
          }
        }
        *(_QWORD *)&__p = 0;
        *((_QWORD *)&__p + 1) = a1;
        if ((YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)&YAML::Exp::EscBreak(void)::e, (unint64_t *)&__p) & 0x80000000) == 0)break;
      }
      if (*(_QWORD *)(a1 + 64))
        v19 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + ((*(_QWORD *)(a1 + 56) >> 9) & 0x7FFFFFFFFFFFF8))
                                 + (*(_QWORD *)(a1 + 56) & 0xFFFLL));
      else
        v19 = 4;
      if (v19 == *(unsigned __int8 *)(a2 + 18))
      {
        YAML::Exp::Escape((YAML::Exp *)a1, (uint64_t)&__p);
        if (v94 >= 0)
          p_p = (const std::string::value_type *)&__p;
        else
          p_p = (const std::string::value_type *)__p;
        if (v94 >= 0)
          v22 = HIBYTE(v94);
        else
          v22 = *((_QWORD *)&__p + 1);
        std::string::append(a3, p_p, v22);
        if (SHIBYTE(v94) < 0)
          operator delete((void *)__p);
        if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
        else
          size = a3->__r_.__value_.__l.__size_;
        v6 = 1;
        v87 = size;
        v10 = 1;
      }
      else
      {
        v20 = YAML::Stream::get((YAML::Stream *)a1);
        std::string::push_back(a3, v20);
        v6 = 1;
        v10 = 1;
        if (v20 != 9 && v20 != 32)
          goto LABEL_9;
      }
    }
    YAML::Stream::get((YAML::Stream *)a1);
    size = SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0
         ? a3->__r_.__value_.__l.__size_
         : HIBYTE(a3->__r_.__value_.__r.__words[2]);
    v26 = 1;
    v87 = size;
    v6 = 1;
    v10 = 1;
LABEL_49:
    if (*(_DWORD *)(*(_QWORD *)a1 + *(_QWORD *)(**(_QWORD **)a1 - 24) + 32)
      && (!*(_QWORD *)(a1 + 64)
       || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + ((*(_QWORD *)(a1 + 56) >> 9) & 0x7FFFFFFFFFFFF8))
                   + (*(_QWORD *)(a1 + 56) & 0xFFFLL)) == 4))
    {
      break;
    }
    if (*(_DWORD *)(a2 + 32) == 1 && *(_DWORD *)(a1 + 16) == 0)
    {
      if ((v28 & 1) == 0)
      {
        if ((_DWORD)v51)
        {
          YAML::Exp::DocStart(v51);
          YAML::Exp::DocEnd(v52);
          YAML::operator|(YAML::Exp::DocStart(void)::e, YAML::Exp::DocEnd(void)::e, (uint64_t)&YAML::Exp::DocIndicator(void)::e);
          __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::DocIndicator(void)::e, &dword_1BF794000);
        }
      }
      *(_QWORD *)&__p = 0;
      *((_QWORD *)&__p + 1) = a1;
      if ((YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)&YAML::Exp::DocIndicator(void)::e, (unint64_t *)&__p) & 0x80000000) == 0)goto LABEL_144;
    }
    v29 = *(_QWORD *)a2;
    *(_QWORD *)&__p = 0;
    *((_QWORD *)&__p + 1) = a1;
    v30 = YAML::RegEx::Match<YAML::StreamCharSource>(v29, (unint64_t *)&__p);
    v31 = v30;
    if ((v30 & 0x80000000) == 0)
    {
      if (*(_BYTE *)(a2 + 8))
      {
        v56 = v87;
        if ((_DWORD)v30)
        {
          do
          {
            YAML::Stream::get((YAML::Stream *)a1);
            --v31;
          }
          while (v31);
        }
        goto LABEL_145;
      }
LABEL_144:
      v56 = v87;
      goto LABEL_145;
    }
    if (*(_DWORD *)(a2 + 20) == 2)
      v30 = (uint64_t)std::string::erase(a3, size, 0xFFFFFFFFFFFFFFFFLL);
    YAML::Exp::Break((YAML::Exp *)v30);
    *(_QWORD *)&__p = 0;
    *((_QWORD *)&__p + 1) = a1;
    v32 = YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)YAML::Exp::Break(void)::e, (unint64_t *)&__p);
    if (v32 >= 1)
    {
      do
      {
        YAML::Stream::get((YAML::Stream *)a1);
        --v32;
      }
      while (v32);
    }
    while (*(_QWORD *)(a1 + 64)
         && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + ((*(_QWORD *)(a1 + 56) >> 9) & 0x7FFFFFFFFFFFF8))
                     + (*(_QWORD *)(a1 + 56) & 0xFFFLL)) == 32
         && (*(_DWORD *)(a1 + 16) < *(_DWORD *)(a2 + 12) || !((*(_BYTE *)(a2 + 16) == 0) | v10 & 1)))
    {
      v33 = *(_QWORD *)a2;
      *(_QWORD *)&__p = 0;
      *((_QWORD *)&__p + 1) = a1;
      if ((YAML::RegEx::Match<YAML::StreamCharSource>(v33, (unint64_t *)&__p) & 0x80000000) == 0)
        break;
      YAML::Stream::get((YAML::Stream *)a1);
    }
    if (!((*(_BYTE *)(a2 + 16) == 0) | v10 & 1))
    {
      v34 = *(_DWORD *)(a1 + 16);
      if (*(_DWORD *)(a2 + 12) > v34)
        v34 = *(_DWORD *)(a2 + 12);
      *(_DWORD *)(a2 + 12) = v34;
    }
    while (1)
    {
      if ((v35 & 1) == 0)
      {
        if ((_DWORD)v38)
        {
          YAML::Exp::Space(v38);
          YAML::Exp::Tab(v39);
          YAML::operator|(&YAML::Exp::Space(void)::e, &YAML::Exp::Tab(void)::e, (uint64_t)YAML::Exp::Blank(void)::e);
          __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, YAML::Exp::Blank(void)::e, &dword_1BF794000);
        }
      }
      *(_QWORD *)&__p = 0;
      *((_QWORD *)&__p + 1) = a1;
      v36 = YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)YAML::Exp::Blank(void)::e, (unint64_t *)&__p);
      if ((v36 & 0x80000000) != 0)
        break;
      if (*(_QWORD *)(a1 + 64)
        && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + ((*(_QWORD *)(a1 + 56) >> 9) & 0x7FFFFFFFFFFFF8))
                    + (*(_QWORD *)(a1 + 56) & 0xFFFLL)) == 9
        && *(_DWORD *)(a1 + 16) < *(_DWORD *)(a2 + 12)
        && *(_DWORD *)(a2 + 36) == 2)
      {
        v83 = __cxa_allocate_exception(0x38uLL);
        v84 = *(_DWORD *)(a1 + 16);
        v91 = *(void ***)(a1 + 8);
        v92 = v84;
        std::string::basic_string[abi:ne180100]<0>(&__p, "illegal tab when looking for indentation");
        YAML::Exception::Exception((uint64_t)v83, &v91, &__p);
        *v83 = &off_1E793AF28;
      }
      if (!*(_BYTE *)(a2 + 17))
        break;
      v37 = *(_QWORD *)a2;
      *(_QWORD *)&__p = 0;
      *((_QWORD *)&__p + 1) = a1;
      v36 = YAML::RegEx::Match<YAML::StreamCharSource>(v37, (unint64_t *)&__p);
      if ((v36 & 0x80000000) == 0)
        break;
      YAML::Stream::get((YAML::Stream *)a1);
    }
    YAML::Exp::Break((YAML::Exp *)v36);
    *(_QWORD *)&__p = 0;
    *((_QWORD *)&__p + 1) = a1;
    v40 = YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)YAML::Exp::Break(void)::e, (unint64_t *)&__p);
    if ((v41 & 1) == 0)
    {
      if ((_DWORD)v49)
      {
        YAML::Exp::Space(v49);
        YAML::Exp::Tab(v50);
        YAML::operator|(&YAML::Exp::Space(void)::e, &YAML::Exp::Tab(void)::e, (uint64_t)YAML::Exp::Blank(void)::e);
        __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, YAML::Exp::Blank(void)::e, &dword_1BF794000);
      }
    }
    *(_QWORD *)&__p = 0;
    *((_QWORD *)&__p + 1) = a1;
    v42 = YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)YAML::Exp::Blank(void)::e, (unint64_t *)&__p);
    v43 = v42;
    v44 = v12;
    v45 = v40 > -1 && v88 == 0;
    v8 = v42 >= 0;
    v46 = *(_DWORD *)(a2 + 20);
    v47 = v45 && v46 == 1;
    v48 = v90;
    if (v47)
      v48 = v44;
    v90 = v48;
    if (!v6)
      goto LABEL_103;
    switch(v46)
    {
      case 0:
        std::string::append(a3, "\n");
        goto LABEL_103;
      case 2:
        if (v40 < 0)
        {
          if (((v89 | v26) & 1) == 0)
            std::string::append(a3, " ");
          goto LABEL_136;
        }
        v89 = 1;
        std::string::append(a3, "\n");
        v11 = v8;
        v6 = 1;
        break;
      case 1:
        if ((v89 | v44) & 1 | (v40 >= 0) || (v42 & 0x80000000) == 0)
        {
          if ((v40 & 0x80000000) == 0)
          {
            ++v88;
            v9 = 1;
            v6 = 1;
            goto LABEL_5;
          }
LABEL_121:
          v53 = "\n";
        }
        else
        {
          v53 = " ";
          if (*(_DWORD *)(a1 + 16) < *(_DWORD *)(a2 + 12))
            goto LABEL_121;
        }
        std::string::append(a3, v53);
        if (v40 < 0 && v88 >= 1)
        {
          std::string::basic_string[abi:ne180100](&__p, (v88 - 1), 10);
          if (v94 >= 0)
            v54 = (const std::string::value_type *)&__p;
          else
            v54 = (const std::string::value_type *)__p;
          if (v94 >= 0)
            v55 = HIBYTE(v94);
          else
            v55 = *((_QWORD *)&__p + 1);
          std::string::append(a3, v54, v55);
          if (SHIBYTE(v94) < 0)
            operator delete((void *)__p);
          if (v90 & 1 | (v43 >= 0 || (v10 & 1) == 0))
          {
            std::string::append(a3, "\n");
          }
          else
          {
            v8 = 0;
            v90 = 0;
          }
          v88 = 0;
        }
LABEL_136:
        v9 = 0;
        v6 = 1;
        if (*(_DWORD *)(a1 + 16) >= *(_DWORD *)(a2 + 12))
          goto LABEL_5;
        *(_BYTE *)(a2 + 40) = 1;
        goto LABEL_144;
      default:
LABEL_103:
        v89 = 1;
        v11 = v8;
        v6 = 1;
        if (v40 < 0)
          goto LABEL_136;
        break;
    }
  }
  v56 = v87;
  if (*(_BYTE *)(a2 + 8))
  {
    v57 = __cxa_allocate_exception(0x38uLL);
    v58 = *(_DWORD *)(a1 + 16);
    v91 = *(void ***)(a1 + 8);
    v92 = v58;
    std::string::basic_string[abi:ne180100]<0>(&__p, "illegal EOF in scalar");
    YAML::Exception::Exception((uint64_t)v57, &v91, &__p);
    *v57 = &off_1E793AF28;
  }
LABEL_145:
  if (*(_BYTE *)(a2 + 24))
  {
    v59 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
    if ((v59 & 0x80u) == 0)
      v60 = a3;
    else
      v60 = (std::string *)a3->__r_.__value_.__r.__words[0];
    if ((v59 & 0x80u) != 0)
      v59 = a3->__r_.__value_.__l.__size_;
    v61 = v59;
    while (v61)
    {
      v62 = v60->__r_.__value_.__s.__data_[--v61];
      if (v62 != 32)
      {
        v63 = v61;
        goto LABEL_156;
      }
    }
    v63 = -1;
LABEL_156:
    if (v63 != -1 && v63 >= v56)
      v65 = v63;
    else
      v65 = v56;
    if (v56 != -1)
      v63 = v65;
    if (v63 < v59)
      std::string::erase(a3, v63 + 1, 0xFFFFFFFFFFFFFFFFLL);
  }
  v66 = *(_DWORD *)(a2 + 28);
  if (v66 == -1)
  {
    v72 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
    if ((v72 & 0x80u) == 0)
      v73 = a3;
    else
      v73 = (std::string *)a3->__r_.__value_.__r.__words[0];
    if ((v72 & 0x80u) != 0)
      v72 = a3->__r_.__value_.__l.__size_;
    v74 = v72;
    while (v74)
    {
      v75 = v73->__r_.__value_.__s.__data_[--v74];
      if (v75 != 10)
      {
        v76 = v74;
        goto LABEL_199;
      }
    }
    v76 = -1;
LABEL_199:
    if (v76 != -1 && v76 >= v56)
      v81 = v76;
    else
      v81 = v56;
    if (v56 != -1)
      v76 = v81;
    if (v76 == -1)
    {
      v82 = 0;
    }
    else
    {
      if (v76 >= v72)
        return;
      v82 = v76 + 1;
    }
    std::string::erase(a3, v82, 0xFFFFFFFFFFFFFFFFLL);
  }
  else if (!v66)
  {
    v67 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
    if ((v67 & 0x80u) == 0)
      v68 = a3;
    else
      v68 = (std::string *)a3->__r_.__value_.__r.__words[0];
    if ((v67 & 0x80u) != 0)
      v67 = a3->__r_.__value_.__l.__size_;
    v69 = v67;
    while (v69)
    {
      v70 = v68->__r_.__value_.__s.__data_[--v69];
      if (v70 != 10)
      {
        v71 = v69;
        goto LABEL_187;
      }
    }
    v71 = -1;
LABEL_187:
    if (v71 != -1 && v71 >= v56)
      v78 = v71;
    else
      v78 = v56;
    if (v56 != -1)
      v71 = v78;
    if (v71 == -1)
    {
      v79 = 0;
LABEL_211:
      std::string::erase(a3, v79, 0xFFFFFFFFFFFFFFFFLL);
    }
    else if (v71 + 1 < v67)
    {
      v79 = v71 + 2;
      goto LABEL_211;
    }
  }
}

void sub_1BFC70918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (*(char *)(v20 + 23) < 0)
    operator delete(*(void **)v20);
  _Unwind_Resume(a1);
}

void __cxx_global_array_dtor()
{
  uint64_t i;
  uint64_t *v1;

  for (i = 0; i != -24; i -= 6)
  {
    v1 = &YAML::convert<BOOL>::decode(YAML::Node const&,BOOL &)::names[i];
    if (SHIBYTE(YAML::convert<BOOL>::decode(YAML::Node const&,BOOL &)::names[i + 23]) < 0)
      operator delete((void *)v1[21]);
    if (*((char *)v1 + 167) < 0)
      operator delete((void *)v1[18]);
  }
}

void google::protobuf::StringPiece::operator[]()
{
  __assert_rtn("operator[]", "stringpiece.h", 277, "0 <= i");
}

{
  __assert_rtn("operator[]", "stringpiece.h", 278, "i < length_");
}

void google::protobuf::util::converter::StructuredObjectWriter::BaseElement::pop<google::protobuf::util::converter::JsonObjectWriter::Element>()
{
  __assert_rtn("down_cast", "casts.h", 92, "f == nullptr || dynamic_cast<To>(f) != nullptr");
}

void google::protobuf::util::converter::DataPiece::StringToNumber<int>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_0("StringPiece", "stringpiece.h", a3, "len >= 0");
}

void google::protobuf::internal::StringPiecePod::operator[]()
{
  __assert_rtn("operator[]", "stringpiece.h", 454, "0 <= i");
}

{
  __assert_rtn("operator[]", "stringpiece.h", 455, "i < size_");
}

void google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray()
{
  __assert_rtn("group", "unknown_field_set.h", 348, "type() == TYPE_GROUP");
}

void google::protobuf::FieldDescriptor::CopyTo()
{
  __assert_rtn("_internal_set_type", "descriptor.pb.h", 8965, "PROTOBUF_NAMESPACE_ID::FieldDescriptorProto_Type_IsValid(value)");
}

{
  __assert_rtn("_internal_set_label", "descriptor.pb.h", 8936, "PROTOBUF_NAMESPACE_ID::FieldDescriptorProto_Label_IsValid(value)");
}

void google::protobuf::CalculateBase64EscapedLen()
{
  __assert_rtn("CalculateBase64EscapedLen", "strutil.cc", 1696, "len >= input_len");
}

void google::protobuf::strings::ArrayByteSource::Skip()
{
  __assert_rtn("remove_prefix", "stringpiece.h", 283, "length_ >= n");
}

void google::protobuf::internal::ExtensionSet::GrowCapacity()
{
  __assert_rtn("flat_begin", "extension_set.h", 817, "!is_large()");
}

void google::protobuf::internal::ExtensionSet::IsInitialized()
{
  __assert_rtn("flat_end", "extension_set.h", 829, "!is_large()");
}

void google::protobuf::internal::ExtensionSet::FindOrNullInLargeMap()
{
  __assert_rtn("FindOrNullInLargeMap", "extension_set.cc", 1812, "is_large()");
}

{
  __assert_rtn("FindOrNullInLargeMap", "extension_set.cc", 1834, "is_large()");
}

void google::protobuf::StringPiece::substr()
{
  __assert_rtn("StringPiece", "stringpiece.h", 230, "len >= 0");
}

CCCryptorStatus CCCryptorCreateWithMode(CCOperation op, CCMode mode, CCAlgorithm alg, CCPadding padding, const void *iv, const void *key, size_t keyLength, const void *tweak, size_t tweakLength, int numRounds, CCModeOptions options, CCCryptorRef *cryptorRef)
{
  return MEMORY[0x1E0C800A0](*(_QWORD *)&op, *(_QWORD *)&mode, *(_QWORD *)&alg, *(_QWORD *)&padding, iv, key, keyLength, tweak);
}

CCCryptorStatus CCCryptorFinal(CCCryptorRef cryptorRef, void *dataOut, size_t dataOutAvailable, size_t *dataOutMoved)
{
  return MEMORY[0x1E0C800A8](cryptorRef, dataOut, dataOutAvailable, dataOutMoved);
}

size_t CCCryptorGetOutputLength(CCCryptorRef cryptorRef, size_t inputLength, BOOL final)
{
  return MEMORY[0x1E0C80100](cryptorRef, inputLength, final);
}

CCCryptorStatus CCCryptorRelease(CCCryptorRef cryptorRef)
{
  return MEMORY[0x1E0C80108](cryptorRef);
}

CCCryptorStatus CCCryptorUpdate(CCCryptorRef cryptorRef, const void *dataIn, size_t dataInLength, void *dataOut, size_t dataOutAvailable, size_t *dataOutMoved)
{
  return MEMORY[0x1E0C80118](cryptorRef, dataIn, dataInLength, dataOut, dataOutAvailable, dataOutMoved);
}

void CCHmacFinal(CCHmacContext *ctx, void *macOut)
{
  MEMORY[0x1E0C801F8](ctx, macOut);
}

void CCHmacInit(CCHmacContext *ctx, CCHmacAlgorithm algorithm, const void *key, size_t keyLength)
{
  MEMORY[0x1E0C80200](ctx, *(_QWORD *)&algorithm, key, keyLength);
}

void CCHmacUpdate(CCHmacContext *ctx, const void *data, size_t dataLength)
{
  MEMORY[0x1E0C80218](ctx, data, dataLength);
}

int CCKeyDerivationPBKDF(CCPBKDFAlgorithm algorithm, const char *password, size_t passwordLen, const uint8_t *salt, size_t saltLen, CCPseudoRandomAlgorithm prf, unsigned int rounds, uint8_t *derivedKey, size_t derivedKeyLen)
{
  return MEMORY[0x1E0C80240](*(_QWORD *)&algorithm, password, passwordLen, salt, saltLen, *(_QWORD *)&prf, *(_QWORD *)&rounds, derivedKey);
}

int CC_SHA256_Final(unsigned __int8 *md, CC_SHA256_CTX *c)
{
  return MEMORY[0x1E0C80370](md, c);
}

int CC_SHA256_Init(CC_SHA256_CTX *c)
{
  return MEMORY[0x1E0C80378](c);
}

int CC_SHA256_Update(CC_SHA256_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x1E0C80380](c, data, *(_QWORD *)&len);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1E0C97FC8]();
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1E0C98738](cf);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC0](cf);
}

NSString *NSUserName(void)
{
  return (NSString *)MEMORY[0x1E0CB3428]();
}

CFDataRef SecKeyCreateSignature(SecKeyRef key, SecKeyAlgorithm algorithm, CFDataRef dataToSign, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x1E0CD6390](key, algorithm, dataToSign, error);
}

SecKeyRef SecKeyCreateWithData(CFDataRef keyData, CFDictionaryRef attributes, CFErrorRef *error)
{
  return (SecKeyRef)MEMORY[0x1E0CD63A0](keyData, attributes, error);
}

Boolean SecKeyVerifySignature(SecKeyRef key, SecKeyAlgorithm algorithm, CFDataRef signedData, CFDataRef signature, CFErrorRef *error)
{
  return MEMORY[0x1E0CD6418](key, algorithm, signedData, signature, error);
}

int SecRandomCopyBytes(SecRandomRef rnd, size_t count, void *bytes)
{
  return MEMORY[0x1E0CD65A0](rnd, count, bytes);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x1E0C80948](a1, *(_QWORD *)&a2);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

void siri::dialogengine::GetUnitLabel<siri::dialogengine::Temperature>(std::string *a2@<X8>, int a1@<W0>)
{
  __ZN4siri12dialogengine12GetUnitLabelINS0_11TemperatureEEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEET_(a1, a2);
}

void siri::dialogengine::GetUnitLabel<siri::dialogengine::Area>(std::string *a2@<X8>, int a1@<W0>)
{
  __ZN4siri12dialogengine12GetUnitLabelINS0_4AreaEEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEET_(a1, a2);
}

void siri::dialogengine::GetUnitLabel<siri::dialogengine::Speed>(std::string *a2@<X8>, int a1@<W0>)
{
  __ZN4siri12dialogengine12GetUnitLabelINS0_5SpeedEEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEET_(a1, a2);
}

void siri::dialogengine::GetUnitLabel<siri::dialogengine::Length>(std::string *a2@<X8>, int a1@<W0>)
{
  __ZN4siri12dialogengine12GetUnitLabelINS0_6LengthEEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEET_(a1, a2);
}

void siri::dialogengine::GetUnitLabel<siri::dialogengine::Weight>(std::string *a2@<X8>, int a1@<W0>)
{
  __ZN4siri12dialogengine12GetUnitLabelINS0_6WeightEEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEET_(a1, a2);
}

void siri::dialogengine::GetUnitLabel<siri::dialogengine::Density>(std::string *a2@<X8>, int a1@<W0>)
{
  __ZN4siri12dialogengine12GetUnitLabelINS0_7DensityEEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEET_(a1, a2);
}

void siri::dialogengine::GetUnitLabel<siri::dialogengine::Pressure>(std::string *a2@<X8>, int a1@<W0>)
{
  __ZN4siri12dialogengine12GetUnitLabelINS0_8PressureEEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEET_(a1, a2);
}

void siri::dialogengine::GetConvertedUnitInfo<siri::dialogengine::Temperature>(double a4@<D0>, uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __ZN4siri12dialogengine20GetConvertedUnitInfoINS0_11TemperatureEEENS0_16UnitAndValueInfoIT_EEPNS0_7ContextEdPKNS0_14VariableObjectE(a1, a2, a3, a4);
}

void siri::dialogengine::GetConvertedUnitInfo<siri::dialogengine::Area>(double a4@<D0>, uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __ZN4siri12dialogengine20GetConvertedUnitInfoINS0_4AreaEEENS0_16UnitAndValueInfoIT_EEPNS0_7ContextEdPKNS0_14VariableObjectE(a1, a2, a3, a4);
}

void siri::dialogengine::GetConvertedUnitInfo<siri::dialogengine::Speed>(double a4@<D0>, uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __ZN4siri12dialogengine20GetConvertedUnitInfoINS0_5SpeedEEENS0_16UnitAndValueInfoIT_EEPNS0_7ContextEdPKNS0_14VariableObjectE(a1, a2, a3, a4);
}

void siri::dialogengine::GetConvertedUnitInfo<siri::dialogengine::Length>(double a4@<D0>, uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __ZN4siri12dialogengine20GetConvertedUnitInfoINS0_6LengthEEENS0_16UnitAndValueInfoIT_EEPNS0_7ContextEdPKNS0_14VariableObjectE(a1, a2, a3, a4);
}

void siri::dialogengine::GetConvertedUnitInfo<siri::dialogengine::Weight>(double a4@<D0>, uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __ZN4siri12dialogengine20GetConvertedUnitInfoINS0_6WeightEEENS0_16UnitAndValueInfoIT_EEPNS0_7ContextEdPKNS0_14VariableObjectE(a1, a2, a3, a4);
}

void siri::dialogengine::GetConvertedUnitInfo<siri::dialogengine::Density>(double a4@<D0>, uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __ZN4siri12dialogengine20GetConvertedUnitInfoINS0_7DensityEEENS0_16UnitAndValueInfoIT_EEPNS0_7ContextEdPKNS0_14VariableObjectE(a1, a2, a3, a4);
}

void siri::dialogengine::GetConvertedUnitInfo<siri::dialogengine::Pressure>(double a4@<D0>, uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __ZN4siri12dialogengine20GetConvertedUnitInfoINS0_8PressureEEENS0_16UnitAndValueInfoIT_EEPNS0_7ContextEdPKNS0_14VariableObjectE(a1, a2, a3, a4);
}

uint64_t morphun::dictionary::PhraseProperties::isEndsWithVowel()
{
  return MEMORY[0x1E0DE7330]();
}

uint64_t morphun::dictionary::PhraseProperties::isStartsWithVowel()
{
  return MEMORY[0x1E0DE7338]();
}

uint64_t morphun::TokenIterator::TokenIterator()
{
  return MEMORY[0x1E0DE7340]();
}

uint64_t morphun::TokenIterator::operator++()
{
  return MEMORY[0x1E0DE7348]();
}

uint64_t morphun::TokenizerFactory::createTokenizer()
{
  return MEMORY[0x1E0DE7350]();
}

uint64_t morphun::lang::features::LanguageGrammarFeatures::getLanguageGrammarFeatures()
{
  return MEMORY[0x1E0DE7358]();
}

void morphun::lang::features::LanguageGrammarFeatures::~LanguageGrammarFeatures(morphun::lang::features::LanguageGrammarFeatures *this)
{
  MEMORY[0x1E0DE7360](this);
}

void morphun::lang::features::LanguageGrammarFeatures_GrammarCategory::~LanguageGrammarFeatures_GrammarCategory(morphun::lang::features::LanguageGrammarFeatures_GrammarCategory *this)
{
  MEMORY[0x1E0DE7368](this);
}

uint64_t morphun::util::LocaleUtils::getFallbackPair()
{
  return MEMORY[0x1E0DE7370]();
}

uint64_t morphun::util::LocaleUtils::areLanguageScriptCompatible()
{
  return MEMORY[0x1E0DE7378]();
}

uint64_t morphun::util::StringUtils::codePointAt()
{
  return MEMORY[0x1E0DE7380]();
}

uint64_t morphun::util::StringUtils::to_u16string()
{
  return MEMORY[0x1E0DE7388]();
}

uint64_t morphun::util::StringUtils::appendCodePoint()
{
  return MEMORY[0x1E0DE7390]();
}

uint64_t morphun::util::StringUtils::capitalizeFirst()
{
  return MEMORY[0x1E0DE7398]();
}

uint64_t morphun::util::StringUtils::lowercase()
{
  return MEMORY[0x1E0DE73B8]();
}

uint64_t morphun::util::StringUtils::to_string()
{
  return MEMORY[0x1E0DE73C8]();
}

uint64_t morphun::util::StringUtils::uppercase()
{
  return MEMORY[0x1E0DE73D0]();
}

uint64_t morphun::util::LoggerConfig::getLogLevel(morphun::util::LoggerConfig *this)
{
  return MEMORY[0x1E0DE73D8](this);
}

uint64_t morphun::util::LoggerConfig::setLogLevel()
{
  return MEMORY[0x1E0DE73E0]();
}

uint64_t morphun::util::LoggerConfig::logToConsole(morphun::util::LoggerConfig *this)
{
  return MEMORY[0x1E0DE73E8](this);
}

uint64_t morphun::util::VersionUtils::getLibraryVersion(morphun::util::VersionUtils *this)
{
  return MEMORY[0x1E0DE73F0](this);
}

uint64_t morphun::util::ULocale::ULocale()
{
  return MEMORY[0x1E0DE7400]();
}

{
  return MEMORY[0x1E0DE7410]();
}

void morphun::util::ULocale::~ULocale(morphun::util::ULocale *this)
{
  MEMORY[0x1E0DE7420](this);
}

uint64_t morphun::util::ULocale::operator=()
{
  return MEMORY[0x1E0DE7428]();
}

void morphun::Object::~Object(morphun::Object *this)
{
  MEMORY[0x1E0DE7430](this);
}

uint64_t morphun::dialog::NumberConcept::NumberConcept(morphun::dialog::NumberConcept *this, double a2, const morphun::util::ULocale *a3, const morphun::util::ULocale *a4)
{
  return MEMORY[0x1E0DE7438](this, a3, a4, a2);
}

uint64_t morphun::dialog::NumberConcept::NumberConcept(morphun::dialog::NumberConcept *this, uint64_t a2, const morphun::util::ULocale *a3, const morphun::util::ULocale *a4)
{
  return MEMORY[0x1E0DE7440](this, a2, a3, a4);
}

void morphun::dialog::NumberConcept::~NumberConcept(morphun::dialog::NumberConcept *this)
{
  MEMORY[0x1E0DE7448](this);
}

uint64_t morphun::dialog::SemanticValue::SemanticValue()
{
  return MEMORY[0x1E0DE7450]();
}

void morphun::dialog::SemanticValue::~SemanticValue(morphun::dialog::SemanticValue *this)
{
  MEMORY[0x1E0DE7458](this);
}

uint64_t morphun::dialog::PronounConcept::PronounConcept()
{
  return MEMORY[0x1E0DE7460]();
}

{
  return MEMORY[0x1E0DE7468]();
}

void morphun::dialog::PronounConcept::~PronounConcept(morphun::dialog::PronounConcept *this)
{
  MEMORY[0x1E0DE7470](this);
}

uint64_t morphun::dialog::SemanticConcept::SemanticConcept()
{
  return MEMORY[0x1E0DE7478]();
}

void morphun::dialog::SemanticConcept::~SemanticConcept(morphun::dialog::SemanticConcept *this)
{
  MEMORY[0x1E0DE7480](this);
}

uint64_t morphun::dialog::SemanticFeature::SemanticFeature()
{
  return MEMORY[0x1E0DE7488]();
}

{
  return MEMORY[0x1E0DE7490]();
}

void morphun::dialog::SemanticFeature::~SemanticFeature(morphun::dialog::SemanticFeature *this)
{
  MEMORY[0x1E0DE7498](this);
}

uint64_t morphun::dialog::SpeakableString::SpeakableString()
{
  return MEMORY[0x1E0DE74A0]();
}

{
  return MEMORY[0x1E0DE74A8]();
}

void morphun::dialog::SpeakableString::~SpeakableString(morphun::dialog::SpeakableString *this)
{
  MEMORY[0x1E0DE74B0](this);
}

uint64_t morphun::dialog::SemanticConceptList::SemanticConceptList()
{
  return MEMORY[0x1E0DE74B8]();
}

void morphun::dialog::SemanticConceptList::~SemanticConceptList(morphun::dialog::SemanticConceptList *this)
{
  MEMORY[0x1E0DE74C0](this);
}

uint64_t morphun::dialog::SemanticFeatureModel::SemanticFeatureModel(morphun::dialog::SemanticFeatureModel *this, const morphun::util::ULocale *a2)
{
  return MEMORY[0x1E0DE74C8](this, a2);
}

uint64_t morphun::dialog::SemanticFeatureModel::SemanticFeatureModel()
{
  return MEMORY[0x1E0DE74D0]();
}

void morphun::dialog::SemanticFeatureModel::~SemanticFeatureModel(morphun::dialog::SemanticFeatureModel *this)
{
  MEMORY[0x1E0DE74D8](this);
}

uint64_t morphun::dialog::GrammaticalCountFactory::GrammaticalCountFactory(morphun::dialog::GrammaticalCountFactory *this, const morphun::util::ULocale *a2)
{
  return MEMORY[0x1E0DE74E0](this, a2);
}

void morphun::dialog::GrammaticalCountFactory::~GrammaticalCountFactory(morphun::dialog::GrammaticalCountFactory *this)
{
  MEMORY[0x1E0DE74E8](this);
}

uint64_t morphun::dialog::InflectableStringConcept::InflectableStringConcept(morphun::dialog::InflectableStringConcept *this, const morphun::dialog::SemanticFeatureModel *a2, const morphun::dialog::SpeakableString *a3)
{
  return MEMORY[0x1E0DE74F0](this, a2, a3);
}

uint64_t morphun::dialog::SemanticFeatureModel_DisplayData::SemanticFeatureModel_DisplayData()
{
  return MEMORY[0x1E0DE74F8]();
}

void morphun::dialog::SemanticFeatureModel_DisplayData::~SemanticFeatureModel_DisplayData(morphun::dialog::SemanticFeatureModel_DisplayData *this)
{
  MEMORY[0x1E0DE7500](this);
}

uint64_t morphun::dialog::SemanticFeatureModel_DisplayValue::SemanticFeatureModel_DisplayValue()
{
  return MEMORY[0x1E0DE7508]();
}

uint64_t morphun::dialog::LocalizedCommonConceptFactoryProvider::getDefaultCommonConceptFactoryProvider(morphun::dialog::LocalizedCommonConceptFactoryProvider *this)
{
  return MEMORY[0x1E0DE7510](this);
}

uint64_t morphun::resources::DataRegistrationService::getDataPathForLocale(morphun::resources::DataRegistrationService *this, const morphun::util::ULocale *a2)
{
  return MEMORY[0x1E0DE7518](this, a2);
}

uint64_t morphun::resources::DataRegistrationService::registerDataPathForLocale()
{
  return MEMORY[0x1E0DE7520]();
}

uint64_t morphun::TokenIterator::operator*()
{
  return MEMORY[0x1E0DE7528]();
}

uint64_t morphun::TokenIterator::operator!=()
{
  return MEMORY[0x1E0DE7530]();
}

uint64_t morphun::lang::features::LanguageGrammarFeatures::getFeatures(morphun::lang::features::LanguageGrammarFeatures *this)
{
  return MEMORY[0x1E0DE7540](this);
}

uint64_t morphun::lang::features::LanguageGrammarFeatures::getCategories(morphun::lang::features::LanguageGrammarFeatures *this)
{
  return MEMORY[0x1E0DE7548](this);
}

uint64_t morphun::lang::features::LanguageGrammarFeatures_GrammarCategory::isUniqueValues(morphun::lang::features::LanguageGrammarFeatures_GrammarCategory *this)
{
  return MEMORY[0x1E0DE7550](this);
}

uint64_t morphun::lang::features::LanguageGrammarFeatures_GrammarCategory::getName(morphun::lang::features::LanguageGrammarFeatures_GrammarCategory *this)
{
  return MEMORY[0x1E0DE7558](this);
}

uint64_t morphun::lang::features::LanguageGrammarFeatures_GrammarCategory::getValues(morphun::lang::features::LanguageGrammarFeatures_GrammarCategory *this)
{
  return MEMORY[0x1E0DE7560](this);
}

uint64_t morphun::lang::features::LanguageGrammarFeatures_GrammarFeatures::getName(morphun::lang::features::LanguageGrammarFeatures_GrammarFeatures *this)
{
  return MEMORY[0x1E0DE7568](this);
}

uint64_t morphun::util::ULocale::getFallback(morphun::util::ULocale *this)
{
  return MEMORY[0x1E0DE7570](this);
}

uint64_t morphun::Token::isWhitespace(morphun::Token *this)
{
  return MEMORY[0x1E0DE7578](this);
}

uint64_t morphun::Token::isSignificant(morphun::Token *this)
{
  return MEMORY[0x1E0DE7588](this);
}

uint64_t morphun::Token::getNext(morphun::Token *this)
{
  return MEMORY[0x1E0DE75A0](this);
}

uint64_t morphun::Token::getValue(morphun::Token *this)
{
  return MEMORY[0x1E0DE75A8](this);
}

uint64_t morphun::Token::getLength(morphun::Token *this)
{
  return MEMORY[0x1E0DE75B0](this);
}

uint64_t morphun::dialog::PronounConcept::getFeatureValue(morphun::dialog::PronounConcept *this, const morphun::dialog::SemanticFeature *a2)
{
  return MEMORY[0x1E0DE75B8](this, a2);
}

uint64_t morphun::dialog::SemanticFeature::operator<()
{
  return MEMORY[0x1E0DE75C0]();
}

uint64_t morphun::dialog::SpeakableString::getPrint(morphun::dialog::SpeakableString *this)
{
  return MEMORY[0x1E0DE75C8](this);
}

uint64_t morphun::dialog::SemanticFeatureModel::getFeature()
{
  return MEMORY[0x1E0DE75D0]();
}

uint64_t morphun::dialog::GrammaticalCountFactory::choose()
{
  return MEMORY[0x1E0DE75D8]();
}

uint64_t morphun::dialog::SemanticFeatureConceptBase::getFeatureValueByName()
{
  return MEMORY[0x1E0DE75E0]();
}

const char *__cdecl std::runtime_error::what(const std::runtime_error *this)
{
  return (const char *)MEMORY[0x1E0DE4190](this);
}

std::string::const_reference std::string::at(const std::string *this, std::string::size_type __n)
{
  return (std::string::const_reference)MEMORY[0x1E0DE41B0](this, __n);
}

std::string::size_type std::string::find(const std::string *this, std::string::value_type __c, std::string::size_type __pos)
{
  return MEMORY[0x1E0DE41C8](this, __c, __pos);
}

std::string::size_type std::string::rfind(const std::string *this, std::string::value_type __c, std::string::size_type __pos)
{
  return MEMORY[0x1E0DE41D0](this, __c, __pos);
}

uint64_t std::stringbuf::str()
{
  return MEMORY[0x1E0DE41F0]();
}

std::string *__cdecl std::locale::name(std::string *__return_ptr retstr, const std::locale *this)
{
  return (std::string *)MEMORY[0x1E0DE4240](retstr, this);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x1E0DE4248](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x1E0DE4258](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1E0DE4288](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x1E0DE4320](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::string *a2)
{
  return (std::runtime_error *)MEMORY[0x1E0DE4328](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::runtime_error *a2)
{
  return (std::runtime_error *)MEMORY[0x1E0DE4330](this, a2);
}

void std::runtime_error::~runtime_error(std::runtime_error *this)
{
  MEMORY[0x1E0DE4340](this);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1E0DE4388](this);
}

void std::__call_once(std::once_flag::_State_type *a1, void *a2, void (__cdecl *a3)(void *))
{
  MEMORY[0x1E0DE43A8](a1, a2, a3);
}

std::regex_error *__cdecl std::regex_error::regex_error(std::regex_error *this, std::regex_constants::error_type __ecode)
{
  return (std::regex_error *)MEMORY[0x1E0DE43B0](this, *(_QWORD *)&__ecode);
}

void std::regex_error::~regex_error(std::regex_error *this)
{
  MEMORY[0x1E0DE43B8](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1E0DE43E8](__n);
}

std::string::reference std::string::at(std::string *this, std::string::size_type __n)
{
  return (std::string::reference)MEMORY[0x1E0DE4400](this, __n);
}

std::string *__cdecl std::string::erase(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4408](this, __pos, __n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1E0DE4420](this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4428](this, __s, __n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4430](this, __str, __pos, __n);
}

std::string *__cdecl std::string::append(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  return (std::string *)MEMORY[0x1E0DE4438](this, __n, __c);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1E0DE4440](this, __s);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4448](this, __s, __n);
}

std::string::iterator std::string::insert(std::string *this, std::string::const_iterator __pos, std::string::value_type __c)
{
  return (std::string::iterator)MEMORY[0x1E0DE4460](this, __pos.__i_, __c);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1E0DE4468](this, __pos, __s);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4470](this, __pos, __s, __n);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  MEMORY[0x1E0DE4480](this, __n, __c);
}

std::string *__cdecl std::string::replace(std::string *this, std::string::size_type __pos, std::string::size_type __n1, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1E0DE4488](this, __pos, __n1, __s);
}

std::string *__cdecl std::string::replace(std::string *this, std::string::size_type __pos, std::string::size_type __n1, const std::string::value_type *__s, std::string::size_type __n2)
{
  return (std::string *)MEMORY[0x1E0DE4490](this, __pos, __n1, __s, __n2);
}

void std::string::reserve(std::string *this, std::string::size_type __requested_capacity)
{
  MEMORY[0x1E0DE44A8](this, __requested_capacity);
}

void std::string::__grow_by(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add)
{
  MEMORY[0x1E0DE44B0](this, __old_cap, __delta_cap, __old_sz, __n_copy, __n_del, __n_add);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
  MEMORY[0x1E0DE44B8](this, __c);
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n, std::allocator<char> *__a)
{
  return (std::string *)MEMORY[0x1E0DE44C8](this, __str, __pos, __n, __a);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x1E0DE44D8](this, __str);
}

std::string *__cdecl std::string::operator=(std::string *this, std::string::value_type __c)
{
  return (std::string *)MEMORY[0x1E0DE44E0](this, __c);
}

uint64_t std::filebuf::open()
{
  return MEMORY[0x1E0DE4590]();
}

uint64_t std::filebuf::close()
{
  return MEMORY[0x1E0DE4598]();
}

uint64_t std::filebuf::basic_filebuf()
{
  return MEMORY[0x1E0DE45A8]();
}

uint64_t std::filebuf::~filebuf()
{
  return MEMORY[0x1E0DE45B0]();
}

uint64_t std::istream::get()
{
  return MEMORY[0x1E0DE45C0]();
}

uint64_t std::istream::peek()
{
  return MEMORY[0x1E0DE45C8]();
}

uint64_t std::istream::ignore()
{
  return MEMORY[0x1E0DE4600]();
}

uint64_t std::istream::sentry::sentry()
{
  return MEMORY[0x1E0DE4608]();
}

uint64_t std::istream::putback()
{
  return MEMORY[0x1E0DE4618]();
}

uint64_t std::istream::~istream()
{
  return MEMORY[0x1E0DE4628]();
}

uint64_t std::istream::operator>>()
{
  return MEMORY[0x1E0DE4630]();
}

{
  return MEMORY[0x1E0DE4648]();
}

{
  return MEMORY[0x1E0DE4650]();
}

{
  return MEMORY[0x1E0DE4670]();
}

{
  return MEMORY[0x1E0DE4678]();
}

uint64_t std::ostream::put()
{
  return MEMORY[0x1E0DE4698]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x1E0DE46A0]();
}

uint64_t std::ostream::write()
{
  return MEMORY[0x1E0DE46A8]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x1E0DE46B0]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x1E0DE46B8]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x1E0DE46C8]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x1E0DE46E8]();
}

{
  return MEMORY[0x1E0DE4700]();
}

{
  return MEMORY[0x1E0DE4708]();
}

{
  return MEMORY[0x1E0DE4718]();
}

std::random_device *__cdecl std::random_device::random_device(std::random_device *this, const std::string *__token)
{
  return (std::random_device *)MEMORY[0x1E0DE4770](this, __token);
}

void std::random_device::~random_device(std::random_device *this)
{
  MEMORY[0x1E0DE4778](this);
}

std::random_device::result_type std::random_device::operator()(std::random_device *this)
{
  return MEMORY[0x1E0DE4780](this);
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x1E0DE47A8]();
}

uint64_t std::ofstream::open()
{
  return MEMORY[0x1E0DE47B8]();
}

std::regex_traits<char>::char_class_type std::__get_classname(const char *__s, BOOL __icase)
{
  return MEMORY[0x1E0DE47C8](__s, __icase);
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x1E0DE47E0]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x1E0DE47E8]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE48F0](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE4900](this);
}

std::string *__cdecl std::__get_collation_name(std::string *__return_ptr retstr, const char *__s)
{
  return (std::string *)MEMORY[0x1E0DE4910](retstr, __s);
}

void std::mutex::lock(std::mutex *this)
{
  MEMORY[0x1E0DE4AA0](this);
}

void std::mutex::unlock(std::mutex *this)
{
  MEMORY[0x1E0DE4AA8](this);
}

void std::mutex::~mutex(std::mutex *this)
{
  MEMORY[0x1E0DE4AB8](this);
}

std::locale *__cdecl std::locale::locale(std::locale *this, const std::locale *a2)
{
  return (std::locale *)MEMORY[0x1E0DE4B88](this, a2);
}

std::locale *__cdecl std::locale::locale(std::locale *this)
{
  return (std::locale *)MEMORY[0x1E0DE4B90](this);
}

void std::locale::~locale(std::locale *this)
{
  MEMORY[0x1E0DE4B98](this);
}

void std::codecvt<char32_t,char,__mbstate_t>::~codecvt(std::codecvt<char32_t, char, mbstate_t> *this)
{
  MEMORY[0x1E0DE4BD8](this);
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
  MEMORY[0x1E0DE4C50](this);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
  MEMORY[0x1E0DE4C68](this, __sb);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  MEMORY[0x1E0DE4C80](this, *(_QWORD *)&__state);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x1E0DE4D28]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, double __val)
{
  return (std::string *)MEMORY[0x1E0DE4D40](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x1E0DE4D58](retstr, *(_QWORD *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x1E0DE4D60](retstr, *(_QWORD *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, uint64_t __val)
{
  return (std::string *)MEMORY[0x1E0DE4D68](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x1E0DE4D70](retstr, __val);
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x1E0DE4D88]();
}

void std::exception::~exception(std::exception *this)
{
  MEMORY[0x1E0DE4DD8](this);
}

void std::terminate(void)
{
  MEMORY[0x1E0DE4E18]();
}

uint64_t operator delete[]()
{
  return off_1E7925120();
}

void operator delete(void *__p)
{
  off_1E7925128(__p);
}

uint64_t operator delete()
{
  return off_1E7925130();
}

void *__cdecl operator new[](size_t __sz)
{
  return (void *)off_1E7925138(__sz);
}

uint64_t operator new[]()
{
  return off_1E7925140();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_1E7925148(__sz);
}

void *__cdecl operator new(size_t __sz, const std::nothrow_t *a2)
{
  return (void *)off_1E7925150(__sz, a2);
}

uint64_t operator new()
{
  return off_1E7925158();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x1E0C80A58](a1, a2, *(_QWORD *)&a3, a4);
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1E0DE5068](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x1E0C80A98](lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1E0DE5080](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x1E0DE5098]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x1E0DE50A0](a1);
}

void *__cxa_get_exception_ptr(void *a1)
{
  return (void *)MEMORY[0x1E0DE50A8](a1);
}

void __cxa_guard_abort(__guard *a1)
{
  MEMORY[0x1E0DE50B0](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1E0DE50B8](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x1E0DE50C0](a1);
}

void __cxa_rethrow(void)
{
  MEMORY[0x1E0DE50D0]();
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x1E0DE50D8](a1, lptinfo, a3);
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x1E0DE50E0](lpsrc, lpstype, lpdtype, s2d);
}

int *__error(void)
{
  return (int *)MEMORY[0x1E0C80AC0]();
}

double __exp10(double a1)
{
  double result;

  MEMORY[0x1E0C80AC8](a1);
  return result;
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x1E0C80B50](*(_QWORD *)&a1, a2);
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1E0C80C70](*(_QWORD *)&a1);
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1E0C80C78](*(_QWORD *)&a1);
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1E0C81010]();
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C810D0](dso, log, type, spid, name, format, buf, *(_QWORD *)&size);
}

uint64_t analytics_send_event_lazy()
{
  return MEMORY[0x1E0D15470]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

int chmod(const char *a1, mode_t a2)
{
  return MEMORY[0x1E0C82638](a1, a2);
}

int clock_gettime(clockid_t __clock_id, timespec *__tp)
{
  return MEMORY[0x1E0C82668](*(_QWORD *)&__clock_id, __tp);
}

int closedir(DIR *a1)
{
  return MEMORY[0x1E0C82698](a1);
}

int deflateEnd(z_streamp strm)
{
  return MEMORY[0x1E0DE92D0](strm);
}

int deflateInit2_(z_streamp strm, int level, int method, int windowBits, int memLevel, int strategy, const char *version, int stream_size)
{
  return MEMORY[0x1E0DE92D8](strm, *(_QWORD *)&level, *(_QWORD *)&method, *(_QWORD *)&windowBits, *(_QWORD *)&memLevel, *(_QWORD *)&strategy, version, *(_QWORD *)&stream_size);
}

double difftime(time_t a1, time_t a2)
{
  double result;

  MEMORY[0x1E0C82B98](a1, a2);
  return result;
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C00](queue, block);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1E0C82D00](identifier, flags);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E38](attr, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E48](label, attr);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1E0C82EB8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1E0C82EC8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82ED8](dsema, timeout);
}

int feof(FILE *a1)
{
  return MEMORY[0x1E0C83340](a1);
}

int fflush(FILE *a1)
{
  return MEMORY[0x1E0C83370](a1);
}

char *__cdecl fgets(char *a1, int a2, FILE *a3)
{
  return (char *)MEMORY[0x1E0C833A0](a1, *(_QWORD *)&a2, a3);
}

long double fmod(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C83440](__x, __y);
  return result;
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C83478](a1, a2);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

char *__cdecl getcwd(char *a1, size_t a2)
{
  return (char *)MEMORY[0x1E0C83648](a1, a2);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x1E0C83660](a1);
}

int getpagesize(void)
{
  return MEMORY[0x1E0C83740]();
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x1E0C83820](a1, a2);
}

tm *__cdecl gmtime_r(const time_t *a1, tm *a2)
{
  return (tm *)MEMORY[0x1E0C83860](a1, a2);
}

int gzclose(gzFile file)
{
  return MEMORY[0x1E0DE9310](file);
}

int gzeof(gzFile file)
{
  return MEMORY[0x1E0DE9328](file);
}

const char *__cdecl gzerror(gzFile file, int *errnum)
{
  return (const char *)MEMORY[0x1E0DE9338](file, errnum);
}

gzFile gzopen(const char *a1, const char *a2)
{
  return (gzFile)MEMORY[0x1E0DE9358](a1, a2);
}

int gzread(gzFile file, voidp buf, unsigned int len)
{
  return MEMORY[0x1E0DE9370](file, buf, *(_QWORD *)&len);
}

int gzwrite(gzFile file, voidpc buf, unsigned int len)
{
  return MEMORY[0x1E0DE9390](file, buf, *(_QWORD *)&len);
}

int inflateEnd(z_streamp strm)
{
  return MEMORY[0x1E0DE93B8](strm);
}

int inflateInit2_(z_streamp strm, int windowBits, const char *version, int stream_size)
{
  return MEMORY[0x1E0DE93C8](strm, *(_QWORD *)&windowBits, version, *(_QWORD *)&stream_size);
}

tm *__cdecl localtime_r(const time_t *a1, tm *a2)
{
  return (tm *)MEMORY[0x1E0C83BB0](a1, a2);
}

kern_return_t mach_port_deallocate(ipc_space_t task, mach_port_name_t name)
{
  return MEMORY[0x1E0C83CF8](*(_QWORD *)&task, *(_QWORD *)&name);
}

mach_port_t mach_thread_self(void)
{
  return MEMORY[0x1E0C83DB0]();
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F00](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F10](ptr, size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1E0C84070](__s, *(_QWORD *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1E0C84078](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1E0C840B0](__b, *(_QWORD *)&__c, __len);
}

int mkdir(const char *a1, mode_t a2)
{
  return MEMORY[0x1E0C84160](a1, a2);
}

time_t mktime(tm *a1)
{
  return MEMORY[0x1E0C841C8](a1);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1E0DE7BB8]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7BD0](a1);
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x1E0DE7BD8](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x1E0DE7BE0]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7BE8](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1E0DE7BF0](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1E0DE7BF8]();
}

void objc_copyCppObjectAtomic(void *dest, const void *src, void (__cdecl *copyHelper)(void *, const void *))
{
  MEMORY[0x1E0DE7C20](dest, src, copyHelper);
}

void objc_end_catch(void)
{
  MEMORY[0x1E0DE7C80]();
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x1E0DE7C90](obj);
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1E0DE7CB0](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1E0DE7CD0](self, _cmd, offset, atomic);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1E0DE7D38]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1E0DE7D40]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1E0DE7D48]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1E0DE7D50]();
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7E58](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E60](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E68](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1E0DE7E70](a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F88](self, _cmd, newValue, offset);
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7FA0](self, _cmd, newValue, offset);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x1E0DE7FB0](location, obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7FE0](a1);
}

DIR *__cdecl opendir(const char *a1)
{
  return (DIR *)MEMORY[0x1E0C844C0](a1);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1E0C84728](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1E0C84920](log);
}

os_signpost_id_t os_signpost_id_generate(os_log_t log)
{
  return MEMORY[0x1E0C84928](log);
}

uint64_t os_variant_has_internal_diagnostics()
{
  return MEMORY[0x1E0C849F8]();
}

int pclose(FILE *a1)
{
  return MEMORY[0x1E0C84AE8](a1);
}

FILE *__cdecl popen(const char *a1, const char *a2)
{
  return (FILE *)MEMORY[0x1E0C84B28](a1, a2);
}

int printf(const char *a1, ...)
{
  return MEMORY[0x1E0C84BD0](a1);
}

void *__cdecl pthread_getspecific(pthread_key_t a1)
{
  return (void *)MEMORY[0x1E0C84DC0](a1);
}

int pthread_key_create(pthread_key_t *a1, void (__cdecl *a2)(void *))
{
  return MEMORY[0x1E0C84DE0](a1, a2);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x1E0C84ED8]();
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return MEMORY[0x1E0C84F18](a1, a2);
}

int puts(const char *a1)
{
  return MEMORY[0x1E0C84F60](a1);
}

dirent *__cdecl readdir(DIR *a1)
{
  return (dirent *)MEMORY[0x1E0C85008](a1);
}

void rename(const std::__fs::filesystem::path *__from, const std::__fs::filesystem::path *__to, std::error_code *__ec)
{
  MEMORY[0x1E0C85100](__from, __to, __ec);
}

int rmdir(const char *a1)
{
  return MEMORY[0x1E0C85138](a1);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1E0C85440](__str, __size, __format);
}

int sprintf(char *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C85460](a1, a2);
}

int sqlite3_close(sqlite3 *a1)
{
  return MEMORY[0x1E0DE8650](a1);
}

const char *__cdecl sqlite3_errmsg(sqlite3 *a1)
{
  return (const char *)MEMORY[0x1E0DE8788](a1);
}

int sqlite3_exec(sqlite3 *a1, const char *sql, int (__cdecl *callback)(void *, int, char **, char **), void *a4, char **errmsg)
{
  return MEMORY[0x1E0DE8798](a1, sql, callback, a4, errmsg);
}

void sqlite3_free(void *a1)
{
  MEMORY[0x1E0DE87D0](a1);
}

int sqlite3_open(const char *filename, sqlite3 **ppDb)
{
  return MEMORY[0x1E0DE8868](filename, ppDb);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1E0C854D8](a1, a2);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1E0C85518](__s, *(_QWORD *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1E0C85520](__s1, __s2);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x1E0C85540](__s1);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1E0C85548](*(_QWORD *)&__errnum);
}

size_t strftime(char *a1, size_t a2, const char *a3, const tm *a4)
{
  return MEMORY[0x1E0C85558](a1, a2, a3, a4);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

char *__cdecl strstr(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x1E0C85610](__s1, __s2);
}

double strtod(const char *a1, char **a2)
{
  double result;

  MEMORY[0x1E0C85618](a1, a2);
  return result;
}

float strtof(const char *a1, char **a2)
{
  float result;

  MEMORY[0x1E0C85628](a1, a2);
  return result;
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1E0C85658](__str, __endptr, *(_QWORD *)&__base);
}

uint64_t strtoll(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1E0C85678](__str, __endptr, *(_QWORD *)&__base);
}

unint64_t strtoul(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1E0C85698](__str, __endptr, *(_QWORD *)&__base);
}

unint64_t strtoull(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1E0C856A8](__str, __endptr, *(_QWORD *)&__base);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x1E0C857A0](a1, a2, a3, a4, a5);
}

kern_return_t thread_info(thread_inspect_t target_act, thread_flavor_t flavor, thread_info_t thread_info_out, mach_msg_type_number_t *thread_info_outCnt)
{
  return MEMORY[0x1E0C858F8](*(_QWORD *)&target_act, *(_QWORD *)&flavor, thread_info_out, thread_info_outCnt);
}

time_t time(time_t *a1)
{
  return MEMORY[0x1E0C85950](a1);
}

time_t timegm(tm *const a1)
{
  return MEMORY[0x1E0C85958](a1);
}

int timingsafe_bcmp(const void *__b1, const void *__b2, size_t __len)
{
  return MEMORY[0x1E0C85970](__b1, __b2, __len);
}

char *__cdecl u_austrcpy(char *dst, const UChar *src)
{
  return (char *)MEMORY[0x1E0DE5950](dst, src);
}

int8_t u_charType(UChar32 c)
{
  return MEMORY[0x1E0DE5978](*(_QWORD *)&c);
}

void u_charsToUChars(const char *cs, UChar *us, int32_t length)
{
  MEMORY[0x1E0DE5980](cs, us, *(_QWORD *)&length);
}

const char *__cdecl u_errorName(UErrorCode code)
{
  return (const char *)MEMORY[0x1E0DE5988](*(_QWORD *)&code);
}

UBool u_hasBinaryProperty(UChar32 c, UProperty which)
{
  return MEMORY[0x1E0DE59E0](*(_QWORD *)&c, *(_QWORD *)&which);
}

UBool u_isdigit(UChar32 c)
{
  return MEMORY[0x1E0DE5A30](*(_QWORD *)&c);
}

UChar *__cdecl u_strcpy(UChar *dst, const UChar *src)
{
  return (UChar *)MEMORY[0x1E0DE5AE8](dst, src);
}

int32_t u_strlen(const UChar *s)
{
  return MEMORY[0x1E0DE5AF8](s);
}

UBlockCode ublock_getCode(UChar32 c)
{
  return MEMORY[0x1E0DE5C88](*(_QWORD *)&c);
}

uint64_t ubrk_close()
{
  return MEMORY[0x1E0DE5C98]();
}

uint64_t ubrk_getRuleStatus()
{
  return MEMORY[0x1E0DE5CC8]();
}

uint64_t ubrk_next()
{
  return MEMORY[0x1E0DE5CE0]();
}

uint64_t ubrk_open()
{
  return MEMORY[0x1E0DE5CE8]();
}

uint64_t ubrk_setUText()
{
  return MEMORY[0x1E0DE5D10]();
}

uint64_t ucal_add()
{
  return MEMORY[0x1E0DE5D18]();
}

uint64_t ucal_close()
{
  return MEMORY[0x1E0DE5D30]();
}

uint64_t ucal_get()
{
  return MEMORY[0x1E0DE5D38]();
}

uint64_t ucal_getAttribute()
{
  return MEMORY[0x1E0DE5D40]();
}

uint64_t ucal_getDSTSavings()
{
  return MEMORY[0x1E0DE5D50]();
}

uint64_t ucal_getFieldDifference()
{
  return MEMORY[0x1E0DE5D60]();
}

uint64_t ucal_getHostTimeZone()
{
  return MEMORY[0x1E0DE5D70]();
}

uint64_t ucal_getLimit()
{
  return MEMORY[0x1E0DE5D80]();
}

uint64_t ucal_getMillis()
{
  return MEMORY[0x1E0DE5D88]();
}

uint64_t ucal_inDaylightTime()
{
  return MEMORY[0x1E0DE5DC8]();
}

uint64_t ucal_open()
{
  return MEMORY[0x1E0DE5DD8]();
}

uint64_t ucal_openTimeZones()
{
  return MEMORY[0x1E0DE5DE8]();
}

uint64_t ucal_set()
{
  return MEMORY[0x1E0DE5DF8]();
}

uint64_t ucal_setDate()
{
  return MEMORY[0x1E0DE5E08]();
}

uint64_t ucal_setMillis()
{
  return MEMORY[0x1E0DE5E20]();
}

uint64_t ucnv_close()
{
  return MEMORY[0x1E0DE5E98]();
}

uint64_t ucnv_fromUChars()
{
  return MEMORY[0x1E0DE5EC0]();
}

uint64_t ucnv_getMaxCharSize()
{
  return MEMORY[0x1E0DE5F00]();
}

uint64_t ucnv_open()
{
  return MEMORY[0x1E0DE5F20]();
}

uint64_t ucnv_toUChars()
{
  return MEMORY[0x1E0DE5F60]();
}

uint64_t ucurr_forLocale()
{
  return MEMORY[0x1E0DE60A0]();
}

uint64_t ucurr_getDefaultFractionDigits()
{
  return MEMORY[0x1E0DE60A8]();
}

uint64_t ucurr_getName()
{
  return MEMORY[0x1E0DE60B0]();
}

uint64_t ucurr_getPluralName()
{
  return MEMORY[0x1E0DE60C0]();
}

uint64_t ucurr_isAvailable()
{
  return MEMORY[0x1E0DE60D0]();
}

uint64_t udat_close()
{
  return MEMORY[0x1E0DE60F8]();
}

uint64_t udat_format()
{
  return MEMORY[0x1E0DE6108]();
}

uint64_t udat_open()
{
  return MEMORY[0x1E0DE6140]();
}

uint64_t udatpg_close()
{
  return MEMORY[0x1E0DE61B0]();
}

uint64_t udatpg_getBestPattern()
{
  return MEMORY[0x1E0DE61C0]();
}

uint64_t udatpg_open()
{
  return MEMORY[0x1E0DE61E8]();
}

uint64_t uenum_close()
{
  return MEMORY[0x1E0DE6240]();
}

uint64_t uenum_next()
{
  return MEMORY[0x1E0DE6250]();
}

uint64_t uloc_addLikelySubtags()
{
  return MEMORY[0x1E0DE6388]();
}

uint64_t uloc_getDisplayCountry()
{
  return MEMORY[0x1E0DE63D0]();
}

uint64_t ulocdata_getMeasurementSystem()
{
  return MEMORY[0x1E0DE64A8]();
}

int unlink(const char *a1)
{
  return MEMORY[0x1E0C859B8](a1);
}

uint64_t unorm2_getDecomposition()
{
  return MEMORY[0x1E0DE64C0]();
}

uint64_t unorm2_getNFCInstance()
{
  return MEMORY[0x1E0DE64D0]();
}

uint64_t unum_close()
{
  return MEMORY[0x1E0DE6530]();
}

uint64_t unum_formatDoubleCurrency()
{
  return MEMORY[0x1E0DE6550]();
}

uint64_t unum_getTextAttribute()
{
  return MEMORY[0x1E0DE6590]();
}

uint64_t unum_open()
{
  return MEMORY[0x1E0DE6598]();
}

uint64_t unum_setAttribute()
{
  return MEMORY[0x1E0DE65C8]();
}

uint64_t unumf_close()
{
  return MEMORY[0x1E0DE65F8]();
}

uint64_t unumf_closeResult()
{
  return MEMORY[0x1E0DE6600]();
}

uint64_t unumf_formatDouble()
{
  return MEMORY[0x1E0DE6610]();
}

uint64_t unumf_openForSkeletonAndLocale()
{
  return MEMORY[0x1E0DE6620]();
}

uint64_t unumf_openResult()
{
  return MEMORY[0x1E0DE6628]();
}

uint64_t unumf_resultToString()
{
  return MEMORY[0x1E0DE6638]();
}

uint64_t uplrules_close()
{
  return MEMORY[0x1E0DE66B8]();
}

uint64_t uplrules_open()
{
  return MEMORY[0x1E0DE66C8]();
}

uint64_t uplrules_select()
{
  return MEMORY[0x1E0DE66D8]();
}

UText *__cdecl utext_close(UText *ut)
{
  return (UText *)MEMORY[0x1E0DE6A50](ut);
}

UText *__cdecl utext_openUTF8(UText *ut, const char *s, int64_t length, UErrorCode *status)
{
  return (UText *)MEMORY[0x1E0DE6A98](ut, s, length, status);
}

int vasprintf(char **a1, const char *a2, va_list a3)
{
  return MEMORY[0x1E0C85A58](a1, a2, a3);
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x1E0C85B98](__str, __size, __format, a4);
}

xmlChar *__cdecl xmlEncodeSpecialChars(const xmlDoc *doc, const xmlChar *input)
{
  return (xmlChar *)MEMORY[0x1E0DE8D28](doc, input);
}

void xmlFreeDoc(xmlDocPtr cur)
{
  MEMORY[0x1E0DE8D38](cur);
}

void xmlFreeTextReader(xmlTextReaderPtr reader)
{
  MEMORY[0x1E0DE8D58](reader);
}

void xmlFreeTextWriter(xmlTextWriterPtr writer)
{
  MEMORY[0x1E0DE8D60](writer);
}

void xmlFreeValidCtxt(xmlValidCtxtPtr a1)
{
  MEMORY[0x1E0DE8D68](a1);
}

uint64_t xmlGetLineNo(const xmlNode *node)
{
  return MEMORY[0x1E0DE8D90](node);
}

xmlDtdPtr xmlIOParseDTD(xmlSAXHandlerPtr sax, xmlParserInputBufferPtr input, xmlCharEncoding enc)
{
  return (xmlDtdPtr)MEMORY[0x1E0DE8DB8](sax, input, *(_QWORD *)&enc);
}

xmlTextWriterPtr xmlNewTextWriterFilename(const char *uri, int compression)
{
  return (xmlTextWriterPtr)MEMORY[0x1E0DE8E40](uri, *(_QWORD *)&compression);
}

xmlValidCtxtPtr xmlNewValidCtxt(void)
{
  return (xmlValidCtxtPtr)MEMORY[0x1E0DE8E50]();
}

xmlDocPtr xmlParseFile(const char *filename)
{
  return (xmlDocPtr)MEMORY[0x1E0DE8EB8](filename);
}

xmlDocPtr xmlParseMemory(const char *buffer, int size)
{
  return (xmlDocPtr)MEMORY[0x1E0DE8EC8](buffer, *(_QWORD *)&size);
}

xmlParserInputBufferPtr xmlParserInputBufferCreateMem(const char *mem, int size, xmlCharEncoding enc)
{
  return (xmlParserInputBufferPtr)MEMORY[0x1E0DE8ED0](mem, *(_QWORD *)&size, *(_QWORD *)&enc);
}

xmlTextReaderPtr xmlReaderForFile(const char *filename, const char *encoding, int options)
{
  return (xmlTextReaderPtr)MEMORY[0x1E0DE8EE8](filename, encoding, *(_QWORD *)&options);
}

xmlTextReaderPtr xmlReaderForMemory(const char *buffer, int size, const char *URL, const char *encoding, int options)
{
  return (xmlTextReaderPtr)MEMORY[0x1E0DE8EF8](buffer, *(_QWORD *)&size, URL, encoding, *(_QWORD *)&options);
}

void xmlSetStructuredErrorFunc(void *ctx, xmlStructuredErrorFunc handler)
{
  MEMORY[0x1E0DE8FE0](ctx, handler);
}

const xmlChar *__cdecl xmlTextReaderConstBaseUri(xmlTextReaderPtr reader)
{
  return (const xmlChar *)MEMORY[0x1E0DE9030](reader);
}

const xmlChar *__cdecl xmlTextReaderConstName(xmlTextReaderPtr reader)
{
  return (const xmlChar *)MEMORY[0x1E0DE9040](reader);
}

const xmlChar *__cdecl xmlTextReaderConstValue(xmlTextReaderPtr reader)
{
  return (const xmlChar *)MEMORY[0x1E0DE9048](reader);
}

xmlNodePtr xmlTextReaderCurrentNode(xmlTextReaderPtr reader)
{
  return (xmlNodePtr)MEMORY[0x1E0DE9050](reader);
}

xmlChar *__cdecl xmlTextReaderGetAttribute(xmlTextReaderPtr reader, const xmlChar *name)
{
  return (xmlChar *)MEMORY[0x1E0DE9058](reader, name);
}

int xmlTextReaderIsEmptyElement(xmlTextReaderPtr reader)
{
  return MEMORY[0x1E0DE9068](reader);
}

xmlChar *__cdecl xmlTextReaderLookupNamespace(xmlTextReaderPtr reader, const xmlChar *prefix)
{
  return (xmlChar *)MEMORY[0x1E0DE9070](reader, prefix);
}

int xmlTextReaderMoveToAttributeNo(xmlTextReaderPtr reader, int no)
{
  return MEMORY[0x1E0DE9078](reader, *(_QWORD *)&no);
}

int xmlTextReaderMoveToFirstAttribute(xmlTextReaderPtr reader)
{
  return MEMORY[0x1E0DE9080](reader);
}

int xmlTextReaderMoveToNextAttribute(xmlTextReaderPtr reader)
{
  return MEMORY[0x1E0DE9088](reader);
}

int xmlTextReaderNodeType(xmlTextReaderPtr reader)
{
  return MEMORY[0x1E0DE9098](reader);
}

int xmlTextReaderRead(xmlTextReaderPtr reader)
{
  return MEMORY[0x1E0DE90A0](reader);
}

xmlChar *__cdecl xmlTextReaderReadInnerXml(xmlTextReaderPtr reader)
{
  return (xmlChar *)MEMORY[0x1E0DE90A8](reader);
}

xmlChar *__cdecl xmlTextReaderReadOuterXml(xmlTextReaderPtr reader)
{
  return (xmlChar *)MEMORY[0x1E0DE90B0](reader);
}

int xmlTextWriterEndDocument(xmlTextWriterPtr writer)
{
  return MEMORY[0x1E0DE90C8](writer);
}

int xmlTextWriterEndElement(xmlTextWriterPtr writer)
{
  return MEMORY[0x1E0DE90D0](writer);
}

int xmlTextWriterFlush(xmlTextWriterPtr writer)
{
  return MEMORY[0x1E0DE90D8](writer);
}

int xmlTextWriterFullEndElement(xmlTextWriterPtr writer)
{
  return MEMORY[0x1E0DE90E0](writer);
}

int xmlTextWriterSetIndent(xmlTextWriterPtr writer, int indent)
{
  return MEMORY[0x1E0DE90E8](writer, *(_QWORD *)&indent);
}

int xmlTextWriterSetIndentString(xmlTextWriterPtr writer, const xmlChar *str)
{
  return MEMORY[0x1E0DE90F0](writer, str);
}

int xmlTextWriterStartDocument(xmlTextWriterPtr writer, const char *version, const char *encoding, const char *standalone)
{
  return MEMORY[0x1E0DE90F8](writer, version, encoding, standalone);
}

int xmlTextWriterStartElement(xmlTextWriterPtr writer, const xmlChar *name)
{
  return MEMORY[0x1E0DE9100](writer, name);
}

int xmlTextWriterWriteAttribute(xmlTextWriterPtr writer, const xmlChar *name, const xmlChar *content)
{
  return MEMORY[0x1E0DE9108](writer, name, content);
}

int xmlTextWriterWriteRaw(xmlTextWriterPtr writer, const xmlChar *content)
{
  return MEMORY[0x1E0DE9128](writer, content);
}

int xmlValidateDtd(xmlValidCtxtPtr ctxt, xmlDocPtr doc, xmlDtdPtr dtd)
{
  return MEMORY[0x1E0DE9148](ctxt, doc, dtd);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x1E0C86208](keys, values, count);
}

void xpc_dictionary_set_BOOL(xpc_object_t xdict, const char *key, BOOL value)
{
  MEMORY[0x1E0C86310](xdict, key, value);
}

void xpc_dictionary_set_double(xpc_object_t xdict, const char *key, double value)
{
  MEMORY[0x1E0C86348](xdict, key, value);
}

void xpc_dictionary_set_string(xpc_object_t xdict, const char *key, const char *string)
{
  MEMORY[0x1E0C86390](xdict, key, string);
}

