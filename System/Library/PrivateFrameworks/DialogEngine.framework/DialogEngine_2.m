uint64_t siri::dialogengine::DialogMetadata::DisplayValue::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *siri::dialogengine::DialogMetadata::DisplayValue::default_instance(siri::dialogengine::DialogMetadata::DisplayValue *this)
{
  if (atomic_load(scc_info_DisplayValue_DialogMetadata_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_DisplayValue_DialogMetadata_2eproto);
  return &siri::dialogengine::DialogMetadata::_DisplayValue_default_instance_;
}

void siri::dialogengine::DialogMetadata::DisplayValue::CopyFrom(siri::dialogengine::DialogMetadata::DisplayValue *this, const siri::dialogengine::DialogMetadata::DisplayValue *a2)
{
  if (a2 != this)
  {
    siri::dialogengine::DialogMetadata::DisplayValue::Clear(this);
    siri::dialogengine::DialogMetadata::DisplayValue::MergeFrom(this, a2);
  }
}

__n128 siri::dialogengine::DialogMetadata::DisplayValue::InternalSwap(siri::dialogengine::DialogMetadata::DisplayValue *this, siri::dialogengine::DialogMetadata::DisplayValue *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  __n128 result;
  std::string **v14;
  std::string *v15;
  uint64_t *v16;
  std::string **v17;
  std::string *v18;
  std::string::size_type v19;
  std::string::size_type v20;
  unint64_t v21;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v21;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
      goto LABEL_16;
    }
LABEL_5:
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 1) != 0)
    {
LABEL_6:
      v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
      v9 = *(_QWORD *)(v8 + 16);
      v10 = *(_OWORD *)v8;
      v11 = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v8 = *(_OWORD *)v7;
      *(_QWORD *)(v8 + 16) = v11;
      *(_OWORD *)v7 = v10;
      *(_QWORD *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_16:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if ((v6 & 1) != 0)
    goto LABEL_5;
LABEL_8:
  v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((siri::dialogengine::DialogMetadata::DisplayValue *)((char *)this + 24), (siri::dialogengine::DialogMetadata::DisplayValue *)((char *)a2 + 24));
  v16 = (uint64_t *)*((_QWORD *)this + 6);
  v14 = (std::string **)((char *)this + 48);
  v15 = (std::string *)v16;
  v17 = (std::string **)((char *)a2 + 48);
  if (v16 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v17 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      return result;
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v14, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v18 = *v17;
  if (*v17 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v17, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v18 = *v17;
  }
  v19 = v15->__r_.__value_.__r.__words[2];
  result = *(__n128 *)&v15->__r_.__value_.__l.__data_;
  v20 = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15->__r_.__value_.__l.__data_ = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v15->__r_.__value_.__r.__words[2] = v20;
  *(__n128 *)&v18->__r_.__value_.__l.__data_ = result;
  v18->__r_.__value_.__r.__words[2] = v19;
  return result;
}

siri::dialogengine::DialogMetadata::SemanticValue *siri::dialogengine::DialogMetadata::SemanticValue::SemanticValue(siri::dialogengine::DialogMetadata::SemanticValue *this, const siri::dialogengine::DialogMetadata::SemanticValue *a2)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t *v8;

  *(_QWORD *)this = &off_1E792A7C0;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 11) = 0;
  *(_QWORD *)((char *)this + 28) = 0;
  *(_QWORD *)((char *)this + 36) = 0;
  *(_QWORD *)((char *)this + 20) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::DialogMetadata::DisplayValue>::TypeHandler>((int **)this + 3, (uint64_t)a2 + 24);
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v5 & 0xFFFFFFFFFFFFFFFELL);
  *((_QWORD *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 1) != 0)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 6);
    if (v7 != &google::protobuf::internal::fixed_address_empty_string)
    {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 6, (uint64_t)v7);
      v6 = *((_DWORD *)a2 + 4);
    }
  }
  *((_QWORD *)this + 7) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 2) != 0)
  {
    v8 = (uint64_t *)*((_QWORD *)a2 + 7);
    if (v8 != &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 7, (uint64_t)v8);
  }
  return this;
}

void sub_1BF862AE4(_Unwind_Exception *a1)
{
  uint64_t *v1;
  google::protobuf::internal::RepeatedPtrFieldBase *v2;

  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogMetadata::SemanticValue::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *siri::dialogengine::DialogMetadata::SemanticValue::default_instance(siri::dialogengine::DialogMetadata::SemanticValue *this)
{
  if (atomic_load(scc_info_SemanticValue_DialogMetadata_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SemanticValue_DialogMetadata_2eproto);
  return &siri::dialogengine::DialogMetadata::_SemanticValue_default_instance_;
}

void siri::dialogengine::DialogMetadata::SemanticValue::CopyFrom(siri::dialogengine::DialogMetadata::SemanticValue *this, const siri::dialogengine::DialogMetadata::SemanticValue *a2)
{
  if (a2 != this)
  {
    siri::dialogengine::DialogMetadata::SemanticValue::Clear(this);
    siri::dialogengine::DialogMetadata::SemanticValue::MergeFrom(this, a2);
  }
}

__n128 siri::dialogengine::DialogMetadata::SemanticValue::InternalSwap(siri::dialogengine::DialogMetadata::SemanticValue *this, siri::dialogengine::DialogMetadata::SemanticValue *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  __n128 result;
  uint64_t *v14;
  uint64_t **v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  std::string **v19;
  std::string *v20;
  uint64_t *v21;
  std::string **v22;
  std::string *v23;
  std::string::size_type v24;
  std::string::size_type v25;
  unint64_t v26;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v26;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
      goto LABEL_22;
    }
LABEL_5:
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((v4 & 1) != 0)
    {
LABEL_6:
      v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
      v9 = *(_QWORD *)(v8 + 16);
      v10 = *(_OWORD *)v8;
      v11 = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v8 = *(_OWORD *)v7;
      *(_QWORD *)(v8 + 16) = v11;
      *(_OWORD *)v7 = v10;
      *(_QWORD *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_22:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if ((v6 & 1) != 0)
    goto LABEL_5;
LABEL_8:
  v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((siri::dialogengine::DialogMetadata::SemanticValue *)((char *)this + 24), (siri::dialogengine::DialogMetadata::SemanticValue *)((char *)a2 + 24));
  v14 = (uint64_t *)*((_QWORD *)this + 6);
  v15 = (uint64_t **)((char *)a2 + 48);
  if (v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v15 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_14;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 6, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v14 = (uint64_t *)*((_QWORD *)this + 6);
  }
  v16 = *v15;
  if (*v15 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 6, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v16 = *v15;
  }
  v17 = v14[2];
  result = *(__n128 *)v14;
  v18 = v16[2];
  *(_OWORD *)v14 = *(_OWORD *)v16;
  v14[2] = v18;
  *(__n128 *)v16 = result;
  v16[2] = v17;
LABEL_14:
  v21 = (uint64_t *)*((_QWORD *)this + 7);
  v19 = (std::string **)((char *)this + 56);
  v20 = (std::string *)v21;
  v22 = (std::string **)((char *)a2 + 56);
  if (v21 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v22 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      return result;
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v19, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v20 = *v19;
  }
  v23 = *v22;
  if (*v22 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v22, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v23 = *v22;
  }
  v24 = v20->__r_.__value_.__r.__words[2];
  result = *(__n128 *)&v20->__r_.__value_.__l.__data_;
  v25 = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20->__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v20->__r_.__value_.__r.__words[2] = v25;
  *(__n128 *)&v23->__r_.__value_.__l.__data_ = result;
  v23->__r_.__value_.__r.__words[2] = v24;
  return result;
}

siri::dialogengine::DialogMetadata::File *siri::dialogengine::DialogMetadata::File::File(siri::dialogengine::DialogMetadata::File *this, const siri::dialogengine::DialogMetadata::File *a2)
{
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E792A850;
  *((_QWORD *)this + 1) = 0;
  v4 = (uint64_t *)((char *)this + 8);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 11) = 0;
  *(_QWORD *)((char *)this + 28) = 0;
  *(_QWORD *)((char *)this + 36) = 0;
  *(_QWORD *)((char *)this + 20) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<siri::dialogengine::DialogMetadata::SemanticValue>::TypeHandler>((int **)this + 3, (uint64_t)a2 + 24);
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v5 & 0xFFFFFFFFFFFFFFFELL);
  *((_BYTE *)this + 48) = *((_BYTE *)a2 + 48);
  return this;
}

void sub_1BF862DD0(_Unwind_Exception *a1)
{
  uint64_t *v1;
  google::protobuf::internal::RepeatedPtrFieldBase *v2;

  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogMetadata::File::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void *siri::dialogengine::DialogMetadata::File::default_instance(siri::dialogengine::DialogMetadata::File *this)
{
  if (atomic_load(scc_info_File_DialogMetadata_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_File_DialogMetadata_2eproto);
  return &siri::dialogengine::DialogMetadata::_File_default_instance_;
}

void siri::dialogengine::DialogMetadata::File::CopyFrom(siri::dialogengine::DialogMetadata::File *this, const siri::dialogengine::DialogMetadata::File *a2)
{
  if (a2 != this)
  {
    siri::dialogengine::DialogMetadata::File::Clear(this);
    siri::dialogengine::DialogMetadata::File::MergeFrom(this, a2);
  }
}

void siri::dialogengine::DialogMetadata::File::InternalSwap(siri::dialogengine::DialogMetadata::File *this, siri::dialogengine::DialogMetadata::File *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  char v13;
  unint64_t v14;

  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v7 = v14;
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
LABEL_10:
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
      goto LABEL_7;
    }
  }
  else if ((v6 & 1) == 0)
  {
    goto LABEL_8;
  }
  v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
  if ((v4 & 1) == 0)
    goto LABEL_10;
LABEL_6:
  v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
  v9 = *(_QWORD *)(v8 + 16);
  v10 = *(_OWORD *)v8;
  v11 = *(_QWORD *)(v7 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v7;
  *(_QWORD *)(v8 + 16) = v11;
  *(_OWORD *)v7 = v10;
  *(_QWORD *)(v7 + 16) = v9;
LABEL_8:
  v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((siri::dialogengine::DialogMetadata::File *)((char *)this + 24), (siri::dialogengine::DialogMetadata::File *)((char *)a2 + 24));
  v13 = *((_BYTE *)this + 48);
  *((_BYTE *)this + 48) = *((_BYTE *)a2 + 48);
  *((_BYTE *)a2 + 48) = v13;
}

void siri::dialogengine::GetICULocalizedPattern(char **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  const unsigned __int16 *BestPattern;
  int v6;
  int v7;
  void *v8[2];
  char v9;
  void *v10[2];
  char v11;
  std::string v12;
  std::string __p;
  uint64_t v14;
  UErrorCode code;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  code = U_ZERO_ERROR;
  udatpg_open();
  siri::dialogengine::StringToUChar(&v14);
  v4 = v14;
  BestPattern = (const unsigned __int16 *)udatpg_getBestPattern();
  udatpg_close();
  siri::dialogengine::UCharToString(BestPattern, (_QWORD *)a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, "buddhist");
  v6 = siri::dialogengine::StringContains(a1, (char *)&__p);
  v7 = v6;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v7)
      goto LABEL_13;
  }
  else if (!v6)
  {
    goto LABEL_13;
  }
  std::string::basic_string[abi:ne180100]<0>(v10, "G");
  std::string::basic_string[abi:ne180100]<0>(v8, "");
  siri::dialogengine::StringReplace(a2, (char *)v10, (uint64_t)v8, 0, &v12);
  siri::dialogengine::StringTrimRight(" \t\n\r", &v12, &__p);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(std::string *)a2 = __p;
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (v9 < 0)
    operator delete(v8[0]);
  if (v11 < 0)
    operator delete(v10[0]);
LABEL_13:
  if (v4)
    MEMORY[0x1C3B8D878](v4, 0x1000C80BDFB0063);
}

void sub_1BF8631A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;
  uint64_t v28;

  if (a27 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v27 + 23) < 0)
    operator delete(*(void **)v27);
  if (v28)
    MEMORY[0x1C3B8D878](v28, 0x1000C80BDFB0063);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::StringToUChar@<X0>(uint64_t *a1@<X8>)
{
  UChar *v2;
  uint64_t v3;

  v2 = (UChar *)operator new[]();
  u_strcpy(v2, TableStruct_Idiom_2eproto::offsets);
  ucnv_open();
  ucnv_getMaxCharSize();
  v3 = operator new[]();
  ucnv_toUChars();
  ucnv_close();
  *a1 = v3;
  return MEMORY[0x1C3B8D878](v2, 0x1000C80BDFB0063);
}

void sub_1BF863388(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D878](v1, 0x1000C80BDFB0063);
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::UCharToString@<X0>(const unsigned __int16 *a1@<X1>, _QWORD *a2@<X8>)
{
  int v3;
  int MaxCharSize;
  char *v7;
  char *v8;
  __int128 v9;
  uint64_t v10;
  int v11;

  v3 = (int)a1;
  v11 = 0;
  ucnv_open();
  MaxCharSize = ucnv_getMaxCharSize();
  v7 = (char *)malloc_type_malloc((v3 + 10) * MaxCharSize, 0xA57967BFuLL);
  if (v7)
  {
    v8 = v7;
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    ucnv_fromUChars();
    if (v11 <= 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&v9, v8);
      *(_OWORD *)a2 = v9;
      a2[2] = v10;
    }
    free(v8);
    return (_QWORD *)ucnv_close();
  }
  else
  {
    ucnv_close();
    return std::string::basic_string[abi:ne180100]<0>(a2, "");
  }
}

void sub_1BF8634D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetLikelyLanguageForCountryCode(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  __int128 v6;
  void *__p[2];
  char v8;
  _QWORD v9[3];
  int v10;
  void *v11[2];
  std::string::size_type v12;
  std::string v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  siri::dialogengine::StringToLower(a1, (uint64_t)&v13);
  v4 = std::string::insert(&v13, 0, "und_");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v12 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)v11 = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  v10 = 0;
  uloc_addLikelySubtags();
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&v13);
  siri::dialogengine::StringSplit((unsigned __int8 *)__p, "_", v9);
  if (v8 < 0)
    operator delete(__p[0]);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9[1] - v9[0]) >> 3) >= 2)
  {
    if (*(char *)(v9[0] + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v9[0], *(_QWORD *)(v9[0] + 8));
    }
    else
    {
      v6 = *(_OWORD *)v9[0];
      a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v9[0] + 16);
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v6;
    }
    __p[0] = v9;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
  else
  {
    __p[0] = v9;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    if (*(char *)(a1 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
    }
  }
  if (SHIBYTE(v12) < 0)
    operator delete(v11[0]);
}

void sub_1BF8636C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  a10 = &a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void siri::dialogengine::CountryCodeToString(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  std::string::size_type size;
  std::string *v6;
  std::string::size_type v7;
  char v8;
  const unsigned __int16 *DisplayCountry;
  std::string *v10;
  uint64_t *v11;
  std::string v12;
  std::string v13;
  _QWORD v14[2];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v13 = *(std::string *)a2;
  size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v13.__r_.__value_.__l.__size_;
  if (size == 2)
  {
    siri::dialogengine::StringToUpper((uint64_t)&v13, (uint64_t)&v12);
    v6 = std::string::insert(&v12, 0, "_");
    v7 = v6->__r_.__value_.__r.__words[0];
    v14[0] = v6->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v14 + 7) = *(std::string::size_type *)((char *)&v6->__r_.__value_.__r.__words[1] + 7);
    v8 = HIBYTE(v6->__r_.__value_.__r.__words[2]);
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
    v13.__r_.__value_.__r.__words[0] = v7;
    v13.__r_.__value_.__l.__size_ = v14[0];
    *(std::string::size_type *)((char *)&v13.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v14 + 7);
    *((_BYTE *)&v13.__r_.__value_.__s + 23) = v8;
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
  }
  LODWORD(v12.__r_.__value_.__l.__data_) = 0;
  DisplayCountry = (const unsigned __int16 *)uloc_getDisplayCountry();
  if (SLODWORD(v12.__r_.__value_.__l.__data_) <= 0 && (_DWORD)DisplayCountry)
  {
    siri::dialogengine::UCharToString(DisplayCountry, a3);
  }
  else
  {
    v10 = &v13;
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v10 = (std::string *)v13.__r_.__value_.__r.__words[0];
    if (*((char *)a1 + 23) >= 0)
      v11 = a1;
    else
      v11 = (uint64_t *)*a1;
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Failed to generate country name for code '%s' and locale '%s'", (const char *)DisplayCountry, v10, v11);
    std::string::basic_string[abi:ne180100]<0>(a3, "");
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
}

void sub_1BF863954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::GetICUMinuteOfHour(siri::dialogengine *this, const siri::dialogengine::TimeStamp *a2)
{
  if (siri::dialogengine::GetICUCalendar((uint64_t *)this))
    return siri::dialogengine::GetICUField();
  else
    return 0;
}

void sub_1BF8639F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::GetICUCalendar(uint64_t *a1)
{
  uint64_t v1;
  UChar *v3;
  const char *v4;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  std::string v10;
  std::string v11;
  void *__p[2];
  std::string::size_type v13;
  UChar *s;
  std::string v15;
  int v16;

  if (*a1 == 0x7FFFFFFFFFFFFFFFLL)
    return 0;
  v16 = 0;
  siri::dialogengine::ValidateIANATimeZone(&v15, (uint64_t)(a1 + 1));
  siri::dialogengine::StringToUChar((uint64_t *)&s);
  v3 = s;
  u_strlen(s);
  v1 = ucal_open();
  if (v16 < 1)
  {
    ucal_setMillis();
    if (v16 < 1)
      goto LABEL_6;
    std::to_string(&v10, *a1);
    v6 = std::string::insert(&v10, 0, "Could not set UCalendar to milliseconds value '");
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v11.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    v8 = std::string::append(&v11, "'");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v13 = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 3u);
    if (SHIBYTE(v13) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v11.__r_.__value_.__l.__data_);
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v10.__r_.__value_.__l.__data_);
  }
  else
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Could not create UCalendar", v4);
  }
  ucal_close();
  v1 = 0;
LABEL_6:
  if (v3)
    MEMORY[0x1C3B8D878](v3, 0x1000C80BDFB0063);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  return v1;
}

void sub_1BF863BD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;
  uint64_t v29;

  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  if (v28)
    MEMORY[0x1C3B8D878](v28, 0x1000C80BDFB0063);
  if (*(char *)(v29 - 57) < 0)
    operator delete(*(void **)(v29 - 80));
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::GetICUField()
{
  uint64_t v0;
  int v2;

  v2 = 0;
  v0 = ucal_get();
  ucal_close();
  return v0;
}

void sub_1BF863D20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ValidateIANATimeZone(std::string *a1, uint64_t a2)
{
  unsigned __int8 v4;
  unsigned __int8 v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  std::string *v9;
  __int128 v10;
  _QWORD *v11;
  std::string v12;
  void *__p[2];
  std::string::size_type v14;
  char v15;

  if ((v4 & 1) == 0
  {
    qword_1EF581400 = 0;
    qword_1EF5813F8 = 0;
    siri::dialogengine::ValidateIANATimeZone(std::string const&)::timeZones = (uint64_t)&qword_1EF5813F8;
    __cxa_atexit((void (*)(void *))std::set<std::string>::~set[abi:ne180100], &siri::dialogengine::ValidateIANATimeZone(std::string const&)::timeZones, &dword_1BF794000);
  }
  if ((v5 & 1) == 0
  {
    v11 = (_QWORD *)operator new();
    *v11 = 0;
    siri::dialogengine::ValidateIANATimeZone(std::string const&)::flag = (uint64_t)v11;
  }
  v6 = atomic_load((unint64_t *)siri::dialogengine::ValidateIANATimeZone(std::string const&)::flag);
  if (v6 != -1)
  {
    __p[0] = &v15;
    v12.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    std::__call_once((std::once_flag::_State_type *)siri::dialogengine::ValidateIANATimeZone(std::string const&)::flag, &v12, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::ValidateIANATimeZone(std::string const&)::$_0 &&>>);
  }
  v7 = (uint64_t *)std::__tree<std::string>::find<std::string>((uint64_t)&siri::dialogengine::ValidateIANATimeZone(std::string const&)::timeZones, (const void **)a2);
  v8 = *(unsigned __int8 *)(a2 + 23);
  if (v7 == &qword_1EF5813F8)
  {
    if ((v8 & 0x80u) != 0)
      v8 = *(_QWORD *)(a2 + 8);
    if (v8)
    {
      std::operator+<char>();
      v9 = std::string::append(&v12, "' is not valid; defaulting to UTC...");
      v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v14 = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 1u);
      if (SHIBYTE(v14) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v12.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(a1, "UTC");
  }
  else if ((v8 & 0x80) != 0)
  {
    std::string::__init_copy_ctor_external(a1, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a1->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
}

void sub_1BF863F38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  _Unwind_Resume(a1);
}

uint64_t std::set<std::string>::~set[abi:ne180100](uint64_t a1)
{
  std::__tree<std::string>::destroy(a1, *(char **)(a1 + 8));
  return a1;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::ValidateIANATimeZone(std::string const&)::$_0 &&>>()
{
  char *v0;
  char *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *__p[2];
  char v6;
  int v7;
  int v8;

  v8 = 0;
  ucal_openTimeZones();
  v7 = 0;
  v3 = 0;
  v4 = 0;
  v2 = &v3;
  while (1)
  {
    v0 = (char *)uenum_next();
    if (!v0)
      break;
    std::string::basic_string[abi:ne180100]<0>(__p, v0);
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(&v2, (const void **)__p, (uint64_t)__p);
    if (v6 < 0)
      operator delete(__p[0]);
  }
  uenum_close();
  std::__tree<std::string>::destroy((uint64_t)&siri::dialogengine::ValidateIANATimeZone(std::string const&)::timeZones, (char *)qword_1EF5813F8);
  v1 = (char *)v3;
  siri::dialogengine::ValidateIANATimeZone(std::string const&)::timeZones = (uint64_t)v2;
  qword_1EF5813F8 = v3;
  qword_1EF581400 = v4;
  if (v4)
  {
    *(_QWORD *)(v3 + 16) = &qword_1EF5813F8;
    v2 = &v3;
    v3 = 0;
    v4 = 0;
    v1 = 0;
  }
  else
  {
    siri::dialogengine::ValidateIANATimeZone(std::string const&)::timeZones = (uint64_t)&qword_1EF5813F8;
  }
  std::__tree<std::string>::destroy((uint64_t)&v2, v1);
}

void sub_1BF864098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, char *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  std::__tree<std::string>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::GetICUHour12(siri::dialogengine *this, const siri::dialogengine::TimeStamp *a2)
{
  uint64_t result;

  if (!siri::dialogengine::GetICUCalendar((uint64_t *)this))
    return 0;
  LODWORD(result) = siri::dialogengine::GetICUField();
  if ((_DWORD)result)
    return result;
  else
    return 12;
}

void sub_1BF86413C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::GetICUHour24(siri::dialogengine *this, const siri::dialogengine::TimeStamp *a2)
{
  if (siri::dialogengine::GetICUCalendar((uint64_t *)this))
    return siri::dialogengine::GetICUField();
  else
    return 0;
}

void sub_1BF8641B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::GetICUDayOfMonth(siri::dialogengine *this, const siri::dialogengine::TimeStamp *a2)
{
  if (siri::dialogengine::GetICUCalendar((uint64_t *)this))
    return siri::dialogengine::GetICUField();
  else
    return 0;
}

void sub_1BF864234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::GetICUWeekOfMonth(siri::dialogengine *this, const siri::dialogengine::TimeStamp *a2)
{
  if (siri::dialogengine::GetICUCalendar((uint64_t *)this))
    return siri::dialogengine::GetICUField();
  else
    return 0;
}

void sub_1BF8642B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::GetICUWeekOfYear(siri::dialogengine *this, const siri::dialogengine::TimeStamp *a2)
{
  if (siri::dialogengine::GetICUCalendar((uint64_t *)this))
    return siri::dialogengine::GetICUField();
  else
    return 0;
}

void sub_1BF86432C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::GetICUMonth(siri::dialogengine *this, const siri::dialogengine::TimeStamp *a2)
{
  if (siri::dialogengine::GetICUCalendar((uint64_t *)this))
    return siri::dialogengine::GetICUField() + 1;
  else
    return 0;
}

void sub_1BF8643AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::GetICUMinutes(siri::dialogengine *this, const siri::dialogengine::TimeStamp *a2)
{
  if (siri::dialogengine::GetICUCalendar((uint64_t *)this))
    return siri::dialogengine::GetICUField();
  else
    return 0;
}

void sub_1BF864428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::GetICUYear(siri::dialogengine *this, const siri::dialogengine::TimeStamp *a2)
{
  if (siri::dialogengine::GetICUCalendar((uint64_t *)this))
    return siri::dialogengine::GetICUField();
  else
    return 0;
}

void sub_1BF8644A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetICUDayName(_QWORD *a1@<X0>, char **a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  void *v8[2];
  char v9;
  std::string __p;
  void *v11;
  char v12;

  std::string::basic_string[abi:ne180100]<0>(v8, "EEEE");
  siri::dialogengine::GetSkeletonForFormatOption(&__p, a3, (uint64_t)v8);
  siri::dialogengine::GetICULocalizedPattern(a2, (uint64_t)&v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v9 < 0)
    operator delete(v8[0]);
  siri::dialogengine::GetICUFormattedDateTimeString(a4, a1);
  if (v12 < 0)
    operator delete(v11);
}

void sub_1BF86456C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetSkeletonForFormatOption(std::string *this, uint64_t *a2, uint64_t a3)
{
  int v5;
  std::string *v6;
  std::string::size_type size;
  int v10;
  uint64_t *v11;
  int v13;
  int data;
  int v16;
  int v18;
  int v20;
  uint64_t v22;
  uint64_t v24;
  const char *v26;
  uint64_t v27;
  uint64_t v29;
  int v32;
  int v33;
  BOOL v34;
  _BYTE *v35;
  int v36;
  int v37;
  const char *v38;
  const char *v39;
  std::string *v42;
  __int128 v43;
  std::string v44;
  std::string v45;

  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    *this = *(std::string *)a3;
  v5 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v5 != 4)
    {
      v6 = this;
      if (v5 != 5)
      {
        if (v5 != 6)
          return;
        if (LODWORD(this->__r_.__value_.__l.__data_) != 1296911737
          || WORD2(this->__r_.__value_.__r.__words[0]) != 25677)
        {
          return;
        }
        goto LABEL_22;
      }
      goto LABEL_48;
    }
    if (LODWORD(this->__r_.__value_.__l.__data_) != 1296911693)
    {
      if (LODWORD(this->__r_.__value_.__l.__data_) != 1162167621)
        return;
LABEL_62:
      if (*((char *)a2 + 23) < 0)
      {
        v27 = a2[1];
        if (v27 != 4)
        {
          if (v27 != 5)
          {
            if (v27 != 6)
              return;
            if (*(_DWORD *)*a2 != 1768187245 || *(_WORD *)(*a2 + 4) != 28021)
              return;
            goto LABEL_97;
          }
          a2 = (uint64_t *)*a2;
LABEL_148:
          if (*(_DWORD *)a2 != 1919903859 || *((_BYTE *)a2 + 4) != 116)
            return;
          v26 = "EEEEE";
          goto LABEL_171;
        }
        if (*(_DWORD *)*a2 == 1819047270)
        {
LABEL_159:
          v26 = "EEEE";
          goto LABEL_171;
        }
        if (*(_DWORD *)*a2 != 1735290732)
          return;
      }
      else
      {
        v20 = *((unsigned __int8 *)a2 + 23);
        if (v20 != 4)
        {
          if (v20 != 5)
          {
            if (v20 != 6)
              return;
            if (*(_DWORD *)a2 != 1768187245 || *((_WORD *)a2 + 2) != 28021)
              return;
LABEL_97:
            v26 = "EEEEEE";
            goto LABEL_171;
          }
          goto LABEL_148;
        }
        if (*(_DWORD *)a2 != 1735290732)
        {
          if (*(_DWORD *)a2 != 1819047270)
            return;
          goto LABEL_159;
        }
      }
      v26 = "E..EEE";
      goto LABEL_171;
    }
LABEL_37:
    if (*((char *)a2 + 23) < 0)
    {
      v29 = a2[1];
      if (v29 != 4)
      {
        if (v29 != 5)
        {
          if (v29 != 6)
            return;
          if (*(_DWORD *)*a2 != 1768187245 || *(_WORD *)(*a2 + 4) != 28021)
            return;
          goto LABEL_162;
        }
        a2 = (uint64_t *)*a2;
        goto LABEL_164;
      }
      if (*(_DWORD *)*a2 == 1819047270)
      {
LABEL_170:
        v26 = "MMMM";
        goto LABEL_171;
      }
      if (*(_DWORD *)*a2 != 1735290732)
        return;
    }
    else
    {
      v13 = *((unsigned __int8 *)a2 + 23);
      if (v13 != 4)
      {
        if (v13 != 5)
        {
          if (v13 != 6)
            return;
          if (*(_DWORD *)a2 != 1768187245 || *((_WORD *)a2 + 2) != 28021)
            return;
          goto LABEL_162;
        }
LABEL_164:
        if (*(_DWORD *)a2 != 1919903859 || *((_BYTE *)a2 + 4) != 116)
          return;
        v26 = "MMMMM";
        goto LABEL_171;
      }
      if (*(_DWORD *)a2 != 1735290732)
      {
        if (*(_DWORD *)a2 != 1819047270)
          return;
        goto LABEL_170;
      }
    }
LABEL_162:
    v26 = "MMM";
    goto LABEL_171;
  }
  size = this->__r_.__value_.__l.__size_;
  if (size == 4)
  {
    if (*(_DWORD *)this->__r_.__value_.__l.__data_ == 1162167621)
      goto LABEL_62;
    if (*(_DWORD *)this->__r_.__value_.__l.__data_ != 1296911693)
      return;
    goto LABEL_37;
  }
  if (size == 5)
  {
    v6 = (std::string *)this->__r_.__value_.__r.__words[0];
LABEL_48:
    data = (int)v6->__r_.__value_.__l.__data_;
    v16 = v6->__r_.__value_.__s.__data_[4];
    if (data != 1296911737 || v16 != 77)
      return;
    if (*((char *)a2 + 23) < 0)
    {
      v24 = a2[1];
      if (v24 != 5)
      {
        if (v24 != 6)
          return;
        if (*(_DWORD *)*a2 != 1768187245 || *(_WORD *)(*a2 + 4) != 28021)
          return;
        goto LABEL_88;
      }
      a2 = (uint64_t *)*a2;
    }
    else
    {
      v18 = *((unsigned __int8 *)a2 + 23);
      if (v18 != 5)
      {
        if (v18 != 6)
          return;
        if (*(_DWORD *)a2 != 1768187245 || *((_WORD *)a2 + 2) != 28021)
          return;
LABEL_88:
        v26 = "yMMM";
        goto LABEL_171;
      }
    }
    if (*(_DWORD *)a2 != 1919903859 || *((_BYTE *)a2 + 4) != 116)
      return;
    v26 = "yM";
LABEL_171:
    MEMORY[0x1C3B8D53C](this, v26);
    return;
  }
  if (size != 6)
    return;
  if (*(_DWORD *)this->__r_.__value_.__l.__data_ != 1296911737
    || *(_WORD *)(this->__r_.__value_.__r.__words[0] + 4) != 25677)
  {
    return;
  }
LABEL_22:
  v10 = *((unsigned __int8 *)a2 + 23);
  if ((*((char *)a2 + 23) & 0x80000000) == 0)
  {
    if (v10 != 4)
    {
      v11 = a2;
      if (v10 != 5)
      {
        if (v10 != 6)
          goto LABEL_131;
        if (*(_DWORD *)a2 != 1768187245 || *((_WORD *)a2 + 2) != 28021)
          goto LABEL_131;
        goto LABEL_142;
      }
      goto LABEL_124;
    }
    if (*(_DWORD *)a2 != 1735290732)
    {
      if (*(_DWORD *)a2 != 1819047270)
        goto LABEL_131;
      goto LABEL_143;
    }
    goto LABEL_155;
  }
  v22 = a2[1];
  if (v22 == 4)
  {
    if (*(_DWORD *)*a2 == 1819047270)
    {
LABEL_143:
      v37 = *((unsigned __int8 *)a2 + 24);
      v38 = "MMMMEEEEd";
      v39 = "yMMMMEEEEd";
      goto LABEL_156;
    }
    if (*(_DWORD *)*a2 == 1735290732)
    {
LABEL_155:
      v37 = *((unsigned __int8 *)a2 + 24);
      v38 = "MMMMd";
      v39 = "yMMMMd";
LABEL_156:
      if (v37)
        v26 = v38;
      else
        v26 = v39;
      goto LABEL_171;
    }
  }
  else if (v22 == 6)
  {
    if (*(_DWORD *)*a2 == 1768187245 && *(_WORD *)(*a2 + 4) == 28021)
    {
LABEL_142:
      v37 = *((unsigned __int8 *)a2 + 24);
      v38 = "MMMd";
      v39 = "yMMMd";
      goto LABEL_156;
    }
    if ((v10 & 0x80) == 0)
    {
      v11 = a2;
      if (v10 != 5)
        goto LABEL_131;
      goto LABEL_124;
    }
  }
  if (a2[1] != 5)
  {
LABEL_131:
    v35 = a2 + 3;
    goto LABEL_132;
  }
  v11 = (uint64_t *)*a2;
LABEL_124:
  v32 = *(_DWORD *)v11;
  v33 = *((unsigned __int8 *)v11 + 4);
  v34 = v32 == 1919903859 && v33 == 116;
  v35 = a2 + 3;
  if (!v34)
  {
LABEL_132:
    if (*v35)
    {
      std::string::basic_string[abi:ne180100]<0>(&v45, "MMMMd");
    }
    else
    {
      if ((v5 & 0x80) == 0)
      {
        v45 = *this;
LABEL_138:
        *this = v45;
        return;
      }
      std::string::__init_copy_ctor_external(&v45, this->__r_.__value_.__l.__data_, this->__r_.__value_.__l.__size_);
    }
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      operator delete(this->__r_.__value_.__l.__data_);
    goto LABEL_138;
  }
  v36 = *v35;
  if (*v35)
  {
    std::string::basic_string[abi:ne180100]<0>(&v45, "Md");
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v44, "y");
    v42 = std::string::append(&v44, "yMd");
    v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v43;
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
  }
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    operator delete(this->__r_.__value_.__l.__data_);
  *this = v45;
  *((_BYTE *)&v45.__r_.__value_.__s + 23) = 0;
  v45.__r_.__value_.__s.__data_[0] = 0;
  if (!v36 && SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
}

void sub_1BF864C88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

_QWORD *siri::dialogengine::GetICUFormattedDateTimeString(_QWORD *a1, _QWORD *a2)
{
  UChar *v4;
  UChar *v5;
  uint64_t v6;
  std::string *v7;
  __int128 v8;
  char *v9;
  void **v10;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  void *v14[2];
  unsigned __int8 v15;
  std::string v16;
  std::string v17;
  void *__p[2];
  std::string::size_type v19;
  UChar *v20;
  UChar *s;
  std::string v22;
  UErrorCode code;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (*a2 == 0x7FFFFFFFFFFFFFFFLL)
    return std::string::basic_string[abi:ne180100]<0>(a1, "");
  code = U_ZERO_ERROR;
  siri::dialogengine::ValidateIANATimeZone(&v22, (uint64_t)(a2 + 1));
  siri::dialogengine::StringToUChar((uint64_t *)&s);
  siri::dialogengine::StringToUChar((uint64_t *)&v20);
  v4 = s;
  u_strlen(s);
  v5 = v20;
  u_strlen(v20);
  v6 = udat_open();
  if (code >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    std::operator+<char>();
    v7 = std::string::append(&v16, "'. Error: ");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    v9 = (char *)u_errorName(code);
    std::string::basic_string[abi:ne180100]<0>(v14, v9);
    if ((v15 & 0x80u) == 0)
      v10 = v14;
    else
      v10 = (void **)v14[0];
    if ((v15 & 0x80u) == 0)
      v11 = v15;
    else
      v11 = (std::string::size_type)v14[1];
    v12 = std::string::append(&v17, (const std::string::value_type *)v10, v11);
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v19 = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 3u);
    if (SHIBYTE(v19) < 0)
      operator delete(__p[0]);
    if ((char)v15 < 0)
      operator delete(v14[0]);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
    udat_close();
    v6 = 0;
  }
  if (v5)
    MEMORY[0x1C3B8D878](v5, 0x1000C80BDFB0063);
  if (v4)
    MEMORY[0x1C3B8D878](v4, 0x1000C80BDFB0063);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v22.__r_.__value_.__l.__data_);
    if (v6)
      goto LABEL_25;
  }
  else if (v6)
  {
LABEL_25:
    udat_format();
    udat_close();
    return siri::dialogengine::UCharToString((const unsigned __int16 *)0x200, a1);
  }
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

void sub_1BF8650B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  void **v44;

  if (a44 < 0)
    operator delete(*v44);
  if (a22 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetICUMonthName(_QWORD *a1@<X0>, char **a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  void *v8[2];
  char v9;
  std::string __p;
  void *v11;
  char v12;

  std::string::basic_string[abi:ne180100]<0>(v8, "MMMM");
  siri::dialogengine::GetSkeletonForFormatOption(&__p, a3, (uint64_t)v8);
  siri::dialogengine::GetICULocalizedPattern(a2, (uint64_t)&v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v9 < 0)
    operator delete(v8[0]);
  siri::dialogengine::GetICUFormattedDateTimeString(a4, a1);
  if (v12 < 0)
    operator delete(v11);
}

void sub_1BF8652B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetICUMonthAndYear(_QWORD *a1@<X0>, char **a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  void *v8[2];
  char v9;
  std::string __p;
  void *v11;
  char v12;

  std::string::basic_string[abi:ne180100]<0>(v8, "yMMMM");
  siri::dialogengine::GetSkeletonForFormatOption(&__p, a3, (uint64_t)v8);
  siri::dialogengine::GetICULocalizedPattern(a2, (uint64_t)&v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v9 < 0)
    operator delete(v8[0]);
  siri::dialogengine::GetICUFormattedDateTimeString(a4, a1);
  if (v12 < 0)
    operator delete(v11);
}

void sub_1BF8653A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetICUDisplayDate(_QWORD *a1@<X0>, char **a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  void *__p[2];
  char v9;
  std::string v10;

  std::string::basic_string[abi:ne180100]<0>(__p, "yMMMMd");
  siri::dialogengine::GetSkeletonForFormatOption(&v10, a3, (uint64_t)__p);
  if (v9 < 0)
    operator delete(__p[0]);
  siri::dialogengine::GetICULocalizedPattern(a2, (uint64_t)__p);
  siri::dialogengine::GetICUFormattedDateTimeString(a4, a1);
  if (v9 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
}

void sub_1BF865498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetICULocalizedDayOfMonth(_QWORD *a1@<X0>, char **a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  void *v8[2];
  char v9;
  std::string __p;
  void *v11;
  char v12;

  std::string::basic_string[abi:ne180100]<0>(v8, "d");
  siri::dialogengine::GetSkeletonForFormatOption(&__p, a3, (uint64_t)v8);
  siri::dialogengine::GetICULocalizedPattern(a2, (uint64_t)&v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v9 < 0)
    operator delete(v8[0]);
  siri::dialogengine::GetICUFormattedDateTimeString(a4, a1);
  if (v12 < 0)
    operator delete(v11);
}

void sub_1BF86558C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetICUDisplayDate(uint64_t a1@<X0>, char **a2@<X1>, _QWORD *a3@<X8>)
{
  void *__p[2];
  __int128 v6;
  uint64_t v7;
  void *v8;
  char v9;

  v7 = a1;
  std::string::basic_string[abi:ne180100]<0>(&v8, "UTC");
  *(_OWORD *)__p = 0u;
  v6 = 0u;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  BYTE8(v6) = 0;
  siri::dialogengine::GetICUDisplayDate(&v7, a2, (uint64_t *)__p, a3);
  if (SBYTE7(v6) < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8);
}

void sub_1BF865664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetICUDefaultDisplayTime(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _BOOL4 v8;
  _BOOL4 v9;
  _QWORD *v10;
  void *v11[2];
  char v12;
  void *v13[2];
  char v14;
  std::string v15;
  std::string v16;
  std::string __p;
  void *v18[2];
  char v19;
  std::string v20;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v20 = *(std::string *)a2;
  std::string::basic_string[abi:ne180100]<0>(v18, "hi");
  v8 = siri::dialogengine::StringStartsWith((std::string *)a2, (unsigned __int8 *)v18);
  v9 = v8;
  if (v19 < 0)
  {
    operator delete(v18[0]);
    if (!v9)
      goto LABEL_9;
    goto LABEL_8;
  }
  if (v8)
LABEL_8:
    MEMORY[0x1C3B8D53C](&v20, "en_US");
LABEL_9:
  v10 = std::string::basic_string[abi:ne180100]<0>(v18, "ahmm");
  if (!*(_DWORD *)a3)
    MEMORY[0x1C3B8D53C](v10, "Hm");
  siri::dialogengine::GetICULocalizedPattern(&v20.__r_.__value_.__l.__data_, (uint64_t)&__p);
  if (!*(_BYTE *)(a3 + 4))
  {
    std::string::basic_string[abi:ne180100]<0>(v13, "a");
    std::string::basic_string[abi:ne180100]<0>(v11, "");
    siri::dialogengine::StringReplace((uint64_t)&__p, (char *)v13, (uint64_t)v11, 0, &v15);
    siri::dialogengine::StringTrim("  ", &v15, &v16);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = v16;
    *((_BYTE *)&v16.__r_.__value_.__s + 23) = 0;
    v16.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
    if (v12 < 0)
      operator delete(v11[0]);
    if (v14 < 0)
      operator delete(v13[0]);
  }
  siri::dialogengine::GetICUFormattedDateTimeString(a4, a1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v19 < 0)
    operator delete(v18[0]);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
}

void sub_1BF865868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (a26 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (a20 < 0)
    operator delete(a15);
  if (a35 < 0)
    operator delete(a30);
  if (*(char *)(v35 - 65) < 0)
    operator delete(*(void **)(v35 - 88));
  if (*(char *)(v35 - 41) < 0)
    operator delete(*(void **)(v35 - 64));
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetICULocalizedMeridiem(_QWORD *a1@<X0>, char **a2@<X1>, _QWORD *a3@<X8>)
{
  void *__p;
  char v7;
  void *v8;
  char v9;

  std::string::basic_string[abi:ne180100]<0>(&__p, "a");
  siri::dialogengine::GetICULocalizedPattern(a2, (uint64_t)&v8);
  if (v7 < 0)
    operator delete(__p);
  siri::dialogengine::GetICUFormattedDateTimeString(a3, a1);
  if (v9 < 0)
    operator delete(v8);
}

void sub_1BF865998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetICUTimeZone(_QWORD *a1@<X0>, unsigned int a2@<W2>, _QWORD *a3@<X8>)
{
  const char *v5;
  void *__p[2];
  uint64_t v7;

  __p[0] = 0;
  __p[1] = 0;
  v7 = 0;
  if (a2 >= 3)
    v5 = "vvvv";
  else
    v5 = off_1E792A930[a2];
  MEMORY[0x1C3B8D53C](__p, v5);
  siri::dialogengine::GetICUFormattedDateTimeString(a3, a1);
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
}

void sub_1BF865A50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::GetICUUTCOffset(siri::dialogengine *this, const siri::dialogengine::TimeStamp *a2)
{
  uint64_t v2;
  std::string::size_type v4;
  int DSTSavings;
  std::string *v7;
  __int128 v8;
  std::string v9;
  int v10;
  std::string __p;

  v2 = *((unsigned __int8 *)this + 31);
  if ((v2 & 0x80u) != 0)
    v2 = *((_QWORD *)this + 2);
  if (!v2)
    return 0;
  memset(&__p, 0, sizeof(__p));
  if (!siri::dialogengine::GetICUCalendar((uint64_t *)this))
    return 0;
  v10 = 0;
  if (ucal_inDaylightTime())
  {
    siri::dialogengine::ValidateIANATimeZone(&__p, (uint64_t)this + 8);
    siri::dialogengine::StringToUChar((uint64_t *)&v9);
    v4 = v9.__r_.__value_.__r.__words[0];
    DSTSavings = ucal_getDSTSavings();
    if (v4)
      MEMORY[0x1C3B8D878](v4, 0x1000C80BDFB0063);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    DSTSavings = 0;
  }
  if (v10 >= 1)
  {
    std::operator+<char>();
    v7 = std::string::append(&v9, "'");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)&__p, 3u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v9.__r_.__value_.__l.__data_);
  }
  return ((int)siri::dialogengine::GetICUField() / 1000 + DSTSavings);
}

void sub_1BF865BF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::GetICUDifferenceInYears(siri::dialogengine *this, const siri::dialogengine::TimeStamp *a2, const siri::dialogengine::TimeStamp *a3)
{
  uint64_t ICUCalendar;
  uint64_t v5;
  uint64_t ICUDifferenceInFields;
  uint64_t result;

  ICUCalendar = siri::dialogengine::GetICUCalendar((uint64_t *)this);
  v5 = siri::dialogengine::GetICUCalendar((uint64_t *)a2);
  if (ICUCalendar && v5)
  {
    ICUDifferenceInFields = siri::dialogengine::GetICUDifferenceInFields(ICUCalendar, v5, 1, 4);
    ucal_close();
LABEL_7:
    ucal_close();
    return ICUDifferenceInFields;
  }
  if (ICUCalendar)
    ucal_close();
  ICUDifferenceInFields = 0;
  result = 0;
  if (v5)
    goto LABEL_7;
  return result;
}

void sub_1BF865D38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::GetICUDifferenceInFields(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v6;

  v6 = 0;
  if (a4)
  {
    ucal_set();
    ucal_set();
    ucal_set();
    ucal_set();
    ucal_set();
    ucal_set();
    switch(a4)
    {
      case 4:
        ucal_set();
        ucal_set();
        ucal_set();
        goto LABEL_8;
      case 3:
        ucal_set();
        goto LABEL_8;
      case 2:
        ucal_getAttribute();
        ucal_set();
LABEL_8:
        ucal_set();
        break;
    }
  }
  ucal_getMillis();
  return ucal_getFieldDifference();
}

void sub_1BF865F2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::GetICUDifferenceInMonths(siri::dialogengine *this, const siri::dialogengine::TimeStamp *a2, const siri::dialogengine::TimeStamp *a3)
{
  uint64_t ICUCalendar;
  uint64_t v5;
  uint64_t ICUDifferenceInFields;
  uint64_t result;

  ICUCalendar = siri::dialogengine::GetICUCalendar((uint64_t *)this);
  v5 = siri::dialogengine::GetICUCalendar((uint64_t *)a2);
  if (ICUCalendar && v5)
  {
    ICUDifferenceInFields = siri::dialogengine::GetICUDifferenceInFields(ICUCalendar, v5, 2, 3);
    ucal_close();
LABEL_7:
    ucal_close();
    return ICUDifferenceInFields;
  }
  if (ICUCalendar)
    ucal_close();
  ICUDifferenceInFields = 0;
  result = 0;
  if (v5)
    goto LABEL_7;
  return result;
}

void sub_1BF866030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::GetICUDifferenceInWeeks(uint64_t *a1, uint64_t *a2)
{
  uint64_t ICUCalendar;
  uint64_t v4;
  uint64_t v5;
  uint64_t ICUDifferenceInFields;
  uint64_t result;

  ICUCalendar = siri::dialogengine::GetICUCalendar(a1);
  v4 = siri::dialogengine::GetICUCalendar(a2);
  v5 = v4;
  if (ICUCalendar && v4)
  {
    ICUDifferenceInFields = siri::dialogengine::GetICUDifferenceInFields(ICUCalendar, v4, 3, 2);
    ucal_close();
LABEL_7:
    ucal_close();
    return ICUDifferenceInFields;
  }
  if (ICUCalendar)
    ucal_close();
  ICUDifferenceInFields = 0;
  result = 0;
  if (v5)
    goto LABEL_7;
  return result;
}

uint64_t siri::dialogengine::GetICUDifferenceInDays(siri::dialogengine *this, const siri::dialogengine::TimeStamp *a2, const siri::dialogengine::TimeStamp *a3)
{
  uint64_t ICUCalendar;
  uint64_t v5;
  uint64_t ICUDifferenceInFields;
  uint64_t result;

  ICUCalendar = siri::dialogengine::GetICUCalendar((uint64_t *)this);
  v5 = siri::dialogengine::GetICUCalendar((uint64_t *)a2);
  if (ICUCalendar && v5)
  {
    ICUDifferenceInFields = siri::dialogengine::GetICUDifferenceInFields(ICUCalendar, v5, 5, 1);
    ucal_close();
LABEL_7:
    ucal_close();
    return ICUDifferenceInFields;
  }
  if (ICUCalendar)
    ucal_close();
  ICUDifferenceInFields = 0;
  result = 0;
  if (v5)
    goto LABEL_7;
  return result;
}

void sub_1BF8661B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *siri::dialogengine::GetICUHostTimeZone@<X0>(_QWORD *a1@<X8>)
{
  unsigned __int8 v3;

  if ((v3 & 1) == 0
  {
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE4AB8], &siri::dialogengine::GetICUHostTimeZone(void)::hostTimeZoneMutex, &dword_1BF794000);
  }
  std::mutex::lock(&siri::dialogengine::GetICUHostTimeZone(void)::hostTimeZoneMutex);
  ucal_getHostTimeZone();
  std::mutex::unlock(&siri::dialogengine::GetICUHostTimeZone(void)::hostTimeZoneMutex);
  return siri::dialogengine::UCharToString((const unsigned __int16 *)0x100, a1);
}

void sub_1BF8662C4(_Unwind_Exception *a1)
{
  std::mutex::unlock(&siri::dialogengine::GetICUHostTimeZone(void)::hostTimeZoneMutex);
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::GetICULocalizedDateFormat@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return siri::dialogengine::GetICUFormattedDateTimeString(a2, a1);
}

uint64_t siri::dialogengine::GetICULastDayOfMonth(uint64_t *a1)
{
  uint64_t Limit;
  int v3;

  if (!siri::dialogengine::GetICUCalendar(a1))
    return 0;
  v3 = 0;
  Limit = ucal_getLimit();
  ucal_close();
  return Limit;
}

void sub_1BF8663D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::IsICUPast(siri::dialogengine *this, const siri::dialogengine::TimeStamp *a2, const siri::dialogengine::TimeStamp *a3)
{
  return siri::dialogengine::GetICUInterval(this, a2, a3) >> 31;
}

uint64_t siri::dialogengine::GetICUInterval(siri::dialogengine *this, const siri::dialogengine::TimeStamp *a2, const siri::dialogengine::TimeStamp *a3)
{
  uint64_t ICUCalendar;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t ICUDifferenceInFields;
  BOOL v9;

  ICUCalendar = siri::dialogengine::GetICUCalendar((uint64_t *)this);
  v5 = siri::dialogengine::GetICUCalendar((uint64_t *)a2);
  if (ICUCalendar && v5)
  {
    v6 = operator new(0x14uLL);
    v7 = 0;
    v6[4] = 13;
    *(_OWORD *)v6 = xmmword_1BFCB86D8;
    do
    {
      ICUDifferenceInFields = siri::dialogengine::GetICUDifferenceInFields(ICUCalendar, v5, v6[v7], 0);
      if ((_DWORD)ICUDifferenceInFields)
        v9 = 1;
      else
        v9 = v7 == 4;
      ++v7;
    }
    while (!v9);
    ucal_close();
    ucal_close();
    operator delete(v6);
  }
  else
  {
    ucal_close();
    ucal_close();
    return 0;
  }
  return ICUDifferenceInFields;
}

void sub_1BF866538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  operator delete(v15);
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::IsICUFuture(siri::dialogengine *this, const siri::dialogengine::TimeStamp *a2, const siri::dialogengine::TimeStamp *a3)
{
  return (int)siri::dialogengine::GetICUInterval(this, a2, a3) > 0;
}

BOOL siri::dialogengine::IsICUMidnight(siri::dialogengine *this, const siri::dialogengine::TimeStamp *a2)
{
  const siri::dialogengine::TimeStamp *v3;

  return !siri::dialogengine::GetICUHour24(this, a2)
      && siri::dialogengine::GetICUMinutes(this, v3) == 0;
}

BOOL siri::dialogengine::IsICUEndOfDay(siri::dialogengine *this, const siri::dialogengine::TimeStamp *a2)
{
  const siri::dialogengine::TimeStamp *v3;

  return siri::dialogengine::GetICUHour24(this, a2) == 23
      && siri::dialogengine::GetICUMinutes(this, v3) == 59;
}

uint64_t siri::dialogengine::IsICU24HourDisplay(char **a1)
{
  uint64_t v2;
  void *v4[2];
  char v5;
  void *v6[2];
  char v7;
  void *__p[2];
  char v9;
  char *v10[2];
  char v11;

  std::string::basic_string[abi:ne180100]<0>(__p, "jm");
  siri::dialogengine::GetICULocalizedPattern(a1, (uint64_t)v10);
  if (v9 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "a");
  if (siri::dialogengine::StringContains(v10, (char *)__p))
  {
    std::string::basic_string[abi:ne180100]<0>(v6, "H");
    if ((siri::dialogengine::StringContains(v10, (char *)v6) & 1) != 0)
    {
      v2 = 1;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v4, "k");
      v2 = siri::dialogengine::StringContains(v10, (char *)v4);
      if (v5 < 0)
        operator delete(v4[0]);
    }
    if (v7 < 0)
      operator delete(v6[0]);
  }
  else
  {
    v2 = 1;
  }
  if (v9 < 0)
    operator delete(__p[0]);
  if (v11 < 0)
    operator delete(v10[0]);
  return v2;
}

void sub_1BF866708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 17) < 0)
    operator delete(*(void **)(v23 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::IsICUFirstDayOfWeek(uint64_t *a1)
{
  uint64_t result;
  int Attribute;

  result = siri::dialogengine::GetICUCalendar(a1);
  if (result)
  {
    Attribute = ucal_getAttribute();
    return Attribute == siri::dialogengine::GetICUField();
  }
  return result;
}

uint64_t siri::dialogengine::GetDateForFirstAdvent(siri::dialogengine *this)
{
  int i;
  unsigned int v2;

  ucal_open();
  ucal_set();
  ucal_set();
  for (i = 30; ; --i)
  {
    ucal_set();
    if (ucal_get() == 5)
      break;
  }
  ucal_add();
  v2 = ucal_get();
  ucal_close();
  return v2;
}

uint64_t siri::dialogengine::GetDateForThanksgiving(siri::dialogengine *this)
{
  unsigned int v1;

  ucal_open();
  ucal_set();
  ucal_set();
  ucal_set();
  while (ucal_get() != 4 || ucal_get() != 5)
    ucal_add();
  v1 = ucal_get();
  ucal_close();
  return v1;
}

void siri::dialogengine::GetICUTimeStampForDate(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  int v3;
  std::string::size_type v4;
  double v5;

  v3 = *(char *)(a1 + 23);
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = 0;
  if (v3 < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a2 + 8), *(const std::string::value_type **)a1, v4);
  }
  else
  {
    *(_OWORD *)(a2 + 8) = *(_OWORD *)a1;
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 16);
  }
  if (siri::dialogengine::GetICUCalendar((uint64_t *)a2))
  {
    ucal_setDate();
    ucal_getMillis();
    *(_QWORD *)a2 = (uint64_t)(v5 / 1000.0);
    ucal_close();
  }
}

void sub_1BF866AB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  void **v15;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v14 + 31) < 0)
    operator delete(*v15);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::RemoveEmojiChars(const std::string *a1@<X0>, std::string *a2@<X8>)
{
  std::string::size_type size;
  std::string::size_type v5;
  std::string::size_type v6;
  const std::string *v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  BOOL v14;
  int v15;
  unint64_t v16;
  std::string v17;

  memset(&v17, 0, sizeof(v17));
  if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  else
    size = a1->__r_.__value_.__l.__size_;
  std::string::reserve(&v17, size);
  if (size)
  {
    v5 = 0;
    do
    {
      v6 = v5++;
      if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v7 = a1;
      else
        v7 = (const std::string *)a1->__r_.__value_.__r.__words[0];
      v8 = v7->__r_.__value_.__s.__data_[v6];
      v9 = v7->__r_.__value_.__s.__data_[v6];
      if ((v8 & 0x80000000) == 0)
        goto LABEL_29;
      if (v5 == size)
        goto LABEL_11;
      if (v9 < 0xE0)
      {
        if (v9 >= 0xC2)
        {
          v12 = v9 & 0x1F;
LABEL_20:
          v13 = v7->__r_.__value_.__s.__data_[v5] ^ 0x80;
          v14 = v13 > 0x3F;
          v15 = v13 | (v12 << 6);
          if (v14)
          {
            v9 = -1;
          }
          else
          {
            ++v5;
            v9 = v15;
          }
          goto LABEL_29;
        }
      }
      else if (v9 > 0xEF)
      {
        if (v9 <= 0xF4)
        {
          v16 = v7->__r_.__value_.__s.__data_[v5];
          if (((byte_1BFCB86C6[v16 >> 4] >> (v9 + 16)) & 1) != 0)
          {
            v5 = v6 + 2;
            if (v6 + 2 == size)
              goto LABEL_11;
            v11 = v7->__r_.__value_.__s.__data_[v5] ^ 0x80;
            if (v11 <= 0x3F)
            {
              v10 = v16 & 0x3F | ((v9 - 240) << 6);
LABEL_16:
              if (++v5 != size)
              {
                v12 = v11 | (v10 << 6);
                goto LABEL_20;
              }
LABEL_11:
              v9 = -1;
              v5 = size;
              goto LABEL_29;
            }
          }
        }
      }
      else
      {
        v10 = v8 & 0xF;
        if (((a00000000000000[v7->__r_.__value_.__s.__data_[v6] & 0xF] >> (v7->__r_.__value_.__s.__data_[v5] >> 5)) & 1) != 0)
        {
          v11 = v7->__r_.__value_.__s.__data_[v5] & 0x3F;
          goto LABEL_16;
        }
      }
      v9 = -1;
LABEL_29:
      if (u_isdigit(v9)
        || !u_hasBinaryProperty(v9, UCHAR_EMOJI)
        && !u_hasBinaryProperty(v9, UCHAR_EMOJI_PRESENTATION)
        && !u_hasBinaryProperty(v9, UCHAR_EMOJI_MODIFIER)
        && !u_hasBinaryProperty(v9, UCHAR_EMOJI_MODIFIER_BASE)
        && !u_hasBinaryProperty(v9, UCHAR_EMOJI_COMPONENT))
      {
        std::string::append(&v17, a1, v6, v5 - v6);
      }
    }
    while (v5 < size);
  }
  siri::dialogengine::StripWhitespace((uint64_t)&v17, a2);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
}

void sub_1BF866CF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetGraphemePrefix(uint64_t a1@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  uint64_t v6;
  const char *v7;
  char *v8;
  std::string *v9;
  __int128 v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  std::string v17;
  void *__p[2];
  std::string::size_type v19;
  UText ut;
  UErrorCode status;

  status = U_ZERO_ERROR;
  ubrk_open();
  memset(&ut, 0, sizeof(ut));
  ut.magic = 878368812;
  ut.sizeOfStruct = 144;
  LODWORD(v6) = *(unsigned __int8 *)(a1 + 23);
  if ((v6 & 0x80u) == 0)
    v7 = (const char *)a1;
  else
    v7 = *(const char **)a1;
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a1 + 8);
  utext_openUTF8(&ut, v7, (int)v6, &status);
  ubrk_setUText();
  if (status <= U_ZERO_ERROR)
  {
    v11 = ubrk_next();
    v12 = 0;
    if (v11 != -1 && a2 >= 1)
    {
      v13 = v11;
      v14 = 1;
      while (1)
      {
        v15 = ubrk_next();
        if (v15 == -1)
          break;
        v12 = v13;
        v13 = v15;
        if (v14++ >= a2)
          goto LABEL_21;
      }
      v12 = v13;
    }
LABEL_21:
    ubrk_close();
    utext_close(&ut);
    std::string::basic_string(a3, (const std::string *)a1, 0, v12, (std::allocator<char> *)__p);
  }
  else
  {
    v8 = (char *)u_errorName(status);
    std::string::basic_string[abi:ne180100]<0>(&v17, v8);
    v9 = std::string::insert(&v17, 0, "Failed to create break iterator: ");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v19 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 3u);
    if (SHIBYTE(v19) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
    if (*(char *)(a1 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
    }
  }
}

void sub_1BF866F04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::ReplaceSpecialUnicodeSpaceChars@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  std::basic_string<char32_t>::size_type v7;
  std::basic_string<char32_t>::size_type size;
  std::basic_string<char32_t> *v9;
  std::basic_string<char32_t>::value_type v10;
  std::basic_string<char32_t>::size_type v11;
  char *p_p;
  std::basic_string<char32_t> __p;
  std::basic_string<char32_t> v15;
  _OWORD v16[3];
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = operator new();
  *(_OWORD *)(v4 + 8) = xmmword_1BFCCD7F0;
  *(_DWORD *)(v4 + 24) = 0;
  *(_QWORD *)v4 = off_1E7932748;
  memset(v16, 0, sizeof(v16));
  v17 = v4;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v5 = *(unsigned __int8 *)(a1 + 23);
  if ((v5 & 0x80u) == 0)
    v6 = (char *)a1;
  else
    v6 = *(char **)a1;
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a1 + 8);
  v26 = 0;
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::from_bytes(&v15, (uint64_t)v16, v6, &v6[v5]);
  v7 = 0;
  memset(&__p, 0, sizeof(__p));
  while ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    if (v7 >= HIBYTE(v15.__r_.__value_.__r.__words[2]))
      goto LABEL_19;
LABEL_11:
    if (size <= v7)
      std::string::__throw_out_of_range[abi:ne180100]();
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = &v15;
    else
      v9 = (std::basic_string<char32_t> *)v15.__r_.__value_.__r.__words[0];
    v10 = v9->__r_.__value_.__s.__data_[v7];
    if (v10 == 8239 || v10 == 160)
      v10 = 32;
    std::basic_string<char32_t>::push_back(&__p, v10);
    ++v7;
  }
  size = v15.__r_.__value_.__l.__size_;
  if (v15.__r_.__value_.__l.__size_ > v7)
    goto LABEL_11;
LABEL_19:
  v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = (char *)&__p;
  else
    p_p = (char *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v11 = __p.__r_.__value_.__l.__size_;
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::to_bytes(a2, (uint64_t)v16, p_p, &p_p[4 * v11]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  return std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)v16);
}

void sub_1BF867108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::from_bytes(std::basic_string<char32_t> *this, uint64_t a2, char *a3, char *a4)
{
  std::basic_string<char32_t> *v5;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::basic_string<char32_t>::size_type v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __n128 v16;
  __int128 v17;
  std::basic_string<char32_t>::size_type size;
  std::basic_string<char32_t> *v19;
  char *v20;
  int v21;
  std::basic_string<char32_t>::value_type v22;
  BOOL v23;
  std::basic_string<char32_t> *v24;
  uint64_t v25;
  std::basic_string<char32_t>::size_type v26;
  char v27;
  std::basic_string<char32_t> *v28;
  const std::basic_string<char32_t>::value_type **v29;
  std::basic_string<char32_t> *v30;
  std::basic_string<char32_t>::size_type v31;
  std::basic_string<char32_t>::size_type v32;
  unint64_t v33;
  std::basic_string<char32_t>::size_type v34;
  uint64_t v35;
  std::basic_string<char32_t>::size_type v36;
  std::basic_string<char32_t> *v37;
  std::basic_string<char32_t>::size_type v38;
  std::basic_string<char32_t> *v39;
  unint64_t v40;
  unint64_t v41;
  _DWORD *v42;
  std::basic_string<char32_t> *v43;
  std::basic_string<char32_t> *v44;
  std::basic_string<char32_t>::value_type v45;
  std::basic_string<char32_t>::size_type v46;
  uint64_t v47;
  uint64_t v48;
  std::basic_string<char32_t>::value_type v49;
  int v50;
  void *v51;
  const std::basic_string<char32_t>::value_type *v52;
  std::basic_string<char32_t>::size_type v53;
  uint64_t v54;
  char *v55;
  _DWORD *v56;
  std::basic_string<char32_t>::size_type v57;
  int64_t v58;
  _OWORD v59[8];
  uint64_t v60;

  v5 = this;
  v60 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a2 + 184) = 0;
  if (!*(_QWORD *)(a2 + 48))
    goto LABEL_32;
  v7 = a3;
  v8 = 2 * (a4 - a3);
  if (v8 >= 0x3FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v8 >= 5)
  {
    v9 = v8 + 2;
    if ((v8 | 1) != 5)
      v9 = v8 | 1;
    this = (std::basic_string<char32_t> *)std::__allocate_at_least[abi:ne180100]<std::allocator<char32_t>>(v9 + 1);
    v5->__r_.__value_.__l.__size_ = v8;
    v5->__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::basic_string<char32_t>::size_type)this;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = v8;
    if (a4 == a3)
      goto LABEL_11;
  }
  v11 = 0;
  do
    this->__r_.__value_.__s.__data_[v11++] = 0;
  while (v8 != v11);
LABEL_11:
  this->__r_.__value_.__s.__data_[v8] = 0;
  if (v7 != a4)
  {
    if ((v5->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = 4;
    else
      v12 = (v5->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    std::basic_string<char32_t>::resize(v5, v12, (std::basic_string<char32_t>::value_type)a3);
    v13 = *(_OWORD *)(a2 + 136);
    v59[4] = *(_OWORD *)(a2 + 120);
    v59[5] = v13;
    v14 = *(_OWORD *)(a2 + 168);
    v59[6] = *(_OWORD *)(a2 + 152);
    v59[7] = v14;
    v15 = *(_OWORD *)(a2 + 72);
    v59[0] = *(_OWORD *)(a2 + 56);
    v59[1] = v15;
    v16 = *(__n128 *)(a2 + 88);
    v17 = *(_OWORD *)(a2 + 104);
    size = HIBYTE(v5->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) == 0)
      v19 = v5;
    else
      v19 = (std::basic_string<char32_t> *)v5->__r_.__value_.__r.__words[0];
    if ((size & 0x80u) != 0)
      size = v5->__r_.__value_.__l.__size_;
    v20 = (char *)v19 + 4 * size;
    v59[2] = *(_OWORD *)(a2 + 88);
    v59[3] = v17;
    while (1)
    {
      v21 = (*(uint64_t (**)(_QWORD, _OWORD *, char *, char *, char **, std::basic_string<char32_t> *, char *, uint64_t *, __n128))(**(_QWORD **)(a2 + 48) + 32))(*(_QWORD *)(a2 + 48), v59, v7, a4, &v55, v19, v20, &v54, v16);
      v23 = v55 == v7;
      *(_QWORD *)(a2 + 184) += v55 - v7;
      if (v23)
        goto LABEL_45;
      if (v21 != 1)
        break;
      if ((v5->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v24 = v5;
      else
        v24 = (std::basic_string<char32_t> *)v5->__r_.__value_.__r.__words[0];
      v25 = v54 - (_QWORD)v24;
      std::basic_string<char32_t>::resize(v5, (v54 - (uint64_t)v24) >> 1, v22);
      v26 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
      v27 = v26;
      v28 = (std::basic_string<char32_t> *)v5->__r_.__value_.__r.__words[0];
      if ((v26 & 0x80u) == 0)
        v28 = v5;
      v19 = (std::basic_string<char32_t> *)((char *)v28 + v25);
      if ((v26 & 0x80u) != 0)
        v26 = v5->__r_.__value_.__l.__size_;
      v20 = (char *)v28 + 4 * v26;
      v7 = v55;
      if (v55 >= a4)
      {
        if ((v27 & 0x80) == 0)
          goto LABEL_32;
LABEL_46:
        operator delete(v5->__r_.__value_.__l.__data_);
LABEL_32:
        v29 = (const std::basic_string<char32_t>::value_type **)(a2 + 24);
        if ((*(char *)(a2 + 47) & 0x80000000) == 0)
        {
          if (*(_BYTE *)(a2 + 47))
          {
            *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)v29;
            v5->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 40);
            return;
          }
LABEL_83:
          std::__throw_range_error[abi:ne180100]("wstring_convert: from_bytes error");
        }
        v38 = *(_QWORD *)(a2 + 32);
        if (!v38)
          goto LABEL_83;
        std::basic_string<char32_t>::__init_copy_ctor_external(v5, *v29, v38);
        return;
      }
    }
    if (v21)
    {
      if (v21 != 3)
      {
LABEL_45:
        if ((*((_BYTE *)&v5->__r_.__value_.__s + 23) & 0x80) != 0)
          goto LABEL_46;
        goto LABEL_32;
      }
      if ((v5->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v30 = v5;
      else
        v30 = (std::basic_string<char32_t> *)v5->__r_.__value_.__r.__words[0];
      std::basic_string<char32_t>::resize(v5, ((char *)v19 - (char *)v30) >> 2, v22);
      LODWORD(v33) = SHIBYTE(v5->__r_.__value_.__r.__words[2]);
      if ((v33 & 0x80000000) != 0)
      {
        v35 = a4 - v7;
        if (a4 == v7)
          return;
        v34 = v5->__r_.__value_.__l.__size_;
        v40 = v5->__r_.__value_.__r.__words[2];
        v36 = (v40 & 0x7FFFFFFFFFFFFFFFLL) - 1;
        v37 = (std::basic_string<char32_t> *)v5->__r_.__value_.__r.__words[0];
        v33 = HIBYTE(v40);
      }
      else
      {
        if (v7 == a4)
          return;
        v34 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
        v35 = a4 - v7;
        v36 = 4;
        v37 = v5;
      }
      v41 = v35 >> 2;
      if (v37 > (std::basic_string<char32_t> *)v7 || (char *)v37->__r_.__value_.__r.__words + 4 * v34 + 4 <= v7)
      {
        if (v36 - v34 < v41)
        {
          std::basic_string<char32_t>::__grow_by(v5, v36, v34 - v36 + v41, v34, v34, v31, v32);
          v5->__r_.__value_.__l.__size_ = v34;
          LOBYTE(v33) = *((_BYTE *)&v5->__r_.__value_.__s + 23);
        }
        v43 = v5;
        if ((v33 & 0x80) != 0)
          v43 = (std::basic_string<char32_t> *)v5->__r_.__value_.__r.__words[0];
        v44 = (std::basic_string<char32_t> *)((char *)v43 + 4 * v34);
        while (v7 != a4)
        {
          v45 = *(_DWORD *)v7;
          v7 += 4;
          v44->__r_.__value_.__s.__data_[0] = v45;
          v44 = (std::basic_string<char32_t> *)((char *)v44 + 4);
        }
        v44->__r_.__value_.__s.__data_[0] = 0;
        v46 = v41 + v34;
        if (SHIBYTE(v5->__r_.__value_.__r.__words[2]) < 0)
          v5->__r_.__value_.__l.__size_ = v46;
        else
          *((_BYTE *)&v5->__r_.__value_.__s + 23) = v46 & 0x7F;
      }
      else
      {
        if (v35 < 0)
          std::string::__throw_length_error[abi:ne180100]();
        if ((unint64_t)v35 > 0x13)
        {
          v47 = (v41 & 0xFFFFFFFFFFFFFFFELL) + 2;
          if ((v41 | 1) != 5)
            v47 = v41 | 1;
          v42 = std::__allocate_at_least[abi:ne180100]<std::allocator<char32_t>>(v47 + 1);
          v57 = v41;
          v58 = v48 | 0x8000000000000000;
          v56 = v42;
        }
        else
        {
          HIBYTE(v58) = (unint64_t)v35 >> 2;
          v42 = &v56;
        }
        while (v7 != a4)
        {
          v49 = *(_DWORD *)v7;
          v7 += 4;
          *v42++ = v49;
        }
        *v42 = 0;
        v50 = SHIBYTE(v58);
        v51 = v56;
        if (v58 >= 0)
          v52 = (const std::basic_string<char32_t>::value_type *)&v56;
        else
          v52 = v56;
        if (v58 >= 0)
          v53 = HIBYTE(v58);
        else
          v53 = v57;
        std::basic_string<char32_t>::append(v5, v52, v53);
        if (v50 < 0)
          operator delete(v51);
      }
    }
    else
    {
      if ((v5->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v39 = v5;
      else
        v39 = (std::basic_string<char32_t> *)v5->__r_.__value_.__r.__words[0];
      std::basic_string<char32_t>::resize(v5, (v54 - (uint64_t)v39) >> 2, v22);
    }
  }
}

void sub_1BF867564(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;
  int v3;

  if (v3 < 0)
    operator delete(v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::to_bytes(std::string *__b, uint64_t a2, char *a3, char *a4)
{
  char *v7;
  std::string::size_type v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 v12;
  __int128 v13;
  std::string::size_type size;
  std::string *v15;
  char *v16;
  int v17;
  BOOL v18;
  std::string *v19;
  uint64_t v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  std::string *v27;
  std::string *v28;
  std::string::size_type v29;
  std::string::size_type v30;
  std::string::size_type v31;
  std::string::size_type v32;
  int v33;
  BOOL v34;
  std::string *v35;
  char *v36;
  std::string::size_type v37;
  char *i;
  int v39;
  std::string *v40;
  int64_t v41;
  std::string::size_type v42;
  std::string *v43;
  std::string::size_type v44;
  std::string *v45;
  uint64_t v46;
  char *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a2 + 184) = 0;
  if (!*(_QWORD *)(a2 + 48))
    goto LABEL_62;
  v7 = a3;
  std::string::basic_string[abi:ne180100](__b, (a4 - a3) >> 1, 0);
  if (a4 == v7)
  {
    v23 = *(_OWORD *)(a2 + 136);
    v52 = *(_OWORD *)(a2 + 120);
    v53 = v23;
    v24 = *(_OWORD *)(a2 + 168);
    v54 = *(_OWORD *)(a2 + 152);
    v55 = v24;
    v25 = *(_OWORD *)(a2 + 72);
    v48 = *(_OWORD *)(a2 + 56);
    v49 = v25;
    v26 = *(_OWORD *)(a2 + 104);
    v50 = *(_OWORD *)(a2 + 88);
    v51 = v26;
  }
  else
  {
    if ((__b->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = 22;
    else
      v8 = (__b->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    std::string::resize(__b, v8, 0);
    v9 = *(_OWORD *)(a2 + 136);
    v52 = *(_OWORD *)(a2 + 120);
    v53 = v9;
    v10 = *(_OWORD *)(a2 + 168);
    v54 = *(_OWORD *)(a2 + 152);
    v55 = v10;
    v11 = *(_OWORD *)(a2 + 72);
    v48 = *(_OWORD *)(a2 + 56);
    v49 = v11;
    v12 = *(__n128 *)(a2 + 88);
    v13 = *(_OWORD *)(a2 + 104);
    size = HIBYTE(__b->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) == 0)
      v15 = __b;
    else
      v15 = (std::string *)__b->__r_.__value_.__r.__words[0];
    if ((size & 0x80u) != 0)
      size = __b->__r_.__value_.__l.__size_;
    v16 = (char *)v15 + size;
    v50 = *(_OWORD *)(a2 + 88);
    v51 = v13;
    while (1)
    {
      v17 = (*(uint64_t (**)(_QWORD, __int128 *, char *, char *, char **, std::string *, char *, uint64_t *, __n128))(**(_QWORD **)(a2 + 48) + 24))(*(_QWORD *)(a2 + 48), &v48, v7, a4, &v47, v15, v16, &v46, v12);
      v18 = v47 == v7;
      *(_QWORD *)(a2 + 184) += (v47 - v7) >> 2;
      if (v18)
        goto LABEL_60;
      if (v17 != 1)
        break;
      if ((__b->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = __b;
      else
        v19 = (std::string *)__b->__r_.__value_.__r.__words[0];
      v20 = v46 - (_QWORD)v19;
      std::string::resize(__b, 2 * (v46 - (_QWORD)v19), 0);
      v21 = HIBYTE(__b->__r_.__value_.__r.__words[2]);
      if ((v21 & 0x80u) == 0)
        v22 = __b;
      else
        v22 = (std::string *)__b->__r_.__value_.__r.__words[0];
      v15 = (std::string *)((char *)v22 + v20);
      if ((v21 & 0x80u) != 0)
        v21 = __b->__r_.__value_.__l.__size_;
      v16 = (char *)v22 + v21;
      v7 = v47;
      if (v47 >= a4)
        goto LABEL_60;
    }
    if (v17)
    {
      if (v17 != 3)
        goto LABEL_60;
      if ((__b->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = __b;
      else
        v27 = (std::string *)__b->__r_.__value_.__r.__words[0];
      std::string::resize(__b, (char *)v15 - (char *)v27, 0);
      std::string::append[abi:ne180100]<char const*,0>(__b, v7, a4);
    }
    else
    {
      if ((__b->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v28 = __b;
      else
        v28 = (std::string *)__b->__r_.__value_.__r.__words[0];
      std::string::resize(__b, v46 - (_QWORD)v28, 0);
    }
  }
  v29 = HIBYTE(__b->__r_.__value_.__r.__words[2]);
  v30 = __b->__r_.__value_.__l.__size_;
  if ((v29 & 0x80u) == 0)
    v31 = 22;
  else
    v31 = (__b->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  std::string::resize(__b, v31, 0);
  if ((v29 & 0x80u) == 0)
    v32 = v29;
  else
    v32 = v30;
  v33 = SHIBYTE(__b->__r_.__value_.__r.__words[2]);
  v34 = v33 < 0;
  if (v33 >= 0)
    v35 = __b;
  else
    v35 = (std::string *)__b->__r_.__value_.__r.__words[0];
  v36 = (char *)v35 + v32;
  if (v34)
    v37 = __b->__r_.__value_.__l.__size_;
  else
    v37 = HIBYTE(__b->__r_.__value_.__r.__words[2]);
  for (i = &v36[v37]; ; i = (char *)v43 + v42)
  {
    v39 = (*(uint64_t (**)(_QWORD, __int128 *, char *, char *, char **))(**(_QWORD **)(a2 + 48) + 40))(*(_QWORD *)(a2 + 48), &v48, v36, i, &v47);
    if (v39 != 1)
      break;
    if ((__b->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v40 = __b;
    else
      v40 = (std::string *)__b->__r_.__value_.__r.__words[0];
    v41 = v47 - (char *)v40;
    std::string::resize(__b, 2 * (v47 - (char *)v40), 0);
    v42 = HIBYTE(__b->__r_.__value_.__r.__words[2]);
    if ((v42 & 0x80u) == 0)
      v43 = __b;
    else
      v43 = (std::string *)__b->__r_.__value_.__r.__words[0];
    v36 = (char *)v43 + v41;
    if ((v42 & 0x80u) != 0)
      v42 = __b->__r_.__value_.__l.__size_;
  }
  if (!v39)
  {
    v36 = v47;
    goto LABEL_68;
  }
  if (v39 == 3)
  {
LABEL_68:
    if ((__b->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v45 = __b;
    else
      v45 = (std::string *)__b->__r_.__value_.__r.__words[0];
    std::string::resize(__b, v36 - (char *)v45, 0);
    return;
  }
LABEL_60:
  if (SHIBYTE(__b->__r_.__value_.__r.__words[2]) < 0)
    operator delete(__b->__r_.__value_.__l.__data_);
LABEL_62:
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a2 + 23))
    {
      *(_OWORD *)&__b->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      __b->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
      return;
    }
LABEL_73:
    std::__throw_range_error[abi:ne180100]("wstring_convert: to_bytes error");
  }
  v44 = *(_QWORD *)(a2 + 8);
  if (!v44)
    goto LABEL_73;
  std::string::__init_copy_ctor_external(__b, *(const std::string::value_type **)a2, v44);
}

void sub_1BF867938(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::basic_string<char32_t>::push_back(std::basic_string<char32_t> *this, std::basic_string<char32_t>::value_type __c)
{
  std::basic_string<char32_t>::size_type v2;
  std::basic_string<char32_t>::size_type v3;
  std::basic_string<char32_t> *v5;
  std::basic_string<char32_t>::size_type v6;
  std::basic_string<char32_t>::size_type size;
  std::basic_string<char32_t>::value_type *v8;

  v5 = this;
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((_BYTE *)&this->__r_.__value_.__s + 23) != 4)
    {
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      *((_BYTE *)&this->__r_.__value_.__s + 23) = (*((_BYTE *)&this->__r_.__value_.__s + 23) + 1) & 0x7F;
      goto LABEL_8;
    }
    v6 = 4;
    goto LABEL_5;
  }
  size = this->__r_.__value_.__l.__size_;
  v6 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (size == v6)
  {
LABEL_5:
    std::basic_string<char32_t>::__grow_by(this, v6, 1uLL, v6, v6, v2, v3);
    size = v6;
  }
  v5->__r_.__value_.__l.__size_ = size + 1;
  v5 = (std::basic_string<char32_t> *)v5->__r_.__value_.__r.__words[0];
LABEL_8:
  v8 = (std::basic_string<char32_t>::value_type *)((char *)v5 + 4 * size);
  *v8 = __c;
  v8[1] = 0;
}

uint64_t std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void std::basic_string<char32_t>::__grow_by(std::basic_string<char32_t> *this, std::basic_string<char32_t>::size_type __old_cap, std::basic_string<char32_t>::size_type __delta_cap, std::basic_string<char32_t>::size_type __old_sz, std::basic_string<char32_t>::size_type __n_copy, std::basic_string<char32_t>::size_type __n_del, std::basic_string<char32_t>::size_type __n_add)
{
  std::basic_string<char32_t> *v11;
  std::basic_string<char32_t>::size_type v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  std::basic_string<char32_t>::size_type v17;
  uint64_t v18;
  uint64_t v19;

  if (0x3FFFFFFFFFFFFFF7 - __old_cap < __delta_cap)
    std::string::__throw_length_error[abi:ne180100]();
  v11 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    v11 = (std::basic_string<char32_t> *)this->__r_.__value_.__r.__words[0];
  v12 = __delta_cap + __old_cap;
  if (__delta_cap + __old_cap <= 2 * __old_cap)
    v12 = 2 * __old_cap;
  v13 = (v12 & 0xFFFFFFFFFFFFFFFELL) + 2;
  if ((v12 | 1) != 5)
    v13 = v12 | 1;
  if (v12 >= 5)
    v14 = v13 + 1;
  else
    v14 = 5;
  if (__old_cap <= 0x1FFFFFFFFFFFFFF2)
    v15 = v14;
  else
    v15 = 0x3FFFFFFFFFFFFFF7;
  v16 = std::__allocate_at_least[abi:ne180100]<std::allocator<char32_t>>(v15);
  v17 = (std::basic_string<char32_t>::size_type)v16;
  v19 = v18;
  if (__n_copy)
    memmove(v16, v11, 4 * __n_copy);
  if (__old_sz != __n_copy)
    memmove((void *)(v17 + 4 * __n_copy), (char *)v11 + 4 * __n_copy, 4 * (__old_sz - __n_copy));
  if (__old_cap != 4)
    operator delete(v11);
  this->__r_.__value_.__r.__words[0] = v17;
  this->__r_.__value_.__r.__words[2] = v19 | 0x8000000000000000;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<char32_t>>(unint64_t a1)
{
  if (a1 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a1);
}

void std::__throw_range_error[abi:ne180100](const char *a1)
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::range_error::range_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E7925070, MEMORY[0x1E0DE42B0]);
}

void sub_1BF867BD4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *std::range_error::range_error[abi:ne180100](std::runtime_error *a1, const char *a2)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE5008] + 16);
  return result;
}

void std::basic_string<char32_t>::resize(std::basic_string<char32_t> *this, std::basic_string<char32_t>::size_type __n, std::basic_string<char32_t>::value_type __c)
{
  std::basic_string<char32_t>::size_type v3;
  std::basic_string<char32_t>::size_type v4;
  std::basic_string<char32_t> *v5;
  unint64_t v6;
  std::basic_string<char32_t>::size_type v7;
  std::basic_string<char32_t>::size_type v8;
  std::basic_string<char32_t>::size_type v9;
  std::basic_string<char32_t>::size_type size;
  unint64_t v11;
  std::basic_string<char32_t> *v12;
  std::basic_string<char32_t> *v13;
  std::basic_string<char32_t>::size_type v14;
  std::basic_string<char32_t>::size_type v15;
  std::basic_string<char32_t> *v16;

  v5 = this;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    size = this->__r_.__value_.__l.__size_;
    v8 = __n - size;
    if (__n > size)
    {
      v7 = this->__r_.__value_.__l.__size_;
      v11 = this->__r_.__value_.__r.__words[2];
      v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
      v6 = HIBYTE(v11);
      goto LABEL_6;
    }
    this->__r_.__value_.__l.__size_ = __n;
    v5 = (std::basic_string<char32_t> *)this->__r_.__value_.__r.__words[0];
LABEL_16:
    v16 = (std::basic_string<char32_t> *)((char *)v5 + 4 * __n);
    goto LABEL_19;
  }
  v7 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  v8 = __n - v7;
  if (__n <= v7)
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
    goto LABEL_16;
  }
  v9 = 4;
LABEL_6:
  if (v9 - v7 < v8)
  {
    std::basic_string<char32_t>::__grow_by(this, v9, v8 - v9 + v7, v7, v7, v3, v4);
    v5->__r_.__value_.__l.__size_ = v7;
    LOBYTE(v6) = *((_BYTE *)&v5->__r_.__value_.__s + 23);
  }
  v12 = v5;
  if ((v6 & 0x80) != 0)
    v12 = (std::basic_string<char32_t> *)v5->__r_.__value_.__r.__words[0];
  v13 = (std::basic_string<char32_t> *)((char *)v12 + 4 * v7);
  v14 = v8;
  do
  {
    v13->__r_.__value_.__s.__data_[0] = 0;
    v13 = (std::basic_string<char32_t> *)((char *)v13 + 4);
    --v14;
  }
  while (v14);
  v15 = v7 + v8;
  if (SHIBYTE(v5->__r_.__value_.__r.__words[2]) < 0)
    v5->__r_.__value_.__l.__size_ = v15;
  else
    *((_BYTE *)&v5->__r_.__value_.__s + 23) = v15 & 0x7F;
  v16 = (std::basic_string<char32_t> *)((char *)v12 + 4 * v15);
LABEL_19:
  v16->__r_.__value_.__s.__data_[0] = 0;
}

void std::basic_string<char32_t>::__init_copy_ctor_external(std::basic_string<char32_t> *this, const std::basic_string<char32_t>::value_type *__s, std::basic_string<char32_t>::size_type __sz)
{
  std::basic_string<char32_t> *v5;
  std::basic_string<char32_t>::size_type v6;
  std::basic_string<char32_t> *v7;
  uint64_t v8;

  v5 = this;
  if (__sz > 4)
  {
    if (__sz >= 0x3FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((__sz | 1) != 5)
      v6 = __sz | 1;
    v7 = (std::basic_string<char32_t> *)std::__allocate_at_least[abi:ne180100]<std::allocator<char32_t>>(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::basic_string<char32_t>::size_type)v7;
    v5 = v7;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, 4 * __sz + 4);
}

std::basic_string<char32_t> *__cdecl std::basic_string<char32_t>::append(std::basic_string<char32_t> *this, const std::basic_string<char32_t>::value_type *__s, std::basic_string<char32_t>::size_type __n)
{
  std::basic_string<char32_t>::size_type v6;
  std::basic_string<char32_t>::size_type size;
  std::basic_string<char32_t> *v8;
  std::basic_string<char32_t>::size_type v9;

  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    size = this->__r_.__value_.__l.__size_;
    v6 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  }
  else
  {
    v6 = 4;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  }
  if (v6 - size >= __n)
  {
    if (__n)
    {
      v8 = this;
      if ((*((_BYTE *)&this->__r_.__value_.__s + 23) & 0x80) != 0)
        v8 = (std::basic_string<char32_t> *)this->__r_.__value_.__r.__words[0];
      memmove((char *)v8 + 4 * size, __s, 4 * __n);
      v9 = size + __n;
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
        this->__r_.__value_.__l.__size_ = v9;
      else
        *((_BYTE *)&this->__r_.__value_.__s + 23) = v9 & 0x7F;
      v8->__r_.__value_.__s.__data_[v9] = 0;
    }
  }
  else
  {
    std::basic_string<char32_t>::__grow_by_and_replace(this, v6, __n - v6 + size, size, size, 0, __n, __s);
  }
  return this;
}

void std::basic_string<char32_t>::__grow_by_and_replace(std::basic_string<char32_t> *this, std::basic_string<char32_t>::size_type __old_cap, std::basic_string<char32_t>::size_type __delta_cap, std::basic_string<char32_t>::size_type __old_sz, std::basic_string<char32_t>::size_type __n_copy, std::basic_string<char32_t>::size_type __n_del, std::basic_string<char32_t>::size_type __n_add, const std::basic_string<char32_t>::value_type *__p_new_stuff)
{
  std::basic_string<char32_t> *v15;
  std::basic_string<char32_t>::size_type v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  std::basic_string<char32_t>::size_type v21;
  uint64_t v22;
  uint64_t v23;
  std::basic_string<char32_t>::size_type v24;
  std::basic_string<char32_t>::size_type v25;

  if (0x3FFFFFFFFFFFFFF6 - __old_cap < __delta_cap)
    std::string::__throw_length_error[abi:ne180100]();
  v15 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    v15 = (std::basic_string<char32_t> *)this->__r_.__value_.__r.__words[0];
  v16 = __delta_cap + __old_cap;
  if (__delta_cap + __old_cap <= 2 * __old_cap)
    v16 = 2 * __old_cap;
  v17 = (v16 & 0xFFFFFFFFFFFFFFFELL) + 2;
  if ((v16 | 1) != 5)
    v17 = v16 | 1;
  if (v16 >= 5)
    v18 = v17 + 1;
  else
    v18 = 5;
  if (__old_cap > 0x1FFFFFFFFFFFFFF2)
    v19 = 0x3FFFFFFFFFFFFFF7;
  else
    v19 = v18;
  v20 = std::__allocate_at_least[abi:ne180100]<std::allocator<char32_t>>(v19);
  v21 = (std::basic_string<char32_t>::size_type)v20;
  v23 = v22;
  if (__n_copy)
    memmove(v20, v15, 4 * __n_copy);
  if (__n_add)
    memmove((void *)(v21 + 4 * __n_copy), __p_new_stuff, 4 * __n_add);
  v24 = __old_sz - (__n_del + __n_copy);
  if (v24)
    memmove((void *)(v21 + 4 * __n_copy + 4 * __n_add), (char *)v15 + 4 * __n_copy + 4 * __n_del, 4 * v24);
  if (__old_cap != 4)
    operator delete(v15);
  v25 = __n_add + __n_copy + v24;
  this->__r_.__value_.__r.__words[0] = v21;
  this->__r_.__value_.__l.__size_ = v25;
  this->__r_.__value_.__r.__words[2] = v23 | 0x8000000000000000;
  *(_DWORD *)(v21 + 4 * v25) = 0;
}

void std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>::~codecvt_utf8[abi:ne180100]()
{
  MEMORY[0x1C3B8D7DC]();
  JUMPOUT(0x1C3B8D890);
}

uint64_t siri::dialogengine::RemoveUnicodeControlChars@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  std::basic_string<char32_t>::size_type v7;
  std::basic_string<char32_t>::size_type size;
  std::basic_string<char32_t> *v9;
  unsigned int v10;
  int8_t v11;
  std::basic_string<char32_t>::size_type v14;
  char *p_p;
  std::basic_string<char32_t> __p;
  std::basic_string<char32_t> v18;
  _OWORD v19[3];
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v4 = operator new();
  *(_OWORD *)(v4 + 8) = xmmword_1BFCCD7F0;
  *(_DWORD *)(v4 + 24) = 0;
  *(_QWORD *)v4 = off_1E7932748;
  memset(v19, 0, sizeof(v19));
  v20 = v4;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v5 = *(unsigned __int8 *)(a1 + 23);
  if ((v5 & 0x80u) == 0)
    v6 = (char *)a1;
  else
    v6 = *(char **)a1;
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a1 + 8);
  v29 = 0;
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::from_bytes(&v18, (uint64_t)v19, v6, &v6[v5]);
  v7 = 0;
  memset(&__p, 0, sizeof(__p));
  while ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
    if (v7 >= HIBYTE(v18.__r_.__value_.__r.__words[2]))
      goto LABEL_25;
LABEL_11:
    if (size <= v7)
      std::string::__throw_out_of_range[abi:ne180100]();
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = &v18;
    else
      v9 = (std::basic_string<char32_t> *)v18.__r_.__value_.__r.__words[0];
    v10 = v9->__r_.__value_.__s.__data_[v7];
    v11 = u_charType(v10);
    if (v10 <= 0x1B && ((1 << v10) & 0x8000600) != 0 || ((1 << v11) & 0x18000) == 0)
      std::basic_string<char32_t>::push_back(&__p, v10);
    ++v7;
  }
  size = v18.__r_.__value_.__l.__size_;
  if (v18.__r_.__value_.__l.__size_ > v7)
    goto LABEL_11;
LABEL_25:
  v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = (char *)&__p;
  else
    p_p = (char *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v14 = __p.__r_.__value_.__l.__size_;
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::to_bytes(a2, (uint64_t)v19, p_p, &p_p[4 * v14]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  return std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)v19);
}

void sub_1BF8681A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::ReplaceUnicodeCGJAndWhitespace@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  std::basic_string<char32_t>::size_type size;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _BOOL4 v12;
  std::basic_string<char32_t> *p_p;
  std::basic_string<char32_t>::size_type v14;
  std::basic_string<char32_t> *v15;
  unint64_t v16;
  BOOL v17;
  std::basic_string<char32_t>::size_type v18;
  std::basic_string<char32_t>::size_type v19;
  std::basic_string<char32_t>::size_type v20;
  std::basic_string<char32_t> *v21;
  std::basic_string<char32_t>::value_type v22;
  std::basic_string<char32_t>::size_type v23;
  char *v24;
  std::basic_string<char32_t> __p;
  std::basic_string<char32_t> v27;
  _OWORD v28[3];
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v4 = operator new();
  *(_OWORD *)(v4 + 8) = xmmword_1BFCCD7F0;
  *(_DWORD *)(v4 + 24) = 0;
  *(_QWORD *)v4 = off_1E7932748;
  memset(v28, 0, sizeof(v28));
  v29 = v4;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v5 = *(unsigned __int8 *)(a1 + 23);
  if ((v5 & 0x80u) == 0)
    v6 = (char *)a1;
  else
    v6 = *(char **)a1;
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a1 + 8);
  v38 = 0;
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::from_bytes(&v27, (uint64_t)v28, v6, &v6[v5]);
  memset(&__p, 0, sizeof(__p));
  size = HIBYTE(v27.__r_.__value_.__r.__words[2]);
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v27.__r_.__value_.__l.__size_;
  if (size >= 0x3FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (size < 5)
    goto LABEL_26;
  v8 = (size & 0xFFFFFFFFFFFFFFFELL) + 2;
  v9 = size | 1;
  v10 = v9 == 5 ? v8 : v9;
  if (v10 == 4)
    goto LABEL_26;
  v11 = v10 + 1;
  v12 = v10 < 5;
  if (v10 >= 5)
  {
    v15 = (std::basic_string<char32_t> *)std::__allocate_at_least[abi:ne180100]<std::allocator<char32_t>>(v10 + 1);
    v11 = v16;
    LOBYTE(v14) = *((_BYTE *)&__p.__r_.__value_.__s + 23);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      v12 = 1;
      v14 = __p.__r_.__value_.__l.__size_;
      p_p = (std::basic_string<char32_t> *)__p.__r_.__value_.__r.__words[0];
      goto LABEL_19;
    }
    p_p = &__p;
  }
  else
  {
    p_p = 0;
    LOBYTE(v14) = 0;
    v15 = &__p;
  }
  v14 = v14;
LABEL_19:
  v17 = __CFADD__(v14, 1);
  v18 = v14 + 1;
  if (!v17)
    memmove(v15, p_p, 4 * v18);
  if (v12)
    operator delete(p_p);
  if (v10 >= 5)
  {
    __p.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = (unint64_t)v15;
  }
  else
  {
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
  }
LABEL_26:
  v19 = 0;
  while ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v20 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
    if (v19 >= HIBYTE(v27.__r_.__value_.__r.__words[2]))
      goto LABEL_40;
LABEL_31:
    if (v20 <= v19)
      std::string::__throw_out_of_range[abi:ne180100]();
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v21 = &v27;
    else
      v21 = (std::basic_string<char32_t> *)v27.__r_.__value_.__r.__words[0];
    v22 = v21->__r_.__value_.__s.__data_[v19];
    if (v22 != 847)
    {
      if (v22 == 8199)
        v22 = 32;
      std::basic_string<char32_t>::push_back(&__p, v22);
    }
    ++v19;
  }
  v20 = v27.__r_.__value_.__l.__size_;
  if (v27.__r_.__value_.__l.__size_ > v19)
    goto LABEL_31;
LABEL_40:
  v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v24 = (char *)&__p;
  else
    v24 = (char *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v23 = __p.__r_.__value_.__l.__size_;
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::to_bytes(a2, (uint64_t)v28, v24, &v24[4 * v23]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  return std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)v28);
}

void sub_1BF868498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)&a21);
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::IsLetter(siri::dialogengine *this)
{
  return ((1 << u_charType((UChar32)this)) & 0x3E) != 0;
}

BOOL siri::dialogengine::IsNumber(siri::dialogengine *this)
{
  return ((1 << u_charType((UChar32)this)) & 0xE00) != 0;
}

std::basic_string<char32_t>::size_type siri::dialogengine::GetUnicodeLength(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  std::basic_string<char32_t>::size_type size;
  std::basic_string<char32_t> v7;
  std::basic_string<char32_t> __p;
  _OWORD v9[3];
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v2 = operator new();
  *(_OWORD *)(v2 + 8) = xmmword_1BFCCD7F0;
  *(_DWORD *)(v2 + 24) = 0;
  *(_QWORD *)v2 = off_1E7932748;
  memset(v9, 0, sizeof(v9));
  v10 = v2;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v3 = *(unsigned __int8 *)(a1 + 23);
  if ((v3 & 0x80u) == 0)
    v4 = (char *)a1;
  else
    v4 = *(char **)a1;
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a1 + 8);
  v19 = 0;
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::from_bytes(&__p, (uint64_t)v9, v4, &v4[v3]);
  siri::dialogengine::NormalizeU32String(&v7, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = v7;
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __p.__r_.__value_.__l.__size_;
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    size = HIBYTE(v7.__r_.__value_.__r.__words[2]);
  }
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)v9);
  return size;
}

void sub_1BF868660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  if (a18 < 0)
    operator delete(__p);
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void siri::dialogengine::NormalizeU32String(std::basic_string<char32_t> *a1, uint64_t a2)
{
  uint64_t NFCInstance;
  uint64_t v4;
  std::basic_string<char32_t>::value_type *v5;
  std::basic_string<char32_t>::value_type *v6;
  std::basic_string<char32_t>::value_type v7;
  int Decomposition;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::basic_string<char32_t>::value_type v12;
  int v14;
  BOOL v15;
  int v16;
  std::basic_string<char32_t> *v17;
  const char *v18;
  const char *v19;
  _WORD v20[256];
  _QWORD v21[2];
  std::basic_string<char32_t> *v22;
  UErrorCode v23;
  std::basic_string<char32_t> v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  memset(&v24, 0, sizeof(v24));
  v23 = U_ZERO_ERROR;
  v21[1] = v21;
  v22 = a1;
  NFCInstance = unorm2_getNFCInstance();
  MEMORY[0x1E0C80A78](NFCInstance);
  v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) == 0)
    v5 = (std::basic_string<char32_t>::value_type *)a2;
  else
    v5 = *(std::basic_string<char32_t>::value_type **)a2;
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    v6 = &v5[v4];
    while (1)
    {
      v7 = *v5;
      Decomposition = unorm2_getDecomposition();
      if (v23 >= U_ILLEGAL_ARGUMENT_ERROR)
        break;
      if (Decomposition < 0)
      {
        if (ublock_getCode(v7) != UBLOCK_COMBINING_DIACRITICAL_MARKS)
          std::basic_string<char32_t>::push_back(&v24, v7);
      }
      else if (Decomposition)
      {
        v9 = 0;
        v10 = Decomposition;
        do
        {
          v11 = v9 + 1;
          v12 = (unsigned __int16)v20[v9];
          if ((v12 & 0xFC00) != 0xD800 || v11 == v10)
          {
            ++v9;
          }
          else
          {
            v14 = (unsigned __int16)v20[v11];
            v15 = (v14 & 0xFC00) == 56320;
            v16 = v14 + (v12 << 10) - 56613888;
            if (v15)
              v12 = v16;
            if (v15)
              v9 += 2;
            else
              ++v9;
          }
          if (ublock_getCode(v12) != UBLOCK_COMBINING_DIACRITICAL_MARKS)
            std::basic_string<char32_t>::push_back(&v24, v12);
        }
        while (v9 < v10);
      }
      if (++v5 == v6)
        goto LABEL_31;
    }
    v18 = u_errorName(v23);
    v17 = v22;
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"NormalizeU32String failed to perform NFC decomposition: %s", v19, v18);
  }
  else
  {
LABEL_31:
    *v22 = v24;
    v17 = &v24;
  }
  v17->__r_.__value_.__r.__words[0] = 0;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
}

void sub_1BF8688B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 89) < 0)
    operator delete(*(void **)(v1 - 112));
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::UNumberFormatDeleter::operator()()
{
  return unum_close();
}

uint64_t siri::dialogengine::UNumberFormatterDeleter::operator()()
{
  return unumf_close();
}

uint64_t siri::dialogengine::UFormattedNumberDeleter::operator()()
{
  return unumf_closeResult();
}

_QWORD *siri::dialogengine::GetICUCompactNumberFormatLong@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;

  siri::dialogengine::CreateUNumberFormatterFromSkeleton(&v4);
  v2 = v4;
  result = siri::dialogengine::FormatDouble(a1, v4);
  if (v2)
    return (_QWORD *)unumf_close();
  return result;
}

void sub_1BF868960(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<UNumberFormatter,siri::dialogengine::UNumberFormatterDeleter>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::CreateUNumberFormatterFromSkeleton(uint64_t *a1)
{
  uint64_t result;
  char *v3;
  std::string *v4;
  __int128 v5;
  std::string v6;
  void *__p[2];
  std::string::size_type v8;
  UErrorCode v9;

  v9 = U_ZERO_ERROR;
  *a1 = unumf_openForSkeletonAndLocale();
  result = v9;
  if (v9 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    v3 = (char *)u_errorName(v9);
    std::string::basic_string[abi:ne180100]<0>(&v6, v3);
    v4 = std::string::insert(&v6, 0, "an error occurred creating a UNumberFormatter from skeleton. Error: ");
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v8 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 3u);
    if (SHIBYTE(v8) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v6.__r_.__value_.__l.__data_);
    return std::unique_ptr<UNumberFormatter,siri::dialogengine::UNumberFormatterDeleter>::reset[abi:ne180100](a1);
  }
  return result;
}

void sub_1BF868A3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t *v21;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  std::unique_ptr<UNumberFormatter,siri::dialogengine::UNumberFormatterDeleter>::reset[abi:ne180100](v21);
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::FormatDouble(_QWORD *a1, uint64_t a2)
{
  char *v4;
  std::string *v5;
  __int128 v6;
  std::string v7;
  void *__p[2];
  std::string::size_type v9;
  int v10;

  if (a2)
  {
    v10 = 0;
    if (unumf_openResult())
    {
      unumf_formatDouble();
      v10 = 0;
      unumf_resultToString();
      v4 = (char *)u_errorName(U_ZERO_ERROR);
      std::string::basic_string[abi:ne180100]<0>(&v7, v4);
      v5 = std::string::insert(&v7, 0, "an error occurred getting the length of a UFormattedNumber result string. Error: ");
      v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v9 = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 3u);
      if (SHIBYTE(v9) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v7.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(a1, "");
      return (_QWORD *)unumf_closeResult();
    }
    else
    {
      return std::string::basic_string[abi:ne180100]<0>(a1, "");
    }
  }
  else
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"formatter is NULL", 0);
    return std::string::basic_string[abi:ne180100]<0>(a1, "");
  }
}

void sub_1BF868DF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a23 < 0)
    operator delete(__p);
  if (a17 < 0)
    operator delete(a12);
  MEMORY[0x1C3B8D878](v23, 0x1000C80BDFB0063);
  std::unique_ptr<UFormattedNumber,siri::dialogengine::UFormattedNumberDeleter>::reset[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<UNumberFormatter,siri::dialogengine::UNumberFormatterDeleter>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  *a1 = 0;
  if (result)
    return unumf_close();
  return result;
}

uint64_t std::unique_ptr<UFormattedNumber,siri::dialogengine::UFormattedNumberDeleter>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  *a1 = 0;
  if (result)
    return unumf_closeResult();
  return result;
}

_QWORD *siri::dialogengine::GetICUCompactNumberFormatShort@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;

  siri::dialogengine::CreateUNumberFormatterFromSkeleton(&v4);
  v2 = v4;
  result = siri::dialogengine::FormatDouble(a1, v4);
  if (v2)
    return (_QWORD *)unumf_close();
  return result;
}

void sub_1BF868F68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<UNumberFormatter,siri::dialogengine::UNumberFormatterDeleter>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::GetICUMeasurementSystem()
{
  uint64_t result;
  int v1;

  v1 = 0;
  LODWORD(result) = ulocdata_getMeasurementSystem();
  if (result >= 3)
    return 3;
  else
    return result;
}

void sub_1BF8690B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (*(char *)(v26 - 25) < 0)
    operator delete(*(void **)(v26 - 48));
  if (a14 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetICUTextSegments(uint64_t a1@<X0>, uint64_t a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  const UChar *v8;
  int v9;
  int v10;
  int v11;
  std::string *p_p;
  std::string::size_type size;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  std::basic_string<char32_t>::size_type v20;
  std::basic_string<char32_t> *v21;
  std::string::size_type v22;
  std::string::size_type v23;
  std::string::size_type v24;
  std::string *v25;
  uint64_t v26;
  uint64_t v27;
  int RuleStatus;
  int v29;
  std::basic_string<char32_t>::size_type v30;
  unint64_t v31;
  unint64_t v32;
  __int128 v33;
  unint64_t v34;
  unint64_t v35;
  __int128 v36;
  const std::basic_string<char32_t>::value_type *v37;
  std::basic_string<char32_t>::size_type v38;
  const std::basic_string<char32_t>::value_type *v39;
  std::basic_string<char32_t>::size_type v40;
  unint64_t v41;
  unint64_t v42;
  __int128 v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  std::string *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  std::string *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  std::string *v58;
  std::string *v59;
  __int128 v60;
  uint64_t v61;
  int v62;
  std::string *v63;
  __int128 v64;
  uint64_t v65;
  int v66;
  std::string *v67;
  __int128 v68;
  uint64_t v69;
  int v70;
  const UChar *v71;
  std::basic_string<char32_t> *v72;
  uint64_t v73;
  const std::string::value_type *p_v;
  std::string::size_type end_high;
  void *v76;
  unint64_t v77;
  unint64_t v78;
  __int128 v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  std::string *v84;
  std::string *v85;
  __int128 v86;
  uint64_t v87;
  int v88;
  const UChar *v89;
  uint64_t v90;
  int v91;
  int v92;
  std::string v93;
  std::string v94;
  UErrorCode code;
  std::string __p;
  std::basic_string<char32_t> v97;
  std::string v98;
  const UChar *v99;
  std::basic_string<char32_t> v100;
  std::__split_buffer<std::string> __v;

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *((_BYTE *)&v100.__r_.__value_.__s + 23) = 0;
  v100.__r_.__value_.__s.__data_[0] = 0;
  siri::dialogengine::StringToUChar((uint64_t *)&v99);
  v8 = v99;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v98, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v98 = *(std::string *)a2;
  siri::dialogengine::StringToU32String(a1, &v97);
  v9 = *a3;
  if (*a3 <= 1)
    v9 = 1;
  v92 = v9;
  if (!a3[3])
  {
    std::string::basic_string[abi:ne180100]<0>(&__v, "ss=standard");
    std::string::basic_string[abi:ne180100]<0>(&__p, "@");
    v10 = siri::dialogengine::StringContains((char **)a2, (char *)&__p);
    v11 = v10;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (v11)
        goto LABEL_9;
    }
    else if (v10)
    {
LABEL_9:
      std::operator+<char>();
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
LABEL_22:
      std::string::append(&v98, (const std::string::value_type *)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(__v.__end_) < 0)
        operator delete(__v.__first_);
      goto LABEL_26;
    }
    std::operator+<char>();
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    goto LABEL_22;
  }
LABEL_26:
  code = U_ZERO_ERROR;
  u_strlen(v8);
  ubrk_open();
  v89 = v8;
  v14 = ubrk_next();
  if (v14 != -1)
  {
    v91 = 0;
    v15 = 0;
    v16 = 0;
    if (a3[1] <= 0)
      v17 = v92;
    else
      v17 = a3[1];
    v90 = a4 + 16;
    while (1)
    {
      v18 = v14;
      v19 = v16;
      if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
      {
        v20 = v97.__r_.__value_.__l.__size_;
        if (v97.__r_.__value_.__l.__size_ < v16)
LABEL_178:
          std::string::__throw_out_of_range[abi:ne180100]();
        v21 = (std::basic_string<char32_t> *)v97.__r_.__value_.__r.__words[0];
      }
      else
      {
        v20 = HIBYTE(v97.__r_.__value_.__r.__words[2]);
        if (HIBYTE(v97.__r_.__value_.__r.__words[2]) < (unint64_t)v16)
          goto LABEL_178;
        v21 = &v97;
      }
      v22 = v14 - v16;
      v23 = v20 - v19;
      if (v23 >= v22)
        v24 = v22;
      else
        v24 = v23;
      if (v24 >= 0x3FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      if (v24 >= 5)
        break;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = v24;
      v25 = &__p;
      if (v24)
        goto LABEL_46;
LABEL_47:
      *((_DWORD *)&v25->__r_.__value_.__l.__data_ + v24) = 0;
      RuleStatus = ubrk_getRuleStatus();
      if (*(_QWORD *)a4 != *(_QWORD *)(a4 + 8))
        v17 = v92;
      v29 = a3[2];
      switch(v29)
      {
        case 1:
          if (v91 >= v17)
          {
            siri::dialogengine::U32StringToString((uint64_t)&v100, &v93);
            siri::dialogengine::StringTrim(" \t\n\r", &v93, &v94);
            v41 = *(_QWORD *)(a4 + 8);
            v42 = *(_QWORD *)(a4 + 16);
            if (v41 >= v42)
            {
              v49 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v41 - *(_QWORD *)a4) >> 3);
              v50 = v49 + 1;
              if (v49 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<BOOL>::__throw_length_error[abi:ne180100]();
              v51 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v42 - *(_QWORD *)a4) >> 3);
              if (2 * v51 > v50)
                v50 = 2 * v51;
              if (v51 >= 0x555555555555555)
                v52 = 0xAAAAAAAAAAAAAAALL;
              else
                v52 = v50;
              __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a4 + 16);
              if (v52)
                v53 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v90, v52);
              else
                v53 = 0;
              v63 = v53 + v49;
              __v.__first_ = v53;
              __v.__begin_ = v63;
              __v.__end_cap_.__value_ = &v53[v52];
              v64 = *(_OWORD *)&v94.__r_.__value_.__l.__data_;
              v63->__r_.__value_.__r.__words[2] = v94.__r_.__value_.__r.__words[2];
              *(_OWORD *)&v63->__r_.__value_.__l.__data_ = v64;
              memset(&v94, 0, sizeof(v94));
              __v.__end_ = v63 + 1;
              std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a4, &__v);
              v65 = *(_QWORD *)(a4 + 8);
              std::__split_buffer<std::string>::~__split_buffer(&__v);
              v66 = SHIBYTE(v94.__r_.__value_.__r.__words[2]);
              *(_QWORD *)(a4 + 8) = v65;
              if (v66 < 0)
                operator delete(v94.__r_.__value_.__l.__data_);
            }
            else
            {
              v43 = *(_OWORD *)&v94.__r_.__value_.__l.__data_;
              *(_QWORD *)(v41 + 16) = *((_QWORD *)&v94.__r_.__value_.__l + 2);
              *(_OWORD *)v41 = v43;
              memset(&v94, 0, sizeof(v94));
              *(_QWORD *)(a4 + 8) = v41 + 24;
            }
            if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v93.__r_.__value_.__l.__data_);
            std::basic_string<char32_t>::operator=(&v100, (const std::basic_string<char32_t> *)&__p);
            v91 = 0;
          }
          else
          {
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v37 = (const std::basic_string<char32_t>::value_type *)&__p;
            else
              v37 = (const std::basic_string<char32_t>::value_type *)__p.__r_.__value_.__r.__words[0];
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v38 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            else
              v38 = __p.__r_.__value_.__l.__size_;
            std::basic_string<char32_t>::append(&v100, v37, v38);
          }
          ++v91;
          break;
        case 2:
          if (RuleStatus == 200 || RuleStatus == 100)
            ++v15;
          if (v15 > v17)
          {
            siri::dialogengine::U32StringToString((uint64_t)&v100, &v93);
            siri::dialogengine::StringTrim(" \t\n\r", &v93, &v94);
            v34 = *(_QWORD *)(a4 + 8);
            v35 = *(_QWORD *)(a4 + 16);
            if (v34 >= v35)
            {
              v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34 - *(_QWORD *)a4) >> 3);
              v45 = v44 + 1;
              if (v44 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<BOOL>::__throw_length_error[abi:ne180100]();
              v46 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - *(_QWORD *)a4) >> 3);
              if (2 * v46 > v45)
                v45 = 2 * v46;
              if (v46 >= 0x555555555555555)
                v47 = 0xAAAAAAAAAAAAAAALL;
              else
                v47 = v45;
              __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a4 + 16);
              if (v47)
                v48 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v90, v47);
              else
                v48 = 0;
              v59 = v48 + v44;
              __v.__first_ = v48;
              __v.__begin_ = v59;
              __v.__end_cap_.__value_ = &v48[v47];
              v60 = *(_OWORD *)&v94.__r_.__value_.__l.__data_;
              v59->__r_.__value_.__r.__words[2] = v94.__r_.__value_.__r.__words[2];
              *(_OWORD *)&v59->__r_.__value_.__l.__data_ = v60;
              memset(&v94, 0, sizeof(v94));
              __v.__end_ = v59 + 1;
              std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a4, &__v);
              v61 = *(_QWORD *)(a4 + 8);
              std::__split_buffer<std::string>::~__split_buffer(&__v);
              v62 = SHIBYTE(v94.__r_.__value_.__r.__words[2]);
              *(_QWORD *)(a4 + 8) = v61;
              if (v62 < 0)
                operator delete(v94.__r_.__value_.__l.__data_);
            }
            else
            {
              v36 = *(_OWORD *)&v94.__r_.__value_.__l.__data_;
              *(_QWORD *)(v34 + 16) = *((_QWORD *)&v94.__r_.__value_.__l + 2);
              *(_OWORD *)v34 = v36;
              memset(&v94, 0, sizeof(v94));
              *(_QWORD *)(a4 + 8) = v34 + 24;
            }
            if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v93.__r_.__value_.__l.__data_);
            std::basic_string<char32_t>::operator=(&v100, (const std::basic_string<char32_t> *)&__p);
            v15 = 1;
            break;
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v39 = (const std::basic_string<char32_t>::value_type *)&__p;
          else
            v39 = (const std::basic_string<char32_t>::value_type *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v40 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            v40 = __p.__r_.__value_.__l.__size_;
LABEL_78:
          std::basic_string<char32_t>::append(&v100, v39, v40);
          break;
        case 3:
          v30 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
          if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v30 = v100.__r_.__value_.__l.__size_;
          if (v30 >= v17 && RuleStatus)
          {
            siri::dialogengine::U32StringToString((uint64_t)&v100, &v93);
            siri::dialogengine::StringTrim(" \t\n\r", &v93, &v94);
            v31 = *(_QWORD *)(a4 + 8);
            v32 = *(_QWORD *)(a4 + 16);
            if (v31 >= v32)
            {
              v54 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - *(_QWORD *)a4) >> 3);
              v55 = v54 + 1;
              if (v54 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<BOOL>::__throw_length_error[abi:ne180100]();
              v56 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v32 - *(_QWORD *)a4) >> 3);
              if (2 * v56 > v55)
                v55 = 2 * v56;
              if (v56 >= 0x555555555555555)
                v57 = 0xAAAAAAAAAAAAAAALL;
              else
                v57 = v55;
              __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a4 + 16);
              if (v57)
                v58 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v90, v57);
              else
                v58 = 0;
              v67 = v58 + v54;
              __v.__first_ = v58;
              __v.__begin_ = v67;
              __v.__end_cap_.__value_ = &v58[v57];
              v68 = *(_OWORD *)&v94.__r_.__value_.__l.__data_;
              v67->__r_.__value_.__r.__words[2] = v94.__r_.__value_.__r.__words[2];
              *(_OWORD *)&v67->__r_.__value_.__l.__data_ = v68;
              memset(&v94, 0, sizeof(v94));
              __v.__end_ = v67 + 1;
              std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a4, &__v);
              v69 = *(_QWORD *)(a4 + 8);
              std::__split_buffer<std::string>::~__split_buffer(&__v);
              v70 = SHIBYTE(v94.__r_.__value_.__r.__words[2]);
              *(_QWORD *)(a4 + 8) = v69;
              if (v70 < 0)
                operator delete(v94.__r_.__value_.__l.__data_);
            }
            else
            {
              v33 = *(_OWORD *)&v94.__r_.__value_.__l.__data_;
              *(_QWORD *)(v31 + 16) = *((_QWORD *)&v94.__r_.__value_.__l + 2);
              *(_OWORD *)v31 = v33;
              memset(&v94, 0, sizeof(v94));
              *(_QWORD *)(a4 + 8) = v31 + 24;
            }
            if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v93.__r_.__value_.__l.__data_);
            std::basic_string<char32_t>::operator=(&v100, (const std::basic_string<char32_t> *)&__p);
            break;
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v39 = (const std::basic_string<char32_t>::value_type *)&__p;
          else
            v39 = (const std::basic_string<char32_t>::value_type *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v40 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            v40 = __p.__r_.__value_.__l.__size_;
          goto LABEL_78;
      }
      v14 = ubrk_next();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v16 = v18;
      if (v14 == -1)
        goto LABEL_133;
    }
    v26 = (v24 & 0xFFFFFFFFFFFFFFFELL) + 2;
    if ((v24 | 1) != 5)
      v26 = v24 | 1;
    v25 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<char32_t>>(v26 + 1);
    __p.__r_.__value_.__l.__size_ = v24;
    __p.__r_.__value_.__r.__words[2] = v27 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
LABEL_46:
    memmove(v25, (char *)v21 + 4 * v19, 4 * v24);
    goto LABEL_47;
  }
LABEL_133:
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
  {
    v71 = v89;
    if (!v100.__r_.__value_.__l.__size_)
      goto LABEL_169;
    if (v100.__r_.__value_.__l.__size_ != 1)
      goto LABEL_153;
    v72 = (std::basic_string<char32_t> *)v100.__r_.__value_.__r.__words[0];
  }
  else
  {
    v71 = v89;
    if (!*((_BYTE *)&v100.__r_.__value_.__s + 23))
      goto LABEL_169;
    if (HIBYTE(v100.__r_.__value_.__r.__words[2]) != 1)
      goto LABEL_153;
    v72 = &v100;
  }
  v73 = v72->__r_.__value_.__s.__data_[0];
  if (v73 <= 0x7F)
  {
    if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v73 + 60) & 0x2000) != 0)
    {
LABEL_142:
      siri::dialogengine::U32StringToString((uint64_t)&v100, &__p);
      siri::dialogengine::StringTrim(" \t\n\r", &__p, (std::string *)&__v);
      if (SHIBYTE(__v.__end_) >= 0)
        p_v = (const std::string::value_type *)&__v;
      else
        p_v = (const std::string::value_type *)__v.__first_;
      if (SHIBYTE(__v.__end_) >= 0)
        end_high = HIBYTE(__v.__end_);
      else
        end_high = (std::string::size_type)__v.__begin_;
      std::string::append((std::string *)(*(_QWORD *)(a4 + 8) - 24), p_v, end_high);
      if (SHIBYTE(__v.__end_) < 0)
        operator delete(__v.__first_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        v76 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_168:
        operator delete(v76);
        goto LABEL_169;
      }
      goto LABEL_169;
    }
  }
  else if (__maskrune(v73, 0x2000uLL))
  {
    goto LABEL_142;
  }
LABEL_153:
  siri::dialogengine::U32StringToString((uint64_t)&v100, &v94);
  siri::dialogengine::StringTrim(" \t\n\r", &v94, &__p);
  v77 = *(_QWORD *)(a4 + 16);
  v78 = *(_QWORD *)(a4 + 8);
  if (v78 >= v77)
  {
    v80 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v78 - *(_QWORD *)a4) >> 3);
    v81 = v80 + 1;
    if (v80 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    v82 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v77 - *(_QWORD *)a4) >> 3);
    if (2 * v82 > v81)
      v81 = 2 * v82;
    if (v82 >= 0x555555555555555)
      v83 = 0xAAAAAAAAAAAAAAALL;
    else
      v83 = v81;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a4 + 16);
    if (v83)
      v84 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a4 + 16, v83);
    else
      v84 = 0;
    v85 = v84 + v80;
    __v.__first_ = v84;
    __v.__begin_ = v85;
    __v.__end_cap_.__value_ = &v84[v83];
    v86 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v85->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
    *(_OWORD *)&v85->__r_.__value_.__l.__data_ = v86;
    memset(&__p, 0, sizeof(__p));
    __v.__end_ = v85 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a4, &__v);
    v87 = *(_QWORD *)(a4 + 8);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    v88 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(_QWORD *)(a4 + 8) = v87;
    if (v88 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v79 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(v78 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)v78 = v79;
    memset(&__p, 0, sizeof(__p));
    *(_QWORD *)(a4 + 8) = v78 + 24;
  }
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
  {
    v76 = (void *)v94.__r_.__value_.__r.__words[0];
    goto LABEL_168;
  }
LABEL_169:
  ubrk_close();
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v97.__r_.__value_.__l.__data_);
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v98.__r_.__value_.__l.__data_);
  if (v71)
    MEMORY[0x1C3B8D878](v71, 0x1000C80BDFB0063);
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v100.__r_.__value_.__l.__data_);
}

void sub_1BF869B94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44)
{
  uint64_t v44;
  uint64_t v45;

  if (*(char *)(v45 - 105) < 0)
    operator delete(*(void **)(v45 - 128));
  if (a30 < 0)
    operator delete(__p);
  if (a36 < 0)
    operator delete(a31);
  if (a42 < 0)
    operator delete(a37);
  if (a44)
    MEMORY[0x1C3B8D878](a44, 0x1000C80BDFB0063);
  if (*(char *)(v45 - 129) < 0)
    operator delete(*(void **)(v45 - 152));
  *(_QWORD *)(v45 - 152) = v44;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v45 - 152));
  _Unwind_Resume(a1);
}

std::basic_string<char32_t> *__cdecl std::basic_string<char32_t>::operator=(std::basic_string<char32_t> *this, const std::basic_string<char32_t> *__str)
{
  __int128 v2;
  std::basic_string<char32_t>::size_type size;
  std::basic_string<char32_t>::size_type v4;

  if (this != __str)
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    {
      size = __str->__r_.__value_.__l.__size_;
      if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      {
        v4 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
      }
      else
      {
        __str = (const std::basic_string<char32_t> *)__str->__r_.__value_.__r.__words[0];
        v4 = size;
      }
      return std::basic_string<char32_t>::__assign_no_alias<false>(this, (const std::basic_string<char32_t>::value_type *)__str, v4);
    }
    else if ((*((_BYTE *)&__str->__r_.__value_.__s + 23) & 0x80) != 0)
    {
      return std::basic_string<char32_t>::__assign_no_alias<true>(this, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
    }
    else
    {
      v2 = *(_OWORD *)&__str->__r_.__value_.__l.__data_;
      this->__r_.__value_.__r.__words[2] = __str->__r_.__value_.__r.__words[2];
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v2;
    }
  }
  return this;
}

std::basic_string<char32_t> *std::basic_string<char32_t>::__assign_no_alias<true>(std::basic_string<char32_t> *__dst, const std::basic_string<char32_t>::value_type *__src, std::basic_string<char32_t>::size_type __n_add)
{
  BOOL v5;
  std::basic_string<char32_t>::size_type v6;

  v5 = __n_add > 4;
  v6 = __n_add - 4;
  if (v5)
  {
    std::basic_string<char32_t>::__grow_by_and_replace(__dst, 4uLL, v6, *((_BYTE *)&__dst->__r_.__value_.__s + 23) & 0x7F, 0, *((_BYTE *)&__dst->__r_.__value_.__s + 23) & 0x7F, __n_add, __src);
  }
  else
  {
    *((_BYTE *)&__dst->__r_.__value_.__s + 23) = __n_add;
    if (__n_add)
      memmove(__dst, __src, 4 * __n_add);
    __dst->__r_.__value_.__s.__data_[__n_add] = 0;
  }
  return __dst;
}

std::basic_string<char32_t> *std::basic_string<char32_t>::__assign_no_alias<false>(std::basic_string<char32_t> *this, const std::basic_string<char32_t>::value_type *__src, std::basic_string<char32_t>::size_type __n_add)
{
  std::basic_string<char32_t>::size_type v5;
  void *v6;

  v5 = this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL;
  if (v5 <= __n_add)
  {
    std::basic_string<char32_t>::__grow_by_and_replace(this, v5 - 1, __n_add - v5 + 1, this->__r_.__value_.__l.__size_, 0, this->__r_.__value_.__l.__size_, __n_add, __src);
  }
  else
  {
    v6 = (void *)this->__r_.__value_.__r.__words[0];
    this->__r_.__value_.__l.__size_ = __n_add;
    if (__n_add)
      memmove(v6, __src, 4 * __n_add);
    *((_DWORD *)v6 + __n_add) = 0;
  }
  return this;
}

void siri::dialogengine::FormatList(siri::dialogengine *a1@<X0>, siri::dialogengine::Context *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, __int128 **a12)
{
  const char *v20;
  morphun::dialog::LocalizedCommonConceptFactoryProvider *v21;
  const char *v22;
  unint64_t v23;
  uint64_t DefaultCommonConceptFactoryProvider;
  uint64_t v25;
  const siri::dialogengine::SpeakableString *v26;
  const morphun::dialog::SemanticFeatureModel *v27;
  uint64_t v28;
  unint64_t v29;
  morphun::dialog::InflectableStringConcept **v30;
  morphun::dialog::InflectableStringConcept **v31;
  morphun::dialog::InflectableStringConcept **v32;
  morphun::dialog::InflectableStringConcept **v33;
  morphun::dialog::InflectableStringConcept *v34;
  siri::dialogengine *v35;
  uint64_t v36;
  uint64_t v37;
  morphun::dialog::InflectableStringConcept *v38;
  morphun::dialog::InflectableStringConcept **v39;
  morphun::dialog::InflectableStringConcept **v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  morphun::dialog::InflectableStringConcept **v45;
  morphun::dialog::InflectableStringConcept **v46;
  morphun::dialog::InflectableStringConcept **v47;
  morphun::dialog::InflectableStringConcept *v48;
  _WORD *v49;
  int v50;
  siri::dialogengine::Context *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  std::string *v72;
  __int128 v73;
  std::string *v74;
  __int128 v75;
  morphun::dialog::InflectableStringConcept **v76;
  morphun::dialog::InflectableStringConcept **v77;
  siri::dialogengine::SpeakableString **v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  std::string __str;
  std::string v84;
  std::string v85;
  std::string v86;
  std::string v87;
  std::string v88;
  std::string __p;
  std::string v90;
  std::string __dst;
  morphun::dialog::InflectableStringConcept **v92;
  morphun::dialog::InflectableStringConcept **v93;
  morphun::dialog::InflectableStringConcept **v94;
  void *v95[2];
  unsigned __int8 v96;

  if (*(_QWORD *)a2 == *((_QWORD *)a2 + 1))
  {
    *(_QWORD *)(a9 + 160) = 0;
    *(_OWORD *)(a9 + 128) = 0u;
    *(_OWORD *)(a9 + 144) = 0u;
    *(_OWORD *)(a9 + 96) = 0u;
    *(_OWORD *)(a9 + 112) = 0u;
    *(_OWORD *)(a9 + 64) = 0u;
    *(_OWORD *)(a9 + 80) = 0u;
    *(_OWORD *)(a9 + 32) = 0u;
    *(_OWORD *)(a9 + 48) = 0u;
    *(_OWORD *)a9 = 0u;
    *(_OWORD *)(a9 + 16) = 0u;
    return;
  }
  siri::dialogengine::RegisterMorphunData(a1, a2);
  *(_QWORD *)(a9 + 160) = 0;
  *(_OWORD *)(a9 + 128) = 0u;
  *(_OWORD *)(a9 + 144) = 0u;
  *(_OWORD *)(a9 + 96) = 0u;
  *(_OWORD *)(a9 + 112) = 0u;
  *(_OWORD *)(a9 + 64) = 0u;
  *(_OWORD *)(a9 + 80) = 0u;
  *(_OWORD *)(a9 + 32) = 0u;
  *(_OWORD *)(a9 + 48) = 0u;
  *(_OWORD *)a9 = 0u;
  *(_OWORD *)(a9 + 16) = 0u;
  if (a1)
    siri::dialogengine::Context::GetLocale(a1, v20, (uint64_t)v95);
  else
    v21 = (morphun::dialog::LocalizedCommonConceptFactoryProvider *)std::string::basic_string[abi:ne180100]<0>(v95, "");
  v23 = v96;
  if ((v96 & 0x80u) != 0)
    v23 = (unint64_t)v95[1];
  if (!v23)
    siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"FormatList has empty locale", v22);
  v78 = (siri::dialogengine::SpeakableString **)a2;
  DefaultCommonConceptFactoryProvider = morphun::dialog::LocalizedCommonConceptFactoryProvider::getDefaultCommonConceptFactoryProvider(v21);
  v92 = 0;
  v93 = 0;
  v94 = 0;
  memset(&__dst, 0, sizeof(__dst));
  memset(&v90, 0, sizeof(v90));
  morphun::util::ULocale::ULocale();
  v25 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)DefaultCommonConceptFactoryProvider + 24))(DefaultCommonConceptFactoryProvider, &__str);
  morphun::util::ULocale::~ULocale((morphun::util::ULocale *)&__str);
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v90.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (SHIBYTE(v94) < 0)
    operator delete(v92);
  v81 = a6;
  v27 = (const morphun::dialog::SemanticFeatureModel *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 24))(v25);
  v79 = a7;
  v80 = a8;
  v92 = 0;
  v93 = 0;
  v94 = 0;
  v28 = *((_QWORD *)a2 + 1) - *(_QWORD *)a2;
  if (v28)
  {
    v29 = 0xCF3CF3CF3CF3CF3DLL * (v28 >> 3);
    if (v29 >> 61)
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    v30 = (morphun::dialog::InflectableStringConcept **)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v29);
    v32 = v92;
    v31 = v93;
    v33 = v30;
    if (v93 != v92)
    {
      do
      {
        v34 = *--v31;
        *--v33 = v34;
      }
      while (v31 != v32);
      v31 = v92;
    }
    v92 = v33;
    v93 = v30;
    v94 = &v30[(_QWORD)v26];
    if (v31)
      operator delete(v31);
  }
  v35 = a1;
  v36 = *(_QWORD *)a2;
  v37 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)a2 != v37)
  {
    do
    {
      if (*(char *)(v36 + 47) < 0)
      {
        if (*(_QWORD *)(v36 + 32))
          goto LABEL_32;
      }
      else if (*(_BYTE *)(v36 + 47))
      {
        goto LABEL_32;
      }
      if (*(char *)(v36 + 23) < 0)
      {
        if (*(_QWORD *)(v36 + 8))
        {
LABEL_32:
          siri::dialogengine::SpeakableStringToMorphun((siri::dialogengine *)v36, v26);
          v38 = (morphun::dialog::InflectableStringConcept *)operator new();
          morphun::dialog::InflectableStringConcept::InflectableStringConcept(v38, v27, (const morphun::dialog::SpeakableString *)&__str);
          v39 = v93;
          if (v93 >= v94)
          {
            v41 = v93 - v92;
            if ((unint64_t)(v41 + 1) >> 61)
              std::vector<BOOL>::__throw_length_error[abi:ne180100]();
            v42 = ((char *)v94 - (char *)v92) >> 2;
            if (v42 <= v41 + 1)
              v42 = v41 + 1;
            if ((unint64_t)((char *)v94 - (char *)v92) >= 0x7FFFFFFFFFFFFFF8)
              v43 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v43 = v42;
            if (v43)
              v43 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v43);
            else
              v44 = 0;
            v45 = (morphun::dialog::InflectableStringConcept **)(v43 + 8 * v41);
            *v45 = v38;
            v40 = v45 + 1;
            v47 = v92;
            v46 = v93;
            if (v93 != v92)
            {
              do
              {
                v48 = *--v46;
                *--v45 = v48;
              }
              while (v46 != v47);
              v46 = v92;
            }
            v92 = v45;
            v93 = v40;
            v94 = (morphun::dialog::InflectableStringConcept **)(v43 + 8 * v44);
            if (v46)
              operator delete(v46);
          }
          else
          {
            *v93 = v38;
            v40 = v39 + 1;
          }
          v93 = v40;
          morphun::dialog::SpeakableString::~SpeakableString((morphun::dialog::SpeakableString *)&__str);
        }
      }
      else if (*(_BYTE *)(v36 + 23))
      {
        goto LABEL_32;
      }
      v36 += 168;
    }
    while (v36 != v37);
  }
  v49 = (_WORD *)a3;
  if (*(char *)(a3 + 23) < 0)
  {
    v58 = *(_QWORD *)(a3 + 8);
    v51 = v35;
    v53 = v79;
    v52 = v80;
    v55 = a5;
    v54 = v81;
    v56 = a4;
    if (v58 != 2)
    {
      if (v58 != 3)
        goto LABEL_69;
      if (**(_WORD **)a3 != 28257 || *(_BYTE *)(*(_QWORD *)a3 + 2) != 100)
        goto LABEL_69;
LABEL_66:
      v60 = 9;
      goto LABEL_77;
    }
    v49 = *(_WORD **)a3;
  }
  else
  {
    v50 = *(unsigned __int8 *)(a3 + 23);
    v51 = v35;
    v53 = v79;
    v52 = v80;
    v55 = a5;
    v54 = v81;
    v56 = a4;
    if (v50 != 2)
    {
      if (v50 != 3)
        goto LABEL_69;
      if (*(_WORD *)a3 != 28257 || *(_BYTE *)(a3 + 2) != 100)
        goto LABEL_69;
      goto LABEL_66;
    }
  }
  if (*v49 != 29295)
  {
LABEL_69:
    v61 = (const char *)(*(uint64_t (**)(uint64_t, morphun::dialog::InflectableStringConcept ***))(*(_QWORD *)v25 + 72))(v25, &v92);
    v62 = *(unsigned __int8 *)(v54 + 23);
    if ((v62 & 0x80u) != 0)
      v62 = *(_QWORD *)(v54 + 8);
    if (v62)
      morphun::util::StringUtils::to_u16string();
    else
      std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(&__dst, (char *)L", ");
    morphun::dialog::SpeakableString::SpeakableString();
    (*(void (**)(const char *, std::string *))(*(_QWORD *)v61 + 184))(v61, &__str);
    morphun::dialog::SpeakableString::~SpeakableString((morphun::dialog::SpeakableString *)&__str);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    goto LABEL_78;
  }
  v60 = 7;
LABEL_77:
  v61 = (const char *)(*(uint64_t (**)(uint64_t, morphun::dialog::InflectableStringConcept ***))(*(_QWORD *)v25 + 8 * v60))(v25, &v92);
LABEL_78:
  v63 = *(unsigned __int8 *)(v56 + 23);
  if ((v63 & 0x80u) != 0)
    v63 = *(_QWORD *)(v56 + 8);
  if (v63)
  {
    morphun::util::StringUtils::to_u16string();
    morphun::dialog::SpeakableString::SpeakableString();
    (*(void (**)(const char *, std::string *))(*(_QWORD *)v61 + 136))(v61, &__str);
    morphun::dialog::SpeakableString::~SpeakableString((morphun::dialog::SpeakableString *)&__str);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
  }
  v64 = *(unsigned __int8 *)(v55 + 23);
  if ((v64 & 0x80u) != 0)
    v64 = *(_QWORD *)(v55 + 8);
  if (v64)
  {
    morphun::util::StringUtils::to_u16string();
    morphun::dialog::SpeakableString::SpeakableString();
    (*(void (**)(const char *, std::string *))(*(_QWORD *)v61 + 152))(v61, &__str);
    morphun::dialog::SpeakableString::~SpeakableString((morphun::dialog::SpeakableString *)&__str);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
  }
  v65 = *(unsigned __int8 *)(v54 + 23);
  if ((v65 & 0x80u) != 0)
    v65 = *(_QWORD *)(v54 + 8);
  if (v65)
  {
    morphun::util::StringUtils::to_u16string();
    morphun::dialog::SpeakableString::SpeakableString();
    (*(void (**)(const char *, std::string *))(*(_QWORD *)v61 + 168))(v61, &__str);
    morphun::dialog::SpeakableString::~SpeakableString((morphun::dialog::SpeakableString *)&__str);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
  }
  v66 = *(unsigned __int8 *)(v53 + 23);
  if ((v66 & 0x80u) != 0)
    v66 = *(_QWORD *)(v53 + 8);
  if (v66)
  {
    morphun::util::StringUtils::to_u16string();
    morphun::dialog::SpeakableString::SpeakableString();
    (*(void (**)(const char *, std::string *))(*(_QWORD *)v61 + 184))(v61, &__str);
    morphun::dialog::SpeakableString::~SpeakableString((morphun::dialog::SpeakableString *)&__str);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
  }
  v67 = *(unsigned __int8 *)(v52 + 23);
  if ((v67 & 0x80u) != 0)
    v67 = *(_QWORD *)(v52 + 8);
  if (v67)
  {
    morphun::util::StringUtils::to_u16string();
    morphun::dialog::SpeakableString::SpeakableString();
    (*(void (**)(const char *, std::string *))(*(_QWORD *)v61 + 200))(v61, &__str);
    morphun::dialog::SpeakableString::~SpeakableString((morphun::dialog::SpeakableString *)&__str);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
  }
  v68 = *(unsigned __int8 *)(a10 + 23);
  if ((v68 & 0x80u) != 0)
    v68 = *(_QWORD *)(a10 + 8);
  if (v68)
  {
    morphun::util::StringUtils::to_u16string();
    morphun::dialog::SpeakableString::SpeakableString();
    (*(void (**)(const char *, std::string *))(*(_QWORD *)v61 + 216))(v61, &__str);
    morphun::dialog::SpeakableString::~SpeakableString((morphun::dialog::SpeakableString *)&__str);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
  }
  v69 = *(unsigned __int8 *)(a11 + 23);
  if ((v69 & 0x80u) != 0)
    v69 = *(_QWORD *)(a11 + 8);
  if (v69)
  {
    morphun::util::StringUtils::to_u16string();
    morphun::dialog::SpeakableString::SpeakableString();
    (*(void (**)(const char *, std::string *))(*(_QWORD *)v61 + 232))(v61, &__str);
    morphun::dialog::SpeakableString::~SpeakableString((morphun::dialog::SpeakableString *)&__str);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
  }
  siri::dialogengine::InflectConcept(v51, v61, a12, (uint64_t)&__str);
  std::string::operator=((std::string *)a9, &__str);
  std::string::operator=((std::string *)(a9 + 24), &v84);
  std::string::operator=((std::string *)(a9 + 48), &v85);
  std::string::operator=((std::string *)(a9 + 72), &v86);
  std::string::operator=((std::string *)(a9 + 96), &v87);
  std::string::operator=((std::string *)(a9 + 120), &v88);
  std::string::operator=((std::string *)(a9 + 144), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v88.__r_.__value_.__l.__data_);
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v87.__r_.__value_.__l.__data_);
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v86.__r_.__value_.__l.__data_);
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v85.__r_.__value_.__l.__data_);
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v84.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v70 = *(unsigned __int8 *)(a9 + 47);
  if ((v70 & 0x80u) != 0)
    v70 = *(_QWORD *)(a9 + 32);
  if (!v70)
  {
    v71 = *(unsigned __int8 *)(a9 + 23);
    if ((v71 & 0x80u) != 0)
      v71 = *(_QWORD *)(a9 + 8);
    if (!v71)
    {
      siri::dialogengine::SemanticFeatureConstraint::ToString(a12, (uint64_t)&v90);
      v72 = std::string::insert(&v90, 0, "Failed to inflect list with constraints '");
      v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
      __dst.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v73;
      v72->__r_.__value_.__l.__size_ = 0;
      v72->__r_.__value_.__r.__words[2] = 0;
      v72->__r_.__value_.__r.__words[0] = 0;
      v74 = std::string::append(&__dst, "'. Falling back to generic list.");
      v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v75;
      v74->__r_.__value_.__l.__size_ = 0;
      v74->__r_.__value_.__r.__words[2] = 0;
      v74->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Log::LogWithLevel((uint64_t)&__str, 3u);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v90.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&__dst, ", ");
      siri::dialogengine::SpeakableString::Join(v78, (uint64_t)&__dst, (uint64_t)&__str);
    }
  }
  if (v61)
    (*(void (**)(const char *))(*(_QWORD *)v61 + 16))(v61);
  v76 = v92;
  v77 = v93;
  if (v92 != v93)
  {
    do
    {
      if (*v76)
        (*(void (**)(morphun::dialog::InflectableStringConcept *))(*(_QWORD *)*v76 + 16))(*v76);
      ++v76;
    }
    while (v76 != v77);
    v76 = v92;
  }
  if (v76)
  {
    v93 = v76;
    operator delete(v76);
  }
  if ((char)v96 < 0)
    operator delete(v95[0]);
}

void sub_1BF86A924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, siri::dialogengine::SpeakableString **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int128 __p, uint64_t a18)
{
  void **v18;
  uint64_t v19;
  void *v22;
  void *v23;
  char *v24;
  std::string *v25;
  std::string *v26;
  __int128 v27;
  const char *v28;

  if (*(char *)(v19 - 137) < 0)
    operator delete(*(void **)(v19 - 160));
  v22 = *(void **)(v19 - 136);
  if (v22)
  {
    *(_QWORD *)(v19 - 128) = v22;
    operator delete(v22);
  }
  if (a2 == 1)
  {
    v23 = __cxa_begin_catch(a1);
    v24 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v23 + 16))(v23);
    v25 = (std::string *)std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v19 - 136), v24);
    v26 = std::string::insert(v25, 0, "morphun::dialog::CommonConceptFactory creation failed: ");
    v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    a18 = v26->__r_.__value_.__r.__words[2];
    __p = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)&__p, 3u);
    if (SHIBYTE(a18) < 0)
      operator delete((void *)__p);
    if (*(char *)(v19 - 113) < 0)
      operator delete(*(void **)(v19 - 136));
    __cxa_end_catch();
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Unable to use Morphun for list formatting. Falling back to generic list.", v28);
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v19 - 136), ", ");
    siri::dialogengine::SpeakableString::Join(a10, v19 - 136, (uint64_t)&__p);
  }
  if (*(char *)(v19 - 89) < 0)
    operator delete(*(void **)(v19 - 112));
  siri::dialogengine::SpeakableString::~SpeakableString(v18);
  _Unwind_Resume(a1);
}

void sub_1BF86ABF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  siri::dialogengine::SpeakableString::~SpeakableString((void **)va);
  if (*(char *)(v8 - 113) < 0)
    operator delete(*(void **)(v8 - 136));
  JUMPOUT(0x1BF86A990);
}

void sub_1BF86AC28(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a22 < 0)
    operator delete(__p);
  if (*(char *)(v22 - 113) < 0)
    operator delete(*(void **)(v22 - 136));
  __cxa_end_catch();
  JUMPOUT(0x1BF86A990);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(unint64_t a1)
{
  if (a1 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a1);
}

_QWORD *std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(_QWORD *__dst, char *__src)
{
  unint64_t v4;
  char *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_WORD *)__src)
  {
    v4 = 0;
    do
      v5 = &__src[2 * v4++];
    while (*((_WORD *)v5 + 1));
    if (v4 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    if (v4 >= 0xB)
    {
      v7 = (v4 & 0xFFFFFFFFFFFFFFFCLL) + 4;
      if ((v4 | 3) != 0xB)
        v7 = v4 | 3;
      v6 = std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>(v7 + 1);
      __dst[1] = v4;
      __dst[2] = v8 | 0x8000000000000000;
      *__dst = v6;
    }
    else
    {
      *((_BYTE *)__dst + 23) = v4;
      v6 = __dst;
      if (!v4)
        goto LABEL_9;
    }
    memmove(v6, __src, 2 * v4);
    goto LABEL_14;
  }
  v4 = 0;
  *((_BYTE *)__dst + 23) = 0;
LABEL_9:
  v6 = __dst;
LABEL_14:
  *((_WORD *)v6 + v4) = 0;
  return __dst;
}

std::string *siri::dialogengine::SpeakableString::operator=(std::string *a1, const std::string *a2)
{
  std::string::operator=(a1, a2);
  std::string::operator=(a1 + 1, a2 + 1);
  std::string::operator=(a1 + 2, a2 + 2);
  std::string::operator=(a1 + 3, a2 + 3);
  std::string::operator=(a1 + 4, a2 + 4);
  std::string::operator=(a1 + 5, a2 + 5);
  std::string::operator=(a1 + 6, a2 + 6);
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>(uint64_t a1)
{
  if (a1 < 0)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(2 * a1);
}

void InitDefaultsscc_info_ActionProperty_ActionProperty_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ActionProperty.pb.cc", a4);
  SnippetUI::ActionProperty::ActionProperty((SnippetUI::ActionProperty *)&SnippetUI::_ActionProperty_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_ActionProperty_default_instance_, v4);
}

SnippetUI::ActionProperty *SnippetUI::ActionProperty::ActionProperty(SnippetUI::ActionProperty *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)this = &off_1E792A970;
  *((_DWORD *)this + 12) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  if (atomic_load(scc_info_ActionProperty_ActionProperty_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_ActionProperty_ActionProperty_2eproto);
  *((_QWORD *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

void sub_1BF86AEC0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((google::protobuf::internal::RepeatedPtrFieldBase *)(v1 + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

void SnippetUI::ActionProperty::~ActionProperty(SnippetUI::ActionProperty *this)
{
  SnippetUI::ActionProperty::~ActionProperty(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E792A970;
  v2 = *((_QWORD *)this + 5);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField((SnippetUI::ActionProperty *)((char *)this + 16));
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::ActionProperty *SnippetUI::ActionProperty::New(SnippetUI::ActionProperty *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
}

SnippetUI::ActionProperty *SnippetUI::ActionProperty::New(SnippetUI::ActionProperty *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(a2);
}

void SnippetUI::ActionProperty::Clear(SnippetUI::ActionProperty *this)
{
  uint64_t v2;
  google::protobuf::internal::InternalMetadataWithArena *v3;
  char v4;

  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::ActionElement>::TypeHandler>((uint64_t)this + 16);
  v2 = *((_QWORD *)this + 5);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v4 = *((_BYTE *)this + 8);
  v3 = (SnippetUI::ActionProperty *)((char *)this + 8);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v3);
}

uint64_t SnippetUI::ActionProperty::IsInitialized(SnippetUI::ActionProperty *this)
{
  return 1;
}

char *SnippetUI::ActionProperty::ByteSizeLong(SnippetUI::ActionProperty *this)
{
  const google::protobuf::UnknownFieldSet *v2;
  uint64_t v3;
  SnippetUI::ActionElement **v4;
  uint64_t v5;
  SnippetUI::ActionElement *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = (const google::protobuf::UnknownFieldSet *)*((int *)this + 6);
  v3 = *((_QWORD *)this + 4);
  if (v3)
    v4 = (SnippetUI::ActionElement **)(v3 + 8);
  else
    v4 = 0;
  if ((_DWORD)v2)
  {
    v5 = 8 * (_QWORD)v2;
    do
    {
      v6 = *v4++;
      v7 = SnippetUI::ActionElement::ByteSizeLong(v6);
      v2 = (const google::protobuf::UnknownFieldSet *)((char *)v2
                                                     + (_QWORD)v7
                                                     + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6));
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    v2 = 0;
  }
  v8 = *((_QWORD *)this + 5);
  v9 = *(unsigned __int8 *)(v8 + 23);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(_QWORD *)(v8 + 8))
      goto LABEL_14;
  }
  else if (!*(_BYTE *)(v8 + 23))
  {
    goto LABEL_14;
  }
  v10 = *(_QWORD *)(v8 + 8);
  if ((v9 & 0x80u) == 0)
    v10 = v9;
  v2 = (const google::protobuf::UnknownFieldSet *)((char *)v2 + v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_14:
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::ActionProperty *)((char *)this + 8), v2, (_DWORD *)this + 12);
  *((_DWORD *)this + 12) = (_DWORD)v2;
  return (char *)v2;
}

uint64_t SnippetUI::ActionProperty::GetCachedSize(SnippetUI::ActionProperty *this)
{
  return *((unsigned int *)this + 12);
}

google::protobuf::internal *SnippetUI::ActionProperty::_InternalParse(SnippetUI::ActionProperty *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  unsigned int *v6;
  uint64_t *v7;
  google::protobuf::internal::ParseContext *v8;
  google::protobuf::internal *TagFallback;
  char *v10;
  BOOL v12;
  char *v13;
  std::string *v14;
  google::protobuf::internal *v15;
  google::protobuf::internal *v16;
  int *v17;
  uint64_t v18;
  int v19;
  SnippetUI::ActionElement *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  char *v24;
  char *SizeFallback;
  unsigned int v26;
  int v27;
  int v28;
  BOOL v29;
  int v30;
  int v31;
  unint64_t v32;
  google::protobuf::internal *v34;

  v34 = a2;
  v5 = (std::string **)((char *)this + 40);
  v6 = (unsigned int *)((char *)this + 16);
  v7 = (uint64_t *)((char *)this + 8);
  do
  {
LABEL_2:
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v34, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v34;
    TagFallback = (google::protobuf::internal *)((char *)v34 + 1);
    v10 = (char *)*(unsigned __int8 *)v34;
    if ((*(char *)v34 & 0x80000000) == 0)
      goto LABEL_6;
    v10 = (char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v34 + 2);
LABEL_6:
      v34 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v34, v10);
    v34 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    if (v10 >> 3 != 2)
    {
      if (v10 >> 3 != 1 || v10 != 10)
        goto LABEL_12;
      v15 = (google::protobuf::internal *)((char *)TagFallback - 1);
      while (1)
      {
        v16 = (google::protobuf::internal *)((char *)v15 + 1);
        v34 = v16;
        v17 = (int *)*((_QWORD *)this + 4);
        if (!v17)
          break;
        v18 = *((int *)this + 6);
        v19 = *v17;
        if ((int)v18 < *v17)
        {
          *((_DWORD *)this + 6) = v18 + 1;
          v20 = *(SnippetUI::ActionElement **)&v17[2 * v18 + 2];
          goto LABEL_31;
        }
        if (v19 == *((_DWORD *)this + 7))
          goto LABEL_29;
LABEL_30:
        *v17 = v19 + 1;
        v20 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionElement>(*((google::protobuf::internal::ArenaImpl **)this
                                                                                    + 2));
        v21 = *((_QWORD *)this + 4);
        v22 = *((int *)this + 6);
        *((_DWORD *)this + 6) = v22 + 1;
        *(_QWORD *)(v21 + 8 * v22 + 8) = v20;
        v16 = v34;
LABEL_31:
        v23 = *(unsigned __int8 *)v16;
        if (*(char *)v16 < 0)
        {
          SizeFallback = google::protobuf::internal::ReadSizeFallback(v16, (const char *)*(unsigned __int8 *)v16);
          if (!SizeFallback)
            return 0;
          v24 = SizeFallback;
          v23 = v26;
        }
        else
        {
          v24 = (char *)v16 + 1;
        }
        v27 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v24, v23);
        v28 = *((_DWORD *)a3 + 22);
        v29 = __OFSUB__(v28--, 1);
        *((_DWORD *)a3 + 22) = v28;
        if (v28 < 0 != v29)
          return 0;
        v30 = v27;
        v15 = SnippetUI::ActionElement::_InternalParse(v20, (google::protobuf::internal *)v24, a3);
        if (!v15)
          return 0;
        ++*((_DWORD *)a3 + 22);
        if (*((_DWORD *)a3 + 20))
          return 0;
        v31 = *((_DWORD *)a3 + 7) + v30;
        *((_DWORD *)a3 + 7) = v31;
        v32 = *((_QWORD *)a3 + 1) + (v31 & (v31 >> 31));
        *(_QWORD *)a3 = v32;
        v34 = v15;
        if (v32 <= (unint64_t)v15 || *(_BYTE *)v15 != 10)
          goto LABEL_2;
      }
      v19 = *((_DWORD *)this + 7);
LABEL_29:
      google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v19 + 1);
      v17 = (int *)*((_QWORD *)this + 4);
      v19 = *v17;
      goto LABEL_30;
    }
    if (v10 == 18)
    {
      v14 = *v5;
      if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        v14 = *v5;
        TagFallback = v34;
      }
      v13 = google::protobuf::internal::InlineGreedyStringParserUTF8(v14, (std::string::value_type *)TagFallback, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.ActionProperty.action_name");
      goto LABEL_21;
    }
LABEL_12:
    if ((_DWORD)v10)
      v12 = (v10 & 7) == 4;
    else
      v12 = 1;
    if (v12)
    {
      *((_DWORD *)a3 + 20) = (_DWORD)v10 - 1;
      return TagFallback;
    }
    v13 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v7, TagFallback, a3, v8);
LABEL_21:
    v34 = (google::protobuf::internal *)v13;
  }
  while (v13);
  return 0;
}

const google::protobuf::UnknownFieldSet *SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(SnippetUI::ActionProperty *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  int v7;
  int v8;
  std::string *v9;
  std::string *v10;
  SnippetUI::ActionElement *v11;
  unsigned int v12;
  google::protobuf::UnknownFieldSet *v13;
  unsigned int v14;
  _BYTE *v15;
  _BYTE *v16;
  unsigned int v17;
  unsigned int v18;
  google::protobuf::internal *v19;
  const char *v20;
  uint64_t v21;
  char v23;
  std::string v24[2];

  v7 = *((_DWORD *)this + 6);
  if (v7)
  {
    v8 = 0;
    while ((unint64_t)a2 < *(_QWORD *)a3)
    {
      if (v8 < 0)
        goto LABEL_5;
LABEL_6:
      if (*((_DWORD *)this + 6) <= v8)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v24, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1539);
        v10 = google::protobuf::internal::LogMessage::operator<<(v24, "CHECK failed: (index) < (current_size_): ");
        google::protobuf::internal::LogFinisher::operator=((int)&v23, (const char **)&v10->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v24[0].__r_.__value_.__l.__data_);
      }
      v11 = *(SnippetUI::ActionElement **)(*((_QWORD *)this + 4) + 8 * v8 + 8);
      *(_BYTE *)a2 = 10;
      v12 = *((_DWORD *)v11 + 18);
      if (v12 > 0x7F)
      {
        *((_BYTE *)a2 + 1) = v12 | 0x80;
        v14 = v12 >> 7;
        if (v12 >> 14)
        {
          v15 = (char *)a2 + 2;
          do
          {
            v16 = v15;
            *v15++ = v14 | 0x80;
            v17 = v14 >> 7;
            v18 = v14 >> 14;
            v14 >>= 7;
          }
          while (v18);
          v13 = (google::protobuf::UnknownFieldSet *)(v16 + 2);
          *v15 = v17;
        }
        else
        {
          *((_BYTE *)a2 + 2) = v14;
          v13 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 3);
        }
      }
      else
      {
        *((_BYTE *)a2 + 1) = v12;
        v13 = (google::protobuf::UnknownFieldSet *)((char *)a2 + 2);
      }
      a2 = SnippetUI::ActionElement::InternalSerializeWithCachedSizesToArray(v11, v13, a3, a4);
      if (++v8 == v7)
        goto LABEL_19;
    }
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    if ((v8 & 0x80000000) == 0)
      goto LABEL_6;
LABEL_5:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v24, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1538);
    v9 = google::protobuf::internal::LogMessage::operator<<(v24, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v23, (const char **)&v9->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v24[0].__r_.__value_.__l.__data_);
    goto LABEL_6;
  }
LABEL_19:
  v19 = (google::protobuf::internal *)*((_QWORD *)this + 5);
  if (*((char *)v19 + 23) < 0)
  {
    v20 = (const char *)*((_QWORD *)v19 + 1);
    if (!v20)
      goto LABEL_25;
    v19 = *(google::protobuf::internal **)v19;
    goto LABEL_24;
  }
  v20 = (const char *)*((unsigned __int8 *)v19 + 23);
  if (*((_BYTE *)v19 + 23))
  {
LABEL_24:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v19, v20, 1, (google::protobuf::internal *)"SnippetUI.ActionProperty.action_name");
    a2 = (google::protobuf::UnknownFieldSet *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((_QWORD *)this + 5), (char *)a2);
  }
LABEL_25:
  v21 = *((_QWORD *)this + 1);
  if ((v21 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v21 & 0xFFFFFFFFFFFFFFFELL), a2, a3, a4);
  else
    return a2;
}

void sub_1BF86B550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::ActionProperty::CopyFrom(int **this, int **a2)
{
  if (a2 != this)
  {
    SnippetUI::ActionProperty::Clear((SnippetUI::ActionProperty *)this);
    SnippetUI::ActionProperty::MergeFrom(this, a2);
  }
}

{
  if (a2 != this)
  {
    SnippetUI::ActionProperty::Clear((SnippetUI::ActionProperty *)this);
    SnippetUI::ActionProperty::MergeFrom(this, a2);
  }
}

void SnippetUI::ActionProperty::MergeFrom(int **this, int **lpsrc)
{
  std::string *v4;
  int **v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ActionProperty.pb.cc", 258);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::ActionProperty::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge((google::protobuf::internal::ReflectionOps *)lpsrc, (const google::protobuf::Message *)this, v6);
}

void sub_1BF86B650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::ActionProperty::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 48) = a2;
  return this;
}

uint64_t SnippetUI::ActionProperty::GetMetadata(SnippetUI::ActionProperty *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ActionProperty_2eproto);
  return file_level_metadata_ActionProperty_2eproto;
}

void *SnippetUI::ActionProperty::default_instance(SnippetUI::ActionProperty *this)
{
  if (atomic_load(scc_info_ActionProperty_ActionProperty_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_ActionProperty_ActionProperty_2eproto);
  return &SnippetUI::_ActionProperty_default_instance_;
}

void SnippetUI::ActionProperty::MergeFrom(int **this, int **a2)
{
  std::string *v4;
  unint64_t v5;
  uint64_t v6;
  std::string *v7;
  std::string **v8;
  std::string *v9;
  char v10;
  std::string v11[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ActionProperty.pb.cc", 273);
    v4 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  v5 = (unint64_t)a2[1];
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((google::protobuf::internal::InternalMetadataWithArena *)(this + 1), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::ActionElement>::TypeHandler>(this + 2, (uint64_t)(a2 + 2));
  v6 = (uint64_t)a2[5];
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      return;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    return;
  }
  v9 = (std::string *)this[5];
  v8 = (std::string **)(this + 5);
  v7 = v9;
  if (v9 != (std::string *)v6)
  {
    if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v8, v6);
    else
      std::string::operator=(v7, (const std::string *)v6);
  }
}

void sub_1BF86B7A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::ActionElement>::TypeHandler>(int **this, uint64_t a2)
{
  std::string *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  const SnippetUI::ActionElement **v13;
  SnippetUI::ActionElement **v14;
  const SnippetUI::ActionElement *v15;
  const SnippetUI::ActionElement *v16;
  SnippetUI::ActionElement *v17;
  google::protobuf::internal::ArenaImpl *v18;
  int v19;
  uint64_t v20;
  SnippetUI::ActionElement **v21;
  const SnippetUI::ActionElement **v22;
  const SnippetUI::ActionElement *v23;
  SnippetUI::ActionElement *v24;
  int v25;
  int *v26;
  char v27;
  std::string v28[2];

  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1632);
    v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    v9 = *this[2];
    v10 = *((int *)this + 2);
    v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5)
      v12 = v5;
    else
      v12 = v11;
    if ((int)v12 >= 1)
    {
      v13 = (const SnippetUI::ActionElement **)(v6 + 8);
      v14 = (SnippetUI::ActionElement **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<SnippetUI::ActionElement>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      v19 = v10 + v5 - v9;
      v20 = 8 * v9 - 8 * v10;
      v21 = (SnippetUI::ActionElement **)((char *)v8 + v20);
      v22 = (const SnippetUI::ActionElement **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionElement>(v18);
        google::protobuf::internal::GenericTypeHandler<SnippetUI::ActionElement>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25)
      *v26 = v25;
  }
}

void sub_1BF86B914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<SnippetUI::ActionElement>::Merge(const SnippetUI::ActionElement *a1, SnippetUI::ActionElement *a2)
{
  SnippetUI::ActionElement::MergeFrom(a2, a1);
}

void google::protobuf::internal::arena_destruct_object<google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::Container>(google::protobuf::UnknownFieldSet *this)
{
  void *v2;

  v2 = *(void **)this;
  if (v2 != *((void **)this + 1))
  {
    google::protobuf::UnknownFieldSet::ClearFallback(this);
    v2 = *(void **)this;
  }
  if (v2)
  {
    *((_QWORD *)this + 1) = v2;
    operator delete(v2);
  }
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::ActionElement>::TypeHandler>(uint64_t a1)
{
  uint64_t v1;
  SnippetUI::ActionElement **v3;
  SnippetUI::ActionElement *v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v1)
  {
    v3 = (SnippetUI::ActionElement **)(*(_QWORD *)(a1 + 16) + 8);
    do
    {
      v4 = *v3++;
      SnippetUI::ActionElement::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_1BF86BA20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::ActionProperty *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::ActionProperty *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::ActionProperty *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x38uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::ActionProperty>);
    SnippetUI::ActionProperty::ActionProperty(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::ActionProperty *)operator new();
    SnippetUI::ActionProperty::ActionProperty(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BF86BABC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C40B18DE219);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::ActionProperty>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void SnippetUI::ActionProperty::clear_actions(SnippetUI::ActionProperty *this)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<SnippetUI::ActionElement>::TypeHandler>((uint64_t)this + 16);
}

SnippetUI::ActionProperty *SnippetUI::ActionProperty::ActionProperty(SnippetUI::ActionProperty *this, const SnippetUI::ActionProperty *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E792A970;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (SnippetUI::ActionProperty *)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<SnippetUI::ActionElement>::TypeHandler>((int **)this + 2, (uint64_t)a2 + 16);
  *((_DWORD *)this + 12) = 0;
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom(v4, (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 5) = &google::protobuf::internal::fixed_address_empty_string;
  v6 = *((_QWORD *)a2 + 5);
  if (*(char *)(v6 + 23) < 0)
    v7 = *(_QWORD *)(v6 + 8);
  else
    v7 = *(unsigned __int8 *)(v6 + 23);
  if ((uint64_t *)v6 != &google::protobuf::internal::fixed_address_empty_string && v7 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 5, v6);
  return this;
}

void sub_1BF86BC20(_Unwind_Exception *a1)
{
  uint64_t *v1;
  google::protobuf::internal::RepeatedPtrFieldBase *v2;

  google::protobuf::RepeatedPtrField<siri::dialogengine::SchemaBinary::Value>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

__n128 SnippetUI::ActionProperty::InternalSwap(SnippetUI::ActionProperty *this, SnippetUI::ActionProperty *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  __n128 result;
  std::string **v8;
  std::string *v9;
  uint64_t *v10;
  std::string **v11;
  std::string *v12;
  std::string::size_type v13;
  std::string::size_type v14;
  google::protobuf::UnknownFieldSet *v15;

  v4 = (SnippetUI::ActionProperty *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v15;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((SnippetUI::ActionProperty *)((char *)this + 16), (SnippetUI::ActionProperty *)((char *)a2 + 16));
  v10 = (uint64_t *)*((_QWORD *)this + 5);
  v8 = (std::string **)((char *)this + 40);
  v9 = (std::string *)v10;
  v11 = (std::string **)((char *)a2 + 40);
  if (v10 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
      return result;
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v8, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v12 = *v11;
  if (*v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v11, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v12 = *v11;
  }
  v13 = v9->__r_.__value_.__r.__words[2];
  result = *(__n128 *)&v9->__r_.__value_.__l.__data_;
  v14 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v9->__r_.__value_.__r.__words[2] = v14;
  *(__n128 *)&v12->__r_.__value_.__l.__data_ = result;
  v12->__r_.__value_.__r.__words[2] = v13;
  return result;
}

uint64_t siri::dialogengine::PatternSchemaGroup::IsAlias(siri::dialogengine::PatternSchemaGroup *this)
{
  return 0;
}

_QWORD *siri::dialogengine::PatternSchemaGroup::AliasOf@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

_QWORD *siri::dialogengine::PatternSchemaGroup::PatternSchemaGroup(_QWORD *a1, __int128 *a2)
{
  std::string *v3;
  __int128 v4;

  *a1 = off_1E792F2C8;
  v3 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  return a1;
}

void siri::dialogengine::PatternSchemaGroup::GetName(siri::dialogengine::PatternSchemaGroup *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 3);
  }
}

std::string *siri::dialogengine::PatternSchemaGroup::SetName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 8), a2);
}

double siri::dialogengine::ValidationEntry::ValidationEntry(siri::dialogengine::ValidationEntry *this)
{
  double result;

  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)this = off_1E7930350;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  return result;
}

{
  double result;

  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_QWORD *)this = off_1E7930350;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  return result;
}

void siri::dialogengine::ValidationEntry::~ValidationEntry(void **this)
{
  *this = off_1E7930350;
  if (*((char *)this + 87) < 0)
    operator delete(this[8]);
  siri::dialogengine::LineNumberBase::~LineNumberBase(this);
}

{
  *this = off_1E7930350;
  if (*((char *)this + 87) < 0)
    operator delete(this[8]);
  siri::dialogengine::LineNumberBase::~LineNumberBase(this);
  JUMPOUT(0x1C3B8D890);
}

uint64_t siri::dialogengine::ValidationEntry::ValidationEntry(uint64_t a1, __int128 *a2, uint64_t a3)
{
  __int128 v5;

  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = off_1E7930350;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 64), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 64) = v5;
  }
  if (a3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a3 + 8);
    std::string::operator=((std::string *)(a1 + 16), (const std::string *)(a3 + 16));
    std::string::operator=((std::string *)(a1 + 40), (const std::string *)(a3 + 40));
  }
  return a1;
}

void sub_1BF86BFA0(_Unwind_Exception *a1)
{
  void **v1;

  siri::dialogengine::LineNumberBase::~LineNumberBase(v1);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::ValidationEntry::ValidationEntry(uint64_t a1, __int128 *a2, uint64_t a3, const std::string *a4)
{
  _QWORD *v6;
  std::string *v7;
  __int128 v8;

  v6 = (_QWORD *)siri::dialogengine::LineNumberBase::LineNumberBase(a1, a3, a4);
  *v6 = off_1E7930350;
  v7 = (std::string *)(v6 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v8 = *a2;
    v7->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  return a1;
}

void sub_1BF86C030(_Unwind_Exception *a1)
{
  void **v1;

  siri::dialogengine::LineNumberBase::~LineNumberBase(v1);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ValidationEntry::GetText(siri::dialogengine::ValidationEntry *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 87) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 8), *((_QWORD *)this + 9));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 4);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 10);
  }
}

std::string *siri::dialogengine::ValidationEntry::SetText(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 64), a2);
}

void siri::dialogengine::ValidationEntry::GetFormattedText(siri::dialogengine::ValidationEntry *this@<X0>, std::string *a2@<X8>)
{
  size_t v4;
  std::string *v5;
  char *v6;
  std::string *p_p;
  std::string::size_type size;
  std::string *v9;
  __int128 v10;
  _BOOL4 v11;
  _BOOL4 v12;
  std::string *v13;
  std::string::size_type v14;
  std::string __p;
  std::string v16;

  if (*((_QWORD *)this + 1))
  {
    if (*((char *)this + 87) >= 0)
      v4 = *((unsigned __int8 *)this + 87);
    else
      v4 = *((_QWORD *)this + 9);
    v5 = &v16;
    std::string::basic_string[abi:ne180100]((uint64_t)&v16, v4 + 7);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v5 = (std::string *)v16.__r_.__value_.__r.__words[0];
    if (v4)
    {
      if (*((char *)this + 87) >= 0)
        v6 = (char *)this + 64;
      else
        v6 = (char *)*((_QWORD *)this + 8);
      memmove(v5, v6, v4);
    }
    strcpy((char *)v5 + v4, " (Line ");
    std::to_string(&__p, *((_QWORD *)this + 1));
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v9 = std::string::append(&v16, (const std::string::value_type *)p_p, size);
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    a2->__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v16, "_");
    v11 = siri::dialogengine::StringStartsWith((std::string *)((char *)this + 40), (unsigned __int8 *)&v16);
    v12 = v11;
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v16.__r_.__value_.__l.__data_);
      if (!v12)
      {
LABEL_36:
        std::string::append(a2, ")");
        return;
      }
    }
    else if (!v11)
    {
      goto LABEL_36;
    }
    std::operator+<char>();
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = &v16;
    else
      v13 = (std::string *)v16.__r_.__value_.__r.__words[0];
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = HIBYTE(v16.__r_.__value_.__r.__words[2]);
    else
      v14 = v16.__r_.__value_.__l.__size_;
    std::string::append(a2, (const std::string::value_type *)v13, v14);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
    goto LABEL_36;
  }
  if (*((char *)this + 87) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 8), *((_QWORD *)this + 9));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 4);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 10);
  }
}

void sub_1BF86C26C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a20 < 0)
    operator delete(__p);
  if (*(char *)(v20 + 23) < 0)
    operator delete(*(void **)v20);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  const void **v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  const void **v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  BOOL v25;
  uint64_t result;

  if (*(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
    return 0;
  v4 = *(unsigned __int8 *)(a1 + 39);
  if ((v4 & 0x80u) == 0)
    v5 = *(unsigned __int8 *)(a1 + 39);
  else
    v5 = *(_QWORD *)(a1 + 24);
  v6 = *(unsigned __int8 *)(a2 + 39);
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a2 + 24);
  if (v5 != v6)
    return 0;
  v8 = (const void **)(a1 + 16);
  if (v7 >= 0)
    v9 = (unsigned __int8 *)(a2 + 16);
  else
    v9 = *(unsigned __int8 **)(a2 + 16);
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*v8, v9, *(_QWORD *)(a1 + 24)))
      return 0;
  }
  else if (*(_BYTE *)(a1 + 39))
  {
    while (*(unsigned __int8 *)v8 == *v9)
    {
      v8 = (const void **)((char *)v8 + 1);
      ++v9;
      if (!--v4)
        goto LABEL_17;
    }
    return 0;
  }
LABEL_17:
  v10 = *(unsigned __int8 *)(a1 + 87);
  if ((v10 & 0x80u) == 0)
    v11 = *(unsigned __int8 *)(a1 + 87);
  else
    v11 = *(_QWORD *)(a1 + 72);
  v12 = *(unsigned __int8 *)(a2 + 87);
  v13 = (char)v12;
  if ((v12 & 0x80u) != 0)
    v12 = *(_QWORD *)(a2 + 72);
  if (v11 != v12)
    return 0;
  v14 = (const void **)(a1 + 64);
  v17 = *(unsigned __int8 **)(a2 + 64);
  v16 = (unsigned __int8 *)(a2 + 64);
  v15 = v17;
  if (v13 >= 0)
    v18 = v16;
  else
    v18 = v15;
  if ((v10 & 0x80) != 0)
    return memcmp(*v14, v18, *(_QWORD *)(a1 + 72)) == 0;
  if (!*(_BYTE *)(a1 + 87))
    return 1;
  v19 = v10 - 1;
  do
  {
    v21 = *(unsigned __int8 *)v14;
    v14 = (const void **)((char *)v14 + 1);
    v20 = v21;
    v23 = *v18++;
    v22 = v23;
    v25 = v19-- != 0;
    result = v20 == v22;
  }
  while (v20 == v22 && v25);
  return result;
}

BOOL siri::dialogengine::operator<(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  size_t v8;
  const void *v9;
  size_t v10;
  const void *v11;
  size_t v12;
  int v13;
  BOOL v14;
  int v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  int v20;
  const void *v21;
  int v22;
  const void *v23;
  size_t v24;
  const void *v25;
  size_t v26;
  const void *v27;
  size_t v28;
  int v29;

  v4 = a1 + 16;
  v5 = a2 + 16;
  v6 = *(char *)(a2 + 39);
  v7 = *(char *)(a1 + 39);
  if (v7 >= 0)
    v8 = *(unsigned __int8 *)(a1 + 39);
  else
    v8 = *(_QWORD *)(a1 + 24);
  if (v7 >= 0)
    v9 = (const void *)(a1 + 16);
  else
    v9 = *(const void **)(a1 + 16);
  if (v6 >= 0)
    v10 = *(unsigned __int8 *)(a2 + 39);
  else
    v10 = *(_QWORD *)(a2 + 24);
  if (v6 >= 0)
    v11 = (const void *)(a2 + 16);
  else
    v11 = *(const void **)(a2 + 16);
  if (v10 >= v8)
    v12 = v8;
  else
    v12 = v10;
  v13 = memcmp(v9, v11, v12);
  v14 = v8 < v10;
  if (v13)
    v14 = v13 < 0;
  if (v14)
    return 1;
  v15 = memcmp(v11, v9, v12);
  v16 = v10 < v8;
  if (v15)
    v16 = v15 < 0;
  if (v16)
    return 0;
  v17 = *(_QWORD *)(a1 + 8);
  v18 = *(_QWORD *)(a2 + 8);
  if (v17 < v18)
    return 1;
  if (v18 < v17)
    return 0;
  v20 = *(char *)(a2 + 87);
  v21 = *(const void **)(a2 + 64);
  v22 = *(char *)(a1 + 87);
  v23 = *(const void **)(a1 + 64);
  if (v22 >= 0)
    v24 = *(unsigned __int8 *)(a1 + 87);
  else
    v24 = *(_QWORD *)(a1 + 72);
  if (v22 >= 0)
    v25 = (const void *)(v4 + 48);
  else
    v25 = v23;
  if (v20 >= 0)
    v26 = *(unsigned __int8 *)(a2 + 87);
  else
    v26 = *(_QWORD *)(a2 + 72);
  if (v20 >= 0)
    v27 = (const void *)(v5 + 48);
  else
    v27 = v21;
  if (v26 >= v24)
    v28 = v24;
  else
    v28 = v26;
  v29 = memcmp(v25, v27, v28);
  if (v29)
    return v29 < 0;
  else
    return v24 < v26;
}

std::string *siri::dialogengine::DialogCalendarRange::dateTimeRangeShort(siri::dialogengine::DialogCalendarRange *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::GetDateRange(this, (uint64_t)a2, 0, 0);
}

std::string *siri::dialogengine::GetDateRange(siri::dialogengine::Context *a1, uint64_t a2, int a3, int a4)
{
  _QWORD *CalendarObject;
  _QWORD *v9;
  const siri::dialogengine::VariableObject *v10;
  const void *isToday;
  void *v12;
  const siri::dialogengine::VariableObject *v13;
  const void *v14;
  void *v15;
  const siri::dialogengine::VariableObject *v16;
  std::string *v17;
  siri::dialogengine::Context *v18;
  _QWORD *v19;
  const siri::dialogengine::VariableObject *v20;
  __int128 v21;
  std::string *v22;
  std::string *v23;
  void *v24;
  std::string *v25;
  siri::dialogengine::Context *v26;
  _QWORD *v27;
  const siri::dialogengine::VariableObject *v28;
  __int128 v29;
  std::string *v30;
  void *v31;
  unsigned int v32;
  _BOOL8 v34;
  std::string *v35;
  void *v36;
  const siri::dialogengine::VariableObject *v37;
  std::string *v38;
  void *v39;
  std::string *v40;
  void *v41;
  const siri::dialogengine::VariableObject *v42;
  std::string *v43;
  void *v44;
  std::string *v45;
  void *v46;
  const siri::dialogengine::VariableObject *v47;
  std::string *v48;
  __int128 v49;
  std::string *v50;
  __int128 v51;
  std::string *v52;
  std::string::size_type size;
  std::string *v54;
  __int128 v55;
  std::string *v56;
  __int128 v57;
  std::string *v58;
  __int128 v59;
  std::string *v60;
  __int128 v61;
  std::string *v62;
  std::string::size_type v63;
  std::string *v64;
  __int128 v65;
  std::string *v66;
  __int128 v67;
  uint64_t v68;
  std::string *v69;
  __int128 v70;
  std::string *v71;
  __int128 v72;
  std::string *v73;
  std::string::size_type v74;
  std::string *v75;
  __int128 v76;
  std::string *v77;
  __int128 v78;
  uint64_t v79;
  std::string *v80;
  __int128 v81;
  std::string *v82;
  __int128 v83;
  std::string *v84;
  std::string::size_type v85;
  std::string *v86;
  __int128 v87;
  std::string *v88;
  __int128 v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *p_shared_owners;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  void *v143;
  void *v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  std::string v149;
  std::string v150;
  std::string v151;
  std::string v152;
  std::string v153;
  void *v154;
  char v155;
  void *v156;
  char v157;
  void *v158;
  char v159;
  void *v160;
  char v161;
  void *v162;
  char v163;
  std::string v164;
  std::string v165;
  std::string v166;
  std::string v167;
  std::string v168;
  void *v169[2];
  std::string::size_type v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  uint64_t v175;
  std::__shared_weak_count *v176;
  uint64_t v177;
  std::__shared_weak_count *v178;
  siri::dialogengine::Context *v179;
  std::__shared_weak_count *v180;
  siri::dialogengine::Context *v181;
  std::__shared_weak_count *v182;
  void *__p[2];
  _QWORD v184[4];
  void *v185[2];
  __int128 v186;
  void *v187[6];
  __int128 v188;
  void *v189[2];
  uint64_t v190;
  __int128 v191;
  _QWORD v192[3];
  __int128 v193;
  _QWORD v194[3];
  __int128 v195;
  _QWORD v196[3];
  __int128 v197;
  _QWORD v198[3];
  __int128 v199;
  uint64_t v200;

  v200 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(__p, "endSecs");
  CalendarObject = siri::dialogengine::GetCalendarObject(a1, a2, (const void **)__p);
  std::shared_ptr<siri::dialogengine::VariableObject>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableObject,void>(&v181, (uint64_t)CalendarObject);
  if (SHIBYTE(v184[0]) < 0)
    operator delete(__p[0]);
  if (v181)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "startSecs");
    v9 = siri::dialogengine::GetCalendarObject(a1, a2, (const void **)__p);
    std::shared_ptr<siri::dialogengine::VariableObject>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableObject,void>(&v179, (uint64_t)v9);
    if (SHIBYTE(v184[0]) < 0)
      operator delete(__p[0]);
    isToday = (const void *)siri::dialogengine::DialogCalendar::isToday(a1, v179, v10);
    std::shared_ptr<siri::dialogengine::VariableBoolean>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableBoolean,void>(&v177, (uint64_t)v12);
    v14 = (const void *)siri::dialogengine::DialogCalendar::isToday(a1, v181, v13);
    std::shared_ptr<siri::dialogengine::VariableBoolean>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableBoolean,void>(&v175, (uint64_t)v15);
    v174 = 0uLL;
    v173 = 0uLL;
    v172 = 0uLL;
    v171 = 0uLL;
    if (*(_BYTE *)(v177 + 66))
    {
      v17 = (std::string *)operator new();
      std::string::basic_string[abi:ne180100]<0>(&v152, "");
      v18 = v179;
      std::string::basic_string[abi:ne180100]<0>(v169, "none");
      siri::dialogengine::GetNonSpecificDateTimePeriodSpeakableString(a1, v18, (uint64_t)v169, (uint64_t)__p);
      siri::dialogengine::VariableString::VariableString(v17, &v152, (const siri::dialogengine::SpeakableString *)__p);
      v168.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
      v19 = (_QWORD *)operator new();
      *v19 = &off_1E7937B88;
      v19[1] = 0;
      v19[2] = 0;
      v19[3] = v17;
      v168.__r_.__value_.__l.__size_ = (std::string::size_type)v19;
      v21 = *(_OWORD *)&v168.__r_.__value_.__l.__data_;
      *(_OWORD *)&v168.__r_.__value_.__l.__data_ = 0uLL;
      v172 = v21;
      if (SHIBYTE(v190) < 0)
        operator delete(v189[0]);
      if (SHIBYTE(v188) < 0)
        operator delete(v187[5]);
      if (SHIBYTE(v187[4]) < 0)
        operator delete(v187[2]);
      if (SHIBYTE(v187[1]) < 0)
        operator delete(*((void **)&v186 + 1));
      if (SBYTE7(v186) < 0)
        operator delete(v185[0]);
      if (SHIBYTE(v184[3]) < 0)
        operator delete((void *)v184[1]);
      if (SHIBYTE(v184[0]) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v170) < 0)
        operator delete(v169[0]);
      if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v152.__r_.__value_.__l.__data_);
    }
    else
    {
      v23 = siri::dialogengine::DialogCalendar::dateDescriptive(a1, v179, v16);
      std::shared_ptr<siri::dialogengine::VariableString>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableString,void>(&v168, (uint64_t)v24);
      v172 = *(_OWORD *)&v168.__r_.__value_.__l.__data_;
    }
    if (*(_BYTE *)(v175 + 66))
    {
      v25 = (std::string *)operator new();
      std::string::basic_string[abi:ne180100]<0>(&v152, "");
      v26 = v181;
      std::string::basic_string[abi:ne180100]<0>(v169, "none");
      siri::dialogengine::GetNonSpecificDateTimePeriodSpeakableString(a1, v26, (uint64_t)v169, (uint64_t)__p);
      siri::dialogengine::VariableString::VariableString(v25, &v152, (const siri::dialogengine::SpeakableString *)__p);
      v168.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
      v27 = (_QWORD *)operator new();
      *v27 = &off_1E7937B88;
      v27[1] = 0;
      v27[2] = 0;
      v27[3] = v25;
      v168.__r_.__value_.__l.__size_ = (std::string::size_type)v27;
      v29 = *(_OWORD *)&v168.__r_.__value_.__l.__data_;
      *(_OWORD *)&v168.__r_.__value_.__l.__data_ = 0uLL;
      v171 = v29;
      if (SHIBYTE(v190) < 0)
        operator delete(v189[0]);
      if (SHIBYTE(v188) < 0)
        operator delete(v187[5]);
      if (SHIBYTE(v187[4]) < 0)
        operator delete(v187[2]);
      if (SHIBYTE(v187[1]) < 0)
        operator delete(*((void **)&v186 + 1));
      if (SBYTE7(v186) < 0)
        operator delete(v185[0]);
      if (SHIBYTE(v184[3]) < 0)
        operator delete((void *)v184[1]);
      if (SHIBYTE(v184[0]) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v170) < 0)
        operator delete(v169[0]);
      if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v152.__r_.__value_.__l.__data_);
    }
    else
    {
      v30 = siri::dialogengine::DialogCalendar::dateDescriptive(a1, v181, v20);
      std::shared_ptr<siri::dialogengine::VariableString>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableString,void>(&v168, (uint64_t)v31);
      v171 = *(_OWORD *)&v168.__r_.__value_.__l.__data_;
    }
    v32 = a3 & 0xFFFFFFFE;
    v34 = a3 == 5 || (a3 & 0xFFFFFFFD) == 1;
    if (v32 == 4)
    {
      v35 = siri::dialogengine::DialogCalendar::timeDescriptive(a1, v179, v28);
      std::shared_ptr<siri::dialogengine::VariableString>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableString,void>(__p, (uint64_t)v36);
      v144 = __p[0];
      v174 = *(_OWORD *)__p;
      v38 = siri::dialogengine::DialogCalendar::timeDescriptive(a1, v181, v37);
      std::shared_ptr<siri::dialogengine::VariableString>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableString,void>(__p, (uint64_t)v39);
    }
    else
    {
      if (a3 == 6)
      {
        v40 = siri::dialogengine::DialogCalendar::timeDescriptiveWithPrefixFrom(a1, v179, v28);
        std::shared_ptr<siri::dialogengine::VariableString>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableString,void>(__p, (uint64_t)v41);
        v144 = __p[0];
        v174 = *(_OWORD *)__p;
        v43 = siri::dialogengine::DialogCalendar::timeDescriptive(a1, v181, v42);
      }
      else
      {
        v45 = siri::dialogengine::DialogCalendar::timeDescriptiveWithPrefixOn(a1, v179, v28);
        std::shared_ptr<siri::dialogengine::VariableString>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableString,void>(__p, (uint64_t)v46);
        v144 = __p[0];
        v174 = *(_OWORD *)__p;
        v43 = siri::dialogengine::DialogCalendar::timeDescriptiveWithPrefixOn(a1, v181, v47);
      }
      std::shared_ptr<siri::dialogengine::VariableString>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableString,void>(__p, (uint64_t)v44);
    }
    v143 = __p[0];
    v173 = *(_OWORD *)__p;
    if (v144)
    {
      (*(void (**)(void **__return_ptr, void *))(*(_QWORD *)v144 + 48))(__p, v144);
      if (SHIBYTE(v184[0]) < 0)
      {
        std::string::__init_copy_ctor_external(&v165, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        *(_OWORD *)&v165.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
        v165.__r_.__value_.__r.__words[2] = v184[0];
      }
      v48 = std::string::insert(&v165, 0, "SS[");
      v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
      v166.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v166.__r_.__value_.__l.__data_ = v49;
      v48->__r_.__value_.__l.__size_ = 0;
      v48->__r_.__value_.__r.__words[2] = 0;
      v48->__r_.__value_.__r.__words[0] = 0;
      v50 = std::string::append(&v166, "/tts:");
      v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
      v167.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v167.__r_.__value_.__l.__data_ = v51;
      v50->__r_.__value_.__l.__size_ = 0;
      v50->__r_.__value_.__r.__words[2] = 0;
      v50->__r_.__value_.__r.__words[0] = 0;
      (*(void (**)(std::string *__return_ptr, void *))(*(_QWORD *)v144 + 48))(&v152, v144);
      if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v164, v153.__r_.__value_.__l.__data_, v153.__r_.__value_.__l.__size_);
      else
        v164 = v153;
      if ((v164.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v52 = &v164;
      else
        v52 = (std::string *)v164.__r_.__value_.__r.__words[0];
      if ((v164.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v164.__r_.__value_.__r.__words[2]);
      else
        size = v164.__r_.__value_.__l.__size_;
      v54 = std::string::append(&v167, (const std::string::value_type *)v52, size);
      v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
      v168.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v168.__r_.__value_.__l.__data_ = v55;
      v54->__r_.__value_.__l.__size_ = 0;
      v54->__r_.__value_.__r.__words[2] = 0;
      v54->__r_.__value_.__r.__words[0] = 0;
      v56 = std::string::append(&v168, "]");
      v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
      v170 = v56->__r_.__value_.__r.__words[2];
      *(_OWORD *)v169 = v57;
      v56->__r_.__value_.__l.__size_ = 0;
      v56->__r_.__value_.__r.__words[2] = 0;
      v56->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v168.__r_.__value_.__l.__data_);
      if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v164.__r_.__value_.__l.__data_);
      if (v163 < 0)
        operator delete(v162);
      if (v161 < 0)
        operator delete(v160);
      if (v159 < 0)
        operator delete(v158);
      if (v157 < 0)
        operator delete(v156);
      if (v155 < 0)
        operator delete(v154);
      if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v153.__r_.__value_.__l.__data_);
      if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v152.__r_.__value_.__l.__data_);
      if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v167.__r_.__value_.__l.__data_);
      if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v166.__r_.__value_.__l.__data_);
      if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v165.__r_.__value_.__l.__data_);
      if (SHIBYTE(v190) < 0)
        operator delete(v189[0]);
      if (SHIBYTE(v188) < 0)
        operator delete(v187[5]);
      if (SHIBYTE(v187[4]) < 0)
        operator delete(v187[2]);
      if (SHIBYTE(v187[1]) < 0)
        operator delete(*((void **)&v186 + 1));
      if (SBYTE7(v186) < 0)
        operator delete(v185[0]);
      if (SHIBYTE(v184[3]) < 0)
        operator delete((void *)v184[1]);
      if (SHIBYTE(v184[0]) < 0)
        operator delete(__p[0]);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v169, "");
    }
    if (v143)
    {
      (*(void (**)(void **__return_ptr, void *))(*(_QWORD *)v143 + 48))(__p, v143);
      if (SHIBYTE(v184[0]) < 0)
      {
        std::string::__init_copy_ctor_external(&v164, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        *(_OWORD *)&v164.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
        v164.__r_.__value_.__r.__words[2] = v184[0];
      }
      v58 = std::string::insert(&v164, 0, "SS[");
      v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
      v165.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v165.__r_.__value_.__l.__data_ = v59;
      v58->__r_.__value_.__l.__size_ = 0;
      v58->__r_.__value_.__r.__words[2] = 0;
      v58->__r_.__value_.__r.__words[0] = 0;
      v60 = std::string::append(&v165, "/tts:");
      v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
      v166.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v166.__r_.__value_.__l.__data_ = v61;
      v60->__r_.__value_.__l.__size_ = 0;
      v60->__r_.__value_.__r.__words[2] = 0;
      v60->__r_.__value_.__r.__words[0] = 0;
      (*(void (**)(std::string *__return_ptr, void *))(*(_QWORD *)v143 + 48))(&v152, v143);
      if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v151, v153.__r_.__value_.__l.__data_, v153.__r_.__value_.__l.__size_);
      else
        v151 = v153;
      if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v62 = &v151;
      else
        v62 = (std::string *)v151.__r_.__value_.__r.__words[0];
      if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v63 = HIBYTE(v151.__r_.__value_.__r.__words[2]);
      else
        v63 = v151.__r_.__value_.__l.__size_;
      v64 = std::string::append(&v166, (const std::string::value_type *)v62, v63);
      v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
      v167.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v167.__r_.__value_.__l.__data_ = v65;
      v64->__r_.__value_.__l.__size_ = 0;
      v64->__r_.__value_.__r.__words[2] = 0;
      v64->__r_.__value_.__r.__words[0] = 0;
      v66 = std::string::append(&v167, "]");
      v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
      v168.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v168.__r_.__value_.__l.__data_ = v67;
      v66->__r_.__value_.__l.__size_ = 0;
      v66->__r_.__value_.__r.__words[2] = 0;
      v66->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v167.__r_.__value_.__l.__data_);
      if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v151.__r_.__value_.__l.__data_);
      if (v163 < 0)
        operator delete(v162);
      if (v161 < 0)
        operator delete(v160);
      if (v159 < 0)
        operator delete(v158);
      if (v157 < 0)
        operator delete(v156);
      if (v155 < 0)
        operator delete(v154);
      if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v153.__r_.__value_.__l.__data_);
      if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v152.__r_.__value_.__l.__data_);
      if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v166.__r_.__value_.__l.__data_);
      if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v165.__r_.__value_.__l.__data_);
      if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v164.__r_.__value_.__l.__data_);
      if (SHIBYTE(v190) < 0)
        operator delete(v189[0]);
      if (SHIBYTE(v188) < 0)
        operator delete(v187[5]);
      if (SHIBYTE(v187[4]) < 0)
        operator delete(v187[2]);
      if (SHIBYTE(v187[1]) < 0)
        operator delete(*((void **)&v186 + 1));
      if (SBYTE7(v186) < 0)
        operator delete(v185[0]);
      if (SHIBYTE(v184[3]) < 0)
        operator delete((void *)v184[1]);
      if (SHIBYTE(v184[0]) < 0)
        operator delete(__p[0]);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v168, "");
    }
    v68 = v172;
    if ((_QWORD)v172)
    {
      (*(void (**)(void **__return_ptr, _QWORD))(*(_QWORD *)v172 + 48))(__p, v172);
      if (SHIBYTE(v184[0]) < 0)
      {
        std::string::__init_copy_ctor_external(&v151, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        *(_OWORD *)&v151.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
        v151.__r_.__value_.__r.__words[2] = v184[0];
      }
      v69 = std::string::insert(&v151, 0, "SS[");
      v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
      v164.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v164.__r_.__value_.__l.__data_ = v70;
      v69->__r_.__value_.__l.__size_ = 0;
      v69->__r_.__value_.__r.__words[2] = 0;
      v69->__r_.__value_.__r.__words[0] = 0;
      v71 = std::string::append(&v164, "/tts:");
      v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
      v165.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v165.__r_.__value_.__l.__data_ = v72;
      v71->__r_.__value_.__l.__size_ = 0;
      v71->__r_.__value_.__r.__words[2] = 0;
      v71->__r_.__value_.__r.__words[0] = 0;
      (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v68 + 48))(&v152, v68);
      if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v150, v153.__r_.__value_.__l.__data_, v153.__r_.__value_.__l.__size_);
      else
        v150 = v153;
      if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v73 = &v150;
      else
        v73 = (std::string *)v150.__r_.__value_.__r.__words[0];
      if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v74 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
      else
        v74 = v150.__r_.__value_.__l.__size_;
      v75 = std::string::append(&v165, (const std::string::value_type *)v73, v74);
      v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
      v166.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v166.__r_.__value_.__l.__data_ = v76;
      v75->__r_.__value_.__l.__size_ = 0;
      v75->__r_.__value_.__r.__words[2] = 0;
      v75->__r_.__value_.__r.__words[0] = 0;
      v77 = std::string::append(&v166, "]");
      v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
      v167.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v167.__r_.__value_.__l.__data_ = v78;
      v77->__r_.__value_.__l.__size_ = 0;
      v77->__r_.__value_.__r.__words[2] = 0;
      v77->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v166.__r_.__value_.__l.__data_);
      if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v150.__r_.__value_.__l.__data_);
      if (v163 < 0)
        operator delete(v162);
      if (v161 < 0)
        operator delete(v160);
      if (v159 < 0)
        operator delete(v158);
      if (v157 < 0)
        operator delete(v156);
      if (v155 < 0)
        operator delete(v154);
      if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v153.__r_.__value_.__l.__data_);
      if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v152.__r_.__value_.__l.__data_);
      if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v165.__r_.__value_.__l.__data_);
      if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v164.__r_.__value_.__l.__data_);
      if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v151.__r_.__value_.__l.__data_);
      if (SHIBYTE(v190) < 0)
        operator delete(v189[0]);
      if (SHIBYTE(v188) < 0)
        operator delete(v187[5]);
      if (SHIBYTE(v187[4]) < 0)
        operator delete(v187[2]);
      if (SHIBYTE(v187[1]) < 0)
        operator delete(*((void **)&v186 + 1));
      if (SBYTE7(v186) < 0)
        operator delete(v185[0]);
      if (SHIBYTE(v184[3]) < 0)
        operator delete((void *)v184[1]);
      if (SHIBYTE(v184[0]) < 0)
        operator delete(__p[0]);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v167, "");
    }
    v79 = v171;
    if ((_QWORD)v171)
    {
      (*(void (**)(void **__return_ptr, _QWORD))(*(_QWORD *)v171 + 48))(__p, v171);
      if (SHIBYTE(v184[0]) < 0)
      {
        std::string::__init_copy_ctor_external(&v150, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        *(_OWORD *)&v150.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
        v150.__r_.__value_.__r.__words[2] = v184[0];
      }
      v80 = std::string::insert(&v150, 0, "SS[");
      v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
      v151.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v151.__r_.__value_.__l.__data_ = v81;
      v80->__r_.__value_.__l.__size_ = 0;
      v80->__r_.__value_.__r.__words[2] = 0;
      v80->__r_.__value_.__r.__words[0] = 0;
      v82 = std::string::append(&v151, "/tts:");
      v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
      v164.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v164.__r_.__value_.__l.__data_ = v83;
      v82->__r_.__value_.__l.__size_ = 0;
      v82->__r_.__value_.__r.__words[2] = 0;
      v82->__r_.__value_.__r.__words[0] = 0;
      (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v79 + 48))(&v152, v79);
      if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v149, v153.__r_.__value_.__l.__data_, v153.__r_.__value_.__l.__size_);
      else
        v149 = v153;
      if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v84 = &v149;
      else
        v84 = (std::string *)v149.__r_.__value_.__r.__words[0];
      if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v85 = HIBYTE(v149.__r_.__value_.__r.__words[2]);
      else
        v85 = v149.__r_.__value_.__l.__size_;
      v86 = std::string::append(&v164, (const std::string::value_type *)v84, v85);
      v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
      v165.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v165.__r_.__value_.__l.__data_ = v87;
      v86->__r_.__value_.__l.__size_ = 0;
      v86->__r_.__value_.__r.__words[2] = 0;
      v86->__r_.__value_.__r.__words[0] = 0;
      v88 = std::string::append(&v165, "]");
      v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
      v166.__r_.__value_.__r.__words[2] = v88->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v166.__r_.__value_.__l.__data_ = v89;
      v88->__r_.__value_.__l.__size_ = 0;
      v88->__r_.__value_.__r.__words[2] = 0;
      v88->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v165.__r_.__value_.__l.__data_);
      if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v149.__r_.__value_.__l.__data_);
      if (v163 < 0)
        operator delete(v162);
      if (v161 < 0)
        operator delete(v160);
      if (v159 < 0)
        operator delete(v158);
      if (v157 < 0)
        operator delete(v156);
      if (v155 < 0)
        operator delete(v154);
      if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v153.__r_.__value_.__l.__data_);
      if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v152.__r_.__value_.__l.__data_);
      if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v164.__r_.__value_.__l.__data_);
      if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v151.__r_.__value_.__l.__data_);
      if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v150.__r_.__value_.__l.__data_);
      if (SHIBYTE(v190) < 0)
        operator delete(v189[0]);
      if (SHIBYTE(v188) < 0)
        operator delete(v187[5]);
      if (SHIBYTE(v187[4]) < 0)
        operator delete(v187[2]);
      if (SHIBYTE(v187[1]) < 0)
        operator delete(*((void **)&v186 + 1));
      if (SBYTE7(v186) < 0)
        operator delete(v185[0]);
      if (SHIBYTE(v184[3]) < 0)
        operator delete((void *)v184[1]);
      if (SHIBYTE(v184[0]) < 0)
        operator delete(__p[0]);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v166, "");
    }
    siri::dialogengine::CreateJSONStringVal((uint64_t)v169, (uint64_t *)&v165);
    std::string::basic_string[abi:ne180100]<0>(__p, "startTime");
    *(_OWORD *)&v184[1] = *(_OWORD *)&v165.__r_.__value_.__l.__data_;
    *(_OWORD *)&v165.__r_.__value_.__l.__data_ = 0uLL;
    siri::dialogengine::CreateJSONStringVal((uint64_t)&v167, (uint64_t *)&v164);
    std::string::basic_string[abi:ne180100]<0>(&v184[3], "startDate");
    v186 = *(_OWORD *)&v164.__r_.__value_.__l.__data_;
    *(_OWORD *)&v164.__r_.__value_.__l.__data_ = 0uLL;
    siri::dialogengine::CreateJSONStringVal((uint64_t)&v168, (uint64_t *)&v151);
    std::string::basic_string[abi:ne180100]<0>(v187, "endTime");
    *(_OWORD *)&v187[3] = *(_OWORD *)&v151.__r_.__value_.__l.__data_;
    *(_OWORD *)&v151.__r_.__value_.__l.__data_ = 0uLL;
    siri::dialogengine::CreateJSONStringVal((uint64_t)&v166, (uint64_t *)&v150);
    std::string::basic_string[abi:ne180100]<0>(&v187[5], "endDate");
    *(_OWORD *)v189 = *(_OWORD *)&v150.__r_.__value_.__l.__data_;
    *(_OWORD *)&v150.__r_.__value_.__l.__data_ = 0uLL;
    siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)(a4 == 0), (uint64_t *)&v149);
    std::string::basic_string[abi:ne180100]<0>(&v190, "isShort");
    v191 = *(_OWORD *)&v149.__r_.__value_.__l.__data_;
    *(_OWORD *)&v149.__r_.__value_.__l.__data_ = 0uLL;
    siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)(v32 == 4), (uint64_t *)&v148);
    std::string::basic_string[abi:ne180100]<0>(v192, "isTimeRange");
    v193 = v148;
    v148 = 0uLL;
    siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)(v32 == 2), (uint64_t *)&v147);
    std::string::basic_string[abi:ne180100]<0>(v194, "isDateRange");
    v195 = v147;
    v147 = 0uLL;
    siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)v34, (uint64_t *)&v146);
    std::string::basic_string[abi:ne180100]<0>(v196, "isFromTo");
    v197 = v146;
    v146 = 0uLL;
    siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)(a3 == 6), (uint64_t *)&v145);
    std::string::basic_string[abi:ne180100]<0>(v198, "isNonSpecificDateTimeRange");
    v199 = v145;
    v145 = 0uLL;
    std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100]((uint64_t)&v152, (const void **)__p, 9);
    v90 = 360;
    do
    {
      std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v181 + v90);
      if (*((char *)&v180 + v90 + 7) < 0)
        operator delete(*(std::__shared_weak_count **)((char *)&v178 + v90));
      v90 -= 40;
    }
    while (v90);
    v91 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
    if (*((_QWORD *)&v145 + 1))
    {
      v92 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
      do
        v93 = __ldaxr(v92);
      while (__stlxr(v93 - 1, v92));
      if (!v93)
      {
        ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
        std::__shared_weak_count::__release_weak(v91);
      }
    }
    v94 = (std::__shared_weak_count *)*((_QWORD *)&v146 + 1);
    if (*((_QWORD *)&v146 + 1))
    {
      v95 = (unint64_t *)(*((_QWORD *)&v146 + 1) + 8);
      do
        v96 = __ldaxr(v95);
      while (__stlxr(v96 - 1, v95));
      if (!v96)
      {
        ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
        std::__shared_weak_count::__release_weak(v94);
      }
    }
    v97 = (std::__shared_weak_count *)*((_QWORD *)&v147 + 1);
    if (*((_QWORD *)&v147 + 1))
    {
      v98 = (unint64_t *)(*((_QWORD *)&v147 + 1) + 8);
      do
        v99 = __ldaxr(v98);
      while (__stlxr(v99 - 1, v98));
      if (!v99)
      {
        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
        std::__shared_weak_count::__release_weak(v97);
      }
    }
    v100 = (std::__shared_weak_count *)*((_QWORD *)&v148 + 1);
    if (*((_QWORD *)&v148 + 1))
    {
      v101 = (unint64_t *)(*((_QWORD *)&v148 + 1) + 8);
      do
        v102 = __ldaxr(v101);
      while (__stlxr(v102 - 1, v101));
      if (!v102)
      {
        ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
        std::__shared_weak_count::__release_weak(v100);
      }
    }
    v103 = (std::__shared_weak_count *)v149.__r_.__value_.__l.__size_;
    if (v149.__r_.__value_.__l.__size_)
    {
      v104 = (unint64_t *)(v149.__r_.__value_.__l.__size_ + 8);
      do
        v105 = __ldaxr(v104);
      while (__stlxr(v105 - 1, v104));
      if (!v105)
      {
        ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
        std::__shared_weak_count::__release_weak(v103);
      }
    }
    v106 = (std::__shared_weak_count *)v150.__r_.__value_.__l.__size_;
    if (v150.__r_.__value_.__l.__size_)
    {
      v107 = (unint64_t *)(v150.__r_.__value_.__l.__size_ + 8);
      do
        v108 = __ldaxr(v107);
      while (__stlxr(v108 - 1, v107));
      if (!v108)
      {
        ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
        std::__shared_weak_count::__release_weak(v106);
      }
    }
    v109 = (std::__shared_weak_count *)v151.__r_.__value_.__l.__size_;
    if (v151.__r_.__value_.__l.__size_)
    {
      v110 = (unint64_t *)(v151.__r_.__value_.__l.__size_ + 8);
      do
        v111 = __ldaxr(v110);
      while (__stlxr(v111 - 1, v110));
      if (!v111)
      {
        ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
        std::__shared_weak_count::__release_weak(v109);
      }
    }
    v112 = (std::__shared_weak_count *)v164.__r_.__value_.__l.__size_;
    if (v164.__r_.__value_.__l.__size_)
    {
      v113 = (unint64_t *)(v164.__r_.__value_.__l.__size_ + 8);
      do
        v114 = __ldaxr(v113);
      while (__stlxr(v114 - 1, v113));
      if (!v114)
      {
        ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
        std::__shared_weak_count::__release_weak(v112);
      }
    }
    v115 = (std::__shared_weak_count *)v165.__r_.__value_.__l.__size_;
    if (v165.__r_.__value_.__l.__size_)
    {
      v116 = (unint64_t *)(v165.__r_.__value_.__l.__size_ + 8);
      do
        v117 = __ldaxr(v116);
      while (__stlxr(v117 - 1, v116));
      if (!v117)
      {
        ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
        std::__shared_weak_count::__release_weak(v115);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v165, "dateTime#dateTimeRange");
    siri::dialogengine::ExecuteSharedCat(a1, (uint64_t)&v165, (const void ***)&v152, (uint64_t)__p);
    if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v165.__r_.__value_.__l.__data_);
    v22 = (std::string *)operator new();
    std::string::basic_string[abi:ne180100]<0>(&v165, "");
    siri::dialogengine::VariableString::VariableString(v22, &v165, (const siri::dialogengine::SpeakableString *)__p);
    if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v165.__r_.__value_.__l.__data_);
    if (SHIBYTE(v190) < 0)
      operator delete(v189[0]);
    if (SHIBYTE(v188) < 0)
      operator delete(v187[5]);
    if (SHIBYTE(v187[4]) < 0)
      operator delete(v187[2]);
    if (SHIBYTE(v187[1]) < 0)
      operator delete(*((void **)&v186 + 1));
    if (SBYTE7(v186) < 0)
      operator delete(v185[0]);
    if (SHIBYTE(v184[3]) < 0)
      operator delete((void *)v184[1]);
    if (SHIBYTE(v184[0]) < 0)
      operator delete(__p[0]);
    std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)v152.__r_.__value_.__l.__size_);
    if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v166.__r_.__value_.__l.__data_);
    if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v167.__r_.__value_.__l.__data_);
    if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v168.__r_.__value_.__l.__data_);
    if (SHIBYTE(v170) < 0)
      operator delete(v169[0]);
    v118 = (std::__shared_weak_count *)*((_QWORD *)&v171 + 1);
    if (*((_QWORD *)&v171 + 1))
    {
      v119 = (unint64_t *)(*((_QWORD *)&v171 + 1) + 8);
      do
        v120 = __ldaxr(v119);
      while (__stlxr(v120 - 1, v119));
      if (!v120)
      {
        ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
        std::__shared_weak_count::__release_weak(v118);
      }
    }
    v121 = (std::__shared_weak_count *)*((_QWORD *)&v172 + 1);
    if (*((_QWORD *)&v172 + 1))
    {
      v122 = (unint64_t *)(*((_QWORD *)&v172 + 1) + 8);
      do
        v123 = __ldaxr(v122);
      while (__stlxr(v123 - 1, v122));
      if (!v123)
      {
        ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
        std::__shared_weak_count::__release_weak(v121);
      }
    }
    v124 = (std::__shared_weak_count *)*((_QWORD *)&v173 + 1);
    if (*((_QWORD *)&v173 + 1))
    {
      v125 = (unint64_t *)(*((_QWORD *)&v173 + 1) + 8);
      do
        v126 = __ldaxr(v125);
      while (__stlxr(v126 - 1, v125));
      if (!v126)
      {
        ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
        std::__shared_weak_count::__release_weak(v124);
      }
    }
    v127 = (std::__shared_weak_count *)*((_QWORD *)&v174 + 1);
    if (*((_QWORD *)&v174 + 1))
    {
      v128 = (unint64_t *)(*((_QWORD *)&v174 + 1) + 8);
      do
        v129 = __ldaxr(v128);
      while (__stlxr(v129 - 1, v128));
      if (!v129)
      {
        ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
        std::__shared_weak_count::__release_weak(v127);
      }
    }
    v130 = v176;
    if (v176)
    {
      p_shared_owners = (unint64_t *)&v176->__shared_owners_;
      do
        v132 = __ldaxr(p_shared_owners);
      while (__stlxr(v132 - 1, p_shared_owners));
      if (!v132)
      {
        ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
        std::__shared_weak_count::__release_weak(v130);
      }
    }
    v133 = v178;
    if (v178)
    {
      v134 = (unint64_t *)&v178->__shared_owners_;
      do
        v135 = __ldaxr(v134);
      while (__stlxr(v135 - 1, v134));
      if (!v135)
      {
        ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
        std::__shared_weak_count::__release_weak(v133);
      }
    }
    v136 = v180;
    if (v180)
    {
      v137 = (unint64_t *)&v180->__shared_owners_;
      do
        v138 = __ldaxr(v137);
      while (__stlxr(v138 - 1, v137));
      if (!v138)
      {
        ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
        std::__shared_weak_count::__release_weak(v136);
      }
    }
  }
  else
  {
    v22 = (std::string *)operator new();
    std::string::basic_string[abi:ne180100]<0>(&v152, "");
    v190 = 0;
    v188 = 0u;
    *(_OWORD *)v189 = 0u;
    v186 = 0u;
    memset(v187, 0, sizeof(v187));
    *(_OWORD *)v185 = 0u;
    *(_OWORD *)__p = 0u;
    memset(v184, 0, sizeof(v184));
    siri::dialogengine::VariableString::VariableString(v22, &v152, (const siri::dialogengine::SpeakableString *)__p);
    if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v152.__r_.__value_.__l.__data_);
  }
  v139 = v182;
  if (v182)
  {
    v140 = (unint64_t *)&v182->__shared_owners_;
    do
      v141 = __ldaxr(v140);
    while (__stlxr(v141 - 1, v140));
    if (!v141)
    {
      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
      std::__shared_weak_count::__release_weak(v139);
    }
  }
  return v22;
}

void sub_1BF86DCD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  void *a72;
  char a73;
  void *a74;
  char a75;

  siri::dialogengine::SpeakableString::~SpeakableString(&a38);
  if (a64 < 0)
    operator delete(__p);
  if (a37 < 0)
    operator delete(a32);
  if (a30 < 0)
    operator delete(a25);
  siri::dialogengine::SpeakableString::~SpeakableString((void **)&STACK[0x2A0]);
  if (a73 < 0)
    operator delete(a72);
  if (a75 < 0)
    operator delete(a74);
  if (SLOBYTE(STACK[0x217]) < 0)
    operator delete((void *)STACK[0x200]);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x220]);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x230]);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x240]);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x250]);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x260]);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x270]);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x280]);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x290]);
  _Unwind_Resume(a1);
}

void sub_1BF86E2B8()
{
  JUMPOUT(0x1BF86E2A8);
}

void sub_1BF86E2C0()
{
  JUMPOUT(0x1BF86E290);
}

void sub_1BF86E2C8()
{
  JUMPOUT(0x1BF86E298);
}

void sub_1BF86E2D0()
{
  if (SLOBYTE(STACK[0x2B7]) < 0)
    operator delete((void *)STACK[0x2A0]);
  JUMPOUT(0x1BF86E2A0);
}

void sub_1BF86E2E8()
{
  if (SLOBYTE(STACK[0x2B7]) < 0)
    operator delete((void *)STACK[0x2A0]);
  JUMPOUT(0x1BF86E2A8);
}

_QWORD *siri::dialogengine::GetCalendarObject(siri::dialogengine::Context *a1, uint64_t a2, const void **a3)
{
  _BOOL4 v6;
  double *OptionalNumberParameter;
  double CurrentTime;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  const void **v19;
  char *OptionalStringParameter;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  const void **v25;
  void *OptionalObjectParameter;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  const void **v30;
  char *v31;
  const void **v32;
  _BYTE *OptionalBooleanParameter;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *size;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::string *v50;
  __int128 v51;
  std::string *v52;
  __int128 v53;
  uint64_t v55[2];
  uint64_t v56[2];
  uint64_t v57[2];
  uint64_t v58[2];
  uint64_t v59[2];
  std::string v60;
  std::string v61;
  std::string v62;

  std::string::basic_string[abi:ne180100]<0>(&v62, "startSecs");
  v6 = siri::dialogengine::StringsEqual((uint64_t)a3, (uint64_t)&v62);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
  if (v6)
  {
    OptionalNumberParameter = (double *)siri::dialogengine::GetOptionalNumberParameter(a3, a2);
    if (!OptionalNumberParameter)
    {
      if (*(char *)(a2 + 31) < 0)
        std::string::__init_copy_ctor_external(&v60, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
      else
        v60 = *(std::string *)(a2 + 8);
      v9 = std::string::insert(&v60, 0, "Parameter 'startSecs' is missing from dialog.CalendarRange object ");
      v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v61.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      v11 = std::string::append(&v61, ", defaulting to system time...");
      v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      v62.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Log::Debug((siri::dialogengine *)&v62);
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v62.__r_.__value_.__l.__data_);
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v61.__r_.__value_.__l.__data_);
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v60.__r_.__value_.__l.__data_);
      CurrentTime = siri::dialogengine::Context::GetCurrentTime(a1);
LABEL_19:
      v13 = (uint64_t)CurrentTime;
      v14 = (_QWORD *)operator new();
      std::string::basic_string[abi:ne180100]<0>(&v62, "calendar");
      siri::dialogengine::VariableObject::VariableObject(v14, &v62);
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v62.__r_.__value_.__l.__data_);
      v15 = operator new();
      std::string::basic_string[abi:ne180100]<0>(&v62, "secs");
      siri::dialogengine::VariableNumber::VariableNumber(v15, &v62, (double)v13);
      v59[0] = v15;
      v16 = (std::__shared_weak_count *)operator new();
      v16->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      v16->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7937CE0;
      v16->__shared_weak_owners_ = 0;
      v16[1].__vftable = (std::__shared_weak_count_vtbl *)v15;
      v59[1] = (uint64_t)v16;
      siri::dialogengine::VariableObject::AddProperty((uint64_t)v14, v59);
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v62.__r_.__value_.__l.__data_);
      v19 = (const void **)std::string::basic_string[abi:ne180100]<0>(&v62, "timeZone");
      OptionalStringParameter = (char *)siri::dialogengine::GetOptionalStringParameter(v19, a2);
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v62.__r_.__value_.__l.__data_);
      if (OptionalStringParameter)
      {
        v21 = operator new();
        std::string::basic_string[abi:ne180100]<0>(&v62, "timeZone");
        if (OptionalStringParameter[95] < 0)
          std::string::__init_copy_ctor_external(&v61, *((const std::string::value_type **)OptionalStringParameter + 9), *((_QWORD *)OptionalStringParameter + 10));
        else
          v61 = *(std::string *)(OptionalStringParameter + 3);
        siri::dialogengine::VariableString::VariableString(v21, &v62, (uint64_t)&v61);
        v58[0] = v21;
        v22 = (std::__shared_weak_count *)operator new();
        v22->__shared_owners_ = 0;
        v23 = (unint64_t *)&v22->__shared_owners_;
        v22->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7937C00;
        v22->__shared_weak_owners_ = 0;
        v22[1].__vftable = (std::__shared_weak_count_vtbl *)v21;
        v58[1] = (uint64_t)v22;
        siri::dialogengine::VariableObject::AddProperty((uint64_t)v14, v58);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
        if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v61.__r_.__value_.__l.__data_);
        if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v62.__r_.__value_.__l.__data_);
      }
      v25 = (const void **)std::string::basic_string[abi:ne180100]<0>(&v62, "dateFormatter");
      OptionalObjectParameter = siri::dialogengine::GetOptionalObjectParameter(v25, a2);
      v27 = (uint64_t)OptionalObjectParameter;
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v62.__r_.__value_.__l.__data_);
        if (!v27)
          return v14;
      }
      else if (!OptionalObjectParameter)
      {
        return v14;
      }
      v28 = (_QWORD *)operator new();
      std::string::basic_string[abi:ne180100]<0>(&v62, "dateFormatter");
      siri::dialogengine::VariableObject::VariableObject(v28, &v62);
      v60.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
      v29 = (_QWORD *)operator new();
      *v29 = &off_1E7935B00;
      v29[1] = 0;
      v29[2] = 0;
      v29[3] = v28;
      v60.__r_.__value_.__l.__size_ = (std::string::size_type)v29;
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v62.__r_.__value_.__l.__data_);
      v30 = (const void **)std::string::basic_string[abi:ne180100]<0>(&v62, "length");
      v31 = (char *)siri::dialogengine::GetOptionalStringParameter(v30, v27);
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v62.__r_.__value_.__l.__data_);
      v32 = (const void **)std::string::basic_string[abi:ne180100]<0>(&v62, "omitYear");
      OptionalBooleanParameter = siri::dialogengine::GetOptionalBooleanParameter(v32, v27);
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v62.__r_.__value_.__l.__data_);
        if (v31)
        {
LABEL_51:
          v34 = operator new();
          std::string::basic_string[abi:ne180100]<0>(&v62, "length");
          if (v31[95] < 0)
            std::string::__init_copy_ctor_external(&v61, *((const std::string::value_type **)v31 + 9), *((_QWORD *)v31 + 10));
          else
            v61 = *(std::string *)(v31 + 3);
          siri::dialogengine::VariableString::VariableString(v34, &v62, (uint64_t)&v61);
          v57[0] = v34;
          v35 = (std::__shared_weak_count *)operator new();
          v35->__shared_owners_ = 0;
          v36 = (unint64_t *)&v35->__shared_owners_;
          v35->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7937C00;
          v35->__shared_weak_owners_ = 0;
          v35[1].__vftable = (std::__shared_weak_count_vtbl *)v34;
          v57[1] = (uint64_t)v35;
          siri::dialogengine::VariableObject::AddProperty((uint64_t)v28, v57);
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
          if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v61.__r_.__value_.__l.__data_);
          if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v62.__r_.__value_.__l.__data_);
          v28 = (_QWORD *)v60.__r_.__value_.__r.__words[0];
          if (!OptionalBooleanParameter)
            goto LABEL_73;
          goto LABEL_66;
        }
      }
      else if (v31)
      {
        goto LABEL_51;
      }
      if (!OptionalBooleanParameter)
      {
LABEL_73:
        size = (std::__shared_weak_count *)v60.__r_.__value_.__l.__size_;
        v55[0] = (uint64_t)v28;
        v55[1] = v60.__r_.__value_.__l.__size_;
        if (v60.__r_.__value_.__l.__size_)
        {
          v43 = (unint64_t *)(v60.__r_.__value_.__l.__size_ + 8);
          do
            v44 = __ldxr(v43);
          while (__stxr(v44 + 1, v43));
        }
        siri::dialogengine::VariableObject::AddProperty((uint64_t)v14, v55);
        if (size)
        {
          v45 = (unint64_t *)&size->__shared_owners_;
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 - 1, v45));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }
        v47 = (std::__shared_weak_count *)v60.__r_.__value_.__l.__size_;
        if (v60.__r_.__value_.__l.__size_)
        {
          v48 = (unint64_t *)(v60.__r_.__value_.__l.__size_ + 8);
          do
            v49 = __ldaxr(v48);
          while (__stlxr(v49 - 1, v48));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
        }
        return v14;
      }
LABEL_66:
      v38 = operator new();
      std::string::basic_string[abi:ne180100]<0>(&v62, "omitYear");
      siri::dialogengine::VariableBoolean::VariableBoolean(v38, &v62, OptionalBooleanParameter[66]);
      v56[0] = v38;
      v39 = (std::__shared_weak_count *)operator new();
      v39->__shared_owners_ = 0;
      v40 = (unint64_t *)&v39->__shared_owners_;
      v39->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7937C68;
      v39->__shared_weak_owners_ = 0;
      v39[1].__vftable = (std::__shared_weak_count_vtbl *)v38;
      v56[1] = (uint64_t)v39;
      siri::dialogengine::VariableObject::AddProperty((uint64_t)v28, v56);
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v62.__r_.__value_.__l.__data_);
      v28 = (_QWORD *)v60.__r_.__value_.__r.__words[0];
      goto LABEL_73;
    }
LABEL_8:
    CurrentTime = OptionalNumberParameter[9];
    goto LABEL_19;
  }
  OptionalNumberParameter = (double *)siri::dialogengine::GetRequiredNumberParameter(a3, a2);
  if (OptionalNumberParameter)
    goto LABEL_8;
  if (*(char *)(a2 + 31) < 0)
    std::string::__init_copy_ctor_external(&v60, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  else
    v60 = *(std::string *)(a2 + 8);
  v50 = std::string::insert(&v60, 0, "Parameter 'endSecs' is missing from dialog.CalendarRange object ");
  v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
  v61.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v51;
  v50->__r_.__value_.__l.__size_ = 0;
  v50->__r_.__value_.__r.__words[2] = 0;
  v50->__r_.__value_.__r.__words[0] = 0;
  v52 = std::string::append(&v61, ", aborting...");
  v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
  v62.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v53;
  v52->__r_.__value_.__l.__size_ = 0;
  v52->__r_.__value_.__r.__words[2] = 0;
  v52->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::Log::LogWithLevel((uint64_t)&v62, 3u);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v61.__r_.__value_.__l.__data_);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  return 0;
}

void sub_1BF86EAC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;
  uint64_t v32;

  if (*(char *)(v32 - 73) < 0)
    operator delete(*(void **)(v32 - 96));
  MEMORY[0x1C3B8D890](v31, 0x10B3C40D3060B95);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<siri::dialogengine::VariableObject>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableObject,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E7935B00;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1BF86EE08(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::shared_ptr<siri::dialogengine::VariableBoolean>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableBoolean,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E792AA48;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1BF86EE7C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::shared_ptr<siri::dialogengine::VariableString>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableString,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E7937B88;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1BF86EEF0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 40 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>> const&>((uint64_t **)a1, v4, a2, (__int128 *)a2);
      a2 += 5;
      v6 -= 40;
    }
    while (v6);
  }
  return a1;
}

void sub_1BF86EF78(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

uint64_t std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>::~pair(uint64_t a1)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>,0>(uint64_t a1)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>> const&>(uint64_t **a1, uint64_t a2, const void **a3, __int128 *a4)
{
  uint64_t v6;
  uint64_t **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t **v12;
  const void **v13;
  const void **v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t *v18[3];
  uint64_t v19;
  uint64_t v20;

  v6 = a2;
  v8 = a1 + 1;
  if (a1 + 1 != (uint64_t **)a2
    && !std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a3, (const void **)(a2 + 32)))
  {
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (const void **)(v6 + 32), a3))
    {
      v19 = v6;
      v20 = v6;
      v12 = (uint64_t **)&v19;
      if (v6)
        return;
LABEL_31:
      v6 = v20;
      goto LABEL_32;
    }
    v12 = (uint64_t **)(v6 + 8);
    v11 = *(uint64_t **)(v6 + 8);
    if (v11)
    {
      v13 = *(const void ***)(v6 + 8);
      do
      {
        v14 = v13;
        v13 = (const void **)*v13;
      }
      while (v13);
    }
    else
    {
      v17 = v6;
      do
      {
        v14 = *(const void ***)(v17 + 16);
        v16 = *v14 == (const void *)v17;
        v17 = (uint64_t)v14;
      }
      while (!v16);
    }
    if (v14 != (const void **)v8)
    {
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a3, v14 + 4))
      {
LABEL_29:
        v12 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v20, a3);
        goto LABEL_30;
      }
      v11 = *v12;
    }
    if (v11)
    {
      v20 = (uint64_t)v14;
      v12 = (uint64_t **)v14;
    }
    else
    {
      v20 = v6;
    }
LABEL_30:
    if (*v12)
      return;
    goto LABEL_31;
  }
  if (*a1 == (uint64_t *)v6)
  {
    v10 = v6;
    goto LABEL_16;
  }
  v9 = *(_QWORD *)v6;
  if (*(_QWORD *)v6)
  {
    do
    {
      v10 = v9;
      v9 = *(_QWORD *)(v9 + 8);
    }
    while (v9);
  }
  else
  {
    v15 = v6;
    do
    {
      v10 = *(_QWORD *)(v15 + 16);
      v16 = *(_QWORD *)v10 == v15;
      v15 = v10;
    }
    while (v16);
  }
  if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (const void **)(v10 + 32), a3))
    goto LABEL_29;
LABEL_16:
  if (*(_QWORD *)v6)
  {
    v20 = v10;
    v12 = (uint64_t **)(v10 + 8);
    goto LABEL_30;
  }
  v20 = v6;
  v12 = (uint64_t **)v6;
LABEL_32:
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__construct_node<std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>> const&>((uint64_t)v18, (uint64_t)a1, a4);
  std::__tree<std::string>::__insert_node_at(a1, v6, v12, v18[0]);
  v18[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>>>>::reset[abi:ne180100]((uint64_t)v18);
}

std::string *std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__construct_node<std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>> const&>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a2 + 8;
  v6 = (char *)operator new(0x48uLL);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = 0;
  result = std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>::pair[abi:ne180100]((std::string *)(v6 + 32), a3);
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

void sub_1BF86F25C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>>>>::reset[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

std::string *std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string::size_type v5;
  unint64_t *v6;
  unint64_t v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = *((_QWORD *)a2 + 4);
  this[1].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 3);
  this[1].__r_.__value_.__l.__size_ = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return this;
}

void std::__shared_ptr_pointer<siri::dialogengine::VariableString *,std::shared_ptr<siri::dialogengine::VariableString>::__shared_ptr_default_delete<siri::dialogengine::VariableString,siri::dialogengine::VariableString>,std::allocator<siri::dialogengine::VariableString>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::VariableString *,std::shared_ptr<siri::dialogengine::VariableString>::__shared_ptr_default_delete<siri::dialogengine::VariableString,siri::dialogengine::VariableString>,std::allocator<siri::dialogengine::VariableString>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::VariableString *,std::shared_ptr<siri::dialogengine::VariableString>::__shared_ptr_default_delete<siri::dialogengine::VariableString,siri::dialogengine::VariableString>,std::allocator<siri::dialogengine::VariableString>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<siri::dialogengine::VariableBoolean *,std::shared_ptr<siri::dialogengine::VariableBoolean>::__shared_ptr_default_delete<siri::dialogengine::VariableBoolean,siri::dialogengine::VariableBoolean>,std::allocator<siri::dialogengine::VariableBoolean>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::VariableBoolean *,std::shared_ptr<siri::dialogengine::VariableBoolean>::__shared_ptr_default_delete<siri::dialogengine::VariableBoolean,siri::dialogengine::VariableBoolean>,std::allocator<siri::dialogengine::VariableBoolean>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::VariableBoolean *,std::shared_ptr<siri::dialogengine::VariableBoolean>::__shared_ptr_default_delete<siri::dialogengine::VariableBoolean,siri::dialogengine::VariableBoolean>,std::allocator<siri::dialogengine::VariableBoolean>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<siri::dialogengine::VariableObject *,std::shared_ptr<siri::dialogengine::VariableObject>::__shared_ptr_default_delete<siri::dialogengine::VariableObject,siri::dialogengine::VariableObject>,std::allocator<siri::dialogengine::VariableObject>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::VariableObject *,std::shared_ptr<siri::dialogengine::VariableObject>::__shared_ptr_default_delete<siri::dialogengine::VariableObject,siri::dialogengine::VariableObject>,std::allocator<siri::dialogengine::VariableObject>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::VariableObject *,std::shared_ptr<siri::dialogengine::VariableObject>::__shared_ptr_default_delete<siri::dialogengine::VariableObject,siri::dialogengine::VariableObject>,std::allocator<siri::dialogengine::VariableObject>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::shared_ptr<siri::dialogengine::Variable>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableNumber,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E7937CE0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1BF86F4F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::shared_ptr<siri::dialogengine::Variable>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableString,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E7937C00;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1BF86F568(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::shared_ptr<siri::dialogengine::Variable>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableBoolean,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E7937C68;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1BF86F5DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<siri::dialogengine::VariableBoolean *,std::shared_ptr<siri::dialogengine::Variable>::__shared_ptr_default_delete<siri::dialogengine::Variable,siri::dialogengine::VariableBoolean>,std::allocator<siri::dialogengine::VariableBoolean>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::VariableBoolean *,std::shared_ptr<siri::dialogengine::Variable>::__shared_ptr_default_delete<siri::dialogengine::Variable,siri::dialogengine::VariableBoolean>,std::allocator<siri::dialogengine::VariableBoolean>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::VariableBoolean *,std::shared_ptr<siri::dialogengine::Variable>::__shared_ptr_default_delete<siri::dialogengine::Variable,siri::dialogengine::VariableBoolean>,std::allocator<siri::dialogengine::VariableBoolean>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<siri::dialogengine::VariableString *,std::shared_ptr<siri::dialogengine::Variable>::__shared_ptr_default_delete<siri::dialogengine::Variable,siri::dialogengine::VariableString>,std::allocator<siri::dialogengine::VariableString>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::VariableString *,std::shared_ptr<siri::dialogengine::Variable>::__shared_ptr_default_delete<siri::dialogengine::Variable,siri::dialogengine::VariableString>,std::allocator<siri::dialogengine::VariableString>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::VariableString *,std::shared_ptr<siri::dialogengine::Variable>::__shared_ptr_default_delete<siri::dialogengine::Variable,siri::dialogengine::VariableString>,std::allocator<siri::dialogengine::VariableString>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<siri::dialogengine::VariableNumber *,std::shared_ptr<siri::dialogengine::Variable>::__shared_ptr_default_delete<siri::dialogengine::Variable,siri::dialogengine::VariableNumber>,std::allocator<siri::dialogengine::VariableNumber>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::VariableNumber *,std::shared_ptr<siri::dialogengine::Variable>::__shared_ptr_default_delete<siri::dialogengine::Variable,siri::dialogengine::VariableNumber>,std::allocator<siri::dialogengine::VariableNumber>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::VariableNumber *,std::shared_ptr<siri::dialogengine::Variable>::__shared_ptr_default_delete<siri::dialogengine::Variable,siri::dialogengine::VariableNumber>,std::allocator<siri::dialogengine::VariableNumber>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

std::string *siri::dialogengine::DialogCalendarRange::dateTimeRangeLong(siri::dialogengine::DialogCalendarRange *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::GetDateRange(this, (uint64_t)a2, 0, 1);
}

std::string *siri::dialogengine::DialogCalendarRange::dateTimeRangeFromTo(siri::dialogengine::DialogCalendarRange *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::GetDateRange(this, (uint64_t)a2, 1, 1);
}

std::string *siri::dialogengine::DialogCalendarRange::dateRangeShort(siri::dialogengine::DialogCalendarRange *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::GetDateRange(this, (uint64_t)a2, 2, 0);
}

std::string *siri::dialogengine::DialogCalendarRange::dateRangeLong(siri::dialogengine::DialogCalendarRange *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::GetDateRange(this, (uint64_t)a2, 2, 1);
}

std::string *siri::dialogengine::DialogCalendarRange::dateRangeFromTo(siri::dialogengine::DialogCalendarRange *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::GetDateRange(this, (uint64_t)a2, 3, 1);
}

std::string *siri::dialogengine::DialogCalendarRange::timeRangeShort(siri::dialogengine::DialogCalendarRange *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::GetDateRange(this, (uint64_t)a2, 4, 0);
}

std::string *siri::dialogengine::DialogCalendarRange::timeRangeLong(siri::dialogengine::DialogCalendarRange *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::GetDateRange(this, (uint64_t)a2, 4, 1);
}

std::string *siri::dialogengine::DialogCalendarRange::timeRangeFromTo(siri::dialogengine::DialogCalendarRange *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::GetDateRange(this, (uint64_t)a2, 5, 1);
}

std::string *siri::dialogengine::DialogCalendarRange::nonSpecificDateTimeRange(siri::dialogengine::DialogCalendarRange *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  _QWORD *CalendarObject;
  _QWORD *v6;
  const siri::dialogengine::VariableObject *v7;
  std::string *v8;
  void *v9;
  const siri::dialogengine::VariableObject *v10;
  std::string *v11;
  void *v12;
  std::string *v13;
  const siri::dialogengine::TimeStamp *v14;
  _BOOL4 v15;
  const siri::dialogengine::VariableObject *v16;
  std::string *v17;
  std::string *DateRange;
  int v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::string v33;
  std::string v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  std::string v39;
  char v40;
  siri::dialogengine::Context *v41;
  std::__shared_weak_count *v42;
  void *__p[2];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  siri::dialogengine::Context *v54;
  std::__shared_weak_count *v55;

  std::string::basic_string[abi:ne180100]<0>(__p, "endSecs");
  CalendarObject = siri::dialogengine::GetCalendarObject(this, (uint64_t)a2, (const void **)__p);
  std::shared_ptr<siri::dialogengine::VariableObject>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableObject,void>(&v54, (uint64_t)CalendarObject);
  if (SBYTE7(v44) < 0)
    operator delete(__p[0]);
  if (v54)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "startSecs");
    v6 = siri::dialogengine::GetCalendarObject(this, (uint64_t)a2, (const void **)__p);
    std::shared_ptr<siri::dialogengine::VariableObject>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableObject,void>(&v41, (uint64_t)v6);
    if (SBYTE7(v44) < 0)
      operator delete(__p[0]);
    siri::dialogengine::GetRequestTimeStamp(this, v41, __p);
    siri::dialogengine::GetRequestTimeStamp(this, v54, &v39);
    v8 = siri::dialogengine::DialogCalendar::dateDescriptive(this, v41, v7);
    std::shared_ptr<siri::dialogengine::VariableString>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableString,void>(&v37, (uint64_t)v9);
    v11 = siri::dialogengine::DialogCalendar::dateDescriptive(this, v54, v10);
    std::shared_ptr<siri::dialogengine::VariableString>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableString,void>(&v35, (uint64_t)v12);
    if (*(char *)(v37 + 95) < 0)
      std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)(v37 + 72), *(_QWORD *)(v37 + 80));
    else
      v34 = *(std::string *)(v37 + 72);
    if (*(char *)(v35 + 95) < 0)
      std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)(v35 + 72), *(_QWORD *)(v35 + 80));
    else
      v33 = *(std::string *)(v35 + 72);
    v15 = siri::dialogengine::StringsEqual((uint64_t)&v34, (uint64_t)&v33);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v34.__r_.__value_.__l.__data_);
      if (v15)
        goto LABEL_18;
    }
    else if (v15)
    {
LABEL_18:
      if (siri::dialogengine::IsAnyDateTimeConstant(this, (siri::dialogengine::Context *)__p, (siri::dialogengine::TimeStamp *)&v39, v14))
      {
        v17 = siri::dialogengine::DialogCalendar::nonSpecificDateTimeDescriptive(this, v41, v16);
        if (!v17)
        {
          v13 = 0;
LABEL_26:
          v20 = v36;
          if (v36)
          {
            p_shared_owners = (unint64_t *)&v36->__shared_owners_;
            do
              v22 = __ldaxr(p_shared_owners);
            while (__stlxr(v22 - 1, p_shared_owners));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
          }
          v23 = v38;
          if (v38)
          {
            v24 = (unint64_t *)&v38->__shared_owners_;
            do
              v25 = __ldaxr(v24);
            while (__stlxr(v25 - 1, v24));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
              std::__shared_weak_count::__release_weak(v23);
            }
          }
          if (v40 < 0)
            operator delete((void *)v39.__r_.__value_.__l.__size_);
          if (SHIBYTE(v44) < 0)
            operator delete(__p[1]);
          v26 = v42;
          if (v42)
          {
            v27 = (unint64_t *)&v42->__shared_owners_;
            do
              v28 = __ldaxr(v27);
            while (__stlxr(v28 - 1, v27));
            if (!v28)
            {
              ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
              std::__shared_weak_count::__release_weak(v26);
            }
          }
          goto LABEL_45;
        }
LABEL_25:
        v13 = DateRange;
        goto LABEL_26;
      }
      v19 = 6;
LABEL_24:
      DateRange = siri::dialogengine::GetDateRange(this, (uint64_t)a2, v19, 1);
      goto LABEL_25;
    }
    v19 = 0;
    goto LABEL_24;
  }
  v13 = (std::string *)operator new();
  std::string::basic_string[abi:ne180100]<0>(&v39, "");
  v53 = 0;
  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  v47 = 0u;
  v48 = 0u;
  v45 = 0u;
  v46 = 0u;
  *(_OWORD *)__p = 0u;
  v44 = 0u;
  siri::dialogengine::VariableString::VariableString(v13, &v39, (const siri::dialogengine::SpeakableString *)__p);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
LABEL_45:
  v29 = v55;
  if (v55)
  {
    v30 = (unint64_t *)&v55->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  return v13;
}

void sub_1BF86FB74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,uint64_t a25,std::__shared_weak_count *a26,void *a27,void *a28,int a29,__int16 a30,char a31,char a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,std::__shared_weak_count *a38,void *a39,void *a40,int a41,__int16 a42,char a43,char a44,int a45,__int16 a46,char a47,char a48)
{
  uint64_t v48;
  unint64_t *p_shared_owners;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;

  if (a21 < 0)
    operator delete(__p);
  if (a24)
  {
    p_shared_owners = (unint64_t *)&a24->__shared_owners_;
    do
      v51 = __ldaxr(p_shared_owners);
    while (__stlxr(v51 - 1, p_shared_owners));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))a24->__on_zero_shared)(a24);
      std::__shared_weak_count::__release_weak(a24);
    }
  }
  if (a26)
  {
    v52 = (unint64_t *)&a26->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))a26->__on_zero_shared)(a26);
      std::__shared_weak_count::__release_weak(a26);
    }
  }
  if (a36 < 0)
    operator delete(a28);
  if (a48 < 0)
    operator delete(a40);
  if (a38)
  {
    v54 = (unint64_t *)&a38->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))a38->__on_zero_shared)(a38);
      std::__shared_weak_count::__release_weak(a38);
    }
  }
  v56 = *(std::__shared_weak_count **)(v48 - 40);
  if (v56)
  {
    v57 = (unint64_t *)&v56->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  _Unwind_Resume(exception_object);
}

std::string *siri::dialogengine::DialogCalendarRange::dateRangeAbbreviated(siri::dialogengine::DialogCalendarRange *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  _QWORD *CalendarObject;
  _QWORD *v6;
  const char *v7;
  const siri::dialogengine::TimeStamp *v8;
  int ICUYear;
  const siri::dialogengine::TimeStamp *v10;
  int v11;
  uint64_t i;
  const siri::dialogengine::TimeStamp *v13;
  int ICUMonth;
  const siri::dialogengine::TimeStamp *v15;
  const siri::dialogengine::TimeStamp *v16;
  int ICUDayOfMonth;
  const siri::dialogengine::TimeStamp *v18;
  int v19;
  std::string *v20;
  _OWORD *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _OWORD *v25;
  std::__shared_weak_count *size;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  void *v36[2];
  std::string v37;
  std::string v38;
  void *v39[2];
  char v40;
  char v41;
  __int128 v42;
  __int128 v43;
  uint64_t *v44[3];
  void *v45[2];
  char v46;
  void *v47[2];
  char v48;
  void *v49[2];
  char v50;
  void *v51[2];
  char v52;
  uint64_t v53[3];
  char v54;
  std::string v55;
  char v56;
  void *v57[2];
  char v58;
  siri::dialogengine::Context *v59;
  std::__shared_weak_count *v60;
  siri::dialogengine::Context *v61;
  std::__shared_weak_count *v62;
  void *__p[2];
  _QWORD v64[4];
  void *v65[2];
  void *v66[2];
  void *v67[6];
  __int128 v68;
  void *v69[2];
  uint64_t v70;
  __int128 v71;
  _QWORD v72[3];
  __int128 v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(__p, "endSecs");
  CalendarObject = siri::dialogengine::GetCalendarObject(this, (uint64_t)a2, (const void **)__p);
  std::shared_ptr<siri::dialogengine::VariableObject>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableObject,void>(&v61, (uint64_t)CalendarObject);
  if (SHIBYTE(v64[0]) < 0)
    operator delete(__p[0]);
  if (v61)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "startSecs");
    v6 = siri::dialogengine::GetCalendarObject(this, (uint64_t)a2, (const void **)__p);
    std::shared_ptr<siri::dialogengine::VariableObject>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableObject,void>(&v59, (uint64_t)v6);
    if (SHIBYTE(v64[0]) < 0)
      operator delete(__p[0]);
    siri::dialogengine::Context::GetLocaleWithUserCalendar(this, v7, (uint64_t)v57);
    siri::dialogengine::GetRequestTimeStamp(this, v59, &v55);
    siri::dialogengine::GetRequestTimeStamp(this, v61, v53);
    ICUYear = siri::dialogengine::GetICUYear((siri::dialogengine *)&v55, v8);
    v11 = siri::dialogengine::GetICUYear((siri::dialogengine *)v53, v10);
    std::string::basic_string[abi:ne180100]<0>(__p, "long");
    LOBYTE(v64[1]) = 0;
    siri::dialogengine::GetICUDisplayDate(&v55, (char **)v57, (uint64_t *)__p, v51);
    if (SHIBYTE(v64[0]) < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(__p, "long");
    LOBYTE(v64[1]) = 0;
    siri::dialogengine::GetICUDisplayDate(v53, (char **)v57, (uint64_t *)__p, v49);
    if (SHIBYTE(v64[0]) < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(__p, "medium");
    LOBYTE(v64[1]) = 1;
    siri::dialogengine::GetICUDisplayDate(&v55, (char **)v57, (uint64_t *)__p, v47);
    if (SHIBYTE(v64[0]) < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(__p, "medium");
    LOBYTE(v64[1]) = 0;
    siri::dialogengine::GetICUDisplayDate(v53, (char **)v57, (uint64_t *)__p, v45);
    if (SHIBYTE(v64[0]) < 0)
      operator delete(__p[0]);
    siri::dialogengine::CreateJSONStringVal((uint64_t)v47, (uint64_t *)v39);
    std::string::basic_string[abi:ne180100]<0>(__p, "startDate");
    *(_OWORD *)&v64[1] = *(_OWORD *)v39;
    v39[0] = 0;
    v39[1] = 0;
    siri::dialogengine::CreateJSONStringVal((uint64_t)v45, (uint64_t *)&v38);
    std::string::basic_string[abi:ne180100]<0>(&v64[3], "endDate");
    *(_OWORD *)v66 = *(_OWORD *)&v38.__r_.__value_.__l.__data_;
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = 0uLL;
    siri::dialogengine::CreateJSONStringVal((uint64_t)v51, (uint64_t *)&v37);
    std::string::basic_string[abi:ne180100]<0>(v67, "startDateFull");
    *(_OWORD *)&v67[3] = *(_OWORD *)&v37.__r_.__value_.__l.__data_;
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = 0uLL;
    siri::dialogengine::CreateJSONStringVal((uint64_t)v49, (uint64_t *)v36);
    std::string::basic_string[abi:ne180100]<0>(&v67[5], "endDateFull");
    *(_OWORD *)v69 = *(_OWORD *)v36;
    v36[0] = 0;
    v36[1] = 0;
    siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)1, (uint64_t *)&v43);
    std::string::basic_string[abi:ne180100]<0>(&v70, "isShort");
    v71 = v43;
    v43 = 0uLL;
    siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)1, (uint64_t *)&v42);
    std::string::basic_string[abi:ne180100]<0>(v72, "isDateRange");
    v73 = v42;
    v42 = 0uLL;
    std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100]((uint64_t)v44, (const void **)__p, 6);
    for (i = 0; i != -30; i -= 5)
    {
      std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v73 + i * 8);
      if (SHIBYTE(v72[i + 2]) < 0)
        operator delete((void *)v72[i]);
    }
    std::string::basic_string[abi:ne180100]<0>(v39, "long");
    v41 = 1;
    if (ICUYear == v11)
    {
      ICUMonth = siri::dialogengine::GetICUMonth((siri::dialogengine *)&v55, v13);
      if (ICUMonth == siri::dialogengine::GetICUMonth((siri::dialogengine *)v53, v15))
      {
        ICUDayOfMonth = siri::dialogengine::GetICUDayOfMonth((siri::dialogengine *)&v55, v16);
        v19 = siri::dialogengine::GetICUDayOfMonth((siri::dialogengine *)v53, v18);
        if (v19 == siri::dialogengine::GetICULastDayOfMonth(v53) && ICUDayOfMonth == 1)
        {
          siri::dialogengine::GetICUMonthAndYear(&v55, (char **)v57, (uint64_t *)v39, &v38);
          MEMORY[0x1C3B8D53C](v39, "medium");
          siri::dialogengine::GetICUMonthAndYear(&v55, (char **)v57, (uint64_t *)v39, &v37);
          operator new();
          std::string::basic_string[abi:ne180100]<0>(v36, "");
          siri::dialogengine::SpeakableString::SpeakableString((uint64_t)__p, &v37, &v38);
        }
      }
      siri::dialogengine::GetICUDisplayDate(&v55, (char **)v57, (uint64_t *)v39, __p);
      siri::dialogengine::CreateJSONStringVal((uint64_t)__p, (uint64_t *)&v37);
      std::string::basic_string[abi:ne180100]<0>(&v38, "startDateFull");
      v36[0] = &v38;
      v25 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v44, (const void **)&v38.__r_.__value_.__l.__data_, (_OWORD **)v36);
      std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)v25 + 56, (__int128 *)&v37);
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v38.__r_.__value_.__l.__data_);
      size = (std::__shared_weak_count *)v37.__r_.__value_.__l.__size_;
      if (v37.__r_.__value_.__l.__size_)
      {
        v27 = (unint64_t *)(v37.__r_.__value_.__l.__size_ + 8);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      if (SHIBYTE(v64[0]) < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(&v38, "dateTime#dateTimeRange");
      siri::dialogengine::ExecuteSharedCat(this, (uint64_t)&v38, (const void ***)v44, (uint64_t)__p);
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v38.__r_.__value_.__l.__data_);
    }
    else
    {
      v41 = 0;
      MEMORY[0x1C3B8D53C](v39, "medium");
      siri::dialogengine::GetICUDisplayDate(&v55, (char **)v57, (uint64_t *)v39, __p);
      siri::dialogengine::CreateJSONStringVal((uint64_t)__p, (uint64_t *)&v37);
      std::string::basic_string[abi:ne180100]<0>(&v38, "startDate");
      v36[0] = &v38;
      v21 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v44, (const void **)&v38.__r_.__value_.__l.__data_, (_OWORD **)v36);
      std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)v21 + 56, (__int128 *)&v37);
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v38.__r_.__value_.__l.__data_);
      v22 = (std::__shared_weak_count *)v37.__r_.__value_.__l.__size_;
      if (v37.__r_.__value_.__l.__size_)
      {
        v23 = (unint64_t *)(v37.__r_.__value_.__l.__size_ + 8);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      if (SHIBYTE(v64[0]) < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(&v38, "dateTime#dateTimeRange");
      siri::dialogengine::ExecuteSharedCat(this, (uint64_t)&v38, (const void ***)v44, (uint64_t)__p);
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v38.__r_.__value_.__l.__data_);
    }
    v20 = (std::string *)operator new();
    std::string::basic_string[abi:ne180100]<0>(&v38, "");
    siri::dialogengine::VariableString::VariableString(v20, &v38, (const siri::dialogengine::SpeakableString *)__p);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
    if (SHIBYTE(v70) < 0)
      operator delete(v69[0]);
    if (SHIBYTE(v68) < 0)
      operator delete(v67[5]);
    if (SHIBYTE(v67[4]) < 0)
      operator delete(v67[2]);
    if (SHIBYTE(v67[1]) < 0)
      operator delete(v66[1]);
    if (SHIBYTE(v66[0]) < 0)
      operator delete(v65[0]);
    if (SHIBYTE(v64[3]) < 0)
      operator delete((void *)v64[1]);
    if (SHIBYTE(v64[0]) < 0)
      operator delete(__p[0]);
    if (v40 < 0)
      operator delete(v39[0]);
    std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(v44[1]);
    if (v46 < 0)
      operator delete(v45[0]);
    if (v48 < 0)
      operator delete(v47[0]);
    if (v50 < 0)
      operator delete(v49[0]);
    if (v52 < 0)
      operator delete(v51[0]);
    if (v54 < 0)
      operator delete((void *)v53[1]);
    if (v56 < 0)
      operator delete((void *)v55.__r_.__value_.__l.__size_);
    if (v58 < 0)
      operator delete(v57[0]);
    v29 = v60;
    if (v60)
    {
      p_shared_owners = (unint64_t *)&v60->__shared_owners_;
      do
        v31 = __ldaxr(p_shared_owners);
      while (__stlxr(v31 - 1, p_shared_owners));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
  }
  else
  {
    v20 = (std::string *)operator new();
    std::string::basic_string[abi:ne180100]<0>(&v55, "");
    v70 = 0;
    v68 = 0u;
    *(_OWORD *)v69 = 0u;
    *(_OWORD *)v66 = 0u;
    memset(v67, 0, sizeof(v67));
    *(_OWORD *)v65 = 0u;
    *(_OWORD *)__p = 0u;
    memset(v64, 0, sizeof(v64));
    siri::dialogengine::VariableString::VariableString(v20, &v55, (const siri::dialogengine::SpeakableString *)__p);
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v55.__r_.__value_.__l.__data_);
  }
  v32 = v62;
  if (v62)
  {
    v33 = (unint64_t *)&v62->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  return v20;
}

void sub_1BF870684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,_QWORD *a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,void *a62,uint64_t a63)
{
  char a67;
  void *a69;
  char a72;
  void *a73;
  char a74;
  void *a75;
  char a76;
  std::__shared_weak_count *a77;
  std::__shared_weak_count *a78;
  void *a79;
  char a80;
  void *a81;
  char a82;
  void *a83;
  char a84;
  void *a85;
  char a86;
  void *a87;
  uint64_t v87;
  unint64_t *p_shared_owners;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;

  if (SLOBYTE(STACK[0x237]) < 0)
    operator delete((void *)STACK[0x220]);
  if (SLOBYTE(STACK[0x21F]) < 0)
    operator delete((void *)STACK[0x208]);
  if (SLOBYTE(STACK[0x207]) < 0)
    operator delete(a87);
  if (a86 < 0)
    operator delete(a85);
  if (a84 < 0)
    operator delete(a83);
  if (a82 < 0)
    operator delete(a81);
  if (a80 < 0)
    operator delete(a79);
  if (a14 < 0)
    operator delete(a9);
  MEMORY[0x1C3B8D890](v87, 0x10B3C40D3060B95);
  if (a21 < 0)
    operator delete(a16);
  if (a28 < 0)
    operator delete(a23);
  if (a35 < 0)
    operator delete(a30);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(a42);
  if (a49 < 0)
    operator delete(a44);
  if (a55 < 0)
    operator delete(a50);
  if (a61 < 0)
    operator delete(a56);
  if (a67 < 0)
    operator delete(a62);
  if (a72 < 0)
    operator delete(a69);
  if (a74 < 0)
    operator delete(a73);
  if (a76 < 0)
    operator delete(a75);
  if (a77)
  {
    p_shared_owners = (unint64_t *)&a77->__shared_owners_;
    do
      v90 = __ldaxr(p_shared_owners);
    while (__stlxr(v90 - 1, p_shared_owners));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))a77->__on_zero_shared)(a77);
      std::__shared_weak_count::__release_weak(a77);
    }
  }
  if (a78)
  {
    v91 = (unint64_t *)&a78->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))a78->__on_zero_shared)(a78);
      std::__shared_weak_count::__release_weak(a78);
    }
  }
  _Unwind_Resume(a1);
}

void sub_1BF870C4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  unint64_t *p_shared_owners;
  unint64_t v23;

  if (a22)
  {
    p_shared_owners = (unint64_t *)&a22->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))a22->__on_zero_shared)(a22);
      std::__shared_weak_count::__release_weak(a22);
    }
  }
  JUMPOUT(0x1BF870B64);
}

void sub_1BF870C8C()
{
  JUMPOUT(0x1BF870B64);
}

void sub_1BF870C94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;

  if (a64 < 0)
    JUMPOUT(0x1BF870B70);
  JUMPOUT(0x1BF870B74);
}

void sub_1BF870CA8()
{
  JUMPOUT(0x1BF870B74);
}

void sub_1BF870CB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;

  if (a64 < 0)
    JUMPOUT(0x1BF870B80);
  JUMPOUT(0x1BF870B84);
}

void sub_1BF870CC4()
{
  JUMPOUT(0x1BF870B84);
}

void sub_1BF870CCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;

  if (a64 < 0)
    JUMPOUT(0x1BF870B90);
  JUMPOUT(0x1BF870B94);
}

void sub_1BF870CE0()
{
  JUMPOUT(0x1BF870B94);
}

void sub_1BF870CE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;

  if (a64 < 0)
    JUMPOUT(0x1BF870BA0);
  JUMPOUT(0x1BF870BA4);
}

void sub_1BF870CFC()
{
  JUMPOUT(0x1BF870BA4);
}

void sub_1BF870D0C()
{
  JUMPOUT(0x1BF870BB4);
}

void sub_1BF870D14()
{
  JUMPOUT(0x1BF870BC4);
}

void sub_1BF870D1C()
{
  JUMPOUT(0x1BF870BD4);
}

void sub_1BF870D2C()
{
  JUMPOUT(0x1BF870C44);
}

void sub_1BF870D34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;

  if (a64 < 0)
    operator delete(__p);
  JUMPOUT(0x1BF870C0CLL);
}

void sub_1BF870D4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;

  if (a64 < 0)
    operator delete(__p);
  JUMPOUT(0x1BF870C44);
}

_OWORD *std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, _OWORD **a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v11[2];
  char v12;
  uint64_t v13;

  v5 = (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v13, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x48uLL);
    v11[1] = a1 + 1;
    v8 = *a3;
    v9 = *((_QWORD *)*a3 + 2);
    v6[2] = **a3;
    *((_QWORD *)v6 + 6) = v9;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    *((_QWORD *)v6 + 7) = 0;
    *((_QWORD *)v6 + 8) = 0;
    v12 = 1;
    std::__tree<std::string>::__insert_node_at(a1, v13, v7, (uint64_t *)v6);
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>>>>::reset[abi:ne180100]((uint64_t)v11);
  }
  return v6;
}

uint64_t std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

_QWORD *siri::dialogengine::DialogCalendarRange::start(siri::dialogengine::DialogCalendarRange *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  _QWORD *CalendarObject;
  void *__p[2];
  char v8;

  std::string::basic_string[abi:ne180100]<0>(__p, "startSecs");
  CalendarObject = siri::dialogengine::GetCalendarObject(this, (uint64_t)a2, (const void **)__p);
  if (v8 < 0)
    operator delete(__p[0]);
  return CalendarObject;
}

void sub_1BF870ED8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *siri::dialogengine::DialogCalendarRange::end(siri::dialogengine::DialogCalendarRange *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  _QWORD *CalendarObject;
  void *__p[2];
  char v8;

  std::string::basic_string[abi:ne180100]<0>(__p, "endSecs");
  CalendarObject = siri::dialogengine::GetCalendarObject(this, (uint64_t)a2, (const void **)__p);
  if (v8 < 0)
    operator delete(__p[0]);
  return CalendarObject;
}

void sub_1BF870F54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::DialogCalendarRange::isRangeSameDay(siri::dialogengine::DialogCalendarRange *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  _QWORD *CalendarObject;
  _QWORD *v6;
  const siri::dialogengine::VariableObject *v7;
  std::string *v8;
  void *v9;
  const siri::dialogengine::VariableObject *v10;
  std::string *v11;
  void *v12;
  uint64_t v13;
  char v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::string __p;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  siri::dialogengine::Context *v33;
  std::__shared_weak_count *v34;
  std::string v35;
  siri::dialogengine::Context *v36;
  std::__shared_weak_count *v37;

  std::string::basic_string[abi:ne180100]<0>(&v35, "startSecs");
  CalendarObject = siri::dialogengine::GetCalendarObject(this, (uint64_t)a2, (const void **)&v35.__r_.__value_.__l.__data_);
  std::shared_ptr<siri::dialogengine::VariableObject>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableObject,void>(&v36, (uint64_t)CalendarObject);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v35, "endSecs");
  v6 = siri::dialogengine::GetCalendarObject(this, (uint64_t)a2, (const void **)&v35.__r_.__value_.__l.__data_);
  std::shared_ptr<siri::dialogengine::VariableObject>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableObject,void>(&v33, (uint64_t)v6);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (v33)
  {
    v8 = siri::dialogengine::DialogCalendar::dateDescriptive(this, v36, v7);
    std::shared_ptr<siri::dialogengine::VariableString>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableString,void>(&v31, (uint64_t)v9);
    v11 = siri::dialogengine::DialogCalendar::dateDescriptive(this, v33, v10);
    std::shared_ptr<siri::dialogengine::VariableString>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableString,void>(&v29, (uint64_t)v12);
    if (*(char *)(v31 + 95) < 0)
      std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)(v31 + 72), *(_QWORD *)(v31 + 80));
    else
      v35 = *(std::string *)(v31 + 72);
    if (*(char *)(v29 + 95) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v29 + 72), *(_QWORD *)(v29 + 80));
    else
      __p = *(std::string *)(v29 + 72);
    v14 = siri::dialogengine::StringsEqual((uint64_t)&v35, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
    v13 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&v35, "");
    siri::dialogengine::VariableBoolean::VariableBoolean(v13, &v35, v14);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
    v15 = v30;
    if (v30)
    {
      p_shared_owners = (unint64_t *)&v30->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v18 = v32;
    if (v32)
    {
      v19 = (unint64_t *)&v32->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  else
  {
    v13 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&v35, "");
    siri::dialogengine::VariableBoolean::VariableBoolean(v13, &v35, 0);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
  }
  v21 = v34;
  if (v34)
  {
    v22 = (unint64_t *)&v34->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v37;
  if (v37)
  {
    v25 = (unint64_t *)&v37->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  return v13;
}

void sub_1BF871280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  uint64_t v20;

  if (*(char *)(v20 - 41) < 0)
    operator delete(*(void **)(v20 - 64));
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v20 - 32);
  _Unwind_Resume(a1);
}

void sub_1BF87136C()
{
  uint64_t v0;

  if (*(char *)(v0 - 41) < 0)
    operator delete(*(void **)(v0 - 64));
  JUMPOUT(0x1BF87135CLL);
}

void sub_1BF871384()
{
  uint64_t v0;

  if (*(char *)(v0 - 41) < 0)
    operator delete(*(void **)(v0 - 64));
  JUMPOUT(0x1BF871364);
}

uint64_t siri::dialogengine::DialogCalendarRange::isRangeInThisYear(siri::dialogengine::DialogCalendarRange *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  _QWORD *CalendarObject;
  _QWORD *v6;
  siri::dialogengine::Context *v7;
  const siri::dialogengine::VariableObject *v8;
  const void *v9;
  void *v10;
  uint64_t v11;
  char v12;
  const siri::dialogengine::VariableObject *v13;
  const void *v14;
  void *v15;
  const siri::dialogengine::VariableObject *v16;
  const void *v17;
  void *v18;
  double v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *size;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  void *lpsrc;
  std::__shared_weak_count *v44;
  siri::dialogengine::Context *v45;
  std::__shared_weak_count *v46;
  std::string v47;
  siri::dialogengine::Context *v48;
  std::__shared_weak_count *v49;

  std::string::basic_string[abi:ne180100]<0>(&v47, "startSecs");
  CalendarObject = siri::dialogengine::GetCalendarObject(this, (uint64_t)a2, (const void **)&v47.__r_.__value_.__l.__data_);
  std::shared_ptr<siri::dialogengine::VariableObject>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableObject,void>(&v48, (uint64_t)CalendarObject);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v47, "endSecs");
  v6 = siri::dialogengine::GetCalendarObject(this, (uint64_t)a2, (const void **)&v47.__r_.__value_.__l.__data_);
  std::shared_ptr<siri::dialogengine::VariableObject>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableObject,void>(&v45, (uint64_t)v6);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  if (v45)
  {
    std::string::basic_string[abi:ne180100]<0>(&v47, "now");
    siri::dialogengine::Context::FindVariable(&lpsrc, this, &v47);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v47.__r_.__value_.__l.__data_);
    if (lpsrc)
    {
      v9 = (const void *)siri::dialogengine::DialogCalendar::year(this, v7, v8);
      if (v9)
      else
        v10 = 0;
      std::shared_ptr<siri::dialogengine::VariableNumber>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableNumber,void>(&v47, (uint64_t)v10);
      v14 = (const void *)siri::dialogengine::DialogCalendar::year(this, v48, v13);
      if (v14)
      else
        v15 = 0;
      std::shared_ptr<siri::dialogengine::VariableNumber>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableNumber,void>(&v41, (uint64_t)v15);
      v17 = (const void *)siri::dialogengine::DialogCalendar::year(this, v45, v16);
      if (v17)
      else
        v18 = 0;
      std::shared_ptr<siri::dialogengine::VariableNumber>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableNumber,void>(&v39, (uint64_t)v18);
      v19 = *(double *)(v47.__r_.__value_.__r.__words[0] + 72);
      v12 = *(double *)(v41 + 72) == v19 && *(double *)(v39 + 72) == v19;
      v20 = v40;
      if (v40)
      {
        p_shared_owners = (unint64_t *)&v40->__shared_owners_;
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v23 = v42;
      if (v42)
      {
        v24 = (unint64_t *)&v42->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      size = (std::__shared_weak_count *)v47.__r_.__value_.__l.__size_;
      if (v47.__r_.__value_.__l.__size_)
      {
        v27 = (unint64_t *)(v47.__r_.__value_.__l.__size_ + 8);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
    }
    else
    {
      v12 = 0;
    }
    v11 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&v47, "");
    siri::dialogengine::VariableBoolean::VariableBoolean(v11, &v47, v12);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v47.__r_.__value_.__l.__data_);
    v29 = v44;
    if (v44)
    {
      v30 = (unint64_t *)&v44->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
  }
  else
  {
    v11 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&v47, "");
    siri::dialogengine::VariableBoolean::VariableBoolean(v11, &v47, 0);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v47.__r_.__value_.__l.__data_);
  }
  v32 = v46;
  if (v46)
  {
    v33 = (unint64_t *)&v46->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = v49;
  if (v49)
  {
    v36 = (unint64_t *)&v49->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  return v11;
}

void sub_1BF871770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  uint64_t v9;
  va_list va;

  va_start(va, a8);
  if (*(char *)(v9 - 33) < 0)
    operator delete(*(void **)(v9 - 56));
  MEMORY[0x1C3B8D890](v8, 0x10B3C408E4F17DDLL);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v9 - 32);
  _Unwind_Resume(a1);
}

void sub_1BF87184C()
{
  JUMPOUT(0x1BF87183CLL);
}

void sub_1BF871854()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1BF87183CLL);
}

void sub_1BF87186C()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1BF871844);
}

_QWORD *std::shared_ptr<siri::dialogengine::VariableNumber>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableNumber,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E792CDF0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1BF8718D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<siri::dialogengine::VariableNumber *,std::shared_ptr<siri::dialogengine::VariableNumber>::__shared_ptr_default_delete<siri::dialogengine::VariableNumber,siri::dialogengine::VariableNumber>,std::allocator<siri::dialogengine::VariableNumber>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::VariableNumber *,std::shared_ptr<siri::dialogengine::VariableNumber>::__shared_ptr_default_delete<siri::dialogengine::VariableNumber,siri::dialogengine::VariableNumber>,std::allocator<siri::dialogengine::VariableNumber>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::VariableNumber *,std::shared_ptr<siri::dialogengine::VariableNumber>::__shared_ptr_default_delete<siri::dialogengine::VariableNumber,siri::dialogengine::VariableNumber>,std::allocator<siri::dialogengine::VariableNumber>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t siri::dialogengine::DialogCalendarRange::isRangeWholeDay(siri::dialogengine::DialogCalendarRange *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  _QWORD *CalendarObject;
  _QWORD *v6;
  const siri::dialogengine::VariableObject *v7;
  const void *v8;
  void *v9;
  uint64_t v10;
  const siri::dialogengine::VariableObject *v11;
  const void *v12;
  void *v13;
  const siri::dialogengine::VariableObject *v14;
  const void *v15;
  void *v16;
  const siri::dialogengine::VariableObject *v17;
  const void *v18;
  void *v19;
  char v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  siri::dialogengine::Context *v48;
  std::__shared_weak_count *v49;
  std::string v50;
  siri::dialogengine::Context *v51;
  std::__shared_weak_count *v52;

  std::string::basic_string[abi:ne180100]<0>(&v50, "startSecs");
  CalendarObject = siri::dialogengine::GetCalendarObject(this, (uint64_t)a2, (const void **)&v50.__r_.__value_.__l.__data_);
  std::shared_ptr<siri::dialogengine::VariableObject>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableObject,void>(&v51, (uint64_t)CalendarObject);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v50, "endSecs");
  v6 = siri::dialogengine::GetCalendarObject(this, (uint64_t)a2, (const void **)&v50.__r_.__value_.__l.__data_);
  std::shared_ptr<siri::dialogengine::VariableObject>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableObject,void>(&v48, (uint64_t)v6);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  if (v48)
  {
    v8 = (const void *)siri::dialogengine::DialogCalendar::hourOfDay(this, v51, v7);
    if (v8)
    else
      v9 = 0;
    std::shared_ptr<siri::dialogengine::VariableNumber>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableNumber,void>(&v46, (uint64_t)v9);
    v12 = (const void *)siri::dialogengine::DialogCalendar::minuteOfHour(this, v51, v11);
    if (v12)
    else
      v13 = 0;
    std::shared_ptr<siri::dialogengine::VariableNumber>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableNumber,void>(&v44, (uint64_t)v13);
    v15 = (const void *)siri::dialogengine::DialogCalendar::hourOfDay(this, v48, v14);
    if (v15)
    else
      v16 = 0;
    std::shared_ptr<siri::dialogengine::VariableNumber>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableNumber,void>(&v42, (uint64_t)v16);
    v18 = (const void *)siri::dialogengine::DialogCalendar::minuteOfHour(this, v48, v17);
    if (v18)
    else
      v19 = 0;
    std::shared_ptr<siri::dialogengine::VariableNumber>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableNumber,void>(&v40, (uint64_t)v19);
    v20 = *(double *)(v46 + 72) == 0.0
       && *(double *)(v44 + 72) == 0.0
       && *(double *)(v42 + 72) == 23.0
       && *(double *)(v40 + 72) == 59.0;
    v10 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&v50, "");
    siri::dialogengine::VariableBoolean::VariableBoolean(v10, &v50, v20);
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v50.__r_.__value_.__l.__data_);
    v21 = v41;
    if (v41)
    {
      p_shared_owners = (unint64_t *)&v41->__shared_owners_;
      do
        v23 = __ldaxr(p_shared_owners);
      while (__stlxr(v23 - 1, p_shared_owners));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = v43;
    if (v43)
    {
      v25 = (unint64_t *)&v43->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v27 = v45;
    if (v45)
    {
      v28 = (unint64_t *)&v45->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    v30 = v47;
    if (v47)
    {
      v31 = (unint64_t *)&v47->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
  }
  else
  {
    v10 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&v50, "");
    siri::dialogengine::VariableBoolean::VariableBoolean(v10, &v50, 0);
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v50.__r_.__value_.__l.__data_);
  }
  v33 = v49;
  if (v49)
  {
    v34 = (unint64_t *)&v49->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = v52;
  if (v52)
  {
    v37 = (unint64_t *)&v52->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  return v10;
}

void sub_1BF871D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  uint64_t v11;
  va_list va;

  va_start(va, a10);
  if (*(char *)(v11 - 33) < 0)
    operator delete(*(void **)(v11 - 56));
  MEMORY[0x1C3B8D890](v10, 0x10B3C408E4F17DDLL);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v11 - 32);
  _Unwind_Resume(a1);
}

void sub_1BF871E2C()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1BF871E1CLL);
}

void sub_1BF871E44()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1BF871E24);
}

uint64_t siri::dialogengine::DialogCalendarRange::isStartFromBeginningOfDay(siri::dialogengine::DialogCalendarRange *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  _QWORD *CalendarObject;
  const siri::dialogengine::VariableObject *v6;
  const void *v7;
  void *v8;
  const siri::dialogengine::VariableObject *v9;
  const void *v10;
  void *v11;
  uint64_t v12;
  char v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  std::string __p;
  siri::dialogengine::Context *v29;
  std::__shared_weak_count *v30;

  std::string::basic_string[abi:ne180100]<0>(&__p, "startSecs");
  CalendarObject = siri::dialogengine::GetCalendarObject(this, (uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_);
  std::shared_ptr<siri::dialogengine::VariableObject>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableObject,void>(&v29, (uint64_t)CalendarObject);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v7 = (const void *)siri::dialogengine::DialogCalendar::hourOfDay(this, v29, v6);
  if (v7)
  else
    v8 = 0;
  std::shared_ptr<siri::dialogengine::VariableNumber>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableNumber,void>(&v26, (uint64_t)v8);
  v10 = (const void *)siri::dialogengine::DialogCalendar::minuteOfHour(this, v29, v9);
  if (v10)
  else
    v11 = 0;
  std::shared_ptr<siri::dialogengine::VariableNumber>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableNumber,void>(&v24, (uint64_t)v11);
  v12 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  v13 = *(double *)(v26 + 72) == 0.0 && *(double *)(v24 + 72) == 0.0;
  siri::dialogengine::VariableBoolean::VariableBoolean(v12, &__p, v13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v14 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v27;
  if (v27)
  {
    v18 = (unint64_t *)&v27->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = v30;
  if (v30)
  {
    v21 = (unint64_t *)&v30->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  return v12;
}

void sub_1BF872054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;
  uint64_t v20;

  if (a19 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8D890](v19, 0x10B3C408E4F17DDLL);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v20 - 32);
  _Unwind_Resume(a1);
}

void sub_1BF8720C0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  JUMPOUT(0x1BF8720B8);
}

uint64_t siri::dialogengine::DialogCalendarRange::isEndUntilEndOfDay(siri::dialogengine::DialogCalendarRange *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  _QWORD *CalendarObject;
  const siri::dialogengine::VariableObject *v6;
  const void *v7;
  void *v8;
  uint64_t v9;
  const siri::dialogengine::VariableObject *v10;
  const void *v11;
  void *v12;
  char v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  std::string __p;
  siri::dialogengine::Context *v29;
  std::__shared_weak_count *v30;

  std::string::basic_string[abi:ne180100]<0>(&__p, "endSecs");
  CalendarObject = siri::dialogengine::GetCalendarObject(this, (uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_);
  std::shared_ptr<siri::dialogengine::VariableObject>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableObject,void>(&v29, (uint64_t)CalendarObject);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v29)
  {
    v7 = (const void *)siri::dialogengine::DialogCalendar::hourOfDay(this, v29, v6);
    if (v7)
    else
      v8 = 0;
    std::shared_ptr<siri::dialogengine::VariableNumber>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableNumber,void>(&v26, (uint64_t)v8);
    v11 = (const void *)siri::dialogengine::DialogCalendar::minuteOfHour(this, v29, v10);
    if (v11)
    else
      v12 = 0;
    std::shared_ptr<siri::dialogengine::VariableNumber>::shared_ptr[abi:ne180100]<siri::dialogengine::VariableNumber,void>(&v24, (uint64_t)v12);
    v9 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    v13 = *(double *)(v26 + 72) == 23.0 && *(double *)(v24 + 72) == 59.0;
    siri::dialogengine::VariableBoolean::VariableBoolean(v9, &__p, v13);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v14 = v25;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = v27;
    if (v27)
    {
      v18 = (unint64_t *)&v27->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  else
  {
    v9 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    siri::dialogengine::VariableBoolean::VariableBoolean(v9, &__p, 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  v20 = v30;
  if (v30)
  {
    v21 = (unint64_t *)&v30->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  return v9;
}

void sub_1BF872330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;
  uint64_t v20;

  if (a19 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8D890](v19, 0x10B3C408E4F17DDLL);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v20 - 32);
  _Unwind_Resume(a1);
}

void sub_1BF8723D8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  JUMPOUT(0x1BF8723D0);
}

void siri::dialogengine::GetUnitLabel<siri::dialogengine::Length>(int a1@<W0>, std::string *a2@<X8>)
{
  uint64_t v3;
  __int128 v4;

  v3 = siri::dialogengine::FindUnitInfo<siri::dialogengine::Length>(a1);
  if (v3)
  {
    if (*(char *)(v3 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v3 + 8), *(_QWORD *)(v3 + 16));
    }
    else
    {
      v4 = *(_OWORD *)(v3 + 8);
      a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v3 + 24);
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v4;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "");
  }
}

uint64_t siri::dialogengine::FindUnitInfo<siri::dialogengine::Length>(int a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;

  v2 = siri::dialogengine::AllUnitInfo<siri::dialogengine::Length>();
  v5 = *(_QWORD *)(v2 + 8);
  v3 = v2 + 8;
  v4 = v5;
  if (!v5)
    return 0;
  v6 = v3;
  do
  {
    v7 = *(_DWORD *)(v4 + 32);
    v8 = v7 < a1;
    if (v7 >= a1)
      v9 = (uint64_t *)v4;
    else
      v9 = (uint64_t *)(v4 + 8);
    if (!v8)
      v6 = v4;
    v4 = *v9;
  }
  while (*v9);
  if (v6 == v3)
    return 0;
  v10 = *(_DWORD *)(v6 + 32);
  v11 = v6 + 40;
  if (v10 <= a1)
    return v11;
  else
    return 0;
}

uint64_t siri::dialogengine::AllUnitInfo<siri::dialogengine::Length>()
{
  unsigned __int8 v0;
  unint64_t v1;
  _QWORD *v3;
  char v4;
  char **v5;
  char *v6;

  if ((v0 & 1) == 0
  {
    v3 = (_QWORD *)operator new();
    *v3 = 0;
    siri::dialogengine::AllUnitInfo<siri::dialogengine::Length>(void)::flag = (uint64_t)v3;
  }
  v1 = atomic_load((unint64_t *)siri::dialogengine::AllUnitInfo<siri::dialogengine::Length>(void)::flag);
  if (v1 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once((std::once_flag::_State_type *)siri::dialogengine::AllUnitInfo<siri::dialogengine::Length>(void)::flag, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::UnitInfoMap<siri::dialogengine::Length>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Length>(void)::$_0 &&>>);
  }
  return siri::dialogengine::AllUnitInfo<siri::dialogengine::Length>(void)::sUnits;
}

void sub_1BF872570(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::UnitInfoMap<siri::dialogengine::Length>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Length>(void)::$_0 &&>>()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  uint64_t *v10;
  uint64_t *v11;
  _DWORD *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  void **v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  void *v65[2];
  char v66;
  void *v67[2];
  char v68;
  void *v69[2];
  char v70;
  void *v71[2];
  char v72;
  void *v73[2];
  char v74;
  void *v75[2];
  char v76;
  void *v77[2];
  char v78;
  void *v79[2];
  char v80;
  void *v81[2];
  char v82;
  void *v83[2];
  char v84;
  void *v85[2];
  char v86;
  void *v87[2];
  char v88;
  void *v89[2];
  char v90;
  void *v91[2];
  char v92;
  void *v93[2];
  char v94;
  void *v95[2];
  char v96;
  void *v97[2];
  char v98;
  void *v99[2];
  char v100;
  void *v101[2];
  char v102;
  void *v103[2];
  char v104;
  void *v105[2];
  char v106;
  void *v107[2];
  char v108;
  _QWORD v109[2];
  char v110;
  char v111[8];
  void *v112;
  char v113;
  void *__p;
  char v115;
  _BYTE v116[24];
  _BYTE *v117;
  _BYTE v118[24];
  _BYTE *v119;
  char v120[8];
  void *v121;
  char v122;
  void *v123;
  char v124;
  _BYTE v125[24];
  _BYTE *v126;
  _BYTE v127[24];
  _BYTE *v128;
  char v129[8];
  void *v130;
  char v131;
  void *v132;
  char v133;
  _BYTE v134[24];
  _BYTE *v135;
  _BYTE v136[24];
  _BYTE *v137;
  char v138[8];
  void *v139;
  char v140;
  void *v141;
  char v142;
  _BYTE v143[24];
  _BYTE *v144;
  _BYTE v145[24];
  _BYTE *v146;
  char v147[8];
  void *v148;
  char v149;
  void *v150;
  char v151;
  _BYTE v152[24];
  _BYTE *v153;
  _BYTE v154[24];
  _BYTE *v155;
  char v156[8];
  void *v157;
  char v158;
  void *v159;
  char v160;
  _BYTE v161[24];
  _BYTE *v162;
  _BYTE v163[24];
  _BYTE *v164;
  char v165[8];
  void *v166;
  char v167;
  void *v168;
  char v169;
  _BYTE v170[24];
  _BYTE *v171;
  _BYTE v172[24];
  _BYTE *v173;
  char v174[8];
  void *v175;
  char v176;
  void *v177;
  char v178;
  _BYTE v179[24];
  _BYTE *v180;
  _BYTE v181[24];
  _BYTE *v182;
  char v183[8];
  void *v184;
  char v185;
  void *v186;
  char v187;
  _BYTE v188[24];
  _BYTE *v189;
  _BYTE v190[24];
  _BYTE *v191;
  char v192[8];
  void *v193;
  char v194;
  void *v195;
  char v196;
  _BYTE v197[24];
  _BYTE *v198;
  _BYTE v199[24];
  _BYTE *v200;
  char v201[8];
  void *v202[2];
  char v203;
  void *v204;
  char v205;
  _BYTE v206[24];
  _BYTE *v207;
  _BYTE v208[24];
  _BYTE *v209;
  _DWORD v210[2];
  _DWORD v211[32];
  _DWORD v212[32];
  _DWORD v213[32];
  _DWORD v214[32];
  _DWORD v215[32];
  _DWORD v216[32];
  _DWORD v217[32];
  _DWORD v218[32];
  _DWORD v219[32];
  _DWORD v220[32];
  _QWORD v221[17];

  v221[15] = *MEMORY[0x1E0C80C00];
  v0 = operator new();
  std::string::basic_string[abi:ne180100]<0>(v107, "astronomical units");
  std::string::basic_string[abi:ne180100]<0>(v105, "");
  siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo((uint64_t)v201, 0, (__int128 *)v107, (__int128 *)v105, 1.495979e11);
  v210[0] = 0;
  siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo((uint64_t)v211, (uint64_t)v201);
  std::string::basic_string[abi:ne180100]<0>(v103, "centimeters");
  std::string::basic_string[abi:ne180100]<0>(v101, "");
  siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo((uint64_t)v192, (const char *)1, (__int128 *)v103, (__int128 *)v101, 0.01);
  v211[30] = 1;
  siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo((uint64_t)v212, (uint64_t)v192);
  std::string::basic_string[abi:ne180100]<0>(v99, "feet");
  std::string::basic_string[abi:ne180100]<0>(v97, "");
  siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo((uint64_t)v183, (const char *)2, (__int128 *)v99, (__int128 *)v97, 0.3048);
  v212[30] = 2;
  siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo((uint64_t)v213, (uint64_t)v183);
  std::string::basic_string[abi:ne180100]<0>(v95, "inches");
  std::string::basic_string[abi:ne180100]<0>(v93, "");
  siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo((uint64_t)v174, (const char *)3, (__int128 *)v95, (__int128 *)v93, 0.0254);
  v213[30] = 3;
  siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo((uint64_t)v214, (uint64_t)v174);
  std::string::basic_string[abi:ne180100]<0>(v91, "kilometers");
  std::string::basic_string[abi:ne180100]<0>(v89, "");
  siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo((uint64_t)v165, (const char *)4, (__int128 *)v91, (__int128 *)v89, 1000.0);
  v214[30] = 4;
  siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo((uint64_t)v215, (uint64_t)v165);
  std::string::basic_string[abi:ne180100]<0>(v87, "light years");
  std::string::basic_string[abi:ne180100]<0>(v85, "");
  siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo((uint64_t)v156, (const char *)5, (__int128 *)v87, (__int128 *)v85, 9.46073e15);
  v215[30] = 5;
  siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo((uint64_t)v216, (uint64_t)v156);
  std::string::basic_string[abi:ne180100]<0>(v83, "meters");
  std::string::basic_string[abi:ne180100]<0>(v81, "");
  siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo((uint64_t)v147, (const char *)6, (__int128 *)v83, (__int128 *)v81, 1.0);
  v216[30] = 6;
  siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo((uint64_t)v217, (uint64_t)v147);
  std::string::basic_string[abi:ne180100]<0>(v79, "miles");
  std::string::basic_string[abi:ne180100]<0>(v77, "");
  siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo((uint64_t)v138, (const char *)7, (__int128 *)v79, (__int128 *)v77, 1609.344);
  v217[30] = 7;
  siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo((uint64_t)v218, (uint64_t)v138);
  std::string::basic_string[abi:ne180100]<0>(v75, "millimeters");
  std::string::basic_string[abi:ne180100]<0>(v73, "");
  siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo((uint64_t)v129, (const char *)8, (__int128 *)v75, (__int128 *)v73, 0.001);
  v218[30] = 8;
  siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo((uint64_t)v219, (uint64_t)v129);
  std::string::basic_string[abi:ne180100]<0>(v71, "nautical miles");
  std::string::basic_string[abi:ne180100]<0>(v69, "");
  siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo((uint64_t)v120, (const char *)9, (__int128 *)v71, (__int128 *)v69, 1852.0);
  v219[30] = 9;
  siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo((uint64_t)v220, (uint64_t)v120);
  std::string::basic_string[abi:ne180100]<0>(v67, "yards");
  std::string::basic_string[abi:ne180100]<0>(v65, "");
  siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo((uint64_t)v111, (const char *)0xA, (__int128 *)v67, (__int128 *)v65, 0.9144);
  v220[30] = 10;
  siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo((uint64_t)v221, (uint64_t)v111);
  v1 = 0;
  v2 = 0;
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)v0 = v0 + 8;
  v3 = (uint64_t *)(v0 + 8);
  while (1)
  {
    v4 = &v210[32 * v2];
    v5 = v0 + 8;
    if (v3 == (uint64_t *)(v0 + 8))
      goto LABEL_8;
    v6 = v1;
    v7 = v0 + 8;
    if (v1)
    {
      do
      {
        v5 = v6;
        v6 = *(_QWORD *)(v6 + 8);
      }
      while (v6);
    }
    else
    {
      do
      {
        v5 = *(_QWORD *)(v7 + 16);
        v8 = *(_QWORD *)v5 == v7;
        v7 = v5;
      }
      while (v8);
    }
    v9 = *v4;
    if (*(_DWORD *)(v5 + 32) < *v4)
    {
LABEL_8:
      v10 = (uint64_t *)(v1 ? v5 : v0 + 8);
      v11 = (uint64_t *)(v1 ? v5 + 8 : v0 + 8);
    }
    else
    {
      v10 = (uint64_t *)(v0 + 8);
      v11 = (uint64_t *)(v0 + 8);
      if (v1)
      {
        v11 = (uint64_t *)(v0 + 8);
        while (1)
        {
          while (1)
          {
            v10 = (uint64_t *)v1;
            v14 = *(_DWORD *)(v1 + 32);
            if (v9 >= v14)
              break;
            v1 = *v10;
            v11 = v10;
            if (!*v10)
              goto LABEL_15;
          }
          if (v14 >= v9)
            break;
          v11 = v10 + 1;
          v1 = v10[1];
          if (!v1)
            goto LABEL_15;
        }
      }
    }
    if (!*v11)
    {
LABEL_15:
      v12 = operator new(0xA0uLL);
      v109[0] = v12;
      v109[1] = v0 + 8;
      v110 = 0;
      v12[8] = *v4;
      siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo((uint64_t)(v12 + 10), (uint64_t)&v210[32 * v2 + 2]);
      v110 = 1;
      *(_QWORD *)v12 = 0;
      *((_QWORD *)v12 + 1) = 0;
      *((_QWORD *)v12 + 2) = v10;
      *v11 = (uint64_t)v12;
      v13 = **(_QWORD **)v0;
      if (v13)
      {
        *(_QWORD *)v0 = v13;
        v12 = (_DWORD *)*v11;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v0 + 8), (uint64_t *)v12);
      ++*(_QWORD *)(v0 + 16);
      v109[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<siri::dialogengine::Length,siri::dialogengine::UnitInfo<siri::dialogengine::Length>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<siri::dialogengine::Length,siri::dialogengine::UnitInfo<siri::dialogengine::Length>>,void *>>>>::reset[abi:ne180100]((uint64_t)v109);
    }
    if (++v2 == 11)
      break;
    v3 = *(uint64_t **)v0;
    v1 = *(_QWORD *)(v0 + 8);
  }
  siri::dialogengine::AllUnitInfo<siri::dialogengine::Length>(void)::sUnits = v0;
  v15 = 1408;
  do
  {
    v16 = *(_BYTE **)&v210[v15 / 4 - 2];
    if (&v208[v15] == v16)
    {
      v16 = &v208[v15];
      v17 = 4;
    }
    else
    {
      if (!v16)
        goto LABEL_34;
      v17 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_34:
    v18 = *(_BYTE **)&v208[v15 - 8];
    if (&v206[v15] == v18)
    {
      v18 = &v206[v15];
      v19 = 4;
    }
    else
    {
      if (!v18)
        goto LABEL_39;
      v19 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_39:
    v20 = (void **)&v210[v15 / 4];
    if ((v206[v15 - 1] & 0x80000000) != 0)
      operator delete(*(v20 - 11));
    if (*((char *)v20 - 89) < 0)
      operator delete(v202[v15 / 8]);
    v15 -= 128;
  }
  while (v15);
  v21 = v119;
  if (v119 == v118)
  {
    v22 = 4;
    v21 = v118;
LABEL_48:
    (*(void (**)(void))(*v21 + 8 * v22))();
  }
  else if (v119)
  {
    v22 = 5;
    goto LABEL_48;
  }
  v23 = v117;
  if (v117 == v116)
  {
    v24 = 4;
    v23 = v116;
LABEL_53:
    (*(void (**)(void))(*v23 + 8 * v24))();
  }
  else if (v117)
  {
    v24 = 5;
    goto LABEL_53;
  }
  if (v115 < 0)
    operator delete(__p);
  if (v113 < 0)
    operator delete(v112);
  if (v66 < 0)
    operator delete(v65[0]);
  if (v68 < 0)
    operator delete(v67[0]);
  v25 = v128;
  if (v128 == v127)
  {
    v26 = 4;
    v25 = v127;
LABEL_66:
    (*(void (**)(void))(*v25 + 8 * v26))();
  }
  else if (v128)
  {
    v26 = 5;
    goto LABEL_66;
  }
  v27 = v126;
  if (v126 == v125)
  {
    v28 = 4;
    v27 = v125;
LABEL_71:
    (*(void (**)(void))(*v27 + 8 * v28))();
  }
  else if (v126)
  {
    v28 = 5;
    goto LABEL_71;
  }
  if (v124 < 0)
    operator delete(v123);
  if (v122 < 0)
    operator delete(v121);
  if (v70 < 0)
    operator delete(v69[0]);
  if (v72 < 0)
    operator delete(v71[0]);
  v29 = v137;
  if (v137 == v136)
  {
    v30 = 4;
    v29 = v136;
LABEL_84:
    (*(void (**)(void))(*v29 + 8 * v30))();
  }
  else if (v137)
  {
    v30 = 5;
    goto LABEL_84;
  }
  v31 = v135;
  if (v135 == v134)
  {
    v32 = 4;
    v31 = v134;
LABEL_89:
    (*(void (**)(void))(*v31 + 8 * v32))();
  }
  else if (v135)
  {
    v32 = 5;
    goto LABEL_89;
  }
  if (v133 < 0)
    operator delete(v132);
  if (v131 < 0)
    operator delete(v130);
  if (v74 < 0)
    operator delete(v73[0]);
  if (v76 < 0)
    operator delete(v75[0]);
  v33 = v146;
  if (v146 == v145)
  {
    v34 = 4;
    v33 = v145;
LABEL_102:
    (*(void (**)(void))(*v33 + 8 * v34))();
  }
  else if (v146)
  {
    v34 = 5;
    goto LABEL_102;
  }
  v35 = v144;
  if (v144 == v143)
  {
    v36 = 4;
    v35 = v143;
LABEL_107:
    (*(void (**)(void))(*v35 + 8 * v36))();
  }
  else if (v144)
  {
    v36 = 5;
    goto LABEL_107;
  }
  if (v142 < 0)
    operator delete(v141);
  if (v140 < 0)
    operator delete(v139);
  if (v78 < 0)
    operator delete(v77[0]);
  if (v80 < 0)
    operator delete(v79[0]);
  v37 = v155;
  if (v155 == v154)
  {
    v38 = 4;
    v37 = v154;
LABEL_120:
    (*(void (**)(void))(*v37 + 8 * v38))();
  }
  else if (v155)
  {
    v38 = 5;
    goto LABEL_120;
  }
  v39 = v153;
  if (v153 == v152)
  {
    v40 = 4;
    v39 = v152;
LABEL_125:
    (*(void (**)(void))(*v39 + 8 * v40))();
  }
  else if (v153)
  {
    v40 = 5;
    goto LABEL_125;
  }
  if (v151 < 0)
    operator delete(v150);
  if (v149 < 0)
    operator delete(v148);
  if (v82 < 0)
    operator delete(v81[0]);
  if (v84 < 0)
    operator delete(v83[0]);
  v41 = v164;
  if (v164 == v163)
  {
    v42 = 4;
    v41 = v163;
LABEL_138:
    (*(void (**)(void))(*v41 + 8 * v42))();
  }
  else if (v164)
  {
    v42 = 5;
    goto LABEL_138;
  }
  v43 = v162;
  if (v162 == v161)
  {
    v44 = 4;
    v43 = v161;
LABEL_143:
    (*(void (**)(void))(*v43 + 8 * v44))();
  }
  else if (v162)
  {
    v44 = 5;
    goto LABEL_143;
  }
  if (v160 < 0)
    operator delete(v159);
  if (v158 < 0)
    operator delete(v157);
  if (v86 < 0)
    operator delete(v85[0]);
  if (v88 < 0)
    operator delete(v87[0]);
  v45 = v173;
  if (v173 == v172)
  {
    v46 = 4;
    v45 = v172;
LABEL_156:
    (*(void (**)(void))(*v45 + 8 * v46))();
  }
  else if (v173)
  {
    v46 = 5;
    goto LABEL_156;
  }
  v47 = v171;
  if (v171 == v170)
  {
    v48 = 4;
    v47 = v170;
LABEL_161:
    (*(void (**)(void))(*v47 + 8 * v48))();
  }
  else if (v171)
  {
    v48 = 5;
    goto LABEL_161;
  }
  if (v169 < 0)
    operator delete(v168);
  if (v167 < 0)
    operator delete(v166);
  if (v90 < 0)
    operator delete(v89[0]);
  if (v92 < 0)
    operator delete(v91[0]);
  v49 = v182;
  if (v182 == v181)
  {
    v50 = 4;
    v49 = v181;
LABEL_174:
    (*(void (**)(void))(*v49 + 8 * v50))();
  }
  else if (v182)
  {
    v50 = 5;
    goto LABEL_174;
  }
  v51 = v180;
  if (v180 == v179)
  {
    v52 = 4;
    v51 = v179;
LABEL_179:
    (*(void (**)(void))(*v51 + 8 * v52))();
  }
  else if (v180)
  {
    v52 = 5;
    goto LABEL_179;
  }
  if (v178 < 0)
    operator delete(v177);
  if (v176 < 0)
    operator delete(v175);
  if (v94 < 0)
    operator delete(v93[0]);
  if (v96 < 0)
    operator delete(v95[0]);
  v53 = v191;
  if (v191 == v190)
  {
    v54 = 4;
    v53 = v190;
LABEL_192:
    (*(void (**)(void))(*v53 + 8 * v54))();
  }
  else if (v191)
  {
    v54 = 5;
    goto LABEL_192;
  }
  v55 = v189;
  if (v189 == v188)
  {
    v56 = 4;
    v55 = v188;
LABEL_197:
    (*(void (**)(void))(*v55 + 8 * v56))();
  }
  else if (v189)
  {
    v56 = 5;
    goto LABEL_197;
  }
  if (v187 < 0)
    operator delete(v186);
  if (v185 < 0)
    operator delete(v184);
  if (v98 < 0)
    operator delete(v97[0]);
  if (v100 < 0)
    operator delete(v99[0]);
  v57 = v200;
  if (v200 == v199)
  {
    v58 = 4;
    v57 = v199;
LABEL_210:
    (*(void (**)(void))(*v57 + 8 * v58))();
  }
  else if (v200)
  {
    v58 = 5;
    goto LABEL_210;
  }
  v59 = v198;
  if (v198 == v197)
  {
    v60 = 4;
    v59 = v197;
LABEL_215:
    (*(void (**)(void))(*v59 + 8 * v60))();
  }
  else if (v198)
  {
    v60 = 5;
    goto LABEL_215;
  }
  if (v196 < 0)
    operator delete(v195);
  if (v194 < 0)
    operator delete(v193);
  if (v102 < 0)
    operator delete(v101[0]);
  if (v104 < 0)
    operator delete(v103[0]);
  v61 = v209;
  if (v209 == v208)
  {
    v62 = 4;
    v61 = v208;
LABEL_228:
    (*(void (**)(void))(*v61 + 8 * v62))();
  }
  else if (v209)
  {
    v62 = 5;
    goto LABEL_228;
  }
  v63 = v207;
  if (v207 == v206)
  {
    v64 = 4;
    v63 = v206;
LABEL_233:
    (*(void (**)(void))(*v63 + 8 * v64))();
  }
  else if (v207)
  {
    v64 = 5;
    goto LABEL_233;
  }
  if (v205 < 0)
    operator delete(v204);
  if (v203 < 0)
    operator delete(v202[0]);
  if (v106 < 0)
    operator delete(v105[0]);
  if (v108 < 0)
    operator delete(v107[0]);
}

void sub_1BF873304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,void *a63)
{
  char a68;
  void *a69;
  char a72;
  void *a73;
  char a74;
  void *a75;
  char a76;
  void *a77;
  char a78;
  void *a79;
  char a80;
  void *a81;
  char a82;
  void *a83;
  char a84;
  void *a85;
  char a86;
  void *a87;
  char a88;
  void *a89;
  char a90;
  void *a91;
  char a92;
  void *a93;
  uint64_t v93;
  uint64_t v94;
  unint64_t *v96;
  uint64_t v97;
  unint64_t *v98;
  uint64_t v99;
  unint64_t *v100;
  unint64_t *v101;
  uint64_t v102;
  unint64_t *v103;
  uint64_t v104;
  unint64_t *v105;
  uint64_t v106;
  unint64_t *v107;
  uint64_t v108;
  unint64_t *v109;
  uint64_t v110;
  unint64_t *v111;
  uint64_t v112;
  unint64_t *v113;
  uint64_t v114;
  unint64_t *v115;
  uint64_t v116;
  unint64_t *v117;
  uint64_t v118;
  unint64_t *v119;
  uint64_t v120;
  unint64_t *v121;
  uint64_t v122;
  unint64_t *v123;
  uint64_t v124;
  unint64_t *v125;
  uint64_t v126;
  unint64_t *v127;
  uint64_t v128;
  unint64_t *v129;
  uint64_t v130;
  unint64_t *v131;
  uint64_t v132;
  unint64_t *v133;
  uint64_t v134;
  unint64_t *v135;
  uint64_t v136;
  unint64_t *v137;
  uint64_t v138;
  unint64_t *v139;
  uint64_t v140;
  unint64_t *v141;
  uint64_t v142;
  unint64_t *v143;
  uint64_t v144;

  v96 = (unint64_t *)STACK[0x298];
  if ((unint64_t *)STACK[0x298] == &STACK[0x280])
  {
    v97 = 4;
    v96 = &STACK[0x280];
  }
  else
  {
    if (!v96)
      goto LABEL_6;
    v97 = 5;
  }
  (*(void (**)(void))(*v96 + 8 * v97))();
LABEL_6:
  v98 = (unint64_t *)STACK[0x278];
  if ((unint64_t *)STACK[0x278] == &STACK[0x260])
  {
    v99 = 4;
    v98 = &STACK[0x260];
  }
  else
  {
    if (!v98)
      goto LABEL_11;
    v99 = 5;
  }
  (*(void (**)(void))(*v98 + 8 * v99))();
LABEL_11:
  if (SLOBYTE(STACK[0x25F]) < 0)
    operator delete((void *)STACK[0x248]);
  if (SLOBYTE(STACK[0x247]) < 0)
    operator delete((void *)STACK[0x230]);
  if (a14 < 0)
    operator delete(a9);
  if (a20 < 0)
    operator delete(a15);
  v100 = (unint64_t *)(v94 + 1280);
  v101 = (unint64_t *)STACK[0x310];
  if ((unint64_t *)STACK[0x310] == &STACK[0x2F8])
  {
    v102 = 4;
    v101 = &STACK[0x2F8];
  }
  else
  {
    if (!v101)
      goto LABEL_24;
    v102 = 5;
  }
  (*(void (**)(void))(*v101 + 8 * v102))();
LABEL_24:
  v103 = (unint64_t *)STACK[0x2F0];
  if ((unint64_t *)STACK[0x2F0] == &STACK[0x2D8])
  {
    v104 = 4;
    v103 = &STACK[0x2D8];
  }
  else
  {
    if (!v103)
      goto LABEL_29;
    v104 = 5;
  }
  (*(void (**)(void))(*v103 + 8 * v104))();
LABEL_29:
  if (SLOBYTE(STACK[0x2D7]) < 0)
    operator delete((void *)STACK[0x2C0]);
  if (SLOBYTE(STACK[0x2BF]) < 0)
    operator delete((void *)STACK[0x2A8]);
  if (a26 < 0)
    operator delete(a21);
  if (a32 < 0)
    operator delete(a27);
  v105 = (unint64_t *)STACK[0x388];
  if ((unint64_t *)STACK[0x388] == &STACK[0x370])
  {
    v106 = 4;
    v105 = &STACK[0x370];
  }
  else
  {
    if (!v105)
      goto LABEL_42;
    v106 = 5;
  }
  (*(void (**)(void))(*v105 + 8 * v106))();
LABEL_42:
  v107 = (unint64_t *)STACK[0x368];
  if ((unint64_t *)STACK[0x368] == &STACK[0x350])
  {
    v108 = 4;
    v107 = &STACK[0x350];
  }
  else
  {
    if (!v107)
      goto LABEL_47;
    v108 = 5;
  }
  (*(void (**)(void))(*v107 + 8 * v108))();
LABEL_47:
  if (SLOBYTE(STACK[0x34F]) < 0)
    operator delete((void *)STACK[0x338]);
  if (SLOBYTE(STACK[0x337]) < 0)
    operator delete((void *)STACK[0x320]);
  if (a38 < 0)
    operator delete(a33);
  if (a44 < 0)
    operator delete(a39);
  v109 = (unint64_t *)STACK[0x400];
  if ((unint64_t *)STACK[0x400] == &STACK[0x3E8])
  {
    v110 = 4;
    v109 = &STACK[0x3E8];
  }
  else
  {
    if (!v109)
      goto LABEL_60;
    v110 = 5;
  }
  (*(void (**)(void))(*v109 + 8 * v110))();
LABEL_60:
  v111 = (unint64_t *)STACK[0x3E0];
  if ((unint64_t *)STACK[0x3E0] == &STACK[0x3C8])
  {
    v112 = 4;
    v111 = &STACK[0x3C8];
  }
  else
  {
    if (!v111)
      goto LABEL_65;
    v112 = 5;
  }
  (*(void (**)(void))(*v111 + 8 * v112))();
LABEL_65:
  if (SLOBYTE(STACK[0x3C7]) < 0)
    operator delete((void *)STACK[0x3B0]);
  if (SLOBYTE(STACK[0x3AF]) < 0)
    operator delete((void *)STACK[0x398]);
  if (a50 < 0)
    operator delete(a45);
  if (a56 < 0)
    operator delete(a51);
  v113 = (unint64_t *)STACK[0x478];
  if ((unint64_t *)STACK[0x478] == &STACK[0x460])
  {
    v114 = 4;
    v113 = &STACK[0x460];
  }
  else
  {
    if (!v113)
      goto LABEL_78;
    v114 = 5;
  }
  (*(void (**)(void))(*v113 + 8 * v114))();
LABEL_78:
  v115 = (unint64_t *)STACK[0x458];
  if ((unint64_t *)STACK[0x458] == &STACK[0x440])
  {
    v116 = 4;
    v115 = &STACK[0x440];
  }
  else
  {
    if (!v115)
      goto LABEL_83;
    v116 = 5;
  }
  (*(void (**)(void))(*v115 + 8 * v116))();
LABEL_83:
  if (SLOBYTE(STACK[0x43F]) < 0)
    operator delete((void *)STACK[0x428]);
  if (SLOBYTE(STACK[0x427]) < 0)
    operator delete((void *)STACK[0x410]);
  if (a62 < 0)
    operator delete(a57);
  if (a68 < 0)
    operator delete(a63);
  v117 = (unint64_t *)STACK[0x4F0];
  if ((unint64_t *)STACK[0x4F0] == &STACK[0x4D8])
  {
    v118 = 4;
    v117 = &STACK[0x4D8];
  }
  else
  {
    if (!v117)
      goto LABEL_96;
    v118 = 5;
  }
  (*(void (**)(void))(*v117 + 8 * v118))();
LABEL_96:
  v119 = (unint64_t *)STACK[0x4D0];
  if ((unint64_t *)STACK[0x4D0] == &STACK[0x4B8])
  {
    v120 = 4;
    v119 = &STACK[0x4B8];
  }
  else
  {
    if (!v119)
      goto LABEL_101;
    v120 = 5;
  }
  (*(void (**)(void))(*v119 + 8 * v120))();
LABEL_101:
  if (SLOBYTE(STACK[0x4B7]) < 0)
    operator delete((void *)STACK[0x4A0]);
  if (SLOBYTE(STACK[0x49F]) < 0)
    operator delete((void *)STACK[0x488]);
  if (a72 < 0)
    operator delete(a69);
  if (a74 < 0)
    operator delete(a73);
  v121 = (unint64_t *)STACK[0x568];
  if ((unint64_t *)STACK[0x568] == &STACK[0x550])
  {
    v122 = 4;
    v121 = &STACK[0x550];
  }
  else
  {
    if (!v121)
      goto LABEL_114;
    v122 = 5;
  }
  (*(void (**)(void))(*v121 + 8 * v122))();
LABEL_114:
  v123 = (unint64_t *)STACK[0x548];
  if ((unint64_t *)STACK[0x548] == &STACK[0x530])
  {
    v124 = 4;
    v123 = &STACK[0x530];
  }
  else
  {
    if (!v123)
      goto LABEL_119;
    v124 = 5;
  }
  (*(void (**)(void))(*v123 + 8 * v124))();
LABEL_119:
  if (SLOBYTE(STACK[0x52F]) < 0)
    operator delete((void *)STACK[0x518]);
  if (SLOBYTE(STACK[0x517]) < 0)
    operator delete((void *)STACK[0x500]);
  if (a76 < 0)
    operator delete(a75);
  if (a78 < 0)
    operator delete(a77);
  v125 = (unint64_t *)STACK[0x5E0];
  if ((unint64_t *)STACK[0x5E0] == &STACK[0x5C8])
  {
    v126 = 4;
    v125 = &STACK[0x5C8];
  }
  else
  {
    if (!v125)
      goto LABEL_132;
    v126 = 5;
  }
  (*(void (**)(void))(*v125 + 8 * v126))();
LABEL_132:
  v127 = (unint64_t *)STACK[0x5C0];
  if ((unint64_t *)STACK[0x5C0] == &STACK[0x5A8])
  {
    v128 = 4;
    v127 = &STACK[0x5A8];
  }
  else
  {
    if (!v127)
      goto LABEL_137;
    v128 = 5;
  }
  (*(void (**)(void))(*v127 + 8 * v128))();
LABEL_137:
  if (SLOBYTE(STACK[0x5A7]) < 0)
    operator delete((void *)STACK[0x590]);
  if (SLOBYTE(STACK[0x58F]) < 0)
    operator delete((void *)STACK[0x578]);
  if (a80 < 0)
    operator delete(a79);
  if (a82 < 0)
    operator delete(a81);
  v129 = (unint64_t *)STACK[0x658];
  if ((unint64_t *)STACK[0x658] == &STACK[0x640])
  {
    v130 = 4;
    v129 = &STACK[0x640];
  }
  else
  {
    if (!v129)
      goto LABEL_150;
    v130 = 5;
  }
  (*(void (**)(void))(*v129 + 8 * v130))();
LABEL_150:
  v131 = (unint64_t *)STACK[0x638];
  if ((unint64_t *)STACK[0x638] == &STACK[0x620])
  {
    v132 = 4;
    v131 = &STACK[0x620];
  }
  else
  {
    if (!v131)
      goto LABEL_155;
    v132 = 5;
  }
  (*(void (**)(void))(*v131 + 8 * v132))();
LABEL_155:
  if (SLOBYTE(STACK[0x61F]) < 0)
    operator delete((void *)STACK[0x608]);
  if (SLOBYTE(STACK[0x607]) < 0)
    operator delete((void *)STACK[0x5F0]);
  if (a84 < 0)
    operator delete(a83);
  if (a86 < 0)
    operator delete(a85);
  v133 = (unint64_t *)STACK[0x6D0];
  if ((unint64_t *)STACK[0x6D0] == &STACK[0x6B8])
  {
    v134 = 4;
    v133 = &STACK[0x6B8];
  }
  else
  {
    if (!v133)
      goto LABEL_168;
    v134 = 5;
  }
  (*(void (**)(void))(*v133 + 8 * v134))();
LABEL_168:
  v135 = (unint64_t *)STACK[0x6B0];
  if ((unint64_t *)STACK[0x6B0] == &STACK[0x698])
  {
    v136 = 4;
    v135 = &STACK[0x698];
  }
  else
  {
    if (!v135)
      goto LABEL_173;
    v136 = 5;
  }
  (*(void (**)(void))(*v135 + 8 * v136))();
LABEL_173:
  if (SLOBYTE(STACK[0x697]) < 0)
    operator delete((void *)STACK[0x680]);
  if (SLOBYTE(STACK[0x67F]) < 0)
    operator delete((void *)STACK[0x668]);
  if (a88 < 0)
    operator delete(a87);
  if (a90 < 0)
    operator delete(a89);
  v137 = (unint64_t *)STACK[0x748];
  if ((unint64_t *)STACK[0x748] == &STACK[0x730])
  {
    v138 = 4;
    v137 = &STACK[0x730];
  }
  else
  {
    if (!v137)
      goto LABEL_186;
    v138 = 5;
  }
  (*(void (**)(void))(*v137 + 8 * v138))();
LABEL_186:
  v139 = (unint64_t *)STACK[0x728];
  if ((unint64_t *)STACK[0x728] == &STACK[0x710])
  {
    v140 = 4;
    v139 = &STACK[0x710];
  }
  else
  {
    if (!v139)
      goto LABEL_191;
    v140 = 5;
  }
  (*(void (**)(void))(*v139 + 8 * v140))();
LABEL_191:
  if (SLOBYTE(STACK[0x70F]) < 0)
    operator delete((void *)STACK[0x6F8]);
  if (SLOBYTE(STACK[0x6F7]) < 0)
    operator delete((void *)STACK[0x6E0]);
  if (a92 < 0)
    operator delete(a91);
  if (SLOBYTE(STACK[0x20F]) < 0)
    operator delete(a93);
  if (&STACK[0x750] == v100)
  {
LABEL_215:
    MEMORY[0x1C3B8D890](v93, 0x1020C4062D53EE8);
    _Unwind_Resume(a1);
  }
  while (1)
  {
    v141 = (unint64_t *)*(v100 - 1);
    if (v100 - 4 == v141)
    {
      v141 = v100 - 4;
      v142 = 4;
    }
    else
    {
      if (!v141)
        goto LABEL_205;
      v142 = 5;
    }
    (*(void (**)(void))(*v141 + 8 * v142))();
LABEL_205:
    v143 = (unint64_t *)*(v100 - 5);
    if (v100 - 8 == v143)
    {
      v143 = v100 - 8;
      v144 = 4;
      goto LABEL_209;
    }
    if (v143)
    {
      v144 = 5;
LABEL_209:
      (*(void (**)(void))(*v143 + 8 * v144))();
    }
    if (*((char *)v100 - 65) < 0)
      operator delete((void *)*(v100 - 11));
    if (*((char *)v100 - 89) < 0)
      operator delete((void *)*(v100 - 14));
    v100 -= 16;
    if (v100 == &STACK[0x750])
      goto LABEL_215;
  }
}

uint64_t siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo(uint64_t a1, const char *a2, __int128 *a3, __int128 *a4, double a5)
{
  __int128 v8;
  __int128 v9;
  uint64_t (***v10)();
  uint64_t v11;
  uint64_t (***v12)();
  uint64_t v13;
  uint64_t (**v15)();
  double v16;
  uint64_t (***v17)();
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)a1 = (_DWORD)a2;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v8 = *a3;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 8) = v8;
  }
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v9 = *a4;
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a4 + 2);
    *(_OWORD *)(a1 + 32) = v9;
  }
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  if (a5 == 0.0)
  {
    a5 = 1.0;
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Invalid unit conversion factor; Replacing with 1.0 for safety",
      a2);
  }
  v15 = &off_1E792AAB0;
  v16 = a5;
  v17 = &v15;
  std::__function::__value_func<double ()(double)>::swap[abi:ne180100](&v15, (_QWORD *)(a1 + 56));
  v10 = v17;
  if (v17 == &v15)
  {
    v11 = 4;
    v10 = &v15;
  }
  else
  {
    if (!v17)
      goto LABEL_14;
    v11 = 5;
  }
  (*v10)[v11]();
LABEL_14:
  v15 = &off_1E792AB40;
  v16 = a5;
  v17 = &v15;
  std::__function::__value_func<double ()(double)>::swap[abi:ne180100](&v15, (_QWORD *)(a1 + 88));
  v12 = v17;
  if (v17 == &v15)
  {
    v13 = 4;
    v12 = &v15;
    goto LABEL_18;
  }
  if (v17)
  {
    v13 = 5;
LABEL_18:
    (*v12)[v13]();
  }
  return a1;
}

void sub_1BF873F30(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v5;
  }
  std::__function::__value_func<BOOL ()(std::vector<std::string> const&,google::protobuf::Field const*)>::__value_func[abi:ne180100](a1 + 56, a2 + 56);
  std::__function::__value_func<BOOL ()(std::vector<std::string> const&,google::protobuf::Field const*)>::__value_func[abi:ne180100](a1 + 88, a2 + 88);
  return a1;
}

void sub_1BF87407C(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 + 31) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<siri::dialogengine::Length,siri::dialogengine::UnitInfo<siri::dialogengine::Length>>,std::__map_value_compare<siri::dialogengine::Length,std::__value_type<siri::dialogengine::Length,siri::dialogengine::UnitInfo<siri::dialogengine::Length>>,std::less<siri::dialogengine::Length>,true>,std::allocator<std::__value_type<siri::dialogengine::Length,siri::dialogengine::UnitInfo<siri::dialogengine::Length>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<siri::dialogengine::Length,siri::dialogengine::UnitInfo<siri::dialogengine::Length>>,std::__map_value_compare<siri::dialogengine::Length,std::__value_type<siri::dialogengine::Length,siri::dialogengine::UnitInfo<siri::dialogengine::Length>>,std::less<siri::dialogengine::Length>,true>,std::allocator<std::__value_type<siri::dialogengine::Length,siri::dialogengine::UnitInfo<siri::dialogengine::Length>>>>::destroy(*a1);
    std::__tree<std::__value_type<siri::dialogengine::Length,siri::dialogengine::UnitInfo<siri::dialogengine::Length>>,std::__map_value_compare<siri::dialogengine::Length,std::__value_type<siri::dialogengine::Length,siri::dialogengine::UnitInfo<siri::dialogengine::Length>>,std::less<siri::dialogengine::Length>,true>,std::allocator<std::__value_type<siri::dialogengine::Length,siri::dialogengine::UnitInfo<siri::dialogengine::Length>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<siri::dialogengine::Length const,siri::dialogengine::UnitInfo<siri::dialogengine::Length>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<siri::dialogengine::Length const,siri::dialogengine::UnitInfo<siri::dialogengine::Length>>,0>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = (_QWORD *)(a1 + 96);
  v3 = *(_QWORD **)(a1 + 120);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(_QWORD **)(a1 + 88);
  if (v5 == (_QWORD *)(a1 + 64))
  {
    v6 = 4;
    v5 = (_QWORD *)(a1 + 64);
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
}

void std::unique_ptr<std::__tree_node<std::__value_type<siri::dialogengine::Length,siri::dialogengine::UnitInfo<siri::dialogengine::Length>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<siri::dialogengine::Length,siri::dialogengine::UnitInfo<siri::dialogengine::Length>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<siri::dialogengine::Length const,siri::dialogengine::UnitInfo<siri::dialogengine::Length>>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

_QWORD *std::__function::__value_func<double ()(double)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1BF874378(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo(siri::dialogengine::Length,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo(siri::dialogengine::Length,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::~__func()
{
  JUMPOUT(0x1C3B8D890);
}

_QWORD *std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo(siri::dialogengine::Length,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo(siri::dialogengine::Length,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E792AB40;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo(siri::dialogengine::Length,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo(siri::dialogengine::Length,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E792AB40;
  a2[1] = v2;
  return result;
}

double std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo(siri::dialogengine::Length,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo(siri::dialogengine::Length,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::operator()(uint64_t a1, double *a2)
{
  return *a2 / *(double *)(a1 + 8);
}

uint64_t std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo(siri::dialogengine::Length,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo(siri::dialogengine::Length,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo(siri::dialogengine::Length,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo(siri::dialogengine::Length,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::target_type()
{
}

void std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo(siri::dialogengine::Length,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo(siri::dialogengine::Length,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::~__func()
{
  JUMPOUT(0x1C3B8D890);
}

_QWORD *std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo(siri::dialogengine::Length,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo(siri::dialogengine::Length,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E792AAB0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo(siri::dialogengine::Length,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo(siri::dialogengine::Length,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E792AAB0;
  a2[1] = v2;
  return result;
}

double std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo(siri::dialogengine::Length,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo(siri::dialogengine::Length,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::operator()(uint64_t a1, double *a2)
{
  return *a2 * *(double *)(a1 + 8);
}

uint64_t std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo(siri::dialogengine::Length,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo(siri::dialogengine::Length,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo(siri::dialogengine::Length,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Length>::UnitInfo(siri::dialogengine::Length,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::target_type()
{
}

uint64_t siri::dialogengine::ParseUnitLabel<siri::dialogengine::Length>(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v4;
  void **v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  uint64_t v15;
  void *__p[2];
  unsigned __int8 v18;

  siri::dialogengine::StringToLower(a1, (uint64_t)__p);
  v1 = (_QWORD *)siri::dialogengine::AllUnitInfo<siri::dialogengine::Length>();
  v2 = v1 + 1;
  v3 = (_QWORD *)*v1;
  if ((_QWORD *)*v1 != v1 + 1)
  {
    if ((v18 & 0x80u) == 0)
      v4 = v18;
    else
      v4 = (unint64_t)__p[1];
    if ((v18 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    while (1)
    {
      v6 = *((unsigned __int8 *)v3 + 71);
      if ((v6 & 0x80u) == 0)
        v7 = (void *)*((unsigned __int8 *)v3 + 71);
      else
        v7 = (void *)v3[7];
      if (v7 == (void *)v4)
      {
        if ((v6 & 0x80) != 0)
        {
          if (!memcmp((const void *)v3[6], v5, v3[7]))
            break;
        }
        else
        {
          if (!*((_BYTE *)v3 + 71))
            break;
          v8 = 0;
          while (*((unsigned __int8 *)v3 + v8 + 48) == *((unsigned __int8 *)v5 + v8))
          {
            if (v6 == ++v8)
              goto LABEL_41;
          }
        }
      }
      v9 = *((unsigned __int8 *)v3 + 95);
      if (*((char *)v3 + 95) < 0)
      {
        if (v3[10])
        {
LABEL_23:
          if ((v9 & 0x80u) == 0)
            v10 = (void *)*((unsigned __int8 *)v3 + 95);
          else
            v10 = (void *)v3[10];
          if (v10 == (void *)v4)
          {
            if ((v9 & 0x80) != 0)
            {
              if (!memcmp((const void *)v3[9], v5, v3[10]))
                break;
            }
            else
            {
              if (!*((_BYTE *)v3 + 95))
                break;
              v11 = 0;
              while (*((unsigned __int8 *)v3 + v11 + 72) == *((unsigned __int8 *)v5 + v11))
              {
                if (v9 == ++v11)
                  goto LABEL_41;
              }
            }
          }
        }
      }
      else if (*((_BYTE *)v3 + 95))
      {
        goto LABEL_23;
      }
      v12 = (_QWORD *)v3[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v3[2];
          v14 = *v13 == (_QWORD)v3;
          v3 = v13;
        }
        while (!v14);
      }
      v3 = v13;
      if (v13 == v2)
        goto LABEL_43;
    }
  }
LABEL_41:
  if (v3 == v2)
LABEL_43:
    v15 = 0xFFFFFFFFLL;
  else
    v15 = *((unsigned int *)v3 + 10);
  if ((char)v18 < 0)
    operator delete(__p[0]);
  return v15;
}

{
  return __ZN4siri12dialogengine14ParseUnitLabelINS0_6LengthEEET_RKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE(a1);
}

void sub_1BF87469C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::CanConvertUnitValue<siri::dialogengine::Length>(uint64_t a1, const char *a2)
{
  const char *v4;
  const char *v5;

  if ((_DWORD)a1 == -1 || (_DWORD)a2 == -1)
  {
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Either fromUnit or toUnit is invalid", a2);
  }
  else if (siri::dialogengine::FindUnitInfo<siri::dialogengine::Length>(a1))
  {
    if (siri::dialogengine::FindUnitInfo<siri::dialogengine::Length>((int)a2))
      return 1;
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Internal error? Failed to find UnitInfo for toUnit: %d", v5, a2);
  }
  else
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Internal error? Failed to find UnitInfo for fromUnit: %d", v4, a1);
  }
  return 0;
}

{
  return __ZN4siri12dialogengine19CanConvertUnitValueINS0_6LengthEEEbT_S3_(a1, a2);
}

double siri::dialogengine::ConvertUnitValue<siri::dialogengine::Length>(uint64_t a1, const char *a2, double a3)
{
  double v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  double v12;
  _QWORD *v13;
  _QWORD *v14;
  double v16;

  if ((_DWORD)a1 == (_DWORD)a2)
    return a3;
  v5 = (int)a2;
  v6 = a1;
  v4 = 0.0;
  if (siri::dialogengine::CanConvertUnitValue<siri::dialogengine::Length>(a1, a2))
  {
    v7 = siri::dialogengine::FindUnitInfo<siri::dialogengine::Length>(v6);
    v8 = siri::dialogengine::FindUnitInfo<siri::dialogengine::Length>(v5);
    v16 = a3;
    v9 = *(_QWORD *)(v7 + 80);
    if (!v9
      || (v16 = (*(double (**)(uint64_t, double *))(*(_QWORD *)v9 + 48))(v9, &v16),
          (v10 = *(_QWORD *)(v8 + 112)) == 0))
    {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    v12 = (*(double (**)(uint64_t, double *))(*(_QWORD *)v10 + 48))(v10, &v16);
    v4 = v12;
    v13 = (_QWORD *)(v7 + 8);
    if (*(char *)(v7 + 31) < 0)
      v13 = (_QWORD *)*v13;
    v14 = (_QWORD *)(v8 + 8);
    if (*(char *)(v8 + 31) < 0)
      v14 = (_QWORD *)*v14;
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"%f in %s was converted to %f in %s", v11, *(_QWORD *)&a3, v13, *(_QWORD *)&v12, v14);
  }
  return v4;
}

{
  return __ZN4siri12dialogengine16ConvertUnitValueINS0_6LengthEEEddT_S3_(a1, a2, a3);
}

void siri::dialogengine::GetUnitLabel<siri::dialogengine::Temperature>(int a1@<W0>, std::string *a2@<X8>)
{
  uint64_t v3;
  __int128 v4;

  v3 = siri::dialogengine::FindUnitInfo<siri::dialogengine::Temperature>(a1);
  if (v3)
  {
    if (*(char *)(v3 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v3 + 8), *(_QWORD *)(v3 + 16));
    }
    else
    {
      v4 = *(_OWORD *)(v3 + 8);
      a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v3 + 24);
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v4;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "");
  }
}

uint64_t siri::dialogengine::FindUnitInfo<siri::dialogengine::Temperature>(int a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;

  v2 = siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>();
  v5 = *(_QWORD *)(v2 + 8);
  v3 = v2 + 8;
  v4 = v5;
  if (!v5)
    return 0;
  v6 = v3;
  do
  {
    v7 = *(_DWORD *)(v4 + 32);
    v8 = v7 < a1;
    if (v7 >= a1)
      v9 = (uint64_t *)v4;
    else
      v9 = (uint64_t *)(v4 + 8);
    if (!v8)
      v6 = v4;
    v4 = *v9;
  }
  while (*v9);
  if (v6 == v3)
    return 0;
  v10 = *(_DWORD *)(v6 + 32);
  v11 = v6 + 40;
  if (v10 <= a1)
    return v11;
  else
    return 0;
}

uint64_t siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>()
{
  unsigned __int8 v0;
  unint64_t v1;
  _QWORD *v3;
  char v4;
  char **v5;
  char *v6;

  if ((v0 & 1) == 0
  {
    v3 = (_QWORD *)operator new();
    *v3 = 0;
    siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::flag = (uint64_t)v3;
  }
  v1 = atomic_load((unint64_t *)siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::flag);
  if (v1 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once((std::once_flag::_State_type *)siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::flag, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0 &&>>);
  }
  return siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::sUnits;
}

void sub_1BF8749A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0 &&>>()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  uint64_t *v10;
  uint64_t *v11;
  _DWORD *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  void **v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  void *v45[2];
  char v46;
  void *v47[2];
  char v48;
  void *v49[2];
  char v50;
  void *v51[2];
  char v52;
  void *v53[2];
  char v54;
  void *v55[2];
  char v56;
  void *v57[2];
  char v58;
  void *v59[2];
  char v60;
  _QWORD v61[2];
  char v62;
  char v63[8];
  void *v64;
  char v65;
  void *__p;
  char v67;
  _BYTE v68[24];
  _BYTE *v69;
  _BYTE v70[24];
  _BYTE *v71;
  char v72[8];
  void *v73;
  char v74;
  void *v75;
  char v76;
  _BYTE v77[24];
  _BYTE *v78;
  _BYTE v79[24];
  _BYTE *v80;
  _QWORD v81[3];
  _QWORD *v82;
  _QWORD v83[3];
  _QWORD *v84;
  char v85[8];
  void *v86;
  char v87;
  void *v88;
  char v89;
  _BYTE v90[24];
  _BYTE *v91;
  _BYTE v92[24];
  _BYTE *v93;
  _QWORD v94[3];
  _QWORD *v95;
  _QWORD v96[3];
  _QWORD *v97;
  char v98[8];
  void *v99[2];
  char v100;
  void *v101;
  char v102;
  _BYTE v103[24];
  _BYTE *v104;
  _BYTE v105[24];
  _BYTE *v106;
  _DWORD v107[2];
  _DWORD v108[32];
  _DWORD v109[32];
  _DWORD v110[32];
  _QWORD v111[17];

  v111[15] = *MEMORY[0x1E0C80C00];
  v0 = operator new();
  std::string::basic_string[abi:ne180100]<0>(v59, "celsius");
  v96[0] = &off_1E792ABC0;
  v97 = v96;
  v94[0] = &off_1E792AC40;
  v95 = v94;
  std::string::basic_string[abi:ne180100]<0>(v57, "c");
  siri::dialogengine::UnitInfo<siri::dialogengine::Temperature>::UnitInfo((uint64_t)v98, 0, (__int128 *)v59, (uint64_t)v96, (uint64_t)v94, (__int128 *)v57);
  v107[0] = 0;
  siri::dialogengine::UnitInfo<siri::dialogengine::Temperature>::UnitInfo((uint64_t)v108, (uint64_t)v98);
  std::string::basic_string[abi:ne180100]<0>(v55, "fahrenheit");
  v84 = v83;
  v81[0] = &off_1E792AD40;
  v82 = v81;
  v83[0] = &off_1E792ACC0;
  std::string::basic_string[abi:ne180100]<0>(v53, "f");
  siri::dialogengine::UnitInfo<siri::dialogengine::Temperature>::UnitInfo((uint64_t)v85, 1, (__int128 *)v55, (uint64_t)v83, (uint64_t)v81, (__int128 *)v53);
  v108[30] = 1;
  siri::dialogengine::UnitInfo<siri::dialogengine::Temperature>::UnitInfo((uint64_t)v109, (uint64_t)v85);
  std::string::basic_string[abi:ne180100]<0>(v51, "kelvin");
  std::string::basic_string[abi:ne180100]<0>(v49, "k");
  siri::dialogengine::UnitInfo<siri::dialogengine::Temperature>::UnitInfo((uint64_t)v72, (const char *)2, (__int128 *)v51, (__int128 *)v49, 1.0);
  v109[30] = 2;
  siri::dialogengine::UnitInfo<siri::dialogengine::Temperature>::UnitInfo((uint64_t)v110, (uint64_t)v72);
  std::string::basic_string[abi:ne180100]<0>(v47, "rankine");
  std::string::basic_string[abi:ne180100]<0>(v45, "r");
  siri::dialogengine::UnitInfo<siri::dialogengine::Temperature>::UnitInfo((uint64_t)v63, (const char *)3, (__int128 *)v47, (__int128 *)v45, 0.555555556);
  v110[30] = 3;
  siri::dialogengine::UnitInfo<siri::dialogengine::Temperature>::UnitInfo((uint64_t)v111, (uint64_t)v63);
  v1 = 0;
  v2 = 0;
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)v0 = v0 + 8;
  v3 = (uint64_t *)(v0 + 8);
  while (1)
  {
    v4 = &v107[32 * v2];
    v5 = v0 + 8;
    if (v3 == (uint64_t *)(v0 + 8))
      goto LABEL_8;
    v6 = v1;
    v7 = v0 + 8;
    if (v1)
    {
      do
      {
        v5 = v6;
        v6 = *(_QWORD *)(v6 + 8);
      }
      while (v6);
    }
    else
    {
      do
      {
        v5 = *(_QWORD *)(v7 + 16);
        v8 = *(_QWORD *)v5 == v7;
        v7 = v5;
      }
      while (v8);
    }
    v9 = *v4;
    if (*(_DWORD *)(v5 + 32) < *v4)
    {
LABEL_8:
      v10 = (uint64_t *)(v1 ? v5 : v0 + 8);
      v11 = (uint64_t *)(v1 ? v5 + 8 : v0 + 8);
    }
    else
    {
      v10 = (uint64_t *)(v0 + 8);
      v11 = (uint64_t *)(v0 + 8);
      if (v1)
      {
        v11 = (uint64_t *)(v0 + 8);
        while (1)
        {
          while (1)
          {
            v10 = (uint64_t *)v1;
            v14 = *(_DWORD *)(v1 + 32);
            if (v9 >= v14)
              break;
            v1 = *v10;
            v11 = v10;
            if (!*v10)
              goto LABEL_15;
          }
          if (v14 >= v9)
            break;
          v11 = v10 + 1;
          v1 = v10[1];
          if (!v1)
            goto LABEL_15;
        }
      }
    }
    if (!*v11)
    {
LABEL_15:
      v12 = operator new(0xA0uLL);
      v61[0] = v12;
      v61[1] = v0 + 8;
      v62 = 0;
      v12[8] = *v4;
      siri::dialogengine::UnitInfo<siri::dialogengine::Temperature>::UnitInfo((uint64_t)(v12 + 10), (uint64_t)&v107[32 * v2 + 2]);
      v62 = 1;
      *(_QWORD *)v12 = 0;
      *((_QWORD *)v12 + 1) = 0;
      *((_QWORD *)v12 + 2) = v10;
      *v11 = (uint64_t)v12;
      v13 = **(_QWORD **)v0;
      if (v13)
      {
        *(_QWORD *)v0 = v13;
        v12 = (_DWORD *)*v11;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v0 + 8), (uint64_t *)v12);
      ++*(_QWORD *)(v0 + 16);
      v61[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<siri::dialogengine::Length,siri::dialogengine::UnitInfo<siri::dialogengine::Length>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<siri::dialogengine::Length,siri::dialogengine::UnitInfo<siri::dialogengine::Length>>,void *>>>>::reset[abi:ne180100]((uint64_t)v61);
    }
    if (++v2 == 4)
      break;
    v3 = *(uint64_t **)v0;
    v1 = *(_QWORD *)(v0 + 8);
  }
  siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::sUnits = v0;
  v15 = 512;
  do
  {
    v16 = *(_BYTE **)&v107[v15 / 4 - 2];
    if (&v105[v15] == v16)
    {
      v16 = &v105[v15];
      v17 = 4;
    }
    else
    {
      if (!v16)
        goto LABEL_34;
      v17 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_34:
    v18 = *(_BYTE **)&v105[v15 - 8];
    if (&v103[v15] == v18)
    {
      v18 = &v103[v15];
      v19 = 4;
    }
    else
    {
      if (!v18)
        goto LABEL_39;
      v19 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_39:
    v20 = (void **)&v107[v15 / 4];
    if ((v103[v15 - 1] & 0x80000000) != 0)
      operator delete(*(v20 - 11));
    if (*((char *)v20 - 89) < 0)
      operator delete(v99[v15 / 8]);
    v15 -= 128;
  }
  while (v15);
  v21 = v71;
  if (v71 == v70)
  {
    v22 = 4;
    v21 = v70;
LABEL_48:
    (*(void (**)(void))(*v21 + 8 * v22))();
  }
  else if (v71)
  {
    v22 = 5;
    goto LABEL_48;
  }
  v23 = v69;
  if (v69 == v68)
  {
    v24 = 4;
    v23 = v68;
LABEL_53:
    (*(void (**)(void))(*v23 + 8 * v24))();
  }
  else if (v69)
  {
    v24 = 5;
    goto LABEL_53;
  }
  if (v67 < 0)
    operator delete(__p);
  if (v65 < 0)
    operator delete(v64);
  if (v46 < 0)
    operator delete(v45[0]);
  if (v48 < 0)
    operator delete(v47[0]);
  v25 = v80;
  if (v80 == v79)
  {
    v26 = 4;
    v25 = v79;
LABEL_66:
    (*(void (**)(void))(*v25 + 8 * v26))();
  }
  else if (v80)
  {
    v26 = 5;
    goto LABEL_66;
  }
  v27 = v78;
  if (v78 == v77)
  {
    v28 = 4;
    v27 = v77;
LABEL_71:
    (*(void (**)(void))(*v27 + 8 * v28))();
  }
  else if (v78)
  {
    v28 = 5;
    goto LABEL_71;
  }
  if (v76 < 0)
    operator delete(v75);
  if (v74 < 0)
    operator delete(v73);
  if (v50 < 0)
    operator delete(v49[0]);
  if (v52 < 0)
    operator delete(v51[0]);
  v29 = v93;
  if (v93 == v92)
  {
    v30 = 4;
    v29 = v92;
LABEL_84:
    (*(void (**)(void))(*v29 + 8 * v30))();
  }
  else if (v93)
  {
    v30 = 5;
    goto LABEL_84;
  }
  v31 = v91;
  if (v91 == v90)
  {
    v32 = 4;
    v31 = v90;
LABEL_89:
    (*(void (**)(void))(*v31 + 8 * v32))();
  }
  else if (v91)
  {
    v32 = 5;
    goto LABEL_89;
  }
  if (v89 < 0)
    operator delete(v88);
  if (v87 < 0)
    operator delete(v86);
  if (v54 < 0)
    operator delete(v53[0]);
  v33 = v82;
  if (v82 == v81)
  {
    v34 = 4;
    v33 = v81;
LABEL_100:
    (*(void (**)(void))(*v33 + 8 * v34))();
  }
  else if (v82)
  {
    v34 = 5;
    goto LABEL_100;
  }
  v35 = v84;
  if (v84 == v83)
  {
    v36 = 4;
    v35 = v83;
LABEL_105:
    (*(void (**)(void))(*v35 + 8 * v36))();
  }
  else if (v84)
  {
    v36 = 5;
    goto LABEL_105;
  }
  if (v56 < 0)
    operator delete(v55[0]);
  v37 = v106;
  if (v106 == v105)
  {
    v38 = 4;
    v37 = v105;
LABEL_112:
    (*(void (**)(void))(*v37 + 8 * v38))();
  }
  else if (v106)
  {
    v38 = 5;
    goto LABEL_112;
  }
  v39 = v104;
  if (v104 == v103)
  {
    v40 = 4;
    v39 = v103;
LABEL_117:
    (*(void (**)(void))(*v39 + 8 * v40))();
  }
  else if (v104)
  {
    v40 = 5;
    goto LABEL_117;
  }
  if (v102 < 0)
    operator delete(v101);
  if (v100 < 0)
    operator delete(v99[0]);
  if (v58 < 0)
    operator delete(v57[0]);
  v41 = v95;
  if (v95 == v94)
  {
    v42 = 4;
    v41 = v94;
LABEL_128:
    (*(void (**)(void))(*v41 + 8 * v42))();
  }
  else if (v95)
  {
    v42 = 5;
    goto LABEL_128;
  }
  v43 = v97;
  if (v97 == v96)
  {
    v44 = 4;
    v43 = v96;
LABEL_133:
    (*(void (**)(void))(*v43 + 8 * v44))();
  }
  else if (v97)
  {
    v44 = 5;
    goto LABEL_133;
  }
  if (v60 < 0)
    operator delete(v59[0]);
}

void sub_1BF875144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  char a67;
  void *__p;
  char a72;
  uint64_t a73;
  uint64_t a74;
  uint64_t a75;
  uint64_t a76;
  void *a77;
  char a78;
  void *a79;
  char a80;
  uint64_t a81;
  uint64_t a82;
  uint64_t a83;
  uint64_t a84;
  char a85;
  uint64_t a86;
  char a87;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  unint64_t *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  unint64_t *v99;
  uint64_t v100;
  unint64_t *v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  unint64_t *v107;
  uint64_t v108;
  unint64_t *v109;
  uint64_t v110;
  unint64_t *v111;
  uint64_t v112;
  unint64_t *v113;
  uint64_t v114;
  unint64_t *v115;
  uint64_t v116;
  unint64_t *v117;
  uint64_t v118;

  v90 = (uint64_t *)a76;
  if ((uint64_t *)a76 == &a75)
  {
    v91 = 4;
    v90 = &a75;
  }
  else
  {
    if (!a76)
      goto LABEL_6;
    v91 = 5;
  }
  (*(void (**)(void))(*v90 + 8 * v91))();
LABEL_6:
  v92 = (uint64_t *)a74;
  if ((uint64_t *)a74 == &a73)
  {
    v93 = 4;
    v92 = &a73;
  }
  else
  {
    if (!a74)
      goto LABEL_11;
    v93 = 5;
  }
  (*(void (**)(void))(*v92 + 8 * v93))();
LABEL_11:
  if (a72 < 0)
    operator delete(__p);
  if (a67 < 0)
    operator delete(a62);
  if (a15 < 0)
    operator delete(a10);
  if (a21 < 0)
    operator delete(a16);
  v94 = (unint64_t *)(v88 + 384);
  v95 = (uint64_t *)a84;
  if ((uint64_t *)a84 == &a83)
  {
    v96 = 4;
    v95 = &a83;
  }
  else
  {
    if (!a84)
      goto LABEL_24;
    v96 = 5;
  }
  (*(void (**)(void))(*v95 + 8 * v96))();
LABEL_24:
  v97 = (uint64_t *)a82;
  if ((uint64_t *)a82 == &a81)
  {
    v98 = 4;
    v97 = &a81;
  }
  else
  {
    if (!a82)
      goto LABEL_29;
    v98 = 5;
  }
  (*(void (**)(void))(*v97 + 8 * v98))();
LABEL_29:
  if (a80 < 0)
    operator delete(a79);
  if (a78 < 0)
    operator delete(a77);
  if (a27 < 0)
    operator delete(a22);
  if (a33 < 0)
    operator delete(a28);
  v99 = (unint64_t *)STACK[0x280];
  if ((unint64_t *)STACK[0x280] == &STACK[0x268])
  {
    v100 = 4;
    v99 = &STACK[0x268];
  }
  else
  {
    if (!v99)
      goto LABEL_42;
    v100 = 5;
  }
  (*(void (**)(void))(*v99 + 8 * v100))();
LABEL_42:
  v101 = (unint64_t *)STACK[0x260];
  if ((unint64_t *)STACK[0x260] == &STACK[0x248])
  {
    v102 = 4;
    v101 = &STACK[0x248];
  }
  else
  {
    if (!v101)
      goto LABEL_47;
    v102 = 5;
  }
  (*(void (**)(void))(*v101 + 8 * v102))();
LABEL_47:
  if (SLOBYTE(STACK[0x247]) < 0)
    operator delete((void *)STACK[0x230]);
  if (SLOBYTE(STACK[0x22F]) < 0)
    operator delete((void *)STACK[0x218]);
  if (a39 < 0)
    operator delete(a34);
  v103 = (_QWORD *)a86;
  if ((char *)a86 == &a85)
  {
    v104 = 4;
    v103 = &a85;
  }
  else
  {
    if (!a86)
      goto LABEL_58;
    v104 = 5;
  }
  (*(void (**)(void))(*v103 + 8 * v104))();
LABEL_58:
  v105 = (char *)STACK[0x208];
  if ((char *)STACK[0x208] == &a87)
  {
    v106 = 4;
    v105 = &a87;
  }
  else
  {
    if (!v105)
      goto LABEL_63;
    v106 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v105 + 8 * v106))();
LABEL_63:
  if (a45 < 0)
    operator delete(a40);
  v107 = (unint64_t *)STACK[0x338];
  if ((unint64_t *)STACK[0x338] == &STACK[0x320])
  {
    v108 = 4;
    v107 = &STACK[0x320];
  }
  else
  {
    if (!v107)
      goto LABEL_70;
    v108 = 5;
  }
  (*(void (**)(void))(*v107 + 8 * v108))();
LABEL_70:
  v109 = (unint64_t *)STACK[0x318];
  if ((unint64_t *)STACK[0x318] == &STACK[0x300])
  {
    v110 = 4;
    v109 = &STACK[0x300];
  }
  else
  {
    if (!v109)
      goto LABEL_75;
    v110 = 5;
  }
  (*(void (**)(void))(*v109 + 8 * v110))();
LABEL_75:
  if (SLOBYTE(STACK[0x2FF]) < 0)
    operator delete((void *)STACK[0x2E8]);
  if (SLOBYTE(STACK[0x2E7]) < 0)
    operator delete((void *)STACK[0x2D0]);
  if (a51 < 0)
    operator delete(a46);
  v111 = (unint64_t *)STACK[0x2A0];
  if ((unint64_t *)STACK[0x2A0] == &STACK[0x288])
  {
    v112 = 4;
    v111 = &STACK[0x288];
  }
  else
  {
    if (!v111)
      goto LABEL_86;
    v112 = 5;
  }
  (*(void (**)(void))(*v111 + 8 * v112))();
LABEL_86:
  v113 = (unint64_t *)STACK[0x2C0];
  if ((unint64_t *)STACK[0x2C0] == &STACK[0x2A8])
  {
    v114 = 4;
    v113 = &STACK[0x2A8];
  }
  else
  {
    if (!v113)
      goto LABEL_91;
    v114 = 5;
  }
  (*(void (**)(void))(*v113 + 8 * v114))();
LABEL_91:
  if (a57 < 0)
    operator delete(a52);
  if (&STACK[0x340] == v94)
  {
LABEL_109:
    MEMORY[0x1C3B8D890](v87, 0x1020C4062D53EE8);
    _Unwind_Resume(a1);
  }
  while (1)
  {
    v115 = (unint64_t *)*(v94 - 1);
    if (v94 - 4 == v115)
    {
      v115 = v94 - 4;
      v116 = 4;
    }
    else
    {
      if (!v115)
        goto LABEL_99;
      v116 = 5;
    }
    (*(void (**)(void))(*v115 + 8 * v116))();
LABEL_99:
    v117 = (unint64_t *)*(v94 - 5);
    if (v94 - 8 == v117)
    {
      v117 = v94 - 8;
      v118 = 4;
      goto LABEL_103;
    }
    if (v117)
    {
      v118 = 5;
LABEL_103:
      (*(void (**)(void))(*v117 + 8 * v118))();
    }
    if (*((char *)v94 - 65) < 0)
      operator delete((void *)*(v94 - 11));
    if (*((char *)v94 - 89) < 0)
      operator delete((void *)*(v94 - 14));
    v94 -= 16;
    if (v94 == &STACK[0x340])
      goto LABEL_109;
  }
}

uint64_t siri::dialogengine::UnitInfo<siri::dialogengine::Temperature>::UnitInfo(uint64_t a1, int a2, __int128 *a3, uint64_t a4, uint64_t a5, __int128 *a6)
{
  __int128 v10;
  __int128 v11;

  *(_DWORD *)a1 = a2;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v10 = *a3;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 8) = v10;
  }
  if (*((char *)a6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)a6, *((_QWORD *)a6 + 1));
  }
  else
  {
    v11 = *a6;
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a6 + 2);
    *(_OWORD *)(a1 + 32) = v11;
  }
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  std::function<double ()(double)>::operator=((_QWORD *)(a1 + 56), a4);
  std::function<double ()(double)>::operator=((_QWORD *)(a1 + 88), a5);
  return a1;
}

void sub_1BF8757B0(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 + 31) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::UnitInfo<siri::dialogengine::Temperature>::UnitInfo(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v5;
  }
  std::__function::__value_func<BOOL ()(std::vector<std::string> const&,google::protobuf::Field const*)>::__value_func[abi:ne180100](a1 + 56, a2 + 56);
  std::__function::__value_func<BOOL ()(std::vector<std::string> const&,google::protobuf::Field const*)>::__value_func[abi:ne180100](a1 + 88, a2 + 88);
  return a1;
}

void sub_1BF8758FC(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 + 31) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::UnitInfo<siri::dialogengine::Temperature>::UnitInfo(uint64_t a1, const char *a2, __int128 *a3, __int128 *a4, double a5)
{
  __int128 v8;
  __int128 v9;
  uint64_t (***v10)();
  uint64_t v11;
  uint64_t (***v12)();
  uint64_t v13;
  uint64_t (**v15)();
  double v16;
  uint64_t (***v17)();
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)a1 = (_DWORD)a2;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v8 = *a3;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 8) = v8;
  }
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v9 = *a4;
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a4 + 2);
    *(_OWORD *)(a1 + 32) = v9;
  }
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  if (a5 == 0.0)
  {
    a5 = 1.0;
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Invalid unit conversion factor; Replacing with 1.0 for safety",
      a2);
  }
  v15 = &off_1E792ADC0;
  v16 = a5;
  v17 = &v15;
  std::__function::__value_func<double ()(double)>::swap[abi:ne180100](&v15, (_QWORD *)(a1 + 56));
  v10 = v17;
  if (v17 == &v15)
  {
    v11 = 4;
    v10 = &v15;
  }
  else
  {
    if (!v17)
      goto LABEL_14;
    v11 = 5;
  }
  (*v10)[v11]();
LABEL_14:
  v15 = &off_1E792AE40;
  v16 = a5;
  v17 = &v15;
  std::__function::__value_func<double ()(double)>::swap[abi:ne180100](&v15, (_QWORD *)(a1 + 88));
  v12 = v17;
  if (v17 == &v15)
  {
    v13 = 4;
    v12 = &v15;
    goto LABEL_18;
  }
  if (v17)
  {
    v13 = 5;
LABEL_18:
    (*v12)[v13]();
  }
  return a1;
}

void sub_1BF875B00(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Temperature>::UnitInfo(siri::dialogengine::Temperature,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Temperature>::UnitInfo(siri::dialogengine::Temperature,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::~__func()
{
  JUMPOUT(0x1C3B8D890);
}

_QWORD *std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Temperature>::UnitInfo(siri::dialogengine::Temperature,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Temperature>::UnitInfo(siri::dialogengine::Temperature,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E792AE40;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Temperature>::UnitInfo(siri::dialogengine::Temperature,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Temperature>::UnitInfo(siri::dialogengine::Temperature,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E792AE40;
  a2[1] = v2;
  return result;
}

double std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Temperature>::UnitInfo(siri::dialogengine::Temperature,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Temperature>::UnitInfo(siri::dialogengine::Temperature,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::operator()(uint64_t a1, double *a2)
{
  return *a2 / *(double *)(a1 + 8);
}

uint64_t std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Temperature>::UnitInfo(siri::dialogengine::Temperature,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Temperature>::UnitInfo(siri::dialogengine::Temperature,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Temperature>::UnitInfo(siri::dialogengine::Temperature,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Temperature>::UnitInfo(siri::dialogengine::Temperature,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::target_type()
{
}

void std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Temperature>::UnitInfo(siri::dialogengine::Temperature,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Temperature>::UnitInfo(siri::dialogengine::Temperature,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::~__func()
{
  JUMPOUT(0x1C3B8D890);
}

_QWORD *std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Temperature>::UnitInfo(siri::dialogengine::Temperature,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Temperature>::UnitInfo(siri::dialogengine::Temperature,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E792ADC0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Temperature>::UnitInfo(siri::dialogengine::Temperature,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Temperature>::UnitInfo(siri::dialogengine::Temperature,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E792ADC0;
  a2[1] = v2;
  return result;
}

double std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Temperature>::UnitInfo(siri::dialogengine::Temperature,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Temperature>::UnitInfo(siri::dialogengine::Temperature,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::operator()(uint64_t a1, double *a2)
{
  return *a2 * *(double *)(a1 + 8);
}

uint64_t std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Temperature>::UnitInfo(siri::dialogengine::Temperature,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Temperature>::UnitInfo(siri::dialogengine::Temperature,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Temperature>::UnitInfo(siri::dialogengine::Temperature,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Temperature>::UnitInfo(siri::dialogengine::Temperature,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::target_type()
{
}

void std::__function::__func<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#4},std::allocator<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#4}>,double ()(double)>::~__func()
{
  JUMPOUT(0x1C3B8D890);
}

_QWORD *std::__function::__func<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#4},std::allocator<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#4}>,double ()(double)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E792AD40;
  return result;
}

void std::__function::__func<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#4},std::allocator<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#4}>,double ()(double)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E792AD40;
}

double std::__function::__func<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#4},std::allocator<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#4}>,double ()(double)>::operator()(uint64_t a1, double *a2)
{
  return *a2 * 1.8 + -459.67;
}

uint64_t std::__function::__func<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#4},std::allocator<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#4}>,double ()(double)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#4},std::allocator<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#4}>,double ()(double)>::target_type()
{
}

void std::__function::__func<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#3},std::allocator<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#3}>,double ()(double)>::~__func()
{
  JUMPOUT(0x1C3B8D890);
}

_QWORD *std::__function::__func<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#3},std::allocator<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#3}>,double ()(double)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E792ACC0;
  return result;
}

void std::__function::__func<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#3},std::allocator<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#3}>,double ()(double)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E792ACC0;
}

double std::__function::__func<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#3},std::allocator<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#3}>,double ()(double)>::operator()(uint64_t a1, double *a2)
{
  return (*a2 + 459.67) / 1.8;
}

uint64_t std::__function::__func<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#3},std::allocator<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#3}>,double ()(double)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#3},std::allocator<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#3}>,double ()(double)>::target_type()
{
}

_QWORD *std::function<double ()(double)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<BOOL ()(std::vector<std::string> const&,google::protobuf::Field const*)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  std::__function::__value_func<double ()(double)>::swap[abi:ne180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#2}>,double ()(double)>::~__func()
{
  JUMPOUT(0x1C3B8D890);
}

_QWORD *std::__function::__func<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#2}>,double ()(double)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E792AC40;
  return result;
}

void std::__function::__func<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#2}>,double ()(double)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E792AC40;
}

double std::__function::__func<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#2}>,double ()(double)>::operator()(uint64_t a1, double *a2)
{
  return *a2 + -273.15;
}

uint64_t std::__function::__func<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#2}>,double ()(double)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#2}>,double ()(double)>::target_type()
{
}

void std::__function::__func<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#1}>,double ()(double)>::~__func()
{
  JUMPOUT(0x1C3B8D890);
}

_QWORD *std::__function::__func<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#1}>,double ()(double)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E792ABC0;
  return result;
}

void std::__function::__func<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#1}>,double ()(double)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E792ABC0;
}

double std::__function::__func<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#1}>,double ()(double)>::operator()(uint64_t a1, double *a2)
{
  return *a2 + 273.15;
}

uint64_t std::__function::__func<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#1}>,double ()(double)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfoMap<siri::dialogengine::Temperature>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>(void)::$_0::operator() const(void)::{lambda(double)#1}>,double ()(double)>::target_type()
{
}

uint64_t siri::dialogengine::ParseUnitLabel<siri::dialogengine::Temperature>(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v4;
  void **v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  uint64_t v15;
  void *__p[2];
  unsigned __int8 v18;

  siri::dialogengine::StringToLower(a1, (uint64_t)__p);
  v1 = (_QWORD *)siri::dialogengine::AllUnitInfo<siri::dialogengine::Temperature>();
  v2 = v1 + 1;
  v3 = (_QWORD *)*v1;
  if ((_QWORD *)*v1 != v1 + 1)
  {
    if ((v18 & 0x80u) == 0)
      v4 = v18;
    else
      v4 = (unint64_t)__p[1];
    if ((v18 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    while (1)
    {
      v6 = *((unsigned __int8 *)v3 + 71);
      if ((v6 & 0x80u) == 0)
        v7 = (void *)*((unsigned __int8 *)v3 + 71);
      else
        v7 = (void *)v3[7];
      if (v7 == (void *)v4)
      {
        if ((v6 & 0x80) != 0)
        {
          if (!memcmp((const void *)v3[6], v5, v3[7]))
            break;
        }
        else
        {
          if (!*((_BYTE *)v3 + 71))
            break;
          v8 = 0;
          while (*((unsigned __int8 *)v3 + v8 + 48) == *((unsigned __int8 *)v5 + v8))
          {
            if (v6 == ++v8)
              goto LABEL_41;
          }
        }
      }
      v9 = *((unsigned __int8 *)v3 + 95);
      if (*((char *)v3 + 95) < 0)
      {
        if (v3[10])
        {
LABEL_23:
          if ((v9 & 0x80u) == 0)
            v10 = (void *)*((unsigned __int8 *)v3 + 95);
          else
            v10 = (void *)v3[10];
          if (v10 == (void *)v4)
          {
            if ((v9 & 0x80) != 0)
            {
              if (!memcmp((const void *)v3[9], v5, v3[10]))
                break;
            }
            else
            {
              if (!*((_BYTE *)v3 + 95))
                break;
              v11 = 0;
              while (*((unsigned __int8 *)v3 + v11 + 72) == *((unsigned __int8 *)v5 + v11))
              {
                if (v9 == ++v11)
                  goto LABEL_41;
              }
            }
          }
        }
      }
      else if (*((_BYTE *)v3 + 95))
      {
        goto LABEL_23;
      }
      v12 = (_QWORD *)v3[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v3[2];
          v14 = *v13 == (_QWORD)v3;
          v3 = v13;
        }
        while (!v14);
      }
      v3 = v13;
      if (v13 == v2)
        goto LABEL_43;
    }
  }
LABEL_41:
  if (v3 == v2)
LABEL_43:
    v15 = 0xFFFFFFFFLL;
  else
    v15 = *((unsigned int *)v3 + 10);
  if ((char)v18 < 0)
    operator delete(__p[0]);
  return v15;
}

{
  return __ZN4siri12dialogengine14ParseUnitLabelINS0_11TemperatureEEET_RKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE(a1);
}

void sub_1BF876218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::CanConvertUnitValue<siri::dialogengine::Temperature>(uint64_t a1, const char *a2)
{
  const char *v4;
  const char *v5;

  if ((_DWORD)a1 == -1 || (_DWORD)a2 == -1)
  {
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Either fromUnit or toUnit is invalid", a2);
  }
  else if (siri::dialogengine::FindUnitInfo<siri::dialogengine::Temperature>(a1))
  {
    if (siri::dialogengine::FindUnitInfo<siri::dialogengine::Temperature>((int)a2))
      return 1;
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Internal error? Failed to find UnitInfo for toUnit: %d", v5, a2);
  }
  else
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Internal error? Failed to find UnitInfo for fromUnit: %d", v4, a1);
  }
  return 0;
}

{
  return __ZN4siri12dialogengine19CanConvertUnitValueINS0_11TemperatureEEEbT_S3_(a1, a2);
}

double siri::dialogengine::ConvertUnitValue<siri::dialogengine::Temperature>(uint64_t a1, const char *a2, double a3)
{
  double v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  double v12;
  _QWORD *v13;
  _QWORD *v14;
  double v16;

  if ((_DWORD)a1 == (_DWORD)a2)
    return a3;
  v5 = (int)a2;
  v6 = a1;
  v4 = 0.0;
  if (siri::dialogengine::CanConvertUnitValue<siri::dialogengine::Temperature>(a1, a2))
  {
    v7 = siri::dialogengine::FindUnitInfo<siri::dialogengine::Temperature>(v6);
    v8 = siri::dialogengine::FindUnitInfo<siri::dialogengine::Temperature>(v5);
    v16 = a3;
    v9 = *(_QWORD *)(v7 + 80);
    if (!v9
      || (v16 = (*(double (**)(uint64_t, double *))(*(_QWORD *)v9 + 48))(v9, &v16),
          (v10 = *(_QWORD *)(v8 + 112)) == 0))
    {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    v12 = (*(double (**)(uint64_t, double *))(*(_QWORD *)v10 + 48))(v10, &v16);
    v4 = v12;
    v13 = (_QWORD *)(v7 + 8);
    if (*(char *)(v7 + 31) < 0)
      v13 = (_QWORD *)*v13;
    v14 = (_QWORD *)(v8 + 8);
    if (*(char *)(v8 + 31) < 0)
      v14 = (_QWORD *)*v14;
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"%f in %s was converted to %f in %s", v11, *(_QWORD *)&a3, v13, *(_QWORD *)&v12, v14);
  }
  return v4;
}

{
  return __ZN4siri12dialogengine16ConvertUnitValueINS0_11TemperatureEEEddT_S3_(a1, a2, a3);
}

void siri::dialogengine::GetUnitLabel<siri::dialogengine::Speed>(int a1@<W0>, std::string *a2@<X8>)
{
  uint64_t v3;
  __int128 v4;

  v3 = siri::dialogengine::FindUnitInfo<siri::dialogengine::Speed>(a1);
  if (v3)
  {
    if (*(char *)(v3 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v3 + 8), *(_QWORD *)(v3 + 16));
    }
    else
    {
      v4 = *(_OWORD *)(v3 + 8);
      a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v3 + 24);
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v4;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "");
  }
}

uint64_t siri::dialogengine::FindUnitInfo<siri::dialogengine::Speed>(int a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;

  v2 = siri::dialogengine::AllUnitInfo<siri::dialogengine::Speed>();
  v5 = *(_QWORD *)(v2 + 8);
  v3 = v2 + 8;
  v4 = v5;
  if (!v5)
    return 0;
  v6 = v3;
  do
  {
    v7 = *(_DWORD *)(v4 + 32);
    v8 = v7 < a1;
    if (v7 >= a1)
      v9 = (uint64_t *)v4;
    else
      v9 = (uint64_t *)(v4 + 8);
    if (!v8)
      v6 = v4;
    v4 = *v9;
  }
  while (*v9);
  if (v6 == v3)
    return 0;
  v10 = *(_DWORD *)(v6 + 32);
  v11 = v6 + 40;
  if (v10 <= a1)
    return v11;
  else
    return 0;
}

uint64_t siri::dialogengine::AllUnitInfo<siri::dialogengine::Speed>()
{
  unsigned __int8 v0;
  unint64_t v1;
  _QWORD *v3;
  char v4;
  char **v5;
  char *v6;

  if ((v0 & 1) == 0
  {
    v3 = (_QWORD *)operator new();
    *v3 = 0;
    siri::dialogengine::AllUnitInfo<siri::dialogengine::Speed>(void)::flag = (uint64_t)v3;
  }
  v1 = atomic_load((unint64_t *)siri::dialogengine::AllUnitInfo<siri::dialogengine::Speed>(void)::flag);
  if (v1 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once((std::once_flag::_State_type *)siri::dialogengine::AllUnitInfo<siri::dialogengine::Speed>(void)::flag, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::UnitInfoMap<siri::dialogengine::Speed>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Speed>(void)::$_0 &&>>);
  }
  return siri::dialogengine::AllUnitInfo<siri::dialogengine::Speed>(void)::sUnits;
}

void sub_1BF876524(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::UnitInfoMap<siri::dialogengine::Speed>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Speed>(void)::$_0 &&>>()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  uint64_t *v10;
  uint64_t *v11;
  _DWORD *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  void **v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  void *v41[2];
  char v42;
  void *v43[2];
  char v44;
  void *v45[2];
  char v46;
  void *v47[2];
  char v48;
  void *v49[2];
  char v50;
  void *v51[2];
  char v52;
  void *v53[2];
  char v54;
  void *v55[2];
  char v56;
  void *v57[2];
  char v58;
  void *v59[2];
  char v60;
  _QWORD v61[2];
  char v62;
  char v63[8];
  void *v64;
  char v65;
  void *__p;
  char v67;
  _BYTE v68[24];
  _BYTE *v69;
  _BYTE v70[24];
  _BYTE *v71;
  char v72[8];
  void *v73;
  char v74;
  void *v75;
  char v76;
  _BYTE v77[24];
  _BYTE *v78;
  _BYTE v79[24];
  _BYTE *v80;
  char v81[8];
  void *v82;
  char v83;
  void *v84;
  char v85;
  _BYTE v86[24];
  _BYTE *v87;
  _BYTE v88[24];
  _BYTE *v89;
  char v90[8];
  void *v91;
  char v92;
  void *v93;
  char v94;
  _BYTE v95[24];
  _BYTE *v96;
  _BYTE v97[24];
  _BYTE *v98;
  char v99[8];
  void *v100[2];
  char v101;
  void *v102;
  char v103;
  _BYTE v104[24];
  _BYTE *v105;
  _BYTE v106[24];
  _BYTE *v107;
  _DWORD v108[2];
  _DWORD v109[32];
  _DWORD v110[32];
  _DWORD v111[32];
  _DWORD v112[32];
  _QWORD v113[17];

  v113[15] = *MEMORY[0x1E0C80C00];
  v0 = operator new();
  std::string::basic_string[abi:ne180100]<0>(v59, "kilometers per hour");
  std::string::basic_string[abi:ne180100]<0>(v57, "kph");
  siri::dialogengine::UnitInfo<siri::dialogengine::Speed>::UnitInfo((uint64_t)v99, 0, (__int128 *)v59, (__int128 *)v57, 0.277778);
  v108[0] = 0;
  siri::dialogengine::UnitInfo<siri::dialogengine::Speed>::UnitInfo((uint64_t)v109, (uint64_t)v99);
  std::string::basic_string[abi:ne180100]<0>(v55, "knots");
  std::string::basic_string[abi:ne180100]<0>(v53, "");
  siri::dialogengine::UnitInfo<siri::dialogengine::Speed>::UnitInfo((uint64_t)v90, (const char *)1, (__int128 *)v55, (__int128 *)v53, 0.514444856);
  v109[30] = 1;
  siri::dialogengine::UnitInfo<siri::dialogengine::Speed>::UnitInfo((uint64_t)v110, (uint64_t)v90);
  std::string::basic_string[abi:ne180100]<0>(v51, "meters per second");
  std::string::basic_string[abi:ne180100]<0>(v49, "");
  siri::dialogengine::UnitInfo<siri::dialogengine::Speed>::UnitInfo((uint64_t)v81, (const char *)2, (__int128 *)v51, (__int128 *)v49, 1.0);
  v110[30] = 2;
  siri::dialogengine::UnitInfo<siri::dialogengine::Speed>::UnitInfo((uint64_t)v111, (uint64_t)v81);
  std::string::basic_string[abi:ne180100]<0>(v47, "miles per hour");
  std::string::basic_string[abi:ne180100]<0>(v45, "mph");
  siri::dialogengine::UnitInfo<siri::dialogengine::Speed>::UnitInfo((uint64_t)v72, (const char *)3, (__int128 *)v47, (__int128 *)v45, 0.44704);
  v111[30] = 3;
  siri::dialogengine::UnitInfo<siri::dialogengine::Speed>::UnitInfo((uint64_t)v112, (uint64_t)v72);
  std::string::basic_string[abi:ne180100]<0>(v43, "speed of light");
  std::string::basic_string[abi:ne180100]<0>(v41, "");
  siri::dialogengine::UnitInfo<siri::dialogengine::Speed>::UnitInfo((uint64_t)v63, (const char *)4, (__int128 *)v43, (__int128 *)v41, 299792458.0);
  v112[30] = 4;
  siri::dialogengine::UnitInfo<siri::dialogengine::Speed>::UnitInfo((uint64_t)v113, (uint64_t)v63);
  v1 = 0;
  v2 = 0;
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)v0 = v0 + 8;
  v3 = (uint64_t *)(v0 + 8);
  while (1)
  {
    v4 = &v108[32 * v2];
    v5 = v0 + 8;
    if (v3 == (uint64_t *)(v0 + 8))
      goto LABEL_8;
    v6 = v1;
    v7 = v0 + 8;
    if (v1)
    {
      do
      {
        v5 = v6;
        v6 = *(_QWORD *)(v6 + 8);
      }
      while (v6);
    }
    else
    {
      do
      {
        v5 = *(_QWORD *)(v7 + 16);
        v8 = *(_QWORD *)v5 == v7;
        v7 = v5;
      }
      while (v8);
    }
    v9 = *v4;
    if (*(_DWORD *)(v5 + 32) < *v4)
    {
LABEL_8:
      v10 = (uint64_t *)(v1 ? v5 : v0 + 8);
      v11 = (uint64_t *)(v1 ? v5 + 8 : v0 + 8);
    }
    else
    {
      v10 = (uint64_t *)(v0 + 8);
      v11 = (uint64_t *)(v0 + 8);
      if (v1)
      {
        v11 = (uint64_t *)(v0 + 8);
        while (1)
        {
          while (1)
          {
            v10 = (uint64_t *)v1;
            v14 = *(_DWORD *)(v1 + 32);
            if (v9 >= v14)
              break;
            v1 = *v10;
            v11 = v10;
            if (!*v10)
              goto LABEL_15;
          }
          if (v14 >= v9)
            break;
          v11 = v10 + 1;
          v1 = v10[1];
          if (!v1)
            goto LABEL_15;
        }
      }
    }
    if (!*v11)
    {
LABEL_15:
      v12 = operator new(0xA0uLL);
      v61[0] = v12;
      v61[1] = v0 + 8;
      v62 = 0;
      v12[8] = *v4;
      siri::dialogengine::UnitInfo<siri::dialogengine::Speed>::UnitInfo((uint64_t)(v12 + 10), (uint64_t)&v108[32 * v2 + 2]);
      v62 = 1;
      *(_QWORD *)v12 = 0;
      *((_QWORD *)v12 + 1) = 0;
      *((_QWORD *)v12 + 2) = v10;
      *v11 = (uint64_t)v12;
      v13 = **(_QWORD **)v0;
      if (v13)
      {
        *(_QWORD *)v0 = v13;
        v12 = (_DWORD *)*v11;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v0 + 8), (uint64_t *)v12);
      ++*(_QWORD *)(v0 + 16);
      v61[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<siri::dialogengine::Length,siri::dialogengine::UnitInfo<siri::dialogengine::Length>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<siri::dialogengine::Length,siri::dialogengine::UnitInfo<siri::dialogengine::Length>>,void *>>>>::reset[abi:ne180100]((uint64_t)v61);
    }
    if (++v2 == 5)
      break;
    v3 = *(uint64_t **)v0;
    v1 = *(_QWORD *)(v0 + 8);
  }
  siri::dialogengine::AllUnitInfo<siri::dialogengine::Speed>(void)::sUnits = v0;
  v15 = 640;
  do
  {
    v16 = *(_BYTE **)&v108[v15 / 4 - 2];
    if (&v106[v15] == v16)
    {
      v16 = &v106[v15];
      v17 = 4;
    }
    else
    {
      if (!v16)
        goto LABEL_34;
      v17 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_34:
    v18 = *(_BYTE **)&v106[v15 - 8];
    if (&v104[v15] == v18)
    {
      v18 = &v104[v15];
      v19 = 4;
    }
    else
    {
      if (!v18)
        goto LABEL_39;
      v19 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_39:
    v20 = (void **)&v108[v15 / 4];
    if ((v104[v15 - 1] & 0x80000000) != 0)
      operator delete(*(v20 - 11));
    if (*((char *)v20 - 89) < 0)
      operator delete(v100[v15 / 8]);
    v15 -= 128;
  }
  while (v15);
  v21 = v71;
  if (v71 == v70)
  {
    v22 = 4;
    v21 = v70;
LABEL_48:
    (*(void (**)(void))(*v21 + 8 * v22))();
  }
  else if (v71)
  {
    v22 = 5;
    goto LABEL_48;
  }
  v23 = v69;
  if (v69 == v68)
  {
    v24 = 4;
    v23 = v68;
LABEL_53:
    (*(void (**)(void))(*v23 + 8 * v24))();
  }
  else if (v69)
  {
    v24 = 5;
    goto LABEL_53;
  }
  if (v67 < 0)
    operator delete(__p);
  if (v65 < 0)
    operator delete(v64);
  if (v42 < 0)
    operator delete(v41[0]);
  if (v44 < 0)
    operator delete(v43[0]);
  v25 = v80;
  if (v80 == v79)
  {
    v26 = 4;
    v25 = v79;
LABEL_66:
    (*(void (**)(void))(*v25 + 8 * v26))();
  }
  else if (v80)
  {
    v26 = 5;
    goto LABEL_66;
  }
  v27 = v78;
  if (v78 == v77)
  {
    v28 = 4;
    v27 = v77;
LABEL_71:
    (*(void (**)(void))(*v27 + 8 * v28))();
  }
  else if (v78)
  {
    v28 = 5;
    goto LABEL_71;
  }
  if (v76 < 0)
    operator delete(v75);
  if (v74 < 0)
    operator delete(v73);
  if (v46 < 0)
    operator delete(v45[0]);
  if (v48 < 0)
    operator delete(v47[0]);
  v29 = v89;
  if (v89 == v88)
  {
    v30 = 4;
    v29 = v88;
LABEL_84:
    (*(void (**)(void))(*v29 + 8 * v30))();
  }
  else if (v89)
  {
    v30 = 5;
    goto LABEL_84;
  }
  v31 = v87;
  if (v87 == v86)
  {
    v32 = 4;
    v31 = v86;
LABEL_89:
    (*(void (**)(void))(*v31 + 8 * v32))();
  }
  else if (v87)
  {
    v32 = 5;
    goto LABEL_89;
  }
  if (v85 < 0)
    operator delete(v84);
  if (v83 < 0)
    operator delete(v82);
  if (v50 < 0)
    operator delete(v49[0]);
  if (v52 < 0)
    operator delete(v51[0]);
  v33 = v98;
  if (v98 == v97)
  {
    v34 = 4;
    v33 = v97;
LABEL_102:
    (*(void (**)(void))(*v33 + 8 * v34))();
  }
  else if (v98)
  {
    v34 = 5;
    goto LABEL_102;
  }
  v35 = v96;
  if (v96 == v95)
  {
    v36 = 4;
    v35 = v95;
LABEL_107:
    (*(void (**)(void))(*v35 + 8 * v36))();
  }
  else if (v96)
  {
    v36 = 5;
    goto LABEL_107;
  }
  if (v94 < 0)
    operator delete(v93);
  if (v92 < 0)
    operator delete(v91);
  if (v54 < 0)
    operator delete(v53[0]);
  if (v56 < 0)
    operator delete(v55[0]);
  v37 = v107;
  if (v107 == v106)
  {
    v38 = 4;
    v37 = v106;
LABEL_120:
    (*(void (**)(void))(*v37 + 8 * v38))();
  }
  else if (v107)
  {
    v38 = 5;
    goto LABEL_120;
  }
  v39 = v105;
  if (v105 == v104)
  {
    v40 = 4;
    v39 = v104;
LABEL_125:
    (*(void (**)(void))(*v39 + 8 * v40))();
  }
  else if (v105)
  {
    v40 = 5;
    goto LABEL_125;
  }
  if (v103 < 0)
    operator delete(v102);
  if (v101 < 0)
    operator delete(v100[0]);
  if (v58 < 0)
    operator delete(v57[0]);
  if (v60 < 0)
    operator delete(v59[0]);
}

void sub_1BF876CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,void *a63)
{
  char a68;
  void *a72;
  char a73;
  void *__p;
  char a75;
  uint64_t a76;
  uint64_t a77;
  uint64_t a78;
  uint64_t a79;
  void *a80;
  char a81;
  void *a82;
  char a83;
  uint64_t a84;
  uint64_t a85;
  uint64_t a86;
  uint64_t a87;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  unint64_t *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  unint64_t *v99;
  uint64_t v100;
  unint64_t *v101;
  uint64_t v102;
  unint64_t *v103;
  uint64_t v104;
  unint64_t *v105;
  uint64_t v106;
  unint64_t *v107;
  uint64_t v108;
  unint64_t *v109;
  uint64_t v110;
  unint64_t *v111;
  uint64_t v112;
  unint64_t *v113;
  uint64_t v114;

  v90 = (uint64_t *)a79;
  if ((uint64_t *)a79 == &a78)
  {
    v91 = 4;
    v90 = &a78;
  }
  else
  {
    if (!a79)
      goto LABEL_6;
    v91 = 5;
  }
  (*(void (**)(void))(*v90 + 8 * v91))();
LABEL_6:
  v92 = (uint64_t *)a77;
  if ((uint64_t *)a77 == &a76)
  {
    v93 = 4;
    v92 = &a76;
  }
  else
  {
    if (!a77)
      goto LABEL_11;
    v93 = 5;
  }
  (*(void (**)(void))(*v92 + 8 * v93))();
LABEL_11:
  if (a75 < 0)
    operator delete(__p);
  if (a73 < 0)
    operator delete(a72);
  if (a14 < 0)
    operator delete(a9);
  if (a20 < 0)
    operator delete(a15);
  v94 = (unint64_t *)(v88 + 512);
  v95 = (uint64_t *)a87;
  if ((uint64_t *)a87 == &a86)
  {
    v96 = 4;
    v95 = &a86;
  }
  else
  {
    if (!a87)
      goto LABEL_24;
    v96 = 5;
  }
  (*(void (**)(void))(*v95 + 8 * v96))();
LABEL_24:
  v97 = (uint64_t *)a85;
  if ((uint64_t *)a85 == &a84)
  {
    v98 = 4;
    v97 = &a84;
  }
  else
  {
    if (!a85)
      goto LABEL_29;
    v98 = 5;
  }
  (*(void (**)(void))(*v97 + 8 * v98))();
LABEL_29:
  if (a83 < 0)
    operator delete(a82);
  if (a81 < 0)
    operator delete(a80);
  if (a26 < 0)
    operator delete(a21);
  if (a32 < 0)
    operator delete(a27);
  v99 = (unint64_t *)STACK[0x268];
  if ((unint64_t *)STACK[0x268] == &STACK[0x250])
  {
    v100 = 4;
    v99 = &STACK[0x250];
  }
  else
  {
    if (!v99)
      goto LABEL_42;
    v100 = 5;
  }
  (*(void (**)(void))(*v99 + 8 * v100))();
LABEL_42:
  v101 = (unint64_t *)STACK[0x248];
  if ((unint64_t *)STACK[0x248] == &STACK[0x230])
  {
    v102 = 4;
    v101 = &STACK[0x230];
  }
  else
  {
    if (!v101)
      goto LABEL_47;
    v102 = 5;
  }
  (*(void (**)(void))(*v101 + 8 * v102))();
LABEL_47:
  if (SLOBYTE(STACK[0x22F]) < 0)
    operator delete((void *)STACK[0x218]);
  if (SLOBYTE(STACK[0x217]) < 0)
    operator delete((void *)STACK[0x200]);
  if (a38 < 0)
    operator delete(a33);
  if (a44 < 0)
    operator delete(a39);
  v103 = (unint64_t *)STACK[0x2E0];
  if ((unint64_t *)STACK[0x2E0] == &STACK[0x2C8])
  {
    v104 = 4;
    v103 = &STACK[0x2C8];
  }
  else
  {
    if (!v103)
      goto LABEL_60;
    v104 = 5;
  }
  (*(void (**)(void))(*v103 + 8 * v104))();
LABEL_60:
  v105 = (unint64_t *)STACK[0x2C0];
  if ((unint64_t *)STACK[0x2C0] == &STACK[0x2A8])
  {
    v106 = 4;
    v105 = &STACK[0x2A8];
  }
  else
  {
    if (!v105)
      goto LABEL_65;
    v106 = 5;
  }
  (*(void (**)(void))(*v105 + 8 * v106))();
LABEL_65:
  if (SLOBYTE(STACK[0x2A7]) < 0)
    operator delete((void *)STACK[0x290]);
  if (SLOBYTE(STACK[0x28F]) < 0)
    operator delete((void *)STACK[0x278]);
  if (a50 < 0)
    operator delete(a45);
  if (a56 < 0)
    operator delete(a51);
  v107 = (unint64_t *)STACK[0x358];
  if ((unint64_t *)STACK[0x358] == &STACK[0x340])
  {
    v108 = 4;
    v107 = &STACK[0x340];
  }
  else
  {
    if (!v107)
      goto LABEL_78;
    v108 = 5;
  }
  (*(void (**)(void))(*v107 + 8 * v108))();
LABEL_78:
  v109 = (unint64_t *)STACK[0x338];
  if ((unint64_t *)STACK[0x338] == &STACK[0x320])
  {
    v110 = 4;
    v109 = &STACK[0x320];
  }
  else
  {
    if (!v109)
      goto LABEL_83;
    v110 = 5;
  }
  (*(void (**)(void))(*v109 + 8 * v110))();
LABEL_83:
  if (SLOBYTE(STACK[0x31F]) < 0)
    operator delete((void *)STACK[0x308]);
  if (SLOBYTE(STACK[0x307]) < 0)
    operator delete((void *)STACK[0x2F0]);
  if (a62 < 0)
    operator delete(a57);
  if (a68 < 0)
    operator delete(a63);
  if (&STACK[0x360] == v94)
  {
LABEL_107:
    MEMORY[0x1C3B8D890](v87, 0x1020C4062D53EE8);
    _Unwind_Resume(a1);
  }
  while (1)
  {
    v111 = (unint64_t *)*(v94 - 1);
    if (v94 - 4 == v111)
    {
      v111 = v94 - 4;
      v112 = 4;
    }
    else
    {
      if (!v111)
        goto LABEL_97;
      v112 = 5;
    }
    (*(void (**)(void))(*v111 + 8 * v112))();
LABEL_97:
    v113 = (unint64_t *)*(v94 - 5);
    if (v94 - 8 == v113)
    {
      v113 = v94 - 8;
      v114 = 4;
      goto LABEL_101;
    }
    if (v113)
    {
      v114 = 5;
LABEL_101:
      (*(void (**)(void))(*v113 + 8 * v114))();
    }
    if (*((char *)v94 - 65) < 0)
      operator delete((void *)*(v94 - 11));
    if (*((char *)v94 - 89) < 0)
      operator delete((void *)*(v94 - 14));
    v94 -= 16;
    if (v94 == &STACK[0x360])
      goto LABEL_107;
  }
}

uint64_t siri::dialogengine::UnitInfo<siri::dialogengine::Speed>::UnitInfo(uint64_t a1, const char *a2, __int128 *a3, __int128 *a4, double a5)
{
  __int128 v8;
  __int128 v9;
  uint64_t (***v10)();
  uint64_t v11;
  uint64_t (***v12)();
  uint64_t v13;
  uint64_t (**v15)();
  double v16;
  uint64_t (***v17)();
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)a1 = (_DWORD)a2;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v8 = *a3;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 8) = v8;
  }
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v9 = *a4;
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a4 + 2);
    *(_OWORD *)(a1 + 32) = v9;
  }
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  if (a5 == 0.0)
  {
    a5 = 1.0;
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Invalid unit conversion factor; Replacing with 1.0 for safety",
      a2);
  }
  v15 = &off_1E792AEC0;
  v16 = a5;
  v17 = &v15;
  std::__function::__value_func<double ()(double)>::swap[abi:ne180100](&v15, (_QWORD *)(a1 + 56));
  v10 = v17;
  if (v17 == &v15)
  {
    v11 = 4;
    v10 = &v15;
  }
  else
  {
    if (!v17)
      goto LABEL_14;
    v11 = 5;
  }
  (*v10)[v11]();
LABEL_14:
  v15 = &off_1E792AF40;
  v16 = a5;
  v17 = &v15;
  std::__function::__value_func<double ()(double)>::swap[abi:ne180100](&v15, (_QWORD *)(a1 + 88));
  v12 = v17;
  if (v17 == &v15)
  {
    v13 = 4;
    v12 = &v15;
    goto LABEL_18;
  }
  if (v17)
  {
    v13 = 5;
LABEL_18:
    (*v12)[v13]();
  }
  return a1;
}

void sub_1BF877400(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::UnitInfo<siri::dialogengine::Speed>::UnitInfo(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v5;
  }
  std::__function::__value_func<BOOL ()(std::vector<std::string> const&,google::protobuf::Field const*)>::__value_func[abi:ne180100](a1 + 56, a2 + 56);
  std::__function::__value_func<BOOL ()(std::vector<std::string> const&,google::protobuf::Field const*)>::__value_func[abi:ne180100](a1 + 88, a2 + 88);
  return a1;
}

void sub_1BF87754C(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 + 31) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Speed>::UnitInfo(siri::dialogengine::Speed,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Speed>::UnitInfo(siri::dialogengine::Speed,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::~__func()
{
  JUMPOUT(0x1C3B8D890);
}

_QWORD *std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Speed>::UnitInfo(siri::dialogengine::Speed,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Speed>::UnitInfo(siri::dialogengine::Speed,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E792AF40;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Speed>::UnitInfo(siri::dialogengine::Speed,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Speed>::UnitInfo(siri::dialogengine::Speed,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E792AF40;
  a2[1] = v2;
  return result;
}

double std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Speed>::UnitInfo(siri::dialogengine::Speed,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Speed>::UnitInfo(siri::dialogengine::Speed,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::operator()(uint64_t a1, double *a2)
{
  return *a2 / *(double *)(a1 + 8);
}

uint64_t std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Speed>::UnitInfo(siri::dialogengine::Speed,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Speed>::UnitInfo(siri::dialogengine::Speed,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Speed>::UnitInfo(siri::dialogengine::Speed,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Speed>::UnitInfo(siri::dialogengine::Speed,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::target_type()
{
}

void std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Speed>::UnitInfo(siri::dialogengine::Speed,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Speed>::UnitInfo(siri::dialogengine::Speed,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::~__func()
{
  JUMPOUT(0x1C3B8D890);
}

_QWORD *std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Speed>::UnitInfo(siri::dialogengine::Speed,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Speed>::UnitInfo(siri::dialogengine::Speed,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E792AEC0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Speed>::UnitInfo(siri::dialogengine::Speed,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Speed>::UnitInfo(siri::dialogengine::Speed,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E792AEC0;
  a2[1] = v2;
  return result;
}

double std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Speed>::UnitInfo(siri::dialogengine::Speed,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Speed>::UnitInfo(siri::dialogengine::Speed,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::operator()(uint64_t a1, double *a2)
{
  return *a2 * *(double *)(a1 + 8);
}

uint64_t std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Speed>::UnitInfo(siri::dialogengine::Speed,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Speed>::UnitInfo(siri::dialogengine::Speed,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Speed>::UnitInfo(siri::dialogengine::Speed,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Speed>::UnitInfo(siri::dialogengine::Speed,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::target_type()
{
}

uint64_t siri::dialogengine::ParseUnitLabel<siri::dialogengine::Speed>(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v4;
  void **v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  uint64_t v15;
  void *__p[2];
  unsigned __int8 v18;

  siri::dialogengine::StringToLower(a1, (uint64_t)__p);
  v1 = (_QWORD *)siri::dialogengine::AllUnitInfo<siri::dialogengine::Speed>();
  v2 = v1 + 1;
  v3 = (_QWORD *)*v1;
  if ((_QWORD *)*v1 != v1 + 1)
  {
    if ((v18 & 0x80u) == 0)
      v4 = v18;
    else
      v4 = (unint64_t)__p[1];
    if ((v18 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    while (1)
    {
      v6 = *((unsigned __int8 *)v3 + 71);
      if ((v6 & 0x80u) == 0)
        v7 = (void *)*((unsigned __int8 *)v3 + 71);
      else
        v7 = (void *)v3[7];
      if (v7 == (void *)v4)
      {
        if ((v6 & 0x80) != 0)
        {
          if (!memcmp((const void *)v3[6], v5, v3[7]))
            break;
        }
        else
        {
          if (!*((_BYTE *)v3 + 71))
            break;
          v8 = 0;
          while (*((unsigned __int8 *)v3 + v8 + 48) == *((unsigned __int8 *)v5 + v8))
          {
            if (v6 == ++v8)
              goto LABEL_41;
          }
        }
      }
      v9 = *((unsigned __int8 *)v3 + 95);
      if (*((char *)v3 + 95) < 0)
      {
        if (v3[10])
        {
LABEL_23:
          if ((v9 & 0x80u) == 0)
            v10 = (void *)*((unsigned __int8 *)v3 + 95);
          else
            v10 = (void *)v3[10];
          if (v10 == (void *)v4)
          {
            if ((v9 & 0x80) != 0)
            {
              if (!memcmp((const void *)v3[9], v5, v3[10]))
                break;
            }
            else
            {
              if (!*((_BYTE *)v3 + 95))
                break;
              v11 = 0;
              while (*((unsigned __int8 *)v3 + v11 + 72) == *((unsigned __int8 *)v5 + v11))
              {
                if (v9 == ++v11)
                  goto LABEL_41;
              }
            }
          }
        }
      }
      else if (*((_BYTE *)v3 + 95))
      {
        goto LABEL_23;
      }
      v12 = (_QWORD *)v3[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v3[2];
          v14 = *v13 == (_QWORD)v3;
          v3 = v13;
        }
        while (!v14);
      }
      v3 = v13;
      if (v13 == v2)
        goto LABEL_43;
    }
  }
LABEL_41:
  if (v3 == v2)
LABEL_43:
    v15 = 0xFFFFFFFFLL;
  else
    v15 = *((unsigned int *)v3 + 10);
  if ((char)v18 < 0)
    operator delete(__p[0]);
  return v15;
}

{
  return __ZN4siri12dialogengine14ParseUnitLabelINS0_5SpeedEEET_RKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE(a1);
}

void sub_1BF8778D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::CanConvertUnitValue<siri::dialogengine::Speed>(uint64_t a1, const char *a2)
{
  const char *v4;
  const char *v5;

  if ((_DWORD)a1 == -1 || (_DWORD)a2 == -1)
  {
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Either fromUnit or toUnit is invalid", a2);
  }
  else if (siri::dialogengine::FindUnitInfo<siri::dialogengine::Speed>(a1))
  {
    if (siri::dialogengine::FindUnitInfo<siri::dialogengine::Speed>((int)a2))
      return 1;
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Internal error? Failed to find UnitInfo for toUnit: %d", v5, a2);
  }
  else
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Internal error? Failed to find UnitInfo for fromUnit: %d", v4, a1);
  }
  return 0;
}

{
  return __ZN4siri12dialogengine19CanConvertUnitValueINS0_5SpeedEEEbT_S3_(a1, a2);
}

double siri::dialogengine::ConvertUnitValue<siri::dialogengine::Speed>(uint64_t a1, const char *a2, double a3)
{
  double v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  double v12;
  _QWORD *v13;
  _QWORD *v14;
  double v16;

  if ((_DWORD)a1 == (_DWORD)a2)
    return a3;
  v5 = (int)a2;
  v6 = a1;
  v4 = 0.0;
  if (siri::dialogengine::CanConvertUnitValue<siri::dialogengine::Speed>(a1, a2))
  {
    v7 = siri::dialogengine::FindUnitInfo<siri::dialogengine::Speed>(v6);
    v8 = siri::dialogengine::FindUnitInfo<siri::dialogengine::Speed>(v5);
    v16 = a3;
    v9 = *(_QWORD *)(v7 + 80);
    if (!v9
      || (v16 = (*(double (**)(uint64_t, double *))(*(_QWORD *)v9 + 48))(v9, &v16),
          (v10 = *(_QWORD *)(v8 + 112)) == 0))
    {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    v12 = (*(double (**)(uint64_t, double *))(*(_QWORD *)v10 + 48))(v10, &v16);
    v4 = v12;
    v13 = (_QWORD *)(v7 + 8);
    if (*(char *)(v7 + 31) < 0)
      v13 = (_QWORD *)*v13;
    v14 = (_QWORD *)(v8 + 8);
    if (*(char *)(v8 + 31) < 0)
      v14 = (_QWORD *)*v14;
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"%f in %s was converted to %f in %s", v11, *(_QWORD *)&a3, v13, *(_QWORD *)&v12, v14);
  }
  return v4;
}

{
  return __ZN4siri12dialogengine16ConvertUnitValueINS0_5SpeedEEEddT_S3_(a1, a2, a3);
}

void siri::dialogengine::GetUnitLabel<siri::dialogengine::Pressure>(int a1@<W0>, std::string *a2@<X8>)
{
  uint64_t v3;
  __int128 v4;

  v3 = siri::dialogengine::FindUnitInfo<siri::dialogengine::Pressure>(a1);
  if (v3)
  {
    if (*(char *)(v3 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v3 + 8), *(_QWORD *)(v3 + 16));
    }
    else
    {
      v4 = *(_OWORD *)(v3 + 8);
      a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v3 + 24);
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v4;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "");
  }
}

uint64_t siri::dialogengine::FindUnitInfo<siri::dialogengine::Pressure>(int a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;

  v2 = siri::dialogengine::AllUnitInfo<siri::dialogengine::Pressure>();
  v5 = *(_QWORD *)(v2 + 8);
  v3 = v2 + 8;
  v4 = v5;
  if (!v5)
    return 0;
  v6 = v3;
  do
  {
    v7 = *(_DWORD *)(v4 + 32);
    v8 = v7 < a1;
    if (v7 >= a1)
      v9 = (uint64_t *)v4;
    else
      v9 = (uint64_t *)(v4 + 8);
    if (!v8)
      v6 = v4;
    v4 = *v9;
  }
  while (*v9);
  if (v6 == v3)
    return 0;
  v10 = *(_DWORD *)(v6 + 32);
  v11 = v6 + 40;
  if (v10 <= a1)
    return v11;
  else
    return 0;
}

uint64_t siri::dialogengine::AllUnitInfo<siri::dialogengine::Pressure>()
{
  unsigned __int8 v0;
  unint64_t v1;
  _QWORD *v3;
  char v4;
  char **v5;
  char *v6;

  if ((v0 & 1) == 0
  {
    v3 = (_QWORD *)operator new();
    *v3 = 0;
    siri::dialogengine::AllUnitInfo<siri::dialogengine::Pressure>(void)::flag = (uint64_t)v3;
  }
  v1 = atomic_load((unint64_t *)siri::dialogengine::AllUnitInfo<siri::dialogengine::Pressure>(void)::flag);
  if (v1 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once((std::once_flag::_State_type *)siri::dialogengine::AllUnitInfo<siri::dialogengine::Pressure>(void)::flag, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::UnitInfoMap<siri::dialogengine::Pressure>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Pressure>(void)::$_0 &&>>);
  }
  return siri::dialogengine::AllUnitInfo<siri::dialogengine::Pressure>(void)::sUnits;
}

void sub_1BF877BDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::UnitInfoMap<siri::dialogengine::Pressure>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Pressure>(void)::$_0 &&>>()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  uint64_t *v10;
  uint64_t *v11;
  _DWORD *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  void **v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  void *v41[2];
  char v42;
  void *v43[2];
  char v44;
  void *v45[2];
  char v46;
  void *v47[2];
  char v48;
  void *v49[2];
  char v50;
  void *v51[2];
  char v52;
  void *v53[2];
  char v54;
  void *v55[2];
  char v56;
  void *v57[2];
  char v58;
  void *v59[2];
  char v60;
  _QWORD v61[2];
  char v62;
  char v63[8];
  void *v64;
  char v65;
  void *__p;
  char v67;
  _BYTE v68[24];
  _BYTE *v69;
  _BYTE v70[24];
  _BYTE *v71;
  char v72[8];
  void *v73;
  char v74;
  void *v75;
  char v76;
  _BYTE v77[24];
  _BYTE *v78;
  _BYTE v79[24];
  _BYTE *v80;
  char v81[8];
  void *v82;
  char v83;
  void *v84;
  char v85;
  _BYTE v86[24];
  _BYTE *v87;
  _BYTE v88[24];
  _BYTE *v89;
  char v90[8];
  void *v91;
  char v92;
  void *v93;
  char v94;
  _BYTE v95[24];
  _BYTE *v96;
  _BYTE v97[24];
  _BYTE *v98;
  char v99[8];
  void *v100[2];
  char v101;
  void *v102;
  char v103;
  _BYTE v104[24];
  _BYTE *v105;
  _BYTE v106[24];
  _BYTE *v107;
  _DWORD v108[2];
  _DWORD v109[32];
  _DWORD v110[32];
  _DWORD v111[32];
  _DWORD v112[32];
  _QWORD v113[17];

  v113[15] = *MEMORY[0x1E0C80C00];
  v0 = operator new();
  std::string::basic_string[abi:ne180100]<0>(v59, "hectopascals");
  std::string::basic_string[abi:ne180100]<0>(v57, "");
  siri::dialogengine::UnitInfo<siri::dialogengine::Pressure>::UnitInfo((uint64_t)v99, 0, (__int128 *)v59, (__int128 *)v57, 1.0);
  v108[0] = 0;
  siri::dialogengine::UnitInfo<siri::dialogengine::Pressure>::UnitInfo((uint64_t)v109, (uint64_t)v99);
  std::string::basic_string[abi:ne180100]<0>(v55, "inches of mercury");
  std::string::basic_string[abi:ne180100]<0>(v53, "");
  siri::dialogengine::UnitInfo<siri::dialogengine::Pressure>::UnitInfo((uint64_t)v90, (const char *)1, (__int128 *)v55, (__int128 *)v53, 33.86389);
  v109[30] = 1;
  siri::dialogengine::UnitInfo<siri::dialogengine::Pressure>::UnitInfo((uint64_t)v110, (uint64_t)v90);
  std::string::basic_string[abi:ne180100]<0>(v51, "millibars");
  std::string::basic_string[abi:ne180100]<0>(v49, "");
  siri::dialogengine::UnitInfo<siri::dialogengine::Pressure>::UnitInfo((uint64_t)v81, (const char *)2, (__int128 *)v51, (__int128 *)v49, 1.0);
  v110[30] = 2;
  siri::dialogengine::UnitInfo<siri::dialogengine::Pressure>::UnitInfo((uint64_t)v111, (uint64_t)v81);
  std::string::basic_string[abi:ne180100]<0>(v47, "millimeters of mercury");
  std::string::basic_string[abi:ne180100]<0>(v45, "");
  siri::dialogengine::UnitInfo<siri::dialogengine::Pressure>::UnitInfo((uint64_t)v72, (const char *)3, (__int128 *)v47, (__int128 *)v45, 1.33322368);
  v111[30] = 3;
  siri::dialogengine::UnitInfo<siri::dialogengine::Pressure>::UnitInfo((uint64_t)v112, (uint64_t)v72);
  std::string::basic_string[abi:ne180100]<0>(v43, "pounds per square inch");
  std::string::basic_string[abi:ne180100]<0>(v41, "");
  siri::dialogengine::UnitInfo<siri::dialogengine::Pressure>::UnitInfo((uint64_t)v63, (const char *)4, (__int128 *)v43, (__int128 *)v41, 68.9475729);
  v112[30] = 4;
  siri::dialogengine::UnitInfo<siri::dialogengine::Pressure>::UnitInfo((uint64_t)v113, (uint64_t)v63);
  v1 = 0;
  v2 = 0;
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)v0 = v0 + 8;
  v3 = (uint64_t *)(v0 + 8);
  while (1)
  {
    v4 = &v108[32 * v2];
    v5 = v0 + 8;
    if (v3 == (uint64_t *)(v0 + 8))
      goto LABEL_8;
    v6 = v1;
    v7 = v0 + 8;
    if (v1)
    {
      do
      {
        v5 = v6;
        v6 = *(_QWORD *)(v6 + 8);
      }
      while (v6);
    }
    else
    {
      do
      {
        v5 = *(_QWORD *)(v7 + 16);
        v8 = *(_QWORD *)v5 == v7;
        v7 = v5;
      }
      while (v8);
    }
    v9 = *v4;
    if (*(_DWORD *)(v5 + 32) < *v4)
    {
LABEL_8:
      v10 = (uint64_t *)(v1 ? v5 : v0 + 8);
      v11 = (uint64_t *)(v1 ? v5 + 8 : v0 + 8);
    }
    else
    {
      v10 = (uint64_t *)(v0 + 8);
      v11 = (uint64_t *)(v0 + 8);
      if (v1)
      {
        v11 = (uint64_t *)(v0 + 8);
        while (1)
        {
          while (1)
          {
            v10 = (uint64_t *)v1;
            v14 = *(_DWORD *)(v1 + 32);
            if (v9 >= v14)
              break;
            v1 = *v10;
            v11 = v10;
            if (!*v10)
              goto LABEL_15;
          }
          if (v14 >= v9)
            break;
          v11 = v10 + 1;
          v1 = v10[1];
          if (!v1)
            goto LABEL_15;
        }
      }
    }
    if (!*v11)
    {
LABEL_15:
      v12 = operator new(0xA0uLL);
      v61[0] = v12;
      v61[1] = v0 + 8;
      v62 = 0;
      v12[8] = *v4;
      siri::dialogengine::UnitInfo<siri::dialogengine::Pressure>::UnitInfo((uint64_t)(v12 + 10), (uint64_t)&v108[32 * v2 + 2]);
      v62 = 1;
      *(_QWORD *)v12 = 0;
      *((_QWORD *)v12 + 1) = 0;
      *((_QWORD *)v12 + 2) = v10;
      *v11 = (uint64_t)v12;
      v13 = **(_QWORD **)v0;
      if (v13)
      {
        *(_QWORD *)v0 = v13;
        v12 = (_DWORD *)*v11;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v0 + 8), (uint64_t *)v12);
      ++*(_QWORD *)(v0 + 16);
      v61[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<siri::dialogengine::Length,siri::dialogengine::UnitInfo<siri::dialogengine::Length>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<siri::dialogengine::Length,siri::dialogengine::UnitInfo<siri::dialogengine::Length>>,void *>>>>::reset[abi:ne180100]((uint64_t)v61);
    }
    if (++v2 == 5)
      break;
    v3 = *(uint64_t **)v0;
    v1 = *(_QWORD *)(v0 + 8);
  }
  siri::dialogengine::AllUnitInfo<siri::dialogengine::Pressure>(void)::sUnits = v0;
  v15 = 640;
  do
  {
    v16 = *(_BYTE **)&v108[v15 / 4 - 2];
    if (&v106[v15] == v16)
    {
      v16 = &v106[v15];
      v17 = 4;
    }
    else
    {
      if (!v16)
        goto LABEL_34;
      v17 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_34:
    v18 = *(_BYTE **)&v106[v15 - 8];
    if (&v104[v15] == v18)
    {
      v18 = &v104[v15];
      v19 = 4;
    }
    else
    {
      if (!v18)
        goto LABEL_39;
      v19 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_39:
    v20 = (void **)&v108[v15 / 4];
    if ((v104[v15 - 1] & 0x80000000) != 0)
      operator delete(*(v20 - 11));
    if (*((char *)v20 - 89) < 0)
      operator delete(v100[v15 / 8]);
    v15 -= 128;
  }
  while (v15);
  v21 = v71;
  if (v71 == v70)
  {
    v22 = 4;
    v21 = v70;
LABEL_48:
    (*(void (**)(void))(*v21 + 8 * v22))();
  }
  else if (v71)
  {
    v22 = 5;
    goto LABEL_48;
  }
  v23 = v69;
  if (v69 == v68)
  {
    v24 = 4;
    v23 = v68;
LABEL_53:
    (*(void (**)(void))(*v23 + 8 * v24))();
  }
  else if (v69)
  {
    v24 = 5;
    goto LABEL_53;
  }
  if (v67 < 0)
    operator delete(__p);
  if (v65 < 0)
    operator delete(v64);
  if (v42 < 0)
    operator delete(v41[0]);
  if (v44 < 0)
    operator delete(v43[0]);
  v25 = v80;
  if (v80 == v79)
  {
    v26 = 4;
    v25 = v79;
LABEL_66:
    (*(void (**)(void))(*v25 + 8 * v26))();
  }
  else if (v80)
  {
    v26 = 5;
    goto LABEL_66;
  }
  v27 = v78;
  if (v78 == v77)
  {
    v28 = 4;
    v27 = v77;
LABEL_71:
    (*(void (**)(void))(*v27 + 8 * v28))();
  }
  else if (v78)
  {
    v28 = 5;
    goto LABEL_71;
  }
  if (v76 < 0)
    operator delete(v75);
  if (v74 < 0)
    operator delete(v73);
  if (v46 < 0)
    operator delete(v45[0]);
  if (v48 < 0)
    operator delete(v47[0]);
  v29 = v89;
  if (v89 == v88)
  {
    v30 = 4;
    v29 = v88;
LABEL_84:
    (*(void (**)(void))(*v29 + 8 * v30))();
  }
  else if (v89)
  {
    v30 = 5;
    goto LABEL_84;
  }
  v31 = v87;
  if (v87 == v86)
  {
    v32 = 4;
    v31 = v86;
LABEL_89:
    (*(void (**)(void))(*v31 + 8 * v32))();
  }
  else if (v87)
  {
    v32 = 5;
    goto LABEL_89;
  }
  if (v85 < 0)
    operator delete(v84);
  if (v83 < 0)
    operator delete(v82);
  if (v50 < 0)
    operator delete(v49[0]);
  if (v52 < 0)
    operator delete(v51[0]);
  v33 = v98;
  if (v98 == v97)
  {
    v34 = 4;
    v33 = v97;
LABEL_102:
    (*(void (**)(void))(*v33 + 8 * v34))();
  }
  else if (v98)
  {
    v34 = 5;
    goto LABEL_102;
  }
  v35 = v96;
  if (v96 == v95)
  {
    v36 = 4;
    v35 = v95;
LABEL_107:
    (*(void (**)(void))(*v35 + 8 * v36))();
  }
  else if (v96)
  {
    v36 = 5;
    goto LABEL_107;
  }
  if (v94 < 0)
    operator delete(v93);
  if (v92 < 0)
    operator delete(v91);
  if (v54 < 0)
    operator delete(v53[0]);
  if (v56 < 0)
    operator delete(v55[0]);
  v37 = v107;
  if (v107 == v106)
  {
    v38 = 4;
    v37 = v106;
LABEL_120:
    (*(void (**)(void))(*v37 + 8 * v38))();
  }
  else if (v107)
  {
    v38 = 5;
    goto LABEL_120;
  }
  v39 = v105;
  if (v105 == v104)
  {
    v40 = 4;
    v39 = v104;
LABEL_125:
    (*(void (**)(void))(*v39 + 8 * v40))();
  }
  else if (v105)
  {
    v40 = 5;
    goto LABEL_125;
  }
  if (v103 < 0)
    operator delete(v102);
  if (v101 < 0)
    operator delete(v100[0]);
  if (v58 < 0)
    operator delete(v57[0]);
  if (v60 < 0)
    operator delete(v59[0]);
}

void sub_1BF878368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,void *a63)
{
  char a68;
  void *a72;
  char a73;
  void *__p;
  char a75;
  uint64_t a76;
  uint64_t a77;
  uint64_t a78;
  uint64_t a79;
  void *a80;
  char a81;
  void *a82;
  char a83;
  uint64_t a84;
  uint64_t a85;
  uint64_t a86;
  uint64_t a87;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  unint64_t *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  unint64_t *v99;
  uint64_t v100;
  unint64_t *v101;
  uint64_t v102;
  unint64_t *v103;
  uint64_t v104;
  unint64_t *v105;
  uint64_t v106;
  unint64_t *v107;
  uint64_t v108;
  unint64_t *v109;
  uint64_t v110;
  unint64_t *v111;
  uint64_t v112;
  unint64_t *v113;
  uint64_t v114;

  v90 = (uint64_t *)a79;
  if ((uint64_t *)a79 == &a78)
  {
    v91 = 4;
    v90 = &a78;
  }
  else
  {
    if (!a79)
      goto LABEL_6;
    v91 = 5;
  }
  (*(void (**)(void))(*v90 + 8 * v91))();
LABEL_6:
  v92 = (uint64_t *)a77;
  if ((uint64_t *)a77 == &a76)
  {
    v93 = 4;
    v92 = &a76;
  }
  else
  {
    if (!a77)
      goto LABEL_11;
    v93 = 5;
  }
  (*(void (**)(void))(*v92 + 8 * v93))();
LABEL_11:
  if (a75 < 0)
    operator delete(__p);
  if (a73 < 0)
    operator delete(a72);
  if (a14 < 0)
    operator delete(a9);
  if (a20 < 0)
    operator delete(a15);
  v94 = (unint64_t *)(v88 + 512);
  v95 = (uint64_t *)a87;
  if ((uint64_t *)a87 == &a86)
  {
    v96 = 4;
    v95 = &a86;
  }
  else
  {
    if (!a87)
      goto LABEL_24;
    v96 = 5;
  }
  (*(void (**)(void))(*v95 + 8 * v96))();
LABEL_24:
  v97 = (uint64_t *)a85;
  if ((uint64_t *)a85 == &a84)
  {
    v98 = 4;
    v97 = &a84;
  }
  else
  {
    if (!a85)
      goto LABEL_29;
    v98 = 5;
  }
  (*(void (**)(void))(*v97 + 8 * v98))();
LABEL_29:
  if (a83 < 0)
    operator delete(a82);
  if (a81 < 0)
    operator delete(a80);
  if (a26 < 0)
    operator delete(a21);
  if (a32 < 0)
    operator delete(a27);
  v99 = (unint64_t *)STACK[0x268];
  if ((unint64_t *)STACK[0x268] == &STACK[0x250])
  {
    v100 = 4;
    v99 = &STACK[0x250];
  }
  else
  {
    if (!v99)
      goto LABEL_42;
    v100 = 5;
  }
  (*(void (**)(void))(*v99 + 8 * v100))();
LABEL_42:
  v101 = (unint64_t *)STACK[0x248];
  if ((unint64_t *)STACK[0x248] == &STACK[0x230])
  {
    v102 = 4;
    v101 = &STACK[0x230];
  }
  else
  {
    if (!v101)
      goto LABEL_47;
    v102 = 5;
  }
  (*(void (**)(void))(*v101 + 8 * v102))();
LABEL_47:
  if (SLOBYTE(STACK[0x22F]) < 0)
    operator delete((void *)STACK[0x218]);
  if (SLOBYTE(STACK[0x217]) < 0)
    operator delete((void *)STACK[0x200]);
  if (a38 < 0)
    operator delete(a33);
  if (a44 < 0)
    operator delete(a39);
  v103 = (unint64_t *)STACK[0x2E0];
  if ((unint64_t *)STACK[0x2E0] == &STACK[0x2C8])
  {
    v104 = 4;
    v103 = &STACK[0x2C8];
  }
  else
  {
    if (!v103)
      goto LABEL_60;
    v104 = 5;
  }
  (*(void (**)(void))(*v103 + 8 * v104))();
LABEL_60:
  v105 = (unint64_t *)STACK[0x2C0];
  if ((unint64_t *)STACK[0x2C0] == &STACK[0x2A8])
  {
    v106 = 4;
    v105 = &STACK[0x2A8];
  }
  else
  {
    if (!v105)
      goto LABEL_65;
    v106 = 5;
  }
  (*(void (**)(void))(*v105 + 8 * v106))();
LABEL_65:
  if (SLOBYTE(STACK[0x2A7]) < 0)
    operator delete((void *)STACK[0x290]);
  if (SLOBYTE(STACK[0x28F]) < 0)
    operator delete((void *)STACK[0x278]);
  if (a50 < 0)
    operator delete(a45);
  if (a56 < 0)
    operator delete(a51);
  v107 = (unint64_t *)STACK[0x358];
  if ((unint64_t *)STACK[0x358] == &STACK[0x340])
  {
    v108 = 4;
    v107 = &STACK[0x340];
  }
  else
  {
    if (!v107)
      goto LABEL_78;
    v108 = 5;
  }
  (*(void (**)(void))(*v107 + 8 * v108))();
LABEL_78:
  v109 = (unint64_t *)STACK[0x338];
  if ((unint64_t *)STACK[0x338] == &STACK[0x320])
  {
    v110 = 4;
    v109 = &STACK[0x320];
  }
  else
  {
    if (!v109)
      goto LABEL_83;
    v110 = 5;
  }
  (*(void (**)(void))(*v109 + 8 * v110))();
LABEL_83:
  if (SLOBYTE(STACK[0x31F]) < 0)
    operator delete((void *)STACK[0x308]);
  if (SLOBYTE(STACK[0x307]) < 0)
    operator delete((void *)STACK[0x2F0]);
  if (a62 < 0)
    operator delete(a57);
  if (a68 < 0)
    operator delete(a63);
  if (&STACK[0x360] == v94)
  {
LABEL_107:
    MEMORY[0x1C3B8D890](v87, 0x1020C4062D53EE8);
    _Unwind_Resume(a1);
  }
  while (1)
  {
    v111 = (unint64_t *)*(v94 - 1);
    if (v94 - 4 == v111)
    {
      v111 = v94 - 4;
      v112 = 4;
    }
    else
    {
      if (!v111)
        goto LABEL_97;
      v112 = 5;
    }
    (*(void (**)(void))(*v111 + 8 * v112))();
LABEL_97:
    v113 = (unint64_t *)*(v94 - 5);
    if (v94 - 8 == v113)
    {
      v113 = v94 - 8;
      v114 = 4;
      goto LABEL_101;
    }
    if (v113)
    {
      v114 = 5;
LABEL_101:
      (*(void (**)(void))(*v113 + 8 * v114))();
    }
    if (*((char *)v94 - 65) < 0)
      operator delete((void *)*(v94 - 11));
    if (*((char *)v94 - 89) < 0)
      operator delete((void *)*(v94 - 14));
    v94 -= 16;
    if (v94 == &STACK[0x360])
      goto LABEL_107;
  }
}

uint64_t siri::dialogengine::UnitInfo<siri::dialogengine::Pressure>::UnitInfo(uint64_t a1, const char *a2, __int128 *a3, __int128 *a4, double a5)
{
  __int128 v8;
  __int128 v9;
  uint64_t (***v10)();
  uint64_t v11;
  uint64_t (***v12)();
  uint64_t v13;
  uint64_t (**v15)();
  double v16;
  uint64_t (***v17)();
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)a1 = (_DWORD)a2;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v8 = *a3;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 8) = v8;
  }
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v9 = *a4;
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a4 + 2);
    *(_OWORD *)(a1 + 32) = v9;
  }
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  if (a5 == 0.0)
  {
    a5 = 1.0;
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Invalid unit conversion factor; Replacing with 1.0 for safety",
      a2);
  }
  v15 = &off_1E792AFC0;
  v16 = a5;
  v17 = &v15;
  std::__function::__value_func<double ()(double)>::swap[abi:ne180100](&v15, (_QWORD *)(a1 + 56));
  v10 = v17;
  if (v17 == &v15)
  {
    v11 = 4;
    v10 = &v15;
  }
  else
  {
    if (!v17)
      goto LABEL_14;
    v11 = 5;
  }
  (*v10)[v11]();
LABEL_14:
  v15 = &off_1E792B040;
  v16 = a5;
  v17 = &v15;
  std::__function::__value_func<double ()(double)>::swap[abi:ne180100](&v15, (_QWORD *)(a1 + 88));
  v12 = v17;
  if (v17 == &v15)
  {
    v13 = 4;
    v12 = &v15;
    goto LABEL_18;
  }
  if (v17)
  {
    v13 = 5;
LABEL_18:
    (*v12)[v13]();
  }
  return a1;
}

void sub_1BF878AB4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::UnitInfo<siri::dialogengine::Pressure>::UnitInfo(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v5;
  }
  std::__function::__value_func<BOOL ()(std::vector<std::string> const&,google::protobuf::Field const*)>::__value_func[abi:ne180100](a1 + 56, a2 + 56);
  std::__function::__value_func<BOOL ()(std::vector<std::string> const&,google::protobuf::Field const*)>::__value_func[abi:ne180100](a1 + 88, a2 + 88);
  return a1;
}

void sub_1BF878C00(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 + 31) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Pressure>::UnitInfo(siri::dialogengine::Pressure,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Pressure>::UnitInfo(siri::dialogengine::Pressure,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::~__func()
{
  JUMPOUT(0x1C3B8D890);
}

_QWORD *std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Pressure>::UnitInfo(siri::dialogengine::Pressure,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Pressure>::UnitInfo(siri::dialogengine::Pressure,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E792B040;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Pressure>::UnitInfo(siri::dialogengine::Pressure,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Pressure>::UnitInfo(siri::dialogengine::Pressure,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E792B040;
  a2[1] = v2;
  return result;
}

double std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Pressure>::UnitInfo(siri::dialogengine::Pressure,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Pressure>::UnitInfo(siri::dialogengine::Pressure,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::operator()(uint64_t a1, double *a2)
{
  return *a2 / *(double *)(a1 + 8);
}

uint64_t std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Pressure>::UnitInfo(siri::dialogengine::Pressure,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Pressure>::UnitInfo(siri::dialogengine::Pressure,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Pressure>::UnitInfo(siri::dialogengine::Pressure,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Pressure>::UnitInfo(siri::dialogengine::Pressure,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::target_type()
{
}

void std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Pressure>::UnitInfo(siri::dialogengine::Pressure,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Pressure>::UnitInfo(siri::dialogengine::Pressure,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::~__func()
{
  JUMPOUT(0x1C3B8D890);
}

_QWORD *std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Pressure>::UnitInfo(siri::dialogengine::Pressure,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Pressure>::UnitInfo(siri::dialogengine::Pressure,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E792AFC0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Pressure>::UnitInfo(siri::dialogengine::Pressure,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Pressure>::UnitInfo(siri::dialogengine::Pressure,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E792AFC0;
  a2[1] = v2;
  return result;
}

double std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Pressure>::UnitInfo(siri::dialogengine::Pressure,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Pressure>::UnitInfo(siri::dialogengine::Pressure,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::operator()(uint64_t a1, double *a2)
{
  return *a2 * *(double *)(a1 + 8);
}

uint64_t std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Pressure>::UnitInfo(siri::dialogengine::Pressure,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Pressure>::UnitInfo(siri::dialogengine::Pressure,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Pressure>::UnitInfo(siri::dialogengine::Pressure,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Pressure>::UnitInfo(siri::dialogengine::Pressure,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::target_type()
{
}

uint64_t siri::dialogengine::ParseUnitLabel<siri::dialogengine::Pressure>(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v4;
  void **v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  uint64_t v15;
  void *__p[2];
  unsigned __int8 v18;

  siri::dialogengine::StringToLower(a1, (uint64_t)__p);
  v1 = (_QWORD *)siri::dialogengine::AllUnitInfo<siri::dialogengine::Pressure>();
  v2 = v1 + 1;
  v3 = (_QWORD *)*v1;
  if ((_QWORD *)*v1 != v1 + 1)
  {
    if ((v18 & 0x80u) == 0)
      v4 = v18;
    else
      v4 = (unint64_t)__p[1];
    if ((v18 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    while (1)
    {
      v6 = *((unsigned __int8 *)v3 + 71);
      if ((v6 & 0x80u) == 0)
        v7 = (void *)*((unsigned __int8 *)v3 + 71);
      else
        v7 = (void *)v3[7];
      if (v7 == (void *)v4)
      {
        if ((v6 & 0x80) != 0)
        {
          if (!memcmp((const void *)v3[6], v5, v3[7]))
            break;
        }
        else
        {
          if (!*((_BYTE *)v3 + 71))
            break;
          v8 = 0;
          while (*((unsigned __int8 *)v3 + v8 + 48) == *((unsigned __int8 *)v5 + v8))
          {
            if (v6 == ++v8)
              goto LABEL_41;
          }
        }
      }
      v9 = *((unsigned __int8 *)v3 + 95);
      if (*((char *)v3 + 95) < 0)
      {
        if (v3[10])
        {
LABEL_23:
          if ((v9 & 0x80u) == 0)
            v10 = (void *)*((unsigned __int8 *)v3 + 95);
          else
            v10 = (void *)v3[10];
          if (v10 == (void *)v4)
          {
            if ((v9 & 0x80) != 0)
            {
              if (!memcmp((const void *)v3[9], v5, v3[10]))
                break;
            }
            else
            {
              if (!*((_BYTE *)v3 + 95))
                break;
              v11 = 0;
              while (*((unsigned __int8 *)v3 + v11 + 72) == *((unsigned __int8 *)v5 + v11))
              {
                if (v9 == ++v11)
                  goto LABEL_41;
              }
            }
          }
        }
      }
      else if (*((_BYTE *)v3 + 95))
      {
        goto LABEL_23;
      }
      v12 = (_QWORD *)v3[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v3[2];
          v14 = *v13 == (_QWORD)v3;
          v3 = v13;
        }
        while (!v14);
      }
      v3 = v13;
      if (v13 == v2)
        goto LABEL_43;
    }
  }
LABEL_41:
  if (v3 == v2)
LABEL_43:
    v15 = 0xFFFFFFFFLL;
  else
    v15 = *((unsigned int *)v3 + 10);
  if ((char)v18 < 0)
    operator delete(__p[0]);
  return v15;
}

{
  return __ZN4siri12dialogengine14ParseUnitLabelINS0_8PressureEEET_RKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE(a1);
}

void sub_1BF878F84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::CanConvertUnitValue<siri::dialogengine::Pressure>(uint64_t a1, const char *a2)
{
  const char *v4;
  const char *v5;

  if ((_DWORD)a1 == -1 || (_DWORD)a2 == -1)
  {
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Either fromUnit or toUnit is invalid", a2);
  }
  else if (siri::dialogengine::FindUnitInfo<siri::dialogengine::Pressure>(a1))
  {
    if (siri::dialogengine::FindUnitInfo<siri::dialogengine::Pressure>((int)a2))
      return 1;
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Internal error? Failed to find UnitInfo for toUnit: %d", v5, a2);
  }
  else
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Internal error? Failed to find UnitInfo for fromUnit: %d", v4, a1);
  }
  return 0;
}

{
  return __ZN4siri12dialogengine19CanConvertUnitValueINS0_8PressureEEEbT_S3_(a1, a2);
}

double siri::dialogengine::ConvertUnitValue<siri::dialogengine::Pressure>(uint64_t a1, const char *a2, double a3)
{
  double v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  double v12;
  _QWORD *v13;
  _QWORD *v14;
  double v16;

  if ((_DWORD)a1 == (_DWORD)a2)
    return a3;
  v5 = (int)a2;
  v6 = a1;
  v4 = 0.0;
  if (siri::dialogengine::CanConvertUnitValue<siri::dialogengine::Pressure>(a1, a2))
  {
    v7 = siri::dialogengine::FindUnitInfo<siri::dialogengine::Pressure>(v6);
    v8 = siri::dialogengine::FindUnitInfo<siri::dialogengine::Pressure>(v5);
    v16 = a3;
    v9 = *(_QWORD *)(v7 + 80);
    if (!v9
      || (v16 = (*(double (**)(uint64_t, double *))(*(_QWORD *)v9 + 48))(v9, &v16),
          (v10 = *(_QWORD *)(v8 + 112)) == 0))
    {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    v12 = (*(double (**)(uint64_t, double *))(*(_QWORD *)v10 + 48))(v10, &v16);
    v4 = v12;
    v13 = (_QWORD *)(v7 + 8);
    if (*(char *)(v7 + 31) < 0)
      v13 = (_QWORD *)*v13;
    v14 = (_QWORD *)(v8 + 8);
    if (*(char *)(v8 + 31) < 0)
      v14 = (_QWORD *)*v14;
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"%f in %s was converted to %f in %s", v11, *(_QWORD *)&a3, v13, *(_QWORD *)&v12, v14);
  }
  return v4;
}

{
  return __ZN4siri12dialogengine16ConvertUnitValueINS0_8PressureEEEddT_S3_(a1, a2, a3);
}

void siri::dialogengine::GetUnitLabel<siri::dialogengine::Area>(int a1@<W0>, std::string *a2@<X8>)
{
  uint64_t v3;
  __int128 v4;

  v3 = siri::dialogengine::FindUnitInfo<siri::dialogengine::Area>(a1);
  if (v3)
  {
    if (*(char *)(v3 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v3 + 8), *(_QWORD *)(v3 + 16));
    }
    else
    {
      v4 = *(_OWORD *)(v3 + 8);
      a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v3 + 24);
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v4;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "");
  }
}

uint64_t siri::dialogengine::FindUnitInfo<siri::dialogengine::Area>(int a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;

  v2 = siri::dialogengine::AllUnitInfo<siri::dialogengine::Area>();
  v5 = *(_QWORD *)(v2 + 8);
  v3 = v2 + 8;
  v4 = v5;
  if (!v5)
    return 0;
  v6 = v3;
  do
  {
    v7 = *(_DWORD *)(v4 + 32);
    v8 = v7 < a1;
    if (v7 >= a1)
      v9 = (uint64_t *)v4;
    else
      v9 = (uint64_t *)(v4 + 8);
    if (!v8)
      v6 = v4;
    v4 = *v9;
  }
  while (*v9);
  if (v6 == v3)
    return 0;
  v10 = *(_DWORD *)(v6 + 32);
  v11 = v6 + 40;
  if (v10 <= a1)
    return v11;
  else
    return 0;
}

uint64_t siri::dialogengine::AllUnitInfo<siri::dialogengine::Area>()
{
  unsigned __int8 v0;
  unint64_t v1;
  _QWORD *v3;
  char v4;
  char **v5;
  char *v6;

  if ((v0 & 1) == 0
  {
    v3 = (_QWORD *)operator new();
    *v3 = 0;
    siri::dialogengine::AllUnitInfo<siri::dialogengine::Area>(void)::flag = (uint64_t)v3;
  }
  v1 = atomic_load((unint64_t *)siri::dialogengine::AllUnitInfo<siri::dialogengine::Area>(void)::flag);
  if (v1 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once((std::once_flag::_State_type *)siri::dialogengine::AllUnitInfo<siri::dialogengine::Area>(void)::flag, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::UnitInfoMap<siri::dialogengine::Area>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Area>(void)::$_0 &&>>);
  }
  return siri::dialogengine::AllUnitInfo<siri::dialogengine::Area>(void)::sUnits;
}

void sub_1BF879290(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::UnitInfoMap<siri::dialogengine::Area>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Area>(void)::$_0 &&>>()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  uint64_t *v10;
  uint64_t *v11;
  _DWORD *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  void **v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  void *v45[2];
  char v46;
  void *v47[2];
  char v48;
  void *v49[2];
  char v50;
  void *v51[2];
  char v52;
  void *v53[2];
  char v54;
  void *v55[2];
  char v56;
  void *v57[2];
  char v58;
  void *v59[2];
  char v60;
  void *v61[2];
  char v62;
  void *v63[2];
  char v64;
  void *v65[2];
  char v66;
  void *v67[2];
  char v68;
  _QWORD v69[2];
  char v70;
  char v71[8];
  void *v72;
  char v73;
  void *__p;
  char v75;
  _BYTE v76[24];
  _BYTE *v77;
  _BYTE v78[24];
  _BYTE *v79;
  char v80[8];
  void *v81;
  char v82;
  void *v83;
  char v84;
  _BYTE v85[24];
  _BYTE *v86;
  _BYTE v87[24];
  _BYTE *v88;
  char v89[8];
  void *v90;
  char v91;
  void *v92;
  char v93;
  _BYTE v94[24];
  _BYTE *v95;
  _BYTE v96[24];
  _BYTE *v97;
  char v98[8];
  void *v99;
  char v100;
  void *v101;
  char v102;
  _BYTE v103[24];
  _BYTE *v104;
  _BYTE v105[24];
  _BYTE *v106;
  char v107[8];
  void *v108;
  char v109;
  void *v110;
  char v111;
  _BYTE v112[24];
  _BYTE *v113;
  _BYTE v114[24];
  _BYTE *v115;
  char v116[8];
  void *v117[2];
  char v118;
  void *v119;
  char v120;
  _BYTE v121[24];
  _BYTE *v122;
  _BYTE v123[24];
  _BYTE *v124;
  _DWORD v125[2];
  _DWORD v126[32];
  _DWORD v127[32];
  _DWORD v128[32];
  _DWORD v129[32];
  _DWORD v130[32];
  _QWORD v131[17];

  v131[15] = *MEMORY[0x1E0C80C00];
  v0 = operator new();
  std::string::basic_string[abi:ne180100]<0>(v67, "acres");
  std::string::basic_string[abi:ne180100]<0>(v65, "");
  siri::dialogengine::UnitInfo<siri::dialogengine::Area>::UnitInfo((uint64_t)v116, 0, (__int128 *)v67, (__int128 *)v65, 4046.85642);
  v125[0] = 0;
  siri::dialogengine::UnitInfo<siri::dialogengine::Area>::UnitInfo((uint64_t)v126, (uint64_t)v116);
  std::string::basic_string[abi:ne180100]<0>(v63, "hectares");
  std::string::basic_string[abi:ne180100]<0>(v61, "");
  siri::dialogengine::UnitInfo<siri::dialogengine::Area>::UnitInfo((uint64_t)v107, (const char *)1, (__int128 *)v63, (__int128 *)v61, 10000.0);
  v126[30] = 1;
  siri::dialogengine::UnitInfo<siri::dialogengine::Area>::UnitInfo((uint64_t)v127, (uint64_t)v107);
  std::string::basic_string[abi:ne180100]<0>(v59, "square feet");
  std::string::basic_string[abi:ne180100]<0>(v57, "");
  siri::dialogengine::UnitInfo<siri::dialogengine::Area>::UnitInfo((uint64_t)v98, (const char *)2, (__int128 *)v59, (__int128 *)v57, 0.092903);
  v127[30] = 2;
  siri::dialogengine::UnitInfo<siri::dialogengine::Area>::UnitInfo((uint64_t)v128, (uint64_t)v98);
  std::string::basic_string[abi:ne180100]<0>(v55, "square miles");
  std::string::basic_string[abi:ne180100]<0>(v53, "");
  siri::dialogengine::UnitInfo<siri::dialogengine::Area>::UnitInfo((uint64_t)v89, (const char *)5, (__int128 *)v55, (__int128 *)v53, 2589988.11);
  v128[30] = 5;
  siri::dialogengine::UnitInfo<siri::dialogengine::Area>::UnitInfo((uint64_t)v129, (uint64_t)v89);
  std::string::basic_string[abi:ne180100]<0>(v51, "square meters");
  std::string::basic_string[abi:ne180100]<0>(v49, "");
  siri::dialogengine::UnitInfo<siri::dialogengine::Area>::UnitInfo((uint64_t)v80, (const char *)4, (__int128 *)v51, (__int128 *)v49, 1.0);
  v129[30] = 4;
  siri::dialogengine::UnitInfo<siri::dialogengine::Area>::UnitInfo((uint64_t)v130, (uint64_t)v80);
  std::string::basic_string[abi:ne180100]<0>(v47, "square kilometers");
  std::string::basic_string[abi:ne180100]<0>(v45, "");
  siri::dialogengine::UnitInfo<siri::dialogengine::Area>::UnitInfo((uint64_t)v71, (const char *)3, (__int128 *)v47, (__int128 *)v45, 1000000.0);
  v130[30] = 3;
  siri::dialogengine::UnitInfo<siri::dialogengine::Area>::UnitInfo((uint64_t)v131, (uint64_t)v71);
  v1 = 0;
  v2 = 0;
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)v0 = v0 + 8;
  v3 = (uint64_t *)(v0 + 8);
  while (1)
  {
    v4 = &v125[32 * v2];
    v5 = v0 + 8;
    if (v3 == (uint64_t *)(v0 + 8))
      goto LABEL_8;
    v6 = v1;
    v7 = v0 + 8;
    if (v1)
    {
      do
      {
        v5 = v6;
        v6 = *(_QWORD *)(v6 + 8);
      }
      while (v6);
    }
    else
    {
      do
      {
        v5 = *(_QWORD *)(v7 + 16);
        v8 = *(_QWORD *)v5 == v7;
        v7 = v5;
      }
      while (v8);
    }
    v9 = *v4;
    if (*(_DWORD *)(v5 + 32) < *v4)
    {
LABEL_8:
      v10 = (uint64_t *)(v1 ? v5 : v0 + 8);
      v11 = (uint64_t *)(v1 ? v5 + 8 : v0 + 8);
    }
    else
    {
      v10 = (uint64_t *)(v0 + 8);
      v11 = (uint64_t *)(v0 + 8);
      if (v1)
      {
        v11 = (uint64_t *)(v0 + 8);
        while (1)
        {
          while (1)
          {
            v10 = (uint64_t *)v1;
            v14 = *(_DWORD *)(v1 + 32);
            if (v9 >= v14)
              break;
            v1 = *v10;
            v11 = v10;
            if (!*v10)
              goto LABEL_15;
          }
          if (v14 >= v9)
            break;
          v11 = v10 + 1;
          v1 = v10[1];
          if (!v1)
            goto LABEL_15;
        }
      }
    }
    if (!*v11)
    {
LABEL_15:
      v12 = operator new(0xA0uLL);
      v69[0] = v12;
      v69[1] = v0 + 8;
      v70 = 0;
      v12[8] = *v4;
      siri::dialogengine::UnitInfo<siri::dialogengine::Area>::UnitInfo((uint64_t)(v12 + 10), (uint64_t)&v125[32 * v2 + 2]);
      v70 = 1;
      *(_QWORD *)v12 = 0;
      *((_QWORD *)v12 + 1) = 0;
      *((_QWORD *)v12 + 2) = v10;
      *v11 = (uint64_t)v12;
      v13 = **(_QWORD **)v0;
      if (v13)
      {
        *(_QWORD *)v0 = v13;
        v12 = (_DWORD *)*v11;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v0 + 8), (uint64_t *)v12);
      ++*(_QWORD *)(v0 + 16);
      v69[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<siri::dialogengine::Length,siri::dialogengine::UnitInfo<siri::dialogengine::Length>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<siri::dialogengine::Length,siri::dialogengine::UnitInfo<siri::dialogengine::Length>>,void *>>>>::reset[abi:ne180100]((uint64_t)v69);
    }
    if (++v2 == 6)
      break;
    v3 = *(uint64_t **)v0;
    v1 = *(_QWORD *)(v0 + 8);
  }
  siri::dialogengine::AllUnitInfo<siri::dialogengine::Area>(void)::sUnits = v0;
  v15 = 768;
  do
  {
    v16 = *(_BYTE **)&v125[v15 / 4 - 2];
    if (&v123[v15] == v16)
    {
      v16 = &v123[v15];
      v17 = 4;
    }
    else
    {
      if (!v16)
        goto LABEL_34;
      v17 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_34:
    v18 = *(_BYTE **)&v123[v15 - 8];
    if (&v121[v15] == v18)
    {
      v18 = &v121[v15];
      v19 = 4;
    }
    else
    {
      if (!v18)
        goto LABEL_39;
      v19 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_39:
    v20 = (void **)&v125[v15 / 4];
    if ((v121[v15 - 1] & 0x80000000) != 0)
      operator delete(*(v20 - 11));
    if (*((char *)v20 - 89) < 0)
      operator delete(v117[v15 / 8]);
    v15 -= 128;
  }
  while (v15);
  v21 = v79;
  if (v79 == v78)
  {
    v22 = 4;
    v21 = v78;
LABEL_48:
    (*(void (**)(void))(*v21 + 8 * v22))();
  }
  else if (v79)
  {
    v22 = 5;
    goto LABEL_48;
  }
  v23 = v77;
  if (v77 == v76)
  {
    v24 = 4;
    v23 = v76;
LABEL_53:
    (*(void (**)(void))(*v23 + 8 * v24))();
  }
  else if (v77)
  {
    v24 = 5;
    goto LABEL_53;
  }
  if (v75 < 0)
    operator delete(__p);
  if (v73 < 0)
    operator delete(v72);
  if (v46 < 0)
    operator delete(v45[0]);
  if (v48 < 0)
    operator delete(v47[0]);
  v25 = v88;
  if (v88 == v87)
  {
    v26 = 4;
    v25 = v87;
LABEL_66:
    (*(void (**)(void))(*v25 + 8 * v26))();
  }
  else if (v88)
  {
    v26 = 5;
    goto LABEL_66;
  }
  v27 = v86;
  if (v86 == v85)
  {
    v28 = 4;
    v27 = v85;
LABEL_71:
    (*(void (**)(void))(*v27 + 8 * v28))();
  }
  else if (v86)
  {
    v28 = 5;
    goto LABEL_71;
  }
  if (v84 < 0)
    operator delete(v83);
  if (v82 < 0)
    operator delete(v81);
  if (v50 < 0)
    operator delete(v49[0]);
  if (v52 < 0)
    operator delete(v51[0]);
  v29 = v97;
  if (v97 == v96)
  {
    v30 = 4;
    v29 = v96;
LABEL_84:
    (*(void (**)(void))(*v29 + 8 * v30))();
  }
  else if (v97)
  {
    v30 = 5;
    goto LABEL_84;
  }
  v31 = v95;
  if (v95 == v94)
  {
    v32 = 4;
    v31 = v94;
LABEL_89:
    (*(void (**)(void))(*v31 + 8 * v32))();
  }
  else if (v95)
  {
    v32 = 5;
    goto LABEL_89;
  }
  if (v93 < 0)
    operator delete(v92);
  if (v91 < 0)
    operator delete(v90);
  if (v54 < 0)
    operator delete(v53[0]);
  if (v56 < 0)
    operator delete(v55[0]);
  v33 = v106;
  if (v106 == v105)
  {
    v34 = 4;
    v33 = v105;
LABEL_102:
    (*(void (**)(void))(*v33 + 8 * v34))();
  }
  else if (v106)
  {
    v34 = 5;
    goto LABEL_102;
  }
  v35 = v104;
  if (v104 == v103)
  {
    v36 = 4;
    v35 = v103;
LABEL_107:
    (*(void (**)(void))(*v35 + 8 * v36))();
  }
  else if (v104)
  {
    v36 = 5;
    goto LABEL_107;
  }
  if (v102 < 0)
    operator delete(v101);
  if (v100 < 0)
    operator delete(v99);
  if (v58 < 0)
    operator delete(v57[0]);
  if (v60 < 0)
    operator delete(v59[0]);
  v37 = v115;
  if (v115 == v114)
  {
    v38 = 4;
    v37 = v114;
LABEL_120:
    (*(void (**)(void))(*v37 + 8 * v38))();
  }
  else if (v115)
  {
    v38 = 5;
    goto LABEL_120;
  }
  v39 = v113;
  if (v113 == v112)
  {
    v40 = 4;
    v39 = v112;
LABEL_125:
    (*(void (**)(void))(*v39 + 8 * v40))();
  }
  else if (v113)
  {
    v40 = 5;
    goto LABEL_125;
  }
  if (v111 < 0)
    operator delete(v110);
  if (v109 < 0)
    operator delete(v108);
  if (v62 < 0)
    operator delete(v61[0]);
  if (v64 < 0)
    operator delete(v63[0]);
  v41 = v124;
  if (v124 == v123)
  {
    v42 = 4;
    v41 = v123;
LABEL_138:
    (*(void (**)(void))(*v41 + 8 * v42))();
  }
  else if (v124)
  {
    v42 = 5;
    goto LABEL_138;
  }
  v43 = v122;
  if (v122 == v121)
  {
    v44 = 4;
    v43 = v121;
LABEL_143:
    (*(void (**)(void))(*v43 + 8 * v44))();
  }
  else if (v122)
  {
    v44 = 5;
    goto LABEL_143;
  }
  if (v120 < 0)
    operator delete(v119);
  if (v118 < 0)
    operator delete(v117[0]);
  if (v66 < 0)
    operator delete(v65[0]);
  if (v68 < 0)
    operator delete(v67[0]);
}

void sub_1BF879B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  void *a64;
  char a69;
  void *a70;
  char a72;
  void *a73;
  char a74;
  void *a75;
  char a76;
  void *__p;
  char a78;
  uint64_t a79;
  uint64_t a80;
  uint64_t a81;
  uint64_t a82;
  void *a83;
  char a84;
  void *a85;
  char a86;
  uint64_t a87;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  unint64_t *v94;
  unint64_t *v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  unint64_t *v99;
  uint64_t v100;
  unint64_t *v101;
  uint64_t v102;
  unint64_t *v103;
  uint64_t v104;
  unint64_t *v105;
  uint64_t v106;
  unint64_t *v107;
  uint64_t v108;
  unint64_t *v109;
  uint64_t v110;
  unint64_t *v111;
  uint64_t v112;
  unint64_t *v113;
  uint64_t v114;
  unint64_t *v115;
  uint64_t v116;
  unint64_t *v117;
  uint64_t v118;

  v90 = (uint64_t *)a82;
  if ((uint64_t *)a82 == &a81)
  {
    v91 = 4;
    v90 = &a81;
  }
  else
  {
    if (!a82)
      goto LABEL_6;
    v91 = 5;
  }
  (*(void (**)(void))(*v90 + 8 * v91))();
LABEL_6:
  v92 = (uint64_t *)a80;
  if ((uint64_t *)a80 == &a79)
  {
    v93 = 4;
    v92 = &a79;
  }
  else
  {
    if (!a80)
      goto LABEL_11;
    v93 = 5;
  }
  (*(void (**)(void))(*v92 + 8 * v93))();
LABEL_11:
  if (a78 < 0)
    operator delete(__p);
  if (a76 < 0)
    operator delete(a75);
  if (a15 < 0)
    operator delete(a10);
  if (a21 < 0)
    operator delete(a16);
  v94 = (unint64_t *)(v88 + 640);
  v95 = (unint64_t *)STACK[0x228];
  if ((unint64_t *)STACK[0x228] == &STACK[0x210])
  {
    v96 = 4;
    v95 = &STACK[0x210];
  }
  else
  {
    if (!v95)
      goto LABEL_24;
    v96 = 5;
  }
  (*(void (**)(void))(*v95 + 8 * v96))();
LABEL_24:
  v97 = (uint64_t *)STACK[0x208];
  if ((uint64_t *)STACK[0x208] == &a87)
  {
    v98 = 4;
    v97 = &a87;
  }
  else
  {
    if (!v97)
      goto LABEL_29;
    v98 = 5;
  }
  (*(void (**)(void))(*v97 + 8 * v98))();
LABEL_29:
  if (a86 < 0)
    operator delete(a85);
  if (a84 < 0)
    operator delete(a83);
  if (a27 < 0)
    operator delete(a22);
  if (a33 < 0)
    operator delete(a28);
  v99 = (unint64_t *)STACK[0x2A0];
  if ((unint64_t *)STACK[0x2A0] == &STACK[0x288])
  {
    v100 = 4;
    v99 = &STACK[0x288];
  }
  else
  {
    if (!v99)
      goto LABEL_42;
    v100 = 5;
  }
  (*(void (**)(void))(*v99 + 8 * v100))();
LABEL_42:
  v101 = (unint64_t *)STACK[0x280];
  if ((unint64_t *)STACK[0x280] == &STACK[0x268])
  {
    v102 = 4;
    v101 = &STACK[0x268];
  }
  else
  {
    if (!v101)
      goto LABEL_47;
    v102 = 5;
  }
  (*(void (**)(void))(*v101 + 8 * v102))();
LABEL_47:
  if (SLOBYTE(STACK[0x267]) < 0)
    operator delete((void *)STACK[0x250]);
  if (SLOBYTE(STACK[0x24F]) < 0)
    operator delete((void *)STACK[0x238]);
  if (a39 < 0)
    operator delete(a34);
  if (a45 < 0)
    operator delete(a40);
  v103 = (unint64_t *)STACK[0x318];
  if ((unint64_t *)STACK[0x318] == &STACK[0x300])
  {
    v104 = 4;
    v103 = &STACK[0x300];
  }
  else
  {
    if (!v103)
      goto LABEL_60;
    v104 = 5;
  }
  (*(void (**)(void))(*v103 + 8 * v104))();
LABEL_60:
  v105 = (unint64_t *)STACK[0x2F8];
  if ((unint64_t *)STACK[0x2F8] == &STACK[0x2E0])
  {
    v106 = 4;
    v105 = &STACK[0x2E0];
  }
  else
  {
    if (!v105)
      goto LABEL_65;
    v106 = 5;
  }
  (*(void (**)(void))(*v105 + 8 * v106))();
LABEL_65:
  if (SLOBYTE(STACK[0x2DF]) < 0)
    operator delete((void *)STACK[0x2C8]);
  if (SLOBYTE(STACK[0x2C7]) < 0)
    operator delete((void *)STACK[0x2B0]);
  if (a51 < 0)
    operator delete(a46);
  if (a57 < 0)
    operator delete(a52);
  v107 = (unint64_t *)STACK[0x390];
  if ((unint64_t *)STACK[0x390] == &STACK[0x378])
  {
    v108 = 4;
    v107 = &STACK[0x378];
  }
  else
  {
    if (!v107)
      goto LABEL_78;
    v108 = 5;
  }
  (*(void (**)(void))(*v107 + 8 * v108))();
LABEL_78:
  v109 = (unint64_t *)STACK[0x370];
  if ((unint64_t *)STACK[0x370] == &STACK[0x358])
  {
    v110 = 4;
    v109 = &STACK[0x358];
  }
  else
  {
    if (!v109)
      goto LABEL_83;
    v110 = 5;
  }
  (*(void (**)(void))(*v109 + 8 * v110))();
LABEL_83:
  if (SLOBYTE(STACK[0x357]) < 0)
    operator delete((void *)STACK[0x340]);
  if (SLOBYTE(STACK[0x33F]) < 0)
    operator delete((void *)STACK[0x328]);
  if (a63 < 0)
    operator delete(a58);
  if (a69 < 0)
    operator delete(a64);
  v111 = (unint64_t *)STACK[0x408];
  if ((unint64_t *)STACK[0x408] == &STACK[0x3F0])
  {
    v112 = 4;
    v111 = &STACK[0x3F0];
  }
  else
  {
    if (!v111)
      goto LABEL_96;
    v112 = 5;
  }
  (*(void (**)(void))(*v111 + 8 * v112))();
LABEL_96:
  v113 = (unint64_t *)STACK[0x3E8];
  if ((unint64_t *)STACK[0x3E8] == &STACK[0x3D0])
  {
    v114 = 4;
    v113 = &STACK[0x3D0];
  }
  else
  {
    if (!v113)
      goto LABEL_101;
    v114 = 5;
  }
  (*(void (**)(void))(*v113 + 8 * v114))();
LABEL_101:
  if (SLOBYTE(STACK[0x3CF]) < 0)
    operator delete((void *)STACK[0x3B8]);
  if (SLOBYTE(STACK[0x3B7]) < 0)
    operator delete((void *)STACK[0x3A0]);
  if (a72 < 0)
    operator delete(a70);
  if (a74 < 0)
    operator delete(a73);
  if (&STACK[0x410] == v94)
  {
LABEL_125:
    MEMORY[0x1C3B8D890](v87, 0x1020C4062D53EE8);
    _Unwind_Resume(a1);
  }
  while (1)
  {
    v115 = (unint64_t *)*(v94 - 1);
    if (v94 - 4 == v115)
    {
      v115 = v94 - 4;
      v116 = 4;
    }
    else
    {
      if (!v115)
        goto LABEL_115;
      v116 = 5;
    }
    (*(void (**)(void))(*v115 + 8 * v116))();
LABEL_115:
    v117 = (unint64_t *)*(v94 - 5);
    if (v94 - 8 == v117)
    {
      v117 = v94 - 8;
      v118 = 4;
      goto LABEL_119;
    }
    if (v117)
    {
      v118 = 5;
LABEL_119:
      (*(void (**)(void))(*v117 + 8 * v118))();
    }
    if (*((char *)v94 - 65) < 0)
      operator delete((void *)*(v94 - 11));
    if (*((char *)v94 - 89) < 0)
      operator delete((void *)*(v94 - 14));
    v94 -= 16;
    if (v94 == &STACK[0x410])
      goto LABEL_125;
  }
}

uint64_t siri::dialogengine::UnitInfo<siri::dialogengine::Area>::UnitInfo(uint64_t a1, const char *a2, __int128 *a3, __int128 *a4, double a5)
{
  __int128 v8;
  __int128 v9;
  uint64_t (***v10)();
  uint64_t v11;
  uint64_t (***v12)();
  uint64_t v13;
  uint64_t (**v15)();
  double v16;
  uint64_t (***v17)();
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)a1 = (_DWORD)a2;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v8 = *a3;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 8) = v8;
  }
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v9 = *a4;
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a4 + 2);
    *(_OWORD *)(a1 + 32) = v9;
  }
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  if (a5 == 0.0)
  {
    a5 = 1.0;
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Invalid unit conversion factor; Replacing with 1.0 for safety",
      a2);
  }
  v15 = &off_1E792B0C0;
  v16 = a5;
  v17 = &v15;
  std::__function::__value_func<double ()(double)>::swap[abi:ne180100](&v15, (_QWORD *)(a1 + 56));
  v10 = v17;
  if (v17 == &v15)
  {
    v11 = 4;
    v10 = &v15;
  }
  else
  {
    if (!v17)
      goto LABEL_14;
    v11 = 5;
  }
  (*v10)[v11]();
LABEL_14:
  v15 = &off_1E792B140;
  v16 = a5;
  v17 = &v15;
  std::__function::__value_func<double ()(double)>::swap[abi:ne180100](&v15, (_QWORD *)(a1 + 88));
  v12 = v17;
  if (v17 == &v15)
  {
    v13 = 4;
    v12 = &v15;
    goto LABEL_18;
  }
  if (v17)
  {
    v13 = 5;
LABEL_18:
    (*v12)[v13]();
  }
  return a1;
}

void sub_1BF87A33C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::UnitInfo<siri::dialogengine::Area>::UnitInfo(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v5;
  }
  std::__function::__value_func<BOOL ()(std::vector<std::string> const&,google::protobuf::Field const*)>::__value_func[abi:ne180100](a1 + 56, a2 + 56);
  std::__function::__value_func<BOOL ()(std::vector<std::string> const&,google::protobuf::Field const*)>::__value_func[abi:ne180100](a1 + 88, a2 + 88);
  return a1;
}

void sub_1BF87A488(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 + 31) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Area>::UnitInfo(siri::dialogengine::Area,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Area>::UnitInfo(siri::dialogengine::Area,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::~__func()
{
  JUMPOUT(0x1C3B8D890);
}

_QWORD *std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Area>::UnitInfo(siri::dialogengine::Area,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Area>::UnitInfo(siri::dialogengine::Area,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E792B140;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Area>::UnitInfo(siri::dialogengine::Area,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Area>::UnitInfo(siri::dialogengine::Area,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E792B140;
  a2[1] = v2;
  return result;
}

double std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Area>::UnitInfo(siri::dialogengine::Area,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Area>::UnitInfo(siri::dialogengine::Area,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::operator()(uint64_t a1, double *a2)
{
  return *a2 / *(double *)(a1 + 8);
}

uint64_t std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Area>::UnitInfo(siri::dialogengine::Area,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Area>::UnitInfo(siri::dialogengine::Area,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Area>::UnitInfo(siri::dialogengine::Area,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Area>::UnitInfo(siri::dialogengine::Area,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::target_type()
{
}

void std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Area>::UnitInfo(siri::dialogengine::Area,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Area>::UnitInfo(siri::dialogengine::Area,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::~__func()
{
  JUMPOUT(0x1C3B8D890);
}

_QWORD *std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Area>::UnitInfo(siri::dialogengine::Area,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Area>::UnitInfo(siri::dialogengine::Area,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E792B0C0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Area>::UnitInfo(siri::dialogengine::Area,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Area>::UnitInfo(siri::dialogengine::Area,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E792B0C0;
  a2[1] = v2;
  return result;
}

double std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Area>::UnitInfo(siri::dialogengine::Area,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Area>::UnitInfo(siri::dialogengine::Area,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::operator()(uint64_t a1, double *a2)
{
  return *a2 * *(double *)(a1 + 8);
}

uint64_t std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Area>::UnitInfo(siri::dialogengine::Area,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Area>::UnitInfo(siri::dialogengine::Area,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Area>::UnitInfo(siri::dialogengine::Area,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Area>::UnitInfo(siri::dialogengine::Area,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::target_type()
{
}

uint64_t siri::dialogengine::ParseUnitLabel<siri::dialogengine::Area>(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v4;
  void **v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  uint64_t v15;
  void *__p[2];
  unsigned __int8 v18;

  siri::dialogengine::StringToLower(a1, (uint64_t)__p);
  v1 = (_QWORD *)siri::dialogengine::AllUnitInfo<siri::dialogengine::Area>();
  v2 = v1 + 1;
  v3 = (_QWORD *)*v1;
  if ((_QWORD *)*v1 != v1 + 1)
  {
    if ((v18 & 0x80u) == 0)
      v4 = v18;
    else
      v4 = (unint64_t)__p[1];
    if ((v18 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    while (1)
    {
      v6 = *((unsigned __int8 *)v3 + 71);
      if ((v6 & 0x80u) == 0)
        v7 = (void *)*((unsigned __int8 *)v3 + 71);
      else
        v7 = (void *)v3[7];
      if (v7 == (void *)v4)
      {
        if ((v6 & 0x80) != 0)
        {
          if (!memcmp((const void *)v3[6], v5, v3[7]))
            break;
        }
        else
        {
          if (!*((_BYTE *)v3 + 71))
            break;
          v8 = 0;
          while (*((unsigned __int8 *)v3 + v8 + 48) == *((unsigned __int8 *)v5 + v8))
          {
            if (v6 == ++v8)
              goto LABEL_41;
          }
        }
      }
      v9 = *((unsigned __int8 *)v3 + 95);
      if (*((char *)v3 + 95) < 0)
      {
        if (v3[10])
        {
LABEL_23:
          if ((v9 & 0x80u) == 0)
            v10 = (void *)*((unsigned __int8 *)v3 + 95);
          else
            v10 = (void *)v3[10];
          if (v10 == (void *)v4)
          {
            if ((v9 & 0x80) != 0)
            {
              if (!memcmp((const void *)v3[9], v5, v3[10]))
                break;
            }
            else
            {
              if (!*((_BYTE *)v3 + 95))
                break;
              v11 = 0;
              while (*((unsigned __int8 *)v3 + v11 + 72) == *((unsigned __int8 *)v5 + v11))
              {
                if (v9 == ++v11)
                  goto LABEL_41;
              }
            }
          }
        }
      }
      else if (*((_BYTE *)v3 + 95))
      {
        goto LABEL_23;
      }
      v12 = (_QWORD *)v3[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v3[2];
          v14 = *v13 == (_QWORD)v3;
          v3 = v13;
        }
        while (!v14);
      }
      v3 = v13;
      if (v13 == v2)
        goto LABEL_43;
    }
  }
LABEL_41:
  if (v3 == v2)
LABEL_43:
    v15 = 0xFFFFFFFFLL;
  else
    v15 = *((unsigned int *)v3 + 10);
  if ((char)v18 < 0)
    operator delete(__p[0]);
  return v15;
}

{
  return __ZN4siri12dialogengine14ParseUnitLabelINS0_4AreaEEET_RKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE(a1);
}

void sub_1BF87A80C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::CanConvertUnitValue<siri::dialogengine::Area>(uint64_t a1, const char *a2)
{
  const char *v4;
  const char *v5;

  if ((_DWORD)a1 == -1 || (_DWORD)a2 == -1)
  {
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Either fromUnit or toUnit is invalid", a2);
  }
  else if (siri::dialogengine::FindUnitInfo<siri::dialogengine::Area>(a1))
  {
    if (siri::dialogengine::FindUnitInfo<siri::dialogengine::Area>((int)a2))
      return 1;
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Internal error? Failed to find UnitInfo for toUnit: %d", v5, a2);
  }
  else
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Internal error? Failed to find UnitInfo for fromUnit: %d", v4, a1);
  }
  return 0;
}

{
  return __ZN4siri12dialogengine19CanConvertUnitValueINS0_4AreaEEEbT_S3_(a1, a2);
}

double siri::dialogengine::ConvertUnitValue<siri::dialogengine::Area>(uint64_t a1, const char *a2, double a3)
{
  double v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  double v12;
  _QWORD *v13;
  _QWORD *v14;
  double v16;

  if ((_DWORD)a1 == (_DWORD)a2)
    return a3;
  v5 = (int)a2;
  v6 = a1;
  v4 = 0.0;
  if (siri::dialogengine::CanConvertUnitValue<siri::dialogengine::Area>(a1, a2))
  {
    v7 = siri::dialogengine::FindUnitInfo<siri::dialogengine::Area>(v6);
    v8 = siri::dialogengine::FindUnitInfo<siri::dialogengine::Area>(v5);
    v16 = a3;
    v9 = *(_QWORD *)(v7 + 80);
    if (!v9
      || (v16 = (*(double (**)(uint64_t, double *))(*(_QWORD *)v9 + 48))(v9, &v16),
          (v10 = *(_QWORD *)(v8 + 112)) == 0))
    {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    v12 = (*(double (**)(uint64_t, double *))(*(_QWORD *)v10 + 48))(v10, &v16);
    v4 = v12;
    v13 = (_QWORD *)(v7 + 8);
    if (*(char *)(v7 + 31) < 0)
      v13 = (_QWORD *)*v13;
    v14 = (_QWORD *)(v8 + 8);
    if (*(char *)(v8 + 31) < 0)
      v14 = (_QWORD *)*v14;
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"%f in %s was converted to %f in %s", v11, *(_QWORD *)&a3, v13, *(_QWORD *)&v12, v14);
  }
  return v4;
}

{
  return __ZN4siri12dialogengine16ConvertUnitValueINS0_4AreaEEEddT_S3_(a1, a2, a3);
}

void siri::dialogengine::GetUnitLabel<siri::dialogengine::Density>(int a1@<W0>, std::string *a2@<X8>)
{
  uint64_t v3;
  __int128 v4;

  v3 = siri::dialogengine::FindUnitInfo<siri::dialogengine::Density>(a1);
  if (v3)
  {
    if (*(char *)(v3 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v3 + 8), *(_QWORD *)(v3 + 16));
    }
    else
    {
      v4 = *(_OWORD *)(v3 + 8);
      a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v3 + 24);
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v4;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "");
  }
}

uint64_t siri::dialogengine::FindUnitInfo<siri::dialogengine::Density>(int a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;

  v2 = siri::dialogengine::AllUnitInfo<siri::dialogengine::Density>();
  v5 = *(_QWORD *)(v2 + 8);
  v3 = v2 + 8;
  v4 = v5;
  if (!v5)
    return 0;
  v6 = v3;
  do
  {
    v7 = *(_DWORD *)(v4 + 32);
    v8 = v7 < a1;
    if (v7 >= a1)
      v9 = (uint64_t *)v4;
    else
      v9 = (uint64_t *)(v4 + 8);
    if (!v8)
      v6 = v4;
    v4 = *v9;
  }
  while (*v9);
  if (v6 == v3)
    return 0;
  v10 = *(_DWORD *)(v6 + 32);
  v11 = v6 + 40;
  if (v10 <= a1)
    return v11;
  else
    return 0;
}

uint64_t siri::dialogengine::AllUnitInfo<siri::dialogengine::Density>()
{
  unsigned __int8 v0;
  unint64_t v1;
  _QWORD *v3;
  char v4;
  char **v5;
  char *v6;

  if ((v0 & 1) == 0
  {
    v3 = (_QWORD *)operator new();
    *v3 = 0;
    siri::dialogengine::AllUnitInfo<siri::dialogengine::Density>(void)::flag = (uint64_t)v3;
  }
  v1 = atomic_load((unint64_t *)siri::dialogengine::AllUnitInfo<siri::dialogengine::Density>(void)::flag);
  if (v1 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once((std::once_flag::_State_type *)siri::dialogengine::AllUnitInfo<siri::dialogengine::Density>(void)::flag, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::UnitInfoMap<siri::dialogengine::Density>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Density>(void)::$_0 &&>>);
  }
  return siri::dialogengine::AllUnitInfo<siri::dialogengine::Density>(void)::sUnits;
}

void sub_1BF87AB18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::UnitInfoMap<siri::dialogengine::Density>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Density>(void)::$_0 &&>>()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  uint64_t *v10;
  uint64_t *v11;
  _DWORD *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  void **v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  void *v29[2];
  char v30;
  void *v31[2];
  char v32;
  void *v33[2];
  char v34;
  void *v35[2];
  char v36;
  _QWORD v37[2];
  char v38;
  char v39[8];
  void *v40;
  char v41;
  void *__p;
  char v43;
  _BYTE v44[24];
  _BYTE *v45;
  _BYTE v46[24];
  _BYTE *v47;
  char v48[8];
  void *v49;
  char v50;
  void *v51;
  char v52;
  _BYTE v53[24];
  _BYTE *v54;
  _BYTE v55[24];
  _BYTE *v56;
  _DWORD v57[2];
  _DWORD v58[32];
  _QWORD v59[17];

  v59[15] = *MEMORY[0x1E0C80C00];
  v0 = operator new();
  std::string::basic_string[abi:ne180100]<0>(v35, "kilograms per cubic meter");
  std::string::basic_string[abi:ne180100]<0>(v33, "");
  siri::dialogengine::UnitInfo<siri::dialogengine::Density>::UnitInfo((uint64_t)v48, (const char *)1, (__int128 *)v35, (__int128 *)v33, 0.001);
  v57[0] = 1;
  siri::dialogengine::UnitInfo<siri::dialogengine::Density>::UnitInfo((uint64_t)v58, (uint64_t)v48);
  std::string::basic_string[abi:ne180100]<0>(v31, "grams per cubic centimeter");
  std::string::basic_string[abi:ne180100]<0>(v29, "");
  siri::dialogengine::UnitInfo<siri::dialogengine::Density>::UnitInfo((uint64_t)v39, 0, (__int128 *)v31, (__int128 *)v29, 1.0);
  v58[30] = 0;
  siri::dialogengine::UnitInfo<siri::dialogengine::Density>::UnitInfo((uint64_t)v59, (uint64_t)v39);
  v1 = 0;
  v2 = 0;
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)v0 = v0 + 8;
  v3 = (uint64_t *)(v0 + 8);
  while (1)
  {
    v4 = &v57[32 * v2];
    v5 = v0 + 8;
    if (v3 == (uint64_t *)(v0 + 8))
      goto LABEL_8;
    v6 = v1;
    v7 = v0 + 8;
    if (v1)
    {
      do
      {
        v5 = v6;
        v6 = *(_QWORD *)(v6 + 8);
      }
      while (v6);
    }
    else
    {
      do
      {
        v5 = *(_QWORD *)(v7 + 16);
        v8 = *(_QWORD *)v5 == v7;
        v7 = v5;
      }
      while (v8);
    }
    v9 = *v4;
    if (*(_DWORD *)(v5 + 32) < *v4)
    {
LABEL_8:
      v10 = (uint64_t *)(v1 ? v5 : v0 + 8);
      v11 = (uint64_t *)(v1 ? v5 + 8 : v0 + 8);
    }
    else
    {
      v10 = (uint64_t *)(v0 + 8);
      v11 = (uint64_t *)(v0 + 8);
      if (v1)
      {
        v11 = (uint64_t *)(v0 + 8);
        while (1)
        {
          while (1)
          {
            v10 = (uint64_t *)v1;
            v14 = *(_DWORD *)(v1 + 32);
            if (v9 >= v14)
              break;
            v1 = *v10;
            v11 = v10;
            if (!*v10)
              goto LABEL_15;
          }
          if (v14 >= v9)
            break;
          v11 = v10 + 1;
          v1 = v10[1];
          if (!v1)
            goto LABEL_15;
        }
      }
    }
    if (!*v11)
    {
LABEL_15:
      v12 = operator new(0xA0uLL);
      v37[0] = v12;
      v37[1] = v0 + 8;
      v38 = 0;
      v12[8] = *v4;
      siri::dialogengine::UnitInfo<siri::dialogengine::Density>::UnitInfo((uint64_t)(v12 + 10), (uint64_t)&v57[32 * v2 + 2]);
      v38 = 1;
      *(_QWORD *)v12 = 0;
      *((_QWORD *)v12 + 1) = 0;
      *((_QWORD *)v12 + 2) = v10;
      *v11 = (uint64_t)v12;
      v13 = **(_QWORD **)v0;
      if (v13)
      {
        *(_QWORD *)v0 = v13;
        v12 = (_DWORD *)*v11;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v0 + 8), (uint64_t *)v12);
      ++*(_QWORD *)(v0 + 16);
      v37[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<siri::dialogengine::Length,siri::dialogengine::UnitInfo<siri::dialogengine::Length>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<siri::dialogengine::Length,siri::dialogengine::UnitInfo<siri::dialogengine::Length>>,void *>>>>::reset[abi:ne180100]((uint64_t)v37);
    }
    if (++v2 == 2)
      break;
    v3 = *(uint64_t **)v0;
    v1 = *(_QWORD *)(v0 + 8);
  }
  v15 = 0;
  siri::dialogengine::AllUnitInfo<siri::dialogengine::Density>(void)::sUnits = v0;
  do
  {
    v16 = (_QWORD *)v59[v15 / 8 + 14];
    if (&v59[v15 / 8 + 11] == v16)
    {
      v16 = &v59[v15 / 8 + 11];
      v17 = 4;
    }
    else
    {
      if (!v16)
        goto LABEL_34;
      v17 = 5;
    }
    (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_34:
    v18 = (_QWORD *)v59[v15 / 8 + 10];
    if (&v59[v15 / 8 + 7] == v18)
    {
      v18 = &v59[v15 / 8 + 7];
      v19 = 4;
    }
    else
    {
      if (!v18)
        goto LABEL_39;
      v19 = 5;
    }
    (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_39:
    v20 = (void **)&v57[v15 / 4];
    if (SHIBYTE(v59[v15 / 8 + 6]) < 0)
      operator delete(v20[21]);
    if (*((char *)v20 + 167) < 0)
      operator delete((void *)v59[v15 / 8 + 1]);
    v15 -= 128;
  }
  while (v15 != -256);
  v21 = v47;
  if (v47 == v46)
  {
    v22 = 4;
    v21 = v46;
LABEL_48:
    (*(void (**)(void))(*v21 + 8 * v22))();
  }
  else if (v47)
  {
    v22 = 5;
    goto LABEL_48;
  }
  v23 = v45;
  if (v45 == v44)
  {
    v24 = 4;
    v23 = v44;
LABEL_53:
    (*(void (**)(void))(*v23 + 8 * v24))();
  }
  else if (v45)
  {
    v24 = 5;
    goto LABEL_53;
  }
  if (v43 < 0)
    operator delete(__p);
  if (v41 < 0)
    operator delete(v40);
  if (v30 < 0)
    operator delete(v29[0]);
  if (v32 < 0)
    operator delete(v31[0]);
  v25 = v56;
  if (v56 == v55)
  {
    v26 = 4;
    v25 = v55;
LABEL_66:
    (*(void (**)(void))(*v25 + 8 * v26))();
  }
  else if (v56)
  {
    v26 = 5;
    goto LABEL_66;
  }
  v27 = v54;
  if (v54 == v53)
  {
    v28 = 4;
    v27 = v53;
LABEL_71:
    (*(void (**)(void))(*v27 + 8 * v28))();
  }
  else if (v54)
  {
    v28 = 5;
    goto LABEL_71;
  }
  if (v52 < 0)
    operator delete(v51);
  if (v50 < 0)
    operator delete(v49);
  if (v34 < 0)
    operator delete(v33[0]);
  if (v36 < 0)
    operator delete(v35[0]);
}

void sub_1BF87AFAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  void *a65;
  char a70;
  uint64_t a71;
  uint64_t a72;
  uint64_t a73;
  uint64_t a74;
  char a75;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  char *v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;

  v78 = (uint64_t *)a57;
  if ((uint64_t *)a57 == &a54)
  {
    v79 = 4;
    v78 = &a54;
  }
  else
  {
    if (!a57)
      goto LABEL_6;
    v79 = 5;
  }
  (*(void (**)(void))(*v78 + 8 * v79))();
LABEL_6:
  v80 = (uint64_t *)a53;
  if ((uint64_t *)a53 == &a50)
  {
    v81 = 4;
    v80 = &a50;
  }
  else
  {
    if (!a53)
      goto LABEL_11;
    v81 = 5;
  }
  (*(void (**)(void))(*v80 + 8 * v81))();
LABEL_11:
  if (a49 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a15 < 0)
    operator delete(a10);
  if (a21 < 0)
    operator delete(a16);
  v82 = (char *)(v76 + 128);
  v83 = (uint64_t *)a74;
  if ((uint64_t *)a74 == &a73)
  {
    v84 = 4;
    v83 = &a73;
  }
  else
  {
    if (!a74)
      goto LABEL_24;
    v84 = 5;
  }
  (*(void (**)(void))(*v83 + 8 * v84))();
LABEL_24:
  v85 = (uint64_t *)a72;
  if ((uint64_t *)a72 == &a71)
  {
    v86 = 4;
    v85 = &a71;
  }
  else
  {
    if (!a72)
      goto LABEL_29;
    v86 = 5;
  }
  (*(void (**)(void))(*v85 + 8 * v86))();
LABEL_29:
  if (a70 < 0)
    operator delete(a65);
  if (a64 < 0)
    operator delete(a59);
  if (a27 < 0)
    operator delete(a22);
  if (a33 < 0)
    operator delete(a28);
  if (&a75 == v82)
  {
LABEL_53:
    MEMORY[0x1C3B8D890](v75, 0x1020C4062D53EE8);
    _Unwind_Resume(a1);
  }
  while (1)
  {
    v87 = (char *)*((_QWORD *)v82 - 1);
    if (v82 - 32 == v87)
    {
      v87 = v82 - 32;
      v88 = 4;
    }
    else
    {
      if (!v87)
        goto LABEL_43;
      v88 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v87 + 8 * v88))();
LABEL_43:
    v89 = (char *)*((_QWORD *)v82 - 5);
    if (v82 - 64 == v89)
    {
      v89 = v82 - 64;
      v90 = 4;
      goto LABEL_47;
    }
    if (v89)
    {
      v90 = 5;
LABEL_47:
      (*(void (**)(void))(*(_QWORD *)v89 + 8 * v90))();
    }
    if (*(v82 - 65) < 0)
      operator delete(*((void **)v82 - 11));
    if (*(v82 - 89) < 0)
      operator delete(*((void **)v82 - 14));
    v82 -= 128;
    if (v82 == &a75)
      goto LABEL_53;
  }
}

uint64_t siri::dialogengine::UnitInfo<siri::dialogengine::Density>::UnitInfo(uint64_t a1, const char *a2, __int128 *a3, __int128 *a4, double a5)
{
  __int128 v8;
  __int128 v9;
  uint64_t (***v10)();
  uint64_t v11;
  uint64_t (***v12)();
  uint64_t v13;
  uint64_t (**v15)();
  double v16;
  uint64_t (***v17)();
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)a1 = (_DWORD)a2;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v8 = *a3;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 8) = v8;
  }
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v9 = *a4;
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a4 + 2);
    *(_OWORD *)(a1 + 32) = v9;
  }
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  if (a5 == 0.0)
  {
    a5 = 1.0;
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Invalid unit conversion factor; Replacing with 1.0 for safety",
      a2);
  }
  v15 = &off_1E792B1C0;
  v16 = a5;
  v17 = &v15;
  std::__function::__value_func<double ()(double)>::swap[abi:ne180100](&v15, (_QWORD *)(a1 + 56));
  v10 = v17;
  if (v17 == &v15)
  {
    v11 = 4;
    v10 = &v15;
  }
  else
  {
    if (!v17)
      goto LABEL_14;
    v11 = 5;
  }
  (*v10)[v11]();
LABEL_14:
  v15 = &off_1E792B240;
  v16 = a5;
  v17 = &v15;
  std::__function::__value_func<double ()(double)>::swap[abi:ne180100](&v15, (_QWORD *)(a1 + 88));
  v12 = v17;
  if (v17 == &v15)
  {
    v13 = 4;
    v12 = &v15;
    goto LABEL_18;
  }
  if (v17)
  {
    v13 = 5;
LABEL_18:
    (*v12)[v13]();
  }
  return a1;
}

void sub_1BF87B484(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::UnitInfo<siri::dialogengine::Density>::UnitInfo(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v5;
  }
  std::__function::__value_func<BOOL ()(std::vector<std::string> const&,google::protobuf::Field const*)>::__value_func[abi:ne180100](a1 + 56, a2 + 56);
  std::__function::__value_func<BOOL ()(std::vector<std::string> const&,google::protobuf::Field const*)>::__value_func[abi:ne180100](a1 + 88, a2 + 88);
  return a1;
}

void sub_1BF87B5D0(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 + 31) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Density>::UnitInfo(siri::dialogengine::Density,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Density>::UnitInfo(siri::dialogengine::Density,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::~__func()
{
  JUMPOUT(0x1C3B8D890);
}

_QWORD *std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Density>::UnitInfo(siri::dialogengine::Density,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Density>::UnitInfo(siri::dialogengine::Density,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E792B240;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Density>::UnitInfo(siri::dialogengine::Density,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Density>::UnitInfo(siri::dialogengine::Density,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E792B240;
  a2[1] = v2;
  return result;
}

double std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Density>::UnitInfo(siri::dialogengine::Density,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Density>::UnitInfo(siri::dialogengine::Density,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::operator()(uint64_t a1, double *a2)
{
  return *a2 / *(double *)(a1 + 8);
}

uint64_t std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Density>::UnitInfo(siri::dialogengine::Density,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Density>::UnitInfo(siri::dialogengine::Density,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Density>::UnitInfo(siri::dialogengine::Density,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Density>::UnitInfo(siri::dialogengine::Density,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::target_type()
{
}

void std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Density>::UnitInfo(siri::dialogengine::Density,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Density>::UnitInfo(siri::dialogengine::Density,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::~__func()
{
  JUMPOUT(0x1C3B8D890);
}

_QWORD *std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Density>::UnitInfo(siri::dialogengine::Density,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Density>::UnitInfo(siri::dialogengine::Density,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E792B1C0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Density>::UnitInfo(siri::dialogengine::Density,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Density>::UnitInfo(siri::dialogengine::Density,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E792B1C0;
  a2[1] = v2;
  return result;
}

double std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Density>::UnitInfo(siri::dialogengine::Density,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Density>::UnitInfo(siri::dialogengine::Density,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::operator()(uint64_t a1, double *a2)
{
  return *a2 * *(double *)(a1 + 8);
}

uint64_t std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Density>::UnitInfo(siri::dialogengine::Density,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Density>::UnitInfo(siri::dialogengine::Density,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Density>::UnitInfo(siri::dialogengine::Density,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Density>::UnitInfo(siri::dialogengine::Density,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::target_type()
{
}

uint64_t siri::dialogengine::ParseUnitLabel<siri::dialogengine::Density>(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v4;
  void **v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  uint64_t v15;
  void *__p[2];
  unsigned __int8 v18;

  siri::dialogengine::StringToLower(a1, (uint64_t)__p);
  v1 = (_QWORD *)siri::dialogengine::AllUnitInfo<siri::dialogengine::Density>();
  v2 = v1 + 1;
  v3 = (_QWORD *)*v1;
  if ((_QWORD *)*v1 != v1 + 1)
  {
    if ((v18 & 0x80u) == 0)
      v4 = v18;
    else
      v4 = (unint64_t)__p[1];
    if ((v18 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    while (1)
    {
      v6 = *((unsigned __int8 *)v3 + 71);
      if ((v6 & 0x80u) == 0)
        v7 = (void *)*((unsigned __int8 *)v3 + 71);
      else
        v7 = (void *)v3[7];
      if (v7 == (void *)v4)
      {
        if ((v6 & 0x80) != 0)
        {
          if (!memcmp((const void *)v3[6], v5, v3[7]))
            break;
        }
        else
        {
          if (!*((_BYTE *)v3 + 71))
            break;
          v8 = 0;
          while (*((unsigned __int8 *)v3 + v8 + 48) == *((unsigned __int8 *)v5 + v8))
          {
            if (v6 == ++v8)
              goto LABEL_41;
          }
        }
      }
      v9 = *((unsigned __int8 *)v3 + 95);
      if (*((char *)v3 + 95) < 0)
      {
        if (v3[10])
        {
LABEL_23:
          if ((v9 & 0x80u) == 0)
            v10 = (void *)*((unsigned __int8 *)v3 + 95);
          else
            v10 = (void *)v3[10];
          if (v10 == (void *)v4)
          {
            if ((v9 & 0x80) != 0)
            {
              if (!memcmp((const void *)v3[9], v5, v3[10]))
                break;
            }
            else
            {
              if (!*((_BYTE *)v3 + 95))
                break;
              v11 = 0;
              while (*((unsigned __int8 *)v3 + v11 + 72) == *((unsigned __int8 *)v5 + v11))
              {
                if (v9 == ++v11)
                  goto LABEL_41;
              }
            }
          }
        }
      }
      else if (*((_BYTE *)v3 + 95))
      {
        goto LABEL_23;
      }
      v12 = (_QWORD *)v3[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v3[2];
          v14 = *v13 == (_QWORD)v3;
          v3 = v13;
        }
        while (!v14);
      }
      v3 = v13;
      if (v13 == v2)
        goto LABEL_43;
    }
  }
LABEL_41:
  if (v3 == v2)
LABEL_43:
    v15 = 0xFFFFFFFFLL;
  else
    v15 = *((unsigned int *)v3 + 10);
  if ((char)v18 < 0)
    operator delete(__p[0]);
  return v15;
}

{
  return __ZN4siri12dialogengine14ParseUnitLabelINS0_7DensityEEET_RKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE(a1);
}

void sub_1BF87B954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::CanConvertUnitValue<siri::dialogengine::Density>(uint64_t a1, const char *a2)
{
  const char *v4;
  const char *v5;

  if ((_DWORD)a1 == -1 || (_DWORD)a2 == -1)
  {
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Either fromUnit or toUnit is invalid", a2);
  }
  else if (siri::dialogengine::FindUnitInfo<siri::dialogengine::Density>(a1))
  {
    if (siri::dialogengine::FindUnitInfo<siri::dialogengine::Density>((int)a2))
      return 1;
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Internal error? Failed to find UnitInfo for toUnit: %d", v5, a2);
  }
  else
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Internal error? Failed to find UnitInfo for fromUnit: %d", v4, a1);
  }
  return 0;
}

{
  return __ZN4siri12dialogengine19CanConvertUnitValueINS0_7DensityEEEbT_S3_(a1, a2);
}

double siri::dialogengine::ConvertUnitValue<siri::dialogengine::Density>(uint64_t a1, const char *a2, double a3)
{
  double v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  double v12;
  _QWORD *v13;
  _QWORD *v14;
  double v16;

  if ((_DWORD)a1 == (_DWORD)a2)
    return a3;
  v5 = (int)a2;
  v6 = a1;
  v4 = 0.0;
  if (siri::dialogengine::CanConvertUnitValue<siri::dialogengine::Density>(a1, a2))
  {
    v7 = siri::dialogengine::FindUnitInfo<siri::dialogengine::Density>(v6);
    v8 = siri::dialogengine::FindUnitInfo<siri::dialogengine::Density>(v5);
    v16 = a3;
    v9 = *(_QWORD *)(v7 + 80);
    if (!v9
      || (v16 = (*(double (**)(uint64_t, double *))(*(_QWORD *)v9 + 48))(v9, &v16),
          (v10 = *(_QWORD *)(v8 + 112)) == 0))
    {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    v12 = (*(double (**)(uint64_t, double *))(*(_QWORD *)v10 + 48))(v10, &v16);
    v4 = v12;
    v13 = (_QWORD *)(v7 + 8);
    if (*(char *)(v7 + 31) < 0)
      v13 = (_QWORD *)*v13;
    v14 = (_QWORD *)(v8 + 8);
    if (*(char *)(v8 + 31) < 0)
      v14 = (_QWORD *)*v14;
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"%f in %s was converted to %f in %s", v11, *(_QWORD *)&a3, v13, *(_QWORD *)&v12, v14);
  }
  return v4;
}

{
  return __ZN4siri12dialogengine16ConvertUnitValueINS0_7DensityEEEddT_S3_(a1, a2, a3);
}

void siri::dialogengine::GetUnitLabel<siri::dialogengine::Weight>(int a1@<W0>, std::string *a2@<X8>)
{
  uint64_t v3;
  __int128 v4;

  v3 = siri::dialogengine::FindUnitInfo<siri::dialogengine::Weight>(a1);
  if (v3)
  {
    if (*(char *)(v3 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v3 + 8), *(_QWORD *)(v3 + 16));
    }
    else
    {
      v4 = *(_OWORD *)(v3 + 8);
      a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v3 + 24);
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v4;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "");
  }
}

uint64_t siri::dialogengine::FindUnitInfo<siri::dialogengine::Weight>(int a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;

  v2 = siri::dialogengine::AllUnitInfo<siri::dialogengine::Weight>();
  v5 = *(_QWORD *)(v2 + 8);
  v3 = v2 + 8;
  v4 = v5;
  if (!v5)
    return 0;
  v6 = v3;
  do
  {
    v7 = *(_DWORD *)(v4 + 32);
    v8 = v7 < a1;
    if (v7 >= a1)
      v9 = (uint64_t *)v4;
    else
      v9 = (uint64_t *)(v4 + 8);
    if (!v8)
      v6 = v4;
    v4 = *v9;
  }
  while (*v9);
  if (v6 == v3)
    return 0;
  v10 = *(_DWORD *)(v6 + 32);
  v11 = v6 + 40;
  if (v10 <= a1)
    return v11;
  else
    return 0;
}

uint64_t siri::dialogengine::AllUnitInfo<siri::dialogengine::Weight>()
{
  unsigned __int8 v0;
  unint64_t v1;
  _QWORD *v3;
  char v4;
  char **v5;
  char *v6;

  if ((v0 & 1) == 0
  {
    v3 = (_QWORD *)operator new();
    *v3 = 0;
    siri::dialogengine::AllUnitInfo<siri::dialogengine::Weight>(void)::flag = (uint64_t)v3;
  }
  v1 = atomic_load((unint64_t *)siri::dialogengine::AllUnitInfo<siri::dialogengine::Weight>(void)::flag);
  if (v1 != -1)
  {
    v6 = &v4;
    v5 = &v6;
    std::__call_once((std::once_flag::_State_type *)siri::dialogengine::AllUnitInfo<siri::dialogengine::Weight>(void)::flag, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::UnitInfoMap<siri::dialogengine::Weight>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Weight>(void)::$_0 &&>>);
  }
  return siri::dialogengine::AllUnitInfo<siri::dialogengine::Weight>(void)::sUnits;
}

void sub_1BF87BC60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::UnitInfoMap<siri::dialogengine::Weight>::type const& siri::dialogengine::AllUnitInfo<siri::dialogengine::Weight>(void)::$_0 &&>>()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  uint64_t *v10;
  uint64_t *v11;
  _DWORD *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  void **v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  void *v65[2];
  char v66;
  void *v67[2];
  char v68;
  void *v69[2];
  char v70;
  void *v71[2];
  char v72;
  void *v73[2];
  char v74;
  void *v75[2];
  char v76;
  void *v77[2];
  char v78;
  void *v79[2];
  char v80;
  void *v81[2];
  char v82;
  void *v83[2];
  char v84;
  void *v85[2];
  char v86;
  void *v87[2];
  char v88;
  void *v89[2];
  char v90;
  void *v91[2];
  char v92;
  void *v93[2];
  char v94;
  void *v95[2];
  char v96;
  void *v97[2];
  char v98;
  void *v99[2];
  char v100;
  void *v101[2];
  char v102;
  void *v103[2];
  char v104;
  void *v105[2];
  char v106;
  void *v107[2];
  char v108;
  _QWORD v109[2];
  char v110;
  char v111[8];
  void *v112;
  char v113;
  void *__p;
  char v115;
  _BYTE v116[24];
  _BYTE *v117;
  _BYTE v118[24];
  _BYTE *v119;
  char v120[8];
  void *v121;
  char v122;
  void *v123;
  char v124;
  _BYTE v125[24];
  _BYTE *v126;
  _BYTE v127[24];
  _BYTE *v128;
  char v129[8];
  void *v130;
  char v131;
  void *v132;
  char v133;
  _BYTE v134[24];
  _BYTE *v135;
  _BYTE v136[24];
  _BYTE *v137;
  char v138[8];
  void *v139;
  char v140;
  void *v141;
  char v142;
  _BYTE v143[24];
  _BYTE *v144;
  _BYTE v145[24];
  _BYTE *v146;
  char v147[8];
  void *v148;
  char v149;
  void *v150;
  char v151;
  _BYTE v152[24];
  _BYTE *v153;
  _BYTE v154[24];
  _BYTE *v155;
  char v156[8];
  void *v157;
  char v158;
  void *v159;
  char v160;
  _BYTE v161[24];
  _BYTE *v162;
  _BYTE v163[24];
  _BYTE *v164;
  char v165[8];
  void *v166;
  char v167;
  void *v168;
  char v169;
  _BYTE v170[24];
  _BYTE *v171;
  _BYTE v172[24];
  _BYTE *v173;
  char v174[8];
  void *v175;
  char v176;
  void *v177;
  char v178;
  _BYTE v179[24];
  _BYTE *v180;
  _BYTE v181[24];
  _BYTE *v182;
  char v183[8];
  void *v184;
  char v185;
  void *v186;
  char v187;
  _BYTE v188[24];
  _BYTE *v189;
  _BYTE v190[24];
  _BYTE *v191;
  char v192[8];
  void *v193;
  char v194;
  void *v195;
  char v196;
  _BYTE v197[24];
  _BYTE *v198;
  _BYTE v199[24];
  _BYTE *v200;
  char v201[8];
  void *v202[2];
  char v203;
  void *v204;
  char v205;
  _BYTE v206[24];
  _BYTE *v207;
  _BYTE v208[24];
  _BYTE *v209;
  _DWORD v210[2];
  _DWORD v211[32];
  _DWORD v212[32];
  _DWORD v213[32];
  _DWORD v214[32];
  _DWORD v215[32];
  _DWORD v216[32];
  _DWORD v217[32];
  _DWORD v218[32];
  _DWORD v219[32];
  _DWORD v220[32];
  _QWORD v221[17];

  v221[15] = *MEMORY[0x1E0C80C00];
  v0 = operator new();
  std::string::basic_string[abi:ne180100]<0>(v107, "atomic mass units");
  std::string::basic_string[abi:ne180100]<0>(v105, "");
  siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo((uint64_t)v201, 0, (__int128 *)v107, (__int128 *)v105, 1.66053e-24);
  v210[0] = 0;
  siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo((uint64_t)v211, (uint64_t)v201);
  std::string::basic_string[abi:ne180100]<0>(v103, "grams");
  std::string::basic_string[abi:ne180100]<0>(v101, "");
  siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo((uint64_t)v192, (const char *)1, (__int128 *)v103, (__int128 *)v101, 1.0);
  v211[30] = 1;
  siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo((uint64_t)v212, (uint64_t)v192);
  std::string::basic_string[abi:ne180100]<0>(v99, "kilograms");
  std::string::basic_string[abi:ne180100]<0>(v97, "");
  siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo((uint64_t)v183, (const char *)2, (__int128 *)v99, (__int128 *)v97, 1000.0);
  v212[30] = 2;
  siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo((uint64_t)v213, (uint64_t)v183);
  std::string::basic_string[abi:ne180100]<0>(v95, "micrograms");
  std::string::basic_string[abi:ne180100]<0>(v93, "");
  siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo((uint64_t)v174, (const char *)3, (__int128 *)v95, (__int128 *)v93, 0.000001);
  v213[30] = 3;
  siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo((uint64_t)v214, (uint64_t)v174);
  std::string::basic_string[abi:ne180100]<0>(v91, "milligrams");
  std::string::basic_string[abi:ne180100]<0>(v89, "");
  siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo((uint64_t)v165, (const char *)4, (__int128 *)v91, (__int128 *)v89, 0.001);
  v214[30] = 4;
  siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo((uint64_t)v215, (uint64_t)v165);
  std::string::basic_string[abi:ne180100]<0>(v87, "ounces");
  std::string::basic_string[abi:ne180100]<0>(v85, "");
  siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo((uint64_t)v156, (const char *)5, (__int128 *)v87, (__int128 *)v85, 28.34952);
  v215[30] = 5;
  siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo((uint64_t)v216, (uint64_t)v156);
  std::string::basic_string[abi:ne180100]<0>(v83, "pounds");
  std::string::basic_string[abi:ne180100]<0>(v81, "");
  siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo((uint64_t)v147, (const char *)6, (__int128 *)v83, (__int128 *)v81, 453.59237);
  v216[30] = 6;
  siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo((uint64_t)v217, (uint64_t)v147);
  std::string::basic_string[abi:ne180100]<0>(v79, "stones");
  std::string::basic_string[abi:ne180100]<0>(v77, "");
  siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo((uint64_t)v138, (const char *)7, (__int128 *)v79, (__int128 *)v77, 6350.29318);
  v217[30] = 7;
  siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo((uint64_t)v218, (uint64_t)v138);
  std::string::basic_string[abi:ne180100]<0>(v75, "tons uk");
  std::string::basic_string[abi:ne180100]<0>(v73, "");
  siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo((uint64_t)v129, (const char *)8, (__int128 *)v75, (__int128 *)v73, 1016046.91);
  v218[30] = 8;
  siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo((uint64_t)v219, (uint64_t)v129);
  std::string::basic_string[abi:ne180100]<0>(v71, "tons us");
  std::string::basic_string[abi:ne180100]<0>(v69, "");
  siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo((uint64_t)v120, (const char *)9, (__int128 *)v71, (__int128 *)v69, 907184.74);
  v219[30] = 9;
  siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo((uint64_t)v220, (uint64_t)v120);
  std::string::basic_string[abi:ne180100]<0>(v67, "yottagrams");
  std::string::basic_string[abi:ne180100]<0>(v65, "");
  siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo((uint64_t)v111, (const char *)0xA, (__int128 *)v67, (__int128 *)v65, 1.0e-24);
  v220[30] = 10;
  siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo((uint64_t)v221, (uint64_t)v111);
  v1 = 0;
  v2 = 0;
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)v0 = v0 + 8;
  v3 = (uint64_t *)(v0 + 8);
  while (1)
  {
    v4 = &v210[32 * v2];
    v5 = v0 + 8;
    if (v3 == (uint64_t *)(v0 + 8))
      goto LABEL_8;
    v6 = v1;
    v7 = v0 + 8;
    if (v1)
    {
      do
      {
        v5 = v6;
        v6 = *(_QWORD *)(v6 + 8);
      }
      while (v6);
    }
    else
    {
      do
      {
        v5 = *(_QWORD *)(v7 + 16);
        v8 = *(_QWORD *)v5 == v7;
        v7 = v5;
      }
      while (v8);
    }
    v9 = *v4;
    if (*(_DWORD *)(v5 + 32) < *v4)
    {
LABEL_8:
      v10 = (uint64_t *)(v1 ? v5 : v0 + 8);
      v11 = (uint64_t *)(v1 ? v5 + 8 : v0 + 8);
    }
    else
    {
      v10 = (uint64_t *)(v0 + 8);
      v11 = (uint64_t *)(v0 + 8);
      if (v1)
      {
        v11 = (uint64_t *)(v0 + 8);
        while (1)
        {
          while (1)
          {
            v10 = (uint64_t *)v1;
            v14 = *(_DWORD *)(v1 + 32);
            if (v9 >= v14)
              break;
            v1 = *v10;
            v11 = v10;
            if (!*v10)
              goto LABEL_15;
          }
          if (v14 >= v9)
            break;
          v11 = v10 + 1;
          v1 = v10[1];
          if (!v1)
            goto LABEL_15;
        }
      }
    }
    if (!*v11)
    {
LABEL_15:
      v12 = operator new(0xA0uLL);
      v109[0] = v12;
      v109[1] = v0 + 8;
      v110 = 0;
      v12[8] = *v4;
      siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo((uint64_t)(v12 + 10), (uint64_t)&v210[32 * v2 + 2]);
      v110 = 1;
      *(_QWORD *)v12 = 0;
      *((_QWORD *)v12 + 1) = 0;
      *((_QWORD *)v12 + 2) = v10;
      *v11 = (uint64_t)v12;
      v13 = **(_QWORD **)v0;
      if (v13)
      {
        *(_QWORD *)v0 = v13;
        v12 = (_DWORD *)*v11;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v0 + 8), (uint64_t *)v12);
      ++*(_QWORD *)(v0 + 16);
      v109[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<siri::dialogengine::Length,siri::dialogengine::UnitInfo<siri::dialogengine::Length>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<siri::dialogengine::Length,siri::dialogengine::UnitInfo<siri::dialogengine::Length>>,void *>>>>::reset[abi:ne180100]((uint64_t)v109);
    }
    if (++v2 == 11)
      break;
    v3 = *(uint64_t **)v0;
    v1 = *(_QWORD *)(v0 + 8);
  }
  siri::dialogengine::AllUnitInfo<siri::dialogengine::Weight>(void)::sUnits = v0;
  v15 = 1408;
  do
  {
    v16 = *(_BYTE **)&v210[v15 / 4 - 2];
    if (&v208[v15] == v16)
    {
      v16 = &v208[v15];
      v17 = 4;
    }
    else
    {
      if (!v16)
        goto LABEL_34;
      v17 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_34:
    v18 = *(_BYTE **)&v208[v15 - 8];
    if (&v206[v15] == v18)
    {
      v18 = &v206[v15];
      v19 = 4;
    }
    else
    {
      if (!v18)
        goto LABEL_39;
      v19 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_39:
    v20 = (void **)&v210[v15 / 4];
    if ((v206[v15 - 1] & 0x80000000) != 0)
      operator delete(*(v20 - 11));
    if (*((char *)v20 - 89) < 0)
      operator delete(v202[v15 / 8]);
    v15 -= 128;
  }
  while (v15);
  v21 = v119;
  if (v119 == v118)
  {
    v22 = 4;
    v21 = v118;
LABEL_48:
    (*(void (**)(void))(*v21 + 8 * v22))();
  }
  else if (v119)
  {
    v22 = 5;
    goto LABEL_48;
  }
  v23 = v117;
  if (v117 == v116)
  {
    v24 = 4;
    v23 = v116;
LABEL_53:
    (*(void (**)(void))(*v23 + 8 * v24))();
  }
  else if (v117)
  {
    v24 = 5;
    goto LABEL_53;
  }
  if (v115 < 0)
    operator delete(__p);
  if (v113 < 0)
    operator delete(v112);
  if (v66 < 0)
    operator delete(v65[0]);
  if (v68 < 0)
    operator delete(v67[0]);
  v25 = v128;
  if (v128 == v127)
  {
    v26 = 4;
    v25 = v127;
LABEL_66:
    (*(void (**)(void))(*v25 + 8 * v26))();
  }
  else if (v128)
  {
    v26 = 5;
    goto LABEL_66;
  }
  v27 = v126;
  if (v126 == v125)
  {
    v28 = 4;
    v27 = v125;
LABEL_71:
    (*(void (**)(void))(*v27 + 8 * v28))();
  }
  else if (v126)
  {
    v28 = 5;
    goto LABEL_71;
  }
  if (v124 < 0)
    operator delete(v123);
  if (v122 < 0)
    operator delete(v121);
  if (v70 < 0)
    operator delete(v69[0]);
  if (v72 < 0)
    operator delete(v71[0]);
  v29 = v137;
  if (v137 == v136)
  {
    v30 = 4;
    v29 = v136;
LABEL_84:
    (*(void (**)(void))(*v29 + 8 * v30))();
  }
  else if (v137)
  {
    v30 = 5;
    goto LABEL_84;
  }
  v31 = v135;
  if (v135 == v134)
  {
    v32 = 4;
    v31 = v134;
LABEL_89:
    (*(void (**)(void))(*v31 + 8 * v32))();
  }
  else if (v135)
  {
    v32 = 5;
    goto LABEL_89;
  }
  if (v133 < 0)
    operator delete(v132);
  if (v131 < 0)
    operator delete(v130);
  if (v74 < 0)
    operator delete(v73[0]);
  if (v76 < 0)
    operator delete(v75[0]);
  v33 = v146;
  if (v146 == v145)
  {
    v34 = 4;
    v33 = v145;
LABEL_102:
    (*(void (**)(void))(*v33 + 8 * v34))();
  }
  else if (v146)
  {
    v34 = 5;
    goto LABEL_102;
  }
  v35 = v144;
  if (v144 == v143)
  {
    v36 = 4;
    v35 = v143;
LABEL_107:
    (*(void (**)(void))(*v35 + 8 * v36))();
  }
  else if (v144)
  {
    v36 = 5;
    goto LABEL_107;
  }
  if (v142 < 0)
    operator delete(v141);
  if (v140 < 0)
    operator delete(v139);
  if (v78 < 0)
    operator delete(v77[0]);
  if (v80 < 0)
    operator delete(v79[0]);
  v37 = v155;
  if (v155 == v154)
  {
    v38 = 4;
    v37 = v154;
LABEL_120:
    (*(void (**)(void))(*v37 + 8 * v38))();
  }
  else if (v155)
  {
    v38 = 5;
    goto LABEL_120;
  }
  v39 = v153;
  if (v153 == v152)
  {
    v40 = 4;
    v39 = v152;
LABEL_125:
    (*(void (**)(void))(*v39 + 8 * v40))();
  }
  else if (v153)
  {
    v40 = 5;
    goto LABEL_125;
  }
  if (v151 < 0)
    operator delete(v150);
  if (v149 < 0)
    operator delete(v148);
  if (v82 < 0)
    operator delete(v81[0]);
  if (v84 < 0)
    operator delete(v83[0]);
  v41 = v164;
  if (v164 == v163)
  {
    v42 = 4;
    v41 = v163;
LABEL_138:
    (*(void (**)(void))(*v41 + 8 * v42))();
  }
  else if (v164)
  {
    v42 = 5;
    goto LABEL_138;
  }
  v43 = v162;
  if (v162 == v161)
  {
    v44 = 4;
    v43 = v161;
LABEL_143:
    (*(void (**)(void))(*v43 + 8 * v44))();
  }
  else if (v162)
  {
    v44 = 5;
    goto LABEL_143;
  }
  if (v160 < 0)
    operator delete(v159);
  if (v158 < 0)
    operator delete(v157);
  if (v86 < 0)
    operator delete(v85[0]);
  if (v88 < 0)
    operator delete(v87[0]);
  v45 = v173;
  if (v173 == v172)
  {
    v46 = 4;
    v45 = v172;
LABEL_156:
    (*(void (**)(void))(*v45 + 8 * v46))();
  }
  else if (v173)
  {
    v46 = 5;
    goto LABEL_156;
  }
  v47 = v171;
  if (v171 == v170)
  {
    v48 = 4;
    v47 = v170;
LABEL_161:
    (*(void (**)(void))(*v47 + 8 * v48))();
  }
  else if (v171)
  {
    v48 = 5;
    goto LABEL_161;
  }
  if (v169 < 0)
    operator delete(v168);
  if (v167 < 0)
    operator delete(v166);
  if (v90 < 0)
    operator delete(v89[0]);
  if (v92 < 0)
    operator delete(v91[0]);
  v49 = v182;
  if (v182 == v181)
  {
    v50 = 4;
    v49 = v181;
LABEL_174:
    (*(void (**)(void))(*v49 + 8 * v50))();
  }
  else if (v182)
  {
    v50 = 5;
    goto LABEL_174;
  }
  v51 = v180;
  if (v180 == v179)
  {
    v52 = 4;
    v51 = v179;
LABEL_179:
    (*(void (**)(void))(*v51 + 8 * v52))();
  }
  else if (v180)
  {
    v52 = 5;
    goto LABEL_179;
  }
  if (v178 < 0)
    operator delete(v177);
  if (v176 < 0)
    operator delete(v175);
  if (v94 < 0)
    operator delete(v93[0]);
  if (v96 < 0)
    operator delete(v95[0]);
  v53 = v191;
  if (v191 == v190)
  {
    v54 = 4;
    v53 = v190;
LABEL_192:
    (*(void (**)(void))(*v53 + 8 * v54))();
  }
  else if (v191)
  {
    v54 = 5;
    goto LABEL_192;
  }
  v55 = v189;
  if (v189 == v188)
  {
    v56 = 4;
    v55 = v188;
LABEL_197:
    (*(void (**)(void))(*v55 + 8 * v56))();
  }
  else if (v189)
  {
    v56 = 5;
    goto LABEL_197;
  }
  if (v187 < 0)
    operator delete(v186);
  if (v185 < 0)
    operator delete(v184);
  if (v98 < 0)
    operator delete(v97[0]);
  if (v100 < 0)
    operator delete(v99[0]);
  v57 = v200;
  if (v200 == v199)
  {
    v58 = 4;
    v57 = v199;
LABEL_210:
    (*(void (**)(void))(*v57 + 8 * v58))();
  }
  else if (v200)
  {
    v58 = 5;
    goto LABEL_210;
  }
  v59 = v198;
  if (v198 == v197)
  {
    v60 = 4;
    v59 = v197;
LABEL_215:
    (*(void (**)(void))(*v59 + 8 * v60))();
  }
  else if (v198)
  {
    v60 = 5;
    goto LABEL_215;
  }
  if (v196 < 0)
    operator delete(v195);
  if (v194 < 0)
    operator delete(v193);
  if (v102 < 0)
    operator delete(v101[0]);
  if (v104 < 0)
    operator delete(v103[0]);
  v61 = v209;
  if (v209 == v208)
  {
    v62 = 4;
    v61 = v208;
LABEL_228:
    (*(void (**)(void))(*v61 + 8 * v62))();
  }
  else if (v209)
  {
    v62 = 5;
    goto LABEL_228;
  }
  v63 = v207;
  if (v207 == v206)
  {
    v64 = 4;
    v63 = v206;
LABEL_233:
    (*(void (**)(void))(*v63 + 8 * v64))();
  }
  else if (v207)
  {
    v64 = 5;
    goto LABEL_233;
  }
  if (v205 < 0)
    operator delete(v204);
  if (v203 < 0)
    operator delete(v202[0]);
  if (v106 < 0)
    operator delete(v105[0]);
  if (v108 < 0)
    operator delete(v107[0]);
}

void sub_1BF87C9F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,void *a63)
{
  char a68;
  void *a69;
  char a72;
  void *a73;
  char a74;
  void *a75;
  char a76;
  void *a77;
  char a78;
  void *a79;
  char a80;
  void *a81;
  char a82;
  void *a83;
  char a84;
  void *a85;
  char a86;
  void *a87;
  char a88;
  void *a89;
  char a90;
  void *a91;
  char a92;
  void *a93;
  uint64_t v93;
  uint64_t v94;
  unint64_t *v96;
  uint64_t v97;
  unint64_t *v98;
  uint64_t v99;
  unint64_t *v100;
  unint64_t *v101;
  uint64_t v102;
  unint64_t *v103;
  uint64_t v104;
  unint64_t *v105;
  uint64_t v106;
  unint64_t *v107;
  uint64_t v108;
  unint64_t *v109;
  uint64_t v110;
  unint64_t *v111;
  uint64_t v112;
  unint64_t *v113;
  uint64_t v114;
  unint64_t *v115;
  uint64_t v116;
  unint64_t *v117;
  uint64_t v118;
  unint64_t *v119;
  uint64_t v120;
  unint64_t *v121;
  uint64_t v122;
  unint64_t *v123;
  uint64_t v124;
  unint64_t *v125;
  uint64_t v126;
  unint64_t *v127;
  uint64_t v128;
  unint64_t *v129;
  uint64_t v130;
  unint64_t *v131;
  uint64_t v132;
  unint64_t *v133;
  uint64_t v134;
  unint64_t *v135;
  uint64_t v136;
  unint64_t *v137;
  uint64_t v138;
  unint64_t *v139;
  uint64_t v140;
  unint64_t *v141;
  uint64_t v142;
  unint64_t *v143;
  uint64_t v144;

  v96 = (unint64_t *)STACK[0x298];
  if ((unint64_t *)STACK[0x298] == &STACK[0x280])
  {
    v97 = 4;
    v96 = &STACK[0x280];
  }
  else
  {
    if (!v96)
      goto LABEL_6;
    v97 = 5;
  }
  (*(void (**)(void))(*v96 + 8 * v97))();
LABEL_6:
  v98 = (unint64_t *)STACK[0x278];
  if ((unint64_t *)STACK[0x278] == &STACK[0x260])
  {
    v99 = 4;
    v98 = &STACK[0x260];
  }
  else
  {
    if (!v98)
      goto LABEL_11;
    v99 = 5;
  }
  (*(void (**)(void))(*v98 + 8 * v99))();
LABEL_11:
  if (SLOBYTE(STACK[0x25F]) < 0)
    operator delete((void *)STACK[0x248]);
  if (SLOBYTE(STACK[0x247]) < 0)
    operator delete((void *)STACK[0x230]);
  if (a14 < 0)
    operator delete(a9);
  if (a20 < 0)
    operator delete(a15);
  v100 = (unint64_t *)(v94 + 1280);
  v101 = (unint64_t *)STACK[0x310];
  if ((unint64_t *)STACK[0x310] == &STACK[0x2F8])
  {
    v102 = 4;
    v101 = &STACK[0x2F8];
  }
  else
  {
    if (!v101)
      goto LABEL_24;
    v102 = 5;
  }
  (*(void (**)(void))(*v101 + 8 * v102))();
LABEL_24:
  v103 = (unint64_t *)STACK[0x2F0];
  if ((unint64_t *)STACK[0x2F0] == &STACK[0x2D8])
  {
    v104 = 4;
    v103 = &STACK[0x2D8];
  }
  else
  {
    if (!v103)
      goto LABEL_29;
    v104 = 5;
  }
  (*(void (**)(void))(*v103 + 8 * v104))();
LABEL_29:
  if (SLOBYTE(STACK[0x2D7]) < 0)
    operator delete((void *)STACK[0x2C0]);
  if (SLOBYTE(STACK[0x2BF]) < 0)
    operator delete((void *)STACK[0x2A8]);
  if (a26 < 0)
    operator delete(a21);
  if (a32 < 0)
    operator delete(a27);
  v105 = (unint64_t *)STACK[0x388];
  if ((unint64_t *)STACK[0x388] == &STACK[0x370])
  {
    v106 = 4;
    v105 = &STACK[0x370];
  }
  else
  {
    if (!v105)
      goto LABEL_42;
    v106 = 5;
  }
  (*(void (**)(void))(*v105 + 8 * v106))();
LABEL_42:
  v107 = (unint64_t *)STACK[0x368];
  if ((unint64_t *)STACK[0x368] == &STACK[0x350])
  {
    v108 = 4;
    v107 = &STACK[0x350];
  }
  else
  {
    if (!v107)
      goto LABEL_47;
    v108 = 5;
  }
  (*(void (**)(void))(*v107 + 8 * v108))();
LABEL_47:
  if (SLOBYTE(STACK[0x34F]) < 0)
    operator delete((void *)STACK[0x338]);
  if (SLOBYTE(STACK[0x337]) < 0)
    operator delete((void *)STACK[0x320]);
  if (a38 < 0)
    operator delete(a33);
  if (a44 < 0)
    operator delete(a39);
  v109 = (unint64_t *)STACK[0x400];
  if ((unint64_t *)STACK[0x400] == &STACK[0x3E8])
  {
    v110 = 4;
    v109 = &STACK[0x3E8];
  }
  else
  {
    if (!v109)
      goto LABEL_60;
    v110 = 5;
  }
  (*(void (**)(void))(*v109 + 8 * v110))();
LABEL_60:
  v111 = (unint64_t *)STACK[0x3E0];
  if ((unint64_t *)STACK[0x3E0] == &STACK[0x3C8])
  {
    v112 = 4;
    v111 = &STACK[0x3C8];
  }
  else
  {
    if (!v111)
      goto LABEL_65;
    v112 = 5;
  }
  (*(void (**)(void))(*v111 + 8 * v112))();
LABEL_65:
  if (SLOBYTE(STACK[0x3C7]) < 0)
    operator delete((void *)STACK[0x3B0]);
  if (SLOBYTE(STACK[0x3AF]) < 0)
    operator delete((void *)STACK[0x398]);
  if (a50 < 0)
    operator delete(a45);
  if (a56 < 0)
    operator delete(a51);
  v113 = (unint64_t *)STACK[0x478];
  if ((unint64_t *)STACK[0x478] == &STACK[0x460])
  {
    v114 = 4;
    v113 = &STACK[0x460];
  }
  else
  {
    if (!v113)
      goto LABEL_78;
    v114 = 5;
  }
  (*(void (**)(void))(*v113 + 8 * v114))();
LABEL_78:
  v115 = (unint64_t *)STACK[0x458];
  if ((unint64_t *)STACK[0x458] == &STACK[0x440])
  {
    v116 = 4;
    v115 = &STACK[0x440];
  }
  else
  {
    if (!v115)
      goto LABEL_83;
    v116 = 5;
  }
  (*(void (**)(void))(*v115 + 8 * v116))();
LABEL_83:
  if (SLOBYTE(STACK[0x43F]) < 0)
    operator delete((void *)STACK[0x428]);
  if (SLOBYTE(STACK[0x427]) < 0)
    operator delete((void *)STACK[0x410]);
  if (a62 < 0)
    operator delete(a57);
  if (a68 < 0)
    operator delete(a63);
  v117 = (unint64_t *)STACK[0x4F0];
  if ((unint64_t *)STACK[0x4F0] == &STACK[0x4D8])
  {
    v118 = 4;
    v117 = &STACK[0x4D8];
  }
  else
  {
    if (!v117)
      goto LABEL_96;
    v118 = 5;
  }
  (*(void (**)(void))(*v117 + 8 * v118))();
LABEL_96:
  v119 = (unint64_t *)STACK[0x4D0];
  if ((unint64_t *)STACK[0x4D0] == &STACK[0x4B8])
  {
    v120 = 4;
    v119 = &STACK[0x4B8];
  }
  else
  {
    if (!v119)
      goto LABEL_101;
    v120 = 5;
  }
  (*(void (**)(void))(*v119 + 8 * v120))();
LABEL_101:
  if (SLOBYTE(STACK[0x4B7]) < 0)
    operator delete((void *)STACK[0x4A0]);
  if (SLOBYTE(STACK[0x49F]) < 0)
    operator delete((void *)STACK[0x488]);
  if (a72 < 0)
    operator delete(a69);
  if (a74 < 0)
    operator delete(a73);
  v121 = (unint64_t *)STACK[0x568];
  if ((unint64_t *)STACK[0x568] == &STACK[0x550])
  {
    v122 = 4;
    v121 = &STACK[0x550];
  }
  else
  {
    if (!v121)
      goto LABEL_114;
    v122 = 5;
  }
  (*(void (**)(void))(*v121 + 8 * v122))();
LABEL_114:
  v123 = (unint64_t *)STACK[0x548];
  if ((unint64_t *)STACK[0x548] == &STACK[0x530])
  {
    v124 = 4;
    v123 = &STACK[0x530];
  }
  else
  {
    if (!v123)
      goto LABEL_119;
    v124 = 5;
  }
  (*(void (**)(void))(*v123 + 8 * v124))();
LABEL_119:
  if (SLOBYTE(STACK[0x52F]) < 0)
    operator delete((void *)STACK[0x518]);
  if (SLOBYTE(STACK[0x517]) < 0)
    operator delete((void *)STACK[0x500]);
  if (a76 < 0)
    operator delete(a75);
  if (a78 < 0)
    operator delete(a77);
  v125 = (unint64_t *)STACK[0x5E0];
  if ((unint64_t *)STACK[0x5E0] == &STACK[0x5C8])
  {
    v126 = 4;
    v125 = &STACK[0x5C8];
  }
  else
  {
    if (!v125)
      goto LABEL_132;
    v126 = 5;
  }
  (*(void (**)(void))(*v125 + 8 * v126))();
LABEL_132:
  v127 = (unint64_t *)STACK[0x5C0];
  if ((unint64_t *)STACK[0x5C0] == &STACK[0x5A8])
  {
    v128 = 4;
    v127 = &STACK[0x5A8];
  }
  else
  {
    if (!v127)
      goto LABEL_137;
    v128 = 5;
  }
  (*(void (**)(void))(*v127 + 8 * v128))();
LABEL_137:
  if (SLOBYTE(STACK[0x5A7]) < 0)
    operator delete((void *)STACK[0x590]);
  if (SLOBYTE(STACK[0x58F]) < 0)
    operator delete((void *)STACK[0x578]);
  if (a80 < 0)
    operator delete(a79);
  if (a82 < 0)
    operator delete(a81);
  v129 = (unint64_t *)STACK[0x658];
  if ((unint64_t *)STACK[0x658] == &STACK[0x640])
  {
    v130 = 4;
    v129 = &STACK[0x640];
  }
  else
  {
    if (!v129)
      goto LABEL_150;
    v130 = 5;
  }
  (*(void (**)(void))(*v129 + 8 * v130))();
LABEL_150:
  v131 = (unint64_t *)STACK[0x638];
  if ((unint64_t *)STACK[0x638] == &STACK[0x620])
  {
    v132 = 4;
    v131 = &STACK[0x620];
  }
  else
  {
    if (!v131)
      goto LABEL_155;
    v132 = 5;
  }
  (*(void (**)(void))(*v131 + 8 * v132))();
LABEL_155:
  if (SLOBYTE(STACK[0x61F]) < 0)
    operator delete((void *)STACK[0x608]);
  if (SLOBYTE(STACK[0x607]) < 0)
    operator delete((void *)STACK[0x5F0]);
  if (a84 < 0)
    operator delete(a83);
  if (a86 < 0)
    operator delete(a85);
  v133 = (unint64_t *)STACK[0x6D0];
  if ((unint64_t *)STACK[0x6D0] == &STACK[0x6B8])
  {
    v134 = 4;
    v133 = &STACK[0x6B8];
  }
  else
  {
    if (!v133)
      goto LABEL_168;
    v134 = 5;
  }
  (*(void (**)(void))(*v133 + 8 * v134))();
LABEL_168:
  v135 = (unint64_t *)STACK[0x6B0];
  if ((unint64_t *)STACK[0x6B0] == &STACK[0x698])
  {
    v136 = 4;
    v135 = &STACK[0x698];
  }
  else
  {
    if (!v135)
      goto LABEL_173;
    v136 = 5;
  }
  (*(void (**)(void))(*v135 + 8 * v136))();
LABEL_173:
  if (SLOBYTE(STACK[0x697]) < 0)
    operator delete((void *)STACK[0x680]);
  if (SLOBYTE(STACK[0x67F]) < 0)
    operator delete((void *)STACK[0x668]);
  if (a88 < 0)
    operator delete(a87);
  if (a90 < 0)
    operator delete(a89);
  v137 = (unint64_t *)STACK[0x748];
  if ((unint64_t *)STACK[0x748] == &STACK[0x730])
  {
    v138 = 4;
    v137 = &STACK[0x730];
  }
  else
  {
    if (!v137)
      goto LABEL_186;
    v138 = 5;
  }
  (*(void (**)(void))(*v137 + 8 * v138))();
LABEL_186:
  v139 = (unint64_t *)STACK[0x728];
  if ((unint64_t *)STACK[0x728] == &STACK[0x710])
  {
    v140 = 4;
    v139 = &STACK[0x710];
  }
  else
  {
    if (!v139)
      goto LABEL_191;
    v140 = 5;
  }
  (*(void (**)(void))(*v139 + 8 * v140))();
LABEL_191:
  if (SLOBYTE(STACK[0x70F]) < 0)
    operator delete((void *)STACK[0x6F8]);
  if (SLOBYTE(STACK[0x6F7]) < 0)
    operator delete((void *)STACK[0x6E0]);
  if (a92 < 0)
    operator delete(a91);
  if (SLOBYTE(STACK[0x20F]) < 0)
    operator delete(a93);
  if (&STACK[0x750] == v100)
  {
LABEL_215:
    MEMORY[0x1C3B8D890](v93, 0x1020C4062D53EE8);
    _Unwind_Resume(a1);
  }
  while (1)
  {
    v141 = (unint64_t *)*(v100 - 1);
    if (v100 - 4 == v141)
    {
      v141 = v100 - 4;
      v142 = 4;
    }
    else
    {
      if (!v141)
        goto LABEL_205;
      v142 = 5;
    }
    (*(void (**)(void))(*v141 + 8 * v142))();
LABEL_205:
    v143 = (unint64_t *)*(v100 - 5);
    if (v100 - 8 == v143)
    {
      v143 = v100 - 8;
      v144 = 4;
      goto LABEL_209;
    }
    if (v143)
    {
      v144 = 5;
LABEL_209:
      (*(void (**)(void))(*v143 + 8 * v144))();
    }
    if (*((char *)v100 - 65) < 0)
      operator delete((void *)*(v100 - 11));
    if (*((char *)v100 - 89) < 0)
      operator delete((void *)*(v100 - 14));
    v100 -= 16;
    if (v100 == &STACK[0x750])
      goto LABEL_215;
  }
}

uint64_t siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo(uint64_t a1, const char *a2, __int128 *a3, __int128 *a4, double a5)
{
  __int128 v8;
  __int128 v9;
  uint64_t (***v10)();
  uint64_t v11;
  uint64_t (***v12)();
  uint64_t v13;
  uint64_t (**v15)();
  double v16;
  uint64_t (***v17)();
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)a1 = (_DWORD)a2;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v8 = *a3;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 8) = v8;
  }
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v9 = *a4;
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a4 + 2);
    *(_OWORD *)(a1 + 32) = v9;
  }
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  if (a5 == 0.0)
  {
    a5 = 1.0;
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Invalid unit conversion factor; Replacing with 1.0 for safety",
      a2);
  }
  v15 = &off_1E792B2C0;
  v16 = a5;
  v17 = &v15;
  std::__function::__value_func<double ()(double)>::swap[abi:ne180100](&v15, (_QWORD *)(a1 + 56));
  v10 = v17;
  if (v17 == &v15)
  {
    v11 = 4;
    v10 = &v15;
  }
  else
  {
    if (!v17)
      goto LABEL_14;
    v11 = 5;
  }
  (*v10)[v11]();
LABEL_14:
  v15 = &off_1E792B340;
  v16 = a5;
  v17 = &v15;
  std::__function::__value_func<double ()(double)>::swap[abi:ne180100](&v15, (_QWORD *)(a1 + 88));
  v12 = v17;
  if (v17 == &v15)
  {
    v13 = 4;
    v12 = &v15;
    goto LABEL_18;
  }
  if (v17)
  {
    v13 = 5;
LABEL_18:
    (*v12)[v13]();
  }
  return a1;
}

void sub_1BF87D620(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v5;
  }
  std::__function::__value_func<BOOL ()(std::vector<std::string> const&,google::protobuf::Field const*)>::__value_func[abi:ne180100](a1 + 56, a2 + 56);
  std::__function::__value_func<BOOL ()(std::vector<std::string> const&,google::protobuf::Field const*)>::__value_func[abi:ne180100](a1 + 88, a2 + 88);
  return a1;
}

void sub_1BF87D76C(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 + 31) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo(siri::dialogengine::Weight,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo(siri::dialogengine::Weight,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::~__func()
{
  JUMPOUT(0x1C3B8D890);
}

_QWORD *std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo(siri::dialogengine::Weight,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo(siri::dialogengine::Weight,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E792B340;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo(siri::dialogengine::Weight,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo(siri::dialogengine::Weight,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E792B340;
  a2[1] = v2;
  return result;
}

double std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo(siri::dialogengine::Weight,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo(siri::dialogengine::Weight,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::operator()(uint64_t a1, double *a2)
{
  return *a2 / *(double *)(a1 + 8);
}

uint64_t std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo(siri::dialogengine::Weight,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo(siri::dialogengine::Weight,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo(siri::dialogengine::Weight,std::string const&,double,std::string const&)::{lambda(double)#2},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo(siri::dialogengine::Weight,std::string const&,double,std::string const&)::{lambda(double)#2}>,double ()(double)>::target_type()
{
}

void std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo(siri::dialogengine::Weight,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo(siri::dialogengine::Weight,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::~__func()
{
  JUMPOUT(0x1C3B8D890);
}

_QWORD *std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo(siri::dialogengine::Weight,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo(siri::dialogengine::Weight,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E792B2C0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo(siri::dialogengine::Weight,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo(siri::dialogengine::Weight,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E792B2C0;
  a2[1] = v2;
  return result;
}

double std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo(siri::dialogengine::Weight,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo(siri::dialogengine::Weight,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::operator()(uint64_t a1, double *a2)
{
  return *a2 * *(double *)(a1 + 8);
}

uint64_t std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo(siri::dialogengine::Weight,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo(siri::dialogengine::Weight,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo(siri::dialogengine::Weight,std::string const&,double,std::string const&)::{lambda(double)#1},std::allocator<siri::dialogengine::UnitInfo<siri::dialogengine::Weight>::UnitInfo(siri::dialogengine::Weight,std::string const&,double,std::string const&)::{lambda(double)#1}>,double ()(double)>::target_type()
{
}

uint64_t siri::dialogengine::ParseUnitLabel<siri::dialogengine::Weight>(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v4;
  void **v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  uint64_t v15;
  void *__p[2];
  unsigned __int8 v18;

  siri::dialogengine::StringToLower(a1, (uint64_t)__p);
  v1 = (_QWORD *)siri::dialogengine::AllUnitInfo<siri::dialogengine::Weight>();
  v2 = v1 + 1;
  v3 = (_QWORD *)*v1;
  if ((_QWORD *)*v1 != v1 + 1)
  {
    if ((v18 & 0x80u) == 0)
      v4 = v18;
    else
      v4 = (unint64_t)__p[1];
    if ((v18 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    while (1)
    {
      v6 = *((unsigned __int8 *)v3 + 71);
      if ((v6 & 0x80u) == 0)
        v7 = (void *)*((unsigned __int8 *)v3 + 71);
      else
        v7 = (void *)v3[7];
      if (v7 == (void *)v4)
      {
        if ((v6 & 0x80) != 0)
        {
          if (!memcmp((const void *)v3[6], v5, v3[7]))
            break;
        }
        else
        {
          if (!*((_BYTE *)v3 + 71))
            break;
          v8 = 0;
          while (*((unsigned __int8 *)v3 + v8 + 48) == *((unsigned __int8 *)v5 + v8))
          {
            if (v6 == ++v8)
              goto LABEL_41;
          }
        }
      }
      v9 = *((unsigned __int8 *)v3 + 95);
      if (*((char *)v3 + 95) < 0)
      {
        if (v3[10])
        {
LABEL_23:
          if ((v9 & 0x80u) == 0)
            v10 = (void *)*((unsigned __int8 *)v3 + 95);
          else
            v10 = (void *)v3[10];
          if (v10 == (void *)v4)
          {
            if ((v9 & 0x80) != 0)
            {
              if (!memcmp((const void *)v3[9], v5, v3[10]))
                break;
            }
            else
            {
              if (!*((_BYTE *)v3 + 95))
                break;
              v11 = 0;
              while (*((unsigned __int8 *)v3 + v11 + 72) == *((unsigned __int8 *)v5 + v11))
              {
                if (v9 == ++v11)
                  goto LABEL_41;
              }
            }
          }
        }
      }
      else if (*((_BYTE *)v3 + 95))
      {
        goto LABEL_23;
      }
      v12 = (_QWORD *)v3[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v3[2];
          v14 = *v13 == (_QWORD)v3;
          v3 = v13;
        }
        while (!v14);
      }
      v3 = v13;
      if (v13 == v2)
        goto LABEL_43;
    }
  }
LABEL_41:
  if (v3 == v2)
LABEL_43:
    v15 = 0xFFFFFFFFLL;
  else
    v15 = *((unsigned int *)v3 + 10);
  if ((char)v18 < 0)
    operator delete(__p[0]);
  return v15;
}

{
  return __ZN4siri12dialogengine14ParseUnitLabelINS0_6WeightEEET_RKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE(a1);
}

void sub_1BF87DAF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::CanConvertUnitValue<siri::dialogengine::Weight>(uint64_t a1, const char *a2)
{
  const char *v4;
  const char *v5;

  if ((_DWORD)a1 == -1 || (_DWORD)a2 == -1)
  {
    siri::dialogengine::Log::Info((siri::dialogengine::Log *)"Either fromUnit or toUnit is invalid", a2);
  }
  else if (siri::dialogengine::FindUnitInfo<siri::dialogengine::Weight>(a1))
  {
    if (siri::dialogengine::FindUnitInfo<siri::dialogengine::Weight>((int)a2))
      return 1;
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Internal error? Failed to find UnitInfo for toUnit: %d", v5, a2);
  }
  else
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Internal error? Failed to find UnitInfo for fromUnit: %d", v4, a1);
  }
  return 0;
}

{
  return __ZN4siri12dialogengine19CanConvertUnitValueINS0_6WeightEEEbT_S3_(a1, a2);
}

double siri::dialogengine::ConvertUnitValue<siri::dialogengine::Weight>(uint64_t a1, const char *a2, double a3)
{
  double v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  double v12;
  _QWORD *v13;
  _QWORD *v14;
  double v16;

  if ((_DWORD)a1 == (_DWORD)a2)
    return a3;
  v5 = (int)a2;
  v6 = a1;
  v4 = 0.0;
  if (siri::dialogengine::CanConvertUnitValue<siri::dialogengine::Weight>(a1, a2))
  {
    v7 = siri::dialogengine::FindUnitInfo<siri::dialogengine::Weight>(v6);
    v8 = siri::dialogengine::FindUnitInfo<siri::dialogengine::Weight>(v5);
    v16 = a3;
    v9 = *(_QWORD *)(v7 + 80);
    if (!v9
      || (v16 = (*(double (**)(uint64_t, double *))(*(_QWORD *)v9 + 48))(v9, &v16),
          (v10 = *(_QWORD *)(v8 + 112)) == 0))
    {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    v12 = (*(double (**)(uint64_t, double *))(*(_QWORD *)v10 + 48))(v10, &v16);
    v4 = v12;
    v13 = (_QWORD *)(v7 + 8);
    if (*(char *)(v7 + 31) < 0)
      v13 = (_QWORD *)*v13;
    v14 = (_QWORD *)(v8 + 8);
    if (*(char *)(v8 + 31) < 0)
      v14 = (_QWORD *)*v14;
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"%f in %s was converted to %f in %s", v11, *(_QWORD *)&a3, v13, *(_QWORD *)&v12, v14);
  }
  return v4;
}

{
  return __ZN4siri12dialogengine16ConvertUnitValueINS0_6WeightEEEddT_S3_(a1, a2, a3);
}

void siri::dialogengine::PhoneNumber::AddCNPhoneNumberLeftToRightMarkers(const void **a1@<X0>, std::string *a2@<X8>)
{
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  std::string v7;
  void *__p[2];
  unsigned __int8 v9;
  const void *v10[2];
  char v11;

  std::string::basic_string[abi:ne180100]<0>(v10, "\u202D");
  std::string::basic_string[abi:ne180100]<0>(__p, "\u202C");
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, a1, (uint64_t)&v7);
  if ((v9 & 0x80u) == 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if ((v9 & 0x80u) == 0)
    v5 = v9;
  else
    v5 = (std::string::size_type)__p[1];
  v6 = std::string::append(&v7, (const std::string::value_type *)v4, v5);
  *a2 = *v6;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if ((char)v9 < 0)
    operator delete(__p[0]);
  if (v11 < 0)
    operator delete((void *)v10[0]);
}

void sub_1BF87DD40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::PhoneNumber::FormatNumber(siri::dialogengine::Context *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::string *v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  std::string v13;
  std::string v14;
  std::string __p;
  void *v16;
  char v17;
  void *v18;
  char v19;
  void *v20;
  char v21;
  void *v22;
  char v23;
  void *v24;
  char v25;
  void *v26;
  char v27;
  std::string v28;
  __int128 v29;
  std::string::size_type v30;
  std::string v31;
  std::string v32;

  siri::dialogengine::FormatNumberForPrintable(&v14, a1, (uint64_t *)a2, a3);
  siri::dialogengine::Context::GetDeviceLocale(a1, &__p);
  siri::dialogengine::GetLocaleLanguage(&v32);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v32.__r_.__value_.__l.__size_ != 2)
      goto LABEL_9;
    v8 = (std::string *)v32.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) != 2)
      goto LABEL_9;
    v8 = &v32;
  }
  if (LOWORD(v8->__r_.__value_.__l.__data_) == 29281)
  {
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v31 = *(std::string *)a2;
LABEL_10:
    siri::dialogengine::RemoveUnicodeControlChars((uint64_t)&v31, &v28);
    v9 = std::string::insert(&v28, 0, "<say-as interpret-as=\"phone\">");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    v11 = std::string::append(&__p, "</say-as>");
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v30 = v11->__r_.__value_.__r.__words[2];
    v29 = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v28.__r_.__value_.__l.__data_);
    siri::dialogengine::SpeakableString::SpeakableString((uint64_t)&__p, (uint64_t)&v29);
    siri::dialogengine::SpeakableString::GetExpandedSpeak(&v13, (siri::dialogengine::SpeakableString *)&__p, a1);
    if (v27 < 0)
      operator delete(v26);
    if (v25 < 0)
      operator delete(v24);
    if (v23 < 0)
      operator delete(v22);
    if (v21 < 0)
      operator delete(v20);
    if (v19 < 0)
      operator delete(v18);
    if (v17 < 0)
      operator delete(v16);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v30) < 0)
      operator delete((void *)v29);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
    siri::dialogengine::SpeakableString::SpeakableString(a4, &v14, &v13);
  }
LABEL_9:
  siri::dialogengine::FormatNumberForPrintable(&v31, a1, (uint64_t *)a2, a3);
  goto LABEL_10;
}

void sub_1BF87DFEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (*(char *)(v26 - 49) < 0)
    operator delete(*(void **)(v26 - 72));
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::FormatNumberForPrintable(_QWORD *a1, siri::dialogengine::Context *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  std::string *p_p;
  void *v8;
  uint64_t *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  std::string __p;

  v5 = *((unsigned __int8 *)a3 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = a3[1];
  if (v5)
  {
    siri::dialogengine::GetCountryCode(&__p, a2, a4);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", p_p);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (*((char *)a3 + 23) >= 0)
      v9 = a3;
    else
      v9 = (uint64_t *)*a3;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C97398], "phoneNumberWithDigits:countryCode:", v10, v8);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "digits");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "digitsRemovingDialingCode");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v12, "length") == 2)
    {
      std::string::basic_string[abi:ne180100]<0>(a1, (char *)objc_msgSend(objc_retainAutorelease(v12), "UTF8String"));
    }
    else
    {
      if (objc_msgSend(v12, "isEqualToString:", v13))
        objc_msgSend(v11, "valueForKey:", CFSTR("formattedStringValue"));
      else
        objc_msgSend(v11, "valueForKey:", CFSTR("formattedInternationalStringValue"));
      v14 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      std::string::basic_string[abi:ne180100]<0>(a1, (char *)objc_msgSend(v14, "UTF8String"));

    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a1, "");
  }
}

void sub_1BF87E280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void siri::dialogengine::GetCountryCode(std::string *this, siri::dialogengine::Context *a2, uint64_t a3)
{
  unint64_t v4;
  void *v5;
  std::string v6;
  std::string __p;

  if (*(char *)(a3 + 23) < 0)
  {
    v4 = *(_QWORD *)(a3 + 8);
    if (v4)
    {
      if (v4 <= 2)
      {
        std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
        return;
      }
      goto LABEL_7;
    }
  }
  else if (*(_BYTE *)(a3 + 23))
  {
    if (*(unsigned __int8 *)(a3 + 23) < 3u)
    {
      *this = *(std::string *)a3;
      return;
    }
LABEL_7:
    siri::dialogengine::GetLocaleCountry(&__p);
    siri::dialogengine::StringToLower((uint64_t)&__p, (uint64_t)this);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    v5 = (void *)__p.__r_.__value_.__r.__words[0];
    goto LABEL_13;
  }
  siri::dialogengine::Context::GetDeviceLocale(a2, &v6);
  siri::dialogengine::GetLocaleCountry(&__p);
  siri::dialogengine::StringToLower((uint64_t)&__p, (uint64_t)this);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
  {
    v5 = (void *)v6.__r_.__value_.__r.__words[0];
LABEL_13:
    operator delete(v5);
  }
}

void sub_1BF87E3D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::PhoneNumber::AreaCode(siri::dialogengine::Context *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::string *v6;
  void *v7;
  uint64_t *v8;
  void *v9;
  void *v10;
  void *v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  std::string::size_type size;
  uint64_t *v21;
  std::string::value_type v22;
  std::string::const_iterator v23;
  std::string *p_p;
  std::string::size_type v25;
  std::string::size_type v26;
  unint64_t v27;
  std::string v28;
  std::string __p;
  std::string v30;
  std::string v31;
  std::string v32;

  siri::dialogengine::GetCountryCode(&v32, a1, a3);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = &v32;
  else
    v6 = (std::string *)v32.__r_.__value_.__r.__words[0];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if (*((char *)a2 + 23) >= 0)
    v8 = a2;
  else
    v8 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C97398], "phoneNumberWithDigits:countryCode:", v9, v7);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "valueForKey:", CFSTR("formattedInternationalStringValue"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v11, "containsString:", CFSTR("+1")) & 1) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v31, "");
    std::string::basic_string[abi:ne180100]<0>(&v30, "");
    v12 = *((unsigned __int8 *)a2 + 23);
    v13 = *((char *)a2 + 23) < 0;
    v14 = a2[1];
    if (*((char *)a2 + 23) >= 0)
      v15 = *((unsigned __int8 *)a2 + 23);
    else
      v15 = a2[1];
    if (v15)
    {
      v16 = 0;
      v17 = MEMORY[0x1E0C80978];
      do
      {
        if (v13)
          v18 = (uint64_t *)*a2;
        else
          v18 = a2;
        v19 = *((char *)v18 + v16);
        if ((v19 & 0x80000000) == 0 && (*(_DWORD *)(v17 + 4 * v19 + 60) & 0x400) != 0)
        {
          size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
          if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = v31.__r_.__value_.__l.__size_;
          if (size || v19 != 49)
          {
            std::string::push_back(&v31, v19);
            if (*((char *)a2 + 23) >= 0)
              v21 = a2;
            else
              v21 = (uint64_t *)*a2;
            v22 = *((_BYTE *)v21 + v16);
            std::string::basic_string[abi:ne180100]<0>(&v28, " ");
            if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v23.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v28;
            else
              v23.__i_ = (std::__wrap_iter<const char *>::iterator_type)v28.__r_.__value_.__r.__words[0];
            std::string::insert(&v28, v23, v22);
            __p = v28;
            memset(&v28, 0, sizeof(v28));
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_p = &__p;
            else
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            else
              v25 = __p.__r_.__value_.__l.__size_;
            std::string::append(&v30, (const std::string::value_type *)p_p, v25);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v28.__r_.__value_.__l.__data_);
            v26 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
            if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v26 = v31.__r_.__value_.__l.__size_;
            if (v26 == 3)
              break;
            v12 = *((unsigned __int8 *)a2 + 23);
            v14 = a2[1];
          }
        }
        ++v16;
        v13 = (v12 & 0x80u) != 0;
        if ((v12 & 0x80u) == 0)
          v27 = v12;
        else
          v27 = v14;
      }
      while (v16 < v27);
    }
    siri::dialogengine::StringTrim(" \t\n\r", &v30, &__p);
    siri::dialogengine::SpeakableString::SpeakableString(a4, &v31, &__p);
  }
  *(_QWORD *)(a4 + 160) = 0;
  *(_OWORD *)(a4 + 128) = 0u;
  *(_OWORD *)(a4 + 144) = 0u;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;

  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
}

void sub_1BF87E704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  void *v39;
  void *v40;
  void *v41;
  void *v42;

  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  if (a33 < 0)
    operator delete(a28);

  if (a39 < 0)
    operator delete(a34);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ConvertItemFormatSSMLToTag(const std::string *a1@<X0>, uint64_t *a2@<X8>)
{
  std::string *p_str;
  std::string::size_type size;
  std::string *v6;
  __int128 v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  char *v11;
  unint64_t v12;
  std::string *v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  const std::string *v17;
  uint64_t *v18;
  _BOOL4 v19;
  uint64_t v20;
  void *v21[2];
  char v22;
  void *v23;
  _BYTE *v24;
  char v25;
  std::string __str;
  std::string v27;
  void *__p[2];
  int64_t v29;
  std::string v30;
  const void **v31;

  std::string::basic_string[abi:ne180100]<0>(&v27, "[");
  std::string::basic_string[abi:ne180100]<0>(&__str, "]");
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_str = &__str;
  else
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  else
    size = __str.__r_.__value_.__l.__size_;
  v6 = std::string::append(&v27, (const std::string::value_type *)p_str, size);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v29 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (v29 >= 0)
    v8 = (char *)__p;
  else
    v8 = (char *)__p[0];
  siri::dialogengine::StringTrim(v8, a1, &v30);
  if (SHIBYTE(v29) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  siri::dialogengine::StringSplit((unsigned __int8 *)&v30, " \t\n\r", __p);
  v9 = operator new();
  *(_OWORD *)(v9 + 152) = 0u;
  *(_OWORD *)(v9 + 136) = 0u;
  *(_OWORD *)(v9 + 120) = 0u;
  *(_OWORD *)(v9 + 104) = 0u;
  *(_OWORD *)(v9 + 88) = 0u;
  *(_OWORD *)(v9 + 72) = 0u;
  *(_OWORD *)(v9 + 56) = 0u;
  *(_OWORD *)(v9 + 40) = 0u;
  *(_OWORD *)(v9 + 24) = 0u;
  *(_QWORD *)(v9 + 184) = 0;
  *(_OWORD *)(v9 + 8) = 0u;
  *(_QWORD *)(v9 + 168) = 0;
  *(_QWORD *)(v9 + 176) = v9 + 184;
  *(_QWORD *)(v9 + 192) = 0;
  *(_QWORD *)(v9 + 200) = 0;
  *(_QWORD *)v9 = off_1E7930A18;
  *(_QWORD *)(v9 + 208) = 0;
  *(_QWORD *)(v9 + 216) = 0;
  *(_WORD *)(v9 + 224) = 0;
  *a2 = v9;
  v10 = (_QWORD *)operator new();
  *v10 = &off_1E792B3C0;
  v10[1] = 0;
  v10[2] = 0;
  v10[3] = v9;
  a2[1] = (uint64_t)v10;
  *(_OWORD *)&v27.__r_.__value_.__r.__words[1] = 0uLL;
  v27.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27.__r_.__value_.__l.__size_;
  v11 = (char *)__p[0];
  if (__p[1] != __p[0])
  {
    v12 = 0;
    do
    {
      v13 = (std::string *)&v11[24 * v12];
      if (v12)
      {
        std::string::basic_string[abi:ne180100]<0>(&v23, "/");
        std::string::basic_string[abi:ne180100]<0>(v21, "");
        siri::dialogengine::StringReplace((uint64_t)v13, (char *)&v23, (uint64_t)v21, 0, &__str);
        if (v22 < 0)
          operator delete(v21[0]);
        if (v25 < 0)
          operator delete(v23);
        siri::dialogengine::StringSplit((unsigned __int8 *)&__str, "=", &v23);
        v14 = (char *)v23;
        if ((((_DWORD)v24 - (_DWORD)v23) & 8) == 0 && v24 != v23)
        {
          v15 = 0;
          v16 = 24;
          do
          {
            v17 = (const std::string *)&v14[v16];
            v31 = (const void **)&v14[v16 - 24];
            v18 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v27, v31, (__int128 **)&v31);
            std::string::operator=((std::string *)(v18 + 7), v17);
            v15 += 2;
            v14 = (char *)v23;
            v16 += 48;
          }
          while (0xAAAAAAAAAAAAAAABLL * ((v24 - (_BYTE *)v23) >> 3) > v15);
        }
        v21[0] = &v23;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v21);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v23, "/");
        std::string::basic_string[abi:ne180100]<0>(v21, "");
        siri::dialogengine::StringReplace((uint64_t)v13, (char *)&v23, (uint64_t)v21, 0, &__str);
        if (v22 < 0)
          operator delete(v21[0]);
        if (v25 < 0)
          operator delete(v23);
        std::string::operator=((std::string *)(*a2 + 200), &__str);
        std::string::basic_string[abi:ne180100]<0>(&v23, "/");
        if (siri::dialogengine::StringStartsWith(v13, (unsigned __int8 *)&v23))
        {
          v19 = 1;
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(v21, "/");
          v19 = siri::dialogengine::StringEndsWith(&v30, (unsigned __int8 *)v21);
          if (v22 < 0)
            operator delete(v21[0]);
        }
        if (v25 < 0)
          operator delete(v23);
        v20 = *a2;
        if (v19)
          *(_BYTE *)(v20 + 225) = 1;
        else
          *(_BYTE *)(v20 + 224) = 1;
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      ++v12;
      v11 = (char *)__p[0];
    }
    while (0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3) > v12);
    v9 = *a2;
  }
  if ((std::string *)(v9 + 176) != &v27)
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>(v9 + 176, (__int128 *)v27.__r_.__value_.__l.__data_, (__int128 *)&v27.__r_.__value_.__r.__words[1]);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((_QWORD *)v27.__r_.__value_.__l.__size_);
  v27.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
}

void sub_1BF87EBE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void **p_p,_QWORD *a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;
  uint64_t v41;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a30);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v40);
  p_p = &__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_p);
  if (*(char *)(v41 - 97) < 0)
    operator delete(*(void **)(v41 - 120));
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<siri::dialogengine::ChunkTag *,std::shared_ptr<siri::dialogengine::ChunkTag>::__shared_ptr_default_delete<siri::dialogengine::ChunkTag,siri::dialogengine::ChunkTag>,std::allocator<siri::dialogengine::ChunkTag>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::ChunkTag *,std::shared_ptr<siri::dialogengine::ChunkTag>::__shared_ptr_default_delete<siri::dialogengine::ChunkTag,siri::dialogengine::ChunkTag>,std::allocator<siri::dialogengine::ChunkTag>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::ChunkTag *,std::shared_ptr<siri::dialogengine::ChunkTag>::__shared_ptr_default_delete<siri::dialogengine::ChunkTag,siri::dialogengine::ChunkTag>,std::allocator<siri::dialogengine::ChunkTag>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t siri::dialogengine::ValidateArrayItemFormat(uint64_t a1, std::string *a2, const void **a3)
{
  std::string *v5;
  uint64_t v6;
  unint64_t v7;
  std::string *v8;
  _BOOL4 v9;
  _BOOL4 v10;
  size_t v11;
  std::string *p_s1;
  const void *v13;
  std::string *v14;
  std::string::size_type size;
  std::string *v16;
  __int128 v17;
  size_t v18;
  BOOL v19;
  void *v20;
  uint64_t v21;
  std::string v23;
  std::string __s1;
  void *__p[2];
  std::string::size_type v26;
  std::string *v27;
  std::string *v28;

  siri::dialogengine::ParseFormatString(&v27, a2);
  v5 = v27;
  if (v28 != v27)
  {
    v6 = 0;
    v7 = 0;
    while (1)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "{");
      v8 = &v5[v6];
      v9 = siri::dialogengine::StringStartsWith(v8, (unsigned __int8 *)__p);
      v10 = v9;
      if (SHIBYTE(v26) < 0)
      {
        operator delete(__p[0]);
        if (!v10)
          goto LABEL_40;
      }
      else if (!v9)
      {
        goto LABEL_40;
      }
      if (*((char *)a3 + 23) >= 0)
        v11 = *((unsigned __int8 *)a3 + 23);
      else
        v11 = (size_t)a3[1];
      std::string::basic_string[abi:ne180100]((uint64_t)&__s1, v11 + 4);
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_s1 = &__s1;
      else
        p_s1 = (std::string *)__s1.__r_.__value_.__r.__words[0];
      if (v11)
      {
        if (*((char *)a3 + 23) >= 0)
          v13 = a3;
        else
          v13 = *a3;
        memmove(p_s1, v13, v11);
      }
      strcpy((char *)p_s1 + v11, "[0].");
      siri::dialogengine::GetPropName(&v23, v8);
      if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v14 = &v23;
      else
        v14 = (std::string *)v23.__r_.__value_.__r.__words[0];
      if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
      else
        size = v23.__r_.__value_.__l.__size_;
      v16 = std::string::append(&__s1, (const std::string::value_type *)v14, size);
      v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v26 = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v23.__r_.__value_.__l.__data_);
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s1.__r_.__value_.__l.__data_);
      siri::dialogengine::ResolveType(0, a1, (uint64_t)__p, 1, (uint64_t)&__s1);
      v18 = strlen(siri::dialogengine::TYPE_UNKNOWN);
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v18 == __s1.__r_.__value_.__l.__size_)
        {
          if (v18 == -1)
            std::string::__throw_out_of_range[abi:ne180100]();
          v20 = (void *)__s1.__r_.__value_.__r.__words[0];
          v19 = memcmp(__s1.__r_.__value_.__l.__data_, siri::dialogengine::TYPE_UNKNOWN, v18) == 0;
        }
        else
        {
          v19 = 0;
          v20 = (void *)__s1.__r_.__value_.__r.__words[0];
        }
        operator delete(v20);
      }
      else
      {
        v19 = v18 == HIBYTE(__s1.__r_.__value_.__r.__words[2])
           && memcmp(&__s1, siri::dialogengine::TYPE_UNKNOWN, v18) == 0;
      }
      if (SHIBYTE(v26) < 0)
        operator delete(__p[0]);
      if (v19)
      {
        v21 = 0;
        goto LABEL_44;
      }
LABEL_40:
      ++v7;
      v5 = v27;
      ++v6;
      if (v7 >= 0xAAAAAAAAAAAAAAABLL * (((char *)v28 - (char *)v27) >> 3))
      {
        v21 = 1;
        goto LABEL_44;
      }
    }
  }
  v21 = 1;
LABEL_44:
  __p[0] = &v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  return v21;
}

void sub_1BF87F048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  __p = &a27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ParseFormatString(std::string **a1, std::string *a2)
{
  std::string *p_p;
  std::string::size_type size;
  std::string *v6;
  __int128 v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  BOOL v13;
  BOOL v14;
  std::string *v15;
  std::string::size_type v16;
  char v17;
  std::string *v18;
  std::string __p;
  std::string v20;
  void *v21[2];
  std::string::size_type v22;
  __int128 v23;
  unsigned __int8 v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&v20, "{");
  std::string::basic_string[abi:ne180100]<0>(&__p, "[");
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v6 = std::string::append(&v20, (const std::string::value_type *)p_p, size);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v22 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)v21 = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "}");
  std::string::basic_string[abi:ne180100]<0>(&v23, "]");
  if ((v24 & 0x80u) == 0)
    v8 = (const std::string::value_type *)&v23;
  else
    v8 = (const std::string::value_type *)v23;
  if ((v24 & 0x80u) == 0)
    v9 = v24;
  else
    v9 = *((_QWORD *)&v23 + 1);
  v10 = std::string::append(&__p, v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if ((char)v24 < 0)
    operator delete((void *)v23);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  siri::dialogengine::StringSplitWithDelimiters(a2, (unsigned __int8 *)v21, (unsigned __int8 *)&v20, (uint64_t)a1);
  v12 = *a1;
  if ((char *)a1[1] - (char *)*a1 == 24)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "{");
    v13 = siri::dialogengine::StringStartsWith(v12, (unsigned __int8 *)&__p);
    v14 = v13;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (v14)
        goto LABEL_30;
    }
    else if (v13)
    {
      goto LABEL_30;
    }
    std::operator+<char>();
    v15 = std::string::append(&__p, "}");
    v16 = v15->__r_.__value_.__r.__words[0];
    *(_QWORD *)&v23 = v15->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)&v23 + 7) = *(std::string::size_type *)((char *)&v15->__r_.__value_.__r.__words[1] + 7);
    v17 = HIBYTE(v15->__r_.__value_.__r.__words[2]);
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v18 = *a1;
    if (SHIBYTE(v18->__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18->__r_.__value_.__l.__data_);
    v18->__r_.__value_.__r.__words[0] = v16;
    v18->__r_.__value_.__l.__size_ = v23;
    *(std::string::size_type *)((char *)&v18->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)&v23 + 7);
    *((_BYTE *)&v18->__r_.__value_.__s + 23) = v17;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_30:
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
}

void sub_1BF87F300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a15 < 0)
    operator delete(__p);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a21 < 0)
    operator delete(a16);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(a1);
}

void siri::dialogengine::GetPropName(std::string *a1, const std::string *a2)
{
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  char *v8;
  void *v9[2];
  unsigned __int8 v10;
  std::string v11;
  void *__p[2];
  int64_t v13;

  std::string::basic_string[abi:ne180100]<0>(&v11, "{");
  std::string::basic_string[abi:ne180100]<0>(v9, "}");
  if ((v10 & 0x80u) == 0)
    v4 = v9;
  else
    v4 = (void **)v9[0];
  if ((v10 & 0x80u) == 0)
    v5 = v10;
  else
    v5 = (std::string::size_type)v9[1];
  v6 = std::string::append(&v11, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v13 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (v13 >= 0)
    v8 = (char *)__p;
  else
    v8 = (char *)__p[0];
  siri::dialogengine::StringTrim(v8, a2, a1);
  if (SHIBYTE(v13) < 0)
    operator delete(__p[0]);
  if ((char)v10 < 0)
    operator delete(v9[0]);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_1BF87F4A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::FormatArrayItem(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, const void **a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::string __p;
  std::string v22;
  void *v23[2];
  __int128 v24;
  std::string v25;

  siri::dialogengine::GetArrayElementType(a6, &v25);
  v13 = *(_QWORD *)(a2 + 72);
  if (a3 >= (*(_QWORD *)(a2 + 80) - v13) >> 4)
  {
    v15 = 0;
    v24 = 0uLL;
  }
  else
  {
    v14 = *(_OWORD *)(v13 + 16 * a3);
    v24 = v14;
    v15 = v14;
    if (*((_QWORD *)&v14 + 1))
    {
      v16 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
  }
  v18 = *(unsigned __int8 *)(a4 + 23);
  if ((v18 & 0x80u) != 0)
    v18 = *(_QWORD *)(a4 + 8);
  if (v18)
  {
    siri::dialogengine::SpeakableString::SpeakableString((uint64_t)v23, a4);
    siri::dialogengine::FormatArrayItemPart(&v22, a1, a3, (uint64_t)v23, a5, (uint64_t)&v25, 1);
    siri::dialogengine::FormatArrayItemPart(&__p, a1, a3, (uint64_t)v23, a5, (uint64_t)&v25, 0);
    siri::dialogengine::SpeakableString::SpeakableString(a7, &v22, &__p);
  }
  (*(void (**)(uint64_t, uint64_t, std::string *))(*(_QWORD *)v15 + 56))(v15, a1, &v25);
  if (*((_QWORD *)&v24 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v24 + 1) + 16))(*((_QWORD *)&v24 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v24 + 1));
    }
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
}

void sub_1BF87F6F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  uint64_t v22;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v22 - 112);
  if (*(char *)(v22 - 65) < 0)
    operator delete(*(void **)(v22 - 88));
  _Unwind_Resume(a1);
}

void siri::dialogengine::FormatArrayItemPart(std::string *a1, uint64_t a2, unint64_t a3, uint64_t a4, const void **a5, uint64_t a6, int a7)
{
  uint64_t v11;
  uint64_t v12;
  std::string *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  std::string *v17;
  uint64_t v18;
  _BOOL4 v19;
  _BOOL4 v20;
  size_t v21;
  std::string *v22;
  const void *v23;
  std::string *v24;
  std::string::size_type size;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  std::string::size_type v31;
  std::string *v32;
  __int128 v33;
  char *v34;
  _BOOL4 v35;
  _BOOL4 v36;
  const siri::dialogengine::ChunkTag *v37;
  const siri::dialogengine::ChunkTag *v38;
  siri::dialogengine *v39;
  std::string::size_type v40;
  std::string::size_type v41;
  std::__shared_weak_count *v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  uint64_t v45;
  unint64_t v46;
  std::string::size_type *v47;
  std::string::size_type *v48;
  std::string::size_type v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::string *v53;
  std::string::size_type v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  std::string::size_type *p_size;
  std::string::size_type v60;
  _QWORD *v61;
  uint64_t v62;
  _OWORD *v63;
  std::string *v64;
  std::string::size_type v65;
  int v66;
  const std::string::value_type *v67;
  std::string::size_type v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  _QWORD *v78;
  _QWORD *v79;
  char *v80;
  __int128 v81;
  int64x2_t v82;
  int v83;
  const std::string::value_type *v84;
  std::string::size_type v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  std::string::size_type v93;
  unint64_t *v94;
  unint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  char *v98;
  __int128 v99;
  int64x2_t v100;
  std::string::size_type v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  _OWORD *v105;
  std::string::size_type v106;
  unint64_t *v107;
  unint64_t v108;
  int v109;
  const void ***v110;
  std::string::size_type v111;
  size_t v112;
  std::string *v113;
  std::string *v114;
  std::string *v115;
  std::string::size_type v116;
  std::string *v117;
  __int128 v118;
  std::string *v119;
  std::string::size_type v120;
  std::string *v121;
  std::string *v122;
  BOOL v123;
  std::string::size_type v124;
  _OWORD *v125;
  std::string *v126;
  __int128 v127;
  std::string *v128;
  __int128 v129;
  std::string *v130;
  std::string::size_type v131;
  std::string *v132;
  __int128 v133;
  std::string *v134;
  std::string::size_type v135;
  char v136;
  std::string *v137;
  __int128 v138;
  std::string *v139;
  std::string::size_type v140;
  char v141;
  void *v142;
  std::string *v143;
  __int128 v144;
  std::string *v145;
  __int128 v146;
  std::string *v147;
  std::string::size_type v148;
  std::string *v149;
  __int128 v150;
  std::string *v151;
  std::string::size_type v152;
  char v153;
  uint64_t v154;
  std::string::size_type v155;
  _QWORD *v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  _OWORD *v167;
  unint64_t v168;
  unint64_t v169;
  char *v170;
  uint64_t v171;
  std::string::size_type v172;
  int64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  char *v177;
  int64x2_t v178;
  std::string::size_type v179;
  std::string::size_type v180;
  _OWORD *v181;
  _QWORD *v182;
  _QWORD *v183;
  __int128 v184;
  uint64_t v185;
  std::string::size_type v186;
  char *v187;
  std::string::size_type v188;
  _QWORD *v189;
  _QWORD *v190;
  uint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  unint64_t v196;
  char *v197;
  uint64_t v198;
  std::string::size_type *v199;
  _QWORD *v200;
  _QWORD *v201;
  char *v202;
  __int128 v203;
  int64x2_t v204;
  std::string::size_type v205;
  std::string::size_type *v206;
  std::string::size_type *v207;
  std::string::size_type v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  std::string *v212;
  std::string::size_type v213;
  unint64_t *v214;
  unint64_t v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  uint64_t v219;
  std::string *v220;
  uint64_t v221;
  std::string *v222;
  std::string v225;
  std::string v226;
  void *v227;
  char v228;
  void *v229;
  char v230;
  void *v231;
  char v232;
  void *v233;
  char v234;
  void *__p;
  char v236;
  int v237;
  siri::dialogengine *v238;
  std::__shared_weak_count *v239;
  __int128 v240;
  _QWORD v241[2];
  uint64_t v242;
  std::__shared_weak_count *v243;
  std::string *v244;
  std::string *v245;
  std::string v246;
  std::string v247;
  std::string v248;
  std::string v249;
  std::string v250;
  std::string v251;
  char *v252;
  _QWORD *v253;
  _QWORD v254[2];
  std::string v255;
  uint64_t v256;

  v256 = *MEMORY[0x1E0C80C00];
  memset(&v246, 0, sizeof(v246));
  v11 = a4 + 24;
  v12 = 24;
  if (a7 == 1)
  {
    v12 = 0;
    v11 = a4;
  }
  if (*(char *)(v11 + 23) < 0)
    std::string::__init_copy_ctor_external(&v225, *(const std::string::value_type **)(a4 + v12), *(_QWORD *)(v11 + 8));
  else
    v225 = *(std::string *)v11;
  siri::dialogengine::ParseFormatString(&v244, &v225);
  if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v225.__r_.__value_.__l.__data_);
  v243 = 0;
  v242 = 0;
  v240 = 0uLL;
  v241[0] = 0;
  v13 = v244;
  if (v245 == v244)
    goto LABEL_396;
  v14 = 0;
  v15 = 0;
  v220 = a1;
  v16 = 24;
  if (a7 == 1)
    v16 = 0;
  v221 = v16;
  if (a7 == 1)
    v17 = &v225;
  else
    v17 = &v226;
  v222 = v17;
  do
  {
    std::string::basic_string[abi:ne180100]<0>(&v225, "{");
    v18 = (uint64_t)&v13[v15];
    v19 = siri::dialogengine::StringStartsWith((std::string *)v18, (unsigned __int8 *)&v225);
    v20 = v19;
    if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v225.__r_.__value_.__l.__data_);
      if (!v20)
        goto LABEL_60;
LABEL_17:
      if (*((char *)a5 + 23) >= 0)
        v21 = *((unsigned __int8 *)a5 + 23);
      else
        v21 = (size_t)a5[1];
      std::string::basic_string[abi:ne180100]((uint64_t)&v249, v21 + 1);
      if ((v249.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = &v249;
      else
        v22 = (std::string *)v249.__r_.__value_.__r.__words[0];
      if (v21)
      {
        if (*((char *)a5 + 23) >= 0)
          v23 = a5;
        else
          v23 = *a5;
        memmove(v22, v23, v21);
      }
      *(_WORD *)((char *)&v22->__r_.__value_.__l.__data_ + v21) = 91;
      std::to_string(&v248, a3);
      if ((v248.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v24 = &v248;
      else
        v24 = (std::string *)v248.__r_.__value_.__r.__words[0];
      if ((v248.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v248.__r_.__value_.__r.__words[2]);
      else
        size = v248.__r_.__value_.__l.__size_;
      v26 = std::string::append(&v249, (const std::string::value_type *)v24, size);
      v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v250.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v250.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      v28 = std::string::append(&v250, "].");
      v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v225.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v225.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::GetPropName(&v255, (const std::string *)v18);
      if ((v255.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v30 = &v255;
      else
        v30 = (std::string *)v255.__r_.__value_.__r.__words[0];
      if ((v255.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v31 = HIBYTE(v255.__r_.__value_.__r.__words[2]);
      else
        v31 = v255.__r_.__value_.__l.__size_;
      v32 = std::string::append(&v225, (const std::string::value_type *)v30, v31);
      v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
      v251.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v251.__r_.__value_.__l.__data_ = v33;
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v255.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v255.__r_.__value_.__l.__data_);
      if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v225.__r_.__value_.__l.__data_);
      if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v250.__r_.__value_.__l.__data_);
      if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v248.__r_.__value_.__l.__data_);
      if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v249.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&v225, "");
      std::string::basic_string[abi:ne180100]<0>(&v250, "");
      siri::dialogengine::ResolveValue(a2, (uint64_t)&v251, 0, (uint64_t)&v225, (uint64_t)&v250, (uint64_t *)&v249);
      if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v250.__r_.__value_.__l.__data_);
      if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v225.__r_.__value_.__l.__data_);
      if (!v249.__r_.__value_.__r.__words[0])
      {
LABEL_188:
        v102 = (std::__shared_weak_count *)v249.__r_.__value_.__l.__size_;
        if (v249.__r_.__value_.__l.__size_)
        {
          v103 = (unint64_t *)(v249.__r_.__value_.__l.__size_ + 8);
          do
            v104 = __ldaxr(v103);
          while (__stlxr(v104 - 1, v103));
          if (!v104)
          {
            ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
            std::__shared_weak_count::__release_weak(v102);
          }
        }
        if (SHIBYTE(v251.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v251.__r_.__value_.__l.__data_);
        goto LABEL_202;
      }
      (*(void (**)(std::string *__return_ptr, std::string::size_type, uint64_t, uint64_t))(*(_QWORD *)v249.__r_.__value_.__l.__data_
                                                                                                  + 56))(&v225, v249.__r_.__value_.__r.__words[0], a2, a6);
      v34 = (char *)&v225.__r_.__value_.__r.__words[2] + 7;
      if (a7 != 1)
        v34 = (char *)&v226.__r_.__value_.__r.__words[2] + 7;
      if (*v34 < 0)
      {
        p_size = &v225.__r_.__value_.__l.__size_;
        if (a7 != 1)
          p_size = &v226.__r_.__value_.__l.__size_;
        std::string::__init_copy_ctor_external(&v250, *(const std::string::value_type **)((char *)&v225.__r_.__value_.__l.__data_ + v221), *p_size);
      }
      else
      {
        v250 = *v222;
      }
      if (v236 < 0)
        operator delete(__p);
      if (v234 < 0)
        operator delete(v233);
      if (v232 < 0)
        operator delete(v231);
      if (v230 < 0)
        operator delete(v229);
      if (v228 < 0)
        operator delete(v227);
      if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v226.__r_.__value_.__l.__data_);
      if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v225.__r_.__value_.__l.__data_);
        if ((v14 & 1) != 0)
          goto LABEL_130;
      }
      else if ((v14 & 1) != 0)
      {
LABEL_130:
        v60 = operator new();
        siri::dialogengine::ChunkText::ChunkText(v60, (uint64_t)&v250);
        v248.__r_.__value_.__r.__words[0] = v60;
        v61 = (_QWORD *)operator new();
        *v61 = &off_1E7939CE8;
        v61[1] = 0;
        v61[2] = 0;
        v61[3] = v60;
        v248.__r_.__value_.__l.__size_ = (std::string::size_type)v61;
        v62 = *((_QWORD *)&v240 + 1);
        if (*((_QWORD *)&v240 + 1) >= v241[0])
        {
          v72 = (uint64_t)(*((_QWORD *)&v240 + 1) - v240) >> 4;
          if ((unint64_t)(v72 + 1) >> 60)
            std::vector<BOOL>::__throw_length_error[abi:ne180100]();
          v73 = (uint64_t)(v241[0] - v240) >> 3;
          if (v73 <= v72 + 1)
            v73 = v72 + 1;
          if (v241[0] - (_QWORD)v240 >= 0x7FFFFFFFFFFFFFF0uLL)
            v74 = 0xFFFFFFFFFFFFFFFLL;
          else
            v74 = v73;
          v226.__r_.__value_.__l.__size_ = (std::string::size_type)v241;
          v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v74);
          v77 = &v75[16 * v72];
          *(_OWORD *)v77 = *(_OWORD *)&v248.__r_.__value_.__l.__data_;
          *(_OWORD *)&v248.__r_.__value_.__l.__data_ = 0uLL;
          v78 = (_QWORD *)*((_QWORD *)&v240 + 1);
          v79 = (_QWORD *)v240;
          if (*((_QWORD *)&v240 + 1) == (_QWORD)v240)
          {
            v82 = vdupq_n_s64(*((unint64_t *)&v240 + 1));
            v80 = &v75[16 * v72];
          }
          else
          {
            v80 = &v75[16 * v72];
            do
            {
              v81 = *((_OWORD *)v78 - 1);
              v78 -= 2;
              *((_OWORD *)v80 - 1) = v81;
              v80 -= 16;
              *v78 = 0;
              v78[1] = 0;
            }
            while (v78 != v79);
            v82 = (int64x2_t)v240;
          }
          v63 = v77 + 16;
          *(_QWORD *)&v240 = v80;
          *((_QWORD *)&v240 + 1) = v77 + 16;
          *(int64x2_t *)&v225.__r_.__value_.__r.__words[1] = v82;
          v101 = v241[0];
          v241[0] = &v75[16 * v76];
          v226.__r_.__value_.__r.__words[0] = v101;
          v225.__r_.__value_.__r.__words[0] = v82.i64[0];
          std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)&v225);
        }
        else
        {
          **((_OWORD **)&v240 + 1) = *(_OWORD *)&v248.__r_.__value_.__l.__data_;
          v63 = (_OWORD *)(v62 + 16);
        }
        *((_QWORD *)&v240 + 1) = v63;
        goto LABEL_186;
      }
      if ((v250.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v64 = &v250;
      else
        v64 = (std::string *)v250.__r_.__value_.__r.__words[0];
      if ((v250.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v65 = HIBYTE(v250.__r_.__value_.__r.__words[2]);
      else
        v65 = v250.__r_.__value_.__l.__size_;
      std::string::append(&v246, (const std::string::value_type *)v64, v65);
LABEL_186:
      if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v250.__r_.__value_.__l.__data_);
      goto LABEL_188;
    }
    if (v19)
      goto LABEL_17;
LABEL_60:
    std::string::basic_string[abi:ne180100]<0>(&v225, "[");
    v35 = siri::dialogengine::StringStartsWith((std::string *)v18, (unsigned __int8 *)&v225);
    v36 = v35;
    if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v225.__r_.__value_.__l.__data_);
      if (v36)
        goto LABEL_62;
LABEL_69:
      if ((v14 & 1) != 0)
      {
        v41 = operator new();
        siri::dialogengine::ChunkText::ChunkText(v41, v18);
        v251.__r_.__value_.__r.__words[0] = v41;
        v42 = (std::__shared_weak_count *)operator new();
        v43 = v42;
        v42->__shared_owners_ = 0;
        p_shared_owners = (unint64_t *)&v42->__shared_owners_;
        v42->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7939CE8;
        v42->__shared_weak_owners_ = 0;
        v42[1].__vftable = (std::__shared_weak_count_vtbl *)v41;
        v251.__r_.__value_.__l.__size_ = (std::string::size_type)v42;
        v45 = *((_QWORD *)&v240 + 1);
        if (*((_QWORD *)&v240 + 1) >= v241[0])
        {
          v86 = (uint64_t)(*((_QWORD *)&v240 + 1) - v240) >> 4;
          v87 = v86 + 1;
          if ((unint64_t)(v86 + 1) >> 60)
            std::vector<BOOL>::__throw_length_error[abi:ne180100]();
          v88 = v241[0] - v240;
          if ((uint64_t)(v241[0] - v240) >> 3 > v87)
            v87 = v88 >> 3;
          if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFF0)
            v89 = 0xFFFFFFFFFFFFFFFLL;
          else
            v89 = v87;
          v226.__r_.__value_.__l.__size_ = (std::string::size_type)v241;
          v90 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v89);
          v92 = &v90[16 * v86];
          v93 = v251.__r_.__value_.__l.__size_;
          *(_OWORD *)v92 = *(_OWORD *)&v251.__r_.__value_.__l.__data_;
          if (v93)
          {
            v94 = (unint64_t *)(v93 + 8);
            do
              v95 = __ldxr(v94);
            while (__stxr(v95 + 1, v94));
          }
          v96 = (_QWORD *)*((_QWORD *)&v240 + 1);
          v97 = (_QWORD *)v240;
          if (*((_QWORD *)&v240 + 1) == (_QWORD)v240)
          {
            v100 = vdupq_n_s64(*((unint64_t *)&v240 + 1));
            v98 = &v90[16 * v86];
          }
          else
          {
            v98 = &v90[16 * v86];
            do
            {
              v99 = *((_OWORD *)v96 - 1);
              v96 -= 2;
              *((_OWORD *)v98 - 1) = v99;
              v98 -= 16;
              *v96 = 0;
              v96[1] = 0;
            }
            while (v96 != v97);
            v100 = (int64x2_t)v240;
          }
          v105 = v92 + 16;
          *(_QWORD *)&v240 = v98;
          *((_QWORD *)&v240 + 1) = v92 + 16;
          *(int64x2_t *)&v225.__r_.__value_.__r.__words[1] = v100;
          v106 = v241[0];
          v241[0] = &v90[16 * v91];
          v226.__r_.__value_.__r.__words[0] = v106;
          v225.__r_.__value_.__r.__words[0] = v100.i64[0];
          std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)&v225);
          v43 = (std::__shared_weak_count *)v251.__r_.__value_.__l.__size_;
          *((_QWORD *)&v240 + 1) = v105;
          if (!v251.__r_.__value_.__l.__size_)
            goto LABEL_201;
        }
        else
        {
          **((_QWORD **)&v240 + 1) = v251.__r_.__value_.__r.__words[0];
          *(_QWORD *)(v45 + 8) = v42;
          do
            v46 = __ldxr(p_shared_owners);
          while (__stxr(v46 + 1, p_shared_owners));
          *((_QWORD *)&v240 + 1) = v45 + 16;
        }
        v107 = (unint64_t *)&v43->__shared_owners_;
        do
          v108 = __ldaxr(v107);
        while (__stlxr(v108 - 1, v107));
        if (!v108)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
LABEL_201:
        v14 = 1;
        goto LABEL_202;
      }
      v47 = (std::string::size_type *)*((_QWORD *)&v240 + 1);
      v48 = (std::string::size_type *)v240;
      if (*((_QWORD *)&v240 + 1) == (_QWORD)v240)
      {
LABEL_163:
        v83 = *(char *)(v18 + 23);
        if (v83 >= 0)
          v84 = (const std::string::value_type *)v18;
        else
          v84 = *(const std::string::value_type **)v18;
        if (v83 >= 0)
          v85 = *(unsigned __int8 *)(v18 + 23);
        else
          v85 = *(_QWORD *)(v18 + 8);
        std::string::append(&v246, v84, v85);
        v14 = 0;
        goto LABEL_202;
      }
      while (1)
      {
        v49 = *v48;
        v50 = (std::__shared_weak_count *)v48[1];
        v250.__r_.__value_.__r.__words[0] = *v48;
        v250.__r_.__value_.__l.__size_ = (std::string::size_type)v50;
        if (v50)
        {
          v51 = (unint64_t *)&v50->__shared_owners_;
          do
            v52 = __ldxr(v51);
          while (__stxr(v52 + 1, v51));
        }
        siri::dialogengine::SpeakableString::SpeakableString(&v225, (const siri::dialogengine::SpeakableString *)(v49 + 8));
        if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v251, v226.__r_.__value_.__l.__data_, v226.__r_.__value_.__l.__size_);
        else
          v251 = v226;
        if ((v251.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v53 = &v251;
        else
          v53 = (std::string *)v251.__r_.__value_.__r.__words[0];
        if ((v251.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v54 = HIBYTE(v251.__r_.__value_.__r.__words[2]);
        else
          v54 = v251.__r_.__value_.__l.__size_;
        std::string::append(&v246, (const std::string::value_type *)v53, v54);
        if (SHIBYTE(v251.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v251.__r_.__value_.__l.__data_);
        if (v236 < 0)
          operator delete(__p);
        if (v234 < 0)
          operator delete(v233);
        if (v232 < 0)
          operator delete(v231);
        if (v230 < 0)
          operator delete(v229);
        if (v228 < 0)
          operator delete(v227);
        if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v226.__r_.__value_.__l.__data_);
        if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v225.__r_.__value_.__l.__data_);
          if (v50)
          {
LABEL_105:
            v55 = (unint64_t *)&v50->__shared_owners_;
            do
              v56 = __ldaxr(v55);
            while (__stlxr(v56 - 1, v55));
            if (!v56)
            {
              ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
              std::__shared_weak_count::__release_weak(v50);
            }
          }
        }
        else if (v50)
        {
          goto LABEL_105;
        }
        v48 += 2;
        if (v48 == v47)
        {
          v57 = *((_QWORD *)&v240 + 1);
          v58 = v240;
          while (v57 != v58)
            v57 = std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v57 - 16);
          *((_QWORD *)&v240 + 1) = v58;
          goto LABEL_163;
        }
      }
    }
    if (!v35)
      goto LABEL_69;
LABEL_62:
    siri::dialogengine::ConvertItemFormatSSMLToTag((const std::string *)v18, (uint64_t *)&v238);
    if (v238)
    {
      if (siri::dialogengine::IsSSMLTag(v238, v37))
      {
        if (!siri::dialogengine::IsSSMLTag(v238, v38))
          goto LABEL_147;
        v39 = v238;
        if (*((_BYTE *)v238 + 225))
        {
          std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&v225, (const void ***)v238 + 22);
          v40 = v225.__r_.__value_.__r.__words[2];
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((_QWORD *)v225.__r_.__value_.__l.__size_);
          v39 = v238;
          if (v40)
          {
            std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100](&v242, (uint64_t)v238, (uint64_t)v239);
            v14 = 0;
            v39 = v238;
          }
          else
          {
            v14 = 0;
          }
        }
        if (*((_BYTE *)v39 + 224))
        {
          std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100](&v242, (uint64_t)v39, (uint64_t)v239);
          v14 = 1;
        }
        siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)&v225, (const siri::dialogengine::RequestInfo *)(a2 + 8));
        v109 = v237;
        siri::dialogengine::RequestInfo::~RequestInfo((void **)&v225.__r_.__value_.__l.__data_);
        if ((a7 != 0) | v14 & 1)
          goto LABEL_147;
        if (v109 == 2)
        {
          siri::dialogengine::ConvertSSMLToTTSCode((siri::dialogengine::Context *)a2, v242, (uint64_t)&v240);
        }
        else if (!v109)
        {
          memset(&v250, 0, sizeof(v250));
          memset(&v249, 0, sizeof(v249));
          memset(&v248, 0, sizeof(v248));
          v219 = v242;
          v110 = (const void ***)(v242 + 176);
          std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&v251, (const void ***)(v242 + 176));
          v111 = v251.__r_.__value_.__r.__words[0];
          if ((std::string::size_type *)v251.__r_.__value_.__l.__data_ != &v251.__r_.__value_.__r.__words[1])
          {
            do
            {
              std::pair<std::string const,std::string>::pair[abi:ne180100](&v225, (__int128 *)(v111 + 32));
              if ((v225.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v112 = HIBYTE(v225.__r_.__value_.__r.__words[2]);
              else
                v112 = v225.__r_.__value_.__l.__size_;
              std::string::basic_string[abi:ne180100]((uint64_t)&v247, v112 + 1);
              if ((v247.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v113 = &v247;
              else
                v113 = (std::string *)v247.__r_.__value_.__r.__words[0];
              if (v112)
              {
                if ((v225.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v114 = &v225;
                else
                  v114 = (std::string *)v225.__r_.__value_.__r.__words[0];
                memmove(v113, v114, v112);
              }
              *(_WORD *)((char *)&v113->__r_.__value_.__l.__data_ + v112) = 61;
              if ((v226.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v115 = &v226;
              else
                v115 = (std::string *)v226.__r_.__value_.__r.__words[0];
              if ((v226.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v116 = HIBYTE(v226.__r_.__value_.__r.__words[2]);
              else
                v116 = v226.__r_.__value_.__l.__size_;
              v117 = std::string::append(&v247, (const std::string::value_type *)v115, v116);
              v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
              v255.__r_.__value_.__r.__words[2] = v117->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v255.__r_.__value_.__l.__data_ = v118;
              v117->__r_.__value_.__l.__size_ = 0;
              v117->__r_.__value_.__r.__words[2] = 0;
              v117->__r_.__value_.__r.__words[0] = 0;
              if ((v255.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v119 = &v255;
              else
                v119 = (std::string *)v255.__r_.__value_.__r.__words[0];
              if ((v255.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v120 = HIBYTE(v255.__r_.__value_.__r.__words[2]);
              else
                v120 = v255.__r_.__value_.__l.__size_;
              std::string::append(&v250, (const std::string::value_type *)v119, v120);
              if (SHIBYTE(v255.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v255.__r_.__value_.__l.__data_);
              if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v247.__r_.__value_.__l.__data_);
              if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v226.__r_.__value_.__l.__data_);
              if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v225.__r_.__value_.__l.__data_);
              v121 = *(std::string **)(v111 + 8);
              if (v121)
              {
                do
                {
                  v122 = v121;
                  v121 = (std::string *)v121->__r_.__value_.__r.__words[0];
                }
                while (v121);
              }
              else
              {
                do
                {
                  v122 = *(std::string **)(v111 + 16);
                  v123 = v122->__r_.__value_.__r.__words[0] == v111;
                  v111 = (std::string::size_type)v122;
                }
                while (!v123);
              }
              v111 = (std::string::size_type)v122;
            }
            while (v122 != (std::string *)&v251.__r_.__value_.__r.__words[1]);
          }
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((_QWORD *)v251.__r_.__value_.__l.__size_);
          if (*(_BYTE *)(v219 + 225)
            && (std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&v225, v110),
                v124 = v225.__r_.__value_.__r.__words[2],
                std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((_QWORD *)v225.__r_.__value_.__l.__size_),
                v124))
          {
            if (*(char *)(v219 + 223) < 0)
              std::string::__init_copy_ctor_external(&v247, *(const std::string::value_type **)(v219 + 200), *(_QWORD *)(v219 + 208));
            else
              v247 = *(std::string *)(v219 + 200);
            v143 = std::string::insert(&v247, 0, "<");
            v144 = *(_OWORD *)&v143->__r_.__value_.__l.__data_;
            v255.__r_.__value_.__r.__words[2] = v143->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v255.__r_.__value_.__l.__data_ = v144;
            v143->__r_.__value_.__l.__size_ = 0;
            v143->__r_.__value_.__r.__words[2] = 0;
            v143->__r_.__value_.__r.__words[0] = 0;
            v145 = std::string::append(&v255, " ");
            v146 = *(_OWORD *)&v145->__r_.__value_.__l.__data_;
            v251.__r_.__value_.__r.__words[2] = v145->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v251.__r_.__value_.__l.__data_ = v146;
            v145->__r_.__value_.__l.__size_ = 0;
            v145->__r_.__value_.__r.__words[2] = 0;
            v145->__r_.__value_.__r.__words[0] = 0;
            if ((v250.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v147 = &v250;
            else
              v147 = (std::string *)v250.__r_.__value_.__r.__words[0];
            if ((v250.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v148 = HIBYTE(v250.__r_.__value_.__r.__words[2]);
            else
              v148 = v250.__r_.__value_.__l.__size_;
            v149 = std::string::append(&v251, (const std::string::value_type *)v147, v148);
            v150 = *(_OWORD *)&v149->__r_.__value_.__l.__data_;
            v225.__r_.__value_.__r.__words[2] = v149->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v225.__r_.__value_.__l.__data_ = v150;
            v149->__r_.__value_.__l.__size_ = 0;
            v149->__r_.__value_.__r.__words[2] = 0;
            v149->__r_.__value_.__r.__words[0] = 0;
            v151 = std::string::append(&v225, "/>");
            v152 = v151->__r_.__value_.__r.__words[0];
            v254[0] = v151->__r_.__value_.__l.__size_;
            *(_QWORD *)((char *)v254 + 7) = *(std::string::size_type *)((char *)&v151->__r_.__value_.__r.__words[1] + 7);
            v153 = HIBYTE(v151->__r_.__value_.__r.__words[2]);
            v151->__r_.__value_.__l.__size_ = 0;
            v151->__r_.__value_.__r.__words[2] = 0;
            v151->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v249.__r_.__value_.__l.__data_);
            v249.__r_.__value_.__r.__words[0] = v152;
            v249.__r_.__value_.__l.__size_ = v254[0];
            *(std::string::size_type *)((char *)&v249.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v254 + 7);
            *((_BYTE *)&v249.__r_.__value_.__s + 23) = v153;
            if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v225.__r_.__value_.__l.__data_);
            if (SHIBYTE(v251.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v251.__r_.__value_.__l.__data_);
            if (SHIBYTE(v255.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v255.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v247.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_299;
            v142 = (void *)v247.__r_.__value_.__r.__words[0];
          }
          else
          {
            v125 = (_OWORD *)(v219 + 200);
            if (*(char *)(v219 + 223) < 0)
            {
              std::string::__init_copy_ctor_external(&v247, *(const std::string::value_type **)(v219 + 200), *(_QWORD *)(v219 + 208));
            }
            else
            {
              *(_OWORD *)&v247.__r_.__value_.__l.__data_ = *v125;
              v247.__r_.__value_.__r.__words[2] = *(_QWORD *)(v219 + 216);
            }
            v126 = std::string::insert(&v247, 0, "<");
            v127 = *(_OWORD *)&v126->__r_.__value_.__l.__data_;
            v255.__r_.__value_.__r.__words[2] = v126->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v255.__r_.__value_.__l.__data_ = v127;
            v126->__r_.__value_.__l.__size_ = 0;
            v126->__r_.__value_.__r.__words[2] = 0;
            v126->__r_.__value_.__r.__words[0] = 0;
            v128 = std::string::append(&v255, " ");
            v129 = *(_OWORD *)&v128->__r_.__value_.__l.__data_;
            v251.__r_.__value_.__r.__words[2] = v128->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v251.__r_.__value_.__l.__data_ = v129;
            v128->__r_.__value_.__l.__size_ = 0;
            v128->__r_.__value_.__r.__words[2] = 0;
            v128->__r_.__value_.__r.__words[0] = 0;
            if ((v250.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v130 = &v250;
            else
              v130 = (std::string *)v250.__r_.__value_.__r.__words[0];
            if ((v250.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v131 = HIBYTE(v250.__r_.__value_.__r.__words[2]);
            else
              v131 = v250.__r_.__value_.__l.__size_;
            v132 = std::string::append(&v251, (const std::string::value_type *)v130, v131);
            v133 = *(_OWORD *)&v132->__r_.__value_.__l.__data_;
            v225.__r_.__value_.__r.__words[2] = v132->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v225.__r_.__value_.__l.__data_ = v133;
            v132->__r_.__value_.__l.__size_ = 0;
            v132->__r_.__value_.__r.__words[2] = 0;
            v132->__r_.__value_.__r.__words[0] = 0;
            v134 = std::string::append(&v225, ">");
            v135 = v134->__r_.__value_.__r.__words[0];
            v254[0] = v134->__r_.__value_.__l.__size_;
            *(_QWORD *)((char *)v254 + 7) = *(std::string::size_type *)((char *)&v134->__r_.__value_.__r.__words[1] + 7);
            v136 = HIBYTE(v134->__r_.__value_.__r.__words[2]);
            v134->__r_.__value_.__l.__size_ = 0;
            v134->__r_.__value_.__r.__words[2] = 0;
            v134->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v249.__r_.__value_.__l.__data_);
            v249.__r_.__value_.__r.__words[0] = v135;
            v249.__r_.__value_.__l.__size_ = v254[0];
            *(std::string::size_type *)((char *)&v249.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v254 + 7);
            *((_BYTE *)&v249.__r_.__value_.__s + 23) = v136;
            if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v225.__r_.__value_.__l.__data_);
            if (SHIBYTE(v251.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v251.__r_.__value_.__l.__data_);
            if (SHIBYTE(v255.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v255.__r_.__value_.__l.__data_);
            if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v247.__r_.__value_.__l.__data_);
            if (*(char *)(v219 + 223) < 0)
            {
              std::string::__init_copy_ctor_external(&v251, *(const std::string::value_type **)(v219 + 200), *(_QWORD *)(v219 + 208));
            }
            else
            {
              *(_OWORD *)&v251.__r_.__value_.__l.__data_ = *v125;
              v251.__r_.__value_.__r.__words[2] = *(_QWORD *)(v219 + 216);
            }
            v137 = std::string::insert(&v251, 0, "</");
            v138 = *(_OWORD *)&v137->__r_.__value_.__l.__data_;
            v225.__r_.__value_.__r.__words[2] = v137->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v225.__r_.__value_.__l.__data_ = v138;
            v137->__r_.__value_.__l.__size_ = 0;
            v137->__r_.__value_.__r.__words[2] = 0;
            v137->__r_.__value_.__r.__words[0] = 0;
            v139 = std::string::append(&v225, ">");
            v140 = v139->__r_.__value_.__r.__words[0];
            v255.__r_.__value_.__r.__words[0] = v139->__r_.__value_.__l.__size_;
            *(std::string::size_type *)((char *)v255.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v139->__r_.__value_.__r.__words[1] + 7);
            v141 = HIBYTE(v139->__r_.__value_.__r.__words[2]);
            v139->__r_.__value_.__l.__size_ = 0;
            v139->__r_.__value_.__r.__words[2] = 0;
            v139->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v248.__r_.__value_.__l.__data_);
            v248.__r_.__value_.__r.__words[0] = v140;
            v248.__r_.__value_.__l.__size_ = v255.__r_.__value_.__r.__words[0];
            *(std::string::size_type *)((char *)&v248.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v255.__r_.__value_.__r.__words + 7);
            *((_BYTE *)&v248.__r_.__value_.__s + 23) = v141;
            if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v225.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v251.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_299;
            v142 = (void *)v251.__r_.__value_.__r.__words[0];
          }
          operator delete(v142);
LABEL_299:
          v154 = v240;
          v155 = operator new();
          siri::dialogengine::ChunkText::ChunkText(v155, (uint64_t)&v249);
          v255.__r_.__value_.__r.__words[0] = v155;
          v156 = (_QWORD *)operator new();
          *v156 = &off_1E7939CE8;
          v156[1] = 0;
          v156[2] = 0;
          v156[3] = v155;
          v255.__r_.__value_.__l.__size_ = (std::string::size_type)v156;
          if (*((_QWORD *)&v240 + 1) >= v241[0])
          {
            v160 = v240;
            v161 = ((uint64_t)(*((_QWORD *)&v240 + 1) - v240) >> 4) + 1;
            if (v161 >> 60)
              std::vector<BOOL>::__throw_length_error[abi:ne180100]();
            v162 = v241[0] - v240;
            if ((uint64_t)(v241[0] - v240) >> 3 > v161)
              v161 = v162 >> 3;
            if ((unint64_t)v162 >= 0x7FFFFFFFFFFFFFF0)
              v163 = 0xFFFFFFFFFFFFFFFLL;
            else
              v163 = v161;
            v253 = v241;
            if (v163)
              v163 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v163);
            else
              v164 = 0;
            v165 = v154 - v160;
            v166 = (v154 - v160) >> 4;
            v167 = (_OWORD *)(v163 + 16 * v166);
            v251.__r_.__value_.__r.__words[0] = v163;
            v251.__r_.__value_.__l.__size_ = (std::string::size_type)v167;
            v251.__r_.__value_.__r.__words[2] = (std::string::size_type)v167;
            v252 = (char *)(v163 + 16 * v164);
            if (v166 == v164)
            {
              if (v165 < 1)
              {
                if (v154 == v160)
                  v169 = 1;
                else
                  v169 = v165 >> 3;
                v226.__r_.__value_.__l.__size_ = (std::string::size_type)v253;
                v170 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v169);
                v172 = v251.__r_.__value_.__l.__size_;
                v173 = v251.__r_.__value_.__r.__words[2] - v251.__r_.__value_.__l.__size_;
                if (v251.__r_.__value_.__r.__words[2] == v251.__r_.__value_.__l.__size_)
                {
                  v178 = vdupq_n_s64(v251.__r_.__value_.__l.__size_);
                  v175 = (unint64_t)&v170[16 * (v169 >> 2)];
                }
                else
                {
                  v174 = v173 >> 4;
                  v175 = (unint64_t)&v170[16 * (v169 >> 2) + (v173 & 0xFFFFFFFFFFFFFFF0)];
                  v176 = 16 * v174;
                  v177 = &v170[16 * (v169 >> 2)];
                  do
                  {
                    *(_OWORD *)v177 = *(_OWORD *)v172;
                    v177 += 16;
                    *(_QWORD *)v172 = 0;
                    *(_QWORD *)(v172 + 8) = 0;
                    v172 += 16;
                    v176 -= 16;
                  }
                  while (v176);
                  v178 = *(int64x2_t *)&v251.__r_.__value_.__r.__words[1];
                }
                v179 = (std::string::size_type)v252;
                v225.__r_.__value_.__r.__words[0] = v251.__r_.__value_.__r.__words[0];
                v251.__r_.__value_.__r.__words[0] = (std::string::size_type)v170;
                v251.__r_.__value_.__l.__size_ = (std::string::size_type)&v170[16 * (v169 >> 2)];
                *(int64x2_t *)&v225.__r_.__value_.__r.__words[1] = v178;
                v251.__r_.__value_.__r.__words[2] = v175;
                v252 = &v170[16 * v171];
                v226.__r_.__value_.__r.__words[0] = v179;
                std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)&v225);
                v167 = (_OWORD *)v251.__r_.__value_.__r.__words[2];
              }
              else
              {
                if (v166 >= -1)
                  v168 = v166 + 1;
                else
                  v168 = v166 + 2;
                v167 -= v168 >> 1;
                v251.__r_.__value_.__l.__size_ = (std::string::size_type)v167;
                v251.__r_.__value_.__r.__words[2] = (std::string::size_type)v167;
              }
            }
            *v167 = *(_OWORD *)&v255.__r_.__value_.__l.__data_;
            *(_OWORD *)&v255.__r_.__value_.__l.__data_ = 0uLL;
            v180 = v251.__r_.__value_.__l.__size_;
            v181 = (_OWORD *)(v251.__r_.__value_.__r.__words[2] + 16);
            v251.__r_.__value_.__r.__words[2] += 16;
            v182 = (_QWORD *)v240;
            if ((_QWORD)v240 != v154)
            {
              v183 = (_QWORD *)v154;
              do
              {
                v184 = *((_OWORD *)v183 - 1);
                v183 -= 2;
                *(_OWORD *)(v180 - 16) = v184;
                v180 -= 16;
                *v183 = 0;
                v183[1] = 0;
              }
              while (v183 != v182);
              v181 = (_OWORD *)v251.__r_.__value_.__r.__words[2];
            }
            v251.__r_.__value_.__l.__size_ = v180;
            v185 = *((_QWORD *)&v240 + 1);
            if (*((_QWORD *)&v240 + 1) != v154)
            {
              do
              {
                *v181++ = *(_OWORD *)v154;
                *(_QWORD *)v154 = 0;
                *(_QWORD *)(v154 + 8) = 0;
                v154 += 16;
              }
              while (v154 != v185);
              v180 = v251.__r_.__value_.__l.__size_;
              v154 = *((_QWORD *)&v240 + 1);
            }
            v186 = v240;
            v187 = (char *)v241[0];
            *(_QWORD *)&v240 = v180;
            *((_QWORD *)&v240 + 1) = v181;
            v241[0] = v252;
            v251.__r_.__value_.__r.__words[2] = v154;
            v252 = v187;
            v251.__r_.__value_.__r.__words[0] = v186;
            v251.__r_.__value_.__l.__size_ = v186;
            std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)&v251);
          }
          else if (v154 == *((_QWORD *)&v240 + 1))
          {
            *(_OWORD *)v154 = *(_OWORD *)&v255.__r_.__value_.__l.__data_;
            *(_OWORD *)&v255.__r_.__value_.__l.__data_ = 0uLL;
            *((_QWORD *)&v240 + 1) = v154 + 16;
          }
          else
          {
            std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::__move_range((uint64_t)&v240, v154, *((unint64_t *)&v240 + 1), (char *)(v154 + 16));
            std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100](v154, (__int128 *)&v255);
            v157 = (std::__shared_weak_count *)v255.__r_.__value_.__l.__size_;
            if (v255.__r_.__value_.__l.__size_)
            {
              v158 = (unint64_t *)(v255.__r_.__value_.__l.__size_ + 8);
              do
                v159 = __ldaxr(v158);
              while (__stlxr(v159 - 1, v158));
              if (!v159)
              {
                ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
                std::__shared_weak_count::__release_weak(v157);
              }
            }
          }
          v188 = operator new();
          siri::dialogengine::ChunkText::ChunkText(v188, (uint64_t)&v248);
          v251.__r_.__value_.__r.__words[0] = v188;
          v189 = (_QWORD *)operator new();
          v190 = v189;
          *v189 = &off_1E7939CE8;
          v189[1] = 0;
          v189[2] = 0;
          v189[3] = v188;
          v251.__r_.__value_.__l.__size_ = (std::string::size_type)v189;
          v191 = *((_QWORD *)&v240 + 1);
          if (*((_QWORD *)&v240 + 1) >= v241[0])
          {
            v193 = (uint64_t)(*((_QWORD *)&v240 + 1) - v240) >> 4;
            v194 = v193 + 1;
            if ((unint64_t)(v193 + 1) >> 60)
              std::vector<BOOL>::__throw_length_error[abi:ne180100]();
            v195 = v241[0] - v240;
            if ((uint64_t)(v241[0] - v240) >> 3 > v194)
              v194 = v195 >> 3;
            if ((unint64_t)v195 >= 0x7FFFFFFFFFFFFFF0)
              v196 = 0xFFFFFFFFFFFFFFFLL;
            else
              v196 = v194;
            v226.__r_.__value_.__l.__size_ = (std::string::size_type)v241;
            v197 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v196);
            v199 = (std::string::size_type *)&v197[16 * v193];
            *v199 = v188;
            v199[1] = (std::string::size_type)v190;
            v200 = (_QWORD *)*((_QWORD *)&v240 + 1);
            v201 = (_QWORD *)v240;
            if (*((_QWORD *)&v240 + 1) == (_QWORD)v240)
            {
              v204 = vdupq_n_s64(*((unint64_t *)&v240 + 1));
              v202 = &v197[16 * v193];
            }
            else
            {
              v202 = &v197[16 * v193];
              do
              {
                v203 = *((_OWORD *)v200 - 1);
                v200 -= 2;
                *((_OWORD *)v202 - 1) = v203;
                v202 -= 16;
                *v200 = 0;
                v200[1] = 0;
              }
              while (v200 != v201);
              v204 = (int64x2_t)v240;
            }
            v192 = v199 + 2;
            *(_QWORD *)&v240 = v202;
            *((_QWORD *)&v240 + 1) = v199 + 2;
            *(int64x2_t *)&v225.__r_.__value_.__r.__words[1] = v204;
            v205 = v241[0];
            v241[0] = &v197[16 * v198];
            v226.__r_.__value_.__r.__words[0] = v205;
            v225.__r_.__value_.__r.__words[0] = v204.i64[0];
            std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)&v225);
          }
          else
          {
            **((_QWORD **)&v240 + 1) = v188;
            *(_QWORD *)(v191 + 8) = v189;
            v192 = (_QWORD *)(v191 + 16);
          }
          *((_QWORD *)&v240 + 1) = v192;
          if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v248.__r_.__value_.__l.__data_);
          if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v249.__r_.__value_.__l.__data_);
          if (SHIBYTE(v250.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v250.__r_.__value_.__l.__data_);
        }
        v14 = 0;
        goto LABEL_147;
      }
      v66 = *(char *)(v18 + 23);
      if (v66 >= 0)
        v67 = (const std::string::value_type *)v18;
      else
        v67 = *(const std::string::value_type **)v18;
      if (v66 >= 0)
        v68 = *(unsigned __int8 *)(v18 + 23);
      else
        v68 = *(_QWORD *)(v18 + 8);
      std::string::append(&v246, v67, v68);
    }
LABEL_147:
    v69 = v239;
    if (v239)
    {
      v70 = (unint64_t *)&v239->__shared_owners_;
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
LABEL_202:
    ++v15;
    v13 = v244;
  }
  while (v15 < 0xAAAAAAAAAAAAAAABLL * (((char *)v245 - (char *)v244) >> 3));
  v206 = (std::string::size_type *)*((_QWORD *)&v240 + 1);
  v207 = (std::string::size_type *)v240;
  a1 = v220;
  if (*((_QWORD *)&v240 + 1) != (_QWORD)v240)
  {
    do
    {
      v208 = *v207;
      v209 = (std::__shared_weak_count *)v207[1];
      v250.__r_.__value_.__r.__words[0] = *v207;
      v250.__r_.__value_.__l.__size_ = (std::string::size_type)v209;
      if (v209)
      {
        v210 = (unint64_t *)&v209->__shared_owners_;
        do
          v211 = __ldxr(v210);
        while (__stxr(v211 + 1, v210));
      }
      siri::dialogengine::SpeakableString::SpeakableString(&v225, (const siri::dialogengine::SpeakableString *)(v208 + 8));
      if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v251, v226.__r_.__value_.__l.__data_, v226.__r_.__value_.__l.__size_);
      else
        v251 = v226;
      if ((v251.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v212 = &v251;
      else
        v212 = (std::string *)v251.__r_.__value_.__r.__words[0];
      if ((v251.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v213 = HIBYTE(v251.__r_.__value_.__r.__words[2]);
      else
        v213 = v251.__r_.__value_.__l.__size_;
      std::string::append(&v246, (const std::string::value_type *)v212, v213);
      if (SHIBYTE(v251.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v251.__r_.__value_.__l.__data_);
      if (v236 < 0)
        operator delete(__p);
      if (v234 < 0)
        operator delete(v233);
      if (v232 < 0)
        operator delete(v231);
      if (v230 < 0)
        operator delete(v229);
      if (v228 < 0)
        operator delete(v227);
      if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v226.__r_.__value_.__l.__data_);
      if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v225.__r_.__value_.__l.__data_);
        if (v209)
        {
LABEL_391:
          v214 = (unint64_t *)&v209->__shared_owners_;
          do
            v215 = __ldaxr(v214);
          while (__stlxr(v215 - 1, v214));
          if (!v215)
          {
            ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
            std::__shared_weak_count::__release_weak(v209);
          }
        }
      }
      else if (v209)
      {
        goto LABEL_391;
      }
      v207 += 2;
    }
    while (v207 != v206);
  }
LABEL_396:
  siri::dialogengine::StringTrim(" \t\n\r", &v246, a1);
  v225.__r_.__value_.__r.__words[0] = (std::string::size_type)&v240;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v225);
  v216 = v243;
  if (v243)
  {
    v217 = (unint64_t *)&v243->__shared_owners_;
    do
      v218 = __ldaxr(v217);
    while (__stlxr(v218 - 1, v217));
    if (!v218)
    {
      ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
      std::__shared_weak_count::__release_weak(v216);
    }
  }
  v225.__r_.__value_.__r.__words[0] = (std::string::size_type)&v244;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v225);
  if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v246.__r_.__value_.__l.__data_);
}

void sub_1BF880D80(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer(v1 - 192);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v1 - 128);
  if (SLOBYTE(STACK[0x2F7]) < 0)
    operator delete((void *)STACK[0x2E0]);
  if (*(char *)(v1 - 225) < 0)
    operator delete(*(void **)(v1 - 248));
  if (*(char *)(v1 - 201) < 0)
    operator delete(*(void **)(v1 - 224));
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x250]);
  *(_QWORD *)(v1 - 224) = &STACK[0x260];
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 - 224));
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x280]);
  *(_QWORD *)(v1 - 224) = &STACK[0x290];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 - 224));
  if (SLOBYTE(STACK[0x2BF]) < 0)
    operator delete((void *)STACK[0x2A8]);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::__move_range(uint64_t result, uint64_t a2, unint64_t a3, char *a4)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(char **)(result + 8);
  v5 = (char *)(a2 + v4 - a4);
  v6 = v4;
  while ((unint64_t)v5 < a3)
  {
    *(_OWORD *)v6 = *(_OWORD *)v5;
    v6 += 16;
    *(_QWORD *)v5 = 0;
    *((_QWORD *)v5 + 1) = 0;
    v5 += 16;
  }
  *(_QWORD *)(result + 8) = v6;
  if (v4 != a4)
  {
    result = (uint64_t)(v4 - 16);
    v7 = 16 * ((v4 - a4) >> 4);
    v8 = a2 - 16;
    do
    {
      result = std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100](result, (__int128 *)(v8 + v7))
             - 16;
      v7 -= 16;
    }
    while (v7);
  }
  return result;
}

uint64_t std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::__swap_out_circular_buffer(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  __int128 v8;
  _QWORD *v9;
  _OWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  result = a2[1];
  v5 = (_QWORD *)*a1;
  v6 = result;
  if ((_QWORD *)*a1 != a3)
  {
    v7 = a3;
    v6 = a2[1];
    do
    {
      v8 = *((_OWORD *)v7 - 1);
      v7 -= 2;
      *(_OWORD *)(v6 - 16) = v8;
      v6 -= 16;
      *v7 = 0;
      v7[1] = 0;
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  v9 = (_QWORD *)a1[1];
  v10 = (_OWORD *)a2[2];
  if (v9 != a3)
  {
    do
    {
      *v10++ = *(_OWORD *)a3;
      *a3 = 0;
      a3[1] = 0;
      a3 += 2;
    }
    while (a3 != v9);
    v6 = a2[1];
  }
  a2[2] = v10;
  v11 = (_QWORD *)*a1;
  *a1 = v6;
  a2[1] = v11;
  v12 = a1[1];
  a1[1] = a2[2];
  a2[2] = v12;
  v13 = a1[2];
  a1[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

void std::__shared_ptr_pointer<siri::dialogengine::ChunkText *,std::shared_ptr<siri::dialogengine::ChunkText>::__shared_ptr_default_delete<siri::dialogengine::ChunkText,siri::dialogengine::ChunkText>,std::allocator<siri::dialogengine::ChunkText>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::ChunkText *,std::shared_ptr<siri::dialogengine::ChunkText>::__shared_ptr_default_delete<siri::dialogengine::ChunkText,siri::dialogengine::ChunkText>,std::allocator<siri::dialogengine::ChunkText>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::ChunkText *,std::shared_ptr<siri::dialogengine::ChunkText>::__shared_ptr_default_delete<siri::dialogengine::ChunkText,siri::dialogengine::ChunkText>,std::allocator<siri::dialogengine::ChunkText>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void siri::dialogengine::ConditionEntry::~ConditionEntry(void **this)
{
  siri::dialogengine::ConditionEntry::~ConditionEntry(this);
  JUMPOUT(0x1C3B8D890);
}

{
  void **v2;

  *this = &off_1E792B438;
  v2 = this + 8;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  *this = off_1E793AED8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(this[2]);
}

uint64_t siri::dialogengine::ConditionEntry::Validate(const void ***this, siri::dialogengine::Context *a2)
{
  __int128 *v4;
  char v5;
  unint64_t v6;
  unsigned __int8 v7;
  __int128 *v8;
  __int128 *v9;
  BOOL v10;
  void *__p[2];
  char v13;
  void *v14[2];
  unsigned __int8 v15;
  std::string v16;
  void *v17;
  char v18;
  __int128 *v19;
  _QWORD *v20[2];

  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&v19, this + 1);
  v4 = v19;
  v5 = 1;
  if (v19 != (__int128 *)v20)
  {
    do
    {
      std::pair<std::string const,std::string>::pair[abi:ne180100](&v16, v4 + 2);
      siri::dialogengine::ConditionEntry::GetTypeAsString((siri::dialogengine::ConditionEntry *)this, __p);
      siri::dialogengine::ValidateXmlAttributeVersion(a2, (const void **)__p, (uint64_t)&v16, v14);
      if (v13 < 0)
        operator delete(__p[0]);
      v6 = v15;
      v7 = v15;
      if ((v15 & 0x80u) != 0)
        v6 = (unint64_t)v14[1];
      if (v6)
      {
        siri::dialogengine::Context::AddValidationError((uint64_t)a2, (__int128 *)v14, 0);
        v5 = 0;
        v7 = v15;
      }
      if ((v7 & 0x80) != 0)
        operator delete(v14[0]);
      if (v18 < 0)
        operator delete(v17);
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v16.__r_.__value_.__l.__data_);
      v8 = (__int128 *)*((_QWORD *)v4 + 1);
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = *(__int128 **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (__int128 *)*((_QWORD *)v4 + 2);
          v10 = *(_QWORD *)v9 == (_QWORD)v4;
          v4 = v9;
        }
        while (!v10);
      }
      v4 = v9;
    }
    while (v9 != (__int128 *)v20);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v20[0]);
  return v5 & 1;
}

void sub_1BF8814E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  uint64_t v22;

  if (a21 < 0)
    operator delete(__p);
  std::pair<std::string const,std::string>::~pair((uint64_t)&a22);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(_QWORD **)(v22 - 64));
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::ConditionEntry::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  const void **v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;

  if (*(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
    return 0;
  result = std::type_info::operator==[abi:ne180100](*(_QWORD *)(*(_QWORD *)a1 - 8), *(_QWORD *)(*(_QWORD *)a2 - 8));
  if (!(_DWORD)result)
    return result;
  v5 = *(unsigned __int8 *)(a1 + 63);
  if ((v5 & 0x80u) == 0)
    v6 = *(unsigned __int8 *)(a1 + 63);
  else
    v6 = *(_QWORD *)(a1 + 48);
  v7 = *(unsigned __int8 *)(a2 + 63);
  v8 = (char)v7;
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a2 + 48);
  if (v6 != v7)
    return 0;
  v9 = (const void **)(a1 + 40);
  if (v8 >= 0)
    v10 = (unsigned __int8 *)(a2 + 40);
  else
    v10 = *(unsigned __int8 **)(a2 + 40);
  if ((v5 & 0x80) != 0)
  {
    if (memcmp(*v9, v10, *(_QWORD *)(a1 + 48)))
      return 0;
  }
  else if (*(_BYTE *)(a1 + 63))
  {
    while (*(unsigned __int8 *)v9 == *v10)
    {
      v9 = (const void **)((char *)v9 + 1);
      ++v10;
      if (!--v5)
        goto LABEL_18;
    }
    return 0;
  }
LABEL_18:
  v12 = *(_QWORD *)(a1 + 64);
  v11 = *(_QWORD *)(a1 + 72);
  v13 = (v11 - v12) >> 4;
  if (v13 != (uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 4)
    return 0;
  if (v11 == v12)
    return 1;
  v14 = 0;
  if (v13 <= 1)
    v13 = 1;
  v15 = v13 - 1;
  do
  {
    v16 = v15;
    v17 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 64) + v14) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 64) + v14), *(_QWORD *)(*(_QWORD *)(a2 + 64) + v14));
    if ((v17 & 1) != 0)
      break;
    v15 = v16 - 1;
    v14 += 16;
  }
  while (v16);
  return v17 ^ 1u;
}

uint64_t siri::dialogengine::ConditionEntry::operator!=(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) ^ 1;
}

uint64_t siri::dialogengine::ConditionEntry::Evaluate()
{
  return 0;
}

_QWORD *siri::dialogengine::ConditionEntry::GetTypeAsString@<X0>(siri::dialogengine::ConditionEntry *this@<X0>, _QWORD *a2@<X8>)
{
  int v3;
  char *v4;
  std::string *v5;
  __int128 v6;
  _QWORD *result;
  std::string v8;
  void *__p[2];
  std::string::size_type v10;

  v3 = *((_DWORD *)this + 8);
  switch(v3)
  {
    case 0:
      v4 = "and";
      goto LABEL_12;
    case 1:
      v4 = "or";
      goto LABEL_12;
    case 2:
      v4 = "not";
      goto LABEL_12;
    case 3:
      v4 = "expression";
      goto LABEL_12;
    case 4:
      v4 = "sub-condition";
LABEL_12:
      result = std::string::basic_string[abi:ne180100]<0>(a2, v4);
      break;
    default:
      std::to_string(&v8, v3);
      v5 = std::string::insert(&v8, 0, "Unsupported condition entry type: ");
      v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v10 = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 3u);
      if (SHIBYTE(v10) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v8.__r_.__value_.__l.__data_);
      result = std::string::basic_string[abi:ne180100]<0>(a2, "");
      break;
  }
  return result;
}

void sub_1BF8817A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

double siri::dialogengine::ConditionEntry::ConditionEntry(siri::dialogengine::ConditionEntry *this)
{
  double result;

  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_1E792B438;
  *((_QWORD *)this + 1) = (char *)this + 16;
  *((_DWORD *)this + 8) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  return result;
}

{
  double result;

  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_1E792B438;
  *((_QWORD *)this + 1) = (char *)this + 16;
  *((_DWORD *)this + 8) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  return result;
}

double siri::dialogengine::ConditionEntry::ConditionEntry(uint64_t a1, int a2)
{
  double result;

  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E792B438;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  result = 0.0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 32) = a2;
  return result;
}

{
  double result;

  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E792B438;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  result = 0.0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 32) = a2;
  return result;
}

uint64_t siri::dialogengine::ConditionEntry::SetType(uint64_t result, int a2)
{
  *(_DWORD *)(result + 32) = a2;
  return result;
}

uint64_t siri::dialogengine::ConditionEntry::GetType(siri::dialogengine::ConditionEntry *this)
{
  return *((unsigned int *)this + 8);
}

void siri::dialogengine::ConditionEntry::GetNote(siri::dialogengine::ConditionEntry *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 63) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 5), *((_QWORD *)this + 6));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 40);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 7);
  }
}

std::string *siri::dialogengine::ConditionEntry::SetNote(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 40), a2);
}

char *siri::dialogengine::ConditionEntry::GetChildren@<X0>(siri::dialogengine::ConditionEntry *this@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  return std::vector<std::shared_ptr<siri::dialogengine::ConditionEntry>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::ConditionEntry>*,std::shared_ptr<siri::dialogengine::ConditionEntry>*>((char *)a2, *((_QWORD **)this + 8), *((_QWORD **)this + 9), (uint64_t)(*((_QWORD *)this + 9) - *((_QWORD *)this + 8)) >> 4);
}

char *std::vector<std::shared_ptr<siri::dialogengine::ConditionEntry>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::ConditionEntry>*,std::shared_ptr<siri::dialogengine::ConditionEntry>*>(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1BF8819F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t **siri::dialogengine::ConditionEntry::SetChildren(uint64_t a1, uint64_t **a2)
{
  uint64_t **result;

  result = (uint64_t **)(a1 + 64);
  if (result != a2)
    return (uint64_t **)std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__assign_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>(result, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  return result;
}

void siri::dialogengine::ConditionEntry::AddChild(uint64_t a1, __int128 *a2)
{
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::emplace_back<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry> const&>((char **)(a1 + 64), a2);
}

siri::dialogengine::XmlError *siri::dialogengine::XmlError::XmlError(siri::dialogengine::XmlError *this, const _xmlError *a2)
{
  void **v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *message;
  std::string __p;
  std::string v12;

  *(_DWORD *)this = a2->code;
  *((_QWORD *)this + 1) = 0;
  v4 = (void **)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = a2->level;
  *((_QWORD *)this + 5) = 0;
  v5 = (char *)this + 40;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 16) = a2->line;
  *(_OWORD *)((char *)this + 72) = 0u;
  v6 = (char *)this + 72;
  v7 = (char *)this + 96;
  *(_OWORD *)((char *)this + 120) = 0u;
  v8 = (char *)this + 120;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = *(_QWORD *)&a2->int1;
  message = a2->message;
  if (message)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, message);
    siri::dialogengine::StringTrim(" \t\n\r", &__p, &v12);
    if (*((char *)this + 31) < 0)
      operator delete(*v4);
    *(std::string *)v4 = v12;
    *((_BYTE *)&v12.__r_.__value_.__s + 23) = 0;
    v12.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (a2->file)
    MEMORY[0x1C3B8D53C](v5);
  if (a2->str1)
    MEMORY[0x1C3B8D53C](v6);
  if (a2->str2)
    MEMORY[0x1C3B8D53C](v7);
  if (a2->str3)
    MEMORY[0x1C3B8D53C](v8);
  return this;
}

void sub_1BF881B6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  char *v14;
  void **v15;
  void **v16;
  void **v17;
  void **v18;
  void **v19;

  if (a14 < 0)
    operator delete(__p);
  if (v14[143] < 0)
    operator delete(*v18);
  if (v14[119] < 0)
    operator delete(*v17);
  if (v14[95] < 0)
    operator delete(*v16);
  if (v14[63] < 0)
    operator delete(*v15);
  if (v14[31] < 0)
    operator delete(*v19);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::XmlError::XmlError(uint64_t a1, const std::string *a2)
{
  void **v3;
  std::string v5;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = (void **)(a1 + 8);
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  siri::dialogengine::StringTrim(" \t\n\r", a2, &v5);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*v3);
  *(std::string *)v3 = v5;
  return a1;
}

void sub_1BF881C98(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;

  if (*(char *)(v1 + 143) < 0)
    operator delete(*(void **)(v1 + 120));
  if (*(char *)(v1 + 119) < 0)
    operator delete(*(void **)(v1 + 96));
  if (*(char *)(v1 + 95) < 0)
    operator delete(*v4);
  if (*(char *)(v1 + 63) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::XmlError::GetCode(siri::dialogengine::XmlError *this)
{
  return *(unsigned int *)this;
}

uint64_t siri::dialogengine::XmlError::GetMessage(siri::dialogengine::XmlError *this)
{
  return (uint64_t)this + 8;
}

void siri::dialogengine::XmlError::GetMessageWithDetails(siri::dialogengine::XmlError *this@<X0>, std::string *a2@<X8>)
{
  int v4;
  std::string *v5;
  char *v6;
  char v7;
  std::vector<std::string>::pointer end;
  std::string *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  char *v16;
  char v17;
  std::vector<std::string>::pointer v18;
  std::string *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  std::string *v23;
  std::string *v24;
  std::string *v25;
  char *v26;
  char v27;
  std::vector<std::string>::pointer v28;
  std::string *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  std::string *v33;
  std::string *v34;
  size_t v35;
  std::string *v36;
  char *v37;
  const std::string::value_type *v38;
  std::string::size_type v39;
  std::string *v40;
  __int128 v41;
  std::string *v42;
  void *__p[2];
  char v44;
  std::string v45;
  std::vector<std::string> v46;
  std::__split_buffer<std::string> __v;
  __int128 v48;
  unsigned __int8 v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  memset(&v46, 0, sizeof(v46));
  v4 = *((_DWORD *)this + 16);
  if (v4)
  {
    std::to_string(&v45, v4);
    v5 = std::string::insert(&v45, 0, "Line: ");
    v6 = (char *)v5->__r_.__value_.__r.__words[0];
    *(_QWORD *)&v48 = v5->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)&v48 + 7) = *(std::string::size_type *)((char *)&v5->__r_.__value_.__r.__words[1] + 7);
    v7 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    end = v46.__end_;
    if (v46.__end_ >= v46.__end_cap_.__value_)
    {
      v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v46.__end_ - (char *)v46.__begin_) >> 3);
      v11 = v10 + 1;
      if (v10 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<BOOL>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (((char *)v46.__end_cap_.__value_ - (char *)v46.__begin_) >> 3) > v11)
        v11 = 0x5555555555555556 * (((char *)v46.__end_cap_.__value_ - (char *)v46.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v46.__end_cap_.__value_ - (char *)v46.__begin_) >> 3) >= 0x555555555555555)
        v12 = 0xAAAAAAAAAAAAAAALL;
      else
        v12 = v11;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v46.__end_cap_;
      if (v12)
        v13 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v46.__end_cap_, v12);
      else
        v13 = 0;
      v14 = v13 + v10;
      __v.__first_ = v13;
      __v.__begin_ = v14;
      __v.__end_cap_.__value_ = &v13[v12];
      v14->__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
      v14->__r_.__value_.__l.__size_ = v48;
      *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)&v48 + 7);
      *((_BYTE *)&v14->__r_.__value_.__s + 23) = v7;
      __v.__end_ = v14 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v46, &__v);
      v9 = v46.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
    }
    else
    {
      v46.__end_->__r_.__value_.__l.__data_ = v6;
      end->__r_.__value_.__l.__size_ = v48;
      *(std::string::size_type *)((char *)&end->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)&v48 + 7);
      *((_BYTE *)&end->__r_.__value_.__s + 23) = v7;
      v9 = end + 1;
    }
    v46.__end_ = v9;
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
  }
  if (*((char *)this + 63) < 0)
  {
    if (!*((_QWORD *)this + 6))
      goto LABEL_34;
  }
  else if (!*((_BYTE *)this + 63))
  {
    goto LABEL_34;
  }
  std::operator+<char>();
  v15 = std::string::append(&v45, "\"");
  v16 = (char *)v15->__r_.__value_.__r.__words[0];
  *(_QWORD *)&v48 = v15->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)&v48 + 7) = *(std::string::size_type *)((char *)&v15->__r_.__value_.__r.__words[1] + 7);
  v17 = HIBYTE(v15->__r_.__value_.__r.__words[2]);
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  v18 = v46.__end_;
  if (v46.__end_ >= v46.__end_cap_.__value_)
  {
    v20 = 0xAAAAAAAAAAAAAAABLL * (((char *)v46.__end_ - (char *)v46.__begin_) >> 3);
    v21 = v20 + 1;
    if (v20 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    if (0x5555555555555556 * (((char *)v46.__end_cap_.__value_ - (char *)v46.__begin_) >> 3) > v21)
      v21 = 0x5555555555555556 * (((char *)v46.__end_cap_.__value_ - (char *)v46.__begin_) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v46.__end_cap_.__value_ - (char *)v46.__begin_) >> 3) >= 0x555555555555555)
      v22 = 0xAAAAAAAAAAAAAAALL;
    else
      v22 = v21;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v46.__end_cap_;
    if (v22)
      v23 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v46.__end_cap_, v22);
    else
      v23 = 0;
    v24 = v23 + v20;
    __v.__first_ = v23;
    __v.__begin_ = v24;
    __v.__end_cap_.__value_ = &v23[v22];
    v24->__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
    v24->__r_.__value_.__l.__size_ = v48;
    *(std::string::size_type *)((char *)&v24->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)&v48 + 7);
    *((_BYTE *)&v24->__r_.__value_.__s + 23) = v17;
    __v.__end_ = v24 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(&v46, &__v);
    v19 = v46.__end_;
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
  else
  {
    v46.__end_->__r_.__value_.__l.__data_ = v16;
    v18->__r_.__value_.__l.__size_ = v48;
    *(std::string::size_type *)((char *)&v18->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)&v48 + 7);
    *((_BYTE *)&v18->__r_.__value_.__s + 23) = v17;
    v19 = v18 + 1;
  }
  v46.__end_ = v19;
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
LABEL_34:
  std::to_string(&v45, *(_DWORD *)this);
  v25 = std::string::insert(&v45, 0, "Code: ");
  v26 = (char *)v25->__r_.__value_.__r.__words[0];
  *(_QWORD *)&v48 = v25->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)&v48 + 7) = *(std::string::size_type *)((char *)&v25->__r_.__value_.__r.__words[1] + 7);
  v27 = HIBYTE(v25->__r_.__value_.__r.__words[2]);
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  v28 = v46.__end_;
  if (v46.__end_ >= v46.__end_cap_.__value_)
  {
    v30 = 0xAAAAAAAAAAAAAAABLL * (((char *)v46.__end_ - (char *)v46.__begin_) >> 3);
    v31 = v30 + 1;
    if (v30 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    if (0x5555555555555556 * (((char *)v46.__end_cap_.__value_ - (char *)v46.__begin_) >> 3) > v31)
      v31 = 0x5555555555555556 * (((char *)v46.__end_cap_.__value_ - (char *)v46.__begin_) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v46.__end_cap_.__value_ - (char *)v46.__begin_) >> 3) >= 0x555555555555555)
      v32 = 0xAAAAAAAAAAAAAAALL;
    else
      v32 = v31;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v46.__end_cap_;
    if (v32)
      v33 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v46.__end_cap_, v32);
    else
      v33 = 0;
    v34 = v33 + v30;
    __v.__first_ = v33;
    __v.__begin_ = v34;
    __v.__end_cap_.__value_ = &v33[v32];
    v34->__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
    v34->__r_.__value_.__l.__size_ = v48;
    *(std::string::size_type *)((char *)&v34->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)&v48 + 7);
    *((_BYTE *)&v34->__r_.__value_.__s + 23) = v27;
    __v.__end_ = v34 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(&v46, &__v);
    v29 = v46.__end_;
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
  else
  {
    v46.__end_->__r_.__value_.__l.__data_ = v26;
    v28->__r_.__value_.__l.__size_ = v48;
    *(std::string::size_type *)((char *)&v28->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)&v48 + 7);
    *((_BYTE *)&v28->__r_.__value_.__s + 23) = v27;
    v29 = v28 + 1;
  }
  v46.__end_ = v29;
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if (*((char *)this + 31) >= 0)
    v35 = *((unsigned __int8 *)this + 31);
  else
    v35 = *((_QWORD *)this + 2);
  v36 = &v45;
  std::string::basic_string[abi:ne180100]((uint64_t)&v45, v35 + 2);
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v36 = (std::string *)v45.__r_.__value_.__r.__words[0];
  if (v35)
  {
    if (*((char *)this + 31) >= 0)
      v37 = (char *)this + 8;
    else
      v37 = (char *)*((_QWORD *)this + 1);
    memmove(v36, v37, v35);
  }
  strcpy((char *)v36 + v35, " (");
  std::string::basic_string[abi:ne180100]<0>(__p, ", ");
  siri::dialogengine::StringJoinInternal<std::vector<std::string>>((uint64_t)&v48, (uint64_t)v46.__begin_, (uint64_t)v46.__end_, (uint64_t)__p);
  if ((v49 & 0x80u) == 0)
    v38 = (const std::string::value_type *)&v48;
  else
    v38 = (const std::string::value_type *)v48;
  if ((v49 & 0x80u) == 0)
    v39 = v49;
  else
    v39 = *((_QWORD *)&v48 + 1);
  v40 = std::string::append(&v45, v38, v39);
  v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  __v.__end_ = (std::__split_buffer<std::string>::pointer)v40->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__v.__first_ = v41;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  v42 = std::string::append((std::string *)&__v, ")");
  *a2 = *v42;
  v42->__r_.__value_.__l.__size_ = 0;
  v42->__r_.__value_.__r.__words[2] = 0;
  v42->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__v.__end_) < 0)
    operator delete(__v.__first_);
  if ((char)v49 < 0)
    operator delete((void *)v48);
  if (v44 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v46;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
}

void sub_1BF88228C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, void *__p, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, char *__pa, std::__split_buffer<std::string> *a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a25);
  if (a21 < 0)
    operator delete(__pa);
  __pa = &a22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::XmlError::GetLevel(siri::dialogengine::XmlError *this)
{
  return *((unsigned int *)this + 8);
}

uint64_t siri::dialogengine::XmlError::GetFile(siri::dialogengine::XmlError *this)
{
  return (uint64_t)this + 40;
}

uint64_t siri::dialogengine::XmlError::GetLine(siri::dialogengine::XmlError *this)
{
  return *((unsigned int *)this + 16);
}

uint64_t siri::dialogengine::XmlError::GetStr1(siri::dialogengine::XmlError *this)
{
  return (uint64_t)this + 72;
}

uint64_t siri::dialogengine::XmlError::GetStr2(siri::dialogengine::XmlError *this)
{
  return (uint64_t)this + 96;
}

uint64_t siri::dialogengine::XmlError::GetStr3(siri::dialogengine::XmlError *this)
{
  return (uint64_t)this + 120;
}

uint64_t siri::dialogengine::XmlError::GetInt1(siri::dialogengine::XmlError *this)
{
  return *((unsigned int *)this + 36);
}

uint64_t siri::dialogengine::XmlError::GetInt2(siri::dialogengine::XmlError *this)
{
  return *((unsigned int *)this + 37);
}

void InitDefaultsscc_info_FactItem_Button_FactItem_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/FactItem.pb.cc", a4);
  SnippetUI::FactItem_Button::FactItem_Button((SnippetUI::FactItem_Button *)&SnippetUI::_FactItem_Button_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_FactItem_Button_default_instance_, v4);
  qword_1ED1D4028 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D4030 = &SnippetUI::_Button_default_instance_;
  qword_1ED1D4038 = (uint64_t)&SnippetUI::_Button_default_instance_;
  unk_1ED1D4040 = &SnippetUI::_Button_default_instance_;
  qword_1ED1D4048 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D4050 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D4058 = (uint64_t)&SnippetUI::_MultilineTextProperty_default_instance_;
  unk_1ED1D4060 = &SnippetUI::_VisualProperty_default_instance_;
  qword_1ED1D4068 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
  unk_1ED1D4070 = &SnippetUI::_TextProperty_default_instance_;
}

SnippetUI::FactItem_Button *SnippetUI::FactItem_Button::FactItem_Button(SnippetUI::FactItem_Button *this)
{
  *(_QWORD *)this = &off_1E792B718;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 28) = 0;
  if (atomic_load(scc_info_FactItem_Button_FactItem_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_FactItem_Button_FactItem_2eproto);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  return this;
}

void sub_1BF882494(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::FactItem_Button::~FactItem_Button(SnippetUI::FactItem_Button *this)
{
  SnippetUI::FactItem_Button::~FactItem_Button(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)this = &off_1E792B718;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 3);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1C3B8D890](v4, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::FactItem_Button *)&SnippetUI::_FactItem_Button_default_instance_)
  {
    v6 = *((_QWORD *)this + 4);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = *((_QWORD *)this + 5);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = *((_QWORD *)this + 6);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = *((_QWORD *)this + 7);
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v10 = *((_QWORD *)this + 8);
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v11 = *((_QWORD *)this + 9);
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = *((_QWORD *)this + 10);
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v13 = *((_QWORD *)this + 11);
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *((_QWORD *)this + 12);
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v15 = *((_QWORD *)this + 13);
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::FactItem_Button *SnippetUI::FactItem_Button::New(SnippetUI::FactItem_Button *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::FactItem_Button>(0);
}

SnippetUI::FactItem_Button *SnippetUI::FactItem_Button::New(SnippetUI::FactItem_Button *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::FactItem_Button>(a2);
}

void SnippetUI::FactItem_Button::Clear(SnippetUI::FactItem_Button *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  google::protobuf::internal::InternalMetadataWithArena *v14;
  char v15;

  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 3);
  if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
  v4 = *((_QWORD *)this + 4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 4) = 0;
  v5 = *((_QWORD *)this + 5);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *((_QWORD *)this + 5) = 0;
  v6 = *((_QWORD *)this + 6);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *((_QWORD *)this + 6) = 0;
  v7 = *((_QWORD *)this + 7);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  *((_QWORD *)this + 7) = 0;
  v8 = *((_QWORD *)this + 8);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  *((_QWORD *)this + 8) = 0;
  v9 = *((_QWORD *)this + 9);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  *((_QWORD *)this + 9) = 0;
  v10 = *((_QWORD *)this + 10);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  *((_QWORD *)this + 10) = 0;
  v11 = *((_QWORD *)this + 11);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  *((_QWORD *)this + 11) = 0;
  v12 = *((_QWORD *)this + 12);
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  *((_QWORD *)this + 12) = 0;
  v13 = *((_QWORD *)this + 13);
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v15 = *((_BYTE *)this + 8);
  v14 = (SnippetUI::FactItem_Button *)((char *)this + 8);
  *((_QWORD *)v14 + 12) = 0;
  if ((v15 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v14);
}

uint64_t SnippetUI::FactItem_Button::IsInitialized(SnippetUI::FactItem_Button *this)
{
  return 1;
}

char *SnippetUI::FactItem_Button::ByteSizeLong(SnippetUI::FactItem_Button *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const google::protobuf::UnknownFieldSet *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  SnippetUI::TextProperty *v9;
  char *v10;
  SnippetUI::Button *v11;
  char *v12;
  SnippetUI::Button *v13;
  char *v14;
  SnippetUI::Button *v15;
  char *v16;
  SnippetUI::TextProperty *v17;
  char *v18;
  SnippetUI::TextProperty *v19;
  char *v20;
  SnippetUI::MultilineTextProperty *v21;
  char *v22;
  SnippetUI::VisualProperty *v23;
  char *v24;
  SnippetUI::ActionProperty *v25;
  char *v26;
  SnippetUI::TextProperty *v27;
  char *v28;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  v6 = *((_QWORD *)this + 3);
  v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v8 = *(_QWORD *)(v6 + 8);
  if ((v7 & 0x80u) == 0)
    v8 = v7;
  v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_13:
  if (this != (SnippetUI::FactItem_Button *)&SnippetUI::_FactItem_Button_default_instance_)
  {
    v9 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
    if (v9)
    {
      v10 = SnippetUI::TextProperty::ByteSizeLong(v9);
      v5 = (const google::protobuf::UnknownFieldSet *)&v10[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v11 = (SnippetUI::Button *)*((_QWORD *)this + 5);
    if (v11)
    {
      v12 = SnippetUI::Button::ByteSizeLong(v11);
      v5 = (const google::protobuf::UnknownFieldSet *)&v12[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v13 = (SnippetUI::Button *)*((_QWORD *)this + 6);
    if (v13)
    {
      v14 = SnippetUI::Button::ByteSizeLong(v13);
      v5 = (const google::protobuf::UnknownFieldSet *)&v14[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v15 = (SnippetUI::Button *)*((_QWORD *)this + 7);
    if (v15)
    {
      v16 = SnippetUI::Button::ByteSizeLong(v15);
      v5 = (const google::protobuf::UnknownFieldSet *)&v16[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v17 = (SnippetUI::TextProperty *)*((_QWORD *)this + 8);
    if (v17)
    {
      v18 = SnippetUI::TextProperty::ByteSizeLong(v17);
      v5 = (const google::protobuf::UnknownFieldSet *)&v18[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v18 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v19 = (SnippetUI::TextProperty *)*((_QWORD *)this + 9);
    if (v19)
    {
      v20 = SnippetUI::TextProperty::ByteSizeLong(v19);
      v5 = (const google::protobuf::UnknownFieldSet *)&v20[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v21 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 10);
    if (v21)
    {
      v22 = SnippetUI::MultilineTextProperty::ByteSizeLong(v21);
      v5 = (const google::protobuf::UnknownFieldSet *)&v22[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v23 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 11);
    if (v23)
    {
      v24 = SnippetUI::VisualProperty::ByteSizeLong(v23);
      v5 = (const google::protobuf::UnknownFieldSet *)&v24[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v24 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v25 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 12);
    if (v25)
    {
      v26 = SnippetUI::ActionProperty::ByteSizeLong(v25);
      v5 = (const google::protobuf::UnknownFieldSet *)&v26[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v26 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v27 = (SnippetUI::TextProperty *)*((_QWORD *)this + 13);
    if (v27)
    {
      v28 = SnippetUI::TextProperty::ByteSizeLong(v27);
      v5 = (const google::protobuf::UnknownFieldSet *)&v28[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v28 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::FactItem_Button *)((char *)this + 8), v5, (_DWORD *)this + 28);
  *((_DWORD *)this + 28) = (_DWORD)v5;
  return (char *)v5;
}

uint64_t SnippetUI::FactItem_Button::GetCachedSize(SnippetUI::FactItem_Button *this)
{
  return *((unsigned int *)this + 28);
}

google::protobuf::internal *SnippetUI::FactItem_Button::_InternalParse(SnippetUI::FactItem_Button *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  std::string **v6;
  uint64_t *v7;
  google::protobuf::internal::ParseContext *v8;
  google::protobuf::internal *TagFallback;
  char *v10;
  SnippetUI::TextProperty *v11;
  SnippetUI::Button *v12;
  char *v13;
  SnippetUI::MultilineTextProperty *v14;
  SnippetUI::VisualProperty *v15;
  SnippetUI::ActionProperty *v16;
  std::string *v17;
  std::string::value_type *v18;
  google::protobuf::internal::ParseContext *v19;
  char *v20;
  BOOL v21;
  google::protobuf::internal *v23;

  v23 = a2;
  v5 = (std::string **)((char *)this + 24);
  v6 = (std::string **)((char *)this + 16);
  v7 = (uint64_t *)((char *)this + 8);
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v23, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v23;
    TagFallback = (google::protobuf::internal *)((char *)v23 + 1);
    v10 = (char *)*(unsigned __int8 *)v23;
    if ((*(char *)v23 & 0x80000000) == 0)
      goto LABEL_6;
    v10 = (char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v23 + 2);
LABEL_6:
      v23 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v23, v10);
    v23 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    switch(v10 >> 3)
    {
      case 1u:
        if (v10 != 10)
          goto LABEL_56;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
        if (v11)
          goto LABEL_50;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 4) = v11;
        goto LABEL_49;
      case 2u:
        if (v10 != 18)
          goto LABEL_56;
        v12 = (SnippetUI::Button *)*((_QWORD *)this + 5);
        if (v12)
          goto LABEL_23;
        v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Button>(0);
        *((_QWORD *)this + 5) = v12;
        goto LABEL_22;
      case 3u:
        if (v10 != 26)
          goto LABEL_56;
        v12 = (SnippetUI::Button *)*((_QWORD *)this + 6);
        if (v12)
          goto LABEL_23;
        v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Button>(0);
        *((_QWORD *)this + 6) = v12;
        goto LABEL_22;
      case 4u:
        if (v10 != 34)
          goto LABEL_56;
        v12 = (SnippetUI::Button *)*((_QWORD *)this + 7);
        if (v12)
          goto LABEL_23;
        v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Button>(0);
        *((_QWORD *)this + 7) = v12;
LABEL_22:
        TagFallback = v23;
LABEL_23:
        v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::Button>(a3, v12, TagFallback);
        goto LABEL_61;
      case 5u:
        if (v10 != 42)
          goto LABEL_56;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 8);
        if (v11)
          goto LABEL_50;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 8) = v11;
        goto LABEL_49;
      case 6u:
        if (v10 != 50)
          goto LABEL_56;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 9);
        if (v11)
          goto LABEL_50;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 9) = v11;
        goto LABEL_49;
      case 7u:
        if (v10 != 58)
          goto LABEL_56;
        v14 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 10);
        if (!v14)
        {
          v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
          *((_QWORD *)this + 10) = v14;
          TagFallback = v23;
        }
        v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::MultilineTextProperty>(a3, v14, TagFallback);
        goto LABEL_61;
      case 8u:
        if (v10 != 66)
          goto LABEL_56;
        v15 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 11);
        if (!v15)
        {
          v15 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
          *((_QWORD *)this + 11) = v15;
          TagFallback = v23;
        }
        v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::VisualProperty>(a3, v15, TagFallback);
        goto LABEL_61;
      case 9u:
        if (v10 != 74)
          goto LABEL_56;
        v16 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 12);
        if (!v16)
        {
          v16 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((_QWORD *)this + 12) = v16;
          TagFallback = v23;
        }
        v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v16, TagFallback);
        goto LABEL_61;
      case 0xAu:
        if (v10 != 82)
          goto LABEL_56;
        v17 = *v6;
        if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v17 = *v6;
          TagFallback = v23;
        }
        v18 = (std::string::value_type *)TagFallback;
        v19 = a3;
        v20 = "SnippetUI.FactItem_Button.component_name";
        goto LABEL_55;
      case 0xBu:
        if (v10 != 90)
          goto LABEL_56;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 13);
        if (v11)
          goto LABEL_50;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 13) = v11;
LABEL_49:
        TagFallback = v23;
LABEL_50:
        v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v11, TagFallback);
        goto LABEL_61;
      case 0xCu:
        if (v10 != 98)
          goto LABEL_56;
        v17 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v17 = *v5;
          TagFallback = v23;
        }
        v18 = (std::string::value_type *)TagFallback;
        v19 = a3;
        v20 = "SnippetUI.FactItem_Button.link_identifier";
LABEL_55:
        v13 = google::protobuf::internal::InlineGreedyStringParserUTF8(v17, v18, (uint64_t)v19, (google::protobuf::internal *)v20);
        goto LABEL_61;
      default:
LABEL_56:
        if ((_DWORD)v10)
          v21 = (v10 & 7) == 4;
        else
          v21 = 1;
        if (v21)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v10 - 1;
          return TagFallback;
        }
        v13 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v7, TagFallback, a3, v8);
LABEL_61:
        v23 = (google::protobuf::internal *)v13;
        if (v13)
          continue;
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::FactItem_Button::InternalSerializeWithCachedSizesToArray(SnippetUI::FactItem_Button *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  SnippetUI::TextProperty *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  google::protobuf::UnknownFieldSet *v11;
  _BYTE *v12;
  _BYTE *v13;
  unsigned int v14;
  unsigned int v15;
  SnippetUI::Button *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  google::protobuf::UnknownFieldSet *v20;
  _BYTE *v21;
  _BYTE *v22;
  unsigned int v23;
  unsigned int v24;
  SnippetUI::Button *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  google::protobuf::UnknownFieldSet *v29;
  _BYTE *v30;
  _BYTE *v31;
  unsigned int v32;
  unsigned int v33;
  SnippetUI::Button *v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  google::protobuf::UnknownFieldSet *v38;
  _BYTE *v39;
  _BYTE *v40;
  unsigned int v41;
  unsigned int v42;
  SnippetUI::TextProperty *v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  google::protobuf::UnknownFieldSet *v47;
  _BYTE *v48;
  _BYTE *v49;
  unsigned int v50;
  unsigned int v51;
  SnippetUI::TextProperty *v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int v55;
  google::protobuf::UnknownFieldSet *v56;
  _BYTE *v57;
  _BYTE *v58;
  unsigned int v59;
  unsigned int v60;
  SnippetUI::MultilineTextProperty *v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int v64;
  google::protobuf::UnknownFieldSet *v65;
  _BYTE *v66;
  _BYTE *v67;
  unsigned int v68;
  unsigned int v69;
  SnippetUI::VisualProperty *v70;
  unsigned int v71;
  uint64_t v72;
  unsigned int v73;
  google::protobuf::UnknownFieldSet *v74;
  _BYTE *v75;
  _BYTE *v76;
  unsigned int v77;
  unsigned int v78;
  SnippetUI::ActionProperty *v79;
  unsigned int v80;
  google::protobuf::UnknownFieldSet *v81;
  unsigned int v82;
  _BYTE *v83;
  _BYTE *v84;
  unsigned int v85;
  unsigned int v86;
  uint64_t *v87;
  const char *v88;
  SnippetUI::TextProperty *v89;
  unsigned int v90;
  google::protobuf::UnknownFieldSet *v91;
  unsigned int v92;
  _BYTE *v93;
  _BYTE *v94;
  unsigned int v95;
  unsigned int v96;
  google::protobuf::internal *v97;
  const char *v98;
  uint64_t v99;

  v5 = (char *)a2;
  if (this == (SnippetUI::FactItem_Button *)&SnippetUI::_FactItem_Button_default_instance_)
    goto LABEL_109;
  v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
  if (v7)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
    }
    *v5 = 10;
    v8 = *((_DWORD *)v7 + 15);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v12 = v5 + 2;
        do
        {
          v13 = v12;
          *v12++ = v10 | 0x80;
          v14 = v10 >> 7;
          v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        v11 = (google::protobuf::UnknownFieldSet *)(v13 + 2);
        *v12 = v14;
        goto LABEL_13;
      }
      v5[2] = v10;
      v9 = 3;
    }
    else
    {
      v5[1] = v8;
      v9 = 2;
    }
    v11 = (google::protobuf::UnknownFieldSet *)&v5[v9];
LABEL_13:
    v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  v16 = (SnippetUI::Button *)*((_QWORD *)this + 5);
  if (!v16)
    goto LABEL_26;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v16 = (SnippetUI::Button *)*((_QWORD *)this + 5);
  }
  *v5 = 18;
  v17 = *((_DWORD *)v16 + 17);
  if (v17 > 0x7F)
  {
    v5[1] = v17 | 0x80;
    v19 = v17 >> 7;
    if (v17 >> 14)
    {
      v21 = v5 + 2;
      do
      {
        v22 = v21;
        *v21++ = v19 | 0x80;
        v23 = v19 >> 7;
        v24 = v19 >> 14;
        v19 >>= 7;
      }
      while (v24);
      v20 = (google::protobuf::UnknownFieldSet *)(v22 + 2);
      *v21 = v23;
      goto LABEL_25;
    }
    v5[2] = v19;
    v18 = 3;
  }
  else
  {
    v5[1] = v17;
    v18 = 2;
  }
  v20 = (google::protobuf::UnknownFieldSet *)&v5[v18];
LABEL_25:
  v5 = (char *)SnippetUI::Button::InternalSerializeWithCachedSizesToArray(v16, v20, a3, a4);
LABEL_26:
  v25 = (SnippetUI::Button *)*((_QWORD *)this + 6);
  if (!v25)
    goto LABEL_38;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v25 = (SnippetUI::Button *)*((_QWORD *)this + 6);
  }
  *v5 = 26;
  v26 = *((_DWORD *)v25 + 17);
  if (v26 > 0x7F)
  {
    v5[1] = v26 | 0x80;
    v28 = v26 >> 7;
    if (v26 >> 14)
    {
      v30 = v5 + 2;
      do
      {
        v31 = v30;
        *v30++ = v28 | 0x80;
        v32 = v28 >> 7;
        v33 = v28 >> 14;
        v28 >>= 7;
      }
      while (v33);
      v29 = (google::protobuf::UnknownFieldSet *)(v31 + 2);
      *v30 = v32;
      goto LABEL_37;
    }
    v5[2] = v28;
    v27 = 3;
  }
  else
  {
    v5[1] = v26;
    v27 = 2;
  }
  v29 = (google::protobuf::UnknownFieldSet *)&v5[v27];
LABEL_37:
  v5 = (char *)SnippetUI::Button::InternalSerializeWithCachedSizesToArray(v25, v29, a3, a4);
LABEL_38:
  v34 = (SnippetUI::Button *)*((_QWORD *)this + 7);
  if (!v34)
    goto LABEL_50;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v34 = (SnippetUI::Button *)*((_QWORD *)this + 7);
  }
  *v5 = 34;
  v35 = *((_DWORD *)v34 + 17);
  if (v35 > 0x7F)
  {
    v5[1] = v35 | 0x80;
    v37 = v35 >> 7;
    if (v35 >> 14)
    {
      v39 = v5 + 2;
      do
      {
        v40 = v39;
        *v39++ = v37 | 0x80;
        v41 = v37 >> 7;
        v42 = v37 >> 14;
        v37 >>= 7;
      }
      while (v42);
      v38 = (google::protobuf::UnknownFieldSet *)(v40 + 2);
      *v39 = v41;
      goto LABEL_49;
    }
    v5[2] = v37;
    v36 = 3;
  }
  else
  {
    v5[1] = v35;
    v36 = 2;
  }
  v38 = (google::protobuf::UnknownFieldSet *)&v5[v36];
LABEL_49:
  v5 = (char *)SnippetUI::Button::InternalSerializeWithCachedSizesToArray(v34, v38, a3, a4);
LABEL_50:
  v43 = (SnippetUI::TextProperty *)*((_QWORD *)this + 8);
  if (!v43)
    goto LABEL_62;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v43 = (SnippetUI::TextProperty *)*((_QWORD *)this + 8);
  }
  *v5 = 42;
  v44 = *((_DWORD *)v43 + 15);
  if (v44 > 0x7F)
  {
    v5[1] = v44 | 0x80;
    v46 = v44 >> 7;
    if (v44 >> 14)
    {
      v48 = v5 + 2;
      do
      {
        v49 = v48;
        *v48++ = v46 | 0x80;
        v50 = v46 >> 7;
        v51 = v46 >> 14;
        v46 >>= 7;
      }
      while (v51);
      v47 = (google::protobuf::UnknownFieldSet *)(v49 + 2);
      *v48 = v50;
      goto LABEL_61;
    }
    v5[2] = v46;
    v45 = 3;
  }
  else
  {
    v5[1] = v44;
    v45 = 2;
  }
  v47 = (google::protobuf::UnknownFieldSet *)&v5[v45];
LABEL_61:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v43, v47, a3, a4);
LABEL_62:
  v52 = (SnippetUI::TextProperty *)*((_QWORD *)this + 9);
  if (!v52)
    goto LABEL_74;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v52 = (SnippetUI::TextProperty *)*((_QWORD *)this + 9);
  }
  *v5 = 50;
  v53 = *((_DWORD *)v52 + 15);
  if (v53 > 0x7F)
  {
    v5[1] = v53 | 0x80;
    v55 = v53 >> 7;
    if (v53 >> 14)
    {
      v57 = v5 + 2;
      do
      {
        v58 = v57;
        *v57++ = v55 | 0x80;
        v59 = v55 >> 7;
        v60 = v55 >> 14;
        v55 >>= 7;
      }
      while (v60);
      v56 = (google::protobuf::UnknownFieldSet *)(v58 + 2);
      *v57 = v59;
      goto LABEL_73;
    }
    v5[2] = v55;
    v54 = 3;
  }
  else
  {
    v5[1] = v53;
    v54 = 2;
  }
  v56 = (google::protobuf::UnknownFieldSet *)&v5[v54];
LABEL_73:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v52, v56, a3, a4);
LABEL_74:
  v61 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 10);
  if (!v61)
    goto LABEL_86;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v61 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 10);
  }
  *v5 = 58;
  v62 = *((_DWORD *)v61 + 15);
  if (v62 > 0x7F)
  {
    v5[1] = v62 | 0x80;
    v64 = v62 >> 7;
    if (v62 >> 14)
    {
      v66 = v5 + 2;
      do
      {
        v67 = v66;
        *v66++ = v64 | 0x80;
        v68 = v64 >> 7;
        v69 = v64 >> 14;
        v64 >>= 7;
      }
      while (v69);
      v65 = (google::protobuf::UnknownFieldSet *)(v67 + 2);
      *v66 = v68;
      goto LABEL_85;
    }
    v5[2] = v64;
    v63 = 3;
  }
  else
  {
    v5[1] = v62;
    v63 = 2;
  }
  v65 = (google::protobuf::UnknownFieldSet *)&v5[v63];
LABEL_85:
  v5 = (char *)SnippetUI::MultilineTextProperty::InternalSerializeWithCachedSizesToArray(v61, v65, a3, a4);
LABEL_86:
  v70 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 11);
  if (!v70)
    goto LABEL_98;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v70 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 11);
  }
  *v5 = 66;
  v71 = *((_DWORD *)v70 + 15);
  if (v71 > 0x7F)
  {
    v5[1] = v71 | 0x80;
    v73 = v71 >> 7;
    if (v71 >> 14)
    {
      v75 = v5 + 2;
      do
      {
        v76 = v75;
        *v75++ = v73 | 0x80;
        v77 = v73 >> 7;
        v78 = v73 >> 14;
        v73 >>= 7;
      }
      while (v78);
      v74 = (google::protobuf::UnknownFieldSet *)(v76 + 2);
      *v75 = v77;
      goto LABEL_97;
    }
    v5[2] = v73;
    v72 = 3;
  }
  else
  {
    v5[1] = v71;
    v72 = 2;
  }
  v74 = (google::protobuf::UnknownFieldSet *)&v5[v72];
LABEL_97:
  v5 = (char *)SnippetUI::VisualProperty::InternalSerializeWithCachedSizesToArray(v70, v74, a3, a4);
LABEL_98:
  v79 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 12);
  if (v79)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v79 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 12);
    }
    *v5 = 74;
    v80 = *((_DWORD *)v79 + 12);
    if (v80 > 0x7F)
    {
      v5[1] = v80 | 0x80;
      v82 = v80 >> 7;
      if (v80 >> 14)
      {
        v83 = v5 + 2;
        do
        {
          v84 = v83;
          *v83++ = v82 | 0x80;
          v85 = v82 >> 7;
          v86 = v82 >> 14;
          v82 >>= 7;
        }
        while (v86);
        v81 = (google::protobuf::UnknownFieldSet *)(v84 + 2);
        *v83 = v85;
      }
      else
      {
        v5[2] = v82;
        v81 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v80;
      v81 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v79, v81, a3, a4);
  }
LABEL_109:
  v87 = (uint64_t *)*((_QWORD *)this + 2);
  if ((*((char *)v87 + 23) & 0x80000000) == 0)
  {
    v88 = (const char *)*((unsigned __int8 *)v87 + 23);
    if (!*((_BYTE *)v87 + 23))
      goto LABEL_115;
    goto LABEL_114;
  }
  v88 = (const char *)v87[1];
  if (v88)
  {
    v87 = (uint64_t *)*v87;
LABEL_114:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((google::protobuf::internal *)v87, v88, 1, (google::protobuf::internal *)"SnippetUI.FactItem_Button.component_name");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 10, *((_QWORD *)this + 2), v5);
  }
LABEL_115:
  if (this != (SnippetUI::FactItem_Button *)&SnippetUI::_FactItem_Button_default_instance_)
  {
    v89 = (SnippetUI::TextProperty *)*((_QWORD *)this + 13);
    if (v89)
    {
      if ((unint64_t)v5 >= *(_QWORD *)a3)
      {
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
        v89 = (SnippetUI::TextProperty *)*((_QWORD *)this + 13);
      }
      *v5 = 90;
      v90 = *((_DWORD *)v89 + 15);
      if (v90 > 0x7F)
      {
        v5[1] = v90 | 0x80;
        v92 = v90 >> 7;
        if (v90 >> 14)
        {
          v93 = v5 + 2;
          do
          {
            v94 = v93;
            *v93++ = v92 | 0x80;
            v95 = v92 >> 7;
            v96 = v92 >> 14;
            v92 >>= 7;
          }
          while (v96);
          v91 = (google::protobuf::UnknownFieldSet *)(v94 + 2);
          *v93 = v95;
        }
        else
        {
          v5[2] = v92;
          v91 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
        }
      }
      else
      {
        v5[1] = v90;
        v91 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
      }
      v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v89, v91, a3, a4);
    }
  }
  v97 = (google::protobuf::internal *)*((_QWORD *)this + 3);
  if (*((char *)v97 + 23) < 0)
  {
    v98 = (const char *)*((_QWORD *)v97 + 1);
    if (!v98)
      goto LABEL_133;
    v97 = *(google::protobuf::internal **)v97;
    goto LABEL_132;
  }
  v98 = (const char *)*((unsigned __int8 *)v97 + 23);
  if (*((_BYTE *)v97 + 23))
  {
LABEL_132:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v97, v98, 1, (google::protobuf::internal *)"SnippetUI.FactItem_Button.link_identifier");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 12, *((_QWORD *)this + 3), v5);
  }
LABEL_133:
  v99 = *((_QWORD *)this + 1);
  if ((v99 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v99 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)v5;
}

void SnippetUI::FactItem_Button::CopyFrom(SnippetUI::FactItem_Button *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::FactItem_Button::Clear(this);
    SnippetUI::FactItem_Button::MergeFrom(this, a2);
  }
}

void SnippetUI::FactItem_Button::MergeFrom(SnippetUI::FactItem_Button *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::FactItem_Button *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/FactItem.pb.cc", 2678);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::FactItem_Button::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BF88351C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::FactItem_Button::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 112) = a2;
  return this;
}

uint64_t SnippetUI::FactItem_Button::GetMetadata(SnippetUI::FactItem_Button *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_FactItem_2eproto);
  return qword_1EF581518;
}

void InitDefaultsscc_info_FactItem_Standard_FactItem_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/FactItem.pb.cc", a4);
  SnippetUI::FactItem_Standard::FactItem_Standard((SnippetUI::FactItem_Standard *)&SnippetUI::_FactItem_Standard_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_FactItem_Standard_default_instance_, v4);
  qword_1ED1D5308 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D5310 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D5318 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D5320 = &SnippetUI::_MultilineTextProperty_default_instance_;
  qword_1ED1D5328 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D5330 = &SnippetUI::_VisualProperty_default_instance_;
  qword_1ED1D5338 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
}

SnippetUI::FactItem_Standard *SnippetUI::FactItem_Standard::FactItem_Standard(SnippetUI::FactItem_Standard *this)
{
  *(_QWORD *)this = &off_1E792B4D8;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 22) = 0;
  if (atomic_load(scc_info_FactItem_Standard_FactItem_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_FactItem_Standard_FactItem_2eproto);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_QWORD *)this + 10) = 0;
  return this;
}

void sub_1BF88365C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::FactItem_Standard::~FactItem_Standard(SnippetUI::FactItem_Standard *this)
{
  SnippetUI::FactItem_Standard::~FactItem_Standard(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)this = &off_1E792B4D8;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 3);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1C3B8D890](v4, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::FactItem_Standard *)&SnippetUI::_FactItem_Standard_default_instance_)
  {
    v6 = *((_QWORD *)this + 4);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = *((_QWORD *)this + 5);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = *((_QWORD *)this + 6);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = *((_QWORD *)this + 7);
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v10 = *((_QWORD *)this + 8);
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v11 = *((_QWORD *)this + 9);
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = *((_QWORD *)this + 10);
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::FactItem_Standard *SnippetUI::FactItem_Standard::New(SnippetUI::FactItem_Standard *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::FactItem_Standard>(0);
}

SnippetUI::FactItem_Standard *SnippetUI::FactItem_Standard::New(SnippetUI::FactItem_Standard *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::FactItem_Standard>(a2);
}

void SnippetUI::FactItem_Standard::Clear(SnippetUI::FactItem_Standard *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  google::protobuf::internal::InternalMetadataWithArena *v11;
  char v12;

  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 3);
  if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
  v4 = *((_QWORD *)this + 4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 4) = 0;
  v5 = *((_QWORD *)this + 5);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *((_QWORD *)this + 5) = 0;
  v6 = *((_QWORD *)this + 6);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *((_QWORD *)this + 6) = 0;
  v7 = *((_QWORD *)this + 7);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  *((_QWORD *)this + 7) = 0;
  v8 = *((_QWORD *)this + 8);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  *((_QWORD *)this + 8) = 0;
  v9 = *((_QWORD *)this + 9);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  *((_QWORD *)this + 9) = 0;
  v10 = *((_QWORD *)this + 10);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v12 = *((_BYTE *)this + 8);
  v11 = (SnippetUI::FactItem_Standard *)((char *)this + 8);
  *((_QWORD *)v11 + 9) = 0;
  if ((v12 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v11);
}

uint64_t SnippetUI::FactItem_Standard::IsInitialized(SnippetUI::FactItem_Standard *this)
{
  return 1;
}

char *SnippetUI::FactItem_Standard::ByteSizeLong(SnippetUI::FactItem_Standard *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const google::protobuf::UnknownFieldSet *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  SnippetUI::TextProperty *v9;
  char *v10;
  SnippetUI::TextProperty *v11;
  char *v12;
  SnippetUI::TextProperty *v13;
  char *v14;
  SnippetUI::MultilineTextProperty *v15;
  char *v16;
  SnippetUI::TextProperty *v17;
  char *v18;
  SnippetUI::VisualProperty *v19;
  char *v20;
  SnippetUI::ActionProperty *v21;
  char *v22;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  v6 = *((_QWORD *)this + 3);
  v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v8 = *(_QWORD *)(v6 + 8);
  if ((v7 & 0x80u) == 0)
    v8 = v7;
  v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_13:
  if (this != (SnippetUI::FactItem_Standard *)&SnippetUI::_FactItem_Standard_default_instance_)
  {
    v9 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
    if (v9)
    {
      v10 = SnippetUI::TextProperty::ByteSizeLong(v9);
      v5 = (const google::protobuf::UnknownFieldSet *)&v10[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
    if (v11)
    {
      v12 = SnippetUI::TextProperty::ByteSizeLong(v11);
      v5 = (const google::protobuf::UnknownFieldSet *)&v12[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v13 = (SnippetUI::TextProperty *)*((_QWORD *)this + 6);
    if (v13)
    {
      v14 = SnippetUI::TextProperty::ByteSizeLong(v13);
      v5 = (const google::protobuf::UnknownFieldSet *)&v14[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v15 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 7);
    if (v15)
    {
      v16 = SnippetUI::MultilineTextProperty::ByteSizeLong(v15);
      v5 = (const google::protobuf::UnknownFieldSet *)&v16[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v17 = (SnippetUI::TextProperty *)*((_QWORD *)this + 8);
    if (v17)
    {
      v18 = SnippetUI::TextProperty::ByteSizeLong(v17);
      v5 = (const google::protobuf::UnknownFieldSet *)&v18[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v18 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v19 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 9);
    if (v19)
    {
      v20 = SnippetUI::VisualProperty::ByteSizeLong(v19);
      v5 = (const google::protobuf::UnknownFieldSet *)&v20[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v21 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 10);
    if (v21)
    {
      v22 = SnippetUI::ActionProperty::ByteSizeLong(v21);
      v5 = (const google::protobuf::UnknownFieldSet *)&v22[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::FactItem_Standard *)((char *)this + 8), v5, (_DWORD *)this + 22);
  *((_DWORD *)this + 22) = (_DWORD)v5;
  return (char *)v5;
}

uint64_t SnippetUI::FactItem_Standard::GetCachedSize(SnippetUI::FactItem_Standard *this)
{
  return *((unsigned int *)this + 22);
}

google::protobuf::internal *SnippetUI::FactItem_Standard::_InternalParse(SnippetUI::FactItem_Standard *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  std::string **v6;
  uint64_t *v7;
  google::protobuf::internal::ParseContext *v8;
  google::protobuf::internal *TagFallback;
  char *v10;
  SnippetUI::TextProperty *v11;
  SnippetUI::MultilineTextProperty *v12;
  char *v13;
  SnippetUI::VisualProperty *v14;
  SnippetUI::ActionProperty *v15;
  std::string *v16;
  std::string::value_type *v17;
  google::protobuf::internal::ParseContext *v18;
  char *v19;
  BOOL v20;
  google::protobuf::internal *v22;

  v22 = a2;
  v5 = (std::string **)((char *)this + 24);
  v6 = (std::string **)((char *)this + 16);
  v7 = (uint64_t *)((char *)this + 8);
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v22, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v22;
    TagFallback = (google::protobuf::internal *)((char *)v22 + 1);
    v10 = (char *)*(unsigned __int8 *)v22;
    if ((*(char *)v22 & 0x80000000) == 0)
      goto LABEL_6;
    v10 = (char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v22 + 2);
LABEL_6:
      v22 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v22, v10);
    v22 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    switch(v10 >> 3)
    {
      case 1u:
        if (v10 != 10)
          goto LABEL_45;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
        if (v11)
          goto LABEL_27;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 4) = v11;
        goto LABEL_26;
      case 2u:
        if (v10 != 18)
          goto LABEL_45;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
        if (v11)
          goto LABEL_27;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 5) = v11;
        goto LABEL_26;
      case 3u:
        if (v10 != 26)
          goto LABEL_45;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 6);
        if (v11)
          goto LABEL_27;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 6) = v11;
        goto LABEL_26;
      case 4u:
        if (v10 != 34)
          goto LABEL_45;
        v12 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 7);
        if (!v12)
        {
          v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
          *((_QWORD *)this + 7) = v12;
          TagFallback = v22;
        }
        v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::MultilineTextProperty>(a3, v12, TagFallback);
        goto LABEL_50;
      case 5u:
        if (v10 != 42)
          goto LABEL_45;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 8);
        if (v11)
          goto LABEL_27;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 8) = v11;
LABEL_26:
        TagFallback = v22;
LABEL_27:
        v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v11, TagFallback);
        goto LABEL_50;
      case 6u:
        if (v10 != 50)
          goto LABEL_45;
        v14 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 9);
        if (!v14)
        {
          v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
          *((_QWORD *)this + 9) = v14;
          TagFallback = v22;
        }
        v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::VisualProperty>(a3, v14, TagFallback);
        goto LABEL_50;
      case 7u:
        if (v10 != 58)
          goto LABEL_45;
        v15 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 10);
        if (!v15)
        {
          v15 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((_QWORD *)this + 10) = v15;
          TagFallback = v22;
        }
        v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v15, TagFallback);
        goto LABEL_50;
      case 8u:
        if (v10 != 66)
          goto LABEL_45;
        v16 = *v6;
        if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v16 = *v6;
          TagFallback = v22;
        }
        v17 = (std::string::value_type *)TagFallback;
        v18 = a3;
        v19 = "SnippetUI.FactItem_Standard.component_name";
        goto LABEL_44;
      case 9u:
        if (v10 != 74)
          goto LABEL_45;
        v16 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v16 = *v5;
          TagFallback = v22;
        }
        v17 = (std::string::value_type *)TagFallback;
        v18 = a3;
        v19 = "SnippetUI.FactItem_Standard.link_identifier";
LABEL_44:
        v13 = google::protobuf::internal::InlineGreedyStringParserUTF8(v16, v17, (uint64_t)v18, (google::protobuf::internal *)v19);
        goto LABEL_50;
      default:
LABEL_45:
        if ((_DWORD)v10)
          v20 = (v10 & 7) == 4;
        else
          v20 = 1;
        if (v20)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v10 - 1;
          return TagFallback;
        }
        v13 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v7, TagFallback, a3, v8);
LABEL_50:
        v22 = (google::protobuf::internal *)v13;
        if (v13)
          continue;
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::FactItem_Standard::InternalSerializeWithCachedSizesToArray(SnippetUI::FactItem_Standard *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  SnippetUI::TextProperty *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  google::protobuf::UnknownFieldSet *v11;
  _BYTE *v12;
  _BYTE *v13;
  unsigned int v14;
  unsigned int v15;
  SnippetUI::TextProperty *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  google::protobuf::UnknownFieldSet *v20;
  _BYTE *v21;
  _BYTE *v22;
  unsigned int v23;
  unsigned int v24;
  SnippetUI::TextProperty *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  google::protobuf::UnknownFieldSet *v29;
  _BYTE *v30;
  _BYTE *v31;
  unsigned int v32;
  unsigned int v33;
  SnippetUI::MultilineTextProperty *v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  google::protobuf::UnknownFieldSet *v38;
  _BYTE *v39;
  _BYTE *v40;
  unsigned int v41;
  unsigned int v42;
  SnippetUI::TextProperty *v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  google::protobuf::UnknownFieldSet *v47;
  _BYTE *v48;
  _BYTE *v49;
  unsigned int v50;
  unsigned int v51;
  SnippetUI::VisualProperty *v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int v55;
  google::protobuf::UnknownFieldSet *v56;
  _BYTE *v57;
  _BYTE *v58;
  unsigned int v59;
  unsigned int v60;
  SnippetUI::ActionProperty *v61;
  unsigned int v62;
  google::protobuf::UnknownFieldSet *v63;
  unsigned int v64;
  _BYTE *v65;
  _BYTE *v66;
  unsigned int v67;
  unsigned int v68;
  google::protobuf::internal *v69;
  const char *v70;
  google::protobuf::internal *v71;
  const char *v72;
  uint64_t v73;

  v5 = (char *)a2;
  if (this == (SnippetUI::FactItem_Standard *)&SnippetUI::_FactItem_Standard_default_instance_)
    goto LABEL_85;
  v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
  if (v7)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
    }
    *v5 = 10;
    v8 = *((_DWORD *)v7 + 15);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v12 = v5 + 2;
        do
        {
          v13 = v12;
          *v12++ = v10 | 0x80;
          v14 = v10 >> 7;
          v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        v11 = (google::protobuf::UnknownFieldSet *)(v13 + 2);
        *v12 = v14;
        goto LABEL_13;
      }
      v5[2] = v10;
      v9 = 3;
    }
    else
    {
      v5[1] = v8;
      v9 = 2;
    }
    v11 = (google::protobuf::UnknownFieldSet *)&v5[v9];
LABEL_13:
    v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
  if (!v16)
    goto LABEL_26;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
  }
  *v5 = 18;
  v17 = *((_DWORD *)v16 + 15);
  if (v17 > 0x7F)
  {
    v5[1] = v17 | 0x80;
    v19 = v17 >> 7;
    if (v17 >> 14)
    {
      v21 = v5 + 2;
      do
      {
        v22 = v21;
        *v21++ = v19 | 0x80;
        v23 = v19 >> 7;
        v24 = v19 >> 14;
        v19 >>= 7;
      }
      while (v24);
      v20 = (google::protobuf::UnknownFieldSet *)(v22 + 2);
      *v21 = v23;
      goto LABEL_25;
    }
    v5[2] = v19;
    v18 = 3;
  }
  else
  {
    v5[1] = v17;
    v18 = 2;
  }
  v20 = (google::protobuf::UnknownFieldSet *)&v5[v18];
LABEL_25:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v16, v20, a3, a4);
LABEL_26:
  v25 = (SnippetUI::TextProperty *)*((_QWORD *)this + 6);
  if (!v25)
    goto LABEL_38;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v25 = (SnippetUI::TextProperty *)*((_QWORD *)this + 6);
  }
  *v5 = 26;
  v26 = *((_DWORD *)v25 + 15);
  if (v26 > 0x7F)
  {
    v5[1] = v26 | 0x80;
    v28 = v26 >> 7;
    if (v26 >> 14)
    {
      v30 = v5 + 2;
      do
      {
        v31 = v30;
        *v30++ = v28 | 0x80;
        v32 = v28 >> 7;
        v33 = v28 >> 14;
        v28 >>= 7;
      }
      while (v33);
      v29 = (google::protobuf::UnknownFieldSet *)(v31 + 2);
      *v30 = v32;
      goto LABEL_37;
    }
    v5[2] = v28;
    v27 = 3;
  }
  else
  {
    v5[1] = v26;
    v27 = 2;
  }
  v29 = (google::protobuf::UnknownFieldSet *)&v5[v27];
LABEL_37:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v25, v29, a3, a4);
LABEL_38:
  v34 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 7);
  if (!v34)
    goto LABEL_50;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v34 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 7);
  }
  *v5 = 34;
  v35 = *((_DWORD *)v34 + 15);
  if (v35 > 0x7F)
  {
    v5[1] = v35 | 0x80;
    v37 = v35 >> 7;
    if (v35 >> 14)
    {
      v39 = v5 + 2;
      do
      {
        v40 = v39;
        *v39++ = v37 | 0x80;
        v41 = v37 >> 7;
        v42 = v37 >> 14;
        v37 >>= 7;
      }
      while (v42);
      v38 = (google::protobuf::UnknownFieldSet *)(v40 + 2);
      *v39 = v41;
      goto LABEL_49;
    }
    v5[2] = v37;
    v36 = 3;
  }
  else
  {
    v5[1] = v35;
    v36 = 2;
  }
  v38 = (google::protobuf::UnknownFieldSet *)&v5[v36];
LABEL_49:
  v5 = (char *)SnippetUI::MultilineTextProperty::InternalSerializeWithCachedSizesToArray(v34, v38, a3, a4);
LABEL_50:
  v43 = (SnippetUI::TextProperty *)*((_QWORD *)this + 8);
  if (!v43)
    goto LABEL_62;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v43 = (SnippetUI::TextProperty *)*((_QWORD *)this + 8);
  }
  *v5 = 42;
  v44 = *((_DWORD *)v43 + 15);
  if (v44 > 0x7F)
  {
    v5[1] = v44 | 0x80;
    v46 = v44 >> 7;
    if (v44 >> 14)
    {
      v48 = v5 + 2;
      do
      {
        v49 = v48;
        *v48++ = v46 | 0x80;
        v50 = v46 >> 7;
        v51 = v46 >> 14;
        v46 >>= 7;
      }
      while (v51);
      v47 = (google::protobuf::UnknownFieldSet *)(v49 + 2);
      *v48 = v50;
      goto LABEL_61;
    }
    v5[2] = v46;
    v45 = 3;
  }
  else
  {
    v5[1] = v44;
    v45 = 2;
  }
  v47 = (google::protobuf::UnknownFieldSet *)&v5[v45];
LABEL_61:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v43, v47, a3, a4);
LABEL_62:
  v52 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 9);
  if (!v52)
    goto LABEL_74;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v52 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 9);
  }
  *v5 = 50;
  v53 = *((_DWORD *)v52 + 15);
  if (v53 > 0x7F)
  {
    v5[1] = v53 | 0x80;
    v55 = v53 >> 7;
    if (v53 >> 14)
    {
      v57 = v5 + 2;
      do
      {
        v58 = v57;
        *v57++ = v55 | 0x80;
        v59 = v55 >> 7;
        v60 = v55 >> 14;
        v55 >>= 7;
      }
      while (v60);
      v56 = (google::protobuf::UnknownFieldSet *)(v58 + 2);
      *v57 = v59;
      goto LABEL_73;
    }
    v5[2] = v55;
    v54 = 3;
  }
  else
  {
    v5[1] = v53;
    v54 = 2;
  }
  v56 = (google::protobuf::UnknownFieldSet *)&v5[v54];
LABEL_73:
  v5 = (char *)SnippetUI::VisualProperty::InternalSerializeWithCachedSizesToArray(v52, v56, a3, a4);
LABEL_74:
  v61 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 10);
  if (v61)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v61 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 10);
    }
    *v5 = 58;
    v62 = *((_DWORD *)v61 + 12);
    if (v62 > 0x7F)
    {
      v5[1] = v62 | 0x80;
      v64 = v62 >> 7;
      if (v62 >> 14)
      {
        v65 = v5 + 2;
        do
        {
          v66 = v65;
          *v65++ = v64 | 0x80;
          v67 = v64 >> 7;
          v68 = v64 >> 14;
          v64 >>= 7;
        }
        while (v68);
        v63 = (google::protobuf::UnknownFieldSet *)(v66 + 2);
        *v65 = v67;
      }
      else
      {
        v5[2] = v64;
        v63 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v62;
      v63 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v61, v63, a3, a4);
  }
LABEL_85:
  v69 = (google::protobuf::internal *)*((_QWORD *)this + 2);
  if (*((char *)v69 + 23) < 0)
  {
    v70 = (const char *)*((_QWORD *)v69 + 1);
    if (!v70)
      goto LABEL_91;
    v69 = *(google::protobuf::internal **)v69;
    goto LABEL_90;
  }
  v70 = (const char *)*((unsigned __int8 *)v69 + 23);
  if (*((_BYTE *)v69 + 23))
  {
LABEL_90:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v69, v70, 1, (google::protobuf::internal *)"SnippetUI.FactItem_Standard.component_name");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 8, *((_QWORD *)this + 2), v5);
  }
LABEL_91:
  v71 = (google::protobuf::internal *)*((_QWORD *)this + 3);
  if (*((char *)v71 + 23) < 0)
  {
    v72 = (const char *)*((_QWORD *)v71 + 1);
    if (!v72)
      goto LABEL_97;
    v71 = *(google::protobuf::internal **)v71;
    goto LABEL_96;
  }
  v72 = (const char *)*((unsigned __int8 *)v71 + 23);
  if (*((_BYTE *)v71 + 23))
  {
LABEL_96:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v71, v72, 1, (google::protobuf::internal *)"SnippetUI.FactItem_Standard.link_identifier");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 9, *((_QWORD *)this + 3), v5);
  }
LABEL_97:
  v73 = *((_QWORD *)this + 1);
  if ((v73 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v73 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)v5;
}

void SnippetUI::FactItem_Standard::CopyFrom(SnippetUI::FactItem_Standard *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::FactItem_Standard::Clear(this);
    SnippetUI::FactItem_Standard::MergeFrom(this, a2);
  }
}

void SnippetUI::FactItem_Standard::MergeFrom(SnippetUI::FactItem_Standard *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::FactItem_Standard *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/FactItem.pb.cc", 754);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::FactItem_Standard::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BF884398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::FactItem_Standard::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 88) = a2;
  return this;
}

uint64_t SnippetUI::FactItem_Standard::GetMetadata(SnippetUI::FactItem_Standard *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_FactItem_2eproto);
  return file_level_metadata_FactItem_2eproto;
}

void *SnippetUI::FactItem_Standard::default_instance(SnippetUI::FactItem_Standard *this)
{
  if (atomic_load(scc_info_FactItem_Standard_FactItem_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_FactItem_Standard_FactItem_2eproto);
  return &SnippetUI::_FactItem_Standard_default_instance_;
}

void SnippetUI::FactItem_Standard::MergeFrom(SnippetUI::FactItem_Standard *this, const SnippetUI::FactItem_Standard *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  int **v10;
  int **v11;
  int **v12;
  int **v13;
  int **v14;
  int **v15;
  int **v16;
  int **v17;
  int **v18;
  int **v19;
  int **v20;
  int **v21;
  int **v22;
  int **v23;
  int **v24;
  int **v25;
  int **v26;
  int **v27;
  int **v28;
  int **v29;
  int **v30;
  char v31;
  std::string v32[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v32, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/FactItem.pb.cc", 769);
    v4 = google::protobuf::internal::LogMessage::operator<<(v32, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v31, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v32[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::FactItem_Standard *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_QWORD *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v6);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(_QWORD *)(v8 + 8))
      goto LABEL_21;
  }
  else if (!*(_BYTE *)(v8 + 23))
  {
    goto LABEL_21;
  }
  v9 = (uint64_t *)*((_QWORD *)this + 3);
  if (v9 != (uint64_t *)v8)
  {
    if (v9 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
    else
      std::string::operator=(*((std::string **)this + 3), (const std::string *)v8);
  }
LABEL_21:
  if (a2 != (const SnippetUI::FactItem_Standard *)&SnippetUI::_FactItem_Standard_default_instance_)
  {
    v10 = (int **)*((_QWORD *)a2 + 4);
    if (v10)
    {
      v11 = (int **)*((_QWORD *)this + 4);
      if (!v11)
      {
        v11 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 4) = v11;
        v10 = (int **)*((_QWORD *)a2 + 4);
      }
      if (v10)
        v12 = v10;
      else
        v12 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v11, v12);
    }
    v13 = (int **)*((_QWORD *)a2 + 5);
    if (v13)
    {
      v14 = (int **)*((_QWORD *)this + 5);
      if (!v14)
      {
        v14 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 5) = v14;
        v13 = (int **)*((_QWORD *)a2 + 5);
      }
      if (v13)
        v15 = v13;
      else
        v15 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v14, v15);
    }
    v16 = (int **)*((_QWORD *)a2 + 6);
    if (v16)
    {
      v17 = (int **)*((_QWORD *)this + 6);
      if (!v17)
      {
        v17 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 6) = v17;
        v16 = (int **)*((_QWORD *)a2 + 6);
      }
      if (v16)
        v18 = v16;
      else
        v18 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v17, v18);
    }
    v19 = (int **)*((_QWORD *)a2 + 7);
    if (v19)
    {
      v20 = (int **)*((_QWORD *)this + 7);
      if (!v20)
      {
        v20 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((_QWORD *)this + 7) = v20;
        v19 = (int **)*((_QWORD *)a2 + 7);
      }
      if (v19)
        v21 = v19;
      else
        v21 = (int **)&SnippetUI::_MultilineTextProperty_default_instance_;
      SnippetUI::MultilineTextProperty::MergeFrom(v20, v21);
    }
    v22 = (int **)*((_QWORD *)a2 + 8);
    if (v22)
    {
      v23 = (int **)*((_QWORD *)this + 8);
      if (!v23)
      {
        v23 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 8) = v23;
        v22 = (int **)*((_QWORD *)a2 + 8);
      }
      if (v22)
        v24 = v22;
      else
        v24 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v23, v24);
    }
    v25 = (int **)*((_QWORD *)a2 + 9);
    if (v25)
    {
      v26 = (int **)*((_QWORD *)this + 9);
      if (!v26)
      {
        v26 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((_QWORD *)this + 9) = v26;
        v25 = (int **)*((_QWORD *)a2 + 9);
      }
      if (v25)
        v27 = v25;
      else
        v27 = (int **)&SnippetUI::_VisualProperty_default_instance_;
      SnippetUI::VisualProperty::MergeFrom(v26, v27);
    }
    v28 = (int **)*((_QWORD *)a2 + 10);
    if (v28)
    {
      v29 = (int **)*((_QWORD *)this + 10);
      if (!v29)
      {
        v29 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((_QWORD *)this + 10) = v29;
        v28 = (int **)*((_QWORD *)a2 + 10);
      }
      if (v28)
        v30 = v28;
      else
        v30 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      SnippetUI::ActionProperty::MergeFrom(v29, v30);
    }
  }
}

void sub_1BF884688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

char *google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(google::protobuf::internal::EpsCopyInputStream *this, SnippetUI::TextProperty *a2, google::protobuf::internal *a3)
{
  int v6;
  const char *v7;
  char *v8;
  char *result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = *(char *)a3;
  v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result)
      return result;
    v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    v8 = (char *)a3 + 1;
  }
  v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  v12 = *((_DWORD *)this + 22);
  v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = (char *)SnippetUI::TextProperty::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result)
    return result;
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20))
    return 0;
  v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(_QWORD *)this = *((_QWORD *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

char *google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::MultilineTextProperty>(google::protobuf::internal::EpsCopyInputStream *this, SnippetUI::MultilineTextProperty *a2, google::protobuf::internal *a3)
{
  int v6;
  const char *v7;
  char *v8;
  char *result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = *(char *)a3;
  v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result)
      return result;
    v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    v8 = (char *)a3 + 1;
  }
  v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  v12 = *((_DWORD *)this + 22);
  v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = (char *)SnippetUI::MultilineTextProperty::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result)
    return result;
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20))
    return 0;
  v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(_QWORD *)this = *((_QWORD *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

char *google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::VisualProperty>(google::protobuf::internal::EpsCopyInputStream *this, SnippetUI::VisualProperty *a2, google::protobuf::internal *a3)
{
  int v6;
  const char *v7;
  char *v8;
  char *result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = *(char *)a3;
  v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result)
      return result;
    v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    v8 = (char *)a3 + 1;
  }
  v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  v12 = *((_DWORD *)this + 22);
  v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = (char *)SnippetUI::VisualProperty::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result)
    return result;
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20))
    return 0;
  v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(_QWORD *)this = *((_QWORD *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

char *google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(google::protobuf::internal::EpsCopyInputStream *this, SnippetUI::ActionProperty *a2, google::protobuf::internal *a3)
{
  int v6;
  const char *v7;
  char *v8;
  char *result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = *(char *)a3;
  v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result)
      return result;
    v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    v8 = (char *)a3 + 1;
  }
  v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  v12 = *((_DWORD *)this + 22);
  v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = (char *)SnippetUI::ActionProperty::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result)
    return result;
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20))
    return 0;
  v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(_QWORD *)this = *((_QWORD *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

SnippetUI::FactItem_Standard *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::FactItem_Standard>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::FactItem_Standard *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::FactItem_Standard *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x60uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::FactItem_Standard>);
    SnippetUI::FactItem_Standard::FactItem_Standard(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::FactItem_Standard *)operator new();
    SnippetUI::FactItem_Standard::FactItem_Standard(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BF884A34(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C404A70EBA6);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::FactItem_Standard>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void InitDefaultsscc_info_FactItem_ShortNumber_FactItem_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/FactItem.pb.cc", a4);
  SnippetUI::FactItem_ShortNumber::FactItem_ShortNumber((SnippetUI::FactItem_ShortNumber *)&SnippetUI::_FactItem_ShortNumber_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_FactItem_ShortNumber_default_instance_, v4);
  qword_1ED1D54E8 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D54F0 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D54F8 = (uint64_t)&SnippetUI::_MultilineTextProperty_default_instance_;
  unk_1ED1D5500 = &SnippetUI::_MultilineTextProperty_default_instance_;
  qword_1ED1D5508 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D5510 = &SnippetUI::_VisualProperty_default_instance_;
  qword_1ED1D5518 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
  unk_1ED1D5520 = &SnippetUI::_TextProperty_default_instance_;
}

SnippetUI::FactItem_ShortNumber *SnippetUI::FactItem_ShortNumber::FactItem_ShortNumber(SnippetUI::FactItem_ShortNumber *this)
{
  *(_QWORD *)this = &off_1E792B598;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 24) = 0;
  if (atomic_load(scc_info_FactItem_ShortNumber_FactItem_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_FactItem_ShortNumber_FactItem_2eproto);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  return this;
}

void sub_1BF884CA8(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::FactItem_ShortNumber::~FactItem_ShortNumber(SnippetUI::FactItem_ShortNumber *this)
{
  SnippetUI::FactItem_ShortNumber::~FactItem_ShortNumber(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)this = &off_1E792B598;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 3);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1C3B8D890](v4, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::FactItem_ShortNumber *)&SnippetUI::_FactItem_ShortNumber_default_instance_)
  {
    v6 = *((_QWORD *)this + 4);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = *((_QWORD *)this + 5);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = *((_QWORD *)this + 6);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = *((_QWORD *)this + 7);
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v10 = *((_QWORD *)this + 8);
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v11 = *((_QWORD *)this + 9);
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = *((_QWORD *)this + 10);
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    v13 = *((_QWORD *)this + 11);
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::FactItem_ShortNumber *SnippetUI::FactItem_ShortNumber::New(SnippetUI::FactItem_ShortNumber *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::FactItem_ShortNumber>(0);
}

SnippetUI::FactItem_ShortNumber *SnippetUI::FactItem_ShortNumber::New(SnippetUI::FactItem_ShortNumber *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::FactItem_ShortNumber>(a2);
}

void SnippetUI::FactItem_ShortNumber::Clear(SnippetUI::FactItem_ShortNumber *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  google::protobuf::internal::InternalMetadataWithArena *v12;
  char v13;

  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 3);
  if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
  v4 = *((_QWORD *)this + 4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 4) = 0;
  v5 = *((_QWORD *)this + 5);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *((_QWORD *)this + 5) = 0;
  v6 = *((_QWORD *)this + 6);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *((_QWORD *)this + 6) = 0;
  v7 = *((_QWORD *)this + 7);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  *((_QWORD *)this + 7) = 0;
  v8 = *((_QWORD *)this + 8);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  *((_QWORD *)this + 8) = 0;
  v9 = *((_QWORD *)this + 9);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  *((_QWORD *)this + 9) = 0;
  v10 = *((_QWORD *)this + 10);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  *((_QWORD *)this + 10) = 0;
  v11 = *((_QWORD *)this + 11);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v13 = *((_BYTE *)this + 8);
  v12 = (SnippetUI::FactItem_ShortNumber *)((char *)this + 8);
  *((_QWORD *)v12 + 10) = 0;
  if ((v13 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v12);
}

uint64_t SnippetUI::FactItem_ShortNumber::IsInitialized(SnippetUI::FactItem_ShortNumber *this)
{
  return 1;
}

char *SnippetUI::FactItem_ShortNumber::ByteSizeLong(SnippetUI::FactItem_ShortNumber *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const google::protobuf::UnknownFieldSet *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  SnippetUI::TextProperty *v9;
  char *v10;
  SnippetUI::TextProperty *v11;
  char *v12;
  SnippetUI::MultilineTextProperty *v13;
  char *v14;
  SnippetUI::MultilineTextProperty *v15;
  char *v16;
  SnippetUI::TextProperty *v17;
  char *v18;
  SnippetUI::VisualProperty *v19;
  char *v20;
  SnippetUI::ActionProperty *v21;
  char *v22;
  SnippetUI::TextProperty *v23;
  char *v24;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  v6 = *((_QWORD *)this + 3);
  v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v8 = *(_QWORD *)(v6 + 8);
  if ((v7 & 0x80u) == 0)
    v8 = v7;
  v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_13:
  if (this != (SnippetUI::FactItem_ShortNumber *)&SnippetUI::_FactItem_ShortNumber_default_instance_)
  {
    v9 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
    if (v9)
    {
      v10 = SnippetUI::TextProperty::ByteSizeLong(v9);
      v5 = (const google::protobuf::UnknownFieldSet *)&v10[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
    if (v11)
    {
      v12 = SnippetUI::TextProperty::ByteSizeLong(v11);
      v5 = (const google::protobuf::UnknownFieldSet *)&v12[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v13 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 6);
    if (v13)
    {
      v14 = SnippetUI::MultilineTextProperty::ByteSizeLong(v13);
      v5 = (const google::protobuf::UnknownFieldSet *)&v14[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v15 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 7);
    if (v15)
    {
      v16 = SnippetUI::MultilineTextProperty::ByteSizeLong(v15);
      v5 = (const google::protobuf::UnknownFieldSet *)&v16[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v17 = (SnippetUI::TextProperty *)*((_QWORD *)this + 8);
    if (v17)
    {
      v18 = SnippetUI::TextProperty::ByteSizeLong(v17);
      v5 = (const google::protobuf::UnknownFieldSet *)&v18[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v18 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v19 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 9);
    if (v19)
    {
      v20 = SnippetUI::VisualProperty::ByteSizeLong(v19);
      v5 = (const google::protobuf::UnknownFieldSet *)&v20[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v21 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 10);
    if (v21)
    {
      v22 = SnippetUI::ActionProperty::ByteSizeLong(v21);
      v5 = (const google::protobuf::UnknownFieldSet *)&v22[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v23 = (SnippetUI::TextProperty *)*((_QWORD *)this + 11);
    if (v23)
    {
      v24 = SnippetUI::TextProperty::ByteSizeLong(v23);
      v5 = (const google::protobuf::UnknownFieldSet *)&v24[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v24 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::FactItem_ShortNumber *)((char *)this + 8), v5, (_DWORD *)this + 24);
  *((_DWORD *)this + 24) = (_DWORD)v5;
  return (char *)v5;
}

uint64_t SnippetUI::FactItem_ShortNumber::GetCachedSize(SnippetUI::FactItem_ShortNumber *this)
{
  return *((unsigned int *)this + 24);
}

google::protobuf::internal *SnippetUI::FactItem_ShortNumber::_InternalParse(SnippetUI::FactItem_ShortNumber *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  std::string **v6;
  uint64_t *v7;
  google::protobuf::internal::ParseContext *v8;
  google::protobuf::internal *TagFallback;
  char *v10;
  SnippetUI::TextProperty *v11;
  SnippetUI::MultilineTextProperty *v12;
  char *v13;
  SnippetUI::VisualProperty *v14;
  SnippetUI::ActionProperty *v15;
  std::string *v16;
  std::string::value_type *v17;
  google::protobuf::internal::ParseContext *v18;
  char *v19;
  BOOL v20;
  google::protobuf::internal *v22;

  v22 = a2;
  v5 = (std::string **)((char *)this + 24);
  v6 = (std::string **)((char *)this + 16);
  v7 = (uint64_t *)((char *)this + 8);
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v22, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v22;
    TagFallback = (google::protobuf::internal *)((char *)v22 + 1);
    v10 = (char *)*(unsigned __int8 *)v22;
    if ((*(char *)v22 & 0x80000000) == 0)
      goto LABEL_6;
    v10 = (char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v22 + 2);
LABEL_6:
      v22 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v22, v10);
    v22 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    switch(v10 >> 3)
    {
      case 1u:
        if (v10 != 10)
          goto LABEL_49;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
        if (v11)
          goto LABEL_43;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 4) = v11;
        goto LABEL_42;
      case 2u:
        if (v10 != 18)
          goto LABEL_49;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
        if (v11)
          goto LABEL_43;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 5) = v11;
        goto LABEL_42;
      case 3u:
        if (v10 != 26)
          goto LABEL_49;
        v12 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 6);
        if (v12)
          goto LABEL_23;
        v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((_QWORD *)this + 6) = v12;
        goto LABEL_22;
      case 4u:
        if (v10 != 34)
          goto LABEL_49;
        v12 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 7);
        if (v12)
          goto LABEL_23;
        v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((_QWORD *)this + 7) = v12;
LABEL_22:
        TagFallback = v22;
LABEL_23:
        v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::MultilineTextProperty>(a3, v12, TagFallback);
        goto LABEL_54;
      case 5u:
        if (v10 != 42)
          goto LABEL_49;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 8);
        if (v11)
          goto LABEL_43;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 8) = v11;
        goto LABEL_42;
      case 6u:
        if (v10 != 50)
          goto LABEL_49;
        v14 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 9);
        if (!v14)
        {
          v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
          *((_QWORD *)this + 9) = v14;
          TagFallback = v22;
        }
        v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::VisualProperty>(a3, v14, TagFallback);
        goto LABEL_54;
      case 7u:
        if (v10 != 58)
          goto LABEL_49;
        v15 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 10);
        if (!v15)
        {
          v15 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((_QWORD *)this + 10) = v15;
          TagFallback = v22;
        }
        v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v15, TagFallback);
        goto LABEL_54;
      case 8u:
        if (v10 != 66)
          goto LABEL_49;
        v16 = *v6;
        if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v16 = *v6;
          TagFallback = v22;
        }
        v17 = (std::string::value_type *)TagFallback;
        v18 = a3;
        v19 = "SnippetUI.FactItem_ShortNumber.component_name";
        goto LABEL_48;
      case 9u:
        if (v10 != 74)
          goto LABEL_49;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 11);
        if (v11)
          goto LABEL_43;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 11) = v11;
LABEL_42:
        TagFallback = v22;
LABEL_43:
        v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v11, TagFallback);
        goto LABEL_54;
      case 0xAu:
        if (v10 != 82)
          goto LABEL_49;
        v16 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v16 = *v5;
          TagFallback = v22;
        }
        v17 = (std::string::value_type *)TagFallback;
        v18 = a3;
        v19 = "SnippetUI.FactItem_ShortNumber.link_identifier";
LABEL_48:
        v13 = google::protobuf::internal::InlineGreedyStringParserUTF8(v16, v17, (uint64_t)v18, (google::protobuf::internal *)v19);
        goto LABEL_54;
      default:
LABEL_49:
        if ((_DWORD)v10)
          v20 = (v10 & 7) == 4;
        else
          v20 = 1;
        if (v20)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v10 - 1;
          return TagFallback;
        }
        v13 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v7, TagFallback, a3, v8);
LABEL_54:
        v22 = (google::protobuf::internal *)v13;
        if (v13)
          continue;
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::FactItem_ShortNumber::InternalSerializeWithCachedSizesToArray(SnippetUI::FactItem_ShortNumber *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  SnippetUI::TextProperty *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  google::protobuf::UnknownFieldSet *v11;
  _BYTE *v12;
  _BYTE *v13;
  unsigned int v14;
  unsigned int v15;
  SnippetUI::TextProperty *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  google::protobuf::UnknownFieldSet *v20;
  _BYTE *v21;
  _BYTE *v22;
  unsigned int v23;
  unsigned int v24;
  SnippetUI::MultilineTextProperty *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  google::protobuf::UnknownFieldSet *v29;
  _BYTE *v30;
  _BYTE *v31;
  unsigned int v32;
  unsigned int v33;
  SnippetUI::MultilineTextProperty *v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  google::protobuf::UnknownFieldSet *v38;
  _BYTE *v39;
  _BYTE *v40;
  unsigned int v41;
  unsigned int v42;
  SnippetUI::TextProperty *v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  google::protobuf::UnknownFieldSet *v47;
  _BYTE *v48;
  _BYTE *v49;
  unsigned int v50;
  unsigned int v51;
  SnippetUI::VisualProperty *v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int v55;
  google::protobuf::UnknownFieldSet *v56;
  _BYTE *v57;
  _BYTE *v58;
  unsigned int v59;
  unsigned int v60;
  SnippetUI::ActionProperty *v61;
  unsigned int v62;
  google::protobuf::UnknownFieldSet *v63;
  unsigned int v64;
  _BYTE *v65;
  _BYTE *v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t *v69;
  const char *v70;
  SnippetUI::TextProperty *v71;
  unsigned int v72;
  google::protobuf::UnknownFieldSet *v73;
  unsigned int v74;
  _BYTE *v75;
  _BYTE *v76;
  unsigned int v77;
  unsigned int v78;
  google::protobuf::internal *v79;
  const char *v80;
  uint64_t v81;

  v5 = (char *)a2;
  if (this == (SnippetUI::FactItem_ShortNumber *)&SnippetUI::_FactItem_ShortNumber_default_instance_)
    goto LABEL_85;
  v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
  if (v7)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
    }
    *v5 = 10;
    v8 = *((_DWORD *)v7 + 15);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v12 = v5 + 2;
        do
        {
          v13 = v12;
          *v12++ = v10 | 0x80;
          v14 = v10 >> 7;
          v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        v11 = (google::protobuf::UnknownFieldSet *)(v13 + 2);
        *v12 = v14;
        goto LABEL_13;
      }
      v5[2] = v10;
      v9 = 3;
    }
    else
    {
      v5[1] = v8;
      v9 = 2;
    }
    v11 = (google::protobuf::UnknownFieldSet *)&v5[v9];
LABEL_13:
    v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
  if (!v16)
    goto LABEL_26;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
  }
  *v5 = 18;
  v17 = *((_DWORD *)v16 + 15);
  if (v17 > 0x7F)
  {
    v5[1] = v17 | 0x80;
    v19 = v17 >> 7;
    if (v17 >> 14)
    {
      v21 = v5 + 2;
      do
      {
        v22 = v21;
        *v21++ = v19 | 0x80;
        v23 = v19 >> 7;
        v24 = v19 >> 14;
        v19 >>= 7;
      }
      while (v24);
      v20 = (google::protobuf::UnknownFieldSet *)(v22 + 2);
      *v21 = v23;
      goto LABEL_25;
    }
    v5[2] = v19;
    v18 = 3;
  }
  else
  {
    v5[1] = v17;
    v18 = 2;
  }
  v20 = (google::protobuf::UnknownFieldSet *)&v5[v18];
LABEL_25:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v16, v20, a3, a4);
LABEL_26:
  v25 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 6);
  if (!v25)
    goto LABEL_38;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v25 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 6);
  }
  *v5 = 26;
  v26 = *((_DWORD *)v25 + 15);
  if (v26 > 0x7F)
  {
    v5[1] = v26 | 0x80;
    v28 = v26 >> 7;
    if (v26 >> 14)
    {
      v30 = v5 + 2;
      do
      {
        v31 = v30;
        *v30++ = v28 | 0x80;
        v32 = v28 >> 7;
        v33 = v28 >> 14;
        v28 >>= 7;
      }
      while (v33);
      v29 = (google::protobuf::UnknownFieldSet *)(v31 + 2);
      *v30 = v32;
      goto LABEL_37;
    }
    v5[2] = v28;
    v27 = 3;
  }
  else
  {
    v5[1] = v26;
    v27 = 2;
  }
  v29 = (google::protobuf::UnknownFieldSet *)&v5[v27];
LABEL_37:
  v5 = (char *)SnippetUI::MultilineTextProperty::InternalSerializeWithCachedSizesToArray(v25, v29, a3, a4);
LABEL_38:
  v34 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 7);
  if (!v34)
    goto LABEL_50;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v34 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 7);
  }
  *v5 = 34;
  v35 = *((_DWORD *)v34 + 15);
  if (v35 > 0x7F)
  {
    v5[1] = v35 | 0x80;
    v37 = v35 >> 7;
    if (v35 >> 14)
    {
      v39 = v5 + 2;
      do
      {
        v40 = v39;
        *v39++ = v37 | 0x80;
        v41 = v37 >> 7;
        v42 = v37 >> 14;
        v37 >>= 7;
      }
      while (v42);
      v38 = (google::protobuf::UnknownFieldSet *)(v40 + 2);
      *v39 = v41;
      goto LABEL_49;
    }
    v5[2] = v37;
    v36 = 3;
  }
  else
  {
    v5[1] = v35;
    v36 = 2;
  }
  v38 = (google::protobuf::UnknownFieldSet *)&v5[v36];
LABEL_49:
  v5 = (char *)SnippetUI::MultilineTextProperty::InternalSerializeWithCachedSizesToArray(v34, v38, a3, a4);
LABEL_50:
  v43 = (SnippetUI::TextProperty *)*((_QWORD *)this + 8);
  if (!v43)
    goto LABEL_62;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v43 = (SnippetUI::TextProperty *)*((_QWORD *)this + 8);
  }
  *v5 = 42;
  v44 = *((_DWORD *)v43 + 15);
  if (v44 > 0x7F)
  {
    v5[1] = v44 | 0x80;
    v46 = v44 >> 7;
    if (v44 >> 14)
    {
      v48 = v5 + 2;
      do
      {
        v49 = v48;
        *v48++ = v46 | 0x80;
        v50 = v46 >> 7;
        v51 = v46 >> 14;
        v46 >>= 7;
      }
      while (v51);
      v47 = (google::protobuf::UnknownFieldSet *)(v49 + 2);
      *v48 = v50;
      goto LABEL_61;
    }
    v5[2] = v46;
    v45 = 3;
  }
  else
  {
    v5[1] = v44;
    v45 = 2;
  }
  v47 = (google::protobuf::UnknownFieldSet *)&v5[v45];
LABEL_61:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v43, v47, a3, a4);
LABEL_62:
  v52 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 9);
  if (!v52)
    goto LABEL_74;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v52 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 9);
  }
  *v5 = 50;
  v53 = *((_DWORD *)v52 + 15);
  if (v53 > 0x7F)
  {
    v5[1] = v53 | 0x80;
    v55 = v53 >> 7;
    if (v53 >> 14)
    {
      v57 = v5 + 2;
      do
      {
        v58 = v57;
        *v57++ = v55 | 0x80;
        v59 = v55 >> 7;
        v60 = v55 >> 14;
        v55 >>= 7;
      }
      while (v60);
      v56 = (google::protobuf::UnknownFieldSet *)(v58 + 2);
      *v57 = v59;
      goto LABEL_73;
    }
    v5[2] = v55;
    v54 = 3;
  }
  else
  {
    v5[1] = v53;
    v54 = 2;
  }
  v56 = (google::protobuf::UnknownFieldSet *)&v5[v54];
LABEL_73:
  v5 = (char *)SnippetUI::VisualProperty::InternalSerializeWithCachedSizesToArray(v52, v56, a3, a4);
LABEL_74:
  v61 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 10);
  if (v61)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v61 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 10);
    }
    *v5 = 58;
    v62 = *((_DWORD *)v61 + 12);
    if (v62 > 0x7F)
    {
      v5[1] = v62 | 0x80;
      v64 = v62 >> 7;
      if (v62 >> 14)
      {
        v65 = v5 + 2;
        do
        {
          v66 = v65;
          *v65++ = v64 | 0x80;
          v67 = v64 >> 7;
          v68 = v64 >> 14;
          v64 >>= 7;
        }
        while (v68);
        v63 = (google::protobuf::UnknownFieldSet *)(v66 + 2);
        *v65 = v67;
      }
      else
      {
        v5[2] = v64;
        v63 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v62;
      v63 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v61, v63, a3, a4);
  }
LABEL_85:
  v69 = (uint64_t *)*((_QWORD *)this + 2);
  if ((*((char *)v69 + 23) & 0x80000000) == 0)
  {
    v70 = (const char *)*((unsigned __int8 *)v69 + 23);
    if (!*((_BYTE *)v69 + 23))
      goto LABEL_91;
    goto LABEL_90;
  }
  v70 = (const char *)v69[1];
  if (v70)
  {
    v69 = (uint64_t *)*v69;
LABEL_90:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((google::protobuf::internal *)v69, v70, 1, (google::protobuf::internal *)"SnippetUI.FactItem_ShortNumber.component_name");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 8, *((_QWORD *)this + 2), v5);
  }
LABEL_91:
  if (this != (SnippetUI::FactItem_ShortNumber *)&SnippetUI::_FactItem_ShortNumber_default_instance_)
  {
    v71 = (SnippetUI::TextProperty *)*((_QWORD *)this + 11);
    if (v71)
    {
      if ((unint64_t)v5 >= *(_QWORD *)a3)
      {
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
        v71 = (SnippetUI::TextProperty *)*((_QWORD *)this + 11);
      }
      *v5 = 74;
      v72 = *((_DWORD *)v71 + 15);
      if (v72 > 0x7F)
      {
        v5[1] = v72 | 0x80;
        v74 = v72 >> 7;
        if (v72 >> 14)
        {
          v75 = v5 + 2;
          do
          {
            v76 = v75;
            *v75++ = v74 | 0x80;
            v77 = v74 >> 7;
            v78 = v74 >> 14;
            v74 >>= 7;
          }
          while (v78);
          v73 = (google::protobuf::UnknownFieldSet *)(v76 + 2);
          *v75 = v77;
        }
        else
        {
          v5[2] = v74;
          v73 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
        }
      }
      else
      {
        v5[1] = v72;
        v73 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
      }
      v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v71, v73, a3, a4);
    }
  }
  v79 = (google::protobuf::internal *)*((_QWORD *)this + 3);
  if (*((char *)v79 + 23) < 0)
  {
    v80 = (const char *)*((_QWORD *)v79 + 1);
    if (!v80)
      goto LABEL_109;
    v79 = *(google::protobuf::internal **)v79;
    goto LABEL_108;
  }
  v80 = (const char *)*((unsigned __int8 *)v79 + 23);
  if (*((_BYTE *)v79 + 23))
  {
LABEL_108:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v79, v80, 1, (google::protobuf::internal *)"SnippetUI.FactItem_ShortNumber.link_identifier");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 10, *((_QWORD *)this + 3), v5);
  }
LABEL_109:
  v81 = *((_QWORD *)this + 1);
  if ((v81 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v81 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)v5;
}

void SnippetUI::FactItem_ShortNumber::CopyFrom(SnippetUI::FactItem_ShortNumber *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::FactItem_ShortNumber::Clear(this);
    SnippetUI::FactItem_ShortNumber::MergeFrom(this, a2);
  }
}

void SnippetUI::FactItem_ShortNumber::MergeFrom(SnippetUI::FactItem_ShortNumber *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::FactItem_ShortNumber *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/FactItem.pb.cc", 1379);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::FactItem_ShortNumber::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BF885AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::FactItem_ShortNumber::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 96) = a2;
  return this;
}

uint64_t SnippetUI::FactItem_ShortNumber::GetMetadata(SnippetUI::FactItem_ShortNumber *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_FactItem_2eproto);
  return qword_1EF5814F8;
}

void *SnippetUI::FactItem_ShortNumber::default_instance(SnippetUI::FactItem_ShortNumber *this)
{
  if (atomic_load(scc_info_FactItem_ShortNumber_FactItem_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_FactItem_ShortNumber_FactItem_2eproto);
  return &SnippetUI::_FactItem_ShortNumber_default_instance_;
}

void SnippetUI::FactItem_ShortNumber::MergeFrom(SnippetUI::FactItem_ShortNumber *this, const SnippetUI::FactItem_ShortNumber *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  int **v10;
  int **v11;
  int **v12;
  int **v13;
  int **v14;
  int **v15;
  int **v16;
  int **v17;
  int **v18;
  int **v19;
  int **v20;
  int **v21;
  int **v22;
  int **v23;
  int **v24;
  int **v25;
  int **v26;
  int **v27;
  int **v28;
  int **v29;
  int **v30;
  int **v31;
  int **v32;
  int **v33;
  char v34;
  std::string v35[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v35, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/FactItem.pb.cc", 1394);
    v4 = google::protobuf::internal::LogMessage::operator<<(v35, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v34, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v35[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::FactItem_ShortNumber *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_QWORD *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v6);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(_QWORD *)(v8 + 8))
      goto LABEL_21;
  }
  else if (!*(_BYTE *)(v8 + 23))
  {
    goto LABEL_21;
  }
  v9 = (uint64_t *)*((_QWORD *)this + 3);
  if (v9 != (uint64_t *)v8)
  {
    if (v9 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
    else
      std::string::operator=(*((std::string **)this + 3), (const std::string *)v8);
  }
LABEL_21:
  if (a2 != (const SnippetUI::FactItem_ShortNumber *)&SnippetUI::_FactItem_ShortNumber_default_instance_)
  {
    v10 = (int **)*((_QWORD *)a2 + 4);
    if (v10)
    {
      v11 = (int **)*((_QWORD *)this + 4);
      if (!v11)
      {
        v11 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 4) = v11;
        v10 = (int **)*((_QWORD *)a2 + 4);
      }
      if (v10)
        v12 = v10;
      else
        v12 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v11, v12);
    }
    v13 = (int **)*((_QWORD *)a2 + 5);
    if (v13)
    {
      v14 = (int **)*((_QWORD *)this + 5);
      if (!v14)
      {
        v14 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 5) = v14;
        v13 = (int **)*((_QWORD *)a2 + 5);
      }
      if (v13)
        v15 = v13;
      else
        v15 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v14, v15);
    }
    v16 = (int **)*((_QWORD *)a2 + 6);
    if (v16)
    {
      v17 = (int **)*((_QWORD *)this + 6);
      if (!v17)
      {
        v17 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((_QWORD *)this + 6) = v17;
        v16 = (int **)*((_QWORD *)a2 + 6);
      }
      if (v16)
        v18 = v16;
      else
        v18 = (int **)&SnippetUI::_MultilineTextProperty_default_instance_;
      SnippetUI::MultilineTextProperty::MergeFrom(v17, v18);
    }
    v19 = (int **)*((_QWORD *)a2 + 7);
    if (v19)
    {
      v20 = (int **)*((_QWORD *)this + 7);
      if (!v20)
      {
        v20 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((_QWORD *)this + 7) = v20;
        v19 = (int **)*((_QWORD *)a2 + 7);
      }
      if (v19)
        v21 = v19;
      else
        v21 = (int **)&SnippetUI::_MultilineTextProperty_default_instance_;
      SnippetUI::MultilineTextProperty::MergeFrom(v20, v21);
    }
    v22 = (int **)*((_QWORD *)a2 + 8);
    if (v22)
    {
      v23 = (int **)*((_QWORD *)this + 8);
      if (!v23)
      {
        v23 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 8) = v23;
        v22 = (int **)*((_QWORD *)a2 + 8);
      }
      if (v22)
        v24 = v22;
      else
        v24 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v23, v24);
    }
    v25 = (int **)*((_QWORD *)a2 + 9);
    if (v25)
    {
      v26 = (int **)*((_QWORD *)this + 9);
      if (!v26)
      {
        v26 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((_QWORD *)this + 9) = v26;
        v25 = (int **)*((_QWORD *)a2 + 9);
      }
      if (v25)
        v27 = v25;
      else
        v27 = (int **)&SnippetUI::_VisualProperty_default_instance_;
      SnippetUI::VisualProperty::MergeFrom(v26, v27);
    }
    v28 = (int **)*((_QWORD *)a2 + 10);
    if (v28)
    {
      v29 = (int **)*((_QWORD *)this + 10);
      if (!v29)
      {
        v29 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((_QWORD *)this + 10) = v29;
        v28 = (int **)*((_QWORD *)a2 + 10);
      }
      if (v28)
        v30 = v28;
      else
        v30 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      SnippetUI::ActionProperty::MergeFrom(v29, v30);
    }
    v31 = (int **)*((_QWORD *)a2 + 11);
    if (v31)
    {
      v32 = (int **)*((_QWORD *)this + 11);
      if (!v32)
      {
        v32 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 11) = v32;
        v31 = (int **)*((_QWORD *)a2 + 11);
      }
      if (v31)
        v33 = v31;
      else
        v33 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v32, v33);
    }
  }
}

void sub_1BF885E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::FactItem_ShortNumber *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::FactItem_ShortNumber>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::FactItem_ShortNumber *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::FactItem_ShortNumber *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x68uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::FactItem_ShortNumber>);
    SnippetUI::FactItem_ShortNumber::FactItem_ShortNumber(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::FactItem_ShortNumber *)operator new();
    SnippetUI::FactItem_ShortNumber::FactItem_ShortNumber(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BF885EB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C408A0BA939);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::FactItem_ShortNumber>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void InitDefaultsscc_info_FactItem_HeroNumber_FactItem_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/FactItem.pb.cc", a4);
  SnippetUI::FactItem_HeroNumber::FactItem_HeroNumber((SnippetUI::FactItem_HeroNumber *)&SnippetUI::_FactItem_HeroNumber_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_FactItem_HeroNumber_default_instance_, v4);
  qword_1ED1D45F0 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D45F8 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D4600 = (uint64_t)&SnippetUI::_MultilineTextProperty_default_instance_;
  unk_1ED1D4608 = &SnippetUI::_MultilineTextProperty_default_instance_;
  qword_1ED1D4610 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
  unk_1ED1D4618 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D4620 = (uint64_t)&SnippetUI::_MultilineTextProperty_default_instance_;
}

SnippetUI::FactItem_HeroNumber *SnippetUI::FactItem_HeroNumber::FactItem_HeroNumber(SnippetUI::FactItem_HeroNumber *this)
{
  *(_QWORD *)this = &off_1E792B658;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 22) = 0;
  if (atomic_load(scc_info_FactItem_HeroNumber_FactItem_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_FactItem_HeroNumber_FactItem_2eproto);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_QWORD *)this + 10) = 0;
  return this;
}

void sub_1BF886134(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::FactItem_HeroNumber::~FactItem_HeroNumber(SnippetUI::FactItem_HeroNumber *this)
{
  SnippetUI::FactItem_HeroNumber::~FactItem_HeroNumber(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)this = &off_1E792B658;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  v4 = *((_QWORD *)this + 3);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1C3B8D890](v4, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::FactItem_HeroNumber *)&SnippetUI::_FactItem_HeroNumber_default_instance_)
  {
    v6 = *((_QWORD *)this + 4);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = *((_QWORD *)this + 5);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = *((_QWORD *)this + 6);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = *((_QWORD *)this + 7);
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v10 = *((_QWORD *)this + 8);
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v11 = *((_QWORD *)this + 9);
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = *((_QWORD *)this + 10);
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::FactItem_HeroNumber *SnippetUI::FactItem_HeroNumber::New(SnippetUI::FactItem_HeroNumber *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::FactItem_HeroNumber>(0);
}

SnippetUI::FactItem_HeroNumber *SnippetUI::FactItem_HeroNumber::New(SnippetUI::FactItem_HeroNumber *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::FactItem_HeroNumber>(a2);
}

void SnippetUI::FactItem_HeroNumber::Clear(SnippetUI::FactItem_HeroNumber *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  google::protobuf::internal::InternalMetadataWithArena *v11;
  char v12;

  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 3);
  if ((uint64_t *)v3 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
  v4 = *((_QWORD *)this + 4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 4) = 0;
  v5 = *((_QWORD *)this + 5);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *((_QWORD *)this + 5) = 0;
  v6 = *((_QWORD *)this + 6);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *((_QWORD *)this + 6) = 0;
  v7 = *((_QWORD *)this + 7);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  *((_QWORD *)this + 7) = 0;
  v8 = *((_QWORD *)this + 8);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  *((_QWORD *)this + 8) = 0;
  v9 = *((_QWORD *)this + 9);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  *((_QWORD *)this + 9) = 0;
  v10 = *((_QWORD *)this + 10);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v12 = *((_BYTE *)this + 8);
  v11 = (SnippetUI::FactItem_HeroNumber *)((char *)this + 8);
  *((_QWORD *)v11 + 9) = 0;
  if ((v12 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v11);
}

uint64_t SnippetUI::FactItem_HeroNumber::IsInitialized(SnippetUI::FactItem_HeroNumber *this)
{
  return 1;
}

char *SnippetUI::FactItem_HeroNumber::ByteSizeLong(SnippetUI::FactItem_HeroNumber *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const google::protobuf::UnknownFieldSet *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  SnippetUI::TextProperty *v9;
  char *v10;
  SnippetUI::TextProperty *v11;
  char *v12;
  SnippetUI::MultilineTextProperty *v13;
  char *v14;
  SnippetUI::MultilineTextProperty *v15;
  char *v16;
  SnippetUI::ActionProperty *v17;
  char *v18;
  SnippetUI::TextProperty *v19;
  char *v20;
  SnippetUI::MultilineTextProperty *v21;
  char *v22;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  v6 = *((_QWORD *)this + 3);
  v7 = *(unsigned __int8 *)(v6 + 23);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v8 = *(_QWORD *)(v6 + 8);
  if ((v7 & 0x80u) == 0)
    v8 = v7;
  v5 = (const google::protobuf::UnknownFieldSet *)((char *)v5 + v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_13:
  if (this != (SnippetUI::FactItem_HeroNumber *)&SnippetUI::_FactItem_HeroNumber_default_instance_)
  {
    v9 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
    if (v9)
    {
      v10 = SnippetUI::TextProperty::ByteSizeLong(v9);
      v5 = (const google::protobuf::UnknownFieldSet *)&v10[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
    if (v11)
    {
      v12 = SnippetUI::TextProperty::ByteSizeLong(v11);
      v5 = (const google::protobuf::UnknownFieldSet *)&v12[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v13 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 6);
    if (v13)
    {
      v14 = SnippetUI::MultilineTextProperty::ByteSizeLong(v13);
      v5 = (const google::protobuf::UnknownFieldSet *)&v14[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v15 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 7);
    if (v15)
    {
      v16 = SnippetUI::MultilineTextProperty::ByteSizeLong(v15);
      v5 = (const google::protobuf::UnknownFieldSet *)&v16[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v17 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 8);
    if (v17)
    {
      v18 = SnippetUI::ActionProperty::ByteSizeLong(v17);
      v5 = (const google::protobuf::UnknownFieldSet *)&v18[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v18 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v19 = (SnippetUI::TextProperty *)*((_QWORD *)this + 9);
    if (v19)
    {
      v20 = SnippetUI::TextProperty::ByteSizeLong(v19);
      v5 = (const google::protobuf::UnknownFieldSet *)&v20[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v20 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v21 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 10);
    if (v21)
    {
      v22 = SnippetUI::MultilineTextProperty::ByteSizeLong(v21);
      v5 = (const google::protobuf::UnknownFieldSet *)&v22[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::FactItem_HeroNumber *)((char *)this + 8), v5, (_DWORD *)this + 22);
  *((_DWORD *)this + 22) = (_DWORD)v5;
  return (char *)v5;
}

uint64_t SnippetUI::FactItem_HeroNumber::GetCachedSize(SnippetUI::FactItem_HeroNumber *this)
{
  return *((unsigned int *)this + 22);
}

google::protobuf::internal *SnippetUI::FactItem_HeroNumber::_InternalParse(SnippetUI::FactItem_HeroNumber *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  std::string **v6;
  uint64_t *v7;
  google::protobuf::internal::ParseContext *v8;
  google::protobuf::internal *TagFallback;
  char *v10;
  SnippetUI::TextProperty *v11;
  SnippetUI::MultilineTextProperty *v12;
  SnippetUI::ActionProperty *v13;
  char *v14;
  std::string *v15;
  std::string::value_type *v16;
  google::protobuf::internal::ParseContext *v17;
  char *v18;
  BOOL v19;
  google::protobuf::internal *v21;

  v21 = a2;
  v5 = (std::string **)((char *)this + 24);
  v6 = (std::string **)((char *)this + 16);
  v7 = (uint64_t *)((char *)this + 8);
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v21, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v21;
    TagFallback = (google::protobuf::internal *)((char *)v21 + 1);
    v10 = (char *)*(unsigned __int8 *)v21;
    if ((*(char *)v21 & 0x80000000) == 0)
      goto LABEL_6;
    v10 = (char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v21 + 2);
LABEL_6:
      v21 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v21, v10);
    v21 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    switch(v10 >> 3)
    {
      case 1u:
        if (v10 != 10)
          goto LABEL_45;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
        if (v11)
          goto LABEL_30;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 4) = v11;
        goto LABEL_29;
      case 2u:
        if (v10 != 18)
          goto LABEL_45;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
        if (v11)
          goto LABEL_30;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 5) = v11;
        goto LABEL_29;
      case 3u:
        if (v10 != 26)
          goto LABEL_45;
        v12 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 6);
        if (v12)
          goto LABEL_39;
        v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((_QWORD *)this + 6) = v12;
        goto LABEL_38;
      case 4u:
        if (v10 != 34)
          goto LABEL_45;
        v12 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 7);
        if (v12)
          goto LABEL_39;
        v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((_QWORD *)this + 7) = v12;
        goto LABEL_38;
      case 5u:
        if (v10 != 42)
          goto LABEL_45;
        v13 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 8);
        if (!v13)
        {
          v13 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
          *((_QWORD *)this + 8) = v13;
          TagFallback = v21;
        }
        v14 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::ActionProperty>(a3, v13, TagFallback);
        goto LABEL_50;
      case 6u:
        if (v10 != 50)
          goto LABEL_45;
        v11 = (SnippetUI::TextProperty *)*((_QWORD *)this + 9);
        if (v11)
          goto LABEL_30;
        v11 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 9) = v11;
LABEL_29:
        TagFallback = v21;
LABEL_30:
        v14 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v11, TagFallback);
        goto LABEL_50;
      case 7u:
        if (v10 != 58)
          goto LABEL_45;
        v15 = *v6;
        if (*v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v6, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v15 = *v6;
          TagFallback = v21;
        }
        v16 = (std::string::value_type *)TagFallback;
        v17 = a3;
        v18 = "SnippetUI.FactItem_HeroNumber.component_name";
        goto LABEL_44;
      case 8u:
        if (v10 != 66)
          goto LABEL_45;
        v12 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 10);
        if (v12)
          goto LABEL_39;
        v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((_QWORD *)this + 10) = v12;
LABEL_38:
        TagFallback = v21;
LABEL_39:
        v14 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::MultilineTextProperty>(a3, v12, TagFallback);
        goto LABEL_50;
      case 9u:
        if (v10 != 74)
          goto LABEL_45;
        v15 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v15 = *v5;
          TagFallback = v21;
        }
        v16 = (std::string::value_type *)TagFallback;
        v17 = a3;
        v18 = "SnippetUI.FactItem_HeroNumber.link_identifier";
LABEL_44:
        v14 = google::protobuf::internal::InlineGreedyStringParserUTF8(v15, v16, (uint64_t)v17, (google::protobuf::internal *)v18);
        goto LABEL_50;
      default:
LABEL_45:
        if ((_DWORD)v10)
          v19 = (v10 & 7) == 4;
        else
          v19 = 1;
        if (v19)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v10 - 1;
          return TagFallback;
        }
        v14 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v7, TagFallback, a3, v8);
LABEL_50:
        v21 = (google::protobuf::internal *)v14;
        if (v14)
          continue;
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::FactItem_HeroNumber::InternalSerializeWithCachedSizesToArray(SnippetUI::FactItem_HeroNumber *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  SnippetUI::TextProperty *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  google::protobuf::UnknownFieldSet *v11;
  _BYTE *v12;
  _BYTE *v13;
  unsigned int v14;
  unsigned int v15;
  SnippetUI::TextProperty *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  google::protobuf::UnknownFieldSet *v20;
  _BYTE *v21;
  _BYTE *v22;
  unsigned int v23;
  unsigned int v24;
  SnippetUI::MultilineTextProperty *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  google::protobuf::UnknownFieldSet *v29;
  _BYTE *v30;
  _BYTE *v31;
  unsigned int v32;
  unsigned int v33;
  SnippetUI::MultilineTextProperty *v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  google::protobuf::UnknownFieldSet *v38;
  _BYTE *v39;
  _BYTE *v40;
  unsigned int v41;
  unsigned int v42;
  SnippetUI::ActionProperty *v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  google::protobuf::UnknownFieldSet *v47;
  _BYTE *v48;
  _BYTE *v49;
  unsigned int v50;
  unsigned int v51;
  SnippetUI::TextProperty *v52;
  unsigned int v53;
  google::protobuf::UnknownFieldSet *v54;
  unsigned int v55;
  _BYTE *v56;
  _BYTE *v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t *v60;
  const char *v61;
  SnippetUI::MultilineTextProperty *v62;
  unsigned int v63;
  google::protobuf::UnknownFieldSet *v64;
  unsigned int v65;
  _BYTE *v66;
  _BYTE *v67;
  unsigned int v68;
  unsigned int v69;
  google::protobuf::internal *v70;
  const char *v71;
  uint64_t v72;

  v5 = (char *)a2;
  if (this == (SnippetUI::FactItem_HeroNumber *)&SnippetUI::_FactItem_HeroNumber_default_instance_)
    goto LABEL_73;
  v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
  if (v7)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v7 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
    }
    *v5 = 10;
    v8 = *((_DWORD *)v7 + 15);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v12 = v5 + 2;
        do
        {
          v13 = v12;
          *v12++ = v10 | 0x80;
          v14 = v10 >> 7;
          v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        v11 = (google::protobuf::UnknownFieldSet *)(v13 + 2);
        *v12 = v14;
        goto LABEL_13;
      }
      v5[2] = v10;
      v9 = 3;
    }
    else
    {
      v5[1] = v8;
      v9 = 2;
    }
    v11 = (google::protobuf::UnknownFieldSet *)&v5[v9];
LABEL_13:
    v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
  if (!v16)
    goto LABEL_26;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
  }
  *v5 = 18;
  v17 = *((_DWORD *)v16 + 15);
  if (v17 > 0x7F)
  {
    v5[1] = v17 | 0x80;
    v19 = v17 >> 7;
    if (v17 >> 14)
    {
      v21 = v5 + 2;
      do
      {
        v22 = v21;
        *v21++ = v19 | 0x80;
        v23 = v19 >> 7;
        v24 = v19 >> 14;
        v19 >>= 7;
      }
      while (v24);
      v20 = (google::protobuf::UnknownFieldSet *)(v22 + 2);
      *v21 = v23;
      goto LABEL_25;
    }
    v5[2] = v19;
    v18 = 3;
  }
  else
  {
    v5[1] = v17;
    v18 = 2;
  }
  v20 = (google::protobuf::UnknownFieldSet *)&v5[v18];
LABEL_25:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v16, v20, a3, a4);
LABEL_26:
  v25 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 6);
  if (!v25)
    goto LABEL_38;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v25 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 6);
  }
  *v5 = 26;
  v26 = *((_DWORD *)v25 + 15);
  if (v26 > 0x7F)
  {
    v5[1] = v26 | 0x80;
    v28 = v26 >> 7;
    if (v26 >> 14)
    {
      v30 = v5 + 2;
      do
      {
        v31 = v30;
        *v30++ = v28 | 0x80;
        v32 = v28 >> 7;
        v33 = v28 >> 14;
        v28 >>= 7;
      }
      while (v33);
      v29 = (google::protobuf::UnknownFieldSet *)(v31 + 2);
      *v30 = v32;
      goto LABEL_37;
    }
    v5[2] = v28;
    v27 = 3;
  }
  else
  {
    v5[1] = v26;
    v27 = 2;
  }
  v29 = (google::protobuf::UnknownFieldSet *)&v5[v27];
LABEL_37:
  v5 = (char *)SnippetUI::MultilineTextProperty::InternalSerializeWithCachedSizesToArray(v25, v29, a3, a4);
LABEL_38:
  v34 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 7);
  if (!v34)
    goto LABEL_50;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v34 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 7);
  }
  *v5 = 34;
  v35 = *((_DWORD *)v34 + 15);
  if (v35 > 0x7F)
  {
    v5[1] = v35 | 0x80;
    v37 = v35 >> 7;
    if (v35 >> 14)
    {
      v39 = v5 + 2;
      do
      {
        v40 = v39;
        *v39++ = v37 | 0x80;
        v41 = v37 >> 7;
        v42 = v37 >> 14;
        v37 >>= 7;
      }
      while (v42);
      v38 = (google::protobuf::UnknownFieldSet *)(v40 + 2);
      *v39 = v41;
      goto LABEL_49;
    }
    v5[2] = v37;
    v36 = 3;
  }
  else
  {
    v5[1] = v35;
    v36 = 2;
  }
  v38 = (google::protobuf::UnknownFieldSet *)&v5[v36];
LABEL_49:
  v5 = (char *)SnippetUI::MultilineTextProperty::InternalSerializeWithCachedSizesToArray(v34, v38, a3, a4);
LABEL_50:
  v43 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 8);
  if (!v43)
    goto LABEL_62;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v43 = (SnippetUI::ActionProperty *)*((_QWORD *)this + 8);
  }
  *v5 = 42;
  v44 = *((_DWORD *)v43 + 12);
  if (v44 > 0x7F)
  {
    v5[1] = v44 | 0x80;
    v46 = v44 >> 7;
    if (v44 >> 14)
    {
      v48 = v5 + 2;
      do
      {
        v49 = v48;
        *v48++ = v46 | 0x80;
        v50 = v46 >> 7;
        v51 = v46 >> 14;
        v46 >>= 7;
      }
      while (v51);
      v47 = (google::protobuf::UnknownFieldSet *)(v49 + 2);
      *v48 = v50;
      goto LABEL_61;
    }
    v5[2] = v46;
    v45 = 3;
  }
  else
  {
    v5[1] = v44;
    v45 = 2;
  }
  v47 = (google::protobuf::UnknownFieldSet *)&v5[v45];
LABEL_61:
  v5 = (char *)SnippetUI::ActionProperty::InternalSerializeWithCachedSizesToArray(v43, v47, a3, a4);
LABEL_62:
  v52 = (SnippetUI::TextProperty *)*((_QWORD *)this + 9);
  if (v52)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v52 = (SnippetUI::TextProperty *)*((_QWORD *)this + 9);
    }
    *v5 = 50;
    v53 = *((_DWORD *)v52 + 15);
    if (v53 > 0x7F)
    {
      v5[1] = v53 | 0x80;
      v55 = v53 >> 7;
      if (v53 >> 14)
      {
        v56 = v5 + 2;
        do
        {
          v57 = v56;
          *v56++ = v55 | 0x80;
          v58 = v55 >> 7;
          v59 = v55 >> 14;
          v55 >>= 7;
        }
        while (v59);
        v54 = (google::protobuf::UnknownFieldSet *)(v57 + 2);
        *v56 = v58;
      }
      else
      {
        v5[2] = v55;
        v54 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v53;
      v54 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v52, v54, a3, a4);
  }
LABEL_73:
  v60 = (uint64_t *)*((_QWORD *)this + 2);
  if ((*((char *)v60 + 23) & 0x80000000) == 0)
  {
    v61 = (const char *)*((unsigned __int8 *)v60 + 23);
    if (!*((_BYTE *)v60 + 23))
      goto LABEL_79;
    goto LABEL_78;
  }
  v61 = (const char *)v60[1];
  if (v61)
  {
    v60 = (uint64_t *)*v60;
LABEL_78:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String((google::protobuf::internal *)v60, v61, 1, (google::protobuf::internal *)"SnippetUI.FactItem_HeroNumber.component_name");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 7, *((_QWORD *)this + 2), v5);
  }
LABEL_79:
  if (this != (SnippetUI::FactItem_HeroNumber *)&SnippetUI::_FactItem_HeroNumber_default_instance_)
  {
    v62 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 10);
    if (v62)
    {
      if ((unint64_t)v5 >= *(_QWORD *)a3)
      {
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
        v62 = (SnippetUI::MultilineTextProperty *)*((_QWORD *)this + 10);
      }
      *v5 = 66;
      v63 = *((_DWORD *)v62 + 15);
      if (v63 > 0x7F)
      {
        v5[1] = v63 | 0x80;
        v65 = v63 >> 7;
        if (v63 >> 14)
        {
          v66 = v5 + 2;
          do
          {
            v67 = v66;
            *v66++ = v65 | 0x80;
            v68 = v65 >> 7;
            v69 = v65 >> 14;
            v65 >>= 7;
          }
          while (v69);
          v64 = (google::protobuf::UnknownFieldSet *)(v67 + 2);
          *v66 = v68;
        }
        else
        {
          v5[2] = v65;
          v64 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
        }
      }
      else
      {
        v5[1] = v63;
        v64 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
      }
      v5 = (char *)SnippetUI::MultilineTextProperty::InternalSerializeWithCachedSizesToArray(v62, v64, a3, a4);
    }
  }
  v70 = (google::protobuf::internal *)*((_QWORD *)this + 3);
  if (*((char *)v70 + 23) < 0)
  {
    v71 = (const char *)*((_QWORD *)v70 + 1);
    if (!v71)
      goto LABEL_97;
    v70 = *(google::protobuf::internal **)v70;
    goto LABEL_96;
  }
  v71 = (const char *)*((unsigned __int8 *)v70 + 23);
  if (*((_BYTE *)v70 + 23))
  {
LABEL_96:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v70, v71, 1, (google::protobuf::internal *)"SnippetUI.FactItem_HeroNumber.link_identifier");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 9, *((_QWORD *)this + 3), v5);
  }
LABEL_97:
  v72 = *((_QWORD *)this + 1);
  if ((v72 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v72 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)v5;
}

void SnippetUI::FactItem_HeroNumber::CopyFrom(SnippetUI::FactItem_HeroNumber *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::FactItem_HeroNumber::Clear(this);
    SnippetUI::FactItem_HeroNumber::MergeFrom(this, a2);
  }
}

void SnippetUI::FactItem_HeroNumber::MergeFrom(SnippetUI::FactItem_HeroNumber *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::FactItem_HeroNumber *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/FactItem.pb.cc", 1963);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::FactItem_HeroNumber::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BF886E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::FactItem_HeroNumber::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 88) = a2;
  return this;
}

uint64_t SnippetUI::FactItem_HeroNumber::GetMetadata(SnippetUI::FactItem_HeroNumber *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_FactItem_2eproto);
  return qword_1EF581508;
}

void *SnippetUI::FactItem_HeroNumber::default_instance(SnippetUI::FactItem_HeroNumber *this)
{
  if (atomic_load(scc_info_FactItem_HeroNumber_FactItem_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_FactItem_HeroNumber_FactItem_2eproto);
  return &SnippetUI::_FactItem_HeroNumber_default_instance_;
}

void SnippetUI::FactItem_HeroNumber::MergeFrom(SnippetUI::FactItem_HeroNumber *this, const SnippetUI::FactItem_HeroNumber *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  int **v10;
  int **v11;
  int **v12;
  int **v13;
  int **v14;
  int **v15;
  int **v16;
  int **v17;
  int **v18;
  int **v19;
  int **v20;
  int **v21;
  int **v22;
  int **v23;
  int **v24;
  int **v25;
  int **v26;
  int **v27;
  int **v28;
  int **v29;
  int **v30;
  char v31;
  std::string v32[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v32, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/FactItem.pb.cc", 1978);
    v4 = google::protobuf::internal::LogMessage::operator<<(v32, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v31, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v32[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::FactItem_HeroNumber *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_QWORD *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v6);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(_QWORD *)(v8 + 8))
      goto LABEL_21;
  }
  else if (!*(_BYTE *)(v8 + 23))
  {
    goto LABEL_21;
  }
  v9 = (uint64_t *)*((_QWORD *)this + 3);
  if (v9 != (uint64_t *)v8)
  {
    if (v9 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
    else
      std::string::operator=(*((std::string **)this + 3), (const std::string *)v8);
  }
LABEL_21:
  if (a2 != (const SnippetUI::FactItem_HeroNumber *)&SnippetUI::_FactItem_HeroNumber_default_instance_)
  {
    v10 = (int **)*((_QWORD *)a2 + 4);
    if (v10)
    {
      v11 = (int **)*((_QWORD *)this + 4);
      if (!v11)
      {
        v11 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 4) = v11;
        v10 = (int **)*((_QWORD *)a2 + 4);
      }
      if (v10)
        v12 = v10;
      else
        v12 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v11, v12);
    }
    v13 = (int **)*((_QWORD *)a2 + 5);
    if (v13)
    {
      v14 = (int **)*((_QWORD *)this + 5);
      if (!v14)
      {
        v14 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 5) = v14;
        v13 = (int **)*((_QWORD *)a2 + 5);
      }
      if (v13)
        v15 = v13;
      else
        v15 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v14, v15);
    }
    v16 = (int **)*((_QWORD *)a2 + 6);
    if (v16)
    {
      v17 = (int **)*((_QWORD *)this + 6);
      if (!v17)
      {
        v17 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((_QWORD *)this + 6) = v17;
        v16 = (int **)*((_QWORD *)a2 + 6);
      }
      if (v16)
        v18 = v16;
      else
        v18 = (int **)&SnippetUI::_MultilineTextProperty_default_instance_;
      SnippetUI::MultilineTextProperty::MergeFrom(v17, v18);
    }
    v19 = (int **)*((_QWORD *)a2 + 7);
    if (v19)
    {
      v20 = (int **)*((_QWORD *)this + 7);
      if (!v20)
      {
        v20 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((_QWORD *)this + 7) = v20;
        v19 = (int **)*((_QWORD *)a2 + 7);
      }
      if (v19)
        v21 = v19;
      else
        v21 = (int **)&SnippetUI::_MultilineTextProperty_default_instance_;
      SnippetUI::MultilineTextProperty::MergeFrom(v20, v21);
    }
    v22 = (int **)*((_QWORD *)a2 + 8);
    if (v22)
    {
      v23 = (int **)*((_QWORD *)this + 8);
      if (!v23)
      {
        v23 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((_QWORD *)this + 8) = v23;
        v22 = (int **)*((_QWORD *)a2 + 8);
      }
      if (v22)
        v24 = v22;
      else
        v24 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      SnippetUI::ActionProperty::MergeFrom(v23, v24);
    }
    v25 = (int **)*((_QWORD *)a2 + 9);
    if (v25)
    {
      v26 = (int **)*((_QWORD *)this + 9);
      if (!v26)
      {
        v26 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 9) = v26;
        v25 = (int **)*((_QWORD *)a2 + 9);
      }
      if (v25)
        v27 = v25;
      else
        v27 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v26, v27);
    }
    v28 = (int **)*((_QWORD *)a2 + 10);
    if (v28)
    {
      v29 = (int **)*((_QWORD *)this + 10);
      if (!v29)
      {
        v29 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((_QWORD *)this + 10) = v29;
        v28 = (int **)*((_QWORD *)a2 + 10);
      }
      if (v28)
        v30 = v28;
      else
        v30 = (int **)&SnippetUI::_MultilineTextProperty_default_instance_;
      SnippetUI::MultilineTextProperty::MergeFrom(v29, v30);
    }
  }
}

void sub_1BF887150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::FactItem_HeroNumber *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::FactItem_HeroNumber>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::FactItem_HeroNumber *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::FactItem_HeroNumber *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x60uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::FactItem_HeroNumber>);
    SnippetUI::FactItem_HeroNumber::FactItem_HeroNumber(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::FactItem_HeroNumber *)operator new();
    SnippetUI::FactItem_HeroNumber::FactItem_HeroNumber(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BF8871EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C404A70EBA6);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::FactItem_HeroNumber>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void *SnippetUI::FactItem_Button::default_instance(SnippetUI::FactItem_Button *this)
{
  if (atomic_load(scc_info_FactItem_Button_FactItem_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_FactItem_Button_FactItem_2eproto);
  return &SnippetUI::_FactItem_Button_default_instance_;
}

void SnippetUI::FactItem_Button::MergeFrom(SnippetUI::FactItem_Button *this, const SnippetUI::FactItem_Button *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  int **v10;
  int **v11;
  int **v12;
  const SnippetUI::Button *v13;
  SnippetUI::Button *v14;
  const SnippetUI::Button *v15;
  const SnippetUI::Button *v16;
  SnippetUI::Button *v17;
  const SnippetUI::Button *v18;
  const SnippetUI::Button *v19;
  SnippetUI::Button *v20;
  const SnippetUI::Button *v21;
  int **v22;
  int **v23;
  int **v24;
  int **v25;
  int **v26;
  int **v27;
  int **v28;
  int **v29;
  int **v30;
  int **v31;
  int **v32;
  int **v33;
  int **v34;
  int **v35;
  int **v36;
  int **v37;
  int **v38;
  int **v39;
  char v40;
  std::string v41[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v41, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/FactItem.pb.cc", 2693);
    v4 = google::protobuf::internal::LogMessage::operator<<(v41, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v40, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v41[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::FactItem_Button *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_QWORD *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v6);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
  {
    if (!*(_QWORD *)(v8 + 8))
      goto LABEL_21;
  }
  else if (!*(_BYTE *)(v8 + 23))
  {
    goto LABEL_21;
  }
  v9 = (uint64_t *)*((_QWORD *)this + 3);
  if (v9 != (uint64_t *)v8)
  {
    if (v9 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
    else
      std::string::operator=(*((std::string **)this + 3), (const std::string *)v8);
  }
LABEL_21:
  if (a2 != (const SnippetUI::FactItem_Button *)&SnippetUI::_FactItem_Button_default_instance_)
  {
    v10 = (int **)*((_QWORD *)a2 + 4);
    if (v10)
    {
      v11 = (int **)*((_QWORD *)this + 4);
      if (!v11)
      {
        v11 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 4) = v11;
        v10 = (int **)*((_QWORD *)a2 + 4);
      }
      if (v10)
        v12 = v10;
      else
        v12 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v11, v12);
    }
    v13 = (const SnippetUI::Button *)*((_QWORD *)a2 + 5);
    if (v13)
    {
      v14 = (SnippetUI::Button *)*((_QWORD *)this + 5);
      if (!v14)
      {
        v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Button>(0);
        *((_QWORD *)this + 5) = v14;
        v13 = (const SnippetUI::Button *)*((_QWORD *)a2 + 5);
      }
      if (v13)
        v15 = v13;
      else
        v15 = (const SnippetUI::Button *)&SnippetUI::_Button_default_instance_;
      SnippetUI::Button::MergeFrom(v14, v15);
    }
    v16 = (const SnippetUI::Button *)*((_QWORD *)a2 + 6);
    if (v16)
    {
      v17 = (SnippetUI::Button *)*((_QWORD *)this + 6);
      if (!v17)
      {
        v17 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Button>(0);
        *((_QWORD *)this + 6) = v17;
        v16 = (const SnippetUI::Button *)*((_QWORD *)a2 + 6);
      }
      if (v16)
        v18 = v16;
      else
        v18 = (const SnippetUI::Button *)&SnippetUI::_Button_default_instance_;
      SnippetUI::Button::MergeFrom(v17, v18);
    }
    v19 = (const SnippetUI::Button *)*((_QWORD *)a2 + 7);
    if (v19)
    {
      v20 = (SnippetUI::Button *)*((_QWORD *)this + 7);
      if (!v20)
      {
        v20 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Button>(0);
        *((_QWORD *)this + 7) = v20;
        v19 = (const SnippetUI::Button *)*((_QWORD *)a2 + 7);
      }
      if (v19)
        v21 = v19;
      else
        v21 = (const SnippetUI::Button *)&SnippetUI::_Button_default_instance_;
      SnippetUI::Button::MergeFrom(v20, v21);
    }
    v22 = (int **)*((_QWORD *)a2 + 8);
    if (v22)
    {
      v23 = (int **)*((_QWORD *)this + 8);
      if (!v23)
      {
        v23 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 8) = v23;
        v22 = (int **)*((_QWORD *)a2 + 8);
      }
      if (v22)
        v24 = v22;
      else
        v24 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v23, v24);
    }
    v25 = (int **)*((_QWORD *)a2 + 9);
    if (v25)
    {
      v26 = (int **)*((_QWORD *)this + 9);
      if (!v26)
      {
        v26 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 9) = v26;
        v25 = (int **)*((_QWORD *)a2 + 9);
      }
      if (v25)
        v27 = v25;
      else
        v27 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v26, v27);
    }
    v28 = (int **)*((_QWORD *)a2 + 10);
    if (v28)
    {
      v29 = (int **)*((_QWORD *)this + 10);
      if (!v29)
      {
        v29 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::MultilineTextProperty>(0);
        *((_QWORD *)this + 10) = v29;
        v28 = (int **)*((_QWORD *)a2 + 10);
      }
      if (v28)
        v30 = v28;
      else
        v30 = (int **)&SnippetUI::_MultilineTextProperty_default_instance_;
      SnippetUI::MultilineTextProperty::MergeFrom(v29, v30);
    }
    v31 = (int **)*((_QWORD *)a2 + 11);
    if (v31)
    {
      v32 = (int **)*((_QWORD *)this + 11);
      if (!v32)
      {
        v32 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((_QWORD *)this + 11) = v32;
        v31 = (int **)*((_QWORD *)a2 + 11);
      }
      if (v31)
        v33 = v31;
      else
        v33 = (int **)&SnippetUI::_VisualProperty_default_instance_;
      SnippetUI::VisualProperty::MergeFrom(v32, v33);
    }
    v34 = (int **)*((_QWORD *)a2 + 12);
    if (v34)
    {
      v35 = (int **)*((_QWORD *)this + 12);
      if (!v35)
      {
        v35 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ActionProperty>(0);
        *((_QWORD *)this + 12) = v35;
        v34 = (int **)*((_QWORD *)a2 + 12);
      }
      if (v34)
        v36 = v34;
      else
        v36 = (int **)&SnippetUI::_ActionProperty_default_instance_;
      SnippetUI::ActionProperty::MergeFrom(v35, v36);
    }
    v37 = (int **)*((_QWORD *)a2 + 13);
    if (v37)
    {
      v38 = (int **)*((_QWORD *)this + 13);
      if (!v38)
      {
        v38 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 13) = v38;
        v37 = (int **)*((_QWORD *)a2 + 13);
      }
      if (v37)
        v39 = v37;
      else
        v39 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v38, v39);
    }
  }
}

void sub_1BF887694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

char *google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::Button>(google::protobuf::internal::EpsCopyInputStream *this, SnippetUI::Button *a2, google::protobuf::internal *a3)
{
  int v6;
  const char *v7;
  char *v8;
  char *result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = *(char *)a3;
  v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result)
      return result;
    v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    v8 = (char *)a3 + 1;
  }
  v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  v12 = *((_DWORD *)this + 22);
  v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = (char *)SnippetUI::Button::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result)
    return result;
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20))
    return 0;
  v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(_QWORD *)this = *((_QWORD *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

SnippetUI::FactItem_Button *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::FactItem_Button>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::FactItem_Button *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::FactItem_Button *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x78uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::FactItem_Button>);
    SnippetUI::FactItem_Button::FactItem_Button(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::FactItem_Button *)operator new();
    SnippetUI::FactItem_Button::FactItem_Button(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BF8877F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C40E3061A4BLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::FactItem_Button>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void SnippetUI::FactItem_Standard::InitAsDefaultInstance(SnippetUI::FactItem_Standard *this)
{
  qword_1ED1D5308 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D5310 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D5318 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D5320 = &SnippetUI::_MultilineTextProperty_default_instance_;
  qword_1ED1D5328 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D5330 = &SnippetUI::_VisualProperty_default_instance_;
  qword_1ED1D5338 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
}

uint64_t SnippetUI::FactItem_Standard::_Internal::text_1(SnippetUI::FactItem_Standard::_Internal *this, const SnippetUI::FactItem_Standard *a2)
{
  return *((_QWORD *)this + 4);
}

uint64_t SnippetUI::FactItem_Standard::_Internal::text_2(SnippetUI::FactItem_Standard::_Internal *this, const SnippetUI::FactItem_Standard *a2)
{
  return *((_QWORD *)this + 5);
}

uint64_t SnippetUI::FactItem_Standard::_Internal::text_3(SnippetUI::FactItem_Standard::_Internal *this, const SnippetUI::FactItem_Standard *a2)
{
  return *((_QWORD *)this + 6);
}

uint64_t SnippetUI::FactItem_Standard::_Internal::text_4(SnippetUI::FactItem_Standard::_Internal *this, const SnippetUI::FactItem_Standard *a2)
{
  return *((_QWORD *)this + 7);
}

uint64_t SnippetUI::FactItem_Standard::_Internal::text_5(SnippetUI::FactItem_Standard::_Internal *this, const SnippetUI::FactItem_Standard *a2)
{
  return *((_QWORD *)this + 8);
}

uint64_t SnippetUI::FactItem_Standard::_Internal::thumbnail(SnippetUI::FactItem_Standard::_Internal *this, const SnippetUI::FactItem_Standard *a2)
{
  return *((_QWORD *)this + 9);
}

uint64_t SnippetUI::FactItem_Standard::_Internal::action(SnippetUI::FactItem_Standard::_Internal *this, const SnippetUI::FactItem_Standard *a2)
{
  return *((_QWORD *)this + 10);
}

uint64_t SnippetUI::FactItem_Standard::clear_text_1(SnippetUI::FactItem_Standard *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 4) = 0;
  return result;
}

uint64_t SnippetUI::FactItem_Standard::clear_text_2(SnippetUI::FactItem_Standard *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 5);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 5) = 0;
  return result;
}

uint64_t SnippetUI::FactItem_Standard::clear_text_3(SnippetUI::FactItem_Standard *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 6);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 6) = 0;
  return result;
}

uint64_t SnippetUI::FactItem_Standard::clear_text_4(SnippetUI::FactItem_Standard *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 7);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 7) = 0;
  return result;
}

uint64_t SnippetUI::FactItem_Standard::clear_text_5(SnippetUI::FactItem_Standard *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 8) = 0;
  return result;
}

uint64_t SnippetUI::FactItem_Standard::clear_thumbnail(SnippetUI::FactItem_Standard *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 9);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 9) = 0;
  return result;
}

uint64_t SnippetUI::FactItem_Standard::clear_action(SnippetUI::FactItem_Standard *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 10);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 10) = 0;
  return result;
}

SnippetUI::FactItem_Standard *SnippetUI::FactItem_Standard::FactItem_Standard(SnippetUI::FactItem_Standard *this, const SnippetUI::FactItem_Standard *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  SnippetUI::TextProperty *v10;
  SnippetUI::ActionProperty *v11;
  SnippetUI::TextProperty *v12;
  SnippetUI::TextProperty *v13;
  SnippetUI::MultilineTextProperty *v14;
  SnippetUI::TextProperty *v15;
  SnippetUI::VisualProperty *v16;

  *(_QWORD *)this = &off_1E792B4D8;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 22) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::FactItem_Standard *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
    v9 = *(_QWORD *)(v8 + 8);
  else
    v9 = *(unsigned __int8 *)(v8 + 23);
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v9)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
  if (a2 == (const SnippetUI::FactItem_Standard *)&SnippetUI::_FactItem_Standard_default_instance_)
  {
    v11 = 0;
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 2) = 0u;
  }
  else
  {
    if (*((_QWORD *)a2 + 4))
    {
      v10 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v10, *((const SnippetUI::TextProperty **)a2 + 4));
    }
    else
    {
      v10 = 0;
    }
    *((_QWORD *)this + 4) = v10;
    if (*((_QWORD *)a2 + 5))
    {
      v12 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v12, *((const SnippetUI::TextProperty **)a2 + 5));
    }
    else
    {
      v12 = 0;
    }
    *((_QWORD *)this + 5) = v12;
    if (*((_QWORD *)a2 + 6))
    {
      v13 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v13, *((const SnippetUI::TextProperty **)a2 + 6));
    }
    else
    {
      v13 = 0;
    }
    *((_QWORD *)this + 6) = v13;
    if (*((_QWORD *)a2 + 7))
    {
      v14 = (SnippetUI::MultilineTextProperty *)operator new();
      SnippetUI::MultilineTextProperty::MultilineTextProperty(v14, *((const SnippetUI::MultilineTextProperty **)a2 + 7));
    }
    else
    {
      v14 = 0;
    }
    *((_QWORD *)this + 7) = v14;
    if (*((_QWORD *)a2 + 8))
    {
      v15 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v15, *((const SnippetUI::TextProperty **)a2 + 8));
    }
    else
    {
      v15 = 0;
    }
    *((_QWORD *)this + 8) = v15;
    if (*((_QWORD *)a2 + 9))
    {
      v16 = (SnippetUI::VisualProperty *)operator new();
      SnippetUI::VisualProperty::VisualProperty(v16, *((const SnippetUI::VisualProperty **)a2 + 9));
    }
    else
    {
      v16 = 0;
    }
    *((_QWORD *)this + 9) = v16;
    if (*((_QWORD *)a2 + 10))
    {
      v11 = (SnippetUI::ActionProperty *)operator new();
      SnippetUI::ActionProperty::ActionProperty(v11, *((const SnippetUI::ActionProperty **)a2 + 10));
    }
    else
    {
      v11 = 0;
    }
  }
  *((_QWORD *)this + 10) = v11;
  return this;
}

void sub_1BF887E00(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x1C3B8D890](v2, 0x10A1C40B18DE219);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::FactItem_Standard::CopyFrom(SnippetUI::FactItem_Standard *this, const SnippetUI::FactItem_Standard *a2)
{
  if (a2 != this)
  {
    SnippetUI::FactItem_Standard::Clear(this);
    SnippetUI::FactItem_Standard::MergeFrom(this, a2);
  }
}

void SnippetUI::FactItem_Standard::InternalSwap(SnippetUI::FactItem_Standard *this, SnippetUI::FactItem_Standard *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  google::protobuf::UnknownFieldSet *v26;

  v4 = (SnippetUI::FactItem_Standard *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v26;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 2);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = (uint64_t *)*((_QWORD *)this + 3);
  v14 = (uint64_t **)((char *)a2 + 24);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_19;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v13 = (uint64_t *)*((_QWORD *)this + 3);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v13[2];
  v17 = *(_OWORD *)v13;
  v18 = v15[2];
  *(_OWORD *)v13 = *(_OWORD *)v15;
  v13[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_19:
  v19 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v19;
  v20 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v20;
  v21 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v21;
  v22 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v22;
  v23 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v23;
  v24 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v24;
  v25 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v25;
}

void SnippetUI::FactItem_ShortNumber::InitAsDefaultInstance(SnippetUI::FactItem_ShortNumber *this)
{
  qword_1ED1D54E8 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D54F0 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D54F8 = (uint64_t)&SnippetUI::_MultilineTextProperty_default_instance_;
  unk_1ED1D5500 = &SnippetUI::_MultilineTextProperty_default_instance_;
  qword_1ED1D5508 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D5510 = &SnippetUI::_VisualProperty_default_instance_;
  qword_1ED1D5518 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
  unk_1ED1D5520 = &SnippetUI::_TextProperty_default_instance_;
}

uint64_t SnippetUI::FactItem_ShortNumber::_Internal::number(SnippetUI::FactItem_ShortNumber::_Internal *this, const SnippetUI::FactItem_ShortNumber *a2)
{
  return *((_QWORD *)this + 4);
}

uint64_t SnippetUI::FactItem_ShortNumber::_Internal::text_1(SnippetUI::FactItem_ShortNumber::_Internal *this, const SnippetUI::FactItem_ShortNumber *a2)
{
  return *((_QWORD *)this + 5);
}

uint64_t SnippetUI::FactItem_ShortNumber::_Internal::text_2(SnippetUI::FactItem_ShortNumber::_Internal *this, const SnippetUI::FactItem_ShortNumber *a2)
{
  return *((_QWORD *)this + 6);
}

uint64_t SnippetUI::FactItem_ShortNumber::_Internal::text_3(SnippetUI::FactItem_ShortNumber::_Internal *this, const SnippetUI::FactItem_ShortNumber *a2)
{
  return *((_QWORD *)this + 7);
}

uint64_t SnippetUI::FactItem_ShortNumber::_Internal::unit(SnippetUI::FactItem_ShortNumber::_Internal *this, const SnippetUI::FactItem_ShortNumber *a2)
{
  return *((_QWORD *)this + 8);
}

uint64_t SnippetUI::FactItem_ShortNumber::_Internal::thumbnail(SnippetUI::FactItem_ShortNumber::_Internal *this, const SnippetUI::FactItem_ShortNumber *a2)
{
  return *((_QWORD *)this + 9);
}

uint64_t SnippetUI::FactItem_ShortNumber::_Internal::action(SnippetUI::FactItem_ShortNumber::_Internal *this, const SnippetUI::FactItem_ShortNumber *a2)
{
  return *((_QWORD *)this + 10);
}

uint64_t SnippetUI::FactItem_ShortNumber::_Internal::text_4(SnippetUI::FactItem_ShortNumber::_Internal *this, const SnippetUI::FactItem_ShortNumber *a2)
{
  return *((_QWORD *)this + 11);
}

uint64_t SnippetUI::FactItem_ShortNumber::clear_number(SnippetUI::FactItem_ShortNumber *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 4) = 0;
  return result;
}

uint64_t SnippetUI::FactItem_ShortNumber::clear_text_1(SnippetUI::FactItem_ShortNumber *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 5);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 5) = 0;
  return result;
}

uint64_t SnippetUI::FactItem_ShortNumber::clear_text_2(SnippetUI::FactItem_ShortNumber *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 6);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 6) = 0;
  return result;
}

uint64_t SnippetUI::FactItem_ShortNumber::clear_text_3(SnippetUI::FactItem_ShortNumber *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 7);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 7) = 0;
  return result;
}

uint64_t SnippetUI::FactItem_ShortNumber::clear_unit(SnippetUI::FactItem_ShortNumber *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 8) = 0;
  return result;
}

uint64_t SnippetUI::FactItem_ShortNumber::clear_thumbnail(SnippetUI::FactItem_ShortNumber *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 9);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 9) = 0;
  return result;
}

uint64_t SnippetUI::FactItem_ShortNumber::clear_action(SnippetUI::FactItem_ShortNumber *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 10);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 10) = 0;
  return result;
}

uint64_t SnippetUI::FactItem_ShortNumber::clear_text_4(SnippetUI::FactItem_ShortNumber *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 11);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 11) = 0;
  return result;
}

SnippetUI::FactItem_ShortNumber *SnippetUI::FactItem_ShortNumber::FactItem_ShortNumber(SnippetUI::FactItem_ShortNumber *this, const SnippetUI::FactItem_ShortNumber *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  SnippetUI::TextProperty *v10;
  SnippetUI::TextProperty *v11;
  SnippetUI::TextProperty *v12;
  SnippetUI::MultilineTextProperty *v13;
  SnippetUI::MultilineTextProperty *v14;
  SnippetUI::TextProperty *v15;
  SnippetUI::VisualProperty *v16;
  SnippetUI::ActionProperty *v17;

  *(_QWORD *)this = &off_1E792B598;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 24) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::FactItem_ShortNumber *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
    v9 = *(_QWORD *)(v8 + 8);
  else
    v9 = *(unsigned __int8 *)(v8 + 23);
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v9)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
  if (a2 == (const SnippetUI::FactItem_ShortNumber *)&SnippetUI::_FactItem_ShortNumber_default_instance_)
  {
    v11 = 0;
    *((_QWORD *)this + 10) = 0;
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 2) = 0u;
  }
  else
  {
    if (*((_QWORD *)a2 + 4))
    {
      v10 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v10, *((const SnippetUI::TextProperty **)a2 + 4));
    }
    else
    {
      v10 = 0;
    }
    *((_QWORD *)this + 4) = v10;
    if (*((_QWORD *)a2 + 5))
    {
      v12 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v12, *((const SnippetUI::TextProperty **)a2 + 5));
    }
    else
    {
      v12 = 0;
    }
    *((_QWORD *)this + 5) = v12;
    if (*((_QWORD *)a2 + 6))
    {
      v13 = (SnippetUI::MultilineTextProperty *)operator new();
      SnippetUI::MultilineTextProperty::MultilineTextProperty(v13, *((const SnippetUI::MultilineTextProperty **)a2 + 6));
    }
    else
    {
      v13 = 0;
    }
    *((_QWORD *)this + 6) = v13;
    if (*((_QWORD *)a2 + 7))
    {
      v14 = (SnippetUI::MultilineTextProperty *)operator new();
      SnippetUI::MultilineTextProperty::MultilineTextProperty(v14, *((const SnippetUI::MultilineTextProperty **)a2 + 7));
    }
    else
    {
      v14 = 0;
    }
    *((_QWORD *)this + 7) = v14;
    if (*((_QWORD *)a2 + 8))
    {
      v15 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v15, *((const SnippetUI::TextProperty **)a2 + 8));
    }
    else
    {
      v15 = 0;
    }
    *((_QWORD *)this + 8) = v15;
    if (*((_QWORD *)a2 + 9))
    {
      v16 = (SnippetUI::VisualProperty *)operator new();
      SnippetUI::VisualProperty::VisualProperty(v16, *((const SnippetUI::VisualProperty **)a2 + 9));
    }
    else
    {
      v16 = 0;
    }
    *((_QWORD *)this + 9) = v16;
    if (*((_QWORD *)a2 + 10))
    {
      v17 = (SnippetUI::ActionProperty *)operator new();
      SnippetUI::ActionProperty::ActionProperty(v17, *((const SnippetUI::ActionProperty **)a2 + 10));
    }
    else
    {
      v17 = 0;
    }
    *((_QWORD *)this + 10) = v17;
    if (*((_QWORD *)a2 + 11))
    {
      v11 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v11, *((const SnippetUI::TextProperty **)a2 + 11));
    }
    else
    {
      v11 = 0;
    }
  }
  *((_QWORD *)this + 11) = v11;
  return this;
}

void sub_1BF888540(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x1C3B8D890](v2, 0x10A1C40BEC01B52);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::FactItem_ShortNumber::CopyFrom(SnippetUI::FactItem_ShortNumber *this, const SnippetUI::FactItem_ShortNumber *a2)
{
  if (a2 != this)
  {
    SnippetUI::FactItem_ShortNumber::Clear(this);
    SnippetUI::FactItem_ShortNumber::MergeFrom(this, a2);
  }
}

void SnippetUI::FactItem_ShortNumber::InternalSwap(SnippetUI::FactItem_ShortNumber *this, SnippetUI::FactItem_ShortNumber *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  google::protobuf::UnknownFieldSet *v27;

  v4 = (SnippetUI::FactItem_ShortNumber *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v27;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 2);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = (uint64_t *)*((_QWORD *)this + 3);
  v14 = (uint64_t **)((char *)a2 + 24);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_19;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v13 = (uint64_t *)*((_QWORD *)this + 3);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v13[2];
  v17 = *(_OWORD *)v13;
  v18 = v15[2];
  *(_OWORD *)v13 = *(_OWORD *)v15;
  v13[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_19:
  v19 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v19;
  v20 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v20;
  v21 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v21;
  v22 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v22;
  v23 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v23;
  v24 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v24;
  v25 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v25;
  v26 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v26;
}

void SnippetUI::FactItem_HeroNumber::InitAsDefaultInstance(SnippetUI::FactItem_HeroNumber *this)
{
  qword_1ED1D45F0 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D45F8 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D4600 = (uint64_t)&SnippetUI::_MultilineTextProperty_default_instance_;
  unk_1ED1D4608 = &SnippetUI::_MultilineTextProperty_default_instance_;
  qword_1ED1D4610 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
  unk_1ED1D4618 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D4620 = (uint64_t)&SnippetUI::_MultilineTextProperty_default_instance_;
}

uint64_t SnippetUI::FactItem_HeroNumber::_Internal::number(SnippetUI::FactItem_HeroNumber::_Internal *this, const SnippetUI::FactItem_HeroNumber *a2)
{
  return *((_QWORD *)this + 4);
}

uint64_t SnippetUI::FactItem_HeroNumber::_Internal::text_1(SnippetUI::FactItem_HeroNumber::_Internal *this, const SnippetUI::FactItem_HeroNumber *a2)
{
  return *((_QWORD *)this + 5);
}

uint64_t SnippetUI::FactItem_HeroNumber::_Internal::text_2(SnippetUI::FactItem_HeroNumber::_Internal *this, const SnippetUI::FactItem_HeroNumber *a2)
{
  return *((_QWORD *)this + 6);
}

uint64_t SnippetUI::FactItem_HeroNumber::_Internal::text_3(SnippetUI::FactItem_HeroNumber::_Internal *this, const SnippetUI::FactItem_HeroNumber *a2)
{
  return *((_QWORD *)this + 7);
}

uint64_t SnippetUI::FactItem_HeroNumber::_Internal::action(SnippetUI::FactItem_HeroNumber::_Internal *this, const SnippetUI::FactItem_HeroNumber *a2)
{
  return *((_QWORD *)this + 8);
}

uint64_t SnippetUI::FactItem_HeroNumber::_Internal::text_4(SnippetUI::FactItem_HeroNumber::_Internal *this, const SnippetUI::FactItem_HeroNumber *a2)
{
  return *((_QWORD *)this + 9);
}

uint64_t SnippetUI::FactItem_HeroNumber::_Internal::text_5(SnippetUI::FactItem_HeroNumber::_Internal *this, const SnippetUI::FactItem_HeroNumber *a2)
{
  return *((_QWORD *)this + 10);
}

uint64_t SnippetUI::FactItem_HeroNumber::clear_number(SnippetUI::FactItem_HeroNumber *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 4) = 0;
  return result;
}

uint64_t SnippetUI::FactItem_HeroNumber::clear_text_1(SnippetUI::FactItem_HeroNumber *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 5);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 5) = 0;
  return result;
}

uint64_t SnippetUI::FactItem_HeroNumber::clear_text_2(SnippetUI::FactItem_HeroNumber *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 6);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 6) = 0;
  return result;
}

uint64_t SnippetUI::FactItem_HeroNumber::clear_text_3(SnippetUI::FactItem_HeroNumber *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 7);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 7) = 0;
  return result;
}

uint64_t SnippetUI::FactItem_HeroNumber::clear_action(SnippetUI::FactItem_HeroNumber *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 8) = 0;
  return result;
}

uint64_t SnippetUI::FactItem_HeroNumber::clear_text_4(SnippetUI::FactItem_HeroNumber *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 9);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 9) = 0;
  return result;
}

uint64_t SnippetUI::FactItem_HeroNumber::clear_text_5(SnippetUI::FactItem_HeroNumber *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 10);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 10) = 0;
  return result;
}

SnippetUI::FactItem_HeroNumber *SnippetUI::FactItem_HeroNumber::FactItem_HeroNumber(SnippetUI::FactItem_HeroNumber *this, const SnippetUI::FactItem_HeroNumber *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  SnippetUI::TextProperty *v10;
  SnippetUI::MultilineTextProperty *v11;
  SnippetUI::TextProperty *v12;
  SnippetUI::MultilineTextProperty *v13;
  SnippetUI::MultilineTextProperty *v14;
  SnippetUI::ActionProperty *v15;
  SnippetUI::TextProperty *v16;

  *(_QWORD *)this = &off_1E792B658;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 22) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::FactItem_HeroNumber *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
    v9 = *(_QWORD *)(v8 + 8);
  else
    v9 = *(unsigned __int8 *)(v8 + 23);
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v9)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
  if (a2 == (const SnippetUI::FactItem_HeroNumber *)&SnippetUI::_FactItem_HeroNumber_default_instance_)
  {
    v11 = 0;
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 2) = 0u;
  }
  else
  {
    if (*((_QWORD *)a2 + 4))
    {
      v10 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v10, *((const SnippetUI::TextProperty **)a2 + 4));
    }
    else
    {
      v10 = 0;
    }
    *((_QWORD *)this + 4) = v10;
    if (*((_QWORD *)a2 + 5))
    {
      v12 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v12, *((const SnippetUI::TextProperty **)a2 + 5));
    }
    else
    {
      v12 = 0;
    }
    *((_QWORD *)this + 5) = v12;
    if (*((_QWORD *)a2 + 6))
    {
      v13 = (SnippetUI::MultilineTextProperty *)operator new();
      SnippetUI::MultilineTextProperty::MultilineTextProperty(v13, *((const SnippetUI::MultilineTextProperty **)a2 + 6));
    }
    else
    {
      v13 = 0;
    }
    *((_QWORD *)this + 6) = v13;
    if (*((_QWORD *)a2 + 7))
    {
      v14 = (SnippetUI::MultilineTextProperty *)operator new();
      SnippetUI::MultilineTextProperty::MultilineTextProperty(v14, *((const SnippetUI::MultilineTextProperty **)a2 + 7));
    }
    else
    {
      v14 = 0;
    }
    *((_QWORD *)this + 7) = v14;
    if (*((_QWORD *)a2 + 8))
    {
      v15 = (SnippetUI::ActionProperty *)operator new();
      SnippetUI::ActionProperty::ActionProperty(v15, *((const SnippetUI::ActionProperty **)a2 + 8));
    }
    else
    {
      v15 = 0;
    }
    *((_QWORD *)this + 8) = v15;
    if (*((_QWORD *)a2 + 9))
    {
      v16 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v16, *((const SnippetUI::TextProperty **)a2 + 9));
    }
    else
    {
      v16 = 0;
    }
    *((_QWORD *)this + 9) = v16;
    if (*((_QWORD *)a2 + 10))
    {
      v11 = (SnippetUI::MultilineTextProperty *)operator new();
      SnippetUI::MultilineTextProperty::MultilineTextProperty(v11, *((const SnippetUI::MultilineTextProperty **)a2 + 10));
    }
    else
    {
      v11 = 0;
    }
  }
  *((_QWORD *)this + 10) = v11;
  return this;
}

void sub_1BF888C14(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x1C3B8D890](v2, 0x10A1C40BEC01B52);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::FactItem_HeroNumber::CopyFrom(SnippetUI::FactItem_HeroNumber *this, const SnippetUI::FactItem_HeroNumber *a2)
{
  if (a2 != this)
  {
    SnippetUI::FactItem_HeroNumber::Clear(this);
    SnippetUI::FactItem_HeroNumber::MergeFrom(this, a2);
  }
}

void SnippetUI::FactItem_HeroNumber::InternalSwap(SnippetUI::FactItem_HeroNumber *this, SnippetUI::FactItem_HeroNumber *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  google::protobuf::UnknownFieldSet *v26;

  v4 = (SnippetUI::FactItem_HeroNumber *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v26;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 2);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = (uint64_t *)*((_QWORD *)this + 3);
  v14 = (uint64_t **)((char *)a2 + 24);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_19;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v13 = (uint64_t *)*((_QWORD *)this + 3);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v13[2];
  v17 = *(_OWORD *)v13;
  v18 = v15[2];
  *(_OWORD *)v13 = *(_OWORD *)v15;
  v13[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_19:
  v19 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v19;
  v20 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v20;
  v21 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v21;
  v22 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v22;
  v23 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v23;
  v24 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v24;
  v25 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v25;
}

void SnippetUI::FactItem_Button::InitAsDefaultInstance(SnippetUI::FactItem_Button *this)
{
  qword_1ED1D4028 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D4030 = &SnippetUI::_Button_default_instance_;
  qword_1ED1D4038 = (uint64_t)&SnippetUI::_Button_default_instance_;
  unk_1ED1D4040 = &SnippetUI::_Button_default_instance_;
  qword_1ED1D4048 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D4050 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D4058 = (uint64_t)&SnippetUI::_MultilineTextProperty_default_instance_;
  unk_1ED1D4060 = &SnippetUI::_VisualProperty_default_instance_;
  qword_1ED1D4068 = (uint64_t)&SnippetUI::_ActionProperty_default_instance_;
  unk_1ED1D4070 = &SnippetUI::_TextProperty_default_instance_;
}

uint64_t SnippetUI::FactItem_Button::_Internal::text_1(SnippetUI::FactItem_Button::_Internal *this, const SnippetUI::FactItem_Button *a2)
{
  return *((_QWORD *)this + 4);
}

uint64_t SnippetUI::FactItem_Button::_Internal::button_1(SnippetUI::FactItem_Button::_Internal *this, const SnippetUI::FactItem_Button *a2)
{
  return *((_QWORD *)this + 5);
}

uint64_t SnippetUI::FactItem_Button::_Internal::button_2(SnippetUI::FactItem_Button::_Internal *this, const SnippetUI::FactItem_Button *a2)
{
  return *((_QWORD *)this + 6);
}

uint64_t SnippetUI::FactItem_Button::_Internal::button_3(SnippetUI::FactItem_Button::_Internal *this, const SnippetUI::FactItem_Button *a2)
{
  return *((_QWORD *)this + 7);
}

uint64_t SnippetUI::FactItem_Button::_Internal::text_2(SnippetUI::FactItem_Button::_Internal *this, const SnippetUI::FactItem_Button *a2)
{
  return *((_QWORD *)this + 8);
}

uint64_t SnippetUI::FactItem_Button::_Internal::text_3(SnippetUI::FactItem_Button::_Internal *this, const SnippetUI::FactItem_Button *a2)
{
  return *((_QWORD *)this + 9);
}

uint64_t SnippetUI::FactItem_Button::_Internal::text_4(SnippetUI::FactItem_Button::_Internal *this, const SnippetUI::FactItem_Button *a2)
{
  return *((_QWORD *)this + 10);
}

uint64_t SnippetUI::FactItem_Button::_Internal::thumbnail(SnippetUI::FactItem_Button::_Internal *this, const SnippetUI::FactItem_Button *a2)
{
  return *((_QWORD *)this + 11);
}

uint64_t SnippetUI::FactItem_Button::_Internal::action(SnippetUI::FactItem_Button::_Internal *this, const SnippetUI::FactItem_Button *a2)
{
  return *((_QWORD *)this + 12);
}

uint64_t SnippetUI::FactItem_Button::_Internal::text_5(SnippetUI::FactItem_Button::_Internal *this, const SnippetUI::FactItem_Button *a2)
{
  return *((_QWORD *)this + 13);
}

uint64_t SnippetUI::FactItem_Button::clear_text_1(SnippetUI::FactItem_Button *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 4) = 0;
  return result;
}

uint64_t SnippetUI::FactItem_Button::clear_button_1(SnippetUI::FactItem_Button *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 5);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 5) = 0;
  return result;
}

uint64_t SnippetUI::FactItem_Button::clear_button_2(SnippetUI::FactItem_Button *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 6);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 6) = 0;
  return result;
}

uint64_t SnippetUI::FactItem_Button::clear_button_3(SnippetUI::FactItem_Button *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 7);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 7) = 0;
  return result;
}

uint64_t SnippetUI::FactItem_Button::clear_text_2(SnippetUI::FactItem_Button *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 8) = 0;
  return result;
}

uint64_t SnippetUI::FactItem_Button::clear_text_3(SnippetUI::FactItem_Button *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 9);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 9) = 0;
  return result;
}

uint64_t SnippetUI::FactItem_Button::clear_text_4(SnippetUI::FactItem_Button *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 10);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 10) = 0;
  return result;
}

uint64_t SnippetUI::FactItem_Button::clear_thumbnail(SnippetUI::FactItem_Button *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 11);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 11) = 0;
  return result;
}

uint64_t SnippetUI::FactItem_Button::clear_action(SnippetUI::FactItem_Button *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 12);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 12) = 0;
  return result;
}

uint64_t SnippetUI::FactItem_Button::clear_text_5(SnippetUI::FactItem_Button *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 13);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 13) = 0;
  return result;
}

SnippetUI::FactItem_Button *SnippetUI::FactItem_Button::FactItem_Button(SnippetUI::FactItem_Button *this, const SnippetUI::FactItem_Button *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  SnippetUI::TextProperty *v10;
  SnippetUI::TextProperty *v11;
  SnippetUI::Button *v12;
  SnippetUI::Button *v13;
  SnippetUI::Button *v14;
  SnippetUI::TextProperty *v15;
  SnippetUI::TextProperty *v16;
  SnippetUI::MultilineTextProperty *v17;
  SnippetUI::VisualProperty *v18;
  SnippetUI::ActionProperty *v19;

  *(_QWORD *)this = &off_1E792B718;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 28) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::FactItem_Button *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  *((_QWORD *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  v8 = *((_QWORD *)a2 + 3);
  if (*(char *)(v8 + 23) < 0)
    v9 = *(_QWORD *)(v8 + 8);
  else
    v9 = *(unsigned __int8 *)(v8 + 23);
  if ((uint64_t *)v8 != &google::protobuf::internal::fixed_address_empty_string && v9)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 3, v8);
  if (a2 == (const SnippetUI::FactItem_Button *)&SnippetUI::_FactItem_Button_default_instance_)
  {
    v11 = 0;
    *((_QWORD *)this + 12) = 0;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
  }
  else
  {
    if (*((_QWORD *)a2 + 4))
    {
      v10 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v10, *((const SnippetUI::TextProperty **)a2 + 4));
    }
    else
    {
      v10 = 0;
    }
    *((_QWORD *)this + 4) = v10;
    if (*((_QWORD *)a2 + 5))
    {
      v12 = (SnippetUI::Button *)operator new();
      SnippetUI::Button::Button(v12, *((const SnippetUI::Button **)a2 + 5));
    }
    else
    {
      v12 = 0;
    }
    *((_QWORD *)this + 5) = v12;
    if (*((_QWORD *)a2 + 6))
    {
      v13 = (SnippetUI::Button *)operator new();
      SnippetUI::Button::Button(v13, *((const SnippetUI::Button **)a2 + 6));
    }
    else
    {
      v13 = 0;
    }
    *((_QWORD *)this + 6) = v13;
    if (*((_QWORD *)a2 + 7))
    {
      v14 = (SnippetUI::Button *)operator new();
      SnippetUI::Button::Button(v14, *((const SnippetUI::Button **)a2 + 7));
    }
    else
    {
      v14 = 0;
    }
    *((_QWORD *)this + 7) = v14;
    if (*((_QWORD *)a2 + 8))
    {
      v15 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v15, *((const SnippetUI::TextProperty **)a2 + 8));
    }
    else
    {
      v15 = 0;
    }
    *((_QWORD *)this + 8) = v15;
    if (*((_QWORD *)a2 + 9))
    {
      v16 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v16, *((const SnippetUI::TextProperty **)a2 + 9));
    }
    else
    {
      v16 = 0;
    }
    *((_QWORD *)this + 9) = v16;
    if (*((_QWORD *)a2 + 10))
    {
      v17 = (SnippetUI::MultilineTextProperty *)operator new();
      SnippetUI::MultilineTextProperty::MultilineTextProperty(v17, *((const SnippetUI::MultilineTextProperty **)a2 + 10));
    }
    else
    {
      v17 = 0;
    }
    *((_QWORD *)this + 10) = v17;
    if (*((_QWORD *)a2 + 11))
    {
      v18 = (SnippetUI::VisualProperty *)operator new();
      SnippetUI::VisualProperty::VisualProperty(v18, *((const SnippetUI::VisualProperty **)a2 + 11));
    }
    else
    {
      v18 = 0;
    }
    *((_QWORD *)this + 11) = v18;
    if (*((_QWORD *)a2 + 12))
    {
      v19 = (SnippetUI::ActionProperty *)operator new();
      SnippetUI::ActionProperty::ActionProperty(v19, *((const SnippetUI::ActionProperty **)a2 + 12));
    }
    else
    {
      v19 = 0;
    }
    *((_QWORD *)this + 12) = v19;
    if (*((_QWORD *)a2 + 13))
    {
      v11 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v11, *((const SnippetUI::TextProperty **)a2 + 13));
    }
    else
    {
      v11 = 0;
    }
  }
  *((_QWORD *)this + 13) = v11;
  return this;
}

void sub_1BF889448(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x1C3B8D890](v2, 0x10A1C40BEC01B52);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::FactItem_Button::CopyFrom(SnippetUI::FactItem_Button *this, const SnippetUI::FactItem_Button *a2)
{
  if (a2 != this)
  {
    SnippetUI::FactItem_Button::Clear(this);
    SnippetUI::FactItem_Button::MergeFrom(this, a2);
  }
}

void SnippetUI::FactItem_Button::InternalSwap(SnippetUI::FactItem_Button *this, SnippetUI::FactItem_Button *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  google::protobuf::UnknownFieldSet *v29;

  v4 = (SnippetUI::FactItem_Button *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v29;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 2);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = (uint64_t *)*((_QWORD *)this + 3);
  v14 = (uint64_t **)((char *)a2 + 24);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_19;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v13 = (uint64_t *)*((_QWORD *)this + 3);
  }
  v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v15 = *v14;
  }
  v16 = v13[2];
  v17 = *(_OWORD *)v13;
  v18 = v15[2];
  *(_OWORD *)v13 = *(_OWORD *)v15;
  v13[2] = v18;
  *(_OWORD *)v15 = v17;
  v15[2] = v16;
LABEL_19:
  v19 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v19;
  v20 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v20;
  v21 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v21;
  v22 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v22;
  v23 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v23;
  v24 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v24;
  v25 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  *((_QWORD *)a2 + 10) = v25;
  v26 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)a2 + 11) = v26;
  v27 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v27;
  v28 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 13) = v28;
}

void siri::dialogengine::Node::~Node(siri::dialogengine::Node *this)
{
  *(_QWORD *)this = off_1E793A6B0;
  *((_QWORD *)this + 8) = &unk_1E793A708;
  if (*((char *)this + 191) < 0)
    operator delete(*((void **)this + 21));
  if (*((char *)this + 167) < 0)
    operator delete(*((void **)this + 18));
  if (*((char *)this + 143) < 0)
    operator delete(*((void **)this + 15));
  if (*((char *)this + 119) < 0)
    operator delete(*((void **)this + 12));
  *((_QWORD *)this + 8) = off_1E793AED8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((_QWORD **)this + 10));
  siri::dialogengine::LineNumberBase::~LineNumberBase((void **)this);
}

{
  *(_QWORD *)this = off_1E793A6B0;
  *((_QWORD *)this + 8) = &unk_1E793A708;
  if (*((char *)this + 191) < 0)
    operator delete(*((void **)this + 21));
  if (*((char *)this + 167) < 0)
    operator delete(*((void **)this + 18));
  if (*((char *)this + 143) < 0)
    operator delete(*((void **)this + 15));
  if (*((char *)this + 119) < 0)
    operator delete(*((void **)this + 12));
  *((_QWORD *)this + 8) = off_1E793AED8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((_QWORD **)this + 10));
  siri::dialogengine::LineNumberBase::~LineNumberBase((void **)this);
  JUMPOUT(0x1C3B8D890);
}

{
  *(_QWORD *)this = off_1E793A6B0;
  *((_QWORD *)this + 8) = &unk_1E793A708;
  if (*((char *)this + 191) < 0)
    operator delete(*((void **)this + 21));
  if (*((char *)this + 167) < 0)
    operator delete(*((void **)this + 18));
  if (*((char *)this + 143) < 0)
    operator delete(*((void **)this + 15));
  if (*((char *)this + 119) < 0)
    operator delete(*((void **)this + 12));
  *((_QWORD *)this + 8) = off_1E793AED8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((_QWORD **)this + 10));
  siri::dialogengine::LineNumberBase::~LineNumberBase((void **)this);
}

uint64_t siri::dialogengine::Node::Validate(siri::dialogengine::Node *this, siri::dialogengine::Context *a2)
{
  _OWORD *v4;
  int v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  uint64_t v10;
  double Condition;
  std::string *v12;
  __int128 v13;
  std::__shared_weak_count *size;
  unint64_t *v15;
  unint64_t v16;
  std::string v18;
  std::string __p;
  std::string v20;

  v4 = (_OWORD *)((char *)this + 96);
  if (*((char *)this + 119) < 0)
  {
    std::string::__init_copy_ctor_external(&v20, *((const std::string::value_type **)this + 12), *((_QWORD *)this + 13));
  }
  else
  {
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = *v4;
    v20.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 14);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "#");
  v5 = siri::dialogengine::StringContains(&v20.__r_.__value_.__l.__data_, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v20.__r_.__value_.__l.__data_);
    if (!v5)
      goto LABEL_19;
  }
  else if (!v5)
  {
    goto LABEL_19;
  }
  if (*((char *)this + 119) < 0)
    std::string::__init_copy_ctor_external(&v18, *((const std::string::value_type **)this + 12), *((_QWORD *)this + 13));
  else
    v18 = *(std::string *)v4;
  v6 = std::string::insert(&v18, 0, "Node ID contains the invalid character '#': '");
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = std::string::append(&__p, "'");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::Context::AddValidationError((uint64_t)a2, (__int128 *)&v20, (uint64_t)this);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
LABEL_19:
  v10 = v5 ^ 1u;
  Condition = siri::dialogengine::Node::GetCondition(this, a2, &v18);
  if (v18.__r_.__value_.__r.__words[0])
  {
    v10 = (*(unsigned int (**)(std::string::size_type, siri::dialogengine::Context *, double))(*(_QWORD *)v18.__r_.__value_.__l.__data_ + 16))(v18.__r_.__value_.__r.__words[0], a2, Condition) & v10;
  }
  else
  {
    if (*((char *)this + 143) < 0)
    {
      if (!*((_QWORD *)this + 16))
        goto LABEL_30;
    }
    else if (!*((_BYTE *)this + 143))
    {
      goto LABEL_30;
    }
    std::operator+<char>();
    v12 = std::string::append(&__p, "'");
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v20.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, (__int128 *)&v20, (uint64_t)this);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v10 = 0;
  }
LABEL_30:
  size = (std::__shared_weak_count *)v18.__r_.__value_.__l.__size_;
  if (v18.__r_.__value_.__l.__size_)
  {
    v15 = (unint64_t *)(v18.__r_.__value_.__l.__size_ + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  return v10;
}

void sub_1BF889A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void siri::dialogengine::Node::Execute(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t siri::dialogengine::Node::IsConditionMet(siri::dialogengine::Node *this, siri::dialogengine::Context *a2)
{
  siri::dialogengine::ExecutionState *v4;
  siri::dialogengine::Context **v5;
  uint64_t v6;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  std::string::size_type size;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  char *v15;
  void **v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  void *v32[2];
  unsigned __int8 v33;
  std::string v34;
  std::string v35;
  std::string v36;
  std::string v37;
  std::string __p;
  std::string v39;
  std::string v40;
  uint64_t v41;
  std::__shared_weak_count *v42;

  if (*((char *)this + 143) < 0)
  {
    if (*((_QWORD *)this + 16))
      goto LABEL_3;
    return 1;
  }
  if (!*((_BYTE *)this + 143))
    return 1;
LABEL_3:
  siri::dialogengine::Node::GetCondition(this, a2, &v41);
  if (v41)
  {
    memset(&v40, 0, sizeof(v40));
    if (!a2
      || (v5 = *(siri::dialogengine::Context ***)(v41 + 144), v5 == *(siri::dialogengine::Context ***)(v41 + 152)))
    {
      v6 = 0;
    }
    else
    {
      v6 = siri::dialogengine::EvaluateConditionEntry(a2, *v5, (siri::dialogengine::ConditionEntry *)&v40, v4);
    }
    siri::dialogengine::Node::GetIdForDebug(this, a2, 0, &v39);
    std::operator+<char>();
    v7 = std::string::append(&v34, "' for '");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v35.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = &v39;
    else
      v9 = (std::string *)v39.__r_.__value_.__r.__words[0];
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
    else
      size = v39.__r_.__value_.__l.__size_;
    v11 = std::string::append(&v35, (const std::string::value_type *)v9, size);
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v36.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    v13 = std::string::append(&v36, "' evaluated to: ");
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if ((_DWORD)v6)
      v15 = "true";
    else
      v15 = "false";
    std::string::basic_string[abi:ne180100]<0>(v32, v15);
    if ((v33 & 0x80u) == 0)
      v16 = v32;
    else
      v16 = (void **)v32[0];
    if ((v33 & 0x80u) == 0)
      v17 = v33;
    else
      v17 = (std::string::size_type)v32[1];
    v18 = std::string::append(&v37, (const std::string::value_type *)v16, v17);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::Debug((siri::dialogengine *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((char)v33 < 0)
      operator delete(v32[0]);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v36.__r_.__value_.__l.__data_);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
    v39.__r_.__value_.__r.__words[0] = (std::string::size_type)&v40;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
  }
  else
  {
    siri::dialogengine::Node::GetIdForDebug(this, a2, 0, &v40);
    std::operator+<char>();
    v20 = std::string::append(&v36, "' in node '");
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v22 = &v40;
    else
      v22 = (std::string *)v40.__r_.__value_.__r.__words[0];
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
    else
      v23 = v40.__r_.__value_.__l.__size_;
    v24 = std::string::append(&v37, (const std::string::value_type *)v22, v23);
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    v26 = std::string::append(&__p, "'");
    v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)&v39, 1u);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v36.__r_.__value_.__l.__data_);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
    v6 = 0;
  }
  v28 = v42;
  if (v42)
  {
    p_shared_owners = (unint64_t *)&v42->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  return v6;
}

void sub_1BF889EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;

  *(_QWORD *)(v47 - 112) = v47 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v47 - 112));
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v47 - 64);
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::Node::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  const void **v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  const void **v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  const void **v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  const void **v26;
  unsigned __int8 *v27;

  v2 = *(unsigned __int8 *)(a1 + 119);
  if ((v2 & 0x80u) == 0)
    v3 = *(unsigned __int8 *)(a1 + 119);
  else
    v3 = *(_QWORD *)(a1 + 104);
  v4 = *(unsigned __int8 *)(a2 + 119);
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 104);
  if (v3 != v4)
    return 0;
  v8 = (const void **)(a1 + 96);
  if (v5 >= 0)
    v9 = (unsigned __int8 *)(a2 + 96);
  else
    v9 = *(unsigned __int8 **)(a2 + 96);
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*v8, v9, *(_QWORD *)(a1 + 104)))
      return 0;
  }
  else if (*(_BYTE *)(a1 + 119))
  {
    while (*(unsigned __int8 *)v8 == *v9)
    {
      v8 = (const void **)((char *)v8 + 1);
      ++v9;
      if (!--v2)
        goto LABEL_16;
    }
    return 0;
  }
LABEL_16:
  v10 = *(unsigned __int8 *)(a1 + 143);
  if ((v10 & 0x80u) == 0)
    v11 = *(unsigned __int8 *)(a1 + 143);
  else
    v11 = *(_QWORD *)(a1 + 128);
  v12 = *(unsigned __int8 *)(a2 + 143);
  v13 = (char)v12;
  if ((v12 & 0x80u) != 0)
    v12 = *(_QWORD *)(a2 + 128);
  if (v11 != v12)
    return 0;
  v14 = (const void **)(a1 + 120);
  if (v13 >= 0)
    v15 = (unsigned __int8 *)(a2 + 120);
  else
    v15 = *(unsigned __int8 **)(a2 + 120);
  if ((v10 & 0x80) != 0)
  {
    if (memcmp(*v14, v15, *(_QWORD *)(a1 + 128)))
      return 0;
  }
  else if (*(_BYTE *)(a1 + 143))
  {
    while (*(unsigned __int8 *)v14 == *v15)
    {
      v14 = (const void **)((char *)v14 + 1);
      ++v15;
      if (!--v10)
        goto LABEL_31;
    }
    return 0;
  }
LABEL_31:
  v16 = *(unsigned __int8 *)(a1 + 167);
  if ((v16 & 0x80u) == 0)
    v17 = *(unsigned __int8 *)(a1 + 167);
  else
    v17 = *(_QWORD *)(a1 + 152);
  v18 = *(unsigned __int8 *)(a2 + 167);
  v19 = (char)v18;
  if ((v18 & 0x80u) != 0)
    v18 = *(_QWORD *)(a2 + 152);
  if (v17 != v18)
    return 0;
  v20 = (const void **)(a1 + 144);
  if (v19 >= 0)
    v21 = (unsigned __int8 *)(a2 + 144);
  else
    v21 = *(unsigned __int8 **)(a2 + 144);
  if ((v16 & 0x80) != 0)
  {
    if (memcmp(*v20, v21, *(_QWORD *)(a1 + 152)))
      return 0;
  }
  else if (*(_BYTE *)(a1 + 167))
  {
    while (*(unsigned __int8 *)v20 == *v21)
    {
      v20 = (const void **)((char *)v20 + 1);
      ++v21;
      if (!--v16)
        goto LABEL_46;
    }
    return 0;
  }
LABEL_46:
  v22 = *(unsigned __int8 *)(a1 + 191);
  if ((v22 & 0x80u) == 0)
    v23 = *(unsigned __int8 *)(a1 + 191);
  else
    v23 = *(_QWORD *)(a1 + 176);
  v24 = *(unsigned __int8 *)(a2 + 191);
  v25 = (char)v24;
  if ((v24 & 0x80u) != 0)
    v24 = *(_QWORD *)(a2 + 176);
  if (v23 != v24)
    return 0;
  v26 = (const void **)(a1 + 168);
  if (v25 >= 0)
    v27 = (unsigned __int8 *)(a2 + 168);
  else
    v27 = *(unsigned __int8 **)(a2 + 168);
  if ((v22 & 0x80) != 0)
  {
    if (!memcmp(*v26, v27, *(_QWORD *)(a1 + 176)))
      return *(float *)(a1 + 192) == *(float *)(a2 + 192);
    return 0;
  }
  if (*(_BYTE *)(a1 + 191))
  {
    while (*(unsigned __int8 *)v26 == *v27)
    {
      v26 = (const void **)((char *)v26 + 1);
      ++v27;
      if (!--v22)
        return *(float *)(a1 + 192) == *(float *)(a2 + 192);
    }
    return 0;
  }
  return *(float *)(a1 + 192) == *(float *)(a2 + 192);
}

uint64_t siri::dialogengine::Node::operator!=(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1) ^ 1;
}

void `non-virtual thunk to'siri::dialogengine::Node::~Node(siri::dialogengine::Node *this)
{
  void **v2;

  *((_QWORD *)this - 8) = off_1E793A6B0;
  v2 = (void **)((char *)this - 64);
  *(_QWORD *)this = &unk_1E793A708;
  if (*((char *)this + 127) < 0)
    operator delete(*((void **)this + 13));
  if (*((char *)this + 103) < 0)
    operator delete(*((void **)this + 10));
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  *(_QWORD *)this = off_1E793AED8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((_QWORD **)this + 2));
  siri::dialogengine::LineNumberBase::~LineNumberBase(v2);
}

{
  void **v2;

  *((_QWORD *)this - 8) = off_1E793A6B0;
  v2 = (void **)((char *)this - 64);
  *(_QWORD *)this = &unk_1E793A708;
  if (*((char *)this + 127) < 0)
    operator delete(*((void **)this + 13));
  if (*((char *)this + 103) < 0)
    operator delete(*((void **)this + 10));
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  *(_QWORD *)this = off_1E793AED8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((_QWORD **)this + 2));
  siri::dialogengine::LineNumberBase::~LineNumberBase(v2);
  JUMPOUT(0x1C3B8D890);
}

uint64_t `non-virtual thunk to'siri::dialogengine::Node::Validate(siri::dialogengine::Node *this, siri::dialogengine::Context *a2)
{
  return siri::dialogengine::Node::Validate((siri::dialogengine::Node *)((char *)this - 64), a2);
}

double siri::dialogengine::Node::GetCondition@<D0>(siri::dialogengine::Node *this@<X0>, siri::dialogengine::Context *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  double result;
  unint64_t *v16;
  unint64_t v17;
  std::string *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  int v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::string __p;
  __int128 v44;
  void *__s1[2];
  unsigned __int8 v46;
  __int128 v47;

  if (*((char *)this + 143) < 0)
  {
    v6 = *((_QWORD *)this + 16);
    if (!a2)
      goto LABEL_26;
  }
  else
  {
    v6 = *((unsigned __int8 *)this + 143);
    if (!a2)
      goto LABEL_26;
  }
  if (!v6)
    goto LABEL_26;
  v8 = *((_QWORD *)a2 + 63);
  v7 = (std::__shared_weak_count *)*((_QWORD *)a2 + 64);
  if (!v7)
  {
    if (v8)
    {
      v13 = *((_QWORD *)a2 + 63);
      v14 = 1;
      goto LABEL_20;
    }
    goto LABEL_26;
  }
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  v11 = (unint64_t *)&v7->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (v12)
  {
    if (!v8)
      goto LABEL_26;
    goto LABEL_17;
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  if (!v8)
  {
LABEL_26:
    *a3 = 0;
    a3[1] = 0;
    return result;
  }
LABEL_17:
  v13 = *((_QWORD *)a2 + 63);
  v7 = (std::__shared_weak_count *)*((_QWORD *)a2 + 64);
  v14 = v7 == 0;
  if (v7)
  {
    v16 = (unint64_t *)&v7->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
LABEL_20:
  v18 = (std::string *)((char *)this + 120);
  v19 = std::__tree<std::string>::find<std::string>(v13 + 272, (const void **)&v18->__r_.__value_.__l.__data_);
  if (v13 + 280 == v19)
  {
    v47 = 0uLL;
    if (v14)
      goto LABEL_32;
    goto LABEL_28;
  }
  v20 = *(_QWORD *)(v19 + 64);
  *(_QWORD *)&v47 = *(_QWORD *)(v19 + 56);
  *((_QWORD *)&v47 + 1) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  if (!v14)
  {
LABEL_28:
    v23 = (unint64_t *)&v7->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
LABEL_32:
  if ((_QWORD)v47)
  {
    v25 = *((_QWORD *)&v47 + 1);
    *a3 = v47;
    a3[1] = v25;
    return result;
  }
  siri::dialogengine::ResolveType(0, (uint64_t)a2, (uint64_t)v18, 1, (uint64_t)__s1);
  v26 = (void *)strlen(siri::dialogengine::TYPE_UNKNOWN);
  if ((char)v46 < 0)
  {
    if (v26 == __s1[1])
    {
      if (v26 == (void *)-1)
        std::string::__throw_out_of_range[abi:ne180100]();
      v27 = __s1[0];
      v28 = memcmp(__s1[0], siri::dialogengine::TYPE_UNKNOWN, (size_t)v26);
      operator delete(v27);
      if (!v28)
        goto LABEL_41;
    }
    else
    {
      operator delete(__s1[0]);
    }
  }
  else if (v26 == (void *)v46 && !memcmp(__s1, siri::dialogengine::TYPE_UNKNOWN, (size_t)v26))
  {
LABEL_41:
    *a3 = 0;
    a3[1] = 0;
    v29 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
    if (*((_QWORD *)&v47 + 1))
    {
      v30 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    return result;
  }
  v32 = operator new();
  *(_OWORD *)(v32 + 40) = 0u;
  *(_OWORD *)(v32 + 24) = 0u;
  *(_OWORD *)(v32 + 8) = 0u;
  *(_QWORD *)(v32 + 88) = 0;
  *(_QWORD *)(v32 + 80) = 0;
  *(_QWORD *)(v32 + 72) = v32 + 80;
  *(_QWORD *)v32 = off_1E7939B60;
  *(_QWORD *)(v32 + 56) = 0;
  *(_QWORD *)(v32 + 64) = &unk_1E7939B88;
  *(_OWORD *)(v32 + 96) = 0u;
  *(_OWORD *)(v32 + 112) = 0u;
  *(_OWORD *)(v32 + 128) = 0u;
  *(_OWORD *)(v32 + 144) = 0u;
  *(_QWORD *)(v32 + 160) = 0;
  v33 = (_QWORD *)operator new();
  *v33 = &off_1E792DB00;
  v33[1] = 0;
  v33[2] = 0;
  v33[3] = v32;
  *(_QWORD *)&v34 = v32;
  *((_QWORD *)&v34 + 1) = v33;
  v35 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
  v47 = v34;
  if (v35)
  {
    v36 = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  std::string::operator=((std::string *)(v47 + 96), v18);
  v38 = v47;
  v39 = operator new();
  std::string::basic_string[abi:ne180100]<0>(__s1, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::dialogengine::ConditionExpression::ConditionExpression(v39, v18, (uint64_t)__s1, &__p);
  *(_QWORD *)&v44 = v39;
  v40 = (std::__shared_weak_count *)operator new();
  v40->__shared_owners_ = 0;
  v41 = (unint64_t *)&v40->__shared_owners_;
  v40->__vftable = (std::__shared_weak_count_vtbl *)&off_1E792CF18;
  v40->__shared_weak_owners_ = 0;
  v40[1].__vftable = (std::__shared_weak_count_vtbl *)v39;
  *((_QWORD *)&v44 + 1) = v40;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::emplace_back<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry> const&>((char **)(v38 + 144), &v44);
  do
    v42 = __ldaxr(v41);
  while (__stlxr(v42 - 1, v41));
  if (!v42)
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((char)v46 < 0)
    operator delete(__s1[0]);
  result = *(double *)&v47;
  *(_OWORD *)a3 = v47;
  return result;
}

void sub_1BF88A7D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void siri::dialogengine::Node::GetIdForDebug(siri::dialogengine::Node *this@<X0>, siri::dialogengine::Context *a2@<X1>, int a3@<W2>, std::string *a4@<X8>)
{
  BOOL v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  std::string v13;
  std::string v14;

  siri::dialogengine::GetLogStateRef(this);
  if (HIBYTE(siri::dialogengine::GetLogStateRef(void)::logState))
    v8 = 0;
  else
    v8 = a3 == 0;
  if (v8)
  {
    if (*((char *)this + 119) < 0)
    {
      std::string::__init_copy_ctor_external(a4, *((const std::string::value_type **)this + 12), *((_QWORD *)this + 13));
    }
    else
    {
      *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *((_OWORD *)this + 6);
      a4->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 14);
    }
  }
  else
  {
    siri::dialogengine::Node::GetGlobalId(this, a2, &v13);
    v9 = std::string::insert(&v13, 0, ": '");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v14.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    v11 = std::string::append(&v14, "'");
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    a4->__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
  }
}

void sub_1BF88A9B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::Node::GetGlobalId(siri::dialogengine::Node *this@<X0>, siri::dialogengine::Context *a2@<X1>, std::string *a3@<X8>)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t *v14;
  unint64_t v15;
  __n128 v16;
  unint64_t *v17;
  unint64_t v18;

  if (!a2)
    goto LABEL_21;
  v7 = *((_QWORD *)a2 + 63);
  v6 = (std::__shared_weak_count *)*((_QWORD *)a2 + 64);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    v10 = (unint64_t *)&v6->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (v11)
    {
      if (!v7)
      {
LABEL_21:
        if (*((char *)this + 119) < 0)
        {
          std::string::__init_copy_ctor_external(a3, *((const std::string::value_type **)this + 12), *((_QWORD *)this + 13));
        }
        else
        {
          *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *((_OWORD *)this + 6);
          a3->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 14);
        }
        return;
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      if (!v7)
        goto LABEL_21;
    }
    v12 = *((_QWORD *)a2 + 63);
    v6 = (std::__shared_weak_count *)*((_QWORD *)a2 + 64);
    v13 = v6 == 0;
    if (v6)
    {
      v14 = (unint64_t *)&v6->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
  }
  else
  {
    if (!v7)
      goto LABEL_21;
    v12 = *((_QWORD *)a2 + 63);
    v13 = 1;
  }
  v16.n128_f64[0] = siri::dialogengine::File::GetOrCreateId(v12, (uint64_t)this, 1, 0, (uint64_t)a3);
  if (!v13)
  {
    v17 = (unint64_t *)&v6->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v6->__on_zero_shared)(v6, v16);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1BF88AB58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<siri::dialogengine::ConditionExpression *,std::shared_ptr<siri::dialogengine::ConditionEntry>::__shared_ptr_default_delete<siri::dialogengine::ConditionEntry,siri::dialogengine::ConditionExpression>,std::allocator<siri::dialogengine::ConditionExpression>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::ConditionExpression *,std::shared_ptr<siri::dialogengine::ConditionEntry>::__shared_ptr_default_delete<siri::dialogengine::ConditionEntry,siri::dialogengine::ConditionExpression>,std::allocator<siri::dialogengine::ConditionExpression>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::ConditionExpression *,std::shared_ptr<siri::dialogengine::ConditionEntry>::__shared_ptr_default_delete<siri::dialogengine::ConditionEntry,siri::dialogengine::ConditionExpression>,std::allocator<siri::dialogengine::ConditionExpression>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<siri::dialogengine::Condition *,std::shared_ptr<siri::dialogengine::Condition>::__shared_ptr_default_delete<siri::dialogengine::Condition,siri::dialogengine::Condition>,std::allocator<siri::dialogengine::Condition>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::Condition *,std::shared_ptr<siri::dialogengine::Condition>::__shared_ptr_default_delete<siri::dialogengine::Condition,siri::dialogengine::Condition>,std::allocator<siri::dialogengine::Condition>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::Condition *,std::shared_ptr<siri::dialogengine::Condition>::__shared_ptr_default_delete<siri::dialogengine::Condition,siri::dialogengine::Condition>,std::allocator<siri::dialogengine::Condition>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void siri::dialogengine::Node::GetId(siri::dialogengine::Node *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 119) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 12), *((_QWORD *)this + 13));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 6);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 14);
  }
}

std::string *siri::dialogengine::Node::SetId(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 4, a2);
}

uint64_t siri::dialogengine::Node::GetParent(siri::dialogengine::Node *this)
{
  return *((_QWORD *)this + 25);
}

uint64_t siri::dialogengine::Node::SetParent(uint64_t this, siri::dialogengine::Node *a2)
{
  *(_QWORD *)(this + 200) = a2;
  return this;
}

void siri::dialogengine::Node::GetConditionName(siri::dialogengine::Node *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 143) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 15), *((_QWORD *)this + 16));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 120);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 17);
  }
}

std::string *siri::dialogengine::Node::SetConditionName(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 5, a2);
}

std::string *siri::dialogengine::Node::SetCase(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 6, a2);
}

void siri::dialogengine::Node::GetCase(siri::dialogengine::Node *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 167) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 18), *((_QWORD *)this + 19));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 9);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 20);
  }
}

void siri::dialogengine::Node::GetNote(siri::dialogengine::Node *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 191) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 21), *((_QWORD *)this + 22));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 168);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 23);
  }
}

std::string *siri::dialogengine::Node::SetNote(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 7, a2);
}

double siri::dialogengine::Node::GetWeight(siri::dialogengine::Node *this)
{
  return *((float *)this + 48);
}

float siri::dialogengine::Node::SetWeight(siri::dialogengine::Node *this, float a2)
{
  float result;

  result = fmaxf(a2, 0.0);
  *((float *)this + 48) = result;
  return result;
}

BOOL siri::dialogengine::Node::HasWeight(siri::dialogengine::Node *this)
{
  return *((float *)this + 48) != 1.0;
}

void siri::dialogengine::FormatSpeakableEmail(siri::dialogengine::Context *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  std::string __p;
  void *v10;
  char v11;
  void *v12;
  char v13;
  void *v14;
  char v15;
  void *v16;
  char v17;
  void *v18;
  char v19;
  void *v20;
  char v21;
  std::string v22;
  __int128 v23;
  std::string::size_type v24;

  if (*(char *)(a2 + 23) < 0)
  {
    if (!*(_QWORD *)(a2 + 8))
    {
      std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a2, 0);
      return;
    }
  }
  else if (!*(_BYTE *)(a2 + 23))
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
    return;
  }
  siri::dialogengine::RemoveUnicodeControlChars(a2, &v22);
  v5 = std::string::insert(&v22, 0, "<say-as interpret-as=\"email\">");
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  v7 = std::string::append(&__p, "</say-as>");
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v24 = v7->__r_.__value_.__r.__words[2];
  v23 = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  siri::dialogengine::SpeakableString::SpeakableString((uint64_t)&__p, (uint64_t)&v23);
  siri::dialogengine::SpeakableString::GetExpandedSpeak(a3, (siri::dialogengine::SpeakableString *)&__p, a1);
  if (v21 < 0)
    operator delete(v20);
  if (v19 < 0)
    operator delete(v18);
  if (v17 < 0)
    operator delete(v16);
  if (v15 < 0)
    operator delete(v14);
  if (v13 < 0)
    operator delete(v12);
  if (v11 < 0)
    operator delete(v10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24) < 0)
    operator delete((void *)v23);
}

void sub_1BF88AF10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  siri::dialogengine::SpeakableString::~SpeakableString(&__p);
  if (*(char *)(v14 - 41) < 0)
    operator delete(*(void **)(v14 - 64));
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogPersonHandle::phoneNumber(siri::dialogengine::DialogPersonHandle *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  void *RequiredStringParameter;
  void *v6;
  void *OptionalStringParameter;
  _BOOL4 v9;
  uint64_t v11;
  __int128 v13;
  char v14;
  std::string v15;
  std::string v16;
  std::string __p;
  void *v18;
  char v19;
  void *v20;
  char v21;
  void *v22;
  char v23;
  void *v24;
  char v25;
  void *v26;
  char v27;
  void *v28;
  char v29;
  std::string __str;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&__p, "type");
  RequiredStringParameter = siri::dialogengine::GetRequiredStringParameter((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "value");
  v6 = siri::dialogengine::GetRequiredStringParameter((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "countryCode");
  OptionalStringParameter = siri::dialogengine::GetOptionalStringParameter((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "friendlyPhoneNumberName");
  siri::dialogengine::GetOptionalBooleanParameter((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "friendlyPhoneNumberNameShort");
  siri::dialogengine::GetOptionalBooleanParameter((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (RequiredStringParameter)
  {
    (*(void (**)(std::string *__return_ptr, void *))(*(_QWORD *)RequiredStringParameter + 48))(&__p, RequiredStringParameter);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__str, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      __str = __p;
    siri::dialogengine::StringToLower((uint64_t)&__str, (uint64_t)&v13);
    if (v14 < 0)
    {
      v9 = *((_QWORD *)&v13 + 1) == 11
        && *(_QWORD *)v13 == 0x6D756E656E6F6870
        && *(_QWORD *)(v13 + 3) == 0x7265626D756E656ELL;
      operator delete((void *)v13);
    }
    else
    {
      v9 = v14 == 11 && (_QWORD)v13 == 0x6D756E656E6F6870 && *(_QWORD *)((char *)&v13 + 3) == 0x7265626D756E656ELL;
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (v29 < 0)
      operator delete(v28);
    if (v27 < 0)
      operator delete(v26);
    if (v25 < 0)
      operator delete(v24);
    if (v23 < 0)
      operator delete(v22);
    if (v21 < 0)
      operator delete(v20);
    if (v19 < 0)
      operator delete(v18);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (v9)
      {
LABEL_49:
        if (v6)
        {
          (*(void (**)(std::string *__return_ptr, void *))(*(_QWORD *)v6 + 48))(&__p, v6);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v16, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          else
            v16 = __p;
          if (v29 < 0)
            operator delete(v28);
          if (v27 < 0)
            operator delete(v26);
          if (v25 < 0)
            operator delete(v24);
          if (v23 < 0)
            operator delete(v22);
          if (v21 < 0)
            operator delete(v20);
          if (v19 < 0)
            operator delete(v18);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
            if (OptionalStringParameter)
              goto LABEL_73;
            goto LABEL_76;
          }
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(&v16, "");
        }
        if (OptionalStringParameter)
        {
LABEL_73:
          (*(void (**)(std::string *__return_ptr, void *))(*(_QWORD *)OptionalStringParameter + 48))(&__p, OptionalStringParameter);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v15, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          else
            v15 = __p;
          if (v29 < 0)
            operator delete(v28);
          if (v27 < 0)
            operator delete(v26);
          if (v25 < 0)
            operator delete(v24);
          if (v23 < 0)
            operator delete(v22);
          if (v21 < 0)
            operator delete(v20);
          if (v19 < 0)
            operator delete(v18);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
LABEL_92:
          siri::dialogengine::PhoneNumber::FormatNumber(this, (uint64_t)&v16, (uint64_t)&v15, (uint64_t)&__p);
        }
LABEL_76:
        std::string::basic_string[abi:ne180100]<0>(&v15, "");
        goto LABEL_92;
      }
    }
    else if (v9)
    {
      goto LABEL_49;
    }
  }
  v11 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::basic_string[abi:ne180100]<0>(&v13, "");
  siri::dialogengine::VariableString::VariableString(v11, &__p, (uint64_t)&v13);
  if (v14 < 0)
    operator delete((void *)v13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v11;
}

void sub_1BF88B7F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  void *a65;

  siri::dialogengine::SpeakableString::~SpeakableString(&a12);
  if (a45 < 0)
    operator delete(__p);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)a50);
  siri::dialogengine::SpeakableString::~SpeakableString(&a65);
  if (a57 < 0)
    operator delete(a52);
  if (a64 < 0)
    operator delete(a59);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogPersonHandle::emailAddress(siri::dialogengine::DialogPersonHandle *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  void *RequiredStringParameter;
  void *v6;
  _BOOL4 v8;
  uint64_t v10;
  uint64_t v11;
  std::string __p;
  void *v14;
  char v15;
  void *v16;
  char v17;
  void *v18;
  char v19;
  void *v20;
  char v21;
  void *v22;
  char v23;
  void *v24;
  char v25;
  std::string v26;
  std::string v27;

  std::string::basic_string[abi:ne180100]<0>(&__p, "type");
  RequiredStringParameter = siri::dialogengine::GetRequiredStringParameter((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "value");
  v6 = siri::dialogengine::GetRequiredStringParameter((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!RequiredStringParameter)
      goto LABEL_48;
LABEL_7:
    (*(void (**)(std::string *__return_ptr, void *))(*(_QWORD *)RequiredStringParameter + 48))(&__p, RequiredStringParameter);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v26, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v26 = __p;
    siri::dialogengine::StringToLower((uint64_t)&v26, (uint64_t)&v27);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    {
      v8 = v27.__r_.__value_.__l.__size_ == 12
        && *(_QWORD *)v27.__r_.__value_.__l.__data_ == 0x6464616C69616D65
        && *(_DWORD *)(v27.__r_.__value_.__r.__words[0] + 8) == 1936942450;
      operator delete(v27.__r_.__value_.__l.__data_);
    }
    else
    {
      v8 = SHIBYTE(v27.__r_.__value_.__r.__words[2]) == 12
        && v27.__r_.__value_.__r.__words[0] == 0x6464616C69616D65
        && LODWORD(v27.__r_.__value_.__r.__words[1]) == 1936942450;
    }
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
    if (v25 < 0)
      operator delete(v24);
    if (v23 < 0)
      operator delete(v22);
    if (v21 < 0)
      operator delete(v20);
    if (v19 < 0)
      operator delete(v18);
    if (v17 < 0)
      operator delete(v16);
    if (v15 < 0)
      operator delete(v14);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (!v8)
        goto LABEL_48;
    }
    else if (!v8)
    {
      goto LABEL_48;
    }
    if (v6)
    {
      (*(void (**)(std::string *__return_ptr, void *))(*(_QWORD *)v6 + 48))(&__p, v6);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v27, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      else
        v27 = __p;
      if (v25 < 0)
        operator delete(v24);
      if (v23 < 0)
        operator delete(v22);
      if (v21 < 0)
        operator delete(v20);
      if (v19 < 0)
        operator delete(v18);
      if (v17 < 0)
        operator delete(v16);
      if (v15 < 0)
        operator delete(v14);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v27, "");
    }
    v11 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    siri::dialogengine::FormatSpeakableEmail(this, (uint64_t)&v27, &v26);
    siri::dialogengine::VariableString::VariableString(v11, &__p, &v27, &v26);
  }
  if (RequiredStringParameter)
    goto LABEL_7;
LABEL_48:
  v10 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::basic_string[abi:ne180100]<0>(&v27, "");
  siri::dialogengine::VariableString::VariableString(v10, &__p, (uint64_t)&v27);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v10;
}

void sub_1BF88BE28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  siri::dialogengine::SpeakableString::~SpeakableString(&__p);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogPersonHandle::formattedValue(siri::dialogengine::DialogPersonHandle *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v5;
  const siri::dialogengine::VariableObject *v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  unint64_t v10;
  void *v12[2];
  unsigned __int8 v13;
  void *v14;
  uint64_t v15;
  unsigned __int8 v16;
  void *v17;
  char v18;
  void *v19;
  char v20;
  void *v21;
  char v22;
  void *v23;
  char v24;
  void *__p;
  char v26;

  v5 = siri::dialogengine::DialogPersonHandle::phoneNumber(this, a2, a3);
  if (!v5)
    return siri::dialogengine::DialogPersonHandle::emailAddress(this, a2, v6);
  v7 = v5;
  (*(void (**)(void **__return_ptr))(*(_QWORD *)v5 + 48))(v12);
  v8 = v16;
  if ((v16 & 0x80u) != 0)
    v8 = v15;
  if (v8)
  {
    v9 = 0;
  }
  else
  {
    v10 = v13;
    if ((v13 & 0x80u) != 0)
      v10 = (unint64_t)v12[1];
    v9 = v10 == 0;
  }
  if (v26 < 0)
    operator delete(__p);
  if (v24 < 0)
    operator delete(v23);
  if (v22 < 0)
    operator delete(v21);
  if (v20 < 0)
    operator delete(v19);
  if (v18 < 0)
    operator delete(v17);
  if ((char)v16 < 0)
    operator delete(v14);
  if (((char)v13 & 0x80000000) == 0)
  {
    if (!v9)
      return v7;
    goto LABEL_25;
  }
  operator delete(v12[0]);
  if (v9)
  {
LABEL_25:
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    return siri::dialogengine::DialogPersonHandle::emailAddress(this, a2, v6);
  }
  return v7;
}

uint64_t siri::dialogengine::DialogPersonHandle::formattedLabel(siri::dialogengine::DialogPersonHandle *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  unsigned __int8 v4;
  unsigned __int8 v5;
  void *OptionalStringParameter;
  void *v7;
  void *RequiredStringParameter;
  void *v9;
  void **v10;
  void *v11;
  int v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  uint64_t j;
  std::string v19;
  void *v20[2];
  char v21;
  uint64_t v22;
  uint64_t v23;
  std::string v24;
  std::string __p;
  void *v26;
  char v27;
  void *v28[2];
  char v29;
  void *v30;
  char v31;
  void *v32[2];
  char v33;
  void *v34;
  char v35;
  void *v36[2];
  char v37;
  _QWORD v38[6];
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[6];
  _QWORD v43[6];
  _QWORD v44[6];
  _QWORD v45[6];
  _QWORD v46[7];

  v46[6] = *MEMORY[0x1E0C80C00];
  if ((v4 & 1) == 0
  {
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[11],0>(&__p, "home", "home phone");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[11],0>(v28, "work", "work phone");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(v32);
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[13],0>(v36, "mobile", "mobile phone");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[11],0>(v38, "main", "main phone");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v39, "homefax", "home fax");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v40, "home_fax", "home fax");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(v41, "workfax", "work fax");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(v42, "work_fax", "work fax");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v43, "pager", "pager");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[12],0>(v44, "other phone");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(v45, "phone", "phone");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[13],0>(v46, "school", "school phone");
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&siri::dialogengine::DialogPersonHandle::formattedLabel(siri::dialogengine::Context *,siri::dialogengine::VariableObject const*)::sPhoneLabelToConcept, (const void **)&__p.__r_.__value_.__l.__data_, 13);
    for (i = 576; i != -48; i -= 48)
      std::pair<std::string const,std::string>::~pair((uint64_t)&__p + i);
    __cxa_atexit((void (*)(void *))std::map<std::string,std::string>::~map[abi:ne180100], &siri::dialogengine::DialogPersonHandle::formattedLabel(siri::dialogengine::Context *,siri::dialogengine::VariableObject const*)::sPhoneLabelToConcept, &dword_1BF794000);
  }
  if ((v5 & 1) == 0
  {
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[15],0>(&__p);
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[11],0>(v28, "work", "work email");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[12],0>(v32, "other email");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[13],0>(v36, "school", "school email");
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&siri::dialogengine::DialogPersonHandle::formattedLabel(siri::dialogengine::Context *,siri::dialogengine::VariableObject const*)::sEmailLabelToConcept, (const void **)&__p.__r_.__value_.__l.__data_, 4);
    for (j = 144; j != -48; j -= 48)
      std::pair<std::string const,std::string>::~pair((uint64_t)&__p + j);
    __cxa_atexit((void (*)(void *))std::map<std::string,std::string>::~map[abi:ne180100], &siri::dialogengine::DialogPersonHandle::formattedLabel(siri::dialogengine::Context *,siri::dialogengine::VariableObject const*)::sEmailLabelToConcept, &dword_1BF794000);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "label");
  OptionalStringParameter = siri::dialogengine::GetOptionalStringParameter((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)a2);
  v7 = OptionalStringParameter;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v7)
      goto LABEL_5;
LABEL_8:
    std::string::basic_string[abi:ne180100]<0>(&v24, "");
    goto LABEL_24;
  }
  if (!OptionalStringParameter)
    goto LABEL_8;
LABEL_5:
  (*(void (**)(std::string *__return_ptr, void *))(*(_QWORD *)v7 + 48))(&__p, v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v24, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v24 = __p;
  if (v37 < 0)
    operator delete(v36[0]);
  if (v35 < 0)
    operator delete(v34);
  if (v33 < 0)
    operator delete(v32[0]);
  if (v31 < 0)
    operator delete(v30);
  if (v29 < 0)
    operator delete(v28[0]);
  if (v27 < 0)
    operator delete(v26);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_24:
  siri::dialogengine::StringTrim("_$!<>", &v24, &__p);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  v24 = __p;
  siri::dialogengine::StringSplit((unsigned __int8 *)&v24, ".", &v22);
  if (v22 != v23)
    std::string::operator=(&v24, (const std::string *)(v23 - 24));
  std::string::basic_string[abi:ne180100]<0>(&__p, "type");
  RequiredStringParameter = siri::dialogengine::GetRequiredStringParameter((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)a2);
  v9 = RequiredStringParameter;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v9)
      goto LABEL_30;
LABEL_33:
    std::string::basic_string[abi:ne180100]<0>(v20, "");
    goto LABEL_51;
  }
  if (!RequiredStringParameter)
    goto LABEL_33;
LABEL_30:
  (*(void (**)(std::string *__return_ptr, void *))(*(_QWORD *)v9 + 48))(&__p, v9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v19, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v19 = __p;
  siri::dialogengine::StringToLower((uint64_t)&v19, (uint64_t)v20);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (v37 < 0)
    operator delete(v36[0]);
  if (v35 < 0)
    operator delete(v34);
  if (v33 < 0)
    operator delete(v32[0]);
  if (v31 < 0)
    operator delete(v30);
  if (v29 < 0)
    operator delete(v28[0]);
  if (v27 < 0)
    operator delete(v26);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_51:
  if (v21 < 0)
  {
    if (v20[1] != (void *)12)
      goto LABEL_60;
    v10 = (void **)v20[0];
  }
  else
  {
    if (v21 != 12)
      goto LABEL_60;
    v10 = v20;
  }
  v11 = *v10;
  v12 = *((_DWORD *)v10 + 2);
  if (v11 == (void *)0x6464616C69616D65 && v12 == 1936942450)
  {
    siri::dialogengine::StringToLower((uint64_t)&v24, (uint64_t)&__p);
    v14 = std::__tree<std::string>::find<std::string>((uint64_t)&siri::dialogengine::DialogPersonHandle::formattedLabel(siri::dialogengine::Context *,siri::dialogengine::VariableObject const*)::sEmailLabelToConcept, (const void **)&__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((_UNKNOWN *)v14 != &unk_1EF581550)
      goto LABEL_63;
    goto LABEL_64;
  }
LABEL_60:
  siri::dialogengine::StringToLower((uint64_t)&v24, (uint64_t)&__p);
  v14 = std::__tree<std::string>::find<std::string>((uint64_t)&siri::dialogengine::DialogPersonHandle::formattedLabel(siri::dialogengine::Context *,siri::dialogengine::VariableObject const*)::sPhoneLabelToConcept, (const void **)&__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((_UNKNOWN *)v14 != &unk_1EF581530)
LABEL_63:
    std::string::operator=(&v24, (const std::string *)(v14 + 56));
LABEL_64:
  v15 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::dialogengine::VariableString::VariableString(v15, &__p, (uint64_t)&v24);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v21 < 0)
    operator delete(v20[0]);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  return v15;
}

void sub_1BF88C744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;
  uint64_t i;

  for (i = 144; i != -48; i -= 48)
    std::pair<std::string const,std::string>::~pair(v36 + i);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[11],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BF88C92C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(_QWORD *a1)
{
  _QWORD *v2;

  v2 = std::string::basic_string[abi:ne180100]<0>(a1, "iphone");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "iphone");
  return a1;
}

void sub_1BF88C984(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[13],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BF88C9D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[8],char const(&)[9],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BF88CA24(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[9],char const(&)[9],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BF88CA74(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BF88CAC4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[12],0>(_QWORD *a1, char *a2)
{
  _QWORD *v4;

  v4 = std::string::basic_string[abi:ne180100]<0>(a1, "other");
  std::string::basic_string[abi:ne180100]<0>(v4 + 3, a2);
  return a1;
}

void sub_1BF88CB1C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::map<std::string,std::string>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 48 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>((uint64_t **)a1, v4, a2, (__int128 *)a2);
      a2 += 6;
      v6 -= 48;
    }
    while (v6);
  }
  return a1;
}

void sub_1BF88CBA0(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string,std::string>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(_QWORD **)(a1 + 8));
  return a1;
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[5],char const(&)[15],0>(_QWORD *a1)
{
  _QWORD *v2;

  v2 = std::string::basic_string[abi:ne180100]<0>(a1, "home");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "personal email");
  return a1;
}

void sub_1BF88CC18(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::DialogPersonHandle::formattedType(siri::dialogengine::DialogPersonHandle *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  unsigned __int8 v4;
  void *RequiredStringParameter;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  std::string v11;
  std::string __p;
  void *v13;
  char v14;
  void *v15;
  char v16;
  void *v17;
  char v18;
  void *v19;
  char v20;
  void *v21;
  char v22;
  void *v23;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if ((v4 & 1) == 0
  {
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[14],0>(&__p);
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[13],0>(&v15);
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&siri::dialogengine::DialogPersonHandle::formattedType(siri::dialogengine::Context *,siri::dialogengine::VariableObject const*)::sTypeToConcept, (const void **)&__p.__r_.__value_.__l.__data_, 2);
    for (i = 48; i != -48; i -= 48)
      std::pair<std::string const,std::string>::~pair((uint64_t)&__p + i);
    __cxa_atexit((void (*)(void *))std::map<std::string,std::string>::~map[abi:ne180100], &siri::dialogengine::DialogPersonHandle::formattedType(siri::dialogengine::Context *,siri::dialogengine::VariableObject const*)::sTypeToConcept, &dword_1BF794000);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "type");
  RequiredStringParameter = siri::dialogengine::GetRequiredStringParameter((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)a2);
  v6 = RequiredStringParameter;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v6)
      goto LABEL_4;
LABEL_7:
    std::string::basic_string[abi:ne180100]<0>(&v11, "");
    goto LABEL_23;
  }
  if (!RequiredStringParameter)
    goto LABEL_7;
LABEL_4:
  (*(void (**)(std::string *__return_ptr, void *))(*(_QWORD *)v6 + 48))(&__p, v6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v11, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v11 = __p;
  if (v24 < 0)
    operator delete(v23);
  if (v22 < 0)
    operator delete(v21);
  if (v20 < 0)
    operator delete(v19);
  if (v18 < 0)
    operator delete(v17);
  if (v16 < 0)
    operator delete(v15);
  if (v14 < 0)
    operator delete(v13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_23:
  siri::dialogengine::StringToLower((uint64_t)&v11, (uint64_t)&__p);
  v7 = std::__tree<std::string>::find<std::string>((uint64_t)&siri::dialogengine::DialogPersonHandle::formattedType(siri::dialogengine::Context *,siri::dialogengine::VariableObject const*)::sTypeToConcept, (const void **)&__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((_UNKNOWN *)v7 != &unk_1EF581570)
    std::string::operator=(&v11, (const std::string *)(v7 + 56));
  v8 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::dialogengine::VariableString::VariableString(v8, &__p, (uint64_t)&v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return v8;
}

void sub_1BF88CEC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  uint64_t i;

  for (i = 48; i != -48; i -= 48)
    std::pair<std::string const,std::string>::~pair(v21 + i);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[14],0>(_QWORD *a1)
{
  _QWORD *v2;

  v2 = std::string::basic_string[abi:ne180100]<0>(a1, "emailaddress");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "email address");
  return a1;
}

void sub_1BF88CFC8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[12],char const(&)[13],0>(_QWORD *a1)
{
  _QWORD *v2;

  v2 = std::string::basic_string[abi:ne180100]<0>(a1, "phonenumber");
  std::string::basic_string[abi:ne180100]<0>(v2 + 3, "phone number");
  return a1;
}

void sub_1BF88D020(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *siri::dialogengine::DialogPersonHandle::formattedLabelAndType(siri::dialogengine::DialogPersonHandle *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  void *RequiredStringParameter;
  void *v6;
  void *OptionalStringParameter;
  uint64_t i;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *size;
  unint64_t *v16;
  unint64_t v17;
  std::string *v18;
  std::string v20;
  _OWORD v21[2];
  __int128 v22;
  const void **v23[3];
  std::string v24;
  std::string v25;
  std::string v26;
  void *__p[2];
  char v28;
  __int128 v29;
  uint64_t v30;
  void *v31;
  __int128 v32;
  uint64_t v33;
  char v34;
  void *v35;
  __int128 v36;
  void *v37;
  char v38;
  void *v39;
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(__p, "type");
  RequiredStringParameter = siri::dialogengine::GetRequiredStringParameter((const void **)__p, (uint64_t)a2);
  if (v28 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "value");
  v6 = siri::dialogengine::GetRequiredStringParameter((const void **)__p, (uint64_t)a2);
  if (v28 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "label");
  OptionalStringParameter = siri::dialogengine::GetOptionalStringParameter((const void **)__p, (uint64_t)a2);
  if (v28 < 0)
  {
    operator delete(__p[0]);
    if (RequiredStringParameter)
      goto LABEL_7;
LABEL_22:
    std::string::basic_string[abi:ne180100]<0>(&v26, "");
    goto LABEL_23;
  }
  if (!RequiredStringParameter)
    goto LABEL_22;
LABEL_7:
  (*(void (**)(void **__return_ptr, void *))(*(_QWORD *)RequiredStringParameter + 48))(__p, RequiredStringParameter);
  siri::dialogengine::SpeakableString::ToMultiplexedString((siri::dialogengine::SpeakableString *)__p, &v26);
  if (v40 < 0)
    operator delete(v39);
  if (v38 < 0)
    operator delete(v37);
  if (SHIBYTE(v36) < 0)
    operator delete(v35);
  if (v34 < 0)
    operator delete(*((void **)&v32 + 1));
  if (SBYTE7(v32) < 0)
    operator delete(v31);
  if (SHIBYTE(v30) < 0)
    operator delete((void *)v29);
  if (v28 < 0)
    operator delete(__p[0]);
LABEL_23:
  if (v6)
  {
    (*(void (**)(void **__return_ptr, void *))(*(_QWORD *)v6 + 48))(__p, v6);
    siri::dialogengine::SpeakableString::ToMultiplexedString((siri::dialogengine::SpeakableString *)__p, &v25);
    if (v40 < 0)
      operator delete(v39);
    if (v38 < 0)
      operator delete(v37);
    if (SHIBYTE(v36) < 0)
      operator delete(v35);
    if (v34 < 0)
      operator delete(*((void **)&v32 + 1));
    if (SBYTE7(v32) < 0)
      operator delete(v31);
    if (SHIBYTE(v30) < 0)
      operator delete((void *)v29);
    if (v28 < 0)
      operator delete(__p[0]);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v25, "");
  }
  if (OptionalStringParameter)
  {
    (*(void (**)(void **__return_ptr, void *))(*(_QWORD *)OptionalStringParameter + 48))(__p, OptionalStringParameter);
    siri::dialogengine::SpeakableString::ToMultiplexedString((siri::dialogengine::SpeakableString *)__p, &v24);
    if (v40 < 0)
      operator delete(v39);
    if (v38 < 0)
      operator delete(v37);
    if (SHIBYTE(v36) < 0)
      operator delete(v35);
    if (v34 < 0)
      operator delete(*((void **)&v32 + 1));
    if (SBYTE7(v32) < 0)
      operator delete(v31);
    if (SHIBYTE(v30) < 0)
      operator delete((void *)v29);
    if (v28 < 0)
      operator delete(__p[0]);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v24, "");
  }
  siri::dialogengine::CreateJSONStringVal((uint64_t)&v26, (uint64_t *)v21);
  std::string::basic_string[abi:ne180100]<0>(__p, "type");
  v29 = v21[0];
  v21[0] = 0uLL;
  siri::dialogengine::CreateJSONStringVal((uint64_t)&v25, (uint64_t *)&v20);
  std::string::basic_string[abi:ne180100]<0>(&v30, "value");
  v32 = *(_OWORD *)&v20.__r_.__value_.__l.__data_;
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = 0uLL;
  siri::dialogengine::CreateJSONStringVal((uint64_t)&v24, (uint64_t *)&v22);
  std::string::basic_string[abi:ne180100]<0>(&v33, "label");
  v36 = v22;
  v22 = 0uLL;
  std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100]((uint64_t)v23, (const void **)__p, 3);
  for (i = 0; i != -120; i -= 40)
  {
    std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v36 + i);
    if (*((char *)&v35 + i + 7) < 0)
      operator delete(*(void **)((char *)&v33 + i));
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v21[0] + 1);
  if (*((_QWORD *)&v21[0] + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v21[0] + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  siri::dialogengine::CreateJSONObjectVal(v23, (uint64_t *)&v20);
  std::string::basic_string[abi:ne180100]<0>(__p, "personHandle");
  v29 = *(_OWORD *)&v20.__r_.__value_.__l.__data_;
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = 0uLL;
  std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100]((uint64_t)v21, (const void **)__p, 1);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
  if (*((_QWORD *)&v29 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v28 < 0)
    operator delete(__p[0]);
  size = (std::__shared_weak_count *)v20.__r_.__value_.__l.__size_;
  if (v20.__r_.__value_.__l.__size_)
  {
    v16 = (unint64_t *)(v20.__r_.__value_.__l.__size_ + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v20, "person#formatWithLabelAndType");
  siri::dialogengine::ExecuteSharedCat(this, (uint64_t)&v20, (const void ***)v21, (uint64_t)__p);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  v18 = (std::string *)operator new();
  std::string::basic_string[abi:ne180100]<0>(&v20, "");
  siri::dialogengine::VariableString::VariableString(v18, &v20, (const siri::dialogengine::SpeakableString *)__p);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (v40 < 0)
    operator delete(v39);
  if (v38 < 0)
    operator delete(v37);
  if (SHIBYTE(v36) < 0)
    operator delete(v35);
  if (v34 < 0)
    operator delete(*((void **)&v32 + 1));
  if (SBYTE7(v32) < 0)
    operator delete(v31);
  if (SHIBYTE(v30) < 0)
    operator delete((void *)v29);
  if (v28 < 0)
    operator delete(__p[0]);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*((_QWORD **)&v21[0] + 1));
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(v23[1]);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  return v18;
}

void sub_1BF88D61C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a36 < 0)
    operator delete(__p);
  if (a42 < 0)
    operator delete(a37);
  _Unwind_Resume(exception_object);
}

void sub_1BF88D8F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1BF88DA00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1BF88DB4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_1BF88DC3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BF88DD34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BF88DE18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a16);

  _Unwind_Resume(a1);
}

void sub_1BF88DF1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BF88E000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a16);

  _Unwind_Resume(a1);
}

void sub_1BF88E104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1BF88E1E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a16);

  _Unwind_Resume(a1);
}

void sub_1BF88E3C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1BF88E5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  a12 = (void **)&a14;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_1BF88E780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&__p);

  _Unwind_Resume(a1);
}

void sub_1BF88E938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&__p);

  _Unwind_Resume(a1);
}

void sub_1BF88EB64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_QWORD *__assign_helper_atomic_property_(_QWORD *a1, uint64_t *a2)
{
  return std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100](a1, *a2, a2[1]);
}

_QWORD *__copy_helper_atomic_property_(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = a2[1];
  *result = *a2;
  result[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::vector<siri::dialogengine::ValidationEntry>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 88;
      v7 = v4 - 88;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 88;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

siri::dialogengine::File *siri::dialogengine::File::File(siri::dialogengine::File *this)
{
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_1E793A3A0;
  *((_QWORD *)this + 1) = (char *)this + 16;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_QWORD *)this + 18) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 19, "5.0");
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = (char *)this + 208;
  *(_OWORD *)((char *)this + 280) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_QWORD *)this + 34) = (char *)this + 280;
  *(_OWORD *)((char *)this + 296) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *((_QWORD *)this + 48) = (char *)this + 392;
  *((_DWORD *)this + 126) = 1065353216;
  *((_OWORD *)this + 32) = 0u;
  *((_OWORD *)this + 33) = 0u;
  *((_OWORD *)this + 34) = 0u;
  *((_QWORD *)this + 70) = 0;
  *((_QWORD *)this + 39) = &off_1E792BC50;
  *((_QWORD *)this + 46) = 0;
  *((_QWORD *)this + 47) = &unk_1E792BCA8;
  *((_OWORD *)this + 36) = 0u;
  *((_QWORD *)this + 71) = (char *)this + 576;
  *(_OWORD *)((char *)this + 600) = 0u;
  *((_QWORD *)this + 74) = (char *)this + 600;
  *((_QWORD *)this + 79) = 0;
  *(_OWORD *)((char *)this + 616) = 0u;
  *((_BYTE *)this + 648) = 1;
  *((_BYTE *)this + 656) = 0;
  *((_BYTE *)this + 680) = 0;
  *((_BYTE *)this + 688) = 0;
  *((_BYTE *)this + 712) = 0;
  *((_BYTE *)this + 720) = 0;
  *((_BYTE *)this + 744) = 0;
  return this;
}

void sub_1BF88EDEC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 151) < 0)
    operator delete(*(void **)(v1 + 128));
  if (*(char *)(v1 + 127) < 0)
    operator delete(*(void **)(v1 + 104));
  if (*(char *)(v1 + 103) < 0)
    operator delete(*(void **)(v1 + 80));
  if (*(char *)(v1 + 79) < 0)
    operator delete(*(void **)(v1 + 56));
  if (*(char *)(v1 + 55) < 0)
    operator delete(*v2);
  *(_QWORD *)v1 = off_1E793AED8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(_QWORD **)(v1 + 16));
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<siri::dialogengine::File>::shared_ptr[abi:ne180100]<siri::dialogengine::File,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E793A3D8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1BF88EEB0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<siri::dialogengine::File *,std::shared_ptr<siri::dialogengine::File>::__shared_ptr_default_delete<siri::dialogengine::File,siri::dialogengine::File>,std::allocator<siri::dialogengine::File>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::File *,std::shared_ptr<siri::dialogengine::File>::__shared_ptr_default_delete<siri::dialogengine::File,siri::dialogengine::File>,std::allocator<siri::dialogengine::File>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::File *,std::shared_ptr<siri::dialogengine::File>::__shared_ptr_default_delete<siri::dialogengine::File,siri::dialogengine::File>,std::allocator<siri::dialogengine::File>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<std::string>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::set<std::string>>,0>(uint64_t a1)
{
  std::__tree<std::string>::destroy(a1 + 24, *(char **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_1BF88F060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  siri::dialogengine::GrammarFeature::~GrammarFeature((siri::dialogengine::GrammarFeature *)&a9);

  _Unwind_Resume(a1);
}

void sub_1BF88F130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  siri::dialogengine::GrammarFeature::~GrammarFeature((siri::dialogengine::GrammarFeature *)&a9);
  _Unwind_Resume(a1);
}

void sub_1BF88F364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22)
{
  void *v22;

  siri::dialogengine::GrammarFeature::~GrammarFeature((siri::dialogengine::GrammarFeature *)&__p);

  _Unwind_Resume(a1);
}

std::string *__assign_helper_atomic_property__449(uint64_t a1, uint64_t a2)
{
  std::string *result;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  result = std::string::operator=((std::string *)(a1 + 8), (const std::string *)(a2 + 8));
  if (a1 != a2)
    result = (std::string *)std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>((uint64_t *)(a1 + 32), *(_QWORD **)(a2 + 32), (_QWORD *)(a2 + 40));
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return result;
}

uint64_t *std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t **leaf_high;
  _QWORD *v12;
  BOOL v13;
  uint64_t **v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  const void **v18;
  _QWORD *v19;
  _QWORD *v20;

  v5 = (uint64_t **)result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t)(result + 1);
    *(_QWORD *)(v7 + 16) = 0;
    result[1] = 0;
    result[2] = 0;
    if (*(_QWORD *)(v6 + 8))
      v8 = *(_QWORD **)(v6 + 8);
    else
      v8 = (_QWORD *)v6;
    v18 = (const void **)result;
    v19 = v8;
    v20 = v8;
    if (v8)
    {
      v19 = std::__tree<std::string>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 4));
          v10 = v20;
          leaf_high = (uint64_t **)std::__tree<std::string>::__find_leaf_high((uint64_t)v5, &v17, (const void **)v20 + 4);
          std::__tree<std::string>::__insert_node_at(v5, v17, leaf_high, v10);
          v8 = v19;
          v20 = v19;
          if (v19)
            v19 = std::__tree<std::string>::_DetachedTreeCache::__detach_next((uint64_t)v19);
          v12 = (_QWORD *)v9[1];
          if (v12)
          {
            do
            {
              a2 = v12;
              v12 = (_QWORD *)*v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v13 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v13);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t *)std::__tree<std::string>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v18);
  }
  if (a2 != a3)
  {
    do
    {
      std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)v5, (uint64_t)(a2 + 4), (uint64_t)&v18);
      v14 = (uint64_t **)std::__tree<std::string>::__find_leaf_high((uint64_t)v5, &v17, v18 + 4);
      result = std::__tree<std::string>::__insert_node_at(v5, v17, v14, (uint64_t *)v18);
      v15 = (_QWORD *)a2[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)a2[2];
          v13 = *v16 == (_QWORD)a2;
          a2 = v16;
        }
        while (!v13);
      }
      a2 = v16;
    }
    while (v16 != a3);
  }
  return result;
}

void sub_1BF88F62C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::string>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::string>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;

  result = *(_QWORD **)(a1 + 16);
  if (result)
  {
    v3 = (_QWORD *)*result;
    if (*result == a1)
    {
      *result = 0;
      while (1)
      {
        v4 = (_QWORD *)result[1];
        if (!v4)
          break;
        do
        {
          result = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; v3 = (_QWORD *)result[1])
      {
        do
        {
          result = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

_QWORD *std::__tree<std::string>::__find_leaf_high(uint64_t a1, _QWORD *a2, const void **a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *result;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v5 = (_QWORD *)v4;
        if (!std::less<std::string>::operator()[abi:ne180100](v7, a3, (const void **)(v4 + 32)))
          break;
        v4 = *v5;
        result = v5;
        if (!*v5)
          goto LABEL_9;
      }
      v4 = v5[1];
    }
    while (v4);
    result = v5 + 1;
  }
  else
  {
    result = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v5;
  return result;
}

uint64_t std::__tree<std::string>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  std::__tree<std::string>::destroy(*(_QWORD *)a1, *(char **)(a1 + 16));
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = *(_QWORD *)(v3 + 16);
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::string>::destroy(*(_QWORD *)a1, (char *)v2);
  }
  return a1;
}

uint64_t *__copy_helper_atomic_property__450(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t *result;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  result = std::set<std::string>::set[abi:ne180100]((uint64_t *)(a1 + 32), (const void ***)(a2 + 32));
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return result;
}

void sub_1BF88F7D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t *std::set<std::string>::set[abi:ne180100](uint64_t *a1, const void ***a2)
{
  uint64_t v3;
  const void ***v4;
  const void **v5;
  const void **v6;
  const void ***v7;
  BOOL v8;

  a1[1] = 0;
  v3 = (uint64_t)(a1 + 1);
  a1[2] = 0;
  *a1 = (uint64_t)(a1 + 1);
  v4 = a2 + 1;
  v5 = *a2;
  if (*a2 != (const void **)(a2 + 1))
  {
    do
    {
      std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(a1, v3, v5 + 4, (uint64_t)(v5 + 4));
      v6 = (const void **)v5[1];
      if (v6)
      {
        do
        {
          v7 = (const void ***)v6;
          v6 = (const void **)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (const void ***)v5[2];
          v8 = *v7 == v5;
          v5 = (const void **)v7;
        }
        while (!v8);
      }
      v5 = (const void **)v7;
    }
    while (v7 != v4);
  }
  return a1;
}

void sub_1BF88F884(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void siri::dialogengine::GrammarFeature::~GrammarFeature(siri::dialogengine::GrammarFeature *this)
{
  std::__tree<std::string>::destroy((uint64_t)this + 32, *((char **)this + 5));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

void sub_1BF88F9F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

uint64_t *siri::dialogengine::GetNamedEntityParametersForCatId@<X0>(const void **a1@<X0>, uint64_t *a2@<X8>)
{
  unsigned __int8 v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *result;
  _QWORD *v8;
  char v9;
  char **v10;
  char *v11;

  if ((v4 & 1) == 0
  {
    v8 = (_QWORD *)operator new();
    *v8 = 0;
    siri::dialogengine::GetNamedEntityParametersMap(void)::flag = (uint64_t)v8;
  }
  v5 = atomic_load((unint64_t *)siri::dialogengine::GetNamedEntityParametersMap(void)::flag);
  if (v5 != -1)
  {
    v11 = &v9;
    v10 = &v11;
    std::__call_once((std::once_flag::_State_type *)siri::dialogengine::GetNamedEntityParametersMap(void)::flag, &v10, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetNamedEntityParametersMap(void)::$_0 &&>>);
  }
  v6 = siri::dialogengine::GetNamedEntityParametersMap(void)::sMap;
  result = (uint64_t *)std::__tree<std::string>::find<std::string>(siri::dialogengine::GetNamedEntityParametersMap(void)::sMap, a1);
  if ((uint64_t *)(v6 + 8) != result)
    return std::set<std::string>::set[abi:ne180100](a2, (const void ***)result + 7);
  a2[2] = 0;
  a2[1] = 0;
  *a2 = (uint64_t)(a2 + 1);
  return result;
}

void sub_1BF88FB2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetNamedEntityParametersMap(void)::$_0 &&>>()
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  result[2] = 0;
  result[1] = 0;
  *result = result + 1;
  siri::dialogengine::GetNamedEntityParametersMap(void)::sMap = (uint64_t)result;
  return result;
}

void siri::dialogengine::TokenizeText(uint64_t *a1@<X0>, char **a2@<X8>)
{
  uint64_t Tokenizer;
  const char *v5;
  uint64_t v6;
  _QWORD *v7;
  morphun::Token *v8;
  uint64_t *v9;
  morphun::Token *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  std::allocator<char16_t> *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  std::allocator<char16_t> *v19;
  uint64_t v20;
  std::string::value_type *v21;
  std::string::size_type v22;
  int v23;
  unint64_t v24;
  std::string::value_type *v25;
  std::string::value_type *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  std::string::value_type *v31;
  char *v32;
  char *v33;
  std::string *v34;
  char *v35;
  __int128 v36;
  char *v37;
  _QWORD *v38;
  uint64_t v39;
  _BYTE v40[7];
  std::basic_string<char16_t> __str;
  char v42[128];
  std::string::value_type *v43;
  std::string::size_type v44;
  char *v45;
  char *v46;
  _QWORD *v47;

  v43 = 0;
  v44 = 0;
  v45 = 0;
  memset(&__str, 0, sizeof(__str));
  morphun::util::ULocale::ULocale();
  morphun::util::StringUtils::to_u16string();
  Tokenizer = morphun::TokenizerFactory::createTokenizer();
  v6 = Tokenizer;
  if (Tokenizer)
  {
    v7 = (_QWORD *)(*(uint64_t (**)(uint64_t, std::basic_string<char16_t> *))(*(_QWORD *)Tokenizer + 24))(Tokenizer, &__str);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    morphun::TokenIterator::TokenIterator();
    v8 = (morphun::Token *)v7[2];
    if (v8)
      morphun::Token::getNext(v8);
    morphun::TokenIterator::TokenIterator();
    v38 = v7;
    v39 = v6;
    while ((morphun::TokenIterator::operator!=() & 1) != 0)
    {
      v10 = (morphun::Token *)morphun::TokenIterator::operator*();
      if ((morphun::Token::isWhitespace(v10) & 1) == 0
        && ((morphun::Token::isSignificant(v10) & 1) != 0 || morphun::Token::getLength(v10)))
      {
        v11 = (*(uint64_t (**)(morphun::Token *))(*(_QWORD *)v10 + 24))(v10);
        v15 = siri::dialogengine::ConvertChar16OffsetToBytes(&__str, v11, v12, v13, v14);
        v16 = (*(uint64_t (**)(morphun::Token *))(*(_QWORD *)v10 + 32))(v10);
        v20 = siri::dialogengine::ConvertChar16OffsetToBytes(&__str, v16, v17, v18, v19);
        morphun::Token::getValue(v10);
        morphun::util::StringUtils::to_string();
        v21 = v43;
        v22 = v44;
        v23 = SHIBYTE(v45);
        v25 = a2[1];
        v24 = (unint64_t)a2[2];
        *(_DWORD *)v40 = (_DWORD)v45;
        *(_DWORD *)&v40[3] = *(_DWORD *)((char *)&v45 + 3);
        if ((unint64_t)v25 >= v24)
        {
          v26 = *a2;
          v27 = 0xCCCCCCCCCCCCCCCDLL * ((v25 - *a2) >> 3);
          v28 = v27 + 1;
          if (v27 + 1 > 0x666666666666666)
            std::vector<BOOL>::__throw_length_error[abi:ne180100]();
          v29 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v24 - (_QWORD)v26) >> 3);
          if (2 * v29 > v28)
            v28 = 2 * v29;
          if (v29 >= 0x333333333333333)
            v30 = 0x666666666666666;
          else
            v30 = v28;
          v47 = a2 + 2;
          if (v30)
          {
            if (v30 > 0x666666666666666)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v31 = (std::string::value_type *)operator new(40 * v30);
          }
          else
          {
            v31 = 0;
          }
          v33 = &v31[40 * v27];
          v43 = v31;
          v44 = (std::string::size_type)v33;
          v45 = v33;
          v46 = &v31[40 * v30];
          *(_QWORD *)v33 = v15;
          *((_QWORD *)v33 + 1) = v20;
          v34 = (std::string *)(v33 + 16);
          if (v23 < 0)
          {
            std::string::__init_copy_ctor_external(v34, v21, v22);
            v26 = *a2;
            v25 = a2[1];
            v33 = (char *)v44;
            v35 = v45;
          }
          else
          {
            v34->__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
            *((_QWORD *)v33 + 3) = v22;
            *((_DWORD *)v33 + 8) = *(_DWORD *)v40;
            *(_DWORD *)(v33 + 35) = *(_DWORD *)&v40[3];
            v33[39] = v23;
            v35 = v33;
          }
          v32 = v35 + 40;
          v45 = v35 + 40;
          if (v25 != v26)
          {
            do
            {
              *(_OWORD *)(v33 - 40) = *(_OWORD *)(v25 - 40);
              v36 = *(_OWORD *)(v25 - 24);
              *((_QWORD *)v33 - 1) = *((_QWORD *)v25 - 1);
              *(_OWORD *)(v33 - 24) = v36;
              v33 -= 40;
              *((_QWORD *)v25 - 2) = 0;
              *((_QWORD *)v25 - 1) = 0;
              *((_QWORD *)v25 - 3) = 0;
              v25 -= 40;
            }
            while (v25 != v26);
            v26 = *a2;
            v25 = a2[1];
            v32 = v45;
          }
          *a2 = v33;
          a2[1] = v32;
          v37 = a2[2];
          a2[2] = v46;
          v45 = v25;
          v46 = v37;
          v43 = v26;
          v44 = (std::string::size_type)v26;
          std::__split_buffer<siri::dialogengine::Token>::~__split_buffer((uint64_t)&v43);
          v7 = v38;
          v6 = v39;
        }
        else
        {
          *(_QWORD *)v25 = v15;
          *((_QWORD *)v25 + 1) = v20;
          if (v23 < 0)
          {
            v7 = v38;
            v6 = v39;
            std::string::__init_copy_ctor_external((std::string *)(v25 + 16), v21, v22);
          }
          else
          {
            *((_QWORD *)v25 + 2) = v21;
            *((_QWORD *)v25 + 3) = v22;
            *((_DWORD *)v25 + 8) = *(_DWORD *)v40;
            *(_DWORD *)(v25 + 35) = *(_DWORD *)&v40[3];
            v25[39] = v23;
            v7 = v38;
            v6 = v39;
          }
          v32 = v25 + 40;
          a2[1] = v25 + 40;
        }
        a2[1] = v32;
        if (v23 < 0)
          operator delete(v21);
      }
      morphun::TokenIterator::operator++();
    }
    if (v7)
      (*(void (**)(_QWORD *))(*v7 + 16))(v7);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  }
  else
  {
    if (*((char *)a1 + 23) >= 0)
      v9 = a1;
    else
      v9 = (uint64_t *)*a1;
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"morphun::TokenizerFactory::createTokenizer returned nullptr for locale '%s'", v5, v9);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  morphun::util::ULocale::~ULocale((morphun::util::ULocale *)v42);
}

void sub_1BF88FFC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  if (a30 < 0)
    operator delete(__p);
  morphun::util::ULocale::~ULocale((morphun::util::ULocale *)&a31);
  _Unwind_Resume(a1);
}

void std::vector<siri::dialogengine::Token>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 1) < 0)
          operator delete(*(v4 - 3));
        v4 -= 5;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t siri::dialogengine::ConvertChar16OffsetToBytes(std::basic_string<char16_t> *__str, int a2, uint64_t a3, uint64_t a4, std::allocator<char16_t> *a5)
{
  uint64_t v5;
  void *v7;
  uint64_t v8;
  unsigned __int8 v9;
  std::basic_string<char16_t> v10;

  std::basic_string<char16_t>::basic_string(&v10, __str, 0, a2, a5);
  morphun::util::StringUtils::to_string();
  if ((char)v9 < 0)
  {
    v5 = v8;
    operator delete(v7);
  }
  else
  {
    v5 = v9;
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  return v5;
}

void sub_1BF89020C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<siri::dialogengine::Token>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 40;
      *(_QWORD *)(a1 + 16) = v2 - 40;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        v4 = *(_QWORD *)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

std::basic_string<char16_t> *__cdecl std::basic_string<char16_t>::basic_string(std::basic_string<char16_t> *this, const std::basic_string<char16_t> *__str, std::basic_string<char16_t>::size_type __pos, std::basic_string<char16_t>::size_type __n, std::allocator<char16_t> *__a)
{
  const std::basic_string<char16_t> *v6;
  std::basic_string<char16_t>::size_type size;
  std::basic_string<char16_t>::size_type v9;
  std::basic_string<char16_t>::size_type v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;

  v6 = __str;
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    size = __str->__r_.__value_.__l.__size_;
    if (size < __pos)
      goto LABEL_18;
    v6 = (const std::basic_string<char16_t> *)__str->__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    if (size < __pos)
LABEL_18:
      std::string::__throw_out_of_range[abi:ne180100]();
  }
  v9 = size - __pos;
  if (v9 >= __n)
    v10 = __n;
  else
    v10 = v9;
  if (v10 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v10 >= 0xB)
  {
    v12 = (v10 & 0xFFFFFFFFFFFFFFFCLL) + 4;
    if ((v10 | 3) != 0xB)
      v12 = v10 | 3;
    v11 = std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>(v12 + 1);
    this->__r_.__value_.__l.__size_ = v10;
    this->__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
    this->__r_.__value_.__r.__words[0] = (std::basic_string<char16_t>::size_type)v11;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = v10;
    v11 = this;
    if (!v10)
      goto LABEL_17;
  }
  memmove(v11, (char *)v6 + 2 * __pos, 2 * v10);
LABEL_17:
  *((_WORD *)v11 + v10) = 0;
  return this;
}

double siri::dialogengine::PatternSchema::PatternSchema(siri::dialogengine::PatternSchema *this)
{
  double result;

  *((_QWORD *)this + 16) = 0;
  result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = (char *)this + 128;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = (char *)this + 152;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = (char *)this + 176;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  return result;
}

{
  double result;

  *((_QWORD *)this + 16) = 0;
  result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = (char *)this + 128;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = (char *)this + 152;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = (char *)this + 176;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  return result;
}

void siri::dialogengine::PatternSchema::GetName(siri::dialogengine::PatternSchema *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((_QWORD *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 2);
  }
}

void siri::dialogengine::PatternSchema::GetFilename(siri::dialogengine::PatternSchema *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 47) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 3), *((_QWORD *)this + 4));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 24);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 5);
  }
}

std::string *siri::dialogengine::PatternSchema::SetFilename(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 1, a2);
}

void siri::dialogengine::PatternSchema::GetDescription(siri::dialogengine::PatternSchema *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 71) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 6), *((_QWORD *)this + 7));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 3);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 8);
  }
}

std::string *siri::dialogengine::PatternSchema::SetDescription(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 2, a2);
}

void siri::dialogengine::PatternSchema::GetDeprecated(siri::dialogengine::PatternSchema *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 95) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 9), *((_QWORD *)this + 10));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 72);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 11);
  }
}

std::string *siri::dialogengine::PatternSchema::SetDeprecated(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 3, a2);
}

void siri::dialogengine::PatternSchema::GetVersionAdded(siri::dialogengine::PatternSchema *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 119) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 12), *((_QWORD *)this + 13));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 6);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 14);
  }
}

std::string *siri::dialogengine::PatternSchema::SetVersionAdded(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 4, a2);
}

uint64_t siri::dialogengine::PatternSchema::GetSetting@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = std::__tree<std::string>::find<std::string>(a1 + 120, a2);
  if (a1 + 128 == result)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    v6 = *(_QWORD *)(result + 64);
    *a3 = *(_QWORD *)(result + 56);
    a3[1] = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
  }
  return result;
}

void siri::dialogengine::PatternSchema::GetSettings(siri::dialogengine::PatternSchema *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t **v2;
  const void **v3;
  const void ***v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t v9;
  BOOL v10;
  uint64_t **v11;
  const void **v12;
  const void ***v13;
  uint64_t *v14[3];
  _QWORD *v15;

  *(_QWORD *)(a2 + 8) = 0;
  v2 = (uint64_t **)(a2 + 8);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = a2 + 8;
  v3 = (const void **)*((_QWORD *)this + 15);
  v4 = (const void ***)((char *)this + 128);
  if (v3 != (const void **)((char *)this + 128))
  {
    v6 = a2 + 16;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + 8);
      if (*(uint64_t ***)a2 == v2)
        break;
      v8 = v2;
      if (v7)
      {
        do
        {
          v9 = v7;
          v7 = *(_QWORD *)(v7 + 8);
        }
        while (v7);
      }
      else
      {
        do
        {
          v9 = (uint64_t)v8[2];
          v10 = *(_QWORD *)v9 == (_QWORD)v8;
          v8 = (uint64_t **)v9;
        }
        while (v10);
      }
      if (std::less<std::string>::operator()[abi:ne180100](v6, (const void **)(v9 + 32), v3 + 4))
      {
        if (!*v2)
          goto LABEL_10;
LABEL_12:
        v15 = (_QWORD *)v9;
        v11 = (uint64_t **)(v9 + 8);
        goto LABEL_14;
      }
      v11 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>(a2, &v15, v3 + 4);
LABEL_14:
      if (!*v11)
        goto LABEL_15;
LABEL_16:
      v12 = (const void **)v3[1];
      if (v12)
      {
        do
        {
          v13 = (const void ***)v12;
          v12 = (const void **)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (const void ***)v3[2];
          v10 = *v13 == v3;
          v3 = (const void **)v13;
        }
        while (!v10);
      }
      v3 = (const void **)v13;
      if (v13 == v4)
        return;
    }
    v9 = (uint64_t)v2;
    if (!v7)
    {
LABEL_10:
      v15 = v2;
      v11 = v2;
LABEL_15:
      std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>>>::__construct_node<std::pair<std::string const,std::shared_ptr<siri::dialogengine::PatternSetting>> const&>((uint64_t)v14, a2, (__int128 *)v3 + 2);
      std::__tree<std::string>::__insert_node_at((uint64_t **)a2, (uint64_t)v15, v11, v14[0]);
      v14[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>>>>::reset[abi:ne180100]((uint64_t)v14);
      goto LABEL_16;
    }
    goto LABEL_12;
  }
}

void sub_1BF89069C(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

std::string *std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>>>::__construct_node<std::pair<std::string const,std::shared_ptr<siri::dialogengine::PatternSetting>> const&>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a2 + 8;
  v6 = (char *)operator new(0x48uLL);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = 0;
  result = std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>::pair[abi:ne180100]((std::string *)(v6 + 32), a3);
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

void sub_1BF890700(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>>>>::reset[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void siri::dialogengine::PatternSchema::SetSettings(uint64_t a1, _QWORD *a2)
{
  uint64_t **v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t **leaf_high;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t **v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t **v19;
  _QWORD *v20;
  _QWORD *v21;

  v2 = (uint64_t **)(a1 + 120);
  if ((_QWORD *)(a1 + 120) != a2)
  {
    v3 = a2 + 1;
    v4 = (_QWORD *)*a2;
    if (*(_QWORD *)(a1 + 136))
    {
      v6 = *(_QWORD *)(a1 + 128);
      v5 = (_QWORD *)(a1 + 128);
      v7 = (_QWORD *)*(v5 - 1);
      *(v5 - 1) = v5;
      *(_QWORD *)(v6 + 16) = 0;
      *v5 = 0;
      v5[1] = 0;
      if (v7[1])
        v8 = (_QWORD *)v7[1];
      else
        v8 = v7;
      v19 = v2;
      v20 = v8;
      v21 = v8;
      if (!v8 || (v20 = std::__tree<std::string>::_DetachedTreeCache::__detach_next((uint64_t)v8), v4 == v3))
      {
        v12 = v4;
      }
      else
      {
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v4 + 4));
          std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100](v8 + 7, v4[7], v4[8]);
          v9 = v21;
          leaf_high = (uint64_t **)std::__tree<std::string>::__find_leaf_high((uint64_t)v2, &v18, (const void **)v21 + 4);
          std::__tree<std::string>::__insert_node_at(v2, v18, leaf_high, v9);
          v8 = v20;
          v21 = v20;
          if (v20)
            v20 = std::__tree<std::string>::_DetachedTreeCache::__detach_next((uint64_t)v20);
          v11 = (_QWORD *)v4[1];
          if (v11)
          {
            do
            {
              v12 = v11;
              v11 = (_QWORD *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              v12 = (_QWORD *)v4[2];
              v13 = *v12 == (_QWORD)v4;
              v4 = v12;
            }
            while (!v13);
          }
          if (!v8)
            break;
          v4 = v12;
        }
        while (v12 != v3);
      }
      std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v19);
      v4 = v12;
    }
    if (v4 != v3)
    {
      do
      {
        std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>>>::__construct_node<std::pair<std::string const,std::shared_ptr<siri::dialogengine::PatternSetting>> const&>((uint64_t)&v19, (uint64_t)v2, (__int128 *)v4 + 2);
        v14 = (uint64_t *)v19;
        v15 = (uint64_t **)std::__tree<std::string>::__find_leaf_high((uint64_t)v2, &v18, (const void **)v19 + 4);
        std::__tree<std::string>::__insert_node_at(v2, v18, v15, v14);
        v19 = 0;
        std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v19);
        v16 = (_QWORD *)v4[1];
        if (v16)
        {
          do
          {
            v17 = v16;
            v16 = (_QWORD *)*v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            v17 = (_QWORD *)v4[2];
            v13 = *v17 == (_QWORD)v4;
            v4 = v17;
          }
          while (!v13);
        }
        v4 = v17;
      }
      while (v17 != v3);
    }
  }
}

void sub_1BF8908CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(v2);
  }
  return a1;
}

void siri::dialogengine::PatternSchema::AddSetting(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t **v5;
  __int128 v6;
  void **v7;
  _OWORD *v8;
  uint64_t **v9;
  std::string::size_type v10;
  std::string __p;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v2 = *a2;
  if (*a2)
  {
    v5 = (uint64_t **)(a1 + 120);
    if (*(char *)(v2 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v2 + 8), *(_QWORD *)(v2 + 16));
    }
    else
    {
      v6 = *(_OWORD *)(v2 + 8);
      __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v2 + 24);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v6;
    }
    v7 = (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)v5, &v14, (const void **)&__p.__r_.__value_.__l.__data_);
    v8 = *v7;
    if (!*v7)
    {
      v9 = (uint64_t **)v7;
      v8 = operator new(0x48uLL);
      v12[1] = a1 + 128;
      v8[2] = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      v10 = __p.__r_.__value_.__r.__words[2];
      memset(&__p, 0, sizeof(__p));
      *((_QWORD *)v8 + 7) = 0;
      *((_QWORD *)v8 + 8) = 0;
      *((_QWORD *)v8 + 6) = v10;
      v13 = 1;
      std::__tree<std::string>::__insert_node_at(v5, v14, v9, (uint64_t *)v8);
      v12[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12);
    }
    std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100]((_QWORD *)v8 + 7, *a2, a2[1]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1BF890A28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::PatternSchema::GetRequiredParameter@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = std::__tree<std::string>::find<std::string>(a1 + 144, a2);
  if (a1 + 152 == result)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    v6 = *(_QWORD *)(result + 64);
    *a3 = *(_QWORD *)(result + 56);
    a3[1] = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
  }
  return result;
}

uint64_t siri::dialogengine::PatternSchema::GetRequiredParameters@<X0>(const void ***this@<X0>, uint64_t a2@<X8>)
{
  return std::map<std::string,std::shared_ptr<siri::dialogengine::Parameter>>::map[abi:ne180100](a2, this + 18);
}

uint64_t std::map<std::string,std::shared_ptr<siri::dialogengine::Parameter>>::map[abi:ne180100](uint64_t a1, const void ***a2)
{
  uint64_t **v3;
  const void ***v4;
  const void **v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t v8;
  BOOL v9;
  uint64_t **v10;
  const void **v11;
  const void ***v12;
  uint64_t *v14[3];
  _QWORD *v15;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = (uint64_t **)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v4 = a2 + 1;
  v5 = *a2;
  if (*a2 != (const void **)(a2 + 1))
  {
    while (1)
    {
      v6 = *(_QWORD *)(a1 + 8);
      if (*(uint64_t ***)a1 == v3)
        break;
      v7 = v3;
      if (v6)
      {
        do
        {
          v8 = v6;
          v6 = *(_QWORD *)(v6 + 8);
        }
        while (v6);
      }
      else
      {
        do
        {
          v8 = (uint64_t)v7[2];
          v9 = *(_QWORD *)v8 == (_QWORD)v7;
          v7 = (uint64_t **)v8;
        }
        while (v9);
      }
      if (std::less<std::string>::operator()[abi:ne180100](a1 + 16, (const void **)(v8 + 32), v5 + 4))
      {
        if (!*v3)
          goto LABEL_9;
LABEL_11:
        v15 = (_QWORD *)v8;
        v10 = (uint64_t **)(v8 + 8);
        goto LABEL_13;
      }
      v10 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>(a1, &v15, v5 + 4);
LABEL_13:
      if (!*v10)
        goto LABEL_14;
LABEL_15:
      v11 = (const void **)v5[1];
      if (v11)
      {
        do
        {
          v12 = (const void ***)v11;
          v11 = (const void **)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (const void ***)v5[2];
          v9 = *v12 == v5;
          v5 = (const void **)v12;
        }
        while (!v9);
      }
      v5 = (const void **)v12;
      if (v12 == v4)
        return a1;
    }
    v8 = (uint64_t)v3;
    if (!v6)
    {
LABEL_9:
      v15 = v3;
      v10 = v3;
LABEL_14:
      std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Parameter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Parameter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Parameter>>>>::__construct_node<std::pair<std::string const,std::shared_ptr<siri::dialogengine::Parameter>> const&>((uint64_t)v14, a1, (__int128 *)v5 + 2);
      std::__tree<std::string>::__insert_node_at((uint64_t **)a1, (uint64_t)v15, v10, v14[0]);
      v14[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>>>>::reset[abi:ne180100]((uint64_t)v14);
      goto LABEL_15;
    }
    goto LABEL_11;
  }
  return a1;
}

void sub_1BF890C0C(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

std::string *std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Parameter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Parameter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Parameter>>>>::__construct_node<std::pair<std::string const,std::shared_ptr<siri::dialogengine::Parameter>> const&>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a2 + 8;
  v6 = (char *)operator new(0x48uLL);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = 0;
  result = std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>::pair[abi:ne180100]((std::string *)(v6 + 32), a3);
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

void sub_1BF890C70(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>>>>::reset[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void siri::dialogengine::PatternSchema::SetRequiredParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a1 + 144;
  if (v2 != a2)
    std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Parameter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Parameter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Parameter>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Parameter>>,std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Parameter>>,void *> *,long>>(v2, *(__int128 **)a2, (__int128 *)(a2 + 8));
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Parameter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Parameter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Parameter>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Parameter>>,std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Parameter>>,void *> *,long>>(uint64_t a1, __int128 *a2, __int128 *a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  __int128 *v9;
  uint64_t *v10;
  uint64_t **leaf_high;
  __int128 *v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t **v15;
  __int128 *v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;

  if (*(_QWORD *)(a1 + 16))
  {
    v6 = *(uint64_t **)a1;
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)a1 = a1 + 8;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v19 = a1;
    v20 = v8;
    v21 = v8;
    if (v8)
    {
      v20 = std::__tree<std::string>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 2));
          std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100](v8 + 7, *((_QWORD *)v9 + 7), *((_QWORD *)v9 + 8));
          v10 = v21;
          leaf_high = (uint64_t **)std::__tree<std::string>::__find_leaf_high(a1, &v18, (const void **)v21 + 4);
          std::__tree<std::string>::__insert_node_at((uint64_t **)a1, v18, leaf_high, v10);
          v8 = v20;
          v21 = v20;
          if (v20)
            v20 = std::__tree<std::string>::_DetachedTreeCache::__detach_next((uint64_t)v20);
          v12 = (__int128 *)*((_QWORD *)v9 + 1);
          if (v12)
          {
            do
            {
              a2 = v12;
              v12 = *(__int128 **)v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              a2 = (__int128 *)*((_QWORD *)v9 + 2);
              v13 = *(_QWORD *)a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v13);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v19);
  }
  if (a2 != a3)
  {
    do
    {
      std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Parameter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Parameter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Parameter>>>>::__construct_node<std::pair<std::string const,std::shared_ptr<siri::dialogengine::Parameter>> const&>((uint64_t)&v19, a1, a2 + 2);
      v14 = (uint64_t *)v19;
      v15 = (uint64_t **)std::__tree<std::string>::__find_leaf_high(a1, &v18, (const void **)(v19 + 32));
      std::__tree<std::string>::__insert_node_at((uint64_t **)a1, v18, v15, v14);
      v19 = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v19);
      v16 = (__int128 *)*((_QWORD *)a2 + 1);
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = *(__int128 **)v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (__int128 *)*((_QWORD *)a2 + 2);
          v13 = *(_QWORD *)v17 == (_QWORD)a2;
          a2 = v17;
        }
        while (!v13);
      }
      a2 = v17;
    }
    while (v17 != a3);
  }
}

void sub_1BF890E50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::PatternSetting>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void siri::dialogengine::PatternSchema::AddRequiredParameter(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t **v4;
  __int128 v5;
  _OWORD *v6;
  std::string __p;
  std::string *p_p;

  v2 = *a2;
  if (*a2)
  {
    v4 = (uint64_t **)(a1 + 144);
    if (*(char *)(v2 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v2 + 8), *(_QWORD *)(v2 + 16));
    }
    else
    {
      v5 = *(_OWORD *)(v2 + 8);
      __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v2 + 24);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v5;
    }
    p_p = &__p;
    v6 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&__p.__r_.__value_.__l.__data_, (_OWORD **)&p_p);
    std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100]((_QWORD *)v6 + 7, *a2, a2[1]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1BF890EF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::PatternSchema::GetComputedParameter@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = std::__tree<std::string>::find<std::string>(a1 + 168, a2);
  if (a1 + 176 == result)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    v6 = *(_QWORD *)(result + 64);
    *a3 = *(_QWORD *)(result + 56);
    a3[1] = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
  }
  return result;
}

uint64_t siri::dialogengine::PatternSchema::GetComputedParameters@<X0>(const void ***this@<X0>, uint64_t a2@<X8>)
{
  return std::map<std::string,std::shared_ptr<siri::dialogengine::Parameter>>::map[abi:ne180100](a2, this + 21);
}

void siri::dialogengine::PatternSchema::SetComputedParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a1 + 168;
  if (v2 != a2)
    std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Parameter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Parameter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Parameter>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Parameter>>,std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Parameter>>,void *> *,long>>(v2, *(__int128 **)a2, (__int128 *)(a2 + 8));
}

void siri::dialogengine::PatternSchema::AddComputedParameter(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t **v4;
  __int128 v5;
  _OWORD *v6;
  std::string __p;
  std::string *p_p;

  v2 = *a2;
  if (*a2)
  {
    v4 = (uint64_t **)(a1 + 168);
    if (*(char *)(v2 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v2 + 8), *(_QWORD *)(v2 + 16));
    }
    else
    {
      v5 = *(_OWORD *)(v2 + 8);
      __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v2 + 24);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v5;
    }
    p_p = &__p;
    v6 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (const void **)&__p.__r_.__value_.__l.__data_, (_OWORD **)&p_p);
    std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100]((_QWORD *)v6 + 7, *a2, a2[1]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1BF89101C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *siri::dialogengine::PatternSchema::GetGroups@<X0>(char *this@<X0>, _QWORD *a2@<X8>)
{
  char *v3;
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = (char *)*((_QWORD *)this + 24);
  v4 = (char *)*((_QWORD *)this + 25);
  if (v4 != v3)
  {
    this = std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__vallocate[abi:ne180100](a2, (v4 - v3) >> 4);
    v5 = (_QWORD *)a2[1];
    do
    {
      *v5 = *(_QWORD *)v3;
      v6 = *((_QWORD *)v3 + 1);
      v5[1] = v6;
      if (v6)
      {
        v7 = (unint64_t *)(v6 + 8);
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
      }
      v3 += 16;
      v5 += 2;
    }
    while (v3 != v4);
    a2[1] = v5;
  }
  return this;
}

void sub_1BF8910CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void siri::dialogengine::PatternSchema::GetGroup(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  __int128 v8;
  std::string::size_type size;
  uint64_t v10;
  int v11;
  unsigned __int8 *v12;
  uint64_t v13;
  int v14;
  int v15;
  void *v17;
  int v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::string __p;

  v4 = *(_QWORD **)(a1 + 192);
  v5 = *(_QWORD **)(a1 + 200);
  if (v4 == v5)
  {
LABEL_28:
    *a3 = 0;
    a3[1] = 0;
    return;
  }
  while (1)
  {
    v7 = *v4;
    if (*(char *)(*v4 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v7 + 8), *(_QWORD *)(v7 + 16));
    }
    else
    {
      v8 = *(_OWORD *)(v7 + 8);
      __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 24);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v10 = *(unsigned __int8 *)(a2 + 23);
    v11 = (char)v10;
    if ((v10 & 0x80u) != 0)
      v10 = *(_QWORD *)(a2 + 8);
    if (size != v10)
    {
      if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_27;
    }
    v12 = v11 >= 0 ? (unsigned __int8 *)a2 : *(unsigned __int8 **)a2;
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
      break;
    v17 = (void *)__p.__r_.__value_.__r.__words[0];
    v18 = memcmp(__p.__r_.__value_.__l.__data_, v12, __p.__r_.__value_.__l.__size_);
    operator delete(v17);
    if (!v18)
      goto LABEL_30;
LABEL_27:
    v4 += 2;
    if (v4 == v5)
      goto LABEL_28;
  }
  if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
  {
    v13 = 0;
    do
    {
      v14 = __p.__r_.__value_.__s.__data_[v13];
      v15 = v12[v13];
    }
    while (v14 == v15 && HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1 != v13++);
    if (v14 != v15)
      goto LABEL_27;
  }
LABEL_30:
  v19 = v4[1];
  *a3 = *v4;
  a3[1] = v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
}

_QWORD *siri::dialogengine::PatternSchema::SetGroups(_QWORD *result, uint64_t **a2)
{
  void **v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = (void **)(result + 24);
  if (result + 24 != a2)
  {
    v3 = result;
    v5 = *a2;
    v4 = a2[1];
    v6 = (char *)v4 - (char *)*a2;
    v7 = v6 >> 4;
    v8 = result[26];
    v9 = (_QWORD *)result[24];
    if (v6 >> 4 > (unint64_t)((v8 - (uint64_t)v9) >> 4))
    {
      if (v9)
      {
        v10 = result[25];
        v11 = v9;
        if ((_QWORD *)v10 != v9)
        {
          do
            v10 = std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v10 - 16);
          while ((_QWORD *)v10 != v9);
          v11 = *v2;
        }
        v3[25] = v9;
        operator delete(v11);
        v8 = 0;
        *v2 = 0;
        v2[1] = 0;
        v2[2] = 0;
      }
      if (v6 < 0)
        std::vector<BOOL>::__throw_length_error[abi:ne180100]();
      v12 = v8 >> 3;
      if (v8 >> 3 <= v7)
        v12 = v6 >> 4;
      if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
        v13 = 0xFFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      result = std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__vallocate[abi:ne180100](v2, v13);
      v14 = (uint64_t *)v3[25];
      while (v5 != v4)
      {
        v15 = v5[1];
        *v14 = *v5;
        v14[1] = v15;
        if (v15)
        {
          v16 = (unint64_t *)(v15 + 8);
          do
            v17 = __ldxr(v16);
          while (__stxr(v17 + 1, v16));
        }
        v5 += 2;
        v14 += 2;
      }
LABEL_30:
      v3[25] = v14;
      return result;
    }
    result = (_QWORD *)result[25];
    v18 = ((char *)result - (char *)v9) >> 4;
    if (v18 < v7)
    {
      v19 = &v5[2 * v18];
      if (result != v9)
      {
        do
        {
          v20 = *v5;
          v21 = v5[1];
          v5 += 2;
          result = std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100](v9, v20, v21);
          v9 += 2;
        }
        while (v5 != v19);
        v9 = (_QWORD *)v3[25];
      }
      v14 = v9;
      if (v19 != v4)
      {
        v14 = v9;
        do
        {
          v22 = v19[1];
          *v14 = *v19;
          v14[1] = v22;
          if (v22)
          {
            v23 = (unint64_t *)(v22 + 8);
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
          }
          v19 += 2;
          v14 += 2;
        }
        while (v19 != v4);
      }
      goto LABEL_30;
    }
    if (v5 != v4)
    {
      do
      {
        v25 = *v5;
        v26 = v5[1];
        v5 += 2;
        std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100](v9, v25, v26);
        v9 += 2;
      }
      while (v5 != v4);
      result = (_QWORD *)v3[25];
    }
    while (result != v9)
      result = (_QWORD *)std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)(result - 2));
    v3[25] = v9;
  }
  return result;
}

void siri::dialogengine::PatternSchema::AddGroup(int64x2_t *a1, __int128 *a2)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  char *v23;
  __int128 v24;
  int64x2_t v25;
  uint64_t v26;
  void *v27;

  if (*(_QWORD *)a2)
  {
    v4 = (_QWORD *)a1[12].i64[1];
    v5 = a1[13].u64[0];
    if ((unint64_t)v4 >= v5)
    {
      v10 = a1[12].i64[0];
      v11 = ((uint64_t)v4 - v10) >> 4;
      v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 60)
        std::vector<BOOL>::__throw_length_error[abi:ne180100]();
      v13 = v5 - v10;
      if (v13 >> 3 > v12)
        v12 = v13 >> 3;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
        v14 = 0xFFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v14);
      v17 = &v15[16 * v11];
      v18 = *a2;
      *(_OWORD *)v17 = *a2;
      if (*((_QWORD *)&v18 + 1))
      {
        v19 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      v22 = (_QWORD *)a1[12].i64[0];
      v21 = (_QWORD *)a1[12].i64[1];
      if (v21 == v22)
      {
        v25 = vdupq_n_s64((unint64_t)v21);
        v23 = &v15[16 * v11];
      }
      else
      {
        v23 = &v15[16 * v11];
        do
        {
          v24 = *((_OWORD *)v21 - 1);
          v21 -= 2;
          *((_OWORD *)v23 - 1) = v24;
          v23 -= 16;
          *v21 = 0;
          v21[1] = 0;
        }
        while (v21 != v22);
        v25 = a1[12];
      }
      v9 = v17 + 16;
      a1[12].i64[0] = (uint64_t)v23;
      a1[12].i64[1] = (uint64_t)(v17 + 16);
      a1[13].i64[0] = (uint64_t)&v15[16 * v16];
      v26 = v25.i64[1];
      v27 = (void *)v25.i64[0];
      while ((void *)v26 != v27)
        v26 = std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v26 - 16);
      if (v27)
        operator delete(v27);
    }
    else
    {
      v6 = *((_QWORD *)a2 + 1);
      *v4 = *(_QWORD *)a2;
      v4[1] = v6;
      if (v6)
      {
        v7 = (unint64_t *)(v6 + 8);
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
      }
      v9 = v4 + 2;
    }
    a1[12].i64[1] = (uint64_t)v9;
  }
}

BOOL siri::dialogengine::PatternSchema::Validate(siri::dialogengine::PatternSchema *this, siri::dialogengine::Context *a2)
{
  std::string *v4;
  __int128 v5;
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  std::string::size_type *v18;
  std::string::size_type size;
  std::string::size_type v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  BOOL v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  _BOOL4 v28;
  std::string::size_type v29;
  std::string::size_type *v30;
  std::string::size_type v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  BOOL v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 v38;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  __int128 v42;
  int v43;
  const std::string::value_type *v44;
  std::string::size_type v45;
  std::string *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  std::string *v51;
  __int128 v52;
  std::string *v53;
  __int128 v54;
  int v55;
  const std::string::value_type *v56;
  std::string::size_type v57;
  std::string *v58;
  __int128 v59;
  std::string::size_type v60;
  std::string::size_type i;
  __int128 v62;
  unint64_t *v63;
  unint64_t v64;
  __int128 v65;
  std::string *v66;
  __int128 v67;
  std::string *v68;
  __int128 v69;
  int v70;
  const std::string::value_type *v71;
  std::string::size_type v72;
  std::string *v73;
  __int128 v74;
  std::string *v75;
  __int128 v76;
  int v77;
  const std::string::value_type *v78;
  std::string::size_type v79;
  std::string *v80;
  __int128 v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::string *v85;
  __int128 v86;
  std::string *v87;
  __int128 v88;
  int v89;
  const std::string::value_type *v90;
  std::string::size_type v91;
  std::string *v92;
  __int128 v93;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  BOOL v98;
  uint64_t v99;
  std::string::size_type v100;
  char v101;
  __int128 v102;
  char *v103;
  char *v104;
  _BOOL8 v105;
  uint64_t *v107;
  _BOOL4 v108;
  std::string v109;
  std::string v110;
  std::string v111;
  std::string v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  std::string v115;
  std::string v116;
  std::string v117;
  __int128 v118;

  *((_QWORD *)&v118 + 1) = *MEMORY[0x1E0C80C00];
  if (*((char *)this + 23) < 0)
  {
    if (*((_QWORD *)this + 1))
      goto LABEL_7;
  }
  else if (*((_BYTE *)this + 23))
  {
    goto LABEL_7;
  }
  std::operator+<char>();
  siri::dialogengine::Context::AddSchemaError((uint64_t *)a2, (__int128 *)&v116);
  if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v116.__r_.__value_.__l.__data_);
LABEL_7:
  if (*((char *)this + 95) < 0)
  {
    if (!*((_QWORD *)this + 10))
      goto LABEL_23;
  }
  else if (!*((_BYTE *)this + 95))
  {
    goto LABEL_23;
  }
  std::operator+<char>();
  v4 = std::string::append(&v117, "): ");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v115.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v115.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  v6 = *((char *)this + 47);
  if (v6 >= 0)
    v7 = (char *)this + 24;
  else
    v7 = (const std::string::value_type *)*((_QWORD *)this + 3);
  if (v6 >= 0)
    v8 = *((unsigned __int8 *)this + 47);
  else
    v8 = *((_QWORD *)this + 4);
  v9 = std::string::append(&v115, v7, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v116.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v116.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::Context::AddSchemaWarning((uint64_t *)a2, (__int128 *)&v116);
  if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v116.__r_.__value_.__l.__data_);
  if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v115.__r_.__value_.__l.__data_);
  if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v117.__r_.__value_.__l.__data_);
LABEL_23:
  v11 = (uint64_t *)*((_QWORD *)this + 24);
  v107 = (uint64_t *)*((_QWORD *)this + 25);
  if (v11 == v107)
    goto LABEL_166;
  do
  {
    v13 = *v11;
    v12 = (std::__shared_weak_count *)v11[1];
    v113 = *v11;
    v114 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v13 + 40))(&v116, v13);
    if (v116.__r_.__value_.__l.__size_ - v116.__r_.__value_.__r.__words[0] == 16
      && **(_DWORD **)v116.__r_.__value_.__l.__data_ == 4)
    {
      v115.__r_.__value_.__r.__words[0] = (std::string::size_type)&v116;
      std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v115);
      if (*(char *)(v13 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v112, *(const std::string::value_type **)(v13 + 8), *(_QWORD *)(v13 + 16));
      }
      else
      {
        v16 = *(_OWORD *)(v13 + 8);
        v112.__r_.__value_.__r.__words[2] = *(_QWORD *)(v13 + 24);
        *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v16;
      }
      v85 = std::string::insert(&v112, 0, "Pattern schema contains a group '");
      v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
      v117.__r_.__value_.__r.__words[2] = v85->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v117.__r_.__value_.__l.__data_ = v86;
      v85->__r_.__value_.__l.__size_ = 0;
      v85->__r_.__value_.__r.__words[2] = 0;
      v85->__r_.__value_.__r.__words[0] = 0;
      v87 = std::string::append(&v117, "' marked as disallow: ");
      v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
      v115.__r_.__value_.__r.__words[2] = v87->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v115.__r_.__value_.__l.__data_ = v88;
      v87->__r_.__value_.__l.__size_ = 0;
      v87->__r_.__value_.__r.__words[2] = 0;
      v87->__r_.__value_.__r.__words[0] = 0;
      v89 = *((char *)this + 47);
      if (v89 >= 0)
        v90 = (char *)this + 24;
      else
        v90 = (const std::string::value_type *)*((_QWORD *)this + 3);
      if (v89 >= 0)
        v91 = *((unsigned __int8 *)this + 47);
      else
        v91 = *((_QWORD *)this + 4);
      v92 = std::string::append(&v115, v90, v91);
      v93 = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
      v116.__r_.__value_.__r.__words[2] = v92->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v116.__r_.__value_.__l.__data_ = v93;
      v92->__r_.__value_.__l.__size_ = 0;
      v92->__r_.__value_.__r.__words[2] = 0;
      v92->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Context::AddSchemaError((uint64_t *)a2, (__int128 *)&v116);
      if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v116.__r_.__value_.__l.__data_);
      if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v115.__r_.__value_.__l.__data_);
      if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v117.__r_.__value_.__l.__data_);
      if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v112.__r_.__value_.__l.__data_);
    }
    else
    {
      v115.__r_.__value_.__r.__words[0] = (std::string::size_type)&v116;
      std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v115);
    }
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v13 + 56))(&v116, v13);
    v17 = *(_OWORD *)&v116.__r_.__value_.__l.__data_;
    v115.__r_.__value_.__r.__words[0] = (std::string::size_type)&v116;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v115);
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v13 + 56))(&v116, v13);
    v108 = (_QWORD)v17 != *((_QWORD *)&v17 + 1);
    size = v116.__r_.__value_.__l.__size_;
    v18 = (std::string::size_type *)v116.__r_.__value_.__r.__words[0];
    if (v116.__r_.__value_.__r.__words[0] != v116.__r_.__value_.__l.__size_)
    {
      while (1)
      {
        v20 = *v18;
        v21 = (std::__shared_weak_count *)v18[1];
        v117.__r_.__value_.__r.__words[0] = *v18;
        v117.__r_.__value_.__l.__size_ = (std::string::size_type)v21;
        if (v21)
        {
          v22 = (unint64_t *)&v21->__shared_owners_;
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
        }
        memset(&v115, 0, sizeof(v115));
        std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>((char *)&v115, *(_QWORD **)(v20 + 24), *(_QWORD **)(v20 + 32), (uint64_t)(*(_QWORD *)(v20 + 32) - *(_QWORD *)(v20 + 24)) >> 4);
        v24 = v115.__r_.__value_.__l.__size_ - v115.__r_.__value_.__r.__words[0] == 16
           && **(_DWORD **)v115.__r_.__value_.__l.__data_ == 4;
        v112.__r_.__value_.__r.__words[0] = (std::string::size_type)&v115;
        std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v112);
        if (v21)
        {
          v25 = (unint64_t *)&v21->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        if (!v24)
          break;
        v18 += 2;
        if (v18 == (std::string::size_type *)size)
          goto LABEL_49;
      }
      v108 = 0;
LABEL_49:
      v13 = v113;
    }
    v115.__r_.__value_.__r.__words[0] = (std::string::size_type)&v116;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v115);
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v13 + 72))(&v116, v13);
    v27 = *(_OWORD *)&v116.__r_.__value_.__l.__data_;
    v115.__r_.__value_.__r.__words[0] = (std::string::size_type)&v116;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v115);
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v13 + 72))(&v116, v13);
    v28 = (_QWORD)v27 != *((_QWORD *)&v27 + 1);
    v29 = v116.__r_.__value_.__l.__size_;
    v30 = (std::string::size_type *)v116.__r_.__value_.__r.__words[0];
    if (v116.__r_.__value_.__r.__words[0] != v116.__r_.__value_.__l.__size_)
    {
      while (1)
      {
        v31 = *v30;
        v32 = (std::__shared_weak_count *)v30[1];
        v117.__r_.__value_.__r.__words[0] = *v30;
        v117.__r_.__value_.__l.__size_ = (std::string::size_type)v32;
        if (v32)
        {
          v33 = (unint64_t *)&v32->__shared_owners_;
          do
            v34 = __ldxr(v33);
          while (__stxr(v34 + 1, v33));
        }
        memset(&v115, 0, sizeof(v115));
        std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*,std::shared_ptr<siri::dialogengine::PatternSchemaUsage>*>((char *)&v115, *(_QWORD **)(v31 + 24), *(_QWORD **)(v31 + 32), (uint64_t)(*(_QWORD *)(v31 + 32) - *(_QWORD *)(v31 + 24)) >> 4);
        v35 = v115.__r_.__value_.__l.__size_ - v115.__r_.__value_.__r.__words[0] == 16
           && **(_DWORD **)v115.__r_.__value_.__l.__data_ == 4;
        v112.__r_.__value_.__r.__words[0] = (std::string::size_type)&v115;
        std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v112);
        if (v32)
        {
          v36 = (unint64_t *)&v32->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        if (!v35)
          break;
        v30 += 2;
        if (v30 == (std::string::size_type *)v29)
          goto LABEL_67;
      }
      v28 = 0;
LABEL_67:
      v13 = v113;
    }
    v115.__r_.__value_.__r.__words[0] = (std::string::size_type)&v116;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v115);
    if (v108 && v28)
    {
      if (*(char *)(v13 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v112, *(const std::string::value_type **)(v13 + 8), *(_QWORD *)(v13 + 16));
      }
      else
      {
        v38 = *(_OWORD *)(v13 + 8);
        v112.__r_.__value_.__r.__words[2] = *(_QWORD *)(v13 + 24);
        *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v38;
      }
      v39 = std::string::insert(&v112, 0, "Pattern group '");
      v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
      v117.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v117.__r_.__value_.__l.__data_ = v40;
      v39->__r_.__value_.__l.__size_ = 0;
      v39->__r_.__value_.__r.__words[2] = 0;
      v39->__r_.__value_.__r.__words[0] = 0;
      v41 = std::string::append(&v117, " has all dialog and visual components disallowed: ");
      v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
      v115.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v115.__r_.__value_.__l.__data_ = v42;
      v41->__r_.__value_.__l.__size_ = 0;
      v41->__r_.__value_.__r.__words[2] = 0;
      v41->__r_.__value_.__r.__words[0] = 0;
      v43 = *((char *)this + 47);
      if (v43 >= 0)
        v44 = (char *)this + 24;
      else
        v44 = (const std::string::value_type *)*((_QWORD *)this + 3);
      if (v43 >= 0)
        v45 = *((unsigned __int8 *)this + 47);
      else
        v45 = *((_QWORD *)this + 4);
      v46 = std::string::append(&v115, v44, v45);
      v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
      v116.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v116.__r_.__value_.__l.__data_ = v47;
      v46->__r_.__value_.__l.__size_ = 0;
      v46->__r_.__value_.__r.__words[2] = 0;
      v46->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Context::AddSchemaError((uint64_t *)a2, (__int128 *)&v116);
      if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v116.__r_.__value_.__l.__data_);
      if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v115.__r_.__value_.__l.__data_);
      if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v117.__r_.__value_.__l.__data_);
      if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v112.__r_.__value_.__l.__data_);
    }
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v13 + 48))(&v116, v13);
    v48 = *(_OWORD *)&v116.__r_.__value_.__l.__data_;
    v115.__r_.__value_.__r.__words[0] = (std::string::size_type)&v116;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v115);
    if (*((_QWORD *)&v48 + 1) == (_QWORD)v48)
      goto LABEL_107;
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v13 + 56))(&v116, v13);
    if (v116.__r_.__value_.__l.__size_ != v116.__r_.__value_.__r.__words[0])
    {
      v115.__r_.__value_.__r.__words[0] = (std::string::size_type)&v116;
      std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v115);
LABEL_90:
      if (*(char *)(v13 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v112, *(const std::string::value_type **)(v13 + 8), *(_QWORD *)(v13 + 16));
      }
      else
      {
        v50 = *(_OWORD *)(v13 + 8);
        v112.__r_.__value_.__r.__words[2] = *(_QWORD *)(v13 + 24);
        *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v50;
      }
      v51 = std::string::insert(&v112, 0, "Pattern group '");
      v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
      v117.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v117.__r_.__value_.__l.__data_ = v52;
      v51->__r_.__value_.__l.__size_ = 0;
      v51->__r_.__value_.__r.__words[2] = 0;
      v51->__r_.__value_.__r.__words[0] = 0;
      v53 = std::string::append(&v117, " specifies both nested patterns and dialog/visual components: ");
      v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
      v115.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v115.__r_.__value_.__l.__data_ = v54;
      v53->__r_.__value_.__l.__size_ = 0;
      v53->__r_.__value_.__r.__words[2] = 0;
      v53->__r_.__value_.__r.__words[0] = 0;
      v55 = *((char *)this + 47);
      if (v55 >= 0)
        v56 = (char *)this + 24;
      else
        v56 = (const std::string::value_type *)*((_QWORD *)this + 3);
      if (v55 >= 0)
        v57 = *((unsigned __int8 *)this + 47);
      else
        v57 = *((_QWORD *)this + 4);
      v58 = std::string::append(&v115, v56, v57);
      v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
      v116.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v116.__r_.__value_.__l.__data_ = v59;
      v58->__r_.__value_.__l.__size_ = 0;
      v58->__r_.__value_.__r.__words[2] = 0;
      v58->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Context::AddSchemaError((uint64_t *)a2, (__int128 *)&v116);
      if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v116.__r_.__value_.__l.__data_);
      if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v115.__r_.__value_.__l.__data_);
      if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v117.__r_.__value_.__l.__data_);
      if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v112.__r_.__value_.__l.__data_);
      goto LABEL_107;
    }
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v13 + 72))(&v115, v13);
    v49 = *(_OWORD *)&v115.__r_.__value_.__l.__data_;
    v117.__r_.__value_.__r.__words[0] = (std::string::size_type)&v115;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
    v115.__r_.__value_.__r.__words[0] = (std::string::size_type)&v116;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v115);
    if (*((_QWORD *)&v49 + 1) != (_QWORD)v49)
      goto LABEL_90;
LABEL_107:
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v13 + 48))(&v116, v13);
    v60 = v116.__r_.__value_.__l.__size_;
    for (i = v116.__r_.__value_.__r.__words[0]; i != v60; i += 24)
    {
      siri::dialogengine::PatternRegistry::GetSchema((uint64_t *)a2, (const std::string::value_type **)i, (uint64_t *)&v115);
      v62 = *(_OWORD *)&v115.__r_.__value_.__l.__data_;
      if (!v115.__r_.__value_.__l.__size_)
        goto LABEL_113;
      v63 = (unint64_t *)(v115.__r_.__value_.__l.__size_ + 8);
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 16))(*((_QWORD *)&v62 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v62 + 1));
        if ((_QWORD)v62)
          continue;
      }
      else
      {
LABEL_113:
        if ((_QWORD)v62)
          continue;
      }
      if (*(char *)(v113 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v109, *(const std::string::value_type **)(v113 + 8), *(_QWORD *)(v113 + 16));
      }
      else
      {
        v65 = *(_OWORD *)(v113 + 8);
        v109.__r_.__value_.__r.__words[2] = *(_QWORD *)(v113 + 24);
        *(_OWORD *)&v109.__r_.__value_.__l.__data_ = v65;
      }
      v66 = std::string::insert(&v109, 0, "Pattern group '");
      v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
      v110.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v67;
      v66->__r_.__value_.__l.__size_ = 0;
      v66->__r_.__value_.__r.__words[2] = 0;
      v66->__r_.__value_.__r.__words[0] = 0;
      v68 = std::string::append(&v110, " specifies non-existing nested pattern '");
      v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
      v111.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v111.__r_.__value_.__l.__data_ = v69;
      v68->__r_.__value_.__l.__size_ = 0;
      v68->__r_.__value_.__r.__words[2] = 0;
      v68->__r_.__value_.__r.__words[0] = 0;
      v70 = *(char *)(i + 23);
      if (v70 >= 0)
        v71 = (const std::string::value_type *)i;
      else
        v71 = *(const std::string::value_type **)i;
      if (v70 >= 0)
        v72 = *(unsigned __int8 *)(i + 23);
      else
        v72 = *(_QWORD *)(i + 8);
      v73 = std::string::append(&v111, v71, v72);
      v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
      v112.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v74;
      v73->__r_.__value_.__l.__size_ = 0;
      v73->__r_.__value_.__r.__words[2] = 0;
      v73->__r_.__value_.__r.__words[0] = 0;
      v75 = std::string::append(&v112, "' in: ");
      v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
      v117.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v117.__r_.__value_.__l.__data_ = v76;
      v75->__r_.__value_.__l.__size_ = 0;
      v75->__r_.__value_.__r.__words[2] = 0;
      v75->__r_.__value_.__r.__words[0] = 0;
      v77 = *((char *)this + 47);
      if (v77 >= 0)
        v78 = (char *)this + 24;
      else
        v78 = (const std::string::value_type *)*((_QWORD *)this + 3);
      if (v77 >= 0)
        v79 = *((unsigned __int8 *)this + 47);
      else
        v79 = *((_QWORD *)this + 4);
      v80 = std::string::append(&v117, v78, v79);
      v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
      v115.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v115.__r_.__value_.__l.__data_ = v81;
      v80->__r_.__value_.__l.__size_ = 0;
      v80->__r_.__value_.__r.__words[2] = 0;
      v80->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Context::AddSchemaError((uint64_t *)a2, (__int128 *)&v115);
      if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v115.__r_.__value_.__l.__data_);
      if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v117.__r_.__value_.__l.__data_);
      if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v112.__r_.__value_.__l.__data_);
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v111.__r_.__value_.__l.__data_);
      if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v110.__r_.__value_.__l.__data_);
      if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v109.__r_.__value_.__l.__data_);
    }
    v115.__r_.__value_.__r.__words[0] = (std::string::size_type)&v116;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v115);
    v82 = v114;
    if (v114)
    {
      v83 = (unint64_t *)&v114->__shared_owners_;
      do
        v84 = __ldaxr(v83);
      while (__stlxr(v84 - 1, v83));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
        std::__shared_weak_count::__release_weak(v82);
      }
    }
    v11 += 2;
  }
  while (v11 != v107);
LABEL_166:
  v94 = (char *)*((_QWORD *)this + 15);
  v95 = (char *)this + 128;
  if (v94 != (char *)this + 128)
  {
    do
    {
      (*(void (**)(_QWORD, siri::dialogengine::Context *))(**((_QWORD **)v94 + 7) + 24))(*((_QWORD *)v94 + 7), a2);
      v96 = (char *)*((_QWORD *)v94 + 1);
      if (v96)
      {
        do
        {
          v97 = v96;
          v96 = *(char **)v96;
        }
        while (v96);
      }
      else
      {
        do
        {
          v97 = (char *)*((_QWORD *)v94 + 2);
          v98 = *(_QWORD *)v97 == (_QWORD)v94;
          v94 = v97;
        }
        while (!v98);
      }
      v94 = v97;
    }
    while (v97 != v95);
    v94 = (char *)*((_QWORD *)this + 15);
  }
  if (v94 != v95)
  {
    do
    {
      v99 = *((_QWORD *)v94 + 7);
      if (*(char *)(v99 + 359) < 0)
        std::string::__init_copy_ctor_external(&v116, *(const std::string::value_type **)(v99 + 336), *(_QWORD *)(v99 + 344));
      else
        v116 = *(std::string *)(v99 + 336);
      v100 = HIBYTE(v116.__r_.__value_.__r.__words[2]);
      v101 = HIBYTE(v116.__r_.__value_.__r.__words[2]);
      if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v100 = v116.__r_.__value_.__l.__size_;
      if (v100)
      {
        if (*(char *)(v99 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&v117, *(const std::string::value_type **)(v99 + 8), *(_QWORD *)(v99 + 16));
        }
        else
        {
          v102 = *(_OWORD *)(v99 + 8);
          v117.__r_.__value_.__r.__words[2] = *(_QWORD *)(v99 + 24);
          *(_OWORD *)&v117.__r_.__value_.__l.__data_ = v102;
        }
        memset(&v115, 0, sizeof(v115));
        v112.__r_.__value_.__r.__words[0] = (std::string::size_type)&v115;
        v112.__r_.__value_.__s.__data_[8] = 0;
        v115.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
        v115.__r_.__value_.__l.__size_ = v115.__r_.__value_.__r.__words[0];
        v115.__r_.__value_.__r.__words[2] = v115.__r_.__value_.__r.__words[0] + 24;
        v115.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v115.__r_.__value_.__r.__words[2], (__int128 *)&v117, &v118, (std::string *)v115.__r_.__value_.__l.__data_);
        if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v117.__r_.__value_.__l.__data_);
        siri::dialogengine::CheckReferenceSetting((uint64_t *)a2, (uint64_t)this, v99, (uint64_t)&v116, (uint64_t *)&v115);
        v117.__r_.__value_.__r.__words[0] = (std::string::size_type)&v115;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
        v101 = HIBYTE(v116.__r_.__value_.__r.__words[2]);
      }
      if (v101 < 0)
        operator delete(v116.__r_.__value_.__l.__data_);
      v103 = (char *)*((_QWORD *)v94 + 1);
      if (v103)
      {
        do
        {
          v104 = v103;
          v103 = *(char **)v103;
        }
        while (v103);
      }
      else
      {
        do
        {
          v104 = (char *)*((_QWORD *)v94 + 2);
          v98 = *(_QWORD *)v104 == (_QWORD)v94;
          v94 = v104;
        }
        while (!v98);
      }
      v94 = v104;
    }
    while (v104 != v95);
  }
  memset(&v116, 0, sizeof(v116));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v116, *((__int128 **)a2 + 77), *((__int128 **)a2 + 78), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 78) - *((_QWORD *)a2 + 77)) >> 3));
  v105 = v116.__r_.__value_.__r.__words[0] == v116.__r_.__value_.__l.__size_;
  v115.__r_.__value_.__r.__words[0] = (std::string::size_type)&v116;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v115);
  return v105;
}

void sub_1BF89219C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,char a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;

  if (*(char *)(v46 - 137) < 0)
    operator delete(*(void **)(v46 - 160));
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::CheckReferenceSetting(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _OWORD *v15;
  std::string *v16;
  __int128 v17;
  int v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;
  void *v25;
  char v26;
  std::string::size_type size;
  std::string::size_type v28;
  int v29;
  std::string *v30;
  uint64_t v31;
  std::string *v32;
  int v33;
  int v34;
  int v35;
  _BOOL4 v36;
  std::string *v38;
  __int128 v39;
  __int128 v40;
  std::string::size_type v41;
  std::string *v42;
  std::string::size_type v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  __int128 v47;
  std::string *v48;
  std::string::size_type v49;
  std::string *v50;
  __int128 v51;
  std::string *v52;
  __int128 v53;
  std::string::size_type v54;
  unint64_t v55;
  uint64_t v56;
  std::string *v57;
  __int128 v58;
  std::string *v59;
  __int128 v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t *v63;
  std::string v64;
  std::string v65;
  std::string v66;
  std::string v67;
  std::string v68;
  std::string v69;
  std::string v70;
  std::string v71;
  uint64_t v72;
  std::__shared_weak_count *v73;

  v10 = std::__tree<std::string>::find<std::string>(a2 + 120, (const void **)a4);
  if (a2 + 128 == v10)
  {
    v11 = 0;
    v72 = 0;
    v73 = 0;
  }
  else
  {
    v12 = *(_QWORD *)(v10 + 56);
    v11 = *(std::__shared_weak_count **)(v10 + 64);
    v72 = v12;
    v73 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    if (v12)
    {
      v15 = (_OWORD *)(v12 + 32);
      if (*(char *)(v12 + 55) < 0)
      {
        std::string::__init_copy_ctor_external(&v71, *(const std::string::value_type **)(v12 + 32), *(_QWORD *)(v12 + 40));
      }
      else
      {
        *(_OWORD *)&v71.__r_.__value_.__l.__data_ = *v15;
        v71.__r_.__value_.__r.__words[2] = *(_QWORD *)(v12 + 48);
      }
      if (*(char *)(a3 + 55) < 0)
        std::string::__init_copy_ctor_external(&v70, *(const std::string::value_type **)(a3 + 32), *(_QWORD *)(a3 + 40));
      else
        v70 = *(std::string *)(a3 + 32);
      v26 = HIBYTE(v71.__r_.__value_.__r.__words[2]);
      if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v71.__r_.__value_.__r.__words[2]);
      else
        size = v71.__r_.__value_.__l.__size_;
      v28 = HIBYTE(v70.__r_.__value_.__r.__words[2]);
      v29 = SHIBYTE(v70.__r_.__value_.__r.__words[2]);
      if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v28 = v70.__r_.__value_.__l.__size_;
      v63 = a1;
      if (size == v28)
      {
        if ((v70.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v30 = &v70;
        else
          v30 = (std::string *)v70.__r_.__value_.__r.__words[0];
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
        {
          v36 = memcmp(v71.__r_.__value_.__l.__data_, v30, v71.__r_.__value_.__l.__size_) != 0;
          if ((v29 & 0x80000000) == 0)
            goto LABEL_45;
        }
        else if (*((_BYTE *)&v71.__r_.__value_.__s + 23))
        {
          v31 = HIBYTE(v71.__r_.__value_.__r.__words[2]) - 1;
          v32 = &v71;
          do
          {
            v34 = v32->__r_.__value_.__s.__data_[0];
            v32 = (std::string *)((char *)v32 + 1);
            v33 = v34;
            v35 = v30->__r_.__value_.__s.__data_[0];
            v30 = (std::string *)((char *)v30 + 1);
            v36 = v33 != v35;
          }
          while (v33 == v35 && v31-- != 0);
          if ((SHIBYTE(v70.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_45:
            if ((v26 & 0x80) == 0)
              goto LABEL_46;
            goto LABEL_51;
          }
        }
        else
        {
          v36 = 0;
          if ((SHIBYTE(v70.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_45;
        }
      }
      else
      {
        v36 = 1;
        if ((SHIBYTE(v70.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_45;
      }
      operator delete(v70.__r_.__value_.__l.__data_);
      if ((*((_BYTE *)&v71.__r_.__value_.__s + 23) & 0x80) == 0)
      {
LABEL_46:
        if (v36)
          goto LABEL_47;
        goto LABEL_52;
      }
LABEL_51:
      operator delete(v71.__r_.__value_.__l.__data_);
      if (v36)
      {
LABEL_47:
        std::operator+<char>();
        v38 = std::string::append(&v66, "' has a 'defaultValueFromSetting' value that names a setting ('");
        v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
        v67.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v39;
        v38->__r_.__value_.__l.__size_ = 0;
        v38->__r_.__value_.__r.__words[2] = 0;
        v38->__r_.__value_.__r.__words[0] = 0;
        if (*(char *)(v12 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&v65, *(const std::string::value_type **)(v12 + 8), *(_QWORD *)(v12 + 16));
        }
        else
        {
          v40 = *(_OWORD *)(v12 + 8);
          v65.__r_.__value_.__r.__words[2] = *(_QWORD *)(v12 + 24);
          *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v40;
        }
        if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v42 = &v65;
        else
          v42 = (std::string *)v65.__r_.__value_.__r.__words[0];
        if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v43 = HIBYTE(v65.__r_.__value_.__r.__words[2]);
        else
          v43 = v65.__r_.__value_.__l.__size_;
        v44 = std::string::append(&v67, (const std::string::value_type *)v42, v43);
        v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        v68.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        v46 = std::string::append(&v68, "') of the wrong type (");
        v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
        v69.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v47;
        v46->__r_.__value_.__l.__size_ = 0;
        v46->__r_.__value_.__r.__words[2] = 0;
        v46->__r_.__value_.__r.__words[0] = 0;
        if (*(char *)(v12 + 55) < 0)
        {
          std::string::__init_copy_ctor_external(&v64, *(const std::string::value_type **)(v12 + 32), *(_QWORD *)(v12 + 40));
        }
        else
        {
          *(_OWORD *)&v64.__r_.__value_.__l.__data_ = *v15;
          v64.__r_.__value_.__r.__words[2] = *(_QWORD *)(v12 + 48);
        }
        if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v48 = &v64;
        else
          v48 = (std::string *)v64.__r_.__value_.__r.__words[0];
        if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v49 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
        else
          v49 = v64.__r_.__value_.__l.__size_;
        v50 = std::string::append(&v69, (const std::string::value_type *)v48, v49);
        v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
        v70.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v51;
        v50->__r_.__value_.__l.__size_ = 0;
        v50->__r_.__value_.__r.__words[2] = 0;
        v50->__r_.__value_.__r.__words[0] = 0;
        v52 = std::string::append(&v70, ")");
        v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
        v71.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v53;
        v52->__r_.__value_.__l.__size_ = 0;
        v52->__r_.__value_.__r.__words[2] = 0;
        v52->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::Context::AddSchemaError(v63, (__int128 *)&v71);
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v71.__r_.__value_.__l.__data_);
        if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v70.__r_.__value_.__l.__data_);
        if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v64.__r_.__value_.__l.__data_);
        if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v69.__r_.__value_.__l.__data_);
        if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v68.__r_.__value_.__l.__data_);
        if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v65.__r_.__value_.__l.__data_);
        if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v67.__r_.__value_.__l.__data_);
        if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
        {
          v25 = (void *)v66.__r_.__value_.__r.__words[0];
          goto LABEL_117;
        }
        goto LABEL_118;
      }
LABEL_52:
      if (*(char *)(v12 + 231) < 0)
        std::string::__init_copy_ctor_external(&v71, *(const std::string::value_type **)(v12 + 208), *(_QWORD *)(v12 + 216));
      else
        v71 = *(std::string *)(v12 + 208);
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
      {
        v41 = v71.__r_.__value_.__l.__size_;
        operator delete(v71.__r_.__value_.__l.__data_);
        if (v41)
          goto LABEL_118;
      }
      else if (*((_BYTE *)&v71.__r_.__value_.__s + 23))
      {
        goto LABEL_118;
      }
      if (*(char *)(v12 + 359) < 0)
        std::string::__init_copy_ctor_external(&v71, *(const std::string::value_type **)(v12 + 336), *(_QWORD *)(v12 + 344));
      else
        v71 = *(std::string *)(v12 + 336);
      v54 = HIBYTE(v71.__r_.__value_.__r.__words[2]);
      if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v54 = v71.__r_.__value_.__l.__size_;
      if (v54)
      {
        v55 = a5[1];
        if (v55 >= a5[2])
        {
          v56 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a5, (__int128 *)a4);
        }
        else
        {
          std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a5, (__int128 *)a4);
          v56 = v55 + 24;
        }
        a5[1] = v56;
        if (std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(*a5, v56, (unsigned __int8 **)&v71) == v56)
        {
          siri::dialogengine::CheckReferenceSetting(v63, a2, a3, &v71, a5);
        }
        else
        {
          if (*(char *)(a3 + 31) < 0)
            std::string::__init_copy_ctor_external(&v68, *(const std::string::value_type **)(a3 + 8), *(_QWORD *)(a3 + 16));
          else
            v68 = *(std::string *)(a3 + 8);
          v57 = std::string::insert(&v68, 0, "Pattern setting '");
          v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
          v69.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v58;
          v57->__r_.__value_.__l.__size_ = 0;
          v57->__r_.__value_.__r.__words[2] = 0;
          v57->__r_.__value_.__r.__words[0] = 0;
          v59 = std::string::append(&v69, "' is part of a cycle of 'defaultValueFromSetting' values");
          v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
          v70.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v60;
          v59->__r_.__value_.__l.__size_ = 0;
          v59->__r_.__value_.__r.__words[2] = 0;
          v59->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Context::AddSchemaError(v63, (__int128 *)&v70);
          if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v70.__r_.__value_.__l.__data_);
          if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v69.__r_.__value_.__l.__data_);
          if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v68.__r_.__value_.__l.__data_);
        }
      }
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
      {
        v25 = (void *)v71.__r_.__value_.__r.__words[0];
        goto LABEL_117;
      }
      goto LABEL_118;
    }
  }
  std::operator+<char>();
  v16 = std::string::append(&v68, "' has a 'defaultValueFromSetting' value that names a setting that does not exist ('");
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v69.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v18 = *(char *)(a4 + 23);
  if (v18 >= 0)
    v19 = (const std::string::value_type *)a4;
  else
    v19 = *(const std::string::value_type **)a4;
  if (v18 >= 0)
    v20 = *(unsigned __int8 *)(a4 + 23);
  else
    v20 = *(_QWORD *)(a4 + 8);
  v21 = std::string::append(&v69, v19, v20);
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v70.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  v23 = std::string::append(&v70, "')");
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v71.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::Context::AddSchemaError(a1, (__int128 *)&v71);
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v71.__r_.__value_.__l.__data_);
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v70.__r_.__value_.__l.__data_);
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v69.__r_.__value_.__l.__data_);
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
  {
    v25 = (void *)v68.__r_.__value_.__r.__words[0];
LABEL_117:
    operator delete(v25);
  }
LABEL_118:
  if (v11)
  {
    v61 = (unint64_t *)&v11->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1BF892A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  uint64_t v49;

  if (*(char *)(v49 - 105) < 0)
    operator delete(*(void **)(v49 - 128));
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v49 - 104);
  _Unwind_Resume(a1);
}

uint64_t std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v3;
  char v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;

  v3 = a1;
  if (a1 != a2)
  {
    v5 = *((_BYTE *)a3 + 23);
    if (v5 >= 0)
      v6 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    else
      v6 = a3[1];
    if (v5 >= 0)
      v7 = (unsigned __int8 *)a3;
    else
      v7 = *a3;
    do
    {
      v8 = *(unsigned __int8 *)(v3 + 23);
      if ((v8 & 0x80u) == 0)
        v9 = (unsigned __int8 *)*(unsigned __int8 *)(v3 + 23);
      else
        v9 = *(unsigned __int8 **)(v3 + 8);
      if (v9 == v6)
      {
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v3, v7, *(_QWORD *)(v3 + 8)))
            return v3;
        }
        else
        {
          if (!*(_BYTE *)(v3 + 23))
            return v3;
          v10 = 0;
          while (*(unsigned __int8 *)(v3 + v10) == v7[v10])
          {
            if (v8 == ++v10)
              return v3;
          }
        }
      }
      v3 += 24;
    }
    while (v3 != a2);
    return a2;
  }
  return v3;
}

void siri::dialogengine::GroupAll::~GroupAll(siri::dialogengine::GroupAll *this)
{
  siri::dialogengine::Group::~Group(this);
  JUMPOUT(0x1C3B8D890);
}

uint64_t siri::dialogengine::GroupAll::Validate(siri::dialogengine::GroupAll *this, siri::dialogengine::Context *a2)
{
  char v4;
  __int128 *v5;
  unint64_t v6;
  unsigned __int8 v7;
  __int128 *v8;
  __int128 *v9;
  BOOL v10;
  void *__p[2];
  char v13;
  void *v14[2];
  unsigned __int8 v15;
  std::string v16;
  void *v17;
  char v18;
  __int128 *v19;
  _QWORD *v20[2];

  v4 = siri::dialogengine::Group::Validate((uint64_t **)this, a2);
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&v19, (const void ***)this + 9);
  v5 = v19;
  if (v19 != (__int128 *)v20)
  {
    do
    {
      std::pair<std::string const,std::string>::pair[abi:ne180100](&v16, v5 + 2);
      std::string::basic_string[abi:ne180100]<0>(__p, "all");
      siri::dialogengine::ValidateXmlAttributeVersion(a2, (const void **)__p, (uint64_t)&v16, v14);
      if (v13 < 0)
        operator delete(__p[0]);
      v6 = v15;
      v7 = v15;
      if ((v15 & 0x80u) != 0)
        v6 = (unint64_t)v14[1];
      if (v6)
      {
        siri::dialogengine::Context::AddValidationError((uint64_t)a2, (__int128 *)v14, 0);
        v4 = 0;
        v7 = v15;
      }
      if ((v7 & 0x80) != 0)
        operator delete(v14[0]);
      if (v18 < 0)
        operator delete(v17);
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v16.__r_.__value_.__l.__data_);
      v8 = (__int128 *)*((_QWORD *)v5 + 1);
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = *(__int128 **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (__int128 *)*((_QWORD *)v5 + 2);
          v10 = *(_QWORD *)v9 == (_QWORD)v5;
          v5 = v9;
        }
        while (!v10);
      }
      v5 = v9;
    }
    while (v9 != (__int128 *)v20);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v20[0]);
  return v4 & 1;
}

void sub_1BF892E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  uint64_t v22;

  if (a21 < 0)
    operator delete(__p);
  std::pair<std::string const,std::string>::~pair((uint64_t)&a22);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(_QWORD **)(v22 - 64));
  _Unwind_Resume(a1);
}

void siri::dialogengine::GroupAll::Execute(siri::dialogengine::GroupAll *this@<X0>, siri::dialogengine::Context *a2@<X1>, uint64_t a3@<X8>)
{
  std::string *v6;
  __int128 v7;
  const char *v8;
  uint64_t v9;
  uint64_t i;
  std::__shared_weak_count *v11;
  siri::dialogengine::Node *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  unint64_t *v21;
  unint64_t v22;
  std::string *v23;
  __int128 v24;
  std::string v25;
  siri::dialogengine::Node *v26;
  std::__shared_weak_count *v27;
  std::string v28;
  void *__p[2];
  std::string::size_type v30;

  siri::dialogengine::Node::GetIdForDebug(this, a2, 0, &v28);
  v6 = std::string::insert(&v28, 0, "Executing 'All' group");
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v30 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::Log::Debug((siri::dialogengine *)__p);
  if (SHIBYTE(v30) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (((*(uint64_t (**)(siri::dialogengine::GroupAll *, siri::dialogengine::Context *))(*(_QWORD *)this + 48))(this, a2) & 1) != 0)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    v9 = *((_QWORD *)this + 26);
    for (i = *((_QWORD *)this + 27); v9 != i; v9 += 16)
    {
      v12 = *(siri::dialogengine::Node **)v9;
      v11 = *(std::__shared_weak_count **)(v9 + 8);
      v26 = *(siri::dialogengine::Node **)v9;
      v27 = v11;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v14 = __ldxr(p_shared_owners);
        while (__stxr(v14 + 1, p_shared_owners));
      }
      if (v12)
      {
        if (((*(uint64_t (**)(siri::dialogengine::Node *, siri::dialogengine::Context *))(*(_QWORD *)v12 + 48))(v12, a2) & 1) != 0)
        {
          (*(void (**)(void **__return_ptr, siri::dialogengine::Node *, siri::dialogengine::Context *))(*(_QWORD *)v12 + 40))(__p, v12, a2);
          if (__p[0] == __p[1])
          {
            siri::dialogengine::Node::GetIdForDebug(v12, a2, 0, &v25);
            v19 = std::string::insert(&v25, 0, "  Child of <all> returned an empty result - skipping: ");
            v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
            v28.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v20;
            v19->__r_.__value_.__l.__size_ = 0;
            v19->__r_.__value_.__r.__words[2] = 0;
            v19->__r_.__value_.__r.__words[0] = 0;
            siri::dialogengine::Log::Debug((siri::dialogengine *)&v28);
            if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v28.__r_.__value_.__l.__data_);
            if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v25.__r_.__value_.__l.__data_);
          }
          else
          {
            siri::dialogengine::Node::GetIdForDebug(v12, a2, 0, &v25);
            v15 = std::string::insert(&v25, 0, "  Match found for <all> group - adding: ");
            v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
            v28.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v16;
            v15->__r_.__value_.__l.__size_ = 0;
            v15->__r_.__value_.__r.__words[2] = 0;
            v15->__r_.__value_.__r.__words[0] = 0;
            siri::dialogengine::Log::Debug((siri::dialogengine *)&v28);
            if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v28.__r_.__value_.__l.__data_);
            if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v25.__r_.__value_.__l.__data_);
            std::vector<std::shared_ptr<siri::dialogengine::Node>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<siri::dialogengine::Node>*>,std::__wrap_iter<std::shared_ptr<siri::dialogengine::Node>*>>((char *)a3, *(_QWORD *)(a3 + 8), (uint64_t *)__p[0], (uint64_t *)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 4);
          }
          v28.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
        }
        else
        {
          siri::dialogengine::Node::GetIdForDebug(v12, a2, 0, &v28);
          v17 = std::string::insert(&v28, 0, "  Condition for child of <all> failed - skipping: ");
          v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
          v30 = v17->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v18;
          v17->__r_.__value_.__l.__size_ = 0;
          v17->__r_.__value_.__r.__words[2] = 0;
          v17->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Log::Debug((siri::dialogengine *)__p);
          if (SHIBYTE(v30) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v28.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"  Programming error: NULL node in <all> group", v8);
      }
      if (v11)
      {
        v21 = (unint64_t *)&v11->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
    }
  }
  else
  {
    siri::dialogengine::Node::GetIdForDebug(this, a2, 0, &v28);
    v23 = std::string::insert(&v28, 0, "Condition for <all> group failed - skipping: ");
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v30 = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::Debug((siri::dialogengine *)__p);
    if (SHIBYTE(v30) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v28.__r_.__value_.__l.__data_);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
}

void sub_1BF8931E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'siri::dialogengine::GroupAll::~GroupAll(siri::dialogengine::GroupAll *this)
{
  siri::dialogengine::Group::~Group((siri::dialogengine::GroupAll *)((char *)this - 64));
}

{
  siri::dialogengine::Group::~Group((siri::dialogengine::GroupAll *)((char *)this - 64));
  JUMPOUT(0x1C3B8D890);
}

uint64_t `non-virtual thunk to'siri::dialogengine::GroupAll::Validate(siri::dialogengine::GroupAll *this, siri::dialogengine::Context *a2)
{
  return siri::dialogengine::GroupAll::Validate((siri::dialogengine::GroupAll *)((char *)this - 64), a2);
}

void siri::dialogengine::Group::~Group(siri::dialogengine::Group *this)
{
  void **v2;

  *(_QWORD *)this = &off_1E793A630;
  *((_QWORD *)this + 8) = &unk_1E793A688;
  if (*((char *)this + 255) < 0)
    operator delete(*((void **)this + 29));
  v2 = (void **)((char *)this + 208);
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v2);
  *(_QWORD *)this = off_1E793A6B0;
  *((_QWORD *)this + 8) = &unk_1E793A708;
  if (*((char *)this + 191) < 0)
    operator delete(*((void **)this + 21));
  if (*((char *)this + 167) < 0)
    operator delete(*((void **)this + 18));
  if (*((char *)this + 143) < 0)
    operator delete(*((void **)this + 15));
  if (*((char *)this + 119) < 0)
    operator delete(*((void **)this + 12));
  *((_QWORD *)this + 8) = off_1E793AED8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((_QWORD **)this + 10));
  siri::dialogengine::LineNumberBase::~LineNumberBase((void **)this);
}

{
  siri::dialogengine::Group::~Group(this);
  JUMPOUT(0x1C3B8D890);
}

char *std::vector<std::shared_ptr<siri::dialogengine::Node>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<siri::dialogengine::Node>*>,std::__wrap_iter<std::shared_ptr<siri::dialogengine::Node>*>>(char *result, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  char *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  __int128 v34;
  _QWORD *v35;
  _QWORD *v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t *v47;
  unint64_t v48;
  _QWORD *v49;

  if (a5 < 1)
    return result;
  v6 = a3;
  v7 = result;
  v8 = *(_QWORD *)result;
  v9 = a2 - *(_QWORD *)result;
  v10 = v9 >> 4;
  v11 = (_QWORD *)(*(_QWORD *)result + (v9 & 0xFFFFFFFFFFFFFFF0));
  v12 = result + 16;
  v13 = *((_QWORD *)result + 2);
  v14 = *((_QWORD *)result + 1);
  if (a5 > (uint64_t)(v13 - v14) >> 4)
  {
    v15 = a5 + ((uint64_t)(v14 - v8) >> 4);
    if (v15 >> 60)
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    v16 = v13 - v8;
    if (v16 >> 3 > v15)
      v15 = v16 >> 3;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
      v17 = 0xFFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    v49 = v12;
    if (v17)
      v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v17);
    else
      v18 = 0;
    v26 = (_QWORD *)(v17 + 16 * v10);
    v45 = v17;
    v46 = v26;
    v48 = v17 + 16 * v18;
    v27 = &v26[2 * a5];
    v28 = v26;
    do
    {
      *v28 = *v6;
      v29 = v6[1];
      v28[1] = v29;
      if (v29)
      {
        v30 = (unint64_t *)(v29 + 8);
        do
          v31 = __ldxr(v30);
        while (__stxr(v31 + 1, v30));
      }
      v28 += 2;
      v6 += 2;
    }
    while (v28 != v27);
    v47 = &v26[2 * a5];
    v32 = *(_QWORD **)v7;
    if (*(_QWORD **)v7 != v11)
    {
      v33 = v11;
      do
      {
        v34 = *((_OWORD *)v33 - 1);
        v33 -= 2;
        *((_OWORD *)v26 - 1) = v34;
        v26 -= 2;
        *v33 = 0;
        v33[1] = 0;
      }
      while (v33 != v32);
      v27 = v47;
    }
    v35 = (_QWORD *)*((_QWORD *)v7 + 1);
    if (v35 != v11)
    {
      do
      {
        *(_OWORD *)v27 = *(_OWORD *)v11;
        v27 += 2;
        *v11 = 0;
        v11[1] = 0;
        v11 += 2;
      }
      while (v11 != v35);
      v11 = (_QWORD *)*((_QWORD *)v7 + 1);
    }
    v36 = *(_QWORD **)v7;
    *(_QWORD *)v7 = v26;
    *((_QWORD *)v7 + 1) = v27;
    v37 = *((_QWORD *)v7 + 2);
    *((_QWORD *)v7 + 2) = v48;
    v47 = v11;
    v48 = v37;
    v45 = (unint64_t)v36;
    v46 = v36;
    return (char *)std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)&v45);
  }
  v19 = (uint64_t)(v14 - (_QWORD)v11) >> 4;
  if (v19 >= a5)
  {
    v20 = &a3[2 * a5];
    v22 = (char *)*((_QWORD *)result + 1);
LABEL_36:
    v38 = (char *)&v11[2 * a5];
    v39 = &v22[-16 * a5];
    v40 = v22;
    if ((unint64_t)v39 < v14)
    {
      v40 = v22;
      do
      {
        *(_OWORD *)v40 = *(_OWORD *)v39;
        v40 += 16;
        *(_QWORD *)v39 = 0;
        *((_QWORD *)v39 + 1) = 0;
        v39 += 16;
      }
      while ((unint64_t)v39 < v14);
    }
    *((_QWORD *)result + 1) = v40;
    if (v22 != v38)
    {
      result = v22 - 16;
      v41 = 16 * ((v22 - v38) >> 4);
      v42 = v8 + 16 * v10 - 16;
      do
      {
        result = (char *)(std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)result, (__int128 *)(v42 + v41))- 16);
        v41 -= 16;
      }
      while (v41);
    }
    for (; v6 != v20; v11 += 2)
    {
      v43 = *v6;
      v44 = v6[1];
      v6 += 2;
      result = (char *)std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100](v11, v43, v44);
    }
    return result;
  }
  v20 = &a3[2 * v19];
  if (v20 == a4)
  {
    v22 = (char *)*((_QWORD *)result + 1);
  }
  else
  {
    v21 = &a3[2 * v19];
    v22 = (char *)*((_QWORD *)result + 1);
    do
    {
      *(_QWORD *)v22 = *v21;
      v23 = v21[1];
      *((_QWORD *)v22 + 1) = v23;
      if (v23)
      {
        v24 = (unint64_t *)(v23 + 8);
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      v21 += 2;
      v22 += 16;
    }
    while (v21 != a4);
  }
  *((_QWORD *)result + 1) = v22;
  if ((uint64_t)(v14 - (_QWORD)v11) >= 1)
    goto LABEL_36;
  return result;
}

double siri::dialogengine::GroupAll::GroupAll(siri::dialogengine::GroupAll *this)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 9) = (char *)this + 80;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_DWORD *)this + 48) = 1065353216;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *((_QWORD *)this + 31) = 0;
  *(_QWORD *)this = &off_1E792B838;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = &unk_1E792B890;
  return result;
}

{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 9) = (char *)this + 80;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_DWORD *)this + 48) = 1065353216;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *((_QWORD *)this + 31) = 0;
  *(_QWORD *)this = &off_1E792B838;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = &unk_1E792B890;
  return result;
}

uint64_t siri::dialogengine::LogEntry::LogEntry(uint64_t a1, int a2, __int128 *a3)
{
  std::string *v4;
  __int128 v5;
  timeval v7;

  *(_DWORD *)a1 = a2;
  v4 = (std::string *)(a1 + 8);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    v4->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *(_QWORD *)(a1 + 32) = 0;
  gettimeofday(&v7, 0);
  *(double *)(a1 + 32) = (double)v7.tv_usec / 1000000.0 + (double)v7.tv_sec;
  return a1;
}

uint64_t siri::dialogengine::LogEntry::GetLevel(siri::dialogengine::LogEntry *this)
{
  return *(unsigned int *)this;
}

_QWORD *siri::dialogengine::LogEntry::GetLevelAsString@<X0>(siri::dialogengine::LogEntry *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  char *v5;

  v4 = *(unsigned int *)this;
  if (v4 > 3)
    v5 = "unknown";
  else
    v5 = off_1E792B8A8[v4];
  return std::string::basic_string[abi:ne180100]<0>(a2, v5);
}

void siri::dialogengine::LogEntry::GetLine(siri::dialogengine::LogEntry *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 3);
  }
}

double siri::dialogengine::LogEntry::GetTimeStamp(siri::dialogengine::LogEntry *this)
{
  return *((double *)this + 4);
}

void siri::dialogengine::LogEntry::AsString(siri::dialogengine::LogEntry *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  char *v5;
  std::string *v6;
  __int128 v7;
  std::string *p_p;
  std::string::size_type size;
  std::string *v10;
  std::string __p;
  void *v12[2];
  char v13;
  std::string v14;
  std::string v15;

  v4 = *(unsigned int *)this;
  if (v4 > 3)
    v5 = "unknown";
  else
    v5 = off_1E792B8A8[v4];
  std::string::basic_string[abi:ne180100]<0>(v12, v5);
  siri::dialogengine::StringToUpper((uint64_t)v12, (uint64_t)&v14);
  v6 = std::string::append(&v14, ": ");
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (*((char *)this + 31) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  else
    __p = *(std::string *)((char *)this + 8);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v10 = std::string::append(&v15, (const std::string::value_type *)p_p, size);
  *a2 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (v13 < 0)
    operator delete(v12[0]);
}

void sub_1BF893924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (*(char *)(v27 - 25) < 0)
    operator delete(*(void **)(v27 - 48));
  if (a27 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::Log::LogWithLevel(uint64_t a1, unsigned int a2)
{
  unsigned __int8 v4;
  os_log_t v5;
  void *v6;
  os_log_type_t v7;
  int v8;
  unint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL8 v12;
  std::string::size_type v13;
  std::string::size_type v14;
  siri::dialogengine *v15;
  void *v16;
  std::string::size_type v17;
  unint64_t v18;
  unint64_t v19;
  std::string::size_type v22;
  NSObject *v23;
  std::string::size_type size;
  std::string::size_type v25;
  std::string *v26;
  std::string v27;
  _BYTE v28[8];
  void *__p;
  char v30;
  std::string buf;
  std::string *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if ((v4 & 1) == 0
  {
    siri::dialogengine::Log::LogWithLevel(std::string const&,siri::dialogengine::LogLevel)::sLog = (uint64_t)os_log_create("com.apple.siri.DialogEngine", "DialogEngine");
  }
  if (!siri::dialogengine::Log::LogWithLevel(std::string const&,siri::dialogengine::LogLevel)::sLog)
  {
    puts("ERROR: OS log handle is null.  Attempting to recreate");
    v5 = os_log_create("com.apple.siri.DialogEngine", "DialogEngine");
    v6 = (void *)siri::dialogengine::Log::LogWithLevel(std::string const&,siri::dialogengine::LogLevel)::sLog;
    siri::dialogengine::Log::LogWithLevel(std::string const&,siri::dialogengine::LogLevel)::sLog = (uint64_t)v5;

    if (!siri::dialogengine::Log::LogWithLevel(std::string const&,siri::dialogengine::LogLevel)::sLog)
    {
      printf("ERROR: Could not create OS log");
      return;
    }
  }
  siri::dialogengine::LogEntry::LogEntry((uint64_t)v28, a2, (__int128 *)a1);
  if (a2 >= 4)
    v7 = OS_LOG_TYPE_DEFAULT;
  else
    v7 = (0x10020001u >> (8 * a2));
  v8 = *(char *)(a1 + 23);
  if (v8 < 0 && (v9 = *(_QWORD *)(a1 + 8), v9 >= 0x401))
  {
    if (v9 <= 0xFFFFFFFFFFFFFC7ALL)
    {
      v17 = 0;
      do
      {
        std::string::basic_string[abi:ne180100]<0>(&buf, "\n");
        v18 = siri::dialogengine::StringRFind(a1, (uint64_t)&buf, v17 + 900);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
        v19 = *(unsigned __int8 *)(a1 + 23);
        if ((v19 & 0x80u) != 0)
          v19 = *(_QWORD *)(a1 + 8);
        if (v18 <= v17 || v18 == -1 || v17 + 900 > v19)
          v22 = v17 + 900;
        else
          v22 = v18;
        std::string::basic_string(&v27, (const std::string *)a1, v17, v22 - v17, (std::allocator<char> *)&buf);
        v23 = siri::dialogengine::Log::LogWithLevel(std::string const&,siri::dialogengine::LogLevel)::sLog;
        v12 = os_log_type_enabled((os_log_t)siri::dialogengine::Log::LogWithLevel(std::string const&,siri::dialogengine::LogLevel)::sLog, v7);
        if (v12)
        {
          size = HIBYTE(v27.__r_.__value_.__r.__words[2]);
          if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = v27.__r_.__value_.__l.__size_;
          v25 = size + v17;
          v26 = &v27;
          if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v26 = (std::string *)v27.__r_.__value_.__r.__words[0];
          LODWORD(buf.__r_.__value_.__l.__data_) = 134218498;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v17;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v25;
          HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
          v32 = v26;
          _os_log_impl(&dword_1BF794000, v23, v7, "LOG_CHUNK[%zu:%zu]=%s", (uint8_t *)&buf, 0x20u);
        }
        if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v27.__r_.__value_.__l.__data_);
        v17 = v22;
      }
      while (v22 < v9);
      goto LABEL_17;
    }
    v10 = siri::dialogengine::Log::LogWithLevel(std::string const&,siri::dialogengine::LogLevel)::sLog;
    v11 = v7;
    v12 = os_log_type_enabled((os_log_t)siri::dialogengine::Log::LogWithLevel(std::string const&,siri::dialogengine::LogLevel)::sLog, v7);
    if (v12)
    {
      v13 = *(_QWORD *)a1;
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v13;
LABEL_16:
      _os_log_impl(&dword_1BF794000, v10, v11, "%s", (uint8_t *)&buf, 0xCu);
    }
  }
  else
  {
    v10 = siri::dialogengine::Log::LogWithLevel(std::string const&,siri::dialogengine::LogLevel)::sLog;
    v11 = v7;
    v12 = os_log_type_enabled((os_log_t)siri::dialogengine::Log::LogWithLevel(std::string const&,siri::dialogengine::LogLevel)::sLog, v7);
    if (v12)
    {
      v14 = *(_QWORD *)a1;
      if (v8 >= 0)
        v14 = a1;
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v14;
      goto LABEL_16;
    }
  }
LABEL_17:
  siri::dialogengine::GetLogStateRef((siri::dialogengine *)v12);
  if ((_QWORD)xmmword_1EF5815C0)
  {
    siri::dialogengine::GetLogStateRef(v15);
    if (!(_QWORD)xmmword_1EF5815C0)
      std::__throw_bad_function_call[abi:ne180100]();
    v15 = (siri::dialogengine *)(*(uint64_t (**)(_QWORD, _BYTE *))(*(_QWORD *)xmmword_1EF5815C0 + 48))(xmmword_1EF5815C0, v28);
  }
  siri::dialogengine::GetLogStateRef(v15);
  if ((_BYTE)siri::dialogengine::GetLogStateRef(void)::logState)
  {
    siri::dialogengine::LogEntry::AsString((siri::dialogengine::LogEntry *)v28, &buf);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    {
      v16 = (void *)buf.__r_.__value_.__r.__words[0];
      puts(buf.__r_.__value_.__l.__data_);
      operator delete(v16);
    }
    else
    {
      puts((const char *)&buf);
    }
  }
  if (v30 < 0)
    operator delete(__p);
}

void sub_1BF893D54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetLogStateRef(siri::dialogengine *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      siri::dialogengine::GetLogStateRef(void)::logState = 0;
      xmmword_1EF5815C0 = 0u;
      unk_1EF5815D0 = 0u;
      byte_1EF5815E0 = 0;
      __cxa_atexit((void (*)(void *))siri::dialogengine::LogState::~LogState, &siri::dialogengine::GetLogStateRef(void)::logState, &dword_1BF794000);
    }
  }
}

void siri::dialogengine::LogState::~LogState(siri::dialogengine::LogState *this)
{
  siri::dialogengine::LogState *v2;
  uint64_t v3;
  void **v4;

  v4 = (void **)((char *)this + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  v2 = (siri::dialogengine::LogState *)*((_QWORD *)this + 4);
  if (v2 == (siri::dialogengine::LogState *)((char *)this + 8))
  {
    v3 = 4;
    v2 = (siri::dialogengine::LogState *)((char *)this + 8);
  }
  else
  {
    if (!v2)
      return;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
}

BOOL siri::dialogengine::Log::ShowDebug(siri::dialogengine::Log *this)
{
  siri::dialogengine *v1;

  siri::dialogengine::GetLogStateRef(this);
  return HIBYTE(siri::dialogengine::GetLogStateRef(void)::logState) || siri::dialogengine::EnableDebug(v1);
}

void siri::dialogengine::Log::Info(uint64_t a1)
{
  siri::dialogengine::Log::LogWithLevel(a1, 0);
}

void siri::dialogengine::Log::Warn(uint64_t a1)
{
  siri::dialogengine::Log::LogWithLevel(a1, 1u);
}

void siri::dialogengine::Log::Debug(siri::dialogengine *a1)
{
  siri::dialogengine *v2;

  siri::dialogengine::GetLogStateRef(a1);
  if (HIBYTE(siri::dialogengine::GetLogStateRef(void)::logState) || siri::dialogengine::EnableDebug(v2))
    siri::dialogengine::Log::LogWithLevel((uint64_t)a1, 2u);
}

void siri::dialogengine::Log::Error(uint64_t a1)
{
  siri::dialogengine::Log::LogWithLevel(a1, 3u);
}

void siri::dialogengine::Log::Info(siri::dialogengine::Log *this, const char *a2, ...)
{
  void *__p[2];
  char v4;
  va_list v5;
  char *v6;
  va_list va;

  va_start(va, a2);
  v6 = 0;
  va_copy(v5, va);
  vasprintf(&v6, (const char *)this, va);
  if (v6)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, v6);
    siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 0);
    if (v4 < 0)
      operator delete(__p[0]);
    free(v6);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)this);
    siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 0);
    if (v4 < 0)
      operator delete(__p[0]);
  }
}

void sub_1BF893F9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::Log::Warn(siri::dialogengine::Log *this, const char *a2, ...)
{
  void *__p[2];
  char v4;
  va_list v5;
  char *v6;
  va_list va;

  va_start(va, a2);
  v6 = 0;
  va_copy(v5, va);
  vasprintf(&v6, (const char *)this, va);
  if (v6)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, v6);
    siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 1u);
    if (v4 < 0)
      operator delete(__p[0]);
    free(v6);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)this);
    siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 1u);
    if (v4 < 0)
      operator delete(__p[0]);
  }
}

void sub_1BF89405C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::Log::Debug(siri::dialogengine::Log *this, const char *a2, ...)
{
  siri::dialogengine *v3;
  void *__p[2];
  char v5;
  va_list v6;
  char *v7;
  va_list va;

  va_start(va, a2);
  siri::dialogengine::GetLogStateRef(this);
  if (HIBYTE(siri::dialogengine::GetLogStateRef(void)::logState) || siri::dialogengine::EnableDebug(v3))
  {
    v7 = 0;
    va_copy(v6, va);
    vasprintf(&v7, (const char *)this, va);
    if (v7)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, v7);
      siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 2u);
      if (v5 < 0)
        operator delete(__p[0]);
      free(v7);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)this);
      siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 2u);
      if (v5 < 0)
        operator delete(__p[0]);
    }
  }
}

void sub_1BF894134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::Log::Error(siri::dialogengine::Log *this, const char *a2, ...)
{
  void *__p[2];
  char v4;
  va_list v5;
  char *v6;
  va_list va;

  va_start(va, a2);
  v6 = 0;
  va_copy(v5, va);
  vasprintf(&v6, (const char *)this, va);
  if (v6)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, v6);
    siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 3u);
    if (v4 < 0)
      operator delete(__p[0]);
    free(v6);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)this);
    siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 3u);
    if (v4 < 0)
      operator delete(__p[0]);
  }
}

void sub_1BF8941F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::Log::SetOutputToStdout(siri::dialogengine::Log *this)
{
  int v1;

  v1 = (int)this;
  siri::dialogengine::GetLogStateRef(this);
  LOBYTE(siri::dialogengine::GetLogStateRef(void)::logState) = v1;
  if (v1)
    morphun::util::LoggerConfig::logToConsole((morphun::util::LoggerConfig *)1);
}

uint64_t siri::dialogengine::Log::IsOutputToStdout(siri::dialogengine::Log *this)
{
  siri::dialogengine::GetLogStateRef(this);
  return siri::dialogengine::GetLogStateRef(void)::logState;
}

void siri::dialogengine::Log::SetLogDebugMessages(siri::dialogengine::Log *this)
{
  char v1;
  siri::dialogengine *v2;
  morphun::util::LoggerConfig *v3;

  v1 = (char)this;
  siri::dialogengine::GetLogStateRef(this);
  HIBYTE(siri::dialogengine::GetLogStateRef(void)::logState) = v1;
  siri::dialogengine::GetLogStateRef(v2);
  if (HIBYTE(siri::dialogengine::GetLogStateRef(void)::logState))
  {
    if (morphun::util::LoggerConfig::getLogLevel(v3) >= 2)
      morphun::util::LoggerConfig::setLogLevel();
  }
}

uint64_t siri::dialogengine::Log::IsLogDebugMessages(siri::dialogengine::Log *this)
{
  siri::dialogengine::GetLogStateRef(this);
  return HIBYTE(siri::dialogengine::GetLogStateRef(void)::logState);
}

_QWORD *siri::dialogengine::Log::SetLoggerCallback(siri::dialogengine *a1)
{
  siri::dialogengine *v2;
  _QWORD *result;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  _QWORD v8[4];

  v8[3] = *MEMORY[0x1E0C80C00];
  siri::dialogengine::GetLogStateRef(a1);
  v2 = (siri::dialogengine *)*((_QWORD *)a1 + 3);
  if (!v2)
  {
    v7 = 0;
    v4 = (_QWORD *)xmmword_1EF5815C0;
    if ((uint64_t *)xmmword_1EF5815C0 != &qword_1EF5815A8)
    {
      result = 0;
LABEL_9:
      v7 = v4;
      *(_QWORD *)&xmmword_1EF5815C0 = result;
      goto LABEL_14;
    }
LABEL_10:
    v4 = v6;
    (*(void (**)(void))(qword_1EF5815A8 + 24))();
    (*(void (**)(_QWORD))(*(_QWORD *)xmmword_1EF5815C0 + 32))(xmmword_1EF5815C0);
    *(_QWORD *)&xmmword_1EF5815C0 = v7;
    v7 = v6;
    v5 = 4;
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 8 * v5))(v4);
  }
  if (v2 == a1)
  {
    v7 = v6;
    (*(void (**)(siri::dialogengine *, _QWORD *))(*(_QWORD *)a1 + 24))(a1, v6);
    result = v7;
  }
  else
  {
    result = (_QWORD *)(*(uint64_t (**)(siri::dialogengine *))(*(_QWORD *)v2 + 16))(v2);
    v7 = result;
  }
  v4 = (_QWORD *)xmmword_1EF5815C0;
  if (result != v6)
  {
    if ((uint64_t *)xmmword_1EF5815C0 != &qword_1EF5815A8)
      goto LABEL_9;
    goto LABEL_10;
  }
  if ((uint64_t *)xmmword_1EF5815C0 == &qword_1EF5815A8)
  {
    (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, v8);
    (*(void (**)(_QWORD *))(*v7 + 32))(v7);
    v7 = 0;
    (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)xmmword_1EF5815C0 + 24))(xmmword_1EF5815C0, v6);
    (*(void (**)(_QWORD))(*(_QWORD *)xmmword_1EF5815C0 + 32))(xmmword_1EF5815C0);
    *(_QWORD *)&xmmword_1EF5815C0 = 0;
    v7 = v6;
    (*(void (**)(_QWORD *, uint64_t *))(v8[0] + 24))(v8, &qword_1EF5815A8);
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v8[0] + 32))(v8);
    *(_QWORD *)&xmmword_1EF5815C0 = &qword_1EF5815A8;
    v4 = v7;
  }
  else
  {
    (*(void (**)(_QWORD *, uint64_t *))(v6[0] + 24))(v6, &qword_1EF5815A8);
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v7 + 32))(v7);
    v4 = (_QWORD *)xmmword_1EF5815C0;
    v7 = (_QWORD *)xmmword_1EF5815C0;
    *(_QWORD *)&xmmword_1EF5815C0 = &qword_1EF5815A8;
  }
LABEL_14:
  if (v4 == v6)
  {
    v5 = 4;
    v4 = v6;
  }
  else
  {
    if (!v4)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 8 * v5))(v4);
}

void sub_1BF894508(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sub_1BF8945A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  void *v15;

  if (a14 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1BF894664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  void *v15;

  if (a14 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1BF894724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  void *v15;

  if (a14 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t SnippetUI::Idiom_descriptor(SnippetUI *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_Idiom_2eproto);
  return file_level_enum_descriptors_Idiom_2eproto;
}

BOOL SnippetUI::Idiom_IsValid(SnippetUI *this)
{
  return this < 0xA;
}

void siri::dialogengine::CollectDialogIdsVisitor::~CollectDialogIdsVisitor(char **this)
{
  *this = (char *)&off_1E792D2C8;
  std::__tree<std::string>::destroy((uint64_t)(this + 1), this[2]);
}

{
  *this = (char *)&off_1E792D2C8;
  std::__tree<std::string>::destroy((uint64_t)(this + 1), this[2]);
  JUMPOUT(0x1C3B8D890);
}

void siri::dialogengine::CollectDialogIdsVisitor::Visit(uint64_t **this, const siri::dialogengine::Dialog *a2)
{
  std::string::size_type size;
  char v4;
  std::string __p;

  if (*((char *)a2 + 119) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 12), *((_QWORD *)a2 + 13));
  else
    __p = *(std::string *)((_BYTE *)a2 + 4);
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  v4 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size)
  {
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(this + 1, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
    v4 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  if (v4 < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF89488C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::CollectDialogIdsVisitor::GetDialogIds(siri::dialogengine::CollectDialogIdsVisitor *this)
{
  return (uint64_t)this + 8;
}

_QWORD *siri::dialogengine::CreateJSONBoolVal@<X0>(siri::dialogengine *this@<X0>, uint64_t *a2@<X8>)
{
  char v2;
  uint64_t v4;
  _QWORD *result;

  v2 = (char)this;
  v4 = operator new();
  *(_DWORD *)(v4 + 8) = 3;
  *(_QWORD *)v4 = &off_1E7933FB8;
  *(_BYTE *)(v4 + 12) = v2;
  *a2 = v4;
  result = (_QWORD *)operator new();
  *result = &off_1E792B8F0;
  result[1] = 0;
  result[2] = 0;
  result[3] = v4;
  a2[1] = (uint64_t)result;
  return result;
}

void sub_1BF894940(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<siri::dialogengine::BoolValue *,std::shared_ptr<siri::dialogengine::JSONValue>::__shared_ptr_default_delete<siri::dialogengine::JSONValue,siri::dialogengine::BoolValue>,std::allocator<siri::dialogengine::BoolValue>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::BoolValue *,std::shared_ptr<siri::dialogengine::JSONValue>::__shared_ptr_default_delete<siri::dialogengine::JSONValue,siri::dialogengine::BoolValue>,std::allocator<siri::dialogengine::BoolValue>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::BoolValue *,std::shared_ptr<siri::dialogengine::JSONValue>::__shared_ptr_default_delete<siri::dialogengine::JSONValue,siri::dialogengine::BoolValue>,std::allocator<siri::dialogengine::BoolValue>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *siri::dialogengine::CreateJSONDoubleVal@<X0>(double a1@<D0>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  _QWORD *result;

  v5 = operator new();
  *(_DWORD *)(v5 + 8) = 5;
  *(_QWORD *)v5 = &off_1E7933FF8;
  *(double *)(v5 + 16) = a1;
  *a2 = v5;
  result = (_QWORD *)operator new();
  *result = &off_1E792B968;
  result[1] = 0;
  result[2] = 0;
  result[3] = v5;
  a2[1] = (uint64_t)result;
  return result;
}

void sub_1BF894A68(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<siri::dialogengine::DoubleValue *,std::shared_ptr<siri::dialogengine::JSONValue>::__shared_ptr_default_delete<siri::dialogengine::JSONValue,siri::dialogengine::DoubleValue>,std::allocator<siri::dialogengine::DoubleValue>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::DoubleValue *,std::shared_ptr<siri::dialogengine::JSONValue>::__shared_ptr_default_delete<siri::dialogengine::JSONValue,siri::dialogengine::DoubleValue>,std::allocator<siri::dialogengine::DoubleValue>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::DoubleValue *,std::shared_ptr<siri::dialogengine::JSONValue>::__shared_ptr_default_delete<siri::dialogengine::JSONValue,siri::dialogengine::DoubleValue>,std::allocator<siri::dialogengine::DoubleValue>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *siri::dialogengine::CreateJSONStringVal@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  std::string *v5;
  _QWORD *result;

  v4 = operator new();
  *(_DWORD *)(v4 + 8) = 4;
  *(_QWORD *)v4 = off_1E7933FD8;
  v5 = (std::string *)(v4 + 16);
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    *(_QWORD *)(v4 + 32) = *(_QWORD *)(a1 + 16);
  }
  *a2 = v4;
  result = (_QWORD *)operator new();
  *result = &off_1E792B9E0;
  result[1] = 0;
  result[2] = 0;
  result[3] = v4;
  a2[1] = (uint64_t)result;
  return result;
}

void sub_1BF894BB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x1093C40E92185C3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<siri::dialogengine::StringValue *,std::shared_ptr<siri::dialogengine::JSONValue>::__shared_ptr_default_delete<siri::dialogengine::JSONValue,siri::dialogengine::StringValue>,std::allocator<siri::dialogengine::StringValue>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::StringValue *,std::shared_ptr<siri::dialogengine::JSONValue>::__shared_ptr_default_delete<siri::dialogengine::JSONValue,siri::dialogengine::StringValue>,std::allocator<siri::dialogengine::StringValue>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::StringValue *,std::shared_ptr<siri::dialogengine::JSONValue>::__shared_ptr_default_delete<siri::dialogengine::JSONValue,siri::dialogengine::StringValue>,std::allocator<siri::dialogengine::StringValue>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *siri::dialogengine::CreateJSONIntVal@<X0>(siri::dialogengine *this@<X0>, uint64_t *a2@<X8>)
{
  int v2;
  uint64_t v4;
  _QWORD *result;

  v2 = (int)this;
  v4 = operator new();
  *(_QWORD *)v4 = &off_1E7933F58;
  *(_DWORD *)(v4 + 8) = 0;
  *(_DWORD *)(v4 + 12) = v2;
  *a2 = v4;
  result = (_QWORD *)operator new();
  *result = &off_1E792BA58;
  result[1] = 0;
  result[2] = 0;
  result[3] = v4;
  a2[1] = (uint64_t)result;
  return result;
}

void sub_1BF894CF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<siri::dialogengine::IntValue *,std::shared_ptr<siri::dialogengine::JSONValue>::__shared_ptr_default_delete<siri::dialogengine::JSONValue,siri::dialogengine::IntValue>,std::allocator<siri::dialogengine::IntValue>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::IntValue *,std::shared_ptr<siri::dialogengine::JSONValue>::__shared_ptr_default_delete<siri::dialogengine::JSONValue,siri::dialogengine::IntValue>,std::allocator<siri::dialogengine::IntValue>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::IntValue *,std::shared_ptr<siri::dialogengine::JSONValue>::__shared_ptr_default_delete<siri::dialogengine::JSONValue,siri::dialogengine::IntValue>,std::allocator<siri::dialogengine::IntValue>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *siri::dialogengine::CreateJSONUintVal@<X0>(siri::dialogengine *this@<X0>, uint64_t *a2@<X8>)
{
  int v2;
  uint64_t v4;
  _QWORD *result;

  v2 = (int)this;
  v4 = operator new();
  *(_QWORD *)v4 = &off_1E7933F78;
  *(_DWORD *)(v4 + 8) = 1;
  *(_DWORD *)(v4 + 12) = v2;
  *a2 = v4;
  result = (_QWORD *)operator new();
  *result = &off_1E792BAD0;
  result[1] = 0;
  result[2] = 0;
  result[3] = v4;
  a2[1] = (uint64_t)result;
  return result;
}

void sub_1BF894E14(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<siri::dialogengine::UintValue *,std::shared_ptr<siri::dialogengine::JSONValue>::__shared_ptr_default_delete<siri::dialogengine::JSONValue,siri::dialogengine::UintValue>,std::allocator<siri::dialogengine::UintValue>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::UintValue *,std::shared_ptr<siri::dialogengine::JSONValue>::__shared_ptr_default_delete<siri::dialogengine::JSONValue,siri::dialogengine::UintValue>,std::allocator<siri::dialogengine::UintValue>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::UintValue *,std::shared_ptr<siri::dialogengine::JSONValue>::__shared_ptr_default_delete<siri::dialogengine::JSONValue,siri::dialogengine::UintValue>,std::allocator<siri::dialogengine::UintValue>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *siri::dialogengine::CreateJSONInt64Val@<X0>(siri::dialogengine *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  _QWORD *result;

  v4 = operator new();
  *(_DWORD *)(v4 + 8) = 2;
  *(_QWORD *)v4 = &off_1E7933F98;
  *(_QWORD *)(v4 + 16) = this;
  *a2 = v4;
  result = (_QWORD *)operator new();
  *result = &off_1E792BB48;
  result[1] = 0;
  result[2] = 0;
  result[3] = v4;
  a2[1] = (uint64_t)result;
  return result;
}

void sub_1BF894F3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<siri::dialogengine::Int64Value *,std::shared_ptr<siri::dialogengine::JSONValue>::__shared_ptr_default_delete<siri::dialogengine::JSONValue,siri::dialogengine::Int64Value>,std::allocator<siri::dialogengine::Int64Value>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::Int64Value *,std::shared_ptr<siri::dialogengine::JSONValue>::__shared_ptr_default_delete<siri::dialogengine::JSONValue,siri::dialogengine::Int64Value>,std::allocator<siri::dialogengine::Int64Value>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::Int64Value *,std::shared_ptr<siri::dialogengine::JSONValue>::__shared_ptr_default_delete<siri::dialogengine::JSONValue,siri::dialogengine::Int64Value>,std::allocator<siri::dialogengine::Int64Value>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *siri::dialogengine::CreateJSONObjectVal@<X0>(const void ***a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  _QWORD *result;

  v4 = operator new();
  *(_DWORD *)(v4 + 8) = 6;
  *(_QWORD *)v4 = &off_1E7933F38;
  std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100](v4 + 16, a1);
  *a2 = v4;
  result = (_QWORD *)operator new();
  *result = &off_1E792BBC0;
  result[1] = 0;
  result[2] = 0;
  result[3] = v4;
  a2[1] = (uint64_t)result;
  return result;
}

void sub_1BF895068(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<siri::dialogengine::ObjectValue *,std::shared_ptr<siri::dialogengine::JSONValue>::__shared_ptr_default_delete<siri::dialogengine::JSONValue,siri::dialogengine::ObjectValue>,std::allocator<siri::dialogengine::ObjectValue>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::ObjectValue *,std::shared_ptr<siri::dialogengine::JSONValue>::__shared_ptr_default_delete<siri::dialogengine::JSONValue,siri::dialogengine::ObjectValue>,std::allocator<siri::dialogengine::ObjectValue>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::ObjectValue *,std::shared_ptr<siri::dialogengine::JSONValue>::__shared_ptr_default_delete<siri::dialogengine::JSONValue,siri::dialogengine::ObjectValue>,std::allocator<siri::dialogengine::ObjectValue>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *siri::dialogengine::CreateJSONArrayVal@<X0>(_QWORD **a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;

  v4 = operator new();
  *(_DWORD *)(v4 + 8) = 7;
  *(_QWORD *)v4 = &off_1E7933F18;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::JSONValue>*,std::shared_ptr<siri::dialogengine::JSONValue>*>((char *)(v4 + 16), *a1, a1[1], ((char *)a1[1] - (char *)*a1) >> 4);
  return std::shared_ptr<siri::dialogengine::JSONValue>::shared_ptr[abi:ne180100]<siri::dialogengine::ArrayValue,void>(a2, v4);
}

void sub_1BF89519C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C4037ACD87BLL);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<siri::dialogengine::JSONValue>::shared_ptr[abi:ne180100]<siri::dialogengine::ArrayValue,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E7938F60;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1BF895214(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<siri::dialogengine::ArrayValue *,std::shared_ptr<siri::dialogengine::JSONValue>::__shared_ptr_default_delete<siri::dialogengine::JSONValue,siri::dialogengine::ArrayValue>,std::allocator<siri::dialogengine::ArrayValue>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::ArrayValue *,std::shared_ptr<siri::dialogengine::JSONValue>::__shared_ptr_default_delete<siri::dialogengine::JSONValue,siri::dialogengine::ArrayValue>,std::allocator<siri::dialogengine::ArrayValue>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::ArrayValue *,std::shared_ptr<siri::dialogengine::JSONValue>::__shared_ptr_default_delete<siri::dialogengine::JSONValue,siri::dialogengine::ArrayValue>,std::allocator<siri::dialogengine::ArrayValue>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

BOOL siri::dialogengine::GetJSONBoolVal(const void **a1, const char *a2)
{
  const void *v2;
  _BYTE *v3;

  v2 = *a1;
  if (v2)
  {
    if (v3)
      return v3[12] != 0;
  }
  siri::dialogengine::Log::Error((siri::dialogengine::Log *)"JSONValue is not of type BoolValue!", a2);
  return 0;
}

double siri::dialogengine::GetJSONDoubleVal(const void **a1, const char *a2)
{
  const void *v2;
  double *v3;

  v2 = *a1;
  if (v2)
  {
    if (v3)
      return v3[2];
  }
  siri::dialogengine::Log::Error((siri::dialogengine::Log *)"JSONValue is not of type DoubleValue!", a2);
  return 0.0;
}

void siri::dialogengine::GetJSONStringVal(const void **a1@<X0>, const char *a2@<X1>, std::string *a3@<X8>)
{
  const void *v4;
  char *v5;
  __int128 v6;

  v4 = *a1;
  if (v4
  {
    if (v5[39] < 0)
    {
      std::string::__init_copy_ctor_external(a3, *((const std::string::value_type **)v5 + 2), *((_QWORD *)v5 + 3));
    }
    else
    {
      v6 = *((_OWORD *)v5 + 1);
      a3->__r_.__value_.__r.__words[2] = *((_QWORD *)v5 + 4);
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v6;
    }
  }
  else
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"JSONValue is not of type StringValue!", a2);
    std::string::basic_string[abi:ne180100]<0>(a3, "");
  }
}

uint64_t siri::dialogengine::GetJSONIntVal(const void **a1, const char *a2)
{
  const void *v2;
  unsigned int *v3;

  v2 = *a1;
  if (v2)
  {
    if (v3)
      return v3[3];
  }
  siri::dialogengine::Log::Error((siri::dialogengine::Log *)"JSONValue is not of type IntValue!", a2);
  return 0xFFFFFFFFLL;
}

uint64_t siri::dialogengine::GetJSONUintVal(const void **a1, const char *a2)
{
  const void *v2;
  unsigned int *v3;

  v2 = *a1;
  if (v2)
  {
    if (v3)
      return v3[3];
  }
  siri::dialogengine::Log::Error((siri::dialogengine::Log *)"JSONValue is not of type UintValue!", a2);
  return 0;
}

uint64_t siri::dialogengine::GetJSONInt64Val(const void **a1, const char *a2)
{
  const void *v2;
  _QWORD *v3;

  v2 = *a1;
  if (v2)
  {
    if (v3)
      return v3[2];
  }
  siri::dialogengine::Log::Error((siri::dialogengine::Log *)"JSONValue is not of type Int64Value!", a2);
  return 0;
}

void siri::dialogengine::GetJSONObjectVal(const void **a1@<X0>, const char *a2@<X1>, _QWORD *a3@<X8>)
{
  const void *v4;
  const void ***v5;

  v4 = *a1;
  if (v4
  {
    std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100]((uint64_t)a3, v5 + 2);
  }
  else
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"JSONValue is not of type ObjectValue!", a2);
    a3[2] = 0;
    a3[1] = 0;
    *a3 = a3 + 1;
  }
}

void siri::dialogengine::GetJSONArrayVal(const void **a1@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  const void *v4;
  _QWORD **v5;

  v4 = *a1;
  if (v4
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::JSONValue>*,std::shared_ptr<siri::dialogengine::JSONValue>*>((char *)a3, v5[2], v5[3], ((char *)v5[3] - (char *)v5[2]) >> 4);
  }
  else
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"JSONValue is not of type ArrayValue!", a2);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
}

void siri::dialogengine::SetJSONObjectVal(const void **a1, _QWORD *a2)
{
  const void *v2;
  void *v4;

  v2 = *a1;
  if (v2)
  {
    if (v4)
      siri::dialogengine::ObjectValue::SetVal((uint64_t)v4, a2);
  }
}

void siri::dialogengine::InsertJSONObjectVal(const void **a1, uint64_t a2, uint64_t *a3)
{
  const void *v3;
  void *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13[2];

  v3 = *a1;
  if (v3)
  {
    if (v6)
    {
      v7 = *a3;
      v8 = (std::__shared_weak_count *)a3[1];
      v13[0] = v7;
      v13[1] = (uint64_t)v8;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      siri::dialogengine::ObjectValue::InsertVal((uint64_t)v6, a2, v13);
      if (v8)
      {
        v11 = (unint64_t *)&v8->__shared_owners_;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
  }
}

void sub_1BF8956BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void siri::dialogengine::FindAndInsertJSONObjectVal(const void **a1, unsigned __int8 *a2, uint64_t a3, _QWORD *a4)
{
  const void *v4;
  const void ***v8;
  _QWORD **v9;
  _DWORD *v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  const void **v16;
  unsigned __int8 *v17;
  _QWORD **v18;
  uint64_t v19;
  uint64_t v20;
  const void *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  void *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  _QWORD *v48;
  _QWORD **v49;
  BOOL v50;
  _QWORD v51[2];
  const void *v52;
  std::__shared_weak_count *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[2];
  _DWORD *v58;
  std::__shared_weak_count *v59;
  uint64_t v60[2];
  _QWORD **v61;
  _QWORD *v62[2];
  void **v63;

  v4 = *a1;
  if (v4)
  {
    if (v8)
    {
      std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100]((uint64_t)&v61, v8 + 2);
      v9 = v61;
      if (v61 != v62)
      {
        while (1)
        {
          v10 = v9[7];
          v11 = v10[2];
          if (v11 == 7)
          {
            if (v18)
            {
              v54 = 0;
              v55 = 0;
              v56 = 0;
              std::vector<std::shared_ptr<siri::dialogengine::JSONValue>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::JSONValue>*,std::shared_ptr<siri::dialogengine::JSONValue>*>((char *)&v54, v18[2], v18[3], ((char *)v18[3] - (char *)v18[2]) >> 4);
              v20 = v54;
              v19 = v55;
              while (v20 != v19)
              {
                v21 = *(const void **)v20;
                if (*(_QWORD *)v20
                {
                  v22 = *(std::__shared_weak_count **)(v20 + 8);
                  v52 = v21;
                  v53 = v22;
                  if (v22)
                  {
                    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
                    do
                      v24 = __ldxr(p_shared_owners);
                    while (__stxr(v24 + 1, p_shared_owners));
                  }
                  v25 = (std::__shared_weak_count *)a4[1];
                  v51[0] = *a4;
                  v51[1] = v25;
                  if (v25)
                  {
                    v26 = (unint64_t *)&v25->__shared_owners_;
                    do
                      v27 = __ldxr(v26);
                    while (__stxr(v27 + 1, v26));
                  }
                  siri::dialogengine::FindAndInsertJSONObjectVal(&v52, a2, a3, v51);
                  if (v25)
                  {
                    v28 = (unint64_t *)&v25->__shared_owners_;
                    do
                      v29 = __ldaxr(v28);
                    while (__stlxr(v29 - 1, v28));
                    if (!v29)
                    {
                      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
                      std::__shared_weak_count::__release_weak(v25);
                    }
                  }
                  v30 = v53;
                  if (v53)
                  {
                    v31 = (unint64_t *)&v53->__shared_owners_;
                    do
                      v32 = __ldaxr(v31);
                    while (__stlxr(v32 - 1, v31));
                    if (!v32)
                    {
                      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
                      std::__shared_weak_count::__release_weak(v30);
                    }
                  }
                }
                v20 += 16;
              }
              v63 = (void **)&v54;
              std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v63);
            }
            goto LABEL_69;
          }
          if (v11 == 6)
            break;
LABEL_69:
          v48 = v9[1];
          if (v48)
          {
            do
            {
              v49 = (_QWORD **)v48;
              v48 = (_QWORD *)*v48;
            }
            while (v48);
          }
          else
          {
            do
            {
              v49 = (_QWORD **)v9[2];
              v50 = *v49 == v9;
              v9 = v49;
            }
            while (!v50);
          }
          v9 = v49;
          if (v49 == v62)
            goto LABEL_75;
        }
        v12 = *((unsigned __int8 *)v9 + 55);
        if ((v12 & 0x80u) == 0)
          v13 = (_QWORD *)*((unsigned __int8 *)v9 + 55);
        else
          v13 = v9[5];
        v14 = a2[23];
        v15 = (char)v14;
        if ((v14 & 0x80u) != 0)
          v14 = *((_QWORD *)a2 + 1);
        if (v13 != (_QWORD *)v14)
          goto LABEL_45;
        v16 = (const void **)(v9 + 4);
        if (v15 >= 0)
          v17 = a2;
        else
          v17 = *(unsigned __int8 **)a2;
        if ((v12 & 0x80) != 0)
        {
          if (memcmp(*v16, v17, (size_t)v9[5]))
          {
LABEL_45:
            v33 = (std::__shared_weak_count *)v9[8];
            v58 = v10;
            v59 = v33;
            if (v33)
            {
              v34 = (unint64_t *)&v33->__shared_owners_;
              do
                v35 = __ldxr(v34);
              while (__stxr(v35 + 1, v34));
            }
            v36 = (std::__shared_weak_count *)a4[1];
            v57[0] = *a4;
            v57[1] = v36;
            if (v36)
            {
              v37 = (unint64_t *)&v36->__shared_owners_;
              do
                v38 = __ldxr(v37);
              while (__stxr(v38 + 1, v37));
            }
            siri::dialogengine::FindAndInsertJSONObjectVal(&v58, a2, a3, v57);
            if (v36)
            {
              v39 = (unint64_t *)&v36->__shared_owners_;
              do
                v40 = __ldaxr(v39);
              while (__stlxr(v40 - 1, v39));
              if (!v40)
              {
                ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
                std::__shared_weak_count::__release_weak(v36);
              }
            }
            v41 = v59;
            if (!v59)
              goto LABEL_69;
            v42 = (unint64_t *)&v59->__shared_owners_;
            do
              v43 = __ldaxr(v42);
            while (__stlxr(v43 - 1, v42));
LABEL_59:
            if (!v43)
            {
              ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
              std::__shared_weak_count::__release_weak(v41);
            }
            goto LABEL_69;
          }
        }
        else if (*((_BYTE *)v9 + 55))
        {
          while (*(unsigned __int8 *)v16 == *v17)
          {
            v16 = (const void **)((char *)v16 + 1);
            ++v17;
            if (!--v12)
            {
              if (v10)
                goto LABEL_61;
              goto LABEL_69;
            }
          }
          goto LABEL_45;
        }
LABEL_61:
        if (!v44)
          goto LABEL_69;
        v41 = (std::__shared_weak_count *)a4[1];
        v60[0] = *a4;
        v60[1] = (uint64_t)v41;
        if (v41)
        {
          v45 = (unint64_t *)&v41->__shared_owners_;
          do
            v46 = __ldxr(v45);
          while (__stxr(v46 + 1, v45));
        }
        siri::dialogengine::ObjectValue::InsertVal((uint64_t)v44, a3, v60);
        if (!v41)
          goto LABEL_69;
        v47 = (unint64_t *)&v41->__shared_owners_;
        do
          v43 = __ldaxr(v47);
        while (__stlxr(v43 - 1, v47));
        goto LABEL_59;
      }
LABEL_75:
      std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(v62[0]);
    }
  }
}

void sub_1BF895AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,_QWORD *a24)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(a24);
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::ParseJSONString@<X0>(unsigned int *a1@<X0>, const char *a2@<X1>, _QWORD *a3@<X8>)
{
  const char *v3;
  const char *v6;
  uint64_t v7;
  std::string *v8;
  __int128 v9;
  char *String;
  std::string v12;
  void *__p[2];
  std::string::size_type v14;

  v3 = a2;
  if (a2[23] < 0)
    a2 = *(const char **)a2;
  if (!rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember(a1, a2))return std::string::basic_string[abi:ne180100]<0>(a3, "");
  if (v3[23] >= 0)
    v6 = v3;
  else
    v6 = *(const char **)v3;
  v7 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>(a1, v6);
  if ((*(_WORD *)(v7 + 22) & 0x400) == 0)
  {
    std::operator+<char>();
    v8 = std::string::append(&v12, " is not a string type");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v14 = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 3u);
    if (SHIBYTE(v14) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
    return std::string::basic_string[abi:ne180100]<0>(a3, "");
  }
  String = (char *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetString(v7);
  return std::string::basic_string[abi:ne180100]<0>(a3, String);
}

void sub_1BF895C0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

BOOL rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember(unsigned int *a1, const char *a2)
{
  uint64_t v4;
  _QWORD v5[4];

  v5[3] = *MEMORY[0x1E0C80C00];
  v5[1] = a2;
  v5[2] = 0x405000000000000;
  v5[0] = rapidjson::GenericStringRef<char>::NotNullStrLen(a2);
  rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::FindMember<rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>((uint64_t)&v4, a1, (uint64_t)v5);
  if (*((_WORD *)a1 + 11) != 3)
    __assert_rtn("MemberEnd", "document.h", 1158, "IsObject()");
  return v4 != *((_QWORD *)a1 + 1) + 48 * *a1;
}

uint64_t rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>(unsigned int *a1, const char *a2)
{
  uint64_t v4;
  _QWORD v5[4];

  v5[3] = *MEMORY[0x1E0C80C00];
  v5[1] = a2;
  v5[2] = 0x405000000000000;
  v5[0] = rapidjson::GenericStringRef<char>::NotNullStrLen(a2);
  rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::FindMember<rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>((uint64_t)&v4, a1, (uint64_t)v5);
  if (*((_WORD *)a1 + 11) != 3)
    __assert_rtn("MemberEnd", "document.h", 1164, "IsObject()");
  if (v4 == *((_QWORD *)a1 + 1) + 48 * *a1)
    __assert_rtn("operator[]", "document.h", 1133, "false");
  return v4 + 24;
}

uint64_t rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetString(uint64_t result)
{
  if ((*(_WORD *)(result + 22) & 0x400) == 0)
    __assert_rtn("GetString", "document.h", 1767, "IsString()");
  if ((*(_WORD *)(result + 22) & 0x1000) == 0)
    return *(_QWORD *)(result + 8);
  return result;
}

size_t rapidjson::GenericStringRef<char>::NotNullStrLen(const char *a1)
{
  if (!a1)
    __assert_rtn("NotNullStrLen", "document.h", 334, "str != 0");
  return strlen(a1);
}

uint64_t rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::FindMember<rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>(uint64_t result, unsigned int *a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  unsigned int StringLength;
  const void *String;

  if (*((_WORD *)a2 + 11) != 3)
    __assert_rtn("FindMember", "document.h", 1249, "IsObject()");
  if ((*(_WORD *)(a3 + 22) & 0x400) == 0)
    __assert_rtn("FindMember", "document.h", 1250, "name.IsString()");
  v5 = (_QWORD *)result;
  v6 = *((_QWORD *)a2 + 1);
  *(_QWORD *)result = v6;
  while (v6 != *((_QWORD *)a2 + 1) + 48 * *a2)
  {
    if ((*(_WORD *)(a3 + 22) & 0x400) == 0)
      __assert_rtn("StringEqual", "document.h", 2086, "IsString()");
    if ((*(_WORD *)(v6 + 22) & 0x400) == 0)
      __assert_rtn("StringEqual", "document.h", 2087, "rhs.IsString()");
    StringLength = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetStringLength((unsigned int *)a3);
    result = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetStringLength((unsigned int *)v6);
    if (StringLength == (_DWORD)result)
    {
      String = (const void *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetString(a3);
      result = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetString(v6);
      if (String == (const void *)result)
        break;
      result = memcmp(String, (const void *)result, StringLength);
      if (!(_DWORD)result)
        break;
    }
    v6 += 48;
    *v5 = v6;
    if (*((_WORD *)a2 + 11) != 3)
      __assert_rtn("MemberEnd", "document.h", 1164, "IsObject()");
  }
  return result;
}

uint64_t rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetStringLength(unsigned int *a1)
{
  if ((*((_WORD *)a1 + 11) & 0x400) == 0)
    __assert_rtn("GetStringLength", "document.h", 1772, "IsString()");
  if ((*((_WORD *)a1 + 11) & 0x1000) != 0)
    return (21 - *((char *)a1 + 21));
  else
    return *a1;
}

double siri::dialogengine::ParseJSONDouble(unsigned int *a1, const char *a2)
{
  const char *v2;
  const char *v4;
  _WORD *v5;
  double v6;
  std::string *v7;
  __int128 v8;
  std::string v10;
  void *__p[2];
  std::string::size_type v12;

  v2 = a2;
  if (a2[23] < 0)
    a2 = *(const char **)a2;
  if (!rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember(a1, a2))return 0.0;
  if (v2[23] >= 0)
    v4 = v2;
  else
    v4 = *(const char **)v2;
  v5 = (_WORD *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>(a1, v4);
  if ((v5[11] & 0x200) == 0)
  {
    std::operator+<char>();
    v7 = std::string::append(&v10, " is not a double type");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v12 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 3u);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v10.__r_.__value_.__l.__data_);
    return 0.0;
  }
  return rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetDouble(v5, v6);
}

void sub_1BF89612C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

double rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetDouble(_WORD *a1, double a2)
{
  __int16 v2;

  v2 = a1[11];
  if ((v2 & 0x10) == 0)
    __assert_rtn("GetDouble", "document.h", 1740, "IsNumber()");
  if ((a1[11] & 0x200) != 0)
    return *(double *)a1;
  if ((v2 & 0x20) != 0)
    return (double)*(int *)a1;
  if ((v2 & 0x40) != 0)
  {
    LODWORD(a2) = *(_DWORD *)a1;
    return (double)*(unint64_t *)&a2;
  }
  if ((v2 & 0x80) == 0)
  {
    if ((a1[11] & 0x100) == 0)
      __assert_rtn("GetDouble", "document.h", 1745, "(data_.f.flags & kUint64Flag) != 0");
    a2 = *(double *)a1;
    return (double)*(unint64_t *)&a2;
  }
  return (double)*(uint64_t *)a1;
}

uint64_t siri::dialogengine::ParseJSONUint(unsigned int *a1, const char *a2)
{
  const char *v2;
  uint64_t result;
  const char *v5;
  _WORD *v6;
  std::string *v7;
  __int128 v8;
  std::string v9;
  void *__p[2];
  std::string::size_type v11;

  v2 = a2;
  if (a2[23] < 0)
    a2 = *(const char **)a2;
  result = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember(a1, a2);
  if ((_DWORD)result)
  {
    if (v2[23] >= 0)
      v5 = v2;
    else
      v5 = *(const char **)v2;
    v6 = (_WORD *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>(a1, v5);
    if ((v6[11] & 0x40) != 0)
    {
      return *(unsigned int *)v6;
    }
    else
    {
      std::operator+<char>();
      v7 = std::string::append(&v9, " is not an unsigned int type");
      v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v11 = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 3u);
      if (SHIBYTE(v11) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v9.__r_.__value_.__l.__data_);
      return 0;
    }
  }
  return result;
}

void sub_1BF8962D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

unsigned int *siri::dialogengine::SetJSONBool(unsigned int *a1, uint64_t a2, int a3)
{
  uint64_t v3;
  int v6;
  const char *v7;
  uint64_t v8;
  unsigned int *result;
  uint64_t v10;
  __int16 v11;
  __int16 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 __dst;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)a1 + 3);
  if (!v3)
    __assert_rtn("GetAllocator", "document.h", 2407, "allocator_");
  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (const char *)a2;
  else
    v7 = *(const char **)a2;
  if (v6 >= 0)
    LODWORD(v8) = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  *((_QWORD *)&__dst + 1) = v7;
  v17 = 0x405000000000000;
  *(_QWORD *)&__dst = rapidjson::GenericStringRef<char>::NotNullStrLen(v7);
  result = (unsigned int *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::FindMember<rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>((uint64_t)&v13, a1, (uint64_t)&__dst);
  if (*((_WORD *)a1 + 11) != 3)
    __assert_rtn("MemberEnd", "document.h", 1164, "IsObject()");
  v10 = v13;
  if (v13 == *((_QWORD *)a1 + 1) + 48 * *a1)
  {
    __dst = 0uLL;
    v17 = 0;
    rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::SetString(&__dst, v7, v8, v3);
    *((_QWORD *)&v14 + 1) = 0;
    v15 = 0;
    if (a3)
      v12 = 10;
    else
      v12 = 9;
    *(_QWORD *)&v14 = 0;
    HIWORD(v15) = v12;
    return rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::AddMember(a1, &__dst, &v14, v3);
  }
  else
  {
    *(_QWORD *)(v13 + 32) = 0;
    *(_QWORD *)(v10 + 40) = 0;
    *(_QWORD *)(v10 + 24) = 0;
    if (a3)
      v11 = 10;
    else
      v11 = 9;
    *(_WORD *)(v10 + 46) = v11;
  }
  return result;
}

_WORD *rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::SetString(_WORD *__dst, const char *a2, int a3, uint64_t a4)
{
  const char *v5;
  const char *v7;
  int v8;

  if (!a2 && a3)
    __assert_rtn("GenericStringRef", "document.h", 322, "str != 0 || len == 0u");
  v5 = "";
  if (a2)
    v5 = a2;
  v7 = v5;
  v8 = a3;
  rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::SetStringRaw(__dst, (uint64_t)&v7, a4);
  return __dst;
}

unsigned int *rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::AddMember(unsigned int *a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  const void *v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  const void *v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;

  if (*((_WORD *)a1 + 11) != 3)
    __assert_rtn("AddMember", "document.h", 1282, "IsObject()");
  if ((*((_WORD *)a2 + 11) & 0x400) == 0)
    __assert_rtn("AddMember", "document.h", 1283, "name.IsString()");
  v7 = *a1;
  v8 = a1[1];
  if (*a1 >= v8)
  {
    v9 = (_DWORD)v8 ? v8 + ((v8 + 1) >> 1) : 16;
    if (v8 < v9)
    {
      v10 = (const void *)*((_QWORD *)a1 + 1);
      v11 = 48 * v9;
      if (v10)
      {
        v12 = *(unint64_t **)a4;
        v13 = *(_QWORD *)(*(_QWORD *)a4 + 8);
        if ((const void *)(*(_QWORD *)a4 + v13 - 48 * v8 + 24) == v10 && (v14 = v13 + v11 - 48 * v8, v14 <= *v12))
        {
          v12[1] = v14;
        }
        else
        {
          v15 = (void *)rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::Malloc(a4, v11);
          v16 = v15;
          if (v15)
            v17 = (_DWORD)v8 == 0;
          else
            v17 = 1;
          if (!v17)
            memcpy(v15, v10, 48 * v8);
          v10 = v16;
        }
      }
      else
      {
        v10 = (const void *)rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::Malloc(a4, v11);
      }
      *((_QWORD *)a1 + 1) = v10;
      a1[1] = v9;
      v7 = *a1;
    }
  }
  v18 = *((_QWORD *)a1 + 1);
  v19 = v18 + 48 * v7;
  v20 = *a2;
  *(_QWORD *)(v19 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)v19 = v20;
  *((_WORD *)a2 + 11) = 0;
  v21 = v18 + 48 * *a1;
  v22 = *a3;
  *(_QWORD *)(v21 + 40) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(v21 + 24) = v22;
  *((_WORD *)a3 + 11) = 0;
  ++*a1;
  return a1;
}

uint64_t rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::Malloc(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a2)
    return 0;
  v3 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = *(_QWORD **)a1;
  if (!v4 || (v5 = v4[1], v6 = v5 + v3, v5 + v3 > *v4))
  {
    if (*(_QWORD *)(a1 + 8) <= v3)
      v7 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
    else
      v7 = *(_QWORD *)(a1 + 8);
    if (!*(_QWORD *)(a1 + 24))
    {
      v8 = operator new();
      *(_QWORD *)(a1 + 24) = v8;
      *(_QWORD *)(a1 + 32) = v8;
    }
    if (v7 == -24)
      return 0;
    v4 = malloc_type_malloc(v7 + 24, 0x9245A057uLL);
    if (!v4)
      return 0;
    v5 = 0;
    *v4 = v7;
    v4[1] = 0;
    v4[2] = *(_QWORD *)a1;
    *(_QWORD *)a1 = v4;
    v6 = v3;
  }
  v9 = (uint64_t)v4 + v5 + 24;
  v4[1] = v6;
  return v9;
}

void *rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::SetStringRaw(_WORD *__dst, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  void *result;

  v4 = __dst;
  if (*(_DWORD *)(a2 + 8) > 0x15u)
  {
    __dst[11] = 3077;
    *(_DWORD *)__dst = *(_DWORD *)(a2 + 8);
    v5 = rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::Malloc(a3, (*(_DWORD *)(a2 + 8) + 1));
    v4[1] = v5;
    v4 = (_QWORD *)v5;
  }
  else
  {
    __dst[11] = 7173;
    *((_BYTE *)__dst + 21) = 21 - *(_BYTE *)(a2 + 8);
  }
  result = memcpy(v4, *(const void **)a2, *(unsigned int *)(a2 + 8));
  *((_BYTE *)v4 + *(unsigned int *)(a2 + 8)) = 0;
  return result;
}

unsigned int *siri::dialogengine::SetJSONString(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v5;
  const char *v6;
  uint64_t v7;
  int v8;
  const char *v9;
  int v10;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 __dst;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)a1 + 3);
  if (!v3)
    __assert_rtn("GetAllocator", "document.h", 2407, "allocator_");
  v5 = *(char *)(a2 + 23);
  if (v5 >= 0)
    v6 = (const char *)a2;
  else
    v6 = *(const char **)a2;
  if (v5 >= 0)
    LODWORD(v7) = *(unsigned __int8 *)(a2 + 23);
  else
    v7 = *(_QWORD *)(a2 + 8);
  v8 = *(char *)(a3 + 23);
  if (v8 >= 0)
    v9 = (const char *)a3;
  else
    v9 = *(const char **)a3;
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(a3 + 23);
  else
    v10 = *(_DWORD *)(a3 + 8);
  *((_QWORD *)&__dst + 1) = v6;
  v16 = 0x405000000000000;
  *(_QWORD *)&__dst = rapidjson::GenericStringRef<char>::NotNullStrLen(v6);
  rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::FindMember<rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>((uint64_t)&v12, a1, (uint64_t)&__dst);
  if (*((_WORD *)a1 + 11) != 3)
    __assert_rtn("MemberEnd", "document.h", 1164, "IsObject()");
  if (v12 != *((_QWORD *)a1 + 1) + 48 * *a1)
    return (unsigned int *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::SetString((_WORD *)(v12 + 24), v9, v10, v3);
  __dst = 0uLL;
  v16 = 0;
  rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::SetString(&__dst, v6, v7, v3);
  v13 = 0uLL;
  v14 = 0;
  rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::SetString(&v13, v9, v10, v3);
  return rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::AddMember(a1, &__dst, &v13, v3);
}

unsigned int *siri::dialogengine::SetJSONUintVal(unsigned int *a1, uint64_t a2, int a3)
{
  uint64_t v3;
  int v6;
  const char *v7;
  uint64_t v8;
  unsigned int *result;
  uint64_t v10;
  __int16 v11;
  __int16 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 __dst;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)a1 + 3);
  if (!v3)
    __assert_rtn("GetAllocator", "document.h", 2407, "allocator_");
  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (const char *)a2;
  else
    v7 = *(const char **)a2;
  if (v6 >= 0)
    LODWORD(v8) = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  *((_QWORD *)&__dst + 1) = v7;
  v17 = 0x405000000000000;
  *(_QWORD *)&__dst = rapidjson::GenericStringRef<char>::NotNullStrLen(v7);
  result = (unsigned int *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::FindMember<rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>((uint64_t)&v13, a1, (uint64_t)&__dst);
  if (*((_WORD *)a1 + 11) != 3)
    __assert_rtn("MemberEnd", "document.h", 1164, "IsObject()");
  v10 = v13;
  if (v13 == *((_QWORD *)a1 + 1) + 48 * *a1)
  {
    __dst = 0uLL;
    v17 = 0;
    rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::SetString(&__dst, v7, v8, v3);
    v15 = 0;
    v14 = a3;
    if (a3 < 0)
      v12 = 470;
    else
      v12 = 502;
    HIWORD(v15) = v12;
    return rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::AddMember(a1, &__dst, &v14, v3);
  }
  else
  {
    *(_QWORD *)(v13 + 32) = 0;
    *(_QWORD *)(v10 + 40) = 0;
    *(_QWORD *)(v10 + 24) = a3;
    if (a3 < 0)
      v11 = 470;
    else
      v11 = 502;
    *(_WORD *)(v10 + 46) = v11;
  }
  return result;
}

BOOL siri::dialogengine::ParseJSONBool(unsigned int *a1, const char *a2, uint64_t a3)
{
  const char *v4;
  const char *v6;
  int v7;
  std::string *v8;
  __int128 v9;
  std::string v11;
  void *__p[2];
  std::string::size_type v13;

  v4 = a2;
  if (a2[23] < 0)
    a2 = *(const char **)a2;
  if (rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember(a1, a2))
  {
    if (v4[23] >= 0)
      v6 = v4;
    else
      v6 = *(const char **)v4;
    v7 = *(unsigned __int16 *)(rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>(a1, v6)+ 22);
    if ((v7 & 8) != 0)
    {
      return v7 == 10;
    }
    else
    {
      std::operator+<char>();
      v8 = std::string::append(&v11, " is not a BOOL type");
      v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      v13 = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 3u);
      if (SHIBYTE(v13) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v11.__r_.__value_.__l.__data_);
    }
  }
  return a3;
}

void sub_1BF896BFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ParseJSONStringList(unsigned int *a1@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  const char *v3;
  const char *v6;
  uint64_t v7;
  unsigned int i;
  uint64_t v9;
  std::string *v10;
  __int128 v11;
  char *String;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  std::string *v20;
  std::string *v21;
  __int128 v22;
  uint64_t v23;
  int v24;
  std::string *v25;
  __int128 v26;
  std::string v27;
  std::__split_buffer<std::string> __p;

  v3 = a2;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  if (a2[23] < 0)
    a2 = *(const char **)a2;
  if (rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::HasMember(a1, a2))
  {
    if (v3[23] >= 0)
      v6 = v3;
    else
      v6 = *(const char **)v3;
    v7 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[]<char const>(a1, v6);
    if (*(_WORD *)(v7 + 22) == 4)
    {
      for (i = 0; ; ++i)
      {
        if (i >= *(_DWORD *)v7)
          return;
        v9 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[](v7, i);
        if ((*(_WORD *)(v9 + 22) & 0x400) != 0)
        {
          String = (char *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetString(v9);
          std::string::basic_string[abi:ne180100]<0>(&v27, String);
          v14 = *(_QWORD *)(a3 + 8);
          v13 = *(_QWORD *)(a3 + 16);
          if (v14 >= v13)
          {
            v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - *(_QWORD *)a3) >> 3);
            v17 = v16 + 1;
            if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<BOOL>::__throw_length_error[abi:ne180100]();
            v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - *(_QWORD *)a3) >> 3);
            if (2 * v18 > v17)
              v17 = 2 * v18;
            if (v18 >= 0x555555555555555)
              v19 = 0xAAAAAAAAAAAAAAALL;
            else
              v19 = v17;
            __p.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 16);
            if (v19)
              v20 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a3 + 16, v19);
            else
              v20 = 0;
            v21 = v20 + v16;
            __p.__first_ = v20;
            __p.__begin_ = v21;
            __p.__end_cap_.__value_ = &v20[v19];
            v22 = *(_OWORD *)&v27.__r_.__value_.__l.__data_;
            v21->__r_.__value_.__r.__words[2] = v27.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
            memset(&v27, 0, sizeof(v27));
            __p.__end_ = v21 + 1;
            std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a3, &__p);
            v23 = *(_QWORD *)(a3 + 8);
            std::__split_buffer<std::string>::~__split_buffer(&__p);
            v24 = SHIBYTE(v27.__r_.__value_.__r.__words[2]);
            *(_QWORD *)(a3 + 8) = v23;
            if (v24 < 0)
LABEL_27:
              operator delete(v27.__r_.__value_.__l.__data_);
          }
          else
          {
            v15 = *(_OWORD *)&v27.__r_.__value_.__l.__data_;
            *(_QWORD *)(v14 + 16) = *((_QWORD *)&v27.__r_.__value_.__l + 2);
            *(_OWORD *)v14 = v15;
            *(_QWORD *)(a3 + 8) = v14 + 24;
          }
        }
        else
        {
          std::operator+<char>();
          v10 = std::string::append(&v27, " has non-string member");
          v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
          __p.__end_ = (std::__split_buffer<std::string>::pointer)v10->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__first_ = v11;
          v10->__r_.__value_.__l.__size_ = 0;
          v10->__r_.__value_.__r.__words[2] = 0;
          v10->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Log::LogWithLevel((uint64_t)&__p, 3u);
          if (SHIBYTE(__p.__end_) < 0)
            operator delete(__p.__first_);
          if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_27;
        }
        if (*(_WORD *)(v7 + 22) != 4)
          __assert_rtn("Size", "document.h", 1557, "IsArray()");
      }
    }
    std::operator+<char>();
    v25 = std::string::append(&v27, " is not an array type");
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    __p.__end_ = (std::__split_buffer<std::string>::pointer)v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__first_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)&__p, 3u);
    if (SHIBYTE(__p.__end_) < 0)
      operator delete(__p.__first_);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__r_.__value_.__l.__data_);
  }
}

void sub_1BF896F00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  _Unwind_Resume(a1);
}

uint64_t rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::operator[](uint64_t a1, unsigned int a2)
{
  if (*(_WORD *)(a1 + 22) != 4)
    __assert_rtn("operator[]", "document.h", 1583, "IsArray()");
  if (*(_DWORD *)a1 <= a2)
    __assert_rtn("operator[]", "document.h", 1584, "index < data_.a.size");
  return *(_QWORD *)(a1 + 8) + 24 * a2;
}

void siri::dialogengine::ConvertVariableObjToJSONObj(uint64_t **__return_ptr a1@<X8>, siri::dialogengine *this@<X0>)
{
  siri::dialogengine::VariableObject *v4;
  const void **v5;
  const void **v6;
  char *v7;
  char *v8;
  __int128 v9;
  unsigned __int8 *v12;
  uint64_t *v13;
  std::__shared_weak_count *size;
  unint64_t *v15;
  unint64_t v16;
  std::string *v20;
  siri::dialogengine::VariableArray *v22;
  std::string::size_type v25;
  uint64_t v26;
  void *v28;
  uint64_t *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  char *v33;
  double *v34;
  uint64_t *v35;
  unint64_t *v36;
  uint64_t *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::string __p;
  __int128 v46;
  std::string v47;
  std::string v48;
  const void **v49;
  char *v50;
  std::string *v51;
  std::string *p_p;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  siri::dialogengine::VariableObject::GetValues(this, (char **)&v49);
  v6 = v49;
  v5 = (const void **)v50;
  if (v49 != (const void **)v50)
  {
    do
    {
      v7 = (char *)*v6;
      if (*((char *)*v6 + 55) < 0)
        std::string::__init_copy_ctor_external(&v48, *((const std::string::value_type **)v7 + 4), *((_QWORD *)v7 + 5));
      else
        v48 = *(std::string *)(v7 + 32);
      v8 = (char *)*v6;
      if (*((char *)*v6 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v47, *((const std::string::value_type **)v8 + 1), *((_QWORD *)v8 + 2));
      }
      else
      {
        v9 = *(_OWORD *)(v8 + 8);
        v47.__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 3);
        *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v9;
      }
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v48.__r_.__value_.__l.__size_ == 12)
        {
          if (*(_QWORD *)v48.__r_.__value_.__l.__data_ == 0x412E676F6C616964
            && *(_DWORD *)(v48.__r_.__value_.__r.__words[0] + 8) == 2036429426)
          {
LABEL_50:
            if (*v6)
            else
              v22 = 0;
            siri::dialogengine::ConvertVariableArrayToJSONAry((int64x2_t *)&__p, v22);
            siri::dialogengine::CreateJSONArrayVal(&__p, &v46);
            v51 = &v47;
            v37 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (const void **)&v47.__r_.__value_.__l.__data_, (__int128 **)&v51);
            std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)(v37 + 7), &v46);
            v38 = (std::__shared_weak_count *)*((_QWORD *)&v46 + 1);
            if (*((_QWORD *)&v46 + 1))
            {
              v39 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
              do
                v40 = __ldaxr(v39);
              while (__stlxr(v40 - 1, v39));
              if (!v40)
              {
                ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                std::__shared_weak_count::__release_weak(v38);
              }
            }
            p_p = &__p;
            std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
            goto LABEL_98;
          }
          goto LABEL_98;
        }
        if (v48.__r_.__value_.__l.__size_ != 13)
        {
          if (v48.__r_.__value_.__l.__size_ != 14)
            goto LABEL_98;
          if (*(_QWORD *)v48.__r_.__value_.__l.__data_ != 0x422E676F6C616964
            || *(_QWORD *)(v48.__r_.__value_.__r.__words[0] + 6) != 0x6E61656C6F6F422ELL)
          {
            goto LABEL_98;
          }
LABEL_26:
          siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)v12[66], (uint64_t *)&__p);
          *(_QWORD *)&v46 = &v47;
          v13 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (const void **)&v47.__r_.__value_.__l.__data_, (__int128 **)&v46);
          std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)(v13 + 7), (__int128 *)&__p);
          size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_)
          {
            v15 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
            do
              v16 = __ldaxr(v15);
            while (__stlxr(v16 - 1, v15));
            goto LABEL_81;
          }
          goto LABEL_98;
        }
        if (*(_QWORD *)v48.__r_.__value_.__l.__data_ == 0x532E676F6C616964
          && *(_QWORD *)(v48.__r_.__value_.__r.__words[0] + 5) == 0x676E697274532E67)
        {
LABEL_74:
          v33 = (char *)*v6;
          if (*v6)
          if (v33[95] < 0)
            std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v33 + 9), *((_QWORD *)v33 + 10));
          else
            __p = *(std::string *)(v33 + 3);
          siri::dialogengine::CreateJSONStringVal((uint64_t)&__p, (uint64_t *)&v46);
          p_p = &v47;
          v41 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (const void **)&v47.__r_.__value_.__l.__data_, (__int128 **)&p_p);
          std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)(v41 + 7), &v46);
          v42 = (std::__shared_weak_count *)*((_QWORD *)&v46 + 1);
          if (*((_QWORD *)&v46 + 1))
          {
            v43 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
            do
              v44 = __ldaxr(v43);
            while (__stlxr(v44 - 1, v43));
            if (!v44)
            {
              ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          goto LABEL_98;
        }
        if (*(_QWORD *)v48.__r_.__value_.__l.__data_ != 0x4E2E676F6C616964
          || *(_QWORD *)(v48.__r_.__value_.__r.__words[0] + 5) != 0x7265626D754E2E67)
        {
          v20 = (std::string *)v48.__r_.__value_.__r.__words[0];
LABEL_61:
          v25 = v20->__r_.__value_.__r.__words[0];
          v26 = *(std::string::size_type *)((char *)v20->__r_.__value_.__r.__words + 5);
          if (v25 == 0x4F2E676F6C616964 && v26 == 0x7463656A624F2E67)
          {
            v28 = (void *)*v6;
            if (*v6)
            siri::dialogengine::ConvertVariableObjToJSONObj((uint64_t *)&__p, (siri::dialogengine *)v28, v4);
            siri::dialogengine::CreateJSONObjectVal((const void ***)&__p, (uint64_t *)&v46);
            p_p = &v47;
            v29 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (const void **)&v47.__r_.__value_.__l.__data_, (__int128 **)&p_p);
            std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)(v29 + 7), &v46);
            v30 = (std::__shared_weak_count *)*((_QWORD *)&v46 + 1);
            if (*((_QWORD *)&v46 + 1))
            {
              v31 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
              do
                v32 = __ldaxr(v31);
              while (__stlxr(v32 - 1, v31));
              if (!v32)
              {
                ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
                std::__shared_weak_count::__release_weak(v30);
              }
            }
            std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)__p.__r_.__value_.__l.__size_);
          }
          goto LABEL_98;
        }
      }
      else
      {
        if (HIBYTE(v48.__r_.__value_.__r.__words[2]) == 12)
        {
          if (v48.__r_.__value_.__r.__words[0] == 0x412E676F6C616964
            && LODWORD(v48.__r_.__value_.__r.__words[1]) == 2036429426)
          {
            goto LABEL_50;
          }
          goto LABEL_98;
        }
        if (HIBYTE(v48.__r_.__value_.__r.__words[2]) != 13)
        {
          if (HIBYTE(v48.__r_.__value_.__r.__words[2]) != 14)
            goto LABEL_98;
          if (v48.__r_.__value_.__r.__words[0] != 0x422E676F6C616964
            || *(std::string::size_type *)((char *)v48.__r_.__value_.__r.__words + 6) != 0x6E61656C6F6F422ELL)
          {
            goto LABEL_98;
          }
          goto LABEL_26;
        }
        if (v48.__r_.__value_.__r.__words[0] == 0x532E676F6C616964
          && *(std::string::size_type *)((char *)v48.__r_.__value_.__r.__words + 5) == 0x676E697274532E67)
        {
          goto LABEL_74;
        }
        if (v48.__r_.__value_.__r.__words[0] != 0x4E2E676F6C616964
          || *(std::string::size_type *)((char *)v48.__r_.__value_.__r.__words + 5) != 0x7265626D754E2E67)
        {
          v20 = &v48;
          goto LABEL_61;
        }
      }
      siri::dialogengine::CreateJSONDoubleVal(v34[9], (uint64_t *)&__p);
      *(_QWORD *)&v46 = &v47;
      v35 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (const void **)&v47.__r_.__value_.__l.__data_, (__int128 **)&v46);
      std::shared_ptr<siri::dialogengine::JSONValue>::operator=[abi:ne180100]((uint64_t)(v35 + 7), (__int128 *)&__p);
      size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_)
      {
        v36 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
        do
          v16 = __ldaxr(v36);
        while (__stlxr(v16 - 1, v36));
LABEL_81:
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
LABEL_98:
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v47.__r_.__value_.__l.__data_);
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v48.__r_.__value_.__l.__data_);
      v6 += 2;
    }
    while (v6 != v5);
  }
  v48.__r_.__value_.__r.__words[0] = (std::string::size_type)&v49;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
}

void sub_1BF8975D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  _QWORD **v31;

  if (a23 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  a25 = &a31;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*v31);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, __int128 **a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  std::string *v8;
  __int128 *v9;
  __int128 v10;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v5 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    v6 = (uint64_t *)operator new(0x48uLL);
    v12[0] = v6;
    v12[1] = a1 + 1;
    v13 = 0;
    v8 = (std::string *)(v6 + 4);
    v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
    }
    else
    {
      v10 = *v9;
      v6[6] = *((_QWORD *)v9 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
    }
    v6[7] = 0;
    v6[8] = 0;
    v13 = 1;
    std::__tree<std::string>::__insert_node_at(a1, v14, v7, v6);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12);
  }
  return v6;
}

void sub_1BF897788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>>>>::reset[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ConvertVariableArrayToJSONAry(int64x2_t *this, siri::dialogengine::VariableArray *a2)
{
  unint64_t v4;
  int64x2_t *v5;
  uint64_t v6;
  __int128 v7;
  unint64_t *v8;
  unint64_t v9;
  const void *v10;
  unsigned __int8 *v13;
  unint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  _QWORD *v24;
  char *v25;
  __int128 v26;
  std::string *v29;
  std::string::size_type v33;
  uint64_t v34;
  siri::dialogengine *v36;
  siri::dialogengine::VariableObject *v37;
  unint64_t v38;
  _OWORD *v39;
  _OWORD *v40;
  char *v41;
  siri::dialogengine::VariableArray *v43;
  _OWORD *v44;
  unint64_t v45;
  double *v46;
  unint64_t v47;
  _OWORD *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  _QWORD *v56;
  _QWORD *v57;
  char *v58;
  __int128 v59;
  int64x2_t v60;
  unint64_t v61;
  _OWORD *v62;
  _OWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  _QWORD *v71;
  _QWORD *v72;
  char *v73;
  __int128 v74;
  int64x2_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  __int128 v81;
  int64x2_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  _QWORD *v91;
  _QWORD *v92;
  char *v93;
  __int128 v94;
  int64x2_t v95;
  uint64_t v96;
  _OWORD *v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *p_shared_owners;
  unint64_t v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::string __p;
  __int128 v107;
  std::string v108;
  __int128 v109;
  std::string *p_p;
  int64x2_t v111;
  uint64_t v112;
  int64x2_t *v113;

  v4 = 0;
  this[1].i64[0] = 0;
  v5 = this + 1;
  this->i64[0] = 0;
  this->i64[1] = 0;
  while (1)
  {
    v6 = *((_QWORD *)a2 + 9);
    if (v4 >= (*((_QWORD *)a2 + 10) - v6) >> 4)
      break;
    v7 = *(_OWORD *)(v6 + 16 * v4);
    v109 = v7;
    if (*((_QWORD *)&v7 + 1))
    {
      v8 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    v10 = (const void *)v7;
    if (*(char *)(v7 + 55) < 0)
      std::string::__init_copy_ctor_external(&v108, *(const std::string::value_type **)(v7 + 32), *(_QWORD *)(v7 + 40));
    else
      v108 = *(std::string *)(v7 + 32);
    if ((SHIBYTE(v108.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (HIBYTE(v108.__r_.__value_.__r.__words[2]) != 12)
      {
        if (HIBYTE(v108.__r_.__value_.__r.__words[2]) != 13)
        {
          if (HIBYTE(v108.__r_.__value_.__r.__words[2]) != 14)
            goto LABEL_141;
          if (v108.__r_.__value_.__r.__words[0] != 0x422E676F6C616964
            || *(std::string::size_type *)((char *)v108.__r_.__value_.__r.__words + 6) != 0x6E61656C6F6F422ELL)
          {
LABEL_139:
            if ((SHIBYTE(v108.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_141;
            goto LABEL_140;
          }
LABEL_27:
          siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)v13[66], (uint64_t *)&__p);
          v15 = (_OWORD *)this->i64[1];
          v14 = this[1].u64[0];
          if ((unint64_t)v15 >= v14)
          {
            v16 = ((uint64_t)v15 - this->i64[0]) >> 4;
            if ((unint64_t)(v16 + 1) >> 60)
              std::vector<BOOL>::__throw_length_error[abi:ne180100]();
            v17 = v14 - this->i64[0];
            v18 = v17 >> 3;
            if (v17 >> 3 <= (unint64_t)(v16 + 1))
              v18 = v16 + 1;
            if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
              v19 = 0xFFFFFFFFFFFFFFFLL;
            else
              v19 = v18;
            v113 = v5;
            v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v19);
            v22 = &v20[16 * v16];
            *(_OWORD *)v22 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
            v24 = (_QWORD *)this->i64[0];
            v23 = (_QWORD *)this->i64[1];
            if (v23 != (_QWORD *)this->i64[0])
            {
              v25 = &v20[16 * v16];
              do
              {
                v26 = *((_OWORD *)v23 - 1);
                v23 -= 2;
                *((_OWORD *)v25 - 1) = v26;
                v25 -= 16;
                *v23 = 0;
                v23[1] = 0;
              }
              while (v23 != v24);
              goto LABEL_111;
            }
LABEL_112:
            v82 = vdupq_n_s64((unint64_t)v23);
            v25 = v22;
            goto LABEL_113;
          }
LABEL_78:
          *v15 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          v48 = v15 + 1;
          goto LABEL_114;
        }
        if (v108.__r_.__value_.__r.__words[0] != 0x532E676F6C616964
          || *(std::string::size_type *)((char *)v108.__r_.__value_.__r.__words + 5) != 0x676E697274532E67)
        {
          if (v108.__r_.__value_.__r.__words[0] != 0x4E2E676F6C616964
            || *(std::string::size_type *)((char *)v108.__r_.__value_.__r.__words + 5) != 0x7265626D754E2E67)
          {
            v29 = &v108;
            goto LABEL_61;
          }
          goto LABEL_77;
        }
        goto LABEL_68;
      }
      if (v108.__r_.__value_.__r.__words[0] != 0x412E676F6C616964
        || LODWORD(v108.__r_.__value_.__r.__words[1]) != 2036429426)
      {
        goto LABEL_139;
      }
LABEL_75:
      siri::dialogengine::ConvertVariableArrayToJSONAry((siri::dialogengine *)&__p, v43);
      siri::dialogengine::CreateJSONArrayVal(&__p, &v107);
      v44 = (_OWORD *)this->i64[1];
      v45 = this[1].u64[0];
      if ((unint64_t)v44 >= v45)
      {
        v49 = ((uint64_t)v44 - this->i64[0]) >> 4;
        v50 = v49 + 1;
        if ((unint64_t)(v49 + 1) >> 60)
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        v51 = v45 - this->i64[0];
        if (v51 >> 3 > v50)
          v50 = v51 >> 3;
        if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF0)
          v52 = 0xFFFFFFFFFFFFFFFLL;
        else
          v52 = v50;
        v113 = v5;
        v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v52);
        v55 = &v53[16 * v49];
        *(_OWORD *)v55 = v107;
        v107 = 0uLL;
        v57 = (_QWORD *)this->i64[0];
        v56 = (_QWORD *)this->i64[1];
        if (v56 == (_QWORD *)this->i64[0])
        {
          v60 = vdupq_n_s64((unint64_t)v56);
          v58 = &v53[16 * v49];
        }
        else
        {
          v58 = &v53[16 * v49];
          do
          {
            v59 = *((_OWORD *)v56 - 1);
            v56 -= 2;
            *((_OWORD *)v58 - 1) = v59;
            v58 -= 16;
            *v56 = 0;
            v56[1] = 0;
          }
          while (v56 != v57);
          v60 = *this;
        }
        v97 = v55 + 16;
        this->i64[0] = (uint64_t)v58;
        this->i64[1] = (uint64_t)(v55 + 16);
        v111 = v60;
        v98 = this[1].i64[0];
        this[1].i64[0] = (uint64_t)&v53[16 * v54];
        v112 = v98;
        p_p = (std::string *)v60.i64[0];
        std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)&p_p);
        v99 = (std::__shared_weak_count *)*((_QWORD *)&v107 + 1);
        this->i64[1] = (uint64_t)v97;
        if (v99)
        {
          p_shared_owners = (unint64_t *)&v99->__shared_owners_;
          do
            v101 = __ldaxr(p_shared_owners);
          while (__stlxr(v101 - 1, p_shared_owners));
          if (!v101)
          {
            ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
            std::__shared_weak_count::__release_weak(v99);
          }
        }
      }
      else
      {
        *v44 = v107;
        v107 = 0uLL;
        this->i64[1] = (uint64_t)(v44 + 1);
      }
      p_p = &__p;
      std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
      goto LABEL_139;
    }
    switch(v108.__r_.__value_.__l.__size_)
    {
      case 0xCuLL:
        if (*(_QWORD *)v108.__r_.__value_.__l.__data_ != 0x412E676F6C616964
          || *(_DWORD *)(v108.__r_.__value_.__r.__words[0] + 8) != 2036429426)
        {
          goto LABEL_139;
        }
        goto LABEL_75;
      case 0xDuLL:
        v29 = (std::string *)v108.__r_.__value_.__r.__words[0];
        if (*(_QWORD *)v108.__r_.__value_.__l.__data_ != 0x532E676F6C616964
          || *(_QWORD *)(v108.__r_.__value_.__r.__words[0] + 5) != 0x676E697274532E67)
        {
          if (*(_QWORD *)v108.__r_.__value_.__l.__data_ != 0x4E2E676F6C616964
            || *(_QWORD *)(v108.__r_.__value_.__r.__words[0] + 5) != 0x7265626D754E2E67)
          {
LABEL_61:
            v33 = v29->__r_.__value_.__r.__words[0];
            v34 = *(std::string::size_type *)((char *)v29->__r_.__value_.__r.__words + 5);
            if (v33 == 0x4F2E676F6C616964 && v34 == 0x7463656A624F2E67)
            {
              siri::dialogengine::ConvertVariableObjToJSONObj((uint64_t *)&__p, v36, v37);
              siri::dialogengine::CreateJSONObjectVal((const void ***)&__p, (uint64_t *)&v107);
              v39 = (_OWORD *)this->i64[1];
              v38 = this[1].u64[0];
              if ((unint64_t)v39 >= v38)
              {
                v84 = ((uint64_t)v39 - this->i64[0]) >> 4;
                if ((unint64_t)(v84 + 1) >> 60)
                  std::vector<BOOL>::__throw_length_error[abi:ne180100]();
                v85 = v38 - this->i64[0];
                v86 = v85 >> 3;
                if (v85 >> 3 <= (unint64_t)(v84 + 1))
                  v86 = v84 + 1;
                if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF0)
                  v87 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v87 = v86;
                v113 = v5;
                v88 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v87);
                v90 = &v88[16 * v84];
                *(_OWORD *)v90 = v107;
                v107 = 0uLL;
                v92 = (_QWORD *)this->i64[0];
                v91 = (_QWORD *)this->i64[1];
                if (v91 == (_QWORD *)this->i64[0])
                {
                  v95 = vdupq_n_s64((unint64_t)v91);
                  v93 = &v88[16 * v84];
                }
                else
                {
                  v93 = &v88[16 * v84];
                  do
                  {
                    v94 = *((_OWORD *)v91 - 1);
                    v91 -= 2;
                    *((_OWORD *)v93 - 1) = v94;
                    v93 -= 16;
                    *v91 = 0;
                    v91[1] = 0;
                  }
                  while (v91 != v92);
                  v95 = *this;
                }
                v40 = v90 + 16;
                this->i64[0] = (uint64_t)v93;
                this->i64[1] = (uint64_t)(v90 + 16);
                v111 = v95;
                v102 = this[1].i64[0];
                this[1].i64[0] = (uint64_t)&v88[16 * v89];
                v112 = v102;
                p_p = (std::string *)v95.i64[0];
                std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)&p_p);
              }
              else
              {
                *v39 = v107;
                v40 = v39 + 1;
              }
              this->i64[1] = (uint64_t)v40;
              std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)__p.__r_.__value_.__l.__size_);
            }
            goto LABEL_139;
          }
LABEL_77:
          siri::dialogengine::CreateJSONDoubleVal(v46[9], (uint64_t *)&__p);
          v15 = (_OWORD *)this->i64[1];
          v47 = this[1].u64[0];
          if ((unint64_t)v15 < v47)
            goto LABEL_78;
          v76 = ((uint64_t)v15 - this->i64[0]) >> 4;
          if ((unint64_t)(v76 + 1) >> 60)
            std::vector<BOOL>::__throw_length_error[abi:ne180100]();
          v77 = v47 - this->i64[0];
          v78 = v77 >> 3;
          if (v77 >> 3 <= (unint64_t)(v76 + 1))
            v78 = v76 + 1;
          if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF0)
            v79 = 0xFFFFFFFFFFFFFFFLL;
          else
            v79 = v78;
          v113 = v5;
          v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v79);
          v22 = &v20[16 * v76];
          *(_OWORD *)v22 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
          v80 = (_QWORD *)this->i64[0];
          v23 = (_QWORD *)this->i64[1];
          if (v23 == (_QWORD *)this->i64[0])
            goto LABEL_112;
          v25 = &v20[16 * v76];
          do
          {
            v81 = *((_OWORD *)v23 - 1);
            v23 -= 2;
            *((_OWORD *)v25 - 1) = v81;
            v25 -= 16;
            *v23 = 0;
            v23[1] = 0;
          }
          while (v23 != v80);
LABEL_111:
          v82 = *this;
LABEL_113:
          v48 = v22 + 16;
          this->i64[0] = (uint64_t)v25;
          this->i64[1] = (uint64_t)(v22 + 16);
          v111 = v82;
          v83 = this[1].i64[0];
          this[1].i64[0] = (uint64_t)&v20[16 * v21];
          v112 = v83;
          p_p = (std::string *)v82.i64[0];
          std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)&p_p);
LABEL_114:
          this->i64[1] = (uint64_t)v48;
          goto LABEL_139;
        }
LABEL_68:
        if (v41[95] < 0)
          std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v41 + 9), *((_QWORD *)v41 + 10));
        else
          __p = *(std::string *)(v41 + 3);
        siri::dialogengine::CreateJSONStringVal((uint64_t)&__p, (uint64_t *)&v107);
        v62 = (_OWORD *)this->i64[1];
        v61 = this[1].u64[0];
        if ((unint64_t)v62 >= v61)
        {
          v64 = ((uint64_t)v62 - this->i64[0]) >> 4;
          if ((unint64_t)(v64 + 1) >> 60)
            std::vector<BOOL>::__throw_length_error[abi:ne180100]();
          v65 = v61 - this->i64[0];
          v66 = v65 >> 3;
          if (v65 >> 3 <= (unint64_t)(v64 + 1))
            v66 = v64 + 1;
          if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF0)
            v67 = 0xFFFFFFFFFFFFFFFLL;
          else
            v67 = v66;
          v113 = v5;
          v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v67);
          v70 = &v68[16 * v64];
          *(_OWORD *)v70 = v107;
          v107 = 0uLL;
          v72 = (_QWORD *)this->i64[0];
          v71 = (_QWORD *)this->i64[1];
          if (v71 == (_QWORD *)this->i64[0])
          {
            v75 = vdupq_n_s64((unint64_t)v71);
            v73 = &v68[16 * v64];
          }
          else
          {
            v73 = &v68[16 * v64];
            do
            {
              v74 = *((_OWORD *)v71 - 1);
              v71 -= 2;
              *((_OWORD *)v73 - 1) = v74;
              v73 -= 16;
              *v71 = 0;
              v71[1] = 0;
            }
            while (v71 != v72);
            v75 = *this;
          }
          v63 = v70 + 16;
          this->i64[0] = (uint64_t)v73;
          this->i64[1] = (uint64_t)(v70 + 16);
          v111 = v75;
          v96 = this[1].i64[0];
          this[1].i64[0] = (uint64_t)&v68[16 * v69];
          v112 = v96;
          p_p = (std::string *)v75.i64[0];
          std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)&p_p);
        }
        else
        {
          *v62 = v107;
          v63 = v62 + 1;
        }
        this->i64[1] = (uint64_t)v63;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        goto LABEL_139;
      case 0xEuLL:
        if (*(_QWORD *)v108.__r_.__value_.__l.__data_ != 0x422E676F6C616964
          || *(_QWORD *)(v108.__r_.__value_.__r.__words[0] + 6) != 0x6E61656C6F6F422ELL)
        {
          goto LABEL_139;
        }
        goto LABEL_27;
    }
LABEL_140:
    operator delete(v108.__r_.__value_.__l.__data_);
LABEL_141:
    v103 = (std::__shared_weak_count *)*((_QWORD *)&v109 + 1);
    if (*((_QWORD *)&v109 + 1))
    {
      v104 = (unint64_t *)(*((_QWORD *)&v109 + 1) + 8);
      do
        v105 = __ldaxr(v104);
      while (__stlxr(v105 - 1, v104));
      if (!v105)
      {
        ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
        std::__shared_weak_count::__release_weak(v103);
      }
    }
    ++v4;
  }
}

void sub_1BF897FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, _QWORD *a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(a10);
  if (a23 < 0)
    operator delete(__p);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::ConvertJSONToJSONObj@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  const char *v5;
  double v6;
  _QWORD v8[2];
  unsigned int v9;
  uint64_t v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::GenericDocument((uint64_t)&v9);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = a2 + 8;
  if (*((char *)a1 + 23) >= 0)
    v4 = a1;
  else
    v4 = (uint64_t *)*a1;
  v8[0] = v4;
  v8[1] = v4;
  rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::ParseStream<128u,rapidjson::UTF8<char>,rapidjson::GenericStringStream<rapidjson::UTF8<char>>>((uint64_t)&v9, (uint64_t)v8);
  if (v12)
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Could not parse JSON string!", v5);
  }
  else
  {
    if (v11 != 3)
      __assert_rtn("MemberBegin", "document.h", 1161, "IsObject()");
    siri::dialogengine::ConvertRapidJSONToJSONObj(v10, v10 + 48 * v9, (uint64_t **)a2, v6);
  }
  return rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::~GenericDocument((uint64_t)&v9);
}

void sub_1BF8981B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  _QWORD **v3;
  va_list va;

  va_start(va, a3);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*v3);
  rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::~GenericDocument((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::GenericDocument(uint64_t a1)
{
  _QWORD *v2;

  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 80) = 1024;
  *(_DWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v2 = (_QWORD *)operator new();
  *v2 = 0;
  v2[1] = 0x10000;
  v2[3] = 0;
  v2[4] = 0;
  v2[2] = 0;
  *(_QWORD *)(a1 + 24) = v2;
  *(_QWORD *)(a1 + 32) = v2;
  return a1;
}

void sub_1BF898250(_Unwind_Exception *a1)
{
  uint64_t v1;

  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy(v1 + 40);
  _Unwind_Resume(a1);
}

uint64_t rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::ParseStream<128u,rapidjson::UTF8<char>,rapidjson::GenericStringStream<rapidjson::UTF8<char>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned __int8 *i;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  unsigned int v10;
  uint64_t v11;
  int v13;
  BOOL (*v14)(rapidjson::ParseResult *);
  uint64_t v15;
  __int128 v16;
  int v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  int v26;

  v4 = *(_QWORD *)(a1 + 40);
  v20 = a1;
  v21 = v4;
  v22 = 0u;
  v23 = 0u;
  v24 = 256;
  v26 = 2;
  LODWORD(v25) = 0;
  *((_QWORD *)&v25 + 1) = 0;
  for (i = *(unsigned __int8 **)a2; ; ++i)
  {
    v6 = *i;
    v7 = v6 > 0x20;
    v8 = (1 << v6) & 0x100002600;
    if (v7 || v8 == 0)
      break;
  }
  *(_QWORD *)a2 = i;
  if (!*i)
  {
    v18 = 1;
LABEL_26:
    v19 = &i[-*(_QWORD *)(a2 + 8)];
    LODWORD(v25) = v18;
    *((_QWORD *)&v25 + 1) = v19;
    goto LABEL_16;
  }
  rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseValue<128u,rapidjson::GenericStringStream<rapidjson::UTF8<char>>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>((uint64_t)&v21, (unsigned __int8 **)a2, (_QWORD *)a1);
  if (!(_DWORD)v25)
  {
    for (i = *(unsigned __int8 **)a2; ; ++i)
    {
      v10 = *i;
      v7 = v10 > 0x20;
      v11 = (1 << v10) & 0x100002600;
      if (v7 || v11 == 0)
        break;
    }
    *(_QWORD *)a2 = i;
    if (*i)
    {
      v18 = 2;
      goto LABEL_26;
    }
  }
LABEL_16:
  *(_QWORD *)&v23 = *((_QWORD *)&v22 + 1);
  v13 = v25;
  *(_OWORD *)(a1 + 88) = v25;
  if (v13)
    v14 = 0;
  else
    v14 = rapidjson::ParseResult::IsError;
  if (v14)
  {
    v15 = *(_QWORD *)(a1 + 64);
    if (v15 - *(_QWORD *)(a1 + 56) != 24)
      __assert_rtn("ParseStream", "document.h", 2259, "stack_.GetSize() == sizeof(ValueType)");
    *(_QWORD *)(a1 + 64) = v15 - 24;
    if (v15 - 24 != a1)
    {
      v16 = *(_OWORD *)(v15 - 24);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(v15 - 8);
      *(_OWORD *)a1 = v16;
      *(_WORD *)(v15 - 2) = 0;
    }
  }
  rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::ClearStackOnExit::~ClearStackOnExit((uint64_t)&v20);
  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy((uint64_t)&v21);
  return a1;
}

void sub_1BF8983F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  a13 = a12;
  rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::ClearStackOnExit::~ClearStackOnExit((uint64_t)&a9);
  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ConvertRapidJSONToJSONObj(uint64_t a1, uint64_t a2, uint64_t **a3, double a4)
{
  uint64_t v6;
  int v7;
  unsigned int *v8;
  uint64_t String;
  int v10;
  char *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  char *v18;
  char *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  char *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  char *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  char *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  uint64_t v47;
  char *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  uint64_t v53;
  char *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  char *v59;
  double v60;
  double Double;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t *v65;
  uint64_t v66[3];
  void *__p[2];
  char v68;
  __int128 v69;
  void *v70[2];
  uint64_t v71;

  if (a1 != a2)
  {
    v6 = a1;
    while (1)
    {
      v7 = *(unsigned __int16 *)(v6 + 46);
      v8 = (unsigned int *)(v6 + 24);
      switch(v7 & 7)
      {
        case 1:
          String = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetString(v6);
          v10 = *(unsigned __int16 *)(v6 + 46);
          if ((v10 & 8) == 0)
            goto LABEL_111;
          v11 = (char *)String;
          siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)(v10 == 10), (uint64_t *)v70);
          std::string::basic_string[abi:ne180100]<0>(__p, v11);
          v69 = *(_OWORD *)v70;
          v70[0] = 0;
          v70[1] = 0;
          std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>>(a3, (const void **)__p, (uint64_t)__p);
          v12 = (std::__shared_weak_count *)*((_QWORD *)&v69 + 1);
          if (*((_QWORD *)&v69 + 1))
          {
            v13 = (unint64_t *)(*((_QWORD *)&v69 + 1) + 8);
            do
              v14 = __ldaxr(v13);
            while (__stlxr(v14 - 1, v13));
            if (!v14)
            {
              ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
              std::__shared_weak_count::__release_weak(v12);
            }
          }
          if (v68 < 0)
            operator delete(__p[0]);
          v15 = (std::__shared_weak_count *)v70[1];
          if (v70[1])
          {
            v16 = (unint64_t *)((char *)v70[1] + 8);
            do
              v17 = __ldaxr(v16);
            while (__stlxr(v17 - 1, v16));
            goto LABEL_107;
          }
          goto LABEL_109;
        case 2:
          v40 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetString(v6);
          v41 = *(unsigned __int16 *)(v6 + 46);
          if ((v41 & 8) == 0)
LABEL_111:
            __assert_rtn("GetBool", "document.h", 1078, "IsBool()");
          v42 = (char *)v40;
          siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)(v41 == 10), (uint64_t *)v70);
          std::string::basic_string[abi:ne180100]<0>(__p, v42);
          v69 = *(_OWORD *)v70;
          v70[0] = 0;
          v70[1] = 0;
          std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>>(a3, (const void **)__p, (uint64_t)__p);
          v43 = (std::__shared_weak_count *)*((_QWORD *)&v69 + 1);
          if (*((_QWORD *)&v69 + 1))
          {
            v44 = (unint64_t *)(*((_QWORD *)&v69 + 1) + 8);
            do
              v45 = __ldaxr(v44);
            while (__stlxr(v45 - 1, v44));
            if (!v45)
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v43);
            }
          }
          if (v68 < 0)
            operator delete(__p[0]);
          v15 = (std::__shared_weak_count *)v70[1];
          if (v70[1])
          {
            v46 = (unint64_t *)((char *)v70[1] + 8);
            do
              v17 = __ldaxr(v46);
            while (__stlxr(v17 - 1, v46));
            goto LABEL_107;
          }
          goto LABEL_109;
        case 3:
          v70[1] = 0;
          v71 = 0;
          v70[0] = &v70[1];
          if (v7 != 3)
            __assert_rtn("MemberBegin", "document.h", 1155, "IsObject()");
          siri::dialogengine::ConvertRapidJSONToJSONObj(*(_QWORD *)(v6 + 32), *(_QWORD *)(v6 + 32) + 48 * *(unsigned int *)(v6 + 24), v70);
          v26 = (char *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetString(v6);
          siri::dialogengine::CreateJSONObjectVal((const void ***)v70, v66);
          std::string::basic_string[abi:ne180100]<0>(__p, v26);
          v69 = *(_OWORD *)v66;
          *(_OWORD *)v66 = 0uLL;
          std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>>(a3, (const void **)__p, (uint64_t)__p);
          v27 = (std::__shared_weak_count *)*((_QWORD *)&v69 + 1);
          if (*((_QWORD *)&v69 + 1))
          {
            v28 = (unint64_t *)(*((_QWORD *)&v69 + 1) + 8);
            do
              v29 = __ldaxr(v28);
            while (__stlxr(v29 - 1, v28));
            if (!v29)
            {
              ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
              std::__shared_weak_count::__release_weak(v27);
            }
          }
          if (v68 < 0)
            operator delete(__p[0]);
          v30 = (std::__shared_weak_count *)v66[1];
          if (v66[1])
          {
            v31 = (unint64_t *)(v66[1] + 8);
            do
              v32 = __ldaxr(v31);
            while (__stlxr(v32 - 1, v31));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
              std::__shared_weak_count::__release_weak(v30);
            }
          }
          std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)v70[1]);
          goto LABEL_109;
        case 4:
          v70[0] = 0;
          v70[1] = 0;
          v71 = 0;
          if (v7 != 4)
            __assert_rtn("GetArray", "document.h", 1724, "IsArray()");
          __p[0] = (void *)(v6 + 24);
          siri::dialogengine::ConvertRapidJSONToJSONArray((unsigned int **)__p, (char **)v70, a4);
          v33 = (char *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetString(v6);
          siri::dialogengine::CreateJSONArrayVal((_QWORD **)v70, v66);
          std::string::basic_string[abi:ne180100]<0>(__p, v33);
          v69 = *(_OWORD *)v66;
          *(_OWORD *)v66 = 0uLL;
          std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>>(a3, (const void **)__p, (uint64_t)__p);
          v34 = (std::__shared_weak_count *)*((_QWORD *)&v69 + 1);
          if (*((_QWORD *)&v69 + 1))
          {
            v35 = (unint64_t *)(*((_QWORD *)&v69 + 1) + 8);
            do
              v36 = __ldaxr(v35);
            while (__stlxr(v36 - 1, v35));
            if (!v36)
            {
              ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
              std::__shared_weak_count::__release_weak(v34);
            }
          }
          if (v68 < 0)
            operator delete(__p[0]);
          v37 = (std::__shared_weak_count *)v66[1];
          if (v66[1])
          {
            v38 = (unint64_t *)(v66[1] + 8);
            do
              v39 = __ldaxr(v38);
            while (__stlxr(v39 - 1, v38));
            if (!v39)
            {
              ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          __p[0] = v70;
          std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          goto LABEL_109;
        case 5:
          v18 = (char *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetString(v6);
          v19 = (char *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetString(v6 + 24);
          std::string::basic_string[abi:ne180100]<0>(v70, v19);
          siri::dialogengine::CreateJSONStringVal((uint64_t)v70, v66);
          std::string::basic_string[abi:ne180100]<0>(__p, v18);
          v69 = *(_OWORD *)v66;
          *(_OWORD *)v66 = 0uLL;
          std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>>(a3, (const void **)__p, (uint64_t)__p);
          v20 = (std::__shared_weak_count *)*((_QWORD *)&v69 + 1);
          if (*((_QWORD *)&v69 + 1))
          {
            v21 = (unint64_t *)(*((_QWORD *)&v69 + 1) + 8);
            do
              v22 = __ldaxr(v21);
            while (__stlxr(v22 - 1, v21));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
          }
          if (v68 < 0)
            operator delete(__p[0]);
          v23 = (std::__shared_weak_count *)v66[1];
          if (v66[1])
          {
            v24 = (unint64_t *)(v66[1] + 8);
            do
              v25 = __ldaxr(v24);
            while (__stlxr(v25 - 1, v24));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
              std::__shared_weak_count::__release_weak(v23);
            }
          }
          if (SHIBYTE(v71) < 0)
            operator delete(v70[0]);
          goto LABEL_109;
        case 6:
          if ((v7 & 0x20) != 0)
          {
            v53 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetString(v6);
            if ((*(_WORD *)(v6 + 46) & 0x20) == 0)
              __assert_rtn("GetInt", "document.h", 1731, "data_.f.flags & kIntFlag");
            v54 = (char *)v53;
            siri::dialogengine::CreateJSONIntVal((siri::dialogengine *)*v8, (uint64_t *)v70);
            std::string::basic_string[abi:ne180100]<0>(__p, v54);
            v69 = *(_OWORD *)v70;
            v70[0] = 0;
            v70[1] = 0;
            std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>>(a3, (const void **)__p, (uint64_t)__p);
            v55 = (std::__shared_weak_count *)*((_QWORD *)&v69 + 1);
            if (*((_QWORD *)&v69 + 1))
            {
              v56 = (unint64_t *)(*((_QWORD *)&v69 + 1) + 8);
              do
                v57 = __ldaxr(v56);
              while (__stlxr(v57 - 1, v56));
              if (!v57)
              {
                ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                std::__shared_weak_count::__release_weak(v55);
              }
            }
            if (v68 < 0)
              operator delete(__p[0]);
            v15 = (std::__shared_weak_count *)v70[1];
            if (!v70[1])
              goto LABEL_109;
            v58 = (unint64_t *)((char *)v70[1] + 8);
            do
              v17 = __ldaxr(v58);
            while (__stlxr(v17 - 1, v58));
          }
          else if ((v7 & 0x200) != 0)
          {
            v59 = (char *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetString(v6);
            Double = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetDouble((_WORD *)(v6 + 24), v60);
            siri::dialogengine::CreateJSONDoubleVal(Double, (uint64_t *)v70);
            std::string::basic_string[abi:ne180100]<0>(__p, v59);
            v69 = *(_OWORD *)v70;
            v70[0] = 0;
            v70[1] = 0;
            std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>>(a3, (const void **)__p, (uint64_t)__p);
            v62 = (std::__shared_weak_count *)*((_QWORD *)&v69 + 1);
            if (*((_QWORD *)&v69 + 1))
            {
              v63 = (unint64_t *)(*((_QWORD *)&v69 + 1) + 8);
              do
                v64 = __ldaxr(v63);
              while (__stlxr(v64 - 1, v63));
              if (!v64)
              {
                ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                std::__shared_weak_count::__release_weak(v62);
              }
            }
            if (v68 < 0)
              operator delete(__p[0]);
            v15 = (std::__shared_weak_count *)v70[1];
            if (!v70[1])
              goto LABEL_109;
            v65 = (unint64_t *)((char *)v70[1] + 8);
            do
              v17 = __ldaxr(v65);
            while (__stlxr(v17 - 1, v65));
          }
          else
          {
            if ((v7 & 0x40) == 0)
              goto LABEL_109;
            v47 = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetString(v6);
            if ((*(_WORD *)(v6 + 46) & 0x40) == 0)
              __assert_rtn("GetUint", "document.h", 1732, "data_.f.flags & kUintFlag");
            v48 = (char *)v47;
            siri::dialogengine::CreateJSONUintVal((siri::dialogengine *)*v8, (uint64_t *)v70);
            std::string::basic_string[abi:ne180100]<0>(__p, v48);
            v69 = *(_OWORD *)v70;
            v70[0] = 0;
            v70[1] = 0;
            std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>>(a3, (const void **)__p, (uint64_t)__p);
            v49 = (std::__shared_weak_count *)*((_QWORD *)&v69 + 1);
            if (*((_QWORD *)&v69 + 1))
            {
              v50 = (unint64_t *)(*((_QWORD *)&v69 + 1) + 8);
              do
                v51 = __ldaxr(v50);
              while (__stlxr(v51 - 1, v50));
              if (!v51)
              {
                ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
                std::__shared_weak_count::__release_weak(v49);
              }
            }
            if (v68 < 0)
              operator delete(__p[0]);
            v15 = (std::__shared_weak_count *)v70[1];
            if (!v70[1])
              goto LABEL_109;
            v52 = (unint64_t *)((char *)v70[1] + 8);
            do
              v17 = __ldaxr(v52);
            while (__stlxr(v17 - 1, v52));
          }
LABEL_107:
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
LABEL_109:
          v6 += 48;
          if (v6 == a2)
            return;
          break;
        default:
          goto LABEL_109;
      }
    }
  }
}

void sub_1BF898BC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>::~pair((uint64_t)&a12);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

uint64_t rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::~GenericDocument(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v3 = *(_QWORD **)v2;
    if (*(_QWORD *)v2)
    {
      while (v3 != *(_QWORD **)(v2 + 16))
      {
        v4 = (_QWORD *)v3[2];
        free(v3);
        *(_QWORD *)v2 = v4;
        v3 = v4;
        if (!v4)
          goto LABEL_7;
      }
      v3[1] = 0;
    }
LABEL_7:
    v5 = *(_QWORD *)(v2 + 32);
    if (v5)
      MEMORY[0x1C3B8D890](v5, 0xC400A2AC0F1);
    MEMORY[0x1C3B8D890](v2, 0x10A0C40AAA3F4FELL);
  }
  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy(a1 + 40);
  return a1;
}

uint64_t rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy(uint64_t a1)
{
  uint64_t result;

  free(*(void **)(a1 + 16));
  result = *(_QWORD *)(a1 + 8);
  if (result)
    JUMPOUT(0x1C3B8D890);
  return result;
}

void siri::dialogengine::ConvertRapidJSONToJSONArray(unsigned int **a1, char **a2, double a3)
{
  unsigned int *v3;
  int v4;
  unsigned int *v7;
  _QWORD *v8;
  int v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  char *v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  __int128 v40;
  int64x2_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  __int128 v52;
  int64x2_t v53;
  char *String;
  unint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  __int128 v63;
  int64x2_t v64;
  char *v65;
  char *v66;
  std::__shared_weak_count *v67;
  unint64_t *p_shared_owners;
  unint64_t v69;
  char *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  __int128 v88;
  int64x2_t v89;
  double Double;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  __int128 v97;
  char *v98;
  char *v99;
  __int128 v100;
  void *__p[2];
  uint64_t v102;
  void **v103;
  int64x2_t v104;
  char *v105;
  _QWORD *v106;

  v3 = *a1;
  v4 = *((unsigned __int16 *)*a1 + 11);
  if (v4 != 4)
    __assert_rtn("Begin", "document.h", 1591, "IsArray()");
  v7 = (unsigned int *)*((_QWORD *)v3 + 1);
  v8 = a2 + 2;
  while (1)
  {
    if (v4 != 4)
      __assert_rtn("End", "document.h", 1594, "IsArray()");
    if (v7 == (unsigned int *)(*((_QWORD *)v3 + 1) + 24 * *v3))
      break;
    v9 = *((unsigned __int16 *)v7 + 11);
    if (v9 == 3)
    {
      __p[1] = 0;
      v102 = 0;
      __p[0] = &__p[1];
      if (*((_WORD *)v7 + 11) != 3)
        __assert_rtn("GetObject", "document.h", 1545, "IsObject()");
      siri::dialogengine::ConvertRapidJSONToJSONObj(*((_QWORD *)v7 + 1), *((_QWORD *)v7 + 1) + 48 * *v7, __p);
      siri::dialogengine::CreateJSONObjectVal((const void ***)__p, (uint64_t *)&v100);
      v13 = a2[1];
      v12 = (unint64_t)a2[2];
      if ((unint64_t)v13 >= v12)
      {
        v42 = (v13 - *a2) >> 4;
        if ((unint64_t)(v42 + 1) >> 60)
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        v43 = v12 - (_QWORD)*a2;
        v44 = v43 >> 3;
        if (v43 >> 3 <= (unint64_t)(v42 + 1))
          v44 = v42 + 1;
        if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF0)
          v45 = 0xFFFFFFFFFFFFFFFLL;
        else
          v45 = v44;
        v106 = v8;
        v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v45);
        v48 = &v46[16 * v42];
        *(_OWORD *)v48 = v100;
        v100 = 0uLL;
        v50 = *a2;
        v49 = a2[1];
        if (v49 == *a2)
        {
          v53 = vdupq_n_s64((unint64_t)v49);
          v51 = &v46[16 * v42];
        }
        else
        {
          v51 = &v46[16 * v42];
          do
          {
            v52 = *((_OWORD *)v49 - 1);
            v49 -= 16;
            *((_OWORD *)v51 - 1) = v52;
            v51 -= 16;
            *(_QWORD *)v49 = 0;
            *((_QWORD *)v49 + 1) = 0;
          }
          while (v49 != v50);
          v53 = *(int64x2_t *)a2;
        }
        v14 = v48 + 16;
        *a2 = v51;
        a2[1] = v48 + 16;
        v104 = v53;
        v70 = a2[2];
        a2[2] = &v46[16 * v47];
        v105 = v70;
        v103 = (void **)v53.i64[0];
        std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)&v103);
      }
      else
      {
        *(_OWORD *)v13 = v100;
        v14 = v13 + 16;
      }
      a2[1] = v14;
      std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)__p[1]);
    }
    else if (v9 == 4)
    {
      __p[0] = 0;
      __p[1] = 0;
      v102 = 0;
      if (*((_WORD *)v7 + 11) != 4)
        __assert_rtn("GetArray", "document.h", 1724, "IsArray()");
      v103 = (void **)v7;
      siri::dialogengine::ConvertRapidJSONToJSONArray(&v103, __p);
      siri::dialogengine::CreateJSONArrayVal((_QWORD **)__p, &v100);
      v11 = a2[1];
      v10 = (unint64_t)a2[2];
      if ((unint64_t)v11 >= v10)
      {
        v30 = (v11 - *a2) >> 4;
        v31 = v30 + 1;
        if ((unint64_t)(v30 + 1) >> 60)
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        v32 = v10 - (_QWORD)*a2;
        if (v32 >> 3 > v31)
          v31 = v32 >> 3;
        if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0)
          v33 = 0xFFFFFFFFFFFFFFFLL;
        else
          v33 = v31;
        v106 = v8;
        v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v33);
        v36 = &v34[16 * v30];
        *(_OWORD *)v36 = v100;
        v100 = 0uLL;
        v38 = *a2;
        v37 = a2[1];
        if (v37 == *a2)
        {
          v41 = vdupq_n_s64((unint64_t)v37);
          v39 = &v34[16 * v30];
        }
        else
        {
          v39 = &v34[16 * v30];
          do
          {
            v40 = *((_OWORD *)v37 - 1);
            v37 -= 16;
            *((_OWORD *)v39 - 1) = v40;
            v39 -= 16;
            *(_QWORD *)v37 = 0;
            *((_QWORD *)v37 + 1) = 0;
          }
          while (v37 != v38);
          v41 = *(int64x2_t *)a2;
        }
        v65 = v36 + 16;
        *a2 = v39;
        a2[1] = v36 + 16;
        v104 = v41;
        v66 = a2[2];
        a2[2] = &v34[16 * v35];
        v105 = v66;
        v103 = (void **)v41.i64[0];
        std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)&v103);
        v67 = (std::__shared_weak_count *)*((_QWORD *)&v100 + 1);
        a2[1] = v65;
        if (v67)
        {
          p_shared_owners = (unint64_t *)&v67->__shared_owners_;
          do
            v69 = __ldaxr(p_shared_owners);
          while (__stlxr(v69 - 1, p_shared_owners));
          if (!v69)
          {
            ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
            std::__shared_weak_count::__release_weak(v67);
          }
        }
      }
      else
      {
        *(_OWORD *)v11 = v100;
        a2[1] = v11 + 16;
      }
      v103 = __p;
      std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v103);
    }
    else
    {
      if ((v9 & 8) != 0)
      {
        siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)(v9 == 10), (uint64_t *)__p);
        v16 = a2[1];
        v28 = (unint64_t)a2[2];
        if ((unint64_t)v16 < v28)
          goto LABEL_30;
        v58 = (v16 - *a2) >> 4;
        if ((unint64_t)(v58 + 1) >> 60)
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        v59 = v28 - (_QWORD)*a2;
        v60 = v59 >> 3;
        if (v59 >> 3 <= (unint64_t)(v58 + 1))
          v60 = v58 + 1;
        if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF0)
          v61 = 0xFFFFFFFFFFFFFFFLL;
        else
          v61 = v60;
        v106 = v8;
        v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v61);
        v23 = &v21[16 * v58];
        *(_OWORD *)v23 = *(_OWORD *)__p;
        __p[0] = 0;
        __p[1] = 0;
        v62 = *a2;
        v24 = a2[1];
        if (v24 == *a2)
          goto LABEL_105;
        v26 = &v21[16 * v58];
        do
        {
          v63 = *((_OWORD *)v24 - 1);
          v24 -= 16;
          *((_OWORD *)v26 - 1) = v63;
          v26 -= 16;
          *(_QWORD *)v24 = 0;
          *((_QWORD *)v24 + 1) = 0;
        }
        while (v24 != v62);
        goto LABEL_62;
      }
      if ((v9 & 0x400) == 0)
      {
        if ((v9 & 0x20) != 0)
        {
          siri::dialogengine::CreateJSONIntVal((siri::dialogengine *)*v7, (uint64_t *)__p);
          v16 = a2[1];
          v71 = (unint64_t)a2[2];
          if ((unint64_t)v16 < v71)
            goto LABEL_30;
          v72 = (v16 - *a2) >> 4;
          if ((unint64_t)(v72 + 1) >> 60)
            std::vector<BOOL>::__throw_length_error[abi:ne180100]();
          v73 = v71 - (_QWORD)*a2;
          v74 = v73 >> 3;
          if (v73 >> 3 <= (unint64_t)(v72 + 1))
            v74 = v72 + 1;
          if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF0)
            v75 = 0xFFFFFFFFFFFFFFFLL;
          else
            v75 = v74;
          v106 = v8;
          v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v75);
          v23 = &v21[16 * v72];
          *(_OWORD *)v23 = *(_OWORD *)__p;
          __p[0] = 0;
          __p[1] = 0;
          v76 = *a2;
          v24 = a2[1];
          if (v24 == *a2)
            goto LABEL_105;
          v26 = &v21[16 * v72];
          do
          {
            v77 = *((_OWORD *)v24 - 1);
            v24 -= 16;
            *((_OWORD *)v26 - 1) = v77;
            v26 -= 16;
            *(_QWORD *)v24 = 0;
            *((_QWORD *)v24 + 1) = 0;
          }
          while (v24 != v76);
        }
        else
        {
          if ((v9 & 0x200) == 0)
          {
            if ((v9 & 0x40) == 0)
              goto LABEL_108;
            siri::dialogengine::CreateJSONIntVal((siri::dialogengine *)*v7, (uint64_t *)__p);
            v16 = a2[1];
            v15 = (unint64_t)a2[2];
            if ((unint64_t)v16 >= v15)
            {
              v17 = (v16 - *a2) >> 4;
              if ((unint64_t)(v17 + 1) >> 60)
                std::vector<BOOL>::__throw_length_error[abi:ne180100]();
              v18 = v15 - (_QWORD)*a2;
              v19 = v18 >> 3;
              if (v18 >> 3 <= (unint64_t)(v17 + 1))
                v19 = v17 + 1;
              if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0)
                v20 = 0xFFFFFFFFFFFFFFFLL;
              else
                v20 = v19;
              v106 = v8;
              v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v20);
              v23 = &v21[16 * v17];
              *(_OWORD *)v23 = *(_OWORD *)__p;
              __p[0] = 0;
              __p[1] = 0;
              v25 = *a2;
              v24 = a2[1];
              if (v24 != *a2)
              {
                v26 = &v21[16 * v17];
                do
                {
                  v27 = *((_OWORD *)v24 - 1);
                  v24 -= 16;
                  *((_OWORD *)v26 - 1) = v27;
                  v26 -= 16;
                  *(_QWORD *)v24 = 0;
                  *((_QWORD *)v24 + 1) = 0;
                }
                while (v24 != v25);
                goto LABEL_62;
              }
LABEL_105:
              v64 = vdupq_n_s64((unint64_t)v24);
              v26 = v23;
LABEL_106:
              v29 = v23 + 16;
              *a2 = v26;
              a2[1] = v23 + 16;
              v104 = v64;
              v98 = a2[2];
              a2[2] = &v21[16 * v22];
              v105 = v98;
              v103 = (void **)v64.i64[0];
              std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)&v103);
LABEL_107:
              a2[1] = v29;
              goto LABEL_108;
            }
LABEL_30:
            a3 = *(double *)__p;
            *(_OWORD *)v16 = *(_OWORD *)__p;
            v29 = v16 + 16;
            goto LABEL_107;
          }
          Double = rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetDouble(v7, a3);
          siri::dialogengine::CreateJSONIntVal((siri::dialogengine *)(int)Double, (uint64_t *)__p);
          v16 = a2[1];
          v91 = (unint64_t)a2[2];
          if ((unint64_t)v16 < v91)
            goto LABEL_30;
          v92 = (v16 - *a2) >> 4;
          if ((unint64_t)(v92 + 1) >> 60)
            std::vector<BOOL>::__throw_length_error[abi:ne180100]();
          v93 = v91 - (_QWORD)*a2;
          v94 = v93 >> 3;
          if (v93 >> 3 <= (unint64_t)(v92 + 1))
            v94 = v92 + 1;
          if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFF0)
            v95 = 0xFFFFFFFFFFFFFFFLL;
          else
            v95 = v94;
          v106 = v8;
          v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v95);
          v23 = &v21[16 * v92];
          *(_OWORD *)v23 = *(_OWORD *)__p;
          __p[0] = 0;
          __p[1] = 0;
          v96 = *a2;
          v24 = a2[1];
          if (v24 == *a2)
            goto LABEL_105;
          v26 = &v21[16 * v92];
          do
          {
            v97 = *((_OWORD *)v24 - 1);
            v24 -= 16;
            *((_OWORD *)v26 - 1) = v97;
            v26 -= 16;
            *(_QWORD *)v24 = 0;
            *((_QWORD *)v24 + 1) = 0;
          }
          while (v24 != v96);
        }
LABEL_62:
        v64 = *(int64x2_t *)a2;
        goto LABEL_106;
      }
      String = (char *)rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::GetString((uint64_t)v7);
      std::string::basic_string[abi:ne180100]<0>(__p, String);
      siri::dialogengine::CreateJSONStringVal((uint64_t)__p, (uint64_t *)&v100);
      v56 = a2[1];
      v55 = (unint64_t)a2[2];
      if ((unint64_t)v56 >= v55)
      {
        v78 = (v56 - *a2) >> 4;
        if ((unint64_t)(v78 + 1) >> 60)
          std::vector<BOOL>::__throw_length_error[abi:ne180100]();
        v79 = v55 - (_QWORD)*a2;
        v80 = v79 >> 3;
        if (v79 >> 3 <= (unint64_t)(v78 + 1))
          v80 = v78 + 1;
        if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF0)
          v81 = 0xFFFFFFFFFFFFFFFLL;
        else
          v81 = v80;
        v106 = v8;
        v82 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v81);
        v84 = &v82[16 * v78];
        *(_OWORD *)v84 = v100;
        v100 = 0uLL;
        v86 = *a2;
        v85 = a2[1];
        if (v85 == *a2)
        {
          v89 = vdupq_n_s64((unint64_t)v85);
          v87 = &v82[16 * v78];
        }
        else
        {
          v87 = &v82[16 * v78];
          do
          {
            v88 = *((_OWORD *)v85 - 1);
            v85 -= 16;
            *((_OWORD *)v87 - 1) = v88;
            v87 -= 16;
            *(_QWORD *)v85 = 0;
            *((_QWORD *)v85 + 1) = 0;
          }
          while (v85 != v86);
          v89 = *(int64x2_t *)a2;
        }
        v57 = v84 + 16;
        *a2 = v87;
        a2[1] = v84 + 16;
        v104 = v89;
        v99 = a2[2];
        a2[2] = &v82[16 * v83];
        v105 = v99;
        v103 = (void **)v89.i64[0];
        std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)&v103);
      }
      else
      {
        a3 = *(double *)&v100;
        *(_OWORD *)v56 = v100;
        v57 = v56 + 16;
      }
      a2[1] = v57;
      if (SHIBYTE(v102) < 0)
        operator delete(__p[0]);
    }
LABEL_108:
    v7 += 6;
    v3 = *a1;
    v4 = *((unsigned __int16 *)*a1 + 11);
  }
}

void sub_1BF8994D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t **v6;
  char *v7;
  std::string *v8;
  _QWORD v9[2];
  char v10;
  uint64_t v11;

  v5 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  if (!*v5)
  {
    v6 = v5;
    v7 = (char *)operator new(0x48uLL);
    v9[0] = v7;
    v9[1] = a1 + 1;
    v10 = 0;
    v8 = (std::string *)(v7 + 32);
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      *((_QWORD *)v7 + 6) = *(_QWORD *)(a3 + 16);
    }
    *(_OWORD *)(v7 + 56) = *(_OWORD *)(a3 + 24);
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    v10 = 1;
    std::__tree<std::string>::__insert_node_at(a1, v11, v6, (uint64_t *)v7);
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>>>>::reset[abi:ne180100]((uint64_t)v9);
  }
}

void sub_1BF899650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>>>>::reset[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL rapidjson::ParseResult::IsError(rapidjson::ParseResult *this)
{
  return *(_DWORD *)this != 0;
}

uint64_t rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::ClearStackOnExit::~ClearStackOnExit(uint64_t a1)
{
  _QWORD *v2;
  void *v3;

  v2 = *(_QWORD **)a1;
  v3 = *(void **)(*(_QWORD *)a1 + 56);
  v2[8] = v3;
  free(v3);
  v2[7] = 0;
  v2[8] = 0;
  v2[9] = 0;
  return a1;
}

char *rapidjson::internal::Stack<rapidjson::CrtAllocator>::Resize(_QWORD *a1, size_t size)
{
  void *v4;
  uint64_t v5;
  char *result;

  v4 = (void *)a1[2];
  v5 = a1[3];
  if (size)
  {
    result = (char *)malloc_type_realloc(v4, size, 0x9D18BDCDuLL);
  }
  else
  {
    free(v4);
    result = 0;
  }
  a1[2] = result;
  a1[3] = &result[v5 - (_QWORD)v4];
  a1[4] = &result[size];
  return result;
}

void rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseValue<128u,rapidjson::GenericStringStream<rapidjson::UTF8<char>>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>(uint64_t a1, unsigned __int8 **a2, _QWORD *a3)
{
  char *v6;
  int v7;
  int v8;
  _BYTE *v9;
  uint64_t v10;
  __int16 v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned __int8 *i;
  unsigned int v15;
  uint64_t v16;
  char *v18;
  int v19;
  unsigned __int8 *v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  unsigned __int8 *m;
  unsigned int v30;
  uint64_t v31;
  int v33;
  _QWORD *v34;
  unsigned int v35;
  _QWORD *v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  unint64_t v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  _BYTE *v44;
  unsigned __int8 *v45;
  unsigned int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  unsigned int v52;
  double v53;
  unsigned int v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  double v59;
  __int16 v60;
  int64_t v61;
  int v62;
  unsigned __int8 *v63;
  int v64;
  int v65;
  __n128 v66;
  unsigned __int8 *j;
  unsigned int v68;
  uint64_t v69;
  unsigned __int8 *v71;
  unsigned int v72;
  uint64_t v73;
  char *k;
  unsigned int v76;
  uint64_t v77;
  int v79;
  unsigned int v80;
  uint64_t v81;
  int v83;
  unsigned int v84;
  unsigned __int8 *n;
  unsigned int v86;
  uint64_t v87;
  int v89;
  unsigned __int8 *v90;
  unsigned int v91;
  uint64_t v92;
  int v94;
  int v95;
  int v96;
  const char *v97;
  int v98;
  const char *v99;
  const char *v100;
  int v101;
  int v102;
  BOOL v103;

  v6 = (char *)*a2;
  v7 = (char)**a2;
  v8 = **a2;
  if (v7 > 109)
  {
    if (v7 != 123)
    {
      if (v7 == 116)
      {
        if (v8 != 116)
          __assert_rtn("ParseTrue", "reader.h", 868, "is.Peek() == 't'");
        v9 = v6 + 1;
        *a2 = (unsigned __int8 *)(v6 + 1);
        if (v6[1] == 114)
        {
          v9 = v6 + 2;
          *a2 = (unsigned __int8 *)(v6 + 2);
          if (v6[2] == 117)
          {
            v9 = v6 + 3;
            *a2 = (unsigned __int8 *)(v6 + 3);
            if (v6[3] == 101)
            {
              *a2 = (unsigned __int8 *)(v6 + 4);
              v10 = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>(a3 + 5);
              *(_QWORD *)(v10 + 8) = 0;
              *(_QWORD *)(v10 + 16) = 0;
              *(_QWORD *)v10 = 0;
              v11 = 10;
              goto LABEL_53;
            }
          }
        }
        if (*(_DWORD *)(a1 + 48))
          __assert_rtn("ParseTrue", "reader.h", 876, "!HasParseError()");
        goto LABEL_143;
      }
      if (v7 == 110)
      {
        if (v8 != 110)
          __assert_rtn("ParseNull", "reader.h", 855, "is.Peek() == 'n'");
        v9 = v6 + 1;
        *a2 = (unsigned __int8 *)(v6 + 1);
        if (v6[1] == 117)
        {
          v9 = v6 + 2;
          *a2 = (unsigned __int8 *)(v6 + 2);
          if (v6[2] == 108)
          {
            v9 = v6 + 3;
            *a2 = (unsigned __int8 *)(v6 + 3);
            if (v6[3] == 108)
            {
              *a2 = (unsigned __int8 *)(v6 + 4);
              v12 = (_QWORD *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>(a3 + 5);
              v12[1] = 0;
              v12[2] = 0;
              *v12 = 0;
              return;
            }
          }
        }
        if (*(_DWORD *)(a1 + 48))
          __assert_rtn("ParseNull", "reader.h", 863, "!HasParseError()");
LABEL_143:
        v61 = v9 - a2[1];
        v62 = 3;
LABEL_144:
        *(_DWORD *)(a1 + 48) = v62;
        *(_QWORD *)(a1 + 56) = v61;
        return;
      }
LABEL_27:
      v18 = (char *)a2[1];
      if (v8 == 45)
      {
        v20 = (unsigned __int8 *)(v6 + 1);
        v19 = v6[1];
      }
      else
      {
        v19 = **a2;
        v20 = *a2;
      }
      LODWORD(v21) = v19 - 48;
      if (v19 == 48)
      {
        v39 = 0;
        LODWORD(v26) = 0;
        v40 = 0;
        v41 = 0;
        v25 = 0.0;
        v22 = v20[1];
        v23 = (uint64_t)(v20 + 1);
      }
      else
      {
        if ((v19 - 49) > 8)
        {
          if (*(_DWORD *)(a1 + 48))
            __assert_rtn("ParseNumber", "reader.h", 1532, "!HasParseError()");
          v63 = (unsigned __int8 *)(v20 - (unsigned __int8 *)v18);
          v64 = 3;
          goto LABEL_211;
        }
        v23 = (uint64_t)(v20 + 1);
        v22 = v20[1];
        v24 = v22 - 48;
        v25 = 0.0;
        if (v8 == 45)
        {
          if (v24 <= 9)
          {
            v26 = 0;
            while (1)
            {
              if (v21 > 0xCCCCCCB)
              {
                if ((_DWORD)v21 != 214748364)
                  goto LABEL_40;
                if (v22 > 0x38)
                  break;
              }
              LODWORD(v21) = v22 + 10 * v21 - 48;
              v22 = v20[v26++ + 2];
              if (v22 - 48 >= 0xA)
              {
                v39 = 0;
                v40 = 0;
                v41 = 0;
                v23 = (uint64_t)&v20[v26 + 1];
                goto LABEL_88;
              }
            }
            v22 = 57;
            LODWORD(v21) = 214748364;
LABEL_40:
            v23 = (uint64_t)&v20[v26 + 1];
LABEL_71:
            v40 = v21;
            if (v8 == 45)
            {
              while (v40 <= 0xCCCCCCCCCCCCCCBLL || v40 == 0xCCCCCCCCCCCCCCCLL && v22 <= 0x38)
              {
                v38 = *(unsigned __int8 *)++v23;
                v40 = v22 - 48 + 10 * v40;
                LODWORD(v26) = v26 + 1;
                v22 = v38;
                if (v38 - 48 >= 0xA)
                  goto LABEL_86;
              }
            }
            else
            {
              while (v40 <= 0x1999999999999998 || v40 == 0x1999999999999999 && v22 <= 0x35)
              {
                v42 = *(unsigned __int8 *)++v23;
                v40 = v22 - 48 + 10 * v40;
                LODWORD(v26) = v26 + 1;
                v22 = v42;
                if (v42 - 48 >= 0xA)
                {
LABEL_86:
                  v39 = 0;
                  v25 = 0.0;
                  goto LABEL_87;
                }
              }
            }
            v25 = (double)v40;
            do
            {
              v43 = *(unsigned __int8 *)++v23;
              v25 = (double)(int)(v22 - 48) + v25 * 10.0;
              v22 = v43;
            }
            while (v43 - 48 < 0xA);
            v39 = 1;
LABEL_87:
            v41 = 1;
            goto LABEL_88;
          }
        }
        else if (v24 <= 9)
        {
          v26 = 0;
          while (1)
          {
            if (v21 > 0x19999998)
            {
              if ((_DWORD)v21 != 429496729)
                goto LABEL_70;
              if (v22 > 0x35)
                break;
            }
            LODWORD(v21) = v22 + 10 * v21 - 48;
            v22 = v20[v26++ + 2];
            if (v22 - 48 >= 0xA)
            {
              v39 = 0;
              v40 = 0;
              v41 = 0;
              v23 = (uint64_t)&v20[v26 + 1];
              goto LABEL_88;
            }
          }
          LODWORD(v21) = 429496729;
LABEL_70:
          v23 = (uint64_t)&v20[v26 + 1];
          goto LABEL_71;
        }
        v39 = 0;
        LODWORD(v26) = 0;
        v40 = 0;
        v41 = 0;
      }
LABEL_88:
      v44 = (_BYTE *)(v6 - v18);
      if (v22 == 46)
      {
        v46 = *(unsigned __int8 *)(v23 + 1);
        v45 = (unsigned __int8 *)(v23 + 1);
        v22 = v46;
        if (v46 - 48 >= 0xA)
        {
          if (*(_DWORD *)(a1 + 48))
            __assert_rtn("ParseNumber", "reader.h", 1575, "!HasParseError()");
          *(_DWORD *)(a1 + 48) = 14;
          *(_QWORD *)(a1 + 56) = v45 - (unsigned __int8 *)v18;
          v20 = v45;
          goto LABEL_136;
        }
        v47 = 0;
        if ((v39 & 1) == 0)
        {
          if (!v41)
            v40 = v21;
          while (v22 <= 0x39 && !(v40 >> 53))
          {
            v49 = (char)*++v45;
            v48 = v49;
            v40 = v22 - 48 + 10 * v40;
            --v47;
            if (v40)
              LODWORD(v26) = v26 + 1;
            v22 = v48;
            if (v48 <= 47)
            {
              v50 = 0;
              v25 = (double)v40;
              v20 = v45;
              goto LABEL_107;
            }
          }
          v25 = (double)v40;
        }
        v20 = v45;
        while (v22 <= 0x39)
        {
          if ((int)v26 <= 16)
          {
            v25 = (double)(int)(v22 - 48) + v25 * 10.0;
            --v47;
            if (v25 > 0.0)
              LODWORD(v26) = v26 + 1;
          }
          v51 = (char)*++v20;
          v22 = v51;
          if (v51 <= 47)
            goto LABEL_106;
        }
        v39 = 1;
      }
      else
      {
        v47 = 0;
        v20 = (unsigned __int8 *)v23;
      }
      if (v22 != 101 && v22 != 69)
      {
        if ((v39 & 1) == 0)
        {
          if (v41)
          {
            if (v8 == 45)
              rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::Int64((uint64_t)a3, -(uint64_t)v40);
            else
              rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::Uint64((uint64_t)a3, v40);
            goto LABEL_136;
          }
          v102 = v21;
          v58 = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>(a3 + 5);
          *(_QWORD *)(v58 + 8) = 0;
          *(_QWORD *)(v58 + 16) = 0;
          if (v8 == 45)
          {
            *(_QWORD *)v58 = -v102;
            v103 = -v102 < 0;
            v60 = 182;
          }
          else
          {
            *(_QWORD *)v58 = v102;
            v103 = v102 < 0;
            v60 = 470;
          }
          if (!v103)
            v60 = 502;
          goto LABEL_135;
        }
LABEL_106:
        v50 = 0;
LABEL_107:
        v52 = v47 + v50;
        if ((int)v52 > -309)
        {
          if ((v52 & 0x80000000) == 0)
          {
            if (v52 >= 0x135)
            {
              v97 = "n >= 0 && n <= 308";
              v98 = 48;
              v99 = "pow10.h";
              v100 = "Pow10";
              goto LABEL_225;
            }
            v53 = v25 * rapidjson::internal::Pow10(int)::e[v52];
            goto LABEL_129;
          }
          v54 = -v52;
        }
        else
        {
          v53 = 0.0;
          if (v52 < 0xFFFFFD98)
            goto LABEL_132;
          v25 = v25 / 1.0e308;
          v54 = -308 - v52;
        }
        v53 = v25 / rapidjson::internal::Pow10(int)::e[v54];
LABEL_129:
        if (v53 > 1.79769313e308)
        {
          if (!*(_DWORD *)(a1 + 48))
          {
LABEL_131:
            *(_DWORD *)(a1 + 48) = 13;
            *(_QWORD *)(a1 + 56) = v44;
LABEL_136:
            *a2 = v20;
            a2[1] = (unsigned __int8 *)v18;
            return;
          }
          v97 = "!HasParseError()";
          v98 = 1707;
          v99 = "reader.h";
          v100 = "ParseNumber";
LABEL_225:
          __assert_rtn(v100, v99, v98, v97);
        }
LABEL_132:
        v58 = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>(a3 + 5);
        v59 = -v53;
        if (v8 != 45)
          v59 = v53;
        *(_QWORD *)(v58 + 8) = 0;
        *(_QWORD *)(v58 + 16) = 0;
        *(double *)v58 = v59;
        v60 = 534;
LABEL_135:
        *(_WORD *)(v58 + 22) = v60;
        goto LABEL_136;
      }
      v55 = v20[1];
      v21 = v21;
      if (v41)
        v21 = v40;
      if (!v39)
        v25 = (double)v21;
      if (v55 == 43)
      {
        v55 = v20[2];
        if ((v55 - 48) < 0xA)
        {
          v56 = 3;
          goto LABEL_119;
        }
        v20 += 2;
      }
      else if (v55 == 45)
      {
        v94 = v20[2] - 48;
        if (v94 < 0xA)
        {
          v20 += 3;
          if (v47 >= 1)
            __assert_rtn("ParseNumber", "reader.h", 1639, "expFrac <= 0");
          v95 = *v20;
          if ((v95 - 48) <= 9)
          {
            while (1)
            {
              v94 = v95 + 10 * v94 - 48;
              if (v94 > (v47 + 2147483639) / 10)
                break;
              v96 = *++v20;
              v95 = v96;
              if ((v96 - 48) >= 0xA)
                goto LABEL_223;
            }
            do
              v101 = *++v20;
            while ((v101 - 48) < 0xA);
          }
LABEL_223:
          v50 = -v94;
          goto LABEL_107;
        }
        v20 += 2;
      }
      else
      {
        if ((v55 - 48) < 0xA)
        {
          v56 = 2;
LABEL_119:
          v20 += v56;
          v50 = v55 - 48;
          do
          {
            v57 = *v20;
            if ((v57 - 48) > 9)
              goto LABEL_107;
            ++v20;
            v50 = v57 + 10 * v50 - 48;
          }
          while (v50 <= 308 - v47);
          if (*(_DWORD *)(a1 + 48))
            __assert_rtn("ParseNumber", "reader.h", 1655, "!HasParseError()");
          goto LABEL_131;
        }
        ++v20;
      }
      if (*(_DWORD *)(a1 + 48))
        __assert_rtn("ParseNumber", "reader.h", 1660, "!HasParseError()");
      v63 = (unsigned __int8 *)(v20 - (unsigned __int8 *)v18);
      v64 = 15;
LABEL_211:
      *(_DWORD *)(a1 + 48) = v64;
      *(_QWORD *)(a1 + 56) = v63;
      goto LABEL_136;
    }
    if (v8 != 123)
      __assert_rtn("ParseObject", "reader.h", 739, "is.Peek() == '{'");
    *a2 = (unsigned __int8 *)(v6 + 1);
    v13 = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>(a3 + 5);
    *(_QWORD *)(v13 + 8) = 0;
    *(_QWORD *)(v13 + 16) = 0;
    *(_QWORD *)v13 = 0;
    *(_WORD *)(v13 + 22) = 3;
    for (i = *a2; ; ++i)
    {
      v15 = *i;
      v103 = v15 > 0x20;
      v16 = (1 << v15) & 0x100002600;
      if (v103 || v16 == 0)
        break;
    }
    *a2 = i;
    if (!*(_DWORD *)(a1 + 48))
    {
      v33 = *i;
      if (v33 == 125)
      {
        *a2 = i + 1;
        v34 = a3;
        v35 = 0;
LABEL_57:
        rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::EndObject(v34, v35);
      }
      else
      {
        if (v33 != 34)
        {
LABEL_190:
          v61 = i - a2[1];
          v62 = 4;
          goto LABEL_144;
        }
        v65 = 0;
        while (1)
        {
          v66.n128_f64[0] = rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseString<128u,rapidjson::GenericStringStream<rapidjson::UTF8<char>>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>(a1, a2, (uint64_t)a3);
          if (*(_DWORD *)(a1 + 48))
            break;
          for (j = *a2; ; ++j)
          {
            v68 = *j;
            v103 = v68 > 0x20;
            v69 = (1 << v68) & 0x100002600;
            if (v103 || v69 == 0)
              break;
          }
          *a2 = j;
          if (*j != 58)
          {
            v61 = j - a2[1];
            v62 = 5;
            goto LABEL_144;
          }
          v71 = j + 1;
          *a2 = v71;
          while (1)
          {
            v72 = *v71;
            v103 = v72 > 0x20;
            v73 = (1 << v72) & 0x100002600;
            if (v103 || v73 == 0)
              break;
            ++v71;
          }
          *a2 = v71;
          rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseValue<128u,rapidjson::GenericStringStream<rapidjson::UTF8<char>>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>(a1, a2, a3, v66);
          if (*(_DWORD *)(a1 + 48))
            return;
          for (k = (char *)*a2; ; ++k)
          {
            v76 = *k;
            v103 = v76 > 0x20;
            v77 = (1 << v76) & 0x100002600;
            if (v103 || v77 == 0)
              break;
          }
          *a2 = (unsigned __int8 *)k;
          v35 = v65 + 1;
          v79 = *k;
          if (v79 != 44)
          {
            if (v79 == 125)
            {
              *a2 = (unsigned __int8 *)(k + 1);
              v34 = a3;
              goto LABEL_57;
            }
            v61 = k - (char *)a2[1];
            v62 = 6;
            goto LABEL_144;
          }
          i = (unsigned __int8 *)(k + 1);
          *a2 = i;
          while (1)
          {
            v80 = *i;
            v103 = v80 > 0x20;
            v81 = (1 << v80) & 0x100002600;
            if (v103 || v81 == 0)
              break;
            ++i;
          }
          *a2 = i;
          v83 = *i;
          if (v83 == 125)
          {
            rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::EndObject(a3, v35);
LABEL_213:
            ++*a2;
            return;
          }
          ++v65;
          if (v83 != 34)
            goto LABEL_190;
        }
      }
    }
  }
  else
  {
    if (v7 == 34)
    {
      rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseString<128u,rapidjson::GenericStringStream<rapidjson::UTF8<char>>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>(a1, a2, (uint64_t)a3);
      return;
    }
    if (v7 != 91)
    {
      if (v7 == 102)
      {
        if (v8 != 102)
          __assert_rtn("ParseFalse", "reader.h", 881, "is.Peek() == 'f'");
        v9 = v6 + 1;
        *a2 = (unsigned __int8 *)(v6 + 1);
        if (v6[1] == 97)
        {
          v9 = v6 + 2;
          *a2 = (unsigned __int8 *)(v6 + 2);
          if (v6[2] == 108)
          {
            v9 = v6 + 3;
            *a2 = (unsigned __int8 *)(v6 + 3);
            if (v6[3] == 115)
            {
              v9 = v6 + 4;
              *a2 = (unsigned __int8 *)(v6 + 4);
              if (v6[4] == 101)
              {
                *a2 = (unsigned __int8 *)(v6 + 5);
                v10 = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>(a3 + 5);
                *(_QWORD *)(v10 + 8) = 0;
                *(_QWORD *)(v10 + 16) = 0;
                *(_QWORD *)v10 = 0;
                v11 = 9;
LABEL_53:
                *(_WORD *)(v10 + 22) = v11;
                return;
              }
            }
          }
        }
        if (*(_DWORD *)(a1 + 48))
          __assert_rtn("ParseFalse", "reader.h", 889, "!HasParseError()");
        goto LABEL_143;
      }
      goto LABEL_27;
    }
    if (v8 != 91)
      __assert_rtn("ParseArray", "reader.h", 807, "is.Peek() == '['");
    *a2 = (unsigned __int8 *)(v6 + 1);
    v27 = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>(a3 + 5);
    *(_QWORD *)(v27 + 8) = 0;
    *(_QWORD *)(v27 + 16) = 0;
    *(_QWORD *)v27 = 0;
    *(_WORD *)(v27 + 22) = 4;
    for (m = *a2; ; ++m)
    {
      v30 = *m;
      v103 = v30 > 0x20;
      v31 = (1 << v30) & 0x100002600;
      if (v103 || v31 == 0)
        break;
    }
    *a2 = m;
    if (!*(_DWORD *)(a1 + 48))
    {
      if (*m == 93)
      {
        *a2 = m + 1;
        v36 = a3;
        v37 = 0;
LABEL_61:
        rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::EndArray(v36, v37);
      }
      else
      {
        v84 = 0;
        while (1)
        {
          rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseValue<128u,rapidjson::GenericStringStream<rapidjson::UTF8<char>>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>(a1, a2, a3, v28);
          if (*(_DWORD *)(a1 + 48))
            break;
          for (n = *a2; ; ++n)
          {
            v86 = *n;
            v103 = v86 > 0x20;
            v87 = (1 << v86) & 0x100002600;
            if (v103 || v87 == 0)
              break;
          }
          ++v84;
          *a2 = n;
          v89 = *n;
          if (v89 != 44)
          {
            if (v89 == 93)
            {
              *a2 = n + 1;
              v36 = a3;
              v37 = v84;
              goto LABEL_61;
            }
            v61 = n - a2[1];
            v62 = 7;
            goto LABEL_144;
          }
          v90 = n + 1;
          *a2 = v90;
          while (1)
          {
            v91 = *v90;
            v103 = v91 > 0x20;
            v92 = (1 << v91) & 0x100002600;
            if (v103 || v92 == 0)
              break;
            ++v90;
          }
          *a2 = v90;
          if (*v90 == 93)
          {
            rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::EndArray(a3, v84);
            goto LABEL_213;
          }
        }
      }
    }
  }
}

void sub_1BF89A4E0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v3;
  v1[1] = v2;
  _Unwind_Resume(a1);
}

double rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseString<128u,rapidjson::GenericStringStream<rapidjson::UTF8<char>>,rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>>(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  unsigned __int8 *v5;
  unsigned int v6;
  _BYTE *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  const char *v16;
  int v17;
  unsigned __int8 *v18;
  int v19;
  double result;
  int v21;
  uint64_t v22;
  int v23[2];
  unsigned int v24;
  __int128 v25;
  _OWORD *v26;

  v25 = *a2;
  v26 = a2;
  if (*(_BYTE *)v25 != 34)
    __assert_rtn("ParseString", "reader.h", 961, "s.Peek() == '\\\"'");
  v5 = (unsigned __int8 *)(v25 + 1);
  *(_QWORD *)&v25 = v25 + 1;
  *(_QWORD *)v23 = a1;
  v24 = 0;
  while (1)
  {
    while (1)
    {
      v6 = *v5;
      if (v6 == 92)
        break;
      if (v6 == 34)
      {
        *(_QWORD *)&v25 = v5 + 1;
        *(_BYTE *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*(uint64_t **)v23, 1) = 0;
        ++v24;
        if (!*(_DWORD *)(a1 + 48))
        {
          v15 = v24;
          v16 = (const char *)rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::StackStream<char>::Pop(*(uint64_t *)v23, v24);
          rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::String(a3, v16, v15 - 1);
        }
        goto LABEL_27;
      }
      if (v6 <= 0x1F)
      {
        v17 = *(_DWORD *)(a1 + 48);
        if (*v5)
        {
          if (!v17)
          {
            v18 = &v5[-*((_QWORD *)&v25 + 1)];
            v19 = 12;
            goto LABEL_26;
          }
          v21 = 1044;
        }
        else
        {
          if (!v17)
          {
            v18 = &v5[-*((_QWORD *)&v25 + 1)];
            v19 = 11;
            goto LABEL_26;
          }
          v21 = 1042;
        }
        goto LABEL_31;
      }
      *(_QWORD *)&v25 = ++v5;
      v7 = (_BYTE *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*(uint64_t **)v23, 1);
LABEL_7:
      *v7 = v6;
      ++v24;
    }
    v8 = v5[1];
    *(_QWORD *)&v25 = v5 + 1;
    LOBYTE(v6) = rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseStringToStream<0u,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::GenericStringStream<rapidjson::UTF8<char>>,rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::StackStream<char>>(rapidjson::GenericStringStream<rapidjson::UTF8<char>> &,rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::StackStream<char> &)::escape[v8];
    if ((_BYTE)v6)
    {
      v5 += 2;
      *(_QWORD *)&v25 = v5;
      v7 = (_BYTE *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*(uint64_t **)v23, 1);
      goto LABEL_7;
    }
    if ((_DWORD)v8 != 117)
    {
      if (!*(_DWORD *)(a1 + 48))
      {
        v19 = 10;
        v18 = &v5[-*((_QWORD *)&v25 + 1)];
        goto LABEL_26;
      }
      v21 = 1033;
LABEL_31:
      __assert_rtn("ParseStringToStream", "reader.h", v21, "!HasParseError()");
    }
    *(_QWORD *)&v25 = v5 + 2;
    v22 = (uint64_t)&v5[-*((_QWORD *)&v25 + 1)];
    v9 = rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseHex4<rapidjson::GenericStringStream<rapidjson::UTF8<char>>>(a1, (uint64_t *)&v25, (uint64_t)&v5[-*((_QWORD *)&v25 + 1)]);
    v10 = v9;
    if (*(_DWORD *)(a1 + 48))
      goto LABEL_27;
    if (v9 >> 10 == 54)
      break;
LABEL_13:
    rapidjson::UTF8<char>::Encode<rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::StackStream<char>>((uint64_t)v23, v10);
    v5 = (unsigned __int8 *)v25;
  }
  v11 = v25;
  if (*(_BYTE *)v25 == 92)
  {
    v12 = *(unsigned __int8 *)(v25 + 1);
    *(_QWORD *)&v25 = v25 + 1;
    if (v12 == 117)
    {
      v13 = v9;
      *(_QWORD *)&v25 = v11 + 2;
      v14 = rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseHex4<rapidjson::GenericStringStream<rapidjson::UTF8<char>>>(a1, (uint64_t *)&v25, v22);
      if (*(_DWORD *)(a1 + 48))
        goto LABEL_27;
      if ((v14 - 57344) >= 0xFFFFFC00)
      {
        v10 = ((v14 - 56320) | ((v13 << 10) - 56623104)) + 0x10000;
        goto LABEL_13;
      }
    }
  }
  v19 = 9;
  v18 = (unsigned __int8 *)v22;
LABEL_26:
  *(_DWORD *)(a1 + 48) = v19;
  *(_QWORD *)(a1 + 56) = v18;
LABEL_27:
  result = *(double *)&v25;
  *v26 = v25;
  return result;
}

void sub_1BF89A7B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 a13, _OWORD *a14)
{
  *a14 = a13;
  _Unwind_Resume(a1);
}

uint64_t rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>(uint64_t *a1)
{
  uint64_t result;
  uint64_t *v3;

  v3 = a1 + 3;
  result = a1[3];
  if (v3[1] - result > 23)
  {
    if (result)
      goto LABEL_3;
LABEL_6:
    __assert_rtn("PushUnsafe", "stack.h", 130, "stackTop_");
  }
  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>(a1);
  result = a1[3];
  if (!result)
    goto LABEL_6;
LABEL_3:
  if (a1[4] - result <= 23)
    __assert_rtn("PushUnsafe", "stack.h", 131, "static_cast<std::ptrdiff_t>(sizeof(T) * count) <= (stackEnd_ - stackTop_)");
  a1[3] = result + 24;
  return result;
}

uint64_t rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::Int64(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  __int16 v4;
  __int16 v5;

  result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>((uint64_t *)(a1 + 40));
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = a2;
  *(_WORD *)(result + 22) = 150;
  if ((a2 & 0x8000000000000000) != 0)
  {
    if (a2 < 0xFFFFFFFF80000000)
      return result;
    v5 = 182;
    goto LABEL_9;
  }
  if (HIDWORD(a2))
    v4 = 406;
  else
    v4 = 470;
  *(_WORD *)(result + 22) = v4;
  if (!(a2 >> 31))
  {
    v5 = v4 | 0x20;
LABEL_9:
    *(_WORD *)(result + 22) = v5;
  }
  return result;
}

uint64_t rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::Uint64(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  __int16 v4;

  result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>((uint64_t *)(a1 + 40));
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = a2;
  if (a2 < 0)
    v4 = 278;
  else
    v4 = 406;
  *(_WORD *)(result + 22) = v4;
  if (!HIDWORD(a2))
  {
    *(_WORD *)(result + 22) = v4 | 0x40;
    if (!((unint64_t)a2 >> 31))
      *(_WORD *)(result + 22) = v4 | 0x60;
  }
  return result;
}

char *rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  size_t v6;

  v2 = a1[2];
  if (v2)
  {
    v3 = a1[4] - v2 + ((unint64_t)(a1[4] - v2 + 1) >> 1);
  }
  else
  {
    if (*a1)
    {
      v2 = 0;
    }
    else
    {
      v4 = operator new();
      *a1 = v4;
      a1[1] = v4;
      v2 = a1[2];
    }
    v3 = a1[5];
  }
  v5 = a1[3] - v2 + 24;
  if (v3 <= v5)
    v6 = v5;
  else
    v6 = v3;
  return rapidjson::internal::Stack<rapidjson::CrtAllocator>::Resize(a1, v6);
}

void *rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::EndArray(_QWORD *a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  size_t v4;
  _WORD *v5;
  void *result;
  void *v8;

  v2 = a1[7];
  v3 = a1[8];
  v4 = 24 * a2;
  if (v3 - v2 < v4)
    __assert_rtn("Pop", "stack.h", 139, "GetSize() >= count * sizeof(T)");
  v5 = (_WORD *)(v3 - v4);
  a1[8] = v3 - v4;
  if (v3 - v4 - v2 <= 0x17)
    __assert_rtn("Top", "stack.h", 146, "GetSize() >= sizeof(T)");
  result = (void *)a1[3];
  if (!result)
    __assert_rtn("GetAllocator", "document.h", 2407, "allocator_");
  *(v5 - 1) = 4;
  if (a2)
  {
    v8 = (void *)rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::Malloc((uint64_t)result, 24 * a2);
    *((_QWORD *)v5 - 2) = v8;
    result = memcpy(v8, v5, v4);
  }
  else
  {
    *((_QWORD *)v5 - 2) = 0;
  }
  *((_DWORD *)v5 - 6) = a2;
  *((_DWORD *)v5 - 5) = a2;
  return result;
}

void *rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::EndObject(_QWORD *a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  size_t v4;
  _WORD *v5;
  void *result;
  void *v8;

  v2 = a1[7];
  v3 = a1[8];
  v4 = 48 * a2;
  if (v3 - v2 < v4)
    __assert_rtn("Pop", "stack.h", 139, "GetSize() >= count * sizeof(T)");
  v5 = (_WORD *)(v3 - v4);
  a1[8] = v3 - v4;
  if (v3 - v4 - v2 <= 0x17)
    __assert_rtn("Top", "stack.h", 146, "GetSize() >= sizeof(T)");
  result = (void *)a1[3];
  if (!result)
    __assert_rtn("GetAllocator", "document.h", 2407, "allocator_");
  *(v5 - 1) = 3;
  if (a2)
  {
    v8 = (void *)rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>::Malloc((uint64_t)result, 48 * a2);
    *((_QWORD *)v5 - 2) = v8;
    result = memcpy(v8, v5, v4);
  }
  else
  {
    *((_QWORD *)v5 - 2) = 0;
  }
  *((_DWORD *)v5 - 6) = a2;
  *((_DWORD *)v5 - 5) = a2;
  return result;
}

uint64_t rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::StackStream<char>::Pop(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2 - *(_QWORD *)(a1 + 16) < (unint64_t)a2)
    __assert_rtn("Pop", "stack.h", 139, "GetSize() >= count * sizeof(T)");
  v3 = v2 - a2;
  *(_QWORD *)(a1 + 24) = v3;
  return v3;
}

void *rapidjson::GenericDocument<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>,rapidjson::CrtAllocator>::String(uint64_t a1, const char *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  const char *v10;
  int v11;

  v6 = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>>((uint64_t *)(a1 + 40));
  v7 = *(_QWORD *)(a1 + 24);
  if (!v7)
    __assert_rtn("GetAllocator", "document.h", 2407, "allocator_");
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  v8 = "";
  if (a2)
    v8 = a2;
  v10 = v8;
  v11 = a3;
  if (!a2 && a3)
    __assert_rtn("GenericStringRef", "document.h", 322, "str != 0 || len == 0u");
  return rapidjson::GenericValue<rapidjson::UTF8<char>,rapidjson::MemoryPoolAllocator<rapidjson::CrtAllocator>>::SetStringRaw((_WORD *)v6, (uint64_t)&v10, v7);
}

uint64_t rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(uint64_t *a1, uint64_t a2)
{
  if (a1[4] - a1[3] < a2)
    rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(a1, a2);
  return rapidjson::internal::Stack<rapidjson::CrtAllocator>::PushUnsafe<char>((uint64_t)a1, a2);
}

uint64_t rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::ParseHex4<rapidjson::GenericStringStream<rapidjson::UTF8<char>>>(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;

  v3 = result;
  v4 = 0;
  LODWORD(result) = 0;
  v5 = *a2;
  while (1)
  {
    v6 = *(char *)(v5 + v4);
    if ((v6 - 48) >= 0xA)
      break;
    v7 = -48;
LABEL_8:
    result = (v6 + 16 * result + v7);
    *a2 = v5 + v4++ + 1;
    if ((_DWORD)v4 == 4)
      return result;
  }
  if (*(unsigned __int8 *)(v5 + v4) - 65 < 6)
  {
    v7 = -55;
    goto LABEL_8;
  }
  if (*(unsigned __int8 *)(v5 + v4) - 97 < 6)
  {
    v7 = -87;
    goto LABEL_8;
  }
  if (*(_DWORD *)(v3 + 48))
    __assert_rtn("ParseHex4", "reader.h", 917, "!HasParseError()");
  result = 0;
  *(_DWORD *)(v3 + 48) = 8;
  *(_QWORD *)(v3 + 56) = a3;
  return result;
}

_BYTE *rapidjson::UTF8<char>::Encode<rapidjson::GenericReader<rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator>::StackStream<char>>(uint64_t a1, unsigned int a2)
{
  _DWORD *v4;
  _BYTE *result;
  _DWORD *v6;

  if (a2 > 0x7F)
  {
    if (a2 > 0x7FF)
    {
      if (HIWORD(a2))
      {
        if (a2 >= 0x110000)
          __assert_rtn("Encode", "encodings.h", 115, "codepoint <= 0x10FFFF");
        *(_BYTE *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*(uint64_t **)a1, 1) = (a2 >> 18) | 0xF0;
        v6 = (_DWORD *)(a1 + 8);
        ++*(_DWORD *)(a1 + 8);
        *(_BYTE *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*(uint64_t **)a1, 1) = (a2 >> 12) & 0x3F | 0x80;
        ++*(_DWORD *)(a1 + 8);
      }
      else
      {
        *(_BYTE *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*(uint64_t **)a1, 1) = (a2 >> 12) | 0xE0;
        v6 = (_DWORD *)(a1 + 8);
        ++*(_DWORD *)(a1 + 8);
      }
      *(_BYTE *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*(uint64_t **)a1, 1) = (a2 >> 6) & 0x3F | 0x80;
      ++*v6;
    }
    else
    {
      *(_BYTE *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*(uint64_t **)a1, 1) = (a2 >> 6) | 0xC0;
      v6 = (_DWORD *)(a1 + 8);
      ++*(_DWORD *)(a1 + 8);
    }
    result = (_BYTE *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*(uint64_t **)a1, 1);
    *result = a2 & 0x3F | 0x80;
    v4 = v6;
  }
  else
  {
    v4 = (_DWORD *)(a1 + 8);
    result = (_BYTE *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*(uint64_t **)a1, 1);
    *result = a2;
  }
  ++*v4;
  return result;
}

char *rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  size_t v8;

  v4 = a1[2];
  if (v4)
  {
    v5 = a1[4] - v4 + ((unint64_t)(a1[4] - v4 + 1) >> 1);
  }
  else
  {
    if (*a1)
    {
      v4 = 0;
    }
    else
    {
      v6 = operator new();
      *a1 = v6;
      a1[1] = v6;
      v4 = a1[2];
    }
    v5 = a1[5];
  }
  v7 = a1[3] + a2 - v4;
  if (v5 <= v7)
    v8 = v7;
  else
    v8 = v5;
  return rapidjson::internal::Stack<rapidjson::CrtAllocator>::Resize(a1, v8);
}

uint64_t rapidjson::internal::Stack<rapidjson::CrtAllocator>::PushUnsafe<char>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  if (!v2)
    __assert_rtn("PushUnsafe", "stack.h", 130, "stackTop_");
  if (*(_QWORD *)(a1 + 32) - v2 < a2)
    __assert_rtn("PushUnsafe", "stack.h", 131, "static_cast<std::ptrdiff_t>(sizeof(T) * count) <= (stackEnd_ - stackTop_)");
  *(_QWORD *)(a1 + 24) = v2 + a2;
  return v2;
}

uint64_t siri::dialogengine::ConstructJSONString@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  char *String;
  _OWORD *v6;
  _OWORD v7[2];
  uint64_t v8;
  uint64_t v9;
  int v10;
  __int16 v11;
  uint64_t v12;
  _OWORD v13[2];
  uint64_t v14;
  uint64_t v15;

  memset(v13, 0, sizeof(v13));
  v14 = 0;
  v15 = 256;
  v6 = v13;
  memset(v7, 0, sizeof(v7));
  v8 = 0;
  v9 = 512;
  v10 = 324;
  v11 = 0x2000;
  v12 = 4;
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartObject((uint64_t)&v6);
  siri::dialogengine::WriteToJSON((uint64_t *)&v6, a1);
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndObject((uint64_t)&v6);
  String = (char *)rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>::GetString((uint64_t *)v13);
  std::string::basic_string[abi:ne180100]<0>(a2, String);
  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy((uint64_t)v7);
  return rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy((uint64_t)v13);
}

void sub_1BF89B0BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy(v11);
  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

_BYTE *rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartObject(uint64_t a1)
{
  uint64_t v2;
  _BYTE *result;

  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(a1, 3);
  v2 = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Level>((uint64_t *)(a1 + 8));
  *(_QWORD *)v2 = 0;
  *(_BYTE *)(v2 + 8) = 0;
  result = (_BYTE *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*(uint64_t **)a1, 1);
  *result = 123;
  return result;
}

void siri::dialogengine::WriteToJSON(uint64_t *a1, _QWORD *a2)
{
  __int128 *v2;
  __int128 *v3;
  std::string *v5;
  unsigned int v6;
  const char *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  rapidjson::internal *JSONIntVal;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  rapidjson::internal *JSONUintVal;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t JSONInt64Val;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  std::string *v24;
  unsigned int v25;
  const char *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  const char *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  _BOOL4 JSONBoolVal;
  int v41;
  unint64_t *v42;
  unint64_t *v43;
  unint64_t v44;
  double JSONDoubleVal;
  unint64_t *v46;
  unint64_t *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  __int128 *v51;
  __int128 *v52;
  BOOL v53;
  const void *v54[2];
  const void *v55[2];
  const void *v56[2];
  const void *v57[2];
  const void *v58[2];
  const void *v59[2];
  const void *v60[2];
  const void *v61[2];
  std::string __p;
  std::string v63;
  _DWORD *v64;
  std::__shared_weak_count *v65;
  std::string *p_p;

  v2 = (__int128 *)(a2 + 1);
  v3 = (__int128 *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    while (1)
    {
      std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>::pair[abi:ne180100](&v63, v3 + 2);
      if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v5 = &v63;
      else
        v5 = (std::string *)v63.__r_.__value_.__r.__words[0];
      v6 = strlen((const char *)v5);
      rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String(a1, (uint64_t)v5, v6);
      switch(v64[2])
      {
        case 0:
          v8 = v65;
          v58[0] = v64;
          v58[1] = v65;
          if (v65)
          {
            p_shared_owners = (unint64_t *)&v65->__shared_owners_;
            do
              v10 = __ldxr(p_shared_owners);
            while (__stxr(v10 + 1, p_shared_owners));
          }
          JSONIntVal = (rapidjson::internal *)siri::dialogengine::GetJSONIntVal(v58, v7);
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Int((uint64_t **)a1, JSONIntVal);
          if (v8)
          {
            v12 = (unint64_t *)&v8->__shared_owners_;
            do
              v13 = __ldaxr(v12);
            while (__stlxr(v13 - 1, v12));
            goto LABEL_74;
          }
          goto LABEL_76;
        case 1:
          v8 = v65;
          v57[0] = v64;
          v57[1] = v65;
          if (v65)
          {
            v14 = (unint64_t *)&v65->__shared_owners_;
            do
              v15 = __ldxr(v14);
            while (__stxr(v15 + 1, v14));
          }
          JSONUintVal = (rapidjson::internal *)siri::dialogengine::GetJSONUintVal(v57, v7);
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Uint((uint64_t **)a1, JSONUintVal);
          if (v8)
          {
            v17 = (unint64_t *)&v8->__shared_owners_;
            do
              v13 = __ldaxr(v17);
            while (__stlxr(v13 - 1, v17));
            goto LABEL_74;
          }
          goto LABEL_76;
        case 2:
          v8 = v65;
          v56[0] = v64;
          v56[1] = v65;
          if (v65)
          {
            v18 = (unint64_t *)&v65->__shared_owners_;
            do
              v19 = __ldxr(v18);
            while (__stxr(v19 + 1, v18));
          }
          JSONInt64Val = siri::dialogengine::GetJSONInt64Val(v56, v7);
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Int64((uint64_t **)a1, JSONInt64Val);
          if (v8)
          {
            v21 = (unint64_t *)&v8->__shared_owners_;
            do
              v13 = __ldaxr(v21);
            while (__stlxr(v13 - 1, v21));
            goto LABEL_74;
          }
          goto LABEL_76;
        case 3:
          v8 = v65;
          v59[0] = v64;
          v59[1] = v65;
          if (v65)
          {
            v38 = (unint64_t *)&v65->__shared_owners_;
            do
              v39 = __ldxr(v38);
            while (__stxr(v39 + 1, v38));
          }
          JSONBoolVal = siri::dialogengine::GetJSONBoolVal(v59, v7);
          if (JSONBoolVal)
            v41 = 2;
          else
            v41 = 1;
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)a1, v41);
          rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteBool(a1, JSONBoolVal);
          if (v8)
          {
            v42 = (unint64_t *)&v8->__shared_owners_;
            do
              v13 = __ldaxr(v42);
            while (__stlxr(v13 - 1, v42));
            goto LABEL_74;
          }
          goto LABEL_76;
        case 5:
          v8 = v65;
          v55[0] = v64;
          v55[1] = v65;
          if (v65)
          {
            v43 = (unint64_t *)&v65->__shared_owners_;
            do
              v44 = __ldxr(v43);
            while (__stxr(v44 + 1, v43));
          }
          JSONDoubleVal = siri::dialogengine::GetJSONDoubleVal(v55, v7);
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)a1, 6);
          rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteDouble((uint64_t)a1, JSONDoubleVal);
          if (v8)
          {
            v46 = (unint64_t *)&v8->__shared_owners_;
            do
              v13 = __ldaxr(v46);
            while (__stlxr(v13 - 1, v46));
            goto LABEL_74;
          }
          goto LABEL_76;
        case 6:
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartObject((uint64_t)a1);
          v27 = v65;
          v60[0] = v64;
          v60[1] = v65;
          if (v65)
          {
            v28 = (unint64_t *)&v65->__shared_owners_;
            do
              v29 = __ldxr(v28);
            while (__stxr(v29 + 1, v28));
          }
          siri::dialogengine::GetJSONObjectVal(v60, v26, &__p);
          siri::dialogengine::WriteToJSON(a1, &__p);
          std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)__p.__r_.__value_.__l.__size_);
          if (v27)
          {
            v30 = (unint64_t *)&v27->__shared_owners_;
            do
              v31 = __ldaxr(v30);
            while (__stlxr(v31 - 1, v30));
            if (!v31)
            {
              ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
              std::__shared_weak_count::__release_weak(v27);
            }
          }
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndObject((uint64_t)a1);
          goto LABEL_76;
        case 7:
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartArray((uint64_t)a1);
          v33 = v65;
          v61[0] = v64;
          v61[1] = v65;
          if (v65)
          {
            v34 = (unint64_t *)&v65->__shared_owners_;
            do
              v35 = __ldxr(v34);
            while (__stxr(v35 + 1, v34));
          }
          siri::dialogengine::GetJSONArrayVal(v61, v32, (uint64_t)&__p);
          siri::dialogengine::WriteToJSONFromArrayType((uint64_t **)a1, (const char *)&__p);
          p_p = &__p;
          std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
          if (v33)
          {
            v36 = (unint64_t *)&v33->__shared_owners_;
            do
              v37 = __ldaxr(v36);
            while (__stlxr(v37 - 1, v36));
            if (!v37)
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v33);
            }
          }
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndArray((uint64_t)a1);
          goto LABEL_76;
        default:
          v8 = v65;
          v54[0] = v64;
          v54[1] = v65;
          if (v65)
          {
            v22 = (unint64_t *)&v65->__shared_owners_;
            do
              v23 = __ldxr(v22);
            while (__stxr(v23 + 1, v22));
          }
          siri::dialogengine::GetJSONStringVal(v54, v7, &__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v24 = &__p;
          else
            v24 = (std::string *)__p.__r_.__value_.__r.__words[0];
          v25 = strlen((const char *)v24);
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String(a1, (uint64_t)v24, v25);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
            if (v8)
            {
LABEL_72:
              v47 = (unint64_t *)&v8->__shared_owners_;
              do
                v13 = __ldaxr(v47);
              while (__stlxr(v13 - 1, v47));
LABEL_74:
              if (!v13)
              {
                ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
                std::__shared_weak_count::__release_weak(v8);
              }
            }
          }
          else if (v8)
          {
            goto LABEL_72;
          }
LABEL_76:
          v48 = v65;
          if (v65)
          {
            v49 = (unint64_t *)&v65->__shared_owners_;
            do
              v50 = __ldaxr(v49);
            while (__stlxr(v50 - 1, v49));
            if (!v50)
            {
              ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
              std::__shared_weak_count::__release_weak(v48);
            }
          }
          if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v63.__r_.__value_.__l.__data_);
          v51 = (__int128 *)*((_QWORD *)v3 + 1);
          if (v51)
          {
            do
            {
              v52 = v51;
              v51 = *(__int128 **)v51;
            }
            while (v51);
          }
          else
          {
            do
            {
              v52 = (__int128 *)*((_QWORD *)v3 + 2);
              v53 = *(_QWORD *)v52 == (_QWORD)v3;
              v3 = v52;
            }
            while (!v53);
          }
          v3 = v52;
          if (v52 == v2)
            return;
          break;
      }
    }
  }
}

void sub_1BF89B5CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;

  *(_QWORD *)(v31 - 104) = &__p;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v31 - 104));
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>::~pair(v31 - 144);
  _Unwind_Resume(a1);
}

_BYTE *rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndObject(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  size_t v6;
  int v7;
  void *v8;
  _BYTE *result;

  v1 = *(_QWORD *)(a1 + 32);
  if ((unint64_t)(v1 - *(_QWORD *)(a1 + 24)) <= 0xF)
    __assert_rtn("EndObject", "prettywriter.h", 139, "Base::level_stack_.GetSize() >= sizeof(typename Base::Level)");
  if (*(_BYTE *)(v1 - 8))
    __assert_rtn("EndObject", "prettywriter.h", 140, "!Base::level_stack_.template Top<typename Base::Level>()->inArray");
  v4 = *(_QWORD *)(v1 - 16);
  v2 = v1 - 16;
  v3 = v4;
  if ((v4 & 1) != 0)
    __assert_rtn("EndObject", "prettywriter.h", 141, "0 == Base::level_stack_.template Top<typename Base::Level>()->valueCount % 2");
  *(_QWORD *)(a1 + 32) = v2;
  if (v3)
  {
    *(_BYTE *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*(uint64_t **)a1, 1) = 10;
    v6 = ((*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 4) * *(unsigned int *)(a1 + 64);
    v7 = *(unsigned __int8 *)(a1 + 61);
    v8 = (void *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*(uint64_t **)a1, v6);
    memset(v8, v7, v6);
  }
  result = (_BYTE *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*(uint64_t **)a1, 1);
  *result = 125;
  return result;
}

uint64_t rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>::GetString(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;

  *(_BYTE *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(a1, 1) = 0;
  result = a1[2];
  v3 = a1[3];
  if (v3 == result)
    __assert_rtn("Pop", "stack.h", 139, "GetSize() >= count * sizeof(T)");
  a1[3] = v3 - 1;
  return result;
}

_BYTE *rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  if (!a2)
    __assert_rtn("String", "prettywriter.h", 111, "str != 0");
  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)a1, 5);
  return rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString(a1, a2, a3);
}

_BYTE *rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartArray(uint64_t a1)
{
  uint64_t v2;
  _BYTE *result;

  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(a1, 4);
  v2 = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Level>((uint64_t *)(a1 + 8));
  *(_QWORD *)v2 = 0;
  *(_BYTE *)(v2 + 8) = 1;
  result = (_BYTE *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*(uint64_t **)a1, 1);
  *result = 91;
  return result;
}

void siri::dialogengine::WriteToJSONFromArrayType(uint64_t **a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v5;
  _DWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  rapidjson::internal *JSONIntVal;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  rapidjson::internal *JSONUintVal;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t v19;
  std::string *v20;
  unsigned int v21;
  unint64_t *v22;
  unint64_t v23;
  _BOOL4 JSONBoolVal;
  int v25;
  unint64_t *v26;
  unint64_t *v27;
  unint64_t v28;
  double JSONDoubleVal;
  unint64_t *v30;
  const char *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  const char *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  const void *v45[2];
  const void *v46[2];
  const void *v47[2];
  const void *v48[2];
  const void *v49[2];
  const void *v50[2];
  const void *v51[2];
  std::string __p;
  _DWORD *v53;
  std::__shared_weak_count *v54;
  std::string *p_p;

  v2 = *(_QWORD *)a2;
  v3 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)a2 != v3)
  {
    while (1)
    {
      v6 = *(_DWORD **)v2;
      v5 = *(std::__shared_weak_count **)(v2 + 8);
      v53 = *(_DWORD **)v2;
      v54 = v5;
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
      }
      switch(v6[2])
      {
        case 0:
          v48[0] = v6;
          v48[1] = v5;
          if (v5)
          {
            v9 = (unint64_t *)&v5->__shared_owners_;
            do
              v10 = __ldxr(v9);
            while (__stxr(v10 + 1, v9));
          }
          JSONIntVal = (rapidjson::internal *)siri::dialogengine::GetJSONIntVal(v48, a2);
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Int(a1, JSONIntVal);
          if (v5)
          {
            v12 = (unint64_t *)&v5->__shared_owners_;
            do
              v13 = __ldaxr(v12);
            while (__stlxr(v13 - 1, v12));
            goto LABEL_67;
          }
          goto LABEL_69;
        case 1:
          v47[0] = v6;
          v47[1] = v5;
          if (v5)
          {
            v14 = (unint64_t *)&v5->__shared_owners_;
            do
              v15 = __ldxr(v14);
            while (__stxr(v15 + 1, v14));
          }
          JSONUintVal = (rapidjson::internal *)siri::dialogengine::GetJSONUintVal(v47, a2);
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Uint(a1, JSONUintVal);
          if (v5)
          {
            v17 = (unint64_t *)&v5->__shared_owners_;
            do
              v13 = __ldaxr(v17);
            while (__stlxr(v13 - 1, v17));
            goto LABEL_67;
          }
          goto LABEL_69;
        case 3:
          v49[0] = v6;
          v49[1] = v5;
          if (v5)
          {
            v22 = (unint64_t *)&v5->__shared_owners_;
            do
              v23 = __ldxr(v22);
            while (__stxr(v23 + 1, v22));
          }
          JSONBoolVal = siri::dialogengine::GetJSONBoolVal(v49, a2);
          if (JSONBoolVal)
            v25 = 2;
          else
            v25 = 1;
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)a1, v25);
          rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteBool((uint64_t *)a1, JSONBoolVal);
          if (v5)
          {
            v26 = (unint64_t *)&v5->__shared_owners_;
            do
              v13 = __ldaxr(v26);
            while (__stlxr(v13 - 1, v26));
            goto LABEL_67;
          }
          goto LABEL_69;
        case 5:
          v46[0] = v6;
          v46[1] = v5;
          if (v5)
          {
            v27 = (unint64_t *)&v5->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
          }
          JSONDoubleVal = siri::dialogengine::GetJSONDoubleVal(v46, a2);
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)a1, 6);
          rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteDouble((uint64_t)a1, JSONDoubleVal);
          if (v5)
          {
            v30 = (unint64_t *)&v5->__shared_owners_;
            do
              v13 = __ldaxr(v30);
            while (__stlxr(v13 - 1, v30));
            goto LABEL_67;
          }
          goto LABEL_69;
        case 6:
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartObject((uint64_t)a1);
          v50[0] = v6;
          v50[1] = v5;
          if (v5)
          {
            v32 = (unint64_t *)&v5->__shared_owners_;
            do
              v33 = __ldxr(v32);
            while (__stxr(v33 + 1, v32));
          }
          siri::dialogengine::GetJSONObjectVal(v50, v31, &__p);
          siri::dialogengine::WriteToJSON(a1, &__p);
          std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)__p.__r_.__value_.__l.__size_);
          if (v5)
          {
            v34 = (unint64_t *)&v5->__shared_owners_;
            do
              v35 = __ldaxr(v34);
            while (__stlxr(v35 - 1, v34));
            if (!v35)
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }
          }
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndObject((uint64_t)a1);
          goto LABEL_69;
        case 7:
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::StartArray((uint64_t)a1);
          v51[0] = v6;
          v51[1] = v5;
          if (v5)
          {
            v37 = (unint64_t *)&v5->__shared_owners_;
            do
              v38 = __ldxr(v37);
            while (__stxr(v38 + 1, v37));
          }
          siri::dialogengine::GetJSONArrayVal(v51, v36, (uint64_t)&__p);
          siri::dialogengine::WriteToJSONFromArrayType(a1, &__p);
          p_p = &__p;
          std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
          if (v5)
          {
            v39 = (unint64_t *)&v5->__shared_owners_;
            do
              v40 = __ldaxr(v39);
            while (__stlxr(v40 - 1, v39));
            if (!v40)
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }
          }
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndArray((uint64_t)a1);
          goto LABEL_69;
        default:
          v45[0] = v6;
          v45[1] = v5;
          if (v5)
          {
            v18 = (unint64_t *)&v5->__shared_owners_;
            do
              v19 = __ldxr(v18);
            while (__stxr(v19 + 1, v18));
          }
          siri::dialogengine::GetJSONStringVal(v45, a2, &__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v20 = &__p;
          else
            v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
          v21 = strlen((const char *)v20);
          rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::String((uint64_t *)a1, (uint64_t)v20, v21);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
            if (v5)
            {
LABEL_65:
              v41 = (unint64_t *)&v5->__shared_owners_;
              do
                v13 = __ldaxr(v41);
              while (__stlxr(v13 - 1, v41));
LABEL_67:
              if (!v13)
              {
                ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
                std::__shared_weak_count::__release_weak(v5);
              }
            }
          }
          else if (v5)
          {
            goto LABEL_65;
          }
LABEL_69:
          v42 = v54;
          if (v54)
          {
            v43 = (unint64_t *)&v54->__shared_owners_;
            do
              v44 = __ldaxr(v43);
            while (__stlxr(v44 - 1, v43));
            if (!v44)
            {
              ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          v2 += 16;
          if (v2 == v3)
            return;
          break;
      }
    }
  }
}

void sub_1BF89BC78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  *(_QWORD *)(v28 - 104) = &__p;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 104));
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v28 - 120);
  _Unwind_Resume(a1);
}

_BYTE *rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::EndArray(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  size_t v4;
  int v5;
  void *v6;
  _BYTE *result;

  v1 = *(_QWORD *)(a1 + 32);
  if ((unint64_t)(v1 - *(_QWORD *)(a1 + 24)) <= 0xF)
    __assert_rtn("EndArray", "prettywriter.h", 165, "Base::level_stack_.GetSize() >= sizeof(typename Base::Level)");
  if (!*(_BYTE *)(v1 - 8))
    __assert_rtn("EndArray", "prettywriter.h", 166, "Base::level_stack_.template Top<typename Base::Level>()->inArray");
  v3 = *(_QWORD *)(v1 - 16);
  *(_QWORD *)(a1 + 32) = v1 - 16;
  if (v3 && (*(_BYTE *)(a1 + 68) & 1) == 0)
  {
    *(_BYTE *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*(uint64_t **)a1, 1) = 10;
    v4 = ((*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 4) * *(unsigned int *)(a1 + 64);
    v5 = *(unsigned __int8 *)(a1 + 61);
    v6 = (void *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*(uint64_t **)a1, v4);
    memset(v6, v5, v4);
  }
  result = (_BYTE *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*(uint64_t **)a1, 1);
  *result = 93;
  return result;
}

uint64_t rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE *v8;
  char v9;
  size_t v10;
  uint64_t *v11;
  int v12;
  void *v13;
  BOOL v14;

  v2 = result;
  v3 = *(_QWORD *)(result + 32);
  v4 = v3 - *(_QWORD *)(result + 24);
  if (v4)
  {
    if (v4 <= 0xF)
      __assert_rtn("Top", "stack.h", 146, "GetSize() >= sizeof(T)");
    v6 = *(_QWORD *)(v3 - 16);
    if (*(_BYTE *)(v3 - 8))
    {
      if (v6)
      {
        result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*(uint64_t **)result, 1);
        *(_BYTE *)result = 44;
        if ((*(_BYTE *)(v2 + 68) & 1) != 0)
        {
          result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*(uint64_t **)v2, 1);
          *(_BYTE *)result = 32;
        }
      }
      if ((*(_BYTE *)(v2 + 68) & 1) != 0)
        goto LABEL_21;
      *(_BYTE *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*(uint64_t **)v2, 1) = 10;
    }
    else
    {
      v7 = 10;
      if (v6)
      {
        v8 = (_BYTE *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*(uint64_t **)result, 1);
        if ((v6 & 1) != 0)
          v9 = 58;
        else
          v9 = 44;
        if ((v6 & 1) != 0)
          v7 = 32;
        else
          v7 = 10;
        *v8 = v9;
      }
      result = rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*(uint64_t **)v2, 1);
      *(_BYTE *)result = v7;
      if ((*(_BYTE *)(v3 - 16) & 1) != 0)
        goto LABEL_21;
    }
    v10 = ((*(_QWORD *)(v2 + 32) - *(_QWORD *)(v2 + 24)) >> 4) * *(unsigned int *)(v2 + 64);
    v11 = *(uint64_t **)v2;
    v12 = *(unsigned __int8 *)(v2 + 61);
    v13 = (void *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(v11, v10);
    result = (uint64_t)memset(v13, v12, v10);
LABEL_21:
    if (*(_BYTE *)(v3 - 8))
      v14 = 1;
    else
      v14 = a2 == 5;
    if (!v14 && (*(_QWORD *)(v3 - 16) & 1) == 0)
      __assert_rtn("PrettyPrefix", "prettywriter.h", 243, "type == kStringType");
    ++*(_QWORD *)(v3 - 16);
    return result;
  }
  if (*(_BYTE *)(result + 60))
    __assert_rtn("PrettyPrefix", "prettywriter.h", 247, "!Base::hasRoot_");
  *(_BYTE *)(result + 60) = 1;
  return result;
}

_BYTE *rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteBool(uint64_t *a1, int a2)
{
  uint64_t *v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  _BYTE *result;

  v3 = (uint64_t *)*a1;
  v4 = v3[4] - v3[3];
  if (!a2)
  {
    if (v4 <= 4)
    {
      rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(v3, 5);
      v3 = (uint64_t *)*a1;
    }
    *(_BYTE *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::PushUnsafe<char>((uint64_t)v3, 1) = 102;
    v5 = 115;
    v6 = 108;
    v7 = 97;
    goto LABEL_7;
  }
  if (v4 <= 3)
  {
    rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(v3, 4);
    v5 = 117;
    v6 = 114;
    v7 = 116;
LABEL_7:
    v3 = (uint64_t *)*a1;
    goto LABEL_8;
  }
  v5 = 117;
  v6 = 114;
  v7 = 116;
LABEL_8:
  *(_BYTE *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::PushUnsafe<char>((uint64_t)v3, 1) = v7;
  *(_BYTE *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::PushUnsafe<char>(*a1, 1) = v6;
  *(_BYTE *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::PushUnsafe<char>(*a1, 1) = v5;
  result = (_BYTE *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::PushUnsafe<char>(*a1, 1);
  *result = 101;
  return result;
}

_BYTE *rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Int(uint64_t **a1, rapidjson::internal *a2)
{
  _BYTE *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  _BYTE *result;
  uint64_t v9;

  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)a1, 6);
  v4 = (_BYTE *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*a1, 11);
  v6 = v4;
  if ((a2 & 0x80000000) != 0)
  {
    *v4 = 45;
    v7 = v4 + 1;
    a2 = (rapidjson::internal *)-(int)a2;
  }
  else
  {
    v7 = v4;
  }
  result = rapidjson::internal::u32toa(a2, v7, v5);
  v9 = (*a1)[3];
  if (v9 - (*a1)[2] < (unint64_t)(v6 - result + 11))
    __assert_rtn("Pop", "stack.h", 139, "GetSize() >= count * sizeof(T)");
  (*a1)[3] = v9 - (v6 - result) - 11;
  return result;
}

_BYTE *rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Uint(uint64_t **a1, rapidjson::internal *a2)
{
  _BYTE *v4;
  char *v5;
  _BYTE *result;
  uint64_t v7;

  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)a1, 6);
  v4 = (_BYTE *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*a1, 10);
  result = rapidjson::internal::u32toa(a2, v4, v5);
  v7 = (*a1)[3];
  if (v7 - (*a1)[2] < (unint64_t)(v4 - result + 10))
    __assert_rtn("Pop", "stack.h", 139, "GetSize() >= count * sizeof(T)");
  (*a1)[3] = v7 - (v4 - result) - 10;
  return result;
}

_BYTE *rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Int64(uint64_t **a1, unint64_t a2)
{
  _BYTE *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  _BYTE *result;
  uint64_t v9;

  rapidjson::PrettyWriter<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::PrettyPrefix((uint64_t)a1, 6);
  v4 = (_BYTE *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*a1, 21);
  v6 = v4;
  if ((a2 & 0x8000000000000000) != 0)
  {
    *v4 = 45;
    v7 = v4 + 1;
    a2 = -(uint64_t)a2;
  }
  else
  {
    v7 = v4;
  }
  result = rapidjson::internal::u64toa(a2, v7, v5);
  v9 = (*a1)[3];
  if (v9 - (*a1)[2] < (unint64_t)(v6 - result + 21))
    __assert_rtn("Pop", "stack.h", 139, "GetSize() >= count * sizeof(T)");
  (*a1)[3] = v9 - (v6 - result) - 21;
  return result;
}

BOOL rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteDouble(uint64_t a1, double a2)
{
  unint64_t v3;
  uint64_t v4;
  _BYTE *v6;
  int v7;
  _BYTE *v8;
  _BYTE *v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  double v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  int v29;
  unint64_t v30;
  int v31;
  unint64_t v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  unint64_t v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  int v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  BOOL v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  int v70;
  int v71;
  int v72;
  int v73;
  _WORD *v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  int v82;
  _BYTE *v83;
  uint64_t v84;
  int v86;
  int v87;
  uint64_t v88;
  _BYTE *v89;

  v3 = *(_QWORD *)&a2;
  v4 = *(_QWORD *)&a2 & 0x7FF0000000000000;
  if ((*(_QWORD *)&a2 & 0x7FF0000000000000) == 0x7FF0000000000000)
    return v4 != 0x7FF0000000000000;
  v6 = (_BYTE *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<char>(*(uint64_t **)a1, 25);
  v7 = *(_DWORD *)(a1 + 56);
  if (v7 <= 0)
    __assert_rtn("dtoa", "dtoa.h", 217, "maxDecimalPlaces >= 1");
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0)
  {
    if (a2 >= 0.0)
    {
      v8 = v6;
    }
    else
    {
      *v6 = 45;
      v8 = v6 + 1;
      v3 = *(_QWORD *)&a2 ^ 0x8000000000000000;
    }
    v10 = ((v3 >> 52) & 0x7FF) - 1075;
    v11 = v3 & 0xFFFFFFFFFFFFFLL;
    if (((v3 >> 52) & 0x7FF) != 0)
      v11 = v3 & 0xFFFFFFFFFFFFFLL | 0x10000000000000;
    else
      v10 = -1074;
    v12 = (2 * (v11 & 0x1FFFFFFFFFFFFFLL)) | 1;
    v13 = v10 - 1;
    if (((v3 >> 52) & 0x7FF) == 0)
    {
      v14 = __clz((2 * (v11 & 0x1FFFFFFFFFFFFFLL)) & 0x1FFFFFFFFFFFFELL | 1) - 10;
      v15 = v14;
      do
      {
        --v13;
        --v15;
      }
      while (v15);
      v12 <<= v14;
    }
    v16 = 2 * v11 - 1;
    if (v11 == 0x10000000000000)
      v17 = -2;
    else
      v17 = -1;
    if (v11 == 0x10000000000000)
      v16 = 0x3FFFFFFFFFFFFFLL;
    v18 = (double)(-51 - v13) * 0.301029996 + 347.0;
    v19 = (int)v18;
    if (v18 - (double)(int)v18 > 0.0)
      ++v19;
    v20 = (v19 >> 3) + 1;
    if (v20 >= 0x57)
      __assert_rtn("GetCachedPowerByIndex", "diyfp.h", 234, "index < 87");
    if (!v11)
      __assert_rtn("Normalize", "diyfp.h", 103, "f != 0");
    v88 = v4;
    v89 = v6;
    v21 = v12 << 10;
    v22 = (v13 - 10);
    v23 = v16 << (v10 - (v13 - 10) + v17);
    v86 = v7;
    v87 = 8 * v20;
    v24 = rapidjson::internal::GetCachedPowerByIndex(unsigned long)::kCachedPowers_F[v20];
    v25 = __clz(v11);
    v26 = rapidjson::internal::DiyFp::operator*(v11 << v25, (v10 - v25), v24);
    v27 = rapidjson::internal::DiyFp::operator*(v21, v22, v24);
    v29 = v28;
    v30 = rapidjson::internal::DiyFp::operator*(v23, v22, v24);
    v31 = 0;
    v32 = v27 - 1 + ~v30;
    v33 = -v29;
    v34 = 1 << -(char)v29;
    v35 = v27 - 1 - v26;
    v36 = (v27 - 1) >> -(char)v29;
    v37 = (v34 - 1) & (v27 - 1);
    if (v36 < 0x5F5E100)
      v38 = 8;
    else
      v38 = 9;
    if (v36 >= 0x989680)
      v39 = v38;
    else
      v39 = 7;
    if (v36 >= 0xF4240)
      v40 = v39;
    else
      v40 = 6;
    if (v36 >= 0x186A0)
      v41 = v40;
    else
      v41 = 5;
    if (v36 >> 4 >= 0x271)
      v42 = v41;
    else
      v42 = 4;
    if (v36 >= 0x3E8)
      v43 = v42;
    else
      v43 = 3;
    if (v36 >= 0x64)
      v44 = v43;
    else
      v44 = 2;
    if (v36 < 0xA)
      v44 = 1;
    while (2)
    {
      if (v44 <= 0)
      {
        LODWORD(v59) = 1;
        v58 = v87;
        do
        {
          v60 = 10 * v37;
          v61 = (10 * v37) >> v33;
          if ((_BYTE)v61)
            v62 = 0;
          else
            v62 = v31 == 0;
          if (v62)
            v31 = 0;
          else
            v8[v31++] = v61 + 48;
          v32 *= 10;
          v37 = v60 & (v34 - 1);
          v59 = (int)v59 - 1;
        }
        while (v32 <= v37);
        v44 = v59 - 1;
        if ((int)v59 < -7)
          v63 = 0;
        else
          v63 = rapidjson::internal::DigitGen(rapidjson::internal::DiyFp const&,rapidjson::internal::DiyFp const&,unsigned long long,char *,int *,int *)::kPow10[1 - v59];
        if (v32 - v37 >= v34)
        {
          v64 = v63 * v35;
          if (v37 < v63 * v35)
          {
            v65 = -(uint64_t)v37;
            v66 = v32 - v34;
            v67 = v34 + v37;
            v68 = -(uint64_t)(v63 * v35);
            do
            {
              if (v67 >= v64 && v64 + v65 <= v68 + v67)
                break;
              --v8[v31 - 1];
              if (v67 >= v64)
                break;
              v69 = v66 + v65;
              v65 -= v34;
              v67 += v34;
            }
            while (v69 >= v34);
          }
        }
      }
      else
      {
        --v44;
        v45 = 0;
        switch(v44)
        {
          case 0:
            goto LABEL_61;
          case 1:
            v46 = v36 / 0xA;
            v45 = v36 % 0xA;
            goto LABEL_55;
          case 2:
            v46 = v36 / 0x64;
            v45 = v36 % 0x64;
            goto LABEL_55;
          case 3:
            v46 = v36 / 0x3E8;
            v45 = v36 % 0x3E8;
            goto LABEL_55;
          case 4:
            v46 = v36 / 0x2710;
            v45 = v36 % 0x2710;
LABEL_55:
            LODWORD(v36) = v46;
            goto LABEL_61;
          case 5:
            v47 = v36 / 0x186A0;
            v45 = v36 % 0x186A0;
            goto LABEL_60;
          case 6:
            v47 = v36 / 0xF4240;
            v45 = v36 % 0xF4240;
            goto LABEL_60;
          case 7:
            v47 = v36 / 0x989680;
            v45 = v36 % 0x989680;
            goto LABEL_60;
          case 8:
            v47 = v36 / 0x5F5E100;
            v45 = v36 % 0x5F5E100;
LABEL_60:
            LODWORD(v36) = v47;
LABEL_61:
            v48 = v36;
            v36 = v45;
            if (!v48)
              goto LABEL_62;
            goto LABEL_63;
          default:
            v45 = v36;
LABEL_62:
            LOBYTE(v48) = 0;
            v49 = 0;
            if (v31)
            {
LABEL_63:
              v49 = v31 + 1;
              v8[v31] = v48 + 48;
              v36 = v45;
            }
            v50 = (unint64_t)v36 << v33;
            v51 = v50 + v37;
            v31 = v49;
            if (v32 < v50 + v37)
              continue;
            if (v51 < v35)
            {
              v52 = (unint64_t)rapidjson::internal::DigitGen(rapidjson::internal::DiyFp const&,rapidjson::internal::DiyFp const&,unsigned long long,char *,int *,int *)::kPow10[v44] << v33;
              if (v32 - (v50 + v37) >= v52)
              {
                v53 = ~(v26 + v51);
                v54 = v37 + v52 + v50;
                v55 = -2 - v30 - v54;
                v56 = v26 - v27 + 1;
                do
                {
                  if (v54 >= v35 && v53 + v27 <= v56 + v54)
                    break;
                  --v8[v49 - 1];
                  if (v54 >= v35)
                    break;
                  v57 = v55 + v27;
                  v27 -= v52;
                  v54 += v52;
                }
                while (v57 >= v52);
              }
            }
            v31 = v49;
            v58 = v87;
            break;
        }
      }
      break;
    }
    v70 = v44 - v58;
    v71 = v44 - v58 + 348;
    v72 = v71 + v31;
    if (v71 >= 0 && v72 <= 21)
    {
      if (v44 - v58 != -348)
      {
        if (v72 <= v31 + 1)
          v73 = v31 + 1;
        else
          v73 = v44 - v58 + 348 + v31;
        memset(&v8[v31], 48, (v73 + ~v31) + 1);
      }
      v74 = &v8[v72];
      *v74 = 12334;
      v75 = (uint64_t)(v74 + 1);
      goto LABEL_126;
    }
    v76 = v72 - 1;
    if ((v72 - 1) <= 0x14)
    {
      v77 = (v72 + 1);
      memmove(&v8[v77], &v8[v72], -348 - v70);
      v8[v72] = 46;
      if (v86 + v71 < 0)
      {
        v6 = v89;
        v4 = v88;
        if (v86 < 2)
        {
LABEL_124:
          v75 = (uint64_t)&v8[v72 + 2];
        }
        else
        {
          v82 = v72 + v86;
          while (v8[v82] == 48)
          {
            if (--v82 <= (int)v77)
              goto LABEL_124;
          }
          v75 = (uint64_t)&v8[v82 + 1];
        }
        goto LABEL_127;
      }
      v75 = (uint64_t)&v8[v31 + 1];
      goto LABEL_126;
    }
    if (v72 == 0 || v72 >= 0xFFFFFFFB)
    {
      v78 = 2 - v72;
      memmove(&v8[v78], v8, v31);
      *(_WORD *)v8 = 11824;
      if (v72 < 0)
      {
        if ((int)v78 <= 3)
          v79 = 3;
        else
          v79 = 2 - v72;
        memset(v8 + 2, 48, (v79 - 2));
      }
      if (v86 < -348 - v70)
      {
        v6 = v89;
        v4 = v88;
        if (v86 < 2)
        {
LABEL_114:
          v75 = (uint64_t)(v8 + 3);
        }
        else
        {
          v80 = v86 + 1;
          while (v8[v80] == 48)
          {
            if (v80-- < 4)
              goto LABEL_114;
          }
          v75 = (uint64_t)&v8[v80 + 1];
        }
        goto LABEL_127;
      }
      v75 = (uint64_t)&v8[v78 + v31];
      goto LABEL_126;
    }
    if (v72 < -v86)
    {
      *(_WORD *)v8 = 11824;
      v8[2] = 48;
      v75 = (uint64_t)(v8 + 3);
LABEL_126:
      v6 = v89;
      v4 = v88;
      goto LABEL_127;
    }
    if (v31 == 1)
    {
      v8[1] = 101;
      if ((v76 & 0x80000000) == 0)
      {
        v9 = v8 + 2;
LABEL_139:
        v6 = v89;
        v4 = v88;
        if (v76 < 0x64)
        {
          if (v76 < 0xA)
          {
            *v9 = v76 + 48;
            v75 = (uint64_t)(v9 + 1);
          }
          else
          {
            *(_WORD *)v9 = rapidjson::internal::GetDigitsLut(void)::cDigitsLut[v76];
            v75 = (uint64_t)(v9 + 2);
          }
          goto LABEL_127;
        }
        *v9 = v76 / 0x64 + 48;
        *(_WORD *)(v9 + 1) = rapidjson::internal::GetDigitsLut(void)::cDigitsLut[v76 % 0x64];
        goto LABEL_117;
      }
      v9 = v8 + 3;
      v8[2] = 45;
    }
    else
    {
      memmove(v8 + 2, v8 + 1, v31 - 1);
      v8[1] = 46;
      v8[v31 + 1] = 101;
      v9 = &v8[v31 + 2];
      if ((v76 & 0x80000000) == 0)
        goto LABEL_139;
      *v9++ = 45;
    }
    v76 = 1 - v72;
    goto LABEL_139;
  }
  if ((v3 & 0x8000000000000000) != 0)
  {
    *v6 = 45;
    v9 = v6 + 1;
  }
  else
  {
    v9 = v6;
  }
  *(_WORD *)v9 = 11824;
  v9[2] = 48;
LABEL_117:
  v75 = (uint64_t)(v9 + 3);
LABEL_127:
  v83 = &v6[-v75];
  v84 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (v84 - *(_QWORD *)(*(_QWORD *)a1 + 16) < (unint64_t)(v83 + 25))
    __assert_rtn("Pop", "stack.h", 139, "GetSize() >= count * sizeof(T)");
  *(_QWORD *)(*(_QWORD *)a1 + 24) = v84 - (_QWORD)v83 - 25;
  return v4 != 0x7FF0000000000000;
}

unint64_t rapidjson::internal::DiyFp::operator*(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ((a3 * (unint64_t)HIDWORD(a1)) >> 32)
       + HIDWORD(a3) * (unint64_t)HIDWORD(a1)
       + ((HIDWORD(a3) * (unint64_t)a1) >> 32)
       + ((((a3 * (unint64_t)a1) >> 32)
         + (a3 * HIDWORD(a1))
         + (HIDWORD(a3) * a1)
         + 0x80000000) >> 32);
}

_BYTE *rapidjson::internal::u64toa(unint64_t this, _BYTE *a2, char *a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned __int16 v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  unsigned int v16;
  unsigned __int16 v17;
  unsigned int v18;
  uint64_t v19;
  unsigned __int16 v20;

  if (!a2)
    __assert_rtn("u64toa", "itoa.h", 127, "buffer != 0");
  if (this < 0x5F5E100)
  {
    if (this >> 4 <= 0x270)
    {
      if (this < 0x3E8)
      {
        if (this < 0x64)
        {
          if (this < 0xA)
            goto LABEL_16;
          goto LABEL_15;
        }
      }
      else
      {
        *a2++ = rapidjson::internal::GetDigitsLut(void)::cDigitsLut[(unsigned __int16)this / 0x64u];
      }
      *a2++ = *((_BYTE *)rapidjson::internal::GetDigitsLut(void)::cDigitsLut
              + ((2 * ((unsigned __int16)this / 0x64u)) | 1));
LABEL_15:
      *a2++ = rapidjson::internal::GetDigitsLut(void)::cDigitsLut[(unsigned __int16)this % 0x64u];
LABEL_16:
      *a2 = *((_BYTE *)rapidjson::internal::GetDigitsLut(void)::cDigitsLut
            + ((unsigned __int16)(2 * ((unsigned __int16)this % 0x64u)) | 1u));
      return a2 + 1;
    }
    v6 = (this / 0x7A120uLL) & 0x3FFE;
    if (this < 0x989680)
    {
      if (this < 0xF4240)
      {
        if (this >> 5 < 0xC35)
          goto LABEL_28;
        goto LABEL_27;
      }
    }
    else
    {
      *a2++ = *((_BYTE *)rapidjson::internal::GetDigitsLut(void)::cDigitsLut + v6);
    }
    *a2++ = *((_BYTE *)rapidjson::internal::GetDigitsLut(void)::cDigitsLut + (v6 | 1));
LABEL_27:
    *a2++ = rapidjson::internal::GetDigitsLut(void)::cDigitsLut[(unsigned __int16)(this / 0x2710) % 0x64u];
LABEL_28:
    *a2 = *((_BYTE *)rapidjson::internal::GetDigitsLut(void)::cDigitsLut
          + ((unsigned __int16)(2 * ((unsigned __int16)(this / 0x2710) % 0x64u)) | 1u));
    a2[1] = rapidjson::internal::GetDigitsLut(void)::cDigitsLut[this % 0x2710 / 0x64];
    a2[2] = *((_BYTE *)rapidjson::internal::GetDigitsLut(void)::cDigitsLut
            + ((2 * (this % 0x2710 / 0x64)) | 1));
    a2[3] = rapidjson::internal::GetDigitsLut(void)::cDigitsLut[this % 0x2710 % 0x64];
    a2[4] = *((_BYTE *)rapidjson::internal::GetDigitsLut(void)::cDigitsLut
            + ((unsigned __int16)(2 * (this % 0x2710 % 0x64)) | 1u));
    return a2 + 5;
  }
  if (this < 0x2386F26FC10000)
  {
    v3 = this % 0x5F5E100;
    v4 = this / 0x5F5E100;
    v5 = v3 % 0x2710;
    if (this < 0x38D7EA4C68000)
    {
      if (this < 0x5AF3107A4000)
      {
        if (this < 0x9184E72A000)
        {
          if (this < 0xE8D4A51000)
          {
            if (this < 0x174876E800)
            {
              if (this < 0x2540BE400)
              {
                if (this < 0x3B9ACA00)
                  goto LABEL_24;
                goto LABEL_23;
              }
LABEL_22:
              *a2++ = *((_BYTE *)rapidjson::internal::GetDigitsLut(void)::cDigitsLut + ((2 * (v4 % 0x2710 / 0x64)) | 1));
LABEL_23:
              *a2++ = rapidjson::internal::GetDigitsLut(void)::cDigitsLut[v4 % 0x2710 % 0x64];
LABEL_24:
              *a2 = *((_BYTE *)rapidjson::internal::GetDigitsLut(void)::cDigitsLut
                    + ((unsigned __int16)(2 * (v4 % 0x2710 % 0x64)) | 1u));
              a2[1] = rapidjson::internal::GetDigitsLut(void)::cDigitsLut[v3 / 0xF4240];
              a2[2] = *((_BYTE *)rapidjson::internal::GetDigitsLut(void)::cDigitsLut + ((2 * (v3 / 0xF4240)) | 1));
              a2[3] = rapidjson::internal::GetDigitsLut(void)::cDigitsLut[(unsigned __int16)(v3 / 0x2710) % 0x64u];
              a2[4] = *((_BYTE *)rapidjson::internal::GetDigitsLut(void)::cDigitsLut
                      + ((unsigned __int16)(2 * ((unsigned __int16)(v3 / 0x2710) % 0x64u)) | 1u));
              a2[5] = rapidjson::internal::GetDigitsLut(void)::cDigitsLut[v5 / 0x64u];
              a2[6] = *((_BYTE *)rapidjson::internal::GetDigitsLut(void)::cDigitsLut + ((2 * (v5 / 0x64u)) | 1));
              a2[7] = rapidjson::internal::GetDigitsLut(void)::cDigitsLut[v5 % 0x64u];
              a2[8] = *((_BYTE *)rapidjson::internal::GetDigitsLut(void)::cDigitsLut
                      + ((unsigned __int16)(2 * (v5 % 0x64u)) | 1u));
              return a2 + 9;
            }
LABEL_21:
            *a2++ = rapidjson::internal::GetDigitsLut(void)::cDigitsLut[v4 % 0x2710 / 0x64];
            goto LABEL_22;
          }
LABEL_20:
          *a2++ = *((_BYTE *)rapidjson::internal::GetDigitsLut(void)::cDigitsLut
                  + ((unsigned __int16)(2 * ((unsigned __int16)(v4 / 0x2710) % 0x64u)) | 1u));
          goto LABEL_21;
        }
LABEL_19:
        *a2++ = rapidjson::internal::GetDigitsLut(void)::cDigitsLut[(unsigned __int16)(v4 / 0x2710) % 0x64u];
        goto LABEL_20;
      }
    }
    else
    {
      *a2++ = rapidjson::internal::GetDigitsLut(void)::cDigitsLut[(this / 0x5F5E100) / 0xF4240];
    }
    *a2++ = *((_BYTE *)rapidjson::internal::GetDigitsLut(void)::cDigitsLut
            + ((2 * ((this / 0x5F5E100) / 0xF4240)) | 1));
    goto LABEL_19;
  }
  v7 = this / 0x2386F26FC10000;
  v8 = this % 0x2386F26FC10000;
  if ((this / 0x2386F26FC10000) > 9)
  {
    if (v7 > 0x63)
    {
      v11 = (unsigned __int16)v7 / 0x64u;
      if (v7 > 0x3E7)
      {
        v14 = (unsigned __int16)v7 % 0x64u;
        *(_WORD *)a2 = rapidjson::internal::GetDigitsLut(void)::cDigitsLut[v11];
        a2[2] = rapidjson::internal::GetDigitsLut(void)::cDigitsLut[v14];
        v15 = *((_BYTE *)rapidjson::internal::GetDigitsLut(void)::cDigitsLut + ((unsigned __int16)(v14 * 2) & 0xFFFE)
                                                                             + 1);
        v9 = a2 + 4;
        a2[3] = v15;
      }
      else
      {
        *a2 = v11 + 48;
        v12 = (unsigned __int16)v7 % 0x64u;
        a2[1] = rapidjson::internal::GetDigitsLut(void)::cDigitsLut[v12];
        v13 = *((_BYTE *)rapidjson::internal::GetDigitsLut(void)::cDigitsLut + ((unsigned __int16)(v12 * 2) & 0xFFFE)
                                                                             + 1);
        v9 = a2 + 3;
        a2[2] = v13;
      }
    }
    else
    {
      *a2 = rapidjson::internal::GetDigitsLut(void)::cDigitsLut[this / 0x2386F26FC10000];
      v9 = a2 + 2;
      a2[1] = HIBYTE(rapidjson::internal::GetDigitsLut(void)::cDigitsLut[this / 0x2386F26FC10000]);
    }
  }
  else
  {
    *a2 = v7 + 48;
    v9 = a2 + 1;
  }
  v16 = v8 % 0x5F5E100;
  v17 = (v8 / 0x5F5E100) % 0x2710;
  v18 = v17 / 0x64u;
  v19 = v17 % 0x64u;
  v20 = v16 % 0x2710;
  *v9 = rapidjson::internal::GetDigitsLut(void)::cDigitsLut[(v8 / 0x5F5E100) / 0xF4240];
  v9[1] = HIBYTE(rapidjson::internal::GetDigitsLut(void)::cDigitsLut[(v8 / 0x5F5E100) / 0xF4240]);
  *((_WORD *)v9 + 1) = rapidjson::internal::GetDigitsLut(void)::cDigitsLut[(unsigned __int16)((v8 / 0x5F5E100)
                                                                                            / 0x2710)
                                                                         % 0x64u];
  *((_WORD *)v9 + 2) = rapidjson::internal::GetDigitsLut(void)::cDigitsLut[v18];
  v9[6] = rapidjson::internal::GetDigitsLut(void)::cDigitsLut[v19];
  v9[7] = *((_BYTE *)rapidjson::internal::GetDigitsLut(void)::cDigitsLut + ((unsigned __int16)(v19 * 2) & 0xFFFE) + 1);
  v9[8] = rapidjson::internal::GetDigitsLut(void)::cDigitsLut[v16 / 0xF4240];
  v9[9] = HIBYTE(rapidjson::internal::GetDigitsLut(void)::cDigitsLut[v16 / 0xF4240]);
  *((_WORD *)v9 + 5) = rapidjson::internal::GetDigitsLut(void)::cDigitsLut[(unsigned __int16)(v16 / 0x2710) % 0x64u];
  *((_WORD *)v9 + 6) = rapidjson::internal::GetDigitsLut(void)::cDigitsLut[v20 / 0x64u];
  v9[14] = rapidjson::internal::GetDigitsLut(void)::cDigitsLut[v20 % 0x64u];
  v10 = v9 + 16;
  v9[15] = *((_BYTE *)rapidjson::internal::GetDigitsLut(void)::cDigitsLut + (unsigned __int16)(2 * (v20 % 0x64u)) + 1);
  return v10;
}

_BYTE *rapidjson::internal::u32toa(rapidjson::internal *this, _BYTE *a2, char *a3)
{
  _BYTE *v3;
  unsigned int v4;
  char v5;
  _BYTE *v6;
  unsigned __int16 v7;
  unsigned int v8;
  uint64_t v9;

  if (!a2)
    __assert_rtn("u32toa", "itoa.h", 40, "buffer != 0");
  if (this >> 4 <= 0x270)
  {
    if (this < 0x3E8)
    {
      if (this < 0x64)
      {
        if (this < 0xA)
          goto LABEL_11;
        goto LABEL_10;
      }
    }
    else
    {
      *a2++ = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut + 2 * ((unsigned __int16)this / 0x64u));
    }
    *a2++ = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut
            + ((2 * ((unsigned __int16)this / 0x64u)) | 1));
LABEL_10:
    *a2++ = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut + 2 * ((unsigned __int16)this % 0x64u));
LABEL_11:
    *a2 = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut
          + ((unsigned __int16)(2 * ((unsigned __int16)this % 0x64u)) | 1u));
    return a2 + 1;
  }
  if (this < 0x5F5E100)
  {
    if (this < 0x989680)
    {
      if (this <= 0xF423F)
      {
        if (this >> 5 < 0xC35)
          goto LABEL_17;
        goto LABEL_16;
      }
    }
    else
    {
      *a2++ = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut + 2 * (this / 0xF4240));
    }
    *a2++ = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut
            + ((2 * (this / 0xF4240)) | 1));
LABEL_16:
    *a2++ = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut
            + 2 * ((unsigned __int16)(this / 0x2710) % 0x64u));
LABEL_17:
    *a2 = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut
          + ((unsigned __int16)(2 * ((unsigned __int16)(this / 0x2710) % 0x64u)) | 1u));
    a2[1] = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut + 2 * (this % 0x2710 / 0x64));
    a2[2] = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut
            + ((2 * (this % 0x2710 / 0x64)) | 1));
    a2[3] = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut + 2 * (this % 0x2710 % 0x64));
    a2[4] = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut
            + ((unsigned __int16)(2 * (this % 0x2710 % 0x64)) | 1u));
    return a2 + 5;
  }
  v4 = this % 0x5F5E100;
  if (this < 0x3B9ACA00)
  {
    v5 = this / 0x5F5E100 + 48;
    v6 = a2 + 1;
  }
  else
  {
    v5 = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut + 2 * (this / 0x5F5E100));
    v6 = a2 + 2;
    a2[1] = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut + 2 * (this / 0x5F5E100) + 1);
  }
  *a2 = v5;
  v7 = v4 % 0x2710;
  v8 = v7 / 0x64u;
  v9 = 2 * (v7 % 0x64u);
  *v6 = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut + 2 * (v4 / 0xF4240));
  v6[1] = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut + 2 * (v4 / 0xF4240) + 1);
  *((_WORD *)v6 + 1) = *((_WORD *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut
                       + (unsigned __int16)(v4 / 0x2710) % 0x64u);
  *((_WORD *)v6 + 2) = *((_WORD *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut + v8);
  v6[6] = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut + v9);
  v3 = v6 + 8;
  v6[7] = *((_BYTE *)&rapidjson::internal::GetDigitsLut(void)::cDigitsLut + ((unsigned __int16)v9 & 0xFFFE) + 1);
  return v3;
}

uint64_t rapidjson::internal::Stack<rapidjson::CrtAllocator>::Push<rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Level>(uint64_t *a1)
{
  uint64_t result;
  uint64_t *v3;

  v3 = a1 + 3;
  result = a1[3];
  if (v3[1] - result > 15)
  {
    if (result)
      goto LABEL_3;
LABEL_6:
    __assert_rtn("PushUnsafe", "stack.h", 130, "stackTop_");
  }
  rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Level>(a1);
  result = a1[3];
  if (!result)
    goto LABEL_6;
LABEL_3:
  if (a1[4] - result <= 15)
    __assert_rtn("PushUnsafe", "stack.h", 131, "static_cast<std::ptrdiff_t>(sizeof(T) * count) <= (stackEnd_ - stackTop_)");
  a1[3] = result + 16;
  return result;
}

char *rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::Level>(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  size_t v6;

  v2 = a1[2];
  if (v2)
  {
    v3 = a1[4] - v2 + ((unint64_t)(a1[4] - v2 + 1) >> 1);
  }
  else
  {
    if (*a1)
    {
      v2 = 0;
    }
    else
    {
      v4 = operator new();
      *a1 = v4;
      a1[1] = v4;
      v2 = a1[2];
    }
    v3 = a1[5];
  }
  v5 = a1[3] - v2 + 16;
  if (v3 <= v5)
    v6 = v5;
  else
    v6 = v3;
  return rapidjson::internal::Stack<rapidjson::CrtAllocator>::Resize(a1, v6);
}

_BYTE *rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  _BYTE *v11;
  char v12;
  char v13;
  _BYTE *result;

  v6 = (uint64_t *)*a1;
  v7 = 6 * a3 + 2;
  if (v6[4] - v6[3] < v7)
  {
    rapidjson::internal::Stack<rapidjson::CrtAllocator>::Expand<char>(v6, v7);
    v6 = (uint64_t *)*a1;
  }
  *(_BYTE *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::PushUnsafe<char>((uint64_t)v6, 1) = 34;
  if (a3)
  {
    v8 = 0;
    do
    {
      v9 = *(unsigned __int8 *)(a2 + v8);
      v10 = rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString(char const*,unsigned int)::escape[v9];
      v11 = (_BYTE *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::PushUnsafe<char>(*a1, 1);
      if (v10)
      {
        *v11 = 92;
        *(_BYTE *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::PushUnsafe<char>(*a1, 1) = v10;
        if (v10 == 117)
        {
          *(_BYTE *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::PushUnsafe<char>(*a1, 1) = 48;
          *(_BYTE *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::PushUnsafe<char>(*a1, 1) = 48;
          v12 = rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString(char const*,unsigned int)::hexDigits[v9 >> 4];
          *(_BYTE *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::PushUnsafe<char>(*a1, 1) = v12;
          v13 = rapidjson::Writer<rapidjson::GenericStringBuffer<rapidjson::UTF8<char>,rapidjson::CrtAllocator>,rapidjson::UTF8<char>,rapidjson::UTF8<char>,rapidjson::CrtAllocator,0u>::WriteString(char const*,unsigned int)::hexDigits[v9 & 0xF];
          *(_BYTE *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::PushUnsafe<char>(*a1, 1) = v13;
        }
      }
      else
      {
        *v11 = v9;
      }
      ++v8;
    }
    while (v8 < a3);
  }
  result = (_BYTE *)rapidjson::internal::Stack<rapidjson::CrtAllocator>::PushUnsafe<char>(*a1, 1);
  *result = 34;
  return result;
}

std::string *siri::dialogengine::DialogCalendar::dateDescriptive(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string *DateDescriptive;
  void *v7[2];
  char v8;
  __int128 v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  void *__p[2];
  __int128 v14;

  LOWORD(v12) = 0;
  BYTE2(v12) = 0;
  *(_OWORD *)__p = 0u;
  v14 = 0u;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  BYTE8(v14) = 0;
  siri::dialogengine::GetDateFormatterOptions((void **)&v9, a2);
  if (SBYTE7(v14) < 0)
    operator delete(__p[0]);
  *(_OWORD *)__p = v9;
  *(_QWORD *)&v14 = v10;
  BYTE8(v14) = v11;
  std::string::basic_string[abi:ne180100]<0>(v7, "none");
  DateDescriptive = siri::dialogengine::GetDateDescriptive(this, a2, (uint64_t)v7, &v12);
  if (v8 < 0)
    operator delete(v7[0]);
  if (SBYTE7(v14) < 0)
    operator delete(__p[0]);
  return DateDescriptive;
}

void sub_1BF89D8A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a14 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

double siri::dialogengine::GetDateFormatterOptions(void **this, const siri::dialogengine::VariableObject *a2)
{
  void *OptionalObjectParameter;
  double result;
  uint64_t v6;
  char *OptionalStringParameter;
  _BYTE *OptionalBooleanParameter;
  std::string __p;

  *((_BYTE *)std::string::basic_string[abi:ne180100]<0>(this, "") + 24) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "dateFormatter");
  OptionalObjectParameter = siri::dialogengine::GetOptionalObjectParameter((const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)a2);
  v6 = (uint64_t)OptionalObjectParameter;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v6)
      return result;
  }
  else if (!OptionalObjectParameter)
  {
    return result;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "length");
  OptionalStringParameter = (char *)siri::dialogengine::GetOptionalStringParameter((const void **)&__p.__r_.__value_.__l.__data_, v6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "omitYear");
  OptionalBooleanParameter = siri::dialogengine::GetOptionalBooleanParameter((const void **)&__p.__r_.__value_.__l.__data_, v6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!OptionalStringParameter)
    {
LABEL_9:
      if (!OptionalBooleanParameter)
        return result;
      goto LABEL_10;
    }
  }
  else if (!OptionalStringParameter)
  {
    goto LABEL_9;
  }
  if (OptionalStringParameter[95] < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)OptionalStringParameter + 9), *((_QWORD *)OptionalStringParameter + 10));
  else
    __p = *(std::string *)(OptionalStringParameter + 3);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
  result = *(double *)&__p.__r_.__value_.__l.__data_;
  *(std::string *)this = __p;
  if (OptionalBooleanParameter)
LABEL_10:
    *((_BYTE *)this + 24) = OptionalBooleanParameter[66];
  return result;
}

void sub_1BF89DA1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (*(char *)(v14 + 23) < 0)
    operator delete(*(void **)v14);
  _Unwind_Resume(exception_object);
}

std::string *siri::dialogengine::GetDateDescriptive(siri::dialogengine::Context *a1, siri::dialogengine::Context *a2, uint64_t a3, uint64_t *a4)
{
  void *OptionalNumberParameter;
  std::string *v9;
  void *__p[2];
  __int128 v12;
  __int128 v13;
  void *v14[2];
  __int128 v15;
  __int128 v16;
  void *v17[2];
  __int128 v18;
  __int128 v19;
  void *v20[2];
  uint64_t v21;
  std::string v22;

  std::string::basic_string[abi:ne180100]<0>(__p, "secs");
  OptionalNumberParameter = siri::dialogengine::GetOptionalNumberParameter((const void **)__p, (uint64_t)a2);
  if (SBYTE7(v12) < 0)
    operator delete(__p[0]);
  v9 = (std::string *)operator new();
  if (OptionalNumberParameter)
  {
    std::string::basic_string[abi:ne180100]<0>(&v22, "");
    siri::dialogengine::GetDateDescriptiveSpeakableString((uint64_t)__p, a1, a2, a3, a4);
    siri::dialogengine::VariableString::VariableString(v9, &v22, (const siri::dialogengine::SpeakableString *)__p);
    if (SHIBYTE(v21) < 0)
      operator delete(v20[0]);
    if (SHIBYTE(v19) < 0)
      operator delete(*((void **)&v18 + 1));
    if (SBYTE7(v18) < 0)
      operator delete(v17[0]);
    if (SHIBYTE(v16) < 0)
      operator delete(*((void **)&v15 + 1));
    if (SBYTE7(v15) < 0)
      operator delete(v14[0]);
    if (SHIBYTE(v13) < 0)
      operator delete(*((void **)&v12 + 1));
    if (SBYTE7(v12) < 0)
      operator delete(__p[0]);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v22, "");
    v21 = 0;
    v19 = 0u;
    *(_OWORD *)v20 = 0u;
    *(_OWORD *)v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    *(_OWORD *)v14 = 0u;
    *(_OWORD *)__p = 0u;
    v12 = 0u;
    siri::dialogengine::VariableString::VariableString(v9, &v22, (const siri::dialogengine::SpeakableString *)__p);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  return v9;
}

void sub_1BF89DBF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v9;
  uint64_t v10;

  siri::dialogengine::SpeakableString::~SpeakableString(&a9);
  if (*(char *)(v10 - 65) < 0)
    operator delete(*(void **)(v10 - 88));
  MEMORY[0x1C3B8D890](v9, 0x10B3C40D3060B95);
  _Unwind_Resume(a1);
}

void sub_1BF89DC4C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  JUMPOUT(0x1BF89DC44);
}

void siri::dialogengine::GetDateDescriptiveSpeakableString(uint64_t a1, siri::dialogengine::Context *this, siri::dialogengine::Context *a3, uint64_t a4, uint64_t *a5)
{
  const siri::dialogengine::TimeStamp *v10;
  siri::dialogengine *ICUDifferenceInDays;
  int ICUDifferenceInWeeks;
  BOOL v13;
  BOOL v14;
  _BOOL8 v15;
  siri::dialogengine *v16;
  _BOOL8 v17;
  std::string::size_type size;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  siri::dialogengine::Context *v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80[3];
  std::string v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85[3];
  const void **v86[3];
  std::string __str;
  std::string v88;
  uint64_t v89[3];
  char v90;
  uint64_t v91[3];
  char v92;
  std::string v93;
  void *__p[2];
  _BYTE v95[24];
  uint64_t v96;
  void *v97;
  void *v98[2];
  uint64_t v99;
  char v100;
  std::string v101;
  std::string v102;
  std::string v103;
  __int128 v104;
  _QWORD v105[3];
  __int128 v106;
  _QWORD v107[3];
  __int128 v108;
  _QWORD v109[3];
  __int128 v110;
  _QWORD v111[3];
  __int128 v112;
  _QWORD v113[3];
  __int128 v114;
  _QWORD v115[3];
  __int128 v116;
  _QWORD v117[3];
  __int128 v118;
  _QWORD v119[3];
  __int128 v120;
  _QWORD v121[3];
  __int128 v122;
  _QWORD v123[3];
  __int128 v124;
  _QWORD v125[3];
  __int128 v126;
  uint64_t v127;

  v127 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  siri::dialogengine::Context::GetLocaleWithUserCalendar(this, (const char *)this, (uint64_t)&v93);
  siri::dialogengine::GetRequestTimeStamp(this, a3, v91);
  siri::dialogengine::GetNowTimeStamp(this, a3, v89);
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v95 = 0u;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  v95[8] = 0;
  siri::dialogengine::GetICUDayName(v91, &v93.__r_.__value_.__l.__data_, (uint64_t *)__p, &v88);
  if ((v95[7] & 0x80000000) != 0)
    operator delete(__p[0]);
  if (*(_BYTE *)a5)
  {
    if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__str, v88.__r_.__value_.__l.__data_, v88.__r_.__value_.__l.__size_);
    else
      __str = v88;
  }
  else
  {
    siri::dialogengine::GetICUDisplayDate(v91, &v93.__r_.__value_.__l.__data_, a5 + 1, &__str);
  }
  ICUDifferenceInDays = (siri::dialogengine *)siri::dialogengine::GetICUDifferenceInDays((siri::dialogengine *)v89, (const siri::dialogengine::TimeStamp *)v91, v10);
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)v95 = 0;
  ICUDifferenceInWeeks = siri::dialogengine::GetICUDifferenceInWeeks(v89, v91);
  if ((v95[7] & 0x80000000) != 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "none");
  v13 = siri::dialogengine::StringsEqual(a4, (uint64_t)__p);
  v14 = v13;
  if ((v95[7] & 0x80000000) != 0)
  {
    operator delete(__p[0]);
    if (v14)
      goto LABEL_12;
  }
  else if (v13)
  {
LABEL_12:
    v15 = 0;
    v16 = 0;
    v17 = 0;
    goto LABEL_23;
  }
  if ((int)ICUDifferenceInDays < -7)
  {
    v15 = 0;
    v16 = 0;
LABEL_22:
    v17 = 1;
    goto LABEL_23;
  }
  if ((int)ICUDifferenceInDays > -3)
  {
    if (((_DWORD)ICUDifferenceInDays - 3) < 5)
    {
      v16 = 0;
      v15 = 1;
      goto LABEL_22;
    }
    v17 = 0;
    v15 = (int)ICUDifferenceInDays > 7;
    v16 = (siri::dialogengine *)v15;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "fr");
    v17 = siri::dialogengine::StringStartsWith(&v93, (unsigned __int8 *)__p);
    if ((v95[7] & 0x80000000) != 0)
      operator delete(__p[0]);
    v15 = 0;
    v16 = 0;
  }
LABEL_23:
  siri::dialogengine::CreateJSONStringVal((uint64_t)&v88, v85);
  v68 = this;
  std::string::basic_string[abi:ne180100]<0>(__p, "displayDayOfWeek");
  *(_OWORD *)&v95[8] = *(_OWORD *)v85;
  *(_OWORD *)v85 = 0uLL;
  siri::dialogengine::CreateJSONStringVal((uint64_t)&v88, (uint64_t *)&v84);
  std::string::basic_string[abi:ne180100]<0>(&v96, "displayDayOfWeekFormatted");
  *(_OWORD *)v98 = v84;
  v84 = 0uLL;
  siri::dialogengine::CreateJSONStringVal((uint64_t)&__str, (uint64_t *)&v83);
  std::string::basic_string[abi:ne180100]<0>(&v99, "displayDate");
  *(_OWORD *)&v101.__r_.__value_.__r.__words[1] = v83;
  v83 = 0uLL;
  size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __str.__r_.__value_.__l.__size_;
  if (size < 2)
    std::string::basic_string[abi:ne180100]<0>(&v81, "");
  else
    std::string::basic_string(&v81, &__str, 2uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v80);
  siri::dialogengine::CreateJSONStringVal((uint64_t)&v81, (uint64_t *)&v82);
  std::string::basic_string[abi:ne180100]<0>(&v102, "displayDateSubString");
  *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v82;
  v82 = 0uLL;
  siri::dialogengine::CreateJSONIntVal(ICUDifferenceInDays, v80);
  std::string::basic_string[abi:ne180100]<0>(&v103.__r_.__value_.__r.__words[2], "daysFromNow");
  v104 = *(_OWORD *)v80;
  *(_OWORD *)v80 = 0uLL;
  siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)(ICUDifferenceInWeeks == 0), (uint64_t *)&v79);
  std::string::basic_string[abi:ne180100]<0>(v105, "isInThisWeek");
  v106 = v79;
  v79 = 0uLL;
  siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)(ICUDifferenceInWeeks == -1), (uint64_t *)&v78);
  std::string::basic_string[abi:ne180100]<0>(v107, "isInPreviousWeek");
  v108 = v78;
  v78 = 0uLL;
  siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)(ICUDifferenceInWeeks == 1), (uint64_t *)&v77);
  std::string::basic_string[abi:ne180100]<0>(v109, "isInNextWeek");
  v110 = v77;
  v77 = 0uLL;
  siri::dialogengine::CreateJSONStringVal(a4, (uint64_t *)&v76);
  std::string::basic_string[abi:ne180100]<0>(v111, "dateTimeAffix");
  v112 = v76;
  v76 = 0uLL;
  siri::dialogengine::CreateJSONBoolVal(0, (uint64_t *)&v75);
  std::string::basic_string[abi:ne180100]<0>(v113, "endDateOfARange");
  v114 = v75;
  v75 = 0uLL;
  siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)v15, (uint64_t *)&v74);
  std::string::basic_string[abi:ne180100]<0>(v115, "future");
  v116 = v74;
  v74 = 0uLL;
  siri::dialogengine::CreateJSONBoolVal(v16, (uint64_t *)&v73);
  std::string::basic_string[abi:ne180100]<0>(v117, "numeralDate");
  v118 = v73;
  v73 = 0uLL;
  siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)v17, (uint64_t *)&v72);
  std::string::basic_string[abi:ne180100]<0>(v119, "weekday");
  v120 = v72;
  v72 = 0uLL;
  siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)*(unsigned __int8 *)a5, (uint64_t *)&v71);
  std::string::basic_string[abi:ne180100]<0>(v121, "usesNonSpecificDateTimePeriod");
  v122 = v71;
  v71 = 0uLL;
  siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)*((unsigned __int8 *)a5 + 1), (uint64_t *)&v70);
  std::string::basic_string[abi:ne180100]<0>(v123, "isAbsolute");
  v124 = v70;
  v70 = 0uLL;
  siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)*((unsigned __int8 *)a5 + 2), (uint64_t *)&v69);
  std::string::basic_string[abi:ne180100]<0>(v125, "includeDayOfWeek");
  v126 = v69;
  v69 = 0uLL;
  std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100]((uint64_t)v86, (const void **)__p, 16);
  v19 = 80;
  do
  {
    std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v93.__r_.__value_.__r.__words[v19 + 1]);
    if (SHIBYTE(v93.__r_.__value_.__r.__words[v19]) < 0)
      operator delete((void *)v91[v19 + 2]);
    v19 -= 5;
  }
  while (v19 * 8);
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v69 + 1);
  if (*((_QWORD *)&v69 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v69 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
  if (*((_QWORD *)&v70 + 1))
  {
    v24 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
  if (*((_QWORD *)&v71 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
  if (*((_QWORD *)&v72 + 1))
  {
    v30 = (unint64_t *)(*((_QWORD *)&v72 + 1) + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = (std::__shared_weak_count *)*((_QWORD *)&v73 + 1);
  if (*((_QWORD *)&v73 + 1))
  {
    v33 = (unint64_t *)(*((_QWORD *)&v73 + 1) + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = (std::__shared_weak_count *)*((_QWORD *)&v74 + 1);
  if (*((_QWORD *)&v74 + 1))
  {
    v36 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = (std::__shared_weak_count *)*((_QWORD *)&v75 + 1);
  if (*((_QWORD *)&v75 + 1))
  {
    v39 = (unint64_t *)(*((_QWORD *)&v75 + 1) + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = (std::__shared_weak_count *)*((_QWORD *)&v76 + 1);
  if (*((_QWORD *)&v76 + 1))
  {
    v42 = (unint64_t *)(*((_QWORD *)&v76 + 1) + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = (std::__shared_weak_count *)*((_QWORD *)&v77 + 1);
  if (*((_QWORD *)&v77 + 1))
  {
    v45 = (unint64_t *)(*((_QWORD *)&v77 + 1) + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = (std::__shared_weak_count *)*((_QWORD *)&v78 + 1);
  if (*((_QWORD *)&v78 + 1))
  {
    v48 = (unint64_t *)(*((_QWORD *)&v78 + 1) + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v50 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
  if (*((_QWORD *)&v79 + 1))
  {
    v51 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = (std::__shared_weak_count *)v80[1];
  if (v80[1])
  {
    v54 = (unint64_t *)(v80[1] + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v56 = (std::__shared_weak_count *)*((_QWORD *)&v82 + 1);
  if (*((_QWORD *)&v82 + 1))
  {
    v57 = (unint64_t *)(*((_QWORD *)&v82 + 1) + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v81.__r_.__value_.__l.__data_);
  v59 = (std::__shared_weak_count *)*((_QWORD *)&v83 + 1);
  if (*((_QWORD *)&v83 + 1))
  {
    v60 = (unint64_t *)(*((_QWORD *)&v83 + 1) + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  v62 = (std::__shared_weak_count *)*((_QWORD *)&v84 + 1);
  if (*((_QWORD *)&v84 + 1))
  {
    v63 = (unint64_t *)(*((_QWORD *)&v84 + 1) + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v65 = (std::__shared_weak_count *)v85[1];
  if (v85[1])
  {
    v66 = (unint64_t *)(v85[1] + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v81, "dateTime#dateDescriptive");
  siri::dialogengine::ExecuteSharedCat(v68, (uint64_t)&v81, v86, (uint64_t)__p);
  std::string::operator=((std::string *)a1, (const std::string *)__p);
  std::string::operator=((std::string *)(a1 + 24), (const std::string *)&v95[8]);
  std::string::operator=((std::string *)(a1 + 48), (const std::string *)&v97);
  std::string::operator=((std::string *)(a1 + 72), (const std::string *)&v98[1]);
  std::string::operator=((std::string *)(a1 + 96), &v101);
  std::string::operator=((std::string *)(a1 + 120), &v102);
  std::string::operator=((std::string *)(a1 + 144), &v103);
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v103.__r_.__value_.__l.__data_);
  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v102.__r_.__value_.__l.__data_);
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v101.__r_.__value_.__l.__data_);
  if (v100 < 0)
    operator delete(v98[1]);
  if (SHIBYTE(v98[0]) < 0)
    operator delete(v97);
  if (SHIBYTE(v96) < 0)
    operator delete(*(void **)&v95[8]);
  if ((v95[7] & 0x80000000) != 0)
    operator delete(__p[0]);
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v81.__r_.__value_.__l.__data_);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(v86[1]);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v88.__r_.__value_.__l.__data_);
  if (v90 < 0)
    operator delete((void *)v89[1]);
  if (v92 < 0)
    operator delete((void *)v91[1]);
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v93.__r_.__value_.__l.__data_);
}

void sub_1BF89E744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  void *a65;
  char a70;
  void *a72;
  char a73;
  void *a74;
  char a75;
  void *__p;
  char a77;
  void **v77;

  if (a77 < 0)
    operator delete(__p);
  if (a56 < 0)
    operator delete(a51);
  if (a63 < 0)
    operator delete(a58);
  if (a70 < 0)
    operator delete(a65);
  if (a73 < 0)
    operator delete(a72);
  if (a75 < 0)
    operator delete(a74);
  siri::dialogengine::SpeakableString::~SpeakableString(v77);
  _Unwind_Resume(a1);
}

std::string *siri::dialogengine::DialogCalendar::dateDescriptiveAbsolute(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string *DateDescriptive;
  void *v7[2];
  char v8;
  __int128 v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  void *__p[2];
  __int128 v14;

  LOWORD(v12) = 0;
  BYTE2(v12) = 0;
  *(_OWORD *)__p = 0u;
  v14 = 0u;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  BYTE8(v14) = 0;
  siri::dialogengine::GetDateFormatterOptions((void **)&v9, a2);
  if (SBYTE7(v14) < 0)
    operator delete(__p[0]);
  *(_OWORD *)__p = v9;
  *(_QWORD *)&v14 = v10;
  BYTE8(v14) = v11;
  BYTE1(v12) = 1;
  std::string::basic_string[abi:ne180100]<0>(v7, "none");
  DateDescriptive = siri::dialogengine::GetDateDescriptive(this, a2, (uint64_t)v7, &v12);
  if (v8 < 0)
    operator delete(v7[0]);
  if (SBYTE7(v14) < 0)
    operator delete(__p[0]);
  return DateDescriptive;
}

void sub_1BF89EB20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a14 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

std::string *siri::dialogengine::DialogCalendar::dateDescriptiveAbsoluteWithDayOfWeek(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string *DateDescriptive;
  void *v7[2];
  char v8;
  __int128 v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  void *__p[2];
  __int128 v14;

  LOWORD(v12) = 0;
  BYTE2(v12) = 0;
  *(_OWORD *)__p = 0u;
  v14 = 0u;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  BYTE8(v14) = 0;
  siri::dialogengine::GetDateFormatterOptions((void **)&v9, a2);
  if (SBYTE7(v14) < 0)
    operator delete(__p[0]);
  *(_OWORD *)__p = v9;
  *(_QWORD *)&v14 = v10;
  BYTE8(v14) = v11;
  *(_WORD *)((char *)&v12 + 1) = 257;
  std::string::basic_string[abi:ne180100]<0>(v7, "none");
  DateDescriptive = siri::dialogengine::GetDateDescriptive(this, a2, (uint64_t)v7, &v12);
  if (v8 < 0)
    operator delete(v7[0]);
  if (SBYTE7(v14) < 0)
    operator delete(__p[0]);
  return DateDescriptive;
}

void sub_1BF89EC3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a14 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

std::string *siri::dialogengine::DialogCalendar::dateDescriptiveOmitYear(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string *DateDescriptive;
  void *v7[2];
  char v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  void *__p[2];
  __int128 v13;

  LOWORD(v11) = 0;
  BYTE2(v11) = 0;
  *(_OWORD *)__p = 0u;
  v13 = 0u;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  BYTE8(v13) = 0;
  siri::dialogengine::GetDateFormatterOptions((void **)&v9, a2);
  if (SBYTE7(v13) < 0)
    operator delete(__p[0]);
  *(_OWORD *)__p = v9;
  *(_QWORD *)&v13 = v10;
  BYTE8(v13) = 1;
  std::string::basic_string[abi:ne180100]<0>(v7, "none");
  DateDescriptive = siri::dialogengine::GetDateDescriptive(this, a2, (uint64_t)v7, &v11);
  if (v8 < 0)
    operator delete(v7[0]);
  if (SBYTE7(v13) < 0)
    operator delete(__p[0]);
  return DateDescriptive;
}

void sub_1BF89ED50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a14 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

std::string *siri::dialogengine::DialogCalendar::dateDescriptiveWithPrefixOnOmitYear(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string *DateDescriptive;
  void *v7[2];
  char v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  void *__p[2];
  __int128 v13;

  LOWORD(v11) = 0;
  BYTE2(v11) = 0;
  *(_OWORD *)__p = 0u;
  v13 = 0u;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  BYTE8(v13) = 0;
  siri::dialogengine::GetDateFormatterOptions((void **)&v9, a2);
  if (SBYTE7(v13) < 0)
    operator delete(__p[0]);
  *(_OWORD *)__p = v9;
  *(_QWORD *)&v13 = v10;
  BYTE8(v13) = 1;
  std::string::basic_string[abi:ne180100]<0>(v7, "on");
  DateDescriptive = siri::dialogengine::GetDateDescriptive(this, a2, (uint64_t)v7, &v11);
  if (v8 < 0)
    operator delete(v7[0]);
  if (SBYTE7(v13) < 0)
    operator delete(__p[0]);
  return DateDescriptive;
}

void sub_1BF89EE64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a14 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

std::string *siri::dialogengine::DialogCalendar::dateDescriptiveWithPrefix(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string *DateDescriptive;
  void *v7[2];
  __int128 v8;
  uint64_t v9;
  void *v10[2];
  char v11;
  __int16 v12;
  char v13;
  void *__p[2];
  __int128 v15;

  v12 = 0;
  v13 = 0;
  *(_OWORD *)__p = 0u;
  v15 = 0u;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  BYTE8(v15) = 0;
  siri::dialogengine::GetDateFormatterOptions(v7, a2);
  if (SBYTE7(v15) < 0)
    operator delete(__p[0]);
  *(_OWORD *)__p = *(_OWORD *)v7;
  *(_QWORD *)&v15 = v8;
  BYTE8(v15) = BYTE8(v8);
  std::string::basic_string[abi:ne180100]<0>(v10, "prefix");
  v9 = 0;
  *(_OWORD *)v7 = 0u;
  v8 = 0u;
  std::string::basic_string[abi:ne180100]<0>(&v7[1], "");
  LOBYTE(v9) = 0;
  DateDescriptive = siri::dialogengine::GetDateDescriptive(this, a2, (uint64_t)v10, (uint64_t *)v7);
  if (SHIBYTE(v8) < 0)
    operator delete(v7[1]);
  if (v11 < 0)
    operator delete(v10[0]);
  if (SBYTE7(v15) < 0)
    operator delete(__p[0]);
  return DateDescriptive;
}

void sub_1BF89EFAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a15 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a30 < 0)
    operator delete(a25);
  _Unwind_Resume(exception_object);
}

std::string *siri::dialogengine::DialogCalendar::dateDescriptiveWithPrefixFor(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string *DateDescriptive;
  void *v7[2];
  __int128 v8;
  uint64_t v9;
  void *v10[2];
  char v11;
  __int16 v12;
  char v13;
  void *__p[2];
  __int128 v15;

  v12 = 0;
  v13 = 0;
  *(_OWORD *)__p = 0u;
  v15 = 0u;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  BYTE8(v15) = 0;
  siri::dialogengine::GetDateFormatterOptions(v7, a2);
  if (SBYTE7(v15) < 0)
    operator delete(__p[0]);
  *(_OWORD *)__p = *(_OWORD *)v7;
  *(_QWORD *)&v15 = v8;
  BYTE8(v15) = BYTE8(v8);
  std::string::basic_string[abi:ne180100]<0>(v10, "for");
  v9 = 0;
  *(_OWORD *)v7 = 0u;
  v8 = 0u;
  std::string::basic_string[abi:ne180100]<0>(&v7[1], "");
  LOBYTE(v9) = 0;
  DateDescriptive = siri::dialogengine::GetDateDescriptive(this, a2, (uint64_t)v10, (uint64_t *)v7);
  if (SHIBYTE(v8) < 0)
    operator delete(v7[1]);
  if (v11 < 0)
    operator delete(v10[0]);
  if (SBYTE7(v15) < 0)
    operator delete(__p[0]);
  return DateDescriptive;
}

void sub_1BF89F10C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a15 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a30 < 0)
    operator delete(a25);
  _Unwind_Resume(exception_object);
}

std::string *siri::dialogengine::DialogCalendar::dateDescriptiveWithPrefixFrom(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string *DateDescriptive;
  void *v7[2];
  __int128 v8;
  uint64_t v9;
  void *v10[2];
  char v11;
  __int16 v12;
  char v13;
  void *__p[2];
  __int128 v15;

  v12 = 0;
  v13 = 0;
  *(_OWORD *)__p = 0u;
  v15 = 0u;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  BYTE8(v15) = 0;
  siri::dialogengine::GetDateFormatterOptions(v7, a2);
  if (SBYTE7(v15) < 0)
    operator delete(__p[0]);
  *(_OWORD *)__p = *(_OWORD *)v7;
  *(_QWORD *)&v15 = v8;
  BYTE8(v15) = BYTE8(v8);
  std::string::basic_string[abi:ne180100]<0>(v10, "from");
  v9 = 0;
  *(_OWORD *)v7 = 0u;
  v8 = 0u;
  std::string::basic_string[abi:ne180100]<0>(&v7[1], "");
  LOBYTE(v9) = 0;
  DateDescriptive = siri::dialogengine::GetDateDescriptive(this, a2, (uint64_t)v10, (uint64_t *)v7);
  if (SHIBYTE(v8) < 0)
    operator delete(v7[1]);
  if (v11 < 0)
    operator delete(v10[0]);
  if (SBYTE7(v15) < 0)
    operator delete(__p[0]);
  return DateDescriptive;
}

void sub_1BF89F26C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a15 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a30 < 0)
    operator delete(a25);
  _Unwind_Resume(exception_object);
}

std::string *siri::dialogengine::DialogCalendar::dateDescriptiveWithPrefixOn(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string *DateDescriptive;
  void *v7[2];
  __int128 v8;
  uint64_t v9;
  void *v10[2];
  char v11;
  __int16 v12;
  char v13;
  void *__p[2];
  __int128 v15;

  v12 = 0;
  v13 = 0;
  *(_OWORD *)__p = 0u;
  v15 = 0u;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  BYTE8(v15) = 0;
  siri::dialogengine::GetDateFormatterOptions(v7, a2);
  if (SBYTE7(v15) < 0)
    operator delete(__p[0]);
  *(_OWORD *)__p = *(_OWORD *)v7;
  *(_QWORD *)&v15 = v8;
  BYTE8(v15) = BYTE8(v8);
  std::string::basic_string[abi:ne180100]<0>(v10, "on");
  v9 = 0;
  *(_OWORD *)v7 = 0u;
  v8 = 0u;
  std::string::basic_string[abi:ne180100]<0>(&v7[1], "");
  LOBYTE(v9) = 0;
  DateDescriptive = siri::dialogengine::GetDateDescriptive(this, a2, (uint64_t)v10, (uint64_t *)v7);
  if (SHIBYTE(v8) < 0)
    operator delete(v7[1]);
  if (v11 < 0)
    operator delete(v10[0]);
  if (SBYTE7(v15) < 0)
    operator delete(__p[0]);
  return DateDescriptive;
}

void sub_1BF89F3CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a15 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a30 < 0)
    operator delete(a25);
  _Unwind_Resume(exception_object);
}

std::string *siri::dialogengine::DialogCalendar::dateDescriptiveWithPrefixUntil(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string *DateDescriptive;
  void *v7[2];
  __int128 v8;
  uint64_t v9;
  void *v10[2];
  char v11;
  __int16 v12;
  char v13;
  void *__p[2];
  __int128 v15;

  v12 = 0;
  v13 = 0;
  *(_OWORD *)__p = 0u;
  v15 = 0u;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  BYTE8(v15) = 0;
  siri::dialogengine::GetDateFormatterOptions(v7, a2);
  if (SBYTE7(v15) < 0)
    operator delete(__p[0]);
  *(_OWORD *)__p = *(_OWORD *)v7;
  *(_QWORD *)&v15 = v8;
  BYTE8(v15) = BYTE8(v8);
  std::string::basic_string[abi:ne180100]<0>(v10, "until");
  v9 = 0;
  *(_OWORD *)v7 = 0u;
  v8 = 0u;
  std::string::basic_string[abi:ne180100]<0>(&v7[1], "");
  LOBYTE(v9) = 0;
  DateDescriptive = siri::dialogengine::GetDateDescriptive(this, a2, (uint64_t)v10, (uint64_t *)v7);
  if (SHIBYTE(v8) < 0)
    operator delete(v7[1]);
  if (v11 < 0)
    operator delete(v10[0]);
  if (SBYTE7(v15) < 0)
    operator delete(__p[0]);
  return DateDescriptive;
}

void sub_1BF89F52C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a15 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a30 < 0)
    operator delete(a25);
  _Unwind_Resume(exception_object);
}

std::string *siri::dialogengine::DialogCalendar::timeDescriptive(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string *TimeDescriptive;
  void *__p[2];
  char v8;

  std::string::basic_string[abi:ne180100]<0>(__p, "none");
  TimeDescriptive = siri::dialogengine::GetTimeDescriptive(this, a2, (uint64_t)__p);
  if (v8 < 0)
    operator delete(__p[0]);
  return TimeDescriptive;
}

void sub_1BF89F5DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *siri::dialogengine::GetTimeDescriptive(siri::dialogengine::Context *a1, siri::dialogengine::Context *a2, uint64_t a3)
{
  void *OptionalNumberParameter;
  void *v7;
  std::string *v8;
  void *v9;
  const char *v10;
  std::string::size_type size;
  std::string::size_type v12;
  std::string v14;
  std::string __str;
  void *v16[2];
  char v17;
  std::string v18;
  char v19;
  std::string v20;
  void *__p[2];
  _OWORD v22[2];
  void *v23[2];
  void *v24[2];
  __int128 v25;
  void *v26[2];
  void *v27[2];
  __int128 v28;
  void *v29[2];
  uint64_t v30;

  std::string::basic_string[abi:ne180100]<0>(__p, "secs");
  OptionalNumberParameter = siri::dialogengine::GetOptionalNumberParameter((const void **)__p, (uint64_t)a2);
  v7 = OptionalNumberParameter;
  if (SBYTE7(v22[0]) < 0)
  {
    operator delete(__p[0]);
    if (v7)
    {
LABEL_3:
      if (*(char *)(a3 + 23) < 0)
        std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
      else
        v20 = *(std::string *)a3;
      siri::dialogengine::GetTimeDescriptiveSpeakableString((uint64_t)__p, a1, a2, (uint64_t)&v20, 0);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v20.__r_.__value_.__l.__data_);
      siri::dialogengine::GetRequestTimeStamp(a1, a2, &v18);
      siri::dialogengine::Context::GetLocaleWithUserCalendar(a1, v10, (uint64_t)v16);
      v14.__r_.__value_.__r.__words[0] = 0x100000001;
      siri::dialogengine::GetICUDefaultDisplayTime(&v18, (uint64_t)v16, (uint64_t)&v14, &__str);
      if (SBYTE7(v22[0]) < 0)
      {
        std::string::__init_copy_ctor_external(&v14, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        *(_OWORD *)&v14.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
        v14.__r_.__value_.__r.__words[2] = *(_QWORD *)&v22[0];
      }
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      {
        size = v14.__r_.__value_.__l.__size_;
        operator delete(v14.__r_.__value_.__l.__data_);
        if (size)
          goto LABEL_19;
      }
      else if (*((_BYTE *)&v14.__r_.__value_.__s + 23))
      {
        goto LABEL_19;
      }
      std::string::operator=((std::string *)__p, &__str);
LABEL_19:
      if (SHIBYTE(v22[1]) < 0)
        std::string::__init_copy_ctor_external(&v14, *((const std::string::value_type **)&v22[0] + 1), *(std::string::size_type *)&v22[1]);
      else
        v14 = *(std::string *)((char *)v22 + 8);
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      {
        v12 = v14.__r_.__value_.__l.__size_;
        operator delete(v14.__r_.__value_.__l.__data_);
        if (v12)
          goto LABEL_27;
      }
      else if (*((_BYTE *)&v14.__r_.__value_.__s + 23))
      {
        goto LABEL_27;
      }
      std::string::operator=((std::string *)((char *)v22 + 8), &__str);
LABEL_27:
      v8 = (std::string *)operator new();
      std::string::basic_string[abi:ne180100]<0>(&v14, "");
      siri::dialogengine::VariableString::VariableString(v8, &v14, (const siri::dialogengine::SpeakableString *)__p);
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v14.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (v17 < 0)
        operator delete(v16[0]);
      if (v19 < 0)
        operator delete((void *)v18.__r_.__value_.__l.__size_);
      if (SHIBYTE(v30) < 0)
        operator delete(v29[0]);
      if (SHIBYTE(v28) < 0)
        operator delete(v27[1]);
      if (SHIBYTE(v27[0]) < 0)
        operator delete(v26[0]);
      if (SHIBYTE(v25) < 0)
        operator delete(v24[1]);
      if (SHIBYTE(v24[0]) < 0)
        operator delete(v23[0]);
      if (SHIBYTE(v22[1]) < 0)
        operator delete(*((void **)&v22[0] + 1));
      if (SBYTE7(v22[0]) < 0)
      {
        v9 = __p[0];
        goto LABEL_49;
      }
      return v8;
    }
  }
  else if (OptionalNumberParameter)
  {
    goto LABEL_3;
  }
  v8 = (std::string *)operator new();
  std::string::basic_string[abi:ne180100]<0>(&v18, "");
  v30 = 0;
  v28 = 0u;
  *(_OWORD *)v29 = 0u;
  *(_OWORD *)v26 = 0u;
  *(_OWORD *)v27 = 0u;
  *(_OWORD *)v24 = 0u;
  v25 = 0u;
  *(_OWORD *)v23 = 0u;
  *(_OWORD *)__p = 0u;
  memset(v22, 0, sizeof(v22));
  siri::dialogengine::VariableString::VariableString(v8, &v18, (const siri::dialogengine::SpeakableString *)__p);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
  {
    v9 = (void *)v18.__r_.__value_.__r.__words[0];
LABEL_49:
    operator delete(v9);
  }
  return v8;
}

void sub_1BF89F8F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,void *a29,int a30,__int16 a31,char a32,char a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  if (a37 < 0)
    operator delete(a29);
  siri::dialogengine::SpeakableString::~SpeakableString((void **)&a45);
  _Unwind_Resume(a1);
}

void siri::dialogengine::GetTimeDescriptiveSpeakableString(uint64_t a1, siri::dialogengine::Context *this, siri::dialogengine::Context *a3, uint64_t a4, int a5)
{
  const siri::dialogengine::TimeStamp *v10;
  unsigned int ICUHour24;
  const siri::dialogengine::TimeStamp *v12;
  unsigned int ICUMinutes;
  const siri::dialogengine::TimeStamp *v14;
  siri::dialogengine *ICUHour12;
  const siri::dialogengine::TimeStamp *v16;
  siri::dialogengine *v17;
  const siri::dialogengine::TimeStamp *v18;
  siri::dialogengine *v19;
  siri::dialogengine::Context *v20;
  siri::dialogengine *v21;
  siri::dialogengine *v22;
  int v23;
  uint64_t v24;
  siri::dialogengine::Context *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t i;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  void *v94[2];
  char v95;
  std::string v96;
  _BYTE v97[32];
  __int128 v98;
  void *v99[2];
  void *v100[2];
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  std::string v105;
  void *v106[3];
  char v107;
  std::string v108;
  void *v109[2];
  char v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  std::string v121;
  void *v122;
  _QWORD *v123;
  char v124;
  std::string __str;
  std::string v126;
  void *v127[2];
  __int128 v128;
  uint64_t v129;
  char v130;
  std::string v131;
  std::string v132;
  std::string __p;
  __int128 v134;
  _QWORD v135[3];
  __int128 v136;
  _QWORD v137[3];
  __int128 v138;
  _QWORD v139[3];
  __int128 v140;
  _QWORD v141[3];
  __int128 v142;
  _QWORD v143[3];
  __int128 v144;
  uint64_t v145;

  v145 = *MEMORY[0x1E0C80C00];
  siri::dialogengine::Context::GetLocaleWithUserCalendar(this, (const char *)this, (uint64_t)&v108);
  siri::dialogengine::GetRequestTimeStamp(this, a3, v106);
  ICUHour24 = siri::dialogengine::GetICUHour24((siri::dialogengine *)v106, v10);
  ICUMinutes = siri::dialogengine::GetICUMinutes((siri::dialogengine *)v106, v12);
  if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v96, v108.__r_.__value_.__l.__data_, v108.__r_.__value_.__l.__size_);
  else
    v96 = v108;
  std::string::basic_string[abi:ne180100]<0>(v94, "none");
  ICUHour12 = (siri::dialogengine *)siri::dialogengine::GetICUHour12((siri::dialogengine *)v106, v14);
  v17 = (siri::dialogengine *)siri::dialogengine::GetICUHour24((siri::dialogengine *)v106, v16);
  v19 = (siri::dialogengine *)siri::dialogengine::GetICUMinutes((siri::dialogengine *)v106, v18);
  siri::dialogengine::GetICULocalizedMeridiem(v106, &v96.__r_.__value_.__l.__data_, &v122);
  __str.__r_.__value_.__r.__words[0] = 0x100000001;
  siri::dialogengine::GetICUDefaultDisplayTime(v106, (uint64_t)&v96, (uint64_t)&__str, &v121);
  v93 = ICUHour24;
  v91 = a1;
  v92 = a4;
  memset(v97, 0, sizeof(v97));
  v98 = 0u;
  *(_OWORD *)v99 = 0u;
  *(_OWORD *)v100 = 0u;
  v101 = 0u;
  v102 = 0u;
  v103 = 0u;
  v104 = 0u;
  memset(&v105, 0, sizeof(v105));
  v21 = (siri::dialogengine *)((int)v19 / 5);
  v22 = (siri::dialogengine *)((int)v19 % 5);
  if (siri::dialogengine::ShouldUse24HrDisplay(this, v20))
  {
    siri::dialogengine::CreateJSONIntVal(v17, (uint64_t *)v109);
    std::string::basic_string[abi:ne180100]<0>(&__str, "hourOfDay");
    *(_OWORD *)&v126.__r_.__value_.__l.__data_ = *(_OWORD *)v109;
    v109[0] = 0;
    v109[1] = 0;
    siri::dialogengine::CreateJSONIntVal((siri::dialogengine *)((_DWORD)v17 - 11), (uint64_t *)&v119);
    std::string::basic_string[abi:ne180100]<0>(&v126.__r_.__value_.__r.__words[2], "hourOfDayMinusEleven");
    v128 = v119;
    v119 = 0uLL;
    siri::dialogengine::CreateJSONIntVal((siri::dialogengine *)((_DWORD)v17 - 12), (uint64_t *)&v118);
    std::string::basic_string[abi:ne180100]<0>(&v129, "hourOfDayMinusTwelve");
    *(_OWORD *)&v131.__r_.__value_.__r.__words[1] = v118;
    v118 = 0uLL;
    siri::dialogengine::CreateJSONIntVal((siri::dialogengine *)((_DWORD)v17 + 1), (uint64_t *)&v117);
    std::string::basic_string[abi:ne180100]<0>(&v132, "hourOfDayPlusOne");
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v117;
    v117 = 0uLL;
    siri::dialogengine::CreateJSONIntVal(v19, (uint64_t *)&v116);
    std::string::basic_string[abi:ne180100]<0>(&__p.__r_.__value_.__r.__words[2], "minute");
    v134 = v116;
    v116 = 0uLL;
    siri::dialogengine::CreateJSONIntVal(v21, (uint64_t *)&v115);
    std::string::basic_string[abi:ne180100]<0>(v135, "minuteDividedByFive");
    v136 = v115;
    v115 = 0uLL;
    siri::dialogengine::CreateJSONIntVal(v22, (uint64_t *)&v114);
    std::string::basic_string[abi:ne180100]<0>(v137, "minuteModByFive");
    v23 = a5;
    v138 = v114;
    v114 = 0uLL;
    siri::dialogengine::CreateJSONStringVal((uint64_t)v94, (uint64_t *)&v113);
    std::string::basic_string[abi:ne180100]<0>(v139, "dateTimeAffix");
    v140 = v113;
    v113 = 0uLL;
    siri::dialogengine::CreateJSONStringVal((uint64_t)&v121, (uint64_t *)&v112);
    std::string::basic_string[abi:ne180100]<0>(v141, "defaultDisplayTime");
    v142 = v112;
    v112 = 0uLL;
    siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)(a5 != 0), (uint64_t *)&v111);
    std::string::basic_string[abi:ne180100]<0>(v143, "isDateTimeRequest");
    v144 = v111;
    v111 = 0uLL;
    std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100]((uint64_t)&v120, (const void **)&__str.__r_.__value_.__l.__data_, 10);
    v24 = 50;
    v25 = this;
    do
    {
      std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&(&v123)[v24]);
      if (*((char *)&v122 + v24 * 8 + 7) < 0)
        operator delete((void *)v121.__r_.__value_.__r.__words[v24 + 1]);
      v24 -= 5;
    }
    while (v24 * 8);
    v26 = (std::__shared_weak_count *)*((_QWORD *)&v111 + 1);
    if (*((_QWORD *)&v111 + 1))
    {
      v27 = (unint64_t *)(*((_QWORD *)&v111 + 1) + 8);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v29 = (std::__shared_weak_count *)*((_QWORD *)&v112 + 1);
    if (*((_QWORD *)&v112 + 1))
    {
      v30 = (unint64_t *)(*((_QWORD *)&v112 + 1) + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = (std::__shared_weak_count *)*((_QWORD *)&v113 + 1);
    if (*((_QWORD *)&v113 + 1))
    {
      v33 = (unint64_t *)(*((_QWORD *)&v113 + 1) + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    v35 = (std::__shared_weak_count *)*((_QWORD *)&v114 + 1);
    if (*((_QWORD *)&v114 + 1))
    {
      v36 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    v38 = (std::__shared_weak_count *)*((_QWORD *)&v115 + 1);
    if (*((_QWORD *)&v115 + 1))
    {
      v39 = (unint64_t *)(*((_QWORD *)&v115 + 1) + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    v41 = (std::__shared_weak_count *)*((_QWORD *)&v116 + 1);
    if (*((_QWORD *)&v116 + 1))
    {
      v42 = (unint64_t *)(*((_QWORD *)&v116 + 1) + 8);
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    v44 = (std::__shared_weak_count *)*((_QWORD *)&v117 + 1);
    if (*((_QWORD *)&v117 + 1))
    {
      v45 = (unint64_t *)(*((_QWORD *)&v117 + 1) + 8);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    v47 = (std::__shared_weak_count *)*((_QWORD *)&v118 + 1);
    if (*((_QWORD *)&v118 + 1))
    {
      v48 = (unint64_t *)(*((_QWORD *)&v118 + 1) + 8);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    v50 = (std::__shared_weak_count *)*((_QWORD *)&v119 + 1);
    if (*((_QWORD *)&v119 + 1))
    {
      v51 = (unint64_t *)(*((_QWORD *)&v119 + 1) + 8);
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    v53 = (std::__shared_weak_count *)v109[1];
    if (v109[1])
    {
      v54 = (unint64_t *)((char *)v109[1] + 8);
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(v109, "dateTime#timeShortTwentyFourHourDisplay");
    siri::dialogengine::ExecuteSharedCat(this, (uint64_t)v109, (const void ***)&v120, (uint64_t)&__str);
    std::string::operator=((std::string *)v97, &__str);
    std::string::operator=((std::string *)&v97[24], &v126);
    std::string::operator=((std::string *)v99, (const std::string *)v127);
    std::string::operator=((std::string *)&v100[1], (const std::string *)((char *)&v128 + 8));
    std::string::operator=((std::string *)&v102, &v131);
    std::string::operator=((std::string *)((char *)&v103 + 8), &v132);
    std::string::operator=(&v105, &__p);
  }
  else
  {
    siri::dialogengine::CreateJSONIntVal(v17, (uint64_t *)v109);
    std::string::basic_string[abi:ne180100]<0>(&__str, "hourOfDay");
    *(_OWORD *)&v126.__r_.__value_.__l.__data_ = *(_OWORD *)v109;
    v109[0] = 0;
    v109[1] = 0;
    siri::dialogengine::CreateJSONIntVal(ICUHour12, (uint64_t *)&v119);
    std::string::basic_string[abi:ne180100]<0>(&v126.__r_.__value_.__r.__words[2], "hour");
    v128 = v119;
    v119 = 0uLL;
    siri::dialogengine::CreateJSONIntVal(v19, (uint64_t *)&v118);
    std::string::basic_string[abi:ne180100]<0>(&v129, "minute");
    *(_OWORD *)&v131.__r_.__value_.__r.__words[1] = v118;
    v118 = 0uLL;
    siri::dialogengine::CreateJSONIntVal(v21, (uint64_t *)&v117);
    std::string::basic_string[abi:ne180100]<0>(&v132, "minuteDividedByFive");
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v117;
    v117 = 0uLL;
    siri::dialogengine::CreateJSONIntVal(v22, (uint64_t *)&v116);
    std::string::basic_string[abi:ne180100]<0>(&__p.__r_.__value_.__r.__words[2], "minuteModByFive");
    v23 = a5;
    v134 = v116;
    v116 = 0uLL;
    siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)1, (uint64_t *)&v115);
    std::string::basic_string[abi:ne180100]<0>(v135, "displayMeridiem");
    v136 = v115;
    v115 = 0uLL;
    siri::dialogengine::CreateJSONStringVal((uint64_t)v94, (uint64_t *)&v114);
    std::string::basic_string[abi:ne180100]<0>(v137, "dateTimeAffix");
    v138 = v114;
    v114 = 0uLL;
    siri::dialogengine::CreateJSONStringVal((uint64_t)&v122, (uint64_t *)&v113);
    std::string::basic_string[abi:ne180100]<0>(v139, "meridiem");
    v140 = v113;
    v113 = 0uLL;
    siri::dialogengine::CreateJSONStringVal((uint64_t)&v121, (uint64_t *)&v112);
    std::string::basic_string[abi:ne180100]<0>(v141, "defaultDisplayTime");
    v142 = v112;
    v112 = 0uLL;
    siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)(a5 != 0), (uint64_t *)&v111);
    std::string::basic_string[abi:ne180100]<0>(v143, "isDateTimeRequest");
    v144 = v111;
    v111 = 0uLL;
    std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100]((uint64_t)&v120, (const void **)&__str.__r_.__value_.__l.__data_, 10);
    v56 = 50;
    v25 = this;
    do
    {
      std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&(&v123)[v56]);
      if (*((char *)&v122 + v56 * 8 + 7) < 0)
        operator delete((void *)v121.__r_.__value_.__r.__words[v56 + 1]);
      v56 -= 5;
    }
    while (v56 * 8);
    v57 = (std::__shared_weak_count *)*((_QWORD *)&v111 + 1);
    if (*((_QWORD *)&v111 + 1))
    {
      v58 = (unint64_t *)(*((_QWORD *)&v111 + 1) + 8);
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
    v60 = (std::__shared_weak_count *)*((_QWORD *)&v112 + 1);
    if (*((_QWORD *)&v112 + 1))
    {
      v61 = (unint64_t *)(*((_QWORD *)&v112 + 1) + 8);
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
    v63 = (std::__shared_weak_count *)*((_QWORD *)&v113 + 1);
    if (*((_QWORD *)&v113 + 1))
    {
      v64 = (unint64_t *)(*((_QWORD *)&v113 + 1) + 8);
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
    v66 = (std::__shared_weak_count *)*((_QWORD *)&v114 + 1);
    if (*((_QWORD *)&v114 + 1))
    {
      v67 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
    }
    v69 = (std::__shared_weak_count *)*((_QWORD *)&v115 + 1);
    if (*((_QWORD *)&v115 + 1))
    {
      v70 = (unint64_t *)(*((_QWORD *)&v115 + 1) + 8);
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
    v72 = (std::__shared_weak_count *)*((_QWORD *)&v116 + 1);
    if (*((_QWORD *)&v116 + 1))
    {
      v73 = (unint64_t *)(*((_QWORD *)&v116 + 1) + 8);
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
      }
    }
    v75 = (std::__shared_weak_count *)*((_QWORD *)&v117 + 1);
    if (*((_QWORD *)&v117 + 1))
    {
      v76 = (unint64_t *)(*((_QWORD *)&v117 + 1) + 8);
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
      }
    }
    v78 = (std::__shared_weak_count *)*((_QWORD *)&v118 + 1);
    if (*((_QWORD *)&v118 + 1))
    {
      v79 = (unint64_t *)(*((_QWORD *)&v118 + 1) + 8);
      do
        v80 = __ldaxr(v79);
      while (__stlxr(v80 - 1, v79));
      if (!v80)
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
    }
    v81 = (std::__shared_weak_count *)*((_QWORD *)&v119 + 1);
    if (*((_QWORD *)&v119 + 1))
    {
      v82 = (unint64_t *)(*((_QWORD *)&v119 + 1) + 8);
      do
        v83 = __ldaxr(v82);
      while (__stlxr(v83 - 1, v82));
      if (!v83)
      {
        ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
        std::__shared_weak_count::__release_weak(v81);
      }
    }
    v84 = (std::__shared_weak_count *)v109[1];
    if (v109[1])
    {
      v85 = (unint64_t *)((char *)v109[1] + 8);
      do
        v86 = __ldaxr(v85);
      while (__stlxr(v86 - 1, v85));
      if (!v86)
      {
        ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
        std::__shared_weak_count::__release_weak(v84);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(v109, "dateTime#timeShort");
    siri::dialogengine::ExecuteSharedCat(this, (uint64_t)v109, (const void ***)&v120, (uint64_t)&__str);
    std::string::operator=((std::string *)v97, &__str);
    std::string::operator=((std::string *)&v97[24], &v126);
    std::string::operator=((std::string *)v99, (const std::string *)v127);
    std::string::operator=((std::string *)&v100[1], (const std::string *)((char *)&v128 + 8));
    std::string::operator=((std::string *)&v102, &v131);
    std::string::operator=((std::string *)((char *)&v103 + 8), &v132);
    std::string::operator=(&v105, &__p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v132.__r_.__value_.__l.__data_);
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v131.__r_.__value_.__l.__data_);
  if (v130 < 0)
    operator delete(*((void **)&v128 + 1));
  if (SBYTE7(v128) < 0)
    operator delete(v127[0]);
  if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v126.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v110 < 0)
    operator delete(v109[0]);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*((_QWORD **)&v120 + 1));
  if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v121.__r_.__value_.__l.__data_);
  if (v124 < 0)
    operator delete(v122);
  if (v95 < 0)
    operator delete(v94[0]);
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v96.__r_.__value_.__l.__data_);
  siri::dialogengine::CreateJSONIntVal((siri::dialogengine *)v93, (uint64_t *)&v120);
  std::string::basic_string[abi:ne180100]<0>(&__str, "hourOfDay");
  *(_OWORD *)&v126.__r_.__value_.__l.__data_ = v120;
  v120 = 0uLL;
  siri::dialogengine::CreateJSONIntVal((siri::dialogengine *)ICUMinutes, (uint64_t *)v109);
  std::string::basic_string[abi:ne180100]<0>(&v126.__r_.__value_.__r.__words[2], "minute");
  v128 = *(_OWORD *)v109;
  v109[0] = 0;
  v109[1] = 0;
  siri::dialogengine::CreateJSONStringVal(v92, (uint64_t *)&v119);
  std::string::basic_string[abi:ne180100]<0>(&v129, "dateTimeAffix");
  *(_OWORD *)&v131.__r_.__value_.__r.__words[1] = v119;
  v119 = 0uLL;
  siri::dialogengine::SpeakableString::ToMultiplexedString((siri::dialogengine::SpeakableString *)v97, &v121);
  siri::dialogengine::CreateJSONStringVal((uint64_t)&v121, (uint64_t *)&v118);
  std::string::basic_string[abi:ne180100]<0>(&v132, "displayTime");
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v118;
  v118 = 0uLL;
  siri::dialogengine::CreateJSONBoolVal(0, (uint64_t *)&v117);
  std::string::basic_string[abi:ne180100]<0>(&__p.__r_.__value_.__r.__words[2], "withApproximation");
  v134 = v117;
  v117 = 0uLL;
  siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)(v23 != 0), (uint64_t *)&v116);
  std::string::basic_string[abi:ne180100]<0>(v135, "isDateTimeRequest");
  v136 = v116;
  v116 = 0uLL;
  std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100]((uint64_t)&v122, (const void **)&__str.__r_.__value_.__l.__data_, 6);
  for (i = 0; i != -30; i -= 5)
  {
    std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v137[i - 2]);
    if (SHIBYTE(v135[i + 2]) < 0)
      operator delete((void *)v135[i]);
  }
  if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v121.__r_.__value_.__l.__data_);
  v88 = (std::__shared_weak_count *)*((_QWORD *)&v120 + 1);
  if (*((_QWORD *)&v120 + 1))
  {
    v89 = (unint64_t *)(*((_QWORD *)&v120 + 1) + 8);
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__str, "dateTime#timeDescriptive");
  siri::dialogengine::ExecuteSharedCat(v25, (uint64_t)&__str, (const void ***)&v122, v91);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(v123);
  if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v105.__r_.__value_.__l.__data_);
  if (SHIBYTE(v104) < 0)
    operator delete(*((void **)&v103 + 1));
  if (SBYTE7(v103) < 0)
    operator delete((void *)v102);
  if (SHIBYTE(v101) < 0)
    operator delete(v100[1]);
  if (SHIBYTE(v100[0]) < 0)
    operator delete(v99[0]);
  if (SHIBYTE(v98) < 0)
    operator delete(*(void **)&v97[24]);
  if ((v97[23] & 0x80000000) != 0)
    operator delete(*(void **)v97);
  if (v107 < 0)
    operator delete(v106[1]);
  if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v108.__r_.__value_.__l.__data_);
}

void sub_1BF8A0900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a48 < 0)
    operator delete(__p);
  if (a54 < 0)
    operator delete(a49);
  _Unwind_Resume(a1);
}

void sub_1BF8A0DB0()
{
  JUMPOUT(0x1BF8A0D68);
}

std::string *siri::dialogengine::DialogCalendar::timeDescriptiveWithPrefix(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string *TimeDescriptive;
  void *__p[2];
  char v8;

  std::string::basic_string[abi:ne180100]<0>(__p, "prefix");
  TimeDescriptive = siri::dialogengine::GetTimeDescriptive(this, a2, (uint64_t)__p);
  if (v8 < 0)
    operator delete(__p[0]);
  return TimeDescriptive;
}

void sub_1BF8A0E18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *siri::dialogengine::DialogCalendar::timeDescriptiveWithPrefixFor(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string *TimeDescriptive;
  void *__p[2];
  char v8;

  std::string::basic_string[abi:ne180100]<0>(__p, "for");
  TimeDescriptive = siri::dialogengine::GetTimeDescriptive(this, a2, (uint64_t)__p);
  if (v8 < 0)
    operator delete(__p[0]);
  return TimeDescriptive;
}

void sub_1BF8A0E94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *siri::dialogengine::DialogCalendar::timeDescriptiveWithPrefixFrom(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string *TimeDescriptive;
  void *__p[2];
  char v8;

  std::string::basic_string[abi:ne180100]<0>(__p, "from");
  TimeDescriptive = siri::dialogengine::GetTimeDescriptive(this, a2, (uint64_t)__p);
  if (v8 < 0)
    operator delete(__p[0]);
  return TimeDescriptive;
}

void sub_1BF8A0F10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *siri::dialogengine::DialogCalendar::timeDescriptiveWithPrefixOn(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string *TimeDescriptive;
  void *__p[2];
  char v8;

  std::string::basic_string[abi:ne180100]<0>(__p, "on");
  TimeDescriptive = siri::dialogengine::GetTimeDescriptive(this, a2, (uint64_t)__p);
  if (v8 < 0)
    operator delete(__p[0]);
  return TimeDescriptive;
}

void sub_1BF8A0F8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *siri::dialogengine::DialogCalendar::timeDescriptiveWithPrefixUntil(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string *TimeDescriptive;
  void *__p[2];
  char v8;

  std::string::basic_string[abi:ne180100]<0>(__p, "until");
  TimeDescriptive = siri::dialogengine::GetTimeDescriptive(this, a2, (uint64_t)__p);
  if (v8 < 0)
    operator delete(__p[0]);
  return TimeDescriptive;
}

void sub_1BF8A1008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *siri::dialogengine::DialogCalendar::dateTimeDescriptive(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string *DateTimeDescriptive;
  void *__p[2];
  char v8;

  std::string::basic_string[abi:ne180100]<0>(__p, "none");
  DateTimeDescriptive = siri::dialogengine::GetDateTimeDescriptive(this, a2, (uint64_t)__p);
  if (v8 < 0)
    operator delete(__p[0]);
  return DateTimeDescriptive;
}

void sub_1BF8A1084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *siri::dialogengine::GetDateTimeDescriptive(siri::dialogengine *a1, siri::dialogengine::Context *a2, uint64_t a3)
{
  uint64_t i;
  void *OptionalNumberParameter;
  void *v8;
  const siri::dialogengine::TimeStamp *v9;
  _BOOL8 IsICUMidnight;
  const siri::dialogengine::TimeStamp *v11;
  const siri::dialogengine::TimeStamp *v12;
  _BOOL8 IsICUEndOfDay;
  int ICUDifferenceInDays;
  siri::dialogengine::Context *v15;
  const char *v16;
  BOOL v17;
  std::string *v18;
  int v19;
  BOOL v20;
  uint64_t v21;
  std::string::size_type v22;
  BOOL v23;
  char v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  std::string v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  std::string v34;
  uint64_t v35[3];
  std::string v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  void *v40[2];
  char v41;
  std::string v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50[2];
  void *v51[2];
  void *v52[2];
  __int128 v53;
  void *v54[2];
  void *v55[2];
  __int128 v56;
  std::string v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  void *__p[2];
  _QWORD v63[4];
  void *v64[2];
  void *v65[2];
  __int128 v66;
  _BYTE v67[32];
  __int128 v68;
  std::string v69;
  __int128 v70;
  _QWORD v71[3];
  __int128 v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(__p, "ja");
  std::string::basic_string[abi:ne180100]<0>(&v63[1], "ko");
  std::string::basic_string[abi:ne180100]<0>(v64, "tr");
  std::string::basic_string[abi:ne180100]<0>(&v65[1], "zh");
  std::string::basic_string[abi:ne180100]<0>(v67, "yue");
  std::set<std::string>::set[abi:ne180100](&v60, (const void **)__p, 5);
  for (i = 0; i != -120; i -= 24)
  {
    if ((char)v67[i + 23] < 0)
      operator delete(*(void **)&v67[i]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "secs");
  OptionalNumberParameter = siri::dialogengine::GetOptionalNumberParameter((const void **)__p, (uint64_t)a2);
  v8 = OptionalNumberParameter;
  if (SHIBYTE(v63[0]) < 0)
  {
    operator delete(__p[0]);
    if (v8)
    {
LABEL_7:
      siri::dialogengine::GetRequestTimeStamp(a1, a2, &v59);
      siri::dialogengine::GetNowTimeStamp(a1, a2, &v58);
      siri::dialogengine::GetRequestTimeStamp(a1, a2, __p);
      IsICUMidnight = siri::dialogengine::IsICUMidnight((siri::dialogengine *)__p, v9);
      if (SHIBYTE(v63[1]) < 0)
        operator delete(__p[1]);
      siri::dialogengine::GetRequestTimeStamp(a1, a2, __p);
      IsICUEndOfDay = siri::dialogengine::IsICUEndOfDay((siri::dialogengine *)__p, v11);
      if (SHIBYTE(v63[1]) < 0)
        operator delete(__p[1]);
      ICUDifferenceInDays = siri::dialogengine::GetICUDifferenceInDays((siri::dialogengine *)&v58, (const siri::dialogengine::TimeStamp *)&v59, v12);
      if ((siri::dialogengine::ShouldUse24HrDisplay(a1, v15) & 1) != 0)
      {
        v17 = 0;
      }
      else
      {
        siri::dialogengine::Context::GetLocale(a1, v16, (uint64_t)v50);
        siri::dialogengine::GetLocaleLanguage((std::string *)__p);
        if (SHIBYTE(v50[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v50[0].__r_.__value_.__l.__data_);
        v17 = &v61 != (char **)std::__tree<std::string>::find<std::string>((uint64_t)&v60, (const void **)__p);
        if (SHIBYTE(v63[0]) < 0)
          operator delete(__p[0]);
      }
      v56 = 0u;
      memset(&v57, 0, sizeof(v57));
      *(_OWORD *)v54 = 0u;
      *(_OWORD *)v55 = 0u;
      *(_OWORD *)v52 = 0u;
      v53 = 0u;
      *(_OWORD *)v51 = 0u;
      memset(v50, 0, sizeof(v50));
      v19 = *(char *)(a3 + 23);
      if (v19 < 0)
      {
        v21 = *(_QWORD *)a3;
        v22 = *(_QWORD *)(a3 + 8);
        if (v22 != 5 || (*(_DWORD *)v21 == 1769238133 ? (v23 = *(_BYTE *)(v21 + 4) == 108) : (v23 = 0), !v23))
        {
          std::string::__init_copy_ctor_external(&v42, (const std::string::value_type *)v21, v22);
          goto LABEL_34;
        }
      }
      else if (v19 != 5 || (*(_DWORD *)a3 == 1769238133 ? (v20 = *(_BYTE *)(a3 + 4) == 108) : (v20 = 0), !v20))
      {
        v42 = *(std::string *)a3;
        goto LABEL_34;
      }
      std::string::basic_string[abi:ne180100]<0>(&v42, "prefix");
LABEL_34:
      siri::dialogengine::GetTimeDescriptiveSpeakableString((uint64_t)&v43, a1, a2, (uint64_t)&v42, 1);
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v42.__r_.__value_.__l.__data_);
      if (ICUDifferenceInDays)
        v24 = 1;
      else
        v24 = v17;
      if ((v24 & 1) != 0)
      {
        v39 = 0;
        v37 = 0u;
        v38 = 0u;
        std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v37 + 1, "");
        LOBYTE(v39) = 0;
        siri::dialogengine::GetDateDescriptiveSpeakableString((uint64_t)__p, a1, a2, a3, (uint64_t *)&v37);
        std::string::operator=(v50, (const std::string *)__p);
        std::string::operator=(&v50[1], (const std::string *)&v63[1]);
        std::string::operator=((std::string *)v51, (const std::string *)v64);
        std::string::operator=((std::string *)&v52[1], (const std::string *)&v65[1]);
        std::string::operator=((std::string *)v54, (const std::string *)v67);
        std::string::operator=((std::string *)&v55[1], (const std::string *)&v67[24]);
        std::string::operator=(&v57, &v69);
        if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v69.__r_.__value_.__l.__data_);
        if (SHIBYTE(v68) < 0)
          operator delete(*(void **)&v67[24]);
        if ((v67[23] & 0x80000000) != 0)
          operator delete(*(void **)v67);
        if (SHIBYTE(v66) < 0)
          operator delete(v65[1]);
        if (SHIBYTE(v65[0]) < 0)
          operator delete(v64[0]);
        if (SHIBYTE(v63[3]) < 0)
          operator delete((void *)v63[1]);
        if (SHIBYTE(v63[0]) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v38) < 0)
        {
          v25 = (void *)*((_QWORD *)&v37 + 1);
LABEL_86:
          operator delete(v25);
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(v40, "prefix");
        siri::dialogengine::GetTimeDescriptiveSpeakableString((uint64_t)__p, a1, a2, (uint64_t)v40, 1);
        std::string::operator=(&v43, (const std::string *)__p);
        std::string::operator=(&v44, (const std::string *)&v63[1]);
        std::string::operator=(&v45, (const std::string *)v64);
        std::string::operator=(&v46, (const std::string *)&v65[1]);
        std::string::operator=(&v47, (const std::string *)v67);
        std::string::operator=(&v48, (const std::string *)&v67[24]);
        std::string::operator=(&v49, &v69);
        if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v69.__r_.__value_.__l.__data_);
        if (SHIBYTE(v68) < 0)
          operator delete(*(void **)&v67[24]);
        if ((v67[23] & 0x80000000) != 0)
          operator delete(*(void **)v67);
        if (SHIBYTE(v66) < 0)
          operator delete(v65[1]);
        if (SHIBYTE(v65[0]) < 0)
          operator delete(v64[0]);
        if (SHIBYTE(v63[3]) < 0)
          operator delete((void *)v63[1]);
        if (SHIBYTE(v63[0]) < 0)
          operator delete(__p[0]);
        if (v41 < 0)
          operator delete(v40[0]);
        siri::dialogengine::GetNonSpecificDateTimePeriodSpeakableString(a1, a2, a3, (uint64_t)__p);
        std::string::operator=(v50, (const std::string *)__p);
        std::string::operator=(&v50[1], (const std::string *)&v63[1]);
        std::string::operator=((std::string *)v51, (const std::string *)v64);
        std::string::operator=((std::string *)&v52[1], (const std::string *)&v65[1]);
        std::string::operator=((std::string *)v54, (const std::string *)v67);
        std::string::operator=((std::string *)&v55[1], (const std::string *)&v67[24]);
        std::string::operator=(&v57, &v69);
        if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v69.__r_.__value_.__l.__data_);
        if (SHIBYTE(v68) < 0)
          operator delete(*(void **)&v67[24]);
        if ((v67[23] & 0x80000000) != 0)
          operator delete(*(void **)v67);
        if (SHIBYTE(v66) < 0)
          operator delete(v65[1]);
        if (SHIBYTE(v65[0]) < 0)
          operator delete(v64[0]);
        if (SHIBYTE(v63[3]) < 0)
          operator delete((void *)v63[1]);
        if (SHIBYTE(v63[0]) < 0)
        {
          v25 = __p[0];
          goto LABEL_86;
        }
      }
      siri::dialogengine::SpeakableString::ToMultiplexedString((siri::dialogengine::SpeakableString *)v50, &v36);
      siri::dialogengine::CreateJSONStringVal((uint64_t)&v36, (uint64_t *)&v29);
      std::string::basic_string[abi:ne180100]<0>(__p, "dateDescriptive");
      *(_OWORD *)&v63[1] = *(_OWORD *)&v29.__r_.__value_.__l.__data_;
      *(_OWORD *)&v29.__r_.__value_.__l.__data_ = 0uLL;
      siri::dialogengine::SpeakableString::ToMultiplexedString((siri::dialogengine::SpeakableString *)&v43, &v34);
      siri::dialogengine::CreateJSONStringVal((uint64_t)&v34, v35);
      std::string::basic_string[abi:ne180100]<0>(&v63[3], "timeDescriptive");
      *(_OWORD *)v65 = *(_OWORD *)v35;
      *(_OWORD *)v35 = 0uLL;
      siri::dialogengine::CreateJSONStringVal(a3, (uint64_t *)&v33);
      std::string::basic_string[abi:ne180100]<0>(&v66, "dateTimeAffix");
      *(_OWORD *)&v67[8] = v33;
      v33 = 0uLL;
      siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)IsICUEndOfDay, (uint64_t *)&v32);
      std::string::basic_string[abi:ne180100]<0>(&v67[24], "isEndOfTheDay");
      *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v32;
      v32 = 0uLL;
      siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)IsICUMidnight, (uint64_t *)&v31);
      std::string::basic_string[abi:ne180100]<0>(&v69.__r_.__value_.__r.__words[2], "isMidnight");
      v70 = v31;
      v31 = 0uLL;
      siri::dialogengine::CreateJSONBoolVal(0, (uint64_t *)&v30);
      std::string::basic_string[abi:ne180100]<0>(v71, "usesNonSpecificDateTimePeriod");
      v72 = v30;
      v30 = 0uLL;
      std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100]((uint64_t)&v37, (const void **)__p, 6);
      v26 = 0;
      while (1)
      {
        std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v72 + v26 * 8);
        if (SHIBYTE(v71[v26 + 2]) < 0)
          operator delete((void *)v71[v26]);
        v26 -= 5;
        if (v26 == -30)
        {
          if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v34.__r_.__value_.__l.__data_);
          if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v36.__r_.__value_.__l.__data_);
          std::string::basic_string[abi:ne180100]<0>(&v36, "dateTime#dateTimeDescriptive");
          siri::dialogengine::ExecuteSharedCat(a1, (uint64_t)&v36, (const void ***)&v37, (uint64_t)__p);
          if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v36.__r_.__value_.__l.__data_);
          v27 = operator new();
          std::string::basic_string[abi:ne180100]<0>(&v36, "");
          if (SHIBYTE(v63[0]) < 0)
          {
            std::string::__init_copy_ctor_external(&v34, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
          }
          else
          {
            *(_OWORD *)&v34.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
            v34.__r_.__value_.__r.__words[2] = v63[0];
          }
          if (SHIBYTE(v63[3]) < 0)
            std::string::__init_copy_ctor_external(&v29, (const std::string::value_type *)v63[1], v63[2]);
          else
            v29 = *(std::string *)&v63[1];
          siri::dialogengine::VariableString::VariableString(v27, &v36, &v34, &v29);
        }
      }
    }
  }
  else if (OptionalNumberParameter)
  {
    goto LABEL_7;
  }
  v18 = (std::string *)operator new();
  std::string::basic_string[abi:ne180100]<0>(v50, "");
  v68 = 0u;
  memset(&v69, 0, sizeof(v69));
  memset(v67, 0, sizeof(v67));
  *(_OWORD *)v65 = 0u;
  v66 = 0u;
  *(_OWORD *)v64 = 0u;
  *(_OWORD *)__p = 0u;
  memset(v63, 0, sizeof(v63));
  siri::dialogengine::VariableString::VariableString(v18, v50, (const siri::dialogengine::SpeakableString *)__p);
  if (SHIBYTE(v50[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50[0].__r_.__value_.__l.__data_);
  std::__tree<std::string>::destroy((uint64_t)&v60, v61);
  return v18;
}

void sub_1BF8A1B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  siri::dialogengine::SpeakableString::~SpeakableString(&a63);
  if (SLOBYTE(STACK[0x277]) < 0)
    operator delete((void *)STACK[0x260]);
  if (SLOBYTE(STACK[0x297]) < 0)
    operator delete((void *)STACK[0x280]);
  std::__tree<std::string>::destroy((uint64_t)&STACK[0x298], (char *)STACK[0x2A0]);
  _Unwind_Resume(a1);
}

void sub_1BF8A1F24()
{
  unint64_t *v0;

  while (1)
  {
    if (*((char *)v0 - 1) < 0)
      operator delete((void *)*(v0 - 3));
    v0 -= 3;
    if (v0 == &STACK[0x2B0])
      JUMPOUT(0x1BF8A1F1CLL);
  }
}

uint64_t *std::set<std::string>::set[abi:ne180100](uint64_t *a1, const void **a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;

  a1[1] = 0;
  v4 = (uint64_t)(a1 + 1);
  a1[2] = 0;
  *a1 = (uint64_t)(a1 + 1);
  if (a3)
  {
    v6 = 24 * a3;
    do
    {
      std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(a1, v4, a2, (uint64_t)a2);
      a2 += 3;
      v6 -= 24;
    }
    while (v6);
  }
  return a1;
}

void sub_1BF8A1FB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

std::string *siri::dialogengine::DialogCalendar::dateTimeDescriptiveWithPrefix(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string *DateTimeDescriptive;
  void *__p[2];
  char v8;

  std::string::basic_string[abi:ne180100]<0>(__p, "prefix");
  DateTimeDescriptive = siri::dialogengine::GetDateTimeDescriptive(this, a2, (uint64_t)__p);
  if (v8 < 0)
    operator delete(__p[0]);
  return DateTimeDescriptive;
}

void sub_1BF8A202C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *siri::dialogengine::DialogCalendar::dateTimeDescriptiveWithPrefixFor(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string *DateTimeDescriptive;
  void *__p[2];
  char v8;

  std::string::basic_string[abi:ne180100]<0>(__p, "for");
  DateTimeDescriptive = siri::dialogengine::GetDateTimeDescriptive(this, a2, (uint64_t)__p);
  if (v8 < 0)
    operator delete(__p[0]);
  return DateTimeDescriptive;
}

void sub_1BF8A20A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *siri::dialogengine::DialogCalendar::dateTimeDescriptiveWithPrefixFrom(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string *DateTimeDescriptive;
  void *__p[2];
  char v8;

  std::string::basic_string[abi:ne180100]<0>(__p, "from");
  DateTimeDescriptive = siri::dialogengine::GetDateTimeDescriptive(this, a2, (uint64_t)__p);
  if (v8 < 0)
    operator delete(__p[0]);
  return DateTimeDescriptive;
}

void sub_1BF8A2124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *siri::dialogengine::DialogCalendar::dateTimeDescriptiveWithPrefixOn(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string *DateTimeDescriptive;
  void *__p[2];
  char v8;

  std::string::basic_string[abi:ne180100]<0>(__p, "on");
  DateTimeDescriptive = siri::dialogengine::GetDateTimeDescriptive(this, a2, (uint64_t)__p);
  if (v8 < 0)
    operator delete(__p[0]);
  return DateTimeDescriptive;
}

void sub_1BF8A21A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *siri::dialogengine::DialogCalendar::dateTimeDescriptiveWithPrefixUntil(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string *DateTimeDescriptive;
  void *__p[2];
  char v8;

  std::string::basic_string[abi:ne180100]<0>(__p, "until");
  DateTimeDescriptive = siri::dialogengine::GetDateTimeDescriptive(this, a2, (uint64_t)__p);
  if (v8 < 0)
    operator delete(__p[0]);
  return DateTimeDescriptive;
}

void sub_1BF8A221C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *siri::dialogengine::DialogCalendar::nonSpecificDateTimeDescriptive(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string *NonSpecificDateTimeDescriptive;
  void *__p[2];
  char v8;

  std::string::basic_string[abi:ne180100]<0>(__p, "none");
  NonSpecificDateTimeDescriptive = siri::dialogengine::GetNonSpecificDateTimeDescriptive(this, a2, (uint64_t)__p);
  if (v8 < 0)
    operator delete(__p[0]);
  return NonSpecificDateTimeDescriptive;
}

void sub_1BF8A2298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *siri::dialogengine::GetNonSpecificDateTimeDescriptive(siri::dialogengine *a1, siri::dialogengine::Context *a2, uint64_t a3)
{
  void *OptionalNumberParameter;
  void *v7;
  const siri::dialogengine::TimeStamp *v8;
  uint64_t v9;
  std::string::size_type size;
  uint64_t v11;
  unint64_t v12;
  const siri::dialogengine::TimeStamp *v13;
  _BOOL8 IsICUMidnight;
  const siri::dialogengine::TimeStamp *v15;
  _BOOL8 IsICUEndOfDay;
  uint64_t i;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::string *v36;
  void *v37;
  void *v38;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43[3];
  std::string v44;
  __int128 v45;
  __int128 v46;
  void *v47[2];
  __int128 v48;
  uint64_t v49;
  std::string v50;
  void *v51[2];
  unsigned __int8 v52;
  void *v53;
  uint64_t v54;
  unsigned __int8 v55;
  void *v56;
  char v57;
  void *v58;
  char v59;
  void *v60;
  char v61;
  void *v62;
  char v63;
  void *v64;
  char v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  void *__p[2];
  char v70;
  std::string v71;
  void *v72;
  uint64_t v73;
  unsigned __int8 v74;
  void *v75;
  char v76;
  void *v77;
  char v78;
  void *v79;
  char v80;
  void *v81;
  char v82;
  void *v83;
  char v84;
  void *v85[3];
  char v86;
  void *v87[3];
  char v88;
  void *v89[2];
  _QWORD v90[4];
  void *v91[2];
  void *v92[2];
  void *v93[6];
  __int128 v94;
  void *v95[2];
  uint64_t v96;
  __int128 v97;
  _QWORD v98[3];
  __int128 v99;
  uint64_t v100;

  v100 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(v89, "secs");
  OptionalNumberParameter = siri::dialogengine::GetOptionalNumberParameter((const void **)v89, (uint64_t)a2);
  v7 = OptionalNumberParameter;
  if (SHIBYTE(v90[0]) < 0)
  {
    operator delete(v89[0]);
    if (v7)
    {
LABEL_3:
      siri::dialogengine::GetRequestTimeStamp(a1, a2, v87);
      siri::dialogengine::GetNowTimeStamp(a1, a2, v85);
      if (siri::dialogengine::GetICUDifferenceInDays((siri::dialogengine *)v85, (const siri::dialogengine::TimeStamp *)v87, v8))
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "none");
        siri::dialogengine::GetNonSpecificTimePeriodSpeakableString(a1, (char *)a2, (uint64_t)__p, (uint64_t)&v71);
        if (v70 < 0)
          operator delete(__p[0]);
        BYTE2(v66) = 0;
        v67 = 0u;
        v68 = 0u;
        std::string::basic_string[abi:ne180100]<0>(&v67, "");
        BYTE8(v68) = 0;
        LOWORD(v66) = 1;
        siri::dialogengine::GetDateDescriptiveSpeakableString((uint64_t)v51, a1, a2, a3, &v66);
        v9 = v74;
        if ((v74 & 0x80u) != 0)
          v9 = v73;
        if (!v9)
        {
          size = HIBYTE(v71.__r_.__value_.__r.__words[2]);
          if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = v71.__r_.__value_.__l.__size_;
          if (!size)
            goto LABEL_135;
        }
        v11 = v55;
        if ((v55 & 0x80u) != 0)
          v11 = v54;
        if (v11)
          goto LABEL_18;
        v12 = v52;
        if ((v52 & 0x80u) != 0)
          v12 = (unint64_t)v51[1];
        if (v12)
        {
LABEL_18:
          siri::dialogengine::GetRequestTimeStamp(a1, a2, v89);
          IsICUMidnight = siri::dialogengine::IsICUMidnight((siri::dialogengine *)v89, v13);
          if (SHIBYTE(v90[1]) < 0)
            operator delete(v89[1]);
          siri::dialogengine::GetRequestTimeStamp(a1, a2, v89);
          IsICUEndOfDay = siri::dialogengine::IsICUEndOfDay((siri::dialogengine *)v89, v15);
          if (SHIBYTE(v90[1]) < 0)
            operator delete(v89[1]);
          siri::dialogengine::SpeakableString::ToMultiplexedString((siri::dialogengine::SpeakableString *)v51, &v50);
          siri::dialogengine::CreateJSONStringVal((uint64_t)&v50, (uint64_t *)&v46);
          std::string::basic_string[abi:ne180100]<0>(v89, "dateDescriptive");
          *(_OWORD *)&v90[1] = v46;
          v46 = 0uLL;
          siri::dialogengine::SpeakableString::ToMultiplexedString((siri::dialogengine::SpeakableString *)&v71, &v44);
          siri::dialogengine::CreateJSONStringVal((uint64_t)&v44, (uint64_t *)&v45);
          std::string::basic_string[abi:ne180100]<0>(&v90[3], "timeDescriptive");
          *(_OWORD *)v92 = v45;
          v45 = 0uLL;
          siri::dialogengine::CreateJSONStringVal(a3, v43);
          std::string::basic_string[abi:ne180100]<0>(v93, "dateTimeAffix");
          *(_OWORD *)&v93[3] = *(_OWORD *)v43;
          *(_OWORD *)v43 = 0uLL;
          siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)IsICUEndOfDay, (uint64_t *)&v42);
          std::string::basic_string[abi:ne180100]<0>(&v93[5], "isEndOfTheDay");
          *(_OWORD *)v95 = v42;
          v42 = 0uLL;
          siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)IsICUMidnight, (uint64_t *)&v41);
          std::string::basic_string[abi:ne180100]<0>(&v96, "isMidnight");
          v97 = v41;
          v41 = 0uLL;
          siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)1, (uint64_t *)&v40);
          std::string::basic_string[abi:ne180100]<0>(v98, "usesNonSpecificDateTimePeriod");
          v99 = v40;
          v40 = 0uLL;
          std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100]((uint64_t)v47, (const void **)v89, 6);
          for (i = 0; i != -30; i -= 5)
          {
            std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v99 + i * 8);
            if (SHIBYTE(v98[i + 2]) < 0)
              operator delete((void *)v98[i]);
          }
          v18 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
          if (*((_QWORD *)&v40 + 1))
          {
            v19 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
            do
              v20 = __ldaxr(v19);
            while (__stlxr(v20 - 1, v19));
            if (!v20)
            {
              ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
              std::__shared_weak_count::__release_weak(v18);
            }
          }
          v21 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
          if (*((_QWORD *)&v41 + 1))
          {
            v22 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
            do
              v23 = __ldaxr(v22);
            while (__stlxr(v23 - 1, v22));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
              std::__shared_weak_count::__release_weak(v21);
            }
          }
          v24 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
          if (*((_QWORD *)&v42 + 1))
          {
            v25 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
            }
          }
          v27 = (std::__shared_weak_count *)v43[1];
          if (v43[1])
          {
            v28 = (unint64_t *)(v43[1] + 8);
            do
              v29 = __ldaxr(v28);
            while (__stlxr(v29 - 1, v28));
            if (!v29)
            {
              ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
              std::__shared_weak_count::__release_weak(v27);
            }
          }
          v30 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
          if (*((_QWORD *)&v45 + 1))
          {
            v31 = (unint64_t *)(*((_QWORD *)&v45 + 1) + 8);
            do
              v32 = __ldaxr(v31);
            while (__stlxr(v32 - 1, v31));
            if (!v32)
            {
              ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
              std::__shared_weak_count::__release_weak(v30);
            }
          }
          if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v44.__r_.__value_.__l.__data_);
          v33 = (std::__shared_weak_count *)*((_QWORD *)&v46 + 1);
          if (*((_QWORD *)&v46 + 1))
          {
            v34 = (unint64_t *)(*((_QWORD *)&v46 + 1) + 8);
            do
              v35 = __ldaxr(v34);
            while (__stlxr(v35 - 1, v34));
            if (!v35)
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v33);
            }
          }
          if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v50.__r_.__value_.__l.__data_);
          std::string::basic_string[abi:ne180100]<0>(&v50, "dateTime#dateTimeDescriptive");
          siri::dialogengine::ExecuteSharedCat(a1, (uint64_t)&v50, (const void ***)v47, (uint64_t)v89);
          if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v50.__r_.__value_.__l.__data_);
          v36 = (std::string *)operator new();
          std::string::basic_string[abi:ne180100]<0>(&v50, "");
          siri::dialogengine::VariableString::VariableString(v36, &v50, (const siri::dialogengine::SpeakableString *)v89);
          if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v50.__r_.__value_.__l.__data_);
          if (SHIBYTE(v96) < 0)
            operator delete(v95[0]);
          if (SHIBYTE(v94) < 0)
            operator delete(v93[5]);
          if (SHIBYTE(v93[4]) < 0)
            operator delete(v93[2]);
          if (SHIBYTE(v93[1]) < 0)
            operator delete(v92[1]);
          if (SHIBYTE(v92[0]) < 0)
            operator delete(v91[0]);
          if (SHIBYTE(v90[3]) < 0)
            operator delete((void *)v90[1]);
          if (SHIBYTE(v90[0]) < 0)
            operator delete(v89[0]);
          std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy((_QWORD *)v47[1]);
        }
        else
        {
LABEL_135:
          v36 = (std::string *)operator new();
          std::string::basic_string[abi:ne180100]<0>(&v50, "");
          v49 = 0;
          *(_OWORD *)v47 = 0u;
          v48 = 0u;
          std::string::basic_string[abi:ne180100]<0>(&v47[1], "");
          LOBYTE(v49) = 0;
          siri::dialogengine::GetDateDescriptiveSpeakableString((uint64_t)v89, a1, a2, a3, (uint64_t *)v47);
          siri::dialogengine::VariableString::VariableString(v36, &v50, (const siri::dialogengine::SpeakableString *)v89);
          if (SHIBYTE(v96) < 0)
            operator delete(v95[0]);
          if (SHIBYTE(v94) < 0)
            operator delete(v93[5]);
          if (SHIBYTE(v93[4]) < 0)
            operator delete(v93[2]);
          if (SHIBYTE(v93[1]) < 0)
            operator delete(v92[1]);
          if (SHIBYTE(v92[0]) < 0)
            operator delete(v91[0]);
          if (SHIBYTE(v90[3]) < 0)
            operator delete((void *)v90[1]);
          if (SHIBYTE(v90[0]) < 0)
            operator delete(v89[0]);
          if (SHIBYTE(v48) < 0)
            operator delete(v47[1]);
          if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v50.__r_.__value_.__l.__data_);
        }
        if (v65 < 0)
          operator delete(v64);
        if (v63 < 0)
          operator delete(v62);
        if (v61 < 0)
          operator delete(v60);
        if (v59 < 0)
          operator delete(v58);
        if (v57 < 0)
          operator delete(v56);
        if ((char)v55 < 0)
          operator delete(v53);
        if ((char)v52 < 0)
          operator delete(v51[0]);
        if (SBYTE7(v68) < 0)
          operator delete((void *)v67);
        if (v84 < 0)
          operator delete(v83);
        if (v82 < 0)
          operator delete(v81);
        if (v80 < 0)
          operator delete(v79);
        if (v78 < 0)
          operator delete(v77);
        if (v76 < 0)
          operator delete(v75);
        if ((char)v74 < 0)
          operator delete(v72);
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
        {
          v37 = (void *)v71.__r_.__value_.__r.__words[0];
LABEL_128:
          operator delete(v37);
        }
      }
      else
      {
        siri::dialogengine::GetNonSpecificDateTimePeriodSpeakableString(a1, a2, a3, (uint64_t)v89);
        v36 = (std::string *)operator new();
        std::string::basic_string[abi:ne180100]<0>(&v71, "");
        siri::dialogengine::VariableString::VariableString(v36, &v71, (const siri::dialogengine::SpeakableString *)v89);
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v71.__r_.__value_.__l.__data_);
        if (SHIBYTE(v96) < 0)
          operator delete(v95[0]);
        if (SHIBYTE(v94) < 0)
          operator delete(v93[5]);
        if (SHIBYTE(v93[4]) < 0)
          operator delete(v93[2]);
        if (SHIBYTE(v93[1]) < 0)
          operator delete(v92[1]);
        if (SHIBYTE(v92[0]) < 0)
          operator delete(v91[0]);
        if (SHIBYTE(v90[3]) < 0)
          operator delete((void *)v90[1]);
        if (SHIBYTE(v90[0]) < 0)
        {
          v37 = v89[0];
          goto LABEL_128;
        }
      }
      if (v86 < 0)
        operator delete(v85[1]);
      if (v88 < 0)
      {
        v38 = v87[1];
        goto LABEL_133;
      }
      return v36;
    }
  }
  else if (OptionalNumberParameter)
  {
    goto LABEL_3;
  }
  v36 = (std::string *)operator new();
  std::string::basic_string[abi:ne180100]<0>(&v71, "");
  v96 = 0;
  v94 = 0u;
  *(_OWORD *)v95 = 0u;
  *(_OWORD *)v92 = 0u;
  memset(v93, 0, sizeof(v93));
  *(_OWORD *)v91 = 0u;
  *(_OWORD *)v89 = 0u;
  memset(v90, 0, sizeof(v90));
  siri::dialogengine::VariableString::VariableString(v36, &v71, (const siri::dialogengine::SpeakableString *)v89);
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
  {
    v38 = (void *)v71.__r_.__value_.__r.__words[0];
LABEL_133:
    operator delete(v38);
  }
  return v36;
}

void sub_1BF8A2BFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,int a63)
{
  char a66;
  void *a71;
  uint64_t v71;

  siri::dialogengine::SpeakableString::~SpeakableString((void **)&STACK[0x290]);
  if (a31 < 0)
    operator delete(__p);
  if (a38 < 0)
    operator delete(a33);
  MEMORY[0x1C3B8D890](v71, 0x10B3C40D3060B95);
  siri::dialogengine::SpeakableString::~SpeakableString(&a39);
  if (a66 < 0)
    operator delete(a61);
  siri::dialogengine::SpeakableString::~SpeakableString(&a71);
  if (SLOBYTE(STACK[0x26F]) < 0)
    operator delete((void *)STACK[0x258]);
  if (SLOBYTE(STACK[0x28F]) < 0)
    operator delete((void *)STACK[0x278]);
  _Unwind_Resume(a1);
}

std::string *siri::dialogengine::DialogCalendar::nonSpecificDateTimeDescriptiveWithPrefix(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string *NonSpecificDateTimeDescriptive;
  void *__p[2];
  char v8;

  std::string::basic_string[abi:ne180100]<0>(__p, "prefix");
  NonSpecificDateTimeDescriptive = siri::dialogengine::GetNonSpecificDateTimeDescriptive(this, a2, (uint64_t)__p);
  if (v8 < 0)
    operator delete(__p[0]);
  return NonSpecificDateTimeDescriptive;
}

void sub_1BF8A2FA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *siri::dialogengine::DialogCalendar::nonSpecificDateTimeDescriptiveWithPrefixOn(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string *NonSpecificDateTimeDescriptive;
  void *__p[2];
  char v8;

  std::string::basic_string[abi:ne180100]<0>(__p, "on");
  NonSpecificDateTimeDescriptive = siri::dialogengine::GetNonSpecificDateTimeDescriptive(this, a2, (uint64_t)__p);
  if (v8 < 0)
    operator delete(__p[0]);
  return NonSpecificDateTimeDescriptive;
}

void sub_1BF8A301C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::DialogCalendar::monthName(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v5;
  const char *v6;
  std::string __p;
  void *v9[2];
  char v10;
  void *v11[2];
  char v12;
  _QWORD v13[3];
  char v14;

  siri::dialogengine::GetRequestTimeStamp(this, a2, v13);
  if (v13[0] == 0x7FFFFFFFFFFFFFFFLL)
  {
    v5 = 0;
  }
  else
  {
    siri::dialogengine::GetDateFormatterOptions(v11, a2);
    siri::dialogengine::Context::GetLocaleWithUserCalendar(this, v6, (uint64_t)&__p);
    siri::dialogengine::GetICUMonthName(v13, &__p.__r_.__value_.__l.__data_, (uint64_t *)v11, v9);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v5 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    siri::dialogengine::VariableString::VariableString(v5, &__p, (uint64_t)v9);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v10 < 0)
      operator delete(v9[0]);
    if (v12 < 0)
      operator delete(v11[0]);
  }
  if (v14 < 0)
    operator delete((void *)v13[1]);
  return v5;
}

void sub_1BF8A313C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;
  uint64_t v27;

  if (a14 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8D890](v26, 0x10B3C40D3060B95);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  if (*(char *)(v27 - 17) < 0)
    operator delete(*(void **)(v27 - 40));
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogCalendar::dayName(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v5;
  const char *v6;
  std::string __p;
  void *v9[2];
  char v10;
  void *v11[2];
  char v12;
  _QWORD v13[3];
  char v14;

  siri::dialogengine::GetRequestTimeStamp(this, a2, v13);
  if (v13[0] == 0x7FFFFFFFFFFFFFFFLL)
  {
    v5 = 0;
  }
  else
  {
    siri::dialogengine::GetDateFormatterOptions(v11, a2);
    siri::dialogengine::Context::GetLocaleWithUserCalendar(this, v6, (uint64_t)&__p);
    siri::dialogengine::GetICUDayName(v13, &__p.__r_.__value_.__l.__data_, (uint64_t *)v11, v9);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v5 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    siri::dialogengine::VariableString::VariableString(v5, &__p, (uint64_t)v9);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v10 < 0)
      operator delete(v9[0]);
    if (v12 < 0)
      operator delete(v11[0]);
  }
  if (v14 < 0)
    operator delete((void *)v13[1]);
  return v5;
}

void sub_1BF8A32D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;
  uint64_t v27;

  if (a14 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8D890](v26, 0x10B3C40D3060B95);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  if (*(char *)(v27 - 17) < 0)
    operator delete(*(void **)(v27 - 40));
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogCalendar::timeDescriptiveAbsolute(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  siri::dialogengine::Context *v4;
  const char *v5;
  uint64_t v6;
  void *__p[2];
  char v9;
  std::string v10;
  void *v11[2];
  char v12;
  int v13;
  char v14;
  _QWORD v15[3];
  char v16;

  siri::dialogengine::GetRequestTimeStamp(this, a2, v15);
  v14 = 1;
  v13 = siri::dialogengine::ShouldUse24HrDisplay(this, v4) ^ 1;
  siri::dialogengine::Context::GetLocaleWithUserCalendar(this, v5, (uint64_t)v11);
  v6 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&v10, "");
  siri::dialogengine::GetICUDefaultDisplayTime(v15, (uint64_t)v11, (uint64_t)&v13, __p);
  siri::dialogengine::VariableString::VariableString(v6, &v10, (uint64_t)__p);
  if (v9 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  if (v12 < 0)
    operator delete(v11[0]);
  if (v16 < 0)
    operator delete((void *)v15[1]);
  return v6;
}

void sub_1BF8A3454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;
  uint64_t v27;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  MEMORY[0x1C3B8D890](v26, 0x10B3C40D3060B95);
  if (a26 < 0)
    operator delete(a21);
  if (*(char *)(v27 - 17) < 0)
    operator delete(*(void **)(v27 - 40));
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogCalendar::timeDescriptiveAbsoluteNoMeridiem(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  siri::dialogengine::Context *v4;
  const char *v5;
  uint64_t v6;
  void *__p[2];
  char v9;
  std::string v10;
  void *v11[2];
  char v12;
  int v13;
  char v14;
  _QWORD v15[3];
  char v16;

  siri::dialogengine::GetRequestTimeStamp(this, a2, v15);
  v14 = 0;
  v13 = siri::dialogengine::ShouldUse24HrDisplay(this, v4) ^ 1;
  siri::dialogengine::Context::GetLocaleWithUserCalendar(this, v5, (uint64_t)v11);
  v6 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&v10, "");
  siri::dialogengine::GetICUDefaultDisplayTime(v15, (uint64_t)v11, (uint64_t)&v13, __p);
  siri::dialogengine::VariableString::VariableString(v6, &v10, (uint64_t)__p);
  if (v9 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  if (v12 < 0)
    operator delete(v11[0]);
  if (v16 < 0)
    operator delete((void *)v15[1]);
  return v6;
}

void sub_1BF8A35BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;
  uint64_t v27;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  MEMORY[0x1C3B8D890](v26, 0x10B3C40D3060B95);
  if (a26 < 0)
    operator delete(a21);
  if (*(char *)(v27 - 17) < 0)
    operator delete(*(void **)(v27 - 40));
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogCalendar::daysFromToday(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v5;
  const siri::dialogengine::TimeStamp *v6;
  int ICUDifferenceInDays;
  std::string __p;
  void *v10[3];
  char v11;
  _QWORD v12[3];
  char v13;

  siri::dialogengine::GetRequestTimeStamp(this, a2, v12);
  if (v12[0] == 0x7FFFFFFFFFFFFFFFLL)
  {
    v5 = 0;
  }
  else
  {
    siri::dialogengine::GetNowTimeStamp(this, a2, v10);
    v5 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    ICUDifferenceInDays = siri::dialogengine::GetICUDifferenceInDays((siri::dialogengine *)v10, (const siri::dialogengine::TimeStamp *)v12, v6);
    siri::dialogengine::VariableNumber::VariableNumber(v5, &__p, (double)ICUDifferenceInDays);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v11 < 0)
      operator delete(v10[1]);
  }
  if (v13 < 0)
    operator delete((void *)v12[1]);
  return v5;
}

void sub_1BF8A3718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;
  uint64_t v23;

  MEMORY[0x1C3B8D890](v22, 0x10B3C4030AE2ACELL);
  if (a22 < 0)
    operator delete(__p);
  if (*(char *)(v23 - 17) < 0)
    operator delete(*(void **)(v23 - 40));
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogCalendar::minuteOfHour(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v3;
  const siri::dialogengine::TimeStamp *v4;
  int ICUMinuteOfHour;
  std::string __p;
  _QWORD v8[3];
  char v9;

  siri::dialogengine::GetRequestTimeStamp(this, a2, v8);
  if (v8[0] == 0x7FFFFFFFFFFFFFFFLL)
  {
    v3 = 0;
  }
  else
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    ICUMinuteOfHour = siri::dialogengine::GetICUMinuteOfHour((siri::dialogengine *)v8, v4);
    siri::dialogengine::VariableNumber::VariableNumber(v3, &__p, (double)ICUMinuteOfHour);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v9 < 0)
    operator delete((void *)v8[1]);
  return v3;
}

void sub_1BF8A382C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  MEMORY[0x1C3B8D890](v22, 0x10B3C4030AE2ACELL);
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogCalendar::hourOfDay(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v3;
  const siri::dialogengine::TimeStamp *v4;
  int ICUHour24;
  std::string __p;
  _QWORD v8[3];
  char v9;

  siri::dialogengine::GetRequestTimeStamp(this, a2, v8);
  if (v8[0] == 0x7FFFFFFFFFFFFFFFLL)
  {
    v3 = 0;
  }
  else
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    ICUHour24 = siri::dialogengine::GetICUHour24((siri::dialogengine *)v8, v4);
    siri::dialogengine::VariableNumber::VariableNumber(v3, &__p, (double)ICUHour24);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v9 < 0)
    operator delete((void *)v8[1]);
  return v3;
}

void sub_1BF8A3928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  MEMORY[0x1C3B8D890](v22, 0x10B3C4030AE2ACELL);
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogCalendar::month(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v3;
  const siri::dialogengine::TimeStamp *v4;
  int ICUMonth;
  std::string __p;
  _QWORD v8[3];
  char v9;

  siri::dialogengine::GetRequestTimeStamp(this, a2, v8);
  if (v8[0] == 0x7FFFFFFFFFFFFFFFLL)
  {
    v3 = 0;
  }
  else
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    ICUMonth = siri::dialogengine::GetICUMonth((siri::dialogengine *)v8, v4);
    siri::dialogengine::VariableNumber::VariableNumber(v3, &__p, (double)ICUMonth);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v9 < 0)
    operator delete((void *)v8[1]);
  return v3;
}

void sub_1BF8A3A24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  MEMORY[0x1C3B8D890](v22, 0x10B3C4030AE2ACELL);
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogCalendar::dayOfMonth(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v3;
  const siri::dialogengine::TimeStamp *v4;
  int ICUDayOfMonth;
  std::string __p;
  _QWORD v8[3];
  char v9;

  siri::dialogengine::GetRequestTimeStamp(this, a2, v8);
  if (v8[0] == 0x7FFFFFFFFFFFFFFFLL)
  {
    v3 = 0;
  }
  else
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    ICUDayOfMonth = siri::dialogengine::GetICUDayOfMonth((siri::dialogengine *)v8, v4);
    siri::dialogengine::VariableNumber::VariableNumber(v3, &__p, (double)ICUDayOfMonth);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v9 < 0)
    operator delete((void *)v8[1]);
  return v3;
}

void sub_1BF8A3B20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  MEMORY[0x1C3B8D890](v22, 0x10B3C4030AE2ACELL);
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogCalendar::year(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v3;
  const siri::dialogengine::TimeStamp *v4;
  int ICUYear;
  std::string __p;
  _QWORD v8[3];
  char v9;

  siri::dialogengine::GetRequestTimeStamp(this, a2, v8);
  if (v8[0] == 0x7FFFFFFFFFFFFFFFLL)
  {
    v3 = 0;
  }
  else
  {
    v3 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    ICUYear = siri::dialogengine::GetICUYear((siri::dialogengine *)v8, v4);
    siri::dialogengine::VariableNumber::VariableNumber(v3, &__p, (double)ICUYear);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v9 < 0)
    operator delete((void *)v8[1]);
  return v3;
}

void sub_1BF8A3C1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  MEMORY[0x1C3B8D890](v22, 0x10B3C4030AE2ACELL);
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogCalendar::isCurrentYear(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v5;
  void *size;
  const siri::dialogengine::TimeStamp *v7;
  int ICUYear;
  const siri::dialogengine::TimeStamp *v9;
  int v10;
  std::string __p;
  std::string v13;
  char v14;
  _QWORD v15[3];
  char v16;

  siri::dialogengine::GetRequestTimeStamp(this, a2, v15);
  if (v15[0] == 0x7FFFFFFFFFFFFFFFLL)
  {
    v5 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&v13, "");
    siri::dialogengine::VariableBoolean::VariableBoolean(v5, &v13, 0);
    if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_9;
    size = (void *)v13.__r_.__value_.__r.__words[0];
    goto LABEL_8;
  }
  siri::dialogengine::GetNowTimeStamp(this, a2, &v13);
  ICUYear = siri::dialogengine::GetICUYear((siri::dialogengine *)&v13, v7);
  v10 = siri::dialogengine::GetICUYear((siri::dialogengine *)v15, v9);
  v5 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::dialogengine::VariableBoolean::VariableBoolean(v5, &__p, ICUYear == v10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v14 < 0)
  {
    size = (void *)v13.__r_.__value_.__l.__size_;
LABEL_8:
    operator delete(size);
  }
LABEL_9:
  if (v16 < 0)
    operator delete((void *)v15[1]);
  return v5;
}

void sub_1BF8A3DA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8D890](v32, 0x10B3C408E4F17DDLL);
  if (a25 < 0)
    operator delete(a17);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogCalendar::isFuture(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v5;
  void *size;
  const siri::dialogengine::TimeStamp *v7;
  int ICUInterval;
  std::string __p;
  std::string v11;
  char v12;
  _QWORD v13[3];
  char v14;

  siri::dialogengine::GetRequestTimeStamp(this, a2, v13);
  if (v13[0] == 0x7FFFFFFFFFFFFFFFLL)
  {
    v5 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&v11, "");
    siri::dialogengine::VariableBoolean::VariableBoolean(v5, &v11, 0);
    if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_9;
    size = (void *)v11.__r_.__value_.__r.__words[0];
    goto LABEL_8;
  }
  siri::dialogengine::GetNowTimeStamp(this, a2, &v11);
  ICUInterval = siri::dialogengine::GetICUInterval((siri::dialogengine *)&v11, (const siri::dialogengine::TimeStamp *)v13, v7);
  v5 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::dialogengine::VariableBoolean::VariableBoolean(v5, &__p, ICUInterval > 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v12 < 0)
  {
    size = (void *)v11.__r_.__value_.__l.__size_;
LABEL_8:
    operator delete(size);
  }
LABEL_9:
  if (v14 < 0)
    operator delete((void *)v13[1]);
  return v5;
}

void sub_1BF8A3F68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;
  uint64_t v26;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8D890](v25, 0x10B3C408E4F17DDLL);
  if (a25 < 0)
    operator delete(a17);
  if (*(char *)(v26 - 17) < 0)
    operator delete(*(void **)(v26 - 40));
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogCalendar::isPast(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v5;
  void *size;
  const siri::dialogengine::TimeStamp *v7;
  int ICUInterval;
  std::string __p;
  std::string v11;
  char v12;
  _QWORD v13[3];
  char v14;

  siri::dialogengine::GetRequestTimeStamp(this, a2, v13);
  if (v13[0] == 0x7FFFFFFFFFFFFFFFLL)
  {
    v5 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&v11, "");
    siri::dialogengine::VariableBoolean::VariableBoolean(v5, &v11, 0);
    if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_9;
    size = (void *)v11.__r_.__value_.__r.__words[0];
    goto LABEL_8;
  }
  siri::dialogengine::GetNowTimeStamp(this, a2, &v11);
  ICUInterval = siri::dialogengine::GetICUInterval((siri::dialogengine *)&v11, (const siri::dialogengine::TimeStamp *)v13, v7);
  v5 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::dialogengine::VariableBoolean::VariableBoolean(v5, &__p, ICUInterval < 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v12 < 0)
  {
    size = (void *)v11.__r_.__value_.__l.__size_;
LABEL_8:
    operator delete(size);
  }
LABEL_9:
  if (v14 < 0)
    operator delete((void *)v13[1]);
  return v5;
}

void sub_1BF8A412C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;
  uint64_t v26;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8D890](v25, 0x10B3C408E4F17DDLL);
  if (a25 < 0)
    operator delete(a17);
  if (*(char *)(v26 - 17) < 0)
    operator delete(*(void **)(v26 - 40));
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogCalendar::withinNextWeek(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v5;
  void *size;
  const siri::dialogengine::TimeStamp *v7;
  unsigned int ICUDifferenceInDays;
  std::string __p;
  std::string v11;
  char v12;
  _QWORD v13[3];
  char v14;

  siri::dialogengine::GetRequestTimeStamp(this, a2, v13);
  if (v13[0] == 0x7FFFFFFFFFFFFFFFLL)
  {
    v5 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&v11, "");
    siri::dialogengine::VariableBoolean::VariableBoolean(v5, &v11, 0);
    if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_9;
    size = (void *)v11.__r_.__value_.__r.__words[0];
    goto LABEL_8;
  }
  siri::dialogengine::GetNowTimeStamp(this, a2, &v11);
  ICUDifferenceInDays = siri::dialogengine::GetICUDifferenceInDays((siri::dialogengine *)&v11, (const siri::dialogengine::TimeStamp *)v13, v7);
  v5 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::dialogengine::VariableBoolean::VariableBoolean(v5, &__p, ICUDifferenceInDays < 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v12 < 0)
  {
    size = (void *)v11.__r_.__value_.__l.__size_;
LABEL_8:
    operator delete(size);
  }
LABEL_9:
  if (v14 < 0)
    operator delete((void *)v13[1]);
  return v5;
}

void sub_1BF8A42F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;
  uint64_t v26;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8D890](v25, 0x10B3C408E4F17DDLL);
  if (a25 < 0)
    operator delete(a17);
  if (*(char *)(v26 - 17) < 0)
    operator delete(*(void **)(v26 - 40));
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogCalendar::withinPastWeek(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v5;
  void *size;
  const siri::dialogengine::TimeStamp *v7;
  int ICUDifferenceInDays;
  std::string __p;
  std::string v11;
  char v12;
  _QWORD v13[3];
  char v14;

  siri::dialogengine::GetRequestTimeStamp(this, a2, v13);
  if (v13[0] == 0x7FFFFFFFFFFFFFFFLL)
  {
    v5 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&v11, "");
    siri::dialogengine::VariableBoolean::VariableBoolean(v5, &v11, 0);
    if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_9;
    size = (void *)v11.__r_.__value_.__r.__words[0];
    goto LABEL_8;
  }
  siri::dialogengine::GetNowTimeStamp(this, a2, &v11);
  ICUDifferenceInDays = siri::dialogengine::GetICUDifferenceInDays((siri::dialogengine *)&v11, (const siri::dialogengine::TimeStamp *)v13, v7);
  v5 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::dialogengine::VariableBoolean::VariableBoolean(v5, &__p, (ICUDifferenceInDays + 7) < 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v12 < 0)
  {
    size = (void *)v11.__r_.__value_.__l.__size_;
LABEL_8:
    operator delete(size);
  }
LABEL_9:
  if (v14 < 0)
    operator delete((void *)v13[1]);
  return v5;
}

void sub_1BF8A44C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;
  uint64_t v26;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8D890](v25, 0x10B3C408E4F17DDLL);
  if (a25 < 0)
    operator delete(a17);
  if (*(char *)(v26 - 17) < 0)
    operator delete(*(void **)(v26 - 40));
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogCalendar::isToday(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v5;
  void *size;
  const siri::dialogengine::TimeStamp *v7;
  char v8;
  std::string __p;
  std::string v11;
  char v12;
  _QWORD v13[3];
  char v14;

  siri::dialogengine::GetRequestTimeStamp(this, a2, v13);
  if (v13[0] == 0x7FFFFFFFFFFFFFFFLL)
  {
    v5 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&v11, "");
    siri::dialogengine::VariableBoolean::VariableBoolean(v5, &v11, 0);
    if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_9;
    size = (void *)v11.__r_.__value_.__r.__words[0];
    goto LABEL_8;
  }
  siri::dialogengine::GetNowTimeStamp(this, a2, &v11);
  v5 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  v8 = siri::dialogengine::GetICUDifferenceInDays((siri::dialogengine *)&v11, (const siri::dialogengine::TimeStamp *)v13, v7) == 0;
  siri::dialogengine::VariableBoolean::VariableBoolean(v5, &__p, v8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v12 < 0)
  {
    size = (void *)v11.__r_.__value_.__l.__size_;
LABEL_8:
    operator delete(size);
  }
LABEL_9:
  if (v14 < 0)
    operator delete((void *)v13[1]);
  return v5;
}

void sub_1BF8A4684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, void *__p, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;
  uint64_t v26;

  MEMORY[0x1C3B8D890](v25, 0x10B3C408E4F17DDLL);
  if (a25 < 0)
    operator delete(__p);
  if (*(char *)(v26 - 17) < 0)
    operator delete(*(void **)(v26 - 40));
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogCalendar::isTomorrow(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v5;
  void *size;
  const siri::dialogengine::TimeStamp *v7;
  char v8;
  std::string __p;
  std::string v11;
  char v12;
  _QWORD v13[3];
  char v14;

  siri::dialogengine::GetRequestTimeStamp(this, a2, v13);
  if (v13[0] == 0x7FFFFFFFFFFFFFFFLL)
  {
    v5 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&v11, "");
    siri::dialogengine::VariableBoolean::VariableBoolean(v5, &v11, 0);
    if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_9;
    size = (void *)v11.__r_.__value_.__r.__words[0];
    goto LABEL_8;
  }
  siri::dialogengine::GetNowTimeStamp(this, a2, &v11);
  v5 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  v8 = siri::dialogengine::GetICUDifferenceInDays((siri::dialogengine *)&v11, (const siri::dialogengine::TimeStamp *)v13, v7) == 1;
  siri::dialogengine::VariableBoolean::VariableBoolean(v5, &__p, v8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v12 < 0)
  {
    size = (void *)v11.__r_.__value_.__l.__size_;
LABEL_8:
    operator delete(size);
  }
LABEL_9:
  if (v14 < 0)
    operator delete((void *)v13[1]);
  return v5;
}

void sub_1BF8A4848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, void *__p, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;
  uint64_t v26;

  MEMORY[0x1C3B8D890](v25, 0x10B3C408E4F17DDLL);
  if (a25 < 0)
    operator delete(__p);
  if (*(char *)(v26 - 17) < 0)
    operator delete(*(void **)(v26 - 40));
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogCalendar::isYesterday(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v5;
  void *size;
  const siri::dialogengine::TimeStamp *v7;
  char v8;
  std::string __p;
  std::string v11;
  char v12;
  _QWORD v13[3];
  char v14;

  siri::dialogengine::GetRequestTimeStamp(this, a2, v13);
  if (v13[0] == 0x7FFFFFFFFFFFFFFFLL)
  {
    v5 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&v11, "");
    siri::dialogengine::VariableBoolean::VariableBoolean(v5, &v11, 0);
    if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_9;
    size = (void *)v11.__r_.__value_.__r.__words[0];
    goto LABEL_8;
  }
  siri::dialogengine::GetNowTimeStamp(this, a2, &v11);
  v5 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  v8 = siri::dialogengine::GetICUDifferenceInDays((siri::dialogengine *)&v11, (const siri::dialogengine::TimeStamp *)v13, v7) == -1;
  siri::dialogengine::VariableBoolean::VariableBoolean(v5, &__p, v8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v12 < 0)
  {
    size = (void *)v11.__r_.__value_.__l.__size_;
LABEL_8:
    operator delete(size);
  }
LABEL_9:
  if (v14 < 0)
    operator delete((void *)v13[1]);
  return v5;
}

void sub_1BF8A4A0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, void *__p, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;
  uint64_t v26;

  MEMORY[0x1C3B8D890](v25, 0x10B3C408E4F17DDLL);
  if (a25 < 0)
    operator delete(__p);
  if (*(char *)(v26 - 17) < 0)
    operator delete(*(void **)(v26 - 40));
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogCalendar::isThisWeek(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v5;
  void *size;
  char v7;
  std::string __p;
  std::string v10;
  char v11;
  uint64_t v12[3];
  char v13;
  std::string v14;

  siri::dialogengine::Context::GetDeviceLocale(this, &v14);
  siri::dialogengine::GetRequestTimeStamp(this, a2, v12);
  if (v12[0] == 0x7FFFFFFFFFFFFFFFLL)
  {
    v5 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&v10, "");
    siri::dialogengine::VariableBoolean::VariableBoolean(v5, &v10, 0);
    if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_9;
    size = (void *)v10.__r_.__value_.__r.__words[0];
    goto LABEL_8;
  }
  siri::dialogengine::GetNowTimeStamp(this, a2, &v10);
  v5 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  v7 = siri::dialogengine::GetICUDifferenceInWeeks((uint64_t *)&v10, v12) == 0;
  siri::dialogengine::VariableBoolean::VariableBoolean(v5, &__p, v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v11 < 0)
  {
    size = (void *)v10.__r_.__value_.__l.__size_;
LABEL_8:
    operator delete(size);
  }
LABEL_9:
  if (v13 < 0)
    operator delete((void *)v12[1]);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return v5;
}

void sub_1BF8A4BF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, void *__p, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;
  uint64_t v32;

  MEMORY[0x1C3B8D890](v31, 0x10B3C408E4F17DDLL);
  if (a24 < 0)
    operator delete(__p);
  if (a31 < 0)
    operator delete(a26);
  if (*(char *)(v32 - 17) < 0)
    operator delete(*(void **)(v32 - 40));
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogCalendar::isThisMonth(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v5;
  void *size;
  const siri::dialogengine::TimeStamp *v7;
  char v8;
  std::string __p;
  std::string v11;
  char v12;
  _QWORD v13[3];
  char v14;

  siri::dialogengine::GetRequestTimeStamp(this, a2, v13);
  if (v13[0] == 0x7FFFFFFFFFFFFFFFLL)
  {
    v5 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&v11, "");
    siri::dialogengine::VariableBoolean::VariableBoolean(v5, &v11, 0);
    if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_9;
    size = (void *)v11.__r_.__value_.__r.__words[0];
    goto LABEL_8;
  }
  siri::dialogengine::GetNowTimeStamp(this, a2, &v11);
  v5 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  v8 = siri::dialogengine::GetICUDifferenceInMonths((siri::dialogengine *)&v11, (const siri::dialogengine::TimeStamp *)v13, v7) == 0;
  siri::dialogengine::VariableBoolean::VariableBoolean(v5, &__p, v8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v12 < 0)
  {
    size = (void *)v11.__r_.__value_.__l.__size_;
LABEL_8:
    operator delete(size);
  }
LABEL_9:
  if (v14 < 0)
    operator delete((void *)v13[1]);
  return v5;
}

void sub_1BF8A4DD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, void *__p, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;
  uint64_t v26;

  MEMORY[0x1C3B8D890](v25, 0x10B3C408E4F17DDLL);
  if (a25 < 0)
    operator delete(__p);
  if (*(char *)(v26 - 17) < 0)
    operator delete(*(void **)(v26 - 40));
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogCalendar::isThisYear(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v5;
  void *size;
  const siri::dialogengine::TimeStamp *v7;
  char v8;
  std::string __p;
  std::string v11;
  char v12;
  _QWORD v13[3];
  char v14;

  siri::dialogengine::GetRequestTimeStamp(this, a2, v13);
  if (v13[0] == 0x7FFFFFFFFFFFFFFFLL)
  {
    v5 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&v11, "");
    siri::dialogengine::VariableBoolean::VariableBoolean(v5, &v11, 0);
    if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_9;
    size = (void *)v11.__r_.__value_.__r.__words[0];
    goto LABEL_8;
  }
  siri::dialogengine::GetNowTimeStamp(this, a2, &v11);
  v5 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  v8 = siri::dialogengine::GetICUDifferenceInYears((siri::dialogengine *)&v11, (const siri::dialogengine::TimeStamp *)v13, v7) == 0;
  siri::dialogengine::VariableBoolean::VariableBoolean(v5, &__p, v8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v12 < 0)
  {
    size = (void *)v11.__r_.__value_.__l.__size_;
LABEL_8:
    operator delete(size);
  }
LABEL_9:
  if (v14 < 0)
    operator delete((void *)v13[1]);
  return v5;
}

void sub_1BF8A4F94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, void *__p, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;
  uint64_t v26;

  MEMORY[0x1C3B8D890](v25, 0x10B3C408E4F17DDLL);
  if (a25 < 0)
    operator delete(__p);
  if (*(char *)(v26 - 17) < 0)
    operator delete(*(void **)(v26 - 40));
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogCalendar::isLastWeek(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v5;
  void *size;
  char v7;
  std::string __p;
  std::string v10;
  char v11;
  uint64_t v12[3];
  char v13;
  std::string v14;

  siri::dialogengine::Context::GetDeviceLocale(this, &v14);
  siri::dialogengine::GetRequestTimeStamp(this, a2, v12);
  if (v12[0] == 0x7FFFFFFFFFFFFFFFLL)
  {
    v5 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&v10, "");
    siri::dialogengine::VariableBoolean::VariableBoolean(v5, &v10, 0);
    if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_9;
    size = (void *)v10.__r_.__value_.__r.__words[0];
    goto LABEL_8;
  }
  siri::dialogengine::GetNowTimeStamp(this, a2, &v10);
  v5 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  v7 = siri::dialogengine::GetICUDifferenceInWeeks((uint64_t *)&v10, v12) == -1;
  siri::dialogengine::VariableBoolean::VariableBoolean(v5, &__p, v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v11 < 0)
  {
    size = (void *)v10.__r_.__value_.__l.__size_;
LABEL_8:
    operator delete(size);
  }
LABEL_9:
  if (v13 < 0)
    operator delete((void *)v12[1]);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return v5;
}

void sub_1BF8A517C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, void *__p, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;
  uint64_t v32;

  MEMORY[0x1C3B8D890](v31, 0x10B3C408E4F17DDLL);
  if (a24 < 0)
    operator delete(__p);
  if (a31 < 0)
    operator delete(a26);
  if (*(char *)(v32 - 17) < 0)
    operator delete(*(void **)(v32 - 40));
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogCalendar::isLastMonth(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v5;
  void *size;
  const siri::dialogengine::TimeStamp *v7;
  char v8;
  std::string __p;
  std::string v11;
  char v12;
  _QWORD v13[3];
  char v14;

  siri::dialogengine::GetRequestTimeStamp(this, a2, v13);
  if (v13[0] == 0x7FFFFFFFFFFFFFFFLL)
  {
    v5 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&v11, "");
    siri::dialogengine::VariableBoolean::VariableBoolean(v5, &v11, 0);
    if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_9;
    size = (void *)v11.__r_.__value_.__r.__words[0];
    goto LABEL_8;
  }
  siri::dialogengine::GetNowTimeStamp(this, a2, &v11);
  v5 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  v8 = siri::dialogengine::GetICUDifferenceInMonths((siri::dialogengine *)&v11, (const siri::dialogengine::TimeStamp *)v13, v7) == -1;
  siri::dialogengine::VariableBoolean::VariableBoolean(v5, &__p, v8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v12 < 0)
  {
    size = (void *)v11.__r_.__value_.__l.__size_;
LABEL_8:
    operator delete(size);
  }
LABEL_9:
  if (v14 < 0)
    operator delete((void *)v13[1]);
  return v5;
}

void sub_1BF8A5358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, void *__p, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;
  uint64_t v26;

  MEMORY[0x1C3B8D890](v25, 0x10B3C408E4F17DDLL);
  if (a25 < 0)
    operator delete(__p);
  if (*(char *)(v26 - 17) < 0)
    operator delete(*(void **)(v26 - 40));
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogCalendar::isLastYear(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v5;
  void *size;
  const siri::dialogengine::TimeStamp *v7;
  char v8;
  std::string __p;
  std::string v11;
  char v12;
  _QWORD v13[3];
  char v14;

  siri::dialogengine::GetRequestTimeStamp(this, a2, v13);
  if (v13[0] == 0x7FFFFFFFFFFFFFFFLL)
  {
    v5 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&v11, "");
    siri::dialogengine::VariableBoolean::VariableBoolean(v5, &v11, 0);
    if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_9;
    size = (void *)v11.__r_.__value_.__r.__words[0];
    goto LABEL_8;
  }
  siri::dialogengine::GetNowTimeStamp(this, a2, &v11);
  v5 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  v8 = siri::dialogengine::GetICUDifferenceInYears((siri::dialogengine *)&v11, (const siri::dialogengine::TimeStamp *)v13, v7) == -1;
  siri::dialogengine::VariableBoolean::VariableBoolean(v5, &__p, v8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v12 < 0)
  {
    size = (void *)v11.__r_.__value_.__l.__size_;
LABEL_8:
    operator delete(size);
  }
LABEL_9:
  if (v14 < 0)
    operator delete((void *)v13[1]);
  return v5;
}

void sub_1BF8A551C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, void *__p, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;
  uint64_t v26;

  MEMORY[0x1C3B8D890](v25, 0x10B3C408E4F17DDLL);
  if (a25 < 0)
    operator delete(__p);
  if (*(char *)(v26 - 17) < 0)
    operator delete(*(void **)(v26 - 40));
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogCalendar::isNextWeek(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v5;
  void *size;
  char v7;
  std::string __p;
  std::string v10;
  char v11;
  uint64_t v12[3];
  char v13;
  std::string v14;

  siri::dialogengine::Context::GetDeviceLocale(this, &v14);
  siri::dialogengine::GetRequestTimeStamp(this, a2, v12);
  if (v12[0] == 0x7FFFFFFFFFFFFFFFLL)
  {
    v5 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&v10, "");
    siri::dialogengine::VariableBoolean::VariableBoolean(v5, &v10, 0);
    if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_9;
    size = (void *)v10.__r_.__value_.__r.__words[0];
    goto LABEL_8;
  }
  siri::dialogengine::GetNowTimeStamp(this, a2, &v10);
  v5 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  v7 = siri::dialogengine::GetICUDifferenceInWeeks((uint64_t *)&v10, v12) == 1;
  siri::dialogengine::VariableBoolean::VariableBoolean(v5, &__p, v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v11 < 0)
  {
    size = (void *)v10.__r_.__value_.__l.__size_;
LABEL_8:
    operator delete(size);
  }
LABEL_9:
  if (v13 < 0)
    operator delete((void *)v12[1]);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return v5;
}

void sub_1BF8A5704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, void *__p, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;
  uint64_t v32;

  MEMORY[0x1C3B8D890](v31, 0x10B3C408E4F17DDLL);
  if (a24 < 0)
    operator delete(__p);
  if (a31 < 0)
    operator delete(a26);
  if (*(char *)(v32 - 17) < 0)
    operator delete(*(void **)(v32 - 40));
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogCalendar::isNextMonth(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v5;
  void *size;
  const siri::dialogengine::TimeStamp *v7;
  char v8;
  std::string __p;
  std::string v11;
  char v12;
  _QWORD v13[3];
  char v14;

  siri::dialogengine::GetRequestTimeStamp(this, a2, v13);
  if (v13[0] == 0x7FFFFFFFFFFFFFFFLL)
  {
    v5 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&v11, "");
    siri::dialogengine::VariableBoolean::VariableBoolean(v5, &v11, 0);
    if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_9;
    size = (void *)v11.__r_.__value_.__r.__words[0];
    goto LABEL_8;
  }
  siri::dialogengine::GetNowTimeStamp(this, a2, &v11);
  v5 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  v8 = siri::dialogengine::GetICUDifferenceInMonths((siri::dialogengine *)&v11, (const siri::dialogengine::TimeStamp *)v13, v7) == 1;
  siri::dialogengine::VariableBoolean::VariableBoolean(v5, &__p, v8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v12 < 0)
  {
    size = (void *)v11.__r_.__value_.__l.__size_;
LABEL_8:
    operator delete(size);
  }
LABEL_9:
  if (v14 < 0)
    operator delete((void *)v13[1]);
  return v5;
}

void sub_1BF8A58E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, void *__p, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;
  uint64_t v26;

  MEMORY[0x1C3B8D890](v25, 0x10B3C408E4F17DDLL);
  if (a25 < 0)
    operator delete(__p);
  if (*(char *)(v26 - 17) < 0)
    operator delete(*(void **)(v26 - 40));
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogCalendar::isNextYear(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v5;
  void *size;
  const siri::dialogengine::TimeStamp *v7;
  char v8;
  std::string __p;
  std::string v11;
  char v12;
  _QWORD v13[3];
  char v14;

  siri::dialogengine::GetRequestTimeStamp(this, a2, v13);
  if (v13[0] == 0x7FFFFFFFFFFFFFFFLL)
  {
    v5 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&v11, "");
    siri::dialogengine::VariableBoolean::VariableBoolean(v5, &v11, 0);
    if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_9;
    size = (void *)v11.__r_.__value_.__r.__words[0];
    goto LABEL_8;
  }
  siri::dialogengine::GetNowTimeStamp(this, a2, &v11);
  v5 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  v8 = siri::dialogengine::GetICUDifferenceInYears((siri::dialogengine *)&v11, (const siri::dialogengine::TimeStamp *)v13, v7) == 1;
  siri::dialogengine::VariableBoolean::VariableBoolean(v5, &__p, v8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v12 < 0)
  {
    size = (void *)v11.__r_.__value_.__l.__size_;
LABEL_8:
    operator delete(size);
  }
LABEL_9:
  if (v14 < 0)
    operator delete((void *)v13[1]);
  return v5;
}

void sub_1BF8A5AA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, void *__p, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;
  uint64_t v26;

  MEMORY[0x1C3B8D890](v25, 0x10B3C408E4F17DDLL);
  if (a25 < 0)
    operator delete(__p);
  if (*(char *)(v26 - 17) < 0)
    operator delete(*(void **)(v26 - 40));
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogCalendar::isSameDateAsToday(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::IsSameDateAsTodayWithOffset(this, a2, 0);
}

uint64_t siri::dialogengine::IsSameDateAsTodayWithOffset(siri::dialogengine *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  int v3;
  uint64_t v6;
  void *size;
  const siri::dialogengine::TimeStamp *v8;
  int ICUDayOfMonth;
  const siri::dialogengine::TimeStamp *v10;
  const siri::dialogengine::TimeStamp *v11;
  int ICUMonth;
  const siri::dialogengine::TimeStamp *v13;
  char v14;
  std::string __p;
  std::string v17;
  char v18;
  _QWORD v19[3];
  char v20;

  v3 = (int)a3;
  siri::dialogengine::GetRequestTimeStamp(this, a2, v19);
  if (v19[0] == 0x7FFFFFFFFFFFFFFFLL)
  {
    v6 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&v17, "");
    siri::dialogengine::VariableBoolean::VariableBoolean(v6, &v17, 0);
    if ((SHIBYTE(v17.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_12;
    size = (void *)v17.__r_.__value_.__r.__words[0];
    goto LABEL_11;
  }
  siri::dialogengine::GetNowTimeStamp(this, a2, &v17);
  v17.__r_.__value_.__r.__words[0] += v3;
  ICUDayOfMonth = siri::dialogengine::GetICUDayOfMonth((siri::dialogengine *)v19, v8);
  if (ICUDayOfMonth == siri::dialogengine::GetICUDayOfMonth((siri::dialogengine *)&v17, v10))
  {
    ICUMonth = siri::dialogengine::GetICUMonth((siri::dialogengine *)v19, v11);
    v14 = ICUMonth == siri::dialogengine::GetICUMonth((siri::dialogengine *)&v17, v13);
  }
  else
  {
    v14 = 0;
  }
  v6 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::dialogengine::VariableBoolean::VariableBoolean(v6, &__p, v14);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v18 < 0)
  {
    size = (void *)v17.__r_.__value_.__l.__size_;
LABEL_11:
    operator delete(size);
  }
LABEL_12:
  if (v20 < 0)
    operator delete((void *)v19[1]);
  return v6;
}

void sub_1BF8A5CB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, void *a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8D890](v32, 0x10B3C408E4F17DDLL);
  if (a25 < 0)
    operator delete(a17);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogCalendar::isSameDateAsTomorrow(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::IsSameDateAsTodayWithOffset(this, a2, (const siri::dialogengine::VariableObject *)0x15180);
}

uint64_t siri::dialogengine::DialogCalendar::isSameDateAsYesterday(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::IsSameDateAsTodayWithOffset(this, a2, (const siri::dialogengine::VariableObject *)0xFFFEAE80);
}

uint64_t siri::dialogengine::DialogCalendar::isFirstDayOfWeek(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v5;
  char IsICUFirstDayOfWeek;
  std::string __p;
  uint64_t v9[3];
  char v10;
  std::string v11;

  siri::dialogengine::Context::GetDeviceLocale(this, &v11);
  siri::dialogengine::GetRequestTimeStamp(this, a2, v9);
  if (v9[0] == 0x7FFFFFFFFFFFFFFFLL)
  {
    v5 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    siri::dialogengine::VariableBoolean::VariableBoolean(v5, &__p, 0);
  }
  else
  {
    IsICUFirstDayOfWeek = siri::dialogengine::IsICUFirstDayOfWeek(v9);
    v5 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    siri::dialogengine::VariableBoolean::VariableBoolean(v5, &__p, IsICUFirstDayOfWeek);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v10 < 0)
    operator delete((void *)v9[1]);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return v5;
}

void sub_1BF8A5E88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  uint64_t v22;

  if (a14 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8D890](v21, 0x10B3C408E4F17DDLL);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v22 - 17) < 0)
    operator delete(*(void **)(v22 - 40));
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogCalendar::isEarlyMorning(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::IsCalendarInDateTimeRange(this, a2, 0);
}

uint64_t siri::dialogengine::IsCalendarInDateTimeRange(siri::dialogengine *a1, siri::dialogengine::Context *a2, int a3)
{
  uint64_t v5;
  char IsContainedByDateTimeConstant;
  std::string __p;
  _QWORD v9[3];
  char v10;

  siri::dialogengine::GetRequestTimeStamp(a1, a2, v9);
  if (v9[0] == 0x7FFFFFFFFFFFFFFFLL)
  {
    v5 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    siri::dialogengine::VariableBoolean::VariableBoolean(v5, &__p, 0);
  }
  else
  {
    IsContainedByDateTimeConstant = siri::dialogengine::IsContainedByDateTimeConstant(a1, (char *)v9, a3);
    v5 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    siri::dialogengine::VariableBoolean::VariableBoolean(v5, &__p, IsContainedByDateTimeConstant);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v10 < 0)
    operator delete((void *)v9[1]);
  return v5;
}

void sub_1BF8A5FFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8D890](v22, 0x10B3C408E4F17DDLL);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogCalendar::isMorning(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::IsCalendarInDateTimeRange(this, a2, 1);
}

uint64_t siri::dialogengine::DialogCalendar::isNoon(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::IsCalendarInDateTimeRange(this, a2, 2);
}

uint64_t siri::dialogengine::DialogCalendar::isEarlyAfternoon(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::IsCalendarInDateTimeRange(this, a2, 3);
}

uint64_t siri::dialogengine::DialogCalendar::isAfternoon(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::IsCalendarInDateTimeRange(this, a2, 4);
}

uint64_t siri::dialogengine::DialogCalendar::isEarlyEvening(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::IsCalendarInDateTimeRange(this, a2, 5);
}

uint64_t siri::dialogengine::DialogCalendar::isEvening(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::IsCalendarInDateTimeRange(this, a2, 6);
}

uint64_t siri::dialogengine::DialogCalendar::isNight(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::IsCalendarInDateTimeRange(this, a2, 7);
}

uint64_t siri::dialogengine::DialogCalendar::isLateNight(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::IsCalendarInDateTimeRange(this, a2, 8);
}

uint64_t siri::dialogengine::DialogCalendar::isBreakfast(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::IsCalendarInDateTimeRange(this, a2, 9);
}

uint64_t siri::dialogengine::DialogCalendar::isBrunch(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::IsCalendarInDateTimeRange(this, a2, 10);
}

uint64_t siri::dialogengine::DialogCalendar::isLunch(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::IsCalendarInDateTimeRange(this, a2, 11);
}

uint64_t siri::dialogengine::DialogCalendar::isDinner(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::IsCalendarInDateTimeRange(this, a2, 12);
}

uint64_t siri::dialogengine::DialogCalendar::isDayTime(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::IsCalendarInDateTimeRange(this, a2, 13);
}

uint64_t siri::dialogengine::DialogCalendar::isBedTime(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::IsCalendarInDateTimeRange(this, a2, 14);
}

uint64_t siri::dialogengine::DialogCalendar::isHappyHour(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::IsCalendarInDateTimeRange(this, a2, 15);
}

siri::dialogengine::Context *siri::dialogengine::DialogCalendar::timeZone(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  siri::dialogengine::Context *v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;
  std::string __p;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  void *v18;
  char v19;

  v3 = a2;
  if (a2)
  {
    if (((*(uint64_t (**)(siri::dialogengine::Context *, siri::dialogengine::Context *, const siri::dialogengine::VariableObject *))(*(_QWORD *)a2 + 32))(a2, a2, a3) & 1) != 0)
    {
      return 0;
    }
    else
    {
      siri::dialogengine::GetRequestTimeStamp(this, v3, &v17);
      v3 = (siri::dialogengine::Context *)operator new();
      siri::dialogengine::VariableObject::VariableObject(v3);
      if (v17 != 0x7FFFFFFFFFFFFFFFLL)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "secs");
        siri::dialogengine::VariableObject::AddNumberProperty((uint64_t)v3, &__p, &v15, (double)v17);
        v5 = v16;
        if (v16)
        {
          p_shared_owners = (unint64_t *)&v16->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "timeZone");
      siri::dialogengine::VariableObject::AddStringProperty((uint64_t)v3, &__p, (uint64_t)&v18, &v12);
      v8 = v13;
      if (v13)
      {
        v9 = (unint64_t *)&v13->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v19 < 0)
        operator delete(v18);
    }
  }
  return v3;
}

void sub_1BF8A6250(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (a17 < 0)
    operator delete(__p);
  if (*(char *)(v17 - 17) < 0)
    operator delete(*(void **)(v17 - 40));
  _Unwind_Resume(exception_object);
}

_QWORD *siri::dialogengine::DialogCalendar::asDateTime(siri::dialogengine::DialogCalendar *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  _QWORD *v5;
  const siri::dialogengine::TimeStamp *v6;
  int ICUYear;
  const siri::dialogengine::TimeStamp *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  int ICUMonth;
  const siri::dialogengine::TimeStamp *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  int ICUDayOfMonth;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  std::string __p;
  uint64_t v32;
  std::__shared_weak_count *v33;
  std::string v34;
  char v35;

  if (!a2 || ((*(uint64_t (**)(siri::dialogengine::Context *))(*(_QWORD *)a2 + 32))(a2) & 1) != 0)
    return 0;
  v5 = (_QWORD *)operator new();
  std::string::basic_string[abi:ne180100]<0>(&v34, "dateTime");
  siri::dialogengine::VariableObject::VariableObject(v5, &v34);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  siri::dialogengine::GetRequestTimeStamp(this, a2, &v34);
  if (v34.__r_.__value_.__r.__words[0] != 0x7FFFFFFFFFFFFFFFLL)
  {
    ICUYear = siri::dialogengine::GetICUYear((siri::dialogengine *)&v34, v6);
    std::string::basic_string[abi:ne180100]<0>(&__p, "year");
    siri::dialogengine::VariableObject::AddNumberProperty((uint64_t)v5, &__p, &v32, (double)ICUYear);
    v9 = v33;
    if (v33)
    {
      p_shared_owners = (unint64_t *)&v33->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    ICUMonth = siri::dialogengine::GetICUMonth((siri::dialogengine *)&v34, v8);
    std::string::basic_string[abi:ne180100]<0>(&__p, "month");
    siri::dialogengine::VariableObject::AddNumberProperty((uint64_t)v5, &__p, &v29, (double)ICUMonth);
    v14 = v30;
    if (v30)
    {
      v15 = (unint64_t *)&v30->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    ICUDayOfMonth = siri::dialogengine::GetICUDayOfMonth((siri::dialogengine *)&v34, v13);
    std::string::basic_string[abi:ne180100]<0>(&__p, "day");
    siri::dialogengine::VariableObject::AddNumberProperty((uint64_t)v5, &__p, &v27, (double)ICUDayOfMonth);
    v18 = v28;
    if (v28)
    {
      v19 = (unint64_t *)&v28->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "timeZone");
  siri::dialogengine::VariableObject::AddStringProperty((uint64_t)v5, &__p, (uint64_t)&v34.__r_.__value_.__l.__size_, &v25);
  v21 = v26;
  if (v26)
  {
    v22 = (unint64_t *)&v26->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v35 < 0)
    operator delete((void *)v34.__r_.__value_.__l.__size_);
  return v5;
}

void sub_1BF8A6554(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a21 < 0)
    operator delete(__p);
  if (*(char *)(v21 - 33) < 0)
    operator delete(*(void **)(v21 - 56));
  _Unwind_Resume(exception_object);
}

siri::dialogengine::PatternContext *siri::dialogengine::PatternContext::PatternContext(siri::dialogengine::PatternContext *this)
{
  char *v2;
  __int128 v4;
  uint64_t v5;

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = (char *)this + 8;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 3) = (char *)this + 32;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = (char *)this + 56;
  v2 = (char *)operator new(0x88uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_1E7931080;
  std::string::basic_string[abi:ne180100]<0>(&v4, "pattern context");
  *(_OWORD *)(v2 + 24) = v4;
  *((_QWORD *)v2 + 5) = v5;
  *((_QWORD *)v2 + 6) = 850045863;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *((_QWORD *)v2 + 16) = 0;
  *((_QWORD *)v2 + 15) = 0;
  *((_QWORD *)v2 + 13) = 0;
  *((_QWORD *)v2 + 14) = v2 + 120;
  *((_QWORD *)this + 9) = v2 + 24;
  *((_QWORD *)this + 10) = v2;
  siri::dialogengine::PatternContext::InitPatternSettings((uint64_t **)this);
  return this;
}

void sub_1BF8A66C4(_Unwind_Exception *a1)
{
  siri::dialogengine::PatternCache *v1;
  uint64_t v2;
  _QWORD **v3;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v2);
  siri::dialogengine::PatternCache::~PatternCache(v1);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(*v3);
  _Unwind_Resume(a1);
}

void siri::dialogengine::PatternContext::InitPatternSettings(uint64_t **this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  void *__p[2];
  char v22;
  std::string v23;

  if (_os_feature_enabled_impl())
  {
    v2 = (std::__shared_weak_count *)operator new(0x60uLL);
    v2->__shared_owners_ = 0;
    v2->__shared_weak_owners_ = 0;
    v2->__vftable = (std::__shared_weak_count_vtbl *)&off_1E793A478;
    std::string::basic_string[abi:ne180100]<0>(&v23, "sonicStatusIndicator");
    siri::dialogengine::VariableBoolean::VariableBoolean((uint64_t)&v2[1], &v23, 0);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
    __p[0] = &v2[1];
    __p[1] = v2;
    v20 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    siri::dialogengine::PatternContext::AddPatternSetting(this, (uint64_t *)&v20);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    v5 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v6 = (unint64_t *)((char *)__p[1] + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  v8 = (std::__shared_weak_count *)operator new(0x60uLL);
  v8->__shared_owners_ = 0;
  v8->__shared_weak_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&off_1E793A478;
  std::string::basic_string[abi:ne180100]<0>(&v23, "printSupportingDialogInDisplayModes");
  siri::dialogengine::VariableBoolean::VariableBoolean((uint64_t)&v8[1], &v23, 0);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  __p[0] = &v8[1];
  __p[1] = v8;
  v19 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  siri::dialogengine::PatternContext::AddPatternSetting(this, (uint64_t *)&v19);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v12 = (unint64_t *)((char *)__p[1] + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (_os_feature_enabled_impl())
  {
    v14 = (std::__shared_weak_count *)operator new(0x108uLL);
    v14->__shared_owners_ = 0;
    v14->__shared_weak_owners_ = 0;
    v14->__vftable = (std::__shared_weak_count_vtbl *)&off_1E793A548;
    std::string::basic_string[abi:ne180100]<0>(&v23, "visualLocation");
    std::string::basic_string[abi:ne180100]<0>(__p, "snippetspace");
    siri::dialogengine::VariableString::VariableString((uint64_t)&v14[1], &v23, (uint64_t)__p);
    if (v22 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
    *(_QWORD *)&v17 = v14 + 1;
    *((_QWORD *)&v17 + 1) = v14;
    v18 = v17;
    siri::dialogengine::PatternContext::AddPatternSetting(this, (uint64_t *)&v18);
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
}

void sub_1BF8A6A24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void siri::dialogengine::PatternCache::~PatternCache(siri::dialogengine::PatternCache *this)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((_QWORD **)this + 4));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((_QWORD **)this + 1));
}

void siri::dialogengine::PatternContext::AddPatternSetting(uint64_t **a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 v5;
  _OWORD *v6;
  std::string __p;
  std::string *p_p;

  v4 = *a2;
  if (*(char *)(*a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v4 + 8), *(_QWORD *)(v4 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(v4 + 8);
    __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v4 + 24);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v5;
  }
  p_p = &__p;
  v6 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (const void **)&__p.__r_.__value_.__l.__data_, (_OWORD **)&p_p);
  std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100]((_QWORD *)v6 + 7, *a2, a2[1]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF8A6B70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<siri::dialogengine::VariableString>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E793A548;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::dialogengine::VariableString>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E793A548;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::VariableString>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<siri::dialogengine::VariableBoolean>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E793A478;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::dialogengine::VariableBoolean>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E793A478;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_emplace<siri::dialogengine::VariableBoolean>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<siri::dialogengine::SemanticModelCache>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7931080;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::dialogengine::SemanticModelCache>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E7931080;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

void std::__shared_ptr_emplace<siri::dialogengine::SemanticModelCache>::__on_zero_shared(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,siri::dialogengine::SemanticModelCache::Entry>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::SemanticModelCache::Entry>,std::less<void>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::SemanticModelCache::Entry>>>::destroy(*(_QWORD **)(a1 + 120));
  std::mutex::~mutex((std::mutex *)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

void std::__tree<std::__value_type<std::string,siri::dialogengine::SemanticModelCache::Entry>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::SemanticModelCache::Entry>,std::less<void>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::SemanticModelCache::Entry>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,siri::dialogengine::SemanticModelCache::Entry>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::SemanticModelCache::Entry>,std::less<void>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::SemanticModelCache::Entry>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,siri::dialogengine::SemanticModelCache::Entry>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::SemanticModelCache::Entry>,std::less<void>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::SemanticModelCache::Entry>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,siri::dialogengine::SemanticModelCache::Entry>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,siri::dialogengine::SemanticModelCache::Entry>,0>(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 48;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(_QWORD **)(a1 + 72));
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v2);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t siri::dialogengine::PatternContext::FindPatternSetting@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  result = std::__tree<std::string>::find<std::string>(a1, a2);
  if (a1 + 8 == result)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    v6 = *(_QWORD *)(result + 64);
    *a3 = *(_QWORD *)(result + 56);
    a3[1] = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
  }
  return result;
}

void siri::dialogengine::PatternContext::AddPatternSettings(uint64_t **a1, const char *a2)
{
  const char *v2;
  const char *v3;
  uint64_t *v5;
  const char *v6;
  const char *v7;
  BOOL v8;
  __int128 *v9;

  v2 = a2 + 8;
  v3 = *(const char **)a2;
  if (*(const char **)a2 != a2 + 8)
  {
    do
    {
      if (*((_QWORD *)v3 + 7))
      {
        v9 = (__int128 *)(v3 + 32);
        v5 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Variable>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Variable>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Variable>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (const void **)v3 + 4, &v9);
        std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100](v5 + 7, *((_QWORD *)v3 + 7), *((_QWORD *)v3 + 8));
      }
      else
      {
        siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Trying to add a NULL pattern setting to the PatternContext. It will not be added.", a2);
      }
      v6 = (const char *)*((_QWORD *)v3 + 1);
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = *(const char **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (const char *)*((_QWORD *)v3 + 2);
          v8 = *(_QWORD *)v7 == (_QWORD)v3;
          v3 = v7;
        }
        while (!v8);
      }
      v3 = v7;
    }
    while (v7 != v2);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Variable>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Variable>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::Variable>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, __int128 **a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  std::string *v8;
  __int128 *v9;
  __int128 v10;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v5 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    v6 = (uint64_t *)operator new(0x48uLL);
    v12[0] = v6;
    v12[1] = a1 + 1;
    v13 = 0;
    v8 = (std::string *)(v6 + 4);
    v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
    }
    else
    {
      v10 = *v9;
      v6[6] = *((_QWORD *)v9 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
    }
    v6[7] = 0;
    v6[8] = 0;
    v13 = 1;
    std::__tree<std::string>::__insert_node_at(a1, v14, v7, v6);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12);
  }
  return v6;
}

void sub_1BF8A6F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,void *>>>>::reset[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void siri::dialogengine::PatternContext::AddEntryToPatternCache(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t **v5;
  std::string v6;
  std::string __p;

  if (a4)
    v5 = (uint64_t **)(a1 + 24);
  else
    v5 = (uint64_t **)(a1 + 48);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v6 = *(std::string *)a2;
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string>>(v5, (const void **)&v6.__r_.__value_.__l.__data_, (uint64_t)&v6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
}

void sub_1BF8A6FEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string>>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t **v6;
  char *v7;
  std::string *v8;
  _QWORD v9[2];
  char v10;
  uint64_t v11;

  v5 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  if (!*v5)
  {
    v6 = v5;
    v7 = (char *)operator new(0x50uLL);
    v9[0] = v7;
    v9[1] = a1 + 1;
    v10 = 0;
    v8 = (std::string *)(v7 + 32);
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      *((_QWORD *)v7 + 6) = *(_QWORD *)(a3 + 16);
    }
    *(_OWORD *)(v7 + 56) = *(_OWORD *)(a3 + 24);
    *((_QWORD *)v7 + 9) = *(_QWORD *)(a3 + 40);
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    v10 = 1;
    std::__tree<std::string>::__insert_node_at(a1, v11, v6, (uint64_t *)v7);
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v9);
  }
}

void sub_1BF8A70E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void siri::dialogengine::PatternContext::FindPatternCacheEntry(uint64_t a1@<X0>, const void **a2@<X1>, int a3@<W2>, std::string *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  if (a3)
    v5 = a1 + 24;
  else
    v5 = a1 + 48;
  v6 = std::__tree<std::string>::find<std::string>(v5, a2);
  if (v5 + 8 == v6)
  {
    std::string::basic_string[abi:ne180100]<0>(a4, "");
  }
  else if (*(char *)(v6 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(a4, *(const std::string::value_type **)(v6 + 56), *(_QWORD *)(v6 + 64));
  }
  else
  {
    v7 = *(_OWORD *)(v6 + 56);
    a4->__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 72);
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = v7;
  }
}

BOOL siri::dialogengine::PatternContext::GetSonicResponseStatus(siri::dialogengine::PatternContext *this)
{
  const char *v2;
  _BOOL8 RequiredBooleanSettingFromPatternContext;
  void *__p[2];
  char v6;

  if (_os_feature_enabled_impl())
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "sonicStatusIndicator");
    RequiredBooleanSettingFromPatternContext = siri::dialogengine::GetRequiredBooleanSettingFromPatternContext((uint64_t)this, (const void **)__p);
    if (v6 < 0)
      operator delete(__p[0]);
  }
  else
  {
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Feature is not enabled in this build. Use ffctl to enable it.", v2);
    return 0;
  }
  return RequiredBooleanSettingFromPatternContext;
}

void sub_1BF8A7208(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::GetRequiredBooleanSettingFromPatternContext(uint64_t a1, const void **a2)
{
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _BYTE *v9;
  _BOOL8 v10;
  std::string *v11;
  __int128 v12;
  unint64_t *v13;
  unint64_t v14;
  std::string *v16;
  __int128 v17;
  std::string v18;
  void *__p[2];
  std::string::size_type v20;
  const void *v21;
  std::__shared_weak_count *v22;

  v3 = std::__tree<std::string>::find<std::string>(a1, a2);
  if (a1 + 8 == v3)
  {
    v6 = 0;
    v21 = 0;
    v22 = 0;
LABEL_10:
    std::operator+<char>();
    v11 = std::string::append(&v18, "'. It should always exist.");
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v20 = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 3u);
    goto LABEL_11;
  }
  v4 = v3;
  v5 = *(const void **)(v3 + 56);
  v6 = *(std::__shared_weak_count **)(v4 + 64);
  v21 = v5;
  v22 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  if (!v5)
    goto LABEL_10;
  if (v9)
  {
    v10 = v9[66] != 0;
    if (!v6)
      return v10;
    goto LABEL_16;
  }
  std::operator+<char>();
  v16 = std::string::append(&v18, "' but it's not a BOOLean variable.");
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v20 = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 3u);
LABEL_11:
  if (SHIBYTE(v20) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  v10 = 0;
  if (v6)
  {
LABEL_16:
    v13 = (unint64_t *)&v6->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v10;
}

void sub_1BF8A73B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v21 - 32);
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::PatternContext::GetPrintSupportingDialogInDisplayModes(siri::dialogengine::PatternContext *this)
{
  _BOOL8 RequiredBooleanSettingFromPatternContext;
  void *__p[2];
  char v5;

  std::string::basic_string[abi:ne180100]<0>(__p, "printSupportingDialogInDisplayModes");
  RequiredBooleanSettingFromPatternContext = siri::dialogengine::GetRequiredBooleanSettingFromPatternContext((uint64_t)this, (const void **)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  return RequiredBooleanSettingFromPatternContext;
}

void sub_1BF8A7458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::PatternContext::GetSemanticModelCache@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 80);
  *a2 = *(_QWORD *)(this + 72);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

void siri::dialogengine::MorphunUpdaterCatutil::~MorphunUpdaterCatutil(siri::dialogengine::MorphunUpdaterCatutil *this)
{
  JUMPOUT(0x1C3B8D890);
}

BOOL siri::dialogengine::MorphunUpdaterCatutil::Download(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  std::string::size_type size;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  std::string v9;
  std::string **v10;
  char v11;
  void *__p[2];
  char v13;
  _QWORD v14[3];
  _QWORD v15[3];
  std::string v16;
  __int128 v17;

  *(_QWORD *)&v17 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(__p, "morphun");
  std::string::basic_string[abi:ne180100]<0>(v14, "download");
  std::string::basic_string[abi:ne180100]<0>(v15, "--locale");
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v16 = *(std::string *)a2;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v10 = &v6;
  v11 = 0;
  v6 = (std::string *)operator new(0x60uLL);
  v7 = v6;
  v8 = v6 + 4;
  v7 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v8, (__int128 *)__p, &v17, v6);
  siri::dialogengine::ExecuteCatutil((uint64_t *)&v6, 0, 0, &v9);
  v10 = &v6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
  for (i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v16.__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(*(void **)((char *)&v16.__r_.__value_.__l.__data_ + i * 8));
  }
  if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v9.__r_.__value_.__r.__words[2]);
  else
    size = v9.__r_.__value_.__l.__size_;
  if (size)
  {
    if ((*((_BYTE *)&v9.__r_.__value_.__s + 23) & 0x80) == 0)
      return size != 0;
LABEL_17:
    operator delete(v9.__r_.__value_.__l.__data_);
    return size != 0;
  }
  std::operator+<char>();
  siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 3u);
  if (v13 < 0)
    operator delete(__p[0]);
  if ((*((_BYTE *)&v9.__r_.__value_.__s + 23) & 0x80) != 0)
    goto LABEL_17;
  return size != 0;
}

void sub_1BF8A7670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  if (a18 < 0)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::MorphunUpdaterCatutil::Download(uint64_t a1, uint64_t *a2)
{
  uint64_t i;
  std::string::size_type size;
  void *__p[2];
  char v7;
  void *v8;
  void *v9;
  char *v10;
  std::string v11;
  void **v12;
  char v13;
  void *v14[2];
  char v15;
  _QWORD v16[3];
  _QWORD v17[3];
  _BYTE v18[24];
  __int128 v19;

  *(_QWORD *)&v19 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(v14, "morphun");
  std::string::basic_string[abi:ne180100]<0>(v16, "download");
  std::string::basic_string[abi:ne180100]<0>(v17, "--locale");
  std::string::basic_string[abi:ne180100]<0>(__p, " ");
  siri::dialogengine::StringJoinInternal<std::vector<std::string>>((uint64_t)v18, *a2, a2[1], (uint64_t)__p);
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v12 = &v8;
  v13 = 0;
  v8 = operator new(0x60uLL);
  v9 = v8;
  v10 = (char *)v8 + 96;
  v9 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v10, (__int128 *)v14, &v19, (std::string *)v8);
  siri::dialogengine::ExecuteCatutil((uint64_t *)&v8, 0, 0, &v11);
  v12 = &v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v12);
  for (i = 0; i != -96; i -= 24)
  {
    if ((char)v18[i + 23] < 0)
      operator delete(*(void **)&v18[i]);
  }
  if (v7 < 0)
    operator delete(__p[0]);
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v11.__r_.__value_.__r.__words[2]);
  else
    size = v11.__r_.__value_.__l.__size_;
  if (size)
  {
    if ((*((_BYTE *)&v11.__r_.__value_.__s + 23) & 0x80) == 0)
      return size != 0;
LABEL_20:
    operator delete(v11.__r_.__value_.__l.__data_);
    return size != 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&v8, " ");
  siri::dialogengine::StringJoinInternal<std::vector<std::string>>((uint64_t)v14, *a2, a2[1], (uint64_t)&v8);
  if (SHIBYTE(v10) < 0)
    operator delete(v8);
  std::operator+<char>();
  siri::dialogengine::Log::LogWithLevel((uint64_t)&v8, 3u);
  if (SHIBYTE(v10) < 0)
    operator delete(v8);
  if (v15 < 0)
    operator delete(v14[0]);
  if ((*((_BYTE *)&v11.__r_.__value_.__s + 23) & 0x80) != 0)
    goto LABEL_20;
  return size != 0;
}

void sub_1BF8A792C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a20 < 0)
    operator delete(__p);
  if (a34 < 0)
    operator delete(a29);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::MorphunUpdaterCatutil::GetPath(uint64_t a1@<X1>, std::string *a2@<X8>)
{
  const char *v4;
  uint64_t i;
  size_t size;
  std::string *p_s;
  _BYTE *v8;
  std::string *v9;
  _BYTE *v10;
  std::string v11;
  std::string __s;
  std::string *v13;
  char v14;
  void *__p[2];
  char v16;
  _QWORD v17[3];
  _QWORD v18[3];
  std::string v19;
  __int128 v20;

  *(_QWORD *)&v20 = *MEMORY[0x1E0C80C00];
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "morphun");
  std::string::basic_string[abi:ne180100]<0>(v17, "getpath");
  std::string::basic_string[abi:ne180100]<0>(v18, "--locale");
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v19 = *(std::string *)a1;
  memset(&v11, 0, sizeof(v11));
  v13 = &v11;
  v14 = 0;
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x60uLL);
  v11.__r_.__value_.__l.__size_ = v11.__r_.__value_.__r.__words[0];
  v11.__r_.__value_.__r.__words[2] = v11.__r_.__value_.__r.__words[0] + 96;
  v11.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v11.__r_.__value_.__r.__words[2], (__int128 *)__p, &v20, (std::string *)v11.__r_.__value_.__l.__data_);
  siri::dialogengine::ExecuteCatutil((uint64_t *)&v11, 0, 0, &__s);
  v13 = &v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
  for (i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v19.__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(*(void **)((char *)&v19.__r_.__value_.__l.__data_ + i * 8));
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __s.__r_.__value_.__l.__size_;
    if (__s.__r_.__value_.__l.__size_)
    {
      if ((uint64_t)__s.__r_.__value_.__l.__size_ < 1)
      {
LABEL_25:
        siri::dialogengine::Log::Error((siri::dialogengine::Log *)"No such Morphun locale(s) installed on device!", v4);
        goto LABEL_26;
      }
      p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
LABEL_14:
      v8 = (char *)p_s + size;
      v9 = p_s;
      while (1)
      {
        v10 = memchr(v9, 58, size);
        if (!v10)
          goto LABEL_25;
        if (*v10 == 58)
        {
          if (v10 == v8 || v10 - (_BYTE *)p_s == -1)
            goto LABEL_25;
          siri::dialogengine::StringSplit((unsigned __int8 *)&__s, " ", __p);
          if ((void *)((char *)__p[1] - (char *)__p[0]) == (void *)48)
            siri::dialogengine::StringTrim(" \t\n\r", (const std::string *)__p[0] + 1, &v11);
          else
            std::string::basic_string[abi:ne180100]<0>(&v11, "");
          *a2 = v11;
          v11.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
          goto LABEL_26;
        }
        v9 = (std::string *)(v10 + 1);
        size = v8 - (_BYTE *)v9;
        if (v8 - (_BYTE *)v9 < 1)
          goto LABEL_25;
      }
    }
  }
  else
  {
    size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if (*((_BYTE *)&__s.__r_.__value_.__s + 23))
    {
      p_s = &__s;
      goto LABEL_14;
    }
  }
  std::operator+<char>();
  siri::dialogengine::Log::LogWithLevel((uint64_t)__p, 3u);
  if (v16 < 0)
    operator delete(__p[0]);
LABEL_26:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
}

void sub_1BF8A7CD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  a10 = &a21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void siri::dialogengine::MorphunUpdaterCatutil::GetPaths(uint64_t a1@<X8>)
{
  const char *v3;
  uint64_t i;
  size_t size;
  std::string *p_s;
  _BYTE *v7;
  char *v8;
  std::string *v9;
  _BYTE *v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;
  std::string::size_type v15;
  uint64_t *v16;
  std::string __p;
  std::string __str;
  std::string __s;
  std::string *p_str;
  __int128 v21;
  _QWORD v22[3];
  __int128 v23;

  *(_QWORD *)&v23 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  std::string::basic_string[abi:ne180100]<0>(&v21, "morphun");
  std::string::basic_string[abi:ne180100]<0>(v22, "getpath");
  memset(&__str, 0, sizeof(__str));
  __p.__r_.__value_.__s.__data_[8] = 0;
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
  __str.__r_.__value_.__l.__size_ = __str.__r_.__value_.__r.__words[0];
  __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__r.__words[0] + 48;
  __str.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&__str.__r_.__value_.__r.__words[2], &v21, &v23, (std::string *)__str.__r_.__value_.__l.__data_);
  siri::dialogengine::ExecuteCatutil((uint64_t *)&__str, 0, 0, &__s);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v22[i + 2]) < 0)
      operator delete((void *)v22[i]);
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __s.__r_.__value_.__l.__size_;
    if (__s.__r_.__value_.__l.__size_)
    {
      if ((uint64_t)__s.__r_.__value_.__l.__size_ < 1)
      {
        v8 = "No Morphun locales installed on device!";
        goto LABEL_17;
      }
      p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
      goto LABEL_11;
    }
LABEL_16:
    v8 = "Execution of catutil failed while retrieving Morphun assets paths for all locales.";
    goto LABEL_17;
  }
  size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  if (!*((_BYTE *)&__s.__r_.__value_.__s + 23))
    goto LABEL_16;
  p_s = &__s;
LABEL_11:
  v7 = (char *)p_s + size;
  v8 = "No Morphun locales installed on device!";
  v9 = p_s;
  do
  {
    v10 = memchr(v9, 58, size);
    if (!v10)
      break;
    if (*v10 == 58)
    {
      v8 = "No Morphun locales installed on device!";
      if (v10 == v7 || v10 - (_BYTE *)p_s == -1)
        break;
      std::string::basic_string[abi:ne180100]<0>(&__str, " ");
      std::string::basic_string[abi:ne180100]<0>(&__p, "\n");
      siri::dialogengine::StringSplitWithDelimiters(&__s, (unsigned __int8 *)&__str, (unsigned __int8 *)&__p, (uint64_t)&v21);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v11 = v21;
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v21 + 1) - v21) >> 3) >= 2
        && *((_QWORD *)&v21 + 1) != (_QWORD)v21)
      {
        v13 = 0;
        v14 = 24;
        do
        {
          siri::dialogengine::StringTrim(" \t\n\r", (const std::string *)(v11 + v14 - 24), &__str);
          v15 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v15 = __str.__r_.__value_.__l.__size_;
          std::string::basic_string(&__p, &__str, 0, v15 - 1, (std::allocator<char> *)&p_str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          __str = __p;
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v21 + 1) - v21) >> 3) <= v13 + 1)
            std::vector<std::string>::__throw_out_of_range[abi:ne180100]();
          siri::dialogengine::StringTrim(" \t\n\r", (const std::string *)(v21 + v14), &__p);
          p_str = &__str;
          v16 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, (const void **)&__str.__r_.__value_.__l.__data_, (__int128 **)&p_str);
          std::string::operator=((std::string *)(v16 + 7), &__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          v13 += 2;
          v11 = v21;
          v14 += 48;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v21 + 1) - v21) >> 3) > v13);
      }
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v21;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      goto LABEL_18;
    }
    v9 = (std::string *)(v10 + 1);
    size = v7 - (_BYTE *)v9;
  }
  while (v7 - (_BYTE *)v9 >= 1);
LABEL_17:
  siri::dialogengine::Log::Error((siri::dialogengine::Log *)v8, v3);
LABEL_18:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
}

void sub_1BF8A8120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  _QWORD **v34;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*v34);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("vector");
}

uint64_t siri::dialogengine::IsiOS(siri::dialogengine *this)
{
  return 1;
}

uint64_t siri::dialogengine::IsMacOS(siri::dialogengine *this)
{
  return 0;
}

uint64_t siri::dialogengine::IstvOS(siri::dialogengine *this)
{
  return 0;
}

uint64_t siri::dialogengine::IsInternal(siri::dialogengine *this)
{
  return os_variant_has_internal_diagnostics();
}

uint64_t siri::dialogengine::IsSeed(siri::dialogengine *this)
{
  return 0;
}

uint64_t siri::dialogengine::IsProduction(siri::dialogengine *this)
{
  return os_variant_has_internal_diagnostics() ^ 1;
}

void siri::dialogengine::BuildId(uint64_t a1@<X8>)
{
  size_t v3;
  size_t v4;
  void **v5;
  void *v6;
  void *__p[2];
  unsigned __int8 v8;
  size_t v9;
  char __s[256];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v9 = 256;
  if (sysctlbyname("kern.osversion", __s, &v9, 0, 0))
  {
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)a1, "");
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    MEMORY[0x1C3B8D53C](__p, "i");
    if ((v8 & 0x80u) == 0)
      v3 = v8;
    else
      v3 = (size_t)__p[1];
    v4 = strlen(__s);
    std::string::basic_string[abi:ne180100](a1, v3 + v4);
    if (*(char *)(a1 + 23) < 0)
      a1 = *(_QWORD *)a1;
    if (v3)
    {
      if ((v8 & 0x80u) == 0)
        v5 = __p;
      else
        v5 = (void **)__p[0];
      memmove((void *)a1, v5, v3);
    }
    v6 = (void *)(a1 + v3);
    if (v4)
      memmove(v6, __s, v4);
    *((_BYTE *)v6 + v4) = 0;
    if ((char)v8 < 0)
      operator delete(__p[0]);
  }
}

void sub_1BF8A83D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

siri::dialogengine::XmlErrorHandler *siri::dialogengine::XmlErrorHandler::XmlErrorHandler(siri::dialogengine::XmlErrorHandler *this, Context *a2)
{
  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)siri::dialogengine::sHandler() = this;
  xmlSetStructuredErrorFunc(*(void **)this, (xmlStructuredErrorFunc)siri::dialogengine::HandleError);
  return this;
}

void sub_1BF8A8458(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<siri::dialogengine::XmlError>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void siri::dialogengine::HandleError(siri::dialogengine *this, void *a2, _xmlError *a3)
{
  siri::dialogengine::XmlErrorHandler *v3;
  _QWORD *v4;
  _xmlError *v5;

  v3 = *(siri::dialogengine::XmlErrorHandler **)siri::dialogengine::sHandler();
  if (v3)
    siri::dialogengine::XmlErrorHandler::Handle(v3, v4, v5);
}

void std::vector<siri::dialogengine::XmlError>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 152;
        std::allocator<siri::dialogengine::XmlError>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<siri::dialogengine::XmlError>::destroy[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void siri::dialogengine::XmlErrorHandler::Handle(siri::dialogengine::XmlErrorHandler *this, _QWORD *a2, _xmlError *a3)
{
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  siri::dialogengine::XmlError *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::string __p;
  unint64_t v37;
  char *v38;

  v5 = (char *)this + 24;
  v6 = *((_QWORD *)this + 3);
  v7 = *((_QWORD *)this + 2);
  if (!a3)
  {
    if (v7 < v6)
    {
      std::allocator<siri::dialogengine::XmlError>::construct[abi:ne180100]<siri::dialogengine::XmlError,char const(&)[61]>(*((_QWORD *)this + 2));
      goto LABEL_6;
    }
    v16 = *((_QWORD *)this + 1);
    v17 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v7 - v16) >> 3);
    if (v17 + 1 <= 0x1AF286BCA1AF286)
    {
      v18 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v6 - v16) >> 3);
      v19 = 2 * v18;
      if (2 * v18 <= v17 + 1)
        v19 = v17 + 1;
      if (v18 >= 0xD79435E50D7943)
        v20 = 0x1AF286BCA1AF286;
      else
        v20 = v19;
      v38 = v5;
      if (v20)
        v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<siri::dialogengine::XmlError>>(v20);
      else
        v21 = 0;
      __p.__r_.__value_.__r.__words[0] = v20;
      __p.__r_.__value_.__l.__size_ = v20 + 152 * v17;
      v37 = v20 + 152 * v21;
      std::allocator<siri::dialogengine::XmlError>::construct[abi:ne180100]<siri::dialogengine::XmlError,char const(&)[61]>(__p.__r_.__value_.__l.__size_);
      __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_ + 152;
      v22 = (uint64_t *)((char *)this + 8);
      goto LABEL_27;
    }
LABEL_51:
    std::vector<BOOL>::__throw_length_error[abi:ne180100]();
  }
  if (v7 < v6)
  {
    siri::dialogengine::XmlError::XmlError(*((siri::dialogengine::XmlError **)this + 2), a3);
LABEL_6:
    v9 = v7 + 152;
    *((_QWORD *)this + 2) = v7 + 152;
    goto LABEL_28;
  }
  v10 = *((_QWORD *)this + 1);
  v11 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v7 - v10) >> 3);
  if (v11 + 1 > 0x1AF286BCA1AF286)
    goto LABEL_51;
  v12 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v6 - v10) >> 3);
  v13 = 2 * v12;
  if (2 * v12 <= v11 + 1)
    v13 = v11 + 1;
  if (v12 >= 0xD79435E50D7943)
    v14 = 0x1AF286BCA1AF286;
  else
    v14 = v13;
  v38 = v5;
  if (v14)
    v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<siri::dialogengine::XmlError>>(v14);
  else
    v15 = 0;
  __p.__r_.__value_.__r.__words[0] = v14;
  __p.__r_.__value_.__l.__size_ = v14 + 152 * v11;
  v37 = v14 + 152 * v15;
  siri::dialogengine::XmlError::XmlError((siri::dialogengine::XmlError *)__p.__r_.__value_.__l.__size_, a3);
  __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_ + 152;
  v22 = (uint64_t *)((char *)this + 8);
LABEL_27:
  std::vector<siri::dialogengine::XmlError>::__swap_out_circular_buffer(v22, &__p);
  v9 = *((_QWORD *)this + 2);
  std::__split_buffer<siri::dialogengine::XmlError>::~__split_buffer((uint64_t)&__p);
LABEL_28:
  *((_QWORD *)this + 2) = v9;
  v23 = (siri::dialogengine::XmlError *)(v9 - 152);
  if (a2)
  {
    siri::dialogengine::XmlError::GetMessageWithDetails(v23, &__p);
    siri::dialogengine::Context::SetError((uint64_t)a2, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v25 = a2[63];
    v24 = (std::__shared_weak_count *)a2[64];
    if (!v24)
      goto LABEL_37;
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v27 = __ldxr(p_shared_owners);
    while (__stxr(v27 + 1, p_shared_owners));
    v28 = (unint64_t *)&v24->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
      if (!v25)
        return;
    }
    else
    {
LABEL_37:
      if (!v25)
        return;
    }
    siri::dialogengine::LineNumberBase::LineNumberBase((uint64_t)&__p, *(int *)(v9 - 88), (const std::string *)(v9 - 112));
    v30 = a2[63];
    v31 = (std::__shared_weak_count *)a2[64];
    if (v31)
    {
      v32 = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    siri::dialogengine::File::AddValidationError(v30, (__int128 *)(v9 - 144), (uint64_t)&__p);
    if (v31)
    {
      v34 = (unint64_t *)&v31->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    siri::dialogengine::LineNumberBase::~LineNumberBase((void **)&__p.__r_.__value_.__l.__data_);
  }
  else
  {
    siri::dialogengine::XmlError::GetMessageWithDetails(v23, &__p);
    siri::dialogengine::Log::LogWithLevel((uint64_t)&__p, 3u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1BF8A88B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::__split_buffer<siri::dialogengine::XmlError>::~__split_buffer((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void std::allocator<siri::dialogengine::XmlError>::construct[abi:ne180100]<siri::dialogengine::XmlError,char const(&)[61]>(uint64_t a1)
{
  std::string __p;

  std::string::basic_string[abi:ne180100]<0>(&__p, "An XML parse error occurred, but no information was provided");
  siri::dialogengine::XmlError::XmlError(a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF8A8960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<siri::dialogengine::XmlError>>(unint64_t a1)
{
  if (a1 >= 0x1AF286BCA1AF287)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(152 * a1);
}

uint64_t *std::vector<siri::dialogengine::XmlError>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      *(_DWORD *)(v6 - 152) = *(_DWORD *)(v2 + v5 - 152);
      v8 = *(_OWORD *)(v2 + v5 - 144);
      *(_QWORD *)(v6 - 128) = *(_QWORD *)(v2 + v5 - 128);
      *(_OWORD *)(v6 - 144) = v8;
      *(_QWORD *)(v7 - 136) = 0;
      *(_QWORD *)(v7 - 128) = 0;
      v9 = *(_DWORD *)(v2 + v5 - 120);
      *(_QWORD *)(v7 - 144) = 0;
      *(_DWORD *)(v6 - 120) = v9;
      v10 = *(_OWORD *)(v2 + v5 - 112);
      *(_QWORD *)(v6 - 96) = *(_QWORD *)(v2 + v5 - 96);
      *(_OWORD *)(v6 - 112) = v10;
      *(_QWORD *)(v7 - 104) = 0;
      *(_QWORD *)(v7 - 96) = 0;
      *(_QWORD *)(v7 - 112) = 0;
      *(_DWORD *)(v6 - 88) = *(_DWORD *)(v2 + v5 - 88);
      v11 = *(_OWORD *)(v2 + v5 - 80);
      *(_QWORD *)(v6 - 64) = *(_QWORD *)(v2 + v5 - 64);
      *(_OWORD *)(v6 - 80) = v11;
      *(_QWORD *)(v7 - 72) = 0;
      *(_QWORD *)(v7 - 64) = 0;
      *(_QWORD *)(v7 - 80) = 0;
      v12 = *(_OWORD *)(v2 + v5 - 56);
      *(_QWORD *)(v6 - 40) = *(_QWORD *)(v2 + v5 - 40);
      *(_OWORD *)(v6 - 56) = v12;
      *(_QWORD *)(v7 - 48) = 0;
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v7 - 56) = 0;
      v13 = *(_OWORD *)(v2 + v5 - 32);
      *(_QWORD *)(v6 - 16) = *(_QWORD *)(v2 + v5 - 16);
      *(_OWORD *)(v6 - 32) = v13;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v6 - 8) = *(_QWORD *)(v2 + v5 - 8);
      v5 -= 152;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v14 = *result;
  *result = v4;
  a2[1] = v14;
  v15 = result[1];
  result[1] = a2[2];
  a2[2] = v15;
  v16 = result[2];
  result[2] = a2[3];
  a2[3] = v16;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<siri::dialogengine::XmlError>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 152;
    std::allocator<siri::dialogengine::XmlError>::destroy[abi:ne180100](i - 152);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void siri::dialogengine::XmlErrorHandler::Register(siri::dialogengine::XmlErrorHandler *this)
{
  void ***v1;
  void **v2;

  v1 = (void ***)siri::dialogengine::sHandler();
  *v1 = v2;
  xmlSetStructuredErrorFunc(*v2, (xmlStructuredErrorFunc)siri::dialogengine::HandleError);
}

void siri::dialogengine::XmlErrorHandler::~XmlErrorHandler(siri::dialogengine::XmlErrorHandler *this)
{
  siri::dialogengine::XmlErrorHandler **v2;
  void **v3;

  v2 = (siri::dialogengine::XmlErrorHandler **)siri::dialogengine::sHandler();
  if (*v2 == this)
  {
    *v2 = 0;
    xmlSetStructuredErrorFunc(0, 0);
  }
  v3 = (void **)((char *)this + 8);
  std::vector<siri::dialogengine::XmlError>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void siri::dialogengine::XmlErrorHandler::Unregister(siri::dialogengine::XmlErrorHandler *this)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)siri::dialogengine::sHandler();
  if (*v1 == v2)
  {
    *v1 = 0;
    xmlSetStructuredErrorFunc(0, 0);
  }
}

BOOL siri::dialogengine::XmlErrorHandler::ok(siri::dialogengine::XmlErrorHandler *this)
{
  return *((_QWORD *)this + 1) == *((_QWORD *)this + 2);
}

void siri::dialogengine::XmlErrorHandler::clear(siri::dialogengine::XmlErrorHandler *this)
{
  uint64_t i;
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  for (i = *((_QWORD *)this + 2); i != v3; std::allocator<siri::dialogengine::XmlError>::destroy[abi:ne180100](i))
    i -= 152;
  *((_QWORD *)this + 2) = v3;
}

void sub_1BF8A90E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *__p, uint64_t a5, int a6, __int16 a7, char a8, char a9, void *a10, uint64_t a11, int __pa, __int16 __p_4, char __p_6, char __p_7, uint64_t a16, uint64_t a17, char **a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,char *a31,std::__split_buffer<std::string> *a32,uint64_t a33,char a34)
{
  void *v34;

  a18 = &a31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  a31 = &a34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);

  _Unwind_Resume(a1);
}

void sub_1BF8A92A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  uint64_t v22;

  if (*(char *)(v22 - 17) < 0)
    operator delete(*(void **)(v22 - 40));

  _Unwind_Resume(a1);
}

void sub_1BF8A9434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *a17)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a17);
  _Unwind_Resume(a1);
}

_QWORD *siri::dialogengine::Defer::Defer(_QWORD *result, uint64_t a2)
{
  *result = a2;
  result[4] = 0;
  return result;
}

{
  *result = a2;
  result[4] = 0;
  return result;
}

_QWORD *siri::dialogengine::Defer::Defer(_QWORD *a1, uint64_t a2)
{
  *a1 = 0;
  std::__function::__value_func<BOOL ()(std::vector<std::string> const&,google::protobuf::Field const*)>::__value_func[abi:ne180100]((uint64_t)(a1 + 1), a2);
  return a1;
}

{
  *a1 = 0;
  std::__function::__value_func<BOOL ()(std::vector<std::string> const&,google::protobuf::Field const*)>::__value_func[abi:ne180100]((uint64_t)(a1 + 1), a2);
  return a1;
}

void siri::dialogengine::Defer::~Defer(siri::dialogengine::Defer *this)
{
  uint64_t v2;
  uint64_t v3;
  siri::dialogengine::Defer *v4;
  uint64_t v5;

  v2 = *(_QWORD *)this;
  if (v2)
    (*(void (**)(void))(v2 + 16))();
  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
    v4 = (siri::dialogengine::Defer *)*((_QWORD *)this + 4);
    if (v4 == (siri::dialogengine::Defer *)((char *)this + 8))
    {
      v5 = 4;
      v4 = (siri::dialogengine::Defer *)((char *)this + 8);
    }
    else
    {
      if (!v4)
        return;
      v5 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
  }
}

char *siri::dialogengine::Defer::Clear(siri::dialogengine::Defer *this)
{
  char *v2;
  char *result;
  uint64_t v4;

  *(_QWORD *)this = 0;
  v2 = (char *)this + 8;
  result = (char *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (result == v2)
  {
    v4 = 4;
    result = v2;
  }
  else
  {
    if (!result)
      return result;
    v4 = 5;
  }
  return (char *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v4))();
}

void siri::dialogengine::GroupPhrases::~GroupPhrases(siri::dialogengine::GroupPhrases *this)
{
  siri::dialogengine::Group::~Group(this);
  JUMPOUT(0x1C3B8D890);
}

uint64_t siri::dialogengine::GroupPhrases::Validate(siri::dialogengine::GroupPhrases *this, siri::dialogengine::Context *a2)
{
  char v4;
  uint64_t *i;
  std::string::size_type size;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  char v14;
  std::string::size_type v15;
  uint64_t v16;
  unsigned __int8 v17;
  std::string *v18;
  std::string *v19;
  BOOL v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  std::string::size_type v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  unint64_t *v33;
  unint64_t v34;
  std::string::size_type v36;
  std::__shared_weak_count *v37;
  uint64_t *v38;
  std::string *v39;
  std::string *v40;
  std::string *v41;
  void *v42[2];
  char v43;
  std::string __p;
  void *v45;
  char v46;
  std::string v47;
  std::string v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  char **v51;
  char *v52[2];
  __int128 v53;
  unsigned __int8 v54;
  std::string v55;
  __int128 v56;

  *((_QWORD *)&v56 + 1) = *MEMORY[0x1E0C80C00];
  v4 = siri::dialogengine::Group::Validate((uint64_t **)this, a2);
  v52[0] = 0;
  v52[1] = 0;
  v51 = v52;
  siri::dialogengine::GroupPhrases::GetPhrases(this, (uint64_t)&v55);
  size = v55.__r_.__value_.__l.__size_;
  for (i = (uint64_t *)v55.__r_.__value_.__r.__words[0]; i != (uint64_t *)size; i += 2)
  {
    v8 = *i;
    v7 = (std::__shared_weak_count *)i[1];
    v49 = *i;
    v50 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    if (*(char *)(v8 + 255) < 0)
      std::string::__init_copy_ctor_external(&v48, *(const std::string::value_type **)(v8 + 232), *(_QWORD *)(v8 + 240));
    else
      v48 = *(std::string *)(v8 + 232);
    v11 = HIBYTE(v48.__r_.__value_.__r.__words[2]);
    if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v11 = v48.__r_.__value_.__l.__size_;
    if (v11)
    {
      if (v52 != (char **)std::__tree<std::string>::find<std::string>((uint64_t)&v51, (const void **)&v48.__r_.__value_.__l.__data_))
      {
        std::operator+<char>();
        v12 = std::string::append(&v47, "' already exists.");
        v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v13;
        v12->__r_.__value_.__l.__size_ = 0;
        v12->__r_.__value_.__r.__words[2] = 0;
        v12->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::Context::AddValidationError((uint64_t)a2, (__int128 *)&__p, v8);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v47.__r_.__value_.__l.__data_);
        v4 = 0;
      }
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v51, (const void **)&v48.__r_.__value_.__l.__data_, (uint64_t)&v48);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "Phrase group has empty 'phrase' field - ignoring it.");
      siri::dialogengine::Context::AddValidationError((uint64_t)a2, (__int128 *)&__p, v8);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v4 = 0;
    }
    v14 = (*(uint64_t (**)(uint64_t, siri::dialogengine::Context *))(*(_QWORD *)v8 + 32))(v8, a2);
    std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)&v47, (const void ***)this + 9);
    v4 &= v14;
    v15 = v47.__r_.__value_.__r.__words[0];
    if ((std::string::size_type *)v47.__r_.__value_.__l.__data_ != &v47.__r_.__value_.__r.__words[1])
    {
      do
      {
        std::pair<std::string const,std::string>::pair[abi:ne180100](&__p, (__int128 *)(v15 + 32));
        std::string::basic_string[abi:ne180100]<0>(v42, "phrase");
        siri::dialogengine::ValidateXmlAttributeVersion(a2, (const void **)v42, (uint64_t)&__p, &v53);
        if (v43 < 0)
          operator delete(v42[0]);
        v16 = v54;
        v17 = v54;
        if ((v54 & 0x80u) != 0)
          v16 = *((_QWORD *)&v53 + 1);
        if (v16)
        {
          siri::dialogengine::Context::AddValidationError((uint64_t)a2, &v53, 0);
          v4 = 0;
          v17 = v54;
        }
        if ((v17 & 0x80) != 0)
          operator delete((void *)v53);
        if (v46 < 0)
          operator delete(v45);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v18 = *(std::string **)(v15 + 8);
        if (v18)
        {
          do
          {
            v19 = v18;
            v18 = (std::string *)v18->__r_.__value_.__r.__words[0];
          }
          while (v18);
        }
        else
        {
          do
          {
            v19 = *(std::string **)(v15 + 16);
            v20 = v19->__r_.__value_.__r.__words[0] == v15;
            v15 = (std::string::size_type)v19;
          }
          while (!v20);
        }
        v15 = (std::string::size_type)v19;
      }
      while (v19 != (std::string *)&v47.__r_.__value_.__r.__words[1]);
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((_QWORD *)v47.__r_.__value_.__l.__size_);
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v48.__r_.__value_.__l.__data_);
      if (v7)
      {
LABEL_44:
        v21 = (unint64_t *)&v7->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    else if (v7)
    {
      goto LABEL_44;
    }
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v55;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  siri::dialogengine::GroupPhrases::GetPhrases(this, (uint64_t)&__p);
  v36 = __p.__r_.__value_.__l.__size_;
  v23 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0] != __p.__r_.__value_.__l.__size_)
  {
    do
    {
      v25 = *v23;
      v24 = v23[1];
      v38 = v23;
      v47.__r_.__value_.__r.__words[0] = *v23;
      v47.__r_.__value_.__l.__size_ = v24;
      if (v24)
      {
        v26 = (unint64_t *)(v24 + 8);
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      v37 = (std::__shared_weak_count *)v24;
      v28 = 0;
      v29 = 0;
      *(_QWORD *)&v53 = 1;
      do
      {
        v30 = v28;
        v31 = *((unsigned int *)&v53 + v29);
        if (*(char *)(v25 + 255) < 0)
          std::string::__init_copy_ctor_external(&v55, *(const std::string::value_type **)(v25 + 232), *(_QWORD *)(v25 + 240));
        else
          v55 = *(std::string *)(v25 + 232);
        v39 = 0;
        v40 = 0;
        v41 = 0;
        v48.__r_.__value_.__r.__words[0] = (std::string::size_type)&v39;
        v48.__r_.__value_.__s.__data_[8] = 0;
        v39 = (std::string *)operator new(0x18uLL);
        v40 = v39;
        v41 = v39 + 1;
        v40 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v41, (__int128 *)&v55, &v56, v39);
        v32 = siri::dialogengine::GroupPhrases::CheckForInfiniteLoop((uint64_t)this, (uint64_t)a2, v25, v25, v31, (__int128 **)&v39, 0);
        v48.__r_.__value_.__r.__words[0] = (std::string::size_type)&v39;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
        if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v55.__r_.__value_.__l.__data_);
        v4 &= v32;
        v28 = 1;
        v29 = 1;
      }
      while ((v30 & 1) == 0);
      if (v37)
      {
        v33 = (unint64_t *)&v37->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      v23 = v38 + 2;
    }
    while (v38 + 2 != (uint64_t *)v36);
  }
  v55.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
  std::__tree<std::string>::destroy((uint64_t)&v51, v52[0]);
  return v4 & 1;
}

void sub_1BF8A9ADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,char a45)
{
  uint64_t v45;

  std::__tree<std::string>::destroy(v45 - 192, *(char **)(v45 - 184));
  _Unwind_Resume(a1);
}

void siri::dialogengine::GroupPhrases::Execute(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void `non-virtual thunk to'siri::dialogengine::GroupPhrases::~GroupPhrases(siri::dialogengine::GroupPhrases *this)
{
  siri::dialogengine::Group::~Group((siri::dialogengine::GroupPhrases *)((char *)this - 64));
}

{
  siri::dialogengine::Group::~Group((siri::dialogengine::GroupPhrases *)((char *)this - 64));
  JUMPOUT(0x1C3B8D890);
}

uint64_t `non-virtual thunk to'siri::dialogengine::GroupPhrases::Validate(siri::dialogengine::GroupPhrases *this, siri::dialogengine::Context *a2)
{
  return siri::dialogengine::GroupPhrases::Validate((siri::dialogengine::GroupPhrases *)((char *)this - 64), a2);
}

void siri::dialogengine::GroupPhrases::GetPhrases(siri::dialogengine::GroupPhrases *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t i;
  const void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  const void *v18;
  std::__shared_weak_count *v19;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v2 = *((_QWORD *)this + 26);
  for (i = *((_QWORD *)this + 27); v2 != i; v2 += 16)
  {
    v5 = *(const void **)v2;
    v6 = *(std::__shared_weak_count **)(v2 + 8);
    v18 = *(const void **)v2;
    v19 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    if (v5
    {
      *(_QWORD *)&v17 = v9;
      *((_QWORD *)&v17 + 1) = v6;
      if (v6)
      {
        v10 = (unint64_t *)&v6->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      std::vector<std::shared_ptr<siri::dialogengine::Group>>::push_back[abi:ne180100]((char **)a2, &v17);
      if (v6)
      {
        v12 = (unint64_t *)&v6->__shared_owners_;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    else
    {
      v17 = 0uLL;
    }
    v14 = v19;
    if (v19)
    {
      v15 = (unint64_t *)&v19->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
}

void sub_1BF8A9DA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::GroupPhrases::CheckForInfiniteLoop(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __int128 **a6, int a7)
{
  uint64_t v11;
  _BOOL4 v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  _BOOL4 v19;
  uint64_t v20;
  void *v21;
  void *v22;
  int v23;
  int v24;
  char *v25;
  unint64_t *v26;
  unint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  const void *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  char *v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 *v38;
  __int128 *v39;
  uint64_t v40;
  _OWORD *size;
  __int128 v42;
  std::string::size_type v43;
  char *Phrase;
  char v45;
  char v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t *v58;
  int v60;
  std::string v63;
  void *__p[2];
  char v65;
  void *v66[2];
  char v67;
  std::string v68;
  char *v69;
  std::__shared_weak_count *v70;
  const void *v71;
  std::__shared_weak_count *v72;
  std::string v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  std::string v77;
  void *v78;
  char v79;
  void *v80;
  char v81;
  void *v82;
  char v83;
  void *v84;
  char v85;
  void *v86;
  char v87;
  void *v88;
  char v89;
  char *v90;
  std::__shared_weak_count *v91;
  std::string v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t v97;

  if (!a4)
    return 1;
  if (*(char *)(a4 + 143) < 0)
    std::string::__init_copy_ctor_external(&v77, *(const std::string::value_type **)(a4 + 120), *(_QWORD *)(a4 + 128));
  else
    v77 = *(std::string *)(a4 + 120);
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
  {
    v12 = v77.__r_.__value_.__l.__size_ == 0;
    operator delete(v77.__r_.__value_.__l.__data_);
  }
  else
  {
    v12 = SHIBYTE(v77.__r_.__value_.__r.__words[2]) == 0;
  }
  v95 = 0;
  v96 = 0;
  v97 = 0;
  std::vector<std::shared_ptr<siri::dialogengine::Node>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::Node>*,std::shared_ptr<siri::dialogengine::Node>*>((char *)&v95, *(_QWORD **)(a4 + 208), *(_QWORD **)(a4 + 216), (uint64_t)(*(_QWORD *)(a4 + 216) - *(_QWORD *)(a4 + 208)) >> 4);
  v13 = v95;
  v58 = v96;
  if (v95 == v96)
  {
    v11 = 1;
    goto LABEL_117;
  }
  v60 = !v12 | a7;
  v14 = v96;
  while (2)
  {
    v15 = *v13;
    v16 = (std::__shared_weak_count *)v13[1];
    v93 = *v13;
    v94 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }
    if (*(char *)(v15 + 143) < 0)
      std::string::__init_copy_ctor_external(&v77, *(const std::string::value_type **)(v15 + 120), *(_QWORD *)(v15 + 128));
    else
      v77 = *(std::string *)(v15 + 120);
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
    {
      v19 = v77.__r_.__value_.__l.__size_ == 0;
      operator delete(v77.__r_.__value_.__l.__data_);
    }
    else
    {
      v19 = SHIBYTE(v77.__r_.__value_.__r.__words[2]) == 0;
    }
    v20 = !v19 | v60;
    if (v21)
    {
      v22 = v21;
      memset(&v92, 0, sizeof(v92));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v92, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a6[1] - (char *)*a6) >> 3));
      v23 = siri::dialogengine::GroupPhrases::CheckForInfiniteLoop(a1, a2, a3, v22, a5, &v92, v20);
      v77.__r_.__value_.__r.__words[0] = (std::string::size_type)&v92;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v77);
      if (v23)
        v24 = 3;
      else
        v24 = 1;
      if (v16)
        goto LABEL_105;
      goto LABEL_109;
    }
    if (!v25)
    {
      v90 = 0;
      v91 = 0;
      goto LABEL_98;
    }
    v90 = v25;
    v91 = v16;
    if (v16)
    {
      v26 = (unint64_t *)&v16->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    siri::dialogengine::SpeakableString::SpeakableString(&v77, (const siri::dialogengine::SpeakableString *)(v25 + 208));
    if ((_DWORD)a5)
      siri::dialogengine::SpeakableString::GetPrintChunks((siri::dialogengine::SpeakableString *)&v77, v28, &v73);
    else
      siri::dialogengine::SpeakableString::GetSpeakChunks((siri::dialogengine::SpeakableString *)&v77, v28, &v73);
    v74 = 0;
    v75 = 0;
    v76 = 0;
    std::vector<std::shared_ptr<siri::dialogengine::ChunkText>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::dialogengine::ChunkText>*,std::shared_ptr<siri::dialogengine::ChunkText>*>((char *)&v74, v73.__r_.__value_.__l.__data_, (_QWORD *)v73.__r_.__value_.__l.__size_, (uint64_t)(v73.__r_.__value_.__l.__size_ - v73.__r_.__value_.__r.__words[0]) >> 4);
    v68.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
    v29 = v74;
    v30 = v75;
    if (v74 == v75)
    {
      v24 = 0;
      v46 = 1;
      goto LABEL_84;
    }
    while (1)
    {
      v31 = *(const void **)v29;
      v32 = *(std::__shared_weak_count **)(v29 + 8);
      v71 = *(const void **)v29;
      v72 = v32;
      if (v32)
      {
        v33 = (unint64_t *)&v32->__shared_owners_;
        do
          v34 = __ldxr(v33);
        while (__stxr(v34 + 1, v33));
      }
      if (!v31
      {
        v32 = 0;
        v69 = 0;
        v70 = 0;
LABEL_67:
        v46 = 1;
        if (!v32)
          goto LABEL_74;
        goto LABEL_68;
      }
      v69 = v35;
      v70 = v32;
      if (v32)
      {
        v36 = (unint64_t *)&v32->__shared_owners_;
        do
          v37 = __ldxr(v36);
        while (__stxr(v37 + 1, v36));
      }
      if (v35[223] < 0)
        std::string::__init_copy_ctor_external(&v73, *((const std::string::value_type **)v35 + 25), *((_QWORD *)v35 + 26));
      else
        v73 = *(std::string *)(v35 + 200);
      v39 = *a6;
      v38 = a6[1];
      v40 = std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>((uint64_t)*a6, (uint64_t)v38, (unsigned __int8 **)&v73);
      memset(&v68, 0, sizeof(v68));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v68, v39, v38, 0xAAAAAAAAAAAAAAABLL * (((char *)v38 - (char *)v39) >> 3));
      size = (_OWORD *)v68.__r_.__value_.__l.__size_;
      if (v68.__r_.__value_.__l.__size_ >= v68.__r_.__value_.__r.__words[2])
      {
        v43 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v68, (__int128 *)&v73);
      }
      else
      {
        if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v68.__r_.__value_.__l.__size_, v73.__r_.__value_.__l.__data_, v73.__r_.__value_.__l.__size_);
        }
        else
        {
          v42 = *(_OWORD *)&v73.__r_.__value_.__l.__data_;
          *(_QWORD *)(v68.__r_.__value_.__l.__size_ + 16) = *((_QWORD *)&v73.__r_.__value_.__l + 2);
          *size = v42;
        }
        v43 = (std::string::size_type)size + 24;
      }
      v68.__r_.__value_.__l.__size_ = v43;
      if ((__int128 *)v40 == v38)
      {
        Phrase = siri::dialogengine::GroupPhrases::GetPhrase(a1, (unsigned __int8 *)&v73);
        memset(&v63, 0, sizeof(v63));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v63, (__int128 *)v68.__r_.__value_.__l.__data_, (__int128 *)v68.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v68.__r_.__value_.__l.__size_ - v68.__r_.__value_.__r.__words[0]) >> 3));
        v45 = siri::dialogengine::GroupPhrases::CheckForInfiniteLoop(a1, a2, a3, Phrase, a5, &v63, v20);
        v66[0] = &v63;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v66);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(__p, " -> ");
        siri::dialogengine::StringJoinInternal<std::vector<std::string>>((uint64_t)v66, (uint64_t)v68.__r_.__value_.__l.__data_, v68.__r_.__value_.__l.__size_, (uint64_t)__p);
        if (v65 < 0)
          operator delete(__p[0]);
        std::operator+<char>();
        if (v60)
          siri::dialogengine::Context::AddValidationWarning(a2, (__int128 *)__p, a3);
        else
          siri::dialogengine::Context::AddValidationError(a2, (__int128 *)__p, a3);
        if (v65 < 0)
          operator delete(__p[0]);
        if (v67 < 0)
          operator delete(v66[0]);
        v45 = 0;
      }
      v66[0] = &v68;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v66);
      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v73.__r_.__value_.__l.__data_);
        if ((v45 & 1) != 0)
          goto LABEL_67;
      }
      else if ((v45 & 1) != 0)
      {
        goto LABEL_67;
      }
      v46 = 0;
      if (!v32)
        goto LABEL_74;
LABEL_68:
      v47 = (unint64_t *)&v32->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
LABEL_74:
      v49 = v72;
      if (v72)
      {
        v50 = (unint64_t *)&v72->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      if ((v46 & 1) == 0)
        break;
      v29 += 16;
      if (v29 == v30)
      {
        v24 = 0;
        goto LABEL_84;
      }
    }
    v24 = 1;
LABEL_84:
    v73.__r_.__value_.__r.__words[0] = (std::string::size_type)&v74;
    std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v73);
    v14 = v58;
    if (v89 < 0)
      operator delete(v88);
    if (v87 < 0)
      operator delete(v86);
    if (v85 < 0)
      operator delete(v84);
    if (v83 < 0)
      operator delete(v82);
    if (v81 < 0)
      operator delete(v80);
    if (v79 < 0)
      operator delete(v78);
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v77.__r_.__value_.__l.__data_);
      if ((v46 & 1) != 0)
LABEL_98:
        v24 = 0;
    }
    else if ((v46 & 1) != 0)
    {
      goto LABEL_98;
    }
    v52 = v91;
    if (v91)
    {
      v53 = (unint64_t *)&v91->__shared_owners_;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    v16 = v94;
    if (v94)
    {
LABEL_105:
      v55 = (unint64_t *)&v16->__shared_owners_;
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
LABEL_109:
    if (v24 == 3 || !v24)
    {
      v13 += 2;
      if (v13 == v14)
      {
        v11 = 1;
        goto LABEL_117;
      }
      continue;
    }
    break;
  }
  v11 = 0;
LABEL_117:
  v77.__r_.__value_.__r.__words[0] = (std::string::size_type)&v95;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v77);
  return v11;
}

void sub_1BF8AA4D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,char a35,uint64_t a36,char *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  uint64_t v46;

  a24 = &a30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  if (a42 < 0)
    operator delete(__p);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  __p = &a43;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  siri::dialogengine::SpeakableString::~SpeakableString((void **)&a46);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v46 - 168);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v46 - 128);
  a46 = v46 - 112;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a46);
  _Unwind_Resume(a1);
}

char *siri::dialogengine::GroupPhrases::GetPhrase(uint64_t a1, unsigned __int8 *a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  const void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  char *v11;
  std::string::size_type size;
  uint64_t v13;
  int v14;
  uint64_t v15;
  std::string *p_p;
  int v17;
  int v18;
  int v19;
  int v20;
  BOOL v22;
  _BOOL4 v23;
  void *v24;
  int v25;
  unint64_t *v26;
  unint64_t v27;
  std::string __p;
  const void *v30;
  std::__shared_weak_count *v31;

  v3 = *(_QWORD *)(a1 + 208);
  v4 = *(_QWORD *)(a1 + 216);
  if (v3 != v4)
  {
    v5 = a2;
    do
    {
      v6 = *(const void **)v3;
      v7 = *(std::__shared_weak_count **)(v3 + 8);
      v30 = *(const void **)v3;
      v31 = v7;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }
      if (!v6)
        goto LABEL_36;
      if (!v10)
        goto LABEL_36;
      v11 = v10;
      if (v10[255] < 0)
        std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v10 + 29), *((_QWORD *)v10 + 30));
      else
        __p = *(std::string *)(v10 + 232);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      v13 = v5[23];
      v14 = (char)v13;
      if ((v13 & 0x80u) != 0)
        v13 = *((_QWORD *)v5 + 1);
      if (size == v13)
      {
        if (v14 >= 0)
          a2 = v5;
        else
          a2 = *(unsigned __int8 **)v5;
        if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          v24 = (void *)__p.__r_.__value_.__r.__words[0];
          v25 = memcmp(__p.__r_.__value_.__l.__data_, a2, __p.__r_.__value_.__l.__size_);
          operator delete(v24);
          if (!v25)
          {
LABEL_33:
            LOBYTE(v23) = 1;
            if (v7)
              goto LABEL_38;
            goto LABEL_42;
          }
          goto LABEL_36;
        }
        if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
          goto LABEL_33;
        v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1;
        p_p = &__p;
        do
        {
          v18 = p_p->__r_.__value_.__s.__data_[0];
          p_p = (std::string *)((char *)p_p + 1);
          v17 = v18;
          v20 = *a2++;
          v19 = v20;
          v22 = v15-- != 0;
          v23 = v17 == v19;
        }
        while (v17 == v19 && v22);
        if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
        {
LABEL_32:
          operator delete(__p.__r_.__value_.__l.__data_);
          if (v23)
            goto LABEL_33;
LABEL_36:
          LOBYTE(v23) = 0;
          goto LABEL_37;
        }
      }
      else
      {
        v23 = 0;
        if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
          goto LABEL_32;
      }
      if (v23)
        goto LABEL_33;
LABEL_37:
      v11 = v2;
      if (v7)
      {
LABEL_38:
        v26 = (unint64_t *)&v7->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *, unsigned __int8 *))v7->__on_zero_shared)(v7, a2);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
LABEL_42:
      if (v23)
        return v11;
      v3 += 16;
      v2 = v11;
    }
    while (v3 != v4);
  }
  return 0;
}

void sub_1BF8AA7E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<siri::dialogengine::Group>>::push_back[abi:ne180100](char **a1, __int128 *a2)
{
  unint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  unint64_t *v18;
  unint64_t v19;
  char *v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  void *v24;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v10 = *a1;
    v11 = (v5 - *a1) >> 4;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60)
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    v13 = v4 - (_QWORD)v10;
    if (v13 >> 3 > v12)
      v12 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v15 = (char *)operator new(16 * v14);
    v16 = &v15[16 * v11];
    v17 = *a2;
    *(_OWORD *)v16 = *a2;
    if (*((_QWORD *)&v17 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
      v10 = *a1;
      v5 = a1[1];
    }
    if (v5 == v10)
    {
      v22 = vdupq_n_s64((unint64_t)v5);
      v20 = &v15[16 * v11];
    }
    else
    {
      v20 = &v15[16 * v11];
      do
      {
        v21 = *((_OWORD *)v5 - 1);
        v5 -= 16;
        *((_OWORD *)v20 - 1) = v21;
        v20 -= 16;
        *(_QWORD *)v5 = 0;
        *((_QWORD *)v5 + 1) = 0;
      }
      while (v5 != v10);
      v22 = *(int64x2_t *)a1;
    }
    v9 = v16 + 16;
    *a1 = v20;
    a1[1] = v16 + 16;
    a1[2] = &v15[16 * v14];
    v23 = v22.i64[1];
    v24 = (void *)v22.i64[0];
    while ((void *)v23 != v24)
      v23 = std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v23 - 16);
    if (v24)
      operator delete(v24);
  }
  else
  {
    v6 = *((_QWORD *)a2 + 1);
    *(_QWORD *)v5 = *(_QWORD *)a2;
    *((_QWORD *)v5 + 1) = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = v5 + 16;
  }
  a1[1] = v9;
}

double siri::dialogengine::GroupPhrases::GroupPhrases(siri::dialogengine::GroupPhrases *this)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 9) = (char *)this + 80;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_DWORD *)this + 48) = 1065353216;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *((_QWORD *)this + 31) = 0;
  *(_QWORD *)this = &off_1E792BC50;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = &unk_1E792BCA8;
  return result;
}

{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 9) = (char *)this + 80;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_DWORD *)this + 48) = 1065353216;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *((_QWORD *)this + 31) = 0;
  *(_QWORD *)this = &off_1E792BC50;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = &unk_1E792BCA8;
  return result;
}

void siri::dialogengine::ConditionExpression::~ConditionExpression(siri::dialogengine::ConditionExpression *this)
{
  void **v2;

  *(_QWORD *)this = off_1E792BCD0;
  *((_QWORD *)this + 11) = &unk_1E792BD10;
  v2 = (void **)((char *)this + 88);
  if (*((char *)this + 223) < 0)
    operator delete(*((void **)this + 25));
  if (*((char *)this + 199) < 0)
    operator delete(*((void **)this + 22));
  if (*((char *)this + 175) < 0)
    operator delete(*((void **)this + 19));
  siri::dialogengine::LineNumberBase::~LineNumberBase(v2);
  siri::dialogengine::ConditionEntry::~ConditionEntry((void **)this);
}

{
  void **v2;

  *(_QWORD *)this = off_1E792BCD0;
  *((_QWORD *)this + 11) = &unk_1E792BD10;
  v2 = (void **)((char *)this + 88);
  if (*((char *)this + 223) < 0)
    operator delete(*((void **)this + 25));
  if (*((char *)this + 199) < 0)
    operator delete(*((void **)this + 22));
  if (*((char *)this + 175) < 0)
    operator delete(*((void **)this + 19));
  siri::dialogengine::LineNumberBase::~LineNumberBase(v2);
  siri::dialogengine::ConditionEntry::~ConditionEntry((void **)this);
  JUMPOUT(0x1C3B8D890);
}

siri::dialogengine::Context *siri::dialogengine::ConditionExpression::Validate(siri::dialogengine::ConditionExpression *this, siri::dialogengine::Context *a2)
{
  siri::dialogengine::Context *v2;
  std::string::size_type v4;
  std::string::size_type v5;
  void *v6;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;
  const char *v11;
  std::string *v12;
  std::string::size_type size;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  std::string::size_type v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  uint64_t v26;
  std::string *v27;
  __int128 v28;
  std::string v29;
  std::string v30;
  std::string __p[5];
  std::string v32;
  char v33;
  std::string v34;
  std::string v35;
  std::string v36;
  std::string v37;

  v2 = a2;
  if (!a2)
    return v2;
  if (!siri::dialogengine::ConditionEntry::Validate((const void ***)this, a2))
    return 0;
  if ((*((char *)this + 175) & 0x80000000) == 0)
  {
    if (*((_BYTE *)this + 175))
      goto LABEL_5;
    goto LABEL_19;
  }
  if (!*((_QWORD *)this + 20))
  {
LABEL_19:
    std::string::basic_string[abi:ne180100]<0>(__p, "Condition expression has no name");
    siri::dialogengine::Context::AddValidationError((uint64_t)v2, (__int128 *)__p, (uint64_t)this + 88);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    {
      v6 = (void *)__p[0].__r_.__value_.__r.__words[0];
LABEL_41:
      operator delete(v6);
    }
    return 0;
  }
LABEL_5:
  if (!siri::dialogengine::IsPropertyValidForType((_BOOL8)v2, (unsigned __int8 *)this + 152))
  {
    std::operator+<char>();
    v7 = std::string::append(&v37, "'");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    __p[0].__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationError((uint64_t)v2, (__int128 *)__p, (uint64_t)this + 88);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return 0;
    v6 = (void *)v37.__r_.__value_.__r.__words[0];
    goto LABEL_41;
  }
  if ((siri::dialogengine::IsPropertyValidForLocale((uint64_t)v2, (unsigned __int8 *)this + 152) & 1) == 0)
  {
    std::operator+<char>();
    v9 = std::string::append(&v35, "' is not valid for locale '");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v36.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::GetLocale(v2, v11, (uint64_t)&v34);
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = &v34;
    else
      v12 = (std::string *)v34.__r_.__value_.__r.__words[0];
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v34.__r_.__value_.__r.__words[2]);
    else
      size = v34.__r_.__value_.__l.__size_;
    v14 = std::string::append(&v36, (const std::string::value_type *)v12, size);
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v16 = std::string::append(&v37, "'");
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    __p[0].__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationError((uint64_t)v2, (__int128 *)__p, (uint64_t)this + 88);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v36.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return 0;
    v6 = (void *)v35.__r_.__value_.__r.__words[0];
    goto LABEL_41;
  }
  siri::dialogengine::ValidateVariableVersion((uint64_t)v2, (uint64_t)this + 152, &v37);
  v4 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
  if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v4 = v37.__r_.__value_.__l.__size_;
  if (!v4)
  {
    siri::dialogengine::ValidateVariableVersion((uint64_t)v2, (uint64_t)this + 200, __p);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
    v37 = __p[0];
    v5 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v5 = v37.__r_.__value_.__l.__size_;
    if (!v5)
    {
      __p[0].__r_.__value_.__s.__data_[0] = 0;
      v33 = 0;
      siri::dialogengine::ResolveType((void **)&__p[0].__r_.__value_.__l.__data_, (uint64_t)v2, (uint64_t)this + 152, 1, (uint64_t)&v36);
      if (v33)
      {
        if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v35, v32.__r_.__value_.__l.__data_, v32.__r_.__value_.__l.__size_);
        else
          v35 = v32;
        if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v19 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
        else
          v19 = v35.__r_.__value_.__l.__size_;
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v35.__r_.__value_.__l.__data_);
        if (v19)
        {
          std::operator+<char>();
          v20 = std::string::append(&v30, "' is deprecated: ");
          v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
          v34.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v21;
          v20->__r_.__value_.__l.__size_ = 0;
          v20->__r_.__value_.__r.__words[2] = 0;
          v20->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v29, v32.__r_.__value_.__l.__data_, v32.__r_.__value_.__l.__size_);
          else
            v29 = v32;
          if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v22 = &v29;
          else
            v22 = (std::string *)v29.__r_.__value_.__r.__words[0];
          if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v23 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
          else
            v23 = v29.__r_.__value_.__l.__size_;
          v24 = std::string::append(&v34, (const std::string::value_type *)v22, v23);
          v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
          v35.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v25;
          v24->__r_.__value_.__l.__size_ = 0;
          v24->__r_.__value_.__r.__words[2] = 0;
          v24->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Context::AddValidationWarning((uint64_t)v2, (__int128 *)&v35, (uint64_t)this + 88);
          if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v35.__r_.__value_.__l.__data_);
          if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v29.__r_.__value_.__l.__data_);
          if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v34.__r_.__value_.__l.__data_);
          if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v30.__r_.__value_.__l.__data_);
        }
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v36, siri::dialogengine::TYPE_BOOLEAN))
      {
        v26 = siri::dialogengine::ConditionExpression::ValidateBoolean(this, v2);
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v36, siri::dialogengine::TYPE_STRING[0]))
      {
        v26 = siri::dialogengine::ConditionExpression::ValidateString(this, v2);
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v36, siri::dialogengine::TYPE_NUMBER[0]))
      {
        v26 = siri::dialogengine::ConditionExpression::ValidateNumber(this, v2);
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v36, (char *)siri::dialogengine::TYPE_DIALOG_CALENDAR))
      {
        v26 = siri::dialogengine::ConditionExpression::ValidateDialogCalendar(this, v2);
      }
      else if (siri::dialogengine::IsArrayType(&v36)
             || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v36, (char *)siri::dialogengine::TYPE_ARRAY))
      {
        v26 = siri::dialogengine::ConditionExpression::ValidateArray(this, v2);
      }
      else
      {
        if (!std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v36, siri::dialogengine::TYPE_UNKNOWN))
        {
          std::operator+<char>();
          v27 = std::string::append(&v34, "'");
          v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
          v35.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v28;
          v27->__r_.__value_.__l.__size_ = 0;
          v27->__r_.__value_.__r.__words[2] = 0;
          v27->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Context::AddValidationError((uint64_t)v2, (__int128 *)&v35, (uint64_t)this + 88);
          if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v35.__r_.__value_.__l.__data_);
          if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v34.__r_.__value_.__l.__data_);
          v2 = 0;
          goto LABEL_83;
        }
        v26 = siri::dialogengine::ConditionExpression::ValidateOther((uint64_t)this, (uint64_t)v2, (uint64_t)&v36);
      }
      v2 = (siri::dialogengine::Context *)v26;
LABEL_83:
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v36.__r_.__value_.__l.__data_);
      if (v33)
        siri::dialogengine::ObjectProperty::~ObjectProperty((void **)&__p[0].__r_.__value_.__l.__data_);
      goto LABEL_16;
    }
  }
  siri::dialogengine::Context::AddValidationError((uint64_t)v2, (__int128 *)&v37, (uint64_t)this + 88);
  v2 = 0;
LABEL_16:
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  return v2;
}

void sub_1BF8AB0A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  uint64_t v54;

  if (*(char *)(v54 - 121) < 0)
    operator delete(*(void **)(v54 - 144));
  if (*(char *)(v54 - 153) < 0)
    operator delete(*(void **)(v54 - 176));
  if (*(char *)(v54 - 89) < 0)
    operator delete(*(void **)(v54 - 112));
  if (a54)
    siri::dialogengine::ObjectProperty::~ObjectProperty(&a21);
  if (*(char *)(v54 - 57) < 0)
    operator delete(*(void **)(v54 - 80));
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::ConditionExpression::operator==(uint64_t a1, const void *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  const void **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  const void **v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  const void **v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  int v31;
  BOOL v33;

  result = siri::dialogengine::ConditionEntry::operator==(a1, (uint64_t)a2);
  if (!(_DWORD)result)
    return result;
  if (!result)
    return result;
  v5 = result;
  v6 = *(unsigned __int8 *)(a1 + 175);
  if ((v6 & 0x80u) == 0)
    v7 = *(unsigned __int8 *)(a1 + 175);
  else
    v7 = *(_QWORD *)(a1 + 160);
  v8 = *(unsigned __int8 *)(result + 175);
  v9 = (char)v8;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(result + 160);
  if (v7 != v8)
    return 0;
  v10 = (const void **)(a1 + 152);
  if (v9 >= 0)
    v11 = (unsigned __int8 *)(result + 152);
  else
    v11 = *(unsigned __int8 **)(result + 152);
  if ((v6 & 0x80) != 0)
  {
    if (memcmp(*v10, v11, *(_QWORD *)(a1 + 160)))
      return 0;
  }
  else if (*(_BYTE *)(a1 + 175))
  {
    while (*(unsigned __int8 *)v10 == *v11)
    {
      v10 = (const void **)((char *)v10 + 1);
      ++v11;
      if (!--v6)
        goto LABEL_18;
    }
    return 0;
  }
LABEL_18:
  v12 = *(unsigned __int8 *)(a1 + 199);
  if ((v12 & 0x80u) == 0)
    v13 = *(unsigned __int8 *)(a1 + 199);
  else
    v13 = *(_QWORD *)(a1 + 184);
  v14 = *(unsigned __int8 *)(v5 + 199);
  v15 = (char)v14;
  if ((v14 & 0x80u) != 0)
    v14 = *(_QWORD *)(v5 + 184);
  if (v13 != v14)
    return 0;
  v16 = (const void **)(a1 + 176);
  if (v15 >= 0)
    v17 = (unsigned __int8 *)(v5 + 176);
  else
    v17 = *(unsigned __int8 **)(v5 + 176);
  if ((v12 & 0x80) != 0)
  {
    if (!memcmp(*v16, v17, *(_QWORD *)(a1 + 184)))
      goto LABEL_33;
    return 0;
  }
  if (*(_BYTE *)(a1 + 199))
  {
    while (*(unsigned __int8 *)v16 == *v17)
    {
      v16 = (const void **)((char *)v16 + 1);
      ++v17;
      if (!--v12)
        goto LABEL_33;
    }
    return 0;
  }
LABEL_33:
  v18 = *(unsigned __int8 *)(a1 + 223);
  if ((v18 & 0x80u) == 0)
    v19 = *(unsigned __int8 *)(a1 + 223);
  else
    v19 = *(_QWORD *)(a1 + 208);
  v20 = *(unsigned __int8 *)(v5 + 223);
  v21 = (char)v20;
  if ((v20 & 0x80u) != 0)
    v20 = *(_QWORD *)(v5 + 208);
  if (v19 != v20)
    return 0;
  v22 = (const void **)(a1 + 200);
  v25 = *(unsigned __int8 **)(v5 + 200);
  v24 = (unsigned __int8 *)(v5 + 200);
  v23 = v25;
  if (v21 >= 0)
    v26 = v24;
  else
    v26 = v23;
  if ((v18 & 0x80) != 0)
    return memcmp(*v22, v26, *(_QWORD *)(a1 + 208)) == 0;
  if (!*(_BYTE *)(a1 + 223))
    return 1;
  v27 = v18 - 1;
  do
  {
    v29 = *(unsigned __int8 *)v22;
    v22 = (const void **)((char *)v22 + 1);
    v28 = v29;
    v31 = *v26++;
    v30 = v31;
    v33 = v27-- != 0;
    result = v28 == v30;
  }
  while (v28 == v30 && v33);
  return result;
}

uint64_t siri::dialogengine::ConditionExpression::operator!=(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) ^ 1;
}

uint64_t siri::dialogengine::ConditionExpression::Evaluate(siri::dialogengine::ConditionExpression *this, siri::dialogengine::Context *a2, siri::dialogengine::ExecutionState *a3)
{
  char *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v12;
  int v13;
  std::string::size_type size;
  size_t v16;
  size_t v17;
  size_t v18;
  std::string *v19;
  size_t v20;
  char *v21;
  size_t v22;
  std::string *v23;
  char *v24;
  size_t v25;
  std::string *v26;
  const void *v27;
  size_t v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  std::string *v37;
  const void *v38;
  size_t v39;
  std::string *v40;
  const void *v41;
  uint64_t v42;
  size_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  std::string *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  std::string *v60;
  __int128 v61;
  int v62;
  const std::string::value_type *v63;
  std::string::size_type v64;
  std::string *v65;
  __int128 v66;
  std::string *v67;
  __int128 v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::string v73;
  std::string v74;
  std::string v75;
  uint64_t v76[2];
  const void *v77[2];
  _QWORD v78[2];
  _QWORD v79[2];
  _QWORD v80[2];
  _QWORD v81[2];
  std::string v82;
  std::string v83;
  uint64_t v84;
  std::__shared_weak_count *v85;

  if (!a2)
    return 0;
  std::string::basic_string[abi:ne180100]<0>(&v83, "");
  std::string::basic_string[abi:ne180100]<0>(&v82, "");
  siri::dialogengine::ResolveValue((uint64_t)a2, (uint64_t)this + 152, 1, (uint64_t)&v83, (uint64_t)&v82, &v84);
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v82.__r_.__value_.__l.__data_);
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v83.__r_.__value_.__l.__data_);
  v5 = (char *)this + 176;
  if (*((char *)this + 199) < 0)
  {
    v8 = *((_QWORD *)this + 23);
    if (v8 != 7)
    {
      if (v8 != 9)
        goto LABEL_25;
      v5 = *(char **)v5;
LABEL_14:
      v9 = *(_QWORD *)v5;
      v10 = v5[8];
      if (v9 != 0x656E696665646E75 || v10 != 100)
        goto LABEL_25;
      v7 = v84 == 0;
      goto LABEL_159;
    }
    v5 = *(char **)v5;
  }
  else
  {
    v6 = *((unsigned __int8 *)this + 199);
    if (v6 != 7)
    {
      if (v6 != 9)
        goto LABEL_25;
      goto LABEL_14;
    }
  }
  v12 = *(_DWORD *)v5;
  v13 = *(_DWORD *)(v5 + 3);
  if (v12 != 1768318308 || v13 != 1684369001)
  {
LABEL_25:
    siri::dialogengine::ResolveType(0, (uint64_t)a2, (uint64_t)this + 152, 1, (uint64_t)&v83);
    size = HIBYTE(v83.__r_.__value_.__r.__words[2]);
    if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v83.__r_.__value_.__l.__size_;
    if (size || !v84)
    {
LABEL_33:
      if (siri::dialogengine::IsArrayType(&v83))
      {
        std::string::basic_string[abi:ne180100]<0>(&v82, (char *)siri::dialogengine::TYPE_ARRAY);
      }
      else
      {
        if ((SHIBYTE(v83.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          v82 = v83;
          goto LABEL_40;
        }
        std::string::__init_copy_ctor_external(&v82, v83.__r_.__value_.__l.__data_, v83.__r_.__value_.__l.__size_);
      }
      if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v83.__r_.__value_.__l.__data_);
LABEL_40:
      v83 = v82;
      v16 = strlen(siri::dialogengine::TYPE_BOOLEAN);
      v17 = v16;
      v18 = HIBYTE(v82.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
      {
        v20 = v83.__r_.__value_.__l.__size_;
        if (v16 != v83.__r_.__value_.__l.__size_)
        {
          v21 = siri::dialogengine::TYPE_STRING[0];
          v22 = strlen(siri::dialogengine::TYPE_STRING[0]);
          goto LABEL_54;
        }
        if (v16 == -1)
          std::string::__throw_out_of_range[abi:ne180100]();
        v19 = (std::string *)v83.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (v16 != HIBYTE(v83.__r_.__value_.__r.__words[2]))
        {
          v21 = siri::dialogengine::TYPE_STRING[0];
          v22 = strlen(siri::dialogengine::TYPE_STRING[0]);
          goto LABEL_50;
        }
        v19 = &v83;
      }
      if (!memcmp(v19, siri::dialogengine::TYPE_BOOLEAN, v17))
      {
        v29 = v85;
        v81[0] = v84;
        v81[1] = v85;
        if (v85)
        {
          p_shared_owners = (unint64_t *)&v85->__shared_owners_;
          do
            v31 = __ldxr(p_shared_owners);
          while (__stxr(v31 + 1, p_shared_owners));
        }
        v7 = siri::dialogengine::ConditionExpression::EvaluateBoolean((uint64_t)this, (uint64_t)a2, (uint64_t)v81);
        if (!v29)
          goto LABEL_157;
        v32 = (unint64_t *)&v29->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        goto LABEL_139;
      }
      v21 = siri::dialogengine::TYPE_STRING[0];
      v22 = strlen(siri::dialogengine::TYPE_STRING[0]);
      if ((v18 & 0x80) != 0)
      {
        v20 = v83.__r_.__value_.__l.__size_;
LABEL_54:
        if (v22 != v20)
        {
          v24 = siri::dialogengine::TYPE_NUMBER[0];
          v25 = strlen(siri::dialogengine::TYPE_NUMBER[0]);
          goto LABEL_79;
        }
        if (v20 == -1)
          std::string::__throw_out_of_range[abi:ne180100]();
        v23 = (std::string *)v83.__r_.__value_.__r.__words[0];
LABEL_57:
        if (!memcmp(v23, v21, v20))
        {
          v29 = v85;
          v80[0] = v84;
          v80[1] = v85;
          if (v85)
          {
            v34 = (unint64_t *)&v85->__shared_owners_;
            do
              v35 = __ldxr(v34);
            while (__stxr(v35 + 1, v34));
          }
          v7 = siri::dialogengine::ConditionExpression::EvaluateString((uint64_t)this, (uint64_t)a2, (uint64_t)v80);
          if (!v29)
            goto LABEL_157;
          v36 = (unint64_t *)&v29->__shared_owners_;
          do
            v33 = __ldaxr(v36);
          while (__stlxr(v33 - 1, v36));
          goto LABEL_139;
        }
        v24 = siri::dialogengine::TYPE_NUMBER[0];
        v25 = strlen(siri::dialogengine::TYPE_NUMBER[0]);
        if ((v18 & 0x80) == 0)
          goto LABEL_59;
        v20 = v83.__r_.__value_.__l.__size_;
LABEL_79:
        if (v25 != v20)
        {
          v27 = (const void *)siri::dialogengine::TYPE_DIALOG_CALENDAR;
          v28 = strlen((const char *)siri::dialogengine::TYPE_DIALOG_CALENDAR);
          goto LABEL_88;
        }
        if (v20 == -1)
          std::string::__throw_out_of_range[abi:ne180100]();
        v26 = (std::string *)v83.__r_.__value_.__r.__words[0];
LABEL_82:
        if (!memcmp(v26, v24, v20))
        {
          v29 = v85;
          v79[0] = v84;
          v79[1] = v85;
          if (v85)
          {
            v44 = (unint64_t *)&v85->__shared_owners_;
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
          }
          v7 = siri::dialogengine::ConditionExpression::EvaluateNumber((uint64_t)this, (uint64_t)a2, (uint64_t)v79);
          if (!v29)
            goto LABEL_157;
          v46 = (unint64_t *)&v29->__shared_owners_;
          do
            v33 = __ldaxr(v46);
          while (__stlxr(v33 - 1, v46));
          goto LABEL_139;
        }
        v27 = (const void *)siri::dialogengine::TYPE_DIALOG_CALENDAR;
        v28 = strlen((const char *)siri::dialogengine::TYPE_DIALOG_CALENDAR);
        if ((v18 & 0x80) == 0)
          goto LABEL_84;
LABEL_88:
        if (v28 != v83.__r_.__value_.__l.__size_)
        {
          v38 = (const void *)siri::dialogengine::TYPE_ARRAY;
          v39 = strlen((const char *)siri::dialogengine::TYPE_ARRAY);
          goto LABEL_104;
        }
        if (v28 == -1)
          std::string::__throw_out_of_range[abi:ne180100]();
        v37 = (std::string *)v83.__r_.__value_.__r.__words[0];
LABEL_91:
        if (!memcmp(v37, v27, v28))
        {
          v29 = v85;
          v78[0] = v84;
          v78[1] = v85;
          if (v85)
          {
            v48 = (unint64_t *)&v85->__shared_owners_;
            do
              v49 = __ldxr(v48);
            while (__stxr(v49 + 1, v48));
          }
          v7 = siri::dialogengine::ConditionExpression::EvaluateDialogCalendar((uint64_t)this, a2, (uint64_t)v78);
          if (!v29)
            goto LABEL_157;
          v50 = (unint64_t *)&v29->__shared_owners_;
          do
            v33 = __ldaxr(v50);
          while (__stlxr(v33 - 1, v50));
          goto LABEL_139;
        }
        v38 = (const void *)siri::dialogengine::TYPE_ARRAY;
        v39 = strlen((const char *)siri::dialogengine::TYPE_ARRAY);
        if ((v18 & 0x80) == 0)
          goto LABEL_93;
LABEL_104:
        if (v39 != v83.__r_.__value_.__l.__size_)
        {
          v41 = (const void *)siri::dialogengine::TYPE_UNKNOWN;
          v43 = strlen(siri::dialogengine::TYPE_UNKNOWN);
          goto LABEL_121;
        }
        if (v39 == -1)
          std::string::__throw_out_of_range[abi:ne180100]();
        v40 = (std::string *)v83.__r_.__value_.__r.__words[0];
        goto LABEL_107;
      }
LABEL_50:
      if (v22 != v18)
      {
        v24 = siri::dialogengine::TYPE_NUMBER[0];
        v25 = strlen(siri::dialogengine::TYPE_NUMBER[0]);
LABEL_59:
        if (v25 != v18)
        {
          v27 = (const void *)siri::dialogengine::TYPE_DIALOG_CALENDAR;
          v28 = strlen((const char *)siri::dialogengine::TYPE_DIALOG_CALENDAR);
LABEL_84:
          if (v28 != v18)
          {
            v38 = (const void *)siri::dialogengine::TYPE_ARRAY;
            v39 = strlen((const char *)siri::dialogengine::TYPE_ARRAY);
LABEL_93:
            if (v39 != v18)
            {
              v41 = (const void *)siri::dialogengine::TYPE_UNKNOWN;
              v43 = strlen(siri::dialogengine::TYPE_UNKNOWN);
              goto LABEL_109;
            }
            v40 = &v83;
LABEL_107:
            if (memcmp(v40, v38, v39))
            {
              v41 = (const void *)siri::dialogengine::TYPE_UNKNOWN;
              v43 = strlen(siri::dialogengine::TYPE_UNKNOWN);
              if ((v18 & 0x80) == 0)
              {
LABEL_109:
                if (v43 == v18)
                {
                  v47 = &v83;
                  goto LABEL_124;
                }
                goto LABEL_125;
              }
LABEL_121:
              if (v43 == v83.__r_.__value_.__l.__size_)
              {
                if (v43 == -1)
                  std::string::__throw_out_of_range[abi:ne180100]();
                v47 = (std::string *)v83.__r_.__value_.__r.__words[0];
LABEL_124:
                if (!memcmp(v47, v41, v43))
                {
                  std::operator+<char>();
                  v60 = std::string::append(&v73, "' for variable: '");
                  v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
                  v74.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v61;
                  v60->__r_.__value_.__l.__size_ = 0;
                  v60->__r_.__value_.__r.__words[2] = 0;
                  v60->__r_.__value_.__r.__words[0] = 0;
                  v62 = *((char *)this + 175);
                  if (v62 >= 0)
                    v63 = (char *)this + 152;
                  else
                    v63 = (const std::string::value_type *)*((_QWORD *)this + 19);
                  if (v62 >= 0)
                    v64 = *((unsigned __int8 *)this + 175);
                  else
                    v64 = *((_QWORD *)this + 20);
                  v65 = std::string::append(&v74, v63, v64);
                  v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
                  v75.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v66;
                  v65->__r_.__value_.__l.__size_ = 0;
                  v65->__r_.__value_.__r.__words[2] = 0;
                  v65->__r_.__value_.__r.__words[0] = 0;
                  v67 = std::string::append(&v75, "'");
                  v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
                  v82.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v68;
                  v67->__r_.__value_.__l.__size_ = 0;
                  v67->__r_.__value_.__r.__words[2] = 0;
                  v67->__r_.__value_.__r.__words[0] = 0;
                  siri::dialogengine::Log::LogWithLevel((uint64_t)&v82, 3u);
                  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v82.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v75.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v74.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v73.__r_.__value_.__l.__data_);
                  v7 = 0;
                  goto LABEL_157;
                }
              }
LABEL_125:
              v51 = v85;
              v76[0] = v84;
              v76[1] = (uint64_t)v85;
              if (v85)
              {
                v52 = (unint64_t *)&v85->__shared_owners_;
                do
                  v53 = __ldxr(v52);
                while (__stxr(v53 + 1, v52));
              }
              v7 = siri::dialogengine::ConditionExpression::EvaluateOther((uint64_t)this, v42, v76, (uint64_t)&v83);
              if (!v51)
                goto LABEL_157;
              v54 = (unint64_t *)&v51->__shared_owners_;
              do
                v55 = __ldaxr(v54);
              while (__stlxr(v55 - 1, v54));
              if (v55)
                goto LABEL_157;
              ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
              v56 = v51;
              goto LABEL_141;
            }
            v29 = v85;
            v77[0] = (const void *)v84;
            v77[1] = v85;
            if (v85)
            {
              v57 = (unint64_t *)&v85->__shared_owners_;
              do
                v58 = __ldxr(v57);
              while (__stxr(v58 + 1, v57));
            }
            v7 = siri::dialogengine::ConditionExpression::EvaluateArray((uint64_t)this, a2, v77);
            if (!v29)
              goto LABEL_157;
            v59 = (unint64_t *)&v29->__shared_owners_;
            do
              v33 = __ldaxr(v59);
            while (__stlxr(v33 - 1, v59));
LABEL_139:
            if (v33)
              goto LABEL_157;
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            v56 = v29;
LABEL_141:
            std::__shared_weak_count::__release_weak(v56);
LABEL_157:
            if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v83.__r_.__value_.__l.__data_);
            goto LABEL_159;
          }
          v37 = &v83;
          goto LABEL_91;
        }
        v26 = &v83;
        v20 = v18;
        goto LABEL_82;
      }
      v23 = &v83;
      v20 = v18;
      goto LABEL_57;
    }
    if (*(char *)(v84 + 55) < 0)
    {
      std::string::__init_copy_ctor_external(&v82, *(const std::string::value_type **)(v84 + 32), *(_QWORD *)(v84 + 40));
      if ((*((_BYTE *)&v83.__r_.__value_.__s + 23) & 0x80) == 0)
        goto LABEL_32;
    }
    else
    {
      v82 = *(std::string *)(v84 + 32);
      if ((*((_BYTE *)&v83.__r_.__value_.__s + 23) & 0x80) == 0)
      {
LABEL_32:
        v83 = v82;
        goto LABEL_33;
      }
    }
    operator delete(v83.__r_.__value_.__l.__data_);
    goto LABEL_32;
  }
  v7 = v84 != 0;
LABEL_159:
  v69 = v85;
  if (v85)
  {
    v70 = (unint64_t *)&v85->__shared_owners_;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  return v7;
}

void sub_1BF8ABCAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33,char a34,uint64_t a35,char a36,uint64_t a37,char a38)
{
  uint64_t v38;

  if (*(char *)(v38 - 121) < 0)
    operator delete(*(void **)(v38 - 144));
  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  if (*(char *)(v38 - 89) < 0)
    operator delete(*(void **)(v38 - 112));
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v38 - 80);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'siri::dialogengine::ConditionExpression::~ConditionExpression(siri::dialogengine::ConditionExpression *this)
{
  void **v2;

  *((_QWORD *)this - 11) = off_1E792BCD0;
  v2 = (void **)((char *)this - 88);
  *(_QWORD *)this = &unk_1E792BD10;
  if (*((char *)this + 135) < 0)
    operator delete(*((void **)this + 14));
  if (*((char *)this + 111) < 0)
    operator delete(*((void **)this + 11));
  if (*((char *)this + 87) < 0)
    operator delete(*((void **)this + 8));
  siri::dialogengine::LineNumberBase::~LineNumberBase((void **)this);
  siri::dialogengine::ConditionEntry::~ConditionEntry(v2);
}

{
  void **v2;

  *((_QWORD *)this - 11) = off_1E792BCD0;
  v2 = (void **)((char *)this - 88);
  *(_QWORD *)this = &unk_1E792BD10;
  if (*((char *)this + 135) < 0)
    operator delete(*((void **)this + 14));
  if (*((char *)this + 111) < 0)
    operator delete(*((void **)this + 11));
  if (*((char *)this + 87) < 0)
    operator delete(*((void **)this + 8));
  siri::dialogengine::LineNumberBase::~LineNumberBase((void **)this);
  siri::dialogengine::ConditionEntry::~ConditionEntry(v2);
  JUMPOUT(0x1C3B8D890);
}

uint64_t siri::dialogengine::ConditionExpression::EvaluateBoolean(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  unsigned __int8 **v11;
  int v12;
  _WORD *v13;
  uint64_t v14;
  int v15;
  int v16;
  _BYTE *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _BOOL4 v24;
  _WORD *v25;
  uint64_t v26;
  int v27;
  std::string *v28;
  __int128 v29;
  int v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  int v37;
  const std::string::value_type *v38;
  std::string::size_type v39;
  std::string *v40;
  __int128 v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  std::string v50;
  std::string v51;
  std::string v52;
  _BYTE *v53;
  std::__shared_weak_count *v54;
  std::string __p;
  __int128 v56;
  std::string::size_type v57;
  const void *v58;
  std::__shared_weak_count *v59;
  _BYTE *v60;
  std::__shared_weak_count *v61;

  if (*(_QWORD *)a3
  {
    v7 = *(std::__shared_weak_count **)(a3 + 8);
    v60 = v6;
    v61 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    v10 = v6[66] != 0;
  }
  else
  {
    v7 = 0;
    v10 = 0;
    v60 = 0;
    v61 = 0;
  }
  v11 = (unsigned __int8 **)(a1 + 176);
  if (*(char *)(a1 + 199) < 0)
  {
    v14 = *(_QWORD *)(a1 + 184);
    if (!v14)
      goto LABEL_91;
    if (v14 == 3)
    {
      if (*(_WORD *)*v11 == 25971 && (*v11)[2] == 116)
        goto LABEL_91;
      goto LABEL_33;
    }
    if (v14 != 5)
      goto LABEL_33;
    v13 = *v11;
  }
  else
  {
    v12 = *(unsigned __int8 *)(a1 + 199);
    if (!*(_BYTE *)(a1 + 199))
      goto LABEL_91;
    if (v12 == 3)
    {
      if (*(_WORD *)v11 == 25971 && *(_BYTE *)(a1 + 178) == 116)
        goto LABEL_91;
      goto LABEL_33;
    }
    v13 = (_WORD *)(a1 + 176);
    if (v12 != 5)
      goto LABEL_33;
  }
  v15 = *(_DWORD *)v13;
  v16 = *((unsigned __int8 *)v13 + 4);
  if (v15 == 1702063733 && v16 == 116)
  {
    v10 = v10 ^ 1;
    goto LABEL_91;
  }
LABEL_33:
  std::string::basic_string[abi:ne180100]<0>(&v56, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::dialogengine::ResolveValue(a2, a1 + 200, 1, (uint64_t)&v56, (uint64_t)&__p, (uint64_t *)&v58);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v57) < 0)
    operator delete((void *)v56);
  if (v58
  {
    v21 = v59;
    v53 = v20;
    v54 = v59;
    if (v59)
    {
      v22 = (unint64_t *)&v59->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v24 = v20[66] != 0;
  }
  else
  {
    v21 = 0;
    v24 = 0;
    v53 = 0;
    v54 = 0;
  }
  if (*(char *)(a1 + 199) < 0)
  {
    v26 = *(_QWORD *)(a1 + 184);
    if (v26 != 1)
    {
      if (v26 != 2)
        goto LABEL_57;
      v25 = *v11;
LABEL_51:
      if (*v25 == 15649)
      {
        v10 = v10 ^ v24;
        goto LABEL_80;
      }
LABEL_57:
      std::operator+<char>();
      v28 = std::string::append(&v50, " ");
      v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      v30 = *(char *)(a1 + 199);
      if (v30 >= 0)
        v31 = (const std::string::value_type *)(a1 + 176);
      else
        v31 = *(const std::string::value_type **)(a1 + 176);
      if (v30 >= 0)
        v32 = *(unsigned __int8 *)(a1 + 199);
      else
        v32 = *(_QWORD *)(a1 + 184);
      v33 = std::string::append(&v51, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      v35 = std::string::append(&v52, " ");
      v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v36;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      v37 = *(char *)(a1 + 223);
      if (v37 >= 0)
        v38 = (const std::string::value_type *)(a1 + 200);
      else
        v38 = *(const std::string::value_type **)(a1 + 200);
      if (v37 >= 0)
        v39 = *(unsigned __int8 *)(a1 + 223);
      else
        v39 = *(_QWORD *)(a1 + 208);
      v40 = std::string::append(&__p, v38, v39);
      v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
      v57 = v40->__r_.__value_.__r.__words[2];
      v56 = v41;
      v40->__r_.__value_.__l.__size_ = 0;
      v40->__r_.__value_.__r.__words[2] = 0;
      v40->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Log::LogWithLevel((uint64_t)&v56, 3u);
      if (SHIBYTE(v57) < 0)
        operator delete((void *)v56);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v52.__r_.__value_.__l.__data_);
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v51.__r_.__value_.__l.__data_);
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v50.__r_.__value_.__l.__data_);
      v10 = 0;
      goto LABEL_80;
    }
    v27 = **v11;
  }
  else
  {
    if (*(_BYTE *)(a1 + 199) != 1)
    {
      v25 = (_WORD *)(a1 + 176);
      if (*(_BYTE *)(a1 + 199) != 2)
        goto LABEL_57;
      goto LABEL_51;
    }
    v27 = *(unsigned __int8 *)v11;
  }
  if (v27 != 61)
    goto LABEL_57;
  v10 = v10 ^ v24 ^ 1;
LABEL_80:
  if (v21)
  {
    v42 = (unint64_t *)&v21->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v44 = v59;
  if (v59)
  {
    v45 = (unint64_t *)&v59->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v7 = v61;
LABEL_91:
  if (v7)
  {
    v47 = (unint64_t *)&v7->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v10;
}

void sub_1BF8AC328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;

  if (*(char *)(v37 - 89) < 0)
    operator delete(*(void **)(v37 - 112));
  if (a37 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v37 - 80);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v37 - 64);
  _Unwind_Resume(a1);
}

void sub_1BF8AC3C4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0)
    operator delete(__p);
  if (*(char *)(v28 - 89) < 0)
    operator delete(*(void **)(v28 - 112));
  JUMPOUT(0x1BF8AC3B4);
}

void sub_1BF8AC3F4()
{
  JUMPOUT(0x1BF8AC3B4);
}

BOOL siri::dialogengine::ConditionExpression::EvaluateString(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v6;
  std::string *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  char *v11;
  std::__shared_weak_count *size;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unsigned __int8 *v20;
  int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  int v26;
  uint64_t v27;
  std::string::size_type v31;
  std::string::size_type v32;
  uint64_t v33;
  std::string *v34;
  int v35;
  int v36;
  int v37;
  int v38;
  BOOL v40;
  _BOOL8 v41;
  uint64_t v43;
  std::string::size_type v46;
  BOOL v47;
  _WORD *v48;
  std::string::size_type v49;
  BOOL v50;
  std::string::size_type v51;
  std::string::size_type v52;
  uint64_t v53;
  std::string *v54;
  int v55;
  int v56;
  int v57;
  std::string::size_type v59;
  std::string *v60;
  std::string::size_type v61;
  std::string *p_str;
  size_t v63;
  int v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::string *v69;
  __int128 v70;
  const std::string::value_type *v71;
  uint64_t v72;
  const std::string::value_type *v73;
  int v74;
  const std::string::value_type *v75;
  std::string::size_type v76;
  std::string *v77;
  __int128 v78;
  std::string *v79;
  __int128 v80;
  std::string v81;
  std::string lpsrc;
  std::string __p;
  std::string v84;
  std::string v85;
  std::string __str;
  char *v87;
  std::__shared_weak_count *v88;

  if (*(_QWORD *)a3
  {
    v8 = *(std::__shared_weak_count **)(a3 + 8);
    v87 = v6;
    v88 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    if (v6[95] < 0)
      std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v6 + 9), *((_QWORD *)v6 + 10));
    else
      __str = *(std::string *)(v6 + 3);
  }
  else
  {
    v87 = 0;
    v88 = 0;
    std::string::basic_string[abi:ne180100]<0>(&__str, "");
  }
  memset(&v85, 0, sizeof(v85));
  if (*(char *)(a1 + 223) < 0)
  {
    if (!*(_QWORD *)(a1 + 208))
      goto LABEL_37;
  }
  else if (!*(_BYTE *)(a1 + 223))
  {
    goto LABEL_37;
  }
  std::string::basic_string[abi:ne180100]<0>(&v84, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::dialogengine::ResolveValue(a2, a1 + 200, 1, (uint64_t)&v84, (uint64_t)&__p, (uint64_t *)&lpsrc);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v84.__r_.__value_.__l.__data_);
  if (lpsrc.__r_.__value_.__r.__words[0]
  {
    size = (std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
    __p.__r_.__value_.__l.__size_ = lpsrc.__r_.__value_.__l.__size_;
    if (lpsrc.__r_.__value_.__l.__size_)
    {
      v13 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    if (v11[95] < 0)
      std::string::__init_copy_ctor_external(&v84, *((const std::string::value_type **)v11 + 9), *((_QWORD *)v11 + 10));
    else
      v84 = *(std::string *)(v11 + 3);
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    std::string::basic_string[abi:ne180100]<0>(&v84, "");
    size = 0;
  }
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v85.__r_.__value_.__l.__data_);
  v85 = v84;
  if (size)
  {
    v15 = (unint64_t *)&size->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v17 = (std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_;
  if (lpsrc.__r_.__value_.__l.__size_)
  {
    v18 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
LABEL_37:
  v20 = (unsigned __int8 *)(a1 + 176);
  v21 = *(unsigned __int8 *)(a1 + 199);
  if ((*(char *)(a1 + 199) & 0x80000000) == 0)
  {
    v22 = (uint64_t *)(a1 + 176);
    if (v21 != 11)
      goto LABEL_46;
LABEL_42:
    v23 = *v22;
    v24 = *(uint64_t *)((char *)v22 + 3);
    if (v23 == 0x616D5F7865676572 && v24 == 0x686374616D5F7865)
      goto LABEL_51;
    goto LABEL_46;
  }
  if (*(_QWORD *)(a1 + 184) == 11)
  {
    v22 = *(uint64_t **)v20;
    goto LABEL_42;
  }
LABEL_46:
  siri::dialogengine::StringToLower((uint64_t)&__str, (uint64_t)&v84);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  __str = v84;
  siri::dialogengine::StringToLower((uint64_t)&v85, (uint64_t)&v84);
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v85.__r_.__value_.__l.__data_);
  v85 = v84;
  v21 = *(unsigned __int8 *)(a1 + 199);
LABEL_51:
  if ((v21 & 0x80) == 0)
  {
    switch(v21)
    {
      case 0:
        goto LABEL_136;
      case 1:
        goto LABEL_53;
      case 2:
        goto LABEL_132;
      case 5:
        if (*(_DWORD *)v20 != 1953525093 || *(_BYTE *)(a1 + 180) != 121)
          goto LABEL_134;
        goto LABEL_116;
      case 8:
        switch(*(_QWORD *)v20)
        {
          case 0x7974706D656E6F6ELL:
            goto LABEL_136;
          case 0x736E6961746E6F63:
            goto LABEL_148;
          case 0x6874697773646E65:
            goto LABEL_198;
        }
        goto LABEL_134;
      case 10:
        if (*(_QWORD *)v20 != 0x6977737472617473 || *(_WORD *)(a1 + 184) != 26740)
          goto LABEL_134;
        goto LABEL_104;
      case 11:
        if (*(_QWORD *)v20 != 0x616D5F7865676572 || *(_QWORD *)(a1 + 179) != 0x686374616D5F7865)
          goto LABEL_134;
        goto LABEL_110;
      default:
        goto LABEL_134;
    }
  }
  v27 = *(_QWORD *)(a1 + 184);
  if (v27 <= 7)
  {
    if (v27)
    {
      if (v27 == 5 && **(_DWORD **)v20 == 1953525093 && *(_BYTE *)(*(_QWORD *)v20 + 4) == 121)
      {
LABEL_116:
        v46 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v46 = __str.__r_.__value_.__l.__size_;
        v47 = v46 == 0;
        goto LABEL_119;
      }
      goto LABEL_71;
    }
LABEL_136:
    v49 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v49 = __str.__r_.__value_.__l.__size_;
    v50 = v49 == 0;
    goto LABEL_139;
  }
  if (v27 == 8)
  {
    switch(**(_QWORD **)v20)
    {
      case 0x7974706D656E6F6ELL:
        goto LABEL_136;
      case 0x736E6961746E6F63:
LABEL_148:
        v43 = siri::dialogengine::StringContains(&__str.__r_.__value_.__l.__data_, (char *)&v85);
        goto LABEL_211;
      case 0x6874697773646E65:
LABEL_198:
        v43 = siri::dialogengine::StringEndsWith(&__str, (unsigned __int8 *)&v85);
        goto LABEL_211;
    }
    if ((v21 & 0x80) == 0)
    {
LABEL_130:
      if (v21 == 1)
      {
LABEL_53:
        v26 = *v20;
        if (v26 == 61)
          goto LABEL_79;
LABEL_54:
        if (v26 != 62)
          goto LABEL_134;
LABEL_177:
        if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v59 = HIBYTE(v85.__r_.__value_.__r.__words[2]);
        else
          v59 = v85.__r_.__value_.__l.__size_;
        if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v60 = &v85;
        else
          v60 = (std::string *)v85.__r_.__value_.__r.__words[0];
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v61 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        else
          v61 = __str.__r_.__value_.__l.__size_;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_str = &__str;
        else
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        if (v61 >= v59)
          v63 = v59;
        else
          v63 = v61;
        v64 = memcmp(v60, p_str, v63);
        if (v64)
          v41 = v64 < 0;
        else
          v41 = v59 < v61;
        goto LABEL_212;
      }
      if (v21 != 2)
        goto LABEL_134;
LABEL_132:
      v48 = (_WORD *)(a1 + 176);
      if (*(_WORD *)v20 != 15649)
        goto LABEL_133;
      goto LABEL_157;
    }
  }
  else if (v27 == 10 && **(_QWORD **)v20 == 0x6977737472617473 && *(_WORD *)(*(_QWORD *)v20 + 8) == 26740)
  {
LABEL_104:
    v43 = siri::dialogengine::StringStartsWith(&__str, (unsigned __int8 *)&v85);
    goto LABEL_211;
  }
LABEL_71:
  if (*(_QWORD *)(a1 + 184) == 11)
  {
    if (**(_QWORD **)v20 == 0x616D5F7865676572 && *(_QWORD *)(*(_QWORD *)v20 + 3) == 0x686374616D5F7865)
    {
LABEL_110:
      v43 = siri::dialogengine::StringRegexMatch((uint64_t)&__str, (uint64_t)&v85);
      goto LABEL_211;
    }
    if ((v21 & 0x80) == 0)
      goto LABEL_130;
  }
  if (*(_QWORD *)(a1 + 184) == 1)
  {
    if (**(_BYTE **)v20 == 61)
    {
LABEL_79:
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v31 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      else
        v31 = __str.__r_.__value_.__l.__size_;
      v32 = HIBYTE(v85.__r_.__value_.__r.__words[2]);
      if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v32 = v85.__r_.__value_.__l.__size_;
      if (v31 == v32)
      {
        if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v7 = &v85;
        else
          v7 = (std::string *)v85.__r_.__value_.__r.__words[0];
        if ((*((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x80) == 0)
        {
          if (*((_BYTE *)&__str.__r_.__value_.__s + 23))
          {
            v33 = HIBYTE(__str.__r_.__value_.__r.__words[2]) - 1;
            v34 = &__str;
            do
            {
              v36 = v34->__r_.__value_.__s.__data_[0];
              v34 = (std::string *)((char *)v34 + 1);
              v35 = v36;
              v38 = v7->__r_.__value_.__s.__data_[0];
              v7 = (std::string *)((char *)v7 + 1);
              v37 = v38;
              v40 = v33-- != 0;
              v41 = v35 == v37;
            }
            while (v35 == v37 && v40);
            goto LABEL_212;
          }
LABEL_195:
          v41 = 1;
          goto LABEL_212;
        }
        v47 = memcmp(__str.__r_.__value_.__l.__data_, v7, __str.__r_.__value_.__l.__size_) == 0;
LABEL_119:
        v41 = v47;
        goto LABEL_212;
      }
LABEL_236:
      v41 = 0;
      goto LABEL_212;
    }
    if ((v21 & 0x80) == 0)
      goto LABEL_154;
  }
  if (*(_QWORD *)(a1 + 184) != 2)
  {
LABEL_175:
    if (*(_QWORD *)(a1 + 184) == 1)
    {
      if (**(_BYTE **)v20 == 62)
        goto LABEL_177;
      if ((v21 & 0x80) == 0)
        goto LABEL_134;
    }
    if (*(_QWORD *)(a1 + 184) != 2)
      goto LABEL_134;
    v48 = *(_WORD **)v20;
    goto LABEL_133;
  }
  if (**(_WORD **)v20 != 15649)
  {
    if ((v21 & 0x80) == 0)
    {
LABEL_154:
      if (v21 != 1)
      {
        v48 = (_WORD *)(a1 + 176);
        if (v21 != 2)
        {
LABEL_134:
          if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(a1 + 176), "<"))
          {
            v43 = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(&__str, &v85);
          }
          else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(a1 + 176), "<="))
          {
            v43 = std::operator<=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__str.__r_.__value_.__l.__data_, (const void **)&v85.__r_.__value_.__l.__data_);
          }
          else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(a1 + 176), "ver_eq"))
          {
            v43 = siri::dialogengine::VersionEqual((unsigned __int8 *)&__str, (unsigned __int8 *)&v85);
          }
          else
          {
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(a1 + 176), "ver_ne"))
            {
              v41 = !siri::dialogengine::VersionEqual((unsigned __int8 *)&__str, (unsigned __int8 *)&v85);
              goto LABEL_212;
            }
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(a1 + 176), "ver_gt"))
            {
              v43 = siri::dialogengine::VersionGreaterThan((uint64_t)&__str, (uint64_t)&v85);
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(a1 + 176), "ver_ge"))
            {
              v43 = siri::dialogengine::VersionGreaterThanOrEqual((unsigned __int8 *)&__str, (unsigned __int8 *)&v85);
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(a1 + 176), "ver_lt"))
            {
              v43 = siri::dialogengine::VersionLessThan((unsigned __int8 *)&__str, (unsigned __int8 *)&v85);
            }
            else
            {
              if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(a1 + 176), "ver_le"))
              {
                std::operator+<char>();
                v69 = std::string::append(&v81, "' for expression '");
                v70 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
                lpsrc.__r_.__value_.__r.__words[2] = v69->__r_.__value_.__r.__words[2];
                *(_OWORD *)&lpsrc.__r_.__value_.__l.__data_ = v70;
                v69->__r_.__value_.__l.__size_ = 0;
                v69->__r_.__value_.__r.__words[2] = 0;
                v69->__r_.__value_.__r.__words[0] = 0;
                v73 = *(const std::string::value_type **)(a1 + 152);
                v72 = a1 + 152;
                v71 = v73;
                v74 = *(char *)(v72 + 23);
                if (v74 >= 0)
                  v75 = (const std::string::value_type *)v72;
                else
                  v75 = v71;
                if (v74 >= 0)
                  v76 = *(unsigned __int8 *)(v72 + 23);
                else
                  v76 = *(_QWORD *)(v72 + 8);
                v77 = std::string::append(&lpsrc, v75, v76);
                v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
                __p.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
                *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v78;
                v77->__r_.__value_.__l.__size_ = 0;
                v77->__r_.__value_.__r.__words[2] = 0;
                v77->__r_.__value_.__r.__words[0] = 0;
                v79 = std::string::append(&__p, "'");
                v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
                v84.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v80;
                v79->__r_.__value_.__l.__size_ = 0;
                v79->__r_.__value_.__r.__words[2] = 0;
                v79->__r_.__value_.__r.__words[0] = 0;
                siri::dialogengine::Log::LogWithLevel((uint64_t)&v84, 3u);
                if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v84.__r_.__value_.__l.__data_);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(lpsrc.__r_.__value_.__l.__data_);
                if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v81.__r_.__value_.__l.__data_);
                goto LABEL_236;
              }
              v43 = siri::dialogengine::VersionLessThanOrEqual((unsigned __int8 *)&__str, (unsigned __int8 *)&v85);
            }
          }
LABEL_211:
          v41 = v43;
          goto LABEL_212;
        }
LABEL_133:
        if (*v48 == 15678)
        {
          v43 = std::operator>=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__str, &v85);
          goto LABEL_211;
        }
        goto LABEL_134;
      }
      v26 = *v20;
      goto LABEL_54;
    }
    goto LABEL_175;
  }
LABEL_157:
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v51 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  else
    v51 = __str.__r_.__value_.__l.__size_;
  v52 = HIBYTE(v85.__r_.__value_.__r.__words[2]);
  if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v52 = v85.__r_.__value_.__l.__size_;
  if (v51 != v52)
    goto LABEL_195;
  if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &v85;
  else
    v7 = (std::string *)v85.__r_.__value_.__r.__words[0];
  if ((*((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    v50 = memcmp(__str.__r_.__value_.__l.__data_, v7, __str.__r_.__value_.__l.__size_) == 0;
LABEL_139:
    v41 = !v50;
    goto LABEL_212;
  }
  if (!*((_BYTE *)&__str.__r_.__value_.__s + 23))
    goto LABEL_236;
  v53 = HIBYTE(__str.__r_.__value_.__r.__words[2]) - 1;
  v54 = &__str;
  do
  {
    v56 = v54->__r_.__value_.__s.__data_[0];
    v54 = (std::string *)((char *)v54 + 1);
    v55 = v56;
    v57 = v7->__r_.__value_.__s.__data_[0];
    v7 = (std::string *)((char *)v7 + 1);
    v41 = v55 != v57;
  }
  while (v55 == v57 && v53-- != 0);
LABEL_212:
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v85.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v65 = v88;
  if (v88)
  {
    v66 = (unint64_t *)&v88->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *, std::string *))v65->__on_zero_shared)(v65, v7);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  return v41;
}

void sub_1BF8ACE8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;

  if (a35 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  if (a42 < 0)
    operator delete(a37);
  if (*(char *)(v42 - 73) < 0)
    operator delete(*(void **)(v42 - 96));
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v42 - 64);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::ConditionExpression::EvaluateNumber(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  double v10;
  double v11;
  double *v12;
  std::__shared_weak_count *size;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unsigned __int8 *v20;
  int v21;
  int *v22;
  int v23;
  uint64_t v24;
  BOOL v26;
  int v28;
  uint64_t v29;
  BOOL v31;
  int v33;
  int v34;
  std::string *v36;
  __int128 v37;
  const std::string::value_type *v38;
  uint64_t v39;
  const std::string::value_type *v40;
  int v41;
  const std::string::value_type *v42;
  std::string::size_type v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  __int128 v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::string v52;
  std::string lpsrc;
  std::string __p;
  void *v55[2];
  std::string::size_type v56;
  double *v57;
  std::__shared_weak_count *v58;

  if (*(_QWORD *)a3
  {
    v7 = *(std::__shared_weak_count **)(a3 + 8);
    v57 = v6;
    v58 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    v10 = v6[9];
  }
  else
  {
    v57 = 0;
    v58 = 0;
    v10 = 0.0;
  }
  if (*(char *)(a1 + 223) < 0)
  {
    if (*(_QWORD *)(a1 + 208))
      goto LABEL_10;
LABEL_24:
    v11 = 0.0;
    goto LABEL_31;
  }
  if (!*(_BYTE *)(a1 + 223))
    goto LABEL_24;
LABEL_10:
  std::string::basic_string[abi:ne180100]<0>(v55, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::dialogengine::ResolveValue(a2, a1 + 200, 1, (uint64_t)v55, (uint64_t)&__p, (uint64_t *)&lpsrc);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v56) < 0)
    operator delete(v55[0]);
  v11 = 0.0;
  if (lpsrc.__r_.__value_.__r.__words[0])
  {
    if (v12)
    {
      size = (std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_;
      if (lpsrc.__r_.__value_.__l.__size_)
      {
        v14 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
        v11 = v12[9];
        do
          v16 = __ldaxr(v14);
        while (__stlxr(v16 - 1, v14));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      else
      {
        v11 = v12[9];
      }
    }
  }
  v17 = (std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_;
  if (lpsrc.__r_.__value_.__l.__size_)
  {
    v18 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
LABEL_31:
  v20 = (unsigned __int8 *)(a1 + 176);
  v21 = *(unsigned __int8 *)(a1 + 199);
  if ((*(char *)(a1 + 199) & 0x80000000) == 0)
  {
    v22 = (int *)(a1 + 176);
    switch(*(_BYTE *)(a1 + 199))
    {
      case 0:
        goto LABEL_54;
      case 1:
        v23 = *v20;
        switch(v23)
        {
          case '<':
            goto LABEL_124;
          case '>':
            goto LABEL_63;
          case '=':
            goto LABEL_81;
        }
        goto LABEL_94;
      case 2:
        switch(*(_WORD *)v20)
        {
          case 0x3D21:
            goto LABEL_77;
          case 0x3D3E:
            goto LABEL_117;
          case 0x3D3C:
            goto LABEL_67;
        }
        goto LABEL_94;
      case 6:
        goto LABEL_55;
      case 7:
        goto LABEL_90;
      case 0xE:
        if (*(_QWORD *)v20 != 0x69746C756D5F7369 || *(_QWORD *)(a1 + 182) != 0x666F5F656C706974)
          goto LABEL_94;
        goto LABEL_73;
      default:
        goto LABEL_94;
    }
  }
  v24 = *(_QWORD *)(a1 + 184);
  switch(v24)
  {
    case 0:
LABEL_54:
      v26 = v10 == 0.0;
      goto LABEL_78;
    case 1:
      v28 = **(unsigned __int8 **)v20;
      if (v28 == 61)
      {
LABEL_81:
        v31 = v10 == v11;
        goto LABEL_120;
      }
      if (v28 == 62)
      {
LABEL_63:
        v29 = v10 > v11;
        goto LABEL_109;
      }
      if (**(_BYTE **)v20 == 60)
      {
LABEL_124:
        v29 = v10 < v11;
        goto LABEL_109;
      }
      if ((v21 & 0x80) == 0)
        goto LABEL_94;
      break;
    case 2:
      if (**(_WORD **)v20 != 15649)
      {
        if (**(_WORD **)v20 == 15678)
        {
LABEL_117:
          v29 = v10 >= v11;
          goto LABEL_109;
        }
        break;
      }
LABEL_77:
      v26 = v10 == v11;
LABEL_78:
      v29 = !v26;
      goto LABEL_109;
  }
  if (*(_QWORD *)(a1 + 184) == 2)
  {
    if (**(_WORD **)v20 == 15676)
    {
LABEL_67:
      v29 = v10 <= v11;
      goto LABEL_109;
    }
    if ((v21 & 0x80) == 0)
      goto LABEL_94;
  }
  if (*(_QWORD *)(a1 + 184) != 14)
    goto LABEL_87;
  if (**(_QWORD **)v20 == 0x69746C756D5F7369 && *(_QWORD *)(*(_QWORD *)v20 + 6) == 0x666F5F656C706974)
  {
LABEL_73:
    if (v11 != 0.0 && v10 == (double)(int)v10 && v11 == (double)(int)v11)
    {
      v31 = (int)v10 % (int)v11 == 0;
      goto LABEL_120;
    }
LABEL_108:
    v29 = 0;
    goto LABEL_109;
  }
  if ((v21 & 0x80) != 0)
  {
LABEL_87:
    if (*(_QWORD *)(a1 + 184) != 6)
      goto LABEL_88;
    if (**(_DWORD **)v20 == 1868526441 && *(_WORD *)(*(_QWORD *)v20 + 4) == 25700)
      goto LABEL_115;
    if ((v21 & 0x80) != 0)
    {
LABEL_88:
      if (*(_QWORD *)(a1 + 184) == 7)
      {
        v22 = *(int **)v20;
        goto LABEL_90;
      }
    }
LABEL_94:
    std::operator+<char>();
    v36 = std::string::append(&v52, "' for expression '");
    v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    lpsrc.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)&lpsrc.__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    v40 = *(const std::string::value_type **)(a1 + 152);
    v39 = a1 + 152;
    v38 = v40;
    v41 = *(char *)(v39 + 23);
    if (v41 >= 0)
      v42 = (const std::string::value_type *)v39;
    else
      v42 = v38;
    if (v41 >= 0)
      v43 = *(unsigned __int8 *)(v39 + 23);
    else
      v43 = *(_QWORD *)(v39 + 8);
    v44 = std::string::append(&lpsrc, v42, v43);
    v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    v46 = std::string::append(&__p, "'");
    v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
    v56 = v46->__r_.__value_.__r.__words[2];
    *(_OWORD *)v55 = v47;
    v46->__r_.__value_.__l.__size_ = 0;
    v46->__r_.__value_.__r.__words[2] = 0;
    v46->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Log::LogWithLevel((uint64_t)v55, 3u);
    if (SHIBYTE(v56) < 0)
      operator delete(v55[0]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0)
      operator delete(lpsrc.__r_.__value_.__l.__data_);
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v52.__r_.__value_.__l.__data_);
    goto LABEL_108;
  }
  if (v21 == 6)
  {
LABEL_55:
    if (*(_DWORD *)v20 != 1868526441 || *(_WORD *)(a1 + 180) != 25700)
      goto LABEL_94;
LABEL_115:
    if (v10 == (double)(int)v10)
    {
      v29 = (int)v10 & 1;
      goto LABEL_109;
    }
    goto LABEL_108;
  }
  v22 = (int *)(a1 + 176);
  if (v21 != 7)
    goto LABEL_94;
LABEL_90:
  v33 = *v22;
  v34 = *(int *)((char *)v22 + 3);
  if (v33 != 1700754281 || v34 != 1852143205)
    goto LABEL_94;
  if (v10 != (double)(int)v10)
    goto LABEL_108;
  v31 = ((int)v10 & 1) == 0;
LABEL_120:
  v29 = v31;
LABEL_109:
  v48 = v58;
  if (v58)
  {
    v49 = (unint64_t *)&v58->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *, unsigned __int8 *))v48->__on_zero_shared)(v48, v20);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  return v29;
}

void sub_1BF8AD54C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (a35 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v35 - 64);
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::ConditionExpression::EvaluateDialogCalendar(uint64_t a1, siri::dialogengine::Context *a2, uint64_t a3)
{
  unsigned __int8 *v6;
  unint64_t v7;
  BOOL v8;
  char *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  double CalendarSecsUTC;
  double v15;
  int v16;
  uint64_t v17;
  uint64_t IsHoliday;
  int v19;
  int v20;
  char *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::string::size_type size;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  const void *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  void *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  unint64_t *v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  const void *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  double *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  double v60;
  double v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  std::string v73;
  char v74;
  double *v75;
  std::__shared_weak_count *v76;
  void *__p;
  std::__shared_weak_count *v78;
  char v79;
  void *lpsrc;
  std::__shared_weak_count *v81;
  std::string v82;
  char *v83;
  std::__shared_weak_count *v84;

  v6 = (unsigned __int8 *)(a1 + 176);
  if (*(char *)(a1 + 199) < 0)
  {
    v7 = *(_QWORD *)(a1 + 184);
    if (v7 != 10)
      goto LABEL_23;
    if (**(_QWORD **)v6 != 0x64696C6F685F7369 || *(_WORD *)(*(_QWORD *)v6 + 8) != 31073)
      goto LABEL_94;
  }
  else
  {
    v7 = *(unsigned __int8 *)(a1 + 199);
    if ((_DWORD)v7 != 10
      || (*(_QWORD *)v6 == 0x64696C6F685F7369 ? (v8 = *(unsigned __int16 *)(a1 + 184) == 31073) : (v8 = 0), !v8))
    {
LABEL_23:
      if (v7 > 2)
        goto LABEL_94;
      CalendarSecsUTC = siri::dialogengine::GetCalendarSecsUTC(a2, (const std::string *)(a1 + 152));
      v15 = siri::dialogengine::GetCalendarSecsUTC(a2, (const std::string *)(a1 + 200));
      v16 = *(unsigned __int8 *)(a1 + 199);
      if ((v16 & 0x80) == 0)
      {
        if (v16 != 1)
        {
          if (v16 == 2)
          {
            if (*(_WORD *)v6 != 15649)
            {
              if (*(_WORD *)v6 == 15678)
                return CalendarSecsUTC >= v15;
              goto LABEL_93;
            }
            return CalendarSecsUTC != v15;
          }
LABEL_94:
          std::string::basic_string[abi:ne180100]<0>(&v73, "");
          std::string::basic_string[abi:ne180100]<0>(&v82, "");
          siri::dialogengine::ResolveValue((uint64_t)a2, a1 + 152, 1, (uint64_t)&v73, (uint64_t)&v82, &v71);
          std::string::basic_string[abi:ne180100]<0>(&__p, (char *)siri::dialogengine::TYPE_DIALOG_CALENDAR);
          IsHoliday = siri::dialogengine::ConditionExpression::EvaluateOther(a1, v41, &v71, (uint64_t)&__p);
          if (v79 < 0)
            operator delete(__p);
          v42 = v72;
          if (v72)
          {
            p_shared_owners = (unint64_t *)&v72->__shared_owners_;
            do
              v44 = __ldaxr(p_shared_owners);
            while (__stlxr(v44 - 1, p_shared_owners));
            if (!v44)
            {
              ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v82.__r_.__value_.__l.__data_);
          if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v73.__r_.__value_.__l.__data_);
          return IsHoliday;
        }
        v19 = *v6;
        if (v19 != 62)
        {
          if (v19 != 61)
            goto LABEL_41;
          return CalendarSecsUTC == v15;
        }
        return CalendarSecsUTC > v15;
      }
      v17 = *(_QWORD *)(a1 + 184);
      if (v17 == 1)
      {
        v20 = **(unsigned __int8 **)v6;
        if (v20 == 61)
          return CalendarSecsUTC == v15;
        if (v20 == 62)
          return CalendarSecsUTC > v15;
      }
      else if (v17 == 2)
      {
        if (**(_WORD **)v6 == 15649)
          return CalendarSecsUTC != v15;
        if (**(_WORD **)v6 == 15678)
          return CalendarSecsUTC >= v15;
        if ((v16 & 0x80) == 0)
        {
          if (v16 == 1)
          {
            v19 = *v6;
LABEL_41:
            if (v19 != 60)
              goto LABEL_94;
            return CalendarSecsUTC < v15;
          }
          if (v16 != 2)
            goto LABEL_94;
LABEL_93:
          IsHoliday = CalendarSecsUTC <= v15;
          if (*(_WORD *)v6 == 15676)
            return IsHoliday;
          goto LABEL_94;
        }
      }
      if (*(_QWORD *)(a1 + 184) == 1)
      {
        if (**(_BYTE **)v6 == 60)
          return CalendarSecsUTC < v15;
        if ((v16 & 0x80) == 0)
          goto LABEL_94;
      }
      if (*(_QWORD *)(a1 + 184) != 2)
        goto LABEL_94;
      v6 = *(unsigned __int8 **)v6;
      goto LABEL_93;
    }
  }
  if (!*(_QWORD *)a3)
    return 0;
  if (!v10)
    return 0;
  v11 = *(std::__shared_weak_count **)(a3 + 8);
  v83 = v10;
  v84 = v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  memset(&v82, 0, sizeof(v82));
  if ((*(char *)(a1 + 223) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a1 + 223))
      goto LABEL_88;
LABEL_52:
    std::string::basic_string[abi:ne180100]<0>(&v73, "");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    siri::dialogengine::ResolveValue((uint64_t)a2, a1 + 200, 1, (uint64_t)&v73, (uint64_t)&__p, (uint64_t *)&lpsrc);
    if (v79 < 0)
      operator delete(__p);
    if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v73.__r_.__value_.__l.__data_);
    if (lpsrc
    {
      v22 = v81;
      __p = v21;
      v78 = v81;
      if (v81)
      {
        v23 = (unint64_t *)&v81->__shared_owners_;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      if (v21[95] < 0)
        std::string::__init_copy_ctor_external(&v73, *((const std::string::value_type **)v21 + 9), *((_QWORD *)v21 + 10));
      else
        v73 = *(std::string *)(v21 + 3);
    }
    else
    {
      __p = 0;
      v78 = 0;
      std::string::basic_string[abi:ne180100]<0>(&v73, "");
      v22 = 0;
    }
    v82 = v73;
    if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v73.__r_.__value_.__r.__words[2]);
    else
      size = v82.__r_.__value_.__l.__size_;
    if (v22)
    {
      v26 = (unint64_t *)&v22->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v28 = v81;
    if (v81)
    {
      v29 = (unint64_t *)&v81->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    if (!size)
      goto LABEL_88;
    v31 = v83;
    std::string::basic_string[abi:ne180100]<0>(&v73, "secs");
    v32 = std::__tree<std::string>::find<std::string>((uint64_t)(v31 + 72), (const void **)&v73.__r_.__value_.__l.__data_);
    if (v31 + 80 == (char *)v32)
    {
      lpsrc = 0;
      v81 = 0;
    }
    else
    {
      v33 = v32;
      v34 = *(const void **)(v32 + 56);
      v35 = *(std::__shared_weak_count **)(v33 + 64);
      if (v35)
      {
        v36 = (unint64_t *)&v35->__shared_owners_;
        do
          v37 = __ldxr(v36);
        while (__stxr(v37 + 1, v36));
      }
      if (v34
      {
        lpsrc = v38;
        v81 = v35;
        if (!v35)
          goto LABEL_112;
        v39 = (unint64_t *)&v35->__shared_owners_;
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
      }
      else
      {
        lpsrc = 0;
        v81 = 0;
        if (!v35)
          goto LABEL_112;
      }
      v46 = (unint64_t *)&v35->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
LABEL_112:
    if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v73.__r_.__value_.__l.__data_);
    v48 = v83;
    std::string::basic_string[abi:ne180100]<0>(&v73, "secsSinceEpoch");
    v49 = std::__tree<std::string>::find<std::string>((uint64_t)(v48 + 72), (const void **)&v73.__r_.__value_.__l.__data_);
    if (v48 + 80 == (char *)v49)
    {
      v75 = 0;
      v76 = 0;
    }
    else
    {
      v50 = v49;
      v51 = *(const void **)(v49 + 56);
      v52 = *(std::__shared_weak_count **)(v50 + 64);
      if (v52)
      {
        v53 = (unint64_t *)&v52->__shared_owners_;
        do
          v54 = __ldxr(v53);
        while (__stxr(v54 + 1, v53));
      }
      if (v51
      {
        v75 = v55;
        v76 = v52;
        if (v52)
        {
          v56 = (unint64_t *)&v52->__shared_owners_;
          do
            v57 = __ldxr(v56);
          while (__stxr(v57 + 1, v56));
LABEL_125:
          v58 = (unint64_t *)&v52->__shared_owners_;
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
            std::__shared_weak_count::__release_weak(v52);
          }
        }
      }
      else
      {
        v75 = 0;
        v76 = 0;
        if (v52)
          goto LABEL_125;
      }
    }
    if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v73.__r_.__value_.__l.__data_);
    if (lpsrc)
    {
      if (v75)
        v60 = v75[9];
      else
        v60 = 0.0;
      v61 = *((double *)lpsrc + 9);
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      siri::dialogengine::GetICUTimeStamp((uint64_t)v61, (int)v60, (uint64_t)&__p, &v73);
      if (v79 < 0)
        operator delete(__p);
      IsHoliday = siri::dialogengine::DateIsHoliday((siri::dialogengine *)&v73, (uint64_t)&v82);
      if (v74 < 0)
        operator delete((void *)v73.__r_.__value_.__l.__size_);
    }
    else
    {
      IsHoliday = 0;
    }
    v62 = v76;
    if (v76)
    {
      v63 = (unint64_t *)&v76->__shared_owners_;
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
    v65 = v81;
    if (v81)
    {
      v66 = (unint64_t *)&v81->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
    }
    goto LABEL_152;
  }
  if (*(_QWORD *)(a1 + 208))
    goto LABEL_52;
LABEL_88:
  IsHoliday = 0;
LABEL_152:
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v82.__r_.__value_.__l.__data_);
  v68 = v84;
  if (v84)
  {
    v69 = (unint64_t *)&v84->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  return IsHoliday;
}

void sub_1BF8ADDD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *__p, int a13, __int16 a14, char a15, char a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  uint64_t v30;

  if (a20 < 0)
    operator delete(__p);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  if (*(char *)(v30 - 73) < 0)
    operator delete(*(void **)(v30 - 96));
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v30 - 64);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::ConditionExpression::EvaluateArray(uint64_t a1, siri::dialogengine::Context *a2, const void **a3)
{
  unsigned __int8 v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  int8x8_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  siri::dialogengine::VariableArray *v25;
  siri::dialogengine::VariableArray *v26;
  unsigned __int8 *v27;
  const char *v28;
  _BOOL4 IsBinaryOperator;
  std::__shared_weak_count *v31;
  void *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  _QWORD *v73;
  _QWORD v75[2];
  _QWORD v76[2];
  _QWORD v77[2];
  _QWORD v78[2];
  _QWORD v79[2];
  _QWORD v80[2];
  _QWORD v81[2];
  _QWORD v82[2];
  uint64_t v83[2];
  uint64_t v84[2];
  uint64_t v85[2];
  uint64_t v86[2];
  uint64_t v87[2];
  uint64_t v88[2];
  uint64_t v89[2];
  uint64_t v90[2];
  uint64_t v91[2];
  uint64_t v92[2];
  void *v93;
  std::__shared_weak_count *v94;
  void *v95;
  std::__shared_weak_count *v96;
  char v97;
  void *v98[2];
  char v99;
  void *v100[2];
  char v101;
  uint64_t v102;
  std::__shared_weak_count *v103;

  if ((v5 & 1) == 0
  {
    v73 = (_QWORD *)operator new();
    *v73 = 0;
    siri::dialogengine::ArrayOpStringToEnum(std::string const&)::flag = (uint64_t)v73;
  }
  v6 = atomic_load((unint64_t *)siri::dialogengine::ArrayOpStringToEnum(std::string const&)::flag);
  if (v6 != -1)
  {
    v100[0] = &v95;
    v98[0] = v100;
    std::__call_once((std::once_flag::_State_type *)siri::dialogengine::ArrayOpStringToEnum(std::string const&)::flag, v98, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::ArrayOpStringToEnum(std::string const&)::$_0 &&>>);
  }
  v7 = (_QWORD *)siri::dialogengine::ArrayOpStringToEnum(std::string const&)::sMap;
  v8 = std::__string_hash<char>::operator()[abi:ne180100](siri::dialogengine::ArrayOpStringToEnum(std::string const&)::sMap + 24, a1 + 176);
  v9 = (int8x8_t)v7[1];
  if (!*(_QWORD *)&v9)
    goto LABEL_23;
  v10 = v8;
  v11 = (uint8x8_t)vcnt_s8(v9);
  v11.i16[0] = vaddlv_u8(v11);
  v12 = v11.u32[0];
  if (v11.u32[0] > 1uLL)
  {
    v13 = v8;
    if (v8 >= *(_QWORD *)&v9)
      v13 = v8 % *(_QWORD *)&v9;
  }
  else
  {
    v13 = (*(_QWORD *)&v9 - 1) & v8;
  }
  v14 = *(unsigned __int8 ***)(*v7 + 8 * v13);
  if (!v14 || (v15 = *v14) == 0)
  {
LABEL_23:
    std::string::basic_string[abi:ne180100]<0>(v100, "");
    std::string::basic_string[abi:ne180100]<0>(v98, "");
    siri::dialogengine::ResolveValue((uint64_t)a2, a1 + 152, 1, (uint64_t)v100, (uint64_t)v98, &v102);
    std::string::basic_string[abi:ne180100]<0>(&v95, (char *)siri::dialogengine::TYPE_ARRAY);
    v20 = siri::dialogengine::ConditionExpression::EvaluateOther(a1, v19, &v102, (uint64_t)&v95);
    if (v97 < 0)
      operator delete(v95);
    v21 = v103;
    if (v103)
    {
      p_shared_owners = (unint64_t *)&v103->__shared_owners_;
      do
        v23 = __ldaxr(p_shared_owners);
      while (__stlxr(v23 - 1, p_shared_owners));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    if (v99 < 0)
      operator delete(v98[0]);
    if (v101 < 0)
      operator delete(v100[0]);
    return v20;
  }
  v16 = (uint64_t)(v7 + 4);
  while (1)
  {
    v17 = *((_QWORD *)v15 + 1);
    if (v10 == v17)
      break;
    if (v12 > 1)
    {
      if (v17 >= *(_QWORD *)&v9)
        v17 %= *(_QWORD *)&v9;
    }
    else
    {
      v17 &= *(_QWORD *)&v9 - 1;
    }
    if (v17 != v13)
      goto LABEL_23;
LABEL_20:
    v15 = *(unsigned __int8 **)v15;
    if (!v15)
      goto LABEL_23;
  }
  if ((std::equal_to<std::string>::operator()[abi:ne180100](v16, v15 + 16, (unsigned __int8 *)(a1 + 176)) & 1) == 0)
    goto LABEL_20;
  v18 = *((_DWORD *)v15 + 10);
  if (v18 == 18)
    goto LABEL_23;
  if (!*a3)
    return 0;
  if (!v25)
    return 0;
  v26 = v25;
  v95 = 0;
  v96 = 0;
  v27 = (unsigned __int8 *)std::string::basic_string[abi:ne180100]<0>(v100, "dialog.Array");
  IsBinaryOperator = siri::dialogengine::IsBinaryOperator(v27, (unsigned __int8 *)(a1 + 176));
  if (v101 < 0)
    operator delete(v100[0]);
  if (!IsBinaryOperator)
  {
    v31 = 0;
    v32 = 0;
    goto LABEL_49;
  }
  if (!(*(char *)(a1 + 223) < 0 ? *(_QWORD *)(a1 + 208) : *(unsigned __int8 *)(a1 + 223)))
    return 0;
  std::string::basic_string[abi:ne180100]<0>(v100, "");
  std::string::basic_string[abi:ne180100]<0>(v98, "");
  siri::dialogengine::ResolveValue((uint64_t)a2, a1 + 200, 1, (uint64_t)v100, (uint64_t)v98, (uint64_t *)&v93);
  v32 = v93;
  v31 = v94;
  v93 = 0;
  v94 = 0;
  v95 = v32;
  v96 = v31;
  if (v99 < 0)
    operator delete(v98[0]);
  if (v101 < 0)
    operator delete(v100[0]);
LABEL_49:
  switch(v18)
  {
    case 0:
      v91[0] = (uint64_t)v32;
      v91[1] = (uint64_t)v31;
      if (v31)
      {
        v33 = (unint64_t *)&v31->__shared_owners_;
        do
          v34 = __ldxr(v33);
        while (__stxr(v34 + 1, v33));
      }
      v35 = v91;
      v36 = siri::dialogengine::VariableArray::AllEqual(v26, a2, v91);
      goto LABEL_124;
    case 1:
      v90[0] = (uint64_t)v32;
      v90[1] = (uint64_t)v31;
      if (v31)
      {
        v57 = (unint64_t *)&v31->__shared_owners_;
        do
          v58 = __ldxr(v57);
        while (__stxr(v58 + 1, v57));
      }
      v35 = v90;
      v36 = siri::dialogengine::VariableArray::AllGreaterThan(v26, a2, v90);
      goto LABEL_124;
    case 2:
      v84[0] = (uint64_t)v32;
      v84[1] = (uint64_t)v31;
      if (v31)
      {
        v49 = (unint64_t *)&v31->__shared_owners_;
        do
          v50 = __ldxr(v49);
        while (__stxr(v50 + 1, v49));
      }
      v35 = v84;
      v36 = siri::dialogengine::VariableArray::AllGreaterThanOrEqual(v26, a2, v84);
      goto LABEL_124;
    case 3:
      v88[0] = (uint64_t)v32;
      v88[1] = (uint64_t)v31;
      if (v31)
      {
        v53 = (unint64_t *)&v31->__shared_owners_;
        do
          v54 = __ldxr(v53);
        while (__stxr(v54 + 1, v53));
      }
      v35 = v88;
      v36 = siri::dialogengine::VariableArray::AllLessThan(v26, a2, v88);
      goto LABEL_124;
    case 4:
      v86[0] = (uint64_t)v32;
      v86[1] = (uint64_t)v31;
      if (v31)
      {
        v43 = (unint64_t *)&v31->__shared_owners_;
        do
          v44 = __ldxr(v43);
        while (__stxr(v44 + 1, v43));
      }
      v35 = v86;
      v36 = siri::dialogengine::VariableArray::AllLessThanOrEqual(v26, a2, v86);
      goto LABEL_124;
    case 5:
      v89[0] = (uint64_t)v32;
      v89[1] = (uint64_t)v31;
      if (v31)
      {
        v61 = (unint64_t *)&v31->__shared_owners_;
        do
          v62 = __ldxr(v61);
        while (__stxr(v62 + 1, v61));
      }
      v35 = v89;
      v36 = siri::dialogengine::VariableArray::AnyGreaterThan(v26, a2, v89);
      goto LABEL_124;
    case 6:
      v83[0] = (uint64_t)v32;
      v83[1] = (uint64_t)v31;
      if (v31)
      {
        v63 = (unint64_t *)&v31->__shared_owners_;
        do
          v64 = __ldxr(v63);
        while (__stxr(v64 + 1, v63));
      }
      v35 = v83;
      v36 = siri::dialogengine::VariableArray::AnyGreaterThanOrEqual(v26, a2, v83);
      goto LABEL_124;
    case 7:
      v87[0] = (uint64_t)v32;
      v87[1] = (uint64_t)v31;
      if (v31)
      {
        v55 = (unint64_t *)&v31->__shared_owners_;
        do
          v56 = __ldxr(v55);
        while (__stxr(v56 + 1, v55));
      }
      v35 = v87;
      v36 = siri::dialogengine::VariableArray::AnyLessThan(v26, a2, v87);
      goto LABEL_124;
    case 8:
      v85[0] = (uint64_t)v32;
      v85[1] = (uint64_t)v31;
      if (v31)
      {
        v67 = (unint64_t *)&v31->__shared_owners_;
        do
          v68 = __ldxr(v67);
        while (__stxr(v68 + 1, v67));
      }
      v35 = v85;
      v36 = siri::dialogengine::VariableArray::AnyLessThanOrEqual(v26, a2, v85);
      goto LABEL_124;
    case 9:
      v92[0] = (uint64_t)v32;
      v92[1] = (uint64_t)v31;
      if (v31)
      {
        v47 = (unint64_t *)&v31->__shared_owners_;
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
      }
      v35 = v92;
      v36 = siri::dialogengine::VariableArray::Contains(v26, a2, v92);
      goto LABEL_124;
    case 10:
      v80[0] = v32;
      v80[1] = v31;
      if (v31)
      {
        v69 = (unint64_t *)&v31->__shared_owners_;
        do
          v70 = __ldxr(v69);
        while (__stxr(v70 + 1, v69));
      }
      v35 = v80;
      v36 = siri::dialogengine::VariableArray::AllUnset(v26, a2, (uint64_t)v80);
      goto LABEL_124;
    case 11:
      v79[0] = v32;
      v79[1] = v31;
      if (v31)
      {
        v41 = (unint64_t *)&v31->__shared_owners_;
        do
          v42 = __ldxr(v41);
        while (__stxr(v42 + 1, v41));
      }
      v35 = v79;
      v36 = siri::dialogengine::VariableArray::AnyUnset(v26, a2, (uint64_t)v79);
      goto LABEL_124;
    case 12:
      v82[0] = v32;
      v82[1] = v31;
      if (v31)
      {
        v45 = (unint64_t *)&v31->__shared_owners_;
        do
          v46 = __ldxr(v45);
        while (__stxr(v46 + 1, v45));
      }
      v35 = v82;
      v36 = siri::dialogengine::VariableArray::AllSet(v26, a2, (uint64_t)v82);
      goto LABEL_124;
    case 13:
      v81[0] = v32;
      v81[1] = v31;
      if (v31)
      {
        v65 = (unint64_t *)&v31->__shared_owners_;
        do
          v66 = __ldxr(v65);
        while (__stxr(v66 + 1, v65));
      }
      v35 = v81;
      v36 = siri::dialogengine::VariableArray::AnySet(v26, a2, (uint64_t)v81);
      goto LABEL_124;
    case 14:
      v77[0] = v32;
      v77[1] = v31;
      if (v31)
      {
        v39 = (unint64_t *)&v31->__shared_owners_;
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
      }
      v35 = v77;
      v36 = siri::dialogengine::VariableArray::AnyEmpty(v26, a2, (uint64_t)v77);
      goto LABEL_124;
    case 15:
      v78[0] = v32;
      v78[1] = v31;
      if (v31)
      {
        v51 = (unint64_t *)&v31->__shared_owners_;
        do
          v52 = __ldxr(v51);
        while (__stxr(v52 + 1, v51));
      }
      v35 = v78;
      v36 = siri::dialogengine::VariableArray::AllEmpty(v26, a2, (uint64_t)v78);
      goto LABEL_124;
    case 16:
      v75[0] = v32;
      v75[1] = v31;
      if (v31)
      {
        v37 = (unint64_t *)&v31->__shared_owners_;
        do
          v38 = __ldxr(v37);
        while (__stxr(v38 + 1, v37));
      }
      v35 = v75;
      v36 = siri::dialogengine::VariableArray::AnyNonEmpty(v26, a2, (uint64_t)v75);
      goto LABEL_124;
    case 17:
      v76[0] = v32;
      v76[1] = v31;
      if (v31)
      {
        v59 = (unint64_t *)&v31->__shared_owners_;
        do
          v60 = __ldxr(v59);
        while (__stxr(v60 + 1, v59));
      }
      v35 = v76;
      v36 = siri::dialogengine::VariableArray::AllNonEmpty(v26, a2, (uint64_t)v76);
LABEL_124:
      v20 = v36;
      std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)v35);
      break;
    default:
      siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"Unknown operator for dialog.Array.", v28);
      v20 = 0;
      break;
  }
  if (v31)
  {
    v71 = (unint64_t *)&v31->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  return v20;
}

void sub_1BF8AE670(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::ConditionExpression::EvaluateOther(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  _QWORD **v6;
  int v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t result;
  int v12;
  int v13;
  std::string *v15;
  __int128 v16;
  const std::string::value_type *v17;
  uint64_t v18;
  const std::string::value_type *v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  int v27;
  const std::string::value_type *v28;
  std::string::size_type v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  __int128 v33;
  std::string v34;
  std::string v35;
  std::string v36;
  std::string v37;
  std::string v38;
  __int128 v39;
  std::string::size_type v40;

  v6 = (_QWORD **)(a1 + 176);
  if ((*(char *)(a1 + 199) & 0x80000000) == 0)
  {
    v7 = *(unsigned __int8 *)(a1 + 199);
    if (!*(_BYTE *)(a1 + 199))
      goto LABEL_11;
    v8 = (_QWORD *)(a1 + 176);
    if (v7 != 5)
    {
      if (v7 == 8)
      {
        v9 = *v6;
        goto LABEL_10;
      }
      goto LABEL_18;
    }
LABEL_14:
    v12 = *(_DWORD *)v8;
    v13 = *((unsigned __int8 *)v8 + 4);
    if (v12 == 1953525093 && v13 == 121)
    {
      if (*a3)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a3 + 32))(*a3);
      else
        return 1;
    }
    goto LABEL_18;
  }
  v10 = *(_QWORD *)(a1 + 184);
  switch(v10)
  {
    case 0:
      goto LABEL_11;
    case 5:
      v8 = *v6;
      goto LABEL_14;
    case 8:
      v9 = (_QWORD *)**v6;
LABEL_10:
      if (v9 == (_QWORD *)0x7974706D656E6F6ELL)
      {
LABEL_11:
        result = *a3;
        if (*a3)
          return (*(unsigned int (**)(uint64_t, _QWORD **))(*(_QWORD *)result + 32))(result, v6) ^ 1;
        return result;
      }
      break;
  }
LABEL_18:
  std::operator+<char>();
  v15 = std::string::append(&v34, "' for expression '");
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  v19 = *(const std::string::value_type **)(a1 + 152);
  v18 = a1 + 152;
  v17 = v19;
  v20 = *(char *)(v18 + 23);
  if (v20 >= 0)
    v21 = (const std::string::value_type *)v18;
  else
    v21 = v17;
  if (v20 >= 0)
    v22 = *(unsigned __int8 *)(v18 + 23);
  else
    v22 = *(_QWORD *)(v18 + 8);
  v23 = std::string::append(&v35, v21, v22);
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  v25 = std::string::append(&v36, "' for type '");
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  v27 = *(char *)(a4 + 23);
  if (v27 >= 0)
    v28 = (const std::string::value_type *)a4;
  else
    v28 = *(const std::string::value_type **)a4;
  if (v27 >= 0)
    v29 = *(unsigned __int8 *)(a4 + 23);
  else
    v29 = *(_QWORD *)(a4 + 8);
  v30 = std::string::append(&v37, v28, v29);
  v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  v32 = std::string::append(&v38, "'");
  v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  v40 = v32->__r_.__value_.__r.__words[2];
  v39 = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::Log::LogWithLevel((uint64_t)&v39, 3u);
  if (SHIBYTE(v40) < 0)
    operator delete((void *)v39);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  return 0;
}

void sub_1BF8AEA6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (*(char *)(v35 - 25) < 0)
    operator delete(*(void **)(v35 - 48));
  if (*(char *)(v35 - 57) < 0)
    operator delete(*(void **)(v35 - 80));
  if (a35 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::ArrayOpStringToEnum(std::string const&)::$_0 &&>>()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  const std::string::value_type **v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *i;
  unint64_t v12;
  char *v13;
  std::string *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  int8x8_t prime;
  void *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint8x8_t v26;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  float *v38;
  _QWORD v39[3];
  int v40;
  uint64_t v41[3];
  int v42;
  uint64_t v43[3];
  int v44;
  uint64_t v45[3];
  int v46;
  uint64_t v47[3];
  int v48;
  uint64_t v49[3];
  int v50;
  uint64_t v51[3];
  int v52;
  uint64_t v53[3];
  int v54;
  uint64_t v55[3];
  int v56;
  uint64_t v57[3];
  int v58;
  uint64_t v59[3];
  int v60;
  uint64_t v61[3];
  int v62;
  uint64_t v63[3];
  int v64;
  uint64_t v65[3];
  int v66;
  uint64_t v67[3];
  int v68;
  uint64_t v69[3];
  int v70;
  uint64_t v71[3];
  int v72;
  uint64_t v73[3];
  int v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v1 = operator new();
  std::string::basic_string[abi:ne180100]<0>(v39, "all_eq");
  v40 = 0;
  std::string::basic_string[abi:ne180100]<0>(v41, "all_gt");
  v42 = 1;
  std::string::basic_string[abi:ne180100]<0>(v43, "all_gte");
  v44 = 2;
  std::string::basic_string[abi:ne180100]<0>(v45, "all_lt");
  v46 = 3;
  std::string::basic_string[abi:ne180100]<0>(v47, "all_lte");
  v48 = 4;
  std::string::basic_string[abi:ne180100]<0>(v49, "any_gt");
  v50 = 5;
  std::string::basic_string[abi:ne180100]<0>(v51, "any_gte");
  v52 = 6;
  std::string::basic_string[abi:ne180100]<0>(v53, "any_lt");
  v54 = 7;
  std::string::basic_string[abi:ne180100]<0>(v55, "any_lte");
  v56 = 8;
  std::string::basic_string[abi:ne180100]<0>(v57, "contains");
  v58 = 9;
  std::string::basic_string[abi:ne180100]<0>(v59, "all_unset");
  v60 = 10;
  std::string::basic_string[abi:ne180100]<0>(v61, "any_unset");
  v62 = 11;
  std::string::basic_string[abi:ne180100]<0>(v63, "all_set");
  v64 = 12;
  std::string::basic_string[abi:ne180100]<0>(v65, "any_set");
  v66 = 13;
  std::string::basic_string[abi:ne180100]<0>(v67, "any_empty");
  v68 = 14;
  std::string::basic_string[abi:ne180100]<0>(v69, "all_empty");
  v70 = 15;
  std::string::basic_string[abi:ne180100]<0>(v71, "any_nonempty");
  v72 = 16;
  std::string::basic_string[abi:ne180100]<0>(v73, "all_nonempty");
  v2 = 0;
  *(_DWORD *)(v1 + 32) = 1065353216;
  *(_OWORD *)v1 = 0u;
  v3 = (unint64_t *)(v1 + 24);
  v74 = 17;
  *(_OWORD *)(v1 + 16) = 0u;
  v37 = (_QWORD *)(v1 + 16);
  v38 = (float *)(v1 + 32);
  do
  {
    v4 = (const std::string::value_type **)&v39[4 * v2];
    v5 = std::__string_hash<char>::operator()[abi:ne180100](v1 + 24, (uint64_t)v4);
    v6 = v5;
    v7 = *(_QWORD *)(v1 + 8);
    if (v7)
    {
      v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
      v8.i16[0] = vaddlv_u8(v8);
      v9 = v8.u32[0];
      if (v8.u32[0] > 1uLL)
      {
        v0 = v5;
        if (v5 >= v7)
          v0 = v5 % v7;
      }
      else
      {
        v0 = (v7 - 1) & v5;
      }
      v10 = *(unsigned __int8 ***)(*(_QWORD *)v1 + 8 * v0);
      if (v10)
      {
        for (i = *v10; i; i = *(unsigned __int8 **)i)
        {
          v12 = *((_QWORD *)i + 1);
          if (v12 == v6)
          {
            if ((std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)v38, i + 16, (unsigned __int8 *)&v39[4 * v2]) & 1) != 0)goto LABEL_77;
          }
          else
          {
            if (v9 > 1)
            {
              if (v12 >= v7)
                v12 %= v7;
            }
            else
            {
              v12 &= v7 - 1;
            }
            if (v12 != v0)
              break;
          }
        }
      }
    }
    v13 = (char *)operator new(0x30uLL);
    *(_QWORD *)v13 = 0;
    *((_QWORD *)v13 + 1) = v6;
    v14 = (std::string *)(v13 + 16);
    if (*((char *)v4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v14, *v4, (std::string::size_type)v4[1]);
    }
    else
    {
      *(_OWORD *)&v14->__r_.__value_.__l.__data_ = *(_OWORD *)v4;
      *((_QWORD *)v13 + 4) = v4[2];
    }
    *((_DWORD *)v13 + 10) = v39[4 * v2 + 3];
    v15 = (float)(*v3 + 1);
    v16 = *v38;
    if (!v7 || (float)(v16 * (float)v7) < v15)
    {
      v17 = (v7 & (v7 - 1)) != 0;
      if (v7 < 3)
        v17 = 1;
      v18 = v17 | (2 * v7);
      v19 = vcvtps_u32_f32(v15 / v16);
      if (v18 <= v19)
        prime = (int8x8_t)v19;
      else
        prime = (int8x8_t)v18;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      }
      v7 = *(_QWORD *)(v1 + 8);
      if (*(_QWORD *)&prime > v7)
        goto LABEL_33;
      if (*(_QWORD *)&prime < v7)
      {
        v27 = vcvtps_u32_f32((float)*v3 / *v38);
        if (v7 < 3 || (v28 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
        {
          v27 = std::__next_prime(v27);
        }
        else
        {
          v29 = 1 << -(char)__clz(v27 - 1);
          if (v27 >= 2)
            v27 = v29;
        }
        if (*(_QWORD *)&prime <= v27)
          prime = (int8x8_t)v27;
        if (*(_QWORD *)&prime >= v7)
        {
          v7 = *(_QWORD *)(v1 + 8);
        }
        else
        {
          if (prime)
          {
LABEL_33:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v21 = operator new(8 * *(_QWORD *)&prime);
            v22 = *(_QWORD **)v1;
            *(_QWORD *)v1 = v21;
            if (v22)
              operator delete(v22);
            v23 = 0;
            *(int8x8_t *)(v1 + 8) = prime;
            do
              *(_QWORD *)(*(_QWORD *)v1 + 8 * v23++) = 0;
            while (*(_QWORD *)&prime != v23);
            v24 = (_QWORD *)*v37;
            if (*v37)
            {
              v25 = v24[1];
              v26 = (uint8x8_t)vcnt_s8(prime);
              v26.i16[0] = vaddlv_u8(v26);
              if (v26.u32[0] > 1uLL)
              {
                if (v25 >= *(_QWORD *)&prime)
                  v25 %= *(_QWORD *)&prime;
              }
              else
              {
                v25 &= *(_QWORD *)&prime - 1;
              }
              *(_QWORD *)(*(_QWORD *)v1 + 8 * v25) = v37;
              v30 = (_QWORD *)*v24;
              if (*v24)
              {
                do
                {
                  v31 = v30[1];
                  if (v26.u32[0] > 1uLL)
                  {
                    if (v31 >= *(_QWORD *)&prime)
                      v31 %= *(_QWORD *)&prime;
                  }
                  else
                  {
                    v31 &= *(_QWORD *)&prime - 1;
                  }
                  if (v31 != v25)
                  {
                    if (!*(_QWORD *)(*(_QWORD *)v1 + 8 * v31))
                    {
                      *(_QWORD *)(*(_QWORD *)v1 + 8 * v31) = v24;
                      goto LABEL_58;
                    }
                    *v24 = *v30;
                    *v30 = **(_QWORD **)(*(_QWORD *)v1 + 8 * v31);
                    **(_QWORD **)(*(_QWORD *)v1 + 8 * v31) = v30;
                    v30 = v24;
                  }
                  v31 = v25;
LABEL_58:
                  v24 = v30;
                  v30 = (_QWORD *)*v30;
                  v25 = v31;
                }
                while (v30);
              }
            }
            v7 = (unint64_t)prime;
            goto LABEL_62;
          }
          v35 = *(_QWORD **)v1;
          *(_QWORD *)v1 = 0;
          if (v35)
            operator delete(v35);
          v7 = 0;
          *(_QWORD *)(v1 + 8) = 0;
        }
      }
LABEL_62:
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v6 >= v7)
          v0 = v6 % v7;
        else
          v0 = v6;
      }
      else
      {
        v0 = (v7 - 1) & v6;
      }
    }
    v32 = *(_QWORD **)v1;
    v33 = *(_QWORD **)(*(_QWORD *)v1 + 8 * v0);
    if (v33)
    {
      *(_QWORD *)v13 = *v33;
LABEL_75:
      *v33 = v13;
      goto LABEL_76;
    }
    *(_QWORD *)v13 = *v37;
    *v37 = v13;
    v32[v0] = v37;
    if (*(_QWORD *)v13)
    {
      v34 = *(_QWORD *)(*(_QWORD *)v13 + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v34 >= v7)
          v34 %= v7;
      }
      else
      {
        v34 &= v7 - 1;
      }
      v33 = (_QWORD *)(*(_QWORD *)v1 + 8 * v34);
      goto LABEL_75;
    }
LABEL_76:
    ++*v3;
LABEL_77:
    ++v2;
  }
  while (v2 != 18);
  siri::dialogengine::ArrayOpStringToEnum(std::string const&)::sMap = v1;
  v36 = 72;
  do
  {
    if (*((char *)&v39[v36 - 1] - 1) < 0)
      operator delete((void *)v39[v36 - 4]);
    v36 -= 4;
  }
  while (v36 * 8);
}

void sub_1BF8AF1F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  void **v12;

  while (1)
  {
    if (*((char *)v12 - 9) < 0)
      operator delete(*(v12 - 4));
    v12 -= 4;
    if (v12 == (void **)&a11)
    {
      MEMORY[0x1C3B8D890](v11, 0x10A0C408EF24B1CLL);
      _Unwind_Resume(a1);
    }
  }
}

BOOL siri::dialogengine::IsBinaryOperator(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v4;
  unint64_t v5;
  unsigned __int8 *v6;
  _QWORD *v7;
  _QWORD *v9;
  char v10;
  char **v11;
  char *v12;

  if ((v4 & 1) == 0
  {
    v9 = (_QWORD *)operator new();
    *v9 = 0;
    siri::dialogengine::IsBinaryOperator(std::string const&,std::string const&)::flag = (uint64_t)v9;
  }
  v5 = atomic_load((unint64_t *)siri::dialogengine::IsBinaryOperator(std::string const&,std::string const&)::flag);
  if (v5 != -1)
  {
    v12 = &v10;
    v11 = &v12;
    std::__call_once((std::once_flag::_State_type *)siri::dialogengine::IsBinaryOperator(std::string const&,std::string const&)::flag, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::IsBinaryOperator(std::string const&,std::string const&)::$_0 &&>>);
  }
  v6 = std::__hash_table<std::__hash_value_type<std::string,google::protobuf::util::Status (*)(google::protobuf::util::converter::ProtoStreamObjectSource const*,google::protobuf::Type const&,google::protobuf::StringPiece,google::protobuf::util::converter::ObjectWriter *)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,google::protobuf::util::Status (*)(google::protobuf::util::converter::ProtoStreamObjectSource const*,google::protobuf::Type const&,google::protobuf::StringPiece,google::protobuf::util::converter::ObjectWriter *)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,google::protobuf::util::Status (*)(google::protobuf::util::converter::ProtoStreamObjectSource const*,google::protobuf::Type const&,google::protobuf::StringPiece,google::protobuf::util::converter::ObjectWriter *)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,google::protobuf::util::Status (*)(google::protobuf::util::converter::ProtoStreamObjectSource const*,google::protobuf::Type const&,google::protobuf::StringPiece,google::protobuf::util::converter::ObjectWriter *)>>>::find<std::string>((_QWORD *)siri::dialogengine::IsBinaryOperator(std::string const&,std::string const&)::sBinaryOperators, a1);
  if (v6)
    v7 = v6 + 40;
  else
    v7 = (_QWORD *)siri::dialogengine::IsBinaryOperator(std::string const&,std::string const&)::sBinaryOtherOperators;
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v7, a2) != 0;
}

void sub_1BF8AF3BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::IsBinaryOperator(std::string const&,std::string const&)::$_0 &&>>()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  unint64_t j;
  uint64_t v6;
  uint64_t k;
  uint64_t v8;
  uint64_t m;
  uint64_t v10;
  double result;
  _BYTE v12[40];
  void *__p[2];
  char v14;
  std::string v15[10];
  _QWORD v16[3];
  _QWORD v17[3];
  _QWORD v18[3];
  _QWORD v19[3];
  _QWORD v20[3];
  _QWORD v21[3];
  _QWORD v22[3];
  _QWORD v23[3];
  _QWORD v24[3];
  _QWORD v25[3];
  _QWORD v26[3];
  _QWORD v27[3];
  _QWORD v28[3];
  _QWORD v29[3];
  _QWORD v30[3];
  std::string v31[2];
  std::string v32[2];

  v32[1].__r_.__value_.__r.__words[2] = *MEMORY[0x1E0C80C00];
  v0 = operator new();
  *(_OWORD *)v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_DWORD *)(v0 + 32) = 1065353216;
  siri::dialogengine::IsBinaryOperator(std::string const&,std::string const&)::sBinaryOperators = v0;
  std::string::basic_string[abi:ne180100]<0>(__p, "dialog.String");
  std::string::basic_string[abi:ne180100]<0>(v15, "=");
  std::string::basic_string[abi:ne180100]<0>(v16, "!=");
  std::string::basic_string[abi:ne180100]<0>(v17, "<");
  std::string::basic_string[abi:ne180100]<0>(v18, "<=");
  std::string::basic_string[abi:ne180100]<0>(v19, ">");
  std::string::basic_string[abi:ne180100]<0>(v20, ">=");
  std::string::basic_string[abi:ne180100]<0>(v21, "contains");
  std::string::basic_string[abi:ne180100]<0>(v22, "startswith");
  std::string::basic_string[abi:ne180100]<0>(v23, "endswith");
  std::string::basic_string[abi:ne180100]<0>(v24, "regex_match");
  std::string::basic_string[abi:ne180100]<0>(v25, "ver_eq");
  std::string::basic_string[abi:ne180100]<0>(v26, "ver_ne");
  std::string::basic_string[abi:ne180100]<0>(v27, "ver_gt");
  std::string::basic_string[abi:ne180100]<0>(v28, "ver_ge");
  std::string::basic_string[abi:ne180100]<0>(v29, "ver_lt");
  std::string::basic_string[abi:ne180100]<0>(v30, "ver_le");
  std::unordered_set<std::string>::unordered_set((uint64_t)v12, (unsigned __int8 *)v15, 16);
  std::pair<std::string const,std::unordered_set<std::string> const>::pair[abi:ne180100]<true,0>(v31, (__int128 *)__p, (uint64_t)v12);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string> const>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string> const>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string> const>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string> const>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::unordered_set<std::string> const>>(v0, (unsigned __int8 *)v31, (uint64_t)v31);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v32);
  if (SHIBYTE(v31[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31[0].__r_.__value_.__l.__data_);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v12);
  v1 = 384;
  do
  {
    if (SHIBYTE(v15[v1 / 0x18 - 1].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[v1 / 8]);
    v1 -= 24;
  }
  while (v1);
  if (v14 < 0)
    operator delete(__p[0]);
  v2 = siri::dialogengine::IsBinaryOperator(std::string const&,std::string const&)::sBinaryOperators;
  std::string::basic_string[abi:ne180100]<0>(__p, "dialog.Number");
  std::string::basic_string[abi:ne180100]<0>(v15, "=");
  std::string::basic_string[abi:ne180100]<0>(v16, "!=");
  std::string::basic_string[abi:ne180100]<0>(v17, "<");
  std::string::basic_string[abi:ne180100]<0>(v18, "<=");
  std::string::basic_string[abi:ne180100]<0>(v19, ">");
  std::string::basic_string[abi:ne180100]<0>(v20, ">=");
  std::string::basic_string[abi:ne180100]<0>(v21, "is_multiple_of");
  std::unordered_set<std::string>::unordered_set((uint64_t)v12, (unsigned __int8 *)v15, 7);
  std::pair<std::string const,std::unordered_set<std::string> const>::pair[abi:ne180100]<true,0>(v31, (__int128 *)__p, (uint64_t)v12);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string> const>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string> const>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string> const>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string> const>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::unordered_set<std::string> const>>(v2, (unsigned __int8 *)v31, (uint64_t)v31);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v32);
  if (SHIBYTE(v31[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31[0].__r_.__value_.__l.__data_);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v12);
  for (i = 0; i != -21; i -= 3)
  {
    if (SHIBYTE(v21[i + 2]) < 0)
      operator delete((void *)v21[i]);
  }
  if (v14 < 0)
    operator delete(__p[0]);
  v4 = siri::dialogengine::IsBinaryOperator(std::string const&,std::string const&)::sBinaryOperators;
  std::string::basic_string[abi:ne180100]<0>(__p, "dialog.Boolean");
  std::string::basic_string[abi:ne180100]<0>(v31, "=");
  std::string::basic_string[abi:ne180100]<0>(v32, "!=");
  std::unordered_set<std::string>::unordered_set((uint64_t)v12, (unsigned __int8 *)v31, 2);
  std::pair<std::string const,std::unordered_set<std::string> const>::pair[abi:ne180100]<true,0>(v15, (__int128 *)__p, (uint64_t)v12);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string> const>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string> const>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string> const>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string> const>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::unordered_set<std::string> const>>(v4, (unsigned __int8 *)v15, (uint64_t)v15);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v16);
  if (SHIBYTE(v15[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15[0].__r_.__value_.__l.__data_);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v12);
  for (j = 0; j != 0x1FFFFFFFFFFFFFFALL; j -= 3)
  {
    if (SHIBYTE(v32[0].__r_.__value_.__r.__words[j + 2]) < 0)
      operator delete(v31[j / 3 + 1].__r_.__value_.__l.__data_);
  }
  if (v14 < 0)
    operator delete(__p[0]);
  v6 = siri::dialogengine::IsBinaryOperator(std::string const&,std::string const&)::sBinaryOperators;
  std::string::basic_string[abi:ne180100]<0>(__p, "dialog.Calendar");
  std::string::basic_string[abi:ne180100]<0>(v15, "is_holiday");
  std::string::basic_string[abi:ne180100]<0>(v16, "=");
  std::string::basic_string[abi:ne180100]<0>(v17, "!=");
  std::string::basic_string[abi:ne180100]<0>(v18, "<");
  std::string::basic_string[abi:ne180100]<0>(v19, "<=");
  std::string::basic_string[abi:ne180100]<0>(v20, ">");
  std::string::basic_string[abi:ne180100]<0>(v21, ">=");
  std::unordered_set<std::string>::unordered_set((uint64_t)v12, (unsigned __int8 *)v15, 7);
  std::pair<std::string const,std::unordered_set<std::string> const>::pair[abi:ne180100]<true,0>(v31, (__int128 *)__p, (uint64_t)v12);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string> const>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string> const>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string> const>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string> const>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::unordered_set<std::string> const>>(v6, (unsigned __int8 *)v31, (uint64_t)v31);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v32);
  if (SHIBYTE(v31[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31[0].__r_.__value_.__l.__data_);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v12);
  for (k = 0; k != -21; k -= 3)
  {
    if (SHIBYTE(v21[k + 2]) < 0)
      operator delete((void *)v21[k]);
  }
  if (v14 < 0)
    operator delete(__p[0]);
  v8 = siri::dialogengine::IsBinaryOperator(std::string const&,std::string const&)::sBinaryOperators;
  std::string::basic_string[abi:ne180100]<0>(__p, "dialog.Array");
  std::string::basic_string[abi:ne180100]<0>(v15, "contains");
  std::string::basic_string[abi:ne180100]<0>(v16, "all_eq");
  std::string::basic_string[abi:ne180100]<0>(v17, "all_lt");
  std::string::basic_string[abi:ne180100]<0>(v18, "all_gt");
  std::string::basic_string[abi:ne180100]<0>(v19, "all_lte");
  std::string::basic_string[abi:ne180100]<0>(v20, "all_gte");
  std::string::basic_string[abi:ne180100]<0>(v21, "any_lt");
  std::string::basic_string[abi:ne180100]<0>(v22, "any_gt");
  std::string::basic_string[abi:ne180100]<0>(v23, "any_lte");
  std::string::basic_string[abi:ne180100]<0>(v24, "any_gte");
  std::unordered_set<std::string>::unordered_set((uint64_t)v12, (unsigned __int8 *)v15, 10);
  std::pair<std::string const,std::unordered_set<std::string> const>::pair[abi:ne180100]<true,0>(v31, (__int128 *)__p, (uint64_t)v12);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string> const>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string> const>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string> const>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string> const>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::unordered_set<std::string> const>>(v8, (unsigned __int8 *)v31, (uint64_t)v31);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v32);
  if (SHIBYTE(v31[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31[0].__r_.__value_.__l.__data_);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v12);
  for (m = 0; m != -30; m -= 3)
  {
    if (SHIBYTE(v24[m + 2]) < 0)
      operator delete((void *)v24[m]);
  }
  if (v14 < 0)
    operator delete(__p[0]);
  v10 = operator new();
  result = 0.0;
  *(_OWORD *)v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_DWORD *)(v10 + 32) = 1065353216;
  siri::dialogengine::IsBinaryOperator(std::string const&,std::string const&)::sBinaryOtherOperators = v10;
  return result;
}

void sub_1BF8AFB34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v56 + 24);
  if (*(char *)(v57 - 97) < 0)
    operator delete(*(void **)(v57 - 120));
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a10);
  v59 = 0;
  while (1)
  {
    if (*(&a56 + v59) < 0)
      operator delete(*(void **)((char *)&a51 + v59));
    v59 -= 24;
    if (v59 == -240)
    {
      if (a20 < 0)
        operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t std::unordered_set<std::string>::unordered_set(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 24 * a3;
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, a2, (uint64_t)a2);
      a2 += 24;
      v5 -= 24;
    }
    while (v5);
  }
  return a1;
}

void sub_1BF8AFE60(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::unordered_set<std::string> const>::pair[abi:ne180100]<true,0>(std::string *this, __int128 *a2, uint64_t a3)
{
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  std::unordered_set<std::string>::unordered_set((uint64_t)&this[1], a3);
  return this;
}

void sub_1BF8AFED0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string> const>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string> const>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string> const>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string> const>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::unordered_set<std::string> const>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  _QWORD *v16;
  char *v17;
  char *v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  int8x8_t prime;
  void *v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  uint64_t v40[2];
  char v41;

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  v16 = (_QWORD *)(a1 + 16);
  v17 = (char *)operator new(0x50uLL);
  v18 = v17;
  v40[0] = (uint64_t)v17;
  v40[1] = a1 + 16;
  v41 = 0;
  *(_QWORD *)v17 = 0;
  *((_QWORD *)v17 + 1) = v9;
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v17 + 16), *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *((_OWORD *)v17 + 1) = *(_OWORD *)a3;
    *((_QWORD *)v17 + 4) = *(_QWORD *)(a3 + 16);
  }
  std::unordered_set<std::string>::unordered_set((uint64_t)(v18 + 40), a3 + 24);
  v41 = 1;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v10 || (float)(v20 * (float)v10) < v19)
  {
    v21 = 1;
    if (v10 >= 3)
      v21 = (v10 & (v10 - 1)) != 0;
    v22 = v21 | (2 * v10);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      prime = (int8x8_t)v23;
    else
      prime = (int8x8_t)v22;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v10 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)&prime > v10)
      goto LABEL_33;
    if (*(_QWORD *)&prime < v10)
    {
      v31 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        v31 = std::__next_prime(v31);
      }
      else
      {
        v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2)
          v31 = v33;
      }
      if (*(_QWORD *)&prime <= v31)
        prime = (int8x8_t)v31;
      if (*(_QWORD *)&prime >= v10)
      {
        v10 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v25 = operator new(8 * *(_QWORD *)&prime);
          v26 = *(void **)a1;
          *(_QWORD *)a1 = v25;
          if (v26)
            operator delete(v26);
          v27 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v27++) = 0;
          while (*(_QWORD *)&prime != v27);
          v28 = (_QWORD *)*v16;
          if (*v16)
          {
            v29 = v28[1];
            v30 = (uint8x8_t)vcnt_s8(prime);
            v30.i16[0] = vaddlv_u8(v30);
            if (v30.u32[0] > 1uLL)
            {
              if (v29 >= *(_QWORD *)&prime)
                v29 %= *(_QWORD *)&prime;
            }
            else
            {
              v29 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = v16;
            v34 = (_QWORD *)*v28;
            if (*v28)
            {
              do
              {
                v35 = v34[1];
                if (v30.u32[0] > 1uLL)
                {
                  if (v35 >= *(_QWORD *)&prime)
                    v35 %= *(_QWORD *)&prime;
                }
                else
                {
                  v35 &= *(_QWORD *)&prime - 1;
                }
                if (v35 != v29)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v35))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v35) = v28;
                    goto LABEL_58;
                  }
                  *v28 = *v34;
                  *v34 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v35);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v35) = v34;
                  v34 = v28;
                }
                v35 = v29;
LABEL_58:
                v28 = v34;
                v34 = (_QWORD *)*v34;
                v29 = v35;
              }
              while (v34);
            }
          }
          v10 = (unint64_t)prime;
          goto LABEL_62;
        }
        v39 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v39)
          operator delete(v39);
        v10 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_62:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v36 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v3);
  v37 = v40[0];
  if (v36)
  {
    *(_QWORD *)v40[0] = *v36;
LABEL_75:
    *v36 = v37;
    goto LABEL_76;
  }
  *(_QWORD *)v40[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v37;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v16;
  if (*(_QWORD *)v37)
  {
    v38 = *(_QWORD *)(*(_QWORD *)v37 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v38 >= v10)
        v38 %= v10;
    }
    else
    {
      v38 &= v10 - 1;
    }
    v36 = (uint64_t *)(*(_QWORD *)a1 + 8 * v38);
    goto LABEL_75;
  }
LABEL_76:
  v40[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string> const>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string> const>,void *>>>>::reset[abi:ne180100](v40);
}

void sub_1BF8B0348(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string> const>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string> const>,void *>>>>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string> const>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::string> const>,void *>>>>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  *a1 = 0;
  if (v1)
  {
    if (*((_BYTE *)a1 + 16))
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1 + 40);
      if (*(char *)(v1 + 39) < 0)
        operator delete(*(void **)(v1 + 16));
    }
    operator delete((void *)v1);
  }
}

uint64_t std::unordered_set<std::string>::unordered_set(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_1BF8B0428(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,siri::dialogengine::ArrayOperators>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,siri::dialogengine::ArrayOperators>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,siri::dialogengine::ArrayOperators>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,siri::dialogengine::ArrayOperators>>>::~__hash_table(uint64_t a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,siri::dialogengine::ArrayOperators>,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

double siri::dialogengine::GetCalendarSecsUTC(siri::dialogengine::Context *a1, const std::string *a2)
{
  char *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  double *v17;
  double *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  double CurrentUTCOffset;
  double v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  void *v32;
  void *v33;
  char v34;
  char v35;
  void *__p[2];
  char v37;
  void *lpsrc;
  std::__shared_weak_count *v39;
  char *v40;
  std::__shared_weak_count *v41;

  std::string::basic_string[abi:ne180100]<0>(&v32, "");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  siri::dialogengine::ResolveValue((uint64_t)a1, (uint64_t)a2, 1, (uint64_t)&v32, (uint64_t)__p, (uint64_t *)&lpsrc);
  if (lpsrc
  {
    v40 = v4;
    v41 = v39;
    if (v39)
    {
      p_shared_owners = (unint64_t *)&v39->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
  }
  else
  {
    v40 = 0;
    v41 = 0;
  }
  v7 = v39;
  if (v39)
  {
    v8 = (unint64_t *)&v39->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v37 < 0)
    operator delete(__p[0]);
  if (v34 < 0)
    operator delete(v32);
  v10 = v40;
  if (v40)
  {
    std::string::basic_string[abi:ne180100]<0>(&v32, "secs");
    v11 = std::__tree<std::string>::find<std::string>((uint64_t)(v10 + 72), (const void **)&v32);
    if (v10 + 80 == (char *)v11)
    {
      v21 = 0;
      v18 = 0;
      goto LABEL_40;
    }
    v12 = v11;
    v13 = *(const void **)(v11 + 56);
    v14 = *(std::__shared_weak_count **)(v12 + 64);
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    if (v13
    {
      v18 = v17;
      if (!v14)
      {
        v21 = 0;
        goto LABEL_40;
      }
      v19 = (unint64_t *)&v14->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      v21 = v14;
    }
    else
    {
      v21 = 0;
      v18 = 0;
      if (!v14)
        goto LABEL_40;
    }
    v24 = (unint64_t *)&v14->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
LABEL_40:
    if (v34 < 0)
    {
      operator delete(v32);
      if (v18)
      {
LABEL_42:
        v23 = v18[9];
        if (!v21)
          goto LABEL_53;
LABEL_46:
        v26 = (unint64_t *)&v21->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
        goto LABEL_53;
      }
    }
    else if (v18)
    {
      goto LABEL_42;
    }
    v23 = 0.0;
    if (!v21)
      goto LABEL_53;
    goto LABEL_46;
  }
  LOBYTE(lpsrc) = 0;
  siri::dialogengine::GetTimeStampFromString(a2, &lpsrc, (time_t *)&v32);
  if ((_BYTE)lpsrc)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "UTC");
    CurrentUTCOffset = 0.0;
    if (!siri::dialogengine::StringsEqual((uint64_t)&v33, (uint64_t)__p))
      CurrentUTCOffset = siri::dialogengine::Context::GetCurrentUTCOffset(a1);
    if (v37 < 0)
      operator delete(__p[0]);
    v23 = (double)(uint64_t)v32 - CurrentUTCOffset;
  }
  else
  {
    v23 = 0.0;
  }
  if (v35 < 0)
    operator delete(v33);
LABEL_53:
  v28 = v41;
  if (v41)
  {
    v29 = (unint64_t *)&v41->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  return v23;
}

void sub_1BF8B0810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  if (a19 < 0)
    operator delete(__p);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v25 - 64);
  _Unwind_Resume(a1);
}

BOOL std::operator==[abi:ne180100]<std::allocator<char>>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v12;
  BOOL v13;
  _BOOL8 v14;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) == 0;
  if (!a1[23])
    return 1;
  v6 = v2 - 1;
  do
  {
    v8 = *a1++;
    v7 = v8;
    v10 = *a2++;
    v9 = v10;
    v12 = v6-- != 0;
    v13 = v7 == v9;
    v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

BOOL std::operator>=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, _QWORD *a2)
{
  int v2;
  int v3;
  size_t v4;
  size_t v5;
  size_t v6;
  int v7;

  v2 = *((char *)a2 + 23);
  v3 = *((char *)a1 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a1 + 23);
  else
    v4 = a1[1];
  if (v3 < 0)
    a1 = (_QWORD *)*a1;
  if (v2 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = a2[1];
  if (v2 < 0)
    a2 = (_QWORD *)*a2;
  if (v5 >= v4)
    v6 = v4;
  else
    v6 = v5;
  v7 = memcmp(a1, a2, v6);
  if (v7)
    return v7 >= 0;
  else
    return v4 >= v5;
}

BOOL std::operator<=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(const void **a1, const void **a2)
{
  int v2;
  int v3;
  size_t v4;
  const void *v5;
  size_t v6;
  const void *v7;
  size_t v8;
  int v9;

  v2 = *((char *)a1 + 23);
  v3 = *((char *)a2 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a2 + 23);
  else
    v4 = (size_t)a2[1];
  if (v3 >= 0)
    v5 = a2;
  else
    v5 = *a2;
  if (v2 >= 0)
    v6 = *((unsigned __int8 *)a1 + 23);
  else
    v6 = (size_t)a1[1];
  if (v2 >= 0)
    v7 = a1;
  else
    v7 = *a1;
  if (v6 >= v4)
    v8 = v4;
  else
    v8 = v6;
  v9 = memcmp(v5, v7, v8);
  if (v9)
    return v9 >= 0;
  else
    return v4 >= v6;
}

BOOL siri::dialogengine::ConditionExpression::ValidateBoolean(siri::dialogengine::ConditionExpression *this, siri::dialogengine::Context *a2)
{
  unsigned __int8 *v4;
  _BOOL4 IsUnaryOperator;
  _BOOL4 v6;
  _BOOL8 v7;
  unsigned __int8 *v8;
  _BOOL4 IsBinaryOperator;
  _BOOL4 v10;
  size_t v11;
  std::string *v12;
  __int128 v13;
  void *v14;
  std::string *v15;
  __int128 v16;
  int v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  std::string *v20;
  __int128 v21;
  void *v22;
  int v23;
  std::string *v24;
  __int128 v25;
  int v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  std::string v32;
  std::string v33;
  std::string v34;
  __int128 __s1;
  std::string::size_type v36;

  if ((*((char *)this + 199) & 0x80000000) == 0)
  {
    if (*((_BYTE *)this + 199))
      goto LABEL_3;
LABEL_8:
    if (*((char *)this + 223) < 0)
    {
      if (!*((_QWORD *)this + 26))
        return 1;
    }
    else if (!*((_BYTE *)this + 223))
    {
      return 1;
    }
    std::operator+<char>();
    v12 = std::string::append(&v34, "' has value but no operator");
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v36 = v12->__r_.__value_.__r.__words[2];
    __s1 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, &__s1, (uint64_t)this + 88);
    goto LABEL_22;
  }
  if (!*((_QWORD *)this + 23))
    goto LABEL_8;
LABEL_3:
  v4 = (unsigned __int8 *)std::string::basic_string[abi:ne180100]<0>(&__s1, "dialog.Boolean");
  IsUnaryOperator = siri::dialogengine::IsUnaryOperator(v4, (unsigned __int8 *)this + 176);
  v6 = IsUnaryOperator;
  if ((SHIBYTE(v36) & 0x80000000) == 0)
  {
    if (IsUnaryOperator)
      goto LABEL_5;
LABEL_12:
    v8 = (unsigned __int8 *)std::string::basic_string[abi:ne180100]<0>(&__s1, "dialog.Boolean");
    IsBinaryOperator = siri::dialogengine::IsBinaryOperator(v8, (unsigned __int8 *)this + 176);
    v10 = IsBinaryOperator;
    if (SHIBYTE(v36) < 0)
    {
      operator delete((void *)__s1);
      if (v10)
        goto LABEL_14;
    }
    else if (IsBinaryOperator)
    {
LABEL_14:
      if (*((char *)this + 223) < 0)
      {
        if (*((_QWORD *)this + 26))
          goto LABEL_16;
      }
      else if (*((_BYTE *)this + 223))
      {
LABEL_16:
        siri::dialogengine::ResolveType(0, (uint64_t)a2, (uint64_t)this + 200, 1, (uint64_t)&__s1);
        v11 = strlen(siri::dialogengine::TYPE_BOOLEAN);
        if (SHIBYTE(v36) < 0)
        {
          if (v11 == *((_QWORD *)&__s1 + 1))
          {
            if (v11 == -1)
              std::string::__throw_out_of_range[abi:ne180100]();
            v22 = (void *)__s1;
            v23 = memcmp((const void *)__s1, siri::dialogengine::TYPE_BOOLEAN, v11);
            operator delete(v22);
            if (!v23)
              return 1;
          }
          else
          {
            operator delete((void *)__s1);
          }
        }
        else if (v11 == HIBYTE(v36) && !memcmp(&__s1, siri::dialogengine::TYPE_BOOLEAN, v11))
        {
          return 1;
        }
        std::operator+<char>();
        v24 = std::string::append(&v32, "' has non-BOOLean value: '");
        v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        v33.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        v26 = *((char *)this + 223);
        if (v26 >= 0)
          v18 = (char *)this + 200;
        else
          v18 = (const std::string::value_type *)*((_QWORD *)this + 25);
        if (v26 >= 0)
          v19 = *((unsigned __int8 *)this + 223);
        else
          v19 = *((_QWORD *)this + 26);
        goto LABEL_46;
      }
      std::operator+<char>();
      v20 = std::string::append(&v34, "' has no value");
      v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      v36 = v20->__r_.__value_.__r.__words[2];
      __s1 = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Context::AddValidationError((uint64_t)a2, &__s1, (uint64_t)this + 88);
LABEL_22:
      if (SHIBYTE(v36) < 0)
        operator delete((void *)__s1);
      if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return 0;
      v14 = (void *)v34.__r_.__value_.__r.__words[0];
      goto LABEL_54;
    }
    std::operator+<char>();
    v15 = std::string::append(&v32, "' has invalid operator: '");
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v17 = *((char *)this + 199);
    if (v17 >= 0)
      v18 = (char *)this + 176;
    else
      v18 = (const std::string::value_type *)*((_QWORD *)this + 22);
    if (v17 >= 0)
      v19 = *((unsigned __int8 *)this + 199);
    else
      v19 = *((_QWORD *)this + 23);
LABEL_46:
    v27 = std::string::append(&v33, v18, v19);
    v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    v29 = std::string::append(&v34, "'");
    v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v36 = v29->__r_.__value_.__r.__words[2];
    __s1 = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, &__s1, (uint64_t)this + 88);
    if (SHIBYTE(v36) < 0)
      operator delete((void *)__s1);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return 0;
    v14 = (void *)v32.__r_.__value_.__r.__words[0];
LABEL_54:
    operator delete(v14);
    return 0;
  }
  operator delete((void *)__s1);
  if (!v6)
    goto LABEL_12;
LABEL_5:
  std::string::basic_string[abi:ne180100]<0>(&__s1, "Boolean condition");
  v7 = siri::dialogengine::ConditionExpression::ValidateUnaryOperator((uint64_t)this, (uint64_t)a2, (const void **)&__s1);
  if (SHIBYTE(v36) < 0)
    operator delete((void *)__s1);
  return v7;
}

void sub_1BF8B0E30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (*(char *)(v28 - 57) < 0)
    operator delete(*(void **)(v28 - 80));
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::ConditionExpression::ValidateString(siri::dialogengine::ConditionExpression *this, siri::dialogengine::Context *a2)
{
  uint64_t v4;
  _QWORD *v5;
  unsigned __int8 *v6;
  _BOOL4 IsUnaryOperator;
  _BOOL4 v8;
  _BOOL8 v9;
  std::string *v10;
  __int128 v11;
  void *v12;
  unsigned __int8 *v13;
  _BOOL4 IsBinaryOperator;
  _BOOL4 v15;
  size_t v16;
  std::string *v17;
  __int128 v18;
  int v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  std::string *v27;
  __int128 v28;
  void *v29;
  void *v30;
  int v31;
  std::string *v32;
  __int128 v33;
  int v34;
  const std::string::value_type *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string *v39;
  __int128 v40;
  int v41;
  char *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::string::size_type v50;
  char v51;
  std::string *v52;
  __int128 v53;
  std::string *v54;
  std::string::size_type v55;
  std::string *v56;
  __int128 v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::string v61;
  char *v62;
  std::string::size_type size;
  std::string v64;
  std::string v65;
  std::string v66;
  std::string __s1;

  if (*((char *)this + 199) < 0)
    v4 = *((_QWORD *)this + 23);
  else
    v4 = *((unsigned __int8 *)this + 199);
  if (!v4)
  {
    if (*((char *)this + 223) < 0)
    {
      if (*((_QWORD *)this + 26))
        goto LABEL_11;
    }
    else if (*((_BYTE *)this + 223))
    {
LABEL_11:
      std::operator+<char>();
      v10 = std::string::append(&v66, "' has value but no operator");
      v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      __s1.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Context::AddValidationError((uint64_t)a2, (__int128 *)&__s1, (uint64_t)this + 88);
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s1.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v66.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return 0;
      v12 = (void *)v66.__r_.__value_.__r.__words[0];
      goto LABEL_41;
    }
    return 1;
  }
  v5 = (_QWORD *)((char *)this + 176);
  v6 = (unsigned __int8 *)std::string::basic_string[abi:ne180100]<0>(&__s1, "dialog.String");
  IsUnaryOperator = siri::dialogengine::IsUnaryOperator(v6, (unsigned __int8 *)this + 176);
  v8 = IsUnaryOperator;
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__s1.__r_.__value_.__l.__data_);
    if (v8)
    {
LABEL_7:
      std::string::basic_string[abi:ne180100]<0>(&__s1, "String condition");
      v9 = siri::dialogengine::ConditionExpression::ValidateUnaryOperator((uint64_t)this, (uint64_t)a2, (const void **)&__s1.__r_.__value_.__l.__data_);
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s1.__r_.__value_.__l.__data_);
      return v9;
    }
  }
  else if (IsUnaryOperator)
  {
    goto LABEL_7;
  }
  v13 = (unsigned __int8 *)std::string::basic_string[abi:ne180100]<0>(&__s1, "dialog.String");
  IsBinaryOperator = siri::dialogengine::IsBinaryOperator(v13, (unsigned __int8 *)this + 176);
  v15 = IsBinaryOperator;
  if ((SHIBYTE(__s1.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (IsBinaryOperator)
      goto LABEL_18;
    goto LABEL_27;
  }
  operator delete(__s1.__r_.__value_.__l.__data_);
  if (!v15)
  {
LABEL_27:
    std::operator+<char>();
    v17 = std::string::append(&v64, "' has invalid operator: '");
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v65.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    v19 = *((char *)this + 199);
    if (v19 >= 0)
      v20 = (char *)this + 176;
    else
      v20 = (const std::string::value_type *)*((_QWORD *)this + 22);
    if (v19 >= 0)
      v21 = *((unsigned __int8 *)this + 199);
    else
      v21 = *((_QWORD *)this + 23);
    v22 = std::string::append(&v65, v20, v21);
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v66.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    v24 = std::string::append(&v66, "'");
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    __s1.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, (__int128 *)&__s1, (uint64_t)this + 88);
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s1.__r_.__value_.__l.__data_);
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v66.__r_.__value_.__l.__data_);
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v65.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v64.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return 0;
    v12 = (void *)v64.__r_.__value_.__r.__words[0];
LABEL_41:
    operator delete(v12);
    return 0;
  }
LABEL_18:
  if ((*((char *)this + 223) & 0x80000000) == 0)
  {
    if (*((_BYTE *)this + 223))
      goto LABEL_20;
LABEL_45:
    std::operator+<char>();
    v27 = std::string::append(&v66, "' has no value");
    v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    __s1.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, (__int128 *)&__s1, (uint64_t)this + 88);
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s1.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v66.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_69;
    v29 = (void *)v66.__r_.__value_.__r.__words[0];
    goto LABEL_68;
  }
  if (!*((_QWORD *)this + 26))
    goto LABEL_45;
LABEL_20:
  siri::dialogengine::ResolveType(0, (uint64_t)a2, (uint64_t)this + 200, 1, (uint64_t)&__s1);
  v16 = strlen(siri::dialogengine::TYPE_STRING[0]);
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v16 == __s1.__r_.__value_.__l.__size_)
    {
      if (v16 == -1)
        std::string::__throw_out_of_range[abi:ne180100]();
      v30 = (void *)__s1.__r_.__value_.__r.__words[0];
      v31 = memcmp(__s1.__r_.__value_.__l.__data_, siri::dialogengine::TYPE_STRING[0], v16);
      operator delete(v30);
      if (!v31)
        goto LABEL_52;
    }
    else
    {
      operator delete(__s1.__r_.__value_.__l.__data_);
    }
    goto LABEL_54;
  }
  if (v16 != HIBYTE(__s1.__r_.__value_.__r.__words[2]) || memcmp(&__s1, siri::dialogengine::TYPE_STRING[0], v16))
  {
LABEL_54:
    std::operator+<char>();
    v32 = std::string::append(&v64, "' has non-string value: '");
    v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v65.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    v34 = *((char *)this + 223);
    if (v34 >= 0)
      v35 = (char *)this + 200;
    else
      v35 = (const std::string::value_type *)*((_QWORD *)this + 25);
    if (v34 >= 0)
      v36 = *((unsigned __int8 *)this + 223);
    else
      v36 = *((_QWORD *)this + 26);
    v37 = std::string::append(&v65, v35, v36);
    v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    v66.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    v39 = std::string::append(&v66, "'");
    v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    __s1.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, (__int128 *)&__s1, (uint64_t)this + 88);
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s1.__r_.__value_.__l.__data_);
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v66.__r_.__value_.__l.__data_);
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v65.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v64.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_69;
    v29 = (void *)v64.__r_.__value_.__r.__words[0];
LABEL_68:
    operator delete(v29);
LABEL_69:
    v9 = 0;
    goto LABEL_70;
  }
LABEL_52:
  v9 = 1;
LABEL_70:
  v41 = *((char *)this + 199);
  if (v41 < 0)
  {
    if (*((_QWORD *)this + 23) != 11)
      return v9;
    v5 = (_QWORD *)*v5;
  }
  else if (v41 != 11)
  {
    return v9;
  }
  if (*v5 == 0x616D5F7865676572 && *(_QWORD *)((char *)v5 + 3) == 0x686374616D5F7865)
  {
    if (*((char *)this + 223) < 0 ? *((_QWORD *)this + 26) : *((unsigned __int8 *)this + 223))
    {
      siri::dialogengine::ResolveLiteral((uint64_t)this + 200, &__s1);
      if (__s1.__r_.__value_.__r.__words[0]
      {
        v62 = v44;
        size = __s1.__r_.__value_.__l.__size_;
        if (__s1.__r_.__value_.__l.__size_)
        {
          v45 = (unint64_t *)(__s1.__r_.__value_.__l.__size_ + 8);
          do
            v46 = __ldxr(v45);
          while (__stxr(v46 + 1, v45));
        }
      }
      else
      {
        v62 = 0;
        size = 0;
      }
      v47 = (std::__shared_weak_count *)__s1.__r_.__value_.__l.__size_;
      if (__s1.__r_.__value_.__l.__size_)
      {
        v48 = (unint64_t *)(__s1.__r_.__value_.__l.__size_ + 8);
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
          std::__shared_weak_count::__release_weak(v47);
        }
      }
      if (v62)
      {
        if (v62[95] < 0)
          std::string::__init_copy_ctor_external(&__s1, *((const std::string::value_type **)v62 + 9), *((_QWORD *)v62 + 10));
        else
          __s1 = *(std::string *)(v62 + 3);
        siri::dialogengine::GetRegexError((uint64_t)&__s1, &v66);
        v50 = HIBYTE(v66.__r_.__value_.__r.__words[2]);
        v51 = HIBYTE(v66.__r_.__value_.__r.__words[2]);
        if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v50 = v66.__r_.__value_.__l.__size_;
        if (v50)
        {
          std::operator+<char>();
          v52 = std::string::append(&v61, "' is invalid: ");
          v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
          v64.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v53;
          v52->__r_.__value_.__l.__size_ = 0;
          v52->__r_.__value_.__r.__words[2] = 0;
          v52->__r_.__value_.__r.__words[0] = 0;
          if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v54 = &v66;
          else
            v54 = (std::string *)v66.__r_.__value_.__r.__words[0];
          if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v55 = HIBYTE(v66.__r_.__value_.__r.__words[2]);
          else
            v55 = v66.__r_.__value_.__l.__size_;
          v56 = std::string::append(&v64, (const std::string::value_type *)v54, v55);
          v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
          v65.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v57;
          v56->__r_.__value_.__l.__size_ = 0;
          v56->__r_.__value_.__r.__words[2] = 0;
          v56->__r_.__value_.__r.__words[0] = 0;
          siri::dialogengine::Context::AddValidationError((uint64_t)a2, (__int128 *)&v65, (uint64_t)this + 88);
          if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v65.__r_.__value_.__l.__data_);
          if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v64.__r_.__value_.__l.__data_);
          if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v61.__r_.__value_.__l.__data_);
          LODWORD(v9) = 0;
          v51 = HIBYTE(v66.__r_.__value_.__r.__words[2]);
        }
        if (v51 < 0)
          operator delete(v66.__r_.__value_.__l.__data_);
        if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s1.__r_.__value_.__l.__data_);
      }
      v58 = (std::__shared_weak_count *)size;
      if (size)
      {
        v59 = (unint64_t *)(size + 8);
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }
      return v9;
    }
  }
  return v9;
}

void sub_1BF8B1604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::ConditionExpression::ValidateNumber(siri::dialogengine::ConditionExpression *this, siri::dialogengine::Context *a2)
{
  _QWORD *v4;
  unsigned __int8 *v5;
  _BOOL4 IsUnaryOperator;
  _BOOL4 v7;
  _BOOL8 v8;
  std::string *v9;
  __int128 v10;
  void *v11;
  unsigned __int8 *v12;
  _BOOL4 IsBinaryOperator;
  _BOOL4 v14;
  size_t v15;
  size_t v16;
  __int128 *v17;
  std::string *v18;
  __int128 v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  void *v29;
  std::string *v30;
  __int128 v31;
  int v32;
  const std::string::value_type *v33;
  std::string::size_type v34;
  std::string *v35;
  __int128 v36;
  std::string *v37;
  __int128 v38;
  int v40;
  _BOOL4 v42;
  double v43;
  std::string *v44;
  __int128 v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  __int128 v50;
  std::string::size_type v51;

  if ((*((char *)this + 199) & 0x80000000) == 0)
  {
    if (*((_BYTE *)this + 199))
      goto LABEL_3;
LABEL_7:
    if (*((char *)this + 223) < 0)
    {
      if (*((_QWORD *)this + 26))
        goto LABEL_9;
    }
    else if (*((_BYTE *)this + 223))
    {
LABEL_9:
      std::operator+<char>();
      v9 = std::string::append(&v49, "' has value but no operator");
      v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v51 = v9->__r_.__value_.__r.__words[2];
      v50 = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Context::AddValidationError((uint64_t)a2, &v50, (uint64_t)this + 88);
      if (SHIBYTE(v51) < 0)
        operator delete((void *)v50);
      if ((SHIBYTE(v49.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return 0;
      v11 = (void *)v49.__r_.__value_.__r.__words[0];
      goto LABEL_38;
    }
    return 1;
  }
  if (!*((_QWORD *)this + 23))
    goto LABEL_7;
LABEL_3:
  v4 = (_QWORD *)((char *)this + 176);
  v5 = (unsigned __int8 *)std::string::basic_string[abi:ne180100]<0>(&v50, "dialog.Number");
  IsUnaryOperator = siri::dialogengine::IsUnaryOperator(v5, (unsigned __int8 *)this + 176);
  v7 = IsUnaryOperator;
  if (SHIBYTE(v51) < 0)
  {
    operator delete((void *)v50);
    if (v7)
      goto LABEL_5;
  }
  else if (IsUnaryOperator)
  {
LABEL_5:
    std::string::basic_string[abi:ne180100]<0>(&v50, "Number condition");
    v8 = siri::dialogengine::ConditionExpression::ValidateUnaryOperator((uint64_t)this, (uint64_t)a2, (const void **)&v50);
    goto LABEL_66;
  }
  v12 = (unsigned __int8 *)std::string::basic_string[abi:ne180100]<0>(&v50, "dialog.Number");
  IsBinaryOperator = siri::dialogengine::IsBinaryOperator(v12, (unsigned __int8 *)this + 176);
  v14 = IsBinaryOperator;
  if ((SHIBYTE(v51) & 0x80000000) == 0)
  {
    if (IsBinaryOperator)
      goto LABEL_16;
    goto LABEL_24;
  }
  operator delete((void *)v50);
  if (!v14)
  {
LABEL_24:
    std::operator+<char>();
    v18 = std::string::append(&v47, "' has invalid operator: ");
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = *((char *)this + 199);
    if (v20 >= 0)
      v21 = (char *)this + 176;
    else
      v21 = (const std::string::value_type *)*((_QWORD *)this + 22);
    if (v20 >= 0)
      v22 = *((unsigned __int8 *)this + 199);
    else
      v22 = *((_QWORD *)this + 23);
    v23 = std::string::append(&v48, v21, v22);
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    v25 = std::string::append(&v49, "'");
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v51 = v25->__r_.__value_.__r.__words[2];
    v50 = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, &v50, (uint64_t)this + 88);
    if (SHIBYTE(v51) < 0)
      operator delete((void *)v50);
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v49.__r_.__value_.__l.__data_);
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v48.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v47.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return 0;
    v11 = (void *)v47.__r_.__value_.__r.__words[0];
LABEL_38:
    operator delete(v11);
    return 0;
  }
LABEL_16:
  siri::dialogengine::ResolveType(0, (uint64_t)a2, (uint64_t)this + 200, 1, (uint64_t)&v50);
  if ((*((char *)this + 223) & 0x80000000) == 0)
  {
    if (*((_BYTE *)this + 223))
      goto LABEL_18;
LABEL_41:
    std::operator+<char>();
    v27 = std::string::append(&v48, "' has no value");
    v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, (__int128 *)&v49, (uint64_t)this + 88);
    goto LABEL_42;
  }
  if (!*((_QWORD *)this + 26))
    goto LABEL_41;
LABEL_18:
  v15 = strlen(siri::dialogengine::TYPE_NUMBER[0]);
  v16 = v15;
  if ((SHIBYTE(v51) & 0x80000000) == 0)
  {
    if (v15 == HIBYTE(v51))
    {
      v17 = &v50;
      goto LABEL_49;
    }
LABEL_50:
    std::operator+<char>();
    v30 = std::string::append(&v46, "' has non-number value: '");
    v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v47.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    v32 = *((char *)this + 223);
    if (v32 >= 0)
      v33 = (char *)this + 200;
    else
      v33 = (const std::string::value_type *)*((_QWORD *)this + 25);
    if (v32 >= 0)
      v34 = *((unsigned __int8 *)this + 223);
    else
      v34 = *((_QWORD *)this + 26);
    v35 = std::string::append(&v47, v33, v34);
    v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v36;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    v37 = std::string::append(&v48, "'");
    v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, (__int128 *)&v49, (uint64_t)this + 88);
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v49.__r_.__value_.__l.__data_);
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v48.__r_.__value_.__l.__data_);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v47.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_65;
    v29 = (void *)v46.__r_.__value_.__r.__words[0];
LABEL_64:
    operator delete(v29);
LABEL_65:
    v8 = 0;
    goto LABEL_66;
  }
  if (v15 != *((_QWORD *)&v50 + 1))
    goto LABEL_50;
  if (v15 == -1)
    std::string::__throw_out_of_range[abi:ne180100]();
  v17 = (__int128 *)v50;
LABEL_49:
  if (memcmp(v17, siri::dialogengine::TYPE_NUMBER[0], v16))
    goto LABEL_50;
  v40 = *((char *)this + 199);
  if ((v40 & 0x80000000) == 0)
  {
    if (v40 != 14)
      goto LABEL_84;
    goto LABEL_74;
  }
  if (*((_QWORD *)this + 23) == 14)
  {
    v4 = (_QWORD *)*v4;
LABEL_74:
    if (*v4 != 0x69746C756D5F7369 || *(_QWORD *)((char *)v4 + 6) != 0x666F5F656C706974)
      goto LABEL_84;
    siri::dialogengine::GetLiteralType((std::string *)((char *)this + 200), &v49);
    v42 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v49, siri::dialogengine::TYPE_NUMBER[0]);
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v49.__r_.__value_.__l.__data_);
    if (!v42)
      goto LABEL_84;
    siri::dialogengine::ResolveLiteral((uint64_t)this + 200, &v49);
    std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v49);
    if (v43 != 0.0)
      goto LABEL_84;
    std::operator+<char>();
    v44 = std::string::append(&v48, "' has modulus of value zero");
    v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, (__int128 *)&v49, (uint64_t)this + 88);
LABEL_42:
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v49.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v48.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_65;
    v29 = (void *)v48.__r_.__value_.__r.__words[0];
    goto LABEL_64;
  }
LABEL_84:
  v8 = 1;
LABEL_66:
  if (SHIBYTE(v51) < 0)
    operator delete((void *)v50);
  return v8;
}

void sub_1BF8B1CE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (a35 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (*(char *)(v35 - 73) < 0)
    operator delete(*(void **)(v35 - 96));
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::ConditionExpression::ValidateDialogCalendar(siri::dialogengine::ConditionExpression *this, siri::dialogengine::Context *a2)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  _BOOL4 IsUnaryOperator;
  _BOOL4 v7;
  _BOOL8 v8;
  unsigned __int8 *v9;
  _BOOL4 IsBinaryOperator;
  _BOOL4 v11;
  int v12;
  BOOL v13;
  std::string *v14;
  __int128 v15;
  void *v16;
  std::string *v17;
  __int128 v18;
  int v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  uint64_t v28;
  size_t v30;
  size_t v31;
  __int128 *v32;
  int v33;
  unsigned __int8 *v34;
  size_t v35;
  size_t v36;
  char v37;
  __int128 *v38;
  int v40;
  int v41;
  std::string *v42;
  __int128 v43;
  int v44;
  const std::string::value_type *v45;
  std::string::size_type v46;
  std::string *v47;
  __int128 v48;
  std::string *v49;
  __int128 v50;
  std::string *v51;
  __int128 v52;
  _BOOL4 v53;
  char *v54;
  std::string *v55;
  __int128 v56;
  std::string::size_type size;
  std::string *v58;
  __int128 v59;
  std::string v60;
  time_t v61[3];
  char v62;
  unsigned __int8 v63;
  std::string v64;
  std::string v65;
  std::string v66;
  __int128 v67;
  std::string::size_type v68;

  if ((*((char *)this + 199) & 0x80000000) == 0)
  {
    if (*((_BYTE *)this + 199))
      goto LABEL_3;
LABEL_9:
    if (*((char *)this + 223) < 0)
    {
      if (!*((_QWORD *)this + 26))
        return 1;
    }
    else if (!*((_BYTE *)this + 223))
    {
      return 1;
    }
    std::operator+<char>();
    v14 = std::string::append(&v66, "' has value but no operator for type 'dialog.Calendar'");
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v68 = v14->__r_.__value_.__r.__words[2];
    v67 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, &v67, (uint64_t)this + 88);
    goto LABEL_29;
  }
  if (!*((_QWORD *)this + 23))
    goto LABEL_9;
LABEL_3:
  v4 = (unsigned __int8 *)this + 176;
  v5 = (unsigned __int8 *)std::string::basic_string[abi:ne180100]<0>(&v67, "dialog.Calendar");
  IsUnaryOperator = siri::dialogengine::IsUnaryOperator(v5, (unsigned __int8 *)this + 176);
  v7 = IsUnaryOperator;
  if (SHIBYTE(v68) < 0)
  {
    operator delete((void *)v67);
    if (v7)
      goto LABEL_5;
  }
  else if (IsUnaryOperator)
  {
LABEL_5:
    std::string::basic_string[abi:ne180100]<0>(&v67, "dialog.Calendar condition");
    v8 = siri::dialogengine::ConditionExpression::ValidateUnaryOperator((uint64_t)this, (uint64_t)a2, (const void **)&v67);
    goto LABEL_6;
  }
  v9 = (unsigned __int8 *)std::string::basic_string[abi:ne180100]<0>(&v67, "dialog.Calendar");
  IsBinaryOperator = siri::dialogengine::IsBinaryOperator(v9, (unsigned __int8 *)this + 176);
  v11 = IsBinaryOperator;
  if ((SHIBYTE(v68) & 0x80000000) == 0)
  {
    if (IsBinaryOperator)
      goto LABEL_15;
LABEL_34:
    std::operator+<char>();
    v17 = std::string::append(&v64, "' has invalid operator: '");
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v65.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    v19 = *((char *)this + 199);
    if (v19 >= 0)
      v20 = (char *)this + 176;
    else
      v20 = (const std::string::value_type *)*((_QWORD *)this + 22);
    if (v19 >= 0)
      v21 = *((unsigned __int8 *)this + 199);
    else
      v21 = *((_QWORD *)this + 23);
    v22 = std::string::append(&v65, v20, v21);
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v66.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    v24 = std::string::append(&v66, "' for type 'dialog.Calendar'");
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v68 = v24->__r_.__value_.__r.__words[2];
    v67 = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, &v67, (uint64_t)this + 88);
    if (SHIBYTE(v68) < 0)
      operator delete((void *)v67);
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v66.__r_.__value_.__l.__data_);
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v65.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v64.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return 0;
    v16 = (void *)v64.__r_.__value_.__r.__words[0];
    goto LABEL_48;
  }
  operator delete((void *)v67);
  if (!v11)
    goto LABEL_34;
LABEL_15:
  if ((*((char *)this + 223) & 0x80000000) == 0)
  {
    if (*((_BYTE *)this + 223))
      goto LABEL_17;
    goto LABEL_51;
  }
  if (!*((_QWORD *)this + 26))
  {
LABEL_51:
    std::operator+<char>();
    v26 = std::string::append(&v66, "' has no value");
    v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v68 = v26->__r_.__value_.__r.__words[2];
    v67 = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, &v67, (uint64_t)this + 88);
LABEL_29:
    if (SHIBYTE(v68) < 0)
      operator delete((void *)v67);
    if ((SHIBYTE(v66.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return 0;
    v16 = (void *)v66.__r_.__value_.__r.__words[0];
LABEL_48:
    operator delete(v16);
    return 0;
  }
LABEL_17:
  v12 = *((unsigned __int8 *)this + 199);
  if (*((char *)this + 199) < 0)
  {
    v28 = *((_QWORD *)this + 23);
    if (v28 == 1)
    {
      if (**(_BYTE **)v4 == 61)
        goto LABEL_80;
      if ((v12 & 0x80) == 0)
        goto LABEL_71;
    }
    else if (v28 == 10 && **(_QWORD **)v4 == 0x64696C6F685F7369 && *(_WORD *)(*(_QWORD *)v4 + 8) == 31073)
    {
      goto LABEL_59;
    }
    if (*((_QWORD *)this + 23) != 2)
      goto LABEL_73;
    if (**(_WORD **)v4 == 15649)
      goto LABEL_80;
    if ((v12 & 0x80) != 0)
    {
LABEL_73:
      if (*((_QWORD *)this + 23) != 1)
        goto LABEL_77;
      v34 = *(unsigned __int8 **)v4;
      goto LABEL_75;
    }
LABEL_71:
    v34 = (unsigned __int8 *)this + 176;
    if (v12 != 1)
      goto LABEL_77;
LABEL_75:
    v33 = *v34;
LABEL_76:
    if (v33 != 60)
      goto LABEL_77;
    goto LABEL_80;
  }
  if (v12 == 1)
  {
    v33 = *v4;
    if (v33 == 61)
      goto LABEL_80;
    goto LABEL_76;
  }
  if (v12 == 2)
  {
    if (*(_WORD *)v4 != 15649)
      goto LABEL_77;
LABEL_80:
    siri::dialogengine::ResolveType(0, (uint64_t)a2, (uint64_t)this + 200, 1, (uint64_t)&v67);
    v63 = 0;
    siri::dialogengine::GetTimeStampFromString((const std::string *)((char *)this + 200), &v63, v61);
    if (v62 < 0)
      operator delete((void *)v61[1]);
    v35 = strlen(siri::dialogengine::TYPE_UNKNOWN);
    v36 = v35;
    v37 = HIBYTE(v68);
    if (SHIBYTE(v68) < 0)
    {
      if (v35 != *((_QWORD *)&v67 + 1))
      {
        v8 = 1;
        goto LABEL_7;
      }
      if (v35 == -1)
        std::string::__throw_out_of_range[abi:ne180100]();
      v38 = (__int128 *)v67;
      goto LABEL_90;
    }
    if (v35 == HIBYTE(v68))
    {
      v38 = &v67;
LABEL_90:
      v40 = memcmp(v38, siri::dialogengine::TYPE_UNKNOWN, v36);
      v41 = v40 | v63;
      v8 = v41 != 0;
      if (!v41)
      {
        std::operator+<char>();
        v42 = std::string::append(&v60, "' has invalid value: '");
        v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
        v64.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v43;
        v42->__r_.__value_.__l.__size_ = 0;
        v42->__r_.__value_.__r.__words[2] = 0;
        v42->__r_.__value_.__r.__words[0] = 0;
        v44 = *((char *)this + 223);
        if (v44 >= 0)
          v45 = (char *)this + 200;
        else
          v45 = (const std::string::value_type *)*((_QWORD *)this + 25);
        if (v44 >= 0)
          v46 = *((unsigned __int8 *)this + 223);
        else
          v46 = *((_QWORD *)this + 26);
        v47 = std::string::append(&v64, v45, v46);
        v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        v65.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        v49 = std::string::append(&v65, "'");
        v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
        v66.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v50;
        v49->__r_.__value_.__l.__size_ = 0;
        v49->__r_.__value_.__r.__words[2] = 0;
        v49->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::Context::AddValidationError((uint64_t)a2, (__int128 *)&v66, (uint64_t)this + 88);
        if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v66.__r_.__value_.__l.__data_);
        if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v65.__r_.__value_.__l.__data_);
        if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v64.__r_.__value_.__l.__data_);
        if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v60.__r_.__value_.__l.__data_);
        v37 = HIBYTE(v68);
      }
      if (v37 < 0)
        goto LABEL_7;
      return v8;
    }
    return 1;
  }
  if (v12 != 10
    || (*(_QWORD *)v4 == 0x64696C6F685F7369 ? (v13 = *((unsigned __int16 *)this + 92) == 31073) : (v13 = 0), !v13))
  {
LABEL_77:
    if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)this + 22, "<=")
      && !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)this + 22, ">")
      && !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)this + 22, ">="))
    {
      return 1;
    }
    goto LABEL_80;
  }
LABEL_59:
  siri::dialogengine::ResolveType(0, (uint64_t)a2, (uint64_t)this + 200, 1, (uint64_t)&v67);
  v30 = strlen(siri::dialogengine::TYPE_UNKNOWN);
  v31 = v30;
  if (SHIBYTE(v68) < 0)
  {
    if (v30 != *((_QWORD *)&v67 + 1))
      goto LABEL_113;
    if (v30 == -1)
      std::string::__throw_out_of_range[abi:ne180100]();
    v32 = (__int128 *)v67;
  }
  else
  {
    if (v30 != HIBYTE(v68))
      goto LABEL_113;
    v32 = &v67;
  }
  if (!memcmp(v32, siri::dialogengine::TYPE_UNKNOWN, v31))
  {
    std::operator+<char>();
    v55 = std::string::append(&v65, "' unknown");
    v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
    v66.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v56;
    v55->__r_.__value_.__l.__size_ = 0;
    v55->__r_.__value_.__r.__words[2] = 0;
    v55->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, (__int128 *)&v66, (uint64_t)this + 88);
    goto LABEL_124;
  }
LABEL_113:
  if (std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v67, siri::dialogengine::TYPE_STRING[0]))
  {
    std::operator+<char>();
    v51 = std::string::append(&v65, "' not of type string");
    v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
    v66.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v52;
    v51->__r_.__value_.__l.__size_ = 0;
    v51->__r_.__value_.__r.__words[2] = 0;
    v51->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, (__int128 *)&v66, (uint64_t)this + 88);
LABEL_124:
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v66.__r_.__value_.__l.__data_);
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v65.__r_.__value_.__l.__data_);
    v8 = 0;
    goto LABEL_6;
  }
  siri::dialogengine::GetLiteralType((std::string *)((char *)this + 200), &v66);
  v53 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v66, siri::dialogengine::TYPE_STRING[0]);
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v66.__r_.__value_.__l.__data_);
  if (v53)
  {
    siri::dialogengine::ResolveLiteral((uint64_t)this + 200, &v65);
    v54 = (char *)v65.__r_.__value_.__r.__words[0];
    if (v65.__r_.__value_.__r.__words[0])
    if (v54[95] < 0)
      std::string::__init_copy_ctor_external(&v66, *((const std::string::value_type **)v54 + 9), *((_QWORD *)v54 + 10));
    else
      v66 = *(std::string *)(v54 + 3);
    std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v65);
    size = HIBYTE(v66.__r_.__value_.__r.__words[2]);
    if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v66.__r_.__value_.__l.__size_;
    if (size && (siri::dialogengine::IsValidHoliday((uint64_t)&v66) & 1) != 0)
    {
      v8 = 1;
    }
    else
    {
      std::operator+<char>();
      v58 = std::string::append(&v64, " is not a valid holiday");
      v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
      v65.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v59;
      v58->__r_.__value_.__l.__size_ = 0;
      v58->__r_.__value_.__r.__words[2] = 0;
      v58->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Context::AddValidationError((uint64_t)a2, (__int128 *)&v65, (uint64_t)this + 88);
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v65.__r_.__value_.__l.__data_);
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v64.__r_.__value_.__l.__data_);
      v8 = 0;
    }
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v66.__r_.__value_.__l.__data_);
  }
  else
  {
    v8 = 1;
  }
LABEL_6:
  if (SHIBYTE(v68) < 0)
LABEL_7:
    operator delete((void *)v67);
  return v8;
}

void sub_1BF8B26B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  if (*(char *)(v32 - 57) < 0)
    operator delete(*(void **)(v32 - 80));
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::ConditionExpression::ValidateArray(siri::dialogengine::ConditionExpression *this, siri::dialogengine::Context *a2)
{
  unsigned __int8 *v4;
  _BOOL4 IsUnaryOperator;
  _BOOL4 v6;
  _BOOL8 v7;
  unsigned __int8 *v8;
  _BOOL4 IsBinaryOperator;
  _BOOL4 v10;
  size_t v11;
  std::string *v12;
  __int128 v13;
  void *v14;
  std::string *v15;
  __int128 v16;
  int v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  void *v26;
  int v27;
  std::string *v28;
  __int128 v29;
  int v30;
  std::string v32;
  std::string v33;
  std::string v34;
  __int128 __s1;
  std::string::size_type v36;

  if ((*((char *)this + 199) & 0x80000000) == 0)
  {
    if (*((_BYTE *)this + 199))
      goto LABEL_3;
LABEL_8:
    if (*((char *)this + 223) < 0)
    {
      if (!*((_QWORD *)this + 26))
        return 1;
    }
    else if (!*((_BYTE *)this + 223))
    {
      return 1;
    }
    std::operator+<char>();
    v12 = std::string::append(&v34, "' has value but no operator");
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v36 = v12->__r_.__value_.__r.__words[2];
    __s1 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, &__s1, (uint64_t)this + 88);
    goto LABEL_22;
  }
  if (!*((_QWORD *)this + 23))
    goto LABEL_8;
LABEL_3:
  v4 = (unsigned __int8 *)std::string::basic_string[abi:ne180100]<0>(&__s1, "dialog.Array");
  IsUnaryOperator = siri::dialogengine::IsUnaryOperator(v4, (unsigned __int8 *)this + 176);
  v6 = IsUnaryOperator;
  if ((SHIBYTE(v36) & 0x80000000) == 0)
  {
    if (IsUnaryOperator)
      goto LABEL_5;
LABEL_12:
    v8 = (unsigned __int8 *)std::string::basic_string[abi:ne180100]<0>(&__s1, "dialog.Array");
    IsBinaryOperator = siri::dialogengine::IsBinaryOperator(v8, (unsigned __int8 *)this + 176);
    v10 = IsBinaryOperator;
    if (SHIBYTE(v36) < 0)
    {
      operator delete((void *)__s1);
      if (v10)
        goto LABEL_14;
    }
    else if (IsBinaryOperator)
    {
LABEL_14:
      if (*((char *)this + 223) < 0)
      {
        if (*((_QWORD *)this + 26))
        {
LABEL_16:
          siri::dialogengine::ResolveType(0, (uint64_t)a2, (uint64_t)this + 200, 1, (uint64_t)&__s1);
          v11 = strlen(siri::dialogengine::TYPE_UNKNOWN);
          if (SHIBYTE(v36) < 0)
          {
            if (v11 == *((_QWORD *)&__s1 + 1))
            {
              if (v11 == -1)
                std::string::__throw_out_of_range[abi:ne180100]();
              v26 = (void *)__s1;
              v27 = memcmp((const void *)__s1, siri::dialogengine::TYPE_UNKNOWN, v11);
              operator delete(v26);
              if (!v27)
                goto LABEL_48;
            }
            else
            {
              operator delete((void *)__s1);
            }
          }
          else if (v11 == HIBYTE(v36) && !memcmp(&__s1, siri::dialogengine::TYPE_UNKNOWN, v11))
          {
LABEL_48:
            std::operator+<char>();
            v28 = std::string::append(&v32, "' has unknown value: '");
            v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
            v33.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v29;
            v28->__r_.__value_.__l.__size_ = 0;
            v28->__r_.__value_.__r.__words[2] = 0;
            v28->__r_.__value_.__r.__words[0] = 0;
            v30 = *((char *)this + 223);
            if (v30 >= 0)
              v18 = (char *)this + 200;
            else
              v18 = (const std::string::value_type *)*((_QWORD *)this + 25);
            if (v30 >= 0)
              v19 = *((unsigned __int8 *)this + 223);
            else
              v19 = *((_QWORD *)this + 26);
LABEL_33:
            v20 = std::string::append(&v33, v18, v19);
            v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
            v34.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v21;
            v20->__r_.__value_.__l.__size_ = 0;
            v20->__r_.__value_.__r.__words[2] = 0;
            v20->__r_.__value_.__r.__words[0] = 0;
            v22 = std::string::append(&v34, "'");
            v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
            v36 = v22->__r_.__value_.__r.__words[2];
            __s1 = v23;
            v22->__r_.__value_.__l.__size_ = 0;
            v22->__r_.__value_.__r.__words[2] = 0;
            v22->__r_.__value_.__r.__words[0] = 0;
            siri::dialogengine::Context::AddValidationError((uint64_t)a2, &__s1, (uint64_t)this + 88);
            if (SHIBYTE(v36) < 0)
              operator delete((void *)__s1);
            if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v34.__r_.__value_.__l.__data_);
            if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v33.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              return 0;
            v14 = (void *)v32.__r_.__value_.__r.__words[0];
LABEL_41:
            operator delete(v14);
            return 0;
          }
          return 1;
        }
      }
      else if (*((_BYTE *)this + 223))
      {
        goto LABEL_16;
      }
      std::operator+<char>();
      v24 = std::string::append(&v34, "' has no value");
      v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      v36 = v24->__r_.__value_.__r.__words[2];
      __s1 = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Context::AddValidationError((uint64_t)a2, &__s1, (uint64_t)this + 88);
LABEL_22:
      if (SHIBYTE(v36) < 0)
        operator delete((void *)__s1);
      if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return 0;
      v14 = (void *)v34.__r_.__value_.__r.__words[0];
      goto LABEL_41;
    }
    std::operator+<char>();
    v15 = std::string::append(&v32, "' has invalid operator: '");
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v17 = *((char *)this + 199);
    if (v17 >= 0)
      v18 = (char *)this + 176;
    else
      v18 = (const std::string::value_type *)*((_QWORD *)this + 22);
    if (v17 >= 0)
      v19 = *((unsigned __int8 *)this + 199);
    else
      v19 = *((_QWORD *)this + 23);
    goto LABEL_33;
  }
  operator delete((void *)__s1);
  if (!v6)
    goto LABEL_12;
LABEL_5:
  std::string::basic_string[abi:ne180100]<0>(&__s1, "Array condition");
  v7 = siri::dialogengine::ConditionExpression::ValidateUnaryOperator((uint64_t)this, (uint64_t)a2, (const void **)&__s1);
  if (SHIBYTE(v36) < 0)
    operator delete((void *)__s1);
  return v7;
}

void sub_1BF8B2CA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (*(char *)(v28 - 57) < 0)
    operator delete(*(void **)(v28 - 80));
  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::ConditionExpression::ValidateOther(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 v7;
  std::string *v8;
  __int128 v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  void *v17;
  std::string *v18;
  __int128 v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  int v27;
  const std::string::value_type *v28;
  std::string::size_type v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  __int128 v33;
  std::string v35;
  std::string v36;
  std::string v37;
  std::string v38;
  std::string v39;
  __int128 v40;
  std::string::size_type v41;

  if (*(char *)(a1 + 199) < 0)
    v6 = *(_QWORD *)(a1 + 184);
  else
    v6 = *(unsigned __int8 *)(a1 + 199);
  if (!v6)
  {
    if (*(char *)(a1 + 223) < 0)
    {
      if (*(_QWORD *)(a1 + 208))
        goto LABEL_10;
    }
    else if (*(_BYTE *)(a1 + 223))
    {
LABEL_10:
      std::operator+<char>();
      v8 = std::string::append(&v37, "' has value but no operator for type '");
      v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      v38.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      v10 = *(char *)(a3 + 23);
      if (v10 >= 0)
        v11 = (const std::string::value_type *)a3;
      else
        v11 = *(const std::string::value_type **)a3;
      if (v10 >= 0)
        v12 = *(unsigned __int8 *)(a3 + 23);
      else
        v12 = *(_QWORD *)(a3 + 8);
      v13 = std::string::append(&v38, v11, v12);
      v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v39.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      v15 = std::string::append(&v39, "'");
      v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v41 = v15->__r_.__value_.__r.__words[2];
      v40 = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Context::AddValidationError(a2, &v40, a1 + 88);
      if (SHIBYTE(v41) < 0)
        operator delete((void *)v40);
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v39.__r_.__value_.__l.__data_);
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v38.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v37.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return 0;
      v17 = (void *)v37.__r_.__value_.__r.__words[0];
      goto LABEL_48;
    }
    return 1;
  }
  if (!siri::dialogengine::IsUnaryOperator((unsigned __int8 *)a3, (unsigned __int8 *)(a1 + 176)))
  {
    std::operator+<char>();
    v18 = std::string::append(&v35, "' has invalid operator: '");
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v36.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = *(char *)(a1 + 199);
    if (v20 >= 0)
      v21 = (const std::string::value_type *)(a1 + 176);
    else
      v21 = *(const std::string::value_type **)(a1 + 176);
    if (v20 >= 0)
      v22 = *(unsigned __int8 *)(a1 + 199);
    else
      v22 = *(_QWORD *)(a1 + 184);
    v23 = std::string::append(&v36, v21, v22);
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    v25 = std::string::append(&v37, "' for type '");
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    v27 = *(char *)(a3 + 23);
    if (v27 >= 0)
      v28 = (const std::string::value_type *)a3;
    else
      v28 = *(const std::string::value_type **)a3;
    if (v27 >= 0)
      v29 = *(unsigned __int8 *)(a3 + 23);
    else
      v29 = *(_QWORD *)(a3 + 8);
    v30 = std::string::append(&v38, v28, v29);
    v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    v32 = std::string::append(&v39, "'");
    v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v41 = v32->__r_.__value_.__r.__words[2];
    v40 = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    siri::dialogengine::Context::AddValidationError(a2, &v40, a1 + 88);
    if (SHIBYTE(v41) < 0)
      operator delete((void *)v40);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v36.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return 0;
    v17 = (void *)v35.__r_.__value_.__r.__words[0];
LABEL_48:
    operator delete(v17);
    return 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&v40, "Condition");
  v7 = siri::dialogengine::ConditionExpression::ValidateUnaryOperator(a1, a2, (const void **)&v40);
  if (SHIBYTE(v41) < 0)
    operator delete((void *)v40);
  return v7;
}

void sub_1BF8B3090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (*(char *)(v35 - 57) < 0)
    operator delete(*(void **)(v35 - 80));
  if (*(char *)(v35 - 89) < 0)
    operator delete(*(void **)(v35 - 112));
  if (a35 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

void sub_1BF8B3180()
{
  uint64_t v0;

  if (*(char *)(v0 - 57) < 0)
    JUMPOUT(0x1BF8B3174);
  JUMPOUT(0x1BF8B3178);
}

BOOL siri::dialogengine::IsUnaryOperator(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v4;
  unint64_t v5;
  unsigned __int8 *v6;
  _QWORD *v7;
  _QWORD *v9;
  char v10;
  char **v11;
  char *v12;

  if ((v4 & 1) == 0
  {
    v9 = (_QWORD *)operator new();
    *v9 = 0;
    siri::dialogengine::IsUnaryOperator(std::string const&,std::string const&)::flag = (uint64_t)v9;
  }
  v5 = atomic_load((unint64_t *)siri::dialogengine::IsUnaryOperator(std::string const&,std::string const&)::flag);
  if (v5 != -1)
  {
    v12 = &v10;
    v11 = &v12;
    std::__call_once((std::once_flag::_State_type *)siri::dialogengine::IsUnaryOperator(std::string const&,std::string const&)::flag, &v11, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::IsUnaryOperator(std::string const&,std::string const&)::$_0 &&>>);
  }
  v6 = std::__hash_table<std::__hash_value_type<std::string,google::protobuf::util::Status (*)(google::protobuf::util::converter::ProtoStreamObjectSource const*,google::protobuf::Type const&,google::protobuf::StringPiece,google::protobuf::util::converter::ObjectWriter *)>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,google::protobuf::util::Status (*)(google::protobuf::util::converter::ProtoStreamObjectSource const*,google::protobuf::Type const&,google::protobuf::StringPiece,google::protobuf::util::converter::ObjectWriter *)>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,google::protobuf::util::Status (*)(google::protobuf::util::converter::ProtoStreamObjectSource const*,google::protobuf::Type const&,google::protobuf::StringPiece,google::protobuf::util::converter::ObjectWriter *)>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,google::protobuf::util::Status (*)(google::protobuf::util::converter::ProtoStreamObjectSource const*,google::protobuf::Type const&,google::protobuf::StringPiece,google::protobuf::util::converter::ObjectWriter *)>>>::find<std::string>((_QWORD *)siri::dialogengine::IsUnaryOperator(std::string const&,std::string const&)::sUnaryOperators, a1);
  if (v6)
    v7 = v6 + 40;
  else
    v7 = (_QWORD *)siri::dialogengine::IsUnaryOperator(std::string const&,std::string const&)::sUnaryOtherOperators;
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v7, a2) != 0;
}

void sub_1BF8B327C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::ConditionExpression::ValidateUnaryOperator(uint64_t a1, uint64_t a2, const void **a3)
{
  uint64_t v6;
  size_t v7;
  std::string *v8;
  const void *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  std::string v18;
  std::string v19;
  void *__p[2];
  std::string::size_type v21;

  if (*(char *)(a1 + 223) < 0)
  {
    v6 = *(_QWORD *)(a1 + 208);
    if (!v6)
      return v6 == 0;
  }
  else
  {
    v6 = *(unsigned __int8 *)(a1 + 223);
    if (!*(_BYTE *)(a1 + 223))
      return v6 == 0;
  }
  if (*((char *)a3 + 23) >= 0)
    v7 = *((unsigned __int8 *)a3 + 23);
  else
    v7 = (size_t)a3[1];
  v8 = &v18;
  std::string::basic_string[abi:ne180100]((uint64_t)&v18, v7 + 13);
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v8 = (std::string *)v18.__r_.__value_.__r.__words[0];
  if (v7)
  {
    if (*((char *)a3 + 23) >= 0)
      v9 = a3;
    else
      v9 = *a3;
    memmove(v8, v9, v7);
  }
  strcpy((char *)v8 + v7, " expression '");
  v10 = *(char *)(a1 + 175);
  if (v10 >= 0)
    v11 = (const std::string::value_type *)(a1 + 152);
  else
    v11 = *(const std::string::value_type **)(a1 + 152);
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a1 + 175);
  else
    v12 = *(_QWORD *)(a1 + 160);
  v13 = std::string::append(&v18, v11, v12);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  v15 = std::string::append(&v19, "' has a unary operator and a value; The value will be ignored.");
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v21 = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::Context::AddValidationWarning(a2, (__int128 *)__p, a1 + 88);
  if (SHIBYTE(v21) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  return v6 == 0;
}

void sub_1BF8B3414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::IsUnaryOperator(std::string const&,std::string const&)::$_0 &&>>()
{
  uint64_t v0;
  uint64_t i;
  uint64_t v2;
  uint64_t j;
  uint64_t v4;
  uint64_t k;
  uint64_t v6;
  uint64_t m;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[40];
  void *v13[2];
  char v14;
  std::string __p;
  _BYTE v16[40];
  unsigned __int8 v17[24];
  _QWORD v18[3];
  _QWORD v19[3];
  _QWORD v20[3];
  _QWORD v21[3];
  _QWORD v22[3];
  _QWORD v23[3];
  _QWORD v24[3];
  _QWORD v25[3];
  _QWORD v26[3];
  _QWORD v27[3];
  _QWORD v28[4];

  v28[3] = *MEMORY[0x1E0C80C00];
  v0 = operator new();
  *(_OWORD *)v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_DWORD *)(v0 + 32) = 1065353216;
  siri::dialogengine::IsUnaryOperator(std::string const&,std::string const&)::sUnaryOperators = v0;
  std::string::basic_string[abi:ne180100]<0>(v13, "dialog.String");
  std::string::basic_string[abi:ne180100]<0>(v17, "defined");
  std::string::basic_string[abi:ne180100]<0>(v18, "undefined");
  std::string::basic_string[abi:ne180100]<0>(v19, "empty");
  std::string::basic_string[abi:ne180100]<0>(v20, "nonempty");
  std::unordered_set<std::string>::unordered_set((uint64_t)v12, v17, 4);
  std::pair<std::string const,std::unordered_set<std::string> const>::pair[abi:ne180100]<true,0>(&__p, (__int128 *)v13, (uint64_t)v12);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string> const>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string> const>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string> const>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string> const>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::unordered_set<std::string> const>>(v0, (unsigned __int8 *)&__p, (uint64_t)&__p);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v16);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v12);
  for (i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v20[i + 2]) < 0)
      operator delete((void *)v20[i]);
  }
  if (v14 < 0)
    operator delete(v13[0]);
  v2 = siri::dialogengine::IsUnaryOperator(std::string const&,std::string const&)::sUnaryOperators;
  std::string::basic_string[abi:ne180100]<0>(v13, "dialog.Number");
  std::string::basic_string[abi:ne180100]<0>(v17, "defined");
  std::string::basic_string[abi:ne180100]<0>(v18, "undefined");
  std::string::basic_string[abi:ne180100]<0>(v19, "is_even");
  std::string::basic_string[abi:ne180100]<0>(v20, "is_odd");
  std::unordered_set<std::string>::unordered_set((uint64_t)v12, v17, 4);
  std::pair<std::string const,std::unordered_set<std::string> const>::pair[abi:ne180100]<true,0>(&__p, (__int128 *)v13, (uint64_t)v12);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string> const>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string> const>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string> const>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string> const>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::unordered_set<std::string> const>>(v2, (unsigned __int8 *)&__p, (uint64_t)&__p);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v16);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v12);
  for (j = 0; j != -12; j -= 3)
  {
    if (SHIBYTE(v20[j + 2]) < 0)
      operator delete((void *)v20[j]);
  }
  if (v14 < 0)
    operator delete(v13[0]);
  v4 = siri::dialogengine::IsUnaryOperator(std::string const&,std::string const&)::sUnaryOperators;
  std::string::basic_string[abi:ne180100]<0>(v13, "dialog.Boolean");
  std::string::basic_string[abi:ne180100]<0>(v17, "defined");
  std::string::basic_string[abi:ne180100]<0>(v18, "undefined");
  std::string::basic_string[abi:ne180100]<0>(v19, "set");
  std::string::basic_string[abi:ne180100]<0>(v20, "unset");
  std::unordered_set<std::string>::unordered_set((uint64_t)v12, v17, 4);
  std::pair<std::string const,std::unordered_set<std::string> const>::pair[abi:ne180100]<true,0>(&__p, (__int128 *)v13, (uint64_t)v12);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string> const>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string> const>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string> const>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string> const>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::unordered_set<std::string> const>>(v4, (unsigned __int8 *)&__p, (uint64_t)&__p);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v16);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v12);
  for (k = 0; k != -12; k -= 3)
  {
    if (SHIBYTE(v20[k + 2]) < 0)
      operator delete((void *)v20[k]);
  }
  if (v14 < 0)
    operator delete(v13[0]);
  v6 = siri::dialogengine::IsUnaryOperator(std::string const&,std::string const&)::sUnaryOperators;
  std::string::basic_string[abi:ne180100]<0>(v13, "dialog.Calendar");
  std::string::basic_string[abi:ne180100]<0>(v17, "defined");
  std::string::basic_string[abi:ne180100]<0>(v18, "undefined");
  std::string::basic_string[abi:ne180100]<0>(v19, "empty");
  std::string::basic_string[abi:ne180100]<0>(v20, "nonempty");
  std::unordered_set<std::string>::unordered_set((uint64_t)v12, v17, 4);
  std::pair<std::string const,std::unordered_set<std::string> const>::pair[abi:ne180100]<true,0>(&__p, (__int128 *)v13, (uint64_t)v12);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string> const>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string> const>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string> const>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string> const>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::unordered_set<std::string> const>>(v6, (unsigned __int8 *)&__p, (uint64_t)&__p);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v16);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v12);
  for (m = 0; m != -12; m -= 3)
  {
    if (SHIBYTE(v20[m + 2]) < 0)
      operator delete((void *)v20[m]);
  }
  if (v14 < 0)
    operator delete(v13[0]);
  v8 = siri::dialogengine::IsUnaryOperator(std::string const&,std::string const&)::sUnaryOperators;
  std::string::basic_string[abi:ne180100]<0>(v13, "dialog.Array");
  std::string::basic_string[abi:ne180100]<0>(v17, "all_empty");
  std::string::basic_string[abi:ne180100]<0>(v18, "any_empty");
  std::string::basic_string[abi:ne180100]<0>(v19, "all_nonempty");
  std::string::basic_string[abi:ne180100]<0>(v20, "any_nonempty");
  std::string::basic_string[abi:ne180100]<0>(v21, "all_set");
  std::string::basic_string[abi:ne180100]<0>(v22, "any_set");
  std::string::basic_string[abi:ne180100]<0>(v23, "all_unset");
  std::string::basic_string[abi:ne180100]<0>(v24, "any_unset");
  std::string::basic_string[abi:ne180100]<0>(v25, "defined");
  std::string::basic_string[abi:ne180100]<0>(v26, "undefined");
  std::string::basic_string[abi:ne180100]<0>(v27, "empty");
  std::string::basic_string[abi:ne180100]<0>(v28, "nonempty");
  std::unordered_set<std::string>::unordered_set((uint64_t)v12, v17, 12);
  std::pair<std::string const,std::unordered_set<std::string> const>::pair[abi:ne180100]<true,0>(&__p, (__int128 *)v13, (uint64_t)v12);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string> const>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string> const>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string> const>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string> const>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::unordered_set<std::string> const>>(v8, (unsigned __int8 *)&__p, (uint64_t)&__p);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v16);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v12);
  v9 = 288;
  do
  {
    if ((char)v17[v9 - 1] < 0)
      operator delete(*(void **)&v16[v9 + 16]);
    v9 -= 24;
  }
  while (v9);
  if (v14 < 0)
    operator delete(v13[0]);
  v10 = operator new();
  std::string::basic_string[abi:ne180100]<0>(v17, "defined");
  std::string::basic_string[abi:ne180100]<0>(v18, "undefined");
  std::string::basic_string[abi:ne180100]<0>(v19, "empty");
  std::string::basic_string[abi:ne180100]<0>(v20, "nonempty");
  std::unordered_set<std::string>::unordered_set(v10, v17, 4);
  v11 = 0;
  siri::dialogengine::IsUnaryOperator(std::string const&,std::string const&)::sUnaryOtherOperators = v10;
  do
  {
    if (SHIBYTE(v20[v11 + 2]) < 0)
      operator delete((void *)v20[v11]);
    v11 -= 3;
  }
  while (v11 != -12);
}

void sub_1BF8B3B0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;

  v35 = 0;
  while (1)
  {
    if (*(char *)(v33 + v35 + 95) < 0)
      operator delete(*(void **)(v33 + v35 + 72));
    v35 -= 24;
    if (v35 == -96)
    {
      MEMORY[0x1C3B8D890](v32, 0x10A0C408EF24B1CLL);
      _Unwind_Resume(a1);
    }
  }
}

double siri::dialogengine::ConditionExpression::ConditionExpression(siri::dialogengine::ConditionExpression *this)
{
  double result;

  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 2) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 8) = 3;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_QWORD *)this + 18) = 0;
  *(_QWORD *)this = off_1E792BCD0;
  *((_QWORD *)this + 1) = (char *)this + 16;
  *((_QWORD *)this + 11) = &unk_1E792BD10;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((_QWORD *)this + 27) = 0;
  return result;
}

{
  double result;

  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 2) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 8) = 3;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_QWORD *)this + 18) = 0;
  *(_QWORD *)this = off_1E792BCD0;
  *((_QWORD *)this + 1) = (char *)this + 16;
  *((_QWORD *)this + 11) = &unk_1E792BD10;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((_QWORD *)this + 27) = 0;
  return result;
}

uint64_t siri::dialogengine::ConditionExpression::ConditionExpression(uint64_t a1, const std::string *a2, uint64_t a3, const std::string *a4)
{
  *(_DWORD *)(a1 + 32) = 3;
  *(_QWORD *)(a1 + 88) = &unk_1E792BD10;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)a1 = off_1E792BCD0;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_QWORD *)(a1 + 216) = 0;
  siri::dialogengine::ConditionExpression::SetName(a1, a2);
  siri::dialogengine::ConditionExpression::SetOperator(a1, a3);
  siri::dialogengine::ConditionExpression::SetValue(a1, a4);
  return a1;
}

void sub_1BF8B3FC4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 223) < 0)
    operator delete(*(void **)(v1 + 200));
  if (*(char *)(v1 + 199) < 0)
    operator delete(*(void **)(v1 + 176));
  if (*(char *)(v1 + 175) < 0)
    operator delete(*v3);
  siri::dialogengine::LineNumberBase::~LineNumberBase(v2);
  siri::dialogengine::ConditionEntry::~ConditionEntry((void **)v1);
  _Unwind_Resume(a1);
}

double siri::dialogengine::ConditionExpression::SetName(uint64_t a1, const std::string *a2)
{
  void **v3;
  double result;
  std::string v5;

  siri::dialogengine::StringTrim(" \t\n\r", a2, &v5);
  v3 = (void **)(a1 + 152);
  if (*(char *)(a1 + 175) < 0)
    operator delete(*v3);
  result = *(double *)&v5.__r_.__value_.__l.__data_;
  *(_OWORD *)v3 = *(_OWORD *)&v5.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 168) = *((_QWORD *)&v5.__r_.__value_.__l + 2);
  return result;
}

double siri::dialogengine::ConditionExpression::SetOperator(uint64_t a1, uint64_t a2)
{
  void **v3;
  double result;
  std::string v5;

  siri::dialogengine::GetCanonicalOperator(a2, &v5);
  v3 = (void **)(a1 + 176);
  if (*(char *)(a1 + 199) < 0)
    operator delete(*v3);
  result = *(double *)&v5.__r_.__value_.__l.__data_;
  *(_OWORD *)v3 = *(_OWORD *)&v5.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 192) = *((_QWORD *)&v5.__r_.__value_.__l + 2);
  return result;
}

double siri::dialogengine::ConditionExpression::SetValue(uint64_t a1, const std::string *a2)
{
  void **v3;
  double result;
  std::string v5;

  siri::dialogengine::StringTrim(" \t\n\r", a2, &v5);
  v3 = (void **)(a1 + 200);
  if (*(char *)(a1 + 223) < 0)
    operator delete(*v3);
  result = *(double *)&v5.__r_.__value_.__l.__data_;
  *(_OWORD *)v3 = *(_OWORD *)&v5.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 216) = *((_QWORD *)&v5.__r_.__value_.__l + 2);
  return result;
}

void siri::dialogengine::ConditionExpression::GetName(siri::dialogengine::ConditionExpression *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 175) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 19), *((_QWORD *)this + 20));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 152);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 21);
  }
}

void siri::dialogengine::ConditionExpression::GetOperator(siri::dialogengine::ConditionExpression *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 199) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 22), *((_QWORD *)this + 23));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 11);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 24);
  }
}

void siri::dialogengine::ConditionExpression::GetValue(siri::dialogengine::ConditionExpression *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 223) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 25), *((_QWORD *)this + 26));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 200);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 27);
  }
}

void YAML::EmitFromEvents::~EmitFromEvents(YAML::EmitFromEvents *this)
{
  *(_QWORD *)this = &off_1E792DCE0;
  std::deque<YAML::EmitFromEvents::State::value>::~deque[abi:ne180100]((uint64_t)this + 16);
}

{
  *(_QWORD *)this = &off_1E792DCE0;
  std::deque<YAML::EmitFromEvents::State::value>::~deque[abi:ne180100]((uint64_t)this + 16);
  JUMPOUT(0x1C3B8D890);
}

uint64_t *YAML::EmitFromEvents::OnNull(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  void *__p[2];
  char v7;

  YAML::EmitFromEvents::BeginNode((YAML::Emitter *)a1);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  YAML::EmitFromEvents::EmitProps((uint64_t)a1, (unsigned __int8 *)__p, a3);
  if (v7 < 0)
    operator delete(__p[0]);
  return YAML::Emitter::Write(a1[1]);
}

void sub_1BF8B4288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void YAML::EmitFromEvents::OnAlias(YAML::Emitter *a1)
{
  uint64_t *v2;
  std::string __p;
  std::string v4;

  YAML::EmitFromEvents::BeginNode(a1);
  v2 = (uint64_t *)*((_QWORD *)a1 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v4, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v4 = __p;
  YAML::Emitter::Write(v2, (unsigned __int8 *)&v4);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF8B4334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t YAML::EmitFromEvents::OnScalar(uint64_t *a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, char *a5)
{
  YAML::EmitFromEvents::BeginNode((YAML::Emitter *)a1);
  YAML::EmitFromEvents::EmitProps((uint64_t)a1, a3, a4);
  return YAML::Emitter::Write(a1[1], a5);
}

void YAML::EmitFromEvents::OnSequenceStart(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, int a5)
{
  unsigned int v9;
  YAML::Emitter *v10;
  int v11;

  YAML::EmitFromEvents::BeginNode((YAML::Emitter *)a1);
  YAML::EmitFromEvents::EmitProps(a1, a3, a4);
  if (a5 == 1)
  {
    v9 = 24;
  }
  else
  {
    if (a5 != 2)
      goto LABEL_6;
    v9 = 23;
  }
  YAML::Emitter::SetLocalValue(*(YAML::Emitter **)(a1 + 8), v9);
LABEL_6:
  v10 = *(YAML::Emitter **)(a1 + 8);
  if (**(_BYTE **)v10)
    YAML::Emitter::EmitBeginSeq(v10);
  v11 = 0;
  std::deque<YAML::EmitFromEvents::State::value>::push_back((_QWORD *)(a1 + 16), &v11);
}

void YAML::EmitFromEvents::OnSequenceEnd(YAML::EmitFromEvents *this)
{
  YAML::Emitter *v2;
  uint64_t v3;

  v2 = (YAML::Emitter *)*((_QWORD *)this + 1);
  if (**(_BYTE **)v2)
    YAML::Emitter::EmitEndSeq(v2);
  v3 = *((_QWORD *)this + 7) - 1;
  if (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 3)
                             + (((unint64_t)(v3 + *((_QWORD *)this + 6)) >> 7) & 0x1FFFFFFFFFFFFF8))
                 + 4 * ((v3 + *((_QWORD *)this + 6)) & 0x3FF)))
    __assert_rtn("OnSequenceEnd", "emitfromevents.cpp", 68, "m_stateStack.top() == State::WaitingForSequenceEntry");
  *((_QWORD *)this + 7) = v3;
  std::deque<YAML::EmitFromEvents::State::value>::__maybe_remove_back_spare[abi:ne180100]((_QWORD *)this + 2);
}

void YAML::EmitFromEvents::OnMapStart(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, int a5)
{
  unsigned int v9;
  YAML::Emitter *v10;
  int v11;

  YAML::EmitFromEvents::BeginNode((YAML::Emitter *)a1);
  YAML::EmitFromEvents::EmitProps(a1, a3, a4);
  if (a5 == 1)
  {
    v9 = 24;
  }
  else
  {
    if (a5 != 2)
      goto LABEL_6;
    v9 = 23;
  }
  YAML::Emitter::SetLocalValue(*(YAML::Emitter **)(a1 + 8), v9);
LABEL_6:
  v10 = *(YAML::Emitter **)(a1 + 8);
  if (**(_BYTE **)v10)
    YAML::Emitter::EmitBeginMap(v10);
  v11 = 1;
  std::deque<YAML::EmitFromEvents::State::value>::push_back((_QWORD *)(a1 + 16), &v11);
}

void YAML::EmitFromEvents::OnMapEnd(YAML::EmitFromEvents *this)
{
  YAML::Emitter *v2;
  uint64_t v3;

  v2 = (YAML::Emitter *)*((_QWORD *)this + 1);
  if (**(_BYTE **)v2)
    YAML::Emitter::EmitEndMap(v2);
  v3 = *((_QWORD *)this + 7) - 1;
  if (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 3)
                             + (((unint64_t)(v3 + *((_QWORD *)this + 6)) >> 7) & 0x1FFFFFFFFFFFFF8))
                 + 4 * ((v3 + *((_QWORD *)this + 6)) & 0x3FF)) != 1)
    __assert_rtn("OnMapEnd", "emitfromevents.cpp", 92, "m_stateStack.top() == State::WaitingForKey");
  *((_QWORD *)this + 7) = v3;
  std::deque<YAML::EmitFromEvents::State::value>::__maybe_remove_back_spare[abi:ne180100]((_QWORD *)this + 2);
}

void std::deque<YAML::EmitFromEvents::State::value>::__maybe_remove_back_spare[abi:ne180100](_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  v1 = a1[2];
  if (v1 == v2)
    v3 = 0;
  else
    v3 = ((v1 - v2) << 7) - 1;
  if ((unint64_t)(v3 - (a1[5] + a1[4])) >= 0x800)
  {
    operator delete(*(void **)(v1 - 8));
    a1[2] -= 8;
  }
}

YAML::Emitter *YAML::EmitFromEvents::BeginNode(YAML::Emitter *this)
{
  uint64_t v1;
  YAML::Emitter *v2;
  int v3;
  int v4;
  unsigned int v5;
  unint64_t v6;

  v1 = *((_QWORD *)this + 7);
  if (v1)
  {
    v2 = this;
    v3 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 3)
                               + (((unint64_t)(v1 + *((_QWORD *)this + 6) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                   + 4 * ((v1 + *((_QWORD *)this + 6) - 1) & 0x3FF));
    if (v3 == 1)
    {
      v4 = 2;
      v5 = 27;
    }
    else
    {
      if (v3 != 2)
        return this;
      v4 = 1;
      v5 = 28;
    }
    this = YAML::Emitter::SetLocalValue(*((YAML::Emitter **)this + 1), v5);
    v6 = *((_QWORD *)v2 + 7) + *((_QWORD *)v2 + 6) - 1;
    *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 3) + ((v6 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v6 & 0x3FF)) = v4;
  }
  return this;
}

void YAML::EmitFromEvents::EmitProps(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  int v5;
  YAML::Emitter *v6;
  std::string::size_type v7;
  const std::string::value_type *v8;
  int v9;
  uint64_t *v10;
  std::string v11;
  std::string v12;
  std::string v13;
  void *__p;
  char v15;
  __int128 v16;
  char v17;

  if ((char)a2[23] < 0)
  {
    v7 = *((_QWORD *)a2 + 1);
    if (!v7)
      goto LABEL_21;
    if (v7 == 1)
    {
      v8 = *(const std::string::value_type **)a2;
      v9 = *(unsigned __int8 *)v8;
      if (v9 == 33 || v9 == 63)
        goto LABEL_21;
      v6 = *(YAML::Emitter **)(a1 + 8);
      v7 = 1;
    }
    else
    {
      v6 = *(YAML::Emitter **)(a1 + 8);
      v8 = *(const std::string::value_type **)a2;
    }
    std::string::__init_copy_ctor_external(&v12, v8, v7);
  }
  else
  {
    if (!a2[23])
      goto LABEL_21;
    if (a2[23] == 1)
    {
      v5 = *a2;
      if (v5 == 33 || v5 == 63)
        goto LABEL_21;
    }
    v6 = *(YAML::Emitter **)(a1 + 8);
    v12 = *(std::string *)a2;
  }
  std::string::basic_string[abi:ne180100]<0>(&v16, "");
  YAML::_Tag::_Tag(&v13, &v16, (__int128 *)&v12, 0);
  if (v17 < 0)
    operator delete((void *)v16);
  YAML::Emitter::Write(v6, (uint64_t)&v13);
  if (v15 < 0)
    operator delete(__p);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v12.__r_.__value_.__l.__data_);
    if (!a3)
      return;
    goto LABEL_22;
  }
LABEL_21:
  if (!a3)
    return;
LABEL_22:
  v10 = *(uint64_t **)(a1 + 8);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v13, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
  else
    v13 = v11;
  YAML::Emitter::Write(v10, (unsigned __int8 *)&v13);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_1BF8B4874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::deque<YAML::EmitFromEvents::State::value>::push_back(_QWORD *a1, _DWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  __int128 v35;
  void *v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  int64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t i;
  _QWORD *v79;
  char *v80;
  _BYTE *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  __int128 v112;

  v4 = (char *)a1[2];
  v5 = (char *)a1[1];
  v6 = v4 - v5;
  if (v4 == v5)
    v7 = 0;
  else
    v7 = ((v4 - v5) << 7) - 1;
  v9 = a1[4];
  v8 = a1[5];
  v10 = v8 + v9;
  if (v7 == v8 + v9)
  {
    if (v9 >= 0x400)
    {
      a1[4] = v9 - 1024;
      v13 = *(_QWORD *)v5;
      v11 = v5 + 8;
      v12 = v13;
      a1[1] = v11;
      if ((char *)a1[3] == v4)
      {
        v14 = (uint64_t)&v11[-*a1];
        if ((unint64_t)v11 <= *a1)
        {
          if (v4 == (char *)*a1)
            v42 = 1;
          else
            v42 = (uint64_t)&v4[-*a1] >> 2;
          v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v42);
          v45 = &v43[8 * (v42 >> 2)];
          v46 = (uint64_t *)a1[1];
          v4 = v45;
          v47 = a1[2] - (_QWORD)v46;
          if (v47)
          {
            v4 = &v45[v47 & 0xFFFFFFFFFFFFFFF8];
            v48 = 8 * (v47 >> 3);
            v49 = &v43[8 * (v42 >> 2)];
            do
            {
              v50 = *v46++;
              *(_QWORD *)v49 = v50;
              v49 += 8;
              v48 -= 8;
            }
            while (v48);
          }
          v51 = (char *)*a1;
          *a1 = v43;
          a1[1] = v45;
          a1[2] = v4;
          a1[3] = &v43[8 * v44];
          if (v51)
          {
            operator delete(v51);
            v4 = (char *)a1[2];
          }
        }
        else
        {
          v15 = v14 >> 3;
          v16 = v14 >> 3 < -1;
          v17 = (v14 >> 3) + 2;
          if (v16)
            v18 = v17;
          else
            v18 = v15 + 1;
          v19 = -(v18 >> 1);
          v20 = v18 >> 1;
          v21 = &v11[-8 * v20];
          v22 = v4 - v11;
          if (v4 == v11)
          {
            v23 = v4;
          }
          else
          {
            memmove(&v11[-8 * v20], v11, v4 - v11);
            v23 = (char *)a1[1];
          }
          v4 = &v21[v22];
          a1[1] = &v23[8 * v19];
          a1[2] = &v21[v22];
        }
      }
      *(_QWORD *)v4 = v12;
LABEL_82:
      a1[2] += 8;
LABEL_83:
      v5 = (char *)a1[1];
      v8 = a1[5];
      v10 = a1[4] + v8;
      goto LABEL_84;
    }
    v24 = v6 >> 3;
    v25 = (char *)a1[3];
    v26 = (char *)*a1;
    v27 = (uint64_t)&v25[-*a1];
    if (v6 >> 3 < (unint64_t)(v27 >> 3))
    {
      v28 = operator new(0x1000uLL);
      v29 = v28;
      if (v25 == v4)
      {
        if (v26 == v5)
        {
          if (v4 == v5)
            v52 = 1;
          else
            v52 = v27 >> 2;
          v53 = 2 * v52;
          v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v52);
          v5 = &v54[(v53 + 6) & 0xFFFFFFFFFFFFFFF8];
          v56 = (uint64_t *)a1[1];
          v57 = v5;
          v58 = a1[2] - (_QWORD)v56;
          if (v58)
          {
            v57 = &v5[v58 & 0xFFFFFFFFFFFFFFF8];
            v59 = 8 * (v58 >> 3);
            v60 = v5;
            do
            {
              v61 = *v56++;
              *(_QWORD *)v60 = v61;
              v60 += 8;
              v59 -= 8;
            }
            while (v59);
          }
          v62 = (char *)*a1;
          *a1 = v54;
          a1[1] = v5;
          a1[2] = v57;
          a1[3] = &v54[8 * v55];
          if (v62)
          {
            operator delete(v62);
            v5 = (char *)a1[1];
          }
        }
        *((_QWORD *)v5 - 1) = v29;
        v63 = (char *)a1[1];
        v64 = (char *)a1[2];
        a1[1] = v63 - 8;
        v65 = *((_QWORD *)v63 - 1);
        a1[1] = v63;
        if (v64 == (char *)a1[3])
        {
          v66 = (uint64_t)&v63[-*a1];
          if ((unint64_t)v63 <= *a1)
          {
            if (v64 == (char *)*a1)
              v97 = 1;
            else
              v97 = (uint64_t)&v64[-*a1] >> 2;
            v98 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v97);
            v100 = &v98[8 * (v97 >> 2)];
            v101 = (uint64_t *)a1[1];
            v64 = v100;
            v102 = a1[2] - (_QWORD)v101;
            if (v102)
            {
              v64 = &v100[v102 & 0xFFFFFFFFFFFFFFF8];
              v103 = 8 * (v102 >> 3);
              v104 = &v98[8 * (v97 >> 2)];
              do
              {
                v105 = *v101++;
                *(_QWORD *)v104 = v105;
                v104 += 8;
                v103 -= 8;
              }
              while (v103);
            }
            v106 = (char *)*a1;
            *a1 = v98;
            a1[1] = v100;
            a1[2] = v64;
            a1[3] = &v98[8 * v99];
            if (v106)
            {
              operator delete(v106);
              v64 = (char *)a1[2];
            }
          }
          else
          {
            v67 = v66 >> 3;
            v16 = v66 >> 3 < -1;
            v68 = (v66 >> 3) + 2;
            if (v16)
              v69 = v68;
            else
              v69 = v67 + 1;
            v70 = -(v69 >> 1);
            v71 = v69 >> 1;
            v72 = &v63[-8 * v71];
            v73 = v64 - v63;
            if (v64 != v63)
            {
              memmove(&v63[-8 * v71], v63, v64 - v63);
              v63 = (char *)a1[1];
            }
            v64 = &v72[v73];
            a1[1] = &v63[8 * v70];
            a1[2] = &v72[v73];
          }
        }
        *(_QWORD *)v64 = v65;
      }
      else
      {
        *(_QWORD *)v4 = v28;
      }
      goto LABEL_82;
    }
    if (v25 == v26)
      v30 = 1;
    else
      v30 = v27 >> 2;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v30);
    v33 = v32;
    v34 = &v31[8 * v24];
    *(_QWORD *)&v35 = v31;
    *((_QWORD *)&v35 + 1) = v34;
    v110 = v35;
    v36 = operator new(0x1000uLL);
    *(_QWORD *)&v37 = v34;
    *((_QWORD *)&v37 + 1) = &v31[8 * v33];
    if (v24 == v33)
    {
      v38 = 8 * v24;
      *(_QWORD *)&v39 = v110;
      if (v6 >= 1)
      {
        v40 = v38 >> 3;
        if (v40 >= -1)
          v41 = v40 + 1;
        else
          v41 = v40 + 2;
        v34 -= 8 * (v41 >> 1);
        *(_QWORD *)&v37 = v34;
        *((_QWORD *)&v39 + 1) = v34;
        goto LABEL_56;
      }
      v74 = v38 >> 2;
      if (v4 == v5)
        v75 = 1;
      else
        v75 = v74;
      v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v75);
      v34 = &v76[8 * (v75 >> 2)];
      *(_QWORD *)&v39 = v76;
      *((_QWORD *)&v39 + 1) = v34;
      *(_QWORD *)&v37 = v34;
      *((_QWORD *)&v37 + 1) = &v76[8 * v77];
      if (!v31)
        goto LABEL_56;
      v107 = v37;
      v110 = v39;
      operator delete(v31);
      v37 = v107;
    }
    v39 = v110;
LABEL_56:
    *(_QWORD *)v34 = v36;
    *(_QWORD *)&v37 = v37 + 8;
    for (i = a1[2]; i != a1[1]; i -= 8)
    {
      v79 = (_QWORD *)*((_QWORD *)&v39 + 1);
      if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      {
        v81 = (_BYTE *)v37;
        if ((unint64_t)v37 >= *((_QWORD *)&v37 + 1))
        {
          if (*((_QWORD *)&v37 + 1) == *((_QWORD *)&v39 + 1))
            v86 = 1;
          else
            v86 = (uint64_t)(*((_QWORD *)&v37 + 1) - *((_QWORD *)&v39 + 1)) >> 2;
          v87 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v86);
          v80 = &v87[(2 * v86 + 6) & 0xFFFFFFFFFFFFFFF8];
          v89 = v80;
          v90 = v81 - (_BYTE *)v79;
          if (v81 != (_BYTE *)v79)
          {
            v89 = &v80[v90 & 0xFFFFFFFFFFFFFFF8];
            v91 = 8 * (v90 >> 3);
            v92 = v80;
            v93 = v79;
            do
            {
              v94 = *v93++;
              *(_QWORD *)v92 = v94;
              v92 += 8;
              v91 -= 8;
            }
            while (v91);
          }
          *(_QWORD *)&v39 = v87;
          *((_QWORD *)&v39 + 1) = v80;
          *(_QWORD *)&v37 = v89;
          *((_QWORD *)&v37 + 1) = &v87[8 * v88];
          if (v79)
          {
            v108 = v37;
            v112 = v39;
            operator delete(v79);
            v37 = v108;
            v39 = v112;
          }
        }
        else
        {
          v82 = (uint64_t)(*((_QWORD *)&v37 + 1) - v37) >> 3;
          if (v82 >= -1)
            v83 = v82 + 1;
          else
            v83 = v82 + 2;
          v84 = v83 >> 1;
          v85 = v37 + 8 * (v83 >> 1);
          v80 = (char *)(v85 - (v37 - *((_QWORD *)&v39 + 1)));
          if ((_QWORD)v37 == *((_QWORD *)&v39 + 1))
          {
            v81 = (_BYTE *)*((_QWORD *)&v39 + 1);
          }
          else
          {
            v109 = *((_QWORD *)&v37 + 1);
            v111 = v39;
            memmove((void *)(v85 - (v37 - *((_QWORD *)&v39 + 1))), *((const void **)&v39 + 1), v37 - *((_QWORD *)&v39 + 1));
            *((_QWORD *)&v37 + 1) = v109;
            *(_QWORD *)&v39 = v111;
          }
          *((_QWORD *)&v39 + 1) = v80;
          *(_QWORD *)&v37 = &v81[8 * v84];
        }
      }
      else
      {
        v80 = (char *)*((_QWORD *)&v39 + 1);
      }
      v95 = *(_QWORD *)(i - 8);
      *((_QWORD *)v80 - 1) = v95;
      *((_QWORD *)&v39 + 1) -= 8;
    }
    v96 = (char *)*a1;
    *(_OWORD *)a1 = v39;
    *((_OWORD *)a1 + 1) = v37;
    if (v96)
      operator delete(v96);
    goto LABEL_83;
  }
LABEL_84:
  *(_DWORD *)(*(_QWORD *)&v5[(v10 >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * (v10 & 0x3FF)) = *a2;
  a1[5] = v8 + 1;
}

void sub_1BF8B4E34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11)
{
  void *v11;

  operator delete(v11);
  if ((_QWORD)a11)
    operator delete((void *)a11);
  _Unwind_Resume(a1);
}

std::string *YAML::_Tag::_Tag(std::string *this, __int128 *a2, __int128 *a3, int a4)
{
  __int128 v7;
  std::string *v8;
  __int128 v9;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v7 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v7;
  }
  v8 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v9 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  LODWORD(this[2].__r_.__value_.__l.__data_) = a4;
  return this;
}

void sub_1BF8B4EEC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t `anonymous namespace'::ToString(_anonymous_namespace_ *this)
{
  uint64_t v1;
  _QWORD v3[13];
  char v4;
  uint64_t v5;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v3);
  std::ostream::operator<<();
  std::stringbuf::str();
  v3[0] = *MEMORY[0x1E0DE4F50];
  v1 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v3[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v3[2] = v1;
  v3[3] = MEMORY[0x1E0DE4FB8] + 16;
  if (v4 < 0)
    operator delete((void *)v3[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C3B8D80C](&v5);
}

void sub_1BF8B4FBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x1E0DE4FD0];
  v3 = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_1BF8B50D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x1C3B8D80C](v1);
  _Unwind_Resume(a1);
}

uint64_t std::deque<YAML::EmitFromEvents::State::value>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 512;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 1024;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

double YAML::EmitFromEvents::EmitFromEvents(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_1E792DCE0;
  *(_QWORD *)(a1 + 8) = a2;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)a1 = &off_1E792DCE0;
  *(_QWORD *)(a1 + 8) = a2;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  return result;
}

void siri::dialogengine::DialogUser::GetPersonData(siri::dialogengine::DialogUser *this@<X0>, siri::dialogengine::Context *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  _BOOL4 v20;
  unint64_t *v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  void **v25;
  siri::dialogengine::MeCard::Impl *v26[2];
  char v27;
  std::string __p;
  std::string v29;
  std::string v30;
  std::string v31;
  std::string v32;
  std::string v33;
  std::string v34;
  void *v35;
  char v36;
  void *v37;
  char v38;
  void *v39;
  char v40;
  void *v41;
  char v42;
  void *v43;
  int v44;
  char v45;
  void *v46;
  char v47;
  void *v48;
  char v49;
  void *v50;
  char v51;
  void *v52;
  char v53;
  void *v54;
  char v55;
  void *v56;
  char v57;
  void *v58;
  char v59;
  void *v60;
  char v61;
  void *v62;
  char v63;
  void *v64;
  char v65;
  void *v66;
  char v67;
  void *v68;
  char v69;
  void *v70;
  char v71;
  void *v72;
  char v73;
  void *v74;
  char v75;
  void *v76;
  char v77;
  void *v78;
  char v79;
  void *v80;
  char v81;
  void *v82;
  char v83;
  void *v84;
  char v85;
  void *v86;
  char v87;
  void *v88;
  char v89;
  void *v90;
  char v91;
  void *v92;
  char v93;
  void *v94;
  char v95;
  void *v96;
  char v97;
  void *v98;
  char v99;
  void *v100;
  char v101;
  void *v102;
  char v103;
  void *v104;
  char v105;
  void *v106;
  char v107;

  siri::dialogengine::DialogPerson::GetPersonData(a2, a3);
  v7 = *(unsigned __int8 *)(a3 + 47);
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a3 + 32);
  if (v7)
    goto LABEL_25;
  v8 = *(unsigned __int8 *)(a3 + 23);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a3 + 8);
  if (v8)
    goto LABEL_25;
  v9 = *(unsigned __int8 *)(a3 + 383);
  if ((v9 & 0x80u) != 0)
    v9 = *(_QWORD *)(a3 + 368);
  if (v9)
    goto LABEL_25;
  v10 = *(unsigned __int8 *)(a3 + 359);
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a3 + 344);
  if (v10)
    goto LABEL_25;
  v11 = *(unsigned __int8 *)(a3 + 215);
  if ((v11 & 0x80u) != 0)
    v11 = *(_QWORD *)(a3 + 200);
  if (v11)
    goto LABEL_25;
  v12 = *(unsigned __int8 *)(a3 + 191);
  if ((v12 & 0x80u) != 0)
    v12 = *(_QWORD *)(a3 + 176);
  if (v12)
    goto LABEL_25;
  v13 = *(unsigned __int8 *)(a3 + 551);
  if ((v13 & 0x80u) != 0)
    v13 = *(_QWORD *)(a3 + 536);
  if (v13)
    goto LABEL_25;
  v14 = *(unsigned __int8 *)(a3 + 527);
  if ((v14 & 0x80u) != 0)
    v14 = *(_QWORD *)(a3 + 512);
  if (v14)
  {
LABEL_25:
    std::string::basic_string[abi:ne180100]<0>(&__p, "useConversationalName");
    v15 = (_QWORD *)std::__tree<std::string>::find<std::string>((uint64_t)a2 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
    if ((_QWORD *)((char *)a2 + 80) == v15)
    {
      v20 = 1;
    }
    else
    {
      v16 = v15[7];
      v17 = (std::__shared_weak_count *)v15[8];
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldxr(p_shared_owners);
        while (__stxr(v19 + 1, p_shared_owners));
        v20 = v16 == 0;
        v21 = (unint64_t *)&v17->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      else
      {
        v20 = v16 == 0;
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (!v20)
        return;
    }
    else if (!v20)
    {
      return;
    }
    goto LABEL_39;
  }
  bzero(&__p, 0x409uLL);
  siri::dialogengine::PersonData::operator=(a3, (uint64_t)&__p);
  if (v107 < 0)
    operator delete(v106);
  if (v105 < 0)
    operator delete(v104);
  if (v103 < 0)
    operator delete(v102);
  if (v101 < 0)
    operator delete(v100);
  if (v99 < 0)
    operator delete(v98);
  if (v97 < 0)
    operator delete(v96);
  if (v95 < 0)
    operator delete(v94);
  if (v93 < 0)
    operator delete(v92);
  if (v91 < 0)
    operator delete(v90);
  if (v89 < 0)
    operator delete(v88);
  if (v87 < 0)
    operator delete(v86);
  if (v85 < 0)
    operator delete(v84);
  if (v83 < 0)
    operator delete(v82);
  if (v81 < 0)
    operator delete(v80);
  if (v79 < 0)
    operator delete(v78);
  if (v77 < 0)
    operator delete(v76);
  if (v75 < 0)
    operator delete(v74);
  if (v73 < 0)
    operator delete(v72);
  if (v71 < 0)
    operator delete(v70);
  if (v69 < 0)
    operator delete(v68);
  if (v67 < 0)
    operator delete(v66);
  if (v65 < 0)
    operator delete(v64);
  if (v63 < 0)
    operator delete(v62);
  if (v61 < 0)
    operator delete(v60);
  if (v59 < 0)
    operator delete(v58);
  if (v57 < 0)
    operator delete(v56);
  if (v55 < 0)
    operator delete(v54);
  if (v53 < 0)
    operator delete(v52);
  if (v51 < 0)
    operator delete(v50);
  if (v49 < 0)
    operator delete(v48);
  if (v47 < 0)
    operator delete(v46);
  if (v45 < 0)
    operator delete(v43);
  if (v42 < 0)
    operator delete(v41);
  if (v40 < 0)
    operator delete(v39);
  if (v38 < 0)
    operator delete(v37);
  if (v36 < 0)
    operator delete(v35);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)&__p, (siri::dialogengine::DialogUser *)((char *)this + 8));
  v23 = v44;
  siri::dialogengine::RequestInfo::~RequestInfo((void **)&__p.__r_.__value_.__l.__data_);
  if ((v23 & 2) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v26, "John");
    siri::dialogengine::SpeakableString::SpeakableString((uint64_t)&__p, (uint64_t)v26);
    std::string::operator=((std::string *)a3, &__p);
    std::string::operator=((std::string *)(a3 + 24), &v29);
    std::string::operator=((std::string *)(a3 + 48), &v30);
    std::string::operator=((std::string *)(a3 + 72), &v31);
    std::string::operator=((std::string *)(a3 + 96), &v32);
    std::string::operator=((std::string *)(a3 + 120), &v33);
    std::string::operator=((std::string *)(a3 + 144), &v34);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v27 < 0)
      operator delete(v26[0]);
    std::string::basic_string[abi:ne180100]<0>(v26, "Appleseed");
    siri::dialogengine::SpeakableString::SpeakableString((uint64_t)&__p, (uint64_t)v26);
    std::string::operator=((std::string *)(a3 + 336), &__p);
    std::string::operator=((std::string *)(a3 + 360), &v29);
    std::string::operator=((std::string *)(a3 + 384), &v30);
    std::string::operator=((std::string *)(a3 + 408), &v31);
    std::string::operator=((std::string *)(a3 + 432), &v32);
    std::string::operator=((std::string *)(a3 + 456), &v33);
    std::string::operator=((std::string *)(a3 + 480), &v34);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v27 < 0)
      operator delete(v26[0]);
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    siri::dialogengine::SpeakableString::SetString(a3 + 168, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(v26, "John");
    siri::dialogengine::SpeakableString::SpeakableString((uint64_t)&__p, (uint64_t)v26);
    std::string::operator=((std::string *)(a3 + 504), &__p);
    std::string::operator=((std::string *)(a3 + 528), &v29);
    std::string::operator=((std::string *)(a3 + 552), &v30);
    std::string::operator=((std::string *)(a3 + 576), &v31);
    std::string::operator=((std::string *)(a3 + 600), &v32);
    std::string::operator=((std::string *)(a3 + 624), &v33);
    std::string::operator=((std::string *)(a3 + 648), &v34);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v27 < 0)
      operator delete(v26[0]);
    if (*(char *)(a3 + 1031) < 0)
    {
      **(_BYTE **)(a3 + 1008) = 0;
      *(_QWORD *)(a3 + 1016) = 0;
    }
    else
    {
      *(_BYTE *)(a3 + 1008) = 0;
      *(_BYTE *)(a3 + 1031) = 0;
    }
LABEL_39:
    *(_BYTE *)(a3 + 1032) = 1;
    return;
  }
  v24 = operator new();
  bzero((void *)v24, 0x2A8uLL);
  v26[0] = (siri::dialogengine::MeCard::Impl *)v24;
  siri::dialogengine::MeCard::Impl::GetContact((siri::dialogengine::MeCard::Impl *)v24);
  siri::dialogengine::SpeakableString::SpeakableString(&__p, (const siri::dialogengine::SpeakableString *)(v24 + 8));
  std::string::operator=((std::string *)a3, &__p);
  std::string::operator=((std::string *)(a3 + 24), &v29);
  std::string::operator=((std::string *)(a3 + 48), &v30);
  std::string::operator=((std::string *)(a3 + 72), &v31);
  std::string::operator=((std::string *)(a3 + 96), &v32);
  std::string::operator=((std::string *)(a3 + 120), &v33);
  std::string::operator=((std::string *)(a3 + 144), &v34);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  siri::dialogengine::MeCard::Impl::GetContact(v26[0]);
  siri::dialogengine::SpeakableString::SpeakableString(&__p, (siri::dialogengine::MeCard::Impl *)((char *)v26[0] + 344));
  std::string::operator=((std::string *)(a3 + 336), &__p);
  std::string::operator=((std::string *)(a3 + 360), &v29);
  std::string::operator=((std::string *)(a3 + 384), &v30);
  std::string::operator=((std::string *)(a3 + 408), &v31);
  std::string::operator=((std::string *)(a3 + 432), &v32);
  std::string::operator=((std::string *)(a3 + 456), &v33);
  std::string::operator=((std::string *)(a3 + 480), &v34);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  siri::dialogengine::MeCard::Impl::GetContact(v26[0]);
  siri::dialogengine::SpeakableString::SpeakableString(&__p, (siri::dialogengine::MeCard::Impl *)((char *)v26[0] + 176));
  std::string::operator=((std::string *)(a3 + 168), &__p);
  std::string::operator=((std::string *)(a3 + 192), &v29);
  std::string::operator=((std::string *)(a3 + 216), &v30);
  std::string::operator=((std::string *)(a3 + 240), &v31);
  std::string::operator=((std::string *)(a3 + 264), &v32);
  std::string::operator=((std::string *)(a3 + 288), &v33);
  std::string::operator=((std::string *)(a3 + 312), &v34);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  siri::dialogengine::MeCard::Impl::GetContact(v26[0]);
  siri::dialogengine::SpeakableString::SpeakableString(&__p, (siri::dialogengine::MeCard::Impl *)((char *)v26[0] + 512));
  std::string::operator=((std::string *)(a3 + 504), &__p);
  std::string::operator=((std::string *)(a3 + 528), &v29);
  std::string::operator=((std::string *)(a3 + 552), &v30);
  std::string::operator=((std::string *)(a3 + 576), &v31);
  std::string::operator=((std::string *)(a3 + 600), &v32);
  std::string::operator=((std::string *)(a3 + 624), &v33);
  std::string::operator=((std::string *)(a3 + 648), &v34);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  siri::dialogengine::MeCard::GetGender(&__p);
  v25 = (void **)(a3 + 1008);
  if (*(char *)(a3 + 1031) < 0)
    operator delete(*v25);
  *(_OWORD *)v25 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_QWORD *)(a3 + 1024) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  *(_BYTE *)(a3 + 1032) = 1;
  siri::dialogengine::MeCard::~MeCard((void ***)v26);
}

void sub_1BF8B5E04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void **v21;

  if (a15 < 0)
    operator delete(__p);
  siri::dialogengine::PersonData::~PersonData(v21);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::PersonData::operator=(uint64_t a1, uint64_t a2)
{
  void **v4;
  __int128 v5;

  std::string::operator=((std::string *)a1, (const std::string *)a2);
  std::string::operator=((std::string *)(a1 + 24), (const std::string *)(a2 + 24));
  std::string::operator=((std::string *)(a1 + 48), (const std::string *)(a2 + 48));
  std::string::operator=((std::string *)(a1 + 72), (const std::string *)(a2 + 72));
  std::string::operator=((std::string *)(a1 + 96), (const std::string *)(a2 + 96));
  std::string::operator=((std::string *)(a1 + 120), (const std::string *)(a2 + 120));
  std::string::operator=((std::string *)(a1 + 144), (const std::string *)(a2 + 144));
  std::string::operator=((std::string *)(a1 + 168), (const std::string *)(a2 + 168));
  std::string::operator=((std::string *)(a1 + 192), (const std::string *)(a2 + 192));
  std::string::operator=((std::string *)(a1 + 216), (const std::string *)(a2 + 216));
  std::string::operator=((std::string *)(a1 + 240), (const std::string *)(a2 + 240));
  std::string::operator=((std::string *)(a1 + 264), (const std::string *)(a2 + 264));
  std::string::operator=((std::string *)(a1 + 288), (const std::string *)(a2 + 288));
  std::string::operator=((std::string *)(a1 + 312), (const std::string *)(a2 + 312));
  std::string::operator=((std::string *)(a1 + 336), (const std::string *)(a2 + 336));
  std::string::operator=((std::string *)(a1 + 360), (const std::string *)(a2 + 360));
  std::string::operator=((std::string *)(a1 + 384), (const std::string *)(a2 + 384));
  std::string::operator=((std::string *)(a1 + 408), (const std::string *)(a2 + 408));
  std::string::operator=((std::string *)(a1 + 432), (const std::string *)(a2 + 432));
  std::string::operator=((std::string *)(a1 + 456), (const std::string *)(a2 + 456));
  std::string::operator=((std::string *)(a1 + 480), (const std::string *)(a2 + 480));
  std::string::operator=((std::string *)(a1 + 504), (const std::string *)(a2 + 504));
  std::string::operator=((std::string *)(a1 + 528), (const std::string *)(a2 + 528));
  std::string::operator=((std::string *)(a1 + 552), (const std::string *)(a2 + 552));
  std::string::operator=((std::string *)(a1 + 576), (const std::string *)(a2 + 576));
  std::string::operator=((std::string *)(a1 + 600), (const std::string *)(a2 + 600));
  std::string::operator=((std::string *)(a1 + 624), (const std::string *)(a2 + 624));
  std::string::operator=((std::string *)(a1 + 648), (const std::string *)(a2 + 648));
  std::string::operator=((std::string *)(a1 + 672), (const std::string *)(a2 + 672));
  std::string::operator=((std::string *)(a1 + 696), (const std::string *)(a2 + 696));
  std::string::operator=((std::string *)(a1 + 720), (const std::string *)(a2 + 720));
  std::string::operator=((std::string *)(a1 + 744), (const std::string *)(a2 + 744));
  std::string::operator=((std::string *)(a1 + 768), (const std::string *)(a2 + 768));
  std::string::operator=((std::string *)(a1 + 792), (const std::string *)(a2 + 792));
  std::string::operator=((std::string *)(a1 + 816), (const std::string *)(a2 + 816));
  std::string::operator=((std::string *)(a1 + 840), (const std::string *)(a2 + 840));
  std::string::operator=((std::string *)(a1 + 864), (const std::string *)(a2 + 864));
  std::string::operator=((std::string *)(a1 + 888), (const std::string *)(a2 + 888));
  std::string::operator=((std::string *)(a1 + 912), (const std::string *)(a2 + 912));
  std::string::operator=((std::string *)(a1 + 936), (const std::string *)(a2 + 936));
  std::string::operator=((std::string *)(a1 + 960), (const std::string *)(a2 + 960));
  std::string::operator=((std::string *)(a1 + 984), (const std::string *)(a2 + 984));
  v4 = (void **)(a1 + 1008);
  if (*(char *)(a1 + 1031) < 0)
    operator delete(*v4);
  v5 = *(_OWORD *)(a2 + 1008);
  *(_QWORD *)(a1 + 1024) = *(_QWORD *)(a2 + 1024);
  *(_OWORD *)v4 = v5;
  *(_BYTE *)(a2 + 1031) = 0;
  *(_BYTE *)(a2 + 1008) = 0;
  *(_BYTE *)(a1 + 1032) = *(_BYTE *)(a2 + 1032);
  return a1;
}

void siri::dialogengine::PersonData::~PersonData(void **this)
{
  if (*((char *)this + 1031) < 0)
    operator delete(this[126]);
  siri::dialogengine::SpeakableString::~SpeakableString(this + 105);
  siri::dialogengine::SpeakableString::~SpeakableString(this + 84);
  siri::dialogengine::SpeakableString::~SpeakableString(this + 63);
  siri::dialogengine::SpeakableString::~SpeakableString(this + 42);
  siri::dialogengine::SpeakableString::~SpeakableString(this + 21);
  siri::dialogengine::SpeakableString::~SpeakableString(this);
}

siri::dialogengine::DialogPerson *siri::dialogengine::DialogUser::toString(siri::dialogengine::DialogUser *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  const siri::dialogengine::PersonData *v5;
  std::string *v6;
  siri::dialogengine::Variable *v7;
  siri::dialogengine::DialogPerson *v8;
  std::string v10;
  void *v11;
  char v12;
  void *v13;
  char v14;
  void *v15;
  char v16;
  void *v17;
  char v18;
  void *v19;
  char v20;
  void *v21;
  char v22;
  void *v23;
  char v24;
  void *v25;
  char v26;
  void *v27;
  char v28;
  void *v29;
  char v30;
  void *v31;
  char v32;
  void *v33;
  char v34;
  void *v35;
  char v36;
  void *v37;
  char v38;
  void *v39;
  char v40;
  void *v41;
  char v42;
  void *v43;
  char v44;
  void *v45;
  char v46;
  void *v47;
  char v48;
  void *v49;
  char v50;
  void *v51;
  char v52;
  void *v53;
  char v54;
  void *v55;
  char v56;
  void *v57;
  char v58;
  void *v59;
  char v60;
  void *v61;
  char v62;
  void *v63;
  char v64;
  void *v65;
  char v66;
  void *v67;
  char v68;
  void *v69;
  char v70;
  void *v71;
  char v72;
  void *v73;
  char v74;
  void *v75;
  char v76;
  void *v77;
  char v78;
  void *v79;
  char v80;
  void *v81;
  char v82;
  void *v83;
  char v84;
  void *v85;
  char v86;
  void *v87;
  char v88;
  void *v89;
  char v90;
  void *v91;
  char v92;
  void *__p;
  char v94;

  siri::dialogengine::DialogUser::GetPersonData(this, a2, (uint64_t)&v10);
  v6 = siri::dialogengine::DialogPerson::GetToString(this, a2, &v10, v5);
  v8 = siri::dialogengine::DialogPerson::RemoveEmojis((siri::dialogengine::DialogPerson *)v6, v7);
  if (v94 < 0)
    operator delete(__p);
  if (v92 < 0)
    operator delete(v91);
  if (v90 < 0)
    operator delete(v89);
  if (v88 < 0)
    operator delete(v87);
  if (v86 < 0)
    operator delete(v85);
  if (v84 < 0)
    operator delete(v83);
  if (v82 < 0)
    operator delete(v81);
  if (v80 < 0)
    operator delete(v79);
  if (v78 < 0)
    operator delete(v77);
  if (v76 < 0)
    operator delete(v75);
  if (v74 < 0)
    operator delete(v73);
  if (v72 < 0)
    operator delete(v71);
  if (v70 < 0)
    operator delete(v69);
  if (v68 < 0)
    operator delete(v67);
  if (v66 < 0)
    operator delete(v65);
  if (v64 < 0)
    operator delete(v63);
  if (v62 < 0)
    operator delete(v61);
  if (v60 < 0)
    operator delete(v59);
  if (v58 < 0)
    operator delete(v57);
  if (v56 < 0)
    operator delete(v55);
  if (v54 < 0)
    operator delete(v53);
  if (v52 < 0)
    operator delete(v51);
  if (v50 < 0)
    operator delete(v49);
  if (v48 < 0)
    operator delete(v47);
  if (v46 < 0)
    operator delete(v45);
  if (v44 < 0)
    operator delete(v43);
  if (v42 < 0)
    operator delete(v41);
  if (v40 < 0)
    operator delete(v39);
  if (v38 < 0)
    operator delete(v37);
  if (v36 < 0)
    operator delete(v35);
  if (v34 < 0)
    operator delete(v33);
  if (v32 < 0)
    operator delete(v31);
  if (v30 < 0)
    operator delete(v29);
  if (v28 < 0)
    operator delete(v27);
  if (v26 < 0)
    operator delete(v25);
  if (v24 < 0)
    operator delete(v23);
  if (v22 < 0)
    operator delete(v21);
  if (v20 < 0)
    operator delete(v19);
  if (v18 < 0)
    operator delete(v17);
  if (v16 < 0)
    operator delete(v15);
  if (v14 < 0)
    operator delete(v13);
  if (v12 < 0)
    operator delete(v11);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  return v8;
}

void sub_1BF8B6474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  siri::dialogengine::PersonData::~PersonData(&a9);
  _Unwind_Resume(a1);
}

siri::dialogengine::DialogPerson *siri::dialogengine::DialogUser::givenName(siri::dialogengine::DialogUser *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string *v4;
  siri::dialogengine::Variable *v5;
  siri::dialogengine::DialogPerson *v6;
  std::string v8;
  std::string __str;
  void *v10;
  char v11;
  void *v12;
  char v13;
  void *v14;
  char v15;
  void *v16;
  char v17;
  void *v18;
  char v19;
  void *v20;
  char v21;
  void *v22;
  char v23;
  void *v24;
  char v25;
  void *v26;
  char v27;
  void *v28;
  char v29;
  void *v30;
  char v31;
  void *v32;
  char v33;
  void *v34;
  char v35;
  void *v36;
  char v37;
  void *v38;
  char v39;
  void *v40;
  char v41;
  void *v42;
  char v43;
  void *v44;
  char v45;
  void *v46;
  char v47;
  void *v48;
  char v49;
  void *v50;
  char v51;
  void *v52;
  char v53;
  void *v54;
  char v55;
  void *v56;
  char v57;
  void *v58;
  char v59;
  void *v60;
  char v61;
  void *v62;
  char v63;
  void *v64;
  char v65;
  void *v66;
  char v67;
  void *v68;
  char v69;
  void *v70;
  char v71;
  void *v72;
  char v73;
  void *v74;
  char v75;
  void *v76;
  char v77;
  void *v78;
  char v79;
  void *v80;
  char v81;
  void *v82;
  char v83;
  void *v84;
  char v85;
  void *v86;
  char v87;
  void *v88;
  char v89;
  void *v90;
  char v91;
  void *__p;
  char v93;
  std::string v94;
  std::string v95;
  void *v96;
  char v97;
  void *v98;
  char v99;
  void *v100;
  char v101;
  void *v102;
  char v103;
  void *v104;
  char v105;

  siri::dialogengine::DialogUser::GetPersonData(this, a2, (uint64_t)&__str);
  siri::dialogengine::SpeakableString::SpeakableString(&v94, (const siri::dialogengine::SpeakableString *)&__str);
  if (v93 < 0)
    operator delete(__p);
  if (v91 < 0)
    operator delete(v90);
  if (v89 < 0)
    operator delete(v88);
  if (v87 < 0)
    operator delete(v86);
  if (v85 < 0)
    operator delete(v84);
  if (v83 < 0)
    operator delete(v82);
  if (v81 < 0)
    operator delete(v80);
  if (v79 < 0)
    operator delete(v78);
  if (v77 < 0)
    operator delete(v76);
  if (v75 < 0)
    operator delete(v74);
  if (v73 < 0)
    operator delete(v72);
  if (v71 < 0)
    operator delete(v70);
  if (v69 < 0)
    operator delete(v68);
  if (v67 < 0)
    operator delete(v66);
  if (v65 < 0)
    operator delete(v64);
  if (v63 < 0)
    operator delete(v62);
  if (v61 < 0)
    operator delete(v60);
  if (v59 < 0)
    operator delete(v58);
  if (v57 < 0)
    operator delete(v56);
  if (v55 < 0)
    operator delete(v54);
  if (v53 < 0)
    operator delete(v52);
  if (v51 < 0)
    operator delete(v50);
  if (v49 < 0)
    operator delete(v48);
  if (v47 < 0)
    operator delete(v46);
  if (v45 < 0)
    operator delete(v44);
  if (v43 < 0)
    operator delete(v42);
  if (v41 < 0)
    operator delete(v40);
  if (v39 < 0)
    operator delete(v38);
  if (v37 < 0)
    operator delete(v36);
  if (v35 < 0)
    operator delete(v34);
  if (v33 < 0)
    operator delete(v32);
  if (v31 < 0)
    operator delete(v30);
  if (v29 < 0)
    operator delete(v28);
  if (v27 < 0)
    operator delete(v26);
  if (v25 < 0)
    operator delete(v24);
  if (v23 < 0)
    operator delete(v22);
  if (v21 < 0)
    operator delete(v20);
  if (v19 < 0)
    operator delete(v18);
  if (v17 < 0)
    operator delete(v16);
  if (v15 < 0)
    operator delete(v14);
  if (v13 < 0)
    operator delete(v12);
  if (v11 < 0)
    operator delete(v10);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v8, v95.__r_.__value_.__l.__data_, v95.__r_.__value_.__l.__size_);
  else
    v8 = v95;
  siri::dialogengine::DialogPerson::FormatSpeakableName(this, (uint64_t)&v8, &__str);
  std::string::operator=(&v95, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  v4 = (std::string *)operator new();
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  siri::dialogengine::VariableString::VariableString(v4, &__str, (const siri::dialogengine::SpeakableString *)&v94);
  v6 = siri::dialogengine::DialogPerson::RemoveEmojis((siri::dialogengine::DialogPerson *)v4, v5);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v105 < 0)
    operator delete(v104);
  if (v103 < 0)
    operator delete(v102);
  if (v101 < 0)
    operator delete(v100);
  if (v99 < 0)
    operator delete(v98);
  if (v97 < 0)
    operator delete(v96);
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v95.__r_.__value_.__l.__data_);
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v94.__r_.__value_.__l.__data_);
  return v6;
}

void sub_1BF8B68B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  siri::dialogengine::SpeakableString::~SpeakableString((void **)(v20 - 200));
  _Unwind_Resume(a1);
}

siri::dialogengine::DialogPerson *siri::dialogengine::DialogUser::middleName(siri::dialogengine::DialogUser *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string *v4;
  siri::dialogengine::Variable *v5;
  siri::dialogengine::DialogPerson *v6;
  std::string v8;
  std::string __str;
  void *v10;
  char v11;
  void *v12;
  char v13;
  void *v14;
  char v15;
  void *v16;
  char v17;
  void *v18;
  char v19;
  void *v20;
  char v21;
  void *v22;
  char v23;
  void *v24;
  char v25;
  void *v26;
  char v27;
  void *v28;
  char v29;
  void *v30;
  char v31;
  void *v32;
  char v33;
  void *v34;
  char v35;
  void *v36;
  char v37;
  void *v38;
  char v39;
  void *v40;
  char v41;
  void *v42;
  char v43;
  void *v44;
  char v45;
  void *v46;
  char v47;
  void *v48;
  char v49;
  void *v50;
  char v51;
  void *v52;
  char v53;
  void *v54;
  char v55;
  void *v56;
  char v57;
  void *v58;
  char v59;
  void *v60;
  char v61;
  void *v62;
  char v63;
  void *v64;
  char v65;
  void *v66;
  char v67;
  void *v68;
  char v69;
  void *v70;
  char v71;
  void *v72;
  char v73;
  void *v74;
  char v75;
  void *v76;
  char v77;
  void *v78;
  char v79;
  void *v80;
  char v81;
  void *v82;
  char v83;
  void *v84;
  char v85;
  void *v86;
  char v87;
  void *v88;
  char v89;
  void *v90;
  char v91;
  void *__p;
  char v93;
  std::string v94;
  std::string v95;
  void *v96;
  char v97;
  void *v98;
  char v99;
  void *v100;
  char v101;
  void *v102;
  char v103;
  void *v104;
  char v105;

  siri::dialogengine::DialogUser::GetPersonData(this, a2, (uint64_t)&__str);
  siri::dialogengine::SpeakableString::SpeakableString(&v94, (const siri::dialogengine::SpeakableString *)&v22);
  if (v93 < 0)
    operator delete(__p);
  if (v91 < 0)
    operator delete(v90);
  if (v89 < 0)
    operator delete(v88);
  if (v87 < 0)
    operator delete(v86);
  if (v85 < 0)
    operator delete(v84);
  if (v83 < 0)
    operator delete(v82);
  if (v81 < 0)
    operator delete(v80);
  if (v79 < 0)
    operator delete(v78);
  if (v77 < 0)
    operator delete(v76);
  if (v75 < 0)
    operator delete(v74);
  if (v73 < 0)
    operator delete(v72);
  if (v71 < 0)
    operator delete(v70);
  if (v69 < 0)
    operator delete(v68);
  if (v67 < 0)
    operator delete(v66);
  if (v65 < 0)
    operator delete(v64);
  if (v63 < 0)
    operator delete(v62);
  if (v61 < 0)
    operator delete(v60);
  if (v59 < 0)
    operator delete(v58);
  if (v57 < 0)
    operator delete(v56);
  if (v55 < 0)
    operator delete(v54);
  if (v53 < 0)
    operator delete(v52);
  if (v51 < 0)
    operator delete(v50);
  if (v49 < 0)
    operator delete(v48);
  if (v47 < 0)
    operator delete(v46);
  if (v45 < 0)
    operator delete(v44);
  if (v43 < 0)
    operator delete(v42);
  if (v41 < 0)
    operator delete(v40);
  if (v39 < 0)
    operator delete(v38);
  if (v37 < 0)
    operator delete(v36);
  if (v35 < 0)
    operator delete(v34);
  if (v33 < 0)
    operator delete(v32);
  if (v31 < 0)
    operator delete(v30);
  if (v29 < 0)
    operator delete(v28);
  if (v27 < 0)
    operator delete(v26);
  if (v25 < 0)
    operator delete(v24);
  if (v23 < 0)
    operator delete(v22);
  if (v21 < 0)
    operator delete(v20);
  if (v19 < 0)
    operator delete(v18);
  if (v17 < 0)
    operator delete(v16);
  if (v15 < 0)
    operator delete(v14);
  if (v13 < 0)
    operator delete(v12);
  if (v11 < 0)
    operator delete(v10);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v8, v95.__r_.__value_.__l.__data_, v95.__r_.__value_.__l.__size_);
  else
    v8 = v95;
  siri::dialogengine::DialogPerson::FormatSpeakableName(this, (uint64_t)&v8, &__str);
  std::string::operator=(&v95, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  v4 = (std::string *)operator new();
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  siri::dialogengine::VariableString::VariableString(v4, &__str, (const siri::dialogengine::SpeakableString *)&v94);
  v6 = siri::dialogengine::DialogPerson::RemoveEmojis((siri::dialogengine::DialogPerson *)v4, v5);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v105 < 0)
    operator delete(v104);
  if (v103 < 0)
    operator delete(v102);
  if (v101 < 0)
    operator delete(v100);
  if (v99 < 0)
    operator delete(v98);
  if (v97 < 0)
    operator delete(v96);
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v95.__r_.__value_.__l.__data_);
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v94.__r_.__value_.__l.__data_);
  return v6;
}

void sub_1BF8B6D88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  siri::dialogengine::SpeakableString::~SpeakableString((void **)(v20 - 200));
  _Unwind_Resume(a1);
}

siri::dialogengine::DialogPerson *siri::dialogengine::DialogUser::familyName(siri::dialogengine::DialogUser *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string *v4;
  siri::dialogengine::Variable *v5;
  siri::dialogengine::DialogPerson *v6;
  std::string v8;
  std::string __str;
  void *v10;
  char v11;
  void *v12;
  char v13;
  void *v14;
  char v15;
  void *v16;
  char v17;
  void *v18;
  char v19;
  void *v20;
  char v21;
  void *v22;
  char v23;
  void *v24;
  char v25;
  void *v26;
  char v27;
  void *v28;
  char v29;
  void *v30;
  char v31;
  void *v32;
  char v33;
  void *v34;
  char v35;
  void *v36;
  char v37;
  void *v38;
  char v39;
  void *v40;
  char v41;
  void *v42;
  char v43;
  void *v44;
  char v45;
  void *v46;
  char v47;
  void *v48;
  char v49;
  void *v50;
  char v51;
  void *v52;
  char v53;
  void *v54;
  char v55;
  void *v56;
  char v57;
  void *v58;
  char v59;
  void *v60;
  char v61;
  void *v62;
  char v63;
  void *v64;
  char v65;
  void *v66;
  char v67;
  void *v68;
  char v69;
  void *v70;
  char v71;
  void *v72;
  char v73;
  void *v74;
  char v75;
  void *v76;
  char v77;
  void *v78;
  char v79;
  void *v80;
  char v81;
  void *v82;
  char v83;
  void *v84;
  char v85;
  void *v86;
  char v87;
  void *v88;
  char v89;
  void *v90;
  char v91;
  void *__p;
  char v93;
  std::string v94;
  std::string v95;
  void *v96;
  char v97;
  void *v98;
  char v99;
  void *v100;
  char v101;
  void *v102;
  char v103;
  void *v104;
  char v105;

  siri::dialogengine::DialogUser::GetPersonData(this, a2, (uint64_t)&__str);
  siri::dialogengine::SpeakableString::SpeakableString(&v94, (const siri::dialogengine::SpeakableString *)&v36);
  if (v93 < 0)
    operator delete(__p);
  if (v91 < 0)
    operator delete(v90);
  if (v89 < 0)
    operator delete(v88);
  if (v87 < 0)
    operator delete(v86);
  if (v85 < 0)
    operator delete(v84);
  if (v83 < 0)
    operator delete(v82);
  if (v81 < 0)
    operator delete(v80);
  if (v79 < 0)
    operator delete(v78);
  if (v77 < 0)
    operator delete(v76);
  if (v75 < 0)
    operator delete(v74);
  if (v73 < 0)
    operator delete(v72);
  if (v71 < 0)
    operator delete(v70);
  if (v69 < 0)
    operator delete(v68);
  if (v67 < 0)
    operator delete(v66);
  if (v65 < 0)
    operator delete(v64);
  if (v63 < 0)
    operator delete(v62);
  if (v61 < 0)
    operator delete(v60);
  if (v59 < 0)
    operator delete(v58);
  if (v57 < 0)
    operator delete(v56);
  if (v55 < 0)
    operator delete(v54);
  if (v53 < 0)
    operator delete(v52);
  if (v51 < 0)
    operator delete(v50);
  if (v49 < 0)
    operator delete(v48);
  if (v47 < 0)
    operator delete(v46);
  if (v45 < 0)
    operator delete(v44);
  if (v43 < 0)
    operator delete(v42);
  if (v41 < 0)
    operator delete(v40);
  if (v39 < 0)
    operator delete(v38);
  if (v37 < 0)
    operator delete(v36);
  if (v35 < 0)
    operator delete(v34);
  if (v33 < 0)
    operator delete(v32);
  if (v31 < 0)
    operator delete(v30);
  if (v29 < 0)
    operator delete(v28);
  if (v27 < 0)
    operator delete(v26);
  if (v25 < 0)
    operator delete(v24);
  if (v23 < 0)
    operator delete(v22);
  if (v21 < 0)
    operator delete(v20);
  if (v19 < 0)
    operator delete(v18);
  if (v17 < 0)
    operator delete(v16);
  if (v15 < 0)
    operator delete(v14);
  if (v13 < 0)
    operator delete(v12);
  if (v11 < 0)
    operator delete(v10);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v8, v95.__r_.__value_.__l.__data_, v95.__r_.__value_.__l.__size_);
  else
    v8 = v95;
  siri::dialogengine::DialogPerson::FormatSpeakableName(this, (uint64_t)&v8, &__str);
  std::string::operator=(&v95, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  v4 = (std::string *)operator new();
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  siri::dialogengine::VariableString::VariableString(v4, &__str, (const siri::dialogengine::SpeakableString *)&v94);
  v6 = siri::dialogengine::DialogPerson::RemoveEmojis((siri::dialogengine::DialogPerson *)v4, v5);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v105 < 0)
    operator delete(v104);
  if (v103 < 0)
    operator delete(v102);
  if (v101 < 0)
    operator delete(v100);
  if (v99 < 0)
    operator delete(v98);
  if (v97 < 0)
    operator delete(v96);
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v95.__r_.__value_.__l.__data_);
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v94.__r_.__value_.__l.__data_);
  return v6;
}

void sub_1BF8B7258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  siri::dialogengine::SpeakableString::~SpeakableString((void **)(v20 - 200));
  _Unwind_Resume(a1);
}

siri::dialogengine::DialogPerson *siri::dialogengine::DialogUser::nickname(siri::dialogengine::DialogUser *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  std::string *v4;
  siri::dialogengine::Variable *v5;
  siri::dialogengine::DialogPerson *v6;
  std::string v8;
  std::string __str;
  void *v10;
  char v11;
  void *v12;
  char v13;
  void *v14;
  char v15;
  void *v16;
  char v17;
  void *v18;
  char v19;
  void *v20;
  char v21;
  void *v22;
  char v23;
  void *v24;
  char v25;
  void *v26;
  char v27;
  void *v28;
  char v29;
  void *v30;
  char v31;
  void *v32;
  char v33;
  void *v34;
  char v35;
  void *v36;
  char v37;
  void *v38;
  char v39;
  void *v40;
  char v41;
  void *v42;
  char v43;
  void *v44;
  char v45;
  void *v46;
  char v47;
  void *v48;
  char v49;
  void *v50;
  char v51;
  void *v52;
  char v53;
  void *v54;
  char v55;
  void *v56;
  char v57;
  void *v58;
  char v59;
  void *v60;
  char v61;
  void *v62;
  char v63;
  void *v64;
  char v65;
  void *v66;
  char v67;
  void *v68;
  char v69;
  void *v70;
  char v71;
  void *v72;
  char v73;
  void *v74;
  char v75;
  void *v76;
  char v77;
  void *v78;
  char v79;
  void *v80;
  char v81;
  void *v82;
  char v83;
  void *v84;
  char v85;
  void *v86;
  char v87;
  void *v88;
  char v89;
  void *v90;
  char v91;
  void *__p;
  char v93;
  std::string v94;
  std::string v95;
  void *v96;
  char v97;
  void *v98;
  char v99;
  void *v100;
  char v101;
  void *v102;
  char v103;
  void *v104;
  char v105;

  siri::dialogengine::DialogUser::GetPersonData(this, a2, (uint64_t)&__str);
  siri::dialogengine::SpeakableString::SpeakableString(&v94, (const siri::dialogengine::SpeakableString *)&v50);
  if (v93 < 0)
    operator delete(__p);
  if (v91 < 0)
    operator delete(v90);
  if (v89 < 0)
    operator delete(v88);
  if (v87 < 0)
    operator delete(v86);
  if (v85 < 0)
    operator delete(v84);
  if (v83 < 0)
    operator delete(v82);
  if (v81 < 0)
    operator delete(v80);
  if (v79 < 0)
    operator delete(v78);
  if (v77 < 0)
    operator delete(v76);
  if (v75 < 0)
    operator delete(v74);
  if (v73 < 0)
    operator delete(v72);
  if (v71 < 0)
    operator delete(v70);
  if (v69 < 0)
    operator delete(v68);
  if (v67 < 0)
    operator delete(v66);
  if (v65 < 0)
    operator delete(v64);
  if (v63 < 0)
    operator delete(v62);
  if (v61 < 0)
    operator delete(v60);
  if (v59 < 0)
    operator delete(v58);
  if (v57 < 0)
    operator delete(v56);
  if (v55 < 0)
    operator delete(v54);
  if (v53 < 0)
    operator delete(v52);
  if (v51 < 0)
    operator delete(v50);
  if (v49 < 0)
    operator delete(v48);
  if (v47 < 0)
    operator delete(v46);
  if (v45 < 0)
    operator delete(v44);
  if (v43 < 0)
    operator delete(v42);
  if (v41 < 0)
    operator delete(v40);
  if (v39 < 0)
    operator delete(v38);
  if (v37 < 0)
    operator delete(v36);
  if (v35 < 0)
    operator delete(v34);
  if (v33 < 0)
    operator delete(v32);
  if (v31 < 0)
    operator delete(v30);
  if (v29 < 0)
    operator delete(v28);
  if (v27 < 0)
    operator delete(v26);
  if (v25 < 0)
    operator delete(v24);
  if (v23 < 0)
    operator delete(v22);
  if (v21 < 0)
    operator delete(v20);
  if (v19 < 0)
    operator delete(v18);
  if (v17 < 0)
    operator delete(v16);
  if (v15 < 0)
    operator delete(v14);
  if (v13 < 0)
    operator delete(v12);
  if (v11 < 0)
    operator delete(v10);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v8, v95.__r_.__value_.__l.__data_, v95.__r_.__value_.__l.__size_);
  else
    v8 = v95;
  siri::dialogengine::DialogPerson::FormatSpeakableName(this, (uint64_t)&v8, &__str);
  std::string::operator=(&v95, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  v4 = (std::string *)operator new();
  std::string::basic_string[abi:ne180100]<0>(&__str, "");
  siri::dialogengine::VariableString::VariableString(v4, &__str, (const siri::dialogengine::SpeakableString *)&v94);
  v6 = siri::dialogengine::DialogPerson::RemoveEmojis((siri::dialogengine::DialogPerson *)v4, v5);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v105 < 0)
    operator delete(v104);
  if (v103 < 0)
    operator delete(v102);
  if (v101 < 0)
    operator delete(v100);
  if (v99 < 0)
    operator delete(v98);
  if (v97 < 0)
    operator delete(v96);
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v95.__r_.__value_.__l.__data_);
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v94.__r_.__value_.__l.__data_);
  return v6;
}

void sub_1BF8B7728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  siri::dialogengine::SpeakableString::~SpeakableString((void **)(v20 - 200));
  _Unwind_Resume(a1);
}

siri::dialogengine::DialogPerson *siri::dialogengine::DialogUser::simpleName(siri::dialogengine::DialogUser *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  const siri::dialogengine::PersonData *v5;
  siri::dialogengine::DialogPerson *SimpleName;
  siri::dialogengine::Variable *v7;
  siri::dialogengine::DialogPerson *v8;
  std::string v10;
  void *v11;
  char v12;
  void *v13;
  char v14;
  void *v15;
  char v16;
  void *v17;
  char v18;
  void *v19;
  char v20;
  void *v21;
  char v22;
  void *v23;
  char v24;
  void *v25;
  char v26;
  void *v27;
  char v28;
  void *v29;
  char v30;
  void *v31;
  char v32;
  void *v33;
  char v34;
  void *v35;
  char v36;
  void *v37;
  char v38;
  void *v39;
  char v40;
  void *v41;
  char v42;
  void *v43;
  char v44;
  void *v45;
  char v46;
  void *v47;
  char v48;
  void *v49;
  char v50;
  void *v51;
  char v52;
  void *v53;
  char v54;
  void *v55;
  char v56;
  void *v57;
  char v58;
  void *v59;
  char v60;
  void *v61;
  char v62;
  void *v63;
  char v64;
  void *v65;
  char v66;
  void *v67;
  char v68;
  void *v69;
  char v70;
  void *v71;
  char v72;
  void *v73;
  char v74;
  void *v75;
  char v76;
  void *v77;
  char v78;
  void *v79;
  char v80;
  void *v81;
  char v82;
  void *v83;
  char v84;
  void *v85;
  char v86;
  void *v87;
  char v88;
  void *v89;
  char v90;
  void *v91;
  char v92;
  void *__p;
  char v94;

  siri::dialogengine::DialogUser::GetPersonData(this, a2, (uint64_t)&v10);
  SimpleName = siri::dialogengine::DialogPerson::GetSimpleName(this, a2, &v10, v5);
  v8 = siri::dialogengine::DialogPerson::RemoveEmojis(SimpleName, v7);
  if (v94 < 0)
    operator delete(__p);
  if (v92 < 0)
    operator delete(v91);
  if (v90 < 0)
    operator delete(v89);
  if (v88 < 0)
    operator delete(v87);
  if (v86 < 0)
    operator delete(v85);
  if (v84 < 0)
    operator delete(v83);
  if (v82 < 0)
    operator delete(v81);
  if (v80 < 0)
    operator delete(v79);
  if (v78 < 0)
    operator delete(v77);
  if (v76 < 0)
    operator delete(v75);
  if (v74 < 0)
    operator delete(v73);
  if (v72 < 0)
    operator delete(v71);
  if (v70 < 0)
    operator delete(v69);
  if (v68 < 0)
    operator delete(v67);
  if (v66 < 0)
    operator delete(v65);
  if (v64 < 0)
    operator delete(v63);
  if (v62 < 0)
    operator delete(v61);
  if (v60 < 0)
    operator delete(v59);
  if (v58 < 0)
    operator delete(v57);
  if (v56 < 0)
    operator delete(v55);
  if (v54 < 0)
    operator delete(v53);
  if (v52 < 0)
    operator delete(v51);
  if (v50 < 0)
    operator delete(v49);
  if (v48 < 0)
    operator delete(v47);
  if (v46 < 0)
    operator delete(v45);
  if (v44 < 0)
    operator delete(v43);
  if (v42 < 0)
    operator delete(v41);
  if (v40 < 0)
    operator delete(v39);
  if (v38 < 0)
    operator delete(v37);
  if (v36 < 0)
    operator delete(v35);
  if (v34 < 0)
    operator delete(v33);
  if (v32 < 0)
    operator delete(v31);
  if (v30 < 0)
    operator delete(v29);
  if (v28 < 0)
    operator delete(v27);
  if (v26 < 0)
    operator delete(v25);
  if (v24 < 0)
    operator delete(v23);
  if (v22 < 0)
    operator delete(v21);
  if (v20 < 0)
    operator delete(v19);
  if (v18 < 0)
    operator delete(v17);
  if (v16 < 0)
    operator delete(v15);
  if (v14 < 0)
    operator delete(v13);
  if (v12 < 0)
    operator delete(v11);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  return v8;
}

void sub_1BF8B7AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  siri::dialogengine::PersonData::~PersonData(&a9);
  _Unwind_Resume(a1);
}

siri::dialogengine::VariableObject *siri::dialogengine::DialogUser::pronoun(siri::dialogengine::DialogUser *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  siri::dialogengine::VariableObject *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::string v15;
  void *v16;
  char v17;
  void *v18;
  char v19;
  void *v20;
  char v21;
  void *v22;
  char v23;
  void *v24;
  char v25;
  void *v26;
  char v27;
  void *v28;
  char v29;
  void *v30;
  char v31;
  void *v32;
  char v33;
  void *v34;
  char v35;
  void *v36;
  char v37;
  void *v38;
  char v39;
  void *v40;
  char v41;
  void *v42;
  char v43;
  void *v44;
  char v45;
  void *v46;
  char v47;
  void *v48;
  char v49;
  void *v50;
  char v51;
  void *v52;
  char v53;
  void *v54;
  char v55;
  void *v56;
  char v57;
  void *v58;
  char v59;
  void *v60;
  char v61;
  void *v62;
  char v63;
  void *v64;
  char v65;
  void *v66;
  char v67;
  void *v68;
  char v69;
  void *v70;
  char v71;
  void *v72;
  char v73;
  void *v74;
  char v75;
  void *v76;
  char v77;
  void *v78;
  char v79;
  void *v80;
  char v81;
  void *v82;
  char v83;
  void *v84;
  char v85;
  void *v86;
  char v87;
  void *v88;
  char v89;
  void *v90;
  char v91;
  void *v92;
  char v93;
  void *v94;
  char v95;
  void *v96;
  char v97;
  void *__p;
  char v99;
  std::string v100;
  uint64_t v101;
  std::__shared_weak_count *v102;

  v5 = (siri::dialogengine::VariableObject *)operator new();
  siri::dialogengine::VariableObject::VariableObject(v5);
  std::string::basic_string[abi:ne180100]<0>(&v100, "gender");
  siri::dialogengine::DialogUser::GetPersonData(this, a2, (uint64_t)&v15);
  siri::dialogengine::VariableObject::AddStringProperty((uint64_t)v5, &v100, (uint64_t)&__p, &v101);
  v6 = v102;
  if (v102)
  {
    p_shared_owners = (unint64_t *)&v102->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v99 < 0)
    operator delete(__p);
  if (v97 < 0)
    operator delete(v96);
  if (v95 < 0)
    operator delete(v94);
  if (v93 < 0)
    operator delete(v92);
  if (v91 < 0)
    operator delete(v90);
  if (v89 < 0)
    operator delete(v88);
  if (v87 < 0)
    operator delete(v86);
  if (v85 < 0)
    operator delete(v84);
  if (v83 < 0)
    operator delete(v82);
  if (v81 < 0)
    operator delete(v80);
  if (v79 < 0)
    operator delete(v78);
  if (v77 < 0)
    operator delete(v76);
  if (v75 < 0)
    operator delete(v74);
  if (v73 < 0)
    operator delete(v72);
  if (v71 < 0)
    operator delete(v70);
  if (v69 < 0)
    operator delete(v68);
  if (v67 < 0)
    operator delete(v66);
  if (v65 < 0)
    operator delete(v64);
  if (v63 < 0)
    operator delete(v62);
  if (v61 < 0)
    operator delete(v60);
  if (v59 < 0)
    operator delete(v58);
  if (v57 < 0)
    operator delete(v56);
  if (v55 < 0)
    operator delete(v54);
  if (v53 < 0)
    operator delete(v52);
  if (v51 < 0)
    operator delete(v50);
  if (v49 < 0)
    operator delete(v48);
  if (v47 < 0)
    operator delete(v46);
  if (v45 < 0)
    operator delete(v44);
  if (v43 < 0)
    operator delete(v42);
  if (v41 < 0)
    operator delete(v40);
  if (v39 < 0)
    operator delete(v38);
  if (v37 < 0)
    operator delete(v36);
  if (v35 < 0)
    operator delete(v34);
  if (v33 < 0)
    operator delete(v32);
  if (v31 < 0)
    operator delete(v30);
  if (v29 < 0)
    operator delete(v28);
  if (v27 < 0)
    operator delete(v26);
  if (v25 < 0)
    operator delete(v24);
  if (v23 < 0)
    operator delete(v22);
  if (v21 < 0)
    operator delete(v20);
  if (v19 < 0)
    operator delete(v18);
  if (v17 < 0)
    operator delete(v16);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v100.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v15, "requestType");
  std::string::basic_string[abi:ne180100]<0>(&v100, "dialog.User");
  siri::dialogengine::VariableObject::AddStringProperty((uint64_t)v5, &v15, (uint64_t)&v100, &v13);
  v9 = v14;
  if (v14)
  {
    v10 = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v100.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  return v5;
}

void sub_1BF8B7EF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 - 65) < 0)
    operator delete(*(void **)(v17 - 88));
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

siri::dialogengine::DialogPerson *siri::dialogengine::DialogUser::groundingIfNeeded(siri::dialogengine::DialogUser *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  const siri::dialogengine::VariableObject *v5;
  siri::dialogengine::DialogPerson *v6;
  BOOL v7;
  siri::dialogengine::DialogPerson *v8;
  siri::dialogengine::Variable *v9;
  void *v11[35];
  char v12;
  char v13;
  char v14;

  siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)v11, (siri::dialogengine::DialogUser *)((char *)this + 8));
  v6 = 0;
  if ((v12 & 2) == 0)
  {
    if (v13)
      v7 = v14 == 0;
    else
      v7 = 1;
    if (!v7)
    {
      v8 = siri::dialogengine::DialogUser::toString(this, a2, v5);
      v6 = siri::dialogengine::DialogPerson::RemoveEmojis(v8, v9);
    }
  }
  siri::dialogengine::RequestInfo::~RequestInfo(v11);
  return v6;
}

void sub_1BF8B7FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  siri::dialogengine::RequestInfo::~RequestInfo(&a9);
  _Unwind_Resume(a1);
}

siri::dialogengine::DialogPerson *siri::dialogengine::DialogUser::groundingAlwaysIfMultiUser(siri::dialogengine::DialogUser *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  const siri::dialogengine::VariableObject *v5;
  siri::dialogengine::DialogPerson *v6;
  siri::dialogengine::DialogPerson *v7;
  siri::dialogengine::Variable *v8;
  void *v10[35];
  char v11;
  char v12;

  siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)v10, (siri::dialogengine::DialogUser *)((char *)this + 8));
  v6 = 0;
  if ((v11 & 2) == 0 && v12)
  {
    v7 = siri::dialogengine::DialogUser::toString(this, a2, v5);
    v6 = siri::dialogengine::DialogPerson::RemoveEmojis(v7, v8);
  }
  siri::dialogengine::RequestInfo::~RequestInfo(v10);
  return v6;
}

void sub_1BF8B806C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  siri::dialogengine::RequestInfo::~RequestInfo(&a9);
  _Unwind_Resume(a1);
}

void siri::dialogengine::DialogUser::formatWithHandle(siri::dialogengine::DialogUser *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  const siri::dialogengine::PersonData *v5;
  std::string v6;

  siri::dialogengine::DialogUser::GetPersonData(this, a2, (uint64_t)&v6);
  siri::dialogengine::DialogPerson::GetFormatWithHandle(this, a2, &v6, v5);
}

void sub_1BF8B8384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  siri::dialogengine::PersonData::~PersonData(&a9);
  _Unwind_Resume(a1);
}

siri::dialogengine::DialogPerson *siri::dialogengine::DialogUser::conversationalName(siri::dialogengine::DialogUser *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  const siri::dialogengine::PersonData *v5;
  std::string *ConversationalName;
  siri::dialogengine::Variable *v7;
  siri::dialogengine::DialogPerson *v8;
  std::string v10;
  void *v11;
  char v12;
  void *v13;
  char v14;
  void *v15;
  char v16;
  void *v17;
  char v18;
  void *v19;
  char v20;
  void *v21;
  char v22;
  void *v23;
  char v24;
  void *v25;
  char v26;
  void *v27;
  char v28;
  void *v29;
  char v30;
  void *v31;
  char v32;
  void *v33;
  char v34;
  void *v35;
  char v36;
  void *v37;
  char v38;
  void *v39;
  char v40;
  void *v41;
  char v42;
  void *v43;
  char v44;
  void *v45;
  char v46;
  void *v47;
  char v48;
  void *v49;
  char v50;
  void *v51;
  char v52;
  void *v53;
  char v54;
  void *v55;
  char v56;
  void *v57;
  char v58;
  void *v59;
  char v60;
  void *v61;
  char v62;
  void *v63;
  char v64;
  void *v65;
  char v66;
  void *v67;
  char v68;
  void *v69;
  char v70;
  void *v71;
  char v72;
  void *v73;
  char v74;
  void *v75;
  char v76;
  void *v77;
  char v78;
  void *v79;
  char v80;
  void *v81;
  char v82;
  void *v83;
  char v84;
  void *v85;
  char v86;
  void *v87;
  char v88;
  void *v89;
  char v90;
  void *v91;
  char v92;
  void *__p;
  char v94;

  siri::dialogengine::DialogUser::GetPersonData(this, a2, (uint64_t)&v10);
  ConversationalName = siri::dialogengine::DialogPerson::GetConversationalName(this, a2, &v10, v5);
  v8 = siri::dialogengine::DialogPerson::RemoveEmojis((siri::dialogengine::DialogPerson *)ConversationalName, v7);
  if (v94 < 0)
    operator delete(__p);
  if (v92 < 0)
    operator delete(v91);
  if (v90 < 0)
    operator delete(v89);
  if (v88 < 0)
    operator delete(v87);
  if (v86 < 0)
    operator delete(v85);
  if (v84 < 0)
    operator delete(v83);
  if (v82 < 0)
    operator delete(v81);
  if (v80 < 0)
    operator delete(v79);
  if (v78 < 0)
    operator delete(v77);
  if (v76 < 0)
    operator delete(v75);
  if (v74 < 0)
    operator delete(v73);
  if (v72 < 0)
    operator delete(v71);
  if (v70 < 0)
    operator delete(v69);
  if (v68 < 0)
    operator delete(v67);
  if (v66 < 0)
    operator delete(v65);
  if (v64 < 0)
    operator delete(v63);
  if (v62 < 0)
    operator delete(v61);
  if (v60 < 0)
    operator delete(v59);
  if (v58 < 0)
    operator delete(v57);
  if (v56 < 0)
    operator delete(v55);
  if (v54 < 0)
    operator delete(v53);
  if (v52 < 0)
    operator delete(v51);
  if (v50 < 0)
    operator delete(v49);
  if (v48 < 0)
    operator delete(v47);
  if (v46 < 0)
    operator delete(v45);
  if (v44 < 0)
    operator delete(v43);
  if (v42 < 0)
    operator delete(v41);
  if (v40 < 0)
    operator delete(v39);
  if (v38 < 0)
    operator delete(v37);
  if (v36 < 0)
    operator delete(v35);
  if (v34 < 0)
    operator delete(v33);
  if (v32 < 0)
    operator delete(v31);
  if (v30 < 0)
    operator delete(v29);
  if (v28 < 0)
    operator delete(v27);
  if (v26 < 0)
    operator delete(v25);
  if (v24 < 0)
    operator delete(v23);
  if (v22 < 0)
    operator delete(v21);
  if (v20 < 0)
    operator delete(v19);
  if (v18 < 0)
    operator delete(v17);
  if (v16 < 0)
    operator delete(v15);
  if (v14 < 0)
    operator delete(v13);
  if (v12 < 0)
    operator delete(v11);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  return v8;
}

void sub_1BF8B869C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  siri::dialogengine::PersonData::~PersonData(&a9);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogUser::isUsingNickname(siri::dialogengine::DialogUser *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  char v3;
  uint64_t v4;
  void *__p[2];
  char v7;
  std::string v8[20];
  std::string v9;

  siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)v8, (siri::dialogengine::DialogUser *)((char *)this + 8));
  std::string::basic_string[abi:ne180100]<0>(__p, "userShouldPreferNickname");
  siri::dialogengine::RequestInfo::GetUserSetting((uint64_t)v8, (const void **)__p, &v9);
  v3 = siri::dialogengine::StringToBool(&v9);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  if (v7 < 0)
    operator delete(__p[0]);
  siri::dialogengine::RequestInfo::~RequestInfo((void **)&v8[0].__r_.__value_.__l.__data_);
  v4 = operator new();
  std::string::basic_string[abi:ne180100]<0>(v8, "");
  siri::dialogengine::VariableBoolean::VariableBoolean(v4, v8, v3);
  if (SHIBYTE(v8[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8[0].__r_.__value_.__l.__data_);
  return v4;
}

void sub_1BF8B8788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a20 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8D890](v20, 0x10B3C408E4F17DDLL);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::DialogUser::isUsingFirstName(siri::dialogengine::DialogUser *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  std::string::size_type size;
  std::string v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  void *v13;
  char v14;
  void *v15;
  char v16;
  void *v17;
  char v18;
  void *v19;
  char v20;
  void *v21;
  char v22;
  void *v23;
  char v24;
  void *v25;
  char v26;
  void *v27;
  char v28;
  void *v29;
  char v30;
  void *v31;
  char v32;
  void *v33;
  char v34;
  void *v35;
  char v36;
  void *v37;
  char v38;
  void *v39;
  char v40;
  void *v41;
  char v42;
  void *v43;
  char v44;
  void *v45;
  char v46;
  void *v47;
  char v48;
  void *v49;
  char v50;
  void *v51;
  char v52;
  void *v53;
  char v54;
  void *v55;
  char v56;
  void *v57;
  char v58;
  void *v59;
  char v60;
  void *v61;
  char v62;
  void *v63;
  char v64;
  void *v65;
  char v66;
  void *v67;
  char v68;
  void *v69;
  char v70;
  void *v71;
  char v72;
  void *v73;
  char v74;
  void *v75;
  char v76;
  void *v77;
  char v78;
  void *v79;
  char v80;
  void *v81;
  char v82;
  void *v83;
  char v84;
  void *v85;
  char v86;
  void *v87;
  char v88;
  void *v89;
  char v90;
  void *__p;
  char v92;
  std::string v93;
  void *v94;
  uint64_t v95;
  unsigned __int8 v96;
  void *v97;
  char v98;
  void *v99;
  char v100;
  void *v101;
  char v102;
  void *v103;
  char v104;
  void *v105;
  char v106;

  siri::dialogengine::DialogUser::GetPersonData(this, a2, (uint64_t)&v8);
  siri::dialogengine::SpeakableString::SpeakableString(&v93, (const siri::dialogengine::SpeakableString *)&v8);
  if (v92 < 0)
    operator delete(__p);
  if (v90 < 0)
    operator delete(v89);
  if (v88 < 0)
    operator delete(v87);
  if (v86 < 0)
    operator delete(v85);
  if (v84 < 0)
    operator delete(v83);
  if (v82 < 0)
    operator delete(v81);
  if (v80 < 0)
    operator delete(v79);
  if (v78 < 0)
    operator delete(v77);
  if (v76 < 0)
    operator delete(v75);
  if (v74 < 0)
    operator delete(v73);
  if (v72 < 0)
    operator delete(v71);
  if (v70 < 0)
    operator delete(v69);
  if (v68 < 0)
    operator delete(v67);
  if (v66 < 0)
    operator delete(v65);
  if (v64 < 0)
    operator delete(v63);
  if (v62 < 0)
    operator delete(v61);
  if (v60 < 0)
    operator delete(v59);
  if (v58 < 0)
    operator delete(v57);
  if (v56 < 0)
    operator delete(v55);
  if (v54 < 0)
    operator delete(v53);
  if (v52 < 0)
    operator delete(v51);
  if (v50 < 0)
    operator delete(v49);
  if (v48 < 0)
    operator delete(v47);
  if (v46 < 0)
    operator delete(v45);
  if (v44 < 0)
    operator delete(v43);
  if (v42 < 0)
    operator delete(v41);
  if (v40 < 0)
    operator delete(v39);
  if (v38 < 0)
    operator delete(v37);
  if (v36 < 0)
    operator delete(v35);
  if (v34 < 0)
    operator delete(v33);
  if (v32 < 0)
    operator delete(v31);
  if (v30 < 0)
    operator delete(v29);
  if (v28 < 0)
    operator delete(v27);
  if (v26 < 0)
    operator delete(v25);
  if (v24 < 0)
    operator delete(v23);
  if (v22 < 0)
    operator delete(v21);
  if (v20 < 0)
    operator delete(v19);
  if (v18 < 0)
    operator delete(v17);
  if (v16 < 0)
    operator delete(v15);
  if (v14 < 0)
    operator delete(v13);
  if (v12 < 0)
    operator delete(v11);
  if (v10 < 0)
    operator delete(v9);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  v3 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&v8, "");
  v4 = v96;
  if ((v96 & 0x80u) != 0)
    v4 = v95;
  if (v4)
  {
    v5 = 1;
  }
  else
  {
    size = HIBYTE(v93.__r_.__value_.__r.__words[2]);
    if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v93.__r_.__value_.__l.__size_;
    v5 = size != 0;
  }
  siri::dialogengine::VariableBoolean::VariableBoolean(v3, &v8, v5);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  if (v106 < 0)
    operator delete(v105);
  if (v104 < 0)
    operator delete(v103);
  if (v102 < 0)
    operator delete(v101);
  if (v100 < 0)
    operator delete(v99);
  if (v98 < 0)
    operator delete(v97);
  if ((char)v96 < 0)
    operator delete(v94);
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v93.__r_.__value_.__l.__data_);
  return v3;
}

void sub_1BF8B8BE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x1C3B8D890](v15, 0x10B3C408E4F17DDLL);
  siri::dialogengine::SpeakableString::~SpeakableString((void **)(v16 - 200));
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::Grounding::ShouldGround(uint64_t a1, char *a2, uint64_t a3, unsigned __int8 *a4)
{
  int GroundingMode;

  GroundingMode = siri::dialogengine::GetGroundingMode(a4);
  return siri::dialogengine::Grounding::ShouldGround(a1, a2, a3, GroundingMode);
}

uint64_t siri::dialogengine::GetGroundingMode(unsigned __int8 *a1)
{
  __int128 *v1;
  __int128 *v2;
  __int128 v3;
  uint64_t v4;
  void *v5;
  unint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v26;
  unint64_t v27;
  int v28;
  std::string v30;
  __int128 *v31;
  __int128 *v32;
  std::string __p;
  _BYTE v34[19];
  char v35;

  siri::dialogengine::StringSplit(a1, ",", &v31);
  v1 = v31;
  v2 = v32;
  if (v31 != v32)
  {
    while (1)
    {
      if (*((char *)v1 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)v1, *((_QWORD *)v1 + 1));
      }
      else
      {
        v3 = *v1;
        v30.__r_.__value_.__r.__words[2] = *((_QWORD *)v1 + 2);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v3;
      }
      siri::dialogengine::StringTrim(" \t\n\r", &v30, &__p);
      siri::dialogengine::StringToLower((uint64_t)&__p, (uint64_t)v34);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v35 < 0)
        break;
      v4 = 0;
      switch(v35)
      {
        case 4:
          if (*(_DWORD *)v34 != 1701015151)
            goto LABEL_76;
          v4 = 2;
          break;
        case 5:
          if (*(_DWORD *)v34 != 1667856244 || v34[4] != 101)
            goto LABEL_76;
          v4 = 3;
          break;
        case 6:
          if (*(_DWORD *)v34 != 1953724787 || *(unsigned __int16 *)&v34[4] != 28005)
            goto LABEL_76;
          v4 = 1;
          break;
        case 10:
          if (*(_QWORD *)v34 != 0x6D69746565726874 || *(unsigned __int16 *)&v34[8] != 29541)
            goto LABEL_76;
          v4 = 4;
          break;
        case 12:
          if (*(_QWORD *)v34 != 0x7369687465636E6FLL || *(unsigned int *)&v34[8] != 1801807223)
            goto LABEL_76;
          v4 = 5;
          break;
        case 13:
          if (*(_QWORD *)v34 == 0x6968746563697774 && *(_QWORD *)&v34[5] == 0x6B65657773696874)
          {
            v4 = 6;
          }
          else
          {
            if (*(_QWORD *)v34 != 0x7369687465636E6FLL || *(_QWORD *)&v34[5] != 0x68746E6F6D736968)
              goto LABEL_76;
            v4 = 8;
          }
          break;
        case 14:
          if (*(_QWORD *)v34 != 0x6968746563697774 || *(_QWORD *)&v34[6] != 0x68746E6F6D736968)
            goto LABEL_76;
          v4 = 9;
          break;
        case 18:
          if (*(_QWORD *)v34 == 0x6D69746565726874
            && *(_QWORD *)&v34[8] == 0x6577736968747365
            && *(unsigned __int16 *)&v34[16] == 27493)
          {
            v4 = 7;
          }
          else
          {
LABEL_76:
            v4 = 0;
          }
          break;
        case 19:
          v17 = bswap64(*(unint64_t *)v34);
          v18 = 0x746872656574696DLL;
          if (v17 == 0x746872656574696DLL
            && (v18 = 0x6573746869736D6FLL, v17 = bswap64(*(unint64_t *)&v34[8]), v17 == 0x6573746869736D6FLL)
            && (v18 = 0x6869736D6F6E7468, v17 = bswap64(*(unint64_t *)&v34[11]), v17 == 0x6869736D6F6E7468))
          {
            v19 = 0;
          }
          else if (v17 < v18)
          {
            v19 = -1;
          }
          else
          {
            v19 = 1;
          }
          if (v19)
            v4 = 0;
          else
            v4 = 10;
          break;
        default:
          break;
      }
LABEL_77:
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
      if ((_DWORD)v4)
        goto LABEL_141;
      v1 = (__int128 *)((char *)v1 + 24);
      if (v1 == v2)
        goto LABEL_140;
    }
    if (*(_QWORD *)&v34[8] == 4)
    {
      v5 = *(void **)v34;
      if (**(_DWORD **)v34 == 1701015151)
      {
        v4 = 2;
        goto LABEL_21;
      }
    }
    else
    {
      if (*(_QWORD *)&v34[8] != 6)
      {
        v4 = 0;
        v5 = *(void **)v34;
        switch(*(_QWORD *)&v34[8])
        {
          case 5:
            if (**(_DWORD **)v34 != 1667856244 || *(_BYTE *)(*(_QWORD *)v34 + 4) != 101)
              goto LABEL_20;
            v4 = 3;
            break;
          case 0xALL:
            if (**(_QWORD **)v34 != 0x6D69746565726874 || *(_WORD *)(*(_QWORD *)v34 + 8) != 29541)
              goto LABEL_20;
            v4 = 4;
            break;
          case 0xCLL:
            if (**(_QWORD **)v34 != 0x7369687465636E6FLL || *(_DWORD *)(*(_QWORD *)v34 + 8) != 1801807223)
              goto LABEL_20;
            v4 = 5;
            break;
          case 0xDLL:
            if (**(_QWORD **)v34 == 0x6968746563697774 && *(_QWORD *)(*(_QWORD *)v34 + 5) == 0x6B65657773696874)
            {
              v4 = 6;
            }
            else
            {
              if (**(_QWORD **)v34 != 0x7369687465636E6FLL || *(_QWORD *)(*(_QWORD *)v34 + 5) != 0x68746E6F6D736968)
                goto LABEL_20;
              v4 = 8;
            }
            break;
          case 0xELL:
            if (**(_QWORD **)v34 ^ 0x6968746563697774 | *(_QWORD *)(*(_QWORD *)v34 + 6) ^ 0x68746E6F6D736968)
              v4 = 0;
            else
              v4 = 9;
            break;
          case 0x12:
            if (**(_QWORD **)v34 != 0x6D69746565726874
              || *(_QWORD *)(*(_QWORD *)v34 + 8) != 0x6577736968747365
              || *(_WORD *)(*(_QWORD *)v34 + 16) != 27493)
            {
              goto LABEL_20;
            }
            v4 = 7;
            break;
          case 0x13:
            v26 = bswap64(**(_QWORD **)v34);
            v27 = 0x746872656574696DLL;
            if (v26 == 0x746872656574696DLL
              && (v27 = 0x6573746869736D6FLL,
                  v26 = bswap64(*(_QWORD *)(*(_QWORD *)v34 + 8)),
                  v26 == 0x6573746869736D6FLL)
              && (v27 = 0x6869736D6F6E7468,
                  v26 = bswap64(*(_QWORD *)(*(_QWORD *)v34 + 11)),
                  v26 == 0x6869736D6F6E7468))
            {
              v28 = 0;
            }
            else if (v26 < v27)
            {
              v28 = -1;
            }
            else
            {
              v28 = 1;
            }
            if (v28)
              v4 = 0;
            else
              v4 = 10;
            break;
          default:
            goto LABEL_21;
        }
        goto LABEL_21;
      }
      v5 = *(void **)v34;
      if (**(_DWORD **)v34 == 1953724787 && *(_WORD *)(*(_QWORD *)v34 + 4) == 28005)
      {
        v4 = 1;
LABEL_21:
        operator delete(v5);
        goto LABEL_77;
      }
    }
LABEL_20:
    v4 = 0;
    goto LABEL_21;
  }
LABEL_140:
  v4 = 0;
LABEL_141:
  *(_QWORD *)v34 = &v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v34);
  return v4;
}

void sub_1BF8B9250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  a9 = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  _Unwind_Resume(a1);
}

uint64_t siri::dialogengine::Grounding::ShouldGround(uint64_t a1, char *a2, uint64_t a3, int a4)
{
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  char v14;
  uint64_t *v15;
  const char *v16;
  _BOOL8 v17;
  std::string::size_type size;
  std::string::size_type v20;
  int v21;
  std::string *v22;
  uint64_t v23;
  std::string *p_str;
  int v25;
  int v26;
  int v27;
  BOOL v28;
  BOOL v30;
  BOOL v31;
  double CurrentTime;
  double *v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  double *v37;
  unint64_t v38;
  double v39;
  uint64_t v40;
  double *v41;
  unint64_t v42;
  double v43;
  uint64_t v44;
  double *v45;
  double v46;
  uint64_t v47;
  double *v48;
  double v49;
  uint64_t v50;
  double *v51;
  double v52;
  uint64_t v53;
  std::string v54;
  std::string v55;
  unint64_t v56;
  void *v57;
  void *v58;
  std::string v59;
  _BYTE v60[16];
  char *v61[3];
  char *v62[6];
  std::string __str;
  std::string __p[11];
  int v65;
  char v66;

  if (!a1)
    return 1;
  v9 = *(_QWORD *)(a1 + 504);
  v8 = *(std::__shared_weak_count **)(a1 + 512);
  if (!v8)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = (unint64_t *)&v8->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (v13)
  {
LABEL_8:
    if (v9)
      goto LABEL_9;
    goto LABEL_16;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  if (!v9)
  {
LABEL_16:
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Ground::ShouldGround called without a loaded CAT file.", a2);
    return 1;
  }
LABEL_9:
  siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)__p, (const siri::dialogengine::RequestInfo *)(a1 + 8));
  v14 = v65;
  siri::dialogengine::RequestInfo::~RequestInfo((void **)&__p[0].__r_.__value_.__l.__data_);
  if ((v14 & 2) != 0)
    return 0;
  siri::dialogengine::StringToLower(a3, (uint64_t)__p);
  siri::dialogengine::StringTrim(" \t\n\r", __p, &__str);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  v15 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 640), (const void **)a2, (__int128 **)__p);
  std::string::operator=((std::string *)(v15 + 7), &__str);
  siri::dialogengine::Context::GetUseCaseState((siri::dialogengine::Context *)a1, v16, (uint64_t)v60);
  siri::dialogengine::DialogStateUseCase::GetGroundingUsage((uint64_t)v60, (const void **)a2, (uint64_t)&v56);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v54, v59.__r_.__value_.__l.__data_, v59.__r_.__value_.__l.__size_);
  else
    v54 = v59;
  siri::dialogengine::StringToLower((uint64_t)&v54, (uint64_t)&v55);
  siri::dialogengine::StringTrim(" \t\n\r", &v55, __p);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  else
    size = __str.__r_.__value_.__l.__size_;
  v20 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
  v21 = SHIBYTE(__p[0].__r_.__value_.__r.__words[2]);
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v20 = __p[0].__r_.__value_.__l.__size_;
  if (size != v20)
  {
    v28 = 1;
    if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_38;
    goto LABEL_44;
  }
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = __p;
  else
    v22 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
  if ((*((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    v28 = memcmp(__str.__r_.__value_.__l.__data_, v22, __str.__r_.__value_.__l.__size_) != 0;
    if ((v21 & 0x80000000) == 0)
      goto LABEL_38;
    goto LABEL_44;
  }
  if (!*((_BYTE *)&__str.__r_.__value_.__s + 23))
  {
    v28 = 0;
    if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_38;
LABEL_44:
    operator delete(__p[0].__r_.__value_.__l.__data_);
    goto LABEL_38;
  }
  v23 = HIBYTE(__str.__r_.__value_.__r.__words[2]) - 1;
  p_str = &__str;
  do
  {
    v26 = p_str->__r_.__value_.__s.__data_[0];
    p_str = (std::string *)((char *)p_str + 1);
    v25 = v26;
    v27 = v22->__r_.__value_.__s.__data_[0];
    v22 = (std::string *)((char *)v22 + 1);
    v28 = v25 != v27;
  }
  while (v25 == v27 && v23-- != 0);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_44;
LABEL_38:
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v54.__r_.__value_.__l.__data_);
    if (!v28)
      goto LABEL_47;
  }
  else if (!v28)
  {
LABEL_47:
    if (a4 == 1)
    {
      siri::dialogengine::RequestInfo::RequestInfo((siri::dialogengine::RequestInfo *)__p, (const siri::dialogengine::RequestInfo *)(a1 + 8));
      v17 = v66 != 0;
      siri::dialogengine::RequestInfo::~RequestInfo((void **)&__p[0].__r_.__value_.__l.__data_);
    }
    else if ((a4 & 0xFFFFFFFD) != 0)
    {
      if (a4 == 4)
      {
        v30 = v56 >= 3;
      }
      else
      {
        if (a4 != 3)
        {
          CurrentTime = siri::dialogengine::Context::GetCurrentTime((siri::dialogengine::Context *)a1);
          switch(a4)
          {
            case 5:
              v33 = (double *)v57;
              if (v57 == v58)
                goto LABEL_46;
              v34 = 0;
              do
              {
                v35 = *v33++;
                LODWORD(v36) = v35 >= CurrentTime + -604800.0;
                if (v35 <= CurrentTime)
                  v36 = v36;
                else
                  v36 = 0;
                v34 += v36;
              }
              while (v33 != v58);
              goto LABEL_100;
            case 6:
              v37 = (double *)v57;
              if (v57 == v58)
                goto LABEL_46;
              v38 = 0;
              do
              {
                v39 = *v37++;
                LODWORD(v40) = v39 >= CurrentTime + -604800.0;
                if (v39 <= CurrentTime)
                  v40 = v40;
                else
                  v40 = 0;
                v38 += v40;
              }
              while (v37 != v58);
              goto LABEL_107;
            case 7:
              v41 = (double *)v57;
              if (v57 == v58)
                goto LABEL_46;
              v42 = 0;
              do
              {
                v43 = *v41++;
                LODWORD(v44) = v43 >= CurrentTime + -604800.0;
                if (v43 <= CurrentTime)
                  v44 = v44;
                else
                  v44 = 0;
                v42 += v44;
              }
              while (v41 != v58);
              goto LABEL_114;
            case 8:
              v45 = (double *)v57;
              if (v57 == v58)
                goto LABEL_46;
              v34 = 0;
              do
              {
                v46 = *v45++;
                LODWORD(v47) = v46 >= CurrentTime + -2592000.0;
                if (v46 <= CurrentTime)
                  v47 = v47;
                else
                  v47 = 0;
                v34 += v47;
              }
              while (v45 != v58);
LABEL_100:
              v31 = v34 == 0;
              goto LABEL_58;
            case 9:
              v48 = (double *)v57;
              if (v57 == v58)
                goto LABEL_46;
              v38 = 0;
              do
              {
                v49 = *v48++;
                LODWORD(v50) = v49 >= CurrentTime + -2592000.0;
                if (v49 <= CurrentTime)
                  v50 = v50;
                else
                  v50 = 0;
                v38 += v50;
              }
              while (v48 != v58);
LABEL_107:
              v30 = v38 >= 2;
              goto LABEL_62;
            case 10:
              v51 = (double *)v57;
              if (v57 == v58)
                goto LABEL_46;
              v42 = 0;
              do
              {
                v52 = *v51++;
                LODWORD(v53) = v52 >= CurrentTime + -2592000.0;
                if (v52 <= CurrentTime)
                  v53 = v53;
                else
                  v53 = 0;
                v42 += v53;
              }
              while (v51 != v58);
LABEL_114:
              v30 = v42 >= 3;
              goto LABEL_62;
            default:
              v17 = 0;
              goto LABEL_65;
          }
        }
        v30 = v56 >= 2;
      }
LABEL_62:
      v17 = !v30;
    }
    else
    {
      v31 = v56 == 0;
LABEL_58:
      v17 = v31;
    }
    goto LABEL_65;
  }
LABEL_46:
  v17 = 1;
LABEL_65:
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  if (v57)
  {
    v58 = v57;
    operator delete(v57);
  }
  std::__tree<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>>>::destroy((_QWORD *)v62[4]);
  std::__tree<std::string>::destroy((uint64_t)v62, v62[1]);
  std::__tree<std::string>::destroy((uint64_t)v61, v61[1]);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return v17;
}

void sub_1BF8B9794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  siri::dialogengine::GroundingInfo::~GroundingInfo(&a22);
  siri::dialogengine::DialogStateUseCase::~DialogStateUseCase((siri::dialogengine::DialogStateUseCase *)&a29);
  if (a45 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,siri::dialogengine::GroundingInfo>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void siri::dialogengine::GroundingInfo::~GroundingInfo(void **this)
{
  void *v2;

  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  v2 = this[1];
  if (v2)
  {
    this[2] = v2;
    operator delete(v2);
  }
}

void siri::dialogengine::DialogStateUseCase::~DialogStateUseCase(siri::dialogengine::DialogStateUseCase *this)
{
  std::__tree<std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::dialogengine::GroundingInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::dialogengine::GroundingInfo>>>::destroy(*((_QWORD **)this + 9));
  std::__tree<std::string>::destroy((uint64_t)this + 40, *((char **)this + 6));
  std::__tree<std::string>::destroy((uint64_t)this + 16, *((char **)this + 3));
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,siri::dialogengine::GroundingInfo>,0>(uint64_t a1)
{
  void *v2;

  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

BOOL siri::dialogengine::Grounding::HasGroundingOption(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  _BOOL8 v6;
  char v7;
  std::string __p;
  std::string v10;
  uint64_t v11;
  uint64_t v12;

  siri::dialogengine::StringSplit(a1, ",", &v11);
  v3 = v12;
  if (v11 == v12)
  {
    v6 = 0;
  }
  else
  {
    v4 = v11 + 24;
    do
    {
      if (*(char *)(v4 - 1) < 0)
      {
        std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)(v4 - 24), *(_QWORD *)(v4 - 16));
      }
      else
      {
        v5 = *(_OWORD *)(v4 - 24);
        v10.__r_.__value_.__r.__words[2] = *(_QWORD *)(v4 - 8);
        *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v5;
      }
      siri::dialogengine::StringTrim(" \t\n\r", &v10, &__p);
      v6 = siri::dialogengine::StringsEqual((uint64_t)&__p, a2);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v10.__r_.__value_.__l.__data_);
      v7 = v4 == v3 || v6;
      v4 += 24;
    }
    while ((v7 & 1) == 0);
  }
  v10.__r_.__value_.__r.__words[0] = (std::string::size_type)&v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
  return v6;
}

void sub_1BF8B9A28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  a16 = &a22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::Grounding::IsValidMode(unsigned __int8 *a1)
{
  return siri::dialogengine::GetGroundingMode(a1) != 0;
}

void siri::dialogengine::ExecuteResultSet::~ExecuteResultSet(siri::dialogengine::ExecuteResultSet *this)
{
  siri::dialogengine::ExecutePatternBase::~ExecutePatternBase(this);
  JUMPOUT(0x1C3B8D890);
}

void siri::dialogengine::ExecuteResultSet::Execute(siri::dialogengine **this@<X0>, _QWORD *a2@<X8>)
{
  _BOOL4 BooleanParameter;
  double NumberParameter;
  _BOOL4 v6;
  _BOOL4 v7;
  _BOOL4 v8;
  uint64_t v9;
  siri::dialogengine::VariableObject *v10;
  int v11;
  int v12;
  _DWORD *p_p;
  uint64_t v14;
  int v15;
  _DWORD *v17;
  uint64_t v18;
  int v19;
  void *v21[2];
  char v22;
  void *v23[2];
  char v24;
  std::string v25;
  void *__p;
  uint64_t v27;
  unsigned __int8 v28;

  std::string::basic_string[abi:ne180100]<0>(&__p, "conclusionInSingleWindowResponse");
  BooleanParameter = siri::dialogengine::ExecutePatternBase::GetBooleanParameter((uint64_t)this, (const void **)&__p, 0);
  if ((char)v28 < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "windowSize");
  NumberParameter = siri::dialogengine::ExecutePatternBase::GetNumberParameter((uint64_t)this, (const void **)&__p, 0.0);
  if ((char)v28 < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "isFirstWindow");
  v6 = siri::dialogengine::ExecutePatternBase::GetBooleanParameter((uint64_t)this, (const void **)&__p, 0);
  if ((char)v28 < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "isLastWindow");
  v7 = siri::dialogengine::ExecutePatternBase::GetBooleanParameter((uint64_t)this, (const void **)&__p, 0);
  if ((char)v28 < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "isConclusion");
  v8 = siri::dialogengine::ExecutePatternBase::GetBooleanParameter((uint64_t)this, (const void **)&__p, 0);
  if ((char)v28 < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(v23, "promptType");
  std::string::basic_string[abi:ne180100]<0>(v21, "");
  siri::dialogengine::ExecutePatternBase::GetStringParameter((uint64_t)this, (const void **)v23, (char *)v21, &v25);
  siri::dialogengine::StringToUpper((uint64_t)&v25, (uint64_t)&__p);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  if (v22 < 0)
    operator delete(v21[0]);
  if (v24 < 0)
    operator delete(v23[0]);
  if (siri::dialogengine::ExecutePatternBase::ShouldExecuteSashGroup(this, v9, v10)
    && (std::string::basic_string[abi:ne180100]<0>(&v25, "Sash"),
        siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v25),
        SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0))
  {
    operator delete(v25.__r_.__value_.__l.__data_);
    if (v8)
    {
LABEL_20:
      std::string::basic_string[abi:ne180100]<0>(&v25, "Conclusion");
      siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v25);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v25.__r_.__value_.__l.__data_);
      goto LABEL_50;
    }
  }
  else if (v8)
  {
    goto LABEL_20;
  }
  if (NumberParameter < 1.0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v25, "Intro");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v25);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v25, "Item");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v25);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v25, "Attribution");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v25);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v25, "Reference");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v25);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v25.__r_.__value_.__l.__data_);
      if (!BooleanParameter)
        goto LABEL_50;
    }
    else if (!BooleanParameter)
    {
LABEL_50:
      std::string::basic_string[abi:ne180100]<0>(&v25, "Prompt");
      siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v25);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v25.__r_.__value_.__l.__data_);
      goto LABEL_76;
    }
    std::string::basic_string[abi:ne180100]<0>(&v25, "Conclusion");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v25);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    goto LABEL_50;
  }
  if (v6)
  {
    std::string::basic_string[abi:ne180100]<0>(&v25, "Intro");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v25);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
  }
  v11 = v6 && v7;
  if ((v11 & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v25, "WindowIntro");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v25);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v25, "Item");
  siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v25);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v25, "Attribution");
  siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v25);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v25, "Reference");
  siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v25);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v25.__r_.__value_.__l.__data_);
    if (!v7)
      goto LABEL_62;
  }
  else if (!v7)
  {
    goto LABEL_62;
  }
  v12 = v28;
  if ((char)v28 < 0)
  {
    if (v27 == 12)
    {
      p_p = __p;
LABEL_58:
      v14 = *(_QWORD *)p_p;
      v15 = p_p[2];
      if (v14 == 0x41554E49544E4F43 && v15 == 1313818964)
        goto LABEL_67;
    }
  }
  else if (v28 == 12)
  {
    p_p = &__p;
    goto LABEL_58;
  }
LABEL_62:
  std::string::basic_string[abi:ne180100]<0>(&v25, "WindowPrompt");
  siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v25);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v25.__r_.__value_.__l.__data_);
    if (!v7)
      goto LABEL_76;
  }
  else if (!v7)
  {
    goto LABEL_76;
  }
  v12 = v28;
LABEL_67:
  if ((v12 & 0x80) != 0)
  {
    if (v27 != 12)
      goto LABEL_76;
    v17 = __p;
  }
  else
  {
    if (v12 != 12)
      goto LABEL_76;
    v17 = &__p;
  }
  v18 = *(_QWORD *)v17;
  v19 = v17[2];
  if (v18 == 0x41554E49544E4F43 && v19 == 1313818964)
  {
    if ((v11 ^ 1 | BooleanParameter) == 1)
    {
      std::string::basic_string[abi:ne180100]<0>(&v25, "Conclusion");
      siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)&v25);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v25.__r_.__value_.__l.__data_);
    }
    goto LABEL_50;
  }
LABEL_76:
  siri::dialogengine::ExecutePatternBase::GetGroups((uint64_t *)this, a2);
  if ((char)v28 < 0)
    operator delete(__p);
}

void sub_1BF8BA06C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a26 < 0)
    operator delete(__p);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ExecutePatternBase::~ExecutePatternBase(siri::dialogengine::ExecutePatternBase *this)
{
  char *v2;
  void **v3;

  *(_QWORD *)this = off_1E7935F10;
  v2 = (char *)this + 8;
  v3 = (void **)((char *)this + 80);
  std::vector<siri::dialogengine::UpdatableDir>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 56);
  std::vector<siri::dialogengine::ExecutePatternBase::Stage>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)this + 40);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)v2);
}

void std::vector<siri::dialogengine::ExecutePatternBase::Stage>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        std::allocator<siri::dialogengine::ExecutePatternBase::Stage>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::allocator<siri::dialogengine::ExecutePatternBase::Stage>::destroy[abi:ne180100](uint64_t a1)
{
  std::__tree<std::string>::destroy(*(char **)(a1 + 40));
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](a1 + 16);
  return std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](a1);
}

void std::__tree<std::string>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::string>::destroy(*(_QWORD *)a1);
    std::__tree<std::string>::destroy(*((_QWORD *)a1 + 1));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

void InitDefaultsscc_info_ColorElement_ColorElement_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ColorElement.pb.cc", a4);
  SnippetUI::ColorElement::ColorElement((SnippetUI::ColorElement *)&SnippetUI::_ColorElement_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_ColorElement_default_instance_, v4);
  qword_1ED1D4FB8 = (uint64_t)&SnippetUI::_Color_default_instance_;
}

SnippetUI::ColorElement *SnippetUI::ColorElement::ColorElement(SnippetUI::ColorElement *this)
{
  *(_QWORD *)this = &off_1E792BD80;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 12) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if (atomic_load(scc_info_ColorElement_ColorElement_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_ColorElement_ColorElement_2eproto);
  *((_QWORD *)this + 5) = 0;
  return this;
}

void sub_1BF8BA3A4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  google::protobuf::RepeatedField<int>::~RepeatedField(v1 + 16);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

void SnippetUI::ColorElement::~ColorElement(SnippetUI::ColorElement *this)
{
  SnippetUI::ColorElement::~ColorElement(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E792BD80;
  if (this != (SnippetUI::ColorElement *)&SnippetUI::_ColorElement_default_instance_)
  {
    v2 = *((_QWORD *)this + 5);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  google::protobuf::RepeatedField<int>::~RepeatedField((char *)this + 16);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::ColorElement *SnippetUI::ColorElement::New(SnippetUI::ColorElement *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ColorElement>(0);
}

SnippetUI::ColorElement *SnippetUI::ColorElement::New(SnippetUI::ColorElement *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ColorElement>(a2);
}

void SnippetUI::ColorElement::Clear(SnippetUI::ColorElement *this)
{
  uint64_t v2;
  google::protobuf::internal::InternalMetadataWithArena *v3;
  char v4;

  *((_DWORD *)this + 4) = 0;
  v2 = *((_QWORD *)this + 5);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v4 = *((_BYTE *)this + 8);
  v3 = (SnippetUI::ColorElement *)((char *)this + 8);
  *((_QWORD *)v3 + 4) = 0;
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v3);
}

uint64_t SnippetUI::ColorElement::IsInitialized(SnippetUI::ColorElement *this)
{
  return 1;
}

char *SnippetUI::ColorElement::ByteSizeLong(SnippetUI::ColorElement *this)
{
  _DWORD *v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  const google::protobuf::UnknownFieldSet *v10;
  SnippetUI::Color *v11;
  char *v12;

  v2 = (_DWORD *)((char *)this + 16);
  v3 = *((_DWORD *)this + 4);
  if (!v3)
  {
    v5 = 0;
LABEL_11:
    v9 = 0;
    v8 = 0;
    goto LABEL_14;
  }
  v4 = 0;
  v5 = 0;
  do
  {
    v6 = *(_DWORD *)google::protobuf::RepeatedField<int>::Get(v2, v4);
    if (v6 < 0)
      v7 = 10;
    else
      v7 = (9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6;
    v5 += v7;
    ++v4;
  }
  while (v3 != v4);
  if (!v5)
    goto LABEL_11;
  if ((v5 & 0x80000000) != 0)
    v8 = 11;
  else
    v8 = ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  v9 = v5;
LABEL_14:
  *((_DWORD *)this + 8) = v9;
  v10 = (const google::protobuf::UnknownFieldSet *)(v8 + v5);
  if (this != (SnippetUI::ColorElement *)&SnippetUI::_ColorElement_default_instance_)
  {
    v11 = (SnippetUI::Color *)*((_QWORD *)this + 5);
    if (v11)
    {
      v12 = SnippetUI::Color::ByteSizeLong(v11);
      v10 = (const google::protobuf::UnknownFieldSet *)&v12[(_QWORD)v10
                                                          + 1
                                                          + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::ColorElement *)((char *)this + 8), v10, (_DWORD *)this + 12);
  *((_DWORD *)this + 12) = (_DWORD)v10;
  return (char *)v10;
}

uint64_t SnippetUI::ColorElement::GetCachedSize(SnippetUI::ColorElement *this)
{
  return *((unsigned int *)this + 12);
}

google::protobuf::internal *SnippetUI::ColorElement::_InternalParse(SnippetUI::ColorElement *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  google::protobuf::internal *v5;
  uint64_t *v6;
  google::protobuf::internal::ParseContext *v7;
  google::protobuf::internal::ParseContext *v8;
  google::protobuf::internal *TagFallback;
  char *v10;
  BOOL v12;
  char *v13;
  SnippetUI::Color *v14;
  int v15;
  google::protobuf::internal *v17;

  v17 = a2;
  v5 = (SnippetUI::ColorElement *)((char *)this + 16);
  v6 = (uint64_t *)((char *)this + 8);
  while (1)
  {
    while (1)
    {
      if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v17, *((_DWORD *)a3 + 23)) & 1) != 0)
        return v17;
      TagFallback = (google::protobuf::internal *)((char *)v17 + 1);
      v10 = (char *)*(unsigned __int8 *)v17;
      if ((*(char *)v17 & 0x80000000) == 0)
        goto LABEL_6;
      v10 = (char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
      if ((*(char *)TagFallback & 0x80000000) == 0)
      {
        TagFallback = (google::protobuf::internal *)((char *)v17 + 2);
LABEL_6:
        v17 = TagFallback;
        goto LABEL_7;
      }
      TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v17, v10);
      v17 = TagFallback;
      if (!TagFallback)
        return TagFallback;
LABEL_7:
      if (v10 >> 3 == 2)
        break;
      if (v10 >> 3 != 1 || v10 != 10)
      {
LABEL_12:
        if ((_DWORD)v10)
          v12 = (v10 & 7) == 4;
        else
          v12 = 1;
        if (v12)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v10 - 1;
          return TagFallback;
        }
        v13 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v10, v6, TagFallback, a3, v8);
        goto LABEL_22;
      }
      v14 = (SnippetUI::Color *)*((_QWORD *)this + 5);
      if (!v14)
      {
        v14 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Color>(0);
        *((_QWORD *)this + 5) = v14;
        TagFallback = v17;
      }
      v13 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::Color>(a3, v14, TagFallback);
LABEL_22:
      v17 = (google::protobuf::internal *)v13;
      if (!v13)
        return 0;
    }
    if (v10 == 18)
    {
      v13 = google::protobuf::internal::PackedInt32Parser(v5, TagFallback, a3, v7);
      goto LABEL_22;
    }
    if (v10 != 16)
      goto LABEL_12;
    v15 = google::protobuf::internal::ReadVarint(&v17, (const char **)v10);
    if (!v17)
      return 0;
    SnippetUI::ColorElement::_internal_add_idioms((uint64_t)this, v15);
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::ColorElement::InternalSerializeWithCachedSizesToArray(SnippetUI::ColorElement *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  SnippetUI::Color *v7;
  unsigned int v8;
  char *v9;
  unsigned int v10;
  _BYTE *v11;
  _BYTE *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  std::string *v17;
  _BYTE *v18;
  int *v19;
  int *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  _BYTE *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v30;
  char v31;
  std::string v32[2];

  v5 = (char *)a2;
  if (this != (SnippetUI::ColorElement *)&SnippetUI::_ColorElement_default_instance_)
  {
    v7 = (SnippetUI::Color *)*((_QWORD *)this + 5);
    if (v7)
    {
      if (*(_QWORD *)a3 <= (unint64_t)a2)
      {
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
        v7 = (SnippetUI::Color *)*((_QWORD *)this + 5);
      }
      *v5 = 10;
      v8 = *((_DWORD *)v7 + 6);
      if (v8 > 0x7F)
      {
        v5[1] = v8 | 0x80;
        v10 = v8 >> 7;
        if (v8 >> 14)
        {
          v11 = v5 + 2;
          do
          {
            v12 = v11;
            *v11++ = v10 | 0x80;
            v13 = v10 >> 7;
            v14 = v10 >> 14;
            v10 >>= 7;
          }
          while (v14);
          v9 = v12 + 2;
          *v11 = v13;
        }
        else
        {
          v5[2] = v10;
          v9 = v5 + 3;
        }
      }
      else
      {
        v5[1] = v8;
        v9 = v5 + 2;
      }
      v5 = (char *)SnippetUI::Color::InternalSerializeWithCachedSizesToArray(v7, v9, a3, a4);
    }
  }
  v15 = *((_DWORD *)this + 8);
  if ((int)v15 >= 1)
  {
    v16 = *(_QWORD *)a3;
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v16 = *(_QWORD *)a3;
    }
    if (v16 <= (unint64_t)v5)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v32, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/protobuf/src/google/protobuf/io/coded_stream.h", 856);
      v17 = google::protobuf::internal::LogMessage::operator<<(v32, "CHECK failed: ptr < end_: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v31, (const char **)&v17->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v32[0].__r_.__value_.__l.__data_);
    }
    *v5 = 18;
    v18 = v5 + 1;
    if (v15 >= 0x80)
    {
      do
      {
        *v18++ = v15 | 0x80;
        v30 = v15 >> 14;
        v15 >>= 7;
      }
      while (v30);
      v5 = v18 - 1;
    }
    v5 += 2;
    *v18 = v15;
    v19 = (int *)*((_QWORD *)this + 3);
    v20 = &v19[*((int *)this + 4)];
    do
    {
      if ((unint64_t)v5 >= *(_QWORD *)a3)
        v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v22 = *v19++;
      v21 = v22;
      if (v22 > 0x7F)
      {
        *v5 = v21 | 0x80;
        v23 = v21 >> 7;
        if (v21 >> 14)
        {
          v24 = v5 + 1;
          do
          {
            v25 = v24;
            *v24++ = v23 | 0x80;
            v26 = v23 >> 7;
            v27 = v23 >> 14;
            v23 >>= 7;
          }
          while (v27);
          v5 = v25 + 2;
          *v24 = v26;
        }
        else
        {
          v5[1] = v23;
          v5 += 2;
        }
      }
      else
      {
        *v5++ = v21;
      }
    }
    while (v19 < v20);
  }
  v28 = *((_QWORD *)this + 1);
  if ((v28 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v28 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  return (const google::protobuf::UnknownFieldSet *)v5;
}

void sub_1BF8BA950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void SnippetUI::ColorElement::CopyFrom(SnippetUI::ColorElement *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::ColorElement::Clear(this);
    SnippetUI::ColorElement::MergeFrom(this, a2);
  }
}

void SnippetUI::ColorElement::MergeFrom(SnippetUI::ColorElement *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::ColorElement *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ColorElement.pb.cc", 282);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::ColorElement::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BF8BAA48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::ColorElement::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 48) = a2;
  return this;
}

uint64_t SnippetUI::ColorElement::GetMetadata(SnippetUI::ColorElement *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_ColorElement_2eproto);
  return file_level_metadata_ColorElement_2eproto;
}

void *SnippetUI::ColorElement::default_instance(SnippetUI::ColorElement *this)
{
  if (atomic_load(scc_info_ColorElement_ColorElement_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_ColorElement_ColorElement_2eproto);
  return &SnippetUI::_ColorElement_default_instance_;
}

void SnippetUI::ColorElement::MergeFrom(SnippetUI::ColorElement *this, const SnippetUI::ColorElement *a2)
{
  std::string *v4;
  uint64_t v5;
  const SnippetUI::Color *v6;
  SnippetUI::Color *v7;
  const SnippetUI::Color *v8;
  char v9;
  std::string v10[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/ColorElement.pb.cc", 297);
    v4 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::ColorElement *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  google::protobuf::RepeatedField<int>::MergeFrom((int *)this + 4, (int *)a2 + 4);
  if (a2 != (const SnippetUI::ColorElement *)&SnippetUI::_ColorElement_default_instance_)
  {
    v6 = (const SnippetUI::Color *)*((_QWORD *)a2 + 5);
    if (v6)
    {
      v7 = (SnippetUI::Color *)*((_QWORD *)this + 5);
      if (!v7)
      {
        v7 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::Color>(0);
        *((_QWORD *)this + 5) = v7;
        v6 = (const SnippetUI::Color *)*((_QWORD *)a2 + 5);
      }
      if (v6)
        v8 = v6;
      else
        v8 = (const SnippetUI::Color *)&SnippetUI::_Color_default_instance_;
      SnippetUI::Color::MergeFrom(v7, v8);
    }
  }
}

void sub_1BF8BAB94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

char *google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::Color>(google::protobuf::internal::EpsCopyInputStream *this, SnippetUI::Color *a2, google::protobuf::internal *a3)
{
  int v6;
  const char *v7;
  char *v8;
  char *result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = *(char *)a3;
  v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result)
      return result;
    v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    v8 = (char *)a3 + 1;
  }
  v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  v12 = *((_DWORD *)this + 22);
  v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = (char *)SnippetUI::Color::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result)
    return result;
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20))
    return 0;
  v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(_QWORD *)this = *((_QWORD *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

uint64_t SnippetUI::ColorElement::_internal_add_idioms(uint64_t a1, int a2)
{
  int v3;
  int *v4;
  uint64_t result;
  uint64_t v6;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = (int *)(a1 + 16);
  if (v3 == *(_DWORD *)(a1 + 20))
    google::protobuf::RepeatedField<int>::Reserve((int *)(a1 + 16), v3 + 1);
  result = google::protobuf::RepeatedField<int>::elements((uint64_t)v4);
  v6 = *v4;
  *v4 = v6 + 1;
  *(_DWORD *)(result + 4 * v6) = a2;
  return result;
}

SnippetUI::ColorElement *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::ColorElement>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::ColorElement *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::ColorElement *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x38uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::ColorElement>);
    SnippetUI::ColorElement::ColorElement(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::ColorElement *)operator new();
    SnippetUI::ColorElement::ColorElement(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BF8BAD44(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C407499B434);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::ColorElement>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void SnippetUI::ColorElement::InitAsDefaultInstance(SnippetUI::ColorElement *this)
{
  qword_1ED1D4FB8 = (uint64_t)&SnippetUI::_Color_default_instance_;
}

uint64_t SnippetUI::ColorElement::_Internal::color(SnippetUI::ColorElement::_Internal *this, const SnippetUI::ColorElement *a2)
{
  return *((_QWORD *)this + 5);
}

uint64_t SnippetUI::ColorElement::clear_color(SnippetUI::ColorElement *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 5);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 5) = 0;
  return result;
}

SnippetUI::ColorElement *SnippetUI::ColorElement::ColorElement(SnippetUI::ColorElement *this, const SnippetUI::ColorElement *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  SnippetUI::Color *v6;

  *(_QWORD *)this = &off_1E792BD80;
  *((_QWORD *)this + 1) = 0;
  v4 = (SnippetUI::ColorElement *)((char *)this + 8);
  google::protobuf::RepeatedField<int>::RepeatedField((uint64_t)this + 16, (int *)a2 + 4);
  *((_DWORD *)this + 12) = 0;
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom(v4, (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = 0;
  if (a2 != (const SnippetUI::ColorElement *)&SnippetUI::_ColorElement_default_instance_ && *((_QWORD *)a2 + 5))
  {
    v6 = (SnippetUI::Color *)operator new();
    SnippetUI::Color::Color(v6, *((const SnippetUI::Color **)a2 + 5));
  }
  *((_QWORD *)this + 5) = v6;
  return this;
}

void sub_1BF8BAEDC(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x1C3B8D890](v3, 0x10A3C407A2727C4);
  google::protobuf::RepeatedField<int>::~RepeatedField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::ColorElement::CopyFrom(SnippetUI::ColorElement *this, const SnippetUI::ColorElement *a2)
{
  if (a2 != this)
  {
    SnippetUI::ColorElement::Clear(this);
    SnippetUI::ColorElement::MergeFrom(this, a2);
  }
}

void SnippetUI::ColorElement::InternalSwap(SnippetUI::ColorElement *this, SnippetUI::ColorElement *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t v7;
  google::protobuf::UnknownFieldSet *v8;

  v4 = (SnippetUI::ColorElement *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v8;
      goto LABEL_6;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_7;
  }
  v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
  google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
LABEL_7:
  google::protobuf::RepeatedField<int>::InternalSwap((uint64_t)this + 16, (uint64_t)a2 + 16);
  v7 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v7;
}

siri::dialogengine::ElapsedTimer *siri::dialogengine::ElapsedTimer::ElapsedTimer(siri::dialogengine::ElapsedTimer *this)
{
  *((_BYTE *)this + 40) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = 0;
  *((_BYTE *)this + 24) = 0;
  siri::dialogengine::ElapsedTimer::Reset(this);
  return this;
}

{
  *((_BYTE *)this + 40) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = 0;
  *((_BYTE *)this + 24) = 0;
  siri::dialogengine::ElapsedTimer::Reset(this);
  return this;
}

void siri::dialogengine::ElapsedTimer::Reset(siri::dialogengine::ElapsedTimer *this)
{
  double v2;
  double CurrentThreadMillisecondTime;
  timespec v4;

  *(_QWORD *)this = siri::dialogengine::GetThreadId(this);
  if (*((_BYTE *)this + 40))
    *((_BYTE *)this + 40) = 0;
  clock_gettime(_CLOCK_MONOTONIC_RAW, &v4);
  v2 = ((double)v4.tv_nsec / 1000000000.0 + (double)v4.tv_sec) * 1000.0;
  CurrentThreadMillisecondTime = siri::dialogengine::GetCurrentThreadMillisecondTime(*(siri::dialogengine **)this);
  *((double *)this + 1) = v2;
  *((double *)this + 2) = CurrentThreadMillisecondTime;
}

uint64_t siri::dialogengine::GetThreadId(siri::dialogengine *this)
{
  thread_inspect_t v1;
  const char *v2;
  mach_msg_type_number_t thread_info_outCnt;
  integer_t thread_info_out[6];

  v1 = MEMORY[0x1C3B8DB90](this);
  thread_info_outCnt = 6;
  if (thread_info(v1, 4u, thread_info_out, &thread_info_outCnt))
  {
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Failed to get thread id", v2);
    *(_QWORD *)thread_info_out = 0;
  }
  mach_port_deallocate(*MEMORY[0x1E0C83DA0], v1);
  return *(_QWORD *)thread_info_out;
}

double siri::dialogengine::GetCurrentThreadMillisecondTime(siri::dialogengine *this)
{
  double v1;
  thread_inspect_t v2;
  mach_msg_type_number_t thread_info_outCnt;
  integer_t thread_info_out[10];

  v1 = -1.0;
  if ((siri::dialogengine *)siri::dialogengine::GetThreadId(this) == this)
  {
    thread_info_outCnt = 10;
    v2 = MEMORY[0x1C3B8DB90]();
    if (!thread_info(v2, 3u, thread_info_out, &thread_info_outCnt))
      v1 = (double)thread_info_out[1] / 1000.0
         + (double)thread_info_out[0] * 1000.0
         + (double)thread_info_out[2] * 1000.0
         + (double)thread_info_out[3] / 1000.0;
    mach_port_deallocate(*MEMORY[0x1E0C83DA0], v2);
  }
  return v1;
}

BOOL siri::dialogengine::ElapsedTimer::IsRunning(siri::dialogengine::ElapsedTimer *this)
{
  return *((_BYTE *)this + 40) == 0;
}

void siri::dialogengine::ElapsedTimer::Stop(siri::dialogengine **this)
{
  double v2;
  double CurrentThreadMillisecondTime;
  int v4;
  timespec v5;

  if (!*((_BYTE *)this + 40))
  {
    clock_gettime(_CLOCK_MONOTONIC_RAW, &v5);
    v2 = ((double)v5.tv_nsec / 1000000000.0 + (double)v5.tv_sec) * 1000.0;
    CurrentThreadMillisecondTime = siri::dialogengine::GetCurrentThreadMillisecondTime(*this);
    v4 = *((unsigned __int8 *)this + 40);
    *((double *)this + 3) = v2;
    *((double *)this + 4) = CurrentThreadMillisecondTime;
    if (!v4)
      *((_BYTE *)this + 40) = 1;
  }
}

double siri::dialogengine::ElapsedTimer::GetSecs(siri::dialogengine::ElapsedTimer *this)
{
  return siri::dialogengine::ElapsedTimer::CalculateElapsedWallMilliseconds(this) / 1000.0;
}

double siri::dialogengine::ElapsedTimer::CalculateElapsedWallMilliseconds(siri::dialogengine::ElapsedTimer *this)
{
  double v2;
  timespec v4;

  if (*((_BYTE *)this + 40))
  {
    v2 = *((double *)this + 3);
  }
  else
  {
    clock_gettime(_CLOCK_MONOTONIC_RAW, &v4);
    v2 = ((double)v4.tv_nsec / 1000000000.0 + (double)v4.tv_sec) * 1000.0;
  }
  return v2 - *((double *)this + 1);
}

double siri::dialogengine::ElapsedTimer::GetThreadSecs(siri::dialogengine::ElapsedTimer *this)
{
  double v1;

  v1 = siri::dialogengine::ElapsedTimer::CalculateElapsedThreadMilliseconds(this);
  if (v1 == -1.0)
    return -1.0;
  else
    return v1 / 1000.0;
}

double siri::dialogengine::ElapsedTimer::CalculateElapsedThreadMilliseconds(siri::dialogengine::ElapsedTimer *this)
{
  double v1;
  double CurrentThreadMillisecondTime;

  v1 = -1.0;
  if (*((double *)this + 2) != -1.0)
  {
    if (*((_BYTE *)this + 40))
      CurrentThreadMillisecondTime = *((double *)this + 4);
    else
      CurrentThreadMillisecondTime = siri::dialogengine::GetCurrentThreadMillisecondTime(*(siri::dialogengine **)this);
    v1 = -1.0;
    if (CurrentThreadMillisecondTime != -1.0)
      return CurrentThreadMillisecondTime - *((double *)this + 2);
  }
  return v1;
}

void siri::dialogengine::ElapsedTimer::GetSecsAsString(siri::dialogengine::ElapsedTimer *this@<X0>, std::string *a2@<X8>)
{
  std::string *v3;
  std::string v4;

  siri::dialogengine::ElapsedTimer::CalculateElapsedWallMilliseconds(this);
  siri::dialogengine::StringFromDouble((siri::dialogengine *)3, (uint64_t)&v4);
  v3 = std::string::append(&v4, " s");
  *a2 = *v3;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
}

void sub_1BF8BB404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ElapsedTimer::GetMSecsAsString(siri::dialogengine::ElapsedTimer *this@<X0>, std::string *a2@<X8>)
{
  std::string *v3;
  std::string v4;

  siri::dialogengine::ElapsedTimer::CalculateElapsedWallMilliseconds(this);
  siri::dialogengine::StringFromDouble((siri::dialogengine *)2, (uint64_t)&v4);
  v3 = std::string::append(&v4, " ms");
  *a2 = *v3;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
}

void sub_1BF8BB48C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ElapsedTimer::GetThreadSecsAsString(siri::dialogengine::ElapsedTimer *this@<X0>, _QWORD *a2@<X8>)
{
  double v3;
  double v4;
  std::string *v5;
  __int128 v6;
  std::string v7;

  v3 = siri::dialogengine::ElapsedTimer::CalculateElapsedThreadMilliseconds(this);
  if (v3 == -1.0)
    v4 = -1.0;
  else
    v4 = v3 / 1000.0;
  if (v4 == -1.0)
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "unknown s due to thread switch");
  }
  else
  {
    siri::dialogengine::StringFromDouble((siri::dialogengine *)3, (uint64_t)&v7);
    v5 = std::string::append(&v7, " s");
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    a2[2] = *((_QWORD *)&v5->__r_.__value_.__l + 2);
    *(_OWORD *)a2 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v7.__r_.__value_.__l.__data_);
  }
}

void sub_1BF8BB550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ElapsedTimer::GetThreadMSecsAsString(siri::dialogengine::ElapsedTimer *this@<X0>, _QWORD *a2@<X8>)
{
  std::string *v3;
  __int128 v4;
  std::string v5;

  if (siri::dialogengine::ElapsedTimer::CalculateElapsedThreadMilliseconds(this) == -1.0)
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "unknown ms due to thread switch");
  }
  else
  {
    siri::dialogengine::StringFromDouble((siri::dialogengine *)2, (uint64_t)&v5);
    v3 = std::string::append(&v5, " ms");
    v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    a2[2] = *((_QWORD *)&v3->__r_.__value_.__l + 2);
    *(_OWORD *)a2 = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v5.__r_.__value_.__l.__data_);
  }
}

void sub_1BF8BB600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ElapsedTimer::GetCombinedSecsAsString(siri::dialogengine::ElapsedTimer *this@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  void **v6;
  std::string::size_type v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  void *__p[2];
  unsigned __int8 v12;
  std::string v13;
  std::string v14;
  std::string v15;

  siri::dialogengine::ElapsedTimer::GetSecsAsString(this, &v13);
  v4 = std::string::append(&v13, " (in thread ");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::ElapsedTimer::GetThreadSecsAsString(this, __p);
  if ((v12 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v12 & 0x80u) == 0)
    v7 = v12;
  else
    v7 = (std::string::size_type)__p[1];
  v8 = std::string::append(&v14, (const std::string::value_type *)v6, v7);
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = std::string::append(&v15, ")");
  *a2 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if ((char)v12 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
}

void sub_1BF8BB72C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (*(char *)(v26 - 41) < 0)
    operator delete(*(void **)(v26 - 64));
  if (a14 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ElapsedTimer::GetCombinedMSecsAsString(siri::dialogengine::ElapsedTimer *this@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  void **v6;
  std::string::size_type v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  void *__p[2];
  unsigned __int8 v12;
  std::string v13;
  std::string v14;
  std::string v15;

  siri::dialogengine::ElapsedTimer::GetMSecsAsString(this, &v13);
  v4 = std::string::append(&v13, " (in thread ");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::ElapsedTimer::GetThreadMSecsAsString(this, __p);
  if ((v12 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v12 & 0x80u) == 0)
    v7 = v12;
  else
    v7 = (std::string::size_type)__p[1];
  v8 = std::string::append(&v14, (const std::string::value_type *)v6, v7);
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = std::string::append(&v15, ")");
  *a2 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if ((char)v12 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
}

void sub_1BF8BB8A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (*(char *)(v26 - 41) < 0)
    operator delete(*(void **)(v26 - 64));
  if (a14 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_1BF8BBB04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1BF8BBDAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;
  void *v17;

  google::protobuf::internal::LogMessage::~LogMessage(&__p);

  _Unwind_Resume(a1);
}

void siri::dialogengine::ExecuteDetailedDisambiguationClarification::~ExecuteDetailedDisambiguationClarification(siri::dialogengine::ExecuteDetailedDisambiguationClarification *this)
{
  siri::dialogengine::ExecutePatternBase::~ExecutePatternBase(this);
  JUMPOUT(0x1C3B8D890);
}

uint64_t *siri::dialogengine::ExecuteDetailedDisambiguationClarification::Execute@<X0>(siri::dialogengine **this@<X0>, _QWORD *a2@<X8>)
{
  double NumberParameter;
  _BOOL4 BooleanParameter;
  _BOOL4 v6;
  uint64_t v7;
  siri::dialogengine::VariableObject *v8;
  _BOOL4 v9;
  void *__p[2];
  char v12;

  std::string::basic_string[abi:ne180100]<0>(__p, "windowSize");
  NumberParameter = siri::dialogengine::ExecutePatternBase::GetNumberParameter((uint64_t)this, (const void **)__p, 0.0);
  if (v12 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "isFirstWindow");
  BooleanParameter = siri::dialogengine::ExecutePatternBase::GetBooleanParameter((uint64_t)this, (const void **)__p, 0);
  if (v12 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "isLastWindow");
  v6 = siri::dialogengine::ExecutePatternBase::GetBooleanParameter((uint64_t)this, (const void **)__p, 0);
  if (v12 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "isConclusion");
  v9 = siri::dialogengine::ExecutePatternBase::GetBooleanParameter((uint64_t)this, (const void **)__p, 0);
  if (v12 < 0)
    operator delete(__p[0]);
  if (siri::dialogengine::ExecutePatternBase::ShouldExecuteSashGroup(this, v7, v8)
    && (std::string::basic_string[abi:ne180100]<0>(__p, "Sash"),
        siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p),
        v12 < 0))
  {
    operator delete(__p[0]);
    if (v9)
      goto LABEL_12;
  }
  else if (v9)
  {
LABEL_12:
    std::string::basic_string[abi:ne180100]<0>(__p, "Conclusion");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p);
    if (v12 < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(__p, "Prompt");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p);
    goto LABEL_39;
  }
  if (NumberParameter >= 1.0)
  {
    if (BooleanParameter)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "Intro");
      siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p);
      if (v12 < 0)
        operator delete(__p[0]);
    }
    if (!BooleanParameter || !v6)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "WindowIntro");
      siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p);
      if (v12 < 0)
        operator delete(__p[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Item");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p);
    if (v12 < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(__p, "Attribution");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p);
    if (v12 < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(__p, "Reference");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p);
    if (v12 < 0)
      operator delete(__p[0]);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Intro");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p);
    if (v12 < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(__p, "Item");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p);
    if (v12 < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(__p, "Attribution");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p);
    if (v12 < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(__p, "Reference");
    siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p);
    if (v12 < 0)
      operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "WindowPrompt");
  siri::dialogengine::ExecutePatternBase::AddGroup(this, (uint64_t)__p);
LABEL_39:
  if (v12 < 0)
    operator delete(__p[0]);
  return siri::dialogengine::ExecutePatternBase::GetGroups((uint64_t *)this, a2);
}

void sub_1BF8BC1E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ObjectEnumerant::~ObjectEnumerant(void **this)
{
  siri::dialogengine::ObjectEnumerant::~ObjectEnumerant(this);
  JUMPOUT(0x1C3B8D890);
}

{
  *this = &off_1E7939438;
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

double siri::dialogengine::ObjectEnumerant::ObjectEnumerant(siri::dialogengine::ObjectEnumerant *this)
{
  double result;

  *(_QWORD *)this = &off_1E7939438;
  *((_DWORD *)this + 2) = 1;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 10) = 0;
  result = 0.0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  return result;
}

{
  double result;

  *(_QWORD *)this = &off_1E7939438;
  *((_DWORD *)this + 2) = 1;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 10) = 0;
  result = 0.0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  return result;
}

uint64_t siri::dialogengine::ObjectEnumerant::GetType(siri::dialogengine::ObjectEnumerant *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t siri::dialogengine::ObjectEnumerant::SetType(uint64_t result, int a2)
{
  *(_DWORD *)(result + 8) = a2;
  return result;
}

void siri::dialogengine::ObjectEnumerant::GetString(siri::dialogengine::ObjectEnumerant *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 39) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 2), *((_QWORD *)this + 3));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 1);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 4);
  }
}

std::string *siri::dialogengine::ObjectEnumerant::SetString(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 16), a2);
}

uint64_t siri::dialogengine::ObjectEnumerant::GetInt(siri::dialogengine::ObjectEnumerant *this)
{
  if (*((_DWORD *)this + 2) == 2)
    return *((unsigned int *)this + 10);
  else
    return 0;
}

uint64_t siri::dialogengine::ObjectEnumerant::SetInt(uint64_t this, int a2)
{
  *(_DWORD *)(this + 40) = a2;
  return this;
}

void siri::dialogengine::ObjectEnumerant::GetDescription(siri::dialogengine::ObjectEnumerant *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 71) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 6), *((_QWORD *)this + 7));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 3);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 8);
  }
}

std::string *siri::dialogengine::ObjectEnumerant::SetDescription(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 2, a2);
}

void siri::dialogengine::ObjectEnumerant::GetDeprecated(siri::dialogengine::ObjectEnumerant *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 95) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 9), *((_QWORD *)this + 10));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 72);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 11);
  }
}

std::string *siri::dialogengine::ObjectEnumerant::SetDeprecated(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 3, a2);
}

void siri::dialogengine::CatIdToPath(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;
  void *v8[2];
  char v9;

  std::string::basic_string[abi:ne180100]<0>(v8, "dialog");
  std::string::basic_string[abi:ne180100]<0>(v6, ".catfamily");
  std::string::basic_string[abi:ne180100]<0>(__p, ".cat");
  siri::dialogengine::CatIdToPath(a2, a1, (unint64_t)v8, (uint64_t)v6, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  if (v9 < 0)
    operator delete(v8[0]);
}

void sub_1BF8BC49C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::CatIdToPath(_QWORD *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  std::vector<std::string>::pointer end;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  std::vector<std::string>::pointer begin;
  std::vector<std::string>::pointer v15;
  int v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  _BOOL4 v20;
  unint64_t v21;
  unint64_t v22;
  std::string *v23;
  uint64_t v24;
  __int128 v25;
  std::string *v26;
  uint64_t v27;
  std::__split_buffer<std::string>::pointer v28;
  int64_t v29;
  std::string *v30;
  uint64_t v31;
  std::string *v32;
  __int128 v33;
  int64x2_t v34;
  std::string *value;
  __int128 v36;
  std::vector<std::string> v37;
  std::__split_buffer<std::string> __v;
  std::__split_buffer<std::string> v39;

  v6 = *(unsigned __int8 *)(a2 + 23);
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a2 + 8);
  if (!v6)
  {
    std::string::basic_string[abi:ne180100]<0>(a1, "");
    return;
  }
  siri::dialogengine::StringSplit((unsigned __int8 *)a2, "#", &v37);
  end = v37.__end_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v37.__end_ - (char *)v37.__begin_) >> 3) >= 3)
  {
    std::vector<std::string>::resize(&v37, 2uLL);
    end = v37.__end_;
  }
  v11 = *(char *)(a5 + 23);
  if (v11 >= 0)
    v12 = (const std::string::value_type *)a5;
  else
    v12 = *(const std::string::value_type **)a5;
  if (v11 >= 0)
    v13 = *(unsigned __int8 *)(a5 + 23);
  else
    v13 = *(_QWORD *)(a5 + 8);
  std::string::append(end - 1, v12, v13);
  begin = v37.__begin_;
  v15 = v37.__end_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v37.__end_ - (char *)v37.__begin_) >> 3) >= 2)
  {
    v16 = *(char *)(a4 + 23);
    if (v16 >= 0)
      v17 = (const std::string::value_type *)a4;
    else
      v17 = *(const std::string::value_type **)a4;
    if (v16 >= 0)
      v18 = *(unsigned __int8 *)(a4 + 23);
    else
      v18 = *(_QWORD *)(a4 + 8);
    std::string::append(v37.__begin_, v17, v18);
    begin = v37.__begin_;
    v15 = v37.__end_;
  }
  if (v15 >= v37.__end_cap_.__value_)
  {
    v21 = 0xAAAAAAAAAAAAAAABLL * (((char *)v15 - (char *)begin) >> 3) + 1;
    if (v21 > 0xAAAAAAAAAAAAAAALL)
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    if (0x5555555555555556 * (((char *)v37.__end_cap_.__value_ - (char *)begin) >> 3) > v21)
      v21 = 0x5555555555555556 * (((char *)v37.__end_cap_.__value_ - (char *)begin) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v37.__end_cap_.__value_ - (char *)begin) >> 3) >= 0x555555555555555)
      v22 = 0xAAAAAAAAAAAAAAALL;
    else
      v22 = v21;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v37.__end_cap_;
    if (v22)
    {
      v23 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v37.__end_cap_, v22);
      __v.__first_ = v23;
      __v.__begin_ = v23;
      __v.__end_ = v23;
      __v.__end_cap_.__value_ = &v23[v24];
      if (v24)
      {
LABEL_48:
        if (*(char *)(a3 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v23, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
        }
        else
        {
          v36 = *(_OWORD *)a3;
          v23->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
          *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v36;
        }
        ++__v.__end_;
        std::vector<std::string>::__swap_out_circular_buffer(&v37, &__v, begin);
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        goto LABEL_54;
      }
    }
    else
    {
      memset(&__v, 0, 32);
    }
    v39.__end_cap_.__value_ = __v.__end_cap_.__value_;
    v26 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)__v.__end_cap_.__value_, 1uLL);
    v28 = __v.__begin_;
    if (__v.__end_ == __v.__begin_)
    {
      v34 = vdupq_n_s64((unint64_t)__v.__begin_);
      v30 = v26;
    }
    else
    {
      v29 = __v.__end_ - __v.__begin_;
      v30 = &v26[v29];
      v31 = 24 * v29;
      v32 = v26;
      do
      {
        v33 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
        v32->__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v32->__r_.__value_.__l.__data_ = v33;
        ++v32;
        v28->__r_.__value_.__l.__size_ = 0;
        v28->__r_.__value_.__r.__words[2] = 0;
        v28->__r_.__value_.__r.__words[0] = 0;
        ++v28;
        v31 -= 24;
      }
      while (v31);
      v34 = *(int64x2_t *)&__v.__begin_;
    }
    value = __v.__end_cap_.__value_;
    v39.__first_ = __v.__first_;
    __v.__first_ = v26;
    __v.__begin_ = v26;
    *(int64x2_t *)&v39.__begin_ = v34;
    __v.__end_ = v30;
    __v.__end_cap_.__value_ = &v26[v27];
    v39.__end_cap_.__value_ = value;
    std::__split_buffer<std::string>::~__split_buffer(&v39);
    v23 = __v.__end_;
    goto LABEL_48;
  }
  if (begin == v15)
  {
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      v25 = *(_OWORD *)a3;
      v15->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
      *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v25;
    }
    v37.__end_ = v15 + 1;
  }
  else
  {
    std::vector<std::string>::__move_range(&v37, begin, v15, begin + 1);
    v20 = (unint64_t)begin <= a3 && v37.__end_ > (std::vector<std::string>::pointer)a3;
    std::string::operator=(begin, (const std::string *)(a3 + 24 * v20));
  }
LABEL_54:
  std::string::basic_string[abi:ne180100]<0>(&v39, "/");
  siri::dialogengine::StringJoinInternal<std::vector<std::string>>((uint64_t)a1, (uint64_t)v37.__begin_, (uint64_t)v37.__end_, (uint64_t)&v39);
  if (SHIBYTE(v39.__end_) < 0)
    operator delete(v39.__first_);
  v39.__first_ = (std::__split_buffer<std::string>::pointer)&v37;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
}

void sub_1BF8BC84C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, std::__split_buffer<std::string> *a5, void *__p, uint64_t a7, int a8, __int16 a9, char a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void siri::dialogengine::VisualCatIdToPath(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  void *__p[2];
  char v7;
  void *v8[2];
  char v9;

  std::string::basic_string[abi:ne180100]<0>(v8, "visual");
  std::string::basic_string[abi:ne180100]<0>(__p, ".catfamily");
  siri::dialogengine::CatIdToPath(a3, a1, (unint64_t)v8, (uint64_t)__p, a2);
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
}

void sub_1BF8BC930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::CatPathToId(unsigned __int8 *a1@<X0>, _QWORD *a2@<X8>)
{
  std::string::size_type v3;
  std::string::size_type size;
  __int128 v5;
  _BOOL4 v6;
  _BOOL4 v7;
  std::string::size_type v8;
  _BOOL4 v9;
  _BOOL4 v10;
  std::string::size_type v11;
  int v12;
  size_t v13;
  std::string::size_type v14;
  int v15;
  std::string::size_type v16;
  std::string *v17;
  std::string *p_p;
  std::string *v19;
  std::string *v20;
  __int128 v21;
  std::string v22;
  std::string v23;
  std::string v24;
  std::string __str;
  std::string v26;
  std::string __p;
  std::string v28;

  memset(&v28, 0, sizeof(v28));
  memset(&__p, 0, sizeof(__p));
  siri::dialogengine::StringSplit(a1, "/", &v26);
  size = v26.__r_.__value_.__l.__size_;
  v3 = v26.__r_.__value_.__r.__words[0];
  if (v26.__r_.__value_.__r.__words[0] == v26.__r_.__value_.__l.__size_)
  {
LABEL_29:
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
LABEL_30:
    std::operator+<char>();
    siri::dialogengine::Log::LogWithLevel((uint64_t)&v26, 3u);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(a2, "");
    LOBYTE(v12) = *((_BYTE *)&__p.__r_.__value_.__s + 23);
    goto LABEL_33;
  }
  while (1)
  {
    if (*(char *)(v3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v3, *(_QWORD *)(v3 + 8));
    }
    else
    {
      v5 = *(_OWORD *)v3;
      __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v3 + 16);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v5;
    }
    siri::dialogengine::StringToLower((uint64_t)&__str, (uint64_t)&v24);
    std::string::basic_string[abi:ne180100]<0>(&v23, ".catfamily");
    v6 = siri::dialogengine::StringEndsWith(&v24, (unsigned __int8 *)&v23);
    v7 = v6;
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v23.__r_.__value_.__l.__data_);
      if (v7)
      {
LABEL_7:
        v8 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v8 = __str.__r_.__value_.__l.__size_;
        std::string::basic_string(&v23, &__str, 0, v8 - 10, (std::allocator<char> *)&v22);
        goto LABEL_16;
      }
    }
    else if (v6)
    {
      goto LABEL_7;
    }
    std::string::basic_string[abi:ne180100]<0>(&v23, ".patternfamily");
    v9 = siri::dialogengine::StringEndsWith(&v24, (unsigned __int8 *)&v23);
    v10 = v9;
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v23.__r_.__value_.__l.__data_);
      if (!v10)
        goto LABEL_20;
LABEL_13:
      v11 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v11 = __str.__r_.__value_.__l.__size_;
      std::string::basic_string(&v23, &__str, 0, v11 - 14, (std::allocator<char> *)&v22);
LABEL_16:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p = v23;
      goto LABEL_24;
    }
    if (v9)
      goto LABEL_13;
LABEL_20:
    v12 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    v13 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(__p.__r_.__value_.__r.__words[2])
        : __p.__r_.__value_.__l.__size_;
    if (v13)
      break;
LABEL_24:
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v3 += 24;
    if (v3 == size)
      goto LABEL_29;
  }
  siri::dialogengine::RemoveExtension((uint64_t)&__str, &v22);
  siri::dialogengine::RemoveExtension((uint64_t)&v22, &v23);
  v28 = v23;
  *((_BYTE *)&v23.__r_.__value_.__s + 23) = 0;
  v23.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  LOBYTE(v14) = *((_BYTE *)&v28.__r_.__value_.__s + 23);
  v15 = SHIBYTE(v28.__r_.__value_.__r.__words[2]);
  v16 = v28.__r_.__value_.__l.__size_;
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if (v15 >= 0)
    v14 = v14;
  else
    v14 = v16;
  if (!v14)
    goto LABEL_30;
  v17 = &v26;
  std::string::basic_string[abi:ne180100]((uint64_t)&v26, v13 + 1);
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
  if (v12 >= 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  memmove(v17, p_p, v13);
  *(_WORD *)((char *)&v17->__r_.__value_.__l.__data_ + v13) = 35;
  if (v15 >= 0)
    v19 = &v28;
  else
    v19 = (std::string *)v28.__r_.__value_.__r.__words[0];
  v20 = std::string::append(&v26, (const std::string::value_type *)v19, v14);
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  a2[2] = *((_QWORD *)&v20->__r_.__value_.__l + 2);
  *(_OWORD *)a2 = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
LABEL_33:
  if ((v12 & 0x80) != 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
}

void sub_1BF8BCCD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v45;

  if (a39 < 0)
    operator delete(__p);
  if (a45 < 0)
    operator delete(a40);
  if (*(char *)(v45 - 89) < 0)
    operator delete(*(void **)(v45 - 112));
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::RemoveExtension(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string::size_type v4;
  char v5;

  v4 = std::string::rfind((const std::string *)a1, 46, 0xFFFFFFFFFFFFFFFFLL);
  if (v4 == -1)
  {
    if (*(char *)(a1 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
    }
  }
  else
  {
    std::string::basic_string(a2, (const std::string *)a1, 0, v4, (std::allocator<char> *)&v5);
  }
}

void siri::dialogengine::CatFamilyFromId(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  const std::string::value_type **v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  v3 = *(unsigned __int8 *)(a1 + 23);
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    siri::dialogengine::StringSplit((unsigned __int8 *)a1, "#", &v7);
    if (0xAAAAAAAAAAAAAAABLL * ((v8 - v7) >> 3) > 1)
    {
      v4 = v7 + 8 * ((v8 - v7) >> 3);
      v5 = (const std::string::value_type **)(v4 - 48);
      if (*(char *)(v4 - 25) < 0)
      {
        std::string::__init_copy_ctor_external(a2, *v5, *(_QWORD *)(v4 - 40));
      }
      else
      {
        v6 = *(_OWORD *)v5;
        a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v4 - 32);
        *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v6;
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(a2, "");
    }
    v9 = (void **)&v7;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v9);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "");
  }
}

void sub_1BF8BCF18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void siri::dialogengine::CatFamilyDirectoryNameFromId(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  std::string *v4;
  __int128 v5;
  std::string v6;

  v3 = *(unsigned __int8 *)(a1 + 23);
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    siri::dialogengine::CatFamilyFromId(a1, &v6);
    v4 = std::string::append(&v6, ".catfamily");
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    a2[2] = *((_QWORD *)&v4->__r_.__value_.__l + 2);
    *(_OWORD *)a2 = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v6.__r_.__value_.__l.__data_);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "");
  }
}

void sub_1BF8BCFCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::PatternIdToPath(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  void *__p[2];
  char v7;
  void *v8[2];
  char v9;

  std::string::basic_string[abi:ne180100]<0>(v8, "pattern");
  std::string::basic_string[abi:ne180100]<0>(__p, ".patternfamily");
  siri::dialogengine::CatIdToPath(a3, a1, (unint64_t)v8, (uint64_t)__p, a2);
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
}

void sub_1BF8BD074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetCatLocales(unsigned __int8 **a1@<X0>, uint64_t *a2@<X8>)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int16 *v5;
  int v6;
  int v7;
  int v8;
  int v10;
  __int128 *v11;
  int v12;
  int v13;
  unint64_t v15;
  uint64_t v16;
  __n128 *v17;
  __n128 *v18;
  unint64_t v19;
  uint64_t v20;
  __int128 *v21[3];
  __int128 **v22;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = *a1;
  v3 = a1[1];
  if (*a1 != v3)
  {
    while (1)
    {
      siri::dialogengine::StringSplit(v2, ".", v21);
      if ((__int128 *)((char *)v21[1] - (char *)v21[0]) == (__int128 *)72)
      {
        v5 = (unsigned __int16 *)v21[0] + 12;
        v6 = *((char *)v21[0] + 47);
        if (v6 < 0)
        {
          if (*((_QWORD *)v21[0] + 4) == 3)
          {
            v5 = *(unsigned __int16 **)v5;
LABEL_8:
            v7 = *v5;
            v8 = *((unsigned __int8 *)v5 + 2);
            if (v7 != 24931 || v8 != 116)
              goto LABEL_26;
            v10 = *((char *)v21[0] + 23);
            if (v10 < 0)
            {
              if (*((_QWORD *)v21[0] + 1) != 7)
              {
LABEL_22:
                v15 = a2[1];
                if (v15 >= a2[2])
                {
                  v16 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a2, v21[0]);
                }
                else
                {
                  std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a2, v21[0]);
                  v16 = v15 + 24;
                }
                a2[1] = v16;
                goto LABEL_26;
              }
              v11 = *(__int128 **)v21[0];
            }
            else
            {
              v11 = v21[0];
              if (v10 != 7)
                goto LABEL_22;
            }
            v12 = *(_DWORD *)v11;
            v13 = *(_DWORD *)((char *)v11 + 3);
            if (v12 == 1918988383 && v13 == 1936548210)
              goto LABEL_26;
            goto LABEL_22;
          }
        }
        else if (v6 == 3)
        {
          goto LABEL_8;
        }
      }
LABEL_26:
      v22 = v21;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
      v2 += 24;
      if (v2 == v3)
      {
        v17 = (__n128 *)*a2;
        v18 = (__n128 *)a2[1];
        goto LABEL_29;
      }
    }
  }
  v18 = 0;
  v17 = 0;
LABEL_29:
  v19 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v18 - (char *)v17) >> 3));
  if (v18 == v17)
    v20 = 0;
  else
    v20 = v19;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(v17, v18, v20, 1);
}

void sub_1BF8BD23C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, void ***a12)
{
  a12 = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void siri::dialogengine::GetCatLocales(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  unsigned __int8 *v4[3];
  _QWORD v5[3];
  unsigned __int8 **v6;

  memset(v5, 0, sizeof(v5));
  v3 = *(unsigned __int8 *)(a1 + 23);
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    siri::dialogengine::ListDir((const char *)a1, (uint64_t)v4);
    siri::dialogengine::GetCatLocales(v4, a2);
    v6 = v4;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v6);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  v4[0] = (unsigned __int8 *)v5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v4);
}

void sub_1BF8BD2F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(v14 - 24) = v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 24));
  a10 = (void **)&a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

DIR *siri::dialogengine::ListDir@<X0>(const char *a1@<X0>, uint64_t a2@<X8>)
{
  DIR *result;
  DIR *v4;
  dirent *i;
  char *d_name;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  std::string *v14;
  std::string *v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  void *__p[2];
  std::string::size_type v20;
  std::__split_buffer<std::string> __v;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  result = opendir(a1);
  v4 = result;
  if (result)
  {
    for (i = readdir(result); i; i = readdir(v4))
    {
      d_name = i->d_name;
      if (strcmp(i->d_name, ".") && strcmp(d_name, ".."))
      {
        std::string::basic_string[abi:ne180100]<0>(__p, d_name);
        v8 = *(_QWORD *)(a2 + 8);
        v7 = *(_QWORD *)(a2 + 16);
        if (v8 >= v7)
        {
          v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - *(_QWORD *)a2) >> 3);
          v11 = v10 + 1;
          if (v10 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<BOOL>::__throw_length_error[abi:ne180100]();
          v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *(_QWORD *)a2) >> 3);
          if (2 * v12 > v11)
            v11 = 2 * v12;
          if (v12 >= 0x555555555555555)
            v13 = 0xAAAAAAAAAAAAAAALL;
          else
            v13 = v11;
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
          if (v13)
            v14 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v13);
          else
            v14 = 0;
          v15 = v14 + v10;
          __v.__first_ = v14;
          __v.__begin_ = v15;
          __v.__end_cap_.__value_ = &v14[v13];
          v16 = *(_OWORD *)__p;
          v15->__r_.__value_.__r.__words[2] = v20;
          *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
          __p[1] = 0;
          v20 = 0;
          __p[0] = 0;
          __v.__end_ = v15 + 1;
          std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
          v17 = *(_QWORD *)(a2 + 8);
          std::__split_buffer<std::string>::~__split_buffer(&__v);
          v18 = SHIBYTE(v20);
          *(_QWORD *)(a2 + 8) = v17;
          if (v18 < 0)
            operator delete(__p[0]);
        }
        else
        {
          v9 = *(_OWORD *)__p;
          *(_QWORD *)(v8 + 16) = v20;
          *(_OWORD *)v8 = v9;
          *(_QWORD *)(a2 + 8) = v8 + 24;
        }
      }
    }
    return (DIR *)closedir(v4);
  }
  return result;
}

void sub_1BF8BD4E8(_Unwind_Exception *__p, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, std::__split_buffer<std::string> *a7, ...)
{
  va_list __pa;

  va_start(__pa, a7);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__pa);
  _Unwind_Resume(__p);
}

BOOL siri::dialogengine::FileExists(uint64_t *a1)
{
  stat v3;

  if (*((char *)a1 + 23) < 0)
  {
    if (!a1[1])
      return 0;
    a1 = (uint64_t *)*a1;
  }
  else if (!*((_BYTE *)a1 + 23))
  {
    return 0;
  }
  return stat((const char *)a1, &v3) != -1 && (v3.st_mode & 0xF000) == 0x8000;
}

BOOL siri::dialogengine::DirExists(uint64_t *a1)
{
  stat v3;

  if (*((char *)a1 + 23) < 0)
  {
    if (!a1[1])
      return 0;
    a1 = (uint64_t *)*a1;
  }
  else if (!*((_BYTE *)a1 + 23))
  {
    return 0;
  }
  return stat((const char *)a1, &v3) != -1 && (v3.st_mode & 0xF000) == 0x4000;
}

BOOL siri::dialogengine::PathExists(uint64_t *a1)
{
  int v1;
  _BOOL8 result;
  stat v3;

  if (*((char *)a1 + 23) < 0)
  {
    if (!a1[1])
      return 0;
    a1 = (uint64_t *)*a1;
  }
  else if (!*((_BYTE *)a1 + 23))
  {
    return 0;
  }
  if (stat((const char *)a1, &v3) == -1)
    return 0;
  v1 = v3.st_mode & 0xF000;
  result = 1;
  if (v1 != 0x4000)
    return v1 == 0x8000 || v1 == 40960;
  return result;
}

uint64_t siri::dialogengine::GetPermissions(uint64_t *a1)
{
  stat v2;

  if (*((char *)a1 + 23) < 0)
  {
    if (!a1[1])
      return 0xFFFFFFFFLL;
    a1 = (uint64_t *)*a1;
  }
  else if (!*((_BYTE *)a1 + 23))
  {
    return 0xFFFFFFFFLL;
  }
  if (stat((const char *)a1, &v2) == -1)
    return 0xFFFFFFFFLL;
  else
    return v2.st_mode & 0xFFF;
}

uint64_t siri::dialogengine::AddPermissions(const char *a1, __int16 a2)
{
  const char *v3;
  const char *v4;
  uint64_t v5;
  const char *v6;
  stat v8;

  v3 = a1;
  if (a1[23] < 0)
  {
    if (!*((_QWORD *)a1 + 1))
      return 0;
    a1 = *(const char **)a1;
  }
  else if (!a1[23])
  {
    return 0;
  }
  if (stat(a1, &v8) != -1)
  {
    if (v3[23] >= 0)
      v4 = v3;
    else
      v4 = *(const char **)v3;
    v5 = chmod(v4, v8.st_mode & 0xFFF | a2);
    if (!(_DWORD)v5)
      return 1;
    siri::dialogengine::Log::Debug((siri::dialogengine::Log *)"AddPermissions: chmod returned %d", v6, v5);
  }
  return 0;
}

BOOL siri::dialogengine::FileExistsAndIsNotEmpty(uint64_t a1, uint64_t a2)
{
  off_t FileSize;
  void *__p[2];
  char v5;

  siri::dialogengine::JoinPath(a1, a2, (uint64_t)__p);
  FileSize = siri::dialogengine::GetFileSize((uint64_t *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  return FileSize > 0;
}

void sub_1BF8BD79C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::JoinPath(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  std::string::size_type v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v10;
  _BOOL4 v11;
  uint64_t v12;
  const std::string::value_type *v13;
  uint64_t v14;
  std::string::size_type v15;
  int v16;
  uint64_t v17;
  int v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  void *__p[2];
  char v22;

  v5 = *(char *)(a1 + 23);
  v6 = *(_QWORD *)(a1 + 8);
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(a1 + 23);
  else
    v7 = *(_QWORD *)(a1 + 8);
  v8 = *(unsigned __int8 *)(a2 + 23);
  if (!v7)
  {
    if ((v8 & 0x80) == 0)
    {
LABEL_13:
      *(_OWORD *)a3 = *(_OWORD *)a2;
      v12 = *(_QWORD *)(a2 + 16);
LABEL_16:
      *(_QWORD *)(a3 + 16) = v12;
      return;
    }
    v13 = *(const std::string::value_type **)a2;
    v6 = *(_QWORD *)(a2 + 8);
    goto LABEL_22;
  }
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a2 + 8);
  if (!v8)
  {
    if ((v5 & 0x80000000) == 0)
    {
      *(_OWORD *)a3 = *(_OWORD *)a1;
      v12 = *(_QWORD *)(a1 + 16);
      goto LABEL_16;
    }
    v13 = *(const std::string::value_type **)a1;
LABEL_22:
    std::string::__init_copy_ctor_external((std::string *)a3, v13, v6);
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "/");
  v10 = siri::dialogengine::StringStartsWith((std::string *)a2, (unsigned __int8 *)__p);
  v11 = v10;
  if (v22 < 0)
  {
    operator delete(__p[0]);
    if (v11)
    {
LABEL_10:
      if (*(char *)(a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)a3, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
        return;
      }
      goto LABEL_13;
    }
  }
  else if (v10)
  {
    goto LABEL_10;
  }
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a3, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)a3 = *(_OWORD *)a1;
    *(_QWORD *)(a3 + 16) = *(_QWORD *)(a1 + 16);
  }
  while (1)
  {
    if (*(char *)(a3 + 23) < 0)
    {
      v17 = *(_QWORD *)(a3 + 8);
      if (!v17)
        break;
      v15 = v17 - 1;
      v16 = *(unsigned __int8 *)(*(_QWORD *)a3 + v17 - 1);
    }
    else
    {
      v14 = *(unsigned __int8 *)(a3 + 23);
      if (!*(_BYTE *)(a3 + 23))
        break;
      v15 = v14 - 1;
      v16 = *(unsigned __int8 *)(a3 + v14 - 1);
    }
    if (v16 != 47)
      break;
    std::string::erase((std::string *)a3, v15, 0xFFFFFFFFFFFFFFFFLL);
  }
  std::string::push_back((std::string *)a3, 47);
  v18 = *(char *)(a2 + 23);
  if (v18 >= 0)
    v19 = (const std::string::value_type *)a2;
  else
    v19 = *(const std::string::value_type **)a2;
  if (v18 >= 0)
    v20 = *(unsigned __int8 *)(a2 + 23);
  else
    v20 = *(_QWORD *)(a2 + 8);
  std::string::append((std::string *)a3, v19, v20);
}

void sub_1BF8BD958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

off_t siri::dialogengine::GetFileSize(uint64_t *a1)
{
  stat v2;

  if (*((char *)a1 + 23) < 0)
  {
    if (!a1[1])
      return -1;
    a1 = (uint64_t *)*a1;
  }
  else if (!*((_BYTE *)a1 + 23))
  {
    return -1;
  }
  if (stat((const char *)a1, &v2) == -1)
    return -1;
  else
    return v2.st_size;
}

void siri::dialogengine::ExpandPath(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  _BOOL4 v5;
  _BOOL4 v6;
  _BOOL4 v7;
  const char *v8;
  _BOOL4 v9;
  std::string *v10;
  std::string::size_type v11;
  char v12;
  std::string::size_type v13;
  std::string::size_type i;
  _BOOL4 v15;
  uint64_t v16;
  std::string *v17;
  std::string *v18;
  char *v19;
  const char *v20;
  std::string *v21;
  void *v22[2];
  char v23;
  std::string __p;
  std::string v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 23))
    {
      *(_OWORD *)a2 = *(_OWORD *)a1;
      *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
      goto LABEL_6;
    }
LABEL_9:
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)a2, "");
    return;
  }
  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_9;
  std::string::__init_copy_ctor_external((std::string *)a2, *(const std::string::value_type **)a1, v4);
LABEL_6:
  std::string::basic_string[abi:ne180100]<0>(&__p, "~");
  v5 = siri::dialogengine::StringStartsWith((std::string *)a1, (unsigned __int8 *)&__p);
  v6 = v5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v6)
      goto LABEL_19;
  }
  else if (!v5)
  {
    goto LABEL_19;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "~/");
  v7 = siri::dialogengine::StringStartsWith((std::string *)a1, (unsigned __int8 *)&__p);
  v9 = v7;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v9)
      goto LABEL_13;
  }
  else if (v7)
  {
LABEL_13:
    std::string::basic_string(&__p, (const std::string *)a1, 1uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v22);
    v10 = std::string::insert(&__p, 0, "${HOME}");
    v11 = v10->__r_.__value_.__r.__words[0];
    v25.__r_.__value_.__r.__words[0] = v10->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v25.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v10->__r_.__value_.__r.__words[1] + 7);
    v12 = HIBYTE(v10->__r_.__value_.__r.__words[2]);
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    v13 = v25.__r_.__value_.__r.__words[0];
    *(_QWORD *)a2 = v11;
    *(_QWORD *)(a2 + 8) = v13;
    *(_QWORD *)(a2 + 15) = *(std::string::size_type *)((char *)v25.__r_.__value_.__r.__words + 7);
    *(_BYTE *)(a2 + 23) = v12;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_19;
  }
  siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"ExpandPath expands only leading \"~/\" not other \"~\" patterns", v8);
LABEL_19:
  std::string::basic_string[abi:ne180100]<0>(&v25, "${");
  std::string::basic_string[abi:ne180100]<0>(v22, "}");
  siri::dialogengine::StringSplitWithDelimiters((std::string *)a2, (unsigned __int8 *)&v25, (unsigned __int8 *)v22, (uint64_t)&__p);
  if (v23 < 0)
    operator delete(v22[0]);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  for (i = __p.__r_.__value_.__r.__words[0]; i != __p.__r_.__value_.__l.__size_; i += 24)
  {
    std::string::basic_string[abi:ne180100]<0>(&v25, "${");
    if (siri::dialogengine::StringStartsWith((std::string *)i, (unsigned __int8 *)&v25))
    {
      std::string::basic_string[abi:ne180100]<0>(v22, "}");
      v15 = siri::dialogengine::StringEndsWith((std::string *)i, (unsigned __int8 *)v22);
      if (v23 < 0)
        operator delete(v22[0]);
    }
    else
    {
      v15 = 0;
    }
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v25.__r_.__value_.__l.__data_);
      if (v15)
      {
LABEL_32:
        if (*(char *)(i + 23) < 0)
          v16 = *(_QWORD *)(i + 8);
        else
          v16 = *(unsigned __int8 *)(i + 23);
        std::string::basic_string(&v25, (const std::string *)i, 2uLL, v16 - 3, (std::allocator<char> *)v22);
        if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        {
          v17 = (std::string *)v25.__r_.__value_.__r.__words[0];
          v18 = (std::string *)v25.__r_.__value_.__r.__words[0];
        }
        else
        {
          v17 = &v25;
          v18 = &v25;
        }
        v19 = getenv((const char *)v18);
        if (v19)
        {
          MEMORY[0x1C3B8D53C](i, v19);
          if (*(char *)(i + 23) < 0)
          {
            if (!*(_QWORD *)(i + 8))
              goto LABEL_44;
          }
          else if (!*(_BYTE *)(i + 23))
          {
LABEL_44:
            if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v21 = &v25;
            else
              v21 = (std::string *)v25.__r_.__value_.__r.__words[0];
            siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Environment variable ${%s} is empty", v20, v21);
          }
        }
        else
        {
          siri::dialogengine::Log::Warn((siri::dialogengine::Log *)"Environment variable ${%s} is not defined", 0, v17);
          MEMORY[0x1C3B8D53C](i, "");
        }
        if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v25.__r_.__value_.__l.__data_);
      }
    }
    else if (v15)
    {
      goto LABEL_32;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v22, "");
  siri::dialogengine::StringJoinInternal<std::vector<std::string>>((uint64_t)&v25, (uint64_t)__p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_, (uint64_t)v22);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(std::string *)a2 = v25;
  *((_BYTE *)&v25.__r_.__value_.__s + 23) = 0;
  v25.__r_.__value_.__s.__data_[0] = 0;
  if (v23 < 0)
    operator delete(v22[0]);
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
}

void sub_1BF8BDDF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (*(char *)(v28 + 23) < 0)
    operator delete(*(void **)v28);
  _Unwind_Resume(exception_object);
}

double siri::dialogengine::JoinPath@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  double result;
  __int128 v6;
  uint64_t v7;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v2 = *a1;
  v3 = a1[1];
  if (*a1 != v3)
  {
    do
    {
      siri::dialogengine::JoinPath(a2, v2, (uint64_t)&v6);
      if (*(char *)(a2 + 23) < 0)
        operator delete(*(void **)a2);
      result = *(double *)&v6;
      *(_OWORD *)a2 = v6;
      *(_QWORD *)(a2 + 16) = v7;
      v2 += 24;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_1BF8BDF58(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::DirName(std::string *__str@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type size;
  std::string *v4;
  unsigned __int8 *v6;
  std::string *v7;
  std::string *v8;
  std::string *v9;
  unsigned __int8 *v10;
  int v11;
  int64_t v12;
  _BOOL4 v13;
  uint64_t v14;
  std::string __p;
  char v16;

  size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v4 = __str;
  else
    v4 = (std::string *)__str->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = __str->__r_.__value_.__l.__size_;
  if (!size)
    goto LABEL_24;
  v6 = (unsigned __int8 *)v4 + size;
  v7 = v4;
  v8 = (std::string *)v6;
  do
  {
    v9 = v7;
    v10 = (unsigned __int8 *)v7;
    while (1)
    {
      v11 = *v10++;
      if (v11 == 47)
        break;
      v9 = (std::string *)v10;
      if (v10 == v6)
      {
        v9 = v8;
        goto LABEL_13;
      }
    }
    v7 = (std::string *)((char *)&v9->__r_.__value_.__l.__data_ + 1);
    v8 = v9;
  }
  while (v10 != v6);
LABEL_13:
  if (v9 == (std::string *)v6 || (v12 = (char *)v9 - (char *)v4, v12 == -1))
  {
LABEL_24:
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)a2, ".");
  }
  else
  {
    std::string::basic_string((std::string *)a2, __str, 0, v12 + 1, (std::allocator<char> *)&__p);
    while (1)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "/");
      v13 = siri::dialogengine::StringEndsWith((std::string *)a2, (unsigned __int8 *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (!v13)
        break;
      v14 = *(unsigned __int8 *)(a2 + 23);
      if ((v14 & 0x80u) != 0)
        v14 = *(_QWORD *)(a2 + 8);
      std::string::basic_string(&__p, (const std::string *)a2, 0, v14 - 1, (std::allocator<char> *)&v16);
      if (*(char *)(a2 + 23) < 0)
        operator delete(*(void **)a2);
      *(std::string *)a2 = __p;
    }
  }
}

void sub_1BF8BE0D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (*(char *)(v14 + 23) < 0)
    operator delete(*(void **)v14);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::BaseName(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  std::string::size_type v5;
  unsigned __int8 *v6;
  const std::string::value_type *v7;
  uint64_t v8;
  const std::string::value_type *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  int v13;
  int64_t v14;
  std::string __p;
  char v16;

  v4 = *(unsigned __int8 *)(a1 + 23);
  if (*(char *)(a1 + 23) < 0)
  {
    v8 = *(_QWORD *)(a1 + 8);
    if (!v8)
    {
      std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, 0);
      return;
    }
    v5 = v8 - 1;
    v7 = *(const std::string::value_type **)a1;
    if (*(_BYTE *)(*(_QWORD *)a1 + v8 - 1) != 47)
    {
      v6 = (unsigned __int8 *)&v7[v8];
      goto LABEL_11;
    }
  }
  else
  {
    if (!*(_BYTE *)(a1 + 23))
    {
LABEL_21:
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
      return;
    }
    v5 = v4 - 1;
    if (*(_BYTE *)(a1 + v4 - 1) != 47)
    {
      v6 = (unsigned __int8 *)(a1 + v4);
      v7 = (const std::string::value_type *)a1;
LABEL_11:
      v9 = v7;
      v10 = v6;
      do
      {
        v11 = (unsigned __int8 *)v9;
        v12 = (unsigned __int8 *)v9;
        while (1)
        {
          v13 = *v12++;
          if (v13 == 47)
            break;
          v11 = v12;
          if (v12 == v6)
          {
            v11 = v10;
            goto LABEL_17;
          }
        }
        v9 = (const std::string::value_type *)(v11 + 1);
        v10 = v11;
      }
      while (v12 != v6);
LABEL_17:
      if (v11 != v6)
      {
        v14 = v11 - (unsigned __int8 *)v7;
        if (v14 != -1)
        {
          std::string::basic_string(a2, (const std::string *)a1, v14 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&__p);
          return;
        }
      }
      if ((v4 & 0x80) != 0)
      {
        std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
        return;
      }
      goto LABEL_21;
    }
  }
  std::string::basic_string(&__p, (const std::string *)a1, 0, v5, (std::allocator<char> *)&v16);
  siri::dialogengine::BaseName(&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF8BE268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::GetExtension(const std::string *a1@<X0>, std::string *a2@<X8>)
{
  std::string::size_type v3;
  std::string __p;
  char v5;

  siri::dialogengine::StringTrimRight("/", a1, &__p);
  v3 = std::string::rfind(&__p, 46, 0xFFFFFFFFFFFFFFFFLL);
  if (v3 == -1)
    std::string::basic_string[abi:ne180100]<0>(a2, "");
  else
    std::string::basic_string(a2, &__p, v3 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF8BE30C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::AddExtension(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v5;
  int v7;
  const std::string::value_type *v8;
  uint64_t v9;
  BOOL v10;
  BOOL v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v17;
  _QWORD v18[2];
  _QWORD v19[11];
  char v20;
  uint64_t v21;

  v5 = *(unsigned __int8 *)(a2 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a2 + 8);
  if (!v5)
  {
    if (*(char *)(a1 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
    }
    return;
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v18);
  v7 = *(char *)(a1 + 23);
  if (v7 >= 0)
    v8 = (const std::string::value_type *)a1;
  else
    v8 = *(const std::string::value_type **)a1;
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(a1 + 23);
  else
    v9 = *(_QWORD *)(a1 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v8, v9);
  std::string::basic_string[abi:ne180100]<0>(__p, ".");
  v10 = siri::dialogengine::StringStartsWith((std::string *)a2, (unsigned __int8 *)__p);
  v11 = v10;
  if ((v17 & 0x80000000) == 0)
  {
    if (v10)
      goto LABEL_17;
    goto LABEL_16;
  }
  operator delete(__p[0]);
  if (!v11)
  {
LABEL_16:
    LOBYTE(__p[0]) = 46;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)__p, 1);
  }
LABEL_17:
  v12 = *(char *)(a2 + 23);
  if (v12 >= 0)
    v13 = a2;
  else
    v13 = *(_QWORD *)a2;
  if (v12 >= 0)
    v14 = *(unsigned __int8 *)(a2 + 23);
  else
    v14 = *(_QWORD *)(a2 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, v13, v14);
  std::stringbuf::str();
  v18[0] = *MEMORY[0x1E0DE4F50];
  v15 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v18 + *(_QWORD *)(v18[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v19[0] = v15;
  v19[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v20 < 0)
    operator delete((void *)v19[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C3B8D80C](&v21);
}

void sub_1BF8BE4CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::HasExtension(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v5;
  size_t v6;
  std::string::size_type size;
  int v8;
  std::string *p_p;
  uint64_t v10;
  void **p_s1;
  int v12;
  int v13;
  int v14;
  int v15;
  BOOL v17;
  _BOOL8 v18;
  std::string v20;
  std::string __p;
  void *__s1;
  size_t __n;
  unsigned __int8 v24;

  v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0)
    v2 = *(_QWORD *)(a2 + 8);
  if (v2)
  {
    v3 = *(unsigned __int8 *)(a1 + 23);
    if ((v3 & 0x80u) != 0)
      v3 = *(_QWORD *)(a1 + 8);
    if (v3)
    {
      siri::dialogengine::GetExtension((const std::string *)a1, &__p);
      siri::dialogengine::StringToLower((uint64_t)&__p, (uint64_t)&__s1);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      siri::dialogengine::StringTrim(".", (const std::string *)a2, &v20);
      siri::dialogengine::StringToLower((uint64_t)&v20, (uint64_t)&__p);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v20.__r_.__value_.__l.__data_);
      v5 = v24;
      if ((v24 & 0x80u) == 0)
        v6 = v24;
      else
        v6 = __n;
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v8 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = __p.__r_.__value_.__l.__size_;
      if (v6 != size)
      {
        v18 = 0;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_34;
        goto LABEL_37;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((char)v24 < 0)
      {
        v18 = memcmp(__s1, p_p, __n) == 0;
      }
      else
      {
        if (!v24)
        {
          v18 = 1;
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_34:
            if ((v5 & 0x80) == 0)
              return v18;
LABEL_38:
            operator delete(__s1);
            return v18;
          }
LABEL_37:
          operator delete(__p.__r_.__value_.__l.__data_);
          if ((v24 & 0x80) == 0)
            return v18;
          goto LABEL_38;
        }
        v10 = v24 - 1;
        p_s1 = &__s1;
        do
        {
          v13 = *(unsigned __int8 *)p_s1;
          p_s1 = (void **)((char *)p_s1 + 1);
          v12 = v13;
          v15 = p_p->__r_.__value_.__s.__data_[0];
          p_p = (std::string *)((char *)p_p + 1);
          v14 = v15;
          v17 = v10-- != 0;
          v18 = v12 == v14;
        }
        while (v12 == v14 && v17);
      }
      if ((v8 & 0x80000000) == 0)
        goto LABEL_34;
      goto LABEL_37;
    }
  }
  return 0;
}

void sub_1BF8BE674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::RelativePathFromFolder(uint64_t a1@<X0>, unsigned __int8 **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  unsigned __int8 *v6;
  __int128 *v7;
  const void **v8;
  char v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  const void **v12;
  __int128 *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unint64_t v17;
  std::string::value_type *v18;
  void **v19;
  int v20;
  void *__p[2];
  char v22;
  void **v23[2];
  _BYTE v24[7];
  char v25;
  const void ***v26;
  unint64_t v27;
  unint64_t v28;
  _DWORD v29[2];
  const void **v30;
  const void **v31;

  v4 = *(unsigned __int8 *)(a1 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    goto LABEL_28;
  v6 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
  if ((char)v6 < 0)
    v6 = a2[1];
  if (!v6)
  {
LABEL_28:
    *(_BYTE *)a3 = 0;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), "");
    return;
  }
  siri::dialogengine::StringSplit((unsigned __int8 *)a1, "/", &v30);
  v8 = v30;
  v7 = (__int128 *)v31;
  if (v31 != v30)
  {
    v9 = *((_BYTE *)a2 + 23);
    if (v9 >= 0)
      v10 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
    else
      v10 = a2[1];
    if (v9 >= 0)
      v11 = (unsigned __int8 *)a2;
    else
      v11 = *a2;
    v12 = v31;
    do
    {
      v13 = (__int128 *)v12;
      v12 -= 3;
      v14 = *((unsigned __int8 *)v13 - 1);
      if ((v14 & 0x80u) == 0)
        v15 = (unsigned __int8 *)*((unsigned __int8 *)v13 - 1);
      else
        v15 = (unsigned __int8 *)*((_QWORD *)v13 - 2);
      if (v15 == v10)
      {
        if ((v14 & 0x80) != 0)
        {
          if (!memcmp(*v12, v11, *((_QWORD *)v13 - 2)))
            goto LABEL_30;
        }
        else
        {
          if (!*((_BYTE *)v13 - 1))
            goto LABEL_30;
          v16 = 0;
          while (*((unsigned __int8 *)v13 + v16 - 24) == v11[v16])
          {
            if (v14 == ++v16)
              goto LABEL_30;
          }
        }
      }
    }
    while (v12 != v8);
    goto LABEL_41;
  }
  v13 = (__int128 *)v31;
LABEL_30:
  if (v8 == (const void **)v13)
  {
LABEL_41:
    *(_BYTE *)a3 = 0;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a3 + 8), "");
    goto LABEL_44;
  }
  memset(v29, 0, 7);
  if (v13 == v7)
  {
    v18 = 0;
    LOBYTE(v20) = 0;
    v19 = 0;
    *(_BYTE *)a3 = 1;
LABEL_43:
    *(_QWORD *)(a3 + 8) = v18;
    *(_QWORD *)(a3 + 16) = v19;
    *(_DWORD *)(a3 + 24) = v29[0];
    *(_DWORD *)(a3 + 27) = *(_DWORD *)((char *)v29 + 3);
    *(_BYTE *)(a3 + 31) = v20;
    goto LABEL_44;
  }
  v17 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  do
  {
    if (v17 >= v28)
    {
      v17 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v26, v13);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)&v26, v13);
      v17 += 24;
    }
    v27 = v17;
    v13 = (__int128 *)((char *)v13 + 24);
  }
  while (v13 != v7);
  std::string::basic_string[abi:ne180100]<0>(__p, "/");
  siri::dialogengine::StringJoinInternal<std::vector<std::string>>((uint64_t)v23, (uint64_t)v26, v27, (uint64_t)__p);
  v18 = (std::string::value_type *)v23[0];
  v19 = v23[1];
  v29[0] = *(_DWORD *)v24;
  *(_DWORD *)((char *)v29 + 3) = *(_DWORD *)&v24[3];
  v20 = v25;
  v25 = 0;
  LOBYTE(v23[0]) = 0;
  if (v22 < 0)
    operator delete(__p[0]);
  v23[0] = (void **)&v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v23);
  *(_BYTE *)a3 = 1;
  if ((v20 & 0x80000000) == 0)
    goto LABEL_43;
  std::string::__init_copy_ctor_external((std::string *)(a3 + 8), v18, (std::string::size_type)v19);
  operator delete(v18);
LABEL_44:
  v26 = &v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
}

void sub_1BF8BE944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char *a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  void *v23;

  operator delete(v23);
  a19 = &a23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  _Unwind_Resume(a1);
}

double siri::dialogengine::GetFileModificationTime(uint64_t *a1)
{
  int v1;
  double result;
  stat v3;

  if (*((char *)a1 + 23) < 0)
  {
    if (!a1[1])
      return 0.0;
    a1 = (uint64_t *)*a1;
  }
  else if (!*((_BYTE *)a1 + 23))
  {
    return 0.0;
  }
  v1 = stat((const char *)a1, &v3);
  result = (double)v3.st_mtimespec.tv_sec;
  if (v1 == -1)
    return 0.0;
  return result;
}

_QWORD *siri::dialogengine::GetTempDir@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "/tmp");
}

_QWORD *siri::dialogengine::GetHomeDir@<X0>(_QWORD *a1@<X8>)
{
  char *v3;
  char *v4;

  v3 = getenv("HOME");
  if (v3)
    v4 = v3;
  else
    v4 = "";
  return std::string::basic_string[abi:ne180100]<0>(a1, v4);
}

_QWORD *siri::dialogengine::GetCurrentDir@<X0>(_QWORD *a1@<X8>)
{
  char __s[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  getcwd(__s, 0x400uLL);
  return std::string::basic_string[abi:ne180100]<0>(a1, __s);
}

BOOL siri::dialogengine::DeleteFile(const char *a1)
{
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  return unlink(a1) == 0;
}

_QWORD *siri::dialogengine::FindFileInPaths@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *result;

  v4 = *(unsigned __int8 *)(a1 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    return std::string::basic_string[abi:ne180100]<0>((_QWORD *)a3, "");
  v6 = a2[1] - *a2;
  if (!v6)
    return std::string::basic_string[abi:ne180100]<0>((_QWORD *)a3, "");
  v8 = 0;
  v9 = v6 / 24;
  if (v9 <= 1)
    v10 = 1;
  else
    v10 = v9;
  while (1)
  {
    siri::dialogengine::JoinPath(*a2 + v8, a1, a3);
    result = (_QWORD *)siri::dialogengine::PathExists((uint64_t *)a3);
    if ((result & 1) != 0)
      break;
    if (*(char *)(a3 + 23) < 0)
      operator delete(*(void **)a3);
    v8 += 24;
    if (!--v10)
      return std::string::basic_string[abi:ne180100]<0>((_QWORD *)a3, "");
  }
  return result;
}

void sub_1BF8BEBB4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::ReadFileToString(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v3;
  std::locale::id *v4;
  const std::locale::facet *v5;
  unsigned __int8 v6;
  size_t v7;
  char *locale;
  void **v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  std::locale v12;
  std::string::size_type v13;
  unsigned __int8 v14;
  void *__p[2];
  unsigned __int8 v16;
  _QWORD v17[2];
  _BYTE v18[408];
  _QWORD v19[21];

  v19[19] = *MEMORY[0x1E0C80C00];
  if (*(char *)(a1 + 23) >= 0)
    v3 = *(unsigned __int8 *)(a1 + 23);
  else
    v3 = *(_QWORD *)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>(a2, "");
  if (v3)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    std::ifstream::basic_ifstream(v17);
    v4 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    while (1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(_QWORD *)(v17[0] - 24)));
      v5 = std::locale::use_facet(&v12, v4);
      v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
      std::locale::~locale(&v12);
      std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v17, (uint64_t)__p, v6);
      if ((v18[*(_QWORD *)(v17[0] - 24) + 16] & 5) != 0)
        break;
      if ((v16 & 0x80u) == 0)
        v7 = v16;
      else
        v7 = (size_t)__p[1];
      std::string::basic_string[abi:ne180100]((uint64_t)&v12, v7 + 1);
      if ((v14 & 0x80u) == 0)
        locale = (char *)&v12;
      else
        locale = (char *)v12.__locale_;
      if (v7)
      {
        if ((v16 & 0x80u) == 0)
          v9 = __p;
        else
          v9 = (void **)__p[0];
        memmove(locale, v9, v7);
      }
      *(_WORD *)&locale[v7] = 10;
      if ((v14 & 0x80u) == 0)
        v10 = (const std::string::value_type *)&v12;
      else
        v10 = (const std::string::value_type *)v12.__locale_;
      if ((v14 & 0x80u) == 0)
        v11 = v14;
      else
        v11 = v13;
      std::string::append(a2, v10, v11);
      if ((char)v14 < 0)
        operator delete(v12.__locale_);
    }
    if (!std::filebuf::close())
      std::ios_base::clear((std::ios_base *)((char *)v17 + *(_QWORD *)(v17[0] - 24)), *(_DWORD *)&v18[*(_QWORD *)(v17[0] - 24) + 16] | 4);
    v17[0] = *MEMORY[0x1E0DE4F40];
    *(_QWORD *)((char *)v17 + *(_QWORD *)(v17[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
    MEMORY[0x1C3B8D608](v18);
    std::istream::~istream();
    MEMORY[0x1C3B8D80C](v19);
    if ((char)v16 < 0)
      operator delete(__p[0]);
  }
}

void sub_1BF8BEE10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  uint64_t v23;

  if (a21 < 0)
    operator delete(__p);
  if (*(char *)(v23 + 23) < 0)
    operator delete(*(void **)v23);
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::WriteFileFromString(std::string *a1, uint64_t a2)
{
  std::string::size_type size;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  std::string __p;
  uint64_t v10;
  _BYTE v11[120];
  uint64_t v12;
  _QWORD v13[20];

  v13[19] = *MEMORY[0x1E0C80C00];
  siri::dialogengine::DirName(a1, (uint64_t)&__p);
  if (!siri::dialogengine::DirExists((uint64_t *)&__p))
  {
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __p.__r_.__value_.__l.__size_;
    if (size)
      siri::dialogengine::CreateDir(&__p, 504);
  }
  std::ofstream::basic_ofstream(&v10);
  v4 = v12;
  if (v12)
  {
    v5 = *(char *)(a2 + 23);
    v6 = v5 >= 0 ? a2 : *(_QWORD *)a2;
    v7 = v5 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(_QWORD *)(a2 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, v6, v7);
    if (!std::filebuf::close())
      std::ios_base::clear((std::ios_base *)&v11[*(_QWORD *)(v10 - 24) - 8], *(_DWORD *)&v11[*(_QWORD *)(v10 - 24) + 24] | 4);
  }
  v10 = *MEMORY[0x1E0DE4F48];
  *(_QWORD *)&v11[*(_QWORD *)(v10 - 24) - 8] = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 24);
  MEMORY[0x1C3B8D608](v11);
  std::ostream::~ostream();
  MEMORY[0x1C3B8D80C](v13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v4 != 0;
}

void sub_1BF8BEFCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t siri::dialogengine::CreateDir(std::string *a1, __int16 a2)
{
  std::string::size_type size;
  const char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  const char *v11;
  const char *v12;
  uint64_t *v13;
  void *__p[2];
  uint64_t v16;
  void *v17[2];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0)
    size = a1->__r_.__value_.__l.__size_;
  if (!size)
    return 0;
  if (siri::dialogengine::DirExists((uint64_t *)a1))
  {
    if ((siri::dialogengine::AddPermissions((const char *)a1, a2) & 1) != 0)
      return 1;
    if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = (uint64_t *)a1;
    else
      v13 = (uint64_t *)a1->__r_.__value_.__r.__words[0];
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Failed to add permissions to existing directory: %s", v5, v13);
    return 0;
  }
  siri::dialogengine::StringSplit((unsigned __int8 *)a1, "/", &v19);
  std::string::basic_string[abi:ne180100]<0>(__p, "/");
  if (siri::dialogengine::StringStartsWith(a1, (unsigned __int8 *)__p))
    v7 = "/";
  else
    v7 = "";
  std::string::basic_string[abi:ne180100]<0>(v17, v7);
  if (SHIBYTE(v16) < 0)
    operator delete(__p[0]);
  v8 = v19;
  if (v20 == v19)
  {
LABEL_26:
    v6 = 1;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    while (1)
    {
      siri::dialogengine::JoinPath((uint64_t)v17, v8 + v9, (uint64_t)__p);
      if (SHIBYTE(v18) < 0)
        operator delete(v17[0]);
      *(_OWORD *)v17 = *(_OWORD *)__p;
      v18 = v16;
      if (!siri::dialogengine::DirExists((uint64_t *)v17))
      {
        v11 = v18 >= 0 ? (const char *)v17 : (const char *)v17[0];
        if (mkdir(v11, a2))
          break;
        v12 = v18 >= 0 ? (const char *)v17 : (const char *)v17[0];
        if (chmod(v12, a2))
          break;
      }
      ++v10;
      v8 = v19;
      v9 += 24;
      if (v10 >= 0xAAAAAAAAAAAAAAABLL * ((v20 - v19) >> 3))
        goto LABEL_26;
    }
    v6 = 0;
  }
  if (SHIBYTE(v18) < 0)
    operator delete(v17[0]);
  v17[0] = &v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v17);
  return v6;
}

void sub_1BF8BF1D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  a16 = &a22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

BOOL siri::dialogengine::CopyFile(uint64_t *a1, std::string *a2)
{
  _BOOL8 v4;
  std::string __p;

  if (!siri::dialogengine::FileExists(a1))
    return 0;
  siri::dialogengine::ReadFileToString((uint64_t)a1, &__p);
  v4 = siri::dialogengine::WriteFileFromString(a2, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v4;
}

void sub_1BF8BF28C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL siri::dialogengine::DeleteDir(uint64_t *a1)
{
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)a1 + 23))
      return 0;
    return rmdir((const char *)a1) == 0;
  }
  if (a1[1])
  {
    a1 = (uint64_t *)*a1;
    return rmdir((const char *)a1) == 0;
  }
  return 0;
}

BOOL siri::dialogengine::DeleteDirTree(char *a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  __int128 v6;
  const char *v7;
  const char *v8;
  _BOOL8 v9;
  char *v11[2];
  char v12;
  std::string v13;
  uint64_t v14;
  unsigned __int8 *v15;

  siri::dialogengine::ListDirRecursively(a1, (uint64_t)&v14);
  v2 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v15[-v14] >> 3));
  if (v15 == (unsigned __int8 *)v14)
    v3 = 0;
  else
    v3 = v2;
  std::__introsort<std::_ClassicAlgPolicy,siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth &,std::string*,false>(v14, v15, v3, 1);
  v4 = v14;
  v5 = v15;
  if ((unsigned __int8 *)v14 == v15)
  {
LABEL_25:
    v9 = siri::dialogengine::DeleteDir((uint64_t *)a1);
    goto LABEL_31;
  }
  while (1)
  {
    if (*(char *)(v4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)v4, *(_QWORD *)(v4 + 8));
    }
    else
    {
      v6 = *(_OWORD *)v4;
      v13.__r_.__value_.__r.__words[2] = *(_QWORD *)(v4 + 16);
      *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v6;
    }
    siri::dialogengine::JoinPath((uint64_t)a1, (uint64_t)&v13, (uint64_t)v11);
    if (!siri::dialogengine::FileExists((uint64_t *)v11))
      break;
    if (v12 >= 0)
      v7 = (const char *)v11;
    else
      v7 = v11[0];
    if (unlink(v7))
      goto LABEL_26;
LABEL_20:
    if (v12 < 0)
      operator delete(v11[0]);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
    v4 += 24;
    if ((unsigned __int8 *)v4 == v5)
      goto LABEL_25;
  }
  if (v12 < 0)
  {
    if (!v11[1])
      goto LABEL_27;
    v8 = v11[0];
  }
  else
  {
    if (!v12)
      goto LABEL_28;
    v8 = (const char *)v11;
  }
  if (!rmdir(v8))
    goto LABEL_20;
LABEL_26:
  if ((v12 & 0x80000000) == 0)
    goto LABEL_28;
LABEL_27:
  operator delete(v11[0]);
LABEL_28:
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  v9 = 0;
LABEL_31:
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
  return v9;
}

void sub_1BF8BF458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  a16 = &a22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

void siri::dialogengine::ListDirRecursively(const char *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v4;
  __int128 v5;
  unint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 *v9;
  __int128 *v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  std::string *v19;
  std::string *v20;
  __int128 v21;
  uint64_t v22;
  int v23;
  __int128 *i;
  void *__p[2];
  std::string::size_type v26;
  std::string v27;
  _QWORD v28[3];
  void *v29[2];
  char v30;
  std::string v31;
  __int128 *v32;
  __int128 *v33;
  std::__split_buffer<std::string> __v;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  siri::dialogengine::ListDir(a1, (uint64_t)&v32);
  v4 = v32;
  for (i = v33; v4 != i; v4 = (__int128 *)((char *)v4 + 24))
  {
    if (*((char *)v4 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
    }
    else
    {
      v5 = *v4;
      v31.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v5;
    }
    v6 = *(_QWORD *)(a2 + 8);
    if (v6 >= *(_QWORD *)(a2 + 16))
    {
      v8 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a2, (__int128 *)&v31);
    }
    else
    {
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(*(std::string **)(a2 + 8), v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_);
      }
      else
      {
        v7 = *(_OWORD *)&v31.__r_.__value_.__l.__data_;
        *(_QWORD *)(v6 + 16) = *((_QWORD *)&v31.__r_.__value_.__l + 2);
        *(_OWORD *)v6 = v7;
      }
      v8 = v6 + 24;
      *(_QWORD *)(a2 + 8) = v6 + 24;
    }
    *(_QWORD *)(a2 + 8) = v8;
    siri::dialogengine::JoinPath((uint64_t)a1, (uint64_t)&v31, (uint64_t)v29);
    if (siri::dialogengine::DirExists((uint64_t *)v29))
    {
      siri::dialogengine::ListDirRecursively(v28, v29);
      v10 = (__int128 *)v28[0];
      v9 = (__int128 *)v28[1];
      while (v10 != v9)
      {
        if (*((char *)v10 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
        }
        else
        {
          v11 = *v10;
          v27.__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 2);
          *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v11;
        }
        siri::dialogengine::JoinPath((uint64_t)&v31, (uint64_t)&v27, (uint64_t)__p);
        v13 = *(_QWORD *)(a2 + 8);
        v12 = *(_QWORD *)(a2 + 16);
        if (v13 >= v12)
        {
          v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - *(_QWORD *)a2) >> 3);
          v16 = v15 + 1;
          if (v15 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<BOOL>::__throw_length_error[abi:ne180100]();
          v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - *(_QWORD *)a2) >> 3);
          if (2 * v17 > v16)
            v16 = 2 * v17;
          if (v17 >= 0x555555555555555)
            v18 = 0xAAAAAAAAAAAAAAALL;
          else
            v18 = v16;
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
          if (v18)
            v19 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v18);
          else
            v19 = 0;
          v20 = v19 + v15;
          __v.__first_ = v19;
          __v.__begin_ = v20;
          __v.__end_cap_.__value_ = &v19[v18];
          v21 = *(_OWORD *)__p;
          v20->__r_.__value_.__r.__words[2] = v26;
          *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
          __p[1] = 0;
          v26 = 0;
          __p[0] = 0;
          __v.__end_ = v20 + 1;
          std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
          v22 = *(_QWORD *)(a2 + 8);
          std::__split_buffer<std::string>::~__split_buffer(&__v);
          v23 = SHIBYTE(v26);
          *(_QWORD *)(a2 + 8) = v22;
          if (v23 < 0)
            operator delete(__p[0]);
        }
        else
        {
          v14 = *(_OWORD *)__p;
          *(_QWORD *)(v13 + 16) = v26;
          *(_OWORD *)v13 = v14;
          *(_QWORD *)(a2 + 8) = v13 + 24;
        }
        if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v27.__r_.__value_.__l.__data_);
        v10 = (__int128 *)((char *)v10 + 24);
      }
      __v.__first_ = (std::__split_buffer<std::string>::pointer)v28;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
    }
    if (v30 < 0)
      operator delete(v29[0]);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
  }
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
}

void sub_1BF8BF758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth &,std::string*,false>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, char a4)
{
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 *v27;
  __int128 v28;
  __int128 v29;
  BOOL v30;
  __int128 v31;
  unsigned __int8 *v32;
  _BOOL4 v33;
  unint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 *v44;
  __int128 *v45;
  __int128 *v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  unsigned __int8 *v55;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 *v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  int64_t v66;
  int64_t v67;
  int64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  int64_t v78;
  _OWORD *v79;
  uint64_t v80;
  _OWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  __int128 v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  unsigned __int8 *v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  BOOL v102;
  __int128 v103;
  unsigned __int8 *v104;
  uint64_t v105;
  unint64_t v106;
  char v107;
  __int128 v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;

  v112 = *MEMORY[0x1E0C80C00];
LABEL_2:
  v8 = a2 - 24;
  v104 = a2 - 48;
  v106 = (unint64_t)a2;
  v9 = a2 - 72;
  v10 = a1;
  while (2)
  {
    a1 = v10;
    v11 = (uint64_t)&a2[-v10];
    v12 = 0xAAAAAAAAAAAAAAABLL * (v11 >> 3);
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()(v8, (unsigned __int8 *)a1))
        {
          v41 = *(_OWORD *)a1;
          v109 = *(_QWORD *)(a1 + 16);
          v108 = v41;
          v42 = *(_OWORD *)v8;
          *(_QWORD *)(a1 + 16) = *((_QWORD *)v8 + 2);
          *(_OWORD *)a1 = v42;
          v43 = v108;
          *((_QWORD *)v8 + 2) = v109;
          *(_OWORD *)v8 = v43;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth &,std::string*>((unsigned __int8 *)a1, (unsigned __int8 *)(a1 + 24), v8);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth &,std::string*>(a1, (unsigned __int8 *)(a1 + 24), (unsigned __int8 *)(a1 + 48), (__int128 *)v8);
        return;
      case 5uLL:
        v44 = (__int128 *)(a1 + 24);
        v45 = (__int128 *)(a1 + 48);
        v46 = (__int128 *)(a1 + 72);
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth &,std::string*>(a1, (unsigned __int8 *)(a1 + 24), (unsigned __int8 *)(a1 + 48), (__int128 *)(a1 + 72));
        if (siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()(v8, (unsigned __int8 *)(a1 + 72)))
        {
          v108 = *v46;
          v47 = v108;
          v109 = *(_QWORD *)(a1 + 88);
          v48 = v109;
          v49 = *((_QWORD *)v8 + 2);
          *v46 = *(_OWORD *)v8;
          *(_QWORD *)(a1 + 88) = v49;
          *((_QWORD *)v8 + 2) = v48;
          *(_OWORD *)v8 = v47;
          if (siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()((unsigned __int8 *)(a1 + 72), (unsigned __int8 *)(a1 + 48)))
          {
            v50 = *(_QWORD *)(a1 + 64);
            v51 = *v45;
            *v45 = *v46;
            *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 88);
            *v46 = v51;
            *(_QWORD *)(a1 + 88) = v50;
            if (siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()((unsigned __int8 *)(a1 + 48), (unsigned __int8 *)(a1 + 24)))
            {
              v52 = *(_QWORD *)(a1 + 40);
              v53 = *v44;
              *v44 = *v45;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
              *v45 = v53;
              *(_QWORD *)(a1 + 64) = v52;
              if (siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()((unsigned __int8 *)(a1 + 24), (unsigned __int8 *)a1))
              {
                v54 = *(_OWORD *)a1;
                v109 = *(_QWORD *)(a1 + 16);
                v108 = v54;
                *(_OWORD *)a1 = *v44;
                *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
                *v44 = v108;
                *(_QWORD *)(a1 + 40) = v109;
              }
            }
          }
        }
        return;
      default:
        if (v11 <= 575)
        {
          v55 = (unsigned __int8 *)(a1 + 24);
          v57 = (unsigned __int8 *)a1 == a2 || v55 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v57)
            {
              v58 = 0;
              v59 = a1;
              do
              {
                v60 = (unsigned __int8 *)v59;
                v59 = (uint64_t)v55;
                if (siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()(v55, v60))
                {
                  v61 = *(_OWORD *)v59;
                  v109 = *(_QWORD *)(v59 + 16);
                  v108 = v61;
                  *(_QWORD *)(v59 + 8) = 0;
                  *(_QWORD *)(v59 + 16) = 0;
                  *(_QWORD *)v59 = 0;
                  v62 = v58;
                  while (1)
                  {
                    v63 = a1 + v62;
                    *(_OWORD *)(v63 + 24) = *(_OWORD *)(a1 + v62);
                    *(_QWORD *)(v63 + 40) = *(_QWORD *)(a1 + v62 + 16);
                    *(_BYTE *)(v63 + 23) = 0;
                    *(_BYTE *)v63 = 0;
                    if (!v62)
                      break;
                    v62 -= 24;
                    if (!siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()((unsigned __int8 *)&v108, (unsigned __int8 *)(v62 + a1)))
                    {
                      v64 = a1 + v62 + 24;
                      goto LABEL_84;
                    }
                  }
                  v64 = a1;
LABEL_84:
                  v65 = v108;
                  *(_QWORD *)(v64 + 16) = v109;
                  *(_OWORD *)v64 = v65;
                }
                v55 = (unsigned __int8 *)(v59 + 24);
                v58 += 24;
              }
              while ((unsigned __int8 *)(v59 + 24) != a2);
            }
          }
          else if (!v57)
          {
            do
            {
              v98 = (unsigned __int8 *)a1;
              a1 = (uint64_t)v55;
              if (siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()(v55, v98))
              {
                v99 = *(_OWORD *)a1;
                v109 = *(_QWORD *)(a1 + 16);
                v108 = v99;
                *(_QWORD *)(a1 + 8) = 0;
                *(_QWORD *)(a1 + 16) = 0;
                *(_QWORD *)a1 = 0;
                v100 = a1;
                do
                {
                  v101 = v100 - 24;
                  *(_OWORD *)v100 = *(_OWORD *)(v100 - 24);
                  *(_QWORD *)(v100 + 16) = *(_QWORD *)(v100 - 8);
                  *(_BYTE *)(v100 - 1) = 0;
                  *(_BYTE *)(v100 - 24) = 0;
                  v102 = siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()((unsigned __int8 *)&v108, (unsigned __int8 *)(v100 - 48));
                  v100 = v101;
                }
                while (v102);
                v103 = v108;
                *(_QWORD *)(v101 + 16) = v109;
                *(_OWORD *)v101 = v103;
              }
              v55 = (unsigned __int8 *)(a1 + 24);
            }
            while ((unsigned __int8 *)(a1 + 24) != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((unsigned __int8 *)a1 != a2)
          {
            v66 = (v12 - 2) >> 1;
            v67 = v66;
            do
            {
              v68 = v67;
              if (v66 >= v67)
              {
                v69 = (2 * v67) | 1;
                v70 = a1 + 24 * v69;
                if (2 * v67 + 2 < (uint64_t)v12
                  && siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()((unsigned __int8 *)(a1 + 24 * v69), (unsigned __int8 *)(v70 + 24)))
                {
                  v70 += 24;
                  v69 = 2 * v68 + 2;
                }
                v71 = a1 + 24 * v68;
                if (!siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()((unsigned __int8 *)v70, (unsigned __int8 *)v71))
                {
                  v72 = *(_OWORD *)v71;
                  v109 = *(_QWORD *)(v71 + 16);
                  v108 = v72;
                  *(_QWORD *)(v71 + 8) = 0;
                  *(_QWORD *)(v71 + 16) = 0;
                  *(_QWORD *)v71 = 0;
                  do
                  {
                    v73 = v70;
                    v74 = *(_OWORD *)v70;
                    *(_QWORD *)(v71 + 16) = *(_QWORD *)(v70 + 16);
                    *(_OWORD *)v71 = v74;
                    *(_BYTE *)(v70 + 23) = 0;
                    *(_BYTE *)v70 = 0;
                    if (v66 < v69)
                      break;
                    v75 = (2 * v69) | 1;
                    v70 = a1 + 24 * v75;
                    v76 = 2 * v69 + 2;
                    if (v76 < (uint64_t)v12
                      && siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()((unsigned __int8 *)(a1 + 24 * v75), (unsigned __int8 *)(v70 + 24)))
                    {
                      v70 += 24;
                      v75 = v76;
                    }
                    v71 = v73;
                    v69 = v75;
                  }
                  while (!siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()((unsigned __int8 *)v70, (unsigned __int8 *)&v108));
                  v77 = v108;
                  *(_QWORD *)(v73 + 16) = v109;
                  *(_OWORD *)v73 = v77;
                }
              }
              v67 = v68 - 1;
            }
            while (v68);
            v78 = v11 / 0x18uLL;
            v79 = (_OWORD *)v106;
            do
            {
              v80 = 0;
              v81 = v79;
              v105 = *(_QWORD *)a1;
              *(_QWORD *)&v110 = *(_QWORD *)(a1 + 8);
              *(_QWORD *)((char *)&v110 + 7) = *(_QWORD *)(a1 + 15);
              v107 = *(_BYTE *)(a1 + 23);
              *(_QWORD *)(a1 + 8) = 0;
              *(_QWORD *)(a1 + 16) = 0;
              *(_QWORD *)a1 = 0;
              v82 = a1;
              do
              {
                v83 = v82 + 24 * v80 + 24;
                v84 = 2 * v80;
                v80 = (2 * v80) | 1;
                v85 = v84 + 2;
                if (v84 + 2 < v78
                  && siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()((unsigned __int8 *)v83, (unsigned __int8 *)(v83 + 24)))
                {
                  v83 += 24;
                  v80 = v85;
                }
                if (*(char *)(v82 + 23) < 0)
                  operator delete(*(void **)v82);
                v86 = *(_OWORD *)v83;
                *(_QWORD *)(v82 + 16) = *(_QWORD *)(v83 + 16);
                *(_OWORD *)v82 = v86;
                *(_BYTE *)(v83 + 23) = 0;
                *(_BYTE *)v83 = 0;
                v82 = v83;
              }
              while (v80 <= (uint64_t)((unint64_t)(v78 - 2) >> 1));
              v79 = (_OWORD *)((char *)v79 - 24);
              if ((_OWORD *)v83 == (_OWORD *)((char *)v81 - 24))
              {
                *(_QWORD *)v83 = v105;
                v96 = *(_QWORD *)((char *)&v110 + 7);
                *(_QWORD *)(v83 + 8) = v110;
                *(_QWORD *)(v83 + 15) = v96;
                *(_BYTE *)(v83 + 23) = v107;
              }
              else
              {
                v87 = *v79;
                *(_QWORD *)(v83 + 16) = *((_QWORD *)v81 - 1);
                *(_OWORD *)v83 = v87;
                *((_QWORD *)v81 - 3) = v105;
                v88 = v110;
                *(_QWORD *)((char *)v81 - 9) = *(_QWORD *)((char *)&v110 + 7);
                *((_QWORD *)v81 - 2) = v88;
                *((_BYTE *)v81 - 1) = v107;
                v89 = v83 - a1 + 24;
                if (v89 >= 25)
                {
                  v90 = (v89 / 0x18uLL - 2) >> 1;
                  v91 = a1 + 24 * v90;
                  if (siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()((unsigned __int8 *)v91, (unsigned __int8 *)v83))
                  {
                    v92 = *(_OWORD *)v83;
                    v109 = *(_QWORD *)(v83 + 16);
                    v108 = v92;
                    *(_QWORD *)(v83 + 8) = 0;
                    *(_QWORD *)(v83 + 16) = 0;
                    *(_QWORD *)v83 = 0;
                    do
                    {
                      v93 = v91;
                      v94 = *(_OWORD *)v91;
                      *(_QWORD *)(v83 + 16) = *(_QWORD *)(v91 + 16);
                      *(_OWORD *)v83 = v94;
                      *(_BYTE *)(v91 + 23) = 0;
                      *(_BYTE *)v91 = 0;
                      if (!v90)
                        break;
                      v90 = (v90 - 1) >> 1;
                      v91 = a1 + 24 * v90;
                      v83 = v93;
                    }
                    while (siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()((unsigned __int8 *)v91, (unsigned __int8 *)&v108));
                    v95 = v108;
                    *(_QWORD *)(v93 + 16) = v109;
                    *(_OWORD *)v93 = v95;
                  }
                }
              }
            }
            while (v78-- > 2);
          }
          return;
        }
        v13 = a1 + 24 * (v12 >> 1);
        if ((unint64_t)v11 < 0xC01)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth &,std::string*>((unsigned __int8 *)(a1 + 24 * (v12 >> 1)), (unsigned __int8 *)a1, v8);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth &,std::string*>((unsigned __int8 *)a1, (unsigned __int8 *)(a1 + 24 * (v12 >> 1)), v8);
          v14 = 3 * (v12 >> 1);
          v15 = (unsigned __int8 *)(a1 + 24 * (v12 >> 1) - 24);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth &,std::string*>((unsigned __int8 *)(a1 + 24), v15, v104);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth &,std::string*>((unsigned __int8 *)(a1 + 48), (unsigned __int8 *)(a1 + 24 + 8 * v14), v9);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth &,std::string*>(v15, (unsigned __int8 *)v13, (unsigned __int8 *)(a1 + 24 + 8 * v14));
          v16 = *(_OWORD *)a1;
          v109 = *(_QWORD *)(a1 + 16);
          v108 = v16;
          v17 = *(_QWORD *)(v13 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v13;
          *(_QWORD *)(a1 + 16) = v17;
          v18 = v108;
          *(_QWORD *)(v13 + 16) = v109;
          *(_OWORD *)v13 = v18;
        }
        --a3;
        a2 = (unsigned __int8 *)v106;
        if ((a4 & 1) == 0
          && !siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()((unsigned __int8 *)(a1 - 24), (unsigned __int8 *)a1))
        {
          v31 = *(_OWORD *)a1;
          v111 = *(_QWORD *)(a1 + 16);
          v110 = v31;
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)a1 = 0;
          if (siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()((unsigned __int8 *)&v110, v8))
          {
            v10 = a1;
            do
              v10 += 24;
            while (!siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()((unsigned __int8 *)&v110, (unsigned __int8 *)v10));
          }
          else
          {
            v32 = (unsigned __int8 *)(a1 + 24);
            do
            {
              v10 = (unint64_t)v32;
              if ((unint64_t)v32 >= v106)
                break;
              v33 = siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()((unsigned __int8 *)&v110, v32);
              v32 = (unsigned __int8 *)(v10 + 24);
            }
            while (!v33);
          }
          v34 = v106;
          if (v10 < v106)
          {
            v34 = v106;
            do
              v34 -= 24;
            while (siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()((unsigned __int8 *)&v110, (unsigned __int8 *)v34));
          }
          while (v10 < v34)
          {
            v35 = *(_OWORD *)v10;
            v109 = *(_QWORD *)(v10 + 16);
            v108 = v35;
            v36 = *(_OWORD *)v34;
            *(_QWORD *)(v10 + 16) = *(_QWORD *)(v34 + 16);
            *(_OWORD *)v10 = v36;
            v37 = v108;
            *(_QWORD *)(v34 + 16) = v109;
            *(_OWORD *)v34 = v37;
            do
              v10 += 24;
            while (!siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()((unsigned __int8 *)&v110, (unsigned __int8 *)v10));
            do
              v34 -= 24;
            while (siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()((unsigned __int8 *)&v110, (unsigned __int8 *)v34));
          }
          v38 = (__int128 *)(v10 - 24);
          if (v10 - 24 == a1)
          {
            if (*(char *)(v10 - 1) < 0)
              operator delete(*(void **)a1);
          }
          else
          {
            if (*(char *)(a1 + 23) < 0)
              operator delete(*(void **)a1);
            v39 = *v38;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v10 - 8);
            *(_OWORD *)a1 = v39;
            *(_BYTE *)(v10 - 1) = 0;
            *(_BYTE *)(v10 - 24) = 0;
          }
          a4 = 0;
          v40 = v110;
          *(_QWORD *)(v10 - 8) = v111;
          *v38 = v40;
          continue;
        }
        v19 = *(_OWORD *)a1;
        v111 = *(_QWORD *)(a1 + 16);
        v110 = v19;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)a1 = 0;
        v20 = (unsigned __int8 *)a1;
        do
        {
          v21 = v20;
          v20 += 24;
        }
        while (siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()(v20, (unsigned __int8 *)&v110));
        v22 = (unsigned __int8 *)v106;
        if (v21 == (unsigned __int8 *)a1)
        {
          v22 = (unsigned __int8 *)v106;
          do
          {
            if (v20 >= v22)
              break;
            v22 -= 24;
          }
          while (!siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()(v22, (unsigned __int8 *)&v110));
        }
        else
        {
          do
            v22 -= 24;
          while (!siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()(v22, (unsigned __int8 *)&v110));
        }
        v10 = (unint64_t)v20;
        if (v20 < v22)
        {
          v23 = v22;
          do
          {
            v108 = *(_OWORD *)v10;
            v24 = v108;
            v109 = *(_QWORD *)(v10 + 16);
            v25 = v109;
            v26 = *((_QWORD *)v23 + 2);
            *(_OWORD *)v10 = *(_OWORD *)v23;
            *(_QWORD *)(v10 + 16) = v26;
            *((_QWORD *)v23 + 2) = v25;
            *(_OWORD *)v23 = v24;
            do
              v10 += 24;
            while (siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()((unsigned __int8 *)v10, (unsigned __int8 *)&v110));
            do
              v23 -= 24;
            while (!siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()(v23, (unsigned __int8 *)&v110));
          }
          while (v10 < (unint64_t)v23);
        }
        v27 = (__int128 *)(v10 - 24);
        if (v10 - 24 == a1)
        {
          if (*(char *)(v10 - 1) < 0)
            operator delete(*(void **)a1);
        }
        else
        {
          if (*(char *)(a1 + 23) < 0)
            operator delete(*(void **)a1);
          v28 = *v27;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v10 - 8);
          *(_OWORD *)a1 = v28;
          *(_BYTE *)(v10 - 1) = 0;
          *(_BYTE *)(v10 - 24) = 0;
        }
        v29 = v110;
        *(_QWORD *)(v10 - 8) = v111;
        *v27 = v29;
        if (v20 < v22)
        {
LABEL_34:
          std::__introsort<std::_ClassicAlgPolicy,siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth &,std::string*,false>(a1, v10 - 24, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth &,std::string*>(a1, v10 - 24);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth &,std::string*>(v10, v106))
        {
          if (v30)
            continue;
          goto LABEL_34;
        }
        a2 = (unsigned __int8 *)(v10 - 24);
        if (!v30)
          goto LABEL_2;
        return;
    }
  }
}

BOOL siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  BOOL v3;
  unsigned __int8 *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unint64_t v10;
  int v11;

  v2 = (char)a1[23];
  v3 = v2 < 0;
  if (v2 >= 0)
    v4 = a1;
  else
    v4 = *(unsigned __int8 **)a1;
  if (v3)
    v5 = *((_QWORD *)a1 + 1);
  else
    v5 = a1[23];
  if (v5)
  {
    v6 = 0;
    do
    {
      v7 = *v4++;
      if (v7 == 47)
        ++v6;
      --v5;
    }
    while (v5);
  }
  else
  {
    v6 = 0;
  }
  v8 = a2[23];
  if ((v8 & 0x80u) == 0)
    v9 = a2;
  else
    v9 = *(unsigned __int8 **)a2;
  v10 = 0;
  if ((v8 & 0x80u) != 0)
    v8 = *((_QWORD *)a2 + 1);
  for (; v8; --v8)
  {
    v11 = *v9++;
    if (v11 == 47)
      ++v10;
  }
  return v6 > v10;
}

BOOL std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth &,std::string*>(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  BOOL v6;
  _BOOL8 result;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  v6 = siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()(a2, a1);
  result = siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()(a3, a2);
  if (v6)
  {
    if (result)
    {
      v8 = *((_QWORD *)a1 + 2);
      v9 = *(_OWORD *)a1;
      v10 = *((_QWORD *)a3 + 2);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *((_QWORD *)a1 + 2) = v10;
    }
    else
    {
      v17 = *((_QWORD *)a1 + 2);
      v18 = *(_OWORD *)a1;
      v19 = *((_QWORD *)a2 + 2);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_QWORD *)a1 + 2) = v19;
      *(_OWORD *)a2 = v18;
      *((_QWORD *)a2 + 2) = v17;
      result = siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()(a3, a2);
      if (!result)
        return result;
      v8 = *((_QWORD *)a2 + 2);
      v9 = *(_OWORD *)a2;
      v20 = *((_QWORD *)a3 + 2);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_QWORD *)a2 + 2) = v20;
    }
    *(_OWORD *)a3 = v9;
    *((_QWORD *)a3 + 2) = v8;
  }
  else if (result)
  {
    v11 = *((_QWORD *)a2 + 2);
    v12 = *(_OWORD *)a2;
    v13 = *((_QWORD *)a3 + 2);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *((_QWORD *)a2 + 2) = v13;
    *(_OWORD *)a3 = v12;
    *((_QWORD *)a3 + 2) = v11;
    result = siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()(a2, a1);
    if (result)
    {
      v14 = *((_QWORD *)a1 + 2);
      v15 = *(_OWORD *)a1;
      v16 = *((_QWORD *)a2 + 2);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_QWORD *)a1 + 2) = v16;
      *(_OWORD *)a2 = v15;
      *((_QWORD *)a2 + 2) = v14;
    }
  }
  return result;
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth &,std::string*>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, __int128 *a4)
{
  __n128 result;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth &,std::string*>((unsigned __int8 *)a1, a2, a3);
  if (siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()((unsigned __int8 *)a4, a3))
  {
    v9 = *((_QWORD *)a3 + 2);
    v10 = *(_OWORD *)a3;
    v11 = *((_QWORD *)a4 + 2);
    *(_OWORD *)a3 = *a4;
    *((_QWORD *)a3 + 2) = v11;
    *a4 = v10;
    *((_QWORD *)a4 + 2) = v9;
    if (siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()(a3, a2))
    {
      v12 = *((_QWORD *)a2 + 2);
      v13 = *(_OWORD *)a2;
      v14 = *((_QWORD *)a3 + 2);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_QWORD *)a2 + 2) = v14;
      *(_OWORD *)a3 = v13;
      *((_QWORD *)a3 + 2) = v12;
      if (siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()(a2, (unsigned __int8 *)a1))
      {
        v15 = *(_QWORD *)(a1 + 16);
        result = *(__n128 *)a1;
        v16 = *((_QWORD *)a2 + 2);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = v16;
        *(__n128 *)a2 = result;
        *((_QWORD *)a2 + 2) = v15;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth &,std::string*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 *v17;
  __int128 *v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = a2 - 24;
      if (siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()((unsigned __int8 *)(a2 - 24), (unsigned __int8 *)a1))
      {
        v7 = *(_QWORD *)(a1 + 16);
        v8 = *(_OWORD *)a1;
        v9 = *(_QWORD *)(v6 + 16);
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *(_QWORD *)(a1 + 16) = v9;
        *(_OWORD *)v6 = v8;
        *(_QWORD *)(v6 + 16) = v7;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth &,std::string*>((unsigned __int8 *)a1, (unsigned __int8 *)(a1 + 24), (unsigned __int8 *)(a2 - 24));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth &,std::string*>(a1, (unsigned __int8 *)(a1 + 24), (unsigned __int8 *)(a1 + 48), (__int128 *)(a2 - 24));
      return 1;
    case 5uLL:
      v17 = (__int128 *)(a1 + 24);
      v18 = (__int128 *)(a1 + 48);
      v19 = (__int128 *)(a1 + 72);
      v20 = a2 - 24;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth &,std::string*>(a1, (unsigned __int8 *)(a1 + 24), (unsigned __int8 *)(a1 + 48), (__int128 *)(a1 + 72));
      if (siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()((unsigned __int8 *)v20, (unsigned __int8 *)(a1 + 72)))
      {
        v21 = *(_QWORD *)(a1 + 88);
        v22 = *v19;
        v23 = *(_QWORD *)(v20 + 16);
        *v19 = *(_OWORD *)v20;
        *(_QWORD *)(a1 + 88) = v23;
        *(_OWORD *)v20 = v22;
        *(_QWORD *)(v20 + 16) = v21;
        if (siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()((unsigned __int8 *)(a1 + 72), (unsigned __int8 *)(a1 + 48)))
        {
          v24 = *(_QWORD *)(a1 + 64);
          v25 = *v18;
          *v18 = *v19;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 88);
          *v19 = v25;
          *(_QWORD *)(a1 + 88) = v24;
          if (siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()((unsigned __int8 *)(a1 + 48), (unsigned __int8 *)(a1 + 24)))
          {
            v26 = *(_QWORD *)(a1 + 40);
            v27 = *v17;
            *v17 = *v18;
            *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
            *v18 = v27;
            *(_QWORD *)(a1 + 64) = v26;
            if (siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()((unsigned __int8 *)(a1 + 24), (unsigned __int8 *)a1))
            {
              v28 = *(_QWORD *)(a1 + 16);
              v29 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v17;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
              *v17 = v29;
              *(_QWORD *)(a1 + 40) = v28;
            }
          }
        }
      }
      return 1;
    default:
      v10 = (unsigned __int8 *)(a1 + 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth &,std::string*>((unsigned __int8 *)a1, (unsigned __int8 *)(a1 + 24), (unsigned __int8 *)(a1 + 48));
      v11 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    if (siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()((unsigned __int8 *)v11, v10))
    {
      v30 = *(_OWORD *)v11;
      v31 = *(_QWORD *)(v11 + 16);
      *(_QWORD *)(v11 + 8) = 0;
      *(_QWORD *)(v11 + 16) = 0;
      *(_QWORD *)v11 = 0;
      v14 = v12;
      while (1)
      {
        v15 = a1 + v14;
        *(_OWORD *)(v15 + 72) = *(_OWORD *)(a1 + v14 + 48);
        *(_QWORD *)(v15 + 88) = *(_QWORD *)(a1 + v14 + 64);
        *(_BYTE *)(v15 + 71) = 0;
        *(_BYTE *)(v15 + 48) = 0;
        if (v14 == -48)
          break;
        v14 -= 24;
        if (!siri::dialogengine::DeleteDirTree(std::string const&)::compareDirectoryDepth::operator()((unsigned __int8 *)&v30, (unsigned __int8 *)(v15 + 24)))
        {
          v16 = a1 + v14 + 72;
          goto LABEL_13;
        }
      }
      v16 = a1;
LABEL_13:
      *(_OWORD *)v16 = v30;
      *(_QWORD *)(v16 + 16) = v31;
      if (++v13 == 8)
        return v11 + 24 == a2;
    }
    v10 = (unsigned __int8 *)v11;
    v12 += 24;
    v11 += 24;
    if (v11 == a2)
      return 1;
  }
}

void siri::dialogengine::ExecuteShellCommand(const char *a1@<X0>, int *a2@<X1>, std::string *a3@<X8>)
{
  const char *v5;
  FILE *v6;
  int v7;
  const char *v8;
  uint64_t v9;
  unsigned int v10;
  char *v11;
  uint64_t v12;
  int *v13;
  char *v14;
  const char *v15;
  std::string::value_type __s[2048];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  v6 = popen(a1, "r");
  if (!v6)
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"Could not execute command!", v5);
  while (!feof(v6))
  {
    if (fgets(__s, 2048, v6))
      std::string::append(a3, __s);
  }
  v7 = pclose(v6);
  if (a2)
    *a2 = v7;
  if (v7 == -1)
  {
    v12 = *__error();
    v13 = __error();
    v14 = strerror(*v13);
    siri::dialogengine::Log::Error((siri::dialogengine::Log *)"catutil child process pclose returned -1. errno %d: %s", v15, v12, v14);
  }
  else
  {
    LODWORD(v9) = v7 & 0x7F;
    if ((_DWORD)v9 != 127)
    {
      v10 = BYTE1(v7);
      if ((v7 & 0x7F) != 0)
        v11 = "catutil child process killed, signal = %d";
      else
        v11 = "catutil child process exited, status = %d";
      if ((_DWORD)v9)
        v9 = v9;
      else
        v9 = v10;
      goto LABEL_18;
    }
    v9 = (v7 >> 8);
    if ((_DWORD)v9 != 19)
    {
      v11 = "catutil child process stopped, signal = %d";
LABEL_18:
      siri::dialogengine::Log::Debug((siri::dialogengine::Log *)v11, v8, v9);
    }
  }
}

void sub_1BF8C08AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t YAML::Exp::ParseHex(uint64_t result, _DWORD *a2)
{
  uint64_t v2;
  int v3;
  _QWORD *v4;
  int v5;
  int v6;
  int v7;
  _QWORD *exception;
  __int128 v10;

  v2 = *(unsigned __int8 *)(result + 23);
  v3 = (char)v2;
  if ((v2 & 0x80u) != 0)
    v2 = *(_QWORD *)(result + 8);
  if (!v2)
    return 0;
  v4 = (_QWORD *)result;
  LODWORD(result) = 0;
  if (v3 < 0)
    v4 = (_QWORD *)*v4;
  do
  {
    v6 = *(char *)v4;
    v4 = (_QWORD *)((char *)v4 + 1);
    v5 = v6;
    if ((v6 - 97) >= 6)
    {
      if ((v5 - 65) >= 6)
      {
        if ((v5 - 48) >= 0xA)
        {
          exception = __cxa_allocate_exception(0x38uLL);
          std::string::basic_string[abi:ne180100]<0>(&v10, "bad character found while scanning hex number");
          YAML::Exception::Exception((uint64_t)exception, a2, &v10);
          *exception = &off_1E793AF28;
        }
        v7 = -48;
      }
      else
      {
        v7 = -55;
      }
    }
    else
    {
      v7 = -87;
    }
    result = (v7 + v5 + 16 * result);
    --v2;
  }
  while (v2);
  return result;
}

void sub_1BF8C09D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t YAML::Exception::Exception(uint64_t a1, _DWORD *a2, __int128 *a3)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  const std::string::value_type *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::string *v16;
  __int128 v17;
  std::string v19;
  _QWORD v20[2];
  _QWORD v21[11];
  char v22;
  uint64_t v23;

  if (*a2 == -1 && a2[1] == -1 && a2[2] == -1)
  {
    if (*((char *)a3 + 23) < 0)
      std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
    else
      v19 = *(std::string *)a3;
  }
  else
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"yaml-cpp: error at line ", 24);
    v8 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", column ", 9);
    v9 = (_QWORD *)std::ostream::operator<<();
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)": ", 2);
    v11 = *((char *)a3 + 23);
    if (v11 >= 0)
      v12 = (const std::string::value_type *)a3;
    else
      v12 = *(const std::string::value_type **)a3;
    if (v11 >= 0)
      v13 = *((unsigned __int8 *)a3 + 23);
    else
      v13 = *((_QWORD *)a3 + 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v12, v13);
    std::stringbuf::str();
    v20[0] = *MEMORY[0x1E0DE4F50];
    v14 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    *(_QWORD *)((char *)v20 + *(_QWORD *)(v20[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
    v21[0] = v14;
    v21[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v22 < 0)
      operator delete((void *)v21[9]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1C3B8D80C](&v23);
  }
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v19);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  *(_QWORD *)a1 = &off_1E793AF50;
  v15 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 24) = a2[2];
  *(_QWORD *)(a1 + 16) = v15;
  v16 = (std::string *)(a1 + 32);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v17 = *a3;
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
  }
  return a1;
}

void sub_1BF8C0BE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::runtime_error *v15;

  std::runtime_error::~runtime_error(v15);
  _Unwind_Resume(a1);
}

uint64_t YAML::Exp::Str@<X0>(uint64_t this@<X0>, _BYTE *a2@<X8>)
{
  a2[23] = 1;
  *a2 = this;
  a2[1] = 0;
  return this;
}

void YAML::Exp::Escape(YAML::Exp *this@<X0>, YAML::Stream *a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  std::string::value_type v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  std::string *v11;
  void *v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  _QWORD *exception;
  int v22;
  void *__p;
  char v24;
  std::string::value_type v25[8];
  char v26;
  std::string::value_type v27[8];
  char v28;
  std::string v29;
  std::string __s;
  std::string v31;
  std::string v32;

  memset(&v32, 0, sizeof(v32));
  if ((int)a2 >= 1)
  {
    v5 = (int)a2;
    do
    {
      v6 = YAML::Stream::get(this);
      std::string::push_back(&v32, v6);
      --v5;
    }
    while (v5);
  }
  v7 = *((_DWORD *)this + 4);
  v31.__r_.__value_.__r.__words[0] = *((_QWORD *)this + 1);
  LODWORD(v31.__r_.__value_.__r.__words[1]) = v7;
  v8 = YAML::Exp::ParseHex((uint64_t)&v32, &v31);
  v9 = v8;
  if (HIWORD(v8) > 0x10u || (v8 & 0xFFFFF800) == 55296)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31.__r_.__value_.__r.__words[2], (uint64_t)"invalid unicode: ", 17);
    std::ostream::operator<<();
    exception = __cxa_allocate_exception(0x38uLL);
    v22 = *((_DWORD *)this + 4);
    v29.__r_.__value_.__r.__words[0] = *((_QWORD *)this + 1);
    LODWORD(v29.__r_.__value_.__r.__words[1]) = v22;
    std::stringbuf::str();
    YAML::Exception::Exception((uint64_t)exception, &v29, (__int128 *)&__s);
    *exception = &off_1E793AF28;
  }
  if (v8 <= 0x7F)
  {
    *(_BYTE *)(a3 + 23) = 1;
    *(_WORD *)a3 = v8;
    goto LABEL_37;
  }
  if (v8 > 0x7FF)
  {
    if (HIWORD(v8))
    {
      *((_BYTE *)&v29.__r_.__value_.__s + 23) = 1;
      LOWORD(v29.__r_.__value_.__l.__data_) = ((v8 >> 18) - 16);
      v28 = 1;
      v27[0] = (v8 >> 12) & 0x3F | 0x80;
      v27[1] = 0;
      v16 = std::string::append(&v29, v27, 1uLL);
      v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      __s.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      v26 = 1;
      v25[0] = (v9 >> 6) & 0x3F | 0x80;
      v25[1] = 0;
      v18 = std::string::append(&__s, v25, 1uLL);
      v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v31.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      v24 = 1;
      LOWORD(__p) = v9 & 0x3F | 0x80;
      v20 = std::string::append(&v31, (const std::string::value_type *)&__p, 1uLL);
      *(std::string *)a3 = *v20;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      if (v24 < 0)
        operator delete(__p);
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v31.__r_.__value_.__l.__data_);
      if (v26 < 0)
        operator delete(*(void **)v25);
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s.__r_.__value_.__l.__data_);
      if (v28 < 0)
        operator delete(*(void **)v27);
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      {
        v12 = (void *)v29.__r_.__value_.__r.__words[0];
        goto LABEL_36;
      }
    }
    else
    {
      *((_BYTE *)&__s.__r_.__value_.__s + 23) = 1;
      LOWORD(__s.__r_.__value_.__l.__data_) = ((v8 >> 12) - 32);
      *((_BYTE *)&v29.__r_.__value_.__s + 23) = 1;
      LOWORD(v29.__r_.__value_.__l.__data_) = (v8 >> 6) & 0x3F | 0x80;
      v13 = std::string::append(&__s, (const std::string::value_type *)&v29, 1uLL);
      v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v31.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      v28 = 1;
      v27[0] = v9 & 0x3F | 0x80;
      v27[1] = 0;
      v15 = std::string::append(&v31, v27, 1uLL);
      *(std::string *)a3 = *v15;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      if (v28 < 0)
        operator delete(*(void **)v27);
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v31.__r_.__value_.__l.__data_);
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v29.__r_.__value_.__l.__data_);
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      {
        v12 = (void *)__s.__r_.__value_.__r.__words[0];
        goto LABEL_36;
      }
    }
  }
  else
  {
    *((_BYTE *)&v31.__r_.__value_.__s + 23) = 1;
    LOWORD(v31.__r_.__value_.__l.__data_) = ((v8 >> 6) - 64);
    *((_BYTE *)&__s.__r_.__value_.__s + 23) = 1;
    LOWORD(__s.__r_.__value_.__l.__data_) = v8 & 0x3F | 0x80;
    v11 = std::string::append(&v31, (const std::string::value_type *)&__s, 1uLL);
    *(std::string *)a3 = *v11;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s.__r_.__value_.__l.__data_);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    {
      v12 = (void *)v31.__r_.__value_.__r.__words[0];
LABEL_36:
      operator delete(v12);
    }
  }
LABEL_37:
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
}

void sub_1BF8C1010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  void *v45;
  int v46;
  uint64_t v47;

  if (a38 < 0)
  {
    operator delete(__p);
    if ((v46 & 1) == 0)
    {
LABEL_6:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a40);
      if (*(char *)(v47 - 49) < 0)
        operator delete(*(void **)(v47 - 72));
      _Unwind_Resume(a1);
    }
  }
  else if (!v46)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v45);
  goto LABEL_6;
}

void YAML::Exp::Escape(YAML::Exp *this@<X0>, uint64_t a2@<X8>)
{
  int v5;
  int v6;
  char *v7;
  std::string::value_type v8;
  _QWORD *exception;
  int v10;
  std::string v11;
  std::string v12;
  uint64_t v13;
  int v14;
  _BYTE v15[280];

  v5 = YAML::Stream::get(this);
  v6 = YAML::Stream::get(this);
  if (v5 == 39 && v6 == 39)
  {
LABEL_3:
    v7 = "'";
LABEL_4:
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)a2, v7);
    return;
  }
  if (v6 > 91)
  {
    switch(v6)
    {
      case '\\':
        v7 = "\\";
        goto LABEL_4;
      case '_':
        v7 = "\xA0";
        goto LABEL_4;
      case 'a':
        v7 = "\a";
        goto LABEL_4;
      case 'b':
        v7 = "\b";
        goto LABEL_4;
      case 'e':
        v7 = "\x1B";
        goto LABEL_4;
      case 'f':
        v7 = "\f";
        goto LABEL_4;
      case 'n':
        v7 = "\n";
        goto LABEL_4;
      case 'r':
        v7 = "\r";
        goto LABEL_4;
      case 't':
        goto LABEL_18;
      case 'u':
        YAML::Exp::Escape(this, (YAML::Stream *)4, a2);
        return;
      case 'v':
        v7 = "\v";
        goto LABEL_4;
      case 'x':
        YAML::Exp::Escape(this, (YAML::Stream *)2, a2);
        return;
      default:
        goto LABEL_38;
    }
  }
  if (v6 <= 46)
  {
    if (v6 > 33)
    {
      if (v6 == 34)
      {
        v7 = "\"";
        goto LABEL_4;
      }
      if (v6 == 39)
        goto LABEL_3;
    }
    else
    {
      if (v6 == 9)
      {
LABEL_18:
        v7 = "\t";
        goto LABEL_4;
      }
      if (v6 == 32)
      {
        v7 = " ";
        goto LABEL_4;
      }
    }
LABEL_38:
    v8 = v6;
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v15);
    exception = __cxa_allocate_exception(0x38uLL);
    v10 = *((_DWORD *)this + 4);
    v13 = *((_QWORD *)this + 1);
    v14 = v10;
    std::string::basic_string[abi:ne180100]<0>(&v11, "unknown escape character: ");
    std::string::push_back(&v11, v8);
    v12 = v11;
    memset(&v11, 0, sizeof(v11));
    YAML::Exception::Exception((uint64_t)exception, &v13, (__int128 *)&v12);
    *exception = &off_1E793AF28;
  }
  switch(v6)
  {
    case 'L':
      v7 = "\u2028";
      goto LABEL_4;
    case 'M':
    case 'O':
    case 'Q':
    case 'R':
    case 'S':
    case 'T':
      goto LABEL_38;
    case 'N':
      v7 = "\x85";
      goto LABEL_4;
    case 'P':
      v7 = "\u2029";
      goto LABEL_4;
    case 'U':
      YAML::Exp::Escape(this, (YAML::Stream *)8, a2);
      return;
    default:
      if (v6 == 47)
      {
        v7 = "/";
        goto LABEL_4;
      }
      if (v6 != 48)
        goto LABEL_38;
      *(_BYTE *)(a2 + 23) = 1;
      *(_WORD *)a2 = 0;
      return;
  }
}

void sub_1BF8C140C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24)
{
  int v24;
  void *v25;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v24 & 1) == 0)
    {
LABEL_8:
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a24);
      _Unwind_Resume(a1);
    }
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v25);
  goto LABEL_8;
}

void siri::dialogengine::VisualRef::~VisualRef(siri::dialogengine::VisualRef *this)
{
  siri::dialogengine::VisualRef::~VisualRef(this);
  JUMPOUT(0x1C3B8D890);
}

{
  *(_QWORD *)this = &off_1E792BE70;
  *((_QWORD *)this + 8) = &unk_1E792BED8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((_QWORD **)this + 27));
  *(_QWORD *)this = off_1E793A6B0;
  *((_QWORD *)this + 8) = &unk_1E793A708;
  if (*((char *)this + 191) < 0)
    operator delete(*((void **)this + 21));
  if (*((char *)this + 167) < 0)
    operator delete(*((void **)this + 18));
  if (*((char *)this + 143) < 0)
    operator delete(*((void **)this + 15));
  if (*((char *)this + 119) < 0)
    operator delete(*((void **)this + 12));
  *((_QWORD *)this + 8) = off_1E793AED8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*((_QWORD **)this + 10));
  siri::dialogengine::LineNumberBase::~LineNumberBase((void **)this);
}

uint64_t siri::dialogengine::VisualRef::Validate(siri::dialogengine::VisualRef *this, siri::dialogengine::Context *a2)
{
  uint64_t v4;
  char v5;
  siri::dialogengine::VisualRef *v6;
  std::string::size_type size;
  char v8;
  char v9;
  siri::dialogengine::VisualRef *v10;
  siri::dialogengine::VisualRef *v11;
  BOOL v12;
  std::string v14;
  std::string __p;
  void *v16;
  char v17;
  void *v18;
  char v19;
  void *v20;
  char v21;
  void *v22;
  char v23;
  void *v24;
  char v25;
  void *v26;
  char v27;
  uint64_t *v28[3];
  std::string v29;
  std::string v30;
  std::string v31;
  std::string v32;
  __int128 v33;
  unsigned __int8 v34;

  std::string::basic_string[abi:ne180100]<0>(&__p, "visual");
  siri::dialogengine::ValidateXmlElementVersion((uint64_t)a2, (uint64_t)&__p, &v33);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v4 = v34;
  if ((v34 & 0x80u) != 0)
    v4 = *((_QWORD *)&v33 + 1);
  v5 = v4 == 0;
  if (v4)
    siri::dialogengine::Context::AddValidationError((uint64_t)a2, &v33, (uint64_t)this);
  v6 = (siri::dialogengine::VisualRef *)*((_QWORD *)this + 26);
  if (v6 != (siri::dialogengine::VisualRef *)((char *)this + 216))
  {
    do
    {
      std::pair<std::string const,std::string>::pair[abi:ne180100](&v31, (__int128 *)v6 + 2);
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v30, v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_);
      else
        v30 = v31;
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v29, v32.__r_.__value_.__l.__data_, v32.__r_.__value_.__l.__size_);
      else
        v29 = v32;
      size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
      v8 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
      if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v29.__r_.__value_.__l.__size_;
      if (size)
      {
        siri::dialogengine::ParseSpeakableString((uint64_t)&v29, &__p);
        siri::dialogengine::ChunkList::Expand(v28, (siri::dialogengine::ChunkList *)&__p, a2);
        v14.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
        v9 = siri::dialogengine::ChunkList::Validate((siri::dialogengine::ChunkList *)v28, a2, this);
        siri::dialogengine::ExpandToText((uint64_t)&__p, v28[0], v28[1]);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v14, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        else
          v14 = __p;
        if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v14.__r_.__value_.__l.__data_);
        if (v27 < 0)
          operator delete(v26);
        if (v25 < 0)
          operator delete(v24);
        if (v23 < 0)
          operator delete(v22);
        if (v21 < 0)
          operator delete(v20);
        if (v19 < 0)
          operator delete(v18);
        if (v17 < 0)
          operator delete(v16);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v5 &= v9;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
        std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        v8 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
      }
      if (v8 < 0)
        operator delete(v29.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v32.__r_.__value_.__l.__data_);
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v31.__r_.__value_.__l.__data_);
      v10 = (siri::dialogengine::VisualRef *)*((_QWORD *)v6 + 1);
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = *(siri::dialogengine::VisualRef **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (siri::dialogengine::VisualRef *)*((_QWORD *)v6 + 2);
          v12 = *(_QWORD *)v11 == (_QWORD)v6;
          v6 = v11;
        }
        while (!v12);
      }
      v6 = v11;
    }
    while (v11 != (siri::dialogengine::VisualRef *)((char *)this + 216));
  }
  if ((char)v34 < 0)
    operator delete((void *)v33);
  return v5 & 1;
}

void sub_1BF8C1764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;

  if (*(char *)(v37 - 81) < 0)
    operator delete(*(void **)(v37 - 104));
  _Unwind_Resume(exception_object);
}

void siri::dialogengine::VisualRef::Execute(const void ***this@<X0>, siri::dialogengine::Context *a2@<X1>, char **a3@<X8>)
{
  siri::dialogengine::VisualRef *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  int64x2_t v25;
  std::string::size_type v26;
  uint64_t **v27;
  __int128 *v28;
  __int128 *v29;
  std::string::size_type size;
  char v31;
  uint64_t *v32;
  __int128 *v33;
  __int128 *v34;
  BOOL v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  std::string __str;
  std::string v41;
  std::string v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string __p;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;
  std::string v53;
  uint64_t *v54[3];
  std::string v55;
  std::string v56;
  std::string v57;
  __int128 v58;
  std::string *v59;

  siri::dialogengine::Context::ResetExecutionState(a2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = (siri::dialogengine::VisualRef *)operator new();
  siri::dialogengine::VisualRef::VisualRef(v6, this);
  *(_QWORD *)&v58 = v6;
  v7 = (_QWORD *)operator new();
  *v7 = &off_1E792DC68;
  v7[1] = 0;
  v7[2] = 0;
  v7[3] = v6;
  *((_QWORD *)&v58 + 1) = v7;
  v8 = v58;
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v58;
  if (v7)
  {
    v9 = (unint64_t *)(*((_QWORD *)&v58 + 1) + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = (unint64_t)a3[2];
  v12 = a3[1];
  if ((unint64_t)v12 >= v11)
  {
    v39 = v58;
    v14 = (v12 - *a3) >> 4;
    if ((unint64_t)(v14 + 1) >> 60)
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    v15 = v11 - (_QWORD)*a3;
    v16 = v15 >> 3;
    if (v15 >> 3 <= (unint64_t)(v14 + 1))
      v16 = v14 + 1;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0)
      v17 = 0xFFFFFFFFFFFFFFFLL;
    else
      v17 = v16;
    v48.__r_.__value_.__l.__size_ = (std::string::size_type)(a3 + 2);
    v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v17);
    v20 = &v18[16 * v14];
    *(_OWORD *)v20 = v58;
    v22 = *a3;
    v21 = a3[1];
    if (v21 == *a3)
    {
      v25 = vdupq_n_s64((unint64_t)v21);
      v23 = &v18[16 * v14];
    }
    else
    {
      v23 = &v18[16 * v14];
      do
      {
        v24 = *((_OWORD *)v21 - 1);
        v21 -= 16;
        *((_OWORD *)v23 - 1) = v24;
        v23 -= 16;
        *(_QWORD *)v21 = 0;
        *((_QWORD *)v21 + 1) = 0;
      }
      while (v21 != v22);
      v25 = *(int64x2_t *)a3;
    }
    v13 = v20 + 16;
    *a3 = v23;
    a3[1] = v20 + 16;
    *(int64x2_t *)&v47.__r_.__value_.__r.__words[1] = v25;
    v26 = (std::string::size_type)a3[2];
    a3[2] = &v18[16 * v19];
    v48.__r_.__value_.__r.__words[0] = v26;
    v47.__r_.__value_.__r.__words[0] = v25.i64[0];
    std::__split_buffer<std::shared_ptr<siri::dialogengine::ChunkText>>::~__split_buffer((uint64_t)&v47);
    v8 = v39;
  }
  else
  {
    *(_OWORD *)v12 = v58;
    v13 = v12 + 16;
  }
  a3[1] = v13;
  v27 = (uint64_t **)(v8 + 208);
  v28 = *(__int128 **)(v8 + 208);
  v29 = (__int128 *)(v8 + 216);
  if (v28 != (__int128 *)(v8 + 216))
  {
    do
    {
      std::pair<std::string const,std::string>::pair[abi:ne180100](&v56, v28 + 2);
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v55, v57.__r_.__value_.__l.__data_, v57.__r_.__value_.__l.__size_);
      else
        v55 = v57;
      size = HIBYTE(v55.__r_.__value_.__r.__words[2]);
      v31 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v55.__r_.__value_.__l.__size_;
      if (size)
      {
        siri::dialogengine::ParseSpeakableString((uint64_t)&v55, &v47);
        siri::dialogengine::ChunkList::Expand(v54, (siri::dialogengine::ChunkList *)&v47, a2);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v47;
        std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
        siri::dialogengine::ExpandToText((uint64_t)&v47, v54[0], v54[1]);
        siri::dialogengine::Dialog::ProcessString(a2, (siri::dialogengine::Context *)&v47, (uint64_t)&__str);
        std::string::operator=(&v47, &__str);
        std::string::operator=(&v48, &v41);
        std::string::operator=(&v49, &v42);
        std::string::operator=(&v50, &v43);
        std::string::operator=(&v51, &v44);
        std::string::operator=(&v52, &v45);
        std::string::operator=(&v53, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v45.__r_.__value_.__l.__data_);
        if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v44.__r_.__value_.__l.__data_);
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v43.__r_.__value_.__l.__data_);
        if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v42.__r_.__value_.__l.__data_);
        if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v41.__r_.__value_.__l.__data_);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&__str, v47.__r_.__value_.__l.__data_, v47.__r_.__value_.__l.__size_);
        else
          __str = v47;
        v59 = &v56;
        v32 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v27, (const void **)&v56.__r_.__value_.__l.__data_, (__int128 **)&v59);
        std::string::operator=((std::string *)(v32 + 7), &__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v53.__r_.__value_.__l.__data_);
        if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v52.__r_.__value_.__l.__data_);
        if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v51.__r_.__value_.__l.__data_);
        if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v50.__r_.__value_.__l.__data_);
        if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v49.__r_.__value_.__l.__data_);
        if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v48.__r_.__value_.__l.__data_);
        if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v47.__r_.__value_.__l.__data_);
        v47.__r_.__value_.__r.__words[0] = (std::string::size_type)v54;
        std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
        v31 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
      }
      if (v31 < 0)
        operator delete(v55.__r_.__value_.__l.__data_);
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v57.__r_.__value_.__l.__data_);
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v56.__r_.__value_.__l.__data_);
      v33 = (__int128 *)*((_QWORD *)v28 + 1);
      if (v33)
      {
        do
        {
          v34 = v33;
          v33 = *(__int128 **)v33;
        }
        while (v33);
      }
      else
      {
        do
        {
          v34 = (__int128 *)*((_QWORD *)v28 + 2);
          v35 = *(_QWORD *)v34 == (_QWORD)v28;
          v28 = v34;
        }
        while (!v35);
      }
      v28 = v34;
    }
    while (v34 != v29);
  }
  siri::dialogengine::Context::ResetExecutionState(a2);
  v36 = (std::__shared_weak_count *)*((_QWORD *)&v58 + 1);
  if (*((_QWORD *)&v58 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v58 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
}

void sub_1BF8C1D00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  uint64_t v44;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v44 - 112);
  __p = a10;
  std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void *siri::dialogengine::VisualRef::operator==(uint64_t a1, void *lpsrc)
{
  void *result;

  if (result)
    return (void *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)a1 + 72))(a1, result);
  return result;
}

uint64_t siri::dialogengine::VisualRef::operator==(uint64_t a1, uint64_t a2)
{
  _BOOL4 v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  const void **v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  const void **v18;
  unsigned __int8 *v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  BOOL v26;
  _QWORD *v27;
  _QWORD *v28;
  BOOL v29;
  _QWORD *v30;
  _QWORD *v31;
  int v32;

  v4 = siri::dialogengine::Node::operator==(a1, a2);
  if (*(_QWORD *)(a1 + 224) != *(_QWORD *)(a2 + 224))
  {
LABEL_51:
    v32 = 0;
    return v4 & v32;
  }
  v5 = *(_QWORD **)(a1 + 208);
  v6 = (_QWORD *)(a1 + 216);
  if (v5 != v6)
  {
    v7 = *(_QWORD **)(a2 + 208);
    do
    {
      v8 = *((unsigned __int8 *)v5 + 55);
      if ((v8 & 0x80u) == 0)
        v9 = *((unsigned __int8 *)v5 + 55);
      else
        v9 = v5[5];
      v10 = *((unsigned __int8 *)v7 + 55);
      v11 = (char)v10;
      if ((v10 & 0x80u) != 0)
        v10 = v7[5];
      if (v9 != v10)
        goto LABEL_51;
      v12 = (const void **)(v5 + 4);
      if (v11 >= 0)
        v13 = (unsigned __int8 *)(v7 + 4);
      else
        v13 = (unsigned __int8 *)v7[4];
      if ((v8 & 0x80) != 0)
      {
        if (memcmp(*v12, v13, v5[5]))
          goto LABEL_51;
      }
      else if (*((_BYTE *)v5 + 55))
      {
        while (*(unsigned __int8 *)v12 == *v13)
        {
          v12 = (const void **)((char *)v12 + 1);
          ++v13;
          if (!--v8)
            goto LABEL_19;
        }
        goto LABEL_51;
      }
LABEL_19:
      v14 = *((unsigned __int8 *)v5 + 79);
      if ((v14 & 0x80u) == 0)
        v15 = *((unsigned __int8 *)v5 + 79);
      else
        v15 = v5[8];
      v16 = *((unsigned __int8 *)v7 + 79);
      v17 = (char)v16;
      if ((v16 & 0x80u) != 0)
        v16 = v7[8];
      if (v15 != v16)
        goto LABEL_51;
      v18 = (const void **)(v5 + 7);
      if (v17 >= 0)
        v19 = (unsigned __int8 *)(v7 + 7);
      else
        v19 = (unsigned __int8 *)v7[7];
      if ((v14 & 0x80) != 0)
      {
        if (memcmp(*v18, v19, v5[8]))
          goto LABEL_51;
      }
      else if (*((_BYTE *)v5 + 79))
      {
        v20 = v14 - 1;
        do
        {
          v22 = *(unsigned __int8 *)v18;
          v18 = (const void **)((char *)v18 + 1);
          v21 = v22;
          v24 = *v19++;
          v23 = v24;
          v26 = v20-- != 0;
        }
        while (v21 == v23 && v26);
        if (v21 != v23)
          goto LABEL_51;
      }
      v27 = (_QWORD *)v5[1];
      if (v27)
      {
        do
        {
          v28 = v27;
          v27 = (_QWORD *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          v28 = (_QWORD *)v5[2];
          v29 = *v28 == (_QWORD)v5;
          v5 = v28;
        }
        while (!v29);
      }
      v30 = (_QWORD *)v7[1];
      if (v30)
      {
        do
        {
          v31 = v30;
          v30 = (_QWORD *)*v30;
        }
        while (v30);
      }
      else
      {
        do
        {
          v31 = (_QWORD *)v7[2];
          v29 = *v31 == (_QWORD)v7;
          v7 = v31;
        }
        while (!v29);
      }
      v7 = v31;
      v5 = v28;
    }
    while (v28 != v6);
  }
  v32 = 1;
  return v4 & v32;
}

uint64_t siri::dialogengine::VisualRef::operator==(uint64_t a1, _QWORD *a2)
{
  if (*a2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  else
    return 0;
}

void `non-virtual thunk to'siri::dialogengine::VisualRef::~VisualRef(siri::dialogengine::VisualRef *this)
{
  siri::dialogengine::VisualRef::~VisualRef((siri::dialogengine::VisualRef *)((char *)this - 64));
}

{
  siri::dialogengine::VisualRef::~VisualRef((siri::dialogengine::VisualRef *)((char *)this - 64));
  JUMPOUT(0x1C3B8D890);
}

uint64_t `non-virtual thunk to'siri::dialogengine::VisualRef::Validate(siri::dialogengine::VisualRef *this, siri::dialogengine::Context *a2)
{
  return siri::dialogengine::VisualRef::Validate((siri::dialogengine::VisualRef *)((char *)this - 64), a2);
}

siri::dialogengine::VisualRef *siri::dialogengine::VisualRef::VisualRef(siri::dialogengine::VisualRef *this, const void ***a2)
{
  siri::dialogengine::Node *v4;

  v4 = siri::dialogengine::Node::Node(this, (const siri::dialogengine::Node *)a2);
  *(_QWORD *)v4 = &off_1E792BE70;
  *((_QWORD *)v4 + 8) = &unk_1E792BED8;
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v4 + 208, a2 + 26);
  return this;
}

void sub_1BF8C2184(_Unwind_Exception *a1)
{
  siri::dialogengine::Node *v1;

  siri::dialogengine::Node::~Node(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<siri::dialogengine::VisualRef *,std::shared_ptr<siri::dialogengine::VisualRef>::__shared_ptr_default_delete<siri::dialogengine::VisualRef,siri::dialogengine::VisualRef>,std::allocator<siri::dialogengine::VisualRef>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::VisualRef *,std::shared_ptr<siri::dialogengine::VisualRef>::__shared_ptr_default_delete<siri::dialogengine::VisualRef,siri::dialogengine::VisualRef>,std::allocator<siri::dialogengine::VisualRef>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<siri::dialogengine::VisualRef *,std::shared_ptr<siri::dialogengine::VisualRef>::__shared_ptr_default_delete<siri::dialogengine::VisualRef,siri::dialogengine::VisualRef>,std::allocator<siri::dialogengine::VisualRef>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

siri::dialogengine::Node *siri::dialogengine::Node::Node(siri::dialogengine::Node *this, const siri::dialogengine::Node *a2)
{
  uint64_t v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;

  v4 = *((_QWORD *)a2 + 1);
  *(_QWORD *)this = &off_1E793AEA8;
  *((_QWORD *)this + 1) = v4;
  if (*((char *)a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 2), *((_QWORD *)a2 + 3));
  }
  else
  {
    v5 = *((_OWORD *)a2 + 1);
    *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
    *((_OWORD *)this + 1) = v5;
  }
  v6 = (std::string *)((char *)this + 40);
  if (*((char *)a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 5), *((_QWORD *)a2 + 6));
  }
  else
  {
    v7 = *(_OWORD *)((char *)a2 + 40);
    *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  *((_QWORD *)this + 8) = off_1E793AED8;
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)this + 72, (const void ***)a2 + 9);
  *(_QWORD *)this = off_1E793A6B0;
  *((_QWORD *)this + 8) = &unk_1E793A708;
  if (*((char *)a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 4, *((const std::string::value_type **)a2 + 12), *((_QWORD *)a2 + 13));
  }
  else
  {
    v8 = *((_OWORD *)a2 + 6);
    *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
    *((_OWORD *)this + 6) = v8;
  }
  if (*((char *)a2 + 143) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 5, *((const std::string::value_type **)a2 + 15), *((_QWORD *)a2 + 16));
  }
  else
  {
    v9 = *(_OWORD *)((char *)a2 + 120);
    *((_QWORD *)this + 17) = *((_QWORD *)a2 + 17);
    *(_OWORD *)((char *)this + 120) = v9;
  }
  if (*((char *)a2 + 167) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 6, *((const std::string::value_type **)a2 + 18), *((_QWORD *)a2 + 19));
  }
  else
  {
    v10 = *((_OWORD *)a2 + 9);
    *((_QWORD *)this + 20) = *((_QWORD *)a2 + 20);
    *((_OWORD *)this + 9) = v10;
  }
  v11 = (std::string *)((char *)this + 168);
  if (*((char *)a2 + 191) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *((const std::string::value_type **)a2 + 21), *((_QWORD *)a2 + 22));
  }
  else
  {
    v12 = *(_OWORD *)((char *)a2 + 168);
    *((_QWORD *)this + 23) = *((_QWORD *)a2 + 23);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
  *((_OWORD *)this + 12) = *((_OWORD *)a2 + 12);
  return this;
}

void sub_1BF8C23A8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  uint64_t v5;

  if (*(char *)(v1 + 167) < 0)
    operator delete(*v4);
  if (*(char *)(v1 + 143) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 119) < 0)
    operator delete(*v2);
  *(_QWORD *)(v1 + 64) = v5;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(*(_QWORD **)(v1 + 80));
  siri::dialogengine::LineNumberBase::~LineNumberBase((void **)v1);
  _Unwind_Resume(a1);
}

double siri::dialogengine::VisualRef::VisualRef(siri::dialogengine::VisualRef *this)
{
  double result;

  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 9) = (char *)this + 80;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_DWORD *)this + 48) = 1065353216;
  *(_QWORD *)this = &off_1E792BE70;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = &unk_1E792BED8;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 26) = (char *)this + 216;
  return result;
}

{
  double result;

  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 9) = (char *)this + 80;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_DWORD *)this + 48) = 1065353216;
  *(_QWORD *)this = &off_1E792BE70;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = &unk_1E792BED8;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 26) = (char *)this + 216;
  return result;
}

BOOL siri::dialogengine::VisualRef::HasParam(uint64_t a1, const void **a2)
{
  return a1 + 216 != std::__tree<std::string>::find<std::string>(a1 + 208, a2);
}

std::string *siri::dialogengine::VisualRef::SetParam(uint64_t a1, __int128 *a2, const std::string *a3)
{
  uint64_t *v4;
  __int128 *v6;

  v6 = a2;
  v4 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 208), (const void **)a2, &v6);
  return std::string::operator=((std::string *)(v4 + 7), a3);
}

void siri::dialogengine::VisualRef::GetParam(uint64_t a1@<X0>, const void **a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v5;
  __int128 v6;

  v5 = std::__tree<std::string>::find<std::string>(a1 + 208, a2);
  if (a1 + 216 == v5)
  {
    std::string::basic_string[abi:ne180100]<0>(a3, "");
  }
  else if (*(char *)(v5 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)(v5 + 56), *(_QWORD *)(v5 + 64));
  }
  else
  {
    v6 = *(_OWORD *)(v5 + 56);
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + 72);
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v6;
  }
}

uint64_t siri::dialogengine::VisualRef::GetParams@<X0>(const void ***this@<X0>, uint64_t a2@<X8>)
{
  return std::map<std::string,std::string>::map[abi:ne180100](a2, this + 26);
}

BOOL siri::dialogengine::VisualRef::IsEmpty(siri::dialogengine::VisualRef *this)
{
  std::string::size_type size;
  _BOOL8 v3;
  std::string __p;

  if (*((char *)this + 119) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 12), *((_QWORD *)this + 13));
  else
    __p = *(std::string *)((_BYTE *)this + 4);
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (!size)
  {
    v3 = *((_QWORD *)this + 28) == 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return v3;
    goto LABEL_8;
  }
  v3 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_8:
    operator delete(__p.__r_.__value_.__l.__data_);
  return v3;
}

uint64_t siri::dialogengine::VisualRef::HasRequiredVariablesOrPhrases(siri::dialogengine::VisualRef *this)
{
  __int128 *v1;
  char *v2;
  int v3;
  std::string::size_type size;
  char v5;
  __int128 *v6;
  __int128 *v7;
  BOOL v8;
  _QWORD v10[3];
  std::string v11;
  std::string v12;
  std::string __p;
  void **v14;

  v1 = (__int128 *)*((_QWORD *)this + 26);
  v2 = (char *)this + 216;
  if (v1 == (__int128 *)((char *)this + 216))
  {
    LOBYTE(v3) = 0;
  }
  else
  {
    v3 = 0;
    do
    {
      std::pair<std::string const,std::string>::pair[abi:ne180100](&v12, v1 + 2);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v11, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      else
        v11 = __p;
      size = HIBYTE(v11.__r_.__value_.__r.__words[2]);
      v5 = HIBYTE(v11.__r_.__value_.__r.__words[2]);
      if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v11.__r_.__value_.__l.__size_;
      if (size)
      {
        siri::dialogengine::ParseSpeakableString((uint64_t)&v11, v10);
        v3 |= siri::dialogengine::ChunkList::HasRequiredVariablesOrPhrases((siri::dialogengine::ChunkList *)v10);
        v14 = (void **)v10;
        std::vector<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>::__destroy_vector::operator()[abi:ne180100](&v14);
        v5 = HIBYTE(v11.__r_.__value_.__r.__words[2]);
      }
      if (v5 < 0)
        operator delete(v11.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v12.__r_.__value_.__l.__data_);
      v6 = (__int128 *)*((_QWORD *)v1 + 1);
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = *(__int128 **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (__int128 *)*((_QWORD *)v1 + 2);
          v8 = *(_QWORD *)v7 == (_QWORD)v1;
          v1 = v7;
        }
        while (!v8);
      }
      v1 = v7;
    }
    while (v7 != (__int128 *)v2);
  }
  return v3 & 1;
}

void sub_1BF8C2834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  std::pair<std::string const,std::string>::~pair((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t YAML::Utils::ComputeStringFormat(char *a1, int a2, int a3, int a4)
{
  _BOOL8 IsNullString;
  void *v8;
  unint64_t v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  char v15;
  unint64_t v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  unsigned int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  YAML::Exp *v43;
  unsigned __int8 v44;
  unsigned __int8 v45;
  YAML::Exp *v46;
  YAML::Exp *v47;
  YAML::Exp *v48;
  unsigned __int8 v49;
  YAML::Exp *v50;
  unsigned __int8 v51;
  unsigned __int8 v52;
  YAML::Exp *v53;
  YAML::Exp *v54;
  YAML::Exp *v55;
  unsigned __int8 v56;
  YAML::Exp *v57;
  unsigned __int8 v58;
  YAML::Exp *v59;
  unsigned __int8 v60;
  unsigned __int8 v61;
  unsigned __int8 v62;
  unsigned __int8 v63;
  unsigned __int8 v64;
  int v65;
  __int16 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  _BYTE v71[24];
  int v72;
  _BYTE v73[24];
  int v74;
  _BYTE v75[24];
  int v76;
  _BYTE v77[24];
  __int128 v78;
  unint64_t v79;
  void **v80;

  if (a2 == 7)
  {
    if (a3 != 1)
    {
      v17 = a1[23];
      v18 = (char)v17;
      if ((v17 & 0x80u) != 0)
        v17 = *((_QWORD *)a1 + 1);
      if (!v17)
        return 3;
      v19 = 0;
      v20 = 0;
      v21 = v18 >= 0 ? (uint64_t)a1 : *(_QWORD *)a1;
      do
      {
        if (a4 && *(char *)(v21 + v20) < 0)
          break;
        v19 = ++v20 >= v17;
      }
      while (v17 != v20);
      if (v19)
        return 3;
    }
    return 2;
  }
  if (a2 == 5)
  {
    v9 = a1[23];
    v10 = (char)v9;
    if ((v9 & 0x80u) != 0)
      v9 = *((_QWORD *)a1 + 1);
    if (!v9)
      return 1;
    v11 = 0;
    v12 = 0;
    v13 = v10 >= 0 ? (uint64_t)a1 : *(_QWORD *)a1;
    do
    {
      v14 = *(char *)(v13 + v12);
      if (v14 < 0)
        v15 = a4;
      else
        v15 = 0;
      if ((v15 & 1) != 0)
        break;
      if (v14 == 10)
        break;
      v11 = ++v12 >= v9;
    }
    while (v9 != v12);
    if (v11)
      return 1;
    return 2;
  }
  if (a2)
    return 2;
  IsNullString = YAML::IsNullString(a1);
  if (IsNullString)
    return 2;
  if (a3 == 1)
  {
    YAML::Exp::PlainScalarInFlow((YAML::Exp *)IsNullString);
    v8 = &YAML::Exp::PlainScalarInFlow(void)::e;
  }
  else
  {
    YAML::Exp::PlainScalar((YAML::Exp *)IsNullString);
    v8 = &YAML::Exp::PlainScalar(void)::e;
  }
  if ((YAML::RegEx::Match((uint64_t)v8, a1) & 0x80000000) != 0)
    return 2;
  if (a1[23] < 0)
  {
    v22 = *((_QWORD *)a1 + 1);
    if (!v22)
      goto LABEL_42;
    v23 = *(uint64_t **)a1;
  }
  else
  {
    v22 = a1[23];
    if (!a1[23])
      goto LABEL_42;
    v23 = (uint64_t *)a1;
  }
  if (*((_BYTE *)v23 + v22 - 1) == 32)
    return 2;
LABEL_42:
  if ((v24 & 1) == 0)
  {
    if ((_DWORD)v43)
    {
      YAML::Exp::EndScalarInFlow(v43);
      if ((v44 & 1) == 0)
      {
        if ((_DWORD)v57)
        {
          if ((v58 & 1) == 0)
          {
            if ((_DWORD)v57)
            {
              {
                YAML::Exp::Space(void)::e = 1;
                word_1EF580A8C = 32;
                qword_1EF580A98 = 0;
                unk_1EF580AA0 = 0;
                qword_1EF580A90 = 0;
                __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Space(void)::e, &dword_1BF794000);
              }
              {
                YAML::Exp::Tab(void)::e = 1;
                word_1EF580A2C = 9;
                qword_1EF580A38 = 0;
                unk_1EF580A40 = 0;
                qword_1EF580A30 = 0;
                __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Tab(void)::e, &dword_1BF794000);
              }
              YAML::operator|(&YAML::Exp::Space(void)::e, &YAML::Exp::Tab(void)::e, (uint64_t)YAML::Exp::Blank(void)::e);
              __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, YAML::Exp::Blank(void)::e, &dword_1BF794000);
            }
          }
          YAML::Exp::Break(v57);
          YAML::operator|(YAML::Exp::Blank(void)::e, YAML::Exp::Break(void)::e, (uint64_t)YAML::Exp::BlankOrBreak(void)::e);
          __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, YAML::Exp::BlankOrBreak(void)::e, &dword_1BF794000);
        }
      }
      {
        YAML::Exp::Comment(void)::e = 1;
        word_1EF580AEC = 35;
        qword_1EF580AF8 = 0;
        unk_1EF580B00 = 0;
        qword_1EF580AF0 = 0;
        __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Comment(void)::e, &dword_1BF794000);
      }
      v65 = YAML::Exp::Comment(void)::e;
      v66 = word_1EF580AEC;
      v68 = 0;
      v69 = 0;
      v67 = 0;
      std::vector<YAML::RegEx>::__init_with_size[abi:ne180100]<YAML::RegEx*,YAML::RegEx*>(&v67, (int *)qword_1EF580AF0, (int *)qword_1EF580AF8, (qword_1EF580AF8 - qword_1EF580AF0) >> 5);
      YAML::operator+(YAML::Exp::BlankOrBreak(void)::e, &v65, (uint64_t)&v70);
      v46 = (YAML::Exp *)YAML::operator|(YAML::Exp::EndScalarInFlow(void)::e, &v70, (uint64_t)&v72);
      YAML::Exp::NotPrintable(v46);
      v47 = (YAML::Exp *)YAML::operator|(&v72, YAML::Exp::NotPrintable(void)::e, (uint64_t)&v74);
      YAML::Exp::Utf8_ByteOrderMark(v47);
      v48 = (YAML::Exp *)YAML::operator|(&v74, YAML::Exp::Utf8_ByteOrderMark(void)::e, (uint64_t)&v76);
      YAML::Exp::Break(v48);
      YAML::operator|(&v76, YAML::Exp::Break(void)::e, (uint64_t)&v78);
      {
        YAML::Exp::Tab(void)::e = 1;
        word_1EF580A2C = 9;
        qword_1EF580A38 = 0;
        unk_1EF580A40 = 0;
        qword_1EF580A30 = 0;
        __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Tab(void)::e, &dword_1BF794000);
      }
      YAML::operator|((int *)&v78, &YAML::Exp::Tab(void)::e, (uint64_t)&_ZGRZN4YAML5Utils12_GLOBAL__N_118IsValidPlainScalarERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS_8FlowType5valueEbE15disallowed_flow_);
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &_ZGRZN4YAML5Utils12_GLOBAL__N_118IsValidPlainScalarERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS_8FlowType5valueEbE15disallowed_flow_, &dword_1BF794000);
      v80 = (void **)&v78 + 1;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v80);
      v80 = (void **)v77;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v80);
      v80 = (void **)v75;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v80);
      v80 = (void **)v73;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v80);
      v80 = (void **)v71;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v80);
      v80 = (void **)&v67;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v80);
    }
  }
  if ((v25 & 1) == 0)
  {
    if ((_DWORD)v50)
    {
      YAML::Exp::EndScalar(v50);
      if ((v51 & 1) == 0)
      {
        if ((_DWORD)v59)
        {
          if ((v60 & 1) == 0)
          {
            if ((_DWORD)v59)
            {
              {
                YAML::Exp::Space(void)::e = 1;
                word_1EF580A8C = 32;
                qword_1EF580A98 = 0;
                unk_1EF580AA0 = 0;
                qword_1EF580A90 = 0;
                __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Space(void)::e, &dword_1BF794000);
              }
              {
                YAML::Exp::Tab(void)::e = 1;
                word_1EF580A2C = 9;
                qword_1EF580A38 = 0;
                unk_1EF580A40 = 0;
                qword_1EF580A30 = 0;
                __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Tab(void)::e, &dword_1BF794000);
              }
              YAML::operator|(&YAML::Exp::Space(void)::e, &YAML::Exp::Tab(void)::e, (uint64_t)YAML::Exp::Blank(void)::e);
              __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, YAML::Exp::Blank(void)::e, &dword_1BF794000);
            }
          }
          YAML::Exp::Break(v59);
          YAML::operator|(YAML::Exp::Blank(void)::e, YAML::Exp::Break(void)::e, (uint64_t)YAML::Exp::BlankOrBreak(void)::e);
          __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, YAML::Exp::BlankOrBreak(void)::e, &dword_1BF794000);
        }
      }
      {
        YAML::Exp::Comment(void)::e = 1;
        word_1EF580AEC = 35;
        qword_1EF580AF8 = 0;
        unk_1EF580B00 = 0;
        qword_1EF580AF0 = 0;
        __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Comment(void)::e, &dword_1BF794000);
      }
      v65 = YAML::Exp::Comment(void)::e;
      v66 = word_1EF580AEC;
      v68 = 0;
      v69 = 0;
      v67 = 0;
      std::vector<YAML::RegEx>::__init_with_size[abi:ne180100]<YAML::RegEx*,YAML::RegEx*>(&v67, (int *)qword_1EF580AF0, (int *)qword_1EF580AF8, (qword_1EF580AF8 - qword_1EF580AF0) >> 5);
      YAML::operator+(YAML::Exp::BlankOrBreak(void)::e, &v65, (uint64_t)&v70);
      v53 = (YAML::Exp *)YAML::operator|(YAML::Exp::EndScalar(void)::e, &v70, (uint64_t)&v72);
      YAML::Exp::NotPrintable(v53);
      v54 = (YAML::Exp *)YAML::operator|(&v72, YAML::Exp::NotPrintable(void)::e, (uint64_t)&v74);
      YAML::Exp::Utf8_ByteOrderMark(v54);
      v55 = (YAML::Exp *)YAML::operator|(&v74, YAML::Exp::Utf8_ByteOrderMark(void)::e, (uint64_t)&v76);
      YAML::Exp::Break(v55);
      YAML::operator|(&v76, YAML::Exp::Break(void)::e, (uint64_t)&v78);
      {
        YAML::Exp::Tab(void)::e = 1;
        word_1EF580A2C = 9;
        qword_1EF580A38 = 0;
        unk_1EF580A40 = 0;
        qword_1EF580A30 = 0;
        __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Tab(void)::e, &dword_1BF794000);
      }
      YAML::operator|((int *)&v78, &YAML::Exp::Tab(void)::e, (uint64_t)&_ZGRZN4YAML5Utils12_GLOBAL__N_118IsValidPlainScalarERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS_8FlowType5valueEbE16disallowed_block_);
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &_ZGRZN4YAML5Utils12_GLOBAL__N_118IsValidPlainScalarERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS_8FlowType5valueEbE16disallowed_block_, &dword_1BF794000);
      v80 = (void **)&v78 + 1;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v80);
      v80 = (void **)v77;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v80);
      v80 = (void **)v75;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v80);
      v80 = (void **)v73;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v80);
      v80 = (void **)v71;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v80);
      v80 = (void **)&v67;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v80);
    }
  }
  if (a3 != 1)
  v27 = *v26;
  v28 = *(uint64_t **)a1;
  if (a1[23] < 0)
  {
    v29 = *((_QWORD *)a1 + 1);
  }
  else
  {
    v28 = (uint64_t *)a1;
    v29 = a1[23];
  }
  *(_QWORD *)&v78 = v28;
  *((_QWORD *)&v78 + 1) = v29;
  v79 = 0;
  if (v29)
  {
    v30 = 0;
    v31 = *(_DWORD *)v27;
    v32 = *(_DWORD *)v27 - 3;
    while (1)
    {
      if (v32 < 0xFFFFFFFE || v30 < v29)
      {
        switch(v31)
        {
          case 0:
            if (v30 >= v29)
              v33 = 0;
            else
              v33 = -1;
            goto LABEL_78;
          case 1:
            if (*(unsigned __int8 *)(v78 + v30) == *(unsigned __int8 *)(v27 + 4))
              return 2;
            goto LABEL_79;
          case 2:
            v38 = *(char *)(v78 + v30);
            if (*(char *)(v27 + 4) <= v38 && *(char *)(v27 + 5) >= v38)
              return 2;
            goto LABEL_79;
          case 3:
            v39 = *(_QWORD *)(v27 + 8);
            if (*(_QWORD *)(v27 + 16) == v39)
              goto LABEL_79;
            v40 = 0;
            v41 = 0;
            while ((YAML::RegEx::MatchUnchecked<YAML::StringCharSource>(v39 + v40, &v78) & 0x80000000) != 0)
            {
              ++v41;
              v39 = *(_QWORD *)(v27 + 8);
              v40 += 32;
              if (v41 >= (*(_QWORD *)(v27 + 16) - v39) >> 5)
                goto LABEL_79;
            }
            return 2;
          case 4:
            v34 = *(_QWORD *)(v27 + 8);
            if (*(_QWORD *)(v27 + 16) == v34)
              goto LABEL_79;
            v35 = 0;
            v36 = 0;
            v33 = -1;
            break;
          case 5:
            v42 = *(_QWORD *)(v27 + 8);
            if (v42 != *(_QWORD *)(v27 + 16)
              && (YAML::RegEx::MatchUnchecked<YAML::StringCharSource>(v42, &v78) & 0x80000000) != 0)
            {
              return 2;
            }
            goto LABEL_79;
          case 6:
            v33 = YAML::RegEx::MatchOpSeq<YAML::StringCharSource>(v27, &v78);
            goto LABEL_78;
          default:
            goto LABEL_79;
        }
        while (1)
        {
          v37 = YAML::RegEx::MatchUnchecked<YAML::StringCharSource>(v34 + v35, &v78);
          if (v37 == -1)
            break;
          if (!v36)
            v33 = v37;
          ++v36;
          v34 = *(_QWORD *)(v27 + 8);
          v35 += 32;
          if (v36 >= (*(_QWORD *)(v27 + 16) - v34) >> 5)
          {
LABEL_78:
            if ((v33 & 0x80000000) == 0)
              return 2;
            break;
          }
        }
      }
LABEL_79:
      if (a4 && *(char *)(v78 + v79) < 0)
        return 2;
      v30 = v79 + 1;
      v79 = v30;
      v29 = *((_QWORD *)&v78 + 1);
      if (v30 >= *((_QWORD *)&v78 + 1))
        return 0;
    }
  }
  return 0;
}

void sub_1BF8C3390(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void YAML::Exp::PlainScalarInFlow(YAML::Exp *this)
{
  unsigned __int8 v1;
  YAML::Exp *v2;
  YAML::Exp *v3;
  void *__p[2];
  char v5;
  int v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  void *v10[2];
  char v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  void **v18;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      YAML::Exp::BlankOrBreak(v2);
      YAML::RegEx::RegEx((uint64_t)&v12, (char *)v10, 3);
      YAML::operator|(YAML::Exp::BlankOrBreak(void)::e, &v12, (uint64_t)&v14);
      std::string::basic_string[abi:ne180100]<0>(__p, "-:");
      v3 = (YAML::Exp *)YAML::RegEx::RegEx((uint64_t)&v6, (char *)__p, 3);
      YAML::Exp::Blank(v3);
      YAML::operator+(&v6, YAML::Exp::Blank(void)::e, (uint64_t)&v8);
      YAML::operator|(&v14, (int *)&v8, (uint64_t)&v16);
      YAML::operator!(&v16, (uint64_t)&YAML::Exp::PlainScalarInFlow(void)::e);
      v18 = (void **)&v17;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v18);
      v18 = (void **)&v9;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v18);
      v18 = (void **)&v7;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v18);
      if (v5 < 0)
        operator delete(__p[0]);
      v8 = (void **)&v15;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v8);
      v8 = (void **)&v13;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v8);
      if (v11 < 0)
        operator delete(v10[0]);
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::PlainScalarInFlow(void)::e, &dword_1BF794000);
    }
  }
}

void sub_1BF8C36D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t *a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;

  *(_QWORD *)(v32 - 40) = v31 + 8;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 40));
  *(_QWORD *)(v32 - 40) = &a21;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 40));
  *(_QWORD *)(v32 - 40) = &a17;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 40));
  if (a15 < 0)
    operator delete(__p);
  a20 = (uint64_t *)(v32 - 96);
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  a20 = &a31;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  if (a29 < 0)
    operator delete(a24);
  _Unwind_Resume(a1);
}

void YAML::Exp::PlainScalar(YAML::Exp *this)
{
  unsigned __int8 v1;
  YAML::Exp *v2;
  YAML::Exp *v3;
  int v4;
  __int16 v5;
  _QWORD v6[3];
  void **v7;
  uint64_t v8;
  void *__p[2];
  char v10;
  int v11;
  uint64_t v12;
  void **v13;
  uint64_t v14;
  void *v15[2];
  char v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  void **v23;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      YAML::Exp::BlankOrBreak(v2);
      YAML::RegEx::RegEx((uint64_t)&v17, (char *)v15, 3);
      YAML::operator|(YAML::Exp::BlankOrBreak(void)::e, &v17, (uint64_t)&v19);
      std::string::basic_string[abi:ne180100]<0>(__p, "-?:");
      v3 = (YAML::Exp *)YAML::RegEx::RegEx((uint64_t)&v11, (char *)__p, 3);
      YAML::Exp::BlankOrBreak(v3);
      v4 = 0;
      v5 = 0;
      memset(v6, 0, sizeof(v6));
      YAML::operator|(YAML::Exp::BlankOrBreak(void)::e, &v4, (uint64_t)&v7);
      YAML::operator+(&v11, (int *)&v7, (uint64_t)&v13);
      YAML::operator|(&v19, (int *)&v13, (uint64_t)&v21);
      YAML::operator!(&v21, (uint64_t)&YAML::Exp::PlainScalar(void)::e);
      v23 = (void **)&v22;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v23);
      v23 = (void **)&v14;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v23);
      v23 = (void **)&v8;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v23);
      v23 = (void **)v6;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v23);
      v7 = (void **)&v12;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v7);
      if (v10 < 0)
        operator delete(__p[0]);
      v13 = (void **)&v20;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v13);
      v13 = (void **)&v18;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v13);
      if (v16 < 0)
        operator delete(v15[0]);
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::PlainScalar(void)::e, &dword_1BF794000);
    }
  }
}

void sub_1BF8C3974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  *(_QWORD *)(v39 - 40) = v38 + 8;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 40));
  *(_QWORD *)(v39 - 40) = &a29;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 40));
  *(_QWORD *)(v39 - 40) = &a15;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 40));
  *(_QWORD *)(v39 - 40) = v37;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 40));
  a14 = &a25;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  if (a23 < 0)
    operator delete(__p);
  a28 = v39 - 96;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = v39 - 128;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  if (a37 < 0)
    operator delete(a32);
  _Unwind_Resume(a1);
}

uint64_t YAML::RegEx::Match(uint64_t a1, char *a2)
{
  uint64_t v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v18;
  uint64_t v19;

  v2 = a2[23];
  if ((v2 & 0x80u) == 0)
    v3 = a2;
  else
    v3 = *(char **)a2;
  if ((v2 & 0x80u) != 0)
    v2 = *((_QWORD *)a2 + 1);
  *(_QWORD *)&v18 = v3;
  *((_QWORD *)&v18 + 1) = v2;
  v19 = 0;
  if ((*(_DWORD *)a1 - 3) < 0xFFFFFFFE || v2 != 0)
  {
    switch(*(_DWORD *)a1)
    {
      case 0:
        if (v2)
          return 0xFFFFFFFFLL;
        else
          return 0;
      case 1:
        if (*v3 == *(_BYTE *)(a1 + 4))
          return 1;
        else
          return 0xFFFFFFFFLL;
      case 2:
        v11 = *v3;
        v5 = 0xFFFFFFFFLL;
        if (*(char *)(a1 + 4) <= v11)
        {
          if (*(char *)(a1 + 5) < v11)
            return 0xFFFFFFFFLL;
          else
            return 1;
        }
        return v5;
      case 3:
        v12 = *(_QWORD *)(a1 + 8);
        v13 = *(_QWORD *)(a1 + 16) - v12;
        if (!v13)
          return 0xFFFFFFFFLL;
        v14 = 0;
        v15 = v13 >> 5;
        while (1)
        {
          v16 = YAML::RegEx::MatchUnchecked<YAML::StringCharSource>(v12, &v18);
          if ((v16 & 0x80000000) == 0)
            break;
          ++v14;
          v12 += 32;
          v5 = 0xFFFFFFFFLL;
          if (v14 >= v15)
            return v5;
        }
        return v16;
      case 4:
        v6 = *(_QWORD *)(a1 + 8);
        v7 = *(_QWORD *)(a1 + 16) - v6;
        if (!v7)
          return 0xFFFFFFFFLL;
        v8 = 0;
        v9 = v7 >> 5;
        LODWORD(v5) = -1;
        break;
      case 5:
        v5 = 0xFFFFFFFFLL;
        if (*(_QWORD *)(a1 + 8) != *(_QWORD *)(a1 + 16))
        {
          if ((int)YAML::RegEx::MatchUnchecked<YAML::StringCharSource>(*(_QWORD *)(a1 + 8), &v18) >= 0)
            return 0xFFFFFFFFLL;
          else
            return 1;
        }
        return v5;
      case 6:
        return YAML::RegEx::MatchOpSeq<YAML::StringCharSource>(a1, &v18);
      default:
        return 0xFFFFFFFFLL;
    }
    while (1)
    {
      v10 = YAML::RegEx::MatchUnchecked<YAML::StringCharSource>(v6, &v18);
      if (v10 == -1)
        break;
      if (v8)
        v5 = v5;
      else
        v5 = v10;
      ++v8;
      v6 += 32;
      if (v8 >= v9)
        return v5;
    }
  }
  return 0xFFFFFFFFLL;
}

void YAML::Exp::EndScalarInFlow(YAML::Exp *this)
{
  unsigned __int8 v1;
  YAML::Exp *v2;
  void *__p[2];
  char v4;
  void **v5;
  uint64_t v6;
  void *v7[2];
  char v8;
  void **v9;
  uint64_t v10;
  int v11;
  __int16 v12;
  _QWORD v13[3];
  int v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  int v18;
  __int16 v19;
  _QWORD v20[3];
  int v21;
  uint64_t v22;
  void **v23;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      v18 = 1;
      v19 = 58;
      memset(v20, 0, sizeof(v20));
      YAML::Exp::BlankOrBreak(v2);
      v11 = 0;
      v12 = 0;
      memset(v13, 0, sizeof(v13));
      YAML::operator|(YAML::Exp::BlankOrBreak(void)::e, &v11, (uint64_t)&v14);
      std::string::basic_string[abi:ne180100]<0>(v7, ",]}");
      YAML::RegEx::RegEx((uint64_t)&v9, (char *)v7, 3);
      YAML::operator|(&v14, (int *)&v9, (uint64_t)&v16);
      YAML::operator+(&v18, (int *)&v16, (uint64_t)&v21);
      std::string::basic_string[abi:ne180100]<0>(__p, ",?[]{}");
      YAML::RegEx::RegEx((uint64_t)&v5, (char *)__p, 3);
      YAML::operator|(&v21, (int *)&v5, (uint64_t)&YAML::Exp::EndScalarInFlow(void)::e);
      v23 = (void **)&v6;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v23);
      if (v4 < 0)
        operator delete(__p[0]);
      v5 = (void **)&v22;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v5);
      v5 = (void **)&v17;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v5);
      v5 = (void **)&v10;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v5);
      if (v8 < 0)
        operator delete(v7[0]);
      v9 = (void **)&v15;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v9);
      v9 = (void **)v13;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v9);
      v16 = (void **)v20;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v16);
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::EndScalarInFlow(void)::e, &dword_1BF794000);
    }
  }
}

void sub_1BF8C3DDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35)
{
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  *(_QWORD *)(v37 - 56) = v36 + 8;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 56));
  if (a15 < 0)
    operator delete(__p);
  a16 = (uint64_t *)(v37 - 80);
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = (uint64_t *)(v37 - 144);
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a16 = &a27;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  if (a25 < 0)
    operator delete(a20);
  a26 = &a35;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  *(_QWORD *)(v37 - 152) = v35;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 152));
  _Unwind_Resume(a1);
}

void sub_1BF8C3EBC()
{
  JUMPOUT(0x1BF8C3E90);
}

void sub_1BF8C3EC4()
{
  JUMPOUT(0x1BF8C3E9CLL);
}

void YAML::RegEx::~RegEx(YAML::RegEx *this)
{
  void **v1;

  v1 = (void **)((char *)this + 8);
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void YAML::Exp::Break(YAML::Exp *this)
{
  unsigned __int8 v1;
  void *__p[2];
  char v3;
  void **v4;
  uint64_t v5;
  int v6;
  __int16 v7;
  _QWORD v8[3];
  void **v9;

  {
    v6 = 1;
    v7 = 10;
    memset(v8, 0, sizeof(v8));
    std::string::basic_string[abi:ne180100]<0>(__p, "\r\n");
    YAML::RegEx::RegEx((uint64_t)&v4, (char *)__p, 6);
    YAML::operator|(&v6, (int *)&v4, (uint64_t)&YAML::Exp::Break(void)::e);
    v9 = (void **)&v5;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v9);
    if (v3 < 0)
      operator delete(__p[0]);
    v4 = (void **)v8;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v4);
    __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Break(void)::e, &dword_1BF794000);
  }
}

void sub_1BF8C3FFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v16 - 40) = v15 + 8;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v16 - 40));
  if (a14 < 0)
    operator delete(__p);
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<YAML::RegEx>::__init_with_size[abi:ne180100]<YAML::RegEx*,YAML::RegEx*>(_QWORD *result, int *a2, int *a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD v10[3];
  char v11;
  uint64_t v12;
  uint64_t v13;

  if (a4)
  {
    v6 = result;
    std::vector<YAML::RegEx>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v12 = v7;
    v13 = v7;
    v10[0] = v6 + 2;
    v10[1] = &v12;
    v10[2] = &v13;
    v11 = 0;
    if (a2 == a3)
    {
      v8 = v7;
    }
    else
    {
      v8 = v7;
      do
      {
        v9 = *a2;
        *(_WORD *)(v8 + 4) = *((_WORD *)a2 + 2);
        *(_DWORD *)v8 = v9;
        *(_QWORD *)(v8 + 16) = 0;
        *(_QWORD *)(v8 + 24) = 0;
        *(_QWORD *)(v8 + 8) = 0;
        std::vector<YAML::RegEx>::__init_with_size[abi:ne180100]<YAML::RegEx*,YAML::RegEx*>(v8 + 8);
        v8 = v13 + 32;
        v13 += 32;
        a2 += 8;
      }
      while (a2 != a3);
    }
    v11 = 1;
    result = (_QWORD *)std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<YAML::RegEx>,YAML::RegEx*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
    v6[1] = v8;
  }
  return result;
}

void sub_1BF8C412C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void YAML::Exp::NotPrintable(YAML::Exp *this)
{
  unsigned __int8 v1;
  void **v2;
  _QWORD v3[3];
  int v4;
  __int16 v5;
  _QWORD v6[3];
  void **v7;
  uint64_t v8;
  int v9;
  __int16 v10;
  _QWORD v11[3];
  void **v12;
  uint64_t v13;
  void **v14;
  void *v15[3];
  void *__p[2];
  char v17;
  void **v18;
  uint64_t v19;
  int v20;
  __int16 v21;
  _QWORD v22[3];
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  void **v27;

  {
    v20 = 1;
    v21 = 0;
    memset(v22, 0, sizeof(v22));
    std::string::basic_string[abi:ne180100]<0>(__p, "\x01\x02\x03\x04\x05\x06\a\b\v\f\x7F");
    YAML::RegEx::RegEx((uint64_t)&v18, (char *)__p, 3);
    YAML::operator|(&v20, (int *)&v18, (uint64_t)&v23);
    LODWORD(v14) = 2;
    WORD2(v14) = 7950;
    memset(v15, 0, sizeof(v15));
    YAML::operator|(&v23, (int *)&v14, (uint64_t)&v25);
    v9 = 1;
    v10 = 194;
    memset(v11, 0, sizeof(v11));
    v4 = 2;
    v5 = -31616;
    memset(v6, 0, sizeof(v6));
    LODWORD(v2) = 2;
    WORD2(v2) = -24698;
    memset(v3, 0, sizeof(v3));
    YAML::operator|(&v4, (int *)&v2, (uint64_t)&v7);
    YAML::operator+(&v9, (int *)&v7, (uint64_t)&v12);
    YAML::operator|(&v25, (int *)&v12, (uint64_t)&YAML::Exp::NotPrintable(void)::e);
    v27 = (void **)&v13;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v27);
    v27 = (void **)&v8;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v27);
    v27 = (void **)v3;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v27);
    v2 = (void **)v6;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v2);
    v7 = (void **)v11;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v7);
    v12 = (void **)&v26;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v12);
    v12 = v15;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v12);
    v14 = (void **)&v24;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v14);
    v14 = (void **)&v19;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v14);
    if (v17 < 0)
      operator delete(__p[0]);
    v18 = (void **)v22;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v18);
    __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::NotPrintable(void)::e, &dword_1BF794000);
  }
}

void sub_1BF8C4390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  *(_QWORD *)(v41 - 72) = v40 + 8;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v41 - 72));
  *(_QWORD *)(v41 - 72) = &a18;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v41 - 72));
  *(_QWORD *)(v41 - 72) = v39;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v41 - 72));
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  a25 = v41 - 96;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  a29 = v41 - 128;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  a29 = v41 - 192;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  if (a38 < 0)
    operator delete(__p);
  *(_QWORD *)(v41 - 200) = v38;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v41 - 200));
  _Unwind_Resume(a1);
}

void YAML::Exp::Utf8_ByteOrderMark(YAML::Exp *this)
{
  unsigned __int8 v1;
  void *__p[2];
  char v3;

  {
    std::string::basic_string[abi:ne180100]<0>(__p, "﻿");
    YAML::RegEx::RegEx((uint64_t)&YAML::Exp::Utf8_ByteOrderMark(void)::e, (char *)__p, 6);
    if (v3 < 0)
      operator delete(__p[0]);
    __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Utf8_ByteOrderMark(void)::e, &dword_1BF794000);
  }
}

void sub_1BF8C4524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 32;
        v7 = v4 - 24;
        std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v7);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void YAML::Exp::EndScalar(YAML::Exp *this)
{
  unsigned __int8 v1;
  YAML::Exp *v2;
  int v3;
  __int16 v4;
  _QWORD v5[3];
  void **v6;
  uint64_t v7;
  int v8;
  __int16 v9;
  _QWORD v10[3];
  void **v11;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      v8 = 1;
      v9 = 58;
      memset(v10, 0, sizeof(v10));
      YAML::Exp::BlankOrBreak(v2);
      v3 = 0;
      v4 = 0;
      memset(v5, 0, sizeof(v5));
      YAML::operator|(YAML::Exp::BlankOrBreak(void)::e, &v3, (uint64_t)&v6);
      YAML::operator+(&v8, (int *)&v6, (uint64_t)&YAML::Exp::EndScalar(void)::e);
      v11 = (void **)&v7;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v11);
      v11 = (void **)v5;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v11);
      v6 = (void **)v10;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v6);
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::EndScalar(void)::e, &dword_1BF794000);
    }
  }
}

void sub_1BF8C46E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va;

  va_start(va, a6);
  *(_QWORD *)(v8 - 40) = v7 + 8;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v8 - 40));
  *(_QWORD *)(v8 - 40) = v6;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v8 - 40));
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t YAML::RegEx::MatchUnchecked<YAML::StringCharSource>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _DWORD *v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v41;
  unint64_t v42;

  switch(*(_DWORD *)a1)
  {
    case 0:
      if (a2[2] >= a2[1])
        return 0;
      else
        return 0xFFFFFFFFLL;
    case 1:
      if (*(unsigned __int8 *)(*a2 + a2[2]) == *(unsigned __int8 *)(a1 + 4))
        return 1;
      else
        return 0xFFFFFFFFLL;
    case 2:
      v5 = *(char *)(*a2 + a2[2]);
      v4 = 0xFFFFFFFFLL;
      if (*(char *)(a1 + 4) <= v5)
      {
        if (*(char *)(a1 + 5) < v5)
          return 0xFFFFFFFFLL;
        else
          return 1;
      }
      return v4;
    case 3:
      v6 = *(_QWORD *)(a1 + 8);
      if (*(_QWORD *)(a1 + 16) == v6)
        return 0xFFFFFFFFLL;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = YAML::RegEx::MatchUnchecked<YAML::StringCharSource>(v6 + v7, a2);
        if ((v9 & 0x80000000) == 0)
          break;
        ++v8;
        v6 = *(_QWORD *)(a1 + 8);
        v7 += 32;
        if (v8 >= (*(_QWORD *)(a1 + 16) - v6) >> 5)
          return 0xFFFFFFFFLL;
      }
      return v9;
    case 4:
      v10 = *(_QWORD *)(a1 + 8);
      if (*(_QWORD *)(a1 + 16) == v10)
        return 0xFFFFFFFFLL;
      v11 = 0;
      v12 = 0;
      LODWORD(v4) = -1;
      while (1)
      {
        v13 = YAML::RegEx::MatchUnchecked<YAML::StringCharSource>(v10 + v11, a2);
        if (v13 == -1)
          break;
        if (v12)
          v4 = v4;
        else
          v4 = v13;
        ++v12;
        v10 = *(_QWORD *)(a1 + 8);
        v11 += 32;
        if (v12 >= (*(_QWORD *)(a1 + 16) - v10) >> 5)
          return v4;
      }
      return 0xFFFFFFFFLL;
    case 5:
      v14 = *(_QWORD *)(a1 + 8);
      v4 = 0xFFFFFFFFLL;
      if (v14 != *(_QWORD *)(a1 + 16))
      {
        if ((int)YAML::RegEx::MatchUnchecked<YAML::StringCharSource>(v14, a2) >= 0)
          return 0xFFFFFFFFLL;
        else
          return 1;
      }
      return v4;
    case 6:
      v15 = *(_QWORD *)(a1 + 8);
      v16 = *(_QWORD *)(a1 + 16) - v15;
      if (v16)
      {
        v17 = 0;
        LODWORD(v4) = 0;
        v18 = v16 >> 5;
        while (1)
        {
          v19 = (_DWORD *)(v15 + 32 * v17);
          v42 = a2[2];
          v41 = *(_OWORD *)a2;
          v20 = v42 + (int)v4;
          if ((int)v4 + (int)v42 < 0 != __OFADD__((_DWORD)v4, (_DWORD)v42))
            v20 = 0;
          v42 = v20;
          switch(*v19)
          {
            case 0:
              if (v20 >= *((_QWORD *)&v41 + 1))
                v21 = 0;
              else
                v21 = -1;
              goto LABEL_59;
            case 1:
              if (*(unsigned __int8 *)(v41 + v20) != *(unsigned __int8 *)(v15 + 32 * v17 + 4))
                return 0xFFFFFFFFLL;
              goto LABEL_57;
            case 2:
              v22 = v15 + 32 * v17;
              v23 = *(char *)(v41 + v20);
              if (*(char *)(v22 + 4) > v23 || *(char *)(v22 + 5) < v23)
                return 0xFFFFFFFFLL;
              goto LABEL_57;
            case 3:
              v24 = v15 + 32 * v17;
              v27 = *(_QWORD *)(v24 + 8);
              v26 = (uint64_t *)(v24 + 8);
              v25 = v27;
              if (v26[1] == v27)
                return 0xFFFFFFFFLL;
              v28 = 0;
              v29 = 0;
              while (1)
              {
                v30 = YAML::RegEx::MatchUnchecked<YAML::StringCharSource>(v25 + v28, &v41);
                if ((v30 & 0x80000000) == 0)
                  break;
                ++v29;
                v25 = *v26;
                v28 += 32;
                if (v29 >= (v26[1] - *v26) >> 5)
                  return 0xFFFFFFFFLL;
              }
              v21 = v30;
              goto LABEL_60;
            case 4:
              v31 = v15 + 32 * v17;
              v34 = *(_QWORD *)(v31 + 8);
              v33 = (uint64_t *)(v31 + 8);
              v32 = v34;
              if (v33[1] == v34)
                return 0xFFFFFFFFLL;
              v35 = 0;
              v36 = 0;
              v21 = -1;
              break;
            case 5:
              v38 = v15 + 32 * v17;
              v39 = *(_QWORD *)(v38 + 8);
              if (v39 == *(_QWORD *)(v38 + 16)
                || (YAML::RegEx::MatchUnchecked<YAML::StringCharSource>(v39, &v41) & 0x80000000) == 0)
              {
                return 0xFFFFFFFFLL;
              }
LABEL_57:
              v21 = 1;
              goto LABEL_60;
            case 6:
              v21 = YAML::RegEx::MatchOpSeq<YAML::StringCharSource>((uint64_t)v19, &v41);
              goto LABEL_59;
            default:
              return 0xFFFFFFFFLL;
          }
          do
          {
            v37 = YAML::RegEx::MatchUnchecked<YAML::StringCharSource>(v32 + v35, &v41);
            if (v37 == -1)
              return 0xFFFFFFFFLL;
            if (!v36)
              v21 = v37;
            ++v36;
            v32 = *v33;
            v35 += 32;
          }
          while (v36 < (v33[1] - *v33) >> 5);
LABEL_59:
          if (v21 == -1)
            return 0xFFFFFFFFLL;
LABEL_60:
          v4 = (v21 + v4);
          if (++v17 >= v18)
            return v4;
        }
      }
      return 0;
    default:
      return 0xFFFFFFFFLL;
  }
}

uint64_t YAML::RegEx::MatchOpSeq<YAML::StringCharSource>(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v29;
  unint64_t v30;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16) - v2;
  if (!v3)
    return 0;
  v5 = 0;
  LODWORD(v6) = 0;
  v7 = v3 >> 5;
  while (2)
  {
    v30 = *((_QWORD *)a2 + 2);
    v29 = *a2;
    v8 = v30 + (int)v6;
    if ((int)v6 + (int)v30 < 0 != __OFADD__((_DWORD)v6, (_DWORD)v30))
      v8 = 0;
    v30 = v8;
    switch(*(_DWORD *)(v2 + 32 * v5))
    {
      case 0:
        if (v8 >= *((_QWORD *)&v29 + 1))
          v9 = 0;
        else
          v9 = -1;
        goto LABEL_31;
      case 1:
        if (*(unsigned __int8 *)(v29 + v8) != *(unsigned __int8 *)(v2 + 32 * v5 + 4))
          return 0xFFFFFFFFLL;
        goto LABEL_29;
      case 2:
        v10 = v2 + 32 * v5;
        v11 = *(char *)(v29 + v8);
        if (*(char *)(v10 + 4) > v11 || *(char *)(v10 + 5) < v11)
          return 0xFFFFFFFFLL;
        goto LABEL_29;
      case 3:
        v12 = v2 + 32 * v5;
        v15 = *(_QWORD *)(v12 + 8);
        v14 = (uint64_t *)(v12 + 8);
        v13 = v15;
        if (v14[1] == v15)
          return 0xFFFFFFFFLL;
        v16 = 0;
        v17 = 0;
        while (1)
        {
          v18 = YAML::RegEx::MatchUnchecked<YAML::StringCharSource>(v13 + v16, &v29);
          if ((v18 & 0x80000000) == 0)
            break;
          ++v17;
          v13 = *v14;
          v16 += 32;
          if (v17 >= (v14[1] - *v14) >> 5)
            return 0xFFFFFFFFLL;
        }
        v9 = v18;
        goto LABEL_32;
      case 4:
        v19 = v2 + 32 * v5;
        v22 = *(_QWORD *)(v19 + 8);
        v21 = (uint64_t *)(v19 + 8);
        v20 = v22;
        if (v21[1] == v22)
          return 0xFFFFFFFFLL;
        v23 = 0;
        v24 = 0;
        v9 = -1;
        break;
      case 5:
        v26 = v2 + 32 * v5;
        v27 = *(_QWORD *)(v26 + 8);
        if (v27 == *(_QWORD *)(v26 + 16)
          || (YAML::RegEx::MatchUnchecked<YAML::StringCharSource>(v27, &v29) & 0x80000000) == 0)
        {
          return 0xFFFFFFFFLL;
        }
LABEL_29:
        v9 = 1;
        goto LABEL_32;
      case 6:
        v9 = YAML::RegEx::MatchOpSeq<YAML::StringCharSource>();
        goto LABEL_31;
      default:
        return 0xFFFFFFFFLL;
    }
    do
    {
      v25 = YAML::RegEx::MatchUnchecked<YAML::StringCharSource>(v20 + v23, &v29);
      if (v25 == -1)
        return 0xFFFFFFFFLL;
      if (!v24)
        v9 = v25;
      ++v24;
      v20 = *v21;
      v23 += 32;
    }
    while (v24 < (v21[1] - *v21) >> 5);
LABEL_31:
    if (v9 == -1)
      return 0xFFFFFFFFLL;
LABEL_32:
    v6 = (v9 + v6);
    if (++v5 < v7)
      continue;
    return v6;
  }
}

void YAML::Exp::BlankOrBreak(YAML::Exp *this)
{
  unsigned __int8 v1;
  YAML::Exp *v2;
  YAML::Exp *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      YAML::Exp::Blank(v2);
      YAML::Exp::Break(v3);
      YAML::operator|(YAML::Exp::Blank(void)::e, YAML::Exp::Break(void)::e, (uint64_t)&YAML::Exp::BlankOrBreak(void)::e);
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::BlankOrBreak(void)::e, &dword_1BF794000);
    }
  }
}

void sub_1BF8C4D2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void YAML::Exp::Blank(YAML::Exp *this)
{
  unsigned __int8 v1;
  YAML::Exp *v2;
  YAML::Exp *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      YAML::Exp::Space(v2);
      YAML::Exp::Tab(v3);
      YAML::operator|(&YAML::Exp::Space(void)::e, &YAML::Exp::Tab(void)::e, (uint64_t)&YAML::Exp::Blank(void)::e);
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Blank(void)::e, &dword_1BF794000);
    }
  }
}

void sub_1BF8C4DD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void YAML::Exp::Space(YAML::Exp *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      YAML::Exp::Space(void)::e = 1;
      word_1EF580A8C = 32;
      qword_1EF580A98 = 0;
      unk_1EF580AA0 = 0;
      qword_1EF580A90 = 0;
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Space(void)::e, &dword_1BF794000);
    }
  }
}

void YAML::Exp::Tab(YAML::Exp *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      YAML::Exp::Tab(void)::e = 1;
      word_1EF580A2C = 9;
      qword_1EF580A38 = 0;
      unk_1EF580A40 = 0;
      qword_1EF580A30 = 0;
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Tab(void)::e, &dword_1BF794000);
    }
  }
}

char *std::vector<YAML::RegEx>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 59)
    std::vector<BOOL>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::RegEx>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<YAML::RegEx>,YAML::RegEx*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v6;

  if (!*(_BYTE *)(a1 + 24))
  {
    v2 = **(_QWORD **)(a1 + 16);
    v3 = **(_QWORD **)(a1 + 8);
    if (v2 != v3)
    {
      do
      {
        v4 = v2 - 32;
        v6 = (void **)(v2 - 24);
        std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v6);
        v2 = v4;
      }
      while (v4 != v3);
    }
  }
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::RegEx>>(unint64_t a1)
{
  if (a1 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(32 * a1);
}

BOOL YAML::Utils::WriteSingleQuotedString(std::vector<char> *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  _BOOL4 NextCodePointAndAdvance;
  unsigned __int8 *v9;
  YAML::ostream_wrapper *v10;

  YAML::ostream_wrapper::write(a1, "'", 1uLL);
  LODWORD(v10) = 0;
  v4 = a2[23];
  v5 = *(unsigned __int8 **)a2;
  if ((v4 & 0x80u) == 0)
    v6 = a2;
  else
    v6 = *(unsigned __int8 **)a2;
  v9 = v6;
  while (1)
  {
    if ((v4 & 0x80u) != 0)
      v4 = *((_QWORD *)a2 + 1);
    else
      v5 = a2;
    if (!NextCodePointAndAdvance)
      break;
    if ((_DWORD)v10 == 39)
    {
      YAML::ostream_wrapper::write(a1, "''", 2uLL);
    }
    else
    {
      if ((_DWORD)v10 == 10)
        return !NextCodePointAndAdvance;
    }
    v4 = a2[23];
    v5 = *(unsigned __int8 **)a2;
  }
  YAML::ostream_wrapper::write(a1, "'", 1uLL);
  return !NextCodePointAndAdvance;
}

BOOL YAML::Utils::`anonymous namespace'::GetNextCodePointAndAdvance(int *a1, unsigned __int8 **a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  unsigned int v4;
  int v5;
  int v6;
  int v8;
  unsigned __int8 *v9;
  unsigned int v10;
  int v11;
  char v12;

  v3 = *a2;
  if (*a2 != a3)
  {
    v4 = *v3;
    v5 = 2;
    switch(v4 >> 4)
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 4u:
      case 5u:
      case 6u:
      case 7u:
        *a2 = v3 + 1;
        v6 = (char)*v3;
        goto LABEL_6;
      case 0xCu:
      case 0xDu:
        goto LABEL_10;
      case 0xEu:
        v5 = 3;
        goto LABEL_10;
      case 0xFu:
        v5 = 4;
LABEL_10:
        v8 = v4 & ~(255 << (v5 ^ 7));
        *a1 = v8;
        v9 = v3 + 1;
        *a2 = v3 + 1;
        v10 = v5 + 1;
        break;
      default:
        *a2 = v3 + 1;
        goto LABEL_5;
    }
    do
    {
      if (v9 == a3 || (v11 = v8, (*v9 & 0xC0) != 0x80))
      {
LABEL_5:
        v6 = 65533;
LABEL_6:
        *a1 = v6;
        return v3 != a3;
      }
      *a1 = v8 << 6;
      v12 = *v9++;
      v8 = v12 & 0x3F | (v8 << 6);
      *a1 = v8;
      *a2 = v9;
      --v10;
    }
    while (v10 > 2);
    v6 = 65533;
    if (v8 >= 1114112 || (v11 & 0x3FFFFE0) == 0x360 || (v8 & 0xFFFE) == 0xFFFE || (v8 - 64976) <= 0x1F)
      goto LABEL_6;
  }
  return v3 != a3;
}

void YAML::Utils::`anonymous namespace'::WriteCodePoint(std::vector<char> *this, YAML::ostream_wrapper *a2)
{
  unsigned int v3;
  char *v4;
  char v5;
  char __src;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;

  if (a2 >> 16 <= 0x10)
    v3 = a2;
  else
    v3 = 65533;
  if (v3 > 0x7F)
  {
    if (v3 > 0x7FF)
    {
      if (HIWORD(v3))
      {
        v11 = (v3 >> 18) | 0xF0;
        YAML::ostream_wrapper::write(this, &v11, 1uLL);
        v12 = (v3 >> 12) & 0x3F | 0x80;
        YAML::ostream_wrapper::write(this, &v12, 1uLL);
        v13 = (v3 >> 6) & 0x3F | 0x80;
        YAML::ostream_wrapper::write(this, &v13, 1uLL);
        v14 = v3 & 0x3F | 0x80;
        v4 = &v14;
      }
      else
      {
        v8 = (v3 >> 12) | 0xE0;
        YAML::ostream_wrapper::write(this, &v8, 1uLL);
        v9 = (v3 >> 6) & 0x3F | 0x80;
        YAML::ostream_wrapper::write(this, &v9, 1uLL);
        v10 = v3 & 0x3F | 0x80;
        v4 = &v10;
      }
    }
    else
    {
      __src = (v3 >> 6) | 0xC0;
      YAML::ostream_wrapper::write(this, &__src, 1uLL);
      v7 = v3 & 0x3F | 0x80;
      v4 = &v7;
    }
  }
  else
  {
    v5 = v3;
    v4 = &v5;
  }
  YAML::ostream_wrapper::write(this, v4, 1uLL);
}

uint64_t YAML::Utils::WriteDoubleQuotedString(std::vector<char> *a1, unsigned __int8 *a2, int a3)
{
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  std::vector<char> *v9;
  const char *v10;
  std::vector<char> *v11;
  unsigned __int8 *v14;
  YAML::ostream_wrapper *v15;

  YAML::ostream_wrapper::write(a1, "\"", 1uLL);
  v5 = a2[23];
  v6 = *(unsigned __int8 **)a2;
  if ((v5 & 0x80u) == 0)
    v7 = a2;
  else
    v7 = *(unsigned __int8 **)a2;
  LODWORD(v15) = 0;
  v14 = v7;
  while (1)
  {
    if ((v5 & 0x80u) != 0)
      v5 = *((_QWORD *)a2 + 1);
    else
      v6 = a2;
      break;
    v8 = v15;
    switch((int)v15)
    {
      case 8:
        v9 = a1;
        v10 = "\\b";
        goto LABEL_22;
      case 9:
        v9 = a1;
        v10 = "\\t";
        goto LABEL_22;
      case 10:
        v9 = a1;
        v10 = "\\n";
        goto LABEL_22;
      case 11:
      case 12:
        goto LABEL_14;
      case 13:
        v9 = a1;
        v10 = "\\r";
        goto LABEL_22;
      default:
        if ((_DWORD)v15 == 92)
        {
          v9 = a1;
          v10 = "\\\\";
          goto LABEL_22;
        }
        if ((_DWORD)v15 == 34)
        {
          v9 = a1;
          v10 = "\\\"";
LABEL_22:
          YAML::ostream_wrapper::write(v9, v10, 2uLL);
          goto LABEL_23;
        }
LABEL_14:
        if ((int)v15 < 32 || ((_DWORD)v15 - 128) <= 0x20)
          goto LABEL_26;
        if ((_DWORD)v15 == 65279)
        {
          v11 = a1;
          v8 = 65279;
LABEL_27:
          goto LABEL_23;
        }
        if (v15 >= 0x7F && a3)
        {
LABEL_26:
          v11 = a1;
          goto LABEL_27;
        }
LABEL_23:
        v5 = a2[23];
        v6 = *(unsigned __int8 **)a2;
        break;
    }
  }
  YAML::ostream_wrapper::write(a1, "\"", 1uLL);
  return 1;
}

void YAML::Utils::`anonymous namespace'::WriteDoubleQuoteEscapeSequence(std::vector<char> *this, YAML::ostream_wrapper *a2)
{
  int v2;
  const char *v4;
  int v5;
  const char *v6;
  int v7;
  unsigned int v8;
  int v9;
  char __src;

  v2 = (int)a2;
  YAML::ostream_wrapper::write(this, "\\", 1uLL);
  v4 = "U";
  if (v2 >= 0xFFFF)
  {
    v5 = 8;
  }
  else
  {
    v4 = "u";
    v5 = 4;
  }
  if (v2 >= 255)
    v6 = v4;
  else
    v6 = "x";
  if (v2 >= 255)
    v7 = v5;
  else
    v7 = 2;
  YAML::ostream_wrapper::write(this, v6, 1uLL);
  v8 = v7 | 1;
  v9 = 4 * v7 - 4;
  do
  {
    YAML::ostream_wrapper::write(this, &__src, 1uLL);
    --v8;
    v9 -= 4;
  }
  while (v8 > 1);
}

uint64_t YAML::Utils::WriteLiteralString(std::vector<char> *a1, unsigned __int8 *a2, char *a3)
{
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  std::vector<char> *v9;
  const char *v10;
  unsigned __int8 *v12;
  unsigned int v13;
  char v14;
  char v15;

  YAML::ostream_wrapper::write(a1, "|\n", 2uLL);
  while (a1[2].__begin_ < a3)
  {
    v14 = 32;
    YAML::ostream_wrapper::write(a1, &v14, 1uLL);
  }
  v13 = 0;
  v6 = a2[23];
  v7 = *(unsigned __int8 **)a2;
  if ((v6 & 0x80u) == 0)
    v8 = a2;
  else
    v8 = *(unsigned __int8 **)a2;
  v12 = v8;
  while (1)
  {
    if ((v6 & 0x80u) != 0)
      v6 = *((_QWORD *)a2 + 1);
    else
      v7 = a2;
      break;
    v9 = a1;
    if (v13 == 10)
    {
      v10 = "\n";
      while (1)
      {
        YAML::ostream_wrapper::write(v9, v10, 1uLL);
        if (a1[2].__begin_ >= a3)
          break;
        v15 = 32;
        v10 = &v15;
        v9 = a1;
      }
    }
    else
    {
    }
    v6 = a2[23];
    v7 = *(unsigned __int8 **)a2;
  }
  return 1;
}

uint64_t YAML::Utils::WriteChar(std::vector<char> *this, YAML::ostream_wrapper *a2)
{
  std::vector<char> *v3;
  const char *v4;
  size_t v5;
  unsigned int v7;
  char v8;
  char __src;

  v3 = this;
  if (((a2 & 0xDF) - 65) > 0x19u)
  {
    if ((int)a2 <= 9)
    {
      if ((_DWORD)a2 == 8)
      {
        v4 = "\"\\b\"";
        goto LABEL_15;
      }
      if ((_DWORD)a2 == 9)
      {
        v4 = "\"\\t\"";
        goto LABEL_15;
      }
    }
    else
    {
      switch((_DWORD)a2)
      {
        case 0xA:
          v4 = "\"\\n\"";
          goto LABEL_15;
        case 0x5C:
          v4 = "\"\\\\\"";
          goto LABEL_15;
        case 0x22:
          v4 = "\"\\\"\"";
LABEL_15:
          v5 = 4;
          goto LABEL_16;
      }
    }
    v7 = (_DWORD)a2 - 32;
    YAML::ostream_wrapper::write(this, "\"", 1uLL);
    if (v7 > 0x5E)
    {
    }
    else
    {
      __src = (char)a2;
      YAML::ostream_wrapper::write(v3, &__src, 1uLL);
    }
    v4 = "\"";
    goto LABEL_3;
  }
  v8 = (char)a2;
  v4 = &v8;
LABEL_3:
  this = v3;
  v5 = 1;
LABEL_16:
  YAML::ostream_wrapper::write(this, v4, v5);
  return 1;
}

uint64_t YAML::Utils::WriteComment(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  std::vector<char> *v11;
  const char *v12;
  uint64_t v13;
  unsigned __int8 *v15;
  unsigned int v16;
  char v17;
  char v18;
  char v19;

  v6 = *(_QWORD *)(a1 + 48);
  YAML::ostream_wrapper::write((std::vector<char> *)a1, "#", 1uLL);
  if (a3)
  {
    v7 = a3;
    do
    {
      v17 = 32;
      YAML::ostream_wrapper::write((std::vector<char> *)a1, &v17, 1uLL);
      --v7;
    }
    while (v7);
  }
  *(_BYTE *)(a1 + 56) = 1;
  v16 = 0;
  v8 = a2[23];
  v9 = *(unsigned __int8 **)a2;
  if ((v8 & 0x80u) == 0)
    v10 = a2;
  else
    v10 = *(unsigned __int8 **)a2;
  v15 = v10;
  while (1)
  {
    if ((v8 & 0x80u) != 0)
      v8 = *((_QWORD *)a2 + 1);
    else
      v9 = a2;
      break;
    v11 = (std::vector<char> *)a1;
    if (v16 == 10)
    {
      v12 = "\n";
      while (1)
      {
        YAML::ostream_wrapper::write(v11, v12, 1uLL);
        if (*(_QWORD *)(a1 + 48) >= v6)
          break;
        v18 = 32;
        v12 = &v18;
        v11 = (std::vector<char> *)a1;
      }
      YAML::ostream_wrapper::write((std::vector<char> *)a1, "#", 1uLL);
      if (a3)
      {
        v13 = a3;
        do
        {
          v19 = 32;
          YAML::ostream_wrapper::write((std::vector<char> *)a1, &v19, 1uLL);
          --v13;
        }
        while (v13);
      }
      *(_BYTE *)(a1 + 56) = 1;
    }
    else
    {
    }
    v8 = a2[23];
    v9 = *(unsigned __int8 **)a2;
  }
  return 1;
}

BOOL YAML::Utils::WriteAlias(std::vector<char> *a1, unsigned __int8 *a2)
{
  YAML::ostream_wrapper::write(a1, "*", 1uLL);
}

BOOL YAML::Utils::`anonymous namespace'::WriteAliasName(std::vector<char> *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  _BOOL4 NextCodePointAndAdvance;
  uint64_t v8;
  unsigned __int8 *v10;
  YAML::ostream_wrapper *v11;

  LODWORD(v11) = 0;
  v4 = a2[23];
  v5 = *(unsigned __int8 **)a2;
  if ((v4 & 0x80u) == 0)
    v6 = a2;
  else
    v6 = *(unsigned __int8 **)a2;
  v10 = v6;
  while (1)
  {
    if ((v4 & 0x80u) != 0)
      v4 = *((_QWORD *)a2 + 1);
    else
      v5 = a2;
    if (!NextCodePointAndAdvance)
      return !NextCodePointAndAdvance;
    v8 = ((_DWORD)v11 - 91);
    if (v8 <= 0x2A)
    {
      if (v8 == 42)
        goto LABEL_22;
      if (((1 << (v11 - 91)) & 0x500000005) != 0)
        return !NextCodePointAndAdvance;
    }
    if (v11 <= 0x2C && ((1 << (char)v11) & 0x100100002600) != 0
      || (_DWORD)v11 == 65279
      || (int)v11 < 32
      || v11 >= 0x7E
      && (v11 >> 16 > 0x10
       || ((_DWORD)v11 - 64976) < 0x20
       || ((unsigned __int16)v11 & 0xFFFE) == 0xFFFE
       || v11 < 0xA0
       || (v11 & 0xFFFFF800) == 0xD800))
    {
      return !NextCodePointAndAdvance;
    }
LABEL_22:
    v4 = a2[23];
    v5 = *(unsigned __int8 **)a2;
  }
}

BOOL YAML::Utils::WriteAnchor(std::vector<char> *a1, unsigned __int8 *a2)
{
  YAML::ostream_wrapper::write(a1, "&", 1uLL);
}

uint64_t YAML::Utils::WriteTag(std::vector<char> *a1, uint64_t *a2, int a3)
{
  char *v6;
  YAML::Exp *v7;
  int v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t v11;
  int *v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  __int128 __p;
  unint64_t v29;
  char __src;

  if (a3)
    v6 = "!<";
  else
    v6 = "!";
  std::string::basic_string[abi:ne180100]<0>(&__p, v6);
  YAML::ostream_wrapper::write(a1, (const void **)&__p);
  if (SHIBYTE(v29) < 0)
    operator delete((void *)__p);
  v8 = *((char *)a2 + 23);
  v9 = v8 < 0;
  if (v8 >= 0)
    v10 = a2;
  else
    v10 = (uint64_t *)*a2;
  if (v9)
    v11 = a2[1];
  else
    v11 = *((unsigned __int8 *)a2 + 23);
  *(_QWORD *)&__p = v10;
  *((_QWORD *)&__p + 1) = v11;
  v29 = 0;
  if (a3)
  {
    YAML::Exp::URI(v7);
    v12 = &YAML::Exp::URI(void)::e;
    if (!v11)
      goto LABEL_44;
  }
  else
  {
    YAML::Exp::Tag(v7);
    v12 = &YAML::Exp::Tag(void)::e;
    if (!v11)
      goto LABEL_44;
  }
  v13 = 0;
  do
  {
    switch(*v12)
    {
      case 1:
        if (*(unsigned __int8 *)(__p + v13) == *((unsigned __int8 *)v12 + 4))
          goto LABEL_37;
        return 0;
      case 2:
        v14 = *(char *)(__p + v13);
        if (*((char *)v12 + 4) > v14 || *((char *)v12 + 5) < v14)
          return 0;
        goto LABEL_37;
      case 3:
        v15 = *((_QWORD *)v12 + 1);
        if (*((_QWORD *)v12 + 2) == v15)
          return 0;
        v16 = 0;
        v17 = 0;
        while (1)
        {
          v18 = YAML::RegEx::MatchUnchecked<YAML::StringCharSource>(v15 + v16, &__p);
          if ((v18 & 0x80000000) == 0)
            break;
          ++v17;
          v15 = *((_QWORD *)v12 + 1);
          v16 += 32;
          if (v17 >= (*((_QWORD *)v12 + 2) - v15) >> 5)
            return 0;
        }
LABEL_39:
        v22 = v18;
        goto LABEL_40;
      case 4:
        v19 = *((_QWORD *)v12 + 1);
        if (*((_QWORD *)v12 + 2) == v19)
          return 0;
        v20 = 0;
        v21 = 0;
        v22 = -1;
        break;
      case 5:
        v24 = *((_QWORD *)v12 + 1);
        if (v24 == *((_QWORD *)v12 + 2)
          || (YAML::RegEx::MatchUnchecked<YAML::StringCharSource>(v24, &__p) & 0x80000000) == 0)
        {
          return 0;
        }
LABEL_37:
        v22 = 1;
        goto LABEL_41;
      case 6:
        v18 = YAML::RegEx::MatchOpSeq<YAML::StringCharSource>((uint64_t)v12, &__p);
        goto LABEL_39;
      default:
        return 0;
    }
    do
    {
      v23 = YAML::RegEx::MatchUnchecked<YAML::StringCharSource>(v19 + v20, &__p);
      if (v23 == -1)
        return 0;
      if (!v21)
        v22 = v23;
      ++v21;
      v19 = *((_QWORD *)v12 + 1);
      v20 += 32;
    }
    while (v21 < (*((_QWORD *)v12 + 2) - v19) >> 5);
LABEL_40:
    if (v22 < 1)
      return 0;
LABEL_41:
    v13 = v29;
    v25 = v22 + 1;
    do
    {
      __src = *(_BYTE *)(__p + v13);
      YAML::ostream_wrapper::write(a1, &__src, 1uLL);
      v13 = ++v29;
      --v25;
    }
    while (v25 > 1);
  }
  while (v13 < *((_QWORD *)&__p + 1));
LABEL_44:
  if (!a3)
    return 1;
  v26 = 1;
  YAML::ostream_wrapper::write(a1, ">", 1uLL);
  return v26;
}

void sub_1BF8C5D64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void YAML::Exp::URI(YAML::Exp *this)
{
  unsigned __int8 v1;
  YAML::Exp *v2;
  YAML::Exp *v3;
  YAML::Exp *v4;
  int v5;
  __int16 v6;
  _QWORD v7[3];
  int v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  void *__p[2];
  char v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  void **v18;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      YAML::Exp::Word(v2);
      std::string::basic_string[abi:ne180100]<0>(__p, "#;/?:@&=+$,_.!~*'()[]");
      YAML::RegEx::RegEx((uint64_t)&v14, (char *)__p, 3);
      v3 = (YAML::Exp *)YAML::operator|(YAML::Exp::Word(void)::e, &v14, (uint64_t)&v16);
      v5 = 1;
      v6 = 37;
      memset(v7, 0, sizeof(v7));
      YAML::Exp::Hex(v3);
      v4 = (YAML::Exp *)YAML::operator+(&v5, YAML::Exp::Hex(void)::e, (uint64_t)&v8);
      YAML::Exp::Hex(v4);
      YAML::operator+(&v8, YAML::Exp::Hex(void)::e, (uint64_t)&v10);
      YAML::operator|(&v16, (int *)&v10, (uint64_t)&YAML::Exp::URI(void)::e);
      v18 = (void **)&v11;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v18);
      v18 = (void **)&v9;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v18);
      v18 = (void **)v7;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v18);
      v10 = (void **)&v17;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v10);
      v10 = (void **)&v15;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v10);
      if (v13 < 0)
        operator delete(__p[0]);
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::URI(void)::e, &dword_1BF794000);
    }
  }
}

void sub_1BF8C5EFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  *(_QWORD *)(v28 - 40) = v27 + 8;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 40));
  *(_QWORD *)(v28 - 40) = &a14;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 40));
  *(_QWORD *)(v28 - 40) = v26;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 40));
  a17 = v28 - 64;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  a17 = v28 - 96;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void YAML::Exp::Tag(YAML::Exp *this)
{
  unsigned __int8 v1;
  YAML::Exp *v2;
  YAML::Exp *v3;
  YAML::Exp *v4;
  int v5;
  __int16 v6;
  _QWORD v7[3];
  int v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  void *__p[2];
  char v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  void **v18;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      YAML::Exp::Word(v2);
      std::string::basic_string[abi:ne180100]<0>(__p, "#;/?:@&=+$_.~*'()");
      YAML::RegEx::RegEx((uint64_t)&v14, (char *)__p, 3);
      v3 = (YAML::Exp *)YAML::operator|(YAML::Exp::Word(void)::e, &v14, (uint64_t)&v16);
      v5 = 1;
      v6 = 37;
      memset(v7, 0, sizeof(v7));
      YAML::Exp::Hex(v3);
      v4 = (YAML::Exp *)YAML::operator+(&v5, YAML::Exp::Hex(void)::e, (uint64_t)&v8);
      YAML::Exp::Hex(v4);
      YAML::operator+(&v8, YAML::Exp::Hex(void)::e, (uint64_t)&v10);
      YAML::operator|(&v16, (int *)&v10, (uint64_t)&YAML::Exp::Tag(void)::e);
      v18 = (void **)&v11;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v18);
      v18 = (void **)&v9;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v18);
      v18 = (void **)v7;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v18);
      v10 = (void **)&v17;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v10);
      v10 = (void **)&v15;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v10);
      if (v13 < 0)
        operator delete(__p[0]);
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Tag(void)::e, &dword_1BF794000);
    }
  }
}

void sub_1BF8C6124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  *(_QWORD *)(v28 - 40) = v27 + 8;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 40));
  *(_QWORD *)(v28 - 40) = &a14;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 40));
  *(_QWORD *)(v28 - 40) = v26;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 40));
  a17 = v28 - 64;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  a17 = v28 - 96;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void YAML::Exp::Word(YAML::Exp *this)
{
  unsigned __int8 v1;
  YAML::Exp *v2;
  int v3;
  __int16 v4;
  _QWORD v5[3];
  void **v6;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      YAML::Exp::AlphaNumeric(v2);
      v3 = 1;
      v4 = 45;
      memset(v5, 0, sizeof(v5));
      YAML::operator|(YAML::Exp::AlphaNumeric(void)::e, &v3, (uint64_t)&YAML::Exp::Word(void)::e);
      v6 = (void **)v5;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v6);
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Word(void)::e, &dword_1BF794000);
    }
  }
}

void sub_1BF8C6284(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 24) = v1;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 24));
  _Unwind_Resume(a1);
}

void YAML::Exp::Hex(YAML::Exp *this)
{
  unsigned __int8 v1;
  YAML::Exp *v2;
  void **v3;
  _QWORD v4[3];
  int v5;
  __int16 v6;
  _QWORD v7[3];
  int v8;
  uint64_t v9;
  void **v10;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      YAML::Exp::Digit(v2);
      v5 = 2;
      v6 = 17985;
      memset(v7, 0, sizeof(v7));
      YAML::operator|(&YAML::Exp::Digit(void)::e, &v5, (uint64_t)&v8);
      LODWORD(v3) = 2;
      WORD2(v3) = 26209;
      memset(v4, 0, sizeof(v4));
      YAML::operator|(&v8, (int *)&v3, (uint64_t)&YAML::Exp::Hex(void)::e);
      v10 = (void **)v4;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v10);
      v3 = (void **)&v9;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v3);
      v3 = (void **)v7;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v3);
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Hex(void)::e, &dword_1BF794000);
    }
  }
}

void sub_1BF8C63B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)(v12 - 40) = v11;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v12 - 40));
  a10 = (void **)(v10 + 8);
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void YAML::Exp::Digit(YAML::Exp *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      YAML::Exp::Digit(void)::e = 2;
      word_1EF580774 = 14640;
      qword_1EF580780 = 0;
      unk_1EF580788 = 0;
      qword_1EF580778 = 0;
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Digit(void)::e, &dword_1BF794000);
    }
  }
}

void YAML::Exp::AlphaNumeric(YAML::Exp *this)
{
  unsigned __int8 v1;
  YAML::Exp *v2;
  YAML::Exp *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
      YAML::Exp::Alpha(v2);
      YAML::Exp::Digit(v3);
      YAML::operator|(YAML::Exp::Alpha(void)::e, &YAML::Exp::Digit(void)::e, (uint64_t)&YAML::Exp::AlphaNumeric(void)::e);
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::AlphaNumeric(void)::e, &dword_1BF794000);
    }
  }
}

void sub_1BF8C6500(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void YAML::Exp::Alpha(YAML::Exp *this)
{
  unsigned __int8 v1;
  void **v2;
  _QWORD v3[3];
  int v4;
  __int16 v5;
  _QWORD v6[3];
  void **v7;

  if ((v1 & 1) == 0)
  {
    {
      v4 = 2;
      v5 = 31329;
      memset(v6, 0, sizeof(v6));
      LODWORD(v2) = 2;
      WORD2(v2) = 23105;
      memset(v3, 0, sizeof(v3));
      YAML::operator|(&v4, (int *)&v2, (uint64_t)&YAML::Exp::Alpha(void)::e);
      v7 = (void **)v3;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v7);
      v2 = (void **)v6;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v2);
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Alpha(void)::e, &dword_1BF794000);
    }
  }
}

void sub_1BF8C65F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  *(_QWORD *)(v3 - 40) = v2;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v3 - 40));
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t YAML::Utils::WriteTagWithPrefix(std::vector<char> *a1, uint64_t *a2, uint64_t *a3)
{
  YAML::Exp *v6;
  uint64_t v7;
  uint64_t *v8;
  int v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  unint64_t v20;
  unsigned int v21;
  YAML::Exp *v22;
  uint64_t v23;
  uint64_t *v24;
  int v26;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  unint64_t v36;
  unsigned int v37;
  __int128 __src;
  unint64_t v40;
  __int128 v41;
  unint64_t v42;
  char v43;

  YAML::ostream_wrapper::write(a1, "!", 1uLL);
  v7 = *((unsigned __int8 *)a2 + 23);
  if ((v7 & 0x80u) == 0)
    v8 = a2;
  else
    v8 = (uint64_t *)*a2;
  if ((v7 & 0x80u) != 0)
    v7 = a2[1];
  *(_QWORD *)&v41 = v8;
  *((_QWORD *)&v41 + 1) = v7;
  v42 = 0;
  if (v7)
  {
LABEL_7:
    YAML::Exp::URI(v6);
    if ((YAML::Exp::URI(void)::e - 3) < 0xFFFFFFFE || v42 < *((_QWORD *)&v41 + 1))
    {
      switch(YAML::Exp::URI(void)::e)
      {
        case 1:
          if (*(unsigned __int8 *)(v41 + v42) != byte_1EF5834AC)
            return 0;
          goto LABEL_39;
        case 2:
          v10 = *(char *)(v41 + v42);
          if (byte_1EF5834AC <= v10 && byte_1EF5834AD >= v10)
            goto LABEL_39;
          return 0;
        case 3:
          v12 = qword_1EF5834B0;
          if (unk_1EF5834B8 == qword_1EF5834B0)
            return 0;
          if ((unint64_t)((unk_1EF5834B8 - qword_1EF5834B0) >> 5) <= 1)
            v13 = 1;
          else
            v13 = (unk_1EF5834B8 - qword_1EF5834B0) >> 5;
          while (1)
          {
            v14 = YAML::RegEx::MatchUnchecked<YAML::StringCharSource>(v12, &v41);
            if ((v14 & 0x80000000) == 0)
              break;
            v12 += 32;
            if (!--v13)
              return v13;
          }
LABEL_41:
          v18 = v14;
          goto LABEL_42;
        case 4:
          v15 = qword_1EF5834B0;
          if (unk_1EF5834B8 == qword_1EF5834B0)
            return 0;
          v16 = 0;
          if ((unint64_t)((unk_1EF5834B8 - qword_1EF5834B0) >> 5) <= 1)
            v17 = 1;
          else
            v17 = (unk_1EF5834B8 - qword_1EF5834B0) >> 5;
          v18 = -1;
          break;
        case 5:
          if (qword_1EF5834B0 == unk_1EF5834B8
            || (YAML::RegEx::MatchUnchecked<YAML::StringCharSource>(qword_1EF5834B0, &v41) & 0x80000000) == 0)
          {
            return 0;
          }
LABEL_39:
          v18 = 1;
          goto LABEL_43;
        case 6:
          v14 = YAML::RegEx::MatchOpSeq<YAML::StringCharSource>((uint64_t)&YAML::Exp::URI(void)::e, &v41);
          goto LABEL_41;
        default:
          return 0;
      }
      while (1)
      {
        v19 = YAML::RegEx::MatchUnchecked<YAML::StringCharSource>(v15, &v41);
        if (v19 == -1)
          break;
        if (!v16)
          v18 = v19;
        ++v16;
        v15 += 32;
        if (v17 == v16)
        {
LABEL_42:
          if (v18 < 1)
            return 0;
LABEL_43:
          v20 = v42;
          v21 = v18 + 1;
          do
          {
            LOBYTE(__src) = *(_BYTE *)(v41 + v20);
            YAML::ostream_wrapper::write(a1, (const char *)&__src, 1uLL);
            v20 = ++v42;
            --v21;
          }
          while (v21 > 1);
          if (v20 < *((_QWORD *)&v41 + 1))
            goto LABEL_7;
          goto LABEL_46;
        }
      }
    }
    return 0;
  }
LABEL_46:
  v13 = 1;
  YAML::ostream_wrapper::write(a1, "!", 1uLL);
  v23 = *((unsigned __int8 *)a3 + 23);
  if ((v23 & 0x80u) == 0)
    v24 = a3;
  else
    v24 = (uint64_t *)*a3;
  if ((v23 & 0x80u) != 0)
    v23 = a3[1];
  *(_QWORD *)&__src = v24;
  *((_QWORD *)&__src + 1) = v23;
  v40 = 0;
  if (v23)
  {
LABEL_52:
    YAML::Exp::Tag(v22);
    if ((YAML::Exp::Tag(void)::e - 3) < 0xFFFFFFFE || v40 < *((_QWORD *)&__src + 1))
    {
      switch(YAML::Exp::Tag(void)::e)
      {
        case 1:
          if (*(unsigned __int8 *)(__src + v40) != byte_1EF583574)
            return 0;
          goto LABEL_84;
        case 2:
          v26 = *(char *)(__src + v40);
          if (byte_1EF583574 > v26 || byte_1EF583575 < v26)
            return 0;
          goto LABEL_84;
        case 3:
          v28 = qword_1EF583578;
          if (unk_1EF583580 == qword_1EF583578)
            return 0;
          if ((unint64_t)((unk_1EF583580 - qword_1EF583578) >> 5) <= 1)
            v29 = 1;
          else
            v29 = (unk_1EF583580 - qword_1EF583578) >> 5;
          while (1)
          {
            v30 = YAML::RegEx::MatchUnchecked<YAML::StringCharSource>(v28, &__src);
            if ((v30 & 0x80000000) == 0)
              break;
            v28 += 32;
            if (!--v29)
              return 0;
          }
LABEL_86:
          v34 = v30;
          goto LABEL_87;
        case 4:
          v31 = qword_1EF583578;
          if (unk_1EF583580 == qword_1EF583578)
            return 0;
          v32 = 0;
          if ((unint64_t)((unk_1EF583580 - qword_1EF583578) >> 5) <= 1)
            v33 = 1;
          else
            v33 = (unk_1EF583580 - qword_1EF583578) >> 5;
          v34 = -1;
          break;
        case 5:
          if (qword_1EF583578 == unk_1EF583580
            || (YAML::RegEx::MatchUnchecked<YAML::StringCharSource>(qword_1EF583578, &__src) & 0x80000000) == 0)
          {
            return 0;
          }
LABEL_84:
          v34 = 1;
          goto LABEL_88;
        case 6:
          v30 = YAML::RegEx::MatchOpSeq<YAML::StringCharSource>((uint64_t)&YAML::Exp::Tag(void)::e, &__src);
          goto LABEL_86;
        default:
          return 0;
      }
      while (1)
      {
        v35 = YAML::RegEx::MatchUnchecked<YAML::StringCharSource>(v31, &__src);
        if (v35 == -1)
          break;
        if (!v32)
          v34 = v35;
        ++v32;
        v31 += 32;
        if (v33 == v32)
        {
LABEL_87:
          if (v34 < 1)
            return 0;
LABEL_88:
          v36 = v40;
          v37 = v34 + 1;
          do
          {
            v43 = *(_BYTE *)(__src + v36);
            YAML::ostream_wrapper::write(a1, &v43, 1uLL);
            v36 = ++v40;
            --v37;
          }
          while (v37 > 1);
          if (v36 >= *((_QWORD *)&__src + 1))
            return 1;
          goto LABEL_52;
        }
      }
    }
    return 0;
  }
  return v13;
}

uint64_t YAML::Utils::WriteBinary(std::vector<char> *a1, uint64_t a2)
{
  uint64_t v3;
  YAML *v4;
  unint64_t v5;
  std::string __p;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
    v4 = *(YAML **)(a2 + 24);
  else
    v4 = *(YAML **)a2;
  if (v3)
    v5 = *(_QWORD *)(a2 + 32);
  else
    v5 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  YAML::EncodeBase64(v4, v5, &__p);
  YAML::Utils::WriteDoubleQuotedString(a1, (unsigned __int8 *)&__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 1;
}

void sub_1BF8C6A94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void InitDefaultsscc_info_HeroHeader_HeroHeader_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/HeroHeader.pb.cc", a4);
  SnippetUI::HeroHeader::HeroHeader((SnippetUI::HeroHeader *)&SnippetUI::_HeroHeader_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&SnippetUI::_HeroHeader_default_instance_, v4);
  qword_1ED1D3D00 = (uint64_t)&SnippetUI::_VisualProperty_default_instance_;
  unk_1ED1D3D08 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D3D10 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D3D18 = &SnippetUI::_WatchListButton_default_instance_;
}

SnippetUI::HeroHeader *SnippetUI::HeroHeader::HeroHeader(SnippetUI::HeroHeader *this)
{
  *(_QWORD *)this = &off_1E792BF28;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 14) = 0;
  if (atomic_load(scc_info_HeroHeader_HeroHeader_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_HeroHeader_HeroHeader_2eproto);
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return this;
}

void sub_1BF8C6B94(_Unwind_Exception *a1)
{
  uint64_t *v1;

  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::HeroHeader::~HeroHeader(SnippetUI::HeroHeader *this)
{
  SnippetUI::HeroHeader::~HeroHeader(this);
  JUMPOUT(0x1C3B8D890);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E792BF28;
  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1C3B8D890](v2, 0x1012C40EC159624);
  }
  if (this != (SnippetUI::HeroHeader *)&SnippetUI::_HeroHeader_default_instance_)
  {
    v4 = *((_QWORD *)this + 3);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = *((_QWORD *)this + 4);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = *((_QWORD *)this + 5);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = *((_QWORD *)this + 6);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

SnippetUI::HeroHeader *SnippetUI::HeroHeader::New(SnippetUI::HeroHeader *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::HeroHeader>(0);
}

SnippetUI::HeroHeader *SnippetUI::HeroHeader::New(SnippetUI::HeroHeader *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<SnippetUI::HeroHeader>(a2);
}

void SnippetUI::HeroHeader::Clear(SnippetUI::HeroHeader *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  google::protobuf::internal::InternalMetadataWithArena *v7;
  char v8;

  v2 = *((_QWORD *)this + 2);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  v3 = *((_QWORD *)this + 3);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 3) = 0;
  v4 = *((_QWORD *)this + 4);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 4) = 0;
  v5 = *((_QWORD *)this + 5);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *((_QWORD *)this + 5) = 0;
  v6 = *((_QWORD *)this + 6);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v8 = *((_BYTE *)this + 8);
  v7 = (SnippetUI::HeroHeader *)((char *)this + 8);
  *((_QWORD *)v7 + 5) = 0;
  if ((v8 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoClear(v7);
}

uint64_t SnippetUI::HeroHeader::IsInitialized(SnippetUI::HeroHeader *this)
{
  return 1;
}

char *SnippetUI::HeroHeader::ByteSizeLong(SnippetUI::HeroHeader *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const google::protobuf::UnknownFieldSet *v5;
  SnippetUI::VisualProperty *v6;
  char *v7;
  SnippetUI::TextProperty *v8;
  char *v9;
  SnippetUI::TextProperty *v10;
  char *v11;
  SnippetUI::WatchListButton *v12;
  char *v13;

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if (*(char *)(v2 + 23) < 0)
  {
    if (*(_QWORD *)(v2 + 8))
      goto LABEL_3;
LABEL_7:
    v5 = 0;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v2 + 23))
    goto LABEL_7;
LABEL_3:
  v4 = *(_QWORD *)(v2 + 8);
  if ((v3 & 0x80u) == 0)
    v4 = v3;
  v5 = (const google::protobuf::UnknownFieldSet *)(v4 + ((9 * (__clz(v4 | 1) ^ 0x1F) + 73) >> 6) + 1);
LABEL_8:
  if (this != (SnippetUI::HeroHeader *)&SnippetUI::_HeroHeader_default_instance_)
  {
    v6 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 3);
    if (v6)
    {
      v7 = SnippetUI::VisualProperty::ByteSizeLong(v6);
      v5 = (const google::protobuf::UnknownFieldSet *)&v7[(_QWORD)v5
                                                        + 1
                                                        + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v8 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
    if (v8)
    {
      v9 = SnippetUI::TextProperty::ByteSizeLong(v8);
      v5 = (const google::protobuf::UnknownFieldSet *)&v9[(_QWORD)v5
                                                        + 1
                                                        + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v10 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
    if (v10)
    {
      v11 = SnippetUI::TextProperty::ByteSizeLong(v10);
      v5 = (const google::protobuf::UnknownFieldSet *)&v11[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6)];
    }
    v12 = (SnippetUI::WatchListButton *)*((_QWORD *)this + 6);
    if (v12)
    {
      v13 = SnippetUI::WatchListButton::ByteSizeLong(v12);
      v5 = (const google::protobuf::UnknownFieldSet *)&v13[(_QWORD)v5
                                                         + 1
                                                         + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6)];
    }
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return google::protobuf::internal::ComputeUnknownFieldsSize((SnippetUI::HeroHeader *)((char *)this + 8), v5, (_DWORD *)this + 14);
  *((_DWORD *)this + 14) = (_DWORD)v5;
  return (char *)v5;
}

uint64_t SnippetUI::HeroHeader::GetCachedSize(SnippetUI::HeroHeader *this)
{
  return *((unsigned int *)this + 14);
}

google::protobuf::internal *SnippetUI::HeroHeader::_InternalParse(SnippetUI::HeroHeader *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  std::string **v5;
  uint64_t *v6;
  google::protobuf::internal::ParseContext *v7;
  google::protobuf::internal *TagFallback;
  char *v9;
  SnippetUI::VisualProperty *v10;
  char *v11;
  SnippetUI::TextProperty *v12;
  SnippetUI::WatchListButton *v13;
  unsigned int v14;
  char *v15;
  std::string *v16;
  BOOL v17;
  char *SizeFallback;
  unsigned int v19;
  int v20;
  int v21;
  BOOL v22;
  int v23;
  google::protobuf::internal *v24;
  int v25;
  google::protobuf::internal *v27;

  v27 = a2;
  v5 = (std::string **)((char *)this + 16);
  v6 = (uint64_t *)((char *)this + 8);
  while (2)
  {
    if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v27, *((_DWORD *)a3 + 23)) & 1) != 0)
      return v27;
    TagFallback = (google::protobuf::internal *)((char *)v27 + 1);
    v9 = (char *)*(unsigned __int8 *)v27;
    if ((*(char *)v27 & 0x80000000) == 0)
      goto LABEL_6;
    v9 = (char *)(v9 + (*(unsigned __int8 *)TagFallback << 7) - 128);
    if ((*(char *)TagFallback & 0x80000000) == 0)
    {
      TagFallback = (google::protobuf::internal *)((char *)v27 + 2);
LABEL_6:
      v27 = TagFallback;
      goto LABEL_7;
    }
    TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v27, v9);
    v27 = TagFallback;
    if (!TagFallback)
      return TagFallback;
LABEL_7:
    switch(v9 >> 3)
    {
      case 1u:
        if (v9 != 10)
          goto LABEL_29;
        v10 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 3);
        if (!v10)
        {
          v10 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
          *((_QWORD *)this + 3) = v10;
          TagFallback = v27;
        }
        v11 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::VisualProperty>(a3, v10, TagFallback);
        goto LABEL_34;
      case 2u:
        if (v9 != 18)
          goto LABEL_29;
        v12 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
        if (v12)
          goto LABEL_19;
        v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 4) = v12;
        goto LABEL_18;
      case 3u:
        if (v9 != 26)
          goto LABEL_29;
        v12 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
        if (v12)
          goto LABEL_19;
        v12 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 5) = v12;
LABEL_18:
        TagFallback = v27;
LABEL_19:
        v11 = google::protobuf::internal::ParseContext::ParseMessage<SnippetUI::TextProperty>(a3, v12, TagFallback);
        goto LABEL_34;
      case 4u:
        if (v9 != 34)
          goto LABEL_29;
        v13 = (SnippetUI::WatchListButton *)*((_QWORD *)this + 6);
        if (!v13)
        {
          v13 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::WatchListButton>(0);
          *((_QWORD *)this + 6) = v13;
          TagFallback = v27;
        }
        v14 = *(unsigned __int8 *)TagFallback;
        if (*(char *)TagFallback < 0)
        {
          SizeFallback = google::protobuf::internal::ReadSizeFallback(TagFallback, (const char *)*(unsigned __int8 *)TagFallback);
          if (!SizeFallback)
            goto LABEL_46;
          v15 = SizeFallback;
          v14 = v19;
        }
        else
        {
          v15 = (char *)TagFallback + 1;
        }
        v20 = google::protobuf::internal::EpsCopyInputStream::PushLimit(a3, v15, v14);
        v21 = *((_DWORD *)a3 + 22);
        v22 = __OFSUB__(v21--, 1);
        *((_DWORD *)a3 + 22) = v21;
        if (v21 < 0 != v22)
          goto LABEL_46;
        v23 = v20;
        v24 = SnippetUI::WatchListButton::_InternalParse(v13, (google::protobuf::internal *)v15, a3);
        if (!v24)
          goto LABEL_46;
        ++*((_DWORD *)a3 + 22);
        if (*((_DWORD *)a3 + 20))
          goto LABEL_46;
        v25 = *((_DWORD *)a3 + 7) + v23;
        *((_DWORD *)a3 + 7) = v25;
        *(_QWORD *)a3 = *((_QWORD *)a3 + 1) + (v25 & (v25 >> 31));
        v27 = v24;
        continue;
      case 6u:
        if (v9 != 50)
          goto LABEL_29;
        v16 = *v5;
        if (*v5 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
        {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v5, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          v16 = *v5;
          TagFallback = v27;
        }
        v11 = google::protobuf::internal::InlineGreedyStringParserUTF8(v16, (std::string::value_type *)TagFallback, (uint64_t)a3, (google::protobuf::internal *)"SnippetUI.HeroHeader.component_name");
        goto LABEL_34;
      default:
LABEL_29:
        if ((_DWORD)v9)
          v17 = (v9 & 7) == 4;
        else
          v17 = 1;
        if (v17)
        {
          *((_DWORD *)a3 + 20) = (_DWORD)v9 - 1;
          return TagFallback;
        }
        v11 = google::protobuf::internal::UnknownFieldParse((google::protobuf::internal *)v9, v6, TagFallback, a3, v7);
LABEL_34:
        v27 = (google::protobuf::internal *)v11;
        if (v11)
          continue;
LABEL_46:
        TagFallback = 0;
        break;
    }
    return TagFallback;
  }
}

const google::protobuf::UnknownFieldSet *SnippetUI::HeroHeader::InternalSerializeWithCachedSizesToArray(SnippetUI::HeroHeader *this, google::protobuf::UnknownFieldSet *a2, google::protobuf::io::EpsCopyOutputStream *a3, google::protobuf::io::EpsCopyOutputStream *a4)
{
  char *v5;
  SnippetUI::VisualProperty *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  google::protobuf::UnknownFieldSet *v11;
  _BYTE *v12;
  _BYTE *v13;
  unsigned int v14;
  unsigned int v15;
  SnippetUI::TextProperty *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  google::protobuf::UnknownFieldSet *v20;
  _BYTE *v21;
  _BYTE *v22;
  unsigned int v23;
  unsigned int v24;
  SnippetUI::TextProperty *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  google::protobuf::UnknownFieldSet *v29;
  _BYTE *v30;
  _BYTE *v31;
  unsigned int v32;
  unsigned int v33;
  SnippetUI::WatchListButton *v34;
  unsigned int v35;
  google::protobuf::UnknownFieldSet *v36;
  unsigned int v37;
  _BYTE *v38;
  _BYTE *v39;
  unsigned int v40;
  unsigned int v41;
  google::protobuf::internal *v42;
  const char *v43;
  uint64_t v44;

  v5 = (char *)a2;
  if (this == (SnippetUI::HeroHeader *)&SnippetUI::_HeroHeader_default_instance_)
    goto LABEL_49;
  v7 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 3);
  if (v7)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
      v7 = (SnippetUI::VisualProperty *)*((_QWORD *)this + 3);
    }
    *v5 = 10;
    v8 = *((_DWORD *)v7 + 15);
    if (v8 > 0x7F)
    {
      v5[1] = v8 | 0x80;
      v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v12 = v5 + 2;
        do
        {
          v13 = v12;
          *v12++ = v10 | 0x80;
          v14 = v10 >> 7;
          v15 = v10 >> 14;
          v10 >>= 7;
        }
        while (v15);
        v11 = (google::protobuf::UnknownFieldSet *)(v13 + 2);
        *v12 = v14;
        goto LABEL_13;
      }
      v5[2] = v10;
      v9 = 3;
    }
    else
    {
      v5[1] = v8;
      v9 = 2;
    }
    v11 = (google::protobuf::UnknownFieldSet *)&v5[v9];
LABEL_13:
    v5 = (char *)SnippetUI::VisualProperty::InternalSerializeWithCachedSizesToArray(v7, v11, a3, a4);
  }
  v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
  if (!v16)
    goto LABEL_26;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v16 = (SnippetUI::TextProperty *)*((_QWORD *)this + 4);
  }
  *v5 = 18;
  v17 = *((_DWORD *)v16 + 15);
  if (v17 > 0x7F)
  {
    v5[1] = v17 | 0x80;
    v19 = v17 >> 7;
    if (v17 >> 14)
    {
      v21 = v5 + 2;
      do
      {
        v22 = v21;
        *v21++ = v19 | 0x80;
        v23 = v19 >> 7;
        v24 = v19 >> 14;
        v19 >>= 7;
      }
      while (v24);
      v20 = (google::protobuf::UnknownFieldSet *)(v22 + 2);
      *v21 = v23;
      goto LABEL_25;
    }
    v5[2] = v19;
    v18 = 3;
  }
  else
  {
    v5[1] = v17;
    v18 = 2;
  }
  v20 = (google::protobuf::UnknownFieldSet *)&v5[v18];
LABEL_25:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v16, v20, a3, a4);
LABEL_26:
  v25 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
  if (!v25)
    goto LABEL_38;
  if ((unint64_t)v5 >= *(_QWORD *)a3)
  {
    v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
    v25 = (SnippetUI::TextProperty *)*((_QWORD *)this + 5);
  }
  *v5 = 26;
  v26 = *((_DWORD *)v25 + 15);
  if (v26 > 0x7F)
  {
    v5[1] = v26 | 0x80;
    v28 = v26 >> 7;
    if (v26 >> 14)
    {
      v30 = v5 + 2;
      do
      {
        v31 = v30;
        *v30++ = v28 | 0x80;
        v32 = v28 >> 7;
        v33 = v28 >> 14;
        v28 >>= 7;
      }
      while (v33);
      v29 = (google::protobuf::UnknownFieldSet *)(v31 + 2);
      *v30 = v32;
      goto LABEL_37;
    }
    v5[2] = v28;
    v27 = 3;
  }
  else
  {
    v5[1] = v26;
    v27 = 2;
  }
  v29 = (google::protobuf::UnknownFieldSet *)&v5[v27];
LABEL_37:
  v5 = (char *)SnippetUI::TextProperty::InternalSerializeWithCachedSizesToArray(v25, v29, a3, a4);
LABEL_38:
  v34 = (SnippetUI::WatchListButton *)*((_QWORD *)this + 6);
  if (v34)
  {
    if ((unint64_t)v5 >= *(_QWORD *)a3)
    {
      v5 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v5);
      v34 = (SnippetUI::WatchListButton *)*((_QWORD *)this + 6);
    }
    *v5 = 34;
    v35 = *((_DWORD *)v34 + 6);
    if (v35 > 0x7F)
    {
      v5[1] = v35 | 0x80;
      v37 = v35 >> 7;
      if (v35 >> 14)
      {
        v38 = v5 + 2;
        do
        {
          v39 = v38;
          *v38++ = v37 | 0x80;
          v40 = v37 >> 7;
          v41 = v37 >> 14;
          v37 >>= 7;
        }
        while (v41);
        v36 = (google::protobuf::UnknownFieldSet *)(v39 + 2);
        *v38 = v40;
      }
      else
      {
        v5[2] = v37;
        v36 = (google::protobuf::UnknownFieldSet *)(v5 + 3);
      }
    }
    else
    {
      v5[1] = v35;
      v36 = (google::protobuf::UnknownFieldSet *)(v5 + 2);
    }
    v5 = (char *)SnippetUI::WatchListButton::InternalSerializeWithCachedSizesToArray(v34, v36, a3, a4);
  }
LABEL_49:
  v42 = (google::protobuf::internal *)*((_QWORD *)this + 2);
  if (*((char *)v42 + 23) < 0)
  {
    v43 = (const char *)*((_QWORD *)v42 + 1);
    if (!v43)
      goto LABEL_55;
    v42 = *(google::protobuf::internal **)v42;
    goto LABEL_54;
  }
  v43 = (const char *)*((unsigned __int8 *)v42 + 23);
  if (*((_BYTE *)v42 + 23))
  {
LABEL_54:
    google::protobuf::internal::WireFormatLite::VerifyUtf8String(v42, v43, 1, (google::protobuf::internal *)"SnippetUI.HeroHeader.component_name");
    v5 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 6, *((_QWORD *)this + 2), v5);
  }
LABEL_55:
  v44 = *((_QWORD *)this + 1);
  if ((v44 & 1) != 0)
    return google::protobuf::internal::WireFormat::InternalSerializeUnknownFieldsToArray((google::protobuf::internal::WireFormat *)(v44 & 0xFFFFFFFFFFFFFFFELL), (const google::protobuf::UnknownFieldSet *)v5, a3, a4);
  else
    return (const google::protobuf::UnknownFieldSet *)v5;
}

void SnippetUI::HeroHeader::CopyFrom(SnippetUI::HeroHeader *this, const google::protobuf::Message *a2)
{
  if (a2 != this)
  {
    SnippetUI::HeroHeader::Clear(this);
    SnippetUI::HeroHeader::MergeFrom(this, a2);
  }
}

void SnippetUI::HeroHeader::MergeFrom(SnippetUI::HeroHeader *this, const google::protobuf::Message *lpsrc)
{
  std::string *v4;
  const SnippetUI::HeroHeader *v5;
  google::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/HeroHeader.pb.cc", 423);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    SnippetUI::HeroHeader::MergeFrom(this, v5);
  else
    google::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1BF8C7504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SnippetUI::HeroHeader::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 56) = a2;
  return this;
}

uint64_t SnippetUI::HeroHeader::GetMetadata(SnippetUI::HeroHeader *this)
{
  google::protobuf::internal::AssignDescriptors((uint64_t)&descriptor_table_HeroHeader_2eproto);
  return file_level_metadata_HeroHeader_2eproto;
}

void *SnippetUI::HeroHeader::default_instance(SnippetUI::HeroHeader *this)
{
  if (atomic_load(scc_info_HeroHeader_HeroHeader_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_HeroHeader_HeroHeader_2eproto);
  return &SnippetUI::_HeroHeader_default_instance_;
}

void SnippetUI::HeroHeader::MergeFrom(SnippetUI::HeroHeader *this, const SnippetUI::HeroHeader *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  int **v8;
  int **v9;
  int **v10;
  int **v11;
  int **v12;
  int **v13;
  int **v14;
  int **v15;
  int **v16;
  const SnippetUI::WatchListButton *v17;
  SnippetUI::WatchListButton *v18;
  const SnippetUI::WatchListButton *v19;
  char v20;
  std::string v21[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/DialogEngine/engine/visual/HeroHeader.pb.cc", 438);
    v4 = google::protobuf::internal::LogMessage::operator<<(v21, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v20, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v21[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::HeroHeader *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL));
  v6 = *((_QWORD *)a2 + 2);
  if (*(char *)(v6 + 23) < 0)
  {
    if (!*(_QWORD *)(v6 + 8))
      goto LABEL_13;
  }
  else if (!*(_BYTE *)(v6 + 23))
  {
    goto LABEL_13;
  }
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  if (v7 != (uint64_t *)v6)
  {
    if (v7 == &google::protobuf::internal::fixed_address_empty_string)
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v6);
    else
      std::string::operator=(*((std::string **)this + 2), (const std::string *)v6);
  }
LABEL_13:
  if (a2 != (const SnippetUI::HeroHeader *)&SnippetUI::_HeroHeader_default_instance_)
  {
    v8 = (int **)*((_QWORD *)a2 + 3);
    if (v8)
    {
      v9 = (int **)*((_QWORD *)this + 3);
      if (!v9)
      {
        v9 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::VisualProperty>(0);
        *((_QWORD *)this + 3) = v9;
        v8 = (int **)*((_QWORD *)a2 + 3);
      }
      if (v8)
        v10 = v8;
      else
        v10 = (int **)&SnippetUI::_VisualProperty_default_instance_;
      SnippetUI::VisualProperty::MergeFrom(v9, v10);
    }
    v11 = (int **)*((_QWORD *)a2 + 4);
    if (v11)
    {
      v12 = (int **)*((_QWORD *)this + 4);
      if (!v12)
      {
        v12 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 4) = v12;
        v11 = (int **)*((_QWORD *)a2 + 4);
      }
      if (v11)
        v13 = v11;
      else
        v13 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v12, v13);
    }
    v14 = (int **)*((_QWORD *)a2 + 5);
    if (v14)
    {
      v15 = (int **)*((_QWORD *)this + 5);
      if (!v15)
      {
        v15 = (int **)google::protobuf::Arena::CreateMaybeMessage<SnippetUI::TextProperty>(0);
        *((_QWORD *)this + 5) = v15;
        v14 = (int **)*((_QWORD *)a2 + 5);
      }
      if (v14)
        v16 = v14;
      else
        v16 = (int **)&SnippetUI::_TextProperty_default_instance_;
      SnippetUI::TextProperty::MergeFrom(v15, v16);
    }
    v17 = (const SnippetUI::WatchListButton *)*((_QWORD *)a2 + 6);
    if (v17)
    {
      v18 = (SnippetUI::WatchListButton *)*((_QWORD *)this + 6);
      if (!v18)
      {
        v18 = google::protobuf::Arena::CreateMaybeMessage<SnippetUI::WatchListButton>(0);
        *((_QWORD *)this + 6) = v18;
        v17 = (const SnippetUI::WatchListButton *)*((_QWORD *)a2 + 6);
      }
      if (v17)
        v19 = v17;
      else
        v19 = (const SnippetUI::WatchListButton *)&SnippetUI::_WatchListButton_default_instance_;
      SnippetUI::WatchListButton::MergeFrom(v18, v19);
    }
  }
}

void sub_1BF8C7724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

SnippetUI::HeroHeader *google::protobuf::Arena::CreateMaybeMessage<SnippetUI::HeroHeader>(google::protobuf::internal::ArenaImpl *this)
{
  SnippetUI::HeroHeader *AlignedAndAddCleanup;

  if (this)
  {
    if (*((_QWORD *)this + 14))
    AlignedAndAddCleanup = (SnippetUI::HeroHeader *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, 0x40uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<SnippetUI::HeroHeader>);
    SnippetUI::HeroHeader::HeroHeader(AlignedAndAddCleanup);
  }
  else
  {
    AlignedAndAddCleanup = (SnippetUI::HeroHeader *)operator new();
    SnippetUI::HeroHeader::HeroHeader(AlignedAndAddCleanup);
  }
  return AlignedAndAddCleanup;
}

void sub_1BF8C77C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x10A1C406AB77EA5);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<SnippetUI::HeroHeader>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void SnippetUI::HeroHeader::InitAsDefaultInstance(SnippetUI::HeroHeader *this)
{
  qword_1ED1D3D00 = (uint64_t)&SnippetUI::_VisualProperty_default_instance_;
  unk_1ED1D3D08 = &SnippetUI::_TextProperty_default_instance_;
  qword_1ED1D3D10 = (uint64_t)&SnippetUI::_TextProperty_default_instance_;
  unk_1ED1D3D18 = &SnippetUI::_WatchListButton_default_instance_;
}

uint64_t SnippetUI::HeroHeader::_Internal::banner(SnippetUI::HeroHeader::_Internal *this, const SnippetUI::HeroHeader *a2)
{
  return *((_QWORD *)this + 3);
}

uint64_t SnippetUI::HeroHeader::_Internal::text_1(SnippetUI::HeroHeader::_Internal *this, const SnippetUI::HeroHeader *a2)
{
  return *((_QWORD *)this + 4);
}

uint64_t SnippetUI::HeroHeader::_Internal::text_2(SnippetUI::HeroHeader::_Internal *this, const SnippetUI::HeroHeader *a2)
{
  return *((_QWORD *)this + 5);
}

uint64_t SnippetUI::HeroHeader::_Internal::watch_list_button(SnippetUI::HeroHeader::_Internal *this, const SnippetUI::HeroHeader *a2)
{
  return *((_QWORD *)this + 6);
}

uint64_t SnippetUI::HeroHeader::clear_banner(SnippetUI::HeroHeader *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 3);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 3) = 0;
  return result;
}

uint64_t SnippetUI::HeroHeader::clear_text_1(SnippetUI::HeroHeader *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 4) = 0;
  return result;
}

uint64_t SnippetUI::HeroHeader::clear_text_2(SnippetUI::HeroHeader *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 5);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 5) = 0;
  return result;
}

uint64_t SnippetUI::HeroHeader::clear_watch_list_button(SnippetUI::HeroHeader *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 6);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 6) = 0;
  return result;
}

SnippetUI::HeroHeader *SnippetUI::HeroHeader::HeroHeader(SnippetUI::HeroHeader *this, const SnippetUI::HeroHeader *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  SnippetUI::VisualProperty *v8;
  SnippetUI::WatchListButton *v9;
  SnippetUI::TextProperty *v10;
  SnippetUI::TextProperty *v11;

  *(_QWORD *)this = &off_1E792BF28;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 14) = 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
    google::protobuf::internal::InternalMetadataWithArena::DoMergeFrom((SnippetUI::HeroHeader *)((char *)this + 8), (const google::protobuf::UnknownFieldSet *)(v4 & 0xFFFFFFFFFFFFFFFELL));
  *((_QWORD *)this + 2) = &google::protobuf::internal::fixed_address_empty_string;
  v5 = *((_QWORD *)a2 + 2);
  if (*(char *)(v5 + 23) < 0)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = *(unsigned __int8 *)(v5 + 23);
  if ((uint64_t *)v5 != &google::protobuf::internal::fixed_address_empty_string && v6 != 0)
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((std::string **)this + 2, v5);
  if (a2 == (const SnippetUI::HeroHeader *)&SnippetUI::_HeroHeader_default_instance_)
  {
    v9 = 0;
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 4) = 0;
    *((_QWORD *)this + 5) = 0;
  }
  else
  {
    if (*((_QWORD *)a2 + 3))
    {
      v8 = (SnippetUI::VisualProperty *)operator new();
      SnippetUI::VisualProperty::VisualProperty(v8, *((const SnippetUI::VisualProperty **)a2 + 3));
    }
    else
    {
      v8 = 0;
    }
    *((_QWORD *)this + 3) = v8;
    if (*((_QWORD *)a2 + 4))
    {
      v10 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v10, *((const SnippetUI::TextProperty **)a2 + 4));
    }
    else
    {
      v10 = 0;
    }
    *((_QWORD *)this + 4) = v10;
    if (*((_QWORD *)a2 + 5))
    {
      v11 = (SnippetUI::TextProperty *)operator new();
      SnippetUI::TextProperty::TextProperty(v11, *((const SnippetUI::TextProperty **)a2 + 5));
    }
    else
    {
      v11 = 0;
    }
    *((_QWORD *)this + 5) = v11;
    if (*((_QWORD *)a2 + 6))
    {
      v9 = (SnippetUI::WatchListButton *)operator new();
      SnippetUI::WatchListButton::WatchListButton(v9, *((const SnippetUI::WatchListButton **)a2 + 6));
    }
    else
    {
      v9 = 0;
    }
  }
  *((_QWORD *)this + 6) = v9;
  return this;
}

void sub_1BF8C7B74(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x1C3B8D890](v2, 0x10A1C4084265165);
  google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void SnippetUI::HeroHeader::CopyFrom(SnippetUI::HeroHeader *this, const SnippetUI::HeroHeader *a2)
{
  if (a2 != this)
  {
    SnippetUI::HeroHeader::Clear(this);
    SnippetUI::HeroHeader::MergeFrom(this, a2);
  }
}

void SnippetUI::HeroHeader::InternalSwap(SnippetUI::HeroHeader *this, SnippetUI::HeroHeader *a2)
{
  google::protobuf::internal::InternalMetadataWithArena *v4;
  uint64_t v5;
  google::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  google::protobuf::UnknownFieldSet *v17;

  v4 = (SnippetUI::HeroHeader *)((char *)this + 8);
  v5 = *((_QWORD *)a2 + 1);
  if ((*((_BYTE *)this + 8) & 1) != 0)
  {
    if ((v5 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<google::protobuf::UnknownFieldSet,google::protobuf::internal::InternalMetadataWithArena>::mutable_unknown_fields_slow((uint64_t *)a2 + 1);
      v6 = v17;
      goto LABEL_6;
    }
LABEL_5:
    v6 = (google::protobuf::UnknownFieldSet *)(v5 & 0xFFFFFFFFFFFFFFFELL);
LABEL_6:
    google::protobuf::internal::InternalMetadataWithArena::DoSwap(v4, v6);
    goto LABEL_7;
  }
  if ((v5 & 1) != 0)
    goto LABEL_5;
LABEL_7:
  v7 = (uint64_t *)*((_QWORD *)this + 2);
  v8 = (uint64_t **)((char *)a2 + 16);
  if (v7 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
      goto LABEL_13;
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v7 = (uint64_t *)*((_QWORD *)this + 2);
  }
  v9 = *v8;
  if (*v8 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 2, 0, (__int128 *)&google::protobuf::internal::fixed_address_empty_string);
    v9 = *v8;
  }
  v10 = v7[2];
  v11 = *(_OWORD *)v7;
  v12 = v9[2];
  *(_OWORD *)v7 = *(_OWORD *)v9;
  v7[2] = v12;
  *(_OWORD *)v9 = v11;
  v9[2] = v10;
LABEL_13:
  v13 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v13;
  v14 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v14;
  v15 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = v15;
  v16 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v16;
}

void sub_1BF8C7E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1BF8C7F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1BF8C80C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,char a23)
{
  void *v23;
  void *v24;
  void *v25;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);

  _Unwind_Resume(a1);
}

void sub_1BF8C82F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100](v32 - 80);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);

  _Unwind_Resume(a1);
}

void sub_1BF8C84E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1BF8C8670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1BF8C8814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  void *v21;
  void *v22;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&a21);

  _Unwind_Resume(a1);
}

std::string *siri::dialogengine::DialogCurrency::toString(siri::dialogengine::DialogCurrency *this, siri::dialogengine::Context *a2, const siri::dialogengine::VariableObject *a3)
{
  return siri::dialogengine::FormatCurrency(this, (uint64_t)a2, 0);
}

std::string *siri::dialogengine::FormatCurrency(siri::dialogengine::Context *a1, uint64_t a2, unsigned int a3)
{
  double *RequiredNumberParameter;
  double *v7;
  void *RequiredStringParameter;
  void *v9;
  double v10;
  std::string *v11;
  void *v12;
  unsigned int v13;
  uint64_t i;
  void *v16[2];
  char v17;
  void *v18;
  char v19;
  void *v20;
  char v21;
  void *v22;
  char v23;
  void *v24;
  char v25;
  void *v26;
  char v27;
  void *v28;
  char v29;
  void *v30[2];
  char v31;
  void *v32;
  char v33;
  void *v34;
  char v35;
  std::string v36;
  __int128 v37;
  __int128 v38;
  std::string v39;
  __int128 v40;
  std::string v41;
  __int128 v42;
  _QWORD **v43;
  _QWORD *v44[2];
  std::string v45;
  void *v46;
  char v47;
  void *v48;
  char v49;
  void *v50;
  char v51;
  void *v52;
  char v53;
  void *v54;
  char v55;
  void *v56;
  char v57;
  std::string __p;
  void *v59;
  char v60;
  void *v61;
  char v62;
  void *v63;
  char v64;
  void *v65;
  char v66;
  void *v67;
  char v68;
  void *v69;
  char v70;
  _QWORD **v71;
  _QWORD *v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75[3];
  __int128 v76;
  uint64_t v77[3];
  __int128 v78;
  _QWORD v79[3];
  __int128 v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&__p, "value");
  RequiredNumberParameter = (double *)siri::dialogengine::GetRequiredNumberParameter((const void **)&__p.__r_.__value_.__l.__data_, a2);
  v7 = RequiredNumberParameter;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (RequiredNumberParameter)
      goto LABEL_3;
LABEL_8:
    v11 = (std::string *)operator new();
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    std::string::basic_string[abi:ne180100]<0>(&v45, "0");
    siri::dialogengine::VariableString::VariableString((uint64_t)v11, &__p, (uint64_t)&v45);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return v11;
    v12 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_113:
    operator delete(v12);
    return v11;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v7)
    goto LABEL_8;
LABEL_3:
  std::string::basic_string[abi:ne180100]<0>(&__p, "units");
  RequiredStringParameter = siri::dialogengine::GetRequiredStringParameter((const void **)&__p.__r_.__value_.__l.__data_, a2);
  v9 = RequiredStringParameter;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (RequiredStringParameter)
      goto LABEL_5;
    goto LABEL_13;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v9)
  {
LABEL_13:
    v11 = (std::string *)operator new();
    std::string::basic_string[abi:ne180100]<0>(&v45, "");
    (*(void (**)(std::string *__return_ptr, double *))(*(_QWORD *)v7 + 48))(&__p, v7);
    siri::dialogengine::VariableString::VariableString(v11, &v45, (const siri::dialogengine::SpeakableString *)&__p);
    if (v70 < 0)
      operator delete(v69);
    if (v68 < 0)
      operator delete(v67);
    if (v66 < 0)
      operator delete(v65);
    if (v64 < 0)
      operator delete(v63);
    if (v62 < 0)
      operator delete(v61);
    if (v60 < 0)
      operator delete(v59);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return v11;
    v12 = (void *)v45.__r_.__value_.__r.__words[0];
    goto LABEL_113;
  }
LABEL_5:
  v10 = v7[9];
  (*(void (**)(std::string *__return_ptr, void *))(*(_QWORD *)v9 + 48))(&__p, v9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v36, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v36 = __p;
  if (v70 < 0)
    operator delete(v69);
  if (v68 < 0)
    operator delete(v67);
  if (v66 < 0)
    operator delete(v65);
  if (v64 < 0)
    operator delete(v63);
  if (v62 < 0)
    operator delete(v61);
  if (v60 < 0)
    operator delete(v59);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (fabs(v10) >= 1000.0)
    v13 = a3;
  else
    v13 = 0;
  siri::dialogengine::GetCurrencyInfo((uint64_t)v30, a1, (unsigned __int8 *)&v36, v13);
  std::string::basic_string[abi:ne180100]<0>(&v45, "unit#currencyUnit");
  v72 = 0;
  v73 = 0;
  v71 = &v72;
  siri::dialogengine::GetCurrencyCATValue((uint64_t)&__p, a1, (uint64_t)&v36, (uint64_t)&v45, (uint64_t)v30, &v71, v10);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(v72);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v71, "unit#currencySubUnit");
  v44[0] = 0;
  v44[1] = 0;
  v43 = v44;
  siri::dialogengine::GetCurrencyCATValue((uint64_t)&v45, a1, (uint64_t)&v36, (uint64_t)&v71, (uint64_t)v30, &v43, v10);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(v44[0]);
  if (SHIBYTE(v73) < 0)
    operator delete(v71);
  siri::dialogengine::SpeakableString::ToMultiplexedString((siri::dialogengine::SpeakableString *)&__p, &v41);
  siri::dialogengine::CreateJSONStringVal((uint64_t)&v41, (uint64_t *)&v42);
  std::string::basic_string[abi:ne180100]<0>(&v71, "currencyUnit");
  v74 = v42;
  v42 = 0uLL;
  siri::dialogengine::SpeakableString::ToMultiplexedString((siri::dialogengine::SpeakableString *)&v45, &v39);
  siri::dialogengine::CreateJSONStringVal((uint64_t)&v39, (uint64_t *)&v40);
  std::string::basic_string[abi:ne180100]<0>(v75, "currencySubUnit");
  v76 = v40;
  v40 = 0uLL;
  siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)(v13 & 1), (uint64_t *)&v38);
  std::string::basic_string[abi:ne180100]<0>(v77, "compactDecimalLong");
  v78 = v38;
  v38 = 0uLL;
  siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)((v13 >> 1) & 1), (uint64_t *)&v37);
  std::string::basic_string[abi:ne180100]<0>(v79, "compactDecimalShort");
  v80 = v37;
  v37 = 0uLL;
  std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100]((uint64_t)&v43, (const void **)&v71, 4);
  for (i = 0; i != -20; i -= 5)
  {
    std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v80 + i * 8);
    if (SHIBYTE(v79[i + 2]) < 0)
      operator delete((void *)v79[i]);
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v71, "unit#currencyValue");
  siri::dialogengine::GetCurrencyCATValue((uint64_t)v16, a1, (uint64_t)&v36, (uint64_t)&v71, (uint64_t)v30, &v43, v10);
  if (SHIBYTE(v73) < 0)
    operator delete(v71);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(v44[0]);
  if (v57 < 0)
    operator delete(v56);
  if (v55 < 0)
    operator delete(v54);
  if (v53 < 0)
    operator delete(v52);
  if (v51 < 0)
    operator delete(v50);
  if (v49 < 0)
    operator delete(v48);
  if (v47 < 0)
    operator delete(v46);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if (v70 < 0)
    operator delete(v69);
  if (v68 < 0)
    operator delete(v67);
  if (v66 < 0)
    operator delete(v65);
  if (v64 < 0)
    operator delete(v63);
  if (v62 < 0)
    operator delete(v61);
  if (v60 < 0)
    operator delete(v59);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v11 = (std::string *)operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::dialogengine::VariableString::VariableString(v11, &__p, (const siri::dialogengine::SpeakableString *)v16);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v29 < 0)
    operator delete(v28);
  if (v27 < 0)
    operator delete(v26);
  if (v25 < 0)
    operator delete(v24);
  if (v23 < 0)
    operator delete(v22);
  if (v21 < 0)
    operator delete(v20);
  if (v19 < 0)
    operator delete(v18);
  if (v17 < 0)
    operator delete(v16[0]);
  if (v35 < 0)
    operator delete(v34);
  if (v33 < 0)
    operator delete(v32);
  if (v31 < 0)
    operator delete(v30[0]);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
  {
    v12 = (void *)v36.__r_.__value_.__r.__words[0];
    goto LABEL_113;
  }
  return v11;
}

void sub_1BF8C8F7C(_Unwind_Exception *a1)
{
  siri::dialogengine::SpeakableString::~SpeakableString((void **)&STACK[0x260]);
  _Unwind_Resume(a1);
}

void siri::dialogengine::GetCurrencyInfo(uint64_t a1, siri::dialogengine::Context *a2, unsigned __int8 *a3, char a4)
{
  void **v7;
  void **v8;
  int v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  int v15;
  BOOL v16;
  const char *v17;
  int v18;
  void *v19;
  std::string *v20;
  __int128 v21;
  char v22;
  std::string::size_type size;
  uint64_t v24;
  int v25;
  unsigned __int8 *v26;
  uint64_t v27;
  std::string *p_p;
  int v29;
  int v30;
  int v31;
  int v32;
  BOOL v34;
  BOOL v35;
  void *v36;
  int isAvailable;
  unsigned __int8 v38;
  unint64_t v39;
  const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *v40;
  std::string::size_type v41;
  std::__wrap_iter<const char *> v42;
  std::__wrap_iter<const char *> v43;
  std::string *v44;
  std::string *v45;
  __int128 v46;
  std::string *v47;
  __int128 v48;
  _QWORD *v49;
  std::string v50;
  std::string v51;
  uint64_t v52;
  int v53;
  std::string v54;
  std::string __p;
  std::string v56;
  UChar us[256];
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  siri::dialogengine::Context::GetDeviceLocale(a2, &v56);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)a1, "");
  v7 = (void **)(a1 + 24);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 24), "");
  v8 = (void **)(a1 + 48);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 48), "");
  *(_WORD *)(a1 + 72) = 1;
  *(_DWORD *)(a1 + 76) = 2;
  v9 = (char)a3[23];
  if (v9 >= 0)
    v10 = a3[23];
  else
    v10 = *((_QWORD *)a3 + 1);
  if (v10 == 4)
  {
    if (v9 >= 0)
      v11 = a3;
    else
      v11 = *(_BYTE **)a3;
    if (*v11 == 88)
      goto LABEL_13;
  }
  else if (v10 == 3)
  {
    if (v9 >= 0)
      v11 = a3;
    else
      v11 = *(_BYTE **)a3;
LABEL_13:
    v12 = MEMORY[0x1E0C80978];
    do
    {
      v13 = (char)*v11;
      if ((v13 & 0x80000000) != 0)
        v14 = __maskrune(v13, 0x100uLL);
      else
        v14 = *(_DWORD *)(v12 + 4 * v13 + 60) & 0x100;
      if (!v14)
        goto LABEL_29;
      ++v11;
      --v10;
    }
    while (v10);
    v15 = (char)a3[23];
    v16 = v15 < 0;
    if (v15 >= 0)
      v17 = (const char *)a3;
    else
      v17 = *(const char **)a3;
    v18 = a3[23];
    if (v16)
      v18 = *((_DWORD *)a3 + 2);
    u_charsToUChars(v17, us, v18 + 1);
    v53 = 0;
    v52 = unum_open();
    v53 = 0;
    if ((int)ucurr_forLocale() >= 1)
    {
      siri::dialogengine::UCharToString((const unsigned __int16 *)0x100, &__p);
      v22 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      v24 = a3[23];
      v25 = (char)v24;
      if ((v24 & 0x80u) != 0)
        v24 = *((_QWORD *)a3 + 1);
      if (size != v24)
      {
        v35 = 0;
LABEL_54:
        *(_BYTE *)(a1 + 72) = v35;
        if ((v22 & 0x80) == 0)
          goto LABEL_59;
        v36 = (void *)__p.__r_.__value_.__r.__words[0];
        goto LABEL_57;
      }
      if (v25 >= 0)
        v26 = a3;
      else
        v26 = *(unsigned __int8 **)a3;
      if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        v36 = (void *)__p.__r_.__value_.__r.__words[0];
        *(_BYTE *)(a1 + 72) = memcmp(__p.__r_.__value_.__l.__data_, v26, __p.__r_.__value_.__l.__size_) == 0;
LABEL_57:
        operator delete(v36);
        goto LABEL_59;
      }
      if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
      {
        v27 = HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1;
        p_p = &__p;
        do
        {
          v30 = p_p->__r_.__value_.__s.__data_[0];
          p_p = (std::string *)((char *)p_p + 1);
          v29 = v30;
          v32 = *v26++;
          v31 = v32;
          v34 = v27-- != 0;
          v35 = v29 == v31;
        }
        while (v35 && v34);
        goto LABEL_54;
      }
      *(_BYTE *)(a1 + 72) = 1;
    }
LABEL_59:
    v53 = 0;
    isAvailable = ucurr_isAvailable();
    *(_BYTE *)(a1 + 73) = isAvailable != 0;
    if (!isAvailable)
      unum_setAttribute();
    v53 = 0;
    unum_formatDoubleCurrency();
    siri::dialogengine::UCharToString((const unsigned __int16 *)0x100, &__p);
    if (*(char *)(a1 + 71) < 0)
      operator delete(*v8);
    *(_OWORD *)v8 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 64) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    if ((a4 & 3) != 0)
    {
      if ((v38 & 1) == 0
      {
        v49 = (_QWORD *)operator new();
        *v49 = 0;
        siri::dialogengine::GetNumberSeparatorsRegex(void)::flag = (uint64_t)v49;
      }
      v39 = atomic_load((unint64_t *)siri::dialogengine::GetNumberSeparatorsRegex(void)::flag);
      if (v39 != -1)
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v51;
        v54.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        std::__call_once((std::once_flag::_State_type *)siri::dialogengine::GetNumberSeparatorsRegex(void)::flag, &v54, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetNumberSeparatorsRegex(void)::$_0 &&>>);
      }
      v40 = (const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *)siri::dialogengine::GetNumberSeparatorsRegex(void)::sRegex;
      memset(&__p, 0, sizeof(__p));
      if ((a4 & 1) != 0)
        siri::dialogengine::GetICUCompactNumberFormatLong(&v54);
      else
        siri::dialogengine::GetICUCompactNumberFormatShort(&v54);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p = v54;
      siri::dialogengine::ReplaceSpecialUnicodeSpaceChars(a1 + 48, &v54);
      memset(&v51, 0, sizeof(v51));
      v41 = HIBYTE(v54.__r_.__value_.__r.__words[2]);
      if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v42.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v54;
      else
        v42.__i_ = (std::__wrap_iter<const char *>::iterator_type)v54.__r_.__value_.__r.__words[0];
      if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v41 = v54.__r_.__value_.__l.__size_;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v44 = &__p;
      else
        v44 = (std::string *)__p.__r_.__value_.__r.__words[0];
      v43.__i_ = &v42.__i_[v41];
      std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>(&v51, v42, v43, v40, (const char *)v44);
      if (*(char *)(a1 + 71) < 0)
        operator delete(*v8);
      *(_OWORD *)v8 = *(_OWORD *)&v51.__r_.__value_.__l.__data_;
      *(_QWORD *)(a1 + 64) = *((_QWORD *)&v51.__r_.__value_.__l + 2);
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v54.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    v53 = 0;
    *(_DWORD *)(a1 + 76) = ucurr_getDefaultFractionDigits();
    LODWORD(v50.__r_.__value_.__l.__data_) = 0;
    v53 = 0;
    ucurr_getName();
    if (v53 < 1)
    {
      siri::dialogengine::UCharToString((const unsigned __int16 *)LODWORD(v50.__r_.__value_.__l.__data_), &__p);
      if (*(char *)(a1 + 23) < 0)
        operator delete(*(void **)a1);
      *(std::string *)a1 = __p;
      v53 = 0;
      uplrules_open();
      v53 = 0;
      uplrules_select();
      siri::dialogengine::UCharToString((const unsigned __int16 *)0x100, &__p);
      uplrules_close();
      v53 = 0;
      ucurr_getPluralName();
      if (v53 < 1)
      {
        siri::dialogengine::UCharToString((const unsigned __int16 *)LODWORD(v50.__r_.__value_.__l.__data_), &v54);
        if (*(char *)(a1 + 47) < 0)
          operator delete(*v7);
        *(_OWORD *)v7 = *(_OWORD *)&v54.__r_.__value_.__l.__data_;
        *(_QWORD *)(a1 + 40) = *((_QWORD *)&v54.__r_.__value_.__l + 2);
      }
      else
      {
        std::operator+<char>();
        v47 = std::string::append(&v51, "'");
        v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        v54.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        siri::dialogengine::Log::LogWithLevel((uint64_t)&v54, 3u);
        if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v54.__r_.__value_.__l.__data_);
        if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v51.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_63;
      v19 = (void *)__p.__r_.__value_.__r.__words[0];
    }
    else
    {
      std::operator+<char>();
      v45 = std::string::append(&v54, "'");
      v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v46;
      v45->__r_.__value_.__l.__size_ = 0;
      v45->__r_.__value_.__r.__words[2] = 0;
      v45->__r_.__value_.__r.__words[0] = 0;
      siri::dialogengine::Log::LogWithLevel((uint64_t)&__p, 3u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_63;
      v19 = (void *)v54.__r_.__value_.__r.__words[0];
    }
    operator delete(v19);
LABEL_63:
    std::unique_ptr<void *,siri::dialogengine::UNumberFormatDeleter>::reset[abi:ne180100](&v52);
    goto LABEL_64;
  }
LABEL_29:
  std::operator+<char>();
  v20 = std::string::append(&v54, "'");
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  siri::dialogengine::Log::LogWithLevel((uint64_t)&__p, 3u);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
LABEL_64:
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
}

void sub_1BF8C9ABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  void **v44;
  void **v45;

  std::unique_ptr<void *,siri::dialogengine::UNumberFormatDeleter>::reset[abi:ne180100](&a23);
  siri::dialogengine::CurrencyInfo::~CurrencyInfo(v44);
  if (a44 < 0)
    operator delete(*v45);
  _Unwind_Resume(a1);
}

void siri::dialogengine::GetCurrencyCATValue(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, double a7)
{
  double v14;
  double v15;
  double v16;
  double v17;
  BOOL v18;
  BOOL v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v27;
  _BOOL8 v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  __int128 *v78;
  __int128 *v79;
  __int128 *v80;
  uint64_t *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  __int128 *v85;
  __int128 *v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t *v103;
  _QWORD *v104[2];
  std::string __p;
  __int128 v106;
  uint64_t v107[3];
  __int128 v108;
  uint64_t v109[3];
  __int128 v110;
  uint64_t v111[3];
  __int128 v112;
  uint64_t v113[3];
  __int128 v114;
  uint64_t v115[3];
  __int128 v116;
  uint64_t v117[3];
  __int128 v118;
  uint64_t v119[3];
  __int128 v120;
  uint64_t v121[3];
  __int128 v122;
  uint64_t v123[3];
  __int128 v124;
  uint64_t v125[3];
  __int128 v126;
  uint64_t v127[3];
  __int128 v128;
  uint64_t v129[3];
  __int128 v130;
  uint64_t v131[3];
  __int128 v132;
  uint64_t v133[3];
  __int128 v134;
  uint64_t v135[3];
  __int128 v136;
  uint64_t v137;

  v137 = *MEMORY[0x1E0C80C00];
  v14 = __exp10((double)*(int *)(a5 + 76));
  v15 = round(v14 * a7);
  v16 = v15 - v14 * a7;
  v17 = fmod(v15, 2.0);
  v18 = v16 == -0.5 || v16 == 0.5;
  v19 = !v18 || v17 == 0.0;
  v20 = v14 * a7 - v16;
  if (v19)
    v20 = v15;
  v21 = v20 / v14;
  v22 = floor(v20 / v14);
  v23 = ceil(v21);
  if (v21 < 0.0)
    v24 = v23;
  else
    v24 = v22;
  siri::dialogengine::GetSubUnitValue((siri::dialogengine *)*(unsigned int *)(a5 + 76), a7);
  if (v24 == 0.0 && a7 < 0.0)
    v27 = -v25;
  else
    v27 = v25;
  v28 = v24 != 0.0 || v27 == 0.0;
  siri::dialogengine::CreateJSONStringVal(a3, (uint64_t *)&v102);
  std::string::basic_string[abi:ne180100]<0>(&__p, "code");
  v106 = v102;
  v102 = 0uLL;
  siri::dialogengine::CreateJSONStringVal(a5 + 24, (uint64_t *)&v101);
  std::string::basic_string[abi:ne180100]<0>(v107, "name");
  v108 = v101;
  v101 = 0uLL;
  siri::dialogengine::CreateJSONStringVal(a5, (uint64_t *)&v100);
  std::string::basic_string[abi:ne180100]<0>(v109, "symbol");
  v110 = v100;
  v100 = 0uLL;
  siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)*(unsigned __int8 *)(a5 + 73), (uint64_t *)&v99);
  std::string::basic_string[abi:ne180100]<0>(v111, "knownCurrency");
  v112 = v99;
  v99 = 0uLL;
  siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)1, (uint64_t *)&v98);
  std::string::basic_string[abi:ne180100]<0>(v113, "abbreviated");
  v114 = v98;
  v98 = 0uLL;
  siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)*(unsigned __int8 *)(a5 + 72), (uint64_t *)&v97);
  std::string::basic_string[abi:ne180100]<0>(v115, "native");
  v116 = v97;
  v97 = 0uLL;
  siri::dialogengine::CreateJSONBoolVal((siri::dialogengine *)v28, (uint64_t *)&v96);
  std::string::basic_string[abi:ne180100]<0>(v117, "wholeUnitsDisplayed");
  v118 = v96;
  v96 = 0uLL;
  siri::dialogengine::CreateJSONStringVal(a5 + 48, (uint64_t *)&v95);
  std::string::basic_string[abi:ne180100]<0>(v119, "valueForDisplay");
  v120 = v95;
  v95 = 0uLL;
  siri::dialogengine::CreateJSONDoubleVal(v21, (uint64_t *)&v94);
  std::string::basic_string[abi:ne180100]<0>(v121, "roundedValue");
  v122 = v94;
  v94 = 0uLL;
  siri::dialogengine::CreateJSONDoubleVal(v24, (uint64_t *)&v93);
  std::string::basic_string[abi:ne180100]<0>(v123, "unitPrice");
  v124 = v93;
  v93 = 0uLL;
  siri::dialogengine::CreateJSONDoubleVal(v27, (uint64_t *)&v92);
  std::string::basic_string[abi:ne180100]<0>(v125, "subUnitPrice");
  v126 = v92;
  v92 = 0uLL;
  siri::dialogengine::CreateJSONDoubleVal(v27, (uint64_t *)&v91);
  std::string::basic_string[abi:ne180100]<0>(v127, "exactsSubUnitPrice");
  v128 = v91;
  v91 = 0uLL;
  siri::dialogengine::CreateJSONIntVal((siri::dialogengine *)((int)v24 % 100), (uint64_t *)&v90);
  std::string::basic_string[abi:ne180100]<0>(v129, "unitPriceMod100");
  v130 = v90;
  v90 = 0uLL;
  siri::dialogengine::CreateJSONIntVal((siri::dialogengine *)((int)v24 % 10), (uint64_t *)&v89);
  std::string::basic_string[abi:ne180100]<0>(v131, "unitPriceMod10");
  v132 = v89;
  v89 = 0uLL;
  siri::dialogengine::CreateJSONIntVal((siri::dialogengine *)((int)v27 % 10), (uint64_t *)&v88);
  std::string::basic_string[abi:ne180100]<0>(v133, "subUnitPriceMod10");
  v134 = v88;
  v88 = 0uLL;
  siri::dialogengine::CreateJSONIntVal((siri::dialogengine *)((int)(v27 - (double)((int)v27 % 10)) / 10), (uint64_t *)&v87);
  std::string::basic_string[abi:ne180100]<0>(v135, "subUnitPriceDiv10");
  v136 = v87;
  v87 = 0uLL;
  std::map<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>::map[abi:ne180100]((uint64_t)&v103, (const void **)&__p.__r_.__value_.__l.__data_, 16);
  v29 = 80;
  do
  {
    std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v104[v29]);
    if (SHIBYTE((&v103)[v29]) < 0)
      operator delete(*(void **)((char *)&v102 + v29 * 8));
    v29 -= 5;
  }
  while (v29 * 8);
  v30 = (std::__shared_weak_count *)*((_QWORD *)&v87 + 1);
  if (*((_QWORD *)&v87 + 1))
  {
    v31 = (unint64_t *)(*((_QWORD *)&v87 + 1) + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
  if (*((_QWORD *)&v88 + 1))
  {
    v34 = (unint64_t *)(*((_QWORD *)&v88 + 1) + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = (std::__shared_weak_count *)*((_QWORD *)&v89 + 1);
  if (*((_QWORD *)&v89 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v89 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = (std::__shared_weak_count *)*((_QWORD *)&v90 + 1);
  if (*((_QWORD *)&v90 + 1))
  {
    v40 = (unint64_t *)(*((_QWORD *)&v90 + 1) + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = (std::__shared_weak_count *)*((_QWORD *)&v91 + 1);
  if (*((_QWORD *)&v91 + 1))
  {
    v43 = (unint64_t *)(*((_QWORD *)&v91 + 1) + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = (std::__shared_weak_count *)*((_QWORD *)&v92 + 1);
  if (*((_QWORD *)&v92 + 1))
  {
    v46 = (unint64_t *)(*((_QWORD *)&v92 + 1) + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v48 = (std::__shared_weak_count *)*((_QWORD *)&v93 + 1);
  if (*((_QWORD *)&v93 + 1))
  {
    v49 = (unint64_t *)(*((_QWORD *)&v93 + 1) + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v51 = (std::__shared_weak_count *)*((_QWORD *)&v94 + 1);
  if (*((_QWORD *)&v94 + 1))
  {
    v52 = (unint64_t *)(*((_QWORD *)&v94 + 1) + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v54 = (std::__shared_weak_count *)*((_QWORD *)&v95 + 1);
  if (*((_QWORD *)&v95 + 1))
  {
    v55 = (unint64_t *)(*((_QWORD *)&v95 + 1) + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v57 = (std::__shared_weak_count *)*((_QWORD *)&v96 + 1);
  if (*((_QWORD *)&v96 + 1))
  {
    v58 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  v60 = (std::__shared_weak_count *)*((_QWORD *)&v97 + 1);
  if (*((_QWORD *)&v97 + 1))
  {
    v61 = (unint64_t *)(*((_QWORD *)&v97 + 1) + 8);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v63 = (std::__shared_weak_count *)*((_QWORD *)&v98 + 1);
  if (*((_QWORD *)&v98 + 1))
  {
    v64 = (unint64_t *)(*((_QWORD *)&v98 + 1) + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v66 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
  if (*((_QWORD *)&v99 + 1))
  {
    v67 = (unint64_t *)(*((_QWORD *)&v99 + 1) + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  v69 = (std::__shared_weak_count *)*((_QWORD *)&v100 + 1);
  if (*((_QWORD *)&v100 + 1))
  {
    v70 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v72 = (std::__shared_weak_count *)*((_QWORD *)&v101 + 1);
  if (*((_QWORD *)&v101 + 1))
  {
    v73 = (unint64_t *)(*((_QWORD *)&v101 + 1) + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v75 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
  if (*((_QWORD *)&v102 + 1))
  {
    v76 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  v80 = (__int128 *)*a6;
  v78 = (__int128 *)(a6 + 1);
  v79 = v80;
  if (v80 != v78)
  {
    do
    {
      std::pair<std::string const,std::shared_ptr<siri::dialogengine::JSONValue>>::pair[abi:ne180100](&__p, v79 + 2);
      *(_QWORD *)&v102 = &__p;
      v81 = std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v103, (const void **)&__p.__r_.__value_.__l.__data_, (__int128 **)&v102);
      std::shared_ptr<siri::dialogengine::PatternSchemaUsage>::operator=[abi:ne180100](v81 + 7, v106, *((uint64_t *)&v106 + 1));
      v82 = (std::__shared_weak_count *)*((_QWORD *)&v106 + 1);
      if (*((_QWORD *)&v106 + 1))
      {
        v83 = (unint64_t *)(*((_QWORD *)&v106 + 1) + 8);
        do
          v84 = __ldaxr(v83);
        while (__stlxr(v84 - 1, v83));
        if (!v84)
        {
          ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
          std::__shared_weak_count::__release_weak(v82);
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v85 = (__int128 *)*((_QWORD *)v79 + 1);
      if (v85)
      {
        do
        {
          v86 = v85;
          v85 = *(__int128 **)v85;
        }
        while (v85);
      }
      else
      {
        do
        {
          v86 = (__int128 *)*((_QWORD *)v79 + 2);
          v18 = *(_QWORD *)v86 == (_QWORD)v79;
          v79 = v86;
        }
        while (!v18);
      }
      v79 = v86;
    }
    while (v86 != v78);
  }
  siri::dialogengine::ExecuteSharedCat(a2, a4, (const void ***)&v103, a1);
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(v104[0]);
}

void sub_1BF8CA604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,_QWORD *a42)
{
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::dialogengine::JSONValue>>>>::destroy(a42);
  _Unwind_Resume(a1);
}

void siri::dialogengine::CurrencyInfo::~CurrencyInfo(void **this)
{
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void siri::dialogengine::GetSubUnitValue(siri::dialogengine *this, double a2)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  BOOL v11;
  double v12;
  double v13;

  v3 = (double)(int)this;
  v4 = __exp10((double)(int)this);
  v5 = __exp10(v3);
  v6 = v5 * a2;
  v7 = round(v5 * a2);
  v8 = v7 - v6;
  v9 = fmod(v7, 2.0);
  v11 = v7 - v6 != -0.5 && v8 != 0.5 || v9 == 0.0;
  v12 = v6 - v8;
  if (v11)
    v12 = v7;
  v13 = fabs(v12 / v5);
  fmod(round(v4 * (v13 - floor(v13))), 2.0);
}

std::regex_traits<char> *std::__call_once_proxy[abi:ne180100]<std::tuple<siri::dialogengine::GetNumberSeparatorsRegex(void)::$_0 &&>>()
{
  std::regex_traits<char> *v0;
  std::regex_traits<char> *result;

  v0 = (std::regex_traits<char> *)operator new();
  result = std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](v0, "\\d+([,. ]\\d+)*");
  siri::dialogengine::GetNumberSeparatorsRegex(void)::sRegex = (uint64_t)v0;
  return result;
}

void sub_1BF8CA968(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B8D890](v1, 0x1060C4040BE2400);
  _Unwind_Resume(a1);
}

void std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>(std::string *a1, std::__wrap_iter<const char *> a2, std::__wrap_iter<const char *> a3, const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *a4, const char *a5)
{
  std::string::value_type *i;
  size_t v9;
  std::__wrap_iter<const char *>::iterator_type v10;
  std::string::value_type *v11;
  unsigned __int8 *v12;
  std::string::value_type *v13;
  std::__wrap_iter<const char *>::iterator_type v14;
  const char *v15;
  int v16;
  unsigned __int8 *v17;
  int v18;
  std::__wrap_iter<const char *>::iterator_type v19;
  std::string::value_type *v20;
  std::__wrap_iter<const char *>::iterator_type v21;
  std::string::value_type *v22;
  std::__wrap_iter<const char *>::iterator_type v23;
  std::string::value_type *v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  std::sub_match<std::__wrap_iter<const char *>> *v30;
  BOOL v31;
  std::match_results<std::__wrap_iter<const char *>>::value_type *p_unmatched;
  std::string::value_type *v33;
  std::__wrap_iter<const char *> *p_second;
  std::string::value_type *v35;
  std::regex_iterator<std::__wrap_iter<const char *>, char> __x;
  std::regex_iterator<std::__wrap_iter<const char *>, char> v37;

  i = (std::string::value_type *)a2.__i_;
  std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_iterator(&v37, a2, a3, a4, (std::regex_constants::match_flag_type)a5);
  memset(&__x.__match_.__prefix_, 0, 17);
  memset(&__x.__match_.__suffix_, 0, 17);
  __x.__match_.__ready_ = 0;
  __x.__match_.__position_start_.__i_ = 0;
  memset(&__x.__match_, 0, 41);
  memset(&__x, 0, 28);
  if (!std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(&v37, &__x))
  {
    v9 = strlen(a5);
    v10 = 0;
    v11 = 0;
    v12 = (unsigned __int8 *)&a5[v9];
    while (1)
    {
      if (std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(&v37, &__x))
      {
        while (v11 != v10)
          std::string::push_back(a1, *v11++);
        goto LABEL_47;
      }
      v13 = (std::string::value_type *)v37.__match_.__prefix_.first.__i_;
      v14 = v37.__match_.__prefix_.second.__i_;
      while (v13 != v14)
        std::string::push_back(a1, *v13++);
      if (v9)
        break;
LABEL_44:
      v11 = (std::string::value_type *)v37.__match_.__suffix_.first.__i_;
      v10 = v37.__match_.__suffix_.second.__i_;
      std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator++(&v37);
    }
    v15 = a5;
    while (1)
    {
      v16 = *(unsigned __int8 *)v15;
      if (v16 == 36)
      {
        v17 = (unsigned __int8 *)(v15 + 1);
        if (v15 + 1 == (const char *)v12)
          goto LABEL_41;
        v18 = (char)*v17;
        v16 = *v17;
        if (v18 > 38)
        {
          if (v18 == 39)
          {
            v24 = (std::string::value_type *)v37.__match_.__suffix_.first.__i_;
            v23 = v37.__match_.__suffix_.second.__i_;
            while (v24 != v23)
              std::string::push_back(a1, *v24++);
            goto LABEL_43;
          }
          if (v18 == 96)
          {
            v22 = (std::string::value_type *)v37.__match_.__prefix_.first.__i_;
            v21 = v37.__match_.__prefix_.second.__i_;
            while (v22 != v21)
              std::string::push_back(a1, *v22++);
            goto LABEL_43;
          }
LABEL_28:
          if ((v16 - 48) <= 9)
          {
            v25 = *v17 - 48;
            if (v15 + 2 != (const char *)v12)
            {
              v26 = *((unsigned __int8 *)v15 + 2);
              v27 = v26 - 48;
              v28 = v26 + 10 * (int)v25 - 48;
              if (v27 > 9)
              {
                v17 = (unsigned __int8 *)(v15 + 1);
              }
              else
              {
                v25 = v28;
                v17 = (unsigned __int8 *)(v15 + 2);
              }
            }
            v29 = 0xAAAAAAAAAAAAAAABLL
                * (((char *)v37.__match_.__matches_.__end_ - (char *)v37.__match_.__matches_.__begin_) >> 3);
            v30 = &v37.__match_.__matches_.__begin_[(int)v25];
            v31 = v29 > v25;
            if (v29 <= v25)
              p_unmatched = &v37.__match_.__unmatched_;
            else
              p_unmatched = &v37.__match_.__matches_.__begin_[(int)v25];
            v33 = (std::string::value_type *)p_unmatched->first.__i_;
            p_second = &v30->second;
            if (!v31)
              p_second = &v37.__match_.__unmatched_.second;
            v35 = (std::string::value_type *)p_second->__i_;
            while (v33 != v35)
              std::string::push_back(a1, *v33++);
            goto LABEL_43;
          }
LABEL_41:
          LOBYTE(v16) = 36;
          goto LABEL_42;
        }
        if (v18 != 36)
        {
          if (v18 == 38)
          {
            v20 = (std::string::value_type *)v37.__match_.__matches_.__begin_->first.__i_;
            v19 = v37.__match_.__matches_.__begin_->second.__i_;
            while (v20 != v19)
              std::string::push_back(a1, *v20++);
            goto LABEL_43;
          }
          goto LABEL_28;
        }
        ++v15;
      }
LABEL_42:
      std::string::push_back(a1, v16);
      v17 = (unsigned __int8 *)v15;
LABEL_43:
      v15 = (const char *)(v17 + 1);
      if (v17 + 1 == v12)
        goto LABEL_44;
    }
  }
  while (i != a3.__i_)
    std::string::push_back(a1, *i++);
LABEL_47:
  if (v37.__match_.__matches_.__begin_)
  {
    v37.__match_.__matches_.__end_ = v37.__match_.__matches_.__begin_;
    operator delete(v37.__match_.__matches_.__begin_);
  }
}

void sub_1BF8CAC40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::unique_ptr<void *,siri::dialogengine::UNumberFormatDeleter>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  *a1 = 0;
  if (result)
    return unum_close();
  return result;
}

std::regex_iterator<std::__wrap_iter<const char *>, char> *__cdecl std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_iterator(std::regex_iterator<std::__wrap_iter<const char *>, char> *this, std::__wrap_iter<const char *> __a, std::__wrap_iter<const char *> __b, const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *__re, std::regex_constants::match_flag_type __m)
{
  char **p_match;
  std::vector<std::csub_match> __p[2];
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;

  this->__begin_ = __a;
  this->__end_ = __b;
  this->__pregex_ = __re;
  this->__flags_ = match_default;
  *(_OWORD *)&this->__match_.__matches_.__begin_ = 0u;
  p_match = (char **)&this->__match_;
  this->__match_.__prefix_.first.__i_ = 0;
  this->__match_.__prefix_.second.__i_ = 0;
  this->__match_.__prefix_.matched = 0;
  this->__match_.__suffix_.first.__i_ = 0;
  this->__match_.__suffix_.second.__i_ = 0;
  this->__match_.__suffix_.matched = 0;
  this->__match_.__ready_ = 0;
  this->__match_.__position_start_.__i_ = 0;
  *(_OWORD *)&this->__match_.__matches_.__end_cap_.__value_ = 0u;
  *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)((char *)&this->__match_.__unmatched_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>
                                                                               + 1) = 0u;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  memset(__p, 0, 41);
  std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)__re, (std::sub_match<const char *> *)__a.__i_, (std::sub_match<const char *> *)__b.__i_, __p, 0);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(p_match, (uint64_t)__a.__i_, (char *)__b.__i_, (uint64_t *)__p, 0);
  if (__p[0].__begin_)
    operator delete(__p[0].__begin_);
  return this;
}

void sub_1BF8CAD70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  uint64_t v9;
  void **v10;
  void *v12;

  if (__p)
    operator delete(__p);
  v12 = *v10;
  if (*v10)
  {
    *(_QWORD *)(v9 + 40) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

BOOL std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(const std::regex_iterator<std::__wrap_iter<const char *>, char> *this, const std::regex_iterator<std::__wrap_iter<const char *>, char> *__x)
{
  std::vector<std::ssub_match>::pointer begin;
  std::sub_match<std::__wrap_iter<const char *>> *end;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::value_type *p_match;
  std::vector<std::ssub_match>::pointer v7;
  std::sub_match<std::__wrap_iter<const char *>> *v8;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::value_type *v9;
  BOOL v10;

  p_match = &this->__match_;
  begin = this->__match_.__matches_.__begin_;
  end = p_match->__matches_.__end_;
  v9 = &__x->__match_;
  v7 = __x->__match_.__matches_.__begin_;
  v8 = v9->__matches_.__end_;
  v10 = v8 == v7 && end == begin;
  if (end != begin && v8 != v7)
    return this->__begin_.__i_ == __x->__begin_.__i_
        && this->__end_.__i_ == __x->__end_.__i_
        && this->__pregex_ == __x->__pregex_
        && this->__flags_ == __x->__flags_
        && std::sub_match<std::__wrap_iter<char const*>>::compare[abi:ne180100]((uint64_t)begin, (uint64_t)v7) == 0;
  return v10;
}

std::regex_iterator<std::__wrap_iter<const char *>, char> *__cdecl std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator++(std::regex_iterator<std::__wrap_iter<const char *>, char> *this)
{
  std::sub_match<std::__wrap_iter<const char *>> *begin;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::value_type *p_match;
  int i;
  unsigned __int32 flags;
  std::match_results<std::__wrap_iter<const char *>>::value_type *p_unmatched;
  std::sub_match<const char *> *v7;
  const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *pregex;
  std::sub_match<const char *> *v9;
  char v10;
  std::sub_match<const char *> *v11;
  const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *v12;
  char v13;
  std::vector<std::csub_match> __p[2];
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;

  p_match = &this->__match_;
  begin = this->__match_.__matches_.__begin_;
  i = (int)p_match[-1].__position_start_.__i_;
  flags = i | 0x800;
  LODWORD(p_match[-1].__position_start_.__i_) = i | 0x800;
  if (p_match->__matches_.__end_ == begin)
    p_unmatched = &p_match->__unmatched_;
  else
    p_unmatched = begin;
  v7 = (std::sub_match<const char *> *)p_unmatched->second.__i_;
  if ((std::sub_match<const char *> *)p_unmatched->first.__i_ != v7)
  {
LABEL_5:
    this->__flags_ = flags | 0x80;
    v9 = (std::sub_match<const char *> *)this->__end_.__i_;
    pregex = this->__pregex_;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    memset(__p, 0, 41);
    v10 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)pregex, v7, v9, __p, flags | 0x80);
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((char **)p_match, (uint64_t)v7, (char *)v9, (uint64_t *)__p, (flags & 0x800) != 0);
    if (__p[0].__begin_)
      operator delete(__p[0].__begin_);
    if ((v10 & 1) == 0)
    {
      begin = p_match->__matches_.__begin_;
LABEL_14:
      if (begin)
      {
        this->__match_.__matches_.__end_ = begin;
        operator delete(begin);
        p_match->__matches_.__begin_ = 0;
        p_match->__matches_.__end_ = 0;
        p_match->__matches_.__end_cap_.__value_ = 0;
      }
      this->__match_.__ready_ = 0;
      *(_OWORD *)&p_match->__matches_.__begin_ = 0u;
      *(_OWORD *)&p_match->__matches_.__end_cap_.__value_ = 0u;
      *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)((char *)&p_match->__unmatched_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>
                                                                                   + 1) = 0u;
      this->__match_.__prefix_.first.__i_ = 0;
      this->__match_.__prefix_.second.__i_ = 0;
      this->__match_.__prefix_.matched = 0;
      this->__match_.__suffix_.first.__i_ = 0;
      this->__match_.__suffix_.second.__i_ = 0;
      this->__match_.__suffix_.matched = 0;
      this->__match_.__position_start_.__i_ = 0;
      return this;
    }
    return this;
  }
  v11 = (std::sub_match<const char *> *)this->__end_.__i_;
  if (v11 == v7)
    goto LABEL_14;
  v12 = this->__pregex_;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  memset(__p, 0, 41);
  v13 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v12, v7, v11, __p, i | 0x860u);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((char **)p_match, (uint64_t)v7, (char *)v11, (uint64_t *)__p, 1);
  if (__p[0].__begin_)
    operator delete(__p[0].__begin_);
  if ((v13 & 1) == 0)
  {
    v7 = (std::sub_match<const char *> *)((char *)v7 + 1);
    flags = this->__flags_;
    goto LABEL_5;
  }
  return this;
}

void sub_1BF8CAFC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(uint64_t a1, std::sub_match<const char *> *a2, std::sub_match<const char *> *a3, std::vector<std::csub_match> *this, int a5)
{
  int v9;
  int v10;
  const std::vector<std::csub_match>::value_type *v11;
  std::vector<std::csub_match>::pointer end;
  std::vector<std::csub_match>::pointer begin;
  const std::vector<std::csub_match>::value_type *v14;
  std::sub_match<const char *> *first;
  std::sub_match<const char *> *second;
  uint64_t result;
  int v18;
  const char *v19;
  int v20;

  if ((a5 & 0x80) != 0)
    v9 = a5 & 0xFFA;
  else
    v9 = a5;
  v10 = *(_DWORD *)(a1 + 28);
  this[1].__begin_ = a3;
  v11 = (const std::vector<std::csub_match>::value_type *)&this[1];
  this[1].__end_ = a3;
  LOBYTE(this[1].__end_cap_.__value_) = 0;
  std::vector<std::sub_match<char const*>>::assign(this, (v10 + 1), (std::vector<std::csub_match>::const_reference)&this[1]);
  this[2].__begin_ = a2;
  this[2].__end_ = a2;
  LOBYTE(this[2].__end_cap_.__value_) = 0;
  *(std::pair<const char *, const char *> *)&this[3].__begin_ = v11->std::pair<const char *, const char *>;
  LOBYTE(this[3].__end_cap_.__value_) = this[1].__end_cap_.__value_;
  if ((v9 & 0x800) == 0)
    this[4].__end_ = a2;
  LOBYTE(this[4].__begin_) = 1;
  if (!std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a2, (const char *)a3, (uint64_t *)this, v9, (v9 & 0x800) == 0))
  {
    if (a2 == a3 || (v9 & 0x40) != 0)
      goto LABEL_18;
    v18 = v9 | 0x80;
    v19 = (char *)&a2->first + 1;
    if (v19 != (const char *)a3)
    {
      do
      {
        std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
        v20 = std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, v19, (const char *)a3, (uint64_t *)this, v18, 0);
        begin = this->__begin_;
        end = this->__end_;
        if (v20)
          goto LABEL_8;
        std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3), v11);
      }
      while (++v19 != (const char *)a3);
    }
    std::vector<std::sub_match<char const*>>::assign(this, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3), v11);
    if (!std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, (const char *)a3, (const char *)a3, (uint64_t *)this, v18, 0))
    {
LABEL_18:
      result = 0;
      this->__end_ = this->__begin_;
      return result;
    }
  }
  begin = this->__begin_;
  end = this->__end_;
LABEL_8:
  if (end == begin)
    v14 = v11;
  else
    v14 = begin;
  first = (std::sub_match<const char *> *)v14->first;
  this[2].__end_ = (std::vector<std::csub_match>::pointer)v14->first;
  LOBYTE(this[2].__end_cap_.__value_) = this[2].__begin_ != first;
  second = (std::sub_match<const char *> *)v14->second;
  this[3].__begin_ = second;
  LOBYTE(this[3].__end_cap_.__value_) = second != this[3].__end_;
  return 1;
}

void std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(char **a1, uint64_t a2, char *a3, uint64_t *a4, char a5)
{
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t *v40;
  char v41;
  char *v42;
  char *v43;

  v10 = a4[6];
  v11 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
  v13 = *a1;
  v12 = a1[1];
  v14 = 0xAAAAAAAAAAAAAAABLL * ((v12 - *a1) >> 3);
  v15 = v11 - v14;
  if (v11 <= v14)
  {
    if (v11 < v14)
    {
      v12 = &v13[8 * ((a4[1] - *a4) >> 3)];
      a1[1] = v12;
    }
  }
  else
  {
    v16 = a1[2];
    if (0xAAAAAAAAAAAAAAABLL * ((v16 - v12) >> 3) >= v15)
    {
      v29 = &v12[24 * v15];
      v30 = 8 * ((a4[1] - *a4) >> 3) - 8 * ((v12 - *a1) >> 3);
      do
      {
        *(_QWORD *)v12 = 0;
        *((_QWORD *)v12 + 1) = 0;
        v12[16] = 0;
        v12 += 24;
        v30 -= 24;
      }
      while (v30);
      a1[1] = v29;
      v12 = v29;
    }
    else
    {
      if (v11 > 0xAAAAAAAAAAAAAAALL)
        std::vector<BOOL>::__throw_length_error[abi:ne180100]();
      v17 = 0xAAAAAAAAAAAAAAABLL * ((v16 - v13) >> 3);
      v18 = 2 * v17;
      if (2 * v17 <= v11)
        v18 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
      if (v17 >= 0x555555555555555)
        v19 = 0xAAAAAAAAAAAAAAALL;
      else
        v19 = v18;
      v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::string>>>(v19);
      v22 = &v20[24 * v14];
      v12 = &v20[24 * v11];
      v23 = v22;
      v24 = 24 * v11 - 24 * v14;
      do
      {
        *(_QWORD *)v23 = 0;
        *((_QWORD *)v23 + 1) = 0;
        v23[16] = 0;
        v23 += 24;
        v24 -= 24;
      }
      while (v24);
      v25 = &v20[24 * v21];
      v27 = *a1;
      v26 = a1[1];
      if (v26 != *a1)
      {
        do
        {
          v28 = *(_OWORD *)(v26 - 24);
          *((_QWORD *)v22 - 1) = *((_QWORD *)v26 - 1);
          *(_OWORD *)(v22 - 24) = v28;
          v22 -= 24;
          v26 -= 24;
        }
        while (v26 != v27);
        v26 = *a1;
      }
      *a1 = v22;
      a1[1] = v12;
      a1[2] = v25;
      if (v26)
      {
        operator delete(v26);
        v12 = a1[1];
      }
    }
  }
  v31 = *a1;
  if (v12 != *a1)
  {
    v32 = 0;
    v33 = 0;
    v35 = *a4;
    v34 = a4[1];
    do
    {
      v36 = 0xAAAAAAAAAAAAAAABLL * ((v34 - v35) >> 3);
      v37 = (_QWORD *)(v35 + v32);
      if (v36 <= v33)
        v38 = a4 + 3;
      else
        v38 = v37;
      *(_QWORD *)&v31[v32] = a2 + *v38 - v10;
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v33)
        v39 = a4 + 3;
      else
        v39 = (uint64_t *)(*a4 + v32);
      *(_QWORD *)&(*a1)[v32 + 8] = a2 + v39[1] - v10;
      v35 = *a4;
      v34 = a4[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v34 - *a4) >> 3) <= v33)
        v40 = a4 + 3;
      else
        v40 = (uint64_t *)(*a4 + v32);
      v41 = *((_BYTE *)v40 + 16);
      v31 = *a1;
      v42 = a1[1];
      (*a1)[v32 + 16] = v41;
      ++v33;
      v32 += 24;
    }
    while (v33 < 0xAAAAAAAAAAAAAAABLL * ((v42 - v31) >> 3));
  }
  a1[3] = a3;
  a1[4] = a3;
  *((_BYTE *)a1 + 40) = 0;
  v43 = (char *)(a2 + a4[6] - v10);
  a1[6] = v43;
  a1[7] = (char *)(a2 + a4[7] - v10);
  *((_BYTE *)a1 + 64) = *((_BYTE *)a4 + 64);
  a1[9] = (char *)(a2 + a4[9] - v10);
  a1[10] = (char *)(a2 + a4[10] - v10);
  *((_BYTE *)a1 + 88) = *((_BYTE *)a4 + 88);
  if ((a5 & 1) == 0)
    a1[13] = v43;
  *((_BYTE *)a1 + 96) = *((_BYTE *)a4 + 96);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  int v7;
  const char *v9;
  const char *v10;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  unsigned int v15;
  _DWORD *v16;
  BOOL v17;
  uint64_t v18;
  _QWORD *v19;
  _OWORD *v20;
  const char *v21;
  char *v22;
  __int128 v23;
  uint64_t v24;
  char *v25;
  __int128 v26;
  uint64_t v27;
  char *v28;
  __int128 *v29;
  __int128 *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  __int128 *v39;
  char *v40;
  char *v41;
  __int128 v42;
  char *v43;
  char *v44;
  int64_t v45;
  char *v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  __int128 v55;
  unint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  __int128 v60;
  char *v61;
  char *v62;
  char *v63;
  _QWORD *v64;
  _QWORD *v65;
  char *v66;
  uint64_t v68;
  void *v69;
  _BYTE *v70;
  unsigned int v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  _QWORD *v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  _QWORD *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  const char *v95;
  BOOL v96;
  char v97;
  BOOL v98;
  uint64_t v99;
  char *v100;
  void **v101;
  _BYTE *v102;
  const char *v103;
  _QWORD *v104;
  _QWORD *v105;
  unint64_t v106;
  _QWORD *v107;
  unint64_t v108;
  char *v109;
  char *v110;
  __int128 v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  char *v118;
  char *v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  size_t v124;
  void *v125;
  char *v126;
  unint64_t v127;
  char *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  unint64_t v142;
  uint64_t v143;
  __int128 v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t *v149;
  uint64_t *v150;
  char *v151;
  uint64_t v152;
  char *v153;
  int64_t v154;
  char *v155;
  char *v156;
  char *v157;
  char v158;
  const char *v159;
  char v160;
  const char *v161;
  const char *i;
  const char *v163;
  __int16 v164;
  const char *v165;
  void *v166[2];
  __int128 v167;
  int64x2_t v168;
  _BYTE v169[56];
  void *__p[2];
  _QWORD v171[4];
  std::vector<std::csub_match>::value_type __x;

  v7 = a5;
  v9 = a3;
  v10 = a2;
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0)
    return std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, a2, a3, a4, a5, a6);
  v165 = (const char *)(a3 - a2);
  v164 = a5;
  if (*(_DWORD *)(a1 + 28))
  {
    v166[0] = 0;
    v166[1] = 0;
    *(_QWORD *)&v167 = 0;
    v12 = *(_QWORD *)(a1 + 40);
    if (v12)
    {
      __x.first = a3;
      __x.second = a3;
      __x.matched = 0;
      *(_DWORD *)v169 = 0;
      memset(&v169[8], 0, 48);
      *(_OWORD *)__p = 0u;
      memset(v171, 0, 21);
      v166[1] = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(v166, (uint64_t)v169);
      if (__p[0])
        operator delete(__p[0]);
      if (*(_QWORD *)&v169[32])
        operator delete(*(void **)&v169[32]);
      v149 = a4;
      v13 = v166[1];
      *((_DWORD *)v166[1] - 24) = 0;
      *(v13 - 11) = v10;
      *(v13 - 10) = v10;
      v161 = v9;
      *(v13 - 9) = v9;
      std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v13 - 8), *(unsigned int *)(a1 + 28), &__x);
      std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)((char *)v166[1] - 40), *(unsigned int *)(a1 + 32));
      v153 = 0;
      v155 = 0;
      v151 = 0;
      v152 = 0;
      v156 = 0;
      v148 = 0;
      v14 = 0;
      v158 = 0;
      v15 = 0;
      v16 = v166[1];
      *((_QWORD *)v166[1] - 2) = v12;
      *(v16 - 2) = v7;
      *((_BYTE *)v16 - 4) = a6;
      do
      {
        v17 = (++v15 & 0xFFF) != 0 || (int)(v15 >> 12) < (int)v165;
        if (!v17)
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
        v19 = v16 - 4;
        v18 = *((_QWORD *)v16 - 2);
        v20 = v16 - 24;
        if (v18)
          (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v18 + 16))(v18, v16 - 24);
        switch(*(_DWORD *)v20)
        {
          case 0xFFFFFC18:
            v21 = (const char *)*((_QWORD *)v16 - 10);
            if ((v164 & 0x20) != 0 && v21 == v10 || (v164 & 0x1000) != 0 && v21 != v161)
              goto LABEL_21;
            v28 = v153;
            if ((v158 & ((uint64_t)v14 >= (uint64_t)&v21[-*((_QWORD *)v16 - 11)])) == 0)
            {
              v159 = &v21[-*((_QWORD *)v16 - 11)];
              v30 = (__int128 *)*((_QWORD *)v16 - 8);
              v29 = (__int128 *)*((_QWORD *)v16 - 7);
              v31 = 0xAAAAAAAAAAAAAAABLL * (((char *)v29 - (char *)v30) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((v152 - (uint64_t)v155) >> 3) >= v31)
              {
                v37 = (uint64_t)v148;
                if (0xAAAAAAAAAAAAAAABLL * ((v153 - v155) >> 3) >= v31)
                {
                  if (v30 == v29)
                  {
                    v43 = v155;
                    v44 = v155;
                  }
                  else
                  {
                    v43 = v155;
                    v44 = v155;
                    do
                    {
                      *(_OWORD *)v44 = *v30;
                      v44[16] = *((_BYTE *)v30 + 16);
                      v44 += 24;
                      v30 = (__int128 *)((char *)v30 + 24);
                    }
                    while (v30 != v29);
                  }
                  v45 = v44 - v43;
                  v28 = v43;
                }
                else
                {
                  v39 = (__int128 *)((char *)v30 + 8 * ((v153 - v155) >> 3));
                  if (v153 != v155)
                  {
                    v40 = v155;
                    do
                    {
                      *(_OWORD *)v40 = *v30;
                      v40[16] = *((_BYTE *)v30 + 16);
                      v30 = (__int128 *)((char *)v30 + 24);
                      v40 += 24;
                    }
                    while (v30 != v39);
                  }
                  v41 = v153;
                  while (v39 != v29)
                  {
                    v42 = *v39;
                    *((_QWORD *)v41 + 2) = *((_QWORD *)v39 + 2);
                    *(_OWORD *)v41 = v42;
                    v41 += 24;
                    v39 = (__int128 *)((char *)v39 + 24);
                  }
                  v45 = v41 - v153;
                }
              }
              else
              {
                if (v155)
                {
                  operator delete(v155);
                  v152 = 0;
                }
                if (v31 > 0xAAAAAAAAAAAAAAALL)
                  goto LABEL_217;
                v32 = 0x5555555555555556 * (v152 >> 3);
                if (v32 <= v31)
                  v32 = 0xAAAAAAAAAAAAAAABLL * (((char *)v29 - (char *)v30) >> 3);
                v33 = 0xAAAAAAAAAAAAAAABLL * (v152 >> 3) >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v32;
                if (v33 > 0xAAAAAAAAAAAAAAALL)
LABEL_217:
                  std::vector<BOOL>::__throw_length_error[abi:ne180100]();
                v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::string>>>(v33);
                v28 = v34;
                v36 = v34;
                if (v30 == v29)
                {
                  v37 = (uint64_t)v148;
                }
                else
                {
                  v37 = (uint64_t)v148;
                  do
                  {
                    v38 = *v30;
                    *((_QWORD *)v36 + 2) = *((_QWORD *)v30 + 2);
                    *(_OWORD *)v36 = v38;
                    v36 += 24;
                    v30 = (__int128 *)((char *)v30 + 24);
                  }
                  while (v30 != v29);
                }
                v152 = (uint64_t)&v34[24 * v35];
                v45 = v36 - v34;
                v155 = v34;
              }
              v47 = (char *)*((_QWORD *)v16 - 5);
              v46 = (char *)*((_QWORD *)v16 - 4);
              v48 = (v46 - v47) >> 4;
              if (v48 <= (v37 - (uint64_t)v156) >> 4)
              {
                v56 = (v151 - v156) >> 4;
                if (v56 >= v48)
                {
                  if (v47 == v46)
                  {
                    v63 = v156;
                    v62 = v156;
                  }
                  else
                  {
                    v62 = v156;
                    do
                    {
                      *(_QWORD *)v62 = *(_QWORD *)v47;
                      *((_QWORD *)v62 + 1) = *((_QWORD *)v47 + 1);
                      v62 += 16;
                      v47 += 16;
                    }
                    while (v47 != v46);
                    v63 = v156;
                  }
                  v61 = (char *)(v62 - v63);
                  v52 = v63;
                  v14 = v159;
                }
                else
                {
                  v57 = &v47[16 * v56];
                  if (v151 != v156)
                  {
                    v58 = v156;
                    do
                    {
                      *(_QWORD *)v58 = *(_QWORD *)v47;
                      *((_QWORD *)v58 + 1) = *((_QWORD *)v47 + 1);
                      v47 += 16;
                      v58 += 16;
                    }
                    while (v47 != v57);
                  }
                  if (v57 == v46)
                  {
                    v52 = v151;
                    v59 = v151;
                    v14 = v159;
                  }
                  else
                  {
                    v52 = v151;
                    v59 = v151;
                    v14 = v159;
                    do
                    {
                      v60 = *(_OWORD *)v57;
                      v57 += 16;
                      *(_OWORD *)v59 = v60;
                      v59 += 16;
                    }
                    while (v57 != v46);
                  }
                  v61 = (char *)(v59 - v52);
                }
              }
              else
              {
                v154 = v45;
                v49 = v28;
                if (v156)
                {
                  operator delete(v156);
                  v37 = 0;
                }
                if (v46 - v47 < 0)
                  goto LABEL_216;
                v50 = v37 >> 3;
                if (v37 >> 3 <= v48)
                  v50 = (v46 - v47) >> 4;
                v51 = (unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v50;
                if (v51 >> 60)
LABEL_216:
                  std::vector<BOOL>::__throw_length_error[abi:ne180100]();
                v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v51);
                v54 = v52;
                while (v47 != v46)
                {
                  v55 = *(_OWORD *)v47;
                  v47 += 16;
                  *(_OWORD *)v54 = v55;
                  v54 += 16;
                }
                v148 = &v52[16 * v53];
                v61 = (char *)(v54 - v52);
                v156 = v52;
                v28 = v49;
                v14 = v159;
                v45 = v154;
              }
              v153 = &v28[v45];
              v151 = &v61[(_QWORD)v52];
            }
            v64 = v166[1];
            if (v14 == v165)
            {
              v65 = v166[0];
              while (v64 != v65)
              {
                v64 -= 12;
                std::allocator<std::__state<char>>::destroy[abi:ne180100](v64);
              }
              v166[1] = v65;
              v158 = 1;
              v14 = v165;
            }
            else
            {
              v66 = (char *)v166[1] - 96;
              std::allocator<std::__state<char>>::destroy[abi:ne180100]((_QWORD *)v166[1] - 12);
              v166[1] = v66;
              v158 = 1;
            }
            break;
          case 0xFFFFFC1D:
          case 0xFFFFFC1E:
          case 0xFFFFFC21:
            break;
          case 0xFFFFFC1F:
LABEL_21:
            v22 = (char *)v166[1] - 96;
            std::allocator<std::__state<char>>::destroy[abi:ne180100]((_QWORD *)v166[1] - 12);
            v166[1] = v22;
            break;
          case 0xFFFFFC20:
            v23 = *((_OWORD *)v16 - 5);
            *(_OWORD *)v169 = *v20;
            *(_OWORD *)&v169[16] = v23;
            memset(&v169[32], 0, 24);
            std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v169[32], *((__int128 **)v16 - 8), *((__int128 **)v16 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v16 - 7) - *((_QWORD *)v16 - 8)) >> 3));
            __p[0] = 0;
            __p[1] = 0;
            v171[0] = 0;
            std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *((__int128 **)v16 - 5), *((__int128 **)v16 - 4), (uint64_t)(*((_QWORD *)v16 - 4) - *((_QWORD *)v16 - 5)) >> 4);
            v24 = *v19;
            *(_QWORD *)((char *)&v171[1] + 5) = *(_QWORD *)((char *)v16 - 11);
            v171[1] = v24;
            (*(void (**)(_QWORD, uint64_t, _DWORD *))(*(_QWORD *)*v19 + 24))(*v19, 1, v16 - 24);
            (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v171[1] + 24))(v171[1], 0, v169);
            v25 = (char *)v166[1];
            if (v166[1] >= (void *)v167)
            {
              v166[1] = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(v166, (uint64_t)v169);
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
            }
            else
            {
              v26 = *(_OWORD *)&v169[16];
              *(_OWORD *)v166[1] = *(_OWORD *)v169;
              *((_OWORD *)v25 + 1) = v26;
              *((_QWORD *)v25 + 4) = 0;
              *((_QWORD *)v25 + 5) = 0;
              *((_QWORD *)v25 + 6) = 0;
              *((_QWORD *)v25 + 7) = 0;
              *((_OWORD *)v25 + 2) = *(_OWORD *)&v169[32];
              *((_QWORD *)v25 + 6) = *(_QWORD *)&v169[48];
              memset(&v169[32], 0, 24);
              *((_QWORD *)v25 + 8) = 0;
              *((_QWORD *)v25 + 9) = 0;
              *(_OWORD *)(v25 + 56) = *(_OWORD *)__p;
              *((_QWORD *)v25 + 9) = v171[0];
              __p[0] = 0;
              __p[1] = 0;
              v171[0] = 0;
              v27 = v171[1];
              *(_QWORD *)(v25 + 85) = *(_QWORD *)((char *)&v171[1] + 5);
              *((_QWORD *)v25 + 10) = v27;
              v166[1] = v25 + 96;
            }
            if (*(_QWORD *)&v169[32])
            {
              *(_QWORD *)&v169[40] = *(_QWORD *)&v169[32];
              operator delete(*(void **)&v169[32]);
            }
            break;
          default:
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
        }
        v16 = v166[1];
      }
      while (v166[0] != v166[1]);
      if ((v158 & 1) != 0)
      {
        v68 = *v149;
        *(_QWORD *)v68 = v10;
        *(_QWORD *)(v68 + 8) = &v14[(_QWORD)v10];
        *(_BYTE *)(v68 + 16) = 1;
        v69 = v155;
        if (v153 != v155)
        {
          v70 = v155 + 16;
          v71 = 1;
          do
          {
            v72 = v68 + 24 * v71;
            *(_OWORD *)v72 = *((_OWORD *)v70 - 1);
            v73 = *v70;
            v70 += 24;
            *(_BYTE *)(v72 + 16) = v73;
            v17 = 0xAAAAAAAAAAAAAAABLL * ((v153 - v155) >> 3) > v71++;
          }
          while (v17);
        }
        v74 = 1;
      }
      else
      {
        v74 = 0;
        v69 = v155;
      }
      if (v156)
        operator delete(v156);
      if (v69)
        operator delete(v69);
    }
    else
    {
      v74 = 0;
    }
    *(_QWORD *)v169 = v166;
    std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v169);
  }
  else
  {
    v167 = 0u;
    v168 = 0u;
    *(_OWORD *)v166 = 0u;
    v74 = *(_QWORD *)(a1 + 40);
    if (v74)
    {
      *(_DWORD *)v169 = 0;
      memset(&v169[8], 0, 48);
      *(_OWORD *)__p = 0uLL;
      memset(v171, 0, 21);
      std::deque<std::__state<char>>::push_back(v166, (uint64_t)v169);
      if (__p[0])
        operator delete(__p[0]);
      if (*(_QWORD *)&v169[32])
        operator delete(*(void **)&v169[32]);
      v150 = a4;
      v75 = v166[1];
      v76 = v168.i64[1] + v168.i64[0] - 1;
      v77 = v76 / 0x2A;
      v78 = *((_QWORD *)v166[1] + v76 / 0x2A);
      v79 = 3 * (v76 % 0x2A);
      v80 = v78 + 32 * v79;
      *(_DWORD *)v80 = 0;
      *(_QWORD *)(v80 + 8) = v10;
      *(_QWORD *)(v75[v77] + 32 * v79 + 16) = v10;
      *(_QWORD *)(v75[v77] + 32 * v79 + 24) = v9;
      std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)(v75[v77] + 32 * v79 + 56), *(unsigned int *)(a1 + 32));
      v160 = 0;
      v81 = 0;
      v82 = v168.i64[1];
      v83 = v166[1];
      v84 = v168.i64[1] + v168.i64[0] - 1;
      v85 = v84 / 0x2A;
      v86 = 3 * (v84 % 0x2A);
      *(_QWORD *)(*((_QWORD *)v166[1] + v85) + 32 * v86 + 80) = v74;
      v87 = v83[v85] + 32 * v86;
      *(_DWORD *)(v87 + 88) = v7;
      *(_BYTE *)(v87 + 92) = a6;
      v157 = 0;
      while (2)
      {
        if ((++v81 & 0xFFF) == 0 && (int)(v81 >> 12) >= (int)v165)
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
        v89 = v82 + v168.i64[0] - 1;
        v90 = *((_QWORD *)v166[1] + v89 / 0x2A);
        v91 = v89 % 0x2A;
        v92 = v90 + 96 * (v89 % 0x2A);
        v94 = (_QWORD *)(v92 + 80);
        v93 = *(_QWORD *)(v92 + 80);
        if (v93)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v93 + 16))(v93, v90 + 96 * v91);
        switch(*(_DWORD *)v92)
        {
          case 0xFFFFFC18:
            v95 = *(const char **)(v90 + 96 * v91 + 16);
            v96 = (v7 & 0x1000) == 0 || v95 == v9;
            v97 = v96;
            v98 = v95 != v10 || (v7 & 0x20) == 0;
            if (!v98 || (v97 & 1) == 0)
              goto LABEL_200;
            v99 = (uint64_t)&v95[-*(_QWORD *)(v90 + 96 * v91 + 8)];
            v100 = v157;
            if ((v160 & ((uint64_t)v157 >= v99)) == 0)
              v100 = (char *)v99;
            if (v100 != v165)
            {
              v157 = v100;
              std::deque<std::__state<char>>::pop_back(v166);
              v160 = 1;
              goto LABEL_201;
            }
            v101 = (void **)v166[1];
            v102 = (_BYTE *)v167;
            if ((void *)v167 == v166[1])
            {
              v102 = v166[1];
            }
            else
            {
              v103 = v10;
              v104 = (char *)v166[1] + 8 * (v168.i64[0] / 0x2AuLL);
              v105 = (_QWORD *)(*v104 + 96 * (v168.i64[0] % 0x2AuLL));
              v106 = *((_QWORD *)v166[1] + (v168.i64[1] + v168.i64[0]) / 0x2AuLL)
                   + 96 * ((v168.i64[1] + v168.i64[0]) % 0x2AuLL);
              if (v105 != (_QWORD *)v106)
              {
                do
                {
                  std::allocator<std::__state<char>>::destroy[abi:ne180100](v105);
                  v105 += 12;
                  if ((_QWORD *)((char *)v105 - *v104) == (_QWORD *)4032)
                  {
                    v107 = (_QWORD *)v104[1];
                    ++v104;
                    v105 = v107;
                  }
                }
                while (v105 != (_QWORD *)v106);
                v101 = (void **)v166[1];
                v102 = (_BYTE *)v167;
              }
              v10 = v103;
            }
            v168.i64[1] = 0;
            v138 = v102 - (_BYTE *)v101;
            if (v138 >= 0x11)
            {
              do
              {
                operator delete(*v101);
                v101 = (void **)((char *)v166[1] + 8);
                v166[1] = v101;
                v138 = v167 - (_QWORD)v101;
              }
              while ((_QWORD)v167 - (_QWORD)v101 > 0x10uLL);
            }
            if (v138 >> 3 == 1)
            {
              v139 = 21;
            }
            else
            {
              if (v138 >> 3 != 2)
                goto LABEL_188;
              v139 = 42;
            }
            v168.i64[0] = v139;
LABEL_188:
            v160 = 1;
            v157 = (char *)v165;
LABEL_201:
            v82 = v168.i64[1];
            if (v168.i64[1])
              continue;
            if ((v160 & 1) != 0)
            {
              v147 = *v150;
              *(_QWORD *)v147 = v10;
              *(_QWORD *)(v147 + 8) = &v157[(_QWORD)v10];
              v74 = 1;
              *(_BYTE *)(v147 + 16) = 1;
            }
            else
            {
              v74 = 0;
            }
            break;
          case 0xFFFFFC19:
          case 0xFFFFFC1E:
          case 0xFFFFFC21:
            goto LABEL_201;
          case 0xFFFFFC1D:
            v108 = v168.i64[0];
            v109 = (char *)v166[1];
            v110 = (char *)v167;
            if (!v168.i64[0])
            {
              v113 = (uint64_t)(v167 - (unint64_t)v166[1]) >> 3;
              v114 = 42 * v113 - 1;
              if ((void *)v167 == v166[1])
                v114 = 0;
              if ((unint64_t)(v114 - v168.i64[1]) < 0x2A)
              {
                if (v113 >= (uint64_t)(*((_QWORD *)&v167 + 1) - (unint64_t)v166[0]) >> 3)
                {
                  if (*((void **)&v167 + 1) == v166[0])
                    v115 = 1;
                  else
                    v115 = (uint64_t)(*((_QWORD *)&v167 + 1) - (unint64_t)v166[0]) >> 2;
                  *(_QWORD *)&v169[32] = (char *)&v167 + 8;
                  *(_QWORD *)v169 = std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v115);
                  *(_QWORD *)&v169[8] = *(_QWORD *)v169;
                  *(_QWORD *)&v169[16] = *(_QWORD *)v169;
                  *(_QWORD *)&v169[24] = *(_QWORD *)v169 + 8 * v116;
                  v163 = v10;
                  __x.first = (const char *)operator new(0xFC0uLL);
                  std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(v169, &__x);
                  v117 = (uint64_t *)v166[1];
                  v118 = *(char **)&v169[16];
                  for (i = v9; v117 != (uint64_t *)v167; *(_QWORD *)&v169[16] += 8)
                  {
                    if (v118 == *(char **)&v169[24])
                    {
                      v119 = *(char **)&v169[8];
                      v120 = *(void **)v169;
                      if (*(_QWORD *)&v169[8] <= *(_QWORD *)v169)
                      {
                        if (v118 == *(char **)v169)
                          v127 = 1;
                        else
                          v127 = (uint64_t)&v118[-*(_QWORD *)v169] >> 2;
                        v128 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v127);
                        v130 = &v128[8 * (v127 >> 2)];
                        v131 = v118 - v119;
                        v96 = v118 == v119;
                        v118 = v130;
                        v9 = i;
                        if (!v96)
                        {
                          v118 = &v130[v131 & 0xFFFFFFFFFFFFFFF8];
                          v132 = 8 * (v131 >> 3);
                          v133 = v130;
                          do
                          {
                            v134 = *(_QWORD *)v119;
                            v119 += 8;
                            *(_QWORD *)v133 = v134;
                            v133 += 8;
                            v132 -= 8;
                          }
                          while (v132);
                        }
                        *(_QWORD *)v169 = v128;
                        *(_QWORD *)&v169[8] = v130;
                        *(_QWORD *)&v169[16] = v118;
                        *(_QWORD *)&v169[24] = &v128[8 * v129];
                        if (v120)
                          operator delete(v120);
                      }
                      else
                      {
                        v121 = (uint64_t)(*(_QWORD *)&v169[8] - *(_QWORD *)v169) >> 3;
                        if (v121 >= -1)
                          v122 = v121 + 1;
                        else
                          v122 = v121 + 2;
                        v123 = *(_QWORD *)&v169[8] - 8 * (v122 >> 1);
                        v124 = (size_t)&v118[-*(_QWORD *)&v169[8]];
                        if (v118 != *(char **)&v169[8])
                        {
                          v125 = (void *)(*(_QWORD *)&v169[8] - 8 * (v122 >> 1));
                          memmove(v125, *(const void **)&v169[8], v124);
                          v123 = (uint64_t)v125;
                          v118 = v119;
                        }
                        v126 = &v118[-8 * (v122 >> 1)];
                        v118 = (char *)(v123 + v124);
                        *(_QWORD *)&v169[8] = v126;
                        *(_QWORD *)&v169[16] = v123 + v124;
                        v9 = i;
                      }
                    }
                    v135 = *v117++;
                    *(_QWORD *)v118 = v135;
                    v118 = (char *)(*(_QWORD *)&v169[16] + 8);
                  }
                  v136 = v166[0];
                  *(_OWORD *)v166 = *(_OWORD *)v169;
                  *(_QWORD *)&v167 = v118;
                  *((_QWORD *)&v167 + 1) = *(_QWORD *)&v169[24];
                  v137 = 21;
                  if (&v118[-*(_QWORD *)&v169[8]] != (char *)8)
                    v137 = v168.i64[0] + 42;
                  v168.i64[0] = v137;
                  v10 = v163;
                  if (v136)
                    operator delete(v136);
                  LOWORD(v7) = v164;
                }
                else
                {
                  if (v166[1] == v166[0])
                  {
                    *(_QWORD *)v169 = operator new(0xFC0uLL);
                    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(v166, v169);
                    *(_QWORD *)v169 = *(_QWORD *)(v167 - 8);
                    *(_QWORD *)&v167 = v167 - 8;
                  }
                  else
                  {
                    *(_QWORD *)v169 = operator new(0xFC0uLL);
                  }
                  std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)v166, v169);
                  v140 = 21;
                  if ((_QWORD)v167 - (unint64_t)v166[1] != 8)
                    v140 = v168.i64[0] + 42;
                  v168.i64[0] = v140;
                }
              }
              else
              {
                v168.i64[0] = 42;
                *(_QWORD *)v169 = *(_QWORD *)(v167 - 8);
                *(_QWORD *)&v167 = v167 - 8;
                std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)v166, v169);
              }
              v108 = v168.i64[0];
              v109 = (char *)v166[1];
              v110 = (char *)v167;
            }
            v141 = &v109[8 * (v108 / 0x2A)];
            v142 = *(_QWORD *)v141 + 96 * (v108 % 0x2A);
            if (v110 == v109)
              v143 = 0;
            else
              v143 = v142;
            if (v143 == *(_QWORD *)v141)
              v143 = *((_QWORD *)v141 - 1) + 4032;
            v144 = *(_OWORD *)(v92 + 16);
            *(_OWORD *)(v143 - 96) = *(_OWORD *)v92;
            *(_OWORD *)(v143 - 80) = v144;
            v145 = v90 + 96 * v91;
            *(_QWORD *)(v143 - 56) = 0;
            *(_QWORD *)(v143 - 48) = 0;
            *(_QWORD *)(v143 - 64) = 0;
            *(_OWORD *)(v143 - 64) = *(_OWORD *)(v145 + 32);
            *(_QWORD *)(v143 - 48) = *(_QWORD *)(v145 + 48);
            *(_QWORD *)(v145 + 32) = 0;
            *(_QWORD *)(v145 + 40) = 0;
            *(_QWORD *)(v145 + 48) = 0;
            *(_QWORD *)(v143 - 40) = 0;
            *(_QWORD *)(v143 - 32) = 0;
            *(_QWORD *)(v143 - 24) = 0;
            *(_OWORD *)(v143 - 40) = *(_OWORD *)(v145 + 56);
            *(_QWORD *)(v143 - 24) = *(_QWORD *)(v145 + 72);
            *(_QWORD *)(v145 + 56) = 0;
            *(_QWORD *)(v145 + 64) = 0;
            *(_QWORD *)(v145 + 72) = 0;
            v146 = *v94;
            *(_QWORD *)(v143 - 11) = *(_QWORD *)(v92 + 85);
            *(_QWORD *)(v143 - 16) = v146;
            v168 = vaddq_s64(v168, (int64x2_t)xmmword_1BFCCD800);
            goto LABEL_200;
          case 0xFFFFFC1F:
LABEL_200:
            std::deque<std::__state<char>>::pop_back(v166);
            goto LABEL_201;
          case 0xFFFFFC20:
            v111 = *(_OWORD *)(v92 + 16);
            *(_OWORD *)v169 = *(_OWORD *)v92;
            *(_OWORD *)&v169[16] = v111;
            memset(&v169[32], 0, 24);
            std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v169[32], *(__int128 **)(v90 + 96 * v91 + 32), *(__int128 **)(v90 + 96 * v91 + 40), 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(_QWORD *)(v90 + 96 * v91 + 40) - *(_QWORD *)(v90 + 96 * v91 + 32)) >> 3));
            __p[0] = 0;
            __p[1] = 0;
            v171[0] = 0;
            std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *(__int128 **)(v90 + 96 * v91 + 56), *(__int128 **)(v90 + 96 * v91 + 64), (uint64_t)(*(_QWORD *)(v90 + 96 * v91 + 64) - *(_QWORD *)(v90 + 96 * v91 + 56)) >> 4);
            v112 = *v94;
            *(_QWORD *)((char *)&v171[1] + 5) = *(_QWORD *)(v92 + 85);
            v171[1] = v112;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v94 + 24))(*v94, 1, v92);
            (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v171[1] + 24))(v171[1], 0, v169);
            std::deque<std::__state<char>>::push_back(v166, (uint64_t)v169);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
            if (*(_QWORD *)&v169[32])
            {
              *(_QWORD *)&v169[40] = *(_QWORD *)&v169[32];
              operator delete(*(void **)&v169[32]);
            }
            goto LABEL_201;
          default:
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
        }
        break;
      }
    }
    std::deque<std::__state<char>>::~deque[abi:ne180100]((uint64_t)v166);
  }
  return v74;
}

void sub_1BF8CC438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37)
{
  void *v37;

  operator delete(v37);
  if (__p)
    operator delete(__p);
  std::deque<std::__state<char>>::~deque[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void std::vector<std::sub_match<char const*>>::assign(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __u)
{
  std::sub_match<const char *> *value;
  std::sub_match<const char *> *begin;
  unint64_t v8;
  std::vector<std::csub_match>::size_type v9;
  unint64_t v10;
  std::vector<std::csub_match>::pointer v11;
  std::sub_match<const char *> *v12;
  std::vector<std::csub_match>::size_type v13;
  std::pair<const char *, const char *> v14;
  std::vector<std::csub_match>::pointer end;
  std::vector<std::csub_match>::size_type v16;
  std::vector<std::csub_match>::size_type v17;
  std::vector<std::csub_match>::value_type *v18;
  std::sub_match<const char *> *v19;
  std::vector<std::csub_match>::size_type v20;
  std::pair<const char *, const char *> v21;

  value = this->__end_cap_.__value_;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3) >= __n)
  {
    end = this->__end_;
    v16 = end - begin;
    if (v16 >= __n)
      v17 = __n;
    else
      v17 = end - begin;
    if (v17)
    {
      v18 = begin;
      do
      {
        *v18++ = *__u;
        --v17;
      }
      while (v17);
    }
    if (__n <= v16)
    {
      this->__end_ = &begin[__n];
    }
    else
    {
      v19 = &end[__n - v16];
      v20 = 24 * __n - 24 * v16;
      do
      {
        v21 = __u->std::pair<const char *, const char *>;
        *(_QWORD *)&end->matched = *(_QWORD *)&__u->matched;
        end->std::pair<const char *, const char *> = v21;
        ++end;
        v20 -= 24;
      }
      while (v20);
      this->__end_ = v19;
    }
  }
  else
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    if (__n > 0xAAAAAAAAAAAAAAALL)
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)value >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= __n)
      v9 = __n;
    if (v8 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v9;
    std::vector<std::sub_match<char const*>>::__vallocate[abi:ne180100](this, v10);
    v11 = this->__end_;
    v12 = &v11[__n];
    v13 = 24 * __n;
    do
    {
      v14 = __u->std::pair<const char *, const char *>;
      *(_QWORD *)&v11->matched = *(_QWORD *)&__u->matched;
      v11->std::pair<const char *, const char *> = v14;
      ++v11;
      v13 -= 24;
    }
    while (v13);
    this->__end_ = v12;
  }
}

char *std::vector<std::sub_match<char const*>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<BOOL>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::string>>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  char *v12;
  signed int v13;
  char *v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  char *v18;
  const char *v19;
  char *v20;
  __int128 v21;
  uint64_t v22;
  char *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  unsigned int v32;
  uint64_t v33;
  char v34;
  uint64_t *v36;
  const char *v37;
  _BYTE v39[56];
  void *__p[2];
  _QWORD v41[4];
  std::vector<std::csub_match>::value_type __x;
  char *v43;
  char *v44;
  unint64_t v45;

  v43 = 0;
  v44 = 0;
  v45 = 0;
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    __x.first = a3;
    __x.second = a3;
    __x.matched = 0;
    *(_DWORD *)v39 = 0;
    memset(&v39[8], 0, 48);
    *(_OWORD *)__p = 0u;
    memset(v41, 0, 21);
    v44 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v43, (uint64_t)v39);
    if (__p[0])
      operator delete(__p[0]);
    if (*(_QWORD *)&v39[32])
      operator delete(*(void **)&v39[32]);
    v36 = a4;
    v12 = v44;
    *((_DWORD *)v44 - 24) = 0;
    *((_QWORD *)v12 - 11) = a2;
    *((_QWORD *)v12 - 10) = a2;
    *((_QWORD *)v12 - 9) = a3;
    std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v12 - 64), *(unsigned int *)(a1 + 28), &__x);
    std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)(v44 - 40), *(unsigned int *)(a1 + 32));
    v37 = a3;
    v13 = (_DWORD)a3 - (_DWORD)a2;
    v14 = v44;
    *((_QWORD *)v44 - 2) = v6;
    *((_DWORD *)v14 - 2) = a5;
    *(v14 - 4) = a6;
    v15 = 1;
    while (2)
    {
      if ((v15 & 0xFFF) == 0 && (int)(v15 >> 12) >= v13)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
      v17 = v14 - 16;
      v16 = *((_QWORD *)v14 - 2);
      v18 = v14 - 96;
      if (v16)
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v16 + 16))(v16, v14 - 96);
      switch(*(_DWORD *)v18)
      {
        case 0xFFFFFC18:
          v19 = (const char *)*((_QWORD *)v14 - 10);
          if ((a5 & 0x20) != 0 && v19 == a2 || (a5 & 0x1000) != 0 && v19 != v37)
            goto LABEL_16;
          v27 = *v36;
          *(_QWORD *)v27 = a2;
          *(_QWORD *)(v27 + 8) = v19;
          *(_BYTE *)(v27 + 16) = 1;
          v28 = *((_QWORD *)v14 - 8);
          v29 = *((_QWORD *)v14 - 7) - v28;
          if (v29)
          {
            v30 = 0xAAAAAAAAAAAAAAABLL * (v29 >> 3);
            v31 = (_BYTE *)(v28 + 16);
            v32 = 1;
            do
            {
              v33 = v27 + 24 * v32;
              *(_OWORD *)v33 = *((_OWORD *)v31 - 1);
              v34 = *v31;
              v31 += 24;
              *(_BYTE *)(v33 + 16) = v34;
            }
            while (v30 > v32++);
          }
          v6 = 1;
          break;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_23;
        case 0xFFFFFC1F:
LABEL_16:
          v20 = v44 - 96;
          std::allocator<std::__state<char>>::destroy[abi:ne180100]((_QWORD *)v44 - 12);
          v44 = v20;
          goto LABEL_23;
        case 0xFFFFFC20:
          v21 = *((_OWORD *)v14 - 5);
          *(_OWORD *)v39 = *(_OWORD *)v18;
          *(_OWORD *)&v39[16] = v21;
          memset(&v39[32], 0, 24);
          std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v39[32], *((__int128 **)v14 - 8), *((__int128 **)v14 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v14 - 7) - *((_QWORD *)v14 - 8)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v41[0] = 0;
          std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *((__int128 **)v14 - 5), *((__int128 **)v14 - 4), (uint64_t)(*((_QWORD *)v14 - 4) - *((_QWORD *)v14 - 5)) >> 4);
          v22 = *(_QWORD *)v17;
          *(_QWORD *)((char *)&v41[1] + 5) = *(_QWORD *)(v14 - 11);
          v41[1] = v22;
          (*(void (**)(_QWORD, uint64_t, char *))(**(_QWORD **)v17 + 24))(*(_QWORD *)v17, 1, v14 - 96);
          (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v41[1] + 24))(v41[1], 0, v39);
          v23 = v44;
          if ((unint64_t)v44 >= v45)
          {
            v44 = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((void **)&v43, (uint64_t)v39);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          else
          {
            v24 = *(_OWORD *)&v39[16];
            *(_OWORD *)v44 = *(_OWORD *)v39;
            *((_OWORD *)v23 + 1) = v24;
            *((_QWORD *)v23 + 4) = 0;
            *((_QWORD *)v23 + 5) = 0;
            *((_QWORD *)v23 + 6) = 0;
            *((_QWORD *)v23 + 7) = 0;
            *((_OWORD *)v23 + 2) = *(_OWORD *)&v39[32];
            *((_QWORD *)v23 + 6) = *(_QWORD *)&v39[48];
            memset(&v39[32], 0, 24);
            *((_QWORD *)v23 + 8) = 0;
            *((_QWORD *)v23 + 9) = 0;
            *(_OWORD *)(v23 + 56) = *(_OWORD *)__p;
            *((_QWORD *)v23 + 9) = v41[0];
            __p[0] = 0;
            __p[1] = 0;
            v41[0] = 0;
            v25 = v41[1];
            *(_QWORD *)(v23 + 85) = *(_QWORD *)((char *)&v41[1] + 5);
            *((_QWORD *)v23 + 10) = v25;
            v44 = v23 + 96;
          }
          if (*(_QWORD *)&v39[32])
          {
            *(_QWORD *)&v39[40] = *(_QWORD *)&v39[32];
            operator delete(*(void **)&v39[32]);
          }
LABEL_23:
          v14 = v44;
          ++v15;
          if (v43 != v44)
            continue;
          v6 = 0;
          break;
        default:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
      }
      break;
    }
  }
  *(_QWORD *)v39 = &v43;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v39);
  return v6;
}

void sub_1BF8CCAAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  uint64_t v18;

  std::__state<char>::~__state(&a13);
  a13 = v18 - 112;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

char *std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(void **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  __int128 v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  char *v21;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 5);
  v3 = v2 + 1;
  if (v2 + 1 > 0x2AAAAAAAAAAAAAALL)
    std::vector<BOOL>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) > v3)
    v3 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) >= 0x155555555555555)
    v6 = 0x2AAAAAAAAAAAAAALL;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(96 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = *(_OWORD *)(a2 + 16);
  v9 = &v7[96 * v2];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v8;
  v10 = &v7[96 * v6];
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v9 + 6) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(v9 + 85) = *(_QWORD *)(a2 + 85);
  v11 = *(_QWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a2 + 80);
  *((_QWORD *)v9 + 9) = 0;
  *((_QWORD *)v9 + 10) = v12;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 + 56);
  *((_QWORD *)v9 + 9) = v11;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v13 = v9 + 96;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v9;
    a1[1] = v13;
    a1[2] = v10;
  }
  else
  {
    v16 = 0;
    do
    {
      v17 = &v9[v16];
      v18 = &v15[v16];
      v19 = *(_OWORD *)&v15[v16 - 80];
      *((_OWORD *)v17 - 6) = *(_OWORD *)&v15[v16 - 96];
      *((_OWORD *)v17 - 5) = v19;
      *((_QWORD *)v17 - 6) = 0;
      *((_OWORD *)v17 - 4) = *(_OWORD *)&v15[v16 - 64];
      *((_QWORD *)v17 - 6) = *(_QWORD *)&v15[v16 - 48];
      *((_QWORD *)v18 - 8) = 0;
      *((_QWORD *)v18 - 7) = 0;
      *((_QWORD *)v18 - 6) = 0;
      *((_QWORD *)v17 - 3) = 0;
      *(_OWORD *)(v17 - 40) = *(_OWORD *)&v15[v16 - 40];
      *((_QWORD *)v17 - 3) = *(_QWORD *)&v15[v16 - 24];
      *((_QWORD *)v18 - 5) = 0;
      *((_QWORD *)v18 - 4) = 0;
      *((_QWORD *)v18 - 3) = 0;
      v20 = *(_QWORD *)&v15[v16 - 16];
      *(_QWORD *)(v17 - 11) = *(_QWORD *)&v15[v16 - 11];
      *((_QWORD *)v17 - 2) = v20;
      v16 -= 96;
    }
    while (&v15[v16] != v14);
    v15 = (char *)*a1;
    v21 = (char *)a1[1];
    *a1 = &v9[v16];
    a1[1] = v13;
    a1[2] = v10;
    while (v21 != v15)
    {
      v21 -= 96;
      std::allocator<std::__state<char>>::destroy[abi:ne180100](v21);
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

void std::vector<std::sub_match<char const*>>::resize(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __sz, std::vector<std::csub_match>::const_reference __x)
{
  std::vector<std::csub_match>::pointer end;
  std::vector<std::csub_match>::pointer begin;
  unint64_t v7;
  unint64_t v8;
  std::sub_match<const char *> *value;
  unint64_t v11;
  std::vector<std::csub_match>::size_type v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  std::sub_match<const char *> *v16;
  std::sub_match<const char *> *v17;
  std::pair<const char *, const char *> *v18;
  std::vector<std::csub_match>::size_type v19;
  std::pair<const char *, const char *> v20;
  std::sub_match<const char *> *v21;
  std::sub_match<const char *> *v22;
  std::vector<std::csub_match>::pointer v23;
  std::pair<const char *, const char *> v24;
  std::sub_match<const char *> *v25;
  std::vector<std::csub_match>::size_type v26;
  std::pair<const char *, const char *> v27;

  begin = this->__begin_;
  end = this->__end_;
  v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
  v8 = __sz - v7;
  if (__sz <= v7)
  {
    if (__sz < v7)
      this->__end_ = &begin[__sz];
  }
  else
  {
    value = this->__end_cap_.__value_;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= v8)
    {
      v25 = &end[v8];
      v26 = 24 * __sz - 8 * (((char *)end - (char *)this->__begin_) >> 3);
      do
      {
        v27 = __x->std::pair<const char *, const char *>;
        *(_QWORD *)&end->matched = *(_QWORD *)&__x->matched;
        end->std::pair<const char *, const char *> = v27;
        ++end;
        v26 -= 24;
      }
      while (v26);
      this->__end_ = v25;
    }
    else
    {
      if (__sz > 0xAAAAAAAAAAAAAAALL)
        std::vector<BOOL>::__throw_length_error[abi:ne180100]();
      v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3);
      v12 = 2 * v11;
      if (2 * v11 <= __sz)
        v12 = __sz;
      if (v11 >= 0x555555555555555)
        v13 = 0xAAAAAAAAAAAAAAALL;
      else
        v13 = v12;
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<std::string>>>(v13);
      v16 = (std::sub_match<const char *> *)&v14[24 * v7];
      v17 = (std::sub_match<const char *> *)&v14[24 * __sz];
      v18 = v16;
      v19 = 24 * __sz - 24 * v7;
      do
      {
        v20 = __x->std::pair<const char *, const char *>;
        v18[1].first = *(const char **)&__x->matched;
        *v18 = v20;
        v18 = (std::pair<const char *, const char *> *)((char *)v18 + 24);
        v19 -= 24;
      }
      while (v19);
      v21 = (std::sub_match<const char *> *)&v14[24 * v15];
      v23 = this->__begin_;
      v22 = this->__end_;
      if (v22 != this->__begin_)
      {
        do
        {
          v24 = v22[-1].std::pair<const char *, const char *>;
          *(_QWORD *)&v16[-1].matched = *(_QWORD *)&v22[-1].matched;
          v16[-1].std::pair<const char *, const char *> = v24;
          --v16;
          --v22;
        }
        while (v22 != v23);
        v22 = this->__begin_;
      }
      this->__begin_ = v16;
      this->__end_ = v17;
      this->__end_cap_.__value_ = v21;
      if (v22)
        operator delete(v22);
    }
  }
}

void std::vector<std::pair<unsigned long,char const*>>::resize(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __sz)
{
  std::vector<std::pair<unsigned long, const char *>>::pointer begin;
  std::vector<std::pair<unsigned long, const char *>>::pointer end;
  std::vector<std::pair<unsigned long, const char *>>::size_type v5;
  std::vector<std::pair<unsigned long, const char *>>::size_type v6;
  std::pair<unsigned long, const char *> *value;
  uint64_t v8;
  std::vector<std::pair<unsigned long, const char *>>::size_type v9;
  unint64_t v10;
  char *v11;
  std::pair<unsigned long, const char *> *v12;
  uint64_t v13;
  std::pair<unsigned long, const char *> *v14;
  std::pair<unsigned long, const char *> *v15;
  std::pair<unsigned long, const char *> *v16;
  std::vector<std::pair<unsigned long, const char *>>::pointer v17;
  std::pair<unsigned long, const char *> *v18;

  begin = this->__begin_;
  end = this->__end_;
  v5 = end - this->__begin_;
  if (__sz <= v5)
  {
    if (__sz >= v5)
      return;
    v18 = &begin[__sz];
    goto LABEL_17;
  }
  v6 = __sz - v5;
  value = this->__end_cap_.__value_;
  if (__sz - v5 <= value - end)
  {
    bzero(this->__end_, 16 * v6);
    v18 = &end[v6];
LABEL_17:
    this->__end_ = v18;
    return;
  }
  if (__sz >> 60)
    std::vector<BOOL>::__throw_length_error[abi:ne180100]();
  v8 = (char *)value - (char *)begin;
  v9 = v8 >> 3;
  if (v8 >> 3 <= __sz)
    v9 = __sz;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v10 = 0xFFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>>>(v10);
  v12 = (std::pair<unsigned long, const char *> *)&v11[16 * v5];
  v14 = (std::pair<unsigned long, const char *> *)&v11[16 * v13];
  bzero(v12, 16 * v6);
  v15 = &v12[v6];
  v17 = this->__begin_;
  v16 = this->__end_;
  if (v16 != this->__begin_)
  {
    do
    {
      v12[-1] = v16[-1];
      --v12;
      --v16;
    }
    while (v16 != v17);
    v16 = this->__begin_;
  }
  this->__begin_ = v12;
  this->__end_ = v15;
  this->__end_cap_.__value_ = v14;
  if (v16)
    operator delete(v16);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3B8D4D0](exception, 12);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], (void (*)(void *))MEMORY[0x1E0DE43B8]);
}

void sub_1BF8CCF68(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__state<char>::~__state(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::allocator<std::__state<char>>::destroy[abi:ne180100](_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
}

char *std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  uint64_t v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::sub_match<char const*>>::__vallocate[abi:ne180100](result, a4);
    v7 = *((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2;
      *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v7 = v8;
      v7 += 24;
      a2 = (__int128 *)((char *)a2 + 24);
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1BF8CD060(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  _OWORD *v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::shared_ptr<siri::dialogengine::PatternSchemaComponent>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_OWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1BF8CD0D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3B8D4D0](exception, 16);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], (void (*)(void *))MEMORY[0x1E0DE43B8]);
}

void sub_1BF8CD124(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 12;
        std::allocator<std::__state<char>>::destroy[abi:ne180100](v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

__n128 std::deque<std::__state<char>>::push_back(_QWORD *a1, uint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  char *v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  BOOL v35;
  size_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  __int128 v48;
  __int128 v49;
  unint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  void *v60;
  _QWORD *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  int64_t v71;
  char *v72;
  unint64_t v73;
  __int128 v74;
  __n128 result;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  void *v84;
  __int128 v85;
  __int128 v86;
  _QWORD *v87;

  v4 = (char *)a1[2];
  v5 = (char *)a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = 42 * ((v4 - v5) >> 3) - 1;
  v7 = a1[4];
  v8 = a1[5] + v7;
  if (v6 == v8)
  {
    if (v7 < 0x2A)
    {
      v22 = (v4 - v5) >> 3;
      v23 = (char *)a1[3];
      v24 = (uint64_t)&v23[-*a1];
      if (v22 >= v24 >> 3)
      {
        if (v23 == (char *)*a1)
          v25 = 1;
        else
          v25 = v24 >> 2;
        v87 = a1 + 3;
        *(_QWORD *)&v85 = std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v25);
        *((_QWORD *)&v85 + 1) = v85 + 8 * v22;
        *(_QWORD *)&v86 = *((_QWORD *)&v85 + 1);
        *((_QWORD *)&v86 + 1) = v85 + 8 * v26;
        v84 = operator new(0xFC0uLL);
        std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(&v85, &v84);
        v27 = a1[2];
        v29 = (char *)*((_QWORD *)&v85 + 1);
        v28 = (char *)v85;
        v31 = (char *)*((_QWORD *)&v86 + 1);
        v30 = (char *)v86;
        while (v27 != a1[1])
        {
          if (v29 == v28)
          {
            if (v30 >= v31)
            {
              if (v31 == v28)
                v37 = 1;
              else
                v37 = (v31 - v28) >> 2;
              v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v37);
              v40 = v38;
              v29 = &v38[(2 * v37 + 6) & 0xFFFFFFFFFFFFFFF8];
              v41 = v30 - v28;
              v35 = v30 == v28;
              v30 = v29;
              if (!v35)
              {
                v30 = &v29[v41 & 0xFFFFFFFFFFFFFFF8];
                v42 = 8 * (v41 >> 3);
                v43 = v29;
                v44 = v28;
                do
                {
                  v45 = *(_QWORD *)v44;
                  v44 += 8;
                  *(_QWORD *)v43 = v45;
                  v43 += 8;
                  v42 -= 8;
                }
                while (v42);
              }
              v31 = &v38[8 * v39];
              if (v28)
                operator delete(v28);
              v28 = v40;
            }
            else
            {
              v32 = (v31 - v30) >> 3;
              if (v32 >= -1)
                v33 = v32 + 1;
              else
                v33 = v32 + 2;
              v34 = &v30[8 * (v33 >> 1)];
              v29 = &v34[-(v30 - v28)];
              v36 = v30 - v28;
              v35 = v30 == v28;
              v30 = v34;
              if (!v35)
                memmove(v29, v28, v36);
            }
          }
          v46 = *(_QWORD *)(v27 - 8);
          v27 -= 8;
          *((_QWORD *)v29 - 1) = v46;
          v29 -= 8;
        }
        *(_QWORD *)&v85 = v28;
        *((_QWORD *)&v85 + 1) = v29;
        *(_QWORD *)&v86 = v30;
        *((_QWORD *)&v86 + 1) = v31;
        v48 = v85;
        v49 = v86;
        *(_QWORD *)&v85 = *a1;
        v47 = (void *)v85;
        *((_QWORD *)&v85 + 1) = v27;
        *(_OWORD *)a1 = v48;
        *((_OWORD *)a1 + 1) = v49;
        if (v47)
          operator delete(v47);
        goto LABEL_60;
      }
      if (v23 != v4)
      {
        *(_QWORD *)&v85 = operator new(0xFC0uLL);
        std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(a1, &v85);
LABEL_60:
        v5 = (char *)a1[1];
        v8 = a1[5] + a1[4];
        goto LABEL_61;
      }
      *(_QWORD *)&v85 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)a1, &v85);
      v61 = (_QWORD *)a1[1];
      v4 = (char *)a1[2];
      v63 = *v61;
      v62 = (char *)(v61 + 1);
      v10 = v63;
      a1[1] = v62;
      if (v4 == (char *)a1[3])
      {
        v64 = (uint64_t)&v62[-*a1];
        if ((unint64_t)v62 > *a1)
        {
          v65 = v64 >> 3;
          v14 = v64 >> 3 < -1;
          v66 = (v64 >> 3) + 2;
          if (v14)
            v67 = v66;
          else
            v67 = v65 + 1;
          v68 = -(v67 >> 1);
          v69 = v67 >> 1;
          v70 = &v62[-8 * v69];
          v71 = v4 - v62;
          if (v4 != v62)
          {
            memmove(&v62[-8 * v69], v62, v4 - v62);
            v62 = (char *)a1[1];
          }
          v4 = &v70[v71];
          v72 = &v62[8 * v68];
          goto LABEL_58;
        }
        if (v4 == (char *)*a1)
          v77 = 1;
        else
          v77 = (uint64_t)&v4[-*a1] >> 2;
        v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v77);
        v52 = &v51[8 * (v77 >> 2)];
        v54 = &v51[8 * v78];
        v79 = (uint64_t *)a1[1];
        v4 = v52;
        v80 = a1[2] - (_QWORD)v79;
        if (v80)
        {
          v4 = &v52[v80 & 0xFFFFFFFFFFFFFFF8];
          v81 = 8 * (v80 >> 3);
          v82 = &v51[8 * (v77 >> 2)];
          do
          {
            v83 = *v79++;
            *(_QWORD *)v82 = v83;
            v82 += 8;
            v81 -= 8;
          }
          while (v81);
        }
LABEL_46:
        v60 = (void *)*a1;
        *a1 = v51;
        a1[1] = v52;
        a1[2] = v4;
        a1[3] = v54;
        if (v60)
        {
          operator delete(v60);
          v4 = (char *)a1[2];
        }
      }
    }
    else
    {
      a1[4] = v7 - 42;
      v11 = *(_QWORD *)v5;
      v9 = v5 + 8;
      v10 = v11;
      a1[1] = v9;
      if ((char *)a1[3] == v4)
      {
        v12 = (uint64_t)&v9[-*a1];
        if ((unint64_t)v9 > *a1)
        {
          v13 = v12 >> 3;
          v14 = v12 >> 3 < -1;
          v15 = (v12 >> 3) + 2;
          if (v14)
            v16 = v15;
          else
            v16 = v13 + 1;
          v17 = -(v16 >> 1);
          v18 = v16 >> 1;
          v19 = &v9[-8 * v18];
          v20 = v4 - v9;
          if (v4 == v9)
          {
            v21 = v4;
          }
          else
          {
            memmove(&v9[-8 * v18], v9, v4 - v9);
            v21 = (char *)a1[1];
          }
          v4 = &v19[v20];
          v72 = &v21[8 * v17];
LABEL_58:
          a1[1] = v72;
          a1[2] = v4;
          goto LABEL_59;
        }
        if (v4 == (char *)*a1)
          v50 = 1;
        else
          v50 = (uint64_t)&v4[-*a1] >> 2;
        v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v50);
        v52 = &v51[8 * (v50 >> 2)];
        v54 = &v51[8 * v53];
        v55 = (uint64_t *)a1[1];
        v4 = v52;
        v56 = a1[2] - (_QWORD)v55;
        if (v56)
        {
          v4 = &v52[v56 & 0xFFFFFFFFFFFFFFF8];
          v57 = 8 * (v56 >> 3);
          v58 = &v51[8 * (v50 >> 2)];
          do
          {
            v59 = *v55++;
            *(_QWORD *)v58 = v59;
            v58 += 8;
            v57 -= 8;
          }
          while (v57);
        }
        goto LABEL_46;
      }
    }
LABEL_59:
    *(_QWORD *)v4 = v10;
    a1[2] += 8;
    goto LABEL_60;
  }
LABEL_61:
  v73 = *(_QWORD *)&v5[8 * (v8 / 0x2A)] + 96 * (v8 % 0x2A);
  v74 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v73 = *(_OWORD *)a2;
  *(_OWORD *)(v73 + 16) = v74;
  *(_QWORD *)(v73 + 40) = 0;
  *(_QWORD *)(v73 + 48) = 0;
  *(_QWORD *)(v73 + 32) = 0;
  *(_OWORD *)(v73 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v73 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(v73 + 56) = 0;
  *(_QWORD *)(v73 + 64) = 0;
  *(_QWORD *)(v73 + 72) = 0;
  result = *(__n128 *)(a2 + 56);
  *(__n128 *)(v73 + 56) = result;
  *(_QWORD *)(v73 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v76 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(v73 + 85) = *(_QWORD *)(a2 + 85);
  *(_QWORD *)(v73 + 80) = v76;
  ++a1[5];
  return result;
}

void sub_1BF8CD610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  void *v11;

  operator delete(v11);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::deque<std::__state<char>>::pop_back(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[5] + a1[4] - 1;
  std::allocator<std::__state<char>>::destroy[abi:ne180100]((_QWORD *)(*(_QWORD *)(a1[1] + 8 * (v2 / 0x2A))
                                                                     + 96 * (v2 % 0x2A)));
  v4 = a1[1];
  v3 = a1[2];
  if (v3 == v4)
    v5 = 0;
  else
    v5 = 42 * ((v3 - v4) >> 3) - 1;
  v6 = a1[4];
  v7 = a1[5] - 1;
  a1[5] = v7;
  if ((unint64_t)(v5 - (v7 + v6)) >= 0x54)
  {
    operator delete(*(void **)(v3 - 8));
    a1[2] -= 8;
  }
}

uint64_t std::deque<std::__state<char>>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  char *v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = &v2[v4 / 0x2A];
    v6 = (char *)*v5 + 96 * (v4 % 0x2A);
    v7 = (unint64_t)v2[(*(_QWORD *)(a1 + 40) + v4) / 0x2A] + 96 * ((*(_QWORD *)(a1 + 40) + v4) % 0x2A);
    if (v6 != (char *)v7)
    {
      do
      {
        std::allocator<std::__state<char>>::destroy[abi:ne180100](v6);
        v6 += 96;
        if (v6 - (_BYTE *)*v5 == 4032)
        {
          v8 = (char *)v5[1];
          ++v5;
          v6 = v8;
        }
      }
      while (v6 != (char *)v7);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v9 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v10 = v9 >> 3;
  if (v10 == 1)
  {
    v11 = 21;
    goto LABEL_14;
  }
  if (v10 == 2)
  {
    v11 = 42;
LABEL_14:
    *(_QWORD *)(a1 + 32) = v11;
  }
  if (v2 != v3)
  {
    do
    {
      v12 = *v2++;
      operator delete(v12);
    }
    while (v2 != v3);
    v14 = *(_QWORD *)(a1 + 8);
    v13 = *(_QWORD *)(a1 + 16);
    if (v13 != v14)
      *(_QWORD *)(a1 + 16) = v13 + ((v14 - v13 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<morphun::dialog::SemanticFeatureConceptBase *>>(v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

uint64_t std::sub_match<std::__wrap_iter<char const*>>::compare[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  size_t v4;
  void **v5;
  char v6;
  size_t v7;
  const void *p_p;
  size_t v9;
  void **v10;
  size_t v11;
  unsigned int v12;
  unsigned int v13;
  void **v15;
  size_t v16;
  uint64_t v17;
  void *__p;
  size_t v19;
  uint64_t v20;

  if (*(_BYTE *)(a1 + 16))
  {
    std::string::__init_with_size[abi:ne180100]<char *,char *>(&__p, *(char **)a1, *(char **)(a1 + 8), *(_QWORD *)(a1 + 8) - *(_QWORD *)a1);
  }
  else
  {
    __p = 0;
    v19 = 0;
    v20 = 0;
  }
  if (*(_BYTE *)(a2 + 16))
  {
    std::string::__init_with_size[abi:ne180100]<char *,char *>(&v15, *(char **)a2, *(char **)(a2 + 8), *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
    v3 = HIBYTE(v17);
    v5 = v15;
    v4 = v16;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v3 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
  }
  v6 = HIBYTE(v20);
  if (v20 >= 0)
    v7 = HIBYTE(v20);
  else
    v7 = v19;
  if (v20 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v3 & 0x80u) == 0)
    v9 = v3;
  else
    v9 = v4;
  if ((v3 & 0x80u) == 0)
    v10 = (void **)&v15;
  else
    v10 = v5;
  if (v9 >= v7)
    v11 = v7;
  else
    v11 = v9;
  v12 = memcmp(p_p, v10, v11);
  if ((v3 & 0x80) != 0)
  {
    operator delete(v5);
    if ((v20 & 0x8000000000000000) == 0)
      goto LABEL_24;
  }
  else if ((v6 & 0x80) == 0)
  {
    goto LABEL_24;
  }
  operator delete(__p);
LABEL_24:
  v13 = v9 < v7;
  if (v7 < v9)
    v13 = -1;
  if (v12)
    return v12;
  else
    return v13;
}

void sub_1BF8CDB90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::regex_traits<char> *std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](std::regex_traits<char> *a1, char *a2)
{
  std::regex_traits<char> *v4;
  size_t v5;

  v4 = std::regex_traits<char>::regex_traits(a1);
  v4[2].__ct_ = 0;
  *(_OWORD *)&v4[1].__col_ = 0u;
  *(_OWORD *)&v4[1].__loc_.__locale_ = 0u;
  v5 = strlen(a2);
  if (std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>((uint64_t)a1, a2, &a2[v5]) != &a2[v5])
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>();
  return a1;
}

void sub_1BF8CDC18(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::shared_ptr<siri::dialogengine::VisualComponentsCombination::Entry>::~shared_ptr[abi:ne180100]((uint64_t)&v1[5]);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

std::regex_traits<char> *__cdecl std::regex_traits<char>::regex_traits(std::regex_traits<char> *this)
{
  const std::locale *v2;

  v2 = (const std::locale *)MEMORY[0x1C3B8D7C4]();
  this->__ct_ = (const std::ctype<char> *)std::locale::use_facet(v2, MEMORY[0x1E0DE4A90]);
  this->__col_ = (const std::collate<char> *)std::locale::use_facet(&this->__loc_, MEMORY[0x1E0DE4C08]);
  return this;
}

void sub_1BF8CDC7C(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(uint64_t a1, char *a2, char *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  std::__owns_one_state<char> *v8;
  unsigned int v9;
  char *v10;
  char *v11;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  std::__owns_one_state<char> *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  std::__owns_one_state<char> *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;

  v6 = (_QWORD *)operator new();
  *v6 = &off_1E7932030;
  v7 = (_QWORD *)operator new();
  v7[1] = v6;
  std::shared_ptr<std::__empty_state<char>>::reset[abi:ne180100]<std::__empty_state<char>,void>(a1 + 40, (uint64_t)v7);
  v8 = *(std::__owns_one_state<char> **)(a1 + 40);
  *(_QWORD *)(a1 + 56) = v8;
  v9 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v9 > 0x3F)
  {
    switch(v9)
    {
      case 0x40u:
        return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>((std::basic_regex<char> *)a1, a2, a3);
      case 0x80u:
        v13 = (unsigned __int8 *)memchr(a2, 10, a3 - a2);
        if (v13)
          v14 = v13;
        else
          v14 = (unsigned __int8 *)a3;
        if (v14 == (unsigned __int8 *)a2)
        {
          v24 = (_QWORD *)operator new();
          v25 = *(_QWORD *)(a1 + 56);
          v26 = *(_QWORD *)(v25 + 8);
          v24[1] = v26;
          *(_QWORD *)(v25 + 8) = v24;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        }
        else
        {
          std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, (unsigned __int8 *)a2, v14);
        }
        if (v14 != (unsigned __int8 *)a3)
          ++v14;
        while (v14 != (unsigned __int8 *)a3)
        {
          v27 = (unsigned __int8 *)memchr(v14, 10, a3 - (char *)v14);
          if (v27)
            v28 = v27;
          else
            v28 = (unsigned __int8 *)a3;
          v29 = *(std::__owns_one_state<char> **)(a1 + 56);
          if (v28 == v14)
          {
            v30 = (_QWORD *)operator new();
            v31 = *(_QWORD *)(a1 + 56);
            v32 = *(_QWORD *)(v31 + 8);
            v30[1] = v32;
            *(_QWORD *)(v31 + 8) = v30;
            *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          }
          else
          {
            std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, v14, v28);
          }
          std::basic_regex<char,std::regex_traits<char>>::__push_alternation((std::basic_regex<char> *)a1, v8, v29);
          if (v28 == (unsigned __int8 *)a3)
            v14 = v28;
          else
            v14 = v28 + 1;
        }
        break;
      case 0x100u:
        v10 = (char *)memchr(a2, 10, a3 - a2);
        if (v10)
          v11 = v10;
        else
          v11 = a3;
        if (v11 == a2)
        {
          v15 = (_QWORD *)operator new();
          v16 = *(_QWORD *)(a1 + 56);
          v17 = *(_QWORD *)(v16 + 8);
          v15[1] = v17;
          *(_QWORD *)(v16 + 8) = v15;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        }
        else
        {
          std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>((std::basic_regex<char> *)a1, a2, v11);
        }
        if (v11 != a3)
          ++v11;
        while (v11 != a3)
        {
          v18 = (char *)memchr(v11, 10, a3 - v11);
          if (v18)
            v19 = v18;
          else
            v19 = a3;
          v20 = *(std::__owns_one_state<char> **)(a1 + 56);
          if (v19 == v11)
          {
            v21 = (_QWORD *)operator new();
            v22 = *(_QWORD *)(a1 + 56);
            v23 = *(_QWORD *)(v22 + 8);
            v21[1] = v23;
            *(_QWORD *)(v22 + 8) = v21;
            *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          }
          else
          {
            std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>((std::basic_regex<char> *)a1, v11, v19);
          }
          std::basic_regex<char,std::regex_traits<char>>::__push_alternation((std::basic_regex<char> *)a1, v8, v20);
          if (v19 == a3)
            v11 = v19;
          else
            v11 = v19 + 1;
        }
        break;
      default:
        goto LABEL_49;
    }
    return a3;
  }
  else if (v9)
  {
    if (v9 != 16)
    {
      if (v9 != 32)
LABEL_49:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>();
      return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>((std::basic_regex<char> *)a1, a2, a3);
    }
    return (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
  }
  else
  {
    return std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)a2, a3);
  }
}

void sub_1BF8CDFE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3B8D4D0](exception, 17);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], (void (*)(void *))MEMORY[0x1E0DE43B8]);
}

void sub_1BF8CE034(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::shared_ptr<std::__empty_state<char>>::reset[abi:ne180100]<std::__empty_state<char>,void>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v4 = (_QWORD *)operator new();
  *v4 = &off_1E7932088;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  *(_QWORD *)&v5 = a2;
  *((_QWORD *)&v5 + 1) = v4;
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v5;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1BF8CE0DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, char *a3)
{
  std::__owns_one_state<char> *end;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  std::__node<char> *v9;
  std::__owns_one_state<char> *v10;
  std::__node<char> *first;
  std::__owns_one_state<char> *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  std::__node<char> *v15;
  std::__owns_one_state<char> *v16;
  std::__node<char> *v17;

  end = a1->__end_;
  v7 = a2;
  do
  {
    v8 = v7;
    v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(a1, v7, a3);
  }
  while (v7 != v8);
  if (v8 == a2)
  {
    v9 = (std::__node<char> *)operator new();
    v10 = a1->__end_;
    first = v10->__first_;
    v9[1].__vftable = (std::__node<char>_vtbl *)first;
    v10->__first_ = v9;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  }
  while (v8 != (unsigned __int8 *)a3)
  {
    if (*v8 != 124)
      return (char *)v8;
    v12 = a1->__end_;
    v13 = v8 + 1;
    v14 = v8 + 1;
    do
    {
      v8 = v14;
      v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(a1, v14, a3);
    }
    while (v14 != v8);
    if (v8 == v13)
    {
      v15 = (std::__node<char> *)operator new();
      v16 = a1->__end_;
      v17 = v16->__first_;
      v15[1].__vftable = (std::__node<char>_vtbl *)v17;
      v16->__first_ = v15;
      a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v12);
  }
  return a3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a2;
  if (a2 == a3)
    return a2;
  v4 = a3;
  if (*a2 == 94)
  {
    v6 = operator new();
    v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)v6 = &off_1E79321A8;
    *(_QWORD *)(v6 + 8) = v9;
    *(_BYTE *)(v6 + 16) = v7;
    *(_QWORD *)(v8 + 8) = v6;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    ++v3;
  }
  if (v3 != v4)
  {
    do
    {
      v10 = v3;
      v3 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>((std::basic_regex<char> *)a1, v3, v4);
    }
    while (v3 != v10);
    if (v10 != v4)
    {
      if (v10 + 1 != v4 || *v10 != 36)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      v11 = operator new();
      v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v13 = *(_QWORD *)(a1 + 56);
      v14 = *(_QWORD *)(v13 + 8);
      *(_QWORD *)v11 = &off_1E79321F0;
      *(_QWORD *)(v11 + 8) = v14;
      *(_BYTE *)(v11 + 16) = v12;
      *(_QWORD *)(v13 + 8) = v11;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
  }
  return v4;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  char *v3;
  std::__owns_one_state<char> *end;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  std::__owns_one_state<char> *v9;
  unsigned __int8 *v10;

  v3 = a3;
  end = a1->__end_;
  v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>((uint64_t)a1, a2, a3);
  if (v7 == (unsigned __int8 *)a2)
LABEL_9:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  v8 = v7;
  while (v8 != (unsigned __int8 *)v3)
  {
    if (*v8 != 124)
      return (char *)v8;
    v9 = a1->__end_;
    v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>((uint64_t)a1, (char *)v8 + 1, v3);
    if (v10 == v8 + 1)
      goto LABEL_9;
    v8 = v10;
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return v3;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3B8D4D0](exception, 14);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], (void (*)(void *))MEMORY[0x1E0DE43B8]);
}

void sub_1BF8CE454(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_alternation(std::basic_regex<char> *this, std::__owns_one_state<char> *__sa, std::__owns_one_state<char> *__sb)
{
  std::__node<char> *v6;
  std::__node<char> *first;
  std::__node<char> *v8;
  std::__node<char> *v9;
  std::__node<char> *v10;
  std::__node<char> *v11;

  v6 = (std::__node<char> *)operator new();
  first = __sb->__first_;
  v6[1].__vftable = (std::__node<char>_vtbl *)__sa->__first_;
  v6[2].__vftable = (std::__node<char>_vtbl *)first;
  v6->__vftable = (std::__node<char>_vtbl *)&off_1E7932670;
  __sa->__first_ = v6;
  __sb->__first_ = 0;
  v8 = (std::__node<char> *)operator new();
  v9 = this->__end_->__first_;
  v8[1].__vftable = (std::__node<char>_vtbl *)v9;
  __sb->__first_ = v8;
  this->__end_->__first_ = 0;
  v10 = (std::__node<char> *)operator new();
  v11 = __sb->__first_;
  v10->__vftable = (std::__node<char>_vtbl *)&off_1E79326B8;
  v10[1].__vftable = (std::__node<char>_vtbl *)v11;
  this->__end_->__first_ = v10;
  this->__end_ = (std::__owns_one_state<char> *)__sb->__first_;
}

void std::__empty_non_own_state<char>::~__empty_non_own_state()
{
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__empty_non_own_state<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_1E79325F8;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_1E79325F8;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x1C3B8D890);
}

void std::__alternate<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t std::__alternate<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;

  *(_DWORD *)a3 = -994;
  v3 = 8;
  if (a2)
    v3 = 16;
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + v3);
  return result;
}

void std::__owns_one_state<char>::~__owns_one_state(std::__owns_one_state<char> *this)
{
  std::__node<char> *first;

  first = this->__first_;
  if (first)
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
}

{
  std::__node<char> *first;

  first = this->__first_;
  if (first)
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  JUMPOUT(0x1C3B8D890);
}

void (__cdecl ***std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_1E79325F8;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_1E79325F8;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x1C3B8D890);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(uint64_t a1, char *a2, char *a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;

  v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, a2, a3);
  if (v6 == (unsigned __int8 *)a2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  do
  {
    v7 = v6;
    v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, (char *)v6, a3);
  }
  while (v6 != v7);
  return v7;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3B8D4D0](exception, 15);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], (void (*)(void *))MEMORY[0x1E0DE43B8]);
}

void sub_1BF8CE864(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(uint64_t a1, char *a2, char *a3)
{
  std::__owns_one_state<char> *v6;
  int v7;
  int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  std::basic_regex<char>::value_type v13;
  char *v14;
  _BOOL4 v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (**v25)();
  unsigned int v26;
  char *v27;
  char *v28;

  v6 = *(std::__owns_one_state<char> **)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 28);
  if (a2 == a3)
  {
LABEL_24:
    v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(a1, a2, a3);
    goto LABEL_25;
  }
  v8 = *a2;
  v9 = (v8 - 36);
  if (v9 > 0x3A)
    goto LABEL_13;
  if (((1 << (v8 - 36)) & 0x5800000080004D1) == 0)
  {
    if (v9 == 5)
    {
      if (*(_DWORD *)(a1 + 36))
        goto LABEL_4;
LABEL_14:
      std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, *a2);
LABEL_33:
      v10 = (unsigned __int8 *)(a2 + 1);
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v10, (unsigned __int8 *)a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
    }
LABEL_13:
    if ((v8 - 123) < 2)
      goto LABEL_4;
    goto LABEL_14;
  }
LABEL_4:
  v10 = (unsigned __int8 *)(a2 + 1);
  if (a2 + 1 == a3)
    goto LABEL_21;
  v11 = *a2;
  if (v11 != 92)
    goto LABEL_22;
  v12 = (char)*v10;
  v13 = *v10;
  if ((v12 - 36) <= 0x3A && ((1 << (v12 - 36)) & 0x5800000080004F1) != 0
    || (v12 - 123) < 3)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v13);
    v10 = (unsigned __int8 *)(a2 + 2);
    return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v10, (unsigned __int8 *)a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
  }
  if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
  {
    v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, a2 + 1, a3, 0);
  }
  else
  {
    v15 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v13);
    v16 = 2;
    if (!v15)
      v16 = 0;
    v14 = &a2[v16];
  }
  if (v14 == a2)
  {
LABEL_21:
    v11 = *a2;
LABEL_22:
    if (v11 == 46)
    {
      v17 = (_QWORD *)operator new();
      v18 = *(_QWORD *)(a1 + 56);
      v19 = *(_QWORD *)(v18 + 8);
      *v17 = &off_1E7932700;
      v17[1] = v19;
      *(_QWORD *)(v18 + 8) = v17;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v10, (unsigned __int8 *)a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
    }
    goto LABEL_24;
  }
LABEL_25:
  if (v14 != a2 || v14 == a3)
    goto LABEL_37;
  v20 = *a2;
  switch(v20)
  {
    case '$':
      v21 = operator new();
      v22 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v23 = *(_QWORD *)(a1 + 56);
      v24 = *(_QWORD *)(v23 + 8);
      v25 = &off_1E79321F0;
      goto LABEL_32;
    case '(':
      std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression((std::basic_regex<char> *)a1);
      v26 = *(_DWORD *)(a1 + 28);
      ++*(_DWORD *)(a1 + 36);
      v27 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, a2 + 1, a3);
      if (v27 == a3 || (v28 = v27, *v27 != 41))
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression((std::basic_regex<char> *)a1, v26);
      --*(_DWORD *)(a1 + 36);
      v14 = v28 + 1;
LABEL_37:
      v10 = (unsigned __int8 *)v14;
      if (v14 != a2)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v10, (unsigned __int8 *)a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
      return (unsigned __int8 *)a2;
    case '^':
      v21 = operator new();
      v22 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v23 = *(_QWORD *)(a1 + 56);
      v24 = *(_QWORD *)(v23 + 8);
      v25 = &off_1E79321A8;
LABEL_32:
      *(_QWORD *)v21 = v25;
      *(_QWORD *)(v21 + 8) = v24;
      *(_BYTE *)(v21 + 16) = v22;
      *(_QWORD *)(v23 + 8) = v21;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      goto LABEL_33;
  }
  return (unsigned __int8 *)a2;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(std::basic_regex<char> *this)
{
  uint64_t v2;
  unsigned int v3;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  if ((this->__flags_ & 2) == 0)
  {
    v2 = operator new();
    v3 = this->__marked_count_ + 1;
    this->__marked_count_ = v3;
    end = this->__end_;
    first = end->__first_;
    *(_QWORD *)v2 = &off_1E7932508;
    *(_QWORD *)(v2 + 8) = first;
    *(_DWORD *)(v2 + 16) = v3;
    end->__first_ = (std::__node<char> *)v2;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3B8D4D0](exception, 6);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], (void (*)(void *))MEMORY[0x1E0DE43B8]);
}

void sub_1BF8CEC48(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(std::basic_regex<char> *this, unsigned int a2)
{
  uint64_t v4;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  if ((this->__flags_ & 2) == 0)
  {
    v4 = operator new();
    end = this->__end_;
    first = end->__first_;
    *(_QWORD *)v4 = &off_1E7932550;
    *(_QWORD *)(v4 + 8) = first;
    *(_DWORD *)(v4 + 16) = a2;
    end->__first_ = (std::__node<char> *)v4;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
  }
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t a5, size_t a6)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  size_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  int v17;
  size_t v18;
  BOOL v19;
  BOOL v20;
  std::__owns_one_state<char> *v21;
  BOOL v22;
  unsigned __int8 *v23;
  unsigned __int8 *v25;
  int v26;
  int v27;
  size_t __max;

  if (a2 == a3)
    return a2;
  v6 = a6;
  v7 = a5;
  v10 = a1;
  v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  v12 = (char)*a2;
  if (v12 > 62)
  {
    if (v12 == 63)
    {
      v13 = a2 + 1;
      if (v11)
        v20 = 1;
      else
        v20 = v13 == a3;
      if (!v20 && *v13 == 63)
      {
        v13 = a2 + 2;
        a5 = a5;
        a6 = a6;
        v14 = 0;
        v18 = 1;
        goto LABEL_33;
      }
      a5 = a5;
      a6 = a6;
      v14 = 0;
      v18 = 1;
      goto LABEL_45;
    }
    if (v12 != 123)
      return a2;
    v15 = a2 + 1;
    v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(a2 + 1, a3, (int *)&__max);
    if (v16 != v15)
    {
      if (v16 != a3)
      {
        v17 = (char)*v16;
        if (v17 != 44)
        {
          if (v17 == 125)
          {
            v13 = v16 + 1;
            if (!v11 && v13 != a3 && *v13 == 63)
            {
              v13 = v16 + 2;
              v14 = (int)__max;
              a5 = v7;
              a6 = v6;
              a1 = v10;
              v18 = (int)__max;
LABEL_33:
              v21 = __s;
              v22 = 0;
LABEL_46:
              std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v14, v18, v21, a5, a6, v22);
              return v13;
            }
            v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            v18 = (int)__max;
LABEL_45:
            v21 = __s;
            v22 = 1;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
        v23 = v16 + 1;
        if (v16 + 1 == a3)
          goto LABEL_58;
        if (*v23 == 125)
        {
          v13 = v16 + 2;
          if (!v11 && v13 != a3 && *v13 == 63)
          {
            v13 = v16 + 3;
            v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            goto LABEL_26;
          }
          v14 = (int)__max;
          a5 = v7;
          a6 = v6;
          a1 = v10;
LABEL_36:
          v18 = -1;
          goto LABEL_45;
        }
        v27 = -1;
        v25 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v16 + 1, a3, &v27);
        if (v25 != v23 && v25 != a3 && *v25 == 125)
        {
          v18 = v27;
          v14 = (int)__max;
          if (v27 >= (int)__max)
          {
            v13 = v25 + 1;
            v22 = 1;
            if (!v11 && v13 != a3)
            {
              v26 = v25[1];
              v22 = v26 != 63;
              if (v26 == 63)
                v13 = v25 + 2;
            }
            a5 = v7;
            a6 = v6;
            a1 = v10;
            v21 = __s;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
LABEL_58:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  if (v12 == 42)
  {
    v13 = a2 + 1;
    if (v11)
      v19 = 1;
    else
      v19 = v13 == a3;
    if (!v19 && *v13 == 63)
    {
      v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      v14 = 0;
      goto LABEL_26;
    }
    a5 = a5;
    a6 = a6;
    v14 = 0;
    goto LABEL_36;
  }
  if (v12 == 43)
  {
    v13 = a2 + 1;
    if (!v11 && v13 != a3 && *v13 == 63)
    {
      v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      v14 = 1;
LABEL_26:
      v18 = -1;
      goto LABEL_33;
    }
    a5 = a5;
    a6 = a6;
    v14 = 1;
    goto LABEL_36;
  }
  return a2;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_loop(std::basic_regex<char> *this, size_t __min, size_t __max, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end, BOOL __greedy)
{
  int v8;
  int v9;
  _QWORD *v14;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  uint64_t v17;
  unsigned int loop_count;
  std::__node<char> *v19;
  std::__node<char> *v20;

  v8 = __mexp_end;
  v9 = __mexp_begin;
  v14 = (_QWORD *)operator new();
  end = this->__end_;
  first = end->__first_;
  v14[1] = first;
  end->__first_ = 0;
  v17 = operator new();
  loop_count = this->__loop_count_;
  v19 = __s->__first_;
  *(_QWORD *)v17 = &off_1E7932598;
  *(_QWORD *)(v17 + 8) = v19;
  *(_QWORD *)(v17 + 16) = v14;
  *(_QWORD *)(v17 + 24) = __min;
  *(_QWORD *)(v17 + 32) = __max;
  *(_DWORD *)(v17 + 40) = loop_count;
  *(_DWORD *)(v17 + 44) = v9;
  *(_DWORD *)(v17 + 48) = v8;
  *(_BYTE *)(v17 + 52) = __greedy;
  __s->__first_ = 0;
  v20 = (std::__node<char> *)operator new();
  v20->__vftable = (std::__node<char>_vtbl *)&off_1E7932628;
  v20[1].__vftable = (std::__node<char>_vtbl *)v17;
  this->__end_->__first_ = v20;
  this->__end_ = *(std::__owns_one_state<char> **)(v17 + 16);
  __s->__first_ = (std::__node<char> *)v17;
  ++this->__loop_count_;
}

void sub_1BF8CF0D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(unsigned __int8 *result, unsigned __int8 *a2, int *a3)
{
  int v3;
  int v4;
  int v5;

  if (result != a2)
  {
    v3 = *result;
    if ((v3 & 0xF8) == 0x30 || (v3 & 0xFE) == 0x38)
    {
      v4 = v3 - 48;
      *a3 = v4;
      if (++result == a2)
      {
        return a2;
      }
      else
      {
        while (1)
        {
          v5 = *result;
          if ((v5 & 0xF8) != 0x30 && (v5 & 0xFE) != 0x38)
            break;
          if (v4 >= 214748364)
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
          v4 = v5 + 10 * v4 - 48;
          *a3 = v4;
          if (++result == a2)
            return a2;
        }
      }
    }
  }
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3B8D4D0](exception, 8);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], (void (*)(void *))MEMORY[0x1E0DE43B8]);
}

void sub_1BF8CF1C8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3B8D4D0](exception, 7);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], (void (*)(void *))MEMORY[0x1E0DE43B8]);
}

void sub_1BF8CF214(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__repeat_one_loop<char>::~__repeat_one_loop()
{
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__repeat_one_loop<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_1E79325F8;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_1E79325F8;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x1C3B8D890);
}

unsigned int *std::__loop<char>::__exec(unsigned int *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BOOL4 v8;
  uint64_t v10;

  v2 = result[10];
  v3 = a2[7];
  v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 == -991)
  {
    v5 = *v4 + 1;
    *v4 = v5;
    v6 = *((_QWORD *)result + 3);
    v7 = *((_QWORD *)result + 4);
    v8 = v5 < v7;
    if (v5 < v7 && v5 >= v6)
    {
      v10 = *(_QWORD *)(v3 + 16 * v2 + 8);
      v8 = v5 < v7 && v10 != a2[2];
    }
    if (!v8 || v5 < v6)
    {
      *(_DWORD *)a2 = -994;
      if (!v8)
        goto LABEL_25;
LABEL_22:
      a2[10] = *((_QWORD *)result + 1);
      return std::__loop<char>::__init_repeat[abi:ne180100](result, a2);
    }
    goto LABEL_23;
  }
  *v4 = 0;
  if (*((_QWORD *)result + 4))
  {
    if (*((_QWORD *)result + 3))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_22;
    }
LABEL_23:
    *(_DWORD *)a2 = -992;
    return result;
  }
  *(_DWORD *)a2 = -994;
LABEL_25:
  a2[10] = *((_QWORD *)result + 2);
  return result;
}

unsigned int *std::__loop<char>::__exec_split(unsigned int *result, int a2, _QWORD *a3)
{
  *(_DWORD *)a3 = -994;
  if (*((unsigned __int8 *)result + 52) == a2)
  {
    a3[10] = *((_QWORD *)result + 2);
  }
  else
  {
    a3[10] = *((_QWORD *)result + 1);
    return std::__loop<char>::__init_repeat[abi:ne180100](result, a3);
  }
  return result;
}

unsigned int *std::__loop<char>::__init_repeat[abi:ne180100](unsigned int *result, _QWORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;

  v2 = result[11];
  *(_QWORD *)(a2[7] + 16 * result[10] + 8) = a2[2];
  v3 = result[12];
  if (v2 != v3)
  {
    v4 = v2 - 1;
    v5 = a2[3];
    v6 = v3 - 1 - v4;
    v7 = (_BYTE *)(a2[4] + 24 * v4 + 16);
    do
    {
      *((_QWORD *)v7 - 2) = v5;
      *((_QWORD *)v7 - 1) = v5;
      *v7 = 0;
      v7 += 24;
      --v6;
    }
    while (v6);
  }
  return result;
}

void (__cdecl ***std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__end_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_DWORD *)a2 = -994;
  v2 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(_QWORD *)(v2 + 8) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(v2 + 16) = 1;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__begin_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(*(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__r_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  int v3;
  BOOL v4;
  uint64_t v5;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(_BYTE *)(a2 + 88) & 2) == 0
    || *(_BYTE *)(result + 16) && ((v3 = *v2, v3 != 13) ? (v4 = v3 == 10) : (v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    v5 = *(_QWORD *)(result + 8);
  }
  else
  {
    v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(_QWORD *)(a2 + 80) = v5;
  return result;
}

void (__cdecl ***std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__l_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v4;

  if (*(_BYTE *)(a2 + 92))
  {
    if (*(_QWORD *)(a2 + 16) != *(_QWORD *)(a2 + 8) || (*(_BYTE *)(a2 + 88) & 1) != 0)
    {
LABEL_12:
      v4 = 0;
      *(_DWORD *)a2 = -993;
      goto LABEL_13;
    }
  }
  else
  {
    if (!*(_BYTE *)(result + 16))
      goto LABEL_12;
    v2 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10)
      goto LABEL_12;
  }
  *(_DWORD *)a2 = -994;
  v4 = *(_QWORD *)(result + 8);
LABEL_13:
  *(_QWORD *)(a2 + 80) = v4;
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(uint64_t a1, char *a2, char *a3)
{
  uint64_t v5;
  std::__bracket_expression<char, std::regex_traits<char>> *started;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  int v11;
  int v12;
  char *j;
  char *v14;
  int v15;
  char *v16;
  int v17;
  std::string *v18;
  _BYTE *v19;
  char *v20;
  char *v21;
  unint64_t i;
  std::string::size_type size;
  int v24;
  std::string::size_type v25;
  std::string *p_p;
  std::string *v27;
  std::regex_traits<char>::char_class_type classname;
  char v29;
  std::string::size_type v30;
  std::string *v31;
  void *v32;
  std::string::size_type v33;
  std::string *v34;
  std::string *v35;
  std::string::size_type v36;
  std::string v38;
  std::string v39;
  void *v40[2];
  uint64_t v41;
  std::string __p;

  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3)
      goto LABEL_135;
    v5 = (uint64_t)(a2[1] == 94 ? a2 + 2 : a2 + 1);
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list((std::basic_regex<char> *)a1, a2[1] == 94);
    if ((char *)v5 == a3)
      goto LABEL_135;
    v7 = (uint64_t)started;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *(_BYTE *)v5 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)started, 93);
      ++v5;
    }
    if ((char *)v5 == a3)
      goto LABEL_135;
    v8 = a3 - 4;
    while (1)
    {
      v9 = (char *)v5;
      v10 = a3;
      if ((char *)v5 == a3)
        goto LABEL_113;
      v11 = *(unsigned __int8 *)v5;
      v10 = (char *)v5;
      if (v11 == 93)
        goto LABEL_113;
      memset(&v39, 0, sizeof(v39));
      if ((char *)(v5 + 1) != a3 && v11 == 91)
      {
        v12 = *(unsigned __int8 *)(v5 + 1);
        switch(v12)
        {
          case '.':
            v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, (char *)(v5 + 2), a3, (uint64_t)&v39);
            v5 = *(_DWORD *)(a1 + 24) & 0x1F0;
            size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
            if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              size = v39.__r_.__value_.__l.__size_;
            if (size)
              goto LABEL_33;
            goto LABEL_27;
          case ':':
            if ((uint64_t)&a3[-v5 - 2] < 2)
              goto LABEL_134;
            for (i = 0; ; ++i)
            {
              v14 = (char *)(v5 + i + 2);
              if (*v14 == 58 && *(_BYTE *)(v5 + i + 3) == 93)
                break;
              if (&v8[-v5] == (char *)i)
                goto LABEL_134;
            }
            if (v14 == a3)
LABEL_134:
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
            v24 = *(_DWORD *)(a1 + 24);
            std::string::__init_with_size[abi:ne180100]<char *,char *>(&__p, (char *)(v5 + 2), (char *)(v5 + i + 2), i);
            v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_p = &__p;
            else
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v25 = __p.__r_.__value_.__l.__size_;
            (*(void (**)(_QWORD, std::string *, char *))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), p_p, (char *)p_p + v25);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v27 = &__p;
            else
              v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
            classname = std::__get_classname((const char *)v27, v24 & 1);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (!classname)
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
            v29 = 0;
            *(_DWORD *)(v7 + 160) |= classname;
            goto LABEL_109;
          case '=':
            if ((uint64_t)&a3[-v5 - 2] < 2)
              goto LABEL_134;
            for (j = 0; ; ++j)
            {
              v14 = &j[v5 + 2];
              if (*v14 == 61 && j[v5 + 3] == 93)
                break;
              if (&v8[-v5] == j)
                goto LABEL_134;
            }
            if (v14 == a3)
              goto LABEL_134;
            std::regex_traits<char>::__lookup_collatename<char const*>((uint64_t)&__p, a1, (char *)(v5 + 2), &j[v5 + 2]);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              v30 = __p.__r_.__value_.__l.__size_;
              if (!__p.__r_.__value_.__l.__size_)
LABEL_136:
                std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
              v31 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            else
            {
              v30 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
                goto LABEL_136;
              v31 = &__p;
            }
            std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>((uint64_t)v40, a1, (char *)v31, (char *)v31 + v30);
            v32 = (void *)HIBYTE(v41);
            if (v41 < 0)
              v32 = v40[1];
            if (v32)
            {
              std::__bracket_expression<char,std::regex_traits<char>>::__add_equivalence[abi:ne180100]((uint64_t *)v7, (__int128 *)v40);
            }
            else
            {
              v33 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v33 = __p.__r_.__value_.__l.__size_;
              if (v33 == 2)
              {
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v35 = &__p;
                else
                  v35 = (std::string *)__p.__r_.__value_.__r.__words[0];
                std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v7, v35->__r_.__value_.__s.__data_[0], v35->__r_.__value_.__s.__data_[1]);
              }
              else
              {
                if (v33 != 1)
                  std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v34 = &__p;
                else
                  v34 = (std::string *)__p.__r_.__value_.__r.__words[0];
                std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, v34->__r_.__value_.__s.__data_[0]);
              }
            }
            if (SHIBYTE(v41) < 0)
              operator delete(v40[0]);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            v29 = 0;
LABEL_109:
            v5 = (uint64_t)(v14 + 2);
            v20 = v9;
            goto LABEL_110;
        }
      }
      v5 = *(_DWORD *)(a1 + 24) & 0x1F0;
      v10 = v9;
LABEL_27:
      if ((v5 | 0x40) != 0x40)
      {
        LOBYTE(v15) = *v10;
LABEL_32:
        std::string::operator=(&v39, v15);
        ++v10;
        goto LABEL_33;
      }
      v15 = *v10;
      if (v15 != 92)
        goto LABEL_32;
      v16 = v10 + 1;
      if ((_DWORD)v5)
      {
        v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v16, a3, &v39);
      }
      else
      {
        v10 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v16, (std::basic_regex<char> *)a3, &v39, v7);
        v5 = 0;
      }
LABEL_33:
      if (v10 != a3)
      {
        v17 = *v10;
        if (v17 != 93)
        {
          v19 = v10 + 1;
          if (v10 + 1 != a3 && v17 == 45 && *v19 != 93)
          {
            memset(&__p, 0, sizeof(__p));
            v20 = v10 + 2;
            if (v10 + 2 != a3 && *v19 == 91 && *v20 == 46)
            {
              v21 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, v10 + 3, a3, (uint64_t)&__p);
              goto LABEL_119;
            }
            if ((v5 | 0x40) == 0x40)
            {
              LODWORD(v19) = *v19;
              if ((_DWORD)v19 == 92)
              {
                if ((_DWORD)v5)
                  v21 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v10 + 2, a3, &__p);
                else
                  v21 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)(v10 + 2), (std::basic_regex<char> *)a3, &__p, v7);
LABEL_119:
                v20 = v21;
LABEL_120:
                *(_OWORD *)v40 = *(_OWORD *)&v39.__r_.__value_.__l.__data_;
                v36 = v39.__r_.__value_.__r.__words[2];
                v38 = __p;
                memset(&v39, 0, sizeof(v39));
                v41 = v36;
                memset(&__p, 0, sizeof(__p));
                std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](v7, (char *)v40, (char *)&v38);
                if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v38.__r_.__value_.__l.__data_);
                if (SHIBYTE(v41) < 0)
                  operator delete(v40[0]);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                v29 = 1;
LABEL_110:
                if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v39.__r_.__value_.__l.__data_);
                v10 = v20;
                if ((v29 & 1) == 0)
                  goto LABEL_114;
                goto LABEL_113;
              }
            }
            else
            {
              LOBYTE(v19) = *v19;
            }
            std::string::operator=(&__p, (std::string::value_type)v19);
            goto LABEL_120;
          }
        }
      }
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v39.__r_.__value_.__l.__size_)
        {
          if (v39.__r_.__value_.__l.__size_ == 1)
          {
            v18 = (std::string *)v39.__r_.__value_.__r.__words[0];
LABEL_42:
            std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, v18->__r_.__value_.__s.__data_[0]);
LABEL_79:
            v29 = 1;
            v20 = v10;
            goto LABEL_110;
          }
          v18 = (std::string *)v39.__r_.__value_.__r.__words[0];
LABEL_78:
          std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v7, v18->__r_.__value_.__s.__data_[0], v18->__r_.__value_.__s.__data_[1]);
          goto LABEL_79;
        }
        operator delete(v39.__r_.__value_.__l.__data_);
      }
      else if (*((_BYTE *)&v39.__r_.__value_.__s + 23))
      {
        v18 = &v39;
        if (HIBYTE(v39.__r_.__value_.__r.__words[2]) == 1)
          goto LABEL_42;
        goto LABEL_78;
      }
LABEL_113:
      v5 = (uint64_t)v10;
LABEL_114:
      if ((char *)v5 == v9)
      {
        if (v9 != a3)
        {
          if (*v9 == 45)
          {
            std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, 45);
            ++v9;
          }
          if (v9 != a3 && *v9 == 93)
            return v9 + 1;
        }
LABEL_135:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
      }
    }
  }
  return a2;
}

void sub_1BF8CFDE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a26 < 0)
    operator delete(__p);
  if (a32 < 0)
    operator delete(a27);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3B8D4D0](exception, 5);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], (void (*)(void *))MEMORY[0x1E0DE43B8]);
}

void sub_1BF8CFE9C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::__bracket_expression<char, std::regex_traits<char>> *__cdecl std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(std::basic_regex<char> *this, BOOL __negate)
{
  uint64_t v4;
  std::__node<char> *first;
  unsigned int flags_low;
  char v7;
  int v8;
  BOOL v9;
  std::locale v11;
  std::string v12;

  v4 = operator new();
  first = this->__end_->__first_;
  flags_low = LOBYTE(this->__flags_);
  v7 = flags_low & 1;
  v8 = (flags_low >> 3) & 1;
  *(_QWORD *)(v4 + 8) = first;
  std::locale::locale((std::locale *)(v4 + 16), &this->__traits_.__loc_);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)&this->__traits_.__ct_;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *(_OWORD *)(v4 + 152) = 0u;
  *(_BYTE *)(v4 + 168) = __negate;
  *(_BYTE *)(v4 + 169) = v7;
  *(_BYTE *)(v4 + 170) = v8;
  std::locale::locale(&v11, (const std::locale *)(v4 + 16));
  std::locale::name(&v12, &v11);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
  {
    v9 = v12.__r_.__value_.__l.__size_ != 1 || *v12.__r_.__value_.__l.__data_ != 67;
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  else
  {
    v9 = SHIBYTE(v12.__r_.__value_.__r.__words[2]) != 1 || v12.__r_.__value_.__s.__data_[0] != 67;
  }
  std::locale::~locale(&v11);
  *(_BYTE *)(v4 + 171) = v9;
  this->__end_->__first_ = (std::__node<char> *)v4;
  this->__end_ = (std::__owns_one_state<char> *)v4;
  return (std::__bracket_expression<char, std::regex_traits<char>> *)v4;
}

void sub_1BF8CFFFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10)
{
  void (__cdecl ***v10)(std::__owns_one_state<char> *__hidden);
  std::locale *v11;
  void **v12;
  void (__cdecl **v14)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v15)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v16)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v17)(std::__owns_one_state<char> *__hidden);

  std::locale::~locale((std::locale *)&a9);
  a10 = v10 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  v14 = v10[14];
  if (v14)
  {
    v10[15] = v14;
    operator delete(v14);
  }
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  v15 = v10[8];
  if (v15)
  {
    v10[9] = v15;
    operator delete(v15);
  }
  v16 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))*v12;
  if (*v12)
  {
    v10[6] = v16;
    operator delete(v16);
  }
  std::locale::~locale(v11);
  v17 = v10[1];
  if (v17)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v17 + 1))(v17);
  MEMORY[0x1C3B8D890](v10, 0x10F1C4061CF1F02);
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  _BYTE *v5;
  unint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  _BYTE *v21;
  char v22;
  unint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  unint64_t v26;
  size_t v27;
  _BYTE *v28;
  char v29;
  _BYTE *v30;
  char v31;

  v2 = a2;
  if (*(_BYTE *)(a1 + 169))
  {
    v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
    v5 = *(_BYTE **)(a1 + 48);
    v4 = *(_QWORD *)(a1 + 56);
    if ((unint64_t)v5 >= v4)
    {
      v6 = *(_QWORD *)(a1 + 40);
      v7 = &v5[-v6];
      v8 = (uint64_t)&v5[-v6 + 1];
      if (v8 >= 0)
      {
        v9 = v4 - v6;
        if (2 * v9 > v8)
          v8 = 2 * v9;
        if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
          v10 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        if (v10)
          v11 = operator new(v10);
        else
          v11 = 0;
        v19 = &v7[(_QWORD)v11];
        v20 = (char *)v11 + v10;
        v7[(_QWORD)v11] = v2;
        v18 = (uint64_t)&v7[(_QWORD)v11 + 1];
        if (v5 != (_BYTE *)v6)
        {
          v21 = &v5[~v6];
          do
          {
            v22 = *--v5;
            (v21--)[(_QWORD)v11] = v22;
          }
          while (v5 != (_BYTE *)v6);
LABEL_45:
          v5 = *(_BYTE **)(a1 + 40);
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    }
    goto LABEL_22;
  }
  v5 = *(_BYTE **)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  if (!*(_BYTE *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v12)
    {
      v23 = *(_QWORD *)(a1 + 40);
      v24 = &v5[-v23];
      v25 = (uint64_t)&v5[-v23 + 1];
      if (v25 >= 0)
      {
        v26 = v12 - v23;
        if (2 * v26 > v25)
          v25 = 2 * v26;
        if (v26 >= 0x3FFFFFFFFFFFFFFFLL)
          v27 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v27 = v25;
        if (v27)
          v11 = operator new(v27);
        else
          v11 = 0;
        v19 = &v24[(_QWORD)v11];
        v20 = (char *)v11 + v27;
        v24[(_QWORD)v11] = v2;
        v18 = (uint64_t)&v24[(_QWORD)v11 + 1];
        if (v5 != (_BYTE *)v23)
        {
          v30 = &v5[~v23];
          do
          {
            v31 = *--v5;
            (v30--)[(_QWORD)v11] = v31;
          }
          while (v5 != (_BYTE *)v23);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    *v5 = v2;
    v18 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v12)
    goto LABEL_22;
  v13 = *(_QWORD *)(a1 + 40);
  v14 = &v5[-v13];
  v15 = (uint64_t)&v5[-v13 + 1];
  if (v15 < 0)
    goto LABEL_50;
  v16 = v12 - v13;
  if (2 * v16 > v15)
    v15 = 2 * v16;
  if (v16 >= 0x3FFFFFFFFFFFFFFFLL)
    v17 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v17 = v15;
  if (v17)
    v11 = operator new(v17);
  else
    v11 = 0;
  v19 = &v14[(_QWORD)v11];
  v20 = (char *)v11 + v17;
  v14[(_QWORD)v11] = v2;
  v18 = (uint64_t)&v14[(_QWORD)v11 + 1];
  if (v5 != (_BYTE *)v13)
  {
    v28 = &v5[~v13];
    do
    {
      v29 = *--v5;
      (v28--)[(_QWORD)v11] = v29;
    }
    while (v5 != (_BYTE *)v13);
    goto LABEL_45;
  }
LABEL_46:
  v11 = v19;
LABEL_47:
  *(_QWORD *)(a1 + 40) = v11;
  *(_QWORD *)(a1 + 48) = v18;
  *(_QWORD *)(a1 + 56) = v20;
  if (v5)
    operator delete(v5);
LABEL_49:
  *(_QWORD *)(a1 + 48) = v18;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  uint64_t i;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v10;
  unint64_t v11;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_15;
  for (i = 0; ; ++i)
  {
    v6 = &a2[i];
    if (a2[i] == 46 && v6[1] == 93)
      break;
    if (a3 - a2 - 2 == i)
      goto LABEL_15;
  }
  if (v6 == a3)
LABEL_15:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<char const*>((uint64_t)&v10, a1, a2, &a2[i]);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(_OWORD *)a4 = v10;
  v7 = v11;
  *(_QWORD *)(a4 + 16) = v11;
  v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a4 + 8);
  if (v8 - 1 >= 2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  return v6 + 2;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4, uint64_t a5)
{
  int locale_low;
  int v7;
  int v8;
  std::string::value_type v9;
  std::string *v10;

  if (this == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low > 97)
  {
    if (locale_low > 114)
    {
      if (locale_low != 115)
      {
        if (locale_low != 119)
          return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, this, a3, a4);
        *(_DWORD *)(a5 + 160) |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      v8 = *(_DWORD *)(a5 + 160) | 0x4000;
    }
    else
    {
      if (locale_low == 98)
      {
        v10 = a4;
        v9 = 8;
LABEL_19:
        std::string::operator=(v10, v9);
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      if (locale_low != 100)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, this, a3, a4);
      v8 = *(_DWORD *)(a5 + 160) | 0x400;
    }
    *(_DWORD *)(a5 + 160) = v8;
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  if (locale_low <= 82)
  {
    if (LOBYTE(this->__traits_.__loc_.__locale_))
    {
      if (locale_low == 68)
      {
        v7 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_21:
        *(_DWORD *)(a5 + 164) = v7;
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, this, a3, a4);
    }
    v9 = 0;
    v10 = a4;
    goto LABEL_19;
  }
  if (locale_low == 83)
  {
    v7 = *(_DWORD *)(a5 + 164) | 0x4000;
    goto LABEL_21;
  }
  if (locale_low == 87)
  {
    *(_DWORD *)(a5 + 164) |= 0x500u;
    std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5);
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, this, a3, a4);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>(std::basic_regex<char> *a1, char *a2, char *a3, std::string *this)
{
  int v5;
  std::string *v6;
  std::string::value_type v7;
  char *v8;
  char v9;
  int v10;
  std::string::value_type v11;

  if (a2 == a3)
LABEL_52:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v5 = *a2;
  if (v5 > 97)
  {
    switch(v5)
    {
      case 'n':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 10;
          goto LABEL_16;
        }
        LOBYTE(v5) = 10;
        goto LABEL_49;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_21;
      case 'r':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 13;
          goto LABEL_16;
        }
        LOBYTE(v5) = 13;
        goto LABEL_49;
      case 't':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 9;
          goto LABEL_16;
        }
        LOBYTE(v5) = 9;
        goto LABEL_49;
      case 'v':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 11;
          goto LABEL_16;
        }
        LOBYTE(v5) = 11;
        goto LABEL_49;
      default:
        if (v5 == 98)
        {
          if (this)
          {
            v6 = this;
            LOBYTE(v5) = 8;
            goto LABEL_16;
          }
          LOBYTE(v5) = 8;
        }
        else
        {
          if (v5 != 102)
            goto LABEL_21;
          if (this)
          {
            v6 = this;
            LOBYTE(v5) = 12;
            goto LABEL_16;
          }
          LOBYTE(v5) = 12;
        }
        break;
    }
    goto LABEL_49;
  }
  if (v5 > 91)
  {
    if (v5 != 92)
    {
      if (v5 != 97)
        goto LABEL_21;
      if (this)
      {
        v6 = this;
        LOBYTE(v5) = 7;
LABEL_16:
        std::string::operator=(v6, v5);
        return a2 + 1;
      }
      LOBYTE(v5) = 7;
LABEL_49:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
      return a2 + 1;
    }
LABEL_14:
    if (this)
    {
      v6 = this;
      goto LABEL_16;
    }
    goto LABEL_49;
  }
  if (v5 == 34 || v5 == 47)
    goto LABEL_14;
LABEL_21:
  if ((v5 & 0xFFFFFFF8) != 0x30)
    goto LABEL_52;
  v7 = v5 - 48;
  v8 = a2 + 1;
  if (a2 + 1 != a3)
  {
    if ((*v8 & 0xF8) != 0x30)
      goto LABEL_39;
    v7 = *v8 + 8 * v7 - 48;
    if (a2 + 2 != a3)
    {
      v9 = a2[2];
      v10 = v9 & 0xF8;
      v11 = v9 + 8 * v7 - 48;
      if (v10 == 48)
        v8 = a2 + 3;
      else
        v8 = a2 + 2;
      if (v10 == 48)
        v7 = v11;
      goto LABEL_39;
    }
  }
  v8 = a3;
LABEL_39:
  if (this)
    std::string::operator=(this, v7);
  else
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
  return v8;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](uint64_t a1, char *a2, char *a3)
{
  char *v3;
  char *v4;
  unint64_t i;
  char *v7;
  char v8;
  char *v9;
  unint64_t j;
  char *v11;
  char v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  void *v23;
  uint64_t v24;
  char *v25;
  char v26;
  _BYTE *v27;
  char *v28;
  char v29;
  _BYTE *v30;
  void *v31[2];
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  void *v35[2];
  uint64_t v36;
  void *__p[2];
  uint64_t v38;

  v3 = a3;
  v4 = a2;
  if (*(_BYTE *)(a1 + 170))
  {
    if (*(_BYTE *)(a1 + 169))
    {
      for (i = 0; ; ++i)
      {
        if (v4[23] < 0)
        {
          if (i >= *((_QWORD *)v4 + 1))
          {
LABEL_12:
            for (j = 0; ; ++j)
            {
              if (v3[23] < 0)
              {
                if (j >= *((_QWORD *)v3 + 1))
                  goto LABEL_35;
                v11 = *(char **)v3;
              }
              else
              {
                v11 = v3;
                if (j >= v3[23])
                  goto LABEL_35;
              }
              v12 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v11[j]);
              v13 = v3;
              if (v3[23] < 0)
                v13 = *(char **)v3;
              v13[j] = v12;
            }
          }
          v7 = *(char **)v4;
        }
        else
        {
          v7 = v4;
          if (i >= v4[23])
            goto LABEL_12;
        }
        v8 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v7[i]);
        v9 = v4;
        if (v4[23] < 0)
          v9 = *(char **)v4;
        v9[i] = v8;
      }
    }
    v15 = 0;
    v16 = a2[23];
    if ((v16 & 0x80) != 0)
      goto LABEL_26;
    while (v15 < v16)
    {
      while (1)
      {
        ++v15;
        if ((v16 & 0x80) == 0)
          break;
LABEL_26:
        if (v15 >= *((_QWORD *)a2 + 1))
          goto LABEL_29;
      }
    }
LABEL_29:
    v17 = 0;
    v18 = a3[23];
    if ((v18 & 0x80) != 0)
      goto LABEL_32;
    while (v17 < v18)
    {
      while (1)
      {
        ++v17;
        if ((v18 & 0x80) == 0)
          break;
LABEL_32:
        if (v17 >= *((_QWORD *)a3 + 1))
          goto LABEL_35;
      }
    }
LABEL_35:
    if (v4[23] < 0)
    {
      v20 = v4;
      v4 = *(char **)v4;
      v19 = *((_QWORD *)v20 + 1);
    }
    else
    {
      v19 = v4[23];
    }
    std::regex_traits<char>::transform<std::__wrap_iter<char *>>((uint64_t)&v33, a1 + 16, v4, &v4[v19]);
    if (v3[23] < 0)
    {
      v22 = v3;
      v3 = *(char **)v3;
      v21 = *((_QWORD *)v22 + 1);
    }
    else
    {
      v21 = v3[23];
    }
    std::regex_traits<char>::transform<std::__wrap_iter<char *>>((uint64_t)v31, a1 + 16, v3, &v3[v21]);
    *(_OWORD *)v35 = v33;
    v36 = v34;
    v34 = 0;
    *(_OWORD *)__p = *(_OWORD *)v31;
    v38 = v32;
    v31[0] = 0;
    v31[1] = 0;
    v32 = 0;
    v33 = 0uLL;
    std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100]((void **)(a1 + 88), (__int128 *)v35);
    if (SHIBYTE(v38) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v36) < 0)
      operator delete(v35[0]);
    if (SHIBYTE(v32) < 0)
      operator delete(v31[0]);
    if (SHIBYTE(v34) < 0)
    {
      v23 = (void *)v33;
LABEL_69:
      operator delete(v23);
    }
  }
  else
  {
    if (a2[23] < 0)
      v14 = *((_QWORD *)a2 + 1);
    else
      v14 = a2[23];
    if (v14 != 1 || (a3[23] < 0 ? (v24 = *((_QWORD *)a3 + 1)) : (v24 = a3[23]), v24 != 1))
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>();
    if (*(_BYTE *)(a1 + 169))
    {
      v25 = a2;
      if (a2[23] < 0)
        v25 = *(char **)a2;
      v26 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *v25);
      v27 = v4;
      if (v4[23] < 0)
        v27 = *(_BYTE **)v4;
      *v27 = v26;
      v28 = v3;
      if (v3[23] < 0)
        v28 = *(char **)v3;
      v29 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *v28);
      v30 = v3;
      if (v3[23] < 0)
        v30 = *(_BYTE **)v3;
      *v30 = v29;
    }
    *(_OWORD *)v35 = *(_OWORD *)v4;
    v36 = *((_QWORD *)v4 + 2);
    *((_QWORD *)v4 + 1) = 0;
    *((_QWORD *)v4 + 2) = 0;
    *(_QWORD *)v4 = 0;
    *(_OWORD *)__p = *(_OWORD *)v3;
    v38 = *((_QWORD *)v3 + 2);
    *(_QWORD *)v3 = 0;
    *((_QWORD *)v3 + 1) = 0;
    *((_QWORD *)v3 + 2) = 0;
    std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100]((void **)(a1 + 88), (__int128 *)v35);
    if (SHIBYTE(v38) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v36) < 0)
    {
      v23 = v35[0];
      goto LABEL_69;
    }
  }
}

void sub_1BF8D09CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::pair<std::string const,std::string>::~pair((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5;
  __int16 v6;
  unint64_t v7;
  _WORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _WORD *v24;
  _WORD *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  __int16 v38;
  char *v39;
  __int16 v40;

  if (!*(_BYTE *)(a1 + 169))
  {
    v6 = a2 | (unsigned __int16)((_WORD)a3 << 8);
    v8 = *(_WORD **)(a1 + 120);
    v16 = *(_QWORD *)(a1 + 128);
    if (*(_BYTE *)(a1 + 170))
    {
      if ((unint64_t)v8 < v16)
        goto LABEL_24;
      v17 = *(_QWORD *)(a1 + 112);
      v18 = (uint64_t)v8 - v17;
      if ((uint64_t)v8 - v17 > -3)
      {
        v19 = v18 >> 1;
        v20 = v16 - v17;
        if (v20 <= (v18 >> 1) + 1)
          v21 = v19 + 1;
        else
          v21 = v20;
        if (v20 >= 0x7FFFFFFFFFFFFFFELL)
          v22 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v22 = v21;
        if (v22)
          v22 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>(v22);
        else
          v23 = 0;
        v25 = (_WORD *)(v22 + 2 * v19);
        v26 = v22 + 2 * v23;
        *v25 = v6;
        v24 = v25 + 1;
        v37 = *(char **)(a1 + 112);
        v27 = *(char **)(a1 + 120);
        if (v27 == v37)
          goto LABEL_46;
        do
        {
          v38 = *((_WORD *)v27 - 1);
          v27 -= 2;
          *--v25 = v38;
        }
        while (v27 != v37);
        goto LABEL_45;
      }
    }
    else
    {
      if ((unint64_t)v8 < v16)
        goto LABEL_24;
      v30 = *(_QWORD *)(a1 + 112);
      v31 = (uint64_t)v8 - v30;
      if ((uint64_t)v8 - v30 > -3)
      {
        v32 = v31 >> 1;
        v33 = v16 - v30;
        if (v33 <= (v31 >> 1) + 1)
          v34 = v32 + 1;
        else
          v34 = v33;
        if (v33 >= 0x7FFFFFFFFFFFFFFELL)
          v35 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v35 = v34;
        if (v35)
          v35 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>(v35);
        else
          v36 = 0;
        v25 = (_WORD *)(v35 + 2 * v32);
        v26 = v35 + 2 * v36;
        *v25 = v6;
        v24 = v25 + 1;
        v39 = *(char **)(a1 + 112);
        v27 = *(char **)(a1 + 120);
        if (v27 == v39)
          goto LABEL_46;
        do
        {
          v40 = *((_WORD *)v27 - 1);
          v27 -= 2;
          *--v25 = v40;
        }
        while (v27 != v39);
        goto LABEL_45;
      }
    }
LABEL_49:
    std::vector<BOOL>::__throw_length_error[abi:ne180100]();
  }
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
  v6 = v5 | (unsigned __int16)((*(unsigned __int16 (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a3) << 8);
  v8 = *(_WORD **)(a1 + 120);
  v7 = *(_QWORD *)(a1 + 128);
  if ((unint64_t)v8 < v7)
  {
LABEL_24:
    *v8 = v6;
    v24 = v8 + 1;
    goto LABEL_48;
  }
  v9 = *(_QWORD *)(a1 + 112);
  v10 = (uint64_t)v8 - v9;
  if ((uint64_t)v8 - v9 <= -3)
    goto LABEL_49;
  v11 = v10 >> 1;
  v12 = v7 - v9;
  if (v12 <= (v10 >> 1) + 1)
    v13 = v11 + 1;
  else
    v13 = v12;
  if (v12 >= 0x7FFFFFFFFFFFFFFELL)
    v14 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v14 = v13;
  if (v14)
    v14 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>(v14);
  else
    v15 = 0;
  v25 = (_WORD *)(v14 + 2 * v11);
  v26 = v14 + 2 * v15;
  *v25 = v6;
  v24 = v25 + 1;
  v28 = *(char **)(a1 + 112);
  v27 = *(char **)(a1 + 120);
  if (v27 == v28)
    goto LABEL_46;
  do
  {
    v29 = *((_WORD *)v27 - 1);
    v27 -= 2;
    *--v25 = v29;
  }
  while (v27 != v28);
LABEL_45:
  v27 = *(char **)(a1 + 112);
LABEL_46:
  *(_QWORD *)(a1 + 112) = v25;
  *(_QWORD *)(a1 + 120) = v24;
  *(_QWORD *)(a1 + 128) = v26;
  if (v27)
    operator delete(v27);
LABEL_48:
  *(_QWORD *)(a1 + 120) = v24;
}

void std::regex_traits<char>::transform<std::__wrap_iter<char *>>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  unint64_t v5;
  void **v6;
  void *__p[2];
  unsigned __int8 v8;

  std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, a3, a4, a4 - a3);
  v5 = v8;
  if ((v8 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v8 & 0x80u) != 0)
    v5 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a2 + 16) + 32))(*(_QWORD *)(a2 + 16), v6, (char *)v6 + v5);
  if ((char)v8 < 0)
    operator delete(__p[0]);
}

void sub_1BF8D0CAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](void **a1, __int128 *a2)
{
  char *v4;
  char *v5;
  __int128 v6;
  __int128 v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v4 = (char *)a1[1];
  v5 = (char *)a1[2];
  if (v4 >= v5)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a1) >> 4);
    v10 = v9 + 1;
    if (v9 + 1 > 0x555555555555555)
      std::vector<BOOL>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 4);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x2AAAAAAAAAAAAAALL)
      v12 = 0x555555555555555;
    else
      v12 = v10;
    if (v12)
      v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<siri::dialogengine::DatabaseField>>(v12);
    else
      v13 = 0;
    v14 = v12 + 48 * v9;
    v15 = v12 + 48 * v13;
    v16 = *a2;
    *(_QWORD *)(v14 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v14 = v16;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v17 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(v14 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v14 + 24) = v17;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v8 = (void *)(v14 + 48);
    v18 = (char *)*a1;
    v19 = (char *)a1[1];
    if (v19 == *a1)
    {
      *a1 = (void *)v14;
      a1[1] = v8;
      a1[2] = (void *)v15;
    }
    else
    {
      do
      {
        v20 = *((_OWORD *)v19 - 3);
        *(_QWORD *)(v14 - 32) = *((_QWORD *)v19 - 4);
        *(_OWORD *)(v14 - 48) = v20;
        *((_QWORD *)v19 - 5) = 0;
        *((_QWORD *)v19 - 4) = 0;
        *((_QWORD *)v19 - 6) = 0;
        v21 = *(_OWORD *)(v19 - 24);
        *(_QWORD *)(v14 - 8) = *((_QWORD *)v19 - 1);
        *(_OWORD *)(v14 - 24) = v21;
        v14 -= 48;
        *((_QWORD *)v19 - 2) = 0;
        *((_QWORD *)v19 - 1) = 0;
        *((_QWORD *)v19 - 3) = 0;
        v19 -= 48;
      }
      while (v19 != v18);
      v19 = (char *)*a1;
      v22 = (uint64_t)a1[1];
      *a1 = (void *)v14;
      a1[1] = v8;
      a1[2] = (void *)v15;
      while ((char *)v22 != v19)
      {
        v22 -= 48;
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(v22);
      }
    }
    if (v19)
      operator delete(v19);
  }
  else
  {
    v6 = *a2;
    *((_QWORD *)v4 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v4 = v6;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v7 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)v4 + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v4 + 24) = v7;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v8 = v4 + 48;
  }
  a1[1] = v8;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3B8D4D0](exception, 9);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], (void (*)(void *))MEMORY[0x1E0DE43B8]);
}

void sub_1BF8D0EA0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3B8D4D0](exception, 3);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], (void (*)(void *))MEMORY[0x1E0DE43B8]);
}

void sub_1BF8D0EEC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_char(std::basic_regex<char> *this, std::basic_regex<char>::value_type __c)
{
  uint64_t v2;
  std::basic_regex<_CharT, _Traits>::flag_type flags;
  uint64_t v5;
  std::__owns_one_state<char> *end;
  std::__node<char> *v7;
  uint64_t v8;
  std::__node<char> *first;
  std::__node<char> *v10;

  v2 = __c;
  flags = this->__flags_;
  if ((flags & 1) != 0)
  {
    v8 = operator new();
    first = this->__end_->__first_;
    *(_QWORD *)v8 = &off_1E7932310;
    *(_QWORD *)(v8 + 8) = first;
    std::locale::locale((std::locale *)(v8 + 16), &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    *(_BYTE *)(v8 + 40) = ((uint64_t (*)(const std::ctype<char> *, uint64_t))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v2);
LABEL_6:
    this->__end_->__first_ = (std::__node<char> *)v8;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    v8 = operator new();
    v10 = this->__end_->__first_;
    *(_QWORD *)v8 = &off_1E7932358;
    *(_QWORD *)(v8 + 8) = v10;
    std::locale::locale((std::locale *)(v8 + 16), &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    *(_BYTE *)(v8 + 40) = v2;
    goto LABEL_6;
  }
  v5 = operator new();
  end = this->__end_;
  v7 = end->__first_;
  *(_QWORD *)v5 = &off_1E79323A0;
  *(_QWORD *)(v5 + 8) = v7;
  *(_BYTE *)(v5 + 16) = v2;
  end->__first_ = (std::__node<char> *)v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void sub_1BF8D1028(_Unwind_Exception *a1)
{
  void (__cdecl ***v1)(std::__owns_one_state<char> *__hidden);
  std::locale *v2;
  void (__cdecl **v4)(std::__owns_one_state<char> *__hidden);

  std::locale::~locale(v2);
  v4 = v1[1];
  if (v4)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  MEMORY[0x1C3B8D890](v1, 0x10E1C4010F5D982);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__match_char<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  uint64_t v3;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

std::locale *std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E7932358;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E7932358;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__match_char_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  uint64_t v3;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

std::locale *std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E7932310;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E7932310;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1C3B8D890);
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (v4 = result,
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(result + 24) + 40))(*(_QWORD *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(_QWORD *)(a2 + 16);
    v5 = *(_QWORD *)(v4 + 8);
  }
  *(_QWORD *)(a2 + 80) = v5;
  return result;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](uint64_t a1)
{
  char v2;
  char v3;
  unint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  unint64_t v12;
  size_t v13;
  void *v14;
  unint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  _BYTE *v20;
  uint64_t v21;
  char *v22;
  _BYTE *v23;
  char v24;
  unint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  unint64_t v28;
  size_t v29;
  char *v30;
  char *v31;
  _BYTE *v32;
  char v33;
  _BYTE *v34;
  char v35;

  if (*(_BYTE *)(a1 + 169))
  {
    v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), 95);
    v3 = v2;
    v5 = *(_BYTE **)(a1 + 72);
    v4 = *(_QWORD *)(a1 + 80);
    if ((unint64_t)v5 < v4)
    {
      *v5 = v2;
      v6 = (uint64_t)(v5 + 1);
LABEL_32:
      *(_QWORD *)(a1 + 72) = v6;
      return;
    }
    v15 = *(_QWORD *)(a1 + 64);
    v16 = &v5[-v15];
    v17 = (uint64_t)&v5[-v15 + 1];
    if (v17 >= 0)
    {
      v18 = v4 - v15;
      if (2 * v18 > v17)
        v17 = 2 * v18;
      if (v18 >= 0x3FFFFFFFFFFFFFFFLL)
        v19 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      if (v19)
        v20 = operator new(v19);
      else
        v20 = 0;
      v22 = &v20[v19];
      v16[(_QWORD)v20] = v3;
      v6 = (uint64_t)&v16[(_QWORD)v20 + 1];
      if (v5 == (_BYTE *)v15)
      {
        v20 = &v16[(_QWORD)v20];
      }
      else
      {
        v23 = &v5[~v15];
        do
        {
          v24 = *--v5;
          (v23--)[(_QWORD)v20] = v24;
        }
        while (v5 != (_BYTE *)v15);
        v5 = *(_BYTE **)(a1 + 64);
      }
      *(_QWORD *)(a1 + 64) = v20;
      *(_QWORD *)(a1 + 72) = v6;
      *(_QWORD *)(a1 + 80) = v22;
      if (v5)
        operator delete(v5);
      goto LABEL_32;
    }
LABEL_55:
    std::vector<BOOL>::__throw_length_error[abi:ne180100]();
  }
  v8 = *(_BYTE **)(a1 + 72);
  v7 = *(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(a1 + 170))
  {
    if ((unint64_t)v8 >= v7)
    {
      v9 = *(_QWORD *)(a1 + 64);
      v10 = &v8[-v9];
      v11 = (uint64_t)&v8[-v9 + 1];
      if (v11 < 0)
        goto LABEL_55;
      v12 = v7 - v9;
      if (2 * v12 > v11)
        v11 = 2 * v12;
      if (v12 >= 0x3FFFFFFFFFFFFFFFLL)
        v13 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v13 = v11;
      if (v13)
        v14 = operator new(v13);
      else
        v14 = 0;
      v30 = &v10[(_QWORD)v14];
      v31 = (char *)v14 + v13;
      v10[(_QWORD)v14] = 95;
      v21 = (uint64_t)&v10[(_QWORD)v14 + 1];
      if (v8 != (_BYTE *)v9)
      {
        v32 = &v8[~v9];
        do
        {
          v33 = *--v8;
          (v32--)[(_QWORD)v14] = v33;
        }
        while (v8 != (_BYTE *)v9);
LABEL_50:
        v8 = *(_BYTE **)(a1 + 64);
        goto LABEL_52;
      }
      goto LABEL_51;
    }
  }
  else if ((unint64_t)v8 >= v7)
  {
    v25 = *(_QWORD *)(a1 + 64);
    v26 = &v8[-v25];
    v27 = (uint64_t)&v8[-v25 + 1];
    if (v27 < 0)
      goto LABEL_55;
    v28 = v7 - v25;
    if (2 * v28 > v27)
      v27 = 2 * v28;
    if (v28 >= 0x3FFFFFFFFFFFFFFFLL)
      v29 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v29 = v27;
    if (v29)
      v14 = operator new(v29);
    else
      v14 = 0;
    v30 = &v26[(_QWORD)v14];
    v31 = (char *)v14 + v29;
    v26[(_QWORD)v14] = 95;
    v21 = (uint64_t)&v26[(_QWORD)v14 + 1];
    if (v8 != (_BYTE *)v25)
    {
      v34 = &v8[~v25];
      do
      {
        v35 = *--v8;
        (v34--)[(_QWORD)v14] = v35;
      }
      while (v8 != (_BYTE *)v25);
      goto LABEL_50;
    }
LABEL_51:
    v14 = v30;
LABEL_52:
    *(_QWORD *)(a1 + 64) = v14;
    *(_QWORD *)(a1 + 72) = v21;
    *(_QWORD *)(a1 + 80) = v31;
    if (v8)
      operator delete(v8);
    goto LABEL_54;
  }
  *v8 = 95;
  v21 = (uint64_t)(v8 + 1);
LABEL_54:
  *(_QWORD *)(a1 + 72) = v21;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4)
{
  std::basic_regex<char> *v4;
  int locale_low;
  std::string *v6;
  std::basic_regex<char>::value_type locale;
  int v8;
  int v9;
  char v10;
  char v11;
  char v12;
  char v13;
  std::string::value_type v14;
  char v15;
  std::string::value_type v16;
  uint64_t v17;

  v4 = this;
  if (this != a3)
  {
    locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
    if (locale_low > 109)
    {
      switch(LOBYTE(this->__traits_.__loc_.__locale_))
      {
        case 'n':
          if (a4)
          {
            v6 = a4;
            locale = 10;
            goto LABEL_48;
          }
          locale = 10;
          goto LABEL_57;
        case 'r':
          if (a4)
          {
            v6 = a4;
            locale = 13;
            goto LABEL_48;
          }
          locale = 13;
          goto LABEL_57;
        case 't':
          if (a4)
          {
            v6 = a4;
            locale = 9;
            goto LABEL_48;
          }
          locale = 9;
          goto LABEL_57;
        case 'u':
          if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) != a3)
          {
            v8 = BYTE1(this->__traits_.__loc_.__locale_);
            if ((v8 & 0xF8) == 0x30 || (v8 & 0xFE) == 0x38 || (v8 | 0x20u) - 97 < 6)
            {
              v4 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2);
              if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) != a3)
              {
                v9 = LOBYTE(v4->__traits_.__loc_.__locale_);
                if ((v9 & 0xF8) == 0x30 || (v9 & 0xFE) == 0x38 || (v9 | 0x20u) - 97 < 6)
                  goto LABEL_23;
              }
            }
          }
          goto LABEL_62;
        case 'v':
          if (a4)
          {
            v6 = a4;
            locale = 11;
            goto LABEL_48;
          }
          locale = 11;
          break;
        case 'x':
LABEL_23:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 1) == a3)
            goto LABEL_62;
          v10 = BYTE1(v4->__traits_.__loc_.__locale_);
          v11 = -48;
          if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38)
            goto LABEL_28;
          v10 |= 0x20u;
          if ((v10 - 97) >= 6u)
            goto LABEL_62;
          v11 = -87;
LABEL_28:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 2) == a3)
            goto LABEL_62;
          v12 = BYTE2(v4->__traits_.__loc_.__locale_);
          v13 = -48;
          if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38)
            goto LABEL_33;
          v12 |= 0x20u;
          if ((v12 - 97) >= 6u)
            goto LABEL_62;
          v13 = -87;
LABEL_33:
          v14 = v13 + v12 + 16 * (v11 + v10);
          if (a4)
            std::string::operator=(a4, v14);
          else
            std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v14);
          return (std::basic_regex<char> *)((char *)v4 + 3);
        default:
          goto LABEL_43;
      }
      goto LABEL_57;
    }
    if (locale_low == 48)
    {
      if (a4)
      {
        v6 = a4;
        locale = 0;
        goto LABEL_48;
      }
      locale = 0;
LABEL_57:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, locale);
      return (std::basic_regex<char> *)((char *)v4 + 1);
    }
    if (locale_low != 99)
    {
      if (locale_low == 102)
      {
        if (a4)
        {
          v6 = a4;
          locale = 12;
LABEL_48:
          std::string::operator=(v6, locale);
          return (std::basic_regex<char> *)((char *)v4 + 1);
        }
        locale = 12;
        goto LABEL_57;
      }
LABEL_43:
      v17 = LOBYTE(this->__traits_.__loc_.__locale_);
      if ((_DWORD)v17 != 95 && ((v17 & 0x80) != 0 || (a1->__traits_.__ct_->__tab_[v17] & 0x500) == 0))
      {
        locale = (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_;
        if (a4)
        {
          v6 = a4;
          goto LABEL_48;
        }
        goto LABEL_57;
      }
LABEL_62:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    }
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3)
      goto LABEL_62;
    v15 = BYTE1(this->__traits_.__loc_.__locale_);
    if (((v15 & 0xDF) - 65) > 0x19u)
      goto LABEL_62;
    v16 = v15 & 0x1F;
    if (a4)
      std::string::operator=(a4, v16);
    else
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v16);
    return (std::basic_regex<char> *)((char *)v4 + 2);
  }
  return v4;
}

void std::regex_traits<char>::__lookup_collatename<char const*>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  std::string *p_s;
  unint64_t v7;
  unint64_t v8;
  std::string::size_type size;
  std::string *v10;
  int v11;
  uint64_t v12;
  std::string v13;
  std::string __s;

  std::string::__init_with_size[abi:ne180100]<char *,char *>(&__s, a3, a4, a4 - a3);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_)
      goto LABEL_9;
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&__s.__r_.__value_.__s + 23))
      return;
    p_s = &__s;
  }
  std::__get_collation_name(&v13, (const char *)p_s);
  *(_OWORD *)a1 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
  v7 = v13.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a1 + 16) = *((_QWORD *)&v13.__r_.__value_.__l + 2);
  v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a1 + 8);
  if (v8)
    goto LABEL_9;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __s.__r_.__value_.__l.__size_;
    if (__s.__r_.__value_.__l.__size_ >= 3)
      goto LABEL_9;
    v10 = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
      return;
    v10 = &__s;
  }
  (*(void (**)(std::string *__return_ptr, _QWORD, std::string *, char *))(**(_QWORD **)(a2 + 16) + 32))(&v13, *(_QWORD *)(a2 + 16), v10, (char *)v10 + size);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  *(std::string *)a1 = v13;
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    v11 = *(unsigned __int8 *)(a1 + 23);
    if (v11 != 12 && v11 != 1)
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_25;
  }
  v12 = *(_QWORD *)(a1 + 8);
  if (v12 == 1 || v12 == 12)
  {
LABEL_25:
    std::string::operator=((std::string *)a1, &__s);
    goto LABEL_9;
  }
  **(_BYTE **)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
}

void sub_1BF8D19D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
    operator delete(*(void **)v17);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3B8D4D0](exception, 1);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], (void (*)(void *))MEMORY[0x1E0DE43B8]);
}

void sub_1BF8D1A40(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3B8D4D0](exception, 2);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], (void (*)(void *))MEMORY[0x1E0DE43B8]);
}

void sub_1BF8D1A8C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  unint64_t v6;
  void **v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  void *__p[2];
  unsigned __int8 v12;

  std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, a3, a4, a4 - a3);
  v6 = v12;
  if ((v12 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v12 & 0x80u) != 0)
    v6 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a2 + 16) + 32))(*(_QWORD *)(a2 + 16), v7, (char *)v7 + v6);
  v8 = *(unsigned __int8 *)(a1 + 23);
  v9 = (char)v8;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a1 + 8);
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0)
        v10 = (_BYTE *)a1;
      else
        v10 = *(_BYTE **)a1;
      v10[11] = v10[3];
    }
    else if (v9 < 0)
    {
      **(_BYTE **)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 23) = 0;
    }
  }
  if ((char)v12 < 0)
    operator delete(__p[0]);
}

void sub_1BF8D1B84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::__add_equivalence[abi:ne180100](uint64_t *a1, __int128 *a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t result;

  v3 = a1 + 17;
  v4 = a1[18];
  if (v4 >= a1[19])
  {
    result = std::vector<std::string>::__push_back_slow_path<std::string const&>(v3, a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v3, a2);
    result = v4 + 24;
  }
  a1[18] = result;
  return result;
}

std::locale *std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  std::locale::__imp *v5;
  std::locale *v7;

  v7 = a1 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  v7 = a1 + 11;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  v5 = a1[1].__locale_;
  if (v5)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  std::locale::__imp *v5;
  std::locale *v7;

  v7 = a1 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  v7 = a1 + 11;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  v5 = a1[1].__locale_;
  if (v5)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v5 + 8))(v5);
  return MEMORY[0x1C3B8D890](a1, 0x10F1C4061CF1F02);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__exec(const std::__bracket_expression<char, std::regex_traits<char>> *this, std::__bracket_expression<char, std::regex_traits<char>>::__state *a2)
{
  char *current;
  char *last;
  char v6;
  char v7;
  uint64_t v8;
  _BOOL4 negate;
  std::string::size_type size;
  int v11;
  std::string::size_type v12;
  std::string *p_s;
  std::vector<std::pair<char, char>>::pointer begin;
  uint64_t v15;
  uint64_t v16;
  char *p_second;
  std::regex_traits<char> *p_traits;
  std::vector<std::pair<std::string, std::string>>::pointer v20;
  char v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  std::string::size_type v25;
  std::string *v26;
  uint64_t v27;
  unsigned __int8 *v28;
  BOOL v29;
  int v30;
  size_t v31;
  char *v32;
  size_t v33;
  int v34;
  _BOOL4 v35;
  int v36;
  size_t v37;
  char *v38;
  size_t v39;
  int v40;
  BOOL v41;
  int v42;
  std::string::size_type v43;
  unsigned __int8 v44;
  std::vector<char>::pointer v45;
  unint64_t v46;
  int v47;
  std::regex_traits<char>::char_class_type v48;
  int v49;
  std::vector<char>::pointer end;
  std::vector<char>::pointer v51;
  char *v52;
  std::vector<std::pair<std::string, std::string>>::pointer v53;
  std::vector<std::pair<std::string, std::string>>::pointer v54;
  unsigned int v55;
  int64_t v56;
  uint64_t v57;
  unint64_t v58;
  std::string::size_type v59;
  std::string *v60;
  uint64_t v61;
  unsigned __int8 *v62;
  BOOL v63;
  int v64;
  size_t v65;
  char *v66;
  size_t v67;
  int v68;
  _BOOL4 v69;
  int v70;
  size_t v71;
  char *v72;
  size_t v73;
  int v74;
  BOOL v75;
  std::vector<std::string>::pointer v76;
  uint64_t v77;
  int64_t v78;
  uint64_t v79;
  unint64_t v80;
  __int128 v81;
  std::string::size_type v82;
  uint64_t v83;
  BOOL v84;
  std::string *v85;
  std::string::size_type v86;
  int v87;
  std::string *v88;
  std::string *v89;
  uint64_t v90;
  unint64_t v91;
  int v92;
  std::regex_traits<char>::char_class_type v93;
  int v94;
  std::vector<std::string>::pointer v95;
  uint64_t v96;
  int64_t v97;
  uint64_t v98;
  unint64_t v99;
  __int128 v100;
  std::string::size_type v101;
  uint64_t v102;
  BOOL v103;
  std::string *v104;
  std::string::size_type v105;
  int v106;
  std::string *v107;
  std::string *v108;
  uint64_t v109;
  int v110;
  std::regex_traits<char>::char_class_type mask;
  const std::ctype_base::mask *tab;
  std::ctype_base::mask v113;
  std::regex_traits<char>::char_class_type neg_mask;
  int v115;
  std::__node<char> *first;
  int v117;
  char v118;
  char v119;
  uint64_t v120;
  _BOOL4 v121;
  _BOOL4 v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  std::string __p;
  __int16 v128;
  std::string v129;
  std::string __s;

  current = a2->__current_;
  last = a2->__last_;
  if (current == last)
  {
    v8 = 0;
    negate = this->__negate_;
    goto LABEL_238;
  }
  if (!this->__might_have_digraph_ || current + 1 == last)
    goto LABEL_67;
  v6 = *current;
  LOBYTE(v128) = *current;
  v7 = current[1];
  HIBYTE(v128) = v7;
  if (this->__icase_)
  {
    LOBYTE(v128) = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v6);
    HIBYTE(v128) = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v7);
  }
  *((_BYTE *)&__s.__r_.__value_.__s + 23) = 2;
  LOWORD(__s.__r_.__value_.__l.__data_) = v128;
  __s.__r_.__value_.__s.__data_[2] = 0;
  memset(&__p, 0, sizeof(__p));
  std::__get_collation_name(&v129, (const char *)&__s);
  __p = v129;
  size = HIBYTE(v129.__r_.__value_.__r.__words[2]);
  v11 = SHIBYTE(v129.__r_.__value_.__r.__words[2]);
  if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v129.__r_.__value_.__l.__size_;
  if (size)
    goto LABEL_11;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    v12 = __s.__r_.__value_.__l.__size_;
    if (__s.__r_.__value_.__l.__size_ >= 3)
      goto LABEL_11;
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    v12 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
      goto LABEL_16;
    p_s = &__s;
  }
  (*(void (**)(std::string *__return_ptr, const std::collate<char> *, std::string *, char *))(*(_QWORD *)this->__traits_.__col_ + 32))(&v129, this->__traits_.__col_, p_s, (char *)p_s + v12);
  if (v11 < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = v129;
  if ((SHIBYTE(v129.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (HIBYTE(v129.__r_.__value_.__r.__words[2]) != 12 && HIBYTE(v129.__r_.__value_.__r.__words[2]) != 1)
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
      goto LABEL_11;
    }
    goto LABEL_180;
  }
  if (__p.__r_.__value_.__l.__size_ == 1 || __p.__r_.__value_.__l.__size_ == 12)
  {
LABEL_180:
    std::string::operator=(&__p, &__s);
    goto LABEL_11;
  }
  *__p.__r_.__value_.__l.__data_ = 0;
  __p.__r_.__value_.__l.__size_ = 0;
LABEL_11:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
LABEL_16:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    v43 = __p.__r_.__value_.__l.__size_;
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v43)
      goto LABEL_18;
LABEL_67:
    negate = 0;
    v8 = 1;
    goto LABEL_68;
  }
  if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
    goto LABEL_67;
LABEL_18:
  begin = this->__digraphs_.__begin_;
  v15 = (char *)this->__digraphs_.__end_ - (char *)begin;
  if (v15)
  {
    v16 = v15 >> 1;
    if ((unint64_t)(v15 >> 1) <= 1)
      v16 = 1;
    p_second = &begin->second;
    while (v128 != *(p_second - 1) || HIBYTE(v128) != *p_second)
    {
      p_second += 2;
      if (!--v16)
        goto LABEL_27;
    }
    goto LABEL_235;
  }
LABEL_27:
  p_traits = &this->__traits_;
  if (!this->__collate_ || this->__ranges_.__begin_ == this->__ranges_.__end_)
  {
    negate = 0;
  }
  else
  {
    std::regex_traits<char>::transform<char *>((uint64_t)&__s, (uint64_t)&this->__traits_, (char *)&v128, (char *)&v129);
    v20 = this->__ranges_.__begin_;
    v21 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    v22 = (char *)this->__ranges_.__end_ - (char *)v20;
    if (v22)
    {
      v23 = 0;
      v24 = v22 / 48;
      v118 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
      if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v25 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
      else
        v25 = __s.__r_.__value_.__l.__size_;
      if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v26 = &__s;
      else
        v26 = (std::string *)__s.__r_.__value_.__r.__words[0];
      if (v24 <= 1)
        v27 = 1;
      else
        v27 = v22 / 48;
      v28 = (unsigned __int8 *)&v20->second.__r_.__value_.__r.__words[2] + 7;
      v29 = 1;
      while (1)
      {
        v30 = (char)*(v28 - 24);
        if (v30 >= 0)
          v31 = *(v28 - 24);
        else
          v31 = *(_QWORD *)(v28 - 39);
        if (v30 >= 0)
          v32 = (char *)(v28 - 47);
        else
          v32 = *(char **)(v28 - 47);
        if (v31 >= v25)
          v33 = v25;
        else
          v33 = v31;
        v34 = memcmp(v26, v32, v33);
        v35 = v25 >= v31;
        if (v34)
          v35 = v34 >= 0;
        if (v35)
        {
          v36 = (char)*v28;
          if (v36 >= 0)
            v37 = *v28;
          else
            v37 = *(_QWORD *)(v28 - 15);
          if (v36 >= 0)
            v38 = (char *)(v28 - 23);
          else
            v38 = *(char **)(v28 - 23);
          if (v25 >= v37)
            v39 = v37;
          else
            v39 = v25;
          v40 = memcmp(v38, v26, v39);
          v41 = v37 >= v25;
          if (v40)
            v41 = v40 >= 0;
          if (v41)
            break;
        }
        v29 = ++v23 < v24;
        v28 += 48;
        if (v27 == v23)
        {
          v42 = 0;
          negate = 0;
          goto LABEL_182;
        }
      }
      negate = 1;
      v42 = 5;
LABEL_182:
      p_traits = &this->__traits_;
      v21 = v118;
    }
    else
    {
      v29 = 0;
      v42 = 0;
      negate = 0;
    }
    if (v21 < 0)
      operator delete(__s.__r_.__value_.__l.__data_);
    if (v29)
      goto LABEL_213;
  }
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
  {
LABEL_217:
    if ((char)v128 < 0)
    {
      neg_mask = this->__neg_mask_;
    }
    else
    {
      mask = this->__mask_;
      tab = this->__traits_.__ct_->__tab_;
      v113 = tab[v128];
      if (((v113 & mask) != 0 || v128 == 95 && (mask & 0x80) != 0)
        && (SHIBYTE(v128) & 0x80000000) == 0
        && ((tab[HIBYTE(v128)] & mask) != 0 || (mask & 0x80) != 0 && HIBYTE(v128) == 95))
      {
        goto LABEL_235;
      }
      neg_mask = this->__neg_mask_;
      if ((v113 & neg_mask) != 0 || v128 == 95 && (neg_mask & 0x80) != 0)
      {
LABEL_234:
        v115 = negate;
LABEL_236:
        negate = v115;
        goto LABEL_237;
      }
    }
    if ((SHIBYTE(v128) & 0x80000000) == 0)
    {
      if ((this->__traits_.__ct_->__tab_[HIBYTE(v128)] & neg_mask) == 0)
      {
        v115 = 1;
        if (HIBYTE(v128) != 95 || (neg_mask & 0x80) == 0)
          goto LABEL_236;
      }
      goto LABEL_234;
    }
LABEL_235:
    v115 = 1;
    goto LABEL_236;
  }
  std::regex_traits<char>::__transform_primary<char *>((uint64_t)&__s, (uint64_t)p_traits, (char *)&v128, (char *)&v129);
  v95 = this->__equivalences_.__begin_;
  v96 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  v97 = (char *)this->__equivalences_.__end_ - (char *)v95;
  if (!v97)
  {
    if ((*((_BYTE *)&__s.__r_.__value_.__s + 23) & 0x80) != 0)
      operator delete(__s.__r_.__value_.__l.__data_);
    goto LABEL_217;
  }
  v98 = 0;
  v99 = v97 / 24;
  v100 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v101 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  else
    v101 = __s.__r_.__value_.__l.__size_;
  if (v99 <= 1)
    v102 = 1;
  else
    v102 = v97 / 24;
  v103 = 1;
  while (1)
  {
    v104 = &v95[v98];
    v105 = HIBYTE(v104->__r_.__value_.__r.__words[2]);
    v106 = (char)v105;
    if ((v105 & 0x80u) != 0)
      v105 = v104->__r_.__value_.__l.__size_;
    if (v101 != v105)
      goto LABEL_208;
    v107 = v106 >= 0 ? &v95[v98] : (std::string *)v104->__r_.__value_.__r.__words[0];
    if ((v96 & 0x80) == 0)
      break;
    v123 = v99;
    v126 = v96;
    v110 = memcmp((const void *)v100, v107, *((size_t *)&v100 + 1));
    v99 = v123;
    v96 = v126;
    if (!v110)
    {
      v42 = 5;
      negate = 1;
      goto LABEL_211;
    }
LABEL_208:
    v103 = ++v98 < v99;
    if (v98 == v102)
    {
      v42 = 0;
      goto LABEL_210;
    }
  }
  if (!(_DWORD)v96)
  {
    negate = 1;
    if (v103)
      goto LABEL_237;
    goto LABEL_217;
  }
  v108 = &__s;
  v109 = v96;
  do
  {
    if (v108->__r_.__value_.__s.__data_[0] != v107->__r_.__value_.__s.__data_[0])
      goto LABEL_208;
    v108 = (std::string *)((char *)v108 + 1);
    v107 = (std::string *)((char *)v107 + 1);
    --v109;
  }
  while (v109);
  negate = 1;
  v42 = 5;
LABEL_210:
  if ((v96 & 0x80) != 0)
LABEL_211:
    operator delete(__s.__r_.__value_.__l.__data_);
  if (!v103)
    goto LABEL_217;
LABEL_213:
  if (v42)
  {
LABEL_237:
    v8 = 2;
    goto LABEL_238;
  }
  v8 = 2;
LABEL_68:
  v44 = *a2->__current_;
  v129.__r_.__value_.__s.__data_[0] = v44;
  if (this->__icase_)
  {
    v44 = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, (char)v44);
    v129.__r_.__value_.__s.__data_[0] = v44;
  }
  v45 = this->__chars_.__begin_;
  v46 = this->__chars_.__end_ - v45;
  if (v46)
  {
    if (v46 <= 1)
      v46 = 1;
    while (1)
    {
      v47 = *v45++;
      if (v47 == v44)
        break;
      if (!--v46)
        goto LABEL_75;
    }
LABEL_168:
    negate = 1;
    goto LABEL_238;
  }
LABEL_75:
  v48 = this->__neg_mask_;
  if (v48 || this->__neg_chars_.__begin_ != this->__neg_chars_.__end_)
  {
    if ((v44 & 0x80) != 0 || (this->__traits_.__ct_->__tab_[v44] & v48) == 0)
      v49 = (v44 == 95) & (v48 >> 7);
    else
      LOBYTE(v49) = 1;
    end = this->__neg_chars_.__end_;
    v51 = (std::vector<char>::pointer)memchr(this->__neg_chars_.__begin_, (char)v44, end - this->__neg_chars_.__begin_);
    v52 = v51 ? v51 : end;
    if ((v49 & 1) == 0 && v52 == end)
      goto LABEL_168;
  }
  v53 = this->__ranges_.__begin_;
  v54 = this->__ranges_.__end_;
  if (v53 != v54)
  {
    if (this->__collate_)
    {
      std::regex_traits<char>::transform<char *>((uint64_t)&__s, (uint64_t)&this->__traits_, (char *)&v129, &v129.__r_.__value_.__s.__data_[1]);
      v53 = this->__ranges_.__begin_;
      v54 = this->__ranges_.__end_;
      v55 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    }
    else
    {
      v55 = 1;
      *((_BYTE *)&__s.__r_.__value_.__s + 23) = 1;
      LOWORD(__s.__r_.__value_.__l.__data_) = v44;
    }
    v56 = (char *)v54 - (char *)v53;
    if (v56)
    {
      v124 = v8;
      v121 = negate;
      v57 = 0;
      v58 = v56 / 48;
      v119 = v55;
      if ((v55 & 0x80u) == 0)
        v59 = v55;
      else
        v59 = __s.__r_.__value_.__l.__size_;
      if ((v55 & 0x80u) == 0)
        v60 = &__s;
      else
        v60 = (std::string *)__s.__r_.__value_.__r.__words[0];
      if (v58 <= 1)
        v61 = 1;
      else
        v61 = v56 / 48;
      v62 = (unsigned __int8 *)&v53->second.__r_.__value_.__r.__words[2] + 7;
      v63 = 1;
      while (1)
      {
        v64 = (char)*(v62 - 24);
        if (v64 >= 0)
          v65 = *(v62 - 24);
        else
          v65 = *(_QWORD *)(v62 - 39);
        if (v64 >= 0)
          v66 = (char *)(v62 - 47);
        else
          v66 = *(char **)(v62 - 47);
        if (v65 >= v59)
          v67 = v59;
        else
          v67 = v65;
        v68 = memcmp(v60, v66, v67);
        v69 = v59 >= v65;
        if (v68)
          v69 = v68 >= 0;
        if (v69)
        {
          v70 = (char)*v62;
          if (v70 >= 0)
            v71 = *v62;
          else
            v71 = *(_QWORD *)(v62 - 15);
          if (v70 >= 0)
            v72 = (char *)(v62 - 23);
          else
            v72 = *(char **)(v62 - 23);
          if (v59 >= v71)
            v73 = v71;
          else
            v73 = v59;
          v74 = memcmp(v72, v60, v73);
          v75 = v71 >= v59;
          if (v74)
            v75 = v74 >= 0;
          if (v75)
            break;
        }
        v63 = ++v57 < v58;
        v62 += 48;
        if (v61 == v57)
        {
          negate = v121;
          goto LABEL_131;
        }
      }
      negate = 1;
LABEL_131:
      v8 = v124;
      if (v119 < 0)
LABEL_132:
        operator delete(__s.__r_.__value_.__l.__data_);
    }
    else
    {
      v63 = 0;
      if ((v55 & 0x80) != 0)
        goto LABEL_132;
    }
    if (v63)
      goto LABEL_238;
  }
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
    goto LABEL_163;
  std::regex_traits<char>::__transform_primary<char *>((uint64_t)&__s, (uint64_t)&this->__traits_, (char *)&v129, &v129.__r_.__value_.__s.__data_[1]);
  v76 = this->__equivalences_.__begin_;
  v77 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  v78 = (char *)this->__equivalences_.__end_ - (char *)v76;
  if (!v78)
  {
    if ((*((_BYTE *)&__s.__r_.__value_.__s + 23) & 0x80) != 0)
      operator delete(__s.__r_.__value_.__l.__data_);
    goto LABEL_163;
  }
  v125 = v8;
  v79 = 0;
  v80 = v78 / 24;
  v81 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v82 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  else
    v82 = __s.__r_.__value_.__l.__size_;
  if (v80 <= 1)
    v83 = 1;
  else
    v83 = v78 / 24;
  v84 = 1;
  while (2)
  {
    v85 = &v76[v79];
    v86 = HIBYTE(v85->__r_.__value_.__r.__words[2]);
    v87 = (char)v86;
    if ((v86 & 0x80u) != 0)
      v86 = v85->__r_.__value_.__l.__size_;
    if (v82 != v86)
    {
LABEL_156:
      v84 = ++v79 < v80;
      if (v79 == v83)
      {
LABEL_157:
        v8 = v125;
        if ((v77 & 0x80) == 0)
          goto LABEL_159;
        goto LABEL_158;
      }
      continue;
    }
    break;
  }
  if (v87 >= 0)
    v88 = &v76[v79];
  else
    v88 = (std::string *)v85->__r_.__value_.__r.__words[0];
  if ((v77 & 0x80) != 0)
  {
    v122 = negate;
    v91 = v80;
    v120 = v83;
    v92 = memcmp((const void *)v81, v88, *((size_t *)&v81 + 1));
    v83 = v120;
    v80 = v91;
    negate = v122;
    if (!v92)
    {
      negate = 1;
      v8 = v125;
LABEL_158:
      operator delete(__s.__r_.__value_.__l.__data_);
      goto LABEL_159;
    }
    goto LABEL_156;
  }
  if ((_DWORD)v77)
  {
    v89 = &__s;
    v90 = v77;
    while (v89->__r_.__value_.__s.__data_[0] == v88->__r_.__value_.__s.__data_[0])
    {
      v89 = (std::string *)((char *)v89 + 1);
      v88 = (std::string *)((char *)v88 + 1);
      if (!--v90)
      {
        negate = 1;
        goto LABEL_157;
      }
    }
    goto LABEL_156;
  }
  negate = 1;
  v8 = v125;
LABEL_159:
  if (!v84)
  {
LABEL_163:
    if (v129.__r_.__value_.__s.__data_[0] < 0)
      goto LABEL_238;
    v93 = this->__mask_;
    if ((this->__traits_.__ct_->__tab_[v129.__r_.__value_.__s.__data_[0]] & v93) == 0)
    {
      v94 = (v93 >> 7) & 1;
      if (v129.__r_.__value_.__s.__data_[0] != 95)
        v94 = 0;
      if (v94 != 1)
        goto LABEL_238;
    }
    goto LABEL_168;
  }
LABEL_238:
  if (negate == this->__negate_)
  {
    first = 0;
    v117 = -993;
  }
  else
  {
    a2->__current_ += v8;
    first = this->__first_;
    v117 = -995;
  }
  a2->__do_ = v117;
  a2->__node_ = first;
}

void sub_1BF8D2740(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a18 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::transform<char *>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  unint64_t v5;
  void **v6;
  void *__p[2];
  unsigned __int8 v8;

  std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, a3, a4, a4 - a3);
  v5 = v8;
  if ((v8 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v8 & 0x80u) != 0)
    v5 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a2 + 16) + 32))(*(_QWORD *)(a2 + 16), v6, (char *)v6 + v5);
  if ((char)v8 < 0)
    operator delete(__p[0]);
}

void sub_1BF8D2808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__transform_primary<char *>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  unint64_t v6;
  void **v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  void *__p[2];
  unsigned __int8 v12;

  std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, a3, a4, a4 - a3);
  v6 = v12;
  if ((v12 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v12 & 0x80u) != 0)
    v6 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a2 + 16) + 32))(*(_QWORD *)(a2 + 16), v7, (char *)v7 + v6);
  v8 = *(unsigned __int8 *)(a1 + 23);
  v9 = (char)v8;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a1 + 8);
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0)
        v10 = (_BYTE *)a1;
      else
        v10 = *(_BYTE **)a1;
      v10[11] = v10[3];
    }
    else if (v9 < 0)
    {
      **(_BYTE **)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 23) = 0;
    }
  }
  if ((char)v12 < 0)
    operator delete(__p[0]);
}

